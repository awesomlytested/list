{"repo":"Meituan-Dianping/mpvue","url":"https://github.com/Meituan-Dianping/mpvue","branch":"master","configs":[{"package":"vue","lang":"js","dir":"test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"tag a","suites":["a"],"line":25,"updatePoint":{"line":25,"column":11,"index":842},"code":"  it('tag a', () => {\n    assertCodegen(`<a></a>`, `<template name=\"a\"><view class=\"_a\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"tag a href","suites":["a"],"line":30,"updatePoint":{"line":30,"column":16,"index":988},"code":"  it('tag a href', () => {\n    assertCodegen(`<a href=\"s\"></a>`, `<template name=\"a\"><navigator url=\"s\" class=\"_a\"></navigator></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"tag a :href","suites":["a"],"line":35,"updatePoint":{"line":35,"column":17,"index":1162},"code":"  it('tag a :href', () => {\n    assertCodegen(`<a :href=\"s\"></a>`, `<template name=\"a\"><navigator url=\"{{s}}\" class=\"_a\"></navigator></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"input type","suites":["a"],"line":40,"updatePoint":{"line":40,"column":16,"index":1340},"code":"  it('input type', () => {\n    assertCodegen(`<input type=\"button\" value=\"Click me\"></input>`, `<template name=\"a\"><button class=\"_input\">Click me</button></template>`, {\n      name: 'a'\n    });\n    assertCodegen(`<input type=\"radio\"></input>`, `<template name=\"a\"><radio class=\"_input\" /></template>`, {\n      name: 'a'\n    });\n    assertCodegen(`<input type=\"checkbox\" ></input>`, `<template name=\"a\"><checkbox class=\"_input\" /></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-if","suites":["指令"],"line":53,"updatePoint":{"line":53,"column":10,"index":1837},"code":"  it('v-if', () => {\n    assertCodegen(`<div v-if=\"ss\"></div>`, `<template name=\"a\"><view wx:if=\"{{ss}}\" class=\"_div\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-for","suites":["指令"],"line":58,"updatePoint":{"line":58,"column":11,"index":2009},"code":"  it('v-for', () => {\n    assertCodegen(`<div><div v-for=\"(item, indexx) in ss\" :key=\"indexx\"></div></div>`, `<template name=\"a\"><view class=\"_div\"><view wx:key=\"indexx\" key=\"{{indexx}}\" wx:for=\"{{ss}}\" wx:for-index=\"indexx\" wx:for-item=\"item\" class=\"_div\"></view></view></template>`, {\n      name: 'a'\n    }); // bug mpcomid=\"'0-'+index\"\n\n    assertCodegen(`<div><my-component v-for=\"item in items\" :key=\"item.id\"></my-component></div>`, `<import src=\"/components/card\" /><template name=\"a\"><view class=\"_div hashValue\"><template wx:key=\"item.id\" data=\"{{...$root[$kk+'0-'+index], $root}}\" is=\"my-component\" wx:for=\"{{items}}\" wx:for-index=\"index\" wx:for-item=\"item\"></template></view></template>`, {\n      name: 'a',\n      components: {\n        'my-component': {\n          name: 'my-component',\n          src: '/components/card'\n        }\n      },\n      moduleId: 'hashValue'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-if && v-for","suites":["指令"],"line":74,"updatePoint":{"line":74,"column":19,"index":2909},"code":"  it('v-if && v-for', () => {\n    assertCodegen(`<div><p v-if=\"item.length\" v-for=\"item in list\"></p></div>`, `<template name=\"a\"><view class=\"_div\"><view wx:if=\"{{item.length}}\" wx:for=\"{{list}}\" wx:for-index=\"index\" wx:for-item=\"item\" class=\"_p\"></view></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-if && event","suites":["指令"],"line":79,"updatePoint":{"line":79,"column":19,"index":3217},"code":"  it('v-if && event', () => {\n    assertCodegen(`<div v-if=\"item.length\" @click=\"clickHandle\"></div>`, `<template name=\"a\"><view wx:if=\"{{item.length}}\" bindtap=\"handleProxy\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_div\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-if && v-for && event","suites":["指令"],"line":84,"updatePoint":{"line":84,"column":28,"index":3511},"code":"  it('v-if && v-for && event', () => {\n    assertCodegen(`<div><p v-if=\"item.length\" v-for=\"item in list\" @click=\"clickHandle\"></p></div>`, `<template name=\"a\"><view class=\"_div\"><view wx:if=\"{{item.length}}\" bindtap=\"handleProxy\" data-eventid=\"{{'0-'+index}}\" data-comkey=\"{{$k}}\" wx:for=\"{{list}}\" wx:for-index=\"index\" wx:for-item=\"item\" class=\"_p\"></view></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-for && event","suites":["指令"],"line":89,"updatePoint":{"line":89,"column":20,"index":3914},"code":"  it('v-for && event', () => {\n    assertCodegen(`<div><p v-for=\"item in list\" @click=\"clickHandle\"></p></div>`, `<template name=\"a\"><view class=\"_div\"><view bindtap=\"handleProxy\" data-eventid=\"{{'0-'+index}}\" data-comkey=\"{{$k}}\" wx:for=\"{{list}}\" wx:for-index=\"index\" wx:for-item=\"item\" class=\"_p\"></view></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-bind","suites":["指令"],"line":94,"updatePoint":{"line":94,"column":12,"index":4266},"code":"  it('v-bind', () => {\n    assertCodegen(`<div :a=\"s\"></div>`, `<template name=\"a\"><view a=\"{{s}}\" class=\"_div\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-bind","suites":["指令"],"line":99,"updatePoint":{"line":99,"column":12,"index":4431},"code":"  it('v-bind', () => {\n    assertCodegen(`<div v-bind:a=\"s\"></div>`, `<template name=\"a\"><view a=\"{{s}}\" class=\"_div\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-bind","suites":["指令"],"line":104,"updatePoint":{"line":104,"column":12,"index":4602},"code":"  it('v-bind', () => {\n    assertCodegen(`<div v-bind:a=\"a + 1\"></div>`, `<template name=\"a\"><view a=\"{{a + 1}}\" class=\"_div\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-bind:class","suites":["指令"],"line":109,"updatePoint":{"line":109,"column":18,"index":4787},"code":"  it('v-bind:class', () => {\n    assertCodegen(`<div v-bind:class=\"{ active: isActive }\"></div>`, `<template name=\"a\"><view class=\"_div {{[isActive ? 'active' : '']}}\"></view></template>`, {\n      name: 'a'\n    });\n    assertCodegen(`<div class=\"static\"  v-bind:class=\"{ active: isActive, 'textDanger': hasError }\"></div>`, `<template name=\"a\"><view class=\"_div static {{[isActive ? 'active' : '', hasError ? 'textDanger' : '']}}\"></view></template>`, {\n      name: 'a'\n    });\n    assertCodegen(`<my-component class=\"baz boo\"></my-component>`, `<import src=\"/components/card\" /><template name=\"a\"><template data=\"{{...$root[$kk+'0'], $root}}\" is=\"my-component\"></template></template>`, {\n      name: 'a',\n      components: {\n        'my-component': {\n          name: 'my-component',\n          src: '/components/card'\n        }\n      },\n      moduleId: 'hashValue'\n    }, {\n      mpTips: ['template 不支持此属性-> class=\"baz boo\"'],\n      mpErrors: []\n    }); // object\n\n    assertCodegen(`<div><p :class=\"{ active: isActive }\">233</p></div>`, `<template name=\"a\"><view class=\"_div\"><view class=\"_p {{[isActive ? 'active' : '']}}\">233</view></view></template>`, {\n      name: 'a'\n    });\n    assertCodegen(`<div><p class=\"static\" v-bind:class=\"{ active: isActive, 'text-danger': hasError }\">233</p></div>`, `<template name=\"a\"><view class=\"_div\"><view class=\"_p static {{[isActive ? 'active' : '', hasError ? 'text-danger' : '']}}\">233</view></view></template>`, {\n      name: 'a'\n    });\n    assertCodegen(`<div><p class=\"static\" v-bind:class=\"computedClassStr\">233</p></div>`, `<template name=\"a\"><view class=\"_div\"><view class=\"_p static {{computedClassStr}}\">233</view></view></template>`, {\n      name: 'a'\n    }); // TODO, classObject 暂不支持\n    // assertCodegen(\n    //   `<div><p class=\"static\" v-bind:class=\"classObject\">233</p></div>`,\n    //   `<template name=\"a\"><view class=\"_div static {{( isActive)? 'active' : ' '}} {{( hasError )? 'text-danger' : ' '}}\"></view></template>`,\n    //   { name: 'a' }\n    // )\n    // array\n\n    assertCodegen(`<div><p class=\"static\" :class=\"[activeClass, errorClass]\">233</p></div>`, `<template name=\"a\"><view class=\"_div\"><view class=\"_p static {{[activeClass, errorClass]}}\">233</view></view></template>`, {\n      name: 'a'\n    });\n    assertCodegen(`<div><p class=\"static\" v-bind:class=\"[isActive ? activeClass : '', errorClass]\">233</p></div>`, `<template name=\"a\"><view class=\"_div\"><view class=\"_p static {{[isActive ? activeClass : '', errorClass]}}\">233</view></view></template>`, {\n      name: 'a'\n    });\n    assertCodegen(`<div><p class=\"static\" v-bind:class=\"[{ active: isActive }, errorClass]\">233</p></div>`, `<template name=\"a\"><view class=\"_div\"><view class=\"_p static {{[[isActive ? 'active' : ''], errorClass]}}\">233</view></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-bind:style","suites":["指令"],"line":156,"updatePoint":{"line":156,"column":18,"index":7620},"code":"  it('v-bind:style', () => {\n    assertCodegen(`<div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\">111</div>`, `<template name=\"a\"><view class=\"_div\" style=\" {{('color:' + activeColor + ';' + 'font-size:' + (fontSize + 'px') + ';')}}\">111</view></template>`, {\n      name: 'a'\n    });\n    assertCodegen(`<div v-bind:style=\"{ color: a === b ? activeColor : color, fontSize: fontSize + 'px' }\">111</div>`, `<template name=\"a\"><view class=\"_div\" style=\" {{(  'color:' +  (a === b ? activeColor : color) +  ';' +  'font-size:' +  (fontSize + 'px') +  ';')}}\">111</view></template>`, {\n      name: 'a'\n    });\n    assertCodegen(`<div v-bind:style=\"[{ color: activeColor, fontSize: fontSize + 'px' }]\">111</div>`, `<template name=\"a\"><view class=\"_div\" style=\" {{['color:' + activeColor + ';' + 'font-size:' + (fontSize + 'px') + ';']}}\">111</view></template>`, {\n      name: 'a'\n    });\n    assertCodegen(`<div v-bind:style=\"computedStyleStr\">222</div>`, `<template name=\"a\"><view class=\"_div\" style=\" {{computedStyleStr}}\">222</view></template>`, {\n      name: 'a'\n    }); // TODO, 等微信支持了再支持\n    // assertCodegen(\n    //   `<div v-bind:style=\"styleObject\">222</div>`,\n    //   `<template name=\"a\"><view class=\"_div\" style=\" {{tyleObjec}}\">222</view></template>`,\n    //   { name: 'a' }\n    // )\n    // assertCodegen(\n    //   `<div v-bind:style=\"[baseStyles, overridingStyles]\">333</div>`,\n    //   `<template name=\"a\"><view class=\"_div\" style=\" {{baseStyles, overridingStyles}}\">333</view></template>`,\n    //   { name: 'a' }\n    // )\n    // assertCodegen(\n    //   `<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\">444</div>`,\n    //   `<template name=\"a\"><view class=\"_div\" style=\" {{'display:' + ['-webkit-box', '-ms-flexbox', 'flex'] + ';'}}\">444</view></template>`,\n    //   { name: 'a' }\n    // )\n\n    assertCodegen(`<my-component style=\"color: red;\"></my-component>`, `<import src=\"/components/card\" /><template name=\"a\"><template data=\"{{...$root[$kk+'0'], $root}}\" is=\"my-component\"></template></template>`, {\n      name: 'a',\n      components: {\n        'my-component': {\n          name: 'my-component',\n          src: '/components/card'\n        }\n      },\n      moduleId: 'hashValue'\n    }, {\n      mpTips: ['template 不支持此属性-> style=\"color: red;\"'],\n      mpErrors: []\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-text","suites":["指令"],"line":199,"updatePoint":{"line":199,"column":12,"index":9941},"code":"  it('v-text', () => {\n    assertCodegen(`<div v-text=\"s\"></div>`, `<template name=\"a\"><view class=\"_div\">{{s}}</view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-html","suites":["指令"],"line":204,"updatePoint":{"line":204,"column":12,"index":10105},"code":"  it('v-html', () => {\n    assertCodegen(`<div v-html=\"s\"></div>`, `<template name=\"a\"><rich-text nodes=\"{{s}}\" class=\"_div\"></rich-text></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-if","suites":["指令"],"line":209,"updatePoint":{"line":209,"column":10,"index":10286},"code":"  it('v-if', () => {\n    assertCodegen(`<div v-if=\"s\"></div>`, `<template name=\"a\"><view wx:if=\"{{s}}\" class=\"_div\"></view></template>`, {\n      name: 'a'\n    });\n    assertCodegen(`<div v-if=\"ok\" class=\"classa\" style=\"line-height: 100rpx\"><a></a></div>`, `<template name=\"a\"><view wx:if=\"{{ok}}\" class=\"_div classa\" style=\"line-height: 100rpx\"><view class=\"_a\"></view></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-if","suites":["指令"],"line":217,"updatePoint":{"line":217,"column":10,"index":10708},"code":"  it('v-if', () => {\n    assertCodegen(`<div v-else-if=\"s\"></div>`, `<template name=\"a\"><view wx:elif=\"{{s}}\" class=\"_div\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-else","suites":["指令"],"line":222,"updatePoint":{"line":222,"column":12,"index":10886},"code":"  it('v-else', () => {\n    assertCodegen(`<div v-else></div>`, `<template name=\"a\"><view wx:else class=\"_div\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-show","suites":["指令"],"line":227,"updatePoint":{"line":227,"column":12,"index":11049},"code":"  it('v-show', () => {\n    assertCodegen(`<div v-show=\"ddd\"></div>`, `<template name=\"a\"><view hidden=\"{{!(ddd)}}\" class=\"_div\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"@click","suites":["事件"],"line":234,"updatePoint":{"line":234,"column":12,"index":11257},"code":"  it('@click', () => {\n    assertCodegen(`<a @click=\"ddd\"></a>`, `<template name=\"a\"><view bindtap=\"handleProxy\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_a\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"@click.stop","suites":["事件"],"line":239,"updatePoint":{"line":239,"column":17,"index":11483},"code":"  it('@click.stop', () => {\n    assertCodegen(`<a @click.stop=\"ddd\"></a>`, `<template name=\"a\"><view catchtap=\"handleProxy\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_a\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"@click.stop.capture","suites":["事件"],"line":244,"updatePoint":{"line":244,"column":25,"index":11723},"code":"  it('@click.stop.capture', () => {\n    assertCodegen(`<a @click.stop.capture=\"ddd\"></a>`, `<template name=\"a\"><view capture-catch:tap=\"handleProxy\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_a\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"@click.capture","suites":["事件"],"line":249,"updatePoint":{"line":249,"column":20,"index":11975},"code":"  it('@click.capture', () => {\n    assertCodegen(`<a @click.capture=\"ddd\"></a>`, `<template name=\"a\"><view capture-bind:tap=\"handleProxy\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_a\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"@load","suites":["事件"],"line":254,"updatePoint":{"line":254,"column":11,"index":12212},"code":"  it('@load', () => {\n    assertCodegen(`<a @load=\"ddd\"></a>`, `<template name=\"a\"><view bindload=\"handleProxy\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_a\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-on:click","suites":["事件"],"line":259,"updatePoint":{"line":259,"column":16,"index":12437},"code":"  it('v-on:click', () => {\n    assertCodegen(`<a v-on:click=\"ddd\"></a>`, `<template name=\"a\"><view bindtap=\"handleProxy\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_a\"></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-on","suites":["事件"],"line":264,"updatePoint":{"line":264,"column":10,"index":12660},"code":"  it('v-on', () => {\n    assertCodegen(`<button v-on:click=\"say('hi')\">Say hi</button>`, `<template name=\"a\"><button bindtap=\"handleProxy\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_button\">Say hi</button></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-once","suites":["事件"],"line":269,"updatePoint":{"line":269,"column":12,"index":12922},"code":"  it('v-once', () => {\n    assertCodegen(`<button v-once>Say hi</button>`, `<template name=\"a\"><button class=\"_button\">Say hi</button></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"bindmarkertap","suites":["事件"],"line":274,"updatePoint":{"line":274,"column":19,"index":13109},"code":"  it('bindmarkertap', () => {\n    assertCodegen(`<map @markertap=\"markertap\"></map>`, `<template name=\"a\"><map bindmarkertap=\"handleProxy\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_map\"></map></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-else","suites":["事件"],"line":279,"updatePoint":{"line":279,"column":12,"index":13350},"code":"  it('v-else', () => {\n    assertCodegen(`<div><div v-if=\"type === 'A'\" @click=\"logger('A')\">A</div><div v-else-if=\"type === 'B'\" @click=\"logger('B')\">B</div><div v-else-if=\"type === 'C'\" @click=\"logger('C')\">C</div><div v-else @click=\"logger('Not A/B/C')\">Not A/B/C</div></div>`, `<template name=\"a\"><view class=\"_div\"><view wx:if=\"{{type === 'A'}}\" bindtap=\"handleProxy\" data-eventid=\"{{'3'}}\" data-comkey=\"{{$k}}\" class=\"_div\">A</view><view wx:elif=\"{{type === 'B'}}\" bindtap=\"handleProxy\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_div\">B</view><view wx:elif=\"{{type === 'C'}}\" bindtap=\"handleProxy\" data-eventid=\"{{'1'}}\" data-comkey=\"{{$k}}\" class=\"_div\">C</view><view wx:else bindtap=\"handleProxy\" data-eventid=\"{{'2'}}\" data-comkey=\"{{$k}}\" class=\"_div\">Not A/B/C</view></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"textarea","suites":["表单"],"line":286,"updatePoint":{"line":286,"column":14,"index":14219},"code":"  it('textarea', () => {\n    assertCodegen(`<textarea v-model=\"message\" placeholder=\"add multiple lines\"></textarea>`, `<template name=\"a\"><textarea value=\"{{message}}\" bindinput=\"handleProxy\" placeholder=\"add multiple lines\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_textarea\" /></template>`, {\n      name: 'a'\n    });\n  }); // it('checkbox', () => {","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"select","suites":["表单"],"line":299,"updatePoint":{"line":299,"column":12,"index":14901},"code":"  it('select', () => {\n    assertCodegen(`<select v-model=\"selected\" multiple style=\"width: 50px\"></select>`, `<template name=\"a\"><picker value=\"{{selected}}\" bindchange=\"handleProxy\" multiple style=\"width: 50px\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_select\"></picker></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-model","suites":["表单"],"line":304,"updatePoint":{"line":304,"column":13,"index":15230},"code":"  it('v-model', () => {\n    assertCodegen(`<input v-model=\"message\" placeholder=\"edit me\">`, `<template name=\"a\"><input value=\"{{message}}\" bindinput=\"handleProxy\" placeholder=\"edit me\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_input\" /></template>`, {\n      name: 'a'\n    });\n  }); // it('v-model.trim', () => {","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-model.lazy","suites":["表单"],"line":316,"updatePoint":{"line":316,"column":18,"index":15837},"code":"  it('v-model.lazy', () => {\n    assertCodegen(`<input v-model.lazy=\"msg\" >`, `<template name=\"a\"><input value=\"{{msg}}\" bindblur=\"handleProxy\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_input\" /></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"v-model.number","suites":["表单"],"line":321,"updatePoint":{"line":321,"column":20,"index":16090},"code":"  it('v-model.number', () => {\n    assertCodegen(`<input v-model.number=\"age\" type=\"number\">`, `<template name=\"a\"><input value=\"{{age}}\" bindinput=\"handleProxy\" type=\"number\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_input\" /></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"radio","suites":["表单"],"line":326,"updatePoint":{"line":326,"column":11,"index":16364},"code":"  it('radio', () => {\n    assertCodegen(`<radio><text>233</text></radio>`, `<template name=\"a\"><radio class=\"_radio\"><text class=\"_text\">233</text></radio></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"template","suites":["template"],"line":333,"updatePoint":{"line":333,"column":14,"index":16601},"code":"  it('template', () => {\n    assertCodegen(`<div><card v-for=\"i in 10\"></card></div>`, `<import src=\"/components/card\" /><template name=\"a\"><view class=\"_div data-v-djskdksdksdjkksdks\"><template data=\"{{...$root[$kk+'0-'+index], $root}}\" is=\"card\" wx:for=\"{{10}}\" wx:for-index=\"index\" wx:for-item=\"i\"></template></view></template>`, {\n      name: 'a',\n      components: {\n        card: {\n          name: 'card',\n          src: '/components/card'\n        }\n      },\n      moduleId: 'data-v-djskdksdksdjkksdks'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"template","suites":["template"],"line":345,"updatePoint":{"line":345,"column":14,"index":17124},"code":"  it('template', () => {\n    assertCodegen(`<div><card :message=\"1\"></card></div>`, `<import src=\"/components/card\" /><template name=\"a\"><view class=\"_div data-v-djskdksdksdjkksdks\"><template data=\"{{...$root[$kk+'0'], $root}}\" is=\"card\"></template></view></template>`, {\n      name: 'a',\n      components: {\n        card: {\n          name: 'card',\n          src: '/components/card'\n        }\n      },\n      moduleId: 'data-v-djskdksdksdjkksdks'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"template","suites":["template"],"line":357,"updatePoint":{"line":357,"column":14,"index":17584},"code":"  it('template', () => {\n    assertCodegen(`<div><card :message=\"1\"></card> <block><span>test</span></block></div>`, `<import src=\"/components/card\" /><template name=\"a\"><view class=\"_div data-v-djskdksdksdjkksdks\"><template data=\"{{...$root[$kk+'0'], $root}}\" is=\"card\"></template> <block><label class=\"_span data-v-djskdksdksdjkksdks\">test</label></block></view></template>`, {\n      name: 'a',\n      components: {\n        card: {\n          name: 'card',\n          src: '/components/card'\n        }\n      },\n      moduleId: 'data-v-djskdksdksdjkksdks'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"onchange","suites":["onchange"],"line":371,"updatePoint":{"line":371,"column":14,"index":18185},"code":"  it('onchange', () => {\n    assertCodegen(`<div class=\"baz boo\"><picker @change=\"sss\"></picker> <input @change=\"sss\"></input></div>`, `<template name=\"a\"><view class=\"_div hashValue baz boo\"><picker bindchange=\"handleProxy\" data-eventid=\"{{'0'}}\" data-comkey=\"{{$k}}\" class=\"_picker hashValue\"></picker> <input bindblur=\"handleProxy\" data-eventid=\"{{'1'}}\" data-comkey=\"{{$k}}\" class=\"_input hashValue\" /></view></template>`, {\n      name: 'a',\n      components: {\n        'card': {\n          name: 'card',\n          src: '/components/card'\n        }\n      },\n      moduleId: 'hashValue'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"插槽","suites":["slot"],"line":385,"updatePoint":{"line":385,"column":8,"index":18811},"code":"  it('插槽', () => {\n    assertCodegen(`<div><slot>test</slot></div>`, `<template name=\"a\"><view class=\"_div testModuleId\"><template name=\"default\">test</template><template data=\"{{...$root[$k], $root}}\" is=\"{{$slotdefault || 'default'}}\"></template></view></template>`, {\n      name: 'a',\n      moduleId: 'testModuleId'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"使用","suites":["slot"],"line":391,"updatePoint":{"line":391,"column":8,"index":19144},"code":"  it('使用', () => {\n    assertCodegen(`<div><slot name=\"w\">test</slot></div>`, `<template name=\"a\"><view class=\"_div\"><template name=\"w\">test</template><template data=\"{{...$root[$k], $root}}\" is=\"{{$slotw || 'w'}}\"></template></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"含`:name`的插槽组件","suites":["slot"],"line":396,"updatePoint":{"line":396,"column":19,"index":19434},"code":"  it('含`:name`的插槽组件', () => {\n    assertCodegen(`<div><slot :name=\"tab.key\">test</slot></div>`, `<template name=\"a\"><view class=\"_div\"><template name=\"default\">test</template><template data=\"{{...$root[$k], $root}}\" is=\"{{$for[tab.key]}}\"></template></view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"slot name","suites":["slot"],"line":401,"updatePoint":{"line":401,"column":15,"index":19733},"code":"  it('slot name', () => {\n    assertCodegen(`<card class=\"baz boo\"><a slot=\"header\">test</a></card>`, `<import src=\"/components/card\" /><template name=\"a\"><template data=\"{{...$root[$kk+'0'], $root, $for:{default:'hashValue-default-0',header:'hashValue-header-0'},$slotdefault:'hashValue-default-0',$slotheader:'hashValue-header-0'}}\" is=\"card\"></template></template>`, {\n      name: 'a',\n      components: {\n        'card': {\n          name: 'card',\n          src: '/components/card'\n        }\n      },\n      moduleId: 'hashValue'\n    }, {\n      mpTips: ['template 不支持此属性-> class=\"baz boo\"'],\n      mpErrors: [],\n\n      /* eslint-disable */\n      slots: {\n        \"hashValue-default-0\": {\n          \"node\": {\n            \"tag\": \"template\",\n            \"attrsMap\": {\n              \"name\": \"hashValue-default-0\"\n            },\n            \"children\": [],\n            \"staticClass\": \"\",\n            \"slots\": {}\n          },\n          \"name\": \"default\",\n          \"slotId\": \"hashValue-default-0\",\n          \"code\": \"<template name=\\\"hashValue-default-0\\\"></template>\"\n        },\n        \"hashValue-header-0\": {\n          \"node\": {\n            \"type\": 1,\n            \"tag\": \"template\",\n            \"attrsList\": [],\n            \"attrsMap\": {\n              \"name\": \"hashValue-header-0\"\n            },\n            \"parent\": {\n              \"type\": 1,\n              \"tag\": \"card\",\n              \"attrsList\": [],\n              \"attrsMap\": {\n                \"class\": \"baz boo\"\n              },\n              \"children\": [],\n              \"plain\": false,\n              \"staticClass\": \"\\\"baz boo\\\"\",\n              \"mpcomid\": \"'0'\",\n              \"attrs\": [{\n                \"name\": \"mpcomid\",\n                \"value\": \"'0'\"\n              }],\n              \"static\": false,\n              \"staticRoot\": false\n            },\n            \"children\": [{\n              \"type\": 3,\n              \"text\": \"test\",\n              \"staticClass\": \"hashValue\",\n              \"slots\": {},\n              \"attrsMap\": {\n                \"class\": \"hashValue\"\n              }\n            }],\n            \"plain\": false,\n            \"slotTarget\": \"\\\"header\\\"\",\n            \"staticRoot\": false,\n            \"staticClass\": \"\",\n            \"slots\": {}\n          },\n          \"name\": \"header\",\n          \"slotId\": \"hashValue-header-0\",\n          \"code\": \"<template name=\\\"hashValue-header-0\\\">test</template>\"\n        }\n      }\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"slot template","suites":["slot"],"line":479,"updatePoint":{"line":479,"column":19,"index":22140},"code":"  it('slot template', () => {\n    assertCodegen(`<card class=\"baz boo\"><template slot=\"header\">test</template></card>`, `<import src=\"/components/card\" /><template name=\"a\"><template data=\"{{...$root[$kk+'1'], $root, $for:{default:'hashValue-default-1',header:'hashValue-header-1'},$slotdefault:'hashValue-default-1',$slotheader:'hashValue-header-1'}}\" is=\"card\"></template></template>`, {\n      name: 'a',\n      components: {\n        'card': {\n          name: 'card',\n          src: '/components/card'\n        }\n      },\n      moduleId: 'hashValue'\n    }, {\n      mpErrors: [],\n      mpTips: ['template 不支持此属性-> class=\"baz boo\"'],\n      slots: {\n        \"hashValue-default-1\": {\n          \"node\": {\n            \"tag\": \"template\",\n            \"attrsMap\": {\n              \"name\": \"hashValue-default-1\"\n            },\n            \"children\": [],\n            \"staticClass\": \"\",\n            \"slots\": {}\n          },\n          \"name\": \"default\",\n          \"slotId\": \"hashValue-default-1\",\n          \"code\": \"<template name=\\\"hashValue-default-1\\\"></template>\"\n        },\n        \"hashValue-header-1\": {\n          \"node\": {\n            \"type\": 1,\n            \"tag\": \"template\",\n            \"attrsList\": [],\n            \"attrsMap\": {\n              \"name\": \"hashValue-header-1\"\n            },\n            \"parent\": {\n              \"type\": 1,\n              \"tag\": \"card\",\n              \"attrsList\": [],\n              \"attrsMap\": {\n                \"class\": \"baz boo\"\n              },\n              \"children\": [],\n              \"plain\": false,\n              \"staticClass\": \"\\\"baz boo\\\"\",\n              \"mpcomid\": \"'1'\",\n              \"attrs\": [{\n                \"name\": \"mpcomid\",\n                \"value\": \"'1'\"\n              }],\n              \"static\": false,\n              \"staticRoot\": false\n            },\n            \"children\": [{\n              \"type\": 3,\n              \"text\": \"test\",\n              \"staticClass\": \"hashValue\",\n              \"slots\": {},\n              \"attrsMap\": {\n                \"class\": \"hashValue\"\n              }\n            }],\n            \"plain\": false,\n            \"slotTarget\": \"\\\"header\\\"\",\n            \"mpcomid\": \"'0'\",\n            \"attrs\": [{\n              \"name\": \"mpcomid\",\n              \"value\": \"'0'\"\n            }],\n            \"staticRoot\": false,\n            \"staticClass\": \"\",\n            \"slots\": {}\n          },\n          \"name\": \"header\",\n          \"slotId\": \"hashValue-header-1\",\n          \"code\": \"<template name=\\\"hashValue-header-1\\\">test</template>\"\n        }\n      }\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"slot template","suites":["slot"],"line":560,"updatePoint":{"line":560,"column":19,"index":24665},"code":"  it('slot template', () => {\n    assertCodegen(`<template class=\"baz boo\"><template slot=\"header\">test</template></template>`, `<template name=\"a\"><template><template slot=\"header\">test</template></template></template>`, {\n      name: 'a',\n      components: {\n        'card': {\n          name: 'card',\n          src: '/components/card'\n        }\n      },\n      moduleId: 'hashValue'\n    }, {\n      errors: ['Cannot use <template> as component root element because it may contain multiple nodes.'],\n      mpTips: ['template 不支持此属性-> class=\"baz boo\"'],\n      mpErrors: []\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"web-view","suites":["web-view"],"line":578,"updatePoint":{"line":578,"column":14,"index":25278},"code":"  it('web-view', () => {\n    assertCodegen(`<web-view src=\"https://i.meituan.com\"> </web-view>`, `<template name=\"a\"><web-view src=\"https://i.meituan.com\" class=\"_web-view\"></web-view></template>`, {\n      name: 'a'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"组件驼峰命名","suites":["组件"],"line":585,"updatePoint":{"line":585,"column":12,"index":25533},"code":"  it('组件驼峰命名', () => {\n    assertCodegen(`<div><aCard></aCard></div>`, `<import src=\"card$3d556b2c\" /><template name=\"index$c044a66a\"><view class=\"_div data-v-5eca2e54\"><template data=\"{{...$root[$kk+'0'], $root}}\" is=\"card$3d556b2c\"></template></view></template>`, {\n      components: {\n        'a-card': {\n          src: 'card$3d556b2c',\n          name: 'card$3d556b2c'\n        },\n        isCompleted: true,\n        slots: {\n          src: 'slots',\n          name: 'slots'\n        }\n      },\n      pageType: 'component',\n      name: 'index$c044a66a',\n      moduleId: 'data-v-5eca2e54'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"组件驼峰命名","suites":["组件"],"line":603,"updatePoint":{"line":603,"column":12,"index":26134},"code":"  it('组件驼峰命名', () => {\n    assertCodegen(`<div><Card></Card></div>`, `<import src=\"card$3d556b2c\" /><template name=\"index$c044a66a\"><view class=\"_div data-v-5eca2e54\"><template data=\"{{...$root[$kk+'0'], $root}}\" is=\"card$3d556b2c\"></template></view></template>`, {\n      components: {\n        'card': {\n          src: 'card$3d556b2c',\n          name: 'card$3d556b2c'\n        },\n        isCompleted: true,\n        slots: {\n          src: 'slots',\n          name: 'slots'\n        }\n      },\n      pageType: 'component',\n      name: 'index$c044a66a',\n      moduleId: 'data-v-5eca2e54'\n    });\n  });","file":"mp/compiler/index.spec.js","skipped":false,"dir":"test"},{"name":"handleProxy","suites":["events"],"line":9,"updatePoint":{"line":9,"column":17,"index":156},"code":"  it('handleProxy', function (done) {\n    const options = {\n      methods: {\n        clickHandle(str, ev) {\n          expect(str).toEqual('test click');\n          expect(ev.target.id).toEqual('testEventId');\n          done();\n        }\n\n      },\n\n      // render 由 mpvue-loader 和 mpvue-template-compiler 生成\n      // <div class=\"container\">\n      //   <p @click=\"clickHandle('test click', $event)\">233</p>\n      // </div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_c('p', {\n          attrs: {\n            'eventid': '0'\n          },\n          on: {\n            'click': function ($event) {\n              _vm.clickHandle('test click', $event);\n            }\n          }\n        }, [_vm._v('233')])], 1);\n      }\n\n    };\n    const app = createInstance(options);\n    app.$mount(); // 模拟从 wxml 的触发\n\n    const ev = JSON.parse(`{\"type\":\"tap\",\"timeStamp\":4155,\"target\":{\"id\":\"testEventId\",\"offsetLeft\":83,\"offsetTop\":100,\"dataset\":{\"comkey\":\"0\",\"eventid\":\"0\"}},\"currentTarget\":{\"id\":\"testEventId\",\"offsetLeft\":83,\"offsetTop\":100,\"dataset\":{\"comkey\":\"0\",\"eventid\":\"0\"}},\"detail\":{\"x\":172,\"y\":114},\"touches\":[{\"identifier\":0,\"pageX\":172,\"pageY\":114,\"clientX\":172,\"clientY\":114}],\"changedTouches\":[{\"identifier\":0,\"pageX\":172,\"pageY\":114,\"clientX\":172,\"clientY\":114}]}`);\n\n    app.$mp.page._callHook('handleProxy', ev);\n  });","file":"mp/runtime/events.spec.js","skipped":false,"dir":"test"},{"name":"onShareAppMessage","suites":["events"],"line":53,"updatePoint":{"line":53,"column":23,"index":1627},"code":"  it('onShareAppMessage', function (done) {\n    const options = {\n      onShareAppMessage(options) {\n        expect(options.from).toEqual('button');\n        return {\n          path: '/pages/index/index'\n        };\n      },\n\n      // render 由 mpvue-loader 和 mpvue-template-compiler 生成\n      // <div class=\"container\">\n      //   <p @click=\"clickHandle('test click', $event)\">233</p>\n      // </div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_c('p', {\n          attrs: {\n            'eventid': '0'\n          },\n          on: {\n            'click': function ($event) {\n              _vm.clickHandle('test click', $event);\n            }\n          }\n        }, [_vm._v('233')])], 1);\n      }\n\n    };\n    const app = createInstance(options);\n    app.$mount();\n\n    const ret = app.$mp.page._callHook('onShareAppMessage', {\n      from: 'button'\n    });\n\n    expect(ret.path).toEqual('/pages/index/index');\n    done();\n  }); // 包含子组件","file":"mp/runtime/events.spec.js","skipped":false,"dir":"test"},{"name":"handleProxy with components","suites":["events"],"line":99,"updatePoint":{"line":99,"column":33,"index":2714},"code":"  it('handleProxy with components', function (done) {\n    const warpOptions = {\n      methods: {\n        clickHandle(str, ev) {\n          expect(str).toEqual('warp component click');\n          expect(ev.target.id).toEqual('testEventId2');\n          done();\n        }\n\n      },\n\n      // <div class=\"container\">\n      //   <p @click=\"clickHandle('warp component click', $event)\">warp component</p>\n      // </div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_c('p', {\n          attrs: {\n            'eventid': '0'\n          },\n          on: {\n            'click': function ($event) {\n              _vm.clickHandle('warp component click', $event);\n            }\n          }\n        }, [_vm._v('warp component')])], 1);\n      }\n\n    };\n    const options = {\n      components: {\n        warp: warpOptions\n      },\n      methods: {\n        clickHandle(str, ev) {\n          expect(str).toEqual('test p click');\n          expect(ev.target.id).toEqual('testEventId1');\n          done();\n        }\n\n      },\n\n      // render 由 mpvue-loader 和 mpvue-template-compiler 生成\n      // <div class=\"container\">\n      //   <p @click=\"clickHandle('test p click', $event)\">\n      //     233\n      //     <warp></warp>\n      //   </p>\n      // </div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_c('p', {\n          attrs: {\n            'eventid': '0'\n          },\n          on: {\n            'click': function ($event) {\n              _vm.clickHandle('test p click', $event);\n            }\n          }\n        }, [_vm._v('233')]), _c('warp')], 1);\n      }\n\n    };\n    const app = createInstance(options);\n    app.$mount(); // 模拟从 wxml 的触发\n\n    const ev1 = JSON.parse(`{\"type\":\"tap\",\"timeStamp\":8938,\"target\":{\"id\":\"testEventId1\",\"offsetLeft\":0,\"offsetTop\":100,\"dataset\":{\"comkey\":\"0\",\"eventid\":\"0\"}},\"currentTarget\":{\"id\":\"testEventId1\",\"offsetLeft\":0,\"offsetTop\":100,\"dataset\":{\"comkey\":\"0\",\"eventid\":\"0\"}},\"detail\":{\"x\":186,\"y\":112},\"touches\":[{\"identifier\":0,\"pageX\":186,\"pageY\":112,\"clientX\":186,\"clientY\":112}],\"changedTouches\":[{\"identifier\":0,\"pageX\":186,\"pageY\":112,\"clientX\":186,\"clientY\":112}]}`);\n\n    app.$mp.page._callHook('handleProxy', ev1);\n\n    const ev2 = JSON.parse(`{\"type\":\"tap\",\"timeStamp\":152060,\"target\":{\"id\":\"testEventId2\",\"offsetLeft\":116,\"offsetTop\":286,\"dataset\":{\"comkey\":\"0,0\",\"eventid\":\"0\"}},\"currentTarget\":{\"id\":\"testEventId2\",\"offsetLeft\":116,\"offsetTop\":286,\"dataset\":{\"comkey\":\"0,0\",\"eventid\":\"0\"}},\"detail\":{\"x\":215,\"y\":301},\"touches\":[{\"identifier\":0,\"pageX\":216,\"pageY\":301,\"clientX\":216,\"clientY\":301}],\"changedTouches\":[{\"identifier\":0,\"pageX\":216,\"pageY\":301,\"clientX\":216,\"clientY\":301}]}`);\n\n    app.$mp.page._callHook('handleProxy', ev2);\n  }); // v-model 等特殊指令","file":"mp/runtime/events.spec.js","skipped":false,"dir":"test"},{"name":"v-model","suites":["events"],"line":189,"updatePoint":{"line":189,"column":13,"index":5677},"code":"  it('v-model', function (done) {\n    const options = {\n      data() {\n        return {\n          testInput: ''\n        };\n      },\n\n      // render 由 mpvue-loader 和 mpvue-template-compiler 生成\n      // <div class=\"container\">\n      //   <input v-model=\"testInput\" />\n      // </div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_c('input', {\n          directives: [{\n            name: 'model',\n            rawName: 'v-model',\n            value: _vm.testInput,\n            expression: 'testInput'\n          }],\n          attrs: {\n            eventid: '0'\n          },\n          domProps: {\n            value: _vm.testInput\n          },\n          on: {\n            input: function ($event) {\n              if ($event.target.composing) return;\n              _vm.testInput = $event.target.value;\n            }\n          }\n        })]);\n      }\n\n    };\n    const app = createInstance(options);\n    app.$mount(); // 模拟从 wxml 的触发\n\n    const ev = JSON.parse(`{\"type\":\"input\",\"timestamp\":1505102982041,\"detail\":{\"value\":\"233\",\"cursor\":1},\"target\":{\"id\":\"\",\"dataset\":{\"comkey\":\"0\",\"eventid\":\"0\"},\"offsetTop\":100,\"offsetLeft\":83},\"currentTarget\":{\"id\":\"\",\"dataset\":{\"comkey\":\"0\",\"eventid\":\"0\"},\"offsetTop\":100,\"offsetLeft\":83},\"touches\":[]}`);\n\n    app.$mp.page._callHook('handleProxy', ev);\n\n    setTimeout(function () {\n      const val = app.$mp.page.data['$root']['0']['testInput'];\n      expect(val).toEqual('233');\n      done();\n    }, 300);\n  }); // v-model 等特殊指令","file":"mp/runtime/events.spec.js","skipped":false,"dir":"test"},{"name":"v-model.lazy","suites":["events"],"line":247,"updatePoint":{"line":247,"column":18,"index":7289},"code":"  it('v-model.lazy', function (done) {\n    const options = {\n      data() {\n        return {\n          testInput: ''\n        };\n      },\n\n      methods: {\n        handle(ev) {\n          expect(ev.target.value).toEqual('2222');\n        }\n\n      },\n\n      // render 由 mpvue-loader 和 mpvue-template-compiler 生成\n      // <div class=\"container\">\n      //   <input v-model.lazy=\"testInput\" />\n      // </div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_c('input', {\n          directives: [{\n            name: 'model',\n            rawName: 'v-model.lazy',\n            value: _vm.testInput,\n            expression: 'testInput',\n            modifiers: {\n              lazy: true\n            }\n          }],\n          attrs: {\n            eventid: '0'\n          },\n          domProps: {\n            value: _vm.testInput\n          },\n          on: {\n            change: [function ($event) {\n              _vm.testInput = $event.target.value;\n            }, _vm.handle]\n          }\n        })]);\n      }\n\n    };\n    const app = createInstance(options);\n    app.$mount(); // 模拟从 wxml 的触发\n\n    const ev = JSON.parse(`{\"type\":\"blur\",\"timeStamp\":90596,\"target\":{\"id\":\"\",\"offsetLeft\":83,\"offsetTop\":100,\"dataset\":{\"comkey\":\"0\",\"eventid\":\"0\"}},\"currentTarget\":{\"id\":\"\",\"offsetLeft\":83,\"offsetTop\":100,\"dataset\":{\"comkey\":\"0\",\"eventid\":\"0\"}},\"detail\":{\"value\":\"2222\"}}`);\n\n    app.$mp.page._callHook('handleProxy', ev);\n\n    setTimeout(function () {\n      const val = app.$mp.page.data['$root']['0']['testInput'];\n      expect(val).toEqual('2222');\n      done();\n    }, 300);\n  });","file":"mp/runtime/events.spec.js","skipped":false,"dir":"test"},{"name":"data","suites":["instance"],"line":74,"updatePoint":{"line":74,"column":10,"index":1246},"code":"  it('data', function (done) {\n    const app = createInstance(Object.assign({}, defOptions));\n    app.$mount();\n    setTimeout(function () {\n      const appData = getDefAppData();\n      expect(app.$mp.page.data).toEqual(appData);\n      done();\n    }, 300);\n  }); // 响应式数据 eg. setTimeout","file":"mp/runtime/instance.spec.js","skipped":false,"dir":"test"},{"name":"Reactivity data","suites":["instance"],"line":84,"updatePoint":{"line":84,"column":21,"index":1545},"code":"  it('Reactivity data', function (done) {\n    const options = Object.assign({\n      created() {\n        setTimeout(() => {\n          this.msg = 666;\n        }, 20);\n      }\n\n    }, defOptions);\n    const app = createInstance(options);\n    app.$mount();\n    setTimeout(function () {\n      const appData = getDefAppData();\n      appData['$root']['0']['msg'] = 666;\n      expect(app.$mp.page.data).toEqual(appData);\n      done();\n    }, 300);\n  }); // this.$nextTick","file":"mp/runtime/instance.spec.js","skipped":false,"dir":"test"},{"name":"this.$nextTick","suites":["instance"],"line":103,"updatePoint":{"line":103,"column":20,"index":2009},"code":"  it('this.$nextTick', function (done) {\n    const options = Object.assign({\n      created() {\n        this.$nextTick(() => {\n          this.msg = 777;\n        }, 20);\n      }\n\n    }, defOptions);\n    const app = createInstance(options);\n    app.$mount();\n    setTimeout(function () {\n      const appData = getDefAppData();\n      appData['$root']['0']['msg'] = 777;\n      expect(app.$mp.page.data).toEqual(appData);\n      done();\n    }, 300);\n  }); // computed 计算属性","file":"mp/runtime/instance.spec.js","skipped":false,"dir":"test"},{"name":"computed","suites":["instance"],"line":122,"updatePoint":{"line":122,"column":14,"index":2470},"code":"  it('computed', function (done) {\n    const options = Object.assign({\n      computed: {\n        message() {\n          return this.msg + '!!!';\n        }\n\n      }\n    }, defOptions);\n    const app = createInstance(options);\n    app.$mount();\n    setTimeout(function () {\n      const appData = getDefAppData();\n      appData['$root']['0']['message'] = '233!!!';\n      expect(app.$mp.page.data).toEqual(appData);\n      done();\n    }, 300);\n  }); // 组件","file":"mp/runtime/instance.spec.js","skipped":false,"dir":"test"},{"name":"props","suites":["instance"],"line":141,"updatePoint":{"line":141,"column":11,"index":2918},"code":"  it('props', function (done) {\n    const cardOptions = {\n      props: ['info'],\n\n      // <div class=\"container\">{{info}}</div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_vm._v(_vm._s(_vm.info))]);\n      }\n\n    };\n    const options = {\n      components: {\n        card: cardOptions\n      },\n\n      data() {\n        return {\n          msg: 233\n        };\n      },\n\n      // <div class=\"container\">\n      //   <card :info=\"msg\"></card>\n      // </div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_c('card', {\n          attrs: {\n            'info': _vm.msg,\n            'mpcomid': '0' // 这是 mpvue-loader 通过 mpvue-template-compiler 加上的\n\n          }\n        })], 1);\n      }\n\n    };\n    const app = createInstance(options);\n    app.$mount();\n    setTimeout(function () {\n      const appData = {\n        $root: {\n          0: {\n            msg: 233,\n            $k: '0',\n            $kk: '0,',\n            $p: ''\n          },\n          '0,0': {\n            info: 233,\n            $k: '0,0',\n            $kk: '0,0,',\n            $p: '0'\n          }\n        }\n      };\n      expect(app.$mp.page.data).toEqual(appData);\n      done();\n    }, 300);\n  }); // v-for 情况下的子组件作用域隔离","file":"mp/runtime/instance.spec.js","skipped":false,"dir":"test"},{"name":"v-for with props","suites":["instance"],"line":216,"updatePoint":{"line":216,"column":22,"index":4395},"code":"  it('v-for with props', function (done) {\n    const cardOptions = {\n      props: ['info'],\n\n      // <div class=\"container\">{{info}}</div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_vm._v(_vm._s(_vm.info))]);\n      }\n\n    };\n    const options = {\n      components: {\n        card: cardOptions\n      },\n\n      data() {\n        return {\n          items: [111, 222, 333]\n        };\n      },\n\n      // <div class=\"container\">\n      //     <card v-for=\"item in items\" :info=\"item\"></card>\n      // </div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_vm._l(_vm.items, function (item, index) {\n          return _c('card', {\n            attrs: {\n              'info': item,\n              'mpcomid': '1-' + index\n            }\n          });\n        })], 1);\n      }\n\n    };\n    const app = createInstance(options);\n    app.$mount();\n    setTimeout(function () {\n      const appData = getDefAppDataByVfor();\n      expect(app.$mp.page.data).toEqual(appData);\n      done();\n    }, 300);\n  });","file":"mp/runtime/instance.spec.js","skipped":false,"dir":"test"},{"name":"v-for with reactivity props","suites":["instance"],"line":276,"updatePoint":{"line":276,"column":33,"index":5686},"code":"  it('v-for with reactivity props', function (done) {\n    const cardOptions = {\n      props: ['info'],\n\n      // <div class=\"container\">{{info}}</div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_vm._v(_vm._s(_vm.info))]);\n      }\n\n    };\n    const options = {\n      components: {\n        card: cardOptions\n      },\n\n      data() {\n        return {\n          items: [111, 222, 333]\n        };\n      },\n\n      created() {\n        this.items[1] = 'hello 222';\n      },\n\n      // <div class=\"container\">\n      //     <card v-for=\"item in items\" :info=\"item\"></card>\n      // </div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_vm._l(_vm.items, function (item, index) {\n          return _c('card', {\n            attrs: {\n              'info': item,\n              'mpcomid': '1-' + index\n            }\n          });\n        })], 1);\n      }\n\n    };\n    const app = createInstance(options);\n    app.$mount();\n    setTimeout(function () {\n      const appData = getDefAppDataByVfor();\n      appData['$root']['0']['items']['1'] = 'hello 222';\n      appData['$root']['0,1-1']['info'] = 'hello 222';\n      expect(app.$mp.page.data).toEqual(appData);\n      done();\n    }, 300);\n  });","file":"mp/runtime/instance.spec.js","skipped":false,"dir":"test"},{"name":"v-for with components data","suites":["instance"],"line":342,"updatePoint":{"line":342,"column":32,"index":7153},"code":"  it('v-for with components data', function (done) {\n    const cardOptions = {\n      props: ['info'],\n\n      data() {\n        return {\n          msg: 'hello card'\n        };\n      },\n\n      created() {\n        if (this.info === 222) {\n          this.msg = 'hello card with 222';\n        }\n      },\n\n      // <div class=\"container\">{{info}}</div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_vm._v(_vm._s(_vm.info))]);\n      }\n\n    };\n    const options = {\n      components: {\n        card: cardOptions\n      },\n\n      data() {\n        return {\n          items: [111, 222, 333]\n        };\n      },\n\n      // <div class=\"container\">\n      //     <card v-for=\"item in items\" :info=\"item\"></card>\n      // </div>\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_vm._l(_vm.items, function (item, index) {\n          return _c('card', {\n            attrs: {\n              'info': item,\n              'mpcomid': '1-' + index\n            }\n          });\n        })], 1);\n      }\n\n    };\n    const app = createInstance(options);\n    app.$mount();\n    setTimeout(function () {\n      const appData = getDefAppDataByVfor();\n      appData['$root']['0,1-0']['msg'] = 'hello card';\n      appData['$root']['0,1-1']['msg'] = 'hello card with 222';\n      appData['$root']['0,1-2']['msg'] = 'hello card';\n      expect(app.$mp.page.data).toEqual(appData);\n      done();\n    }, 300);\n  });","file":"mp/runtime/instance.spec.js","skipped":false,"dir":"test"},{"name":"App","suites":["init mpvue with lifecycle"],"line":120,"updatePoint":{"line":120,"column":9,"index":2317},"code":"  it('App', function () {\n    const options = Object.assign(getComponentOptions(), {\n      mpType: 'app'\n    });\n    const app = createInstance(options);\n    app.$mount();\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'onLaunch', 'beforeMount', 'mounted', 'onShow']);\n    expect(!!app.$mp.app).toEqual(true);\n    const opt = {\n      path: 'pages/index/index',\n      scene: 1001,\n      query: {}\n    };\n    expect(app.$mp.appOptions).toEqual(opt);\n    expect(getOptions.onLaunch).toEqual(opt);\n    expect(getOptions.onShow).toEqual(opt);\n    expect(app.$mp.mpType).toEqual('app');\n    expect(app.$mp.status).toEqual('show');\n  });","file":"mp/runtime/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"Page with render","suites":["init mpvue with lifecycle"],"line":139,"updatePoint":{"line":139,"column":22,"index":2974},"code":"  it('Page with render', function () {\n    const options = Object.assign(getComponentOptions(), {\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [], 1);\n      }\n\n    });\n    const app = createInstance(options);\n    app.$mount();\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'onLoad', 'onShow', 'onReady', 'beforeMount', 'mounted']);\n    expect(!!app.$mp.page).toEqual(true);\n    expect(app.$mp.query).toEqual({});\n    expect(getOptions.onLoad).toEqual({});\n    expect(app.$mp.appOptions).toEqual({\n      path: 'pages/index/index',\n      scene: 1001,\n      query: {}\n    });\n    expect(app.$mp.mpType).toEqual('page');\n    expect(app.$mp.status).toEqual('ready');\n  });","file":"mp/runtime/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"Page with components","suites":["init mpvue with lifecycle"],"line":168,"updatePoint":{"line":168,"column":26,"index":3806},"code":"  it('Page with components', function () {\n    const warpOptions = Object.assign(getComponentOptions('-warp'), {\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_vm._v('warp component')], 1);\n      }\n\n    });\n    const options = Object.assign(getComponentOptions(), {\n      components: {\n        warp: warpOptions\n      },\n\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_c('warp')], 1);\n      }\n\n    });\n    const app = createInstance(options);\n    app.$mount();\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'onLoad', 'onShow', 'onReady', 'beforeMount', 'beforeCreate-warp', 'created-warp', 'onLoad-warp', 'onReady-warp', 'beforeMount-warp', 'mounted-warp', 'mounted']);\n    expect(!!app.$mp.page).toEqual(true);\n    expect(app.$mp.query).toEqual({});\n    expect(app.$mp.mpType).toEqual('page');\n    expect(app.$mp.status).toEqual('ready');\n  });","file":"mp/runtime/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"Page with leaveAndBack","suites":["init mpvue with lifecycle"],"line":209,"updatePoint":{"line":209,"column":28,"index":4960},"code":"  it('Page with leaveAndBack', function (done) {\n    const options = Object.assign(getComponentOptions(), {\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [], 1);\n      }\n\n    });\n    const app = createInstance(options);\n    app.$mount();\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'onLoad', 'onShow', 'onReady', 'beforeMount', 'mounted']);\n    expect(!!app.$mp.page).toEqual(true);\n    expect(app.$mp.query).toEqual({});\n    expect(app.$mp.mpType).toEqual('page');\n    expect(app.$mp.status).toEqual('ready');\n\n    app.$mp.page._leaveAndBack();\n\n    expect(app.$mp.status).toEqual('hide');\n    setTimeout(() => {\n      expect(onLifecycle).toEqual(['beforeCreate', 'created', 'onLoad', 'onShow', 'onReady', 'beforeMount', 'mounted', 'onHide', 'onShow']);\n      expect(app.$mp.status).toEqual('show');\n      done();\n    }, 200);\n  });","file":"mp/runtime/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"Page with customEvent","suites":["init mpvue with lifecycle"],"line":241,"updatePoint":{"line":241,"column":27,"index":5954},"code":"  it('Page with customEvent', function () {\n    const options = Object.assign(getComponentOptions(), {\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [], 1);\n      }\n\n    });\n    const app = createInstance(options);\n    app.$mount();\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'onLoad', 'onShow', 'onReady', 'beforeMount', 'mounted']);\n    expect(!!app.$mp.page).toEqual(true);\n    expect(app.$mp.query).toEqual({});\n    expect(app.$mp.mpType).toEqual('page');\n    expect(app.$mp.status).toEqual('ready');\n\n    app.$mp.page._callHook('onPullDownRefresh');\n\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'onLoad', 'onShow', 'onReady', 'beforeMount', 'mounted', 'pullDownRefresh']);\n\n    app.$mp.page._callHook('onReachBottom');\n\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'onLoad', 'onShow', 'onReady', 'beforeMount', 'mounted', 'pullDownRefresh', 'reachBottom']);\n\n    app.$mp.page._callHook('onShareAppMessage');\n\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'onLoad', 'onShow', 'onReady', 'beforeMount', 'mounted', 'pullDownRefresh', 'reachBottom', 'shareAppMessage']);\n\n    app.$mp.page._callHook('onPageScroll');\n\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'onLoad', 'onShow', 'onReady', 'beforeMount', 'mounted', 'pullDownRefresh', 'reachBottom', 'shareAppMessage', 'pageScroll']); // onUnload\n\n    app.$mp.page._callHook('onUnload');\n\n    expect(app.$mp.status).toEqual('unload');\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'onLoad', 'onShow', 'onReady', 'beforeMount', 'mounted', 'pullDownRefresh', 'reachBottom', 'shareAppMessage', 'pageScroll', 'unload']);\n  });","file":"mp/runtime/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"Component with render","suites":["init mpvue with lifecycle"],"line":285,"updatePoint":{"line":285,"column":27,"index":7767},"code":"  it('Component with render', function () {\n    const options = Object.assign(getComponentOptions(), {\n      mpType: 'component',\n\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [], 1);\n      }\n\n    });\n    const app = createInstance(options);\n    app.$mount();\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'attached', 'ready', 'beforeMount', 'mounted']);\n    expect(!!app.$mp.page).toEqual(true);\n    expect(app.$mp.mpType).toEqual('component');\n    expect(app.$mp.status).toEqual('ready');\n  });","file":"mp/runtime/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"Component with component","suites":["init mpvue with lifecycle"],"line":309,"updatePoint":{"line":309,"column":30,"index":8427},"code":"  it('Component with component', function () {\n    const warpOptions = Object.assign(getComponentOptions('-warp'), {\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_vm._v('warp component')], 1);\n      }\n\n    });\n    const options = Object.assign(getComponentOptions(), {\n      mpType: 'component',\n      components: {\n        warp: warpOptions\n      },\n\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [_c('warp')], 1);\n      }\n\n    });\n    const app = createInstance(options);\n    app.$mount();\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'attached', 'ready', 'beforeMount', 'beforeCreate-warp', 'created-warp', 'onLoad-warp', 'onReady-warp', 'beforeMount-warp', 'mounted-warp', 'mounted']);\n    expect(!!app.$mp.page).toEqual(true);\n    expect(app.$mp.mpType).toEqual('component');\n    expect(app.$mp.status).toEqual('ready');\n  });","file":"mp/runtime/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"Component with customEvent","suites":["init mpvue with lifecycle"],"line":350,"updatePoint":{"line":350,"column":32,"index":9568},"code":"  it('Component with customEvent', function () {\n    const options = Object.assign(getComponentOptions(), {\n      mpType: 'component',\n\n      render() {\n        var _vm = this;\n\n        var _h = _vm.$createElement;\n\n        var _c = _vm._self._c || _h;\n\n        return _c('div', {\n          staticClass: 'container'\n        }, [], 1);\n      }\n\n    });\n    const app = createInstance(options);\n    app.$mount();\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'attached', 'ready', 'beforeMount', 'mounted']);\n    expect(!!app.$mp.page).toEqual(true);\n    expect(app.$mp.mpType).toEqual('component');\n    expect(app.$mp.status).toEqual('ready'); // moved\n\n    app.$mp.page._callHook('moved');\n\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'attached', 'ready', 'beforeMount', 'mounted', 'moved']); // detached\n\n    app.$mp.page._callHook('detached');\n\n    expect(app.$mp.status).toEqual('detached');\n    expect(onLifecycle).toEqual(['beforeCreate', 'created', 'attached', 'ready', 'beforeMount', 'mounted', 'moved', 'detached']);\n  });","file":"mp/runtime/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["SSR: basicRenderer"],"line":4,"updatePoint":{"line":4,"column":17,"index":180},"code":"  it('should work', done => {\n    renderToString(new Vue({\n      template: `\n        <div>\n          <p class=\"hi\">yoyo</p>\n          <div id=\"ho\" :class=\"{ red: isRed }\"></div>\n          <span>{{ test }}</span>\n          <input :value=\"test\">\n          <img :src=\"imageUrl\">\n          <test></test>\n          <test-async></test-async>\n        </div>\n      `,\n      data: {\n        test: 'hi',\n        isRed: true,\n        imageUrl: 'https://vuejs.org/images/logo.png'\n      },\n      components: {\n        test: {\n          render() {\n            return this.$createElement('div', {\n              class: ['a']\n            }, 'test');\n          }\n\n        },\n\n        testAsync(resolve) {\n          resolve({\n            render() {\n              return this.$createElement('span', {\n                class: ['b']\n              }, 'testAsync');\n            }\n\n          });\n        }\n\n      }\n    }), (err, result) => {\n      expect(err).toBeNull();\n      expect(result).toContain('<div data-server-rendered=\"true\">' + '<p class=\"hi\">yoyo</p> ' + '<div id=\"ho\" class=\"red\"></div> ' + '<span>hi</span> ' + '<input value=\"hi\"> ' + '<img src=\"https://vuejs.org/images/logo.png\"> ' + '<div class=\"a\">test</div> ' + '<span class=\"b\">testAsync</span>' + '</div>');\n      done();\n    });\n  }); // #5941","file":"ssr/ssr-basic-renderer.spec.js","skipped":false,"dir":"test"},{"name":"should work peoperly when accessing $ssrContext in root component","suites":["SSR: basicRenderer"],"line":51,"updatePoint":{"line":51,"column":71,"index":1528},"code":"  it('should work peoperly when accessing $ssrContext in root component', done => {\n    let ssrContext;\n    renderToString(new Vue({\n      template: `\n        <div></div>\n      `,\n\n      created() {\n        ssrContext = this.$ssrContext;\n      }\n\n    }), (err, result) => {\n      expect(err).toBeNull();\n      expect(ssrContext).toBeUndefined();\n      done();\n    });\n  });","file":"ssr/ssr-basic-renderer.spec.js","skipped":false,"dir":"test"},{"name":"renderToString","suites":["SSR: bundle renderer"],"line":35,"updatePoint":{"line":35,"column":20,"index":1205},"code":"  it('renderToString', done => {\n    createRenderer('app.js', {\n      runInNewContext\n    }, renderer => {\n      const context = {\n        url: '/test'\n      };\n      renderer.renderToString(context, (err, res) => {\n        expect(err).toBeNull();\n        expect(res).toBe('<div data-server-rendered=\"true\">/test</div>');\n        expect(context.msg).toBe('hello');\n        done();\n      });\n    });\n  });","file":"ssr/ssr-bundle-render.spec.js","skipped":false,"dir":"test"},{"name":"renderToStream","suites":["SSR: bundle renderer"],"line":50,"updatePoint":{"line":50,"column":20,"index":1610},"code":"  it('renderToStream', done => {\n    createRenderer('app.js', {\n      runInNewContext\n    }, renderer => {\n      const context = {\n        url: '/test'\n      };\n      const stream = renderer.renderToStream(context);\n      let res = '';\n      stream.on('data', chunk => {\n        res += chunk.toString();\n      });\n      stream.on('end', () => {\n        expect(res).toBe('<div data-server-rendered=\"true\">/test</div>');\n        expect(context.msg).toBe('hello');\n        done();\n      });\n    });\n  });","file":"ssr/ssr-bundle-render.spec.js","skipped":false,"dir":"test"},{"name":"renderToString catch error","suites":["SSR: bundle renderer"],"line":69,"updatePoint":{"line":69,"column":32,"index":2124},"code":"  it('renderToString catch error', done => {\n    createRenderer('error.js', {\n      runInNewContext\n    }, renderer => {\n      renderer.renderToString(err => {\n        expect(err.message).toBe('foo');\n        done();\n      });\n    });\n  });","file":"ssr/ssr-bundle-render.spec.js","skipped":false,"dir":"test"},{"name":"renderToStream catch error","suites":["SSR: bundle renderer"],"line":79,"updatePoint":{"line":79,"column":32,"index":2365},"code":"  it('renderToStream catch error', done => {\n    createRenderer('error.js', {\n      runInNewContext\n    }, renderer => {\n      const stream = renderer.renderToStream();\n      stream.on('error', err => {\n        expect(err.message).toBe('foo');\n        done();\n      });\n    });\n  });","file":"ssr/ssr-bundle-render.spec.js","skipped":false,"dir":"test"},{"name":"render with cache (get/set)","suites":["SSR: bundle renderer"],"line":90,"updatePoint":{"line":90,"column":33,"index":2650},"code":"  it('render with cache (get/set)', done => {\n    const cache = {};\n    const get = jasmine.createSpy('get');\n    const set = jasmine.createSpy('set');\n    const options = {\n      runInNewContext,\n      cache: {\n        // async\n        get: (key, cb) => {\n          setTimeout(() => {\n            get(key);\n            cb(cache[key]);\n          }, 0);\n        },\n        set: (key, val) => {\n          set(key, val);\n          cache[key] = val;\n        }\n      }\n    };\n    createRenderer('cache.js', options, renderer => {\n      const expected = '<div data-server-rendered=\"true\">/test</div>';\n      const key = 'app::1';\n      renderer.renderToString((err, res) => {\n        expect(err).toBeNull();\n        expect(res).toBe(expected);\n        expect(get).toHaveBeenCalledWith(key);\n        const setArgs = set.calls.argsFor(0);\n        expect(setArgs[0]).toBe(key);\n        expect(setArgs[1].html).toBe(expected);\n        expect(cache[key].html).toBe(expected);\n        renderer.renderToString((err, res) => {\n          expect(err).toBeNull();\n          expect(res).toBe(expected);\n          expect(get.calls.count()).toBe(2);\n          expect(set.calls.count()).toBe(1);\n          done();\n        });\n      });\n    });\n  });","file":"ssr/ssr-bundle-render.spec.js","skipped":false,"dir":"test"},{"name":"render with cache (get/set/has)","suites":["SSR: bundle renderer"],"line":131,"updatePoint":{"line":131,"column":37,"index":3883},"code":"  it('render with cache (get/set/has)', done => {\n    const cache = {};\n    const has = jasmine.createSpy('has');\n    const get = jasmine.createSpy('get');\n    const set = jasmine.createSpy('set');\n    const options = {\n      runInNewContext,\n      cache: {\n        // async\n        has: (key, cb) => {\n          has(key);\n          cb(!!cache[key]);\n        },\n        // sync\n        get: key => {\n          get(key);\n          return cache[key];\n        },\n        set: (key, val) => {\n          set(key, val);\n          cache[key] = val;\n        }\n      }\n    };\n    createRenderer('cache.js', options, renderer => {\n      const expected = '<div data-server-rendered=\"true\">/test</div>';\n      const key = 'app::1';\n      renderer.renderToString((err, res) => {\n        expect(err).toBeNull();\n        expect(res).toBe(expected);\n        expect(has).toHaveBeenCalledWith(key);\n        expect(get).not.toHaveBeenCalled();\n        const setArgs = set.calls.argsFor(0);\n        expect(setArgs[0]).toBe(key);\n        expect(setArgs[1].html).toBe(expected);\n        expect(cache[key].html).toBe(expected);\n        renderer.renderToString((err, res) => {\n          expect(err).toBeNull();\n          expect(res).toBe(expected);\n          expect(has.calls.count()).toBe(2);\n          expect(get.calls.count()).toBe(1);\n          expect(set.calls.count()).toBe(1);\n          done();\n        });\n      });\n    });\n  });","file":"ssr/ssr-bundle-render.spec.js","skipped":false,"dir":"test"},{"name":"render with cache (nested)","suites":["SSR: bundle renderer"],"line":178,"updatePoint":{"line":178,"column":32,"index":5292},"code":"  it('render with cache (nested)', done => {\n    const cache = LRU({\n      maxAge: Infinity\n    });\n    spyOn(cache, 'get').and.callThrough();\n    spyOn(cache, 'set').and.callThrough();\n    const options = {\n      cache,\n      runInNewContext\n    };\n    createRenderer('nested-cache.js', options, renderer => {\n      const expected = '<div data-server-rendered=\"true\">/test</div>';\n      const key = 'app::1';\n      const context1 = {\n        registered: []\n      };\n      const context2 = {\n        registered: []\n      };\n      renderer.renderToString(context1, (err, res) => {\n        expect(err).toBeNull();\n        expect(res).toBe(expected);\n        expect(cache.set.calls.count()).toBe(3); // 3 nested components cached\n\n        const cached = cache.get(key);\n        expect(cached.html).toBe(expected);\n        expect(cache.get.calls.count()).toBe(1); // assert component usage registration for nested children\n\n        expect(context1.registered).toEqual(['app', 'child', 'grandchild']);\n        renderer.renderToString(context2, (err, res) => {\n          expect(err).toBeNull();\n          expect(res).toBe(expected);\n          expect(cache.set.calls.count()).toBe(3); // no new cache sets\n\n          expect(cache.get.calls.count()).toBe(2); // 1 get for root\n\n          expect(context2.registered).toEqual(['app', 'child', 'grandchild']);\n          done();\n        });\n      });\n    });\n  });","file":"ssr/ssr-bundle-render.spec.js","skipped":false,"dir":"test"},{"name":"renderToString (bundle format with code split)","suites":["SSR: bundle renderer"],"line":220,"updatePoint":{"line":220,"column":52,"index":6715},"code":"  it('renderToString (bundle format with code split)', done => {\n    createRenderer('split.js', {\n      runInNewContext,\n      asBundle: true\n    }, renderer => {\n      const context = {\n        url: '/test'\n      };\n      renderer.renderToString(context, (err, res) => {\n        expect(err).toBeNull();\n        expect(res).toBe('<div data-server-rendered=\"true\">/test<div>async test.woff2 test.png</div></div>');\n        done();\n      });\n    });\n  });","file":"ssr/ssr-bundle-render.spec.js","skipped":false,"dir":"test"},{"name":"renderToStream (bundle format with code split)","suites":["SSR: bundle renderer"],"line":235,"updatePoint":{"line":235,"column":52,"index":7169},"code":"  it('renderToStream (bundle format with code split)', done => {\n    createRenderer('split.js', {\n      runInNewContext,\n      asBundle: true\n    }, renderer => {\n      const context = {\n        url: '/test'\n      };\n      const stream = renderer.renderToStream(context);\n      let res = '';\n      stream.on('data', chunk => {\n        res += chunk.toString();\n      });\n      stream.on('end', () => {\n        expect(res).toBe('<div data-server-rendered=\"true\">/test<div>async test.woff2 test.png</div></div>');\n        done();\n      });\n    });\n  });","file":"ssr/ssr-bundle-render.spec.js","skipped":false,"dir":"test"},{"name":"renderToString catch error (bundle format with source map)","suites":["SSR: bundle renderer"],"line":254,"updatePoint":{"line":254,"column":64,"index":7732},"code":"  it('renderToString catch error (bundle format with source map)', done => {\n    createRenderer('error.js', {\n      runInNewContext,\n      asBundle: true\n    }, renderer => {\n      renderer.renderToString(err => {\n        expect(err.stack).toContain('test/ssr/fixtures/error.js:1:6');\n        expect(err.message).toBe('foo');\n        done();\n      });\n    });\n  });","file":"ssr/ssr-bundle-render.spec.js","skipped":false,"dir":"test"},{"name":"renderToString catch error (bundle format with source map)","suites":["SSR: bundle renderer"],"line":266,"updatePoint":{"line":266,"column":64,"index":8098},"code":"  it('renderToString catch error (bundle format with source map)', done => {\n    createRenderer('error.js', {\n      runInNewContext,\n      asBundle: true\n    }, renderer => {\n      const stream = renderer.renderToStream();\n      stream.on('error', err => {\n        expect(err.stack).toContain('test/ssr/fixtures/error.js:1:6');\n        expect(err.message).toBe('foo');\n        done();\n      });\n    });\n  });","file":"ssr/ssr-bundle-render.spec.js","skipped":false,"dir":"test"},{"name":"should render to a stream","suites":["SSR: renderToStream"],"line":7,"updatePoint":{"line":7,"column":31,"index":240},"code":"  it('should render to a stream', done => {\n    const stream = renderToStream(new Vue({\n      template: `\n        <div>\n          <p class=\"hi\">yoyo</p>\n          <div id=\"ho\" :class=\"[testClass, { red: isRed }]\"></div>\n          <span>{{ test }}</span>\n          <input :value=\"test\">\n          <b-comp></b-comp>\n          <c-comp></c-comp>\n        </div>\n      `,\n      data: {\n        test: 'hi',\n        isRed: true,\n        testClass: 'a'\n      },\n      components: {\n        bComp(resolve) {\n          return resolve({\n            render(h) {\n              return h('test-async-2');\n            },\n\n            components: {\n              testAsync2(resolve) {\n                return resolve({\n                  created() {\n                    this.$parent.$parent.testClass = 'b';\n                  },\n\n                  render(h) {\n                    return h('div', {\n                      class: [this.$parent.$parent.testClass]\n                    }, 'test');\n                  }\n\n                });\n              }\n\n            }\n          });\n        },\n\n        cComp: {\n          render(h) {\n            return h('div', {\n              class: [this.$parent.testClass]\n            }, 'test');\n          }\n\n        }\n      }\n    }));\n    let res = '';\n    stream.on('data', chunk => {\n      res += chunk;\n    });\n    stream.on('end', () => {\n      expect(res).toContain('<div data-server-rendered=\"true\">' + '<p class=\"hi\">yoyo</p> ' + '<div id=\"ho\" class=\"a red\"></div> ' + '<span>hi</span> ' + '<input value=\"hi\"> ' + '<div class=\"b\">test</div> ' + '<div class=\"b\">test</div>' + '</div>');\n      done();\n    });\n  });","file":"ssr/ssr-stream.spec.js","skipped":false,"dir":"test"},{"name":"should catch error","suites":["SSR: renderToStream"],"line":70,"updatePoint":{"line":70,"column":24,"index":1868},"code":"  it('should catch error', done => {\n    Vue.config.silent = true;\n    const stream = renderToStream(new Vue({\n      render() {\n        throw new Error('oops');\n      }\n\n    }));\n    stream.on('error', err => {\n      expect(err.toString()).toMatch(/oops/);\n      Vue.config.silent = false;\n      done();\n    });\n    stream.on('data', _ => _);\n  });","file":"ssr/ssr-stream.spec.js","skipped":false,"dir":"test"},{"name":"should not mingle two components","suites":["SSR: renderToStream"],"line":85,"updatePoint":{"line":85,"column":38,"index":2231},"code":"  it('should not mingle two components', done => {\n    const padding = new Array(20000).join('x');\n    const component1 = new Vue({\n      template: `<div>${padding}<div></div></div>`,\n      _scopeId: '_component1'\n    });\n    const component2 = new Vue({\n      template: `<div></div>`,\n      _scopeId: '_component2'\n    });\n    var stream1 = renderToStream(component1);\n    var stream2 = renderToStream(component2);\n    var res = '';\n    stream1.on('data', text => {\n      res += text.toString('utf-8').replace(/x/g, '');\n    });\n    stream1.on('end', () => {\n      expect(res).not.toContain('_component2');\n      done();\n    });\n    stream1.read(1);\n    stream2.read(1);\n  });","file":"ssr/ssr-stream.spec.js","skipped":false,"dir":"test"},{"name":"static attributes","suites":["SSR: renderToString"],"line":8,"updatePoint":{"line":8,"column":23,"index":253},"code":"  it('static attributes', done => {\n    renderVmWithOptions({\n      template: '<div id=\"foo\" bar=\"123\"></div>'\n    }, result => {\n      expect(result).toContain('<div id=\"foo\" bar=\"123\" data-server-rendered=\"true\"></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"unary tags","suites":["SSR: renderToString"],"line":16,"updatePoint":{"line":16,"column":16,"index":498},"code":"  it('unary tags', done => {\n    renderVmWithOptions({\n      template: '<input value=\"123\">'\n    }, result => {\n      expect(result).toContain('<input value=\"123\" data-server-rendered=\"true\">');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"dynamic attributes","suites":["SSR: renderToString"],"line":24,"updatePoint":{"line":24,"column":24,"index":729},"code":"  it('dynamic attributes', done => {\n    renderVmWithOptions({\n      template: '<div qux=\"quux\" :id=\"foo\" :bar=\"baz\"></div>',\n      data: {\n        foo: 'hi',\n        baz: 123\n      }\n    }, result => {\n      expect(result).toContain('<div qux=\"quux\" id=\"hi\" bar=\"123\" data-server-rendered=\"true\"></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"static class","suites":["SSR: renderToString"],"line":36,"updatePoint":{"line":36,"column":18,"index":1058},"code":"  it('static class', done => {\n    renderVmWithOptions({\n      template: '<div class=\"foo bar\"></div>'\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\" class=\"foo bar\"></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"dynamic class","suites":["SSR: renderToString"],"line":44,"updatePoint":{"line":44,"column":19,"index":1300},"code":"  it('dynamic class', done => {\n    renderVmWithOptions({\n      template: '<div class=\"foo bar\" :class=\"[a, { qux: hasQux, quux: hasQuux }]\"></div>',\n      data: {\n        a: 'baz',\n        hasQux: true,\n        hasQuux: false\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\" class=\"foo bar baz qux\"></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"custom component class","suites":["SSR: renderToString"],"line":57,"updatePoint":{"line":57,"column":28,"index":1690},"code":"  it('custom component class', done => {\n    renderVmWithOptions({\n      template: '<div><cmp class=\"cmp\"></cmp></div>',\n      components: {\n        cmp: {\n          render: h => h('div', 'test')\n        }\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\"><div class=\"cmp\">test</div></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"nested component class","suites":["SSR: renderToString"],"line":70,"updatePoint":{"line":70,"column":28,"index":2053},"code":"  it('nested component class', done => {\n    renderVmWithOptions({\n      template: '<cmp class=\"outer\" :class=\"cls\"></cmp>',\n      data: {\n        cls: {\n          'success': 1\n        }\n      },\n      components: {\n        cmp: {\n          render: h => h('div', [h('nested', {\n            staticClass: 'nested',\n            'class': {\n              'error': 1\n            }\n          })]),\n          components: {\n            nested: {\n              render: h => h('div', {\n                staticClass: 'inner'\n              }, 'test')\n            }\n          }\n        }\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\" class=\"outer success\">' + '<div class=\"inner nested error\">test</div>' + '</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"dynamic style","suites":["SSR: renderToString"],"line":100,"updatePoint":{"line":100,"column":19,"index":2821},"code":"  it('dynamic style', done => {\n    renderVmWithOptions({\n      template: '<div style=\"background-color:black\" :style=\"{ fontSize: fontSize + \\'px\\', color: color }\"></div>',\n      data: {\n        fontSize: 14,\n        color: 'red'\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\" style=\"background-color:black;font-size:14px;color:red;\"></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"dynamic string style","suites":["SSR: renderToString"],"line":112,"updatePoint":{"line":112,"column":26,"index":3247},"code":"  it('dynamic string style', done => {\n    renderVmWithOptions({\n      template: '<div :style=\"style\"></div>',\n      data: {\n        style: 'color:red'\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\" style=\"color:red;\"></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"auto-prefixed style value as array","suites":["SSR: renderToString"],"line":123,"updatePoint":{"line":123,"column":40,"index":3562},"code":"  it('auto-prefixed style value as array', done => {\n    renderVmWithOptions({\n      template: '<div :style=\"style\"></div>',\n      data: {\n        style: {\n          display: ['-webkit-box', '-ms-flexbox', 'flex']\n        }\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\" style=\"display:-webkit-box;display:-ms-flexbox;display:flex;\"></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"custom component style","suites":["SSR: renderToString"],"line":136,"updatePoint":{"line":136,"column":28,"index":3966},"code":"  it('custom component style', done => {\n    renderVmWithOptions({\n      template: '<section><comp :style=\"style\"></comp></section>',\n      data: {\n        style: 'color:red'\n      },\n      components: {\n        comp: {\n          template: '<div></div>'\n        }\n      }\n    }, result => {\n      expect(result).toContain('<section data-server-rendered=\"true\"><div style=\"color:red;\"></div></section>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"nested custom component style","suites":["SSR: renderToString"],"line":152,"updatePoint":{"line":152,"column":35,"index":4405},"code":"  it('nested custom component style', done => {\n    renderVmWithOptions({\n      template: '<comp style=\"color: blue\" :style=\"style\"></comp>',\n      data: {\n        style: 'color:red'\n      },\n      components: {\n        comp: {\n          template: '<nested style=\"text-align: left;\" :style=\"{fontSize:\\'520rem\\'}\"></nested>',\n          components: {\n            nested: {\n              template: '<div></div>'\n            }\n          }\n        }\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\" style=\"text-align:left;font-size:520rem;color:red;\"></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"component style not passed to child","suites":["SSR: renderToString"],"line":173,"updatePoint":{"line":173,"column":41,"index":5039},"code":"  it('component style not passed to child', done => {\n    renderVmWithOptions({\n      template: '<comp :style=\"style\"></comp>',\n      data: {\n        style: 'color:red'\n      },\n      components: {\n        comp: {\n          template: '<div><div></div></div>'\n        }\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\" style=\"color:red;\"><div></div></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"component style not passed to slot","suites":["SSR: renderToString"],"line":189,"updatePoint":{"line":189,"column":40,"index":5467},"code":"  it('component style not passed to slot', done => {\n    renderVmWithOptions({\n      template: '<comp :style=\"style\"><span style=\"color:black\"></span></comp>',\n      data: {\n        style: 'color:red'\n      },\n      components: {\n        comp: {\n          template: '<div><slot></slot></div>'\n        }\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\" style=\"color:red;\"><span style=\"color:black;\"></span></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"attrs merging on components","suites":["SSR: renderToString"],"line":205,"updatePoint":{"line":205,"column":33,"index":5946},"code":"  it('attrs merging on components', done => {\n    const Test = {\n      render: h => h('div', {\n        attrs: {\n          id: 'a'\n        }\n      })\n    };\n    renderVmWithOptions({\n      render: h => h(Test, {\n        attrs: {\n          id: 'b',\n          name: 'c'\n        }\n      })\n    }, res => {\n      expect(res).toContain('<div id=\"b\" data-server-rendered=\"true\" name=\"c\"></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"domProps merging on components","suites":["SSR: renderToString"],"line":225,"updatePoint":{"line":225,"column":36,"index":6367},"code":"  it('domProps merging on components', done => {\n    const Test = {\n      render: h => h('div', {\n        domProps: {\n          innerHTML: 'a'\n        }\n      })\n    };\n    renderVmWithOptions({\n      render: h => h(Test, {\n        domProps: {\n          innerHTML: 'b',\n          value: 'c'\n        }\n      })\n    }, res => {\n      expect(res).toContain('<div data-server-rendered=\"true\" value=\"c\">b</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"v-show directive render","suites":["SSR: renderToString"],"line":245,"updatePoint":{"line":245,"column":29,"index":6797},"code":"  it('v-show directive render', done => {\n    renderVmWithOptions({\n      template: '<div v-show=\"false\"><span>inner</span></div>'\n    }, res => {\n      expect(res).toContain('<div data-server-rendered=\"true\" style=\"display:none;\"><span>inner</span></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"v-show directive not passed to child","suites":["SSR: renderToString"],"line":253,"updatePoint":{"line":253,"column":42,"index":7097},"code":"  it('v-show directive not passed to child', done => {\n    renderVmWithOptions({\n      template: '<foo v-show=\"false\"></foo>',\n      components: {\n        foo: {\n          template: '<div><span>inner</span></div>'\n        }\n      }\n    }, res => {\n      expect(res).toContain('<div data-server-rendered=\"true\" style=\"display:none;\"><span>inner</span></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"v-show directive not passed to slot","suites":["SSR: renderToString"],"line":266,"updatePoint":{"line":266,"column":41,"index":7484},"code":"  it('v-show directive not passed to slot', done => {\n    renderVmWithOptions({\n      template: '<foo v-show=\"false\"><span>inner</span></foo>',\n      components: {\n        foo: {\n          template: '<div><slot></slot></div>'\n        }\n      }\n    }, res => {\n      expect(res).toContain('<div data-server-rendered=\"true\" style=\"display:none;\"><span>inner</span></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"v-show directive merging on components","suites":["SSR: renderToString"],"line":279,"updatePoint":{"line":279,"column":44,"index":7887},"code":"  it('v-show directive merging on components', done => {\n    renderVmWithOptions({\n      template: '<foo v-show=\"false\"></foo>',\n      components: {\n        foo: {\n          render: h => h('bar', {\n            directives: [{\n              name: 'show',\n              value: true\n            }]\n          }),\n          components: {\n            bar: {\n              render: h => h('div', 'inner')\n            }\n          }\n        }\n      }\n    }, res => {\n      expect(res).toContain('<div data-server-rendered=\"true\" style=\"display:none;\">inner</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"text interpolation","suites":["SSR: renderToString"],"line":302,"updatePoint":{"line":302,"column":24,"index":8450},"code":"  it('text interpolation', done => {\n    renderVmWithOptions({\n      template: '<div>{{ foo }} side {{ bar }}</div>',\n      data: {\n        foo: 'server',\n        bar: '<span>rendering</span>'\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\">server side &lt;span&gt;rendering&lt;/span&gt;</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"v-html on root","suites":["SSR: renderToString"],"line":314,"updatePoint":{"line":314,"column":20,"index":8815},"code":"  it('v-html on root', done => {\n    renderVmWithOptions({\n      template: '<div v-html=\"text\"></div>',\n      data: {\n        text: '<span>foo</span>'\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\"><span>foo</span></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"v-text on root","suites":["SSR: renderToString"],"line":325,"updatePoint":{"line":325,"column":20,"index":9112},"code":"  it('v-text on root', done => {\n    renderVmWithOptions({\n      template: '<div v-text=\"text\"></div>',\n      data: {\n        text: '<span>foo</span>'\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\">&lt;span&gt;foo&lt;/span&gt;</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"v-html","suites":["SSR: renderToString"],"line":336,"updatePoint":{"line":336,"column":12,"index":9413},"code":"  it('v-html', done => {\n    renderVmWithOptions({\n      template: '<div><div v-html=\"text\"></div></div>',\n      data: {\n        text: '<span>foo</span>'\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\"><div><span>foo</span></div></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"v-text","suites":["SSR: renderToString"],"line":347,"updatePoint":{"line":347,"column":12,"index":9724},"code":"  it('v-text', done => {\n    renderVmWithOptions({\n      template: '<div><div v-text=\"text\"></div></div>',\n      data: {\n        text: '<span>foo</span>'\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\"><div>&lt;span&gt;foo&lt;/span&gt;</div></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"child component (hoc)","suites":["SSR: renderToString"],"line":358,"updatePoint":{"line":358,"column":27,"index":10062},"code":"  it('child component (hoc)', done => {\n    renderVmWithOptions({\n      template: '<child class=\"foo\" :msg=\"msg\"></child>',\n      data: {\n        msg: 'hello'\n      },\n      components: {\n        child: {\n          props: ['msg'],\n\n          data() {\n            return {\n              name: 'bar'\n            };\n          },\n\n          render() {\n            const h = this.$createElement;\n            return h('div', {\n              class: ['bar']\n            }, [`${this.msg} ${this.name}`]);\n          }\n\n        }\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\" class=\"foo bar\">hello bar</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"has correct lifecycle during render","suites":["SSR: renderToString"],"line":388,"updatePoint":{"line":388,"column":41,"index":10750},"code":"  it('has correct lifecycle during render', done => {\n    let lifecycleCount = 1;\n    renderVmWithOptions({\n      template: '<div><span>{{ val }}</span><test></test></div>',\n      data: {\n        val: 'hi'\n      },\n\n      beforeCreate() {\n        expect(lifecycleCount++).toBe(1);\n      },\n\n      created() {\n        this.val = 'hello';\n        expect(this.val).toBe('hello');\n        expect(lifecycleCount++).toBe(2);\n      },\n\n      components: {\n        test: {\n          beforeCreate() {\n            expect(lifecycleCount++).toBe(3);\n          },\n\n          created() {\n            expect(lifecycleCount++).toBe(4);\n          },\n\n          render() {\n            expect(lifecycleCount++).toBeGreaterThan(4);\n            return this.$createElement('span', {\n              class: ['b']\n            }, 'testAsync');\n          }\n\n        }\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\">' + '<span>hello</span>' + '<span class=\"b\">testAsync</span>' + '</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"computed properties","suites":["SSR: renderToString"],"line":430,"updatePoint":{"line":430,"column":25,"index":11769},"code":"  it('computed properties', done => {\n    renderVmWithOptions({\n      template: '<div>{{ b }}</div>',\n      data: {\n        a: {\n          b: 1\n        }\n      },\n      computed: {\n        b() {\n          return this.a.b + 1;\n        }\n\n      },\n\n      created() {\n        this.a.b = 2;\n        expect(this.b).toBe(3);\n      }\n\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\">3</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"renders async component","suites":["SSR: renderToString"],"line":455,"updatePoint":{"line":455,"column":29,"index":12224},"code":"  it('renders async component', done => {\n    renderVmWithOptions({\n      template: `\n        <div>\n          <test-async></test-async>\n        </div>\n      `,\n      components: {\n        testAsync(resolve) {\n          setTimeout(() => resolve({\n            render() {\n              return this.$createElement('span', {\n                class: ['b']\n              }, 'testAsync');\n            }\n\n          }), 1);\n        }\n\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\"><span class=\"b\">testAsync</span></div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"renders async component (Promise, nested)","suites":["SSR: renderToString"],"line":480,"updatePoint":{"line":480,"column":47,"index":12828},"code":"  it('renders async component (Promise, nested)', done => {\n    const Foo = () => Promise.resolve({\n      render: h => h('div', [h('span', 'foo'), h(Bar)])\n    });\n\n    const Bar = () => ({\n      component: Promise.resolve({\n        render: h => h('span', 'bar')\n      })\n    });\n\n    renderVmWithOptions({\n      render: h => h(Foo)\n    }, res => {\n      expect(res).toContain(`<div data-server-rendered=\"true\"><span>foo</span><span>bar</span></div>`);\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"renders async component (ES module)","suites":["SSR: renderToString"],"line":498,"updatePoint":{"line":498,"column":41,"index":13303},"code":"  it('renders async component (ES module)', done => {\n    const Foo = () => Promise.resolve({\n      __esModule: true,\n      default: {\n        render: h => h('div', [h('span', 'foo'), h(Bar)])\n      }\n    });\n\n    const Bar = () => ({\n      component: Promise.resolve({\n        __esModule: true,\n        default: {\n          render: h => h('span', 'bar')\n        }\n      })\n    });\n\n    renderVmWithOptions({\n      render: h => h(Foo)\n    }, res => {\n      expect(res).toContain(`<div data-server-rendered=\"true\"><span>foo</span><span>bar</span></div>`);\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"renders async component (hoc)","suites":["SSR: renderToString"],"line":522,"updatePoint":{"line":522,"column":35,"index":13880},"code":"  it('renders async component (hoc)', done => {\n    renderVmWithOptions({\n      template: '<test-async></test-async>',\n      components: {\n        testAsync: () => Promise.resolve({\n          render() {\n            return this.$createElement('span', {\n              class: ['b']\n            }, 'testAsync');\n          }\n\n        })\n      }\n    }, result => {\n      expect(result).toContain('<span data-server-rendered=\"true\" class=\"b\">testAsync</span>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"everything together","suites":["SSR: renderToString"],"line":540,"updatePoint":{"line":540,"column":25,"index":14353},"code":"  it('everything together', done => {\n    renderVmWithOptions({\n      template: `\n        <div>\n          <p class=\"hi\">yoyo</p>\n          <div id=\"ho\" :class=\"{ red: isRed }\"></div>\n          <span>{{ test }}</span>\n          <input :value=\"test\">\n          <img :src=\"imageUrl\">\n          <test></test>\n          <test-async></test-async>\n        </div>\n      `,\n      data: {\n        test: 'hi',\n        isRed: true,\n        imageUrl: 'https://vuejs.org/images/logo.png'\n      },\n      components: {\n        test: {\n          render() {\n            return this.$createElement('div', {\n              class: ['a']\n            }, 'test');\n          }\n\n        },\n\n        testAsync(resolve) {\n          resolve({\n            render() {\n              return this.$createElement('span', {\n                class: ['b']\n              }, 'testAsync');\n            }\n\n          });\n        }\n\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\">' + '<p class=\"hi\">yoyo</p> ' + '<div id=\"ho\" class=\"red\"></div> ' + '<span>hi</span> ' + '<input value=\"hi\"> ' + '<img src=\"https://vuejs.org/images/logo.png\"> ' + '<div class=\"a\">test</div> ' + '<span class=\"b\">testAsync</span>' + '</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"normal attr","suites":["SSR: renderToString"],"line":585,"updatePoint":{"line":585,"column":17,"index":15596},"code":"  it('normal attr', done => {\n    renderVmWithOptions({\n      template: `\n        <div>\n          <span :test=\"'ok'\">hello</span>\n          <span :test=\"null\">hello</span>\n          <span :test=\"false\">hello</span>\n          <span :test=\"true\">hello</span>\n          <span :test=\"0\">hello</span>\n        </div>\n      `\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\">' + '<span test=\"ok\">hello</span> ' + '<span>hello</span> ' + '<span>hello</span> ' + '<span test=\"true\">hello</span> ' + '<span test=\"0\">hello</span>' + '</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"enumerated attr","suites":["SSR: renderToString"],"line":601,"updatePoint":{"line":601,"column":21,"index":16196},"code":"  it('enumerated attr', done => {\n    renderVmWithOptions({\n      template: `\n        <div>\n          <span :draggable=\"true\">hello</span>\n          <span :draggable=\"'ok'\">hello</span>\n          <span :draggable=\"null\">hello</span>\n          <span :draggable=\"false\">hello</span>\n          <span :draggable=\"''\">hello</span>\n          <span :draggable=\"'false'\">hello</span>\n        </div>\n      `\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\">' + '<span draggable=\"true\">hello</span> ' + '<span draggable=\"true\">hello</span> ' + '<span draggable=\"false\">hello</span> ' + '<span draggable=\"false\">hello</span> ' + '<span draggable=\"true\">hello</span> ' + '<span draggable=\"false\">hello</span>' + '</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"boolean attr","suites":["SSR: renderToString"],"line":618,"updatePoint":{"line":618,"column":18,"index":16967},"code":"  it('boolean attr', done => {\n    renderVmWithOptions({\n      template: `\n        <div>\n          <span :disabled=\"true\">hello</span>\n          <span :disabled=\"'ok'\">hello</span>\n          <span :disabled=\"null\">hello</span>\n          <span :disabled=\"''\">hello</span>\n        </div>\n      `\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\">' + '<span disabled=\"disabled\">hello</span> ' + '<span disabled=\"disabled\">hello</span> ' + '<span>hello</span> ' + '<span disabled=\"disabled\">hello</span>' + '</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"v-bind object","suites":["SSR: renderToString"],"line":633,"updatePoint":{"line":633,"column":19,"index":17544},"code":"  it('v-bind object', done => {\n    renderVmWithOptions({\n      data: {\n        test: {\n          id: 'a',\n          class: ['a', 'b'],\n          value: 'c'\n        }\n      },\n      template: '<input v-bind=\"test\">'\n    }, result => {\n      expect(result).toContain('<input id=\"a\" data-server-rendered=\"true\" value=\"c\" class=\"a b\">');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"custom directives","suites":["SSR: renderToString"],"line":648,"updatePoint":{"line":648,"column":23,"index":17911},"code":"  it('custom directives', done => {\n    const renderer = createRenderer({\n      directives: {\n        'class-prefixer': (node, dir) => {\n          if (node.data.class) {\n            node.data.class = `${dir.value}-${node.data.class}`;\n          }\n\n          if (node.data.staticClass) {\n            node.data.staticClass = `${dir.value}-${node.data.staticClass}`;\n          }\n        }\n      }\n    });\n    renderer.renderToString(new Vue({\n      render() {\n        const h = this.$createElement;\n        return h('p', {\n          class: 'class1',\n          staticClass: 'class2',\n          directives: [{\n            name: 'class-prefixer',\n            value: 'my'\n          }]\n        }, ['hello world']);\n      }\n\n    }), (err, result) => {\n      expect(err).toBeNull();\n      expect(result).toContain('<p data-server-rendered=\"true\" class=\"my-class2 my-class1\">hello world</p>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"_scopeId","suites":["SSR: renderToString"],"line":681,"updatePoint":{"line":681,"column":14,"index":18813},"code":"  it('_scopeId', done => {\n    renderVmWithOptions({\n      _scopeId: '_v-parent',\n      template: '<div id=\"foo\"><p><child></child></p></div>',\n      components: {\n        child: {\n          _scopeId: '_v-child',\n\n          render() {\n            const h = this.$createElement;\n            return h('div', null, [h('span', null, ['foo'])]);\n          }\n\n        }\n      }\n    }, result => {\n      expect(result).toContain('<div id=\"foo\" data-server-rendered=\"true\" _v-parent>' + '<p _v-parent>' + '<div _v-child _v-parent><span _v-child>foo</span></div>' + '</p>' + '</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"_scopeId on slot content","suites":["SSR: renderToString"],"line":701,"updatePoint":{"line":701,"column":30,"index":19434},"code":"  it('_scopeId on slot content', done => {\n    renderVmWithOptions({\n      _scopeId: '_v-parent',\n      template: '<div><child><p>foo</p></child></div>',\n      components: {\n        child: {\n          _scopeId: '_v-child',\n\n          render() {\n            const h = this.$createElement;\n            return h('div', null, this.$slots.default);\n          }\n\n        }\n      }\n    }, result => {\n      expect(result).toContain('<div data-server-rendered=\"true\" _v-parent>' + '<div _v-child _v-parent><p _v-child _v-parent>foo</p></div>' + '</div>');\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"comment nodes","suites":["SSR: renderToString"],"line":721,"updatePoint":{"line":721,"column":19,"index":19999},"code":"  it('comment nodes', done => {\n    renderVmWithOptions({\n      template: '<div><transition><div v-if=\"false\"></div></transition></div>'\n    }, result => {\n      expect(result).toContain(`<div data-server-rendered=\"true\"><!----></div>`);\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"should catch error","suites":["SSR: renderToString"],"line":729,"updatePoint":{"line":729,"column":24,"index":20270},"code":"  it('should catch error', done => {\n    Vue.config.silent = true;\n    renderToString(new Vue({\n      render() {\n        throw new Error('oops');\n      }\n\n    }), err => {\n      expect(err instanceof Error).toBe(true);\n      Vue.config.silent = false;\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"default value Foreign Function","suites":["SSR: renderToString"],"line":742,"updatePoint":{"line":742,"column":36,"index":20562},"code":"  it('default value Foreign Function', () => {\n    const FunctionConstructor = VM.runInNewContext('Function');\n\n    const func = () => 123;\n\n    const vm = new Vue({\n      props: {\n        a: {\n          type: FunctionConstructor,\n          default: func\n        }\n      },\n      propsData: {\n        a: undefined\n      }\n    });\n    expect(vm.a).toBe(func);\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"should prevent xss in attribtues","suites":["SSR: renderToString"],"line":760,"updatePoint":{"line":760,"column":38,"index":20929},"code":"  it('should prevent xss in attribtues', done => {\n    renderVmWithOptions({\n      data: {\n        xss: '\"><script>alert(1)</script>'\n      },\n      template: `\n        <div>\n          <a :title=\"xss\" :style=\"{ color: xss }\" :class=\"[xss]\">foo</a>\n        </div>\n      `\n    }, res => {\n      expect(res).not.toContain(`<script>alert(1)</script>`);\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"v-if","suites":["SSR: renderToString"],"line":775,"updatePoint":{"line":775,"column":10,"index":21278},"code":"  it('v-if', done => {\n    renderVmWithOptions({\n      template: `\n        <div>\n          <span v-if=\"true\">foo</span>\n          <span v-if=\"false\">bar</span>\n        </div>\n      `\n    }, res => {\n      expect(res).toContain(`<div data-server-rendered=\"true\"><span>foo</span> <!----></div>`);\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"v-for","suites":["SSR: renderToString"],"line":788,"updatePoint":{"line":788,"column":11,"index":21602},"code":"  it('v-for', done => {\n    renderVmWithOptions({\n      template: `\n        <div>\n          <span>foo</span>\n          <span v-for=\"i in 2\">{{ i }}</span>\n        </div>\n      `\n    }, res => {\n      expect(res).toContain(`<div data-server-rendered=\"true\"><span>foo</span> <span>1</span><span>2</span></div>`);\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"template v-if","suites":["SSR: renderToString"],"line":801,"updatePoint":{"line":801,"column":19,"index":21949},"code":"  it('template v-if', done => {\n    renderVmWithOptions({\n      template: `\n        <div>\n          <span>foo</span>\n          <template v-if=\"true\">\n            <span>foo</span> bar <span>baz</span>\n          </template>\n        </div>\n      `\n    }, res => {\n      expect(res).toContain(`<div data-server-rendered=\"true\"><span>foo</span> <span>foo</span> bar <span>baz</span></div>`);\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"template v-for","suites":["SSR: renderToString"],"line":816,"updatePoint":{"line":816,"column":20,"index":22365},"code":"  it('template v-for', done => {\n    renderVmWithOptions({\n      template: `\n        <div>\n          <span>foo</span>\n          <template v-for=\"i in 2\">\n            <span>{{ i }}</span><span>bar</span>\n          </template>\n        </div>\n      `\n    }, res => {\n      expect(res).toContain(`<div data-server-rendered=\"true\"><span>foo</span> <span>1</span><span>bar</span><span>2</span><span>bar</span></div>`);\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"with inheritAttrs: false + $attrs","suites":["SSR: renderToString"],"line":831,"updatePoint":{"line":831,"column":39,"index":22825},"code":"  it('with inheritAttrs: false + $attrs', done => {\n    renderVmWithOptions({\n      template: `<foo id=\"a\"/>`,\n      components: {\n        foo: {\n          inheritAttrs: false,\n          template: `<div><div v-bind=\"$attrs\"></div></div>`\n        }\n      }\n    }, res => {\n      expect(res).toBe(`<div data-server-rendered=\"true\"><div id=\"a\"></div></div>`);\n      done();\n    });\n  });","file":"ssr/ssr-string.spec.js","skipped":false,"dir":"test"},{"name":"renderToString","suites":["SSR: template option"],"line":41,"updatePoint":{"line":41,"column":20,"index":1390},"code":"  it('renderToString', done => {\n    const renderer = createRenderer({\n      template: defaultTemplate\n    });\n    const context = {\n      head: '<meta name=\"viewport\" content=\"width=device-width\">',\n      styles: '<style>h1 { color: red }</style>',\n      state: {\n        a: 1\n      }\n    };\n    renderer.renderToString(new Vue({\n      template: '<div>hi</div>'\n    }), context, (err, res) => {\n      expect(err).toBeNull();\n      expect(res).toContain(`<html><head>${context.head}${context.styles}</head><body>` + `<div data-server-rendered=\"true\">hi</div>` + `<script>window.__INITIAL_STATE__={\"a\":1}</script>` + `</body></html>`);\n      done();\n    });\n  });","file":"ssr/ssr-template.spec.js","skipped":false,"dir":"test"},{"name":"renderToString with interpolation","suites":["SSR: template option"],"line":60,"updatePoint":{"line":60,"column":39,"index":2072},"code":"  it('renderToString with interpolation', done => {\n    const renderer = createRenderer({\n      template: interpolateTemplate\n    });\n    const context = {\n      title: '<script>hacks</script>',\n      snippet: '<div>foo</div>',\n      head: '<meta name=\"viewport\" content=\"width=device-width\">',\n      styles: '<style>h1 { color: red }</style>',\n      state: {\n        a: 1\n      }\n    };\n    renderer.renderToString(new Vue({\n      template: '<div>hi</div>'\n    }), context, (err, res) => {\n      expect(err).toBeNull();\n      expect(res).toContain(`<html><head>` + // double mustache should be escaped\n      `<title>&lt;script&gt;hacks&lt;/script&gt;</title>` + `${context.head}${context.styles}</head><body>` + `<div data-server-rendered=\"true\">hi</div>` + `<script>window.__INITIAL_STATE__={\"a\":1}</script>` + // triple should be raw\n      `<div>foo</div>` + `</body></html>`);\n      done();\n    });\n  });","file":"ssr/ssr-template.spec.js","skipped":false,"dir":"test"},{"name":"renderToStream","suites":["SSR: template option"],"line":83,"updatePoint":{"line":83,"column":20,"index":2962},"code":"  it('renderToStream', done => {\n    const renderer = createRenderer({\n      template: defaultTemplate\n    });\n    const context = {\n      head: '<meta name=\"viewport\" content=\"width=device-width\">',\n      styles: '<style>h1 { color: red }</style>',\n      state: {\n        a: 1\n      }\n    };\n    const stream = renderer.renderToStream(new Vue({\n      template: '<div>hi</div>'\n    }), context);\n    let res = '';\n    stream.on('data', chunk => {\n      res += chunk;\n    });\n    stream.on('end', () => {\n      expect(res).toContain(`<html><head>${context.head}${context.styles}</head><body>` + `<div data-server-rendered=\"true\">hi</div>` + `<script>window.__INITIAL_STATE__={\"a\":1}</script>` + `</body></html>`);\n      done();\n    });\n  });","file":"ssr/ssr-template.spec.js","skipped":false,"dir":"test"},{"name":"renderToStream with interpolation","suites":["SSR: template option"],"line":106,"updatePoint":{"line":106,"column":39,"index":3722},"code":"  it('renderToStream with interpolation', done => {\n    const renderer = createRenderer({\n      template: interpolateTemplate\n    });\n    const context = {\n      title: '<script>hacks</script>',\n      snippet: '<div>foo</div>',\n      head: '<meta name=\"viewport\" content=\"width=device-width\">',\n      styles: '<style>h1 { color: red }</style>',\n      state: {\n        a: 1\n      }\n    };\n    const stream = renderer.renderToStream(new Vue({\n      template: '<div>hi</div>'\n    }), context);\n    let res = '';\n    stream.on('data', chunk => {\n      res += chunk;\n    });\n    stream.on('end', () => {\n      expect(res).toContain(`<html><head>` + // double mustache should be escaped\n      `<title>&lt;script&gt;hacks&lt;/script&gt;</title>` + `${context.head}${context.styles}</head><body>` + `<div data-server-rendered=\"true\">hi</div>` + `<script>window.__INITIAL_STATE__={\"a\":1}</script>` + // triple should be raw\n      `<div>foo</div>` + `</body></html>`);\n      done();\n    });\n  });","file":"ssr/ssr-template.spec.js","skipped":false,"dir":"test"},{"name":"bundleRenderer + renderToString","suites":["SSR: template option"],"line":133,"updatePoint":{"line":133,"column":37,"index":4707},"code":"  it('bundleRenderer + renderToString', done => {\n    createBundleRenderer('app.js', {\n      asBundle: true,\n      template: defaultTemplate\n    }, renderer => {\n      const context = {\n        head: '<meta name=\"viewport\" content=\"width=device-width\">',\n        styles: '<style>h1 { color: red }</style>',\n        state: {\n          a: 1\n        },\n        url: '/test'\n      };\n      renderer.renderToString(context, (err, res) => {\n        expect(err).toBeNull();\n        expect(res).toContain(`<html><head>${context.head}${context.styles}</head><body>` + `<div data-server-rendered=\"true\">/test</div>` + `<script>window.__INITIAL_STATE__={\"a\":1}</script>` + `</body></html>`);\n        expect(context.msg).toBe('hello');\n        done();\n      });\n    });\n  });","file":"ssr/ssr-template.spec.js","skipped":false,"dir":"test"},{"name":"bundleRenderer + renderToStream","suites":["SSR: template option"],"line":154,"updatePoint":{"line":154,"column":37,"index":5471},"code":"  it('bundleRenderer + renderToStream', done => {\n    createBundleRenderer('app.js', {\n      asBundle: true,\n      template: defaultTemplate\n    }, renderer => {\n      const context = {\n        head: '<meta name=\"viewport\" content=\"width=device-width\">',\n        styles: '<style>h1 { color: red }</style>',\n        state: {\n          a: 1\n        },\n        url: '/test'\n      };\n      const stream = renderer.renderToStream(context);\n      let res = '';\n      stream.on('data', chunk => {\n        res += chunk.toString();\n      });\n      stream.on('end', () => {\n        expect(res).toContain(`<html><head>${context.head}${context.styles}</head><body>` + `<div data-server-rendered=\"true\">/test</div>` + `<script>window.__INITIAL_STATE__={\"a\":1}</script>` + `</body></html>`);\n        expect(context.msg).toBe('hello');\n        done();\n      });\n    });\n  });","file":"ssr/ssr-template.spec.js","skipped":false,"dir":"test"},{"name":"bundleRenderer + renderToString + clientManifest ()","suites":["SSR: template option"],"line":193,"updatePoint":{"line":193,"column":59,"index":7704},"code":"    it('bundleRenderer + renderToString + clientManifest ()', done => {\n      createRendererWithManifest('split.js', {\n        runInNewContext\n      }, renderer => {\n        renderer.renderToString({\n          state: {\n            a: 1\n          }\n        }, (err, res) => {\n          expect(err).toBeNull();\n          expect(res).toContain(expectedHTMLWithManifest());\n          done();\n        });\n      });\n    });","file":"ssr/ssr-template.spec.js","skipped":false,"dir":"test"},{"name":"bundleRenderer + renderToStream + clientManifest + shouldPreload","suites":["SSR: template option"],"line":208,"updatePoint":{"line":208,"column":72,"index":8135},"code":"    it('bundleRenderer + renderToStream + clientManifest + shouldPreload', done => {\n      createRendererWithManifest('split.js', {\n        runInNewContext,\n        shouldPreload: (file, type) => {\n          if (type === 'image' || type === 'script' || type === 'font' || type === 'style') {\n            return true;\n          }\n        }\n      }, renderer => {\n        const stream = renderer.renderToStream({\n          state: {\n            a: 1\n          }\n        });\n        let res = '';\n        stream.on('data', chunk => {\n          res += chunk.toString();\n        });\n        stream.on('end', () => {\n          expect(res).toContain(expectedHTMLWithManifest({\n            preloadOtherAssets: true\n          }));\n          done();\n        });\n      });\n    });","file":"ssr/ssr-template.spec.js","skipped":false,"dir":"test"},{"name":"bundleRenderer + renderToString + clientManifest + inject: false","suites":["SSR: template option"],"line":234,"updatePoint":{"line":234,"column":72,"index":8904},"code":"    it('bundleRenderer + renderToString + clientManifest + inject: false', done => {\n      createRendererWithManifest('split.js', {\n        runInNewContext,\n        template: `<html>` + `<head>{{{ renderResourceHints() }}}{{{ renderStyles() }}}</head>` + `<body><!--vue-ssr-outlet-->{{{ renderState({ windowKey: '__FOO__', contextKey: 'foo' }) }}}{{{ renderScripts() }}}</body>` + `</html>`,\n        inject: false\n      }, renderer => {\n        const context = {\n          foo: {\n            a: 1\n          }\n        };\n        renderer.renderToString(context, (err, res) => {\n          expect(err).toBeNull();\n          expect(res).toContain(expectedHTMLWithManifest({\n            stateKey: '__FOO__'\n          }));\n          done();\n        });\n      });\n    });","file":"ssr/ssr-template.spec.js","skipped":false,"dir":"test"},{"name":"bundleRenderer + renderToString + clientManifest + no template","suites":["SSR: template option"],"line":254,"updatePoint":{"line":254,"column":70,"index":9667},"code":"    it('bundleRenderer + renderToString + clientManifest + no template', done => {\n      createRendererWithManifest('split.js', {\n        runInNewContext,\n        template: null\n      }, renderer => {\n        const context = {\n          foo: {\n            a: 1\n          }\n        };\n        renderer.renderToString(context, (err, res) => {\n          expect(err).toBeNull();\n          const customOutput = `<html><head>${context.renderResourceHints() + context.renderStyles()}</head><body>${res + context.renderState({\n            windowKey: '__FOO__',\n            contextKey: 'foo'\n          }) + context.renderScripts()}</body></html>`;\n          expect(customOutput).toContain(expectedHTMLWithManifest({\n            stateKey: '__FOO__'\n          }));\n          done();\n        });\n      });\n    });","file":"ssr/ssr-template.spec.js","skipped":false,"dir":"test"},{"name":"whitespace insensitive interpolation","suites":["SSR: template option"],"line":277,"updatePoint":{"line":277,"column":44,"index":10443},"code":"    it('whitespace insensitive interpolation', done => {\n      const interpolateTemplate = `<html><head><title>{{title}}</title></head><body><!--vue-ssr-outlet-->{{{snippet}}}</body></html>`;\n      const renderer = createRenderer({\n        template: interpolateTemplate\n      });\n      const context = {\n        title: '<script>hacks</script>',\n        snippet: '<div>foo</div>',\n        head: '<meta name=\"viewport\" content=\"width=device-width\">',\n        styles: '<style>h1 { color: red }</style>',\n        state: {\n          a: 1\n        }\n      };\n      renderer.renderToString(new Vue({\n        template: '<div>hi</div>'\n      }), context, (err, res) => {\n        expect(err).toBeNull();\n        expect(res).toContain(`<html><head>` + // double mustache should be escaped\n        `<title>&lt;script&gt;hacks&lt;/script&gt;</title>` + `${context.head}${context.styles}</head><body>` + `<div data-server-rendered=\"true\">hi</div>` + `<script>window.__INITIAL_STATE__={\"a\":1}</script>` + // triple should be raw\n        `<div>foo</div>` + `</body></html>`);\n        done();\n      });\n    });","file":"ssr/ssr-template.spec.js","skipped":false,"dir":"test"},{"name":"normal","suites":["Component async"],"line":4,"updatePoint":{"line":4,"column":12,"index":111},"code":"  it('normal', done => {\n    const vm = new Vue({\n      template: '<div><test></test></div>',\n      components: {\n        test: resolve => {\n          setTimeout(() => {\n            resolve({\n              template: '<div>hi</div>'\n            }); // wait for parent update\n\n            Vue.nextTick(next);\n          }, 0);\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<!---->');\n    expect(vm.$children.length).toBe(0);\n\n    function next() {\n      expect(vm.$el.innerHTML).toBe('<div>hi</div>');\n      expect(vm.$children.length).toBe(1);\n      done();\n    }\n  });","file":"unit/features/component/component-async.spec.js","skipped":false,"dir":"test"},{"name":"resolve ES module default","suites":["Component async"],"line":28,"updatePoint":{"line":28,"column":31,"index":722},"code":"  it('resolve ES module default', done => {\n    const vm = new Vue({\n      template: '<div><test></test></div>',\n      components: {\n        test: resolve => {\n          setTimeout(() => {\n            resolve({\n              __esModule: true,\n              default: {\n                template: '<div>hi</div>'\n              }\n            }); // wait for parent update\n\n            Vue.nextTick(next);\n          }, 0);\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<!---->');\n    expect(vm.$children.length).toBe(0);\n\n    function next() {\n      expect(vm.$el.innerHTML).toBe('<div>hi</div>');\n      expect(vm.$children.length).toBe(1);\n      done();\n    }\n  });","file":"unit/features/component/component-async.spec.js","skipped":false,"dir":"test"},{"name":"as root","suites":["Component async"],"line":55,"updatePoint":{"line":55,"column":13,"index":1390},"code":"  it('as root', done => {\n    const vm = new Vue({\n      template: '<test></test>',\n      components: {\n        test: resolve => {\n          setTimeout(() => {\n            resolve({\n              template: '<div>hi</div>'\n            }); // wait for parent update\n\n            Vue.nextTick(next);\n          }, 0);\n        }\n      }\n    }).$mount();\n    expect(vm.$el.nodeType).toBe(8);\n    expect(vm.$children.length).toBe(0);\n\n    function next() {\n      expect(vm.$el.nodeType).toBe(1);\n      expect(vm.$el.outerHTML).toBe('<div>hi</div>');\n      expect(vm.$children.length).toBe(1);\n      done();\n    }\n  });","file":"unit/features/component/component-async.spec.js","skipped":false,"dir":"test"},{"name":"dynamic","suites":["Component async"],"line":80,"updatePoint":{"line":80,"column":13,"index":2002},"code":"  it('dynamic', done => {\n    var vm = new Vue({\n      template: '<component :is=\"view\"></component>',\n      data: {\n        view: 'view-a'\n      },\n      components: {\n        'view-a': resolve => {\n          setTimeout(() => {\n            resolve({\n              template: '<div>A</div>'\n            });\n            Vue.nextTick(step1);\n          }, 0);\n        },\n        'view-b': resolve => {\n          setTimeout(() => {\n            resolve({\n              template: '<p>B</p>'\n            });\n            Vue.nextTick(step2);\n          }, 0);\n        }\n      }\n    }).$mount();\n    var aCalled = false;\n\n    function step1() {\n      // ensure A is resolved only once\n      expect(aCalled).toBe(false);\n      aCalled = true;\n      expect(vm.$el.tagName).toBe('DIV');\n      expect(vm.$el.textContent).toBe('A');\n      vm.view = 'view-b';\n    }\n\n    function step2() {\n      expect(vm.$el.tagName).toBe('P');\n      expect(vm.$el.textContent).toBe('B');\n      vm.view = 'view-a';\n      waitForUpdate(function () {\n        expect(vm.$el.tagName).toBe('DIV');\n        expect(vm.$el.textContent).toBe('A');\n      }).then(done);\n    }\n  });","file":"unit/features/component/component-async.spec.js","skipped":false,"dir":"test"},{"name":"warn reject","suites":["Component async"],"line":126,"updatePoint":{"line":126,"column":17,"index":3146},"code":"  it('warn reject', () => {\n    new Vue({\n      template: '<test></test>',\n      components: {\n        test: (resolve, reject) => {\n          reject('nooooo');\n        }\n      }\n    }).$mount();\n    expect('Reason: nooooo').toHaveBeenWarned();\n  });","file":"unit/features/component/component-async.spec.js","skipped":false,"dir":"test"},{"name":"with v-for","suites":["Component async"],"line":137,"updatePoint":{"line":137,"column":16,"index":3395},"code":"  it('with v-for', done => {\n    const vm = new Vue({\n      template: '<div><test v-for=\"n in list\" :key=\"n\" :n=\"n\"></test></div>',\n      data: {\n        list: [1, 2, 3]\n      },\n      components: {\n        test: resolve => {\n          setTimeout(() => {\n            resolve({\n              props: ['n'],\n              template: '<div>{{n}}</div>'\n            });\n            Vue.nextTick(next);\n          }, 0);\n        }\n      }\n    }).$mount();\n\n    function next() {\n      expect(vm.$el.innerHTML).toBe('<div>1</div><div>2</div><div>3</div>');\n      done();\n    }\n  });","file":"unit/features/component/component-async.spec.js","skipped":false,"dir":"test"},{"name":"returning Promise","suites":["Component async"],"line":161,"updatePoint":{"line":161,"column":23,"index":3976},"code":"  it('returning Promise', done => {\n    const vm = new Vue({\n      template: '<div><test></test></div>',\n      components: {\n        test: () => {\n          return new Promise(resolve => {\n            setTimeout(() => {\n              resolve({\n                template: '<div>hi</div>'\n              }); // wait for promise resolve and then parent update\n\n              Promise.resolve().then(() => {\n                Vue.nextTick(next);\n              });\n            }, 0);\n          });\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<!---->');\n    expect(vm.$children.length).toBe(0);\n\n    function next() {\n      expect(vm.$el.innerHTML).toBe('<div>hi</div>');\n      expect(vm.$children.length).toBe(1);\n      done();\n    }\n  });","file":"unit/features/component/component-async.spec.js","skipped":false,"dir":"test"},{"name":"with loading component","suites":["Component async","loading/error/timeout"],"line":190,"updatePoint":{"line":190,"column":30,"index":4783},"code":"    it('with loading component', done => {\n      const vm = new Vue({\n        template: `<div><test/></div>`,\n        components: {\n          test: () => ({\n            component: new Promise(resolve => {\n              setTimeout(() => {\n                resolve({\n                  template: '<div>hi</div>'\n                }); // wait for promise resolve and then parent update\n\n                Promise.resolve().then(() => {\n                  Vue.nextTick(next);\n                });\n              }, 50);\n            }),\n            loading: {\n              template: `<div>loading</div>`\n            },\n            delay: 1\n          })\n        }\n      }).$mount();\n      expect(vm.$el.innerHTML).toBe('<!---->');\n      let loadingAsserted = false;\n      setTimeout(() => {\n        Vue.nextTick(() => {\n          loadingAsserted = true;\n          expect(vm.$el.textContent).toBe('loading');\n        });\n      }, 1);\n\n      function next() {\n        expect(loadingAsserted).toBe(true);\n        expect(vm.$el.textContent).toBe('hi');\n        done();\n      }\n    });","file":"unit/features/component/component-async.spec.js","skipped":false,"dir":"test"},{"name":"with loading component (0 delay)","suites":["Component async","loading/error/timeout"],"line":228,"updatePoint":{"line":228,"column":40,"index":5860},"code":"    it('with loading component (0 delay)', done => {\n      const vm = new Vue({\n        template: `<div><test/></div>`,\n        components: {\n          test: () => ({\n            component: new Promise(resolve => {\n              setTimeout(() => {\n                resolve({\n                  template: '<div>hi</div>'\n                }); // wait for promise resolve and then parent update\n\n                Promise.resolve().then(() => {\n                  Vue.nextTick(next);\n                });\n              }, 50);\n            }),\n            loading: {\n              template: `<div>loading</div>`\n            },\n            delay: 0\n          })\n        }\n      }).$mount();\n      expect(vm.$el.textContent).toBe('loading');\n\n      function next() {\n        expect(vm.$el.textContent).toBe('hi');\n        done();\n      }\n    });","file":"unit/features/component/component-async.spec.js","skipped":false,"dir":"test"},{"name":"with error component","suites":["Component async","loading/error/timeout"],"line":258,"updatePoint":{"line":258,"column":28,"index":6681},"code":"    it('with error component', done => {\n      const vm = new Vue({\n        template: `<div><test/></div>`,\n        components: {\n          test: () => ({\n            component: new Promise((resolve, reject) => {\n              setTimeout(() => {\n                reject(); // wait for promise resolve and then parent update\n\n                Promise.resolve().then(() => {\n                  Vue.nextTick(next);\n                });\n              }, 50);\n            }),\n            loading: {\n              template: `<div>loading</div>`\n            },\n            error: {\n              template: `<div>error</div>`\n            },\n            delay: 0\n          })\n        }\n      }).$mount();\n      expect(vm.$el.textContent).toBe('loading');\n\n      function next() {\n        expect(`Failed to resolve async component`).toHaveBeenWarned();\n        expect(vm.$el.textContent).toBe('error');\n        done();\n      }\n    });","file":"unit/features/component/component-async.spec.js","skipped":false,"dir":"test"},{"name":"with error component + timeout","suites":["Component async","loading/error/timeout"],"line":290,"updatePoint":{"line":290,"column":38,"index":7612},"code":"    it('with error component + timeout', done => {\n      const vm = new Vue({\n        template: `<div><test/></div>`,\n        components: {\n          test: () => ({\n            component: new Promise((resolve, reject) => {\n              setTimeout(() => {\n                resolve({\n                  template: '<div>hi</div>'\n                }); // wait for promise resolve and then parent update\n\n                Promise.resolve().then(() => {\n                  Vue.nextTick(next);\n                });\n              }, 50);\n            }),\n            loading: {\n              template: `<div>loading</div>`\n            },\n            error: {\n              template: `<div>error</div>`\n            },\n            delay: 0,\n            timeout: 1\n          })\n        }\n      }).$mount();\n      expect(vm.$el.textContent).toBe('loading');\n      setTimeout(() => {\n        Vue.nextTick(() => {\n          expect(`Failed to resolve async component`).toHaveBeenWarned();\n          expect(vm.$el.textContent).toBe('error');\n        });\n      }, 1);\n\n      function next() {\n        expect(vm.$el.textContent).toBe('error'); // late resolve ignored\n\n        done();\n      }\n    });","file":"unit/features/component/component-async.spec.js","skipped":false,"dir":"test"},{"name":"should not trigger timeout if resolved","suites":["Component async","loading/error/timeout"],"line":331,"updatePoint":{"line":331,"column":46,"index":8797},"code":"    it('should not trigger timeout if resolved', done => {\n      const vm = new Vue({\n        template: `<div><test/></div>`,\n        components: {\n          test: () => ({\n            component: new Promise((resolve, reject) => {\n              setTimeout(() => {\n                resolve({\n                  template: '<div>hi</div>'\n                });\n              }, 10);\n            }),\n            error: {\n              template: `<div>error</div>`\n            },\n            timeout: 20\n          })\n        }\n      }).$mount();\n      setTimeout(() => {\n        expect(vm.$el.textContent).toBe('hi');\n        expect(`Failed to resolve async component`).not.toHaveBeenWarned();\n        done();\n      }, 50);\n    });","file":"unit/features/component/component-async.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Component keep-alive"],"line":40,"updatePoint":{"line":40,"column":17,"index":1363},"code":"  it('should work', done => {\n    const vm = new Vue({\n      template: `\n        <div v-if=\"ok\">\n          <keep-alive>\n            <component :is=\"view\"></component>\n          </keep-alive>\n        </div>\n      `,\n      data: {\n        view: 'one',\n        ok: true\n      },\n      components\n    }).$mount();\n    expect(vm.$el.textContent).toBe('one');\n    assertHookCalls(one, [1, 1, 1, 0, 0]);\n    assertHookCalls(two, [0, 0, 0, 0, 0]);\n    vm.view = 'two';\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('two');\n      assertHookCalls(one, [1, 1, 1, 1, 0]);\n      assertHookCalls(two, [1, 1, 1, 0, 0]);\n      vm.view = 'one';\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('one');\n      assertHookCalls(one, [1, 1, 2, 1, 0]);\n      assertHookCalls(two, [1, 1, 1, 1, 0]);\n      vm.view = 'two';\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('two');\n      assertHookCalls(one, [1, 1, 2, 2, 0]);\n      assertHookCalls(two, [1, 1, 2, 1, 0]);\n      vm.ok = false; // teardown\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('');\n      assertHookCalls(one, [1, 1, 2, 2, 1]);\n      assertHookCalls(two, [1, 1, 2, 2, 1]);\n    }).then(done);\n  });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"should invoke hooks on the entire sub tree","suites":["Component keep-alive"],"line":80,"updatePoint":{"line":80,"column":48,"index":2586},"code":"  it('should invoke hooks on the entire sub tree', done => {\n    one.template = '<two/>';\n    one.components = {\n      two\n    };\n    const vm = new Vue({\n      template: `\n        <div>\n          <keep-alive>\n            <one v-if=\"ok\"/>\n          </keep-alive>\n        </div>\n      `,\n      data: {\n        ok: true\n      },\n      components\n    }).$mount();\n    expect(vm.$el.textContent).toBe('two');\n    assertHookCalls(one, [1, 1, 1, 0, 0]);\n    assertHookCalls(two, [1, 1, 1, 0, 0]);\n    vm.ok = false;\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('');\n      assertHookCalls(one, [1, 1, 1, 1, 0]);\n      assertHookCalls(two, [1, 1, 1, 1, 0]);\n      vm.ok = true;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('two');\n      assertHookCalls(one, [1, 1, 2, 1, 0]);\n      assertHookCalls(two, [1, 1, 2, 1, 0]);\n      vm.ok = false;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('');\n      assertHookCalls(one, [1, 1, 2, 2, 0]);\n      assertHookCalls(two, [1, 1, 2, 2, 0]);\n    }).then(done);\n  });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"should handle nested keep-alive hooks properly","suites":["Component keep-alive"],"line":118,"updatePoint":{"line":118,"column":52,"index":3634},"code":"  it('should handle nested keep-alive hooks properly', done => {\n    one.template = '<keep-alive><two v-if=\"ok\" /></keep-alive>';\n\n    one.data = () => ({\n      ok: true\n    });\n\n    one.components = {\n      two\n    };\n    const vm = new Vue({\n      template: `\n        <div>\n          <keep-alive>\n            <one v-if=\"ok\" ref=\"one\" />\n          </keep-alive>\n        </div>\n      `,\n      data: {\n        ok: true\n      },\n      components\n    }).$mount();\n    var oneInstance = vm.$refs.one;\n    expect(vm.$el.textContent).toBe('two');\n    assertHookCalls(one, [1, 1, 1, 0, 0]);\n    assertHookCalls(two, [1, 1, 1, 0, 0]);\n    vm.ok = false;\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('');\n      assertHookCalls(one, [1, 1, 1, 1, 0]);\n      assertHookCalls(two, [1, 1, 1, 1, 0]);\n    }).then(() => {\n      vm.ok = true;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('two');\n      assertHookCalls(one, [1, 1, 2, 1, 0]);\n      assertHookCalls(two, [1, 1, 2, 1, 0]);\n    }).then(() => {\n      // toggle sub component when activated\n      oneInstance.ok = false;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('');\n      assertHookCalls(one, [1, 1, 2, 1, 0]);\n      assertHookCalls(two, [1, 1, 2, 2, 0]);\n    }).then(() => {\n      oneInstance.ok = true;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('two');\n      assertHookCalls(one, [1, 1, 2, 1, 0]);\n      assertHookCalls(two, [1, 1, 3, 2, 0]);\n    }).then(() => {\n      vm.ok = false;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('');\n      assertHookCalls(one, [1, 1, 2, 2, 0]);\n      assertHookCalls(two, [1, 1, 3, 3, 0]);\n    }).then(() => {\n      // toggle sub component when parent is deactivated\n      oneInstance.ok = false;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('');\n      assertHookCalls(one, [1, 1, 2, 2, 0]);\n      assertHookCalls(two, [1, 1, 3, 3, 0]); // should not be affected\n    }).then(() => {\n      oneInstance.ok = true;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('');\n      assertHookCalls(one, [1, 1, 2, 2, 0]);\n      assertHookCalls(two, [1, 1, 3, 3, 0]); // should not be affected\n    }).then(() => {\n      vm.ok = true;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('two');\n      assertHookCalls(one, [1, 1, 3, 2, 0]);\n      assertHookCalls(two, [1, 1, 4, 3, 0]);\n    }).then(() => {\n      oneInstance.ok = false;\n      vm.ok = false;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('');\n      assertHookCalls(one, [1, 1, 3, 3, 0]);\n      assertHookCalls(two, [1, 1, 4, 4, 0]);\n    }).then(() => {\n      vm.ok = true;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('');\n      assertHookCalls(one, [1, 1, 4, 3, 0]);\n      assertHookCalls(two, [1, 1, 4, 4, 0]); // should remain inactive\n    }).then(done);\n  });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"include (string)","suites":["Component keep-alive"],"line":237,"updatePoint":{"line":237,"column":22,"index":7352},"code":"  it('include (string)', done => {\n    const vm = new Vue({\n      template: `\n        <div v-if=\"ok\">\n          <keep-alive include=\"one\">\n            <component :is=\"view\"></component>\n          </keep-alive>\n        </div>\n      `,\n      data: {\n        view: 'one',\n        ok: true\n      },\n      components\n    }).$mount();\n    sharedAssertions(vm, done);\n  });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"include (regex)","suites":["Component keep-alive"],"line":254,"updatePoint":{"line":254,"column":21,"index":7718},"code":"  it('include (regex)', done => {\n    const vm = new Vue({\n      template: `\n        <div v-if=\"ok\">\n          <keep-alive :include=\"/^one$/\">\n            <component :is=\"view\"></component>\n          </keep-alive>\n        </div>\n      `,\n      data: {\n        view: 'one',\n        ok: true\n      },\n      components\n    }).$mount();\n    sharedAssertions(vm, done);\n  });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"include (array)","suites":["Component keep-alive"],"line":271,"updatePoint":{"line":271,"column":21,"index":8089},"code":"  it('include (array)', done => {\n    const vm = new Vue({\n      template: `\n        <div v-if=\"ok\">\n          <keep-alive :include=\"['one']\">\n            <component :is=\"view\"></component>\n          </keep-alive>\n        </div>\n      `,\n      data: {\n        view: 'one',\n        ok: true\n      },\n      components\n    }).$mount();\n    sharedAssertions(vm, done);\n  });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"exclude (string)","suites":["Component keep-alive"],"line":288,"updatePoint":{"line":288,"column":22,"index":8461},"code":"  it('exclude (string)', done => {\n    const vm = new Vue({\n      template: `\n        <div v-if=\"ok\">\n          <keep-alive exclude=\"two\">\n            <component :is=\"view\"></component>\n          </keep-alive>\n        </div>\n      `,\n      data: {\n        view: 'one',\n        ok: true\n      },\n      components\n    }).$mount();\n    sharedAssertions(vm, done);\n  });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"exclude (regex)","suites":["Component keep-alive"],"line":305,"updatePoint":{"line":305,"column":21,"index":8827},"code":"  it('exclude (regex)', done => {\n    const vm = new Vue({\n      template: `\n        <div v-if=\"ok\">\n          <keep-alive :exclude=\"/^two$/\">\n            <component :is=\"view\"></component>\n          </keep-alive>\n        </div>\n      `,\n      data: {\n        view: 'one',\n        ok: true\n      },\n      components\n    }).$mount();\n    sharedAssertions(vm, done);\n  });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"exclude (array)","suites":["Component keep-alive"],"line":322,"updatePoint":{"line":322,"column":21,"index":9198},"code":"  it('exclude (array)', done => {\n    const vm = new Vue({\n      template: `\n        <div v-if=\"ok\">\n          <keep-alive :exclude=\"['two']\">\n            <component :is=\"view\"></component>\n          </keep-alive>\n        </div>\n      `,\n      data: {\n        view: 'one',\n        ok: true\n      },\n      components\n    }).$mount();\n    sharedAssertions(vm, done);\n  });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"include + exclude","suites":["Component keep-alive"],"line":339,"updatePoint":{"line":339,"column":23,"index":9571},"code":"  it('include + exclude', done => {\n    const vm = new Vue({\n      template: `\n        <div v-if=\"ok\">\n          <keep-alive include=\"one,two\" exclude=\"two\">\n            <component :is=\"view\"></component>\n          </keep-alive>\n        </div>\n      `,\n      data: {\n        view: 'one',\n        ok: true\n      },\n      components\n    }).$mount();\n    sharedAssertions(vm, done);\n  });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"prune cache on include/exclude change","suites":["Component keep-alive"],"line":356,"updatePoint":{"line":356,"column":43,"index":9977},"code":"  it('prune cache on include/exclude change', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <keep-alive :include=\"include\">\n            <component :is=\"view\"></component>\n          </keep-alive>\n        </div>\n      `,\n      data: {\n        view: 'one',\n        include: 'one,two'\n      },\n      components\n    }).$mount();\n    vm.view = 'two';\n    waitForUpdate(() => {\n      assertHookCalls(one, [1, 1, 1, 1, 0]);\n      assertHookCalls(two, [1, 1, 1, 0, 0]);\n      vm.include = 'two';\n    }).then(() => {\n      assertHookCalls(one, [1, 1, 1, 1, 1]);\n      assertHookCalls(two, [1, 1, 1, 0, 0]);\n      vm.view = 'one';\n    }).then(() => {\n      assertHookCalls(one, [2, 2, 1, 1, 1]);\n      assertHookCalls(two, [1, 1, 1, 1, 0]);\n    }).then(done);\n  });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"should not prune currently active instance","suites":["Component keep-alive"],"line":385,"updatePoint":{"line":385,"column":48,"index":10768},"code":"  it('should not prune currently active instance', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <keep-alive :include=\"include\">\n            <component :is=\"view\"></component>\n          </keep-alive>\n        </div>\n      `,\n      data: {\n        view: 'one',\n        include: 'one,two'\n      },\n      components\n    }).$mount();\n    vm.include = 'two';\n    waitForUpdate(() => {\n      assertHookCalls(one, [1, 1, 1, 0, 0]);\n      assertHookCalls(two, [0, 0, 0, 0, 0]);\n      vm.view = 'two';\n    }).then(() => {\n      assertHookCalls(one, [1, 1, 1, 0, 1]);\n      assertHookCalls(two, [1, 1, 1, 0, 0]);\n    }).then(done);\n  }); // #3882","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"deeply nested keep-alive should be destroyed properly","suites":["Component keep-alive"],"line":411,"updatePoint":{"line":411,"column":59,"index":11447},"code":"  it('deeply nested keep-alive should be destroyed properly', done => {\n    one.template = `<div><keep-alive><two></two></keep-alive></div>`;\n    one.components = {\n      two\n    };\n    const vm = new Vue({\n      template: `<div><parent v-if=\"ok\"></parent></div>`,\n      data: {\n        ok: true\n      },\n      components: {\n        parent: {\n          template: `<div><keep-alive><one></one></keep-alive></div>`,\n          components: {\n            one\n          }\n        }\n      }\n    }).$mount();\n    assertHookCalls(one, [1, 1, 1, 0, 0]);\n    assertHookCalls(two, [1, 1, 1, 0, 0]);\n    vm.ok = false;\n    waitForUpdate(() => {\n      assertHookCalls(one, [1, 1, 1, 1, 1]);\n      assertHookCalls(two, [1, 1, 1, 1, 1]);\n    }).then(done);\n  }); // #4237","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"should update latest props/listeners for a re-activated component","suites":["Component keep-alive"],"line":439,"updatePoint":{"line":439,"column":71,"index":12216},"code":"  it('should update latest props/listeners for a re-activated component', done => {\n    const one = {\n      props: ['prop'],\n      template: `<div>one {{ prop }}</div>`\n    };\n    const two = {\n      props: ['prop'],\n      template: `<div>two {{ prop }}</div>`\n    };\n    const vm = new Vue({\n      data: {\n        view: 'one',\n        n: 1\n      },\n      template: `\n        <div>\n          <keep-alive>\n            <component :is=\"view\" :prop=\"n\"></component>\n          </keep-alive>\n        </div>\n      `,\n      components: {\n        one,\n        two\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('one 1');\n    vm.n++;\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('one 2');\n      vm.view = 'two';\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('two 2');\n    }).then(done);\n  });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"with transition-mode out-in","suites":["Component keep-alive"],"line":476,"updatePoint":{"line":476,"column":35,"index":13025},"code":"    it('with transition-mode out-in', done => {\n      let next;\n      const vm = new Vue({\n        template: `<div>\n          <transition name=\"test\" mode=\"out-in\" @after-leave=\"afterLeave\">\n            <keep-alive>\n              <component :is=\"view\" class=\"test\"></component>\n            </keep-alive>\n          </transition>\n        </div>`,\n        data: {\n          view: 'one'\n        },\n        components,\n        methods: {\n          afterLeave() {\n            next();\n          }\n\n        }\n      }).$mount(el);\n      expect(vm.$el.textContent).toBe('one');\n      assertHookCalls(one, [1, 1, 1, 0, 0]);\n      assertHookCalls(two, [0, 0, 0, 0, 0]);\n      vm.view = 'two';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">one</div><!---->');\n        assertHookCalls(one, [1, 1, 1, 1, 0]);\n        assertHookCalls(two, [0, 0, 0, 0, 0]);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">one</div><!---->');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<!---->');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter test-enter-active\">two</div>');\n        assertHookCalls(one, [1, 1, 1, 1, 0]);\n        assertHookCalls(two, [1, 1, 1, 0, 0]);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter-active test-enter-to\">two</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>');\n        assertHookCalls(one, [1, 1, 1, 1, 0]);\n        assertHookCalls(two, [1, 1, 1, 0, 0]);\n      }).then(() => {\n        vm.view = 'one';\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">two</div><!---->');\n        assertHookCalls(one, [1, 1, 1, 1, 0]);\n        assertHookCalls(two, [1, 1, 1, 1, 0]);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">two</div><!---->');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<!---->');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter test-enter-active\">one</div>');\n        assertHookCalls(one, [1, 1, 2, 1, 0]);\n        assertHookCalls(two, [1, 1, 1, 1, 0]);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter-active test-enter-to\">one</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>');\n        assertHookCalls(one, [1, 1, 2, 1, 0]);\n        assertHookCalls(two, [1, 1, 1, 1, 0]);\n      }).then(done);\n    });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"with transition-mode out-in + include","suites":["Component keep-alive"],"line":545,"updatePoint":{"line":545,"column":45,"index":16006},"code":"    it('with transition-mode out-in + include', done => {\n      let next;\n      const vm = new Vue({\n        template: `<div>\n          <transition name=\"test\" mode=\"out-in\" @after-leave=\"afterLeave\">\n            <keep-alive include=\"one\">\n              <component :is=\"view\" class=\"test\"></component>\n            </keep-alive>\n          </transition>\n        </div>`,\n        data: {\n          view: 'one'\n        },\n        components,\n        methods: {\n          afterLeave() {\n            next();\n          }\n\n        }\n      }).$mount(el);\n      expect(vm.$el.textContent).toBe('one');\n      assertHookCalls(one, [1, 1, 1, 0, 0]);\n      assertHookCalls(two, [0, 0, 0, 0, 0]);\n      vm.view = 'two';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">one</div><!---->');\n        assertHookCalls(one, [1, 1, 1, 1, 0]);\n        assertHookCalls(two, [0, 0, 0, 0, 0]);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">one</div><!---->');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<!---->');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter test-enter-active\">two</div>');\n        assertHookCalls(one, [1, 1, 1, 1, 0]);\n        assertHookCalls(two, [1, 1, 0, 0, 0]);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter-active test-enter-to\">two</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>');\n        assertHookCalls(one, [1, 1, 1, 1, 0]);\n        assertHookCalls(two, [1, 1, 0, 0, 0]);\n      }).then(() => {\n        vm.view = 'one';\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">two</div><!---->');\n        assertHookCalls(one, [1, 1, 1, 1, 0]);\n        assertHookCalls(two, [1, 1, 0, 0, 1]);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">two</div><!---->');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<!---->');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter test-enter-active\">one</div>');\n        assertHookCalls(one, [1, 1, 2, 1, 0]);\n        assertHookCalls(two, [1, 1, 0, 0, 1]);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter-active test-enter-to\">one</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>');\n        assertHookCalls(one, [1, 1, 2, 1, 0]);\n        assertHookCalls(two, [1, 1, 0, 0, 1]);\n      }).then(done);\n    });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"with transition-mode in-out","suites":["Component keep-alive"],"line":614,"updatePoint":{"line":614,"column":35,"index":18991},"code":"    it('with transition-mode in-out', done => {\n      let next;\n      const vm = new Vue({\n        template: `<div>\n          <transition name=\"test\" mode=\"in-out\" @after-enter=\"afterEnter\">\n            <keep-alive>\n              <component :is=\"view\" class=\"test\"></component>\n            </keep-alive>\n          </transition>\n        </div>`,\n        data: {\n          view: 'one'\n        },\n        components,\n        methods: {\n          afterEnter() {\n            next();\n          }\n\n        }\n      }).$mount(el);\n      expect(vm.$el.textContent).toBe('one');\n      assertHookCalls(one, [1, 1, 1, 0, 0]);\n      assertHookCalls(two, [0, 0, 0, 0, 0]);\n      vm.view = 'two';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test test-enter test-enter-active\">two</div>');\n        assertHookCalls(one, [1, 1, 1, 1, 0]);\n        assertHookCalls(two, [1, 1, 1, 0, 0]);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test test-enter-active test-enter-to\">two</div>');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test\">two</div>');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">one</div>' + '<div class=\"test\">two</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">one</div>' + '<div class=\"test\">two</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>');\n        assertHookCalls(one, [1, 1, 1, 1, 0]);\n        assertHookCalls(two, [1, 1, 1, 0, 0]);\n      }).then(() => {\n        vm.view = 'one';\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>' + '<div class=\"test test-enter test-enter-active\">one</div>');\n        assertHookCalls(one, [1, 1, 2, 1, 0]);\n        assertHookCalls(two, [1, 1, 1, 1, 0]);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>' + '<div class=\"test test-enter-active test-enter-to\">one</div>');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>' + '<div class=\"test\">one</div>');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">two</div>' + '<div class=\"test\">one</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">two</div>' + '<div class=\"test\">one</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>');\n        assertHookCalls(one, [1, 1, 2, 1, 0]);\n        assertHookCalls(two, [1, 1, 1, 1, 0]);\n      }).then(done);\n    });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"dynamic components, in-out with early cancel","suites":["Component keep-alive"],"line":679,"updatePoint":{"line":679,"column":52,"index":22077},"code":"    it('dynamic components, in-out with early cancel', done => {\n      let next;\n      const vm = new Vue({\n        template: `<div>\n          <transition name=\"test\" mode=\"in-out\" @after-enter=\"afterEnter\">\n            <keep-alive>\n              <component :is=\"view\" class=\"test\"></component>\n            </keep-alive>\n          </transition>\n        </div>`,\n        data: {\n          view: 'one'\n        },\n        components,\n        methods: {\n          afterEnter() {\n            next();\n          }\n\n        }\n      }).$mount(el);\n      expect(vm.$el.textContent).toBe('one');\n      vm.view = 'two';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test test-enter test-enter-active\">two</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test test-enter-active test-enter-to\">two</div>'); // switch again before enter finishes,\n        // this cancels both enter and leave.\n\n        vm.view = 'one';\n      }).then(() => {\n        // 1. the pending leaving \"one\" should be removed instantly.\n        // 2. the entering \"two\" should be placed into its final state instantly.\n        // 3. a new \"one\" is created and entering\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>' + '<div class=\"test test-enter test-enter-active\">one</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>' + '<div class=\"test test-enter-active test-enter-to\">one</div>');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>' + '<div class=\"test\">one</div>');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">two</div>' + '<div class=\"test\">one</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">two</div>' + '<div class=\"test\">one</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>');\n      }).then(done).then(done);\n    }); // #4339","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"component with inner transition","suites":["Component keep-alive"],"line":729,"updatePoint":{"line":729,"column":39,"index":24337},"code":"    it('component with inner transition', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <keep-alive>\n              <component ref=\"test\" :is=\"view\"></component>\n            </keep-alive>\n          </div>\n        `,\n        data: {\n          view: 'foo'\n        },\n        components: {\n          foo: {\n            template: '<transition><div class=\"test\">foo</div></transition>'\n          },\n          bar: {\n            template: '<transition name=\"test\"><div class=\"test\">bar</div></transition>'\n          }\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      vm.view = 'bar';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test v-leave v-leave-active\">foo</div>' + '<div class=\"test test-enter test-enter-active\">bar</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test v-leave-active v-leave-to\">foo</div>' + '<div class=\"test test-enter-active test-enter-to\">bar</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">bar</div>');\n        vm.view = 'foo';\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">bar</div>' + '<div class=\"test v-enter v-enter-active\">foo</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">bar</div>' + '<div class=\"test v-enter-active v-enter-to\">foo</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      }).then(done);\n    });","file":"unit/features/component/component-keep-alive.spec.js","skipped":false,"dir":"test"},{"name":"default slot","suites":["Component scoped slot"],"line":3,"updatePoint":{"line":3,"column":18,"index":84},"code":"  it('default slot', done => {\n    const vm = new Vue({\n      template: `\n        <test ref=\"test\">\n          <template scope=\"props\">\n            <span>{{ props.msg }}</span>\n          </template>\n        </test>\n      `,\n      components: {\n        test: {\n          data() {\n            return {\n              msg: 'hello'\n            };\n          },\n\n          template: `\n            <div>\n              <slot :msg=\"msg\"></slot>\n            </div>\n          `\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>hello</span>');\n    vm.$refs.test.msg = 'world';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>world</span>');\n    }).then(done);\n  });","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"with v-bind","suites":["Component scoped slot"],"line":34,"updatePoint":{"line":34,"column":17,"index":783},"code":"  it('with v-bind', done => {\n    const vm = new Vue({\n      template: `\n        <test ref=\"test\">\n          <template scope=\"props\">\n            <span>{{ props.msg }} {{ props.msg2 }} {{ props.msg3 }}</span>\n          </template>\n        </test>\n      `,\n      components: {\n        test: {\n          data() {\n            return {\n              msg: 'hello',\n              obj: {\n                msg2: 'world',\n                msg3: '.'\n              }\n            };\n          },\n\n          template: `\n            <div>\n              <slot :msg=\"msg\" v-bind=\"obj\" msg3=\"!\"></slot>\n            </div>\n          `\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>hello world !</span>');\n    vm.$refs.test.msg = 'bye';\n    vm.$refs.test.obj.msg2 = 'bye';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>bye bye !</span>');\n    }).then(done);\n  });","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"template slot","suites":["Component scoped slot"],"line":70,"updatePoint":{"line":70,"column":19,"index":1681},"code":"  it('template slot', done => {\n    const vm = new Vue({\n      template: `\n        <test ref=\"test\">\n          <template slot=\"item\" scope=\"props\">\n            <span>{{ props.foo }}</span><span>{{ props.bar }}</span>\n          </template>\n        </test>\n      `,\n      components: {\n        test: {\n          data() {\n            return {\n              foo: 'FOO',\n              bar: 'BAR'\n            };\n          },\n\n          template: `\n            <div>\n              <slot name=\"item\" :foo=\"foo\" :bar=\"bar\"></slot>\n            </div>\n          `\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>FOO</span><span>BAR</span>');\n    vm.$refs.test.foo = 'BAZ';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>BAZ</span><span>BAR</span>');\n    }).then(done);\n  });","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"fallback content","suites":["Component scoped slot"],"line":102,"updatePoint":{"line":102,"column":22,"index":2498},"code":"  it('fallback content', () => {\n    const vm = new Vue({\n      template: `<test></test>`,\n      components: {\n        test: {\n          data() {\n            return {\n              msg: 'hello'\n            };\n          },\n\n          template: `\n            <div>\n              <slot name=\"item\" :text=\"msg\">\n                <span>{{ msg }} fallback</span>\n              </slot>\n            </div>\n          `\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>hello fallback</span>');\n  });","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"slot with v-for","suites":["Component scoped slot"],"line":125,"updatePoint":{"line":125,"column":21,"index":3013},"code":"  it('slot with v-for', done => {\n    const vm = new Vue({\n      template: `\n        <test ref=\"test\">\n          <template slot=\"item\" scope=\"props\">\n            <span>{{ props.text }}</span>\n          </template>\n        </test>\n      `,\n      components: {\n        test: {\n          data() {\n            return {\n              items: ['foo', 'bar', 'baz']\n            };\n          },\n\n          template: `\n            <div>\n              <slot v-for=\"item in items\" name=\"item\" :text=\"item\"></slot>\n            </div>\n          `\n        }\n      }\n    }).$mount();\n\n    function assertOutput() {\n      expect(vm.$el.innerHTML).toBe(vm.$refs.test.items.map(item => {\n        return `<span>${item}</span>`;\n      }).join(''));\n    }\n\n    assertOutput();\n    vm.$refs.test.items.reverse();\n    waitForUpdate(assertOutput).then(() => {\n      vm.$refs.test.items.push('qux');\n    }).then(assertOutput).then(done);\n  });","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"slot inside v-for","suites":["Component scoped slot"],"line":163,"updatePoint":{"line":163,"column":23,"index":3933},"code":"  it('slot inside v-for', done => {\n    const vm = new Vue({\n      template: `\n        <test ref=\"test\">\n          <template slot=\"item\" scope=\"props\">\n            <span>{{ props.text }}</span>\n          </template>\n        </test>\n      `,\n      components: {\n        test: {\n          data() {\n            return {\n              items: ['foo', 'bar', 'baz']\n            };\n          },\n\n          template: `\n            <ul>\n              <li v-for=\"item in items\">\n                <slot name=\"item\" :text=\"item\"></slot>\n              </li>\n            </ul>\n          `\n        }\n      }\n    }).$mount();\n\n    function assertOutput() {\n      expect(vm.$el.innerHTML).toBe(vm.$refs.test.items.map(item => {\n        return `<li><span>${item}</span></li>`;\n      }).join(''));\n    }\n\n    assertOutput();\n    vm.$refs.test.items.reverse();\n    waitForUpdate(assertOutput).then(() => {\n      vm.$refs.test.items.push('qux');\n    }).then(assertOutput).then(done);\n  });","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"scoped slot without scope alias","suites":["Component scoped slot"],"line":203,"updatePoint":{"line":203,"column":37,"index":4915},"code":"  it('scoped slot without scope alias', () => {\n    const vm = new Vue({\n      template: `\n        <test ref=\"test\">\n          <span slot=\"item\">I am static</span>\n        </test>\n      `,\n      components: {\n        test: {\n          data() {\n            return {\n              msg: 'hello'\n            };\n          },\n\n          template: `\n            <div>\n              <slot name=\"item\" :text=\"msg\"></slot>\n            </div>\n          `\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>I am static</span>');\n  });","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"non-scoped slot with scope alias","suites":["Component scoped slot"],"line":228,"updatePoint":{"line":228,"column":38,"index":5464},"code":"  it('non-scoped slot with scope alias', () => {\n    const vm = new Vue({\n      template: `\n        <test ref=\"test\">\n          <template slot=\"item\" scope=\"props\">\n            <span>{{ props.text || 'meh' }}</span>\n          </template>\n        </test>\n      `,\n      components: {\n        test: {\n          data() {\n            return {\n              msg: 'hello'\n            };\n          },\n\n          template: `\n            <div>\n              <slot name=\"item\"></slot>\n            </div>\n          `\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>meh</span>');\n  });","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"warn key on slot","suites":["Component scoped slot"],"line":255,"updatePoint":{"line":255,"column":22,"index":6050},"code":"  it('warn key on slot', () => {\n    new Vue({\n      template: `\n        <test ref=\"test\">\n          <template slot=\"item\" scope=\"props\">\n            <span>{{ props.text }}</span>\n          </template>\n        </test>\n      `,\n      components: {\n        test: {\n          data() {\n            return {\n              items: ['foo', 'bar', 'baz']\n            };\n          },\n\n          template: `\n            <div>\n              <slot v-for=\"item in items\" name=\"item\" :text=\"item\" :key=\"item\"></slot>\n            </div>\n          `\n        }\n      }\n    }).$mount();\n    expect(`\\`key\\` does not work on <slot>`).toHaveBeenWarned();\n  });","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"render function usage (named, via data)","suites":["Component scoped slot"],"line":282,"updatePoint":{"line":282,"column":45,"index":6713},"code":"  it('render function usage (named, via data)', done => {\n    const vm = new Vue({\n      render(h) {\n        return h('test', {\n          ref: 'test',\n          scopedSlots: {\n            item: props => h('span', props.text)\n          }\n        });\n      },\n\n      components: {\n        test: {\n          data() {\n            return {\n              msg: 'hello'\n            };\n          },\n\n          render(h) {\n            return h('div', [this.$scopedSlots.item({\n              text: this.msg\n            })]);\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>hello</span>');\n    vm.$refs.test.msg = 'world';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>world</span>');\n    }).then(done);\n  });","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"render function usage (default, as children)","suites":["Component scoped slot"],"line":316,"updatePoint":{"line":316,"column":50,"index":7480},"code":"  it('render function usage (default, as children)', () => {\n    const vm = new Vue({\n      render(h) {\n        return h('test', [props => h('span', [props.msg])]);\n      },\n\n      components: {\n        test: {\n          data() {\n            return {\n              msg: 'hello'\n            };\n          },\n\n          render(h) {\n            return h('div', [this.$scopedSlots.default({\n              msg: this.msg\n            })]);\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>hello</span>');\n  }); // #4779","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"should support dynamic slot target","suites":["Component scoped slot"],"line":342,"updatePoint":{"line":342,"column":40,"index":8023},"code":"  it('should support dynamic slot target', done => {\n    const Child = {\n      template: `\n        <div>\n          <slot name=\"a\" msg=\"a\" />\n          <slot name=\"b\" msg=\"b\" />\n        </div>\n      `\n    };\n    const vm = new Vue({\n      data: {\n        a: 'a',\n        b: 'b'\n      },\n      template: `\n        <child>\n          <template :slot=\"a\" scope=\"props\">A {{ props.msg }}</template>\n          <template :slot=\"b\" scope=\"props\">B {{ props.msg }}</template>\n        </child>\n      `,\n      components: {\n        Child\n      }\n    }).$mount();\n    expect(vm.$el.textContent.trim()).toBe('A a B b'); // switch slots\n\n    vm.a = 'b';\n    vm.b = 'a';\n    waitForUpdate(() => {\n      expect(vm.$el.textContent.trim()).toBe('B a A b');\n    }).then(done);\n  });","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"render function usage (JSX)","suites":["Component scoped slot"],"line":374,"updatePoint":{"line":374,"column":33,"index":8779},"code":"  it('render function usage (JSX)', () => {\n    const vm = new Vue({\n      render(h) {\n        return /*#__PURE__*/React.createElement(\"test\", null, props => /*#__PURE__*/React.createElement(\"span\", null, props.msg));\n      },\n\n      components: {\n        test: {\n          data() {\n            return {\n              msg: 'hello'\n            };\n          },\n\n          render(h) {\n            return /*#__PURE__*/React.createElement(\"div\", null, this.$scopedSlots.default({\n              msg: this.msg\n            }));\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>hello</span>');\n  }); // #5615","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"scoped slot with v-for","suites":["Component scoped slot"],"line":400,"updatePoint":{"line":400,"column":28,"index":9415},"code":"  it('scoped slot with v-for', done => {\n    const vm = new Vue({\n      data: {\n        names: ['foo', 'bar']\n      },\n      template: `\n        <test ref=\"test\">\n          <template v-for=\"n in names\" :slot=\"n\" scope=\"props\">\n            <span>{{ props.msg }}</span>\n          </template>\n          <template slot=\"abc\" scope=\"props\">\n            <span>{{ props.msg }}</span>\n          </template>\n        </test>\n      `,\n      components: {\n        test: {\n          data: () => ({\n            msg: 'hello'\n          }),\n          template: `\n            <div>\n              <slot name=\"foo\" :msg=\"msg + ' foo'\"></slot>\n              <slot name=\"bar\" :msg=\"msg + ' bar'\"></slot>\n              <slot name=\"abc\" :msg=\"msg + ' abc'\"></slot>\n            </div>\n          `\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>hello foo</span> <span>hello bar</span> <span>hello abc</span>');\n    vm.$refs.test.msg = 'world';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>world foo</span> <span>world bar</span> <span>world abc</span>');\n    }).then(done);\n  });","file":"unit/features/component/component-scoped-slot.spec.js","skipped":false,"dir":"test"},{"name":"no content","suites":["Component slot"],"line":27,"updatePoint":{"line":27,"column":16,"index":519},"code":"  it('no content', () => {\n    mount({\n      childTemplate: '<div><slot></slot></div>'\n    });\n    expect(child.$el.childNodes.length).toBe(0);\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"default slot","suites":["Component slot"],"line":33,"updatePoint":{"line":33,"column":18,"index":671},"code":"  it('default slot', done => {\n    mount({\n      childTemplate: '<div><slot></slot></div>',\n      parentContent: '<p>{{ msg }}</p>'\n    });\n    expect(child.$el.tagName).toBe('DIV');\n    expect(child.$el.children[0].tagName).toBe('P');\n    expect(child.$el.children[0].textContent).toBe('parent message');\n    vm.msg = 'changed';\n    waitForUpdate(() => {\n      expect(child.$el.children[0].textContent).toBe('changed');\n    }).then(done);\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"named slot","suites":["Component slot"],"line":46,"updatePoint":{"line":46,"column":16,"index":1115},"code":"  it('named slot', done => {\n    mount({\n      childTemplate: '<div><slot name=\"test\"></slot></div>',\n      parentContent: '<p slot=\"test\">{{ msg }}</p>'\n    });\n    expect(child.$el.tagName).toBe('DIV');\n    expect(child.$el.children[0].tagName).toBe('P');\n    expect(child.$el.children[0].textContent).toBe('parent message');\n    vm.msg = 'changed';\n    waitForUpdate(() => {\n      expect(child.$el.children[0].textContent).toBe('changed');\n    }).then(done);\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"named slot with 0 as a number","suites":["Component slot"],"line":59,"updatePoint":{"line":59,"column":35,"index":1602},"code":"  it('named slot with 0 as a number', done => {\n    mount({\n      childTemplate: '<div><slot :name=\"0\"></slot></div>',\n      parentContent: '<p :slot=\"0\">{{ msg }}</p>'\n    });\n    expect(child.$el.tagName).toBe('DIV');\n    expect(child.$el.children[0].tagName).toBe('P');\n    expect(child.$el.children[0].textContent).toBe('parent message');\n    vm.msg = 'changed';\n    waitForUpdate(() => {\n      expect(child.$el.children[0].textContent).toBe('changed');\n    }).then(done);\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"fallback content","suites":["Component slot"],"line":72,"updatePoint":{"line":72,"column":22,"index":2072},"code":"  it('fallback content', () => {\n    mount({\n      childTemplate: '<div><slot><p>{{msg}}</p></slot></div>'\n    });\n    expect(child.$el.children[0].tagName).toBe('P');\n    expect(child.$el.textContent).toBe('child message');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"fallback content with multiple named slots","suites":["Component slot"],"line":79,"updatePoint":{"line":79,"column":48,"index":2329},"code":"  it('fallback content with multiple named slots', () => {\n    mount({\n      childTemplate: `\n        <div>\n          <slot name=\"a\"><p>fallback a</p></slot>\n          <slot name=\"b\">fallback b</slot>\n        </div>\n      `,\n      parentContent: '<p slot=\"b\">slot b</p>'\n    });\n    expect(child.$el.children.length).toBe(2);\n    expect(child.$el.children[0].textContent).toBe('fallback a');\n    expect(child.$el.children[1].textContent).toBe('slot b');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"fallback content with mixed named/unnamed slots","suites":["Component slot"],"line":93,"updatePoint":{"line":93,"column":53,"index":2794},"code":"  it('fallback content with mixed named/unnamed slots', () => {\n    mount({\n      childTemplate: `\n        <div>\n          <slot><p>fallback a</p></slot>\n          <slot name=\"b\">fallback b</slot>\n        </div>\n      `,\n      parentContent: '<p slot=\"b\">slot b</p>'\n    });\n    expect(child.$el.children.length).toBe(2);\n    expect(child.$el.children[0].textContent).toBe('fallback a');\n    expect(child.$el.children[1].textContent).toBe('slot b');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"selector matching multiple elements","suites":["Component slot"],"line":107,"updatePoint":{"line":107,"column":41,"index":3238},"code":"  it('selector matching multiple elements', () => {\n    mount({\n      childTemplate: '<div><slot name=\"t\"></slot></div>',\n      parentContent: '<p slot=\"t\">1</p><div></div><p slot=\"t\">2</p>'\n    });\n    expect(child.$el.innerHTML).toBe('<p>1</p><p>2</p>');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"default content should only render parts not selected","suites":["Component slot"],"line":114,"updatePoint":{"line":114,"column":59,"index":3519},"code":"  it('default content should only render parts not selected', () => {\n    mount({\n      childTemplate: `\n        <div>\n          <slot name=\"a\"></slot>\n          <slot></slot>\n          <slot name=\"b\"></slot>\n        </div>\n      `,\n      parentContent: '<div>foo</div><p slot=\"a\">1</p><p slot=\"b\">2</p>'\n    });\n    expect(child.$el.innerHTML).toBe('<p>1</p> <div>foo</div> <p>2</p>');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"name should only match children","suites":["Component slot"],"line":127,"updatePoint":{"line":127,"column":37,"index":3890},"code":"  it('name should only match children', function () {\n    mount({\n      childTemplate: `\n        <div>\n          <slot name=\"a\"><p>fallback a</p></slot>\n          <slot name=\"b\"><p>fallback b</p></slot>\n          <slot name=\"c\"><p>fallback c</p></slot>\n        </div>\n      `,\n      parentContent: `\n        '<p slot=\"b\">select b</p>\n        '<span><p slot=\"b\">nested b</p></span>\n        '<span><p slot=\"c\">nested c</p></span>\n      `\n    });\n    expect(child.$el.children.length).toBe(3);\n    expect(child.$el.children[0].textContent).toBe('fallback a');\n    expect(child.$el.children[1].textContent).toBe('select b');\n    expect(child.$el.children[2].textContent).toBe('fallback c');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"should accept expressions in slot attribute and slot names","suites":["Component slot"],"line":147,"updatePoint":{"line":147,"column":64,"index":4610},"code":"  it('should accept expressions in slot attribute and slot names', () => {\n    mount({\n      childTemplate: `<div><slot :name=\"'a'\"></slot></div>`,\n      parentContent: `<p>one</p><p :slot=\"'a'\">two</p>`\n    });\n    expect(child.$el.innerHTML).toBe('<p>two</p>');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"slot inside v-if","suites":["Component slot"],"line":154,"updatePoint":{"line":154,"column":22,"index":4838},"code":"  it('slot inside v-if', done => {\n    const vm = new Vue({\n      data: {\n        a: 1,\n        b: 2,\n        show: true\n      },\n      template: '<test :show=\"show\"><p slot=\"b\">{{b}}</p><p>{{a}}</p></test>',\n      components: {\n        test: {\n          props: ['show'],\n          template: '<div v-if=\"show\"><slot></slot><slot name=\"b\"></slot></div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('12');\n    vm.a = 2;\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('22');\n      vm.show = false;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('');\n      vm.show = true;\n      vm.a = 3;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('32');\n    }).then(done);\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"slot inside v-for","suites":["Component slot"],"line":182,"updatePoint":{"line":182,"column":23,"index":5569},"code":"  it('slot inside v-for', () => {\n    mount({\n      childTemplate: '<div><slot v-for=\"i in 3\" :name=\"i\"></slot></div>',\n      parentContent: '<p v-for=\"i in 3\" :slot=\"i\">{{ i - 1 }}</p>'\n    });\n    expect(child.$el.innerHTML).toBe('<p>0</p><p>1</p><p>2</p>');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"nested slots","suites":["Component slot"],"line":189,"updatePoint":{"line":189,"column":18,"index":5831},"code":"  it('nested slots', done => {\n    const vm = new Vue({\n      template: '<test><test2><p>{{ msg }}</p></test2></test>',\n      data: {\n        msg: 'foo'\n      },\n      components: {\n        test: {\n          template: '<div><slot></slot></div>'\n        },\n        test2: {\n          template: '<div><slot></slot></div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<div><p>foo</p></div>');\n    vm.msg = 'bar';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<div><p>bar</p></div>');\n    }).then(done);\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"v-if on inserted content","suites":["Component slot"],"line":210,"updatePoint":{"line":210,"column":30,"index":6391},"code":"  it('v-if on inserted content', done => {\n    const vm = new Vue({\n      template: '<test><p v-if=\"ok\">{{ msg }}</p></test>',\n      data: {\n        ok: true,\n        msg: 'hi'\n      },\n      components: {\n        test: {\n          template: '<div><slot>fallback</slot></div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<p>hi</p>');\n    vm.ok = false;\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('fallback');\n      vm.ok = true;\n      vm.msg = 'bye';\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<p>bye</p>');\n    }).then(done);\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"template slot","suites":["Component slot"],"line":233,"updatePoint":{"line":233,"column":19,"index":6972},"code":"  it('template slot', function () {\n    const vm = new Vue({\n      template: '<test><template slot=\"test\">hello</template></test>',\n      components: {\n        test: {\n          template: '<div><slot name=\"test\"></slot> world</div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('hello world');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"combined with v-for","suites":["Component slot"],"line":244,"updatePoint":{"line":244,"column":25,"index":7302},"code":"  it('combined with v-for', () => {\n    const vm = new Vue({\n      template: '<div><test v-for=\"i in 3\" :key=\"i\">{{ i }}</test></div>',\n      components: {\n        test: {\n          template: '<div><slot></slot></div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<div>1</div><div>2</div><div>3</div>');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"inside template v-if","suites":["Component slot"],"line":255,"updatePoint":{"line":255,"column":26,"index":7638},"code":"  it('inside template v-if', () => {\n    mount({\n      childTemplate: `\n        <div>\n          <template v-if=\"true\"><slot></slot></template>\n        </div>\n      `,\n      parentContent: 'foo'\n    });\n    expect(child.$el.innerHTML).toBe('foo');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"default slot should use fallback content if has only whitespace","suites":["Component slot"],"line":266,"updatePoint":{"line":266,"column":69,"index":7934},"code":"  it('default slot should use fallback content if has only whitespace', () => {\n    mount({\n      childTemplate: `\n        <div>\n          <slot name=\"first\"><p>first slot</p></slot>\n          <slot><p>this is the default slot</p></slot>\n          <slot name=\"second\"><p>second named slot</p></slot>\n        </div>\n      `,\n      parentContent: `<div slot=\"first\">1</div> <div slot=\"second\">2</div> <div slot=\"second\">2+</div>`\n    });\n    expect(child.$el.innerHTML).toBe('<div>1</div> <p>this is the default slot</p> <div>2</div><div>2+</div>');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"programmatic access to $slots","suites":["Component slot"],"line":279,"updatePoint":{"line":279,"column":35,"index":8454},"code":"  it('programmatic access to $slots', () => {\n    const vm = new Vue({\n      template: '<test><p slot=\"a\">A</p><div>C</div><p slot=\"b\">B</p></test>',\n      components: {\n        test: {\n          render() {\n            expect(this.$slots.a.length).toBe(1);\n            expect(this.$slots.a[0].tag).toBe('p');\n            expect(this.$slots.a[0].children.length).toBe(1);\n            expect(this.$slots.a[0].children[0].text).toBe('A');\n            expect(this.$slots.b.length).toBe(1);\n            expect(this.$slots.b[0].tag).toBe('p');\n            expect(this.$slots.b[0].children.length).toBe(1);\n            expect(this.$slots.b[0].children[0].text).toBe('B');\n            expect(this.$slots.default.length).toBe(1);\n            expect(this.$slots.default[0].tag).toBe('div');\n            expect(this.$slots.default[0].children.length).toBe(1);\n            expect(this.$slots.default[0].children[0].text).toBe('C');\n            return this.$slots.default[0];\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.tagName).toBe('DIV');\n    expect(vm.$el.textContent).toBe('C');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"warn if user directly returns array","suites":["Component slot"],"line":306,"updatePoint":{"line":306,"column":41,"index":9559},"code":"  it('warn if user directly returns array', () => {\n    new Vue({\n      template: '<test><div></div></test>',\n      components: {\n        test: {\n          render() {\n            return this.$slots.default;\n          }\n\n        }\n      }\n    }).$mount();\n    expect('Render function should return a single root node').toHaveBeenWarned();\n  }); // #3254","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"should not keep slot name when passed further down","suites":["Component slot"],"line":321,"updatePoint":{"line":321,"column":56,"index":9928},"code":"  it('should not keep slot name when passed further down', () => {\n    const vm = new Vue({\n      template: '<test><span slot=\"foo\">foo</span></test>',\n      components: {\n        test: {\n          template: '<child><slot name=\"foo\"></slot></child>',\n          components: {\n            child: {\n              template: `\n                <div>\n                  <div class=\"default\"><slot></slot></div>\n                  <div class=\"named\"><slot name=\"foo\"></slot></div>\n                </div>\n              `\n            }\n          }\n        }\n      }\n    }).$mount();\n    expect(vm.$el.querySelector('.default').textContent).toBe('foo');\n    expect(vm.$el.querySelector('.named').textContent).toBe('');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"should not keep slot name when passed further down (nested)","suites":["Component slot"],"line":343,"updatePoint":{"line":343,"column":65,"index":10649},"code":"  it('should not keep slot name when passed further down (nested)', () => {\n    const vm = new Vue({\n      template: '<wrap><test><span slot=\"foo\">foo</span></test></wrap>',\n      components: {\n        wrap: {\n          template: '<div><slot></slot></div>'\n        },\n        test: {\n          template: '<child><slot name=\"foo\"></slot></child>',\n          components: {\n            child: {\n              template: `\n                <div>\n                  <div class=\"default\"><slot></slot></div>\n                  <div class=\"named\"><slot name=\"foo\"></slot></div>\n                </div>\n              `\n            }\n          }\n        }\n      }\n    }).$mount();\n    expect(vm.$el.querySelector('.default').textContent).toBe('foo');\n    expect(vm.$el.querySelector('.named').textContent).toBe('');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"should not keep slot name when passed further down (functional)","suites":["Component slot"],"line":368,"updatePoint":{"line":368,"column":69,"index":11461},"code":"  it('should not keep slot name when passed further down (functional)', () => {\n    const child = {\n      template: `\n        <div>\n          <div class=\"default\"><slot></slot></div>\n          <div class=\"named\"><slot name=\"foo\"></slot></div>\n        </div>\n      `\n    };\n    const vm = new Vue({\n      template: '<test><span slot=\"foo\">foo</span></test>',\n      components: {\n        test: {\n          functional: true,\n\n          render(h, ctx) {\n            const slots = ctx.slots();\n            return h(child, slots.foo);\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.querySelector('.default').textContent).toBe('foo');\n    expect(vm.$el.querySelector('.named').textContent).toBe('');\n  }); // #3400","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"named slots should be consistent across re-renders","suites":["Component slot"],"line":395,"updatePoint":{"line":395,"column":56,"index":12176},"code":"  it('named slots should be consistent across re-renders', done => {\n    const vm = new Vue({\n      template: `\n        <comp>\n          <div slot=\"foo\">foo</div>\n        </comp>\n      `,\n      components: {\n        comp: {\n          data() {\n            return {\n              a: 1\n            };\n          },\n\n          template: `<div><slot name=\"foo\"></slot>{{ a }}</div>`\n        }\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('foo1');\n    vm.$children[0].a = 2;\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('foo2');\n    }).then(done);\n  }); // #3437","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"should correctly re-create components in slot","suites":["Component slot"],"line":421,"updatePoint":{"line":421,"column":51,"index":12763},"code":"  it('should correctly re-create components in slot', done => {\n    const calls = [];\n    const vm = new Vue({\n      template: `\n        <comp ref=\"child\">\n          <div slot=\"foo\">\n            <child></child>\n          </div>\n        </comp>\n      `,\n      components: {\n        comp: {\n          data() {\n            return {\n              ok: true\n            };\n          },\n\n          template: `<div><slot name=\"foo\" v-if=\"ok\"></slot></div>`\n        },\n        child: {\n          template: '<div>child</div>',\n\n          created() {\n            calls.push(1);\n          },\n\n          destroyed() {\n            calls.push(2);\n          }\n\n        }\n      }\n    }).$mount();\n    expect(calls).toEqual([1]);\n    vm.$refs.child.ok = false;\n    waitForUpdate(() => {\n      expect(calls).toEqual([1, 2]);\n      vm.$refs.child.ok = true;\n    }).then(() => {\n      expect(calls).toEqual([1, 2, 1]);\n      vm.$refs.child.ok = false;\n    }).then(() => {\n      expect(calls).toEqual([1, 2, 1, 2]);\n    }).then(done);\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"warn duplicate slots","suites":["Component slot"],"line":467,"updatePoint":{"line":467,"column":26,"index":13757},"code":"  it('warn duplicate slots', () => {\n    new Vue({\n      template: `<div>\n        <test>\n          <div>foo</div>\n          <div slot=\"a\">bar</div>\n        </test>\n      </div>`,\n      components: {\n        test: {\n          template: `<div>\n            <slot></slot><slot></slot>\n            <div v-for=\"i in 3\"><slot name=\"a\"></slot></div>\n          </div>`\n        }\n      }\n    }).$mount();\n    expect('Duplicate presence of slot \"default\"').toHaveBeenWarned();\n    expect('Duplicate presence of slot \"a\"').toHaveBeenWarned();\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"should not warn valid conditional slots","suites":["Component slot"],"line":487,"updatePoint":{"line":487,"column":45,"index":14313},"code":"  it('should not warn valid conditional slots', () => {\n    new Vue({\n      template: `<div>\n        <test>\n          <div>foo</div>\n        </test>\n      </div>`,\n      components: {\n        test: {\n          template: `<div>\n            <slot v-if=\"true\"></slot>\n            <slot v-else></slot>\n          </div>`\n        }\n      }\n    }).$mount();\n    expect('Duplicate presence of slot \"default\"').not.toHaveBeenWarned();\n  }); // #3518","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"events should not break when slot is toggled by v-if","suites":["Component slot"],"line":506,"updatePoint":{"line":506,"column":58,"index":14768},"code":"  it('events should not break when slot is toggled by v-if', done => {\n    const spy = jasmine.createSpy();\n    const vm = new Vue({\n      template: `<test><div class=\"click\" @click=\"test\">hi</div></test>`,\n      methods: {\n        test: spy\n      },\n      components: {\n        test: {\n          data: () => ({\n            toggle: true\n          }),\n          template: `<div v-if=\"toggle\"><slot></slot></div>`\n        }\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('hi');\n    vm.$children[0].toggle = false;\n    waitForUpdate(() => {\n      vm.$children[0].toggle = true;\n    }).then(() => {\n      triggerEvent(vm.$el.querySelector('.click'), 'click');\n      expect(spy).toHaveBeenCalled();\n    }).then(done);\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"renders static tree with text","suites":["Component slot"],"line":531,"updatePoint":{"line":531,"column":35,"index":15478},"code":"  it('renders static tree with text', () => {\n    const vm = new Vue({\n      template: `<div><test><template><div></div>Hello<div></div></template></test></div>`,\n      components: {\n        test: {\n          template: '<div><slot></slot></div>'\n        }\n      }\n    });\n    vm.$mount();\n    expect('Error when rendering root').not.toHaveBeenWarned();\n  }); // #3872","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"functional component as slot","suites":["Component slot"],"line":544,"updatePoint":{"line":544,"column":34,"index":15846},"code":"  it('functional component as slot', () => {\n    const vm = new Vue({\n      template: `\n        <parent>\n          <child>one</child>\n          <child slot=\"a\">two</child>\n        </parent>\n      `,\n      components: {\n        parent: {\n          template: `<div><slot name=\"a\"></slot><slot></slot></div>`\n        },\n        child: {\n          functional: true,\n\n          render(h, {\n            slots\n          }) {\n            return h('div', slots().default);\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML.trim()).toBe('<div>two</div><div>one</div>');\n  }); // #4209","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"slot of multiple text nodes should not be infinitely merged","suites":["Component slot"],"line":571,"updatePoint":{"line":571,"column":65,"index":16479},"code":"  it('slot of multiple text nodes should not be infinitely merged', done => {\n    const wrap = {\n      template: `<inner ref=\"inner\">foo<slot></slot></inner>`,\n      components: {\n        inner: {\n          data: () => ({\n            a: 1\n          }),\n          template: `<div>{{a}}<slot></slot></div>`\n        }\n      }\n    };\n    const vm = new Vue({\n      template: `<wrap ref=\"wrap\">bar</wrap>`,\n      components: {\n        wrap\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('1foobar');\n    vm.$refs.wrap.$refs.inner.a++;\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('2foobar');\n    }).then(done);\n  }); // #4315","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"functional component passing slot content to stateful child component","suites":["Component slot"],"line":596,"updatePoint":{"line":596,"column":75,"index":17143},"code":"  it('functional component passing slot content to stateful child component', done => {\n    const ComponentWithSlots = {\n      render(h) {\n        return h('div', this.$slots.slot1);\n      }\n\n    };\n    const FunctionalComp = {\n      functional: true,\n\n      render(h) {\n        return h(ComponentWithSlots, [h('span', {\n          slot: 'slot1'\n        }, 'foo')]);\n      }\n\n    };\n    const vm = new Vue({\n      data: {\n        n: 1\n      },\n\n      render(h) {\n        return h('div', [this.n, h(FunctionalComp)]);\n      }\n\n    }).$mount();\n    expect(vm.$el.textContent).toBe('1foo');\n    vm.n++;\n    waitForUpdate(() => {\n      // should not lose named slot\n      expect(vm.$el.textContent).toBe('2foo');\n    }).then(done);\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"the elements of slot should be updated correctly","suites":["Component slot"],"line":630,"updatePoint":{"line":630,"column":54,"index":17855},"code":"  it('the elements of slot should be updated correctly', done => {\n    const vm = new Vue({\n      data: {\n        n: 1\n      },\n      template: '<div><test><span v-for=\"i in n\" :key=\"i\">{{ i }}</span><input value=\"a\"/></test></div>',\n      components: {\n        test: {\n          template: '<div><slot></slot></div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<div><span>1</span><input value=\"a\"></div>');\n    const input = vm.$el.querySelector('input');\n    input.value = 'b';\n    vm.n++;\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<div><span>1</span><span>2</span><input value=\"a\"></div>');\n      expect(vm.$el.querySelector('input')).toBe(input);\n      expect(vm.$el.querySelector('input').value).toBe('b');\n    }).then(done);\n  }); // Github issue #5888","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"should resolve correctly slot with keep-alive","suites":["Component slot"],"line":653,"updatePoint":{"line":653,"column":51,"index":18658},"code":"  it('should resolve correctly slot with keep-alive', () => {\n    const vm = new Vue({\n      template: `\n      <div>\n        <container>\n          <keep-alive slot=\"foo\">\n            <child></child>\n          </keep-alive>\n        </container>\n      </div>\n      `,\n      components: {\n        container: {\n          template: '<div><slot>default</slot><slot name=\"foo\">named</slot></div>'\n        },\n        child: {\n          template: '<span>foo</span>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<div>default<span>foo</span></div>');\n  });","file":"unit/features/component/component-slot.spec.js","skipped":false,"dir":"test"},{"name":"static","suites":["Component"],"line":3,"updatePoint":{"line":3,"column":12,"index":66},"code":"  it('static', () => {\n    const vm = new Vue({\n      template: '<test></test>',\n      components: {\n        test: {\n          data() {\n            return {\n              a: 123\n            };\n          },\n\n          template: '<span>{{a}}</span>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.tagName).toBe('SPAN');\n    expect(vm.$el.innerHTML).toBe('123');\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"using component in restricted elements","suites":["Component"],"line":21,"updatePoint":{"line":21,"column":44,"index":470},"code":"  it('using component in restricted elements', () => {\n    const vm = new Vue({\n      template: '<div><table><tbody><test></test></tbody></table></div>',\n      components: {\n        test: {\n          data() {\n            return {\n              a: 123\n            };\n          },\n\n          template: '<tr><td>{{a}}</td></tr>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<table><tbody><tr><td>123</td></tr></tbody></table>');\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"\"is\" attribute","suites":["Component"],"line":38,"updatePoint":{"line":38,"column":20,"index":903},"code":"  it('\"is\" attribute', () => {\n    const vm = new Vue({\n      template: '<div><table><tbody><tr is=\"test\"></tr></tbody></table></div>',\n      components: {\n        test: {\n          data() {\n            return {\n              a: 123\n            };\n          },\n\n          template: '<tr><td>{{a}}</td></tr>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<table><tbody><tr><td>123</td></tr></tbody></table>');\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"inline-template","suites":["Component"],"line":55,"updatePoint":{"line":55,"column":21,"index":1343},"code":"  it('inline-template', () => {\n    const vm = new Vue({\n      template: '<div><test inline-template><span>{{a}}</span></test></div>',\n      data: {\n        a: 'parent'\n      },\n      components: {\n        test: {\n          data() {\n            return {\n              a: 'child'\n            };\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>child</span>');\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"fragment instance warning","suites":["Component"],"line":74,"updatePoint":{"line":74,"column":31,"index":1758},"code":"  it('fragment instance warning', () => {\n    new Vue({\n      template: '<test></test>',\n      components: {\n        test: {\n          data() {\n            return {\n              a: 123,\n              b: 234\n            };\n          },\n\n          template: '<p>{{a}}</p><p>{{b}}</p>'\n        }\n      }\n    }).$mount();\n    expect('Component template should contain exactly one root element').toHaveBeenWarned();\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"dynamic","suites":["Component"],"line":92,"updatePoint":{"line":92,"column":13,"index":2158},"code":"  it('dynamic', done => {\n    const vm = new Vue({\n      template: '<component :is=\"view\" :view=\"view\"></component>',\n      data: {\n        view: 'view-a'\n      },\n      components: {\n        'view-a': {\n          template: '<div>foo {{view}}</div>',\n\n          data() {\n            return {\n              view: 'a'\n            };\n          }\n\n        },\n        'view-b': {\n          template: '<div>bar {{view}}</div>',\n\n          data() {\n            return {\n              view: 'b'\n            };\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.outerHTML).toBe('<div view=\"view-a\">foo a</div>');\n    vm.view = 'view-b';\n    waitForUpdate(() => {\n      expect(vm.$el.outerHTML).toBe('<div view=\"view-b\">bar b</div>');\n      vm.view = '';\n    }).then(() => {\n      expect(vm.$el.nodeType).toBe(8);\n      expect(vm.$el.data).toBe('');\n    }).then(done);\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"dynamic with props","suites":["Component"],"line":131,"updatePoint":{"line":131,"column":24,"index":3049},"code":"  it('dynamic with props', done => {\n    const vm = new Vue({\n      template: '<component :is=\"view\" :view=\"view\"></component>',\n      data: {\n        view: 'view-a'\n      },\n      components: {\n        'view-a': {\n          template: '<div>foo {{view}}</div>',\n          props: ['view']\n        },\n        'view-b': {\n          template: '<div>bar {{view}}</div>',\n          props: ['view']\n        }\n      }\n    }).$mount();\n    expect(vm.$el.outerHTML).toBe('<div>foo view-a</div>');\n    vm.view = 'view-b';\n    waitForUpdate(() => {\n      expect(vm.$el.outerHTML).toBe('<div>bar view-b</div>');\n      vm.view = '';\n    }).then(() => {\n      expect(vm.$el.nodeType).toBe(8);\n      expect(vm.$el.data).toBe('');\n    }).then(done);\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":":is using raw component constructor","suites":["Component"],"line":158,"updatePoint":{"line":158,"column":41,"index":3805},"code":"  it(':is using raw component constructor', () => {\n    const vm = new Vue({\n      template: '<div>' + '<component :is=\"$options.components.test\"></component>' + '<component :is=\"$options.components.async\"></component>' + '</div>',\n      components: {\n        test: {\n          template: '<span>foo</span>'\n        },\n        async: function (resolve) {\n          resolve({\n            template: '<span>bar</span>'\n          });\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>foo</span><span>bar</span>');\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"dynamic combined with v-for","suites":["Component"],"line":174,"updatePoint":{"line":174,"column":33,"index":4338},"code":"  it('dynamic combined with v-for', done => {\n    const vm = new Vue({\n      template: '<div>' + '<component v-for=\"c in comps\" :key=\"c.type\" :is=\"c.type\"></component>' + '</div>',\n      data: {\n        comps: [{\n          type: 'one'\n        }, {\n          type: 'two'\n        }]\n      },\n      components: {\n        one: {\n          template: '<span>one</span>'\n        },\n        two: {\n          template: '<span>two</span>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>one</span><span>two</span>');\n    vm.comps[1].type = 'one';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>one</span><span>one</span>');\n    }).then(done);\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"should compile parent template directives & content in parent scope","suites":["Component"],"line":199,"updatePoint":{"line":199,"column":73,"index":5067},"code":"  it('should compile parent template directives & content in parent scope', done => {\n    const vm = new Vue({\n      data: {\n        ok: false,\n        message: 'hello'\n      },\n      template: '<test v-show=\"ok\">{{message}}</test>',\n      components: {\n        test: {\n          template: '<div><slot></slot> {{message}}</div>',\n\n          data() {\n            return {\n              message: 'world'\n            };\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.style.display).toBe('none');\n    expect(vm.$el.textContent).toBe('hello world');\n    vm.ok = true;\n    vm.message = 'bye';\n    waitForUpdate(() => {\n      expect(vm.$el.style.display).toBe('');\n      expect(vm.$el.textContent).toBe('bye world');\n    }).then(done);\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"parent content + v-if","suites":["Component"],"line":228,"updatePoint":{"line":228,"column":27,"index":5775},"code":"  it('parent content + v-if', done => {\n    const vm = new Vue({\n      data: {\n        ok: false,\n        message: 'hello'\n      },\n      template: '<test v-if=\"ok\">{{message}}</test>',\n      components: {\n        test: {\n          template: '<div><slot></slot> {{message}}</div>',\n\n          data() {\n            return {\n              message: 'world'\n            };\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('');\n    expect(vm.$children.length).toBe(0);\n    vm.ok = true;\n    waitForUpdate(() => {\n      expect(vm.$children.length).toBe(1);\n      expect(vm.$el.textContent).toBe('hello world');\n    }).then(done);\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"props","suites":["Component"],"line":256,"updatePoint":{"line":256,"column":11,"index":6424},"code":"  it('props', () => {\n    const vm = new Vue({\n      data: {\n        list: [{\n          a: 1\n        }, {\n          a: 2\n        }]\n      },\n      template: '<test :collection=\"list\"></test>',\n      components: {\n        test: {\n          template: '<ul><li v-for=\"item in collection\">{{item.a}}</li></ul>',\n          props: ['collection']\n        }\n      }\n    }).$mount();\n    expect(vm.$el.outerHTML).toBe('<ul><li>1</li><li>2</li></ul>');\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"should warn when using camelCased props in in-DOM template","suites":["Component"],"line":275,"updatePoint":{"line":275,"column":64,"index":6926},"code":"  it('should warn when using camelCased props in in-DOM template', () => {\n    new Vue({\n      data: {\n        list: [{\n          a: 1\n        }, {\n          a: 2\n        }]\n      },\n      template: '<test :somecollection=\"list\"></test>',\n      // <-- simulate lowercased template\n      components: {\n        test: {\n          template: '<ul><li v-for=\"item in someCollection\">{{item.a}}</li></ul>',\n          props: ['someCollection']\n        }\n      }\n    }).$mount();\n    expect('You should probably use \"some-collection\" instead of \"someCollection\".').toHaveBeenTipped();\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"should warn when using camelCased events in in-DOM template","suites":["Component"],"line":295,"updatePoint":{"line":295,"column":65,"index":7509},"code":"  it('should warn when using camelCased events in in-DOM template', () => {\n    new Vue({\n      template: '<test @foobar=\"a++\"></test>',\n      // <-- simulate lowercased template\n      components: {\n        test: {\n          template: '<div></div>',\n\n          created() {\n            this.$emit('fooBar');\n          }\n\n        }\n      }\n    }).$mount();\n    expect('You should probably use \"foo-bar\" instead of \"fooBar\".').toHaveBeenTipped();\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"not found component should not throw","suites":["Component"],"line":312,"updatePoint":{"line":312,"column":42,"index":7936},"code":"  it('not found component should not throw', () => {\n    expect(function () {\n      new Vue({\n        template: '<div is=\"non-existent\"></div>'\n      });\n    }).not.toThrow();\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"properly update replaced higher-order component root node","suites":["Component"],"line":319,"updatePoint":{"line":319,"column":63,"index":8139},"code":"  it('properly update replaced higher-order component root node', done => {\n    const vm = new Vue({\n      data: {\n        color: 'red'\n      },\n      template: '<test id=\"foo\" :class=\"color\"></test>',\n      components: {\n        test: {\n          data() {\n            return {\n              tag: 'div'\n            };\n          },\n\n          render(h) {\n            return h(this.tag, {\n              class: 'test'\n            }, 'hi');\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.tagName).toBe('DIV');\n    expect(vm.$el.id).toBe('foo');\n    expect(vm.$el.className).toBe('test red');\n    vm.color = 'green';\n    waitForUpdate(() => {\n      expect(vm.$el.tagName).toBe('DIV');\n      expect(vm.$el.id).toBe('foo');\n      expect(vm.$el.className).toBe('test green');\n      vm.$children[0].tag = 'p';\n    }).then(() => {\n      expect(vm.$el.tagName).toBe('P');\n      expect(vm.$el.id).toBe('foo');\n      expect(vm.$el.className).toBe('test green');\n      vm.color = 'red';\n    }).then(() => {\n      expect(vm.$el.tagName).toBe('P');\n      expect(vm.$el.id).toBe('foo');\n      expect(vm.$el.className).toBe('test red');\n    }).then(done);\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"catch component render error and preserve previous vnode","suites":["Component"],"line":362,"updatePoint":{"line":362,"column":62,"index":9301},"code":"  it('catch component render error and preserve previous vnode', done => {\n    const spy = jasmine.createSpy();\n    Vue.config.errorHandler = spy;\n    const vm = new Vue({\n      data: {\n        a: {\n          b: 123\n        }\n      },\n\n      render(h) {\n        return h('div', [this.a.b]);\n      }\n\n    }).$mount();\n    expect(vm.$el.textContent).toBe('123');\n    expect(spy).not.toHaveBeenCalled();\n    vm.a = null;\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalled();\n      expect(vm.$el.textContent).toBe('123'); // should preserve rendered DOM\n\n      vm.a = {\n        b: 234\n      };\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('234'); // should be able to recover\n\n      Vue.config.errorHandler = null;\n    }).then(done);\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"relocates node without error","suites":["Component"],"line":393,"updatePoint":{"line":393,"column":34,"index":10032},"code":"  it('relocates node without error', done => {\n    const el = document.createElement('div');\n    document.body.appendChild(el);\n    const target = document.createElement('div');\n    document.body.appendChild(target);\n    const Test = {\n      render(h) {\n        return h('div', {\n          class: 'test'\n        }, this.$slots.default);\n      },\n\n      mounted() {\n        target.appendChild(this.$el);\n      },\n\n      beforeDestroy() {\n        const parent = this.$el.parentNode;\n\n        if (parent) {\n          parent.removeChild(this.$el);\n        }\n      }\n\n    };\n    const vm = new Vue({\n      data() {\n        return {\n          view: true\n        };\n      },\n\n      template: `<div><test v-if=\"view\">Test</test></div>`,\n      components: {\n        test: Test\n      }\n    }).$mount(el);\n    expect(el.outerHTML).toBe('<div></div>');\n    expect(target.outerHTML).toBe('<div><div class=\"test\">Test</div></div>');\n    vm.view = false;\n    waitForUpdate(() => {\n      expect(el.outerHTML).toBe('<div></div>');\n      expect(target.outerHTML).toBe('<div></div>');\n      vm.$destroy();\n    }).then(done);\n  });","file":"unit/features/component/component.spec.js","skipped":false,"dir":"test"},{"name":"properly format component names","suites":["Debug utilities"],"line":4,"updatePoint":{"line":4,"column":37,"index":158},"code":"  it('properly format component names', () => {\n    const vm = new Vue();\n    expect(formatComponentName(vm)).toBe('<Root>');\n    vm.$root = null;\n    vm.$options.name = 'hello-there';\n    expect(formatComponentName(vm)).toBe('<HelloThere>');\n    vm.$options.name = null;\n    vm.$options._componentTag = 'foo-bar-1';\n    expect(formatComponentName(vm)).toBe('<FooBar1>');\n    vm.$options._componentTag = null;\n    vm.$options.__file = '/foo/bar/baz/SomeThing.vue';\n    expect(formatComponentName(vm)).toBe(`<SomeThing> at ${vm.$options.__file}`);\n    expect(formatComponentName(vm, false)).toBe('<SomeThing>');\n    vm.$options.__file = 'C:\\\\foo\\\\bar\\\\baz\\\\windows_file.vue';\n    expect(formatComponentName(vm)).toBe(`<WindowsFile> at ${vm.$options.__file}`);\n    expect(formatComponentName(vm, false)).toBe('<WindowsFile>');\n  });","file":"unit/features/debug.spec.js","skipped":false,"dir":"test"},{"name":"generate correct component hierarchy trace","suites":["Debug utilities"],"line":21,"updatePoint":{"line":21,"column":48,"index":1000},"code":"  it('generate correct component hierarchy trace', () => {\n    const one = {\n      name: 'one',\n      render: h => h(two)\n    };\n    const two = {\n      name: 'two',\n      render: h => h(three)\n    };\n    const three = {\n      name: 'three'\n    };\n    new Vue({\n      render: h => h(one)\n    }).$mount();\n    expect(`Failed to mount component: template or render function not defined.\n\nfound in\n\n---> <Three>\n       <Two>\n         <One>\n           <Root>`).toHaveBeenWarned();\n  });","file":"unit/features/debug.spec.js","skipped":false,"dir":"test"},{"name":"generate correct component hierarchy trace (recursive)","suites":["Debug utilities"],"line":45,"updatePoint":{"line":45,"column":60,"index":1495},"code":"  it('generate correct component hierarchy trace (recursive)', () => {\n    let i = 0;\n    const one = {\n      name: 'one',\n      render: h => i++ < 5 ? h(one) : h(two)\n    };\n    const two = {\n      name: 'two',\n      render: h => h(three)\n    };\n    const three = {\n      name: 'three'\n    };\n    new Vue({\n      render: h => h(one)\n    }).$mount();\n    expect(`Failed to mount component: template or render function not defined.\n\nfound in\n\n---> <Three>\n       <Two>\n         <One>... (5 recursive calls)\n           <Root>`).toHaveBeenWarned();\n  });","file":"unit/features/debug.spec.js","skipped":false,"dir":"test"},{"name":"calls warnHandler if warnHandler is set","suites":["Debug utilities","warn"],"line":73,"updatePoint":{"line":73,"column":47,"index":2114},"code":"    it('calls warnHandler if warnHandler is set', () => {\n      Vue.config.warnHandler = jasmine.createSpy();\n      warn(msg, vm);\n      expect(Vue.config.warnHandler).toHaveBeenCalledWith(msg, vm, jasmine.any(String));\n      Vue.config.warnHandler = null;\n    });","file":"unit/features/debug.spec.js","skipped":false,"dir":"test"},{"name":"calls console.error if silent is false","suites":["Debug utilities","warn"],"line":79,"updatePoint":{"line":79,"column":46,"index":2378},"code":"    it('calls console.error if silent is false', () => {\n      Vue.config.silent = false;\n      warn(msg, vm);\n      expect(msg).toHaveBeenWarned();\n      expect(console.error).toHaveBeenCalled();\n    });","file":"unit/features/debug.spec.js","skipped":false,"dir":"test"},{"name":"does not call console.error if silent is true","suites":["Debug utilities","warn"],"line":85,"updatePoint":{"line":85,"column":53,"index":2590},"code":"    it('does not call console.error if silent is true', () => {\n      Vue.config.silent = true;\n      warn(msg, vm);\n      expect(console.error).not.toHaveBeenCalled();\n      Vue.config.silent = false;\n    });","file":"unit/features/debug.spec.js","skipped":false,"dir":"test"},{"name":"normal attr","suites":["Directive v-bind"],"line":3,"updatePoint":{"line":3,"column":17,"index":78},"code":"  it('normal attr', done => {\n    const vm = new Vue({\n      template: '<div><span :test=\"foo\">hello</span></div>',\n      data: {\n        foo: 'ok'\n      }\n    }).$mount();\n    expect(vm.$el.firstChild.getAttribute('test')).toBe('ok');\n    vm.foo = 'again';\n    waitForUpdate(() => {\n      expect(vm.$el.firstChild.getAttribute('test')).toBe('again');\n      vm.foo = null;\n    }).then(() => {\n      expect(vm.$el.firstChild.hasAttribute('test')).toBe(false);\n      vm.foo = false;\n    }).then(() => {\n      expect(vm.$el.firstChild.hasAttribute('test')).toBe(false);\n      vm.foo = true;\n    }).then(() => {\n      expect(vm.$el.firstChild.getAttribute('test')).toBe('true');\n      vm.foo = 0;\n    }).then(() => {\n      expect(vm.$el.firstChild.getAttribute('test')).toBe('0');\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"should set property for input value","suites":["Directive v-bind"],"line":28,"updatePoint":{"line":28,"column":41,"index":904},"code":"  it('should set property for input value', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <input type=\"text\" :value=\"foo\">\n          <input type=\"checkbox\" :checked=\"bar\">\n        </div>\n      `,\n      data: {\n        foo: 'ok',\n        bar: false\n      }\n    }).$mount();\n    expect(vm.$el.firstChild.value).toBe('ok');\n    expect(vm.$el.lastChild.checked).toBe(false);\n    vm.bar = true;\n    waitForUpdate(() => {\n      expect(vm.$el.lastChild.checked).toBe(true);\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"xlink","suites":["Directive v-bind"],"line":48,"updatePoint":{"line":48,"column":11,"index":1397},"code":"  it('xlink', done => {\n    const vm = new Vue({\n      template: '<svg><a :xlink:special=\"foo\"></a></svg>',\n      data: {\n        foo: 'ok'\n      }\n    }).$mount();\n    const xlinkNS = 'http://www.w3.org/1999/xlink';\n    expect(vm.$el.firstChild.getAttributeNS(xlinkNS, 'special')).toBe('ok');\n    vm.foo = 'again';\n    waitForUpdate(() => {\n      expect(vm.$el.firstChild.getAttributeNS(xlinkNS, 'special')).toBe('again');\n      vm.foo = null;\n    }).then(() => {\n      expect(vm.$el.firstChild.hasAttributeNS(xlinkNS, 'special')).toBe(false);\n      vm.foo = true;\n    }).then(() => {\n      expect(vm.$el.firstChild.getAttributeNS(xlinkNS, 'special')).toBe('true');\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"enumerated attr","suites":["Directive v-bind"],"line":68,"updatePoint":{"line":68,"column":21,"index":2099},"code":"  it('enumerated attr', done => {\n    const vm = new Vue({\n      template: '<div><span :draggable=\"foo\">hello</span></div>',\n      data: {\n        foo: true\n      }\n    }).$mount();\n    expect(vm.$el.firstChild.getAttribute('draggable')).toBe('true');\n    vm.foo = 'again';\n    waitForUpdate(() => {\n      expect(vm.$el.firstChild.getAttribute('draggable')).toBe('true');\n      vm.foo = null;\n    }).then(() => {\n      expect(vm.$el.firstChild.getAttribute('draggable')).toBe('false');\n      vm.foo = '';\n    }).then(() => {\n      expect(vm.$el.firstChild.getAttribute('draggable')).toBe('true');\n      vm.foo = false;\n    }).then(() => {\n      expect(vm.$el.firstChild.getAttribute('draggable')).toBe('false');\n      vm.foo = 'false';\n    }).then(() => {\n      expect(vm.$el.firstChild.getAttribute('draggable')).toBe('false');\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"boolean attr","suites":["Directive v-bind"],"line":93,"updatePoint":{"line":93,"column":18,"index":2950},"code":"  it('boolean attr', done => {\n    const vm = new Vue({\n      template: '<div><span :disabled=\"foo\">hello</span></div>',\n      data: {\n        foo: true\n      }\n    }).$mount();\n    expect(vm.$el.firstChild.getAttribute('disabled')).toBe('disabled');\n    vm.foo = 'again';\n    waitForUpdate(() => {\n      expect(vm.$el.firstChild.getAttribute('disabled')).toBe('disabled');\n      vm.foo = null;\n    }).then(() => {\n      expect(vm.$el.firstChild.hasAttribute('disabled')).toBe(false);\n      vm.foo = '';\n    }).then(() => {\n      expect(vm.$el.firstChild.hasAttribute('disabled')).toBe(true);\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":".prop modifier","suites":["Directive v-bind"],"line":112,"updatePoint":{"line":112,"column":20,"index":3570},"code":"  it('.prop modifier', () => {\n    const vm = new Vue({\n      template: '<div><span v-bind:text-content.prop=\"foo\"></span><span :inner-html.prop=\"bar\"></span></div>',\n      data: {\n        foo: 'hello',\n        bar: '<span>qux</span>'\n      }\n    }).$mount();\n    expect(vm.$el.children[0].textContent).toBe('hello');\n    expect(vm.$el.children[1].innerHTML).toBe('<span>qux</span>');\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":".prop modifier with normal attribute binding","suites":["Directive v-bind"],"line":123,"updatePoint":{"line":123,"column":50,"index":3991},"code":"  it('.prop modifier with normal attribute binding', () => {\n    const vm = new Vue({\n      template: '<input :some.prop=\"some\" :id=\"id\">',\n      data: {\n        some: 'hello',\n        id: false\n      }\n    }).$mount();\n    expect(vm.$el.some).toBe('hello');\n    expect(vm.$el.getAttribute('id')).toBe(null);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":".camel modifier","suites":["Directive v-bind"],"line":134,"updatePoint":{"line":134,"column":21,"index":4277},"code":"  it('.camel modifier', () => {\n    const vm = new Vue({\n      template: '<svg :view-box.camel=\"viewBox\"></svg>',\n      data: {\n        viewBox: '0 0 1 1'\n      }\n    }).$mount();\n    expect(vm.$el.getAttribute('viewBox')).toBe('0 0 1 1');\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":".sync modifier","suites":["Directive v-bind"],"line":143,"updatePoint":{"line":143,"column":20,"index":4522},"code":"  it('.sync modifier', done => {\n    const vm = new Vue({\n      template: `<test :foo-bar.sync=\"bar\"/>`,\n      data: {\n        bar: 1\n      },\n      components: {\n        test: {\n          props: ['fooBar'],\n          template: `<div @click=\"$emit('update:fooBar', 2)\">{{ fooBar }}</div>`\n        }\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('1');\n    triggerEvent(vm.$el, 'click');\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('2');\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"bind object","suites":["Directive v-bind"],"line":162,"updatePoint":{"line":162,"column":17,"index":5015},"code":"  it('bind object', done => {\n    const vm = new Vue({\n      template: '<input v-bind=\"test\">',\n      data: {\n        test: {\n          id: 'test',\n          class: 'ok',\n          value: 'hello'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.getAttribute('id')).toBe('test');\n    expect(vm.$el.getAttribute('class')).toBe('ok');\n    expect(vm.$el.value).toBe('hello');\n    vm.test.id = 'hi';\n    vm.test.value = 'bye';\n    waitForUpdate(() => {\n      expect(vm.$el.getAttribute('id')).toBe('hi');\n      expect(vm.$el.getAttribute('class')).toBe('ok');\n      expect(vm.$el.value).toBe('bye');\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":".sync modifier with bind object","suites":["Directive v-bind"],"line":184,"updatePoint":{"line":184,"column":37,"index":5659},"code":"  it('.sync modifier with bind object', done => {\n    const vm = new Vue({\n      template: `<test v-bind.sync=\"test\"/>`,\n      data: {\n        test: {\n          fooBar: 1\n        }\n      },\n      components: {\n        test: {\n          props: ['fooBar'],\n          template: `<div @click=\"handleUpdate\">{{ fooBar }}</div>`,\n          methods: {\n            handleUpdate() {\n              this.$emit('update:fooBar', 2);\n            }\n\n          }\n        }\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('1');\n    triggerEvent(vm.$el, 'click');\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('2');\n      vm.test.fooBar = 3;\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('3');\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"bind object with overwrite","suites":["Directive v-bind"],"line":214,"updatePoint":{"line":214,"column":32,"index":6398},"code":"  it('bind object with overwrite', done => {\n    const vm = new Vue({\n      template: '<input v-bind=\"test\" id=\"foo\" :class=\"test.value\">',\n      data: {\n        test: {\n          id: 'test',\n          class: 'ok',\n          value: 'hello'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.getAttribute('id')).toBe('foo');\n    expect(vm.$el.getAttribute('class')).toBe('hello');\n    expect(vm.$el.value).toBe('hello');\n    vm.test.id = 'hi';\n    vm.test.value = 'bye';\n    waitForUpdate(() => {\n      expect(vm.$el.getAttribute('id')).toBe('foo');\n      expect(vm.$el.getAttribute('class')).toBe('bye');\n      expect(vm.$el.value).toBe('bye');\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"bind object with class/style","suites":["Directive v-bind"],"line":236,"updatePoint":{"line":236,"column":34,"index":7072},"code":"  it('bind object with class/style', done => {\n    const vm = new Vue({\n      template: '<input class=\"a\" style=\"color:red\" v-bind=\"test\">',\n      data: {\n        test: {\n          id: 'test',\n          class: ['b', 'c'],\n          style: {\n            fontSize: '12px'\n          }\n        }\n      }\n    }).$mount();\n    expect(vm.$el.id).toBe('test');\n    expect(vm.$el.className).toBe('a b c');\n    expect(vm.$el.style.color).toBe('red');\n    expect(vm.$el.style.fontSize).toBe('12px');\n    vm.test.id = 'hi';\n    vm.test.class = ['d'];\n    vm.test.style = {\n      fontSize: '14px'\n    };\n    waitForUpdate(() => {\n      expect(vm.$el.id).toBe('hi');\n      expect(vm.$el.className).toBe('a d');\n      expect(vm.$el.style.color).toBe('red');\n      expect(vm.$el.style.fontSize).toBe('14px');\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"bind object as prop","suites":["Directive v-bind"],"line":265,"updatePoint":{"line":265,"column":25,"index":7881},"code":"  it('bind object as prop', done => {\n    const vm = new Vue({\n      template: '<input v-bind.prop=\"test\">',\n      data: {\n        test: {\n          id: 'test',\n          className: 'ok',\n          value: 'hello'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.id).toBe('test');\n    expect(vm.$el.className).toBe('ok');\n    expect(vm.$el.value).toBe('hello');\n    vm.test.id = 'hi';\n    vm.test.className = 'okay';\n    vm.test.value = 'bye';\n    waitForUpdate(() => {\n      expect(vm.$el.id).toBe('hi');\n      expect(vm.$el.className).toBe('okay');\n      expect(vm.$el.value).toBe('bye');\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"bind array","suites":["Directive v-bind"],"line":288,"updatePoint":{"line":288,"column":16,"index":8491},"code":"  it('bind array', done => {\n    const vm = new Vue({\n      template: '<input v-bind=\"test\">',\n      data: {\n        test: [{\n          id: 'test',\n          class: 'ok'\n        }, {\n          value: 'hello'\n        }]\n      }\n    }).$mount();\n    expect(vm.$el.getAttribute('id')).toBe('test');\n    expect(vm.$el.getAttribute('class')).toBe('ok');\n    expect(vm.$el.value).toBe('hello');\n    vm.test[0].id = 'hi';\n    vm.test[1].value = 'bye';\n    waitForUpdate(() => {\n      expect(vm.$el.getAttribute('id')).toBe('hi');\n      expect(vm.$el.getAttribute('class')).toBe('ok');\n      expect(vm.$el.value).toBe('bye');\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"warn expect object","suites":["Directive v-bind"],"line":311,"updatePoint":{"line":311,"column":24,"index":9142},"code":"  it('warn expect object', () => {\n    new Vue({\n      template: '<input v-bind=\"test\">',\n      data: {\n        test: 1\n      }\n    }).$mount();\n    expect('v-bind without argument expects an Object or Array value').toHaveBeenWarned();\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"set value for option element","suites":["Directive v-bind"],"line":320,"updatePoint":{"line":320,"column":34,"index":9394},"code":"  it('set value for option element', () => {\n    const vm = new Vue({\n      template: '<select><option :value=\"val\">val</option></select>',\n      data: {\n        val: 'val'\n      }\n    }).$mount(); // check value attribute\n\n    expect(vm.$el.options[0].getAttribute('value')).toBe('val');\n  }); // a vdom patch edge case where the user has several un-keyed elements of the","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"properly update for toggling un-keyed children","suites":["Directive v-bind"],"line":332,"updatePoint":{"line":332,"column":52,"index":9839},"code":"  it('properly update for toggling un-keyed children', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <div v-if=\"ok\" id=\"a\" data-test=\"1\"></div>\n          <div v-if=\"!ok\" id=\"b\"></div>\n        </div>\n      `,\n      data: {\n        ok: true\n      }\n    }).$mount();\n    expect(vm.$el.children[0].id).toBe('a');\n    expect(vm.$el.children[0].getAttribute('data-test')).toBe('1');\n    vm.ok = false;\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].id).toBe('b');\n      expect(vm.$el.children[0].getAttribute('data-test')).toBe(null);\n    }).then(done);\n  });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"key","suites":["Directive v-bind","bind object with special attribute"],"line":369,"updatePoint":{"line":369,"column":11,"index":10793},"code":"    it('key', () => {\n      const vm = makeInstance({\n        attr: 'key',\n        value: 'test',\n        parentTemp: '<div v-bind=\"attrs\"></div>'\n      });\n      expect(vm._vnode.children[0].key).toBe('test');\n    });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"ref","suites":["Directive v-bind","bind object with special attribute"],"line":377,"updatePoint":{"line":377,"column":11,"index":11012},"code":"    it('ref', () => {\n      const vm = makeInstance({\n        attr: 'ref',\n        value: 'test',\n        parentTemp: '<div v-bind=\"attrs\"></div>'\n      });\n      expect(vm.$refs.test).toBe(vm.$el.firstChild);\n    });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"slot","suites":["Directive v-bind","bind object with special attribute"],"line":385,"updatePoint":{"line":385,"column":12,"index":11231},"code":"    it('slot', () => {\n      const vm = makeInstance({\n        attr: 'slot',\n        value: 'test',\n        parentTemp: '<comp><span v-bind=\"attrs\">123</span></comp>',\n        childTemp: '<div>slot:<slot name=\"test\"></slot></div>'\n      });\n      expect(vm.$el.innerHTML).toBe('<div>slot:<span>123</span></div>');\n    });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"is","suites":["Directive v-bind","bind object with special attribute"],"line":394,"updatePoint":{"line":394,"column":10,"index":11551},"code":"    it('is', () => {\n      const vm = makeInstance({\n        attr: 'is',\n        value: 'comp',\n        parentTemp: '<component v-bind=\"attrs\"></component>',\n        childTemp: '<div>comp</div>'\n      });\n      expect(vm.$el.innerHTML).toBe('<div>comp</div>');\n    });","file":"unit/features/directives/bind.spec.js","skipped":false,"dir":"test"},{"name":"plain string","suites":["Directive v-bind:class"],"line":30,"updatePoint":{"line":30,"column":18,"index":642},"code":"  it('plain string', done => {\n    assertClass([['bar', 'foo bar'], ['baz qux', 'foo baz qux'], ['qux', 'foo qux'], [undefined, 'foo']], done);\n  });","file":"unit/features/directives/class.spec.js","skipped":false,"dir":"test"},{"name":"object value","suites":["Directive v-bind:class"],"line":33,"updatePoint":{"line":33,"column":18,"index":792},"code":"  it('object value', done => {\n    assertClass([[{\n      bar: true,\n      baz: false\n    }, 'foo bar'], [{\n      baz: true\n    }, 'foo baz'], [null, 'foo'], [{\n      'bar baz': true,\n      qux: false\n    }, 'foo bar baz'], [{\n      qux: true\n    }, 'foo qux']], done);\n  });","file":"unit/features/directives/class.spec.js","skipped":false,"dir":"test"},{"name":"array value","suites":["Directive v-bind:class"],"line":46,"updatePoint":{"line":46,"column":17,"index":1066},"code":"  it('array value', done => {\n    assertClass([[['bar', 'baz'], 'foo bar baz'], [['qux', 'baz'], 'foo qux baz'], [['w', 'x y z'], 'foo w x y z'], [undefined, 'foo'], [['bar'], 'foo bar'], [val => val.push('baz'), 'foo bar baz']], done);\n  });","file":"unit/features/directives/class.spec.js","skipped":false,"dir":"test"},{"name":"array of mixed values","suites":["Directive v-bind:class"],"line":49,"updatePoint":{"line":49,"column":27,"index":1319},"code":"  it('array of mixed values', done => {\n    assertClass([[['x', {\n      y: true,\n      z: true\n    }], 'foo x y z'], [['x', {\n      y: true,\n      z: false\n    }], 'foo x y'], [['f', {\n      z: true\n    }], 'foo f z'], [['l', 'f', {\n      n: true,\n      z: true\n    }], 'foo l f n z'], [['x', {}], 'foo x'], [undefined, 'foo']], done);\n  });","file":"unit/features/directives/class.spec.js","skipped":false,"dir":"test"},{"name":"class merge between parent and child","suites":["Directive v-bind:class"],"line":63,"updatePoint":{"line":63,"column":42,"index":1676},"code":"  it('class merge between parent and child', done => {\n    const vm = new Vue({\n      template: '<child class=\"a\" :class=\"value\"></child>',\n      data: {\n        value: 'b'\n      },\n      components: {\n        child: {\n          template: '<div class=\"c\" :class=\"value\"></div>',\n          data: () => ({\n            value: 'd'\n          })\n        }\n      }\n    }).$mount();\n    const child = vm.$children[0];\n    expect(vm.$el.className).toBe('c a d b');\n    vm.value = 'e';\n    waitForUpdate(() => {\n      expect(vm.$el.className).toBe('c a d e');\n    }).then(() => {\n      child.value = 'f';\n    }).then(() => {\n      expect(vm.$el.className).toBe('c a f e');\n    }).then(() => {\n      vm.value = {\n        foo: true\n      };\n      child.value = ['bar', 'baz'];\n    }).then(() => {\n      expect(vm.$el.className).toBe('c a bar baz foo');\n    }).then(done);\n  });","file":"unit/features/directives/class.spec.js","skipped":false,"dir":"test"},{"name":"class merge between multiple nested components sharing same element","suites":["Directive v-bind:class"],"line":96,"updatePoint":{"line":96,"column":73,"index":2573},"code":"  it('class merge between multiple nested components sharing same element', done => {\n    const vm = new Vue({\n      template: `\n        <component1 :class=\"componentClass1\">\n          <component2 :class=\"componentClass2\">\n            <component3 :class=\"componentClass3\">\n              some text\n            </component3>\n          </component2>\n        </component1>\n      `,\n      data: {\n        componentClass1: 'componentClass1',\n        componentClass2: 'componentClass2',\n        componentClass3: 'componentClass3'\n      },\n      components: {\n        component1: {\n          render() {\n            return this.$slots.default[0];\n          }\n\n        },\n        component2: {\n          render() {\n            return this.$slots.default[0];\n          }\n\n        },\n        component3: {\n          template: '<div class=\"staticClass\"><slot></slot></div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.className).toBe('staticClass componentClass3 componentClass2 componentClass1');\n    vm.componentClass1 = 'c1';\n    waitForUpdate(() => {\n      expect(vm.$el.className).toBe('staticClass componentClass3 componentClass2 c1');\n      vm.componentClass2 = 'c2';\n    }).then(() => {\n      expect(vm.$el.className).toBe('staticClass componentClass3 c2 c1');\n      vm.componentClass3 = 'c3';\n    }).then(() => {\n      expect(vm.$el.className).toBe('staticClass c3 c2 c1');\n    }).then(done);\n  });","file":"unit/features/directives/class.spec.js","skipped":false,"dir":"test"},{"name":"deep update","suites":["Directive v-bind:class"],"line":142,"updatePoint":{"line":142,"column":17,"index":3921},"code":"  it('deep update', done => {\n    const vm = new Vue({\n      template: '<div :class=\"test\"></div>',\n      data: {\n        test: {\n          a: true,\n          b: false\n        }\n      }\n    }).$mount();\n    expect(vm.$el.className).toBe('a');\n    vm.test.b = true;\n    waitForUpdate(() => {\n      expect(vm.$el.className).toBe('a b');\n    }).then(done);\n  }); // a vdom patch edge case where the user has several un-keyed elements of the","file":"unit/features/directives/class.spec.js","skipped":false,"dir":"test"},{"name":"properly remove staticClass for toggling un-keyed children","suites":["Directive v-bind:class"],"line":160,"updatePoint":{"line":160,"column":64,"index":4460},"code":"  it('properly remove staticClass for toggling un-keyed children', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <div v-if=\"ok\" class=\"a\"></div>\n          <div v-if=\"!ok\"></div>\n        </div>\n      `,\n      data: {\n        ok: true\n      }\n    }).$mount();\n    expect(vm.$el.children[0].className).toBe('a');\n    vm.ok = false;\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].className).toBe('');\n    }).then(done);\n  });","file":"unit/features/directives/class.spec.js","skipped":false,"dir":"test"},{"name":"should be removed after compile","suites":["Directive v-cloak"],"line":3,"updatePoint":{"line":3,"column":37,"index":99},"code":"  it('should be removed after compile', () => {\n    const el = document.createElement('div');\n    el.setAttribute('v-cloak', '');\n    const vm = new Vue({\n      el\n    });\n    expect(vm.$el.hasAttribute('v-cloak')).toBe(false);\n  });","file":"unit/features/directives/cloak.spec.js","skipped":false,"dir":"test"},{"name":"should render array of primitive values","suites":["Directive v-for"],"line":3,"updatePoint":{"line":3,"column":45,"index":105},"code":"  it('should render array of primitive values', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-for=\"item in list\">{{item}}</span>\n        </div>\n      `,\n      data: {\n        list: ['a', 'b', 'c']\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>a</span><span>b</span><span>c</span>');\n    Vue.set(vm.list, 0, 'd');\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>d</span><span>b</span><span>c</span>');\n      vm.list.push('d');\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>d</span><span>b</span><span>c</span><span>d</span>');\n      vm.list.splice(1, 2);\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>d</span><span>d</span>');\n      vm.list = ['x', 'y'];\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>x</span><span>y</span>');\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"should render array of primitive values with index","suites":["Directive v-for"],"line":29,"updatePoint":{"line":29,"column":56,"index":998},"code":"  it('should render array of primitive values with index', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-for=\"(item, i) in list\">{{i}}-{{item}}</span>\n        </div>\n      `,\n      data: {\n        list: ['a', 'b', 'c']\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>0-a</span><span>1-b</span><span>2-c</span>');\n    Vue.set(vm.list, 0, 'd');\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>0-d</span><span>1-b</span><span>2-c</span>');\n      vm.list.push('d');\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>0-d</span><span>1-b</span><span>2-c</span><span>3-d</span>');\n      vm.list.splice(1, 2);\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>0-d</span><span>1-d</span>');\n      vm.list = ['x', 'y'];\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>0-x</span><span>1-y</span>');\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"should render array of object values","suites":["Directive v-for"],"line":55,"updatePoint":{"line":55,"column":42,"index":1916},"code":"  it('should render array of object values', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-for=\"item in list\">{{item.value}}</span>\n        </div>\n      `,\n      data: {\n        list: [{\n          value: 'a'\n        }, {\n          value: 'b'\n        }, {\n          value: 'c'\n        }]\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>a</span><span>b</span><span>c</span>');\n    Vue.set(vm.list, 0, {\n      value: 'd'\n    });\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>d</span><span>b</span><span>c</span>');\n      vm.list[0].value = 'e';\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>e</span><span>b</span><span>c</span>');\n      vm.list.push({});\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>e</span><span>b</span><span>c</span><span></span>');\n      vm.list.splice(1, 2);\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>e</span><span></span>');\n      vm.list = [{\n        value: 'x'\n      }, {\n        value: 'y'\n      }];\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>x</span><span>y</span>');\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"should render array of object values with index","suites":["Directive v-for"],"line":96,"updatePoint":{"line":96,"column":53,"index":3100},"code":"  it('should render array of object values with index', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-for=\"(item, i) in list\">{{i}}-{{item.value}}</span>\n        </div>\n      `,\n      data: {\n        list: [{\n          value: 'a'\n        }, {\n          value: 'b'\n        }, {\n          value: 'c'\n        }]\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>0-a</span><span>1-b</span><span>2-c</span>');\n    Vue.set(vm.list, 0, {\n      value: 'd'\n    });\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>0-d</span><span>1-b</span><span>2-c</span>');\n      vm.list[0].value = 'e';\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>0-e</span><span>1-b</span><span>2-c</span>');\n      vm.list.push({});\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>0-e</span><span>1-b</span><span>2-c</span><span>3-</span>');\n      vm.list.splice(1, 2);\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>0-e</span><span>1-</span>');\n      vm.list = [{\n        value: 'x'\n      }, {\n        value: 'y'\n      }];\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>0-x</span><span>1-y</span>');\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"should render an Object","suites":["Directive v-for"],"line":137,"updatePoint":{"line":137,"column":29,"index":4305},"code":"  it('should render an Object', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-for=\"val in obj\">{{val}}</span>\n        </div>\n      `,\n      data: {\n        obj: {\n          a: 0,\n          b: 1,\n          c: 2\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>0</span><span>1</span><span>2</span>');\n    vm.obj.a = 3;\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>3</span><span>1</span><span>2</span>');\n      Vue.set(vm.obj, 'd', 4);\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>3</span><span>1</span><span>2</span><span>4</span>');\n      Vue.delete(vm.obj, 'a');\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>1</span><span>2</span><span>4</span>');\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"should render an Object with key","suites":["Directive v-for"],"line":164,"updatePoint":{"line":164,"column":38,"index":5113},"code":"  it('should render an Object with key', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-for=\"(val, key) in obj\">{{val}}-{{key}}</span>\n        </div>\n      `,\n      data: {\n        obj: {\n          a: 0,\n          b: 1,\n          c: 2\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>0-a</span><span>1-b</span><span>2-c</span>');\n    vm.obj.a = 3;\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>3-a</span><span>1-b</span><span>2-c</span>');\n      Vue.set(vm.obj, 'd', 4);\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>3-a</span><span>1-b</span><span>2-c</span><span>4-d</span>');\n      Vue.delete(vm.obj, 'a');\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>1-b</span><span>2-c</span><span>4-d</span>');\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"should render an Object with key and index","suites":["Directive v-for"],"line":191,"updatePoint":{"line":191,"column":48,"index":5972},"code":"  it('should render an Object with key and index', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-for=\"(val, key, i) in obj\">{{val}}-{{key}}-{{i}}</span>\n        </div>\n      `,\n      data: {\n        obj: {\n          a: 0,\n          b: 1,\n          c: 2\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>0-a-0</span><span>1-b-1</span><span>2-c-2</span>');\n    vm.obj.a = 3;\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>3-a-0</span><span>1-b-1</span><span>2-c-2</span>');\n      Vue.set(vm.obj, 'd', 4);\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>3-a-0</span><span>1-b-1</span><span>2-c-2</span><span>4-d-3</span>');\n      Vue.delete(vm.obj, 'a');\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>1-b-0</span><span>2-c-1</span><span>4-d-2</span>');\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"should render each key of data","suites":["Directive v-for"],"line":218,"updatePoint":{"line":218,"column":36,"index":6854},"code":"  it('should render each key of data', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-for=\"(val, key) in $data\">{{val}}-{{key}}</span>\n        </div>\n      `,\n      data: {\n        a: 0,\n        b: 1,\n        c: 2\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>0-a</span><span>1-b</span><span>2-c</span>');\n    vm.a = 3;\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>3-a</span><span>1-b</span><span>2-c</span>');\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"check priorities: v-if before v-for","suites":["Directive v-for"],"line":237,"updatePoint":{"line":237,"column":41,"index":7377},"code":"  it('check priorities: v-if before v-for', function () {\n    const vm = new Vue({\n      data: {\n        items: [1, 2, 3]\n      },\n      template: '<div><div v-if=\"item < 3\" v-for=\"item in items\">{{item}}</div></div>'\n    }).$mount();\n    expect(vm.$el.textContent).toBe('12');\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"check priorities: v-if after v-for","suites":["Directive v-for"],"line":246,"updatePoint":{"line":246,"column":40,"index":7660},"code":"  it('check priorities: v-if after v-for', function () {\n    const vm = new Vue({\n      data: {\n        items: [1, 2, 3]\n      },\n      template: '<div><div v-for=\"item in items\" v-if=\"item < 3\">{{item}}</div></div>'\n    }).$mount();\n    expect(vm.$el.textContent).toBe('12');\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"range v-for","suites":["Directive v-for"],"line":255,"updatePoint":{"line":255,"column":17,"index":7920},"code":"  it('range v-for', () => {\n    const vm = new Vue({\n      template: '<div><div v-for=\"n in 3\">{{n}}</div></div>'\n    }).$mount();\n    expect(vm.$el.textContent).toBe('123');\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"without key","suites":["Directive v-for"],"line":261,"updatePoint":{"line":261,"column":17,"index":8101},"code":"  it('without key', done => {\n    const vm = new Vue({\n      data: {\n        items: [{\n          id: 1,\n          msg: 'a'\n        }, {\n          id: 2,\n          msg: 'b'\n        }, {\n          id: 3,\n          msg: 'c'\n        }]\n      },\n      template: '<div><div v-for=\"item in items\">{{ item.msg }}</div></div>'\n    }).$mount();\n    expect(vm.$el.textContent).toBe('abc');\n    const first = vm.$el.children[0];\n    vm.items.reverse();\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('cba'); // assert reusing DOM element in place\n\n      expect(vm.$el.children[0]).toBe(first);\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"with key","suites":["Directive v-for"],"line":286,"updatePoint":{"line":286,"column":14,"index":8722},"code":"  it('with key', done => {\n    const vm = new Vue({\n      data: {\n        items: [{\n          id: 1,\n          msg: 'a'\n        }, {\n          id: 2,\n          msg: 'b'\n        }, {\n          id: 3,\n          msg: 'c'\n        }]\n      },\n      template: '<div><div v-for=\"item in items\" :key=\"item.id\">{{ item.msg }}</div></div>'\n    }).$mount();\n    expect(vm.$el.textContent).toBe('abc');\n    const first = vm.$el.children[0];\n    vm.items.reverse();\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('cba'); // assert moving DOM element\n\n      expect(vm.$el.children[0]).not.toBe(first);\n      expect(vm.$el.children[2]).toBe(first);\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"nested loops","suites":["Directive v-for"],"line":312,"updatePoint":{"line":312,"column":18,"index":9402},"code":"  it('nested loops', () => {\n    const vm = new Vue({\n      data: {\n        items: [{\n          items: [{\n            a: 1\n          }, {\n            a: 2\n          }],\n          a: 1\n        }, {\n          items: [{\n            a: 3\n          }, {\n            a: 4\n          }],\n          a: 2\n        }]\n      },\n      template: '<div>' + '<div v-for=\"(item, i) in items\">' + '<p v-for=\"(subItem, j) in item.items\">{{j}} {{subItem.a}} {{i}} {{item.a}}</p>' + '</div>' + '</div>'\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<div><p>0 1 0 1</p><p>1 2 0 1</p></div>' + '<div><p>0 3 1 2</p><p>1 4 1 2</p></div>');\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"template v-for","suites":["Directive v-for"],"line":335,"updatePoint":{"line":335,"column":20,"index":10030},"code":"  it('template v-for', done => {\n    const vm = new Vue({\n      data: {\n        list: [{\n          a: 1\n        }, {\n          a: 2\n        }, {\n          a: 3\n        }]\n      },\n      template: '<div>' + '<template v-for=\"item in list\">' + '<p>{{item.a}}</p>' + '<p>{{item.a + 1}}</p>' + '</template>' + '</div>'\n    }).$mount();\n    assertMarkup();\n    vm.list.reverse();\n    waitForUpdate(() => {\n      assertMarkup();\n      vm.list.splice(1, 1);\n    }).then(() => {\n      assertMarkup();\n      vm.list.splice(1, 0, {\n        a: 2\n      });\n    }).then(done);\n\n    function assertMarkup() {\n      var markup = vm.list.map(function (item) {\n        return '<p>' + item.a + '</p><p>' + (item.a + 1) + '</p>';\n      }).join('');\n      expect(vm.$el.innerHTML).toBe(markup);\n    }\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"component v-for","suites":["Directive v-for"],"line":367,"updatePoint":{"line":367,"column":21,"index":10818},"code":"  it('component v-for', done => {\n    const vm = new Vue({\n      data: {\n        list: [{\n          a: 1\n        }, {\n          a: 2\n        }, {\n          a: 3\n        }]\n      },\n      template: '<div>' + '<test v-for=\"item in list\" :msg=\"item.a\" :key=\"item.a\">' + '<span>{{item.a}}</span>' + '</test>' + '</div>',\n      components: {\n        test: {\n          props: ['msg'],\n          template: '<p>{{msg}}<slot></slot></p>'\n        }\n      }\n    }).$mount();\n    assertMarkup();\n    vm.list.reverse();\n    waitForUpdate(() => {\n      assertMarkup();\n      vm.list.splice(1, 1);\n    }).then(() => {\n      assertMarkup();\n      vm.list.splice(1, 0, {\n        a: 2\n      });\n    }).then(done);\n\n    function assertMarkup() {\n      var markup = vm.list.map(function (item) {\n        return `<p>${item.a}<span>${item.a}</span></p>`;\n      }).join('');\n      expect(vm.$el.innerHTML).toBe(markup);\n    }\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"dynamic component v-for","suites":["Directive v-for"],"line":405,"updatePoint":{"line":405,"column":29,"index":11735},"code":"  it('dynamic component v-for', done => {\n    const vm = new Vue({\n      data: {\n        list: [{\n          type: 'one'\n        }, {\n          type: 'two'\n        }]\n      },\n      template: '<div>' + '<component v-for=\"item in list\" :key=\"item.type\" :is=\"item.type\"></component>' + '</div>',\n      components: {\n        one: {\n          template: '<p>One!</p>'\n        },\n        two: {\n          template: '<div>Two!</div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toContain('<p>One!</p><div>Two!</div>');\n    vm.list.reverse();\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toContain('<div>Two!</div><p>One!</p>');\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"should warn component v-for without keys","suites":["Directive v-for"],"line":430,"updatePoint":{"line":430,"column":46,"index":12429},"code":"  it('should warn component v-for without keys', () => {\n    const warn = console.warn;\n    console.warn = jasmine.createSpy();\n    new Vue({\n      template: `<div><test v-for=\"i in 3\"></test></div>`,\n      components: {\n        test: {\n          render() {}\n\n        }\n      }\n    }).$mount();\n    expect(console.warn.calls.argsFor(0)[0]).toContain(`<test v-for=\"i in 3\">: component lists rendered with v-for should have explicit keys`);\n    console.warn = warn;\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"multi nested array reactivity","suites":["Directive v-for"],"line":445,"updatePoint":{"line":445,"column":35,"index":12888},"code":"  it('multi nested array reactivity', done => {\n    const vm = new Vue({\n      data: {\n        list: [[['foo']]]\n      },\n      template: `\n        <div>\n          <div v-for=\"i in list\">\n            <div v-for=\"j in i\">\n              <div v-for=\"k in j\">\n                {{ k }}\n              </div>\n            </div>\n          </div>\n        </div>\n      `\n    }).$mount();\n    expect(vm.$el.textContent).toMatch(/\\s+foo\\s+/);\n    vm.list[0][0].push('bar');\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toMatch(/\\s+foo\\s+bar\\s+/);\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"strings","suites":["Directive v-for"],"line":468,"updatePoint":{"line":468,"column":13,"index":13439},"code":"  it('strings', done => {\n    const vm = new Vue({\n      data: {\n        text: 'foo'\n      },\n      template: `\n        <div>\n          <span v-for=\"letter in text\">{{ letter }}.</span>\n        </div>\n      `\n    }).$mount();\n    expect(vm.$el.textContent).toMatch('f.o.o.');\n    vm.text += 'bar';\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toMatch('f.o.o.b.a.r.');\n    }).then(done);\n  });","file":"unit/features/directives/for.spec.js","skipped":false,"dir":"test"},{"name":"should render html","suites":["Directive v-html"],"line":3,"updatePoint":{"line":3,"column":24,"index":85},"code":"  it('should render html', () => {\n    const vm = new Vue({\n      template: '<div v-html=\"a\"></div>',\n      data: {\n        a: 'hello'\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('hello');\n  });","file":"unit/features/directives/html.spec.js","skipped":false,"dir":"test"},{"name":"should encode html entities","suites":["Directive v-html"],"line":12,"updatePoint":{"line":12,"column":33,"index":304},"code":"  it('should encode html entities', () => {\n    const vm = new Vue({\n      template: '<div v-html=\"a\"></div>',\n      data: {\n        a: '<span>&lt;</span>'\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>&lt;</span>');\n  });","file":"unit/features/directives/html.spec.js","skipped":false,"dir":"test"},{"name":"should work inline","suites":["Directive v-html"],"line":21,"updatePoint":{"line":21,"column":24,"index":538},"code":"  it('should work inline', () => {\n    const vm = new Vue({\n      template: `<div v-html=\"'<span>&lt;</span>'\"></div>`\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>&lt;</span>');\n  });","file":"unit/features/directives/html.spec.js","skipped":false,"dir":"test"},{"name":"should work inline in DOM","suites":["Directive v-html"],"line":27,"updatePoint":{"line":27,"column":31,"index":743},"code":"  it('should work inline in DOM', () => {\n    const el = document.createElement('div');\n    el.innerHTML = `<div v-html=\"'<span>&lt;</span>'\"></div>`;\n    const vm = new Vue({\n      el\n    });\n    expect(vm.$el.children[0].innerHTML).toBe('<span>&lt;</span>');\n  });","file":"unit/features/directives/html.spec.js","skipped":false,"dir":"test"},{"name":"should support all value types","suites":["Directive v-html"],"line":35,"updatePoint":{"line":35,"column":36,"index":1015},"code":"  it('should support all value types', done => {\n    const vm = new Vue({\n      template: '<div v-html=\"a\"></div>',\n      data: {\n        a: false\n      }\n    }).$mount();\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('false');\n      vm.a = [];\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('[]');\n      vm.a = {};\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('{}');\n      vm.a = 123;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('123');\n      vm.a = 0;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('0');\n      vm.a = ' ';\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe(' ');\n      vm.a = '    ';\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('    ');\n      vm.a = null;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('');\n      vm.a = undefined;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('');\n    }).then(done);\n  });","file":"unit/features/directives/html.spec.js","skipped":false,"dir":"test"},{"name":"should check if value is truthy","suites":["Directive v-if"],"line":3,"updatePoint":{"line":3,"column":37,"index":96},"code":"  it('should check if value is truthy', () => {\n    const vm = new Vue({\n      template: '<div><span v-if=\"foo\">hello</span></div>',\n      data: {\n        foo: true\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>hello</span>');\n  });","file":"unit/features/directives/if.spec.js","skipped":false,"dir":"test"},{"name":"should check if value is falsy","suites":["Directive v-if"],"line":12,"updatePoint":{"line":12,"column":36,"index":348},"code":"  it('should check if value is falsy', () => {\n    const vm = new Vue({\n      template: '<div><span v-if=\"foo\">hello</span></div>',\n      data: {\n        foo: false\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<!---->');\n  });","file":"unit/features/directives/if.spec.js","skipped":false,"dir":"test"},{"name":"should update if value changed","suites":["Directive v-if"],"line":21,"updatePoint":{"line":21,"column":36,"index":590},"code":"  it('should update if value changed', done => {\n    const vm = new Vue({\n      template: '<div><span v-if=\"foo\">hello</span></div>',\n      data: {\n        foo: true\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>hello</span>');\n    vm.foo = false;\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<!---->');\n      vm.foo = {};\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>hello</span>');\n      vm.foo = 0;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<!---->');\n      vm.foo = [];\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>hello</span>');\n      vm.foo = null;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<!---->');\n      vm.foo = '0';\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>hello</span>');\n      vm.foo = undefined;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<!---->');\n      vm.foo = 1;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>hello</span>');\n    }).then(done);\n  });","file":"unit/features/directives/if.spec.js","skipped":false,"dir":"test"},{"name":"should work well with v-else","suites":["Directive v-if"],"line":55,"updatePoint":{"line":55,"column":34,"index":1616},"code":"  it('should work well with v-else', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-if=\"foo\">hello</span>\n          <span v-else>bye</span>\n        </div>\n      `,\n      data: {\n        foo: true\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');\n    vm.foo = false;\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');\n      vm.foo = {};\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');\n      vm.foo = 0;\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');\n      vm.foo = [];\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');\n      vm.foo = null;\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');\n      vm.foo = '0';\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');\n      vm.foo = undefined;\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');\n      vm.foo = 1;\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');\n    }).then(done);\n  });","file":"unit/features/directives/if.spec.js","skipped":false,"dir":"test"},{"name":"should work well with v-else-if","suites":["Directive v-if"],"line":94,"updatePoint":{"line":94,"column":37,"index":2814},"code":"  it('should work well with v-else-if', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-if=\"foo\">hello</span>\n          <span v-else-if=\"bar\">elseif</span>\n          <span v-else>bye</span>\n        </div>\n      `,\n      data: {\n        foo: true,\n        bar: false\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');\n    vm.foo = false;\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');\n      vm.bar = true;\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>');\n      vm.bar = false;\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');\n      vm.foo = true;\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>');\n      vm.foo = false;\n      vm.bar = {};\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>');\n      vm.bar = 0;\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');\n      vm.bar = [];\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>');\n      vm.bar = null;\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');\n      vm.bar = '0';\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>');\n      vm.bar = undefined;\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>');\n      vm.bar = 1;\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>');\n    }).then(done);\n  });","file":"unit/features/directives/if.spec.js","skipped":false,"dir":"test"},{"name":"should work well with v-for","suites":["Directive v-if"],"line":145,"updatePoint":{"line":145,"column":33,"index":4421},"code":"  it('should work well with v-for', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-for=\"(item, i) in list\" v-if=\"item.value\">{{i}}</span>\n        </div>\n      `,\n      data: {\n        list: [{\n          value: true\n        }, {\n          value: false\n        }, {\n          value: true\n        }]\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>0</span><!----><span>2</span>');\n    vm.list[0].value = false;\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<!----><!----><span>2</span>');\n      vm.list.push({\n        value: true\n      });\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<!----><!----><span>2</span><span>3</span>');\n      vm.list.splice(1, 2);\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<!----><span>1</span>');\n    }).then(done);\n  });","file":"unit/features/directives/if.spec.js","skipped":false,"dir":"test"},{"name":"should work well with v-for and v-else","suites":["Directive v-if"],"line":176,"updatePoint":{"line":176,"column":44,"index":5280},"code":"  it('should work well with v-for and v-else', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-for=\"(item, i) in list\" v-if=\"item.value\">hello</span>\n          <span v-else>bye</span>\n        </div>\n      `,\n      data: {\n        list: [{\n          value: true\n        }, {\n          value: false\n        }, {\n          value: true\n        }]\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span><span>bye</span><span>hello</span>');\n    vm.list[0].value = false;\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span><span>bye</span><span>hello</span>');\n      vm.list.push({\n        value: true\n      });\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span><span>bye</span><span>hello</span><span>hello</span>');\n      vm.list.splice(1, 2);\n    }).then(() => {\n      expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span><span>hello</span>');\n    }).then(done);\n  });","file":"unit/features/directives/if.spec.js","skipped":false,"dir":"test"},{"name":"should work with v-for on v-else branch","suites":["Directive v-if"],"line":208,"updatePoint":{"line":208,"column":45,"index":6280},"code":"  it('should work with v-for on v-else branch', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-if=\"false\">hello</span>\n          <span v-else v-for=\"item in list\">{{ item }}</span>\n        </div>\n      `,\n      data: {\n        list: [1, 2, 3]\n      }\n    }).$mount();\n    expect(vm.$el.textContent.trim()).toBe('123');\n    vm.list.reverse();\n    waitForUpdate(() => {\n      expect(vm.$el.textContent.trim()).toBe('321');\n    }).then(done);\n  });","file":"unit/features/directives/if.spec.js","skipped":false,"dir":"test"},{"name":"should work properly on component root","suites":["Directive v-if"],"line":226,"updatePoint":{"line":226,"column":44,"index":6763},"code":"  it('should work properly on component root', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <test class=\"test\"></test>\n        </div>\n      `,\n      components: {\n        test: {\n          data() {\n            return {\n              ok: true\n            };\n          },\n\n          template: '<div v-if=\"ok\" id=\"ok\" class=\"inner\">test</div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.children[0].id).toBe('ok');\n    expect(vm.$el.children[0].className).toBe('inner test');\n    vm.$children[0].ok = false;\n    waitForUpdate(() => {\n      // attrs / class modules should not attempt to patch the comment node\n      expect(vm.$el.innerHTML).toBe('<!---->');\n      vm.$children[0].ok = true;\n    }).then(() => {\n      expect(vm.$el.children[0].id).toBe('ok');\n      expect(vm.$el.children[0].className).toBe('inner test');\n    }).then(done);\n  });","file":"unit/features/directives/if.spec.js","skipped":false,"dir":"test"},{"name":"should maintain stable list to avoid unnecessary patches","suites":["Directive v-if"],"line":257,"updatePoint":{"line":257,"column":62,"index":7667},"code":"  it('should maintain stable list to avoid unnecessary patches', done => {\n    const created = jasmine.createSpy();\n    const destroyed = jasmine.createSpy();\n    const vm = new Vue({\n      data: {\n        ok: true\n      },\n      // when the first div is toggled, the second div should be reused\n      // instead of re-created/destroyed\n      template: `\n        <div>\n          <div v-if=\"ok\"></div>\n          <div><test></test></div>\n        </div>\n      `,\n      components: {\n        test: {\n          template: '<div></div>',\n          created,\n          destroyed\n        }\n      }\n    }).$mount();\n    expect(created.calls.count()).toBe(1);\n    vm.ok = false;\n    waitForUpdate(() => {\n      expect(created.calls.count()).toBe(1);\n      expect(destroyed).not.toHaveBeenCalled();\n    }).then(done);\n  });","file":"unit/features/directives/if.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Directive v-model checkbox"],"line":3,"updatePoint":{"line":3,"column":17,"index":88},"code":"  it('should work', done => {\n    const vm = new Vue({\n      data: {\n        test: true\n      },\n      template: '<input type=\"checkbox\" v-model=\"test\">'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.checked).toBe(true);\n    vm.test = false;\n    waitForUpdate(function () {\n      expect(vm.$el.checked).toBe(false);\n      expect(vm.test).toBe(false);\n      vm.$el.click();\n      expect(vm.$el.checked).toBe(true);\n      expect(vm.test).toBe(true);\n    }).then(() => {\n      document.body.removeChild(vm.$el);\n    }).then(done);\n  });","file":"unit/features/directives/model-checkbox.spec.js","skipped":false,"dir":"test"},{"name":"should respect value bindings","suites":["Directive v-model checkbox"],"line":23,"updatePoint":{"line":23,"column":35,"index":668},"code":"  it('should respect value bindings', done => {\n    const vm = new Vue({\n      data: {\n        test: 1,\n        a: 1,\n        b: 2\n      },\n      template: '<input type=\"checkbox\" v-model=\"test\" :true-value=\"a\" :false-value=\"b\">'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.checked).toBe(true);\n    vm.$el.click();\n    expect(vm.$el.checked).toBe(false);\n    expect(vm.test).toBe(2);\n    vm.$el.click();\n    expect(vm.$el.checked).toBe(true);\n    expect(vm.test).toBe(1);\n    vm.test = 2;\n    waitForUpdate(() => {\n      expect(vm.$el.checked).toBe(false);\n      vm.test = 1;\n    }).then(() => {\n      expect(vm.$el.checked).toBe(true);\n      document.body.removeChild(vm.$el);\n    }).then(done);\n  });","file":"unit/features/directives/model-checkbox.spec.js","skipped":false,"dir":"test"},{"name":"bind to Array value","suites":["Directive v-model checkbox"],"line":49,"updatePoint":{"line":49,"column":25,"index":1391},"code":"  it('bind to Array value', done => {\n    const vm = new Vue({\n      data: {\n        test: ['1']\n      },\n      template: `\n        <div>\n          <input type=\"checkbox\" v-model=\"test\" value=\"1\">\n          <input type=\"checkbox\" v-model=\"test\" value=\"2\">\n        </div>\n      `\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.children[0].checked).toBe(true);\n    expect(vm.$el.children[1].checked).toBe(false);\n    vm.$el.children[0].click();\n    expect(vm.test.length).toBe(0);\n    vm.$el.children[1].click();\n    expect(vm.test).toEqual(['2']);\n    vm.$el.children[0].click();\n    expect(vm.test).toEqual(['2', '1']);\n    vm.test = ['1'];\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].checked).toBe(true);\n      expect(vm.$el.children[1].checked).toBe(false);\n    }).then(done);\n  });","file":"unit/features/directives/model-checkbox.spec.js","skipped":false,"dir":"test"},{"name":"bind to Array value with value bindings","suites":["Directive v-model checkbox"],"line":76,"updatePoint":{"line":76,"column":45,"index":2237},"code":"  it('bind to Array value with value bindings', done => {\n    const vm = new Vue({\n      data: {\n        test: [1]\n      },\n      template: `\n        <div>\n          <input type=\"checkbox\" v-model=\"test\" :value=\"1\">\n          <input type=\"checkbox\" v-model=\"test\" :value=\"2\">\n        </div>\n      `\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.children[0].checked).toBe(true);\n    expect(vm.$el.children[1].checked).toBe(false);\n    vm.$el.children[0].click();\n    expect(vm.test.length).toBe(0);\n    vm.$el.children[1].click();\n    expect(vm.test).toEqual([2]);\n    vm.$el.children[0].click();\n    expect(vm.test).toEqual([2, 1]);\n    vm.test = [1];\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].checked).toBe(true);\n      expect(vm.$el.children[1].checked).toBe(false);\n    }).then(done);\n  });","file":"unit/features/directives/model-checkbox.spec.js","skipped":false,"dir":"test"},{"name":"bind to Array value with value bindings (object loose equal)","suites":["Directive v-model checkbox"],"line":103,"updatePoint":{"line":103,"column":66,"index":3096},"code":"  it('bind to Array value with value bindings (object loose equal)', done => {\n    const vm = new Vue({\n      data: {\n        test: [{\n          a: 1\n        }]\n      },\n      template: `\n        <div>\n          <input type=\"checkbox\" v-model=\"test\" :value=\"{ a: 1 }\">\n          <input type=\"checkbox\" v-model=\"test\" :value=\"{ a: 2 }\">\n        </div>\n      `\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.children[0].checked).toBe(true);\n    expect(vm.$el.children[1].checked).toBe(false);\n    vm.$el.children[0].click();\n    expect(vm.test.length).toBe(0);\n    vm.$el.children[1].click();\n    expect(vm.test).toEqual([{\n      a: 2\n    }]);\n    vm.$el.children[0].click();\n    expect(vm.test).toEqual([{\n      a: 2\n    }, {\n      a: 1\n    }]);\n    vm.test = [{\n      a: 1\n    }];\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].checked).toBe(true);\n      expect(vm.$el.children[1].checked).toBe(false);\n    }).then(done);\n  });","file":"unit/features/directives/model-checkbox.spec.js","skipped":false,"dir":"test"},{"name":".number modifier","suites":["Directive v-model checkbox"],"line":140,"updatePoint":{"line":140,"column":22,"index":4018},"code":"  it('.number modifier', () => {\n    const vm = new Vue({\n      data: {\n        test: [],\n        check: true\n      },\n      template: `\n        <div>\n          <input type=\"checkbox\" v-model.number=\"test\" value=\"1\">\n          <input type=\"checkbox\" v-model=\"test\" value=\"2\">\n          <input type=\"checkbox\" v-model.number=\"check\">\n        </div>\n      `\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    const checkboxInputs = vm.$el.getElementsByTagName('input');\n    expect(checkboxInputs[0].checked).toBe(false);\n    expect(checkboxInputs[1].checked).toBe(false);\n    expect(checkboxInputs[2].checked).toBe(true);\n    checkboxInputs[0].click();\n    checkboxInputs[1].click();\n    checkboxInputs[2].click();\n    expect(vm.test).toEqual([1, '2']);\n    expect(vm.check).toEqual(false);\n  });","file":"unit/features/directives/model-checkbox.spec.js","skipped":false,"dir":"test"},{"name":"should respect different primitive type value","suites":["Directive v-model checkbox"],"line":165,"updatePoint":{"line":165,"column":51,"index":4851},"code":"  it('should respect different primitive type value', done => {\n    const vm = new Vue({\n      data: {\n        test: [0]\n      },\n      template: '<div>' + '<input type=\"checkbox\" value=\"\" v-model=\"test\">' + '<input type=\"checkbox\" value=\"0\" v-model=\"test\">' + '<input type=\"checkbox\" value=\"1\" v-model=\"test\">' + '<input type=\"checkbox\" value=\"false\" v-model=\"test\">' + '<input type=\"checkbox\" value=\"true\" v-model=\"test\">' + '</div>'\n    }).$mount();\n    const checkboxInput = vm.$el.children;\n    expect(checkboxInput[0].checked).toBe(false);\n    expect(checkboxInput[1].checked).toBe(true);\n    expect(checkboxInput[2].checked).toBe(false);\n    expect(checkboxInput[3].checked).toBe(false);\n    expect(checkboxInput[4].checked).toBe(false);\n    vm.test = [1];\n    waitForUpdate(() => {\n      expect(checkboxInput[0].checked).toBe(false);\n      expect(checkboxInput[1].checked).toBe(false);\n      expect(checkboxInput[2].checked).toBe(true);\n      expect(checkboxInput[3].checked).toBe(false);\n      expect(checkboxInput[4].checked).toBe(false);\n      vm.test = [''];\n    }).then(() => {\n      expect(checkboxInput[0].checked).toBe(true);\n      expect(checkboxInput[1].checked).toBe(false);\n      expect(checkboxInput[2].checked).toBe(false);\n      expect(checkboxInput[3].checked).toBe(false);\n      expect(checkboxInput[4].checked).toBe(false);\n      vm.test = [false];\n    }).then(() => {\n      expect(checkboxInput[0].checked).toBe(false);\n      expect(checkboxInput[1].checked).toBe(false);\n      expect(checkboxInput[2].checked).toBe(false);\n      expect(checkboxInput[3].checked).toBe(true);\n      expect(checkboxInput[4].checked).toBe(false);\n      vm.test = [true];\n    }).then(() => {\n      expect(checkboxInput[0].checked).toBe(false);\n      expect(checkboxInput[1].checked).toBe(false);\n      expect(checkboxInput[2].checked).toBe(false);\n      expect(checkboxInput[3].checked).toBe(false);\n      expect(checkboxInput[4].checked).toBe(true);\n      vm.test = ['', 0, 1, false, true];\n    }).then(() => {\n      expect(checkboxInput[0].checked).toBe(true);\n      expect(checkboxInput[1].checked).toBe(true);\n      expect(checkboxInput[2].checked).toBe(true);\n      expect(checkboxInput[3].checked).toBe(true);\n      expect(checkboxInput[4].checked).toBe(true);\n    }).then(done);\n  }); // #4521","file":"unit/features/directives/model-checkbox.spec.js","skipped":false,"dir":"test"},{"name":"should work with click event","suites":["Directive v-model checkbox"],"line":216,"updatePoint":{"line":216,"column":34,"index":7142},"code":"  it('should work with click event', done => {\n    const vm = new Vue({\n      data: {\n        num: 1,\n        checked: false\n      },\n      template: '<div @click=\"add\">click {{ num }}<input ref=\"checkbox\" type=\"checkbox\" v-model=\"checked\"/></div>',\n      methods: {\n        add: function () {\n          this.num++;\n        }\n      }\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    const checkbox = vm.$refs.checkbox;\n    checkbox.click();\n    waitForUpdate(() => {\n      expect(checkbox.checked).toBe(true);\n      expect(vm.num).toBe(2);\n    }).then(done);\n  });","file":"unit/features/directives/model-checkbox.spec.js","skipped":false,"dir":"test"},{"name":"should get updated with model when in focus","suites":["Directive v-model checkbox"],"line":237,"updatePoint":{"line":237,"column":49,"index":7733},"code":"  it('should get updated with model when in focus', done => {\n    const vm = new Vue({\n      data: {\n        a: 2\n      },\n      template: '<input type=\"checkbox\" v-model=\"a\"/>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    vm.$el.click();\n    waitForUpdate(() => {\n      expect(vm.$el.checked).toBe(false);\n      vm.a = 2;\n    }).then(() => {\n      expect(vm.$el.checked).toBe(true);\n    }).then(done);\n  });","file":"unit/features/directives/model-checkbox.spec.js","skipped":false,"dir":"test"},{"name":"triggers a watcher when binding to an array value in a checkbox","suites":["Directive v-model checkbox"],"line":253,"updatePoint":{"line":253,"column":69,"index":8177},"code":"  it('triggers a watcher when binding to an array value in a checkbox', done => {\n    const vm = new Vue({\n      data: {\n        test: {\n          thing: false,\n          arr: [true]\n        }\n      },\n      template: `\n        <div>\n          <input type=\"checkbox\" v-model=\"test.arr[0]\">\n          <span>{{ test.arr[0] }}</span>\n        </div>\n      `\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.children[0].checked).toBe(true);\n    expect(vm.$el.children[1].textContent).toBe('true');\n    vm.$el.children[0].click();\n    expect(vm.$el.children[0].checked).toBe(false);\n    waitForUpdate(() => {\n      expect(vm.$el.children[1].textContent).toBe('false');\n    }).then(done);\n  });","file":"unit/features/directives/model-checkbox.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Directive v-model component"],"line":3,"updatePoint":{"line":3,"column":17,"index":89},"code":"  it('should work', done => {\n    const vm = new Vue({\n      data: {\n        msg: 'hello'\n      },\n      template: `\n        <div>\n          <p>{{ msg }}</p>\n          <test v-model=\"msg\"></test>\n        </div>\n      `,\n      components: {\n        test: {\n          props: ['value'],\n          template: `<input :value=\"value\" @input=\"$emit('input', $event.target.value)\">`\n        }\n      }\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    waitForUpdate(() => {\n      const input = vm.$el.querySelector('input');\n      input.value = 'world';\n      triggerEvent(input, 'input');\n    }).then(() => {\n      expect(vm.msg).toEqual('world');\n      expect(vm.$el.querySelector('p').textContent).toEqual('world');\n      vm.msg = 'changed';\n    }).then(() => {\n      expect(vm.$el.querySelector('p').textContent).toEqual('changed');\n      expect(vm.$el.querySelector('input').value).toEqual('changed');\n    }).then(() => {\n      document.body.removeChild(vm.$el);\n    }).then(done);\n  });","file":"unit/features/directives/model-component.spec.js","skipped":false,"dir":"test"},{"name":"should work with native tags with \"is\"","suites":["Directive v-model component"],"line":37,"updatePoint":{"line":37,"column":44,"index":1109},"code":"  it('should work with native tags with \"is\"', done => {\n    const vm = new Vue({\n      data: {\n        msg: 'hello'\n      },\n      template: `\n        <div>\n          <p>{{ msg }}</p>\n          <input is=\"test\" v-model=\"msg\">\n        </div>\n      `,\n      components: {\n        test: {\n          props: ['value'],\n          template: `<input :value=\"value\" @input=\"$emit('input', $event.target.value)\">`\n        }\n      }\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    waitForUpdate(() => {\n      const input = vm.$el.querySelector('input');\n      input.value = 'world';\n      triggerEvent(input, 'input');\n    }).then(() => {\n      expect(vm.msg).toEqual('world');\n      expect(vm.$el.querySelector('p').textContent).toEqual('world');\n      vm.msg = 'changed';\n    }).then(() => {\n      expect(vm.$el.querySelector('p').textContent).toEqual('changed');\n      expect(vm.$el.querySelector('input').value).toEqual('changed');\n    }).then(() => {\n      document.body.removeChild(vm.$el);\n    }).then(done);\n  });","file":"unit/features/directives/model-component.spec.js","skipped":false,"dir":"test"},{"name":"should support customization via model option","suites":["Directive v-model component"],"line":71,"updatePoint":{"line":71,"column":51,"index":2140},"code":"  it('should support customization via model option', done => {\n    const spy = jasmine.createSpy('update');\n    const vm = new Vue({\n      data: {\n        msg: 'hello'\n      },\n      methods: {\n        spy\n      },\n      template: `\n        <div>\n          <p>{{ msg }}</p>\n          <test v-model=\"msg\" @update=\"spy\"></test>\n        </div>\n      `,\n      components: {\n        test: {\n          model: {\n            prop: 'currentValue',\n            event: 'update'\n          },\n          props: ['currentValue'],\n          template: `<input :value=\"currentValue\" @input=\"$emit('update', $event.target.value)\">`\n        }\n      }\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    waitForUpdate(() => {\n      const input = vm.$el.querySelector('input');\n      input.value = 'world';\n      triggerEvent(input, 'input');\n    }).then(() => {\n      expect(vm.msg).toEqual('world');\n      expect(vm.$el.querySelector('p').textContent).toEqual('world');\n      expect(spy).toHaveBeenCalledWith('world');\n      vm.msg = 'changed';\n    }).then(() => {\n      expect(vm.$el.querySelector('p').textContent).toEqual('changed');\n      expect(vm.$el.querySelector('input').value).toEqual('changed');\n    }).then(() => {\n      document.body.removeChild(vm.$el);\n    }).then(done);\n  });","file":"unit/features/directives/model-component.spec.js","skipped":false,"dir":"test"},{"name":"modifier: .number","suites":["Directive v-model component"],"line":114,"updatePoint":{"line":114,"column":23,"index":3394},"code":"  it('modifier: .number', () => {\n    const vm = new Vue({\n      template: `<div><my-input ref=\"input\" v-model.number=\"text\"></my-input></div>`,\n      data: {\n        text: 'foo'\n      },\n      components: {\n        'my-input': {\n          template: '<input>'\n        }\n      }\n    }).$mount();\n    expect(vm.text).toBe('foo');\n    vm.$refs.input.$emit('input', 'bar');\n    expect(vm.text).toBe('bar');\n    vm.$refs.input.$emit('input', '123');\n    expect(vm.text).toBe(123);\n  });","file":"unit/features/directives/model-component.spec.js","skipped":false,"dir":"test"},{"name":"modifier: .trim","suites":["Directive v-model component"],"line":132,"updatePoint":{"line":132,"column":21,"index":3874},"code":"  it('modifier: .trim', () => {\n    const vm = new Vue({\n      template: `<div><my-input ref=\"input\" v-model.trim=\"text\"></my-input></div>`,\n      data: {\n        text: 'foo'\n      },\n      components: {\n        'my-input': {\n          template: '<input>'\n        }\n      }\n    }).$mount();\n    expect(vm.text).toBe('foo');\n    vm.$refs.input.$emit('input', '  bar  ');\n    expect(vm.text).toBe('bar');\n    vm.$refs.input.$emit('input', '   foo o  ');\n    expect(vm.text).toBe('foo o');\n  });","file":"unit/features/directives/model-component.spec.js","skipped":false,"dir":"test"},{"name":"should warn","suites":["Directive v-model dynamic input type"],"line":3,"updatePoint":{"line":3,"column":17,"index":98},"code":"  it('should warn', function () {\n    new Vue({\n      data: {\n        type: 'text',\n        text: 'hi'\n      },\n      template: `<input :type=\"type\" v-model=\"text\">`\n    }).$mount();\n    expect(`v-model does not support dynamic input types`).toHaveBeenWarned();\n  });","file":"unit/features/directives/model-dynamic.spec.js","skipped":false,"dir":"test"},{"name":"warn to use @change instead","suites":["Directive v-model file"],"line":3,"updatePoint":{"line":3,"column":33,"index":100},"code":"  it('warn to use @change instead', () => {\n    new Vue({\n      data: {\n        file: ''\n      },\n      template: '<input v-model=\"file\" type=\"file\">'\n    }).$mount();\n    expect('Use a v-on:change listener instead').toHaveBeenWarned();\n  });","file":"unit/features/directives/model-file.spec.js","skipped":false,"dir":"test"},{"name":"parse object dot notation","suites":["model expression parser"],"line":3,"updatePoint":{"line":3,"column":31,"index":132},"code":"  it('parse object dot notation', () => {\n    const res = parseModel('a.b.c');\n    expect(res.exp).toBe('a.b.c');\n    expect(res.idx).toBe(null);\n  });","file":"unit/features/directives/model-parse.spec.js","skipped":false,"dir":"test"},{"name":"parse string in brackets","suites":["model expression parser"],"line":8,"updatePoint":{"line":8,"column":30,"index":283},"code":"  it('parse string in brackets', () => {\n    const res = parseModel('a[\"b\"][c]');\n    expect(res.exp).toBe('a[\"b\"]');\n    expect(res.idx).toBe('c');\n  });","file":"unit/features/directives/model-parse.spec.js","skipped":false,"dir":"test"},{"name":"parse brackets with object dot notation","suites":["model expression parser"],"line":13,"updatePoint":{"line":13,"column":45,"index":453},"code":"  it('parse brackets with object dot notation', () => {\n    const res = parseModel('a[\"b\"][c].xxx');\n    expect(res.exp).toBe('a[\"b\"][c].xxx');\n    expect(res.idx).toBe(null);\n  });","file":"unit/features/directives/model-parse.spec.js","skipped":false,"dir":"test"},{"name":"parse nested brackets","suites":["model expression parser"],"line":18,"updatePoint":{"line":18,"column":27,"index":617},"code":"  it('parse nested brackets', () => {\n    const res = parseModel('a[i[c]]');\n    expect(res.exp).toBe('a');\n    expect(res.idx).toBe('i[c]');\n  });","file":"unit/features/directives/model-parse.spec.js","skipped":false,"dir":"test"},{"name":"combined","suites":["model expression parser"],"line":23,"updatePoint":{"line":23,"column":14,"index":752},"code":"  it('combined', () => {\n    const res = parseModel('test.xxx.a[\"asa\"][test1[idx]]');\n    expect(res.exp).toBe('test.xxx.a[\"asa\"]');\n    expect(res.idx).toBe('test1[idx]');\n  });","file":"unit/features/directives/model-parse.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Directive v-model radio"],"line":3,"updatePoint":{"line":3,"column":17,"index":85},"code":"  it('should work', done => {\n    const vm = new Vue({\n      data: {\n        test: '1'\n      },\n      template: `\n        <div>\n          <input type=\"radio\" value=\"1\" v-model=\"test\" name=\"test\">\n          <input type=\"radio\" value=\"2\" v-model=\"test\" name=\"test\">\n        </div>\n      `\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.children[0].checked).toBe(true);\n    expect(vm.$el.children[1].checked).toBe(false);\n    vm.test = '2';\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].checked).toBe(false);\n      expect(vm.$el.children[1].checked).toBe(true);\n      vm.$el.children[0].click();\n      expect(vm.$el.children[0].checked).toBe(true);\n      expect(vm.$el.children[1].checked).toBe(false);\n      expect(vm.test).toBe('1');\n    }).then(() => {\n      document.body.removeChild(vm.$el);\n    }).then(done);\n  });","file":"unit/features/directives/model-radio.spec.js","skipped":false,"dir":"test"},{"name":"should respect value bindings","suites":["Directive v-model radio"],"line":30,"updatePoint":{"line":30,"column":35,"index":961},"code":"  it('should respect value bindings', done => {\n    const vm = new Vue({\n      data: {\n        test: 1\n      },\n      template: `\n        <div>\n          <input type=\"radio\" :value=\"1\" v-model=\"test\" name=\"test\">\n          <input type=\"radio\" :value=\"2\" v-model=\"test\" name=\"test\">\n        </div>\n      `\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.children[0].checked).toBe(true);\n    expect(vm.$el.children[1].checked).toBe(false);\n    vm.test = 2;\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].checked).toBe(false);\n      expect(vm.$el.children[1].checked).toBe(true);\n      vm.$el.children[0].click();\n      expect(vm.$el.children[0].checked).toBe(true);\n      expect(vm.$el.children[1].checked).toBe(false);\n      expect(vm.test).toBe(1);\n    }).then(() => {\n      document.body.removeChild(vm.$el);\n    }).then(done);\n  });","file":"unit/features/directives/model-radio.spec.js","skipped":false,"dir":"test"},{"name":"should respect value bindings (object loose equal)","suites":["Directive v-model radio"],"line":57,"updatePoint":{"line":57,"column":56,"index":1854},"code":"  it('should respect value bindings (object loose equal)', done => {\n    const vm = new Vue({\n      data: {\n        test: {\n          a: 1\n        }\n      },\n      template: `\n        <div>\n          <input type=\"radio\" :value=\"{ a: 1 }\" v-model=\"test\" name=\"test\">\n          <input type=\"radio\" :value=\"{ a: 2 }\" v-model=\"test\" name=\"test\">\n        </div>\n      `\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.children[0].checked).toBe(true);\n    expect(vm.$el.children[1].checked).toBe(false);\n    vm.test = {\n      a: 2\n    };\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].checked).toBe(false);\n      expect(vm.$el.children[1].checked).toBe(true);\n      vm.$el.children[0].click();\n      expect(vm.$el.children[0].checked).toBe(true);\n      expect(vm.$el.children[1].checked).toBe(false);\n      expect(vm.test).toEqual({\n        a: 1\n      });\n    }).then(() => {\n      document.body.removeChild(vm.$el);\n    }).then(done);\n  });","file":"unit/features/directives/model-radio.spec.js","skipped":false,"dir":"test"},{"name":"multiple radios ","suites":["Directive v-model radio"],"line":90,"updatePoint":{"line":90,"column":22,"index":2793},"code":"  it('multiple radios ', done => {\n    const spy = jasmine.createSpy();\n    const vm = new Vue({\n      data: {\n        selections: ['a', '1'],\n        radioList: [{\n          name: 'questionA',\n          data: ['a', 'b', 'c']\n        }, {\n          name: 'questionB',\n          data: ['1', '2']\n        }]\n      },\n      watch: {\n        selections: spy\n      },\n      template: '<div>' + '<div v-for=\"(radioGroup, idx) in radioList\">' + '<div>' + '<span v-for=\"(item, index) in radioGroup.data\">' + '<input :name=\"radioGroup.name\" type=\"radio\" :value=\"item\" v-model=\"selections[idx]\" :id=\"idx\"/>' + '<label>{{item}}</label>' + '</span>' + '</div>' + '</div>' + '</div>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    var inputs = vm.$el.getElementsByTagName('input');\n    inputs[1].click();\n    waitForUpdate(() => {\n      expect(vm.selections).toEqual(['b', '1']);\n      expect(spy).toHaveBeenCalled();\n    }).then(done);\n  });","file":"unit/features/directives/model-radio.spec.js","skipped":false,"dir":"test"},{"name":".number modifier","suites":["Directive v-model radio"],"line":116,"updatePoint":{"line":116,"column":22,"index":3736},"code":"  it('.number modifier', () => {\n    const vm = new Vue({\n      data: {\n        test: 1\n      },\n      template: `\n        <div>\n          <input type=\"radio\" value=\"1\" v-model=\"test\" name=\"test\">\n          <input type=\"radio\" value=\"2\" v-model.number=\"test\" name=\"test\">\n        </div>\n      `\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.children[0].checked).toBe(true);\n    expect(vm.$el.children[1].checked).toBe(false);\n    vm.$el.children[1].click();\n    expect(vm.$el.children[0].checked).toBe(false);\n    expect(vm.$el.children[1].checked).toBe(true);\n    expect(vm.test).toBe(2);\n  });","file":"unit/features/directives/model-radio.spec.js","skipped":false,"dir":"test"},{"name":"should respect different primitive type value","suites":["Directive v-model radio"],"line":136,"updatePoint":{"line":136,"column":51,"index":4389},"code":"  it('should respect different primitive type value', done => {\n    const vm = new Vue({\n      data: {\n        test: 1\n      },\n      template: '<div>' + '<input type=\"radio\" value=\"\" v-model=\"test\" name=\"test\">' + '<input type=\"radio\" value=\"0\" v-model=\"test\" name=\"test\">' + '<input type=\"radio\" value=\"1\" v-model=\"test\" name=\"test\">' + '<input type=\"radio\" value=\"false\" v-model=\"test\" name=\"test\">' + '<input type=\"radio\" value=\"true\" v-model=\"test\" name=\"test\">' + '</div>'\n    }).$mount();\n    var radioboxInput = vm.$el.children;\n    expect(radioboxInput[0].checked).toBe(false);\n    expect(radioboxInput[1].checked).toBe(false);\n    expect(radioboxInput[2].checked).toBe(true);\n    expect(radioboxInput[3].checked).toBe(false);\n    expect(radioboxInput[4].checked).toBe(false);\n    vm.test = 0;\n    waitForUpdate(() => {\n      expect(radioboxInput[0].checked).toBe(false);\n      expect(radioboxInput[1].checked).toBe(true);\n      expect(radioboxInput[2].checked).toBe(false);\n      expect(radioboxInput[3].checked).toBe(false);\n      expect(radioboxInput[4].checked).toBe(false);\n      vm.test = '';\n    }).then(() => {\n      expect(radioboxInput[0].checked).toBe(true);\n      expect(radioboxInput[1].checked).toBe(false);\n      expect(radioboxInput[2].checked).toBe(false);\n      expect(radioboxInput[3].checked).toBe(false);\n      expect(radioboxInput[4].checked).toBe(false);\n      vm.test = false;\n    }).then(() => {\n      expect(radioboxInput[0].checked).toBe(false);\n      expect(radioboxInput[1].checked).toBe(false);\n      expect(radioboxInput[2].checked).toBe(false);\n      expect(radioboxInput[3].checked).toBe(true);\n      expect(radioboxInput[4].checked).toBe(false);\n      vm.test = true;\n    }).then(() => {\n      expect(radioboxInput[0].checked).toBe(false);\n      expect(radioboxInput[1].checked).toBe(false);\n      expect(radioboxInput[2].checked).toBe(false);\n      expect(radioboxInput[3].checked).toBe(false);\n      expect(radioboxInput[4].checked).toBe(true);\n    }).then(done);\n  }); // #4521","file":"unit/features/directives/model-radio.spec.js","skipped":false,"dir":"test"},{"name":"should work with click event","suites":["Directive v-model radio"],"line":180,"updatePoint":{"line":180,"column":34,"index":6397},"code":"  it('should work with click event', done => {\n    const vm = new Vue({\n      data: {\n        num: 1,\n        checked: 1\n      },\n      template: '<div @click=\"add\">' + 'click {{ num }}<input name=\"test\" type=\"radio\" value=\"1\" v-model=\"checked\"/>' + '<input name=\"test\" type=\"radio\" value=\"2\" v-model=\"checked\"/>' + '</div>',\n      methods: {\n        add: function () {\n          this.num++;\n        }\n      }\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    const radios = vm.$el.getElementsByTagName('input');\n    radios[0].click();\n    waitForUpdate(() => {\n      expect(radios[0].checked).toBe(true);\n      expect(radios[1].checked).toBe(false);\n      expect(vm.num).toBe(2);\n      radios[0].click();\n    }).then(() => {\n      expect(radios[0].checked).toBe(true);\n      expect(radios[1].checked).toBe(false);\n      expect(vm.num).toBe(3);\n      radios[1].click();\n    }).then(() => {\n      expect(radios[0].checked).toBe(false);\n      expect(radios[1].checked).toBe(true);\n      expect(vm.num).toBe(4);\n    }).then(done);\n  });","file":"unit/features/directives/model-radio.spec.js","skipped":false,"dir":"test"},{"name":"should get updated with model when in focus","suites":["Directive v-model radio"],"line":212,"updatePoint":{"line":212,"column":49,"index":7456},"code":"  it('should get updated with model when in focus', done => {\n    const vm = new Vue({\n      data: {\n        a: '2'\n      },\n      template: '<input type=\"radio\" value=\"1\" v-model=\"a\"/>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    vm.$el.click();\n    waitForUpdate(() => {\n      expect(vm.$el.checked).toBe(true);\n      vm.a = 2;\n    }).then(() => {\n      expect(vm.$el.checked).toBe(false);\n    }).then(done);\n  });","file":"unit/features/directives/model-radio.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Directive v-model select"],"line":37,"updatePoint":{"line":37,"column":17,"index":941},"code":"  it('should work', done => {\n    const vm = new Vue({\n      data: {\n        test: 'b'\n      },\n      template: '<select v-model=\"test\">' + '<option>a</option>' + '<option>b</option>' + '<option>c</option>' + '</select>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.test).toBe('b');\n    expect(vm.$el.value).toBe('b');\n    expect(vm.$el.childNodes[1].selected).toBe(true);\n    vm.test = 'c';\n    waitForUpdate(function () {\n      expect(vm.$el.value).toBe('c');\n      expect(vm.$el.childNodes[2].selected).toBe(true);\n      updateSelect(vm.$el, 'a');\n      triggerEvent(vm.$el, 'change');\n      expect(vm.test).toBe('a');\n    }).then(done);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"should work with value bindings","suites":["Directive v-model select"],"line":57,"updatePoint":{"line":57,"column":37,"index":1633},"code":"  it('should work with value bindings', done => {\n    const vm = new Vue({\n      data: {\n        test: 2\n      },\n      template: '<select v-model=\"test\">' + '<option value=\"1\">a</option>' + '<option :value=\"2\">b</option>' + '<option :value=\"3\">c</option>' + '</select>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.value).toBe('2');\n    expect(vm.$el.childNodes[1].selected).toBe(true);\n    vm.test = 3;\n    waitForUpdate(function () {\n      expect(vm.$el.value).toBe('3');\n      expect(vm.$el.childNodes[2].selected).toBe(true);\n      updateSelect(vm.$el, '1');\n      triggerEvent(vm.$el, 'change');\n      expect(vm.test).toBe('1');\n      updateSelect(vm.$el, '2');\n      triggerEvent(vm.$el, 'change');\n      expect(vm.test).toBe(2);\n    }).then(done);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"should work with value bindings (object loose equal)","suites":["Directive v-model select"],"line":79,"updatePoint":{"line":79,"column":58,"index":2445},"code":"  it('should work with value bindings (object loose equal)', done => {\n    const vm = new Vue({\n      data: {\n        test: {\n          a: 2\n        }\n      },\n      template: '<select v-model=\"test\">' + '<option value=\"1\">a</option>' + '<option :value=\"{ a: 2 }\">b</option>' + '<option :value=\"{ a: 3 }\">c</option>' + '</select>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.childNodes[1].selected).toBe(true);\n    vm.test = {\n      a: 3\n    };\n    waitForUpdate(function () {\n      expect(vm.$el.childNodes[2].selected).toBe(true);\n      updateSelect(vm.$el, '1');\n      triggerEvent(vm.$el, 'change');\n      expect(vm.test).toBe('1');\n      updateSelect(vm.$el, {\n        a: 2\n      });\n      triggerEvent(vm.$el, 'change');\n      expect(vm.test).toEqual({\n        a: 2\n      });\n    }).then(done);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"should work with v-for","suites":["Directive v-model select"],"line":107,"updatePoint":{"line":107,"column":28,"index":3252},"code":"  it('should work with v-for', done => {\n    const vm = new Vue({\n      data: {\n        test: 'b',\n        opts: ['a', 'b', 'c']\n      },\n      template: '<select v-model=\"test\">' + '<option v-for=\"o in opts\">{{ o }}</option>' + '</select>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.test).toBe('b');\n    expect(vm.$el.value).toBe('b');\n    expect(vm.$el.childNodes[1].selected).toBe(true);\n    vm.test = 'c';\n    waitForUpdate(function () {\n      expect(vm.$el.value).toBe('c');\n      expect(vm.$el.childNodes[2].selected).toBe(true);\n      updateSelect(vm.$el, 'a');\n      triggerEvent(vm.$el, 'change');\n      expect(vm.test).toBe('a'); // update v-for opts\n\n      vm.opts = ['d', 'a'];\n    }).then(() => {\n      expect(vm.$el.childNodes[0].selected).toBe(false);\n      expect(vm.$el.childNodes[1].selected).toBe(true);\n    }).then(done);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"should work with v-for & value bindings","suites":["Directive v-model select"],"line":133,"updatePoint":{"line":133,"column":45,"index":4144},"code":"  it('should work with v-for & value bindings', done => {\n    const vm = new Vue({\n      data: {\n        test: 2,\n        opts: [1, 2, 3]\n      },\n      template: '<select v-model=\"test\">' + '<option v-for=\"o in opts\" :value=\"o\">option {{ o }}</option>' + '</select>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.$el.value).toBe('2');\n    expect(vm.$el.childNodes[1].selected).toBe(true);\n    vm.test = 3;\n    waitForUpdate(function () {\n      expect(vm.$el.value).toBe('3');\n      expect(vm.$el.childNodes[2].selected).toBe(true);\n      updateSelect(vm.$el, 1);\n      triggerEvent(vm.$el, 'change');\n      expect(vm.test).toBe(1); // update v-for opts\n\n      vm.opts = [0, 1];\n    }).then(() => {\n      expect(vm.$el.childNodes[0].selected).toBe(false);\n      expect(vm.$el.childNodes[1].selected).toBe(true);\n    }).then(done);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"should work with select which has no default selected options","suites":["Directive v-model select"],"line":158,"updatePoint":{"line":158,"column":67,"index":5027},"code":"  it('should work with select which has no default selected options', done => {\n    const spy = jasmine.createSpy();\n    const vm = new Vue({\n      data: {\n        id: 4,\n        list: [1, 2, 3],\n        testChange: 5\n      },\n      template: '<div>' + '<select @change=\"test\" v-model=\"id\">' + '<option v-for=\"item in list\" :value=\"item\">{{item}}</option>' + '</select>' + '{{testChange}}' + '</div>',\n      methods: {\n        test: spy\n      }\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    vm.testChange = 10;\n    waitForUpdate(() => {\n      expect(spy.calls.count()).toBe(0);\n    }).then(done);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"multiple","suites":["Directive v-model select"],"line":179,"updatePoint":{"line":179,"column":16,"index":5624},"code":"    it('multiple', done => {\n      const vm = new Vue({\n        data: {\n          test: ['b']\n        },\n        template: '<select v-model=\"test\" multiple>' + '<option>a</option>' + '<option>b</option>' + '<option>c</option>' + '</select>'\n      }).$mount();\n      var opts = vm.$el.options;\n      expect(opts[0].selected).toBe(false);\n      expect(opts[1].selected).toBe(true);\n      expect(opts[2].selected).toBe(false);\n      vm.test = ['a', 'c'];\n      waitForUpdate(() => {\n        expect(opts[0].selected).toBe(true);\n        expect(opts[1].selected).toBe(false);\n        expect(opts[2].selected).toBe(true);\n        opts[0].selected = false;\n        opts[1].selected = true;\n        triggerEvent(vm.$el, 'change');\n        expect(vm.test).toEqual(['b', 'c']);\n      }).then(done);\n    });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"multiple + v-for","suites":["Directive v-model select"],"line":201,"updatePoint":{"line":201,"column":24,"index":6429},"code":"    it('multiple + v-for', done => {\n      const vm = new Vue({\n        data: {\n          test: ['b'],\n          opts: ['a', 'b', 'c']\n        },\n        template: '<select v-model=\"test\" multiple>' + '<option v-for=\"o in opts\">{{ o }}</option>' + '</select>'\n      }).$mount();\n      var opts = vm.$el.options;\n      expect(opts[0].selected).toBe(false);\n      expect(opts[1].selected).toBe(true);\n      expect(opts[2].selected).toBe(false);\n      vm.test = ['a', 'c'];\n      waitForUpdate(() => {\n        expect(opts[0].selected).toBe(true);\n        expect(opts[1].selected).toBe(false);\n        expect(opts[2].selected).toBe(true);\n        opts[0].selected = false;\n        opts[1].selected = true;\n        triggerEvent(vm.$el, 'change');\n        expect(vm.test).toEqual(['b', 'c']); // update v-for opts\n\n        vm.opts = ['c', 'd'];\n      }).then(() => {\n        expect(opts[0].selected).toBe(true);\n        expect(opts[1].selected).toBe(false);\n        expect(vm.test).toEqual(['c']); // should remove 'd' which no longer has a matching option\n      }).then(done);\n    });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"should work with multiple binding","suites":["Directive v-model select"],"line":232,"updatePoint":{"line":232,"column":39,"index":7529},"code":"  it('should work with multiple binding', done => {\n    const spy = jasmine.createSpy();\n    const vm = new Vue({\n      data: {\n        isMultiple: true,\n        selections: ['1']\n      },\n      template: '<select v-model=\"selections\" :multiple=\"isMultiple\">' + '<option value=\"1\">item 1</option>' + '<option value=\"2\">item 2</option>' + '</select>',\n      watch: {\n        selections: spy\n      }\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    vm.$el.options[1].selected = true;\n    triggerEvent(vm.$el, 'change');\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalled();\n      expect(vm.selections).toEqual(['1', '2']);\n    }).then(done);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"should not have multiple attr with falsy values except ''","suites":["Directive v-model select"],"line":252,"updatePoint":{"line":252,"column":65,"index":8222},"code":"  it('should not have multiple attr with falsy values except \\'\\'', () => {\n    const vm = new Vue({\n      template: '<div>' + '<select id=\"undefined\" :multiple=\"undefined\"></select>' + '<select id=\"null\" :multiple=\"null\"></select>' + '<select id=\"false\" :multiple=\"false\"></select>' + '<select id=\"string\" :multiple=\"\\'\\'\"></select>' + '</div>'\n    }).$mount();\n    expect(vm.$el.querySelector('#undefined').multiple).toEqual(false);\n    expect(vm.$el.querySelector('#null').multiple).toEqual(false);\n    expect(vm.$el.querySelector('#false').multiple).toEqual(false);\n    expect(vm.$el.querySelector('#string').multiple).toEqual(true);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"multiple with static template","suites":["Directive v-model select"],"line":261,"updatePoint":{"line":261,"column":35,"index":8836},"code":"  it('multiple with static template', () => {\n    const vm = new Vue({\n      template: '<select multiple>' + '<option selected>a</option>' + '<option selected>b</option>' + '<option selected>c</option>' + '</select>'\n    }).$mount();\n    var opts = vm.$el.options;\n    expect(opts[0].selected).toBe(true);\n    expect(opts[1].selected).toBe(true);\n    expect(opts[2].selected).toBe(true);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"multiple selects","suites":["Directive v-model select"],"line":270,"updatePoint":{"line":270,"column":22,"index":9217},"code":"  it('multiple selects', done => {\n    const spy = jasmine.createSpy();\n    const vm = new Vue({\n      data: {\n        selections: ['', ''],\n        selectBoxes: [[{\n          value: 'foo',\n          text: 'foo'\n        }, {\n          value: 'bar',\n          text: 'bar'\n        }], [{\n          value: 'day',\n          text: 'day'\n        }, {\n          value: 'night',\n          text: 'night'\n        }]]\n      },\n      watch: {\n        selections: spy\n      },\n      template: '<div>' + '<select v-for=\"(item, index) in selectBoxes\" v-model=\"selections[index]\">' + '<option v-for=\"element in item\" v-bind:value=\"element.value\" v-text=\"element.text\"></option>' + '</select>' + '<span ref=\"rs\">{{selections}}</span>' + '</div>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    var selects = vm.$el.getElementsByTagName('select');\n    var select0 = selects[0];\n    select0.options[0].selected = true;\n    triggerEvent(select0, 'change');\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalled();\n      expect(vm.selections).toEqual(['foo', '']);\n    }).then(done);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":".number modifier","suites":["Directive v-model select"],"line":304,"updatePoint":{"line":304,"column":22,"index":10305},"code":"  it('.number modifier', () => {\n    const vm = new Vue({\n      data: {\n        test: 2\n      },\n      template: '<select v-model.number=\"test\">' + '<option value=\"1\">a</option>' + '<option :value=\"2\">b</option>' + '<option :value=\"3\">c</option>' + '</select>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    updateSelect(vm.$el, '1');\n    triggerEvent(vm.$el, 'change');\n    expect(vm.test).toBe(1);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"should respect different primitive type value","suites":["Directive v-model select"],"line":316,"updatePoint":{"line":316,"column":51,"index":10753},"code":"  it('should respect different primitive type value', done => {\n    const vm = new Vue({\n      data: {\n        test: 0\n      },\n      template: '<select v-model.number=\"test\">' + '<option value=\"\">a</option>' + '<option value=\"0\">b</option>' + '<option value=\"1\">c</option>' + '<option value=\"false\">c</option>' + '<option value=\"true\">c</option>' + '</select>'\n    }).$mount();\n    var opts = vm.$el.options;\n    expect(opts[0].selected).toBe(false);\n    expect(opts[1].selected).toBe(true);\n    expect(opts[2].selected).toBe(false);\n    expect(opts[3].selected).toBe(false);\n    expect(opts[4].selected).toBe(false);\n    vm.test = 1;\n    waitForUpdate(() => {\n      expect(opts[0].selected).toBe(false);\n      expect(opts[1].selected).toBe(false);\n      expect(opts[2].selected).toBe(true);\n      expect(opts[3].selected).toBe(false);\n      expect(opts[4].selected).toBe(false);\n      vm.test = '';\n    }).then(() => {\n      expect(opts[0].selected).toBe(true);\n      expect(opts[1].selected).toBe(false);\n      expect(opts[2].selected).toBe(false);\n      expect(opts[3].selected).toBe(false);\n      expect(opts[4].selected).toBe(false);\n      vm.test = false;\n    }).then(() => {\n      expect(opts[0].selected).toBe(false);\n      expect(opts[1].selected).toBe(false);\n      expect(opts[2].selected).toBe(false);\n      expect(opts[3].selected).toBe(true);\n      expect(opts[4].selected).toBe(false);\n      vm.test = true;\n    }).then(() => {\n      expect(opts[0].selected).toBe(false);\n      expect(opts[1].selected).toBe(false);\n      expect(opts[2].selected).toBe(false);\n      expect(opts[3].selected).toBe(false);\n      expect(opts[4].selected).toBe(true);\n    }).then(done);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"should warn multiple with non-Array value","suites":["Directive v-model select"],"line":359,"updatePoint":{"line":359,"column":47,"index":12437},"code":"  it('should warn multiple with non-Array value', done => {\n    new Vue({\n      data: {\n        test: 'meh'\n      },\n      template: '<select v-model=\"test\" multiple></select>'\n    }).$mount(); // IE warns on a setTimeout as well\n\n    setTimeout(() => {\n      expect('<select multiple v-model=\"test\"> expects an Array value for its binding, but got String').toHaveBeenWarned();\n      done();\n    }, 0);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"should work with option value that has circular reference","suites":["Directive v-model select"],"line":372,"updatePoint":{"line":372,"column":63,"index":12862},"code":"  it('should work with option value that has circular reference', done => {\n    const circular = {};\n    circular.self = circular;\n    const vm = new Vue({\n      data: {\n        test: 'b',\n        circular\n      },\n      template: '<select v-model=\"test\">' + '<option :value=\"circular\">a</option>' + '<option>b</option>' + '<option>c</option>' + '</select>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    expect(vm.test).toBe('b');\n    expect(vm.$el.value).toBe('b');\n    expect(vm.$el.childNodes[1].selected).toBe(true);\n    vm.test = circular;\n    waitForUpdate(function () {\n      expect(vm.$el.childNodes[0].selected).toBe(true);\n    }).then(done);\n  });","file":"unit/features/directives/model-select.spec.js","skipped":false,"dir":"test"},{"name":"should update value both ways","suites":["Directive v-model text"],"line":4,"updatePoint":{"line":4,"column":35,"index":152},"code":"  it('should update value both ways', done => {\n    const vm = new Vue({\n      data: {\n        test: 'b'\n      },\n      template: '<input v-model=\"test\">'\n    }).$mount();\n    expect(vm.$el.value).toBe('b');\n    vm.test = 'a';\n    waitForUpdate(() => {\n      expect(vm.$el.value).toBe('a');\n      vm.$el.value = 'c';\n      triggerEvent(vm.$el, 'input');\n      expect(vm.test).toBe('c');\n    }).then(done);\n  });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":".lazy modifier","suites":["Directive v-model text"],"line":20,"updatePoint":{"line":20,"column":20,"index":549},"code":"  it('.lazy modifier', () => {\n    const vm = new Vue({\n      data: {\n        test: 'b'\n      },\n      template: '<input v-model.lazy=\"test\">'\n    }).$mount();\n    expect(vm.$el.value).toBe('b');\n    expect(vm.test).toBe('b');\n    vm.$el.value = 'c';\n    triggerEvent(vm.$el, 'input');\n    expect(vm.test).toBe('b');\n    triggerEvent(vm.$el, 'change');\n    expect(vm.test).toBe('c');\n  });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":".number modifier","suites":["Directive v-model text"],"line":35,"updatePoint":{"line":35,"column":22,"index":941},"code":"  it('.number modifier', () => {\n    const vm = new Vue({\n      data: {\n        test: 1\n      },\n      template: '<input v-model.number=\"test\">'\n    }).$mount();\n    expect(vm.test).toBe(1);\n    vm.$el.value = '2';\n    triggerEvent(vm.$el, 'input');\n    expect(vm.test).toBe(2); // should let strings pass through\n\n    vm.$el.value = 'f';\n    triggerEvent(vm.$el, 'input');\n    expect(vm.test).toBe('f');\n  });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":".trim modifier","suites":["Directive v-model text"],"line":51,"updatePoint":{"line":51,"column":20,"index":1350},"code":"  it('.trim modifier', () => {\n    const vm = new Vue({\n      data: {\n        test: 'hi'\n      },\n      template: '<input v-model.trim=\"test\">'\n    }).$mount();\n    expect(vm.test).toBe('hi');\n    vm.$el.value = ' what ';\n    triggerEvent(vm.$el, 'input');\n    expect(vm.test).toBe('what');\n  });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":".number focus and typing","suites":["Directive v-model text"],"line":63,"updatePoint":{"line":63,"column":30,"index":1657},"code":"  it('.number focus and typing', done => {\n    const vm = new Vue({\n      data: {\n        test: 0,\n        update: 0\n      },\n      template: '<div>' + '<input ref=\"input\" v-model.number=\"test\">{{ update }}' + '<input ref=\"blur\">' + '</div>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    vm.$refs.input.focus();\n    expect(vm.test).toBe(0);\n    vm.$refs.input.value = '1.0';\n    triggerEvent(vm.$refs.input, 'input');\n    expect(vm.test).toBe(1);\n    vm.update++;\n    waitForUpdate(() => {\n      expect(vm.$refs.input.value).toBe('1.0');\n      vm.$refs.blur.focus();\n      vm.update++;\n    }).then(() => {\n      expect(vm.$refs.input.value).toBe('1');\n    }).then(done);\n  });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":".trim focus and typing","suites":["Directive v-model text"],"line":86,"updatePoint":{"line":86,"column":28,"index":2346},"code":"  it('.trim focus and typing', done => {\n    const vm = new Vue({\n      data: {\n        test: 'abc',\n        update: 0\n      },\n      template: '<div>' + '<input ref=\"input\" v-model.trim=\"test\" type=\"text\">{{ update }}' + '<input ref=\"blur\"/>' + '</div>'\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    vm.$refs.input.focus();\n    vm.$refs.input.value = ' abc ';\n    triggerEvent(vm.$refs.input, 'input');\n    expect(vm.test).toBe('abc');\n    vm.update++;\n    waitForUpdate(() => {\n      expect(vm.$refs.input.value).toBe(' abc ');\n      vm.$refs.blur.focus();\n      vm.update++;\n    }).then(() => {\n      expect(vm.$refs.input.value).toBe('abc');\n    }).then(done);\n  });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":"multiple inputs","suites":["Directive v-model text"],"line":108,"updatePoint":{"line":108,"column":21,"index":3024},"code":"  it('multiple inputs', done => {\n    const spy = jasmine.createSpy();\n    const vm = new Vue({\n      data: {\n        selections: [[1, 2, 3], [4, 5]],\n        inputList: [{\n          name: 'questionA',\n          data: ['a', 'b', 'c']\n        }, {\n          name: 'questionB',\n          data: ['1', '2']\n        }]\n      },\n      watch: {\n        selections: spy\n      },\n      template: '<div>' + '<div v-for=\"(inputGroup, idx) in inputList\">' + '<div>' + '<span v-for=\"(item, index) in inputGroup.data\">' + '<input v-bind:name=\"item\" type=\"text\" v-model.number=\"selections[idx][index]\" v-bind:id=\"idx+\\'-\\'+index\"/>' + '<label>{{item}}</label>' + '</span>' + '</div>' + '</div>' + '<span ref=\"rs\">{{selections}}</span>' + '</div>'\n    }).$mount();\n    var inputs = vm.$el.getElementsByTagName('input');\n    inputs[1].value = 'test';\n    triggerEvent(inputs[1], 'input');\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalled();\n      expect(vm.selections).toEqual([[1, 'test', 3], [4, 5]]);\n    }).then(done);\n  });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":"IE9 selectionchange","suites":["Directive v-model text"],"line":136,"updatePoint":{"line":136,"column":27,"index":4070},"code":"    it('IE9 selectionchange', done => {\n      const vm = new Vue({\n        data: {\n          test: 'foo'\n        },\n        template: '<input v-model=\"test\">'\n      }).$mount();\n      const input = vm.$el;\n      input.value = 'bar';\n      document.body.appendChild(input);\n      input.focus();\n      triggerEvent(input, 'selectionchange');\n      waitForUpdate(() => {\n        expect(vm.test).toBe('bar');\n        input.value = 'a';\n        triggerEvent(input, 'selectionchange');\n        expect(vm.test).toBe('a');\n      }).then(done);\n    });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":"compositionevents","suites":["Directive v-model text"],"line":158,"updatePoint":{"line":158,"column":25,"index":4637},"code":"    it('compositionevents', function (done) {\n      const vm = new Vue({\n        data: {\n          test: 'foo'\n        },\n        template: '<input v-model=\"test\">'\n      }).$mount();\n      const input = vm.$el;\n      triggerEvent(input, 'compositionstart');\n      input.value = 'baz'; // input before composition unlock should not call set\n\n      triggerEvent(input, 'input');\n      expect(vm.test).toBe('foo'); // after composition unlock it should work\n\n      triggerEvent(input, 'compositionend');\n      triggerEvent(input, 'input');\n      expect(vm.test).toBe('baz');\n      done();\n    });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":"warn invalid tag","suites":["Directive v-model text"],"line":179,"updatePoint":{"line":179,"column":22,"index":5234},"code":"  it('warn invalid tag', () => {\n    new Vue({\n      data: {\n        test: 'foo'\n      },\n      template: '<div v-model=\"test\"></div>'\n    }).$mount();\n    expect('<div v-model=\"test\">: v-model is not supported on this element type').toHaveBeenWarned();\n  }); // #3468","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":"should have higher priority than user v-on events","suites":["Directive v-model text"],"line":189,"updatePoint":{"line":189,"column":55,"index":5537},"code":"  it('should have higher priority than user v-on events', () => {\n    const spy = jasmine.createSpy();\n    const vm = new Vue({\n      data: {\n        a: 'a'\n      },\n      template: '<input v-model=\"a\" @input=\"onInput\">',\n      methods: {\n        onInput(e) {\n          spy(e.target.value);\n        }\n\n      }\n    }).$mount();\n    vm.$el.value = 'b';\n    triggerEvent(vm.$el, 'input');\n    expect(spy).toHaveBeenCalledWith('b');\n  });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":"warn binding to v-for alias","suites":["Directive v-model text"],"line":207,"updatePoint":{"line":207,"column":33,"index":5950},"code":"  it('warn binding to v-for alias', () => {\n    new Vue({\n      data: {\n        strings: ['hi']\n      },\n      template: `\n        <div>\n          <div v-for=\"str in strings\">\n            <input v-model=\"str\">\n          </div>\n        </div>\n      `\n    }).$mount();\n    expect('You are binding v-model directly to a v-for iteration alias').toHaveBeenWarned();\n  });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":"does not trigger extra input events with single compositionend","suites":["Directive v-model text"],"line":224,"updatePoint":{"line":224,"column":70,"index":6375},"code":"    it('does not trigger extra input events with single compositionend', () => {\n      const spy = jasmine.createSpy();\n      const vm = new Vue({\n        data: {\n          a: 'a'\n        },\n        template: '<input v-model=\"a\" @input=\"onInput\">',\n        methods: {\n          onInput(e) {\n            spy(e.target.value);\n          }\n\n        }\n      }).$mount();\n      expect(spy.calls.count()).toBe(0);\n      vm.$el.value = 'b';\n      triggerEvent(vm.$el, 'input');\n      expect(spy.calls.count()).toBe(1);\n      triggerEvent(vm.$el, 'compositionend');\n      expect(spy.calls.count()).toBe(1);\n    });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":"triggers extra input on compositionstart + end","suites":["Directive v-model text"],"line":245,"updatePoint":{"line":245,"column":54,"index":6965},"code":"    it('triggers extra input on compositionstart + end', () => {\n      const spy = jasmine.createSpy();\n      const vm = new Vue({\n        data: {\n          a: 'a'\n        },\n        template: '<input v-model=\"a\" @input=\"onInput\">',\n        methods: {\n          onInput(e) {\n            spy(e.target.value);\n          }\n\n        }\n      }).$mount();\n      expect(spy.calls.count()).toBe(0);\n      vm.$el.value = 'b';\n      triggerEvent(vm.$el, 'input');\n      expect(spy.calls.count()).toBe(1);\n      triggerEvent(vm.$el, 'compositionstart');\n      triggerEvent(vm.$el, 'compositionend');\n      expect(spy.calls.count()).toBe(2);\n    });","file":"unit/features/directives/model-text.spec.js","skipped":false,"dir":"test"},{"name":"should bind event to a method","suites":["Directive v-on"],"line":16,"updatePoint":{"line":16,"column":35,"index":397},"code":"  it('should bind event to a method', () => {\n    vm = new Vue({\n      el,\n      template: '<div v-on:click=\"foo\"></div>',\n      methods: {\n        foo: spy\n      }\n    });\n    triggerEvent(vm.$el, 'click');\n    expect(spy.calls.count()).toBe(1);\n    const args = spy.calls.allArgs();\n    const event = args[0] && args[0][0] || {};\n    expect(event.type).toBe('click');\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should bind event to a inline statement","suites":["Directive v-on"],"line":30,"updatePoint":{"line":30,"column":45,"index":783},"code":"  it('should bind event to a inline statement', () => {\n    vm = new Vue({\n      el,\n      template: '<div v-on:click=\"foo(1,2,3,$event)\"></div>',\n      methods: {\n        foo: spy\n      }\n    });\n    triggerEvent(vm.$el, 'click');\n    expect(spy.calls.count()).toBe(1);\n    const args = spy.calls.allArgs();\n    const firstArgs = args[0];\n    expect(firstArgs.length).toBe(4);\n    expect(firstArgs[0]).toBe(1);\n    expect(firstArgs[1]).toBe(2);\n    expect(firstArgs[2]).toBe(3);\n    expect(firstArgs[3].type).toBe('click');\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support inline function expression","suites":["Directive v-on"],"line":48,"updatePoint":{"line":48,"column":47,"index":1316},"code":"  it('should support inline function expression', () => {\n    const spy = jasmine.createSpy();\n    vm = new Vue({\n      el,\n      template: `<div class=\"test\" @click=\"function (e) { log(e.target.className) }\"></div>`,\n      methods: {\n        log: spy\n      }\n    }).$mount();\n    triggerEvent(vm.$el, 'click');\n    expect(spy).toHaveBeenCalledWith('test');\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support shorthand","suites":["Directive v-on"],"line":60,"updatePoint":{"line":60,"column":30,"index":1663},"code":"  it('should support shorthand', () => {\n    vm = new Vue({\n      el,\n      template: '<a href=\"#test\" @click.prevent=\"foo\"></a>',\n      methods: {\n        foo: spy\n      }\n    });\n    triggerEvent(vm.$el, 'click');\n    expect(spy.calls.count()).toBe(1);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support stop propagation","suites":["Directive v-on"],"line":71,"updatePoint":{"line":71,"column":37,"index":1931},"code":"  it('should support stop propagation', () => {\n    vm = new Vue({\n      el,\n      template: `\n        <div @click.stop=\"foo\"></div>\n      `,\n      methods: {\n        foo: spy\n      }\n    });\n    const hash = window.location.hash;\n    triggerEvent(vm.$el, 'click');\n    expect(window.location.hash).toBe(hash);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support prevent default","suites":["Directive v-on"],"line":85,"updatePoint":{"line":85,"column":36,"index":2247},"code":"  it('should support prevent default', () => {\n    vm = new Vue({\n      el,\n      template: `\n        <input type=\"checkbox\" ref=\"input\" @click.prevent=\"foo\">\n      `,\n      methods: {\n        foo($event) {\n          spy($event.defaultPrevented);\n        }\n\n      }\n    });\n    vm.$refs.input.checked = false;\n    triggerEvent(vm.$refs.input, 'click');\n    expect(spy).toHaveBeenCalledWith(true);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support capture","suites":["Directive v-on"],"line":102,"updatePoint":{"line":102,"column":28,"index":2642},"code":"  it('should support capture', () => {\n    const callOrder = [];\n    vm = new Vue({\n      el,\n      template: `\n        <div @click.capture=\"foo\">\n          <div @click=\"bar\"></div>\n        </div>\n      `,\n      methods: {\n        foo() {\n          callOrder.push(1);\n        },\n\n        bar() {\n          callOrder.push(2);\n        }\n\n      }\n    });\n    triggerEvent(vm.$el.firstChild, 'click');\n    expect(callOrder.toString()).toBe('1,2');\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support once","suites":["Directive v-on"],"line":125,"updatePoint":{"line":125,"column":25,"index":3089},"code":"  it('should support once', () => {\n    vm = new Vue({\n      el,\n      template: `\n        <div @click.once=\"foo\">\n        </div>\n      `,\n      methods: {\n        foo: spy\n      }\n    });\n    triggerEvent(vm.$el, 'click');\n    expect(spy.calls.count()).toBe(1);\n    triggerEvent(vm.$el, 'click');\n    expect(spy.calls.count()).toBe(1); // should no longer trigger\n  }); // #4655","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should handle .once on multiple elements properly","suites":["Directive v-on"],"line":142,"updatePoint":{"line":142,"column":55,"index":3500},"code":"  it('should handle .once on multiple elements properly', () => {\n    vm = new Vue({\n      el,\n      template: `\n        <div>\n          <button ref=\"one\" @click.once=\"foo\">one</button>\n          <button ref=\"two\" @click.once=\"foo\">two</button>\n        </div>\n      `,\n      methods: {\n        foo: spy\n      }\n    });\n    triggerEvent(vm.$refs.one, 'click');\n    expect(spy.calls.count()).toBe(1);\n    triggerEvent(vm.$refs.one, 'click');\n    expect(spy.calls.count()).toBe(1);\n    triggerEvent(vm.$refs.two, 'click');\n    expect(spy.calls.count()).toBe(2);\n    triggerEvent(vm.$refs.one, 'click');\n    triggerEvent(vm.$refs.two, 'click');\n    expect(spy.calls.count()).toBe(2);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support capture and once","suites":["Directive v-on"],"line":165,"updatePoint":{"line":165,"column":37,"index":4168},"code":"  it('should support capture and once', () => {\n    const callOrder = [];\n    vm = new Vue({\n      el,\n      template: `\n        <div @click.capture.once=\"foo\">\n          <div @click=\"bar\"></div>\n        </div>\n      `,\n      methods: {\n        foo() {\n          callOrder.push(1);\n        },\n\n        bar() {\n          callOrder.push(2);\n        }\n\n      }\n    });\n    triggerEvent(vm.$el.firstChild, 'click');\n    expect(callOrder.toString()).toBe('1,2');\n    triggerEvent(vm.$el.firstChild, 'click');\n    expect(callOrder.toString()).toBe('1,2,2');\n  }); // #4846","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support once and other modifiers","suites":["Directive v-on"],"line":191,"updatePoint":{"line":191,"column":45,"index":4744},"code":"  it('should support once and other modifiers', () => {\n    vm = new Vue({\n      el,\n      template: `<div @click.once.self=\"foo\"><span/></div>`,\n      methods: {\n        foo: spy\n      }\n    });\n    triggerEvent(vm.$el.firstChild, 'click');\n    expect(spy).not.toHaveBeenCalled();\n    triggerEvent(vm.$el, 'click');\n    expect(spy).toHaveBeenCalled();\n    triggerEvent(vm.$el, 'click');\n    expect(spy.calls.count()).toBe(1);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support keyCode","suites":["Directive v-on"],"line":206,"updatePoint":{"line":206,"column":28,"index":5160},"code":"  it('should support keyCode', () => {\n    vm = new Vue({\n      el,\n      template: `<input @keyup.enter=\"foo\">`,\n      methods: {\n        foo: spy\n      }\n    });\n    triggerEvent(vm.$el, 'keyup', e => {\n      e.keyCode = 13;\n    });\n    expect(spy).toHaveBeenCalled();\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support number keyCode","suites":["Directive v-on"],"line":219,"updatePoint":{"line":219,"column":35,"index":5444},"code":"  it('should support number keyCode', () => {\n    vm = new Vue({\n      el,\n      template: `<input @keyup.13=\"foo\">`,\n      methods: {\n        foo: spy\n      }\n    });\n    triggerEvent(vm.$el, 'keyup', e => {\n      e.keyCode = 13;\n    });\n    expect(spy).toHaveBeenCalled();\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support mouse modifier","suites":["Directive v-on"],"line":232,"updatePoint":{"line":232,"column":35,"index":5725},"code":"  it('should support mouse modifier', () => {\n    const left = 0;\n    const middle = 1;\n    const right = 2;\n    const spyLeft = jasmine.createSpy();\n    const spyMiddle = jasmine.createSpy();\n    const spyRight = jasmine.createSpy();\n    vm = new Vue({\n      el,\n      template: `\n        <div>\n          <div ref=\"left\" @mousedown.left=\"foo\">left</div>\n          <div ref=\"right\" @mousedown.right=\"foo1\">right</div>\n          <div ref=\"middle\" @mousedown.middle=\"foo2\">right</div>\n        </div>\n      `,\n      methods: {\n        foo: spyLeft,\n        foo1: spyRight,\n        foo2: spyMiddle\n      }\n    });\n    triggerEvent(vm.$refs.left, 'mousedown', e => {\n      e.button = right;\n    });\n    triggerEvent(vm.$refs.left, 'mousedown', e => {\n      e.button = middle;\n    });\n    expect(spyLeft).not.toHaveBeenCalled();\n    triggerEvent(vm.$refs.left, 'mousedown', e => {\n      e.button = left;\n    });\n    expect(spyLeft).toHaveBeenCalled();\n    triggerEvent(vm.$refs.right, 'mousedown', e => {\n      e.button = left;\n    });\n    triggerEvent(vm.$refs.right, 'mousedown', e => {\n      e.button = middle;\n    });\n    expect(spyRight).not.toHaveBeenCalled();\n    triggerEvent(vm.$refs.right, 'mousedown', e => {\n      e.button = right;\n    });\n    expect(spyRight).toHaveBeenCalled();\n    triggerEvent(vm.$refs.middle, 'mousedown', e => {\n      e.button = left;\n    });\n    triggerEvent(vm.$refs.middle, 'mousedown', e => {\n      e.button = right;\n    });\n    expect(spyMiddle).not.toHaveBeenCalled();\n    triggerEvent(vm.$refs.middle, 'mousedown', e => {\n      e.button = middle;\n    });\n    expect(spyMiddle).toHaveBeenCalled();\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support custom keyCode","suites":["Directive v-on"],"line":288,"updatePoint":{"line":288,"column":35,"index":7364},"code":"  it('should support custom keyCode', () => {\n    Vue.config.keyCodes.test = 1;\n    vm = new Vue({\n      el,\n      template: `<input @keyup.test=\"foo\">`,\n      methods: {\n        foo: spy\n      }\n    });\n    triggerEvent(vm.$el, 'keyup', e => {\n      e.keyCode = 1;\n    });\n    expect(spy).toHaveBeenCalled();\n    Vue.config.keyCodes = Object.create(null);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should override build-in keyCode","suites":["Directive v-on"],"line":303,"updatePoint":{"line":303,"column":38,"index":7730},"code":"  it('should override build-in keyCode', () => {\n    Vue.config.keyCodes.up = [1, 87];\n    vm = new Vue({\n      el,\n      template: `<input @keyup.up=\"foo\" @keyup.down=\"foo\">`,\n      methods: {\n        foo: spy\n      }\n    });\n    triggerEvent(vm.$el, 'keyup', e => {\n      e.keyCode = 87;\n    });\n    expect(spy).toHaveBeenCalled();\n    triggerEvent(vm.$el, 'keyup', e => {\n      e.keyCode = 1;\n    });\n    expect(spy).toHaveBeenCalledTimes(2); // should not affect build-in down keycode\n\n    triggerEvent(vm.$el, 'keyup', e => {\n      e.keyCode = 40;\n    });\n    expect(spy).toHaveBeenCalledTimes(3);\n    Vue.config.keyCodes = Object.create(null);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should bind to a child component","suites":["Directive v-on"],"line":327,"updatePoint":{"line":327,"column":38,"index":8386},"code":"  it('should bind to a child component', () => {\n    vm = new Vue({\n      el,\n      template: '<bar @custom=\"foo\"></bar>',\n      methods: {\n        foo: spy\n      },\n      components: {\n        bar: {\n          template: '<span>Hello</span>'\n        }\n      }\n    });\n    vm.$children[0].$emit('custom', 'foo', 'bar');\n    expect(spy).toHaveBeenCalledWith('foo', 'bar');\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should be able to bind native events for a child component","suites":["Directive v-on"],"line":343,"updatePoint":{"line":343,"column":64,"index":8789},"code":"  it('should be able to bind native events for a child component', () => {\n    vm = new Vue({\n      el,\n      template: '<bar @click.native=\"foo\"></bar>',\n      methods: {\n        foo: spy\n      },\n      components: {\n        bar: {\n          template: '<span>Hello</span>'\n        }\n      }\n    });\n    vm.$children[0].$emit('click');\n    expect(spy).not.toHaveBeenCalled();\n    triggerEvent(vm.$children[0].$el, 'click');\n    expect(spy).toHaveBeenCalled();\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":".once modifier should work with child components","suites":["Directive v-on"],"line":361,"updatePoint":{"line":361,"column":54,"index":9245},"code":"  it('.once modifier should work with child components', () => {\n    vm = new Vue({\n      el,\n      template: '<bar @custom.once=\"foo\"></bar>',\n      methods: {\n        foo: spy\n      },\n      components: {\n        bar: {\n          template: '<span>Hello</span>'\n        }\n      }\n    });\n    vm.$children[0].$emit('custom');\n    expect(spy.calls.count()).toBe(1);\n    vm.$children[0].$emit('custom');\n    expect(spy.calls.count()).toBe(1); // should not be called again\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"remove listener","suites":["Directive v-on"],"line":379,"updatePoint":{"line":379,"column":21,"index":9689},"code":"  it('remove listener', done => {\n    const spy2 = jasmine.createSpy('remove listener');\n    vm = new Vue({\n      el,\n      methods: {\n        foo: spy,\n        bar: spy2\n      },\n      data: {\n        ok: true\n      },\n\n      render(h) {\n        return this.ok ? h('input', {\n          on: {\n            click: this.foo\n          }\n        }) : h('input', {\n          on: {\n            input: this.bar\n          }\n        });\n      }\n\n    });\n    triggerEvent(vm.$el, 'click');\n    expect(spy.calls.count()).toBe(1);\n    expect(spy2.calls.count()).toBe(0);\n    vm.ok = false;\n    waitForUpdate(() => {\n      triggerEvent(vm.$el, 'click');\n      expect(spy.calls.count()).toBe(1); // should no longer trigger\n\n      triggerEvent(vm.$el, 'input');\n      expect(spy2.calls.count()).toBe(1);\n    }).then(done);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"remove capturing listener","suites":["Directive v-on"],"line":416,"updatePoint":{"line":416,"column":31,"index":10513},"code":"  it('remove capturing listener', done => {\n    const spy2 = jasmine.createSpy('remove listener');\n    vm = new Vue({\n      el,\n      methods: {\n        foo: spy,\n        bar: spy2,\n\n        stopped(ev) {\n          ev.stopPropagation();\n        }\n\n      },\n      data: {\n        ok: true\n      },\n\n      render(h) {\n        return this.ok ? h('div', {\n          on: {\n            '!click': this.foo\n          }\n        }, [h('div', {\n          on: {\n            click: this.stopped\n          }\n        })]) : h('div', {\n          on: {\n            mouseOver: this.bar\n          }\n        }, [h('div')]);\n      }\n\n    });\n    triggerEvent(vm.$el.firstChild, 'click');\n    expect(spy.calls.count()).toBe(1);\n    expect(spy2.calls.count()).toBe(0);\n    vm.ok = false;\n    waitForUpdate(() => {\n      triggerEvent(vm.$el.firstChild, 'click');\n      expect(spy.calls.count()).toBe(1); // should no longer trigger\n\n      triggerEvent(vm.$el, 'mouseOver');\n      expect(spy2.calls.count()).toBe(1);\n    }).then(done);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"remove once listener","suites":["Directive v-on"],"line":462,"updatePoint":{"line":462,"column":26,"index":11525},"code":"  it('remove once listener', done => {\n    const spy2 = jasmine.createSpy('remove listener');\n    vm = new Vue({\n      el,\n      methods: {\n        foo: spy,\n        bar: spy2\n      },\n      data: {\n        ok: true\n      },\n\n      render(h) {\n        return this.ok ? h('input', {\n          on: {\n            '~click': this.foo\n          }\n        }) : h('input', {\n          on: {\n            input: this.bar\n          }\n        });\n      }\n\n    });\n    triggerEvent(vm.$el, 'click');\n    expect(spy.calls.count()).toBe(1);\n    triggerEvent(vm.$el, 'click');\n    expect(spy.calls.count()).toBe(1); // should no longer trigger\n\n    expect(spy2.calls.count()).toBe(0);\n    vm.ok = false;\n    waitForUpdate(() => {\n      triggerEvent(vm.$el, 'click');\n      expect(spy.calls.count()).toBe(1); // should no longer trigger\n\n      triggerEvent(vm.$el, 'input');\n      expect(spy2.calls.count()).toBe(1);\n    }).then(done);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"remove capturing and once listener","suites":["Directive v-on"],"line":502,"updatePoint":{"line":502,"column":40,"index":12464},"code":"  it('remove capturing and once listener', done => {\n    const spy2 = jasmine.createSpy('remove listener');\n    vm = new Vue({\n      el,\n      methods: {\n        foo: spy,\n        bar: spy2,\n\n        stopped(ev) {\n          ev.stopPropagation();\n        }\n\n      },\n      data: {\n        ok: true\n      },\n\n      render(h) {\n        return this.ok ? h('div', {\n          on: {\n            '~!click': this.foo\n          }\n        }, [h('div', {\n          on: {\n            click: this.stopped\n          }\n        })]) : h('div', {\n          on: {\n            mouseOver: this.bar\n          }\n        }, [h('div')]);\n      }\n\n    });\n    triggerEvent(vm.$el.firstChild, 'click');\n    expect(spy.calls.count()).toBe(1);\n    triggerEvent(vm.$el.firstChild, 'click');\n    expect(spy.calls.count()).toBe(1); // should no longer trigger\n\n    expect(spy2.calls.count()).toBe(0);\n    vm.ok = false;\n    waitForUpdate(() => {\n      triggerEvent(vm.$el.firstChild, 'click');\n      expect(spy.calls.count()).toBe(1); // should no longer trigger\n\n      triggerEvent(vm.$el, 'mouseOver');\n      expect(spy2.calls.count()).toBe(1);\n    }).then(done);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"remove listener on child component","suites":["Directive v-on"],"line":551,"updatePoint":{"line":551,"column":40,"index":13605},"code":"  it('remove listener on child component', done => {\n    const spy2 = jasmine.createSpy('remove listener');\n    vm = new Vue({\n      el,\n      methods: {\n        foo: spy,\n        bar: spy2\n      },\n      data: {\n        ok: true\n      },\n      components: {\n        test: {\n          template: '<div></div>'\n        }\n      },\n\n      render(h) {\n        return this.ok ? h('test', {\n          on: {\n            foo: this.foo\n          }\n        }) : h('test', {\n          on: {\n            bar: this.bar\n          }\n        });\n      }\n\n    });\n    vm.$children[0].$emit('foo');\n    expect(spy.calls.count()).toBe(1);\n    expect(spy2.calls.count()).toBe(0);\n    vm.ok = false;\n    waitForUpdate(() => {\n      vm.$children[0].$emit('foo');\n      expect(spy.calls.count()).toBe(1); // should no longer trigger\n\n      vm.$children[0].$emit('bar');\n      expect(spy2.calls.count()).toBe(1);\n    }).then(done);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"warn missing handlers","suites":["Directive v-on"],"line":593,"updatePoint":{"line":593,"column":27,"index":14505},"code":"  it('warn missing handlers', () => {\n    vm = new Vue({\n      el,\n      data: {\n        none: null\n      },\n      template: `<div @click=\"none\"></div>`\n    });\n    expect(`Invalid handler for event \"click\": got null`).toHaveBeenWarned();\n    expect(() => {\n      triggerEvent(vm.$el, 'click');\n    }).not.toThrow();\n  }); // Github Issue #5046","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support keyboard modifier","suites":["Directive v-on"],"line":607,"updatePoint":{"line":607,"column":38,"index":14862},"code":"  it('should support keyboard modifier', () => {\n    const spyLeft = jasmine.createSpy();\n    const spyRight = jasmine.createSpy();\n    const spyUp = jasmine.createSpy();\n    const spyDown = jasmine.createSpy();\n    vm = new Vue({\n      el,\n      template: `\n        <div>\n          <input ref=\"left\" @keydown.left=\"foo\"></input>\n          <input ref=\"right\" @keydown.right=\"foo1\"></input>\n          <input ref=\"up\" @keydown.up=\"foo2\"></input>\n          <input ref=\"down\" @keydown.down=\"foo3\"></input>\n        </div>\n      `,\n      methods: {\n        foo: spyLeft,\n        foo1: spyRight,\n        foo2: spyUp,\n        foo3: spyDown\n      }\n    });\n    triggerEvent(vm.$refs.left, 'keydown', e => {\n      e.keyCode = 37;\n    });\n    triggerEvent(vm.$refs.left, 'keydown', e => {\n      e.keyCode = 39;\n    });\n    triggerEvent(vm.$refs.right, 'keydown', e => {\n      e.keyCode = 39;\n    });\n    triggerEvent(vm.$refs.right, 'keydown', e => {\n      e.keyCode = 38;\n    });\n    triggerEvent(vm.$refs.up, 'keydown', e => {\n      e.keyCode = 38;\n    });\n    triggerEvent(vm.$refs.up, 'keydown', e => {\n      e.keyCode = 37;\n    });\n    triggerEvent(vm.$refs.down, 'keydown', e => {\n      e.keyCode = 40;\n    });\n    triggerEvent(vm.$refs.down, 'keydown', e => {\n      e.keyCode = 39;\n    });\n    expect(spyLeft.calls.count()).toBe(1);\n    expect(spyRight.calls.count()).toBe(1);\n    expect(spyUp.calls.count()).toBe(1);\n    expect(spyDown.calls.count()).toBe(1);\n  }); // This test case should only run when the test browser supports passive.","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should support passive","suites":["Directive v-on"],"line":660,"updatePoint":{"line":660,"column":30,"index":16417},"code":"    it('should support passive', () => {\n      vm = new Vue({\n        el,\n        template: `\n          <div>\n            <input type=\"checkbox\" ref=\"normal\" @click=\"foo\"/>\n            <input type=\"checkbox\" ref=\"passive\" @click.passive=\"foo\"/>\n            <input type=\"checkbox\" ref=\"exclusive\" @click.prevent.passive/>\n          </div>\n        `,\n        methods: {\n          foo(e) {\n            e.preventDefault();\n          }\n\n        }\n      });\n      vm.$refs.normal.checked = false;\n      vm.$refs.passive.checked = false;\n      vm.$refs.exclusive.checked = false;\n      vm.$refs.normal.click();\n      vm.$refs.passive.click();\n      vm.$refs.exclusive.click();\n      expect(vm.$refs.normal.checked).toBe(false);\n      expect(vm.$refs.passive.checked).toBe(true);\n      expect(vm.$refs.exclusive.checked).toBe(true);\n      expect('passive and prevent can\\'t be used together. Passive handler can\\'t prevent default event.').toHaveBeenWarned();\n    });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should only prevent when match keycode","suites":["Directive v-on"],"line":691,"updatePoint":{"line":691,"column":44,"index":17420},"code":"  it('should only prevent when match keycode', () => {\n    let prevented = false;\n    vm = new Vue({\n      el,\n      template: `\n        <input ref=\"input\" @keydown.enter.prevent=\"foo\">\n      `,\n      methods: {\n        foo($event) {\n          prevented = $event.defaultPrevented;\n        }\n\n      }\n    });\n    triggerEvent(vm.$refs.input, 'keydown', e => {\n      e.keyCode = 32;\n    });\n    expect(prevented).toBe(false);\n    triggerEvent(vm.$refs.input, 'keydown', e => {\n      e.keyCode = 13;\n    });\n    expect(prevented).toBe(true);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should warn click.right","suites":["Directive v-on"],"line":714,"updatePoint":{"line":714,"column":29,"index":17950},"code":"  it('should warn click.right', () => {\n    new Vue({\n      template: `<div @click.right=\"foo\"></div>`,\n      methods: {\n        foo() {}\n\n      }\n    }).$mount();\n    expect(`Use \"contextmenu\" instead`).toHaveBeenWarned();\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"object syntax (no argument)","suites":["Directive v-on"],"line":724,"updatePoint":{"line":724,"column":33,"index":18184},"code":"  it('object syntax (no argument)', () => {\n    const click = jasmine.createSpy('click');\n    const mouseup = jasmine.createSpy('mouseup');\n    vm = new Vue({\n      el,\n      template: `<button v-on=\"listeners\">foo</button>`,\n\n      created() {\n        this.listeners = {\n          click,\n          mouseup\n        };\n      }\n\n    });\n    triggerEvent(vm.$el, 'click');\n    expect(click.calls.count()).toBe(1);\n    expect(mouseup.calls.count()).toBe(0);\n    triggerEvent(vm.$el, 'mouseup');\n    expect(click.calls.count()).toBe(1);\n    expect(mouseup.calls.count()).toBe(1);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"object syntax (no argument, mixed with normal listeners)","suites":["Directive v-on"],"line":746,"updatePoint":{"line":746,"column":62,"index":18794},"code":"  it('object syntax (no argument, mixed with normal listeners)', () => {\n    const click1 = jasmine.createSpy('click1');\n    const click2 = jasmine.createSpy('click2');\n    const mouseup = jasmine.createSpy('mouseup');\n    vm = new Vue({\n      el,\n      template: `<button v-on=\"listeners\" @click=\"click2\">foo</button>`,\n\n      created() {\n        this.listeners = {\n          click: click1,\n          mouseup\n        };\n      },\n\n      methods: {\n        click2\n      }\n    });\n    triggerEvent(vm.$el, 'click');\n    expect(click1.calls.count()).toBe(1);\n    expect(click2.calls.count()).toBe(1);\n    expect(mouseup.calls.count()).toBe(0);\n    triggerEvent(vm.$el, 'mouseup');\n    expect(click1.calls.count()).toBe(1);\n    expect(click2.calls.count()).toBe(1);\n    expect(mouseup.calls.count()).toBe(1);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"object syntax (usage in HOC, mixed with native listners)","suites":["Directive v-on"],"line":774,"updatePoint":{"line":774,"column":62,"index":19605},"code":"  it('object syntax (usage in HOC, mixed with native listners)', () => {\n    const click = jasmine.createSpy('click');\n    const mouseup = jasmine.createSpy('mouseup');\n    const mousedown = jasmine.createSpy('mousedown');\n    var vm = new Vue({\n      el,\n      template: `\n        <foo-button\n          @click=\"click\"\n          @mousedown=\"mousedown\"\n          @mouseup.native=\"mouseup\">\n        </foo-button>\n      `,\n      methods: {\n        click,\n        mouseup,\n        mousedown\n      },\n      components: {\n        fooButton: {\n          template: `\n            <button v-on=\"$listeners\"></button>\n          `\n        }\n      }\n    });\n    triggerEvent(vm.$el, 'click');\n    expect(click.calls.count()).toBe(1);\n    expect(mouseup.calls.count()).toBe(0);\n    expect(mousedown.calls.count()).toBe(0);\n    triggerEvent(vm.$el, 'mouseup');\n    expect(click.calls.count()).toBe(1);\n    expect(mouseup.calls.count()).toBe(1);\n    expect(mousedown.calls.count()).toBe(0);\n    triggerEvent(vm.$el, 'mousedown');\n    expect(click.calls.count()).toBe(1);\n    expect(mouseup.calls.count()).toBe(1);\n    expect(mousedown.calls.count()).toBe(1);\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"warn object syntax with modifier","suites":["Directive v-on"],"line":813,"updatePoint":{"line":813,"column":38,"index":20730},"code":"  it('warn object syntax with modifier', () => {\n    new Vue({\n      template: `<button v-on.self=\"{}\"></button>`\n    }).$mount();\n    expect(`v-on without argument does not support modifiers`).toHaveBeenWarned();\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"warn object syntax with non-object value","suites":["Directive v-on"],"line":819,"updatePoint":{"line":819,"column":46,"index":20958},"code":"  it('warn object syntax with non-object value', () => {\n    new Vue({\n      template: `<button v-on=\"123\"></button>`\n    }).$mount();\n    expect(`v-on without argument expects an Object value`).toHaveBeenWarned();\n  });","file":"unit/features/directives/on.spec.js","skipped":false,"dir":"test"},{"name":"should not rerender component","suites":["Directive v-once"],"line":3,"updatePoint":{"line":3,"column":35,"index":96},"code":"  it('should not rerender component', done => {\n    const vm = new Vue({\n      template: '<div v-once>{{ a }}</div>',\n      data: {\n        a: 'hello'\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('hello');\n    vm.a = 'world';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('hello');\n    }).then(done);\n  });","file":"unit/features/directives/once.spec.js","skipped":false,"dir":"test"},{"name":"should not rerender self and child component","suites":["Directive v-once"],"line":16,"updatePoint":{"line":16,"column":50,"index":448},"code":"  it('should not rerender self and child component', done => {\n    const vm = new Vue({\n      template: `\n        <div v-once>\n          <span>{{ a }}</span>\n          <item :b=\"a\"></item>\n        </div>`,\n      data: {\n        a: 'hello'\n      },\n      components: {\n        item: {\n          template: '<div>{{ b }}</div>',\n          props: ['b']\n        }\n      }\n    }).$mount();\n    expect(vm.$children.length).toBe(1);\n    expect(vm.$el.innerHTML).toBe('<span>hello</span> <div>hello</div>');\n    vm.a = 'world';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>hello</span> <div>hello</div>');\n    }).then(done);\n  });","file":"unit/features/directives/once.spec.js","skipped":false,"dir":"test"},{"name":"should rerender parent but not self","suites":["Directive v-once"],"line":40,"updatePoint":{"line":40,"column":41,"index":1085},"code":"  it('should rerender parent but not self', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span>{{ a }}</span>\n          <item v-once :b=\"a\"></item>\n        </div>`,\n      data: {\n        a: 'hello'\n      },\n      components: {\n        item: {\n          template: '<div>{{ b }}</div>',\n          props: ['b']\n        }\n      }\n    }).$mount();\n    expect(vm.$children.length).toBe(1);\n    expect(vm.$el.innerHTML).toBe('<span>hello</span> <div>hello</div>');\n    vm.a = 'world';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>world</span> <div>hello</div>');\n    }).then(done);\n  });","file":"unit/features/directives/once.spec.js","skipped":false,"dir":"test"},{"name":"should not rerender static sub nodes","suites":["Directive v-once"],"line":64,"updatePoint":{"line":64,"column":42,"index":1723},"code":"  it('should not rerender static sub nodes', done => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <span v-once>{{ a }}</span>\n          <item :b=\"a\"></item>\n          <span>{{ suffix }}</span>\n        </div>`,\n      data: {\n        a: 'hello',\n        suffix: '?'\n      },\n      components: {\n        item: {\n          template: '<div>{{ b }}</div>',\n          props: ['b']\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>hello</span> <div>hello</div> <span>?</span>');\n    vm.a = 'world';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>hello</span> <div>world</div> <span>?</span>');\n      vm.suffix = '!';\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>hello</span> <div>world</div> <span>!</span>');\n    }).then(done);\n  });","file":"unit/features/directives/once.spec.js","skipped":false,"dir":"test"},{"name":"should work with v-if","suites":["Directive v-once"],"line":92,"updatePoint":{"line":92,"column":27,"index":2526},"code":"  it('should work with v-if', done => {\n    const vm = new Vue({\n      data: {\n        tester: true,\n        yes: 'y',\n        no: 'n'\n      },\n      template: `\n        <div>\n          <div v-if=\"tester\">{{ yes }}</div>\n          <div v-else>{{ no }}</div>\n          <div v-if=\"tester\" v-once>{{ yes }}</div>\n          <div v-else>{{ no }}</div>\n          <div v-if=\"tester\">{{ yes }}</div>\n          <div v-else v-once>{{ no }}</div>\n          <div v-if=\"tester\" v-once>{{ yes }}</div>\n          <div v-else v-once>{{ no }}</div>\n        </div>\n      `\n    }).$mount();\n    expectTextContent(vm, 'yyyy');\n    vm.yes = 'yes';\n    waitForUpdate(() => {\n      expectTextContent(vm, 'yesyyesy');\n      vm.tester = false;\n    }).then(() => {\n      expectTextContent(vm, 'nnnn');\n      vm.no = 'no';\n    }).then(() => {\n      expectTextContent(vm, 'nononn');\n    }).then(done);\n  });","file":"unit/features/directives/once.spec.js","skipped":false,"dir":"test"},{"name":"should work with v-for","suites":["Directive v-once"],"line":124,"updatePoint":{"line":124,"column":28,"index":3407},"code":"  it('should work with v-for', done => {\n    const vm = new Vue({\n      data: {\n        list: [1, 2, 3]\n      },\n      template: `<div><div v-for=\"i in list\" v-once>{{i}}</div></div>`\n    }).$mount();\n    expect(vm.$el.textContent).toBe('123');\n    vm.list.reverse();\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('123');\n    }).then(done);\n  });","file":"unit/features/directives/once.spec.js","skipped":false,"dir":"test"},{"name":"should work inside v-for","suites":["Directive v-once"],"line":137,"updatePoint":{"line":137,"column":30,"index":3774},"code":"  it('should work inside v-for', done => {\n    const vm = new Vue({\n      data: {\n        list: [{\n          id: 0,\n          text: 'a'\n        }, {\n          id: 1,\n          text: 'b'\n        }, {\n          id: 2,\n          text: 'c'\n        }]\n      },\n      template: `\n        <div>\n          <div v-for=\"i in list\" :key=\"i.id\">\n            <div>\n              <span v-once>{{ i.text }}</span><span>{{ i.text }}</span>\n            </div>\n          </div>\n        </div>\n      `\n    }).$mount();\n    expect(vm.$el.textContent).toBe('aabbcc');\n    vm.list[0].text = 'd';\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('adbbcc');\n      vm.list[1].text = 'e';\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('adbecc');\n      vm.list.reverse();\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('ccbead');\n    }).then(done);\n  });","file":"unit/features/directives/once.spec.js","skipped":false,"dir":"test"},{"name":"should work inside v-for with v-if","suites":["Directive v-once"],"line":173,"updatePoint":{"line":173,"column":40,"index":4650},"code":"  it('should work inside v-for with v-if', done => {\n    const vm = new Vue({\n      data: {\n        list: [{\n          id: 0,\n          text: 'a',\n          tester: true,\n          truthy: 'y'\n        }]\n      },\n      template: `\n        <div>\n          <div v-for=\"i in list\" :key=\"i.id\">\n              <span v-if=\"i.tester\" v-once>{{ i.truthy }}</span>\n              <span v-else v-once>{{ i.text }}</span>\n              <span v-if=\"i.tester\" v-once>{{ i.truthy }}</span>\n              <span v-else>{{ i.text }}</span>\n              <span v-if=\"i.tester\">{{ i.truthy }}</span>\n              <span v-else v-once>{{ i.text }}</span>\n              <span v-if=\"i.tester\">{{ i.truthy }}</span>\n              <span v-else>{{ i.text }}</span>\n          </div>\n        </div>\n      `\n    }).$mount();\n    expectTextContent(vm, 'yyyy');\n    vm.list[0].truthy = 'yy';\n    waitForUpdate(() => {\n      expectTextContent(vm, 'yyyyyy');\n      vm.list[0].tester = false;\n    }).then(() => {\n      expectTextContent(vm, 'aaaa');\n      vm.list[0].text = 'nn';\n    }).then(() => {\n      expectTextContent(vm, 'annann');\n    }).then(done);\n  });","file":"unit/features/directives/once.spec.js","skipped":false,"dir":"test"},{"name":"should work inside v-for with nested v-else","suites":["Directive v-once"],"line":210,"updatePoint":{"line":210,"column":49,"index":5789},"code":"  it('should work inside v-for with nested v-else', done => {\n    const vm = new Vue({\n      data: {\n        list: [{\n          id: 0,\n          text: 'a',\n          tester: true,\n          truthy: 'y'\n        }]\n      },\n      template: `\n        <div v-if=\"0\"></div>\n        <div v-else>\n          <div v-for=\"i in list\" :key=\"i.id\">\n            <span v-if=\"i.tester\" v-once>{{ i.truthy }}</span>\n            <span v-else v-once>{{ i.text }}</span>\n          </div>\n        </div>\n      `\n    }).$mount();\n    expectTextContent(vm, 'y');\n    vm.list[0].truthy = 'yy';\n    waitForUpdate(() => {\n      expectTextContent(vm, 'y');\n      vm.list[0].tester = false;\n    }).then(() => {\n      expectTextContent(vm, 'a');\n      vm.list[0].text = 'nn';\n    }).then(() => {\n      expectTextContent(vm, 'a');\n    }).then(done);\n  });","file":"unit/features/directives/once.spec.js","skipped":false,"dir":"test"},{"name":"should work inside v-for with nested v-else-if and v-else","suites":["Directive v-once"],"line":242,"updatePoint":{"line":242,"column":63,"index":6629},"code":"  it('should work inside v-for with nested v-else-if and v-else', done => {\n    const vm = new Vue({\n      data: {\n        tester: false,\n        list: [{\n          id: 0,\n          text: 'a',\n          tester: true,\n          truthy: 'y'\n        }]\n      },\n      template: `\n        <div v-if=\"0\"></div>\n        <div v-else-if=\"tester\">\n          <div v-for=\"i in list\" :key=\"i.id\">\n            <span v-if=\"i.tester\" v-once>{{ i.truthy }}</span>\n            <span v-else-if=\"tester\" v-once>{{ i.text }}elseif</span>\n            <span v-else v-once>{{ i.text }}</span>\n          </div>\n        </div>\n        <div v-else>\n          <div v-for=\"i in list\" :key=\"i.id\">\n            <span v-if=\"i.tester\" v-once>{{ i.truthy }}</span>\n            <span v-else-if=\"tester\">{{ i.text }}elseif</span>\n            <span v-else v-once>{{ i.text }}</span>\n          </div>\n        </div>\n      `\n    }).$mount();\n    expectTextContent(vm, 'y');\n    vm.list[0].truthy = 'yy';\n    waitForUpdate(() => {\n      expectTextContent(vm, 'y');\n      vm.list[0].tester = false;\n    }).then(() => {\n      expectTextContent(vm, 'a');\n      vm.list[0].text = 'nn';\n    }).then(() => {\n      expectTextContent(vm, 'a');\n      vm.tester = true;\n    }).then(() => {\n      expectTextContent(vm, 'nnelseif');\n      vm.list[0].text = 'xx';\n    }).then(() => {\n      expectTextContent(vm, 'nnelseif');\n      vm.list[0].tester = true;\n    }).then(() => {\n      expectTextContent(vm, 'yy');\n      vm.list[0].truthy = 'nn';\n    }).then(() => {\n      expectTextContent(vm, 'yy');\n    }).then(done);\n  });","file":"unit/features/directives/once.spec.js","skipped":false,"dir":"test"},{"name":"should warn inside non-keyed v-for","suites":["Directive v-once"],"line":295,"updatePoint":{"line":295,"column":40,"index":8178},"code":"  it('should warn inside non-keyed v-for', () => {\n    const vm = new Vue({\n      data: {\n        list: [{\n          id: 0,\n          text: 'a'\n        }, {\n          id: 1,\n          text: 'b'\n        }, {\n          id: 2,\n          text: 'c'\n        }]\n      },\n      template: `\n        <div>\n          <div v-for=\"i in list\">\n            <span v-once>{{ i.text }}</span><span>{{ i.text }}</span>\n          </div>\n        </div>\n      `\n    }).$mount();\n    expect(vm.$el.textContent).toBe('aabbcc');\n    expect(`v-once can only be used inside v-for that is keyed.`).toHaveBeenWarned();\n  }); // #4288","file":"unit/features/directives/once.spec.js","skipped":false,"dir":"test"},{"name":"should inherit child reference for v-once","suites":["Directive v-once"],"line":321,"updatePoint":{"line":321,"column":47,"index":8791},"code":"  it('should inherit child reference for v-once', done => {\n    const vm = new Vue({\n      template: `<div>{{a}}<test v-if=\"ok\" v-once></test></div>`,\n      data: {\n        a: 0,\n        ok: true\n      },\n      components: {\n        test: {\n          template: '<div>foo</div>'\n        }\n      }\n    }).$mount();\n    vm.a++; // first update to force a patch\n\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('1foo');\n    }).then(() => {\n      vm.ok = false; // teardown component with v-once\n    }).then(done); // should not throw\n  });","file":"unit/features/directives/once.spec.js","skipped":false,"dir":"test"},{"name":"should not compile inner content","suites":["Directive v-pre"],"line":3,"updatePoint":{"line":3,"column":38,"index":104},"code":"  it('should not compile inner content', function () {\n    const vm = new Vue({\n      template: `<div>\n        <div v-pre>{{ a }}</div>\n        <div>{{ a }}</div>\n        <div v-pre>\n          <component></component>\n        </div>\n      </div>`,\n      data: {\n        a: 123\n      }\n    });\n    vm.$mount();\n    expect(vm.$el.firstChild.textContent).toBe('{{ a }}');\n    expect(vm.$el.children[1].textContent).toBe('123');\n    expect(vm.$el.lastChild.innerHTML).toBe('<component></component>');\n  });","file":"unit/features/directives/pre.spec.js","skipped":false,"dir":"test"},{"name":"should not compile on root node","suites":["Directive v-pre"],"line":21,"updatePoint":{"line":21,"column":37,"index":605},"code":"  it('should not compile on root node', function () {\n    const vm = new Vue({\n      template: '<div v-pre>{{ a }}</div>',\n      replace: true,\n      data: {\n        a: 123\n      }\n    });\n    vm.$mount();\n    expect(vm.$el.firstChild.textContent).toBe('{{ a }}');\n  });","file":"unit/features/directives/pre.spec.js","skipped":false,"dir":"test"},{"name":"should check show value is truthy","suites":["Directive v-show"],"line":3,"updatePoint":{"line":3,"column":39,"index":100},"code":"  it('should check show value is truthy', () => {\n    const vm = new Vue({\n      template: '<div><span v-show=\"foo\">hello</span></div>',\n      data: {\n        foo: true\n      }\n    }).$mount();\n    expect(vm.$el.firstChild.style.display).toBe('');\n  });","file":"unit/features/directives/show.spec.js","skipped":false,"dir":"test"},{"name":"should check show value is falsy","suites":["Directive v-show"],"line":12,"updatePoint":{"line":12,"column":38,"index":353},"code":"  it('should check show value is falsy', () => {\n    const vm = new Vue({\n      template: '<div><span v-show=\"foo\">hello</span></div>',\n      data: {\n        foo: false\n      }\n    }).$mount();\n    expect(vm.$el.firstChild.style.display).toBe('none');\n  });","file":"unit/features/directives/show.spec.js","skipped":false,"dir":"test"},{"name":"should update show value changed","suites":["Directive v-show"],"line":21,"updatePoint":{"line":21,"column":38,"index":611},"code":"  it('should update show value changed', done => {\n    const vm = new Vue({\n      template: '<div><span v-show=\"foo\">hello</span></div>',\n      data: {\n        foo: true\n      }\n    }).$mount();\n    expect(vm.$el.firstChild.style.display).toBe('');\n    vm.foo = false;\n    waitForUpdate(() => {\n      expect(vm.$el.firstChild.style.display).toBe('none');\n      vm.foo = {};\n    }).then(() => {\n      expect(vm.$el.firstChild.style.display).toBe('');\n      vm.foo = 0;\n    }).then(() => {\n      expect(vm.$el.firstChild.style.display).toBe('none');\n      vm.foo = [];\n    }).then(() => {\n      expect(vm.$el.firstChild.style.display).toBe('');\n      vm.foo = null;\n    }).then(() => {\n      expect(vm.$el.firstChild.style.display).toBe('none');\n      vm.foo = '0';\n    }).then(() => {\n      expect(vm.$el.firstChild.style.display).toBe('');\n      vm.foo = undefined;\n    }).then(() => {\n      expect(vm.$el.firstChild.style.display).toBe('none');\n      vm.foo = 1;\n    }).then(() => {\n      expect(vm.$el.firstChild.style.display).toBe('');\n    }).then(done);\n  });","file":"unit/features/directives/show.spec.js","skipped":false,"dir":"test"},{"name":"should respect display value in style attribute","suites":["Directive v-show"],"line":55,"updatePoint":{"line":55,"column":53,"index":1691},"code":"  it('should respect display value in style attribute', done => {\n    const vm = new Vue({\n      template: '<div><span v-show=\"foo\" style=\"display:block\">hello</span></div>',\n      data: {\n        foo: true\n      }\n    }).$mount();\n    expect(vm.$el.firstChild.style.display).toBe('block');\n    vm.foo = false;\n    waitForUpdate(() => {\n      expect(vm.$el.firstChild.style.display).toBe('none');\n      vm.foo = true;\n    }).then(() => {\n      expect(vm.$el.firstChild.style.display).toBe('block');\n    }).then(done);\n  });","file":"unit/features/directives/show.spec.js","skipped":false,"dir":"test"},{"name":"should support unbind when reused","suites":["Directive v-show"],"line":71,"updatePoint":{"line":71,"column":39,"index":2201},"code":"  it('should support unbind when reused', done => {\n    const vm = new Vue({\n      template: '<div v-if=\"tester\"><span v-show=\"false\"></span></div>' + '<div v-else><span @click=\"tester=!tester\">show</span></div>',\n      data: {\n        tester: true\n      }\n    }).$mount();\n    expect(vm.$el.firstChild.style.display).toBe('none');\n    vm.tester = false;\n    waitForUpdate(() => {\n      expect(vm.$el.firstChild.style.display).toBe('');\n      vm.tester = true;\n    }).then(() => {\n      expect(vm.$el.firstChild.style.display).toBe('none');\n    }).then(done);\n  });","file":"unit/features/directives/show.spec.js","skipped":false,"dir":"test"},{"name":"should parse normal static style","suites":[],"line":4,"updatePoint":{"line":4,"column":36,"index":311},"code":"it('should parse normal static style', () => {\n  const staticStyle = `font-size: 12px;background: ${logoUrl};color:red`;\n  const res = parseStyleText(staticStyle);\n  expect(res.background).toBe(logoUrl);\n  expect(res.color).toBe('red');\n  expect(res['font-size']).toBe('12px');\n});","file":"unit/features/directives/static-style-parser.spec.js","skipped":false,"dir":"test"},{"name":"should parse base64 background","suites":[],"line":11,"updatePoint":{"line":11,"column":34,"index":591},"code":"it('should parse base64 background', () => {\n  const staticStyle = `background: ${base64ImgUrl}`;\n  const res = parseStyleText(staticStyle);\n  expect(res.background).toBe(base64ImgUrl);\n});","file":"unit/features/directives/static-style-parser.spec.js","skipped":false,"dir":"test"},{"name":"should parse multiple background images ","suites":[],"line":16,"updatePoint":{"line":16,"column":44,"index":791},"code":"it('should parse multiple background images ', () => {\n  let staticStyle = `background: ${logoUrl}, ${logoUrl};`;\n  let res = parseStyleText(staticStyle);\n  expect(res.background).toBe(`${logoUrl}, ${logoUrl}`);\n  staticStyle = `background: ${base64ImgUrl}, ${base64ImgUrl}`;\n  res = parseStyleText(staticStyle);\n  expect(res.background).toBe(`${base64ImgUrl}, ${base64ImgUrl}`);\n});","file":"unit/features/directives/static-style-parser.spec.js","skipped":false,"dir":"test"},{"name":"should parse other images ","suites":[],"line":24,"updatePoint":{"line":24,"column":30,"index":1161},"code":"it('should parse other images ', () => {\n  let staticStyle = `shape-outside: ${logoUrl}`;\n  let res = parseStyleText(staticStyle);\n  expect(res['shape-outside']).toBe(logoUrl);\n  staticStyle = `list-style-image: ${logoUrl}`;\n  res = parseStyleText(staticStyle);\n  expect(res['list-style-image']).toBe(logoUrl);\n  staticStyle = `border-image: ${logoUrl} 30 30 repeat`;\n  res = parseStyleText(staticStyle);\n  expect(res['border-image']).toBe(`${logoUrl} 30 30 repeat`);\n});","file":"unit/features/directives/static-style-parser.spec.js","skipped":false,"dir":"test"},{"name":"string","suites":["Directive v-bind:style"],"line":36,"updatePoint":{"line":36,"column":12,"index":675},"code":"  it('string', done => {\n    vm.styles = 'color:red;';\n    waitForUpdate(() => {\n      expect(vm.$el.style.cssText.replace(/\\s/g, '')).toBe('color:red;');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"falsy number","suites":["Directive v-bind:style"],"line":42,"updatePoint":{"line":42,"column":18,"index":861},"code":"  it('falsy number', done => {\n    vm.styles = {\n      opacity: 0\n    };\n    waitForUpdate(() => {\n      expect(vm.$el.style.opacity).toBe('0');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"plain object","suites":["Directive v-bind:style"],"line":50,"updatePoint":{"line":50,"column":18,"index":1031},"code":"  it('plain object', done => {\n    vm.styles = {\n      color: 'red'\n    };\n    waitForUpdate(() => {\n      expect(vm.$el.style.cssText.replace(/\\s/g, '')).toBe('color:red;');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"camelCase","suites":["Directive v-bind:style"],"line":58,"updatePoint":{"line":58,"column":15,"index":1228},"code":"  it('camelCase', done => {\n    vm.styles = {\n      marginRight: '10px'\n    };\n    waitForUpdate(() => {\n      expect(vm.$el.style.marginRight).toBe('10px');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"remove if falsy value","suites":["Directive v-bind:style"],"line":66,"updatePoint":{"line":66,"column":27,"index":1423},"code":"  it('remove if falsy value', done => {\n    vm.$el.style.color = 'red';\n    waitForUpdate(() => {\n      vm.styles = {\n        color: null\n      };\n    }).then(() => {\n      expect(vm.$el.style.color).toBe('');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"ignore unsupported property","suites":["Directive v-bind:style"],"line":76,"updatePoint":{"line":76,"column":33,"index":1664},"code":"  it('ignore unsupported property', done => {\n    vm.styles = {\n      foo: 'bar'\n    };\n    waitForUpdate(() => {\n      expect(vm.$el.style.foo).not.toBe('bar');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"auto prefix","suites":["Directive v-bind:style"],"line":84,"updatePoint":{"line":84,"column":17,"index":1835},"code":"  it('auto prefix', done => {\n    const prop = checkPrefixedProp('transform');\n    const val = 'scale(0.5)';\n    vm.styles = {\n      transform: val\n    };\n    waitForUpdate(() => {\n      expect(vm.$el.style[prop]).toBe(val);\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"auto-prefixed style value as array","suites":["Directive v-bind:style"],"line":94,"updatePoint":{"line":94,"column":40,"index":2108},"code":"  it('auto-prefixed style value as array', done => {\n    vm.styles = {\n      display: ['-webkit-box', '-ms-flexbox', 'flex']\n    };\n    const testEl = document.createElement('div');\n    vm.styles.display.forEach(value => {\n      testEl.style.display = value;\n    });\n    waitForUpdate(() => {\n      expect(vm.$el.style.display).toBe(testEl.style.display);\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"!important","suites":["Directive v-bind:style"],"line":106,"updatePoint":{"line":106,"column":16,"index":2465},"code":"  it('!important', done => {\n    vm.styles = {\n      display: 'block !important'\n    };\n    waitForUpdate(() => {\n      expect(vm.$el.style.getPropertyPriority('display')).toBe('important');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"object with multiple entries","suites":["Directive v-bind:style"],"line":114,"updatePoint":{"line":114,"column":34,"index":2699},"code":"  it('object with multiple entries', done => {\n    vm.$el.style.color = 'red';\n    vm.styles = {\n      marginLeft: '10px',\n      marginRight: '15px'\n    };\n    waitForUpdate(() => {\n      expect(vm.$el.style.getPropertyValue('color')).toBe('red');\n      expect(vm.$el.style.getPropertyValue('margin-left')).toBe('10px');\n      expect(vm.$el.style.getPropertyValue('margin-right')).toBe('15px');\n      vm.styles = {\n        color: 'blue',\n        padding: null\n      };\n    }).then(() => {\n      expect(vm.$el.style.getPropertyValue('color')).toBe('blue');\n      expect(vm.$el.style.getPropertyValue('padding')).toBeFalsy();\n      expect(vm.$el.style.getPropertyValue('margin-left')).toBeFalsy();\n      expect(vm.$el.style.getPropertyValue('margin-right')).toBeFalsy(); // handle falsy value\n\n      vm.styles = null;\n    }).then(() => {\n      expect(vm.$el.style.getPropertyValue('color')).toBeFalsy();\n      expect(vm.$el.style.getPropertyValue('padding')).toBeFalsy();\n      expect(vm.$el.style.getPropertyValue('margin-left')).toBeFalsy();\n      expect(vm.$el.style.getPropertyValue('margin-right')).toBeFalsy();\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"array of objects","suites":["Directive v-bind:style"],"line":142,"updatePoint":{"line":142,"column":22,"index":3827},"code":"  it('array of objects', done => {\n    vm.$el.style.padding = '10px';\n    vm.styles = [{\n      color: 'red'\n    }, {\n      marginRight: '20px'\n    }];\n    waitForUpdate(() => {\n      expect(vm.$el.style.getPropertyValue('color')).toBe('red');\n      expect(vm.$el.style.getPropertyValue('margin-right')).toBe('20px');\n      expect(vm.$el.style.getPropertyValue('padding')).toBe('10px');\n      vm.styles = [{\n        color: 'blue'\n      }, {\n        padding: null\n      }];\n    }).then(() => {\n      expect(vm.$el.style.getPropertyValue('color')).toBe('blue');\n      expect(vm.$el.style.getPropertyValue('margin-right')).toBeFalsy();\n      expect(vm.$el.style.getPropertyValue('padding')).toBeFalsy();\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"updates objects deeply","suites":["Directive v-bind:style"],"line":164,"updatePoint":{"line":164,"column":28,"index":4558},"code":"  it('updates objects deeply', done => {\n    vm.styles = {\n      display: 'none'\n    };\n    waitForUpdate(() => {\n      expect(vm.$el.style.display).toBe('none');\n      vm.styles.display = 'block';\n    }).then(() => {\n      expect(vm.$el.style.display).toBe('block');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"background size with only one value","suites":["Directive v-bind:style"],"line":175,"updatePoint":{"line":175,"column":41,"index":4864},"code":"  it('background size with only one value', done => {\n    vm.styles = {\n      backgroundSize: '100%'\n    };\n    waitForUpdate(() => {\n      expect(vm.$el.style.cssText.replace(/\\s/g, '')).toMatch(/background-size:100%(auto)?;/);\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"should work with interpolation","suites":["Directive v-bind:style"],"line":183,"updatePoint":{"line":183,"column":36,"index":5113},"code":"  it('should work with interpolation', done => {\n    vm.styles = {\n      fontSize: `${vm.fontSize}px`\n    };\n    waitForUpdate(() => {\n      expect(vm.$el.style.fontSize).toBe('16px');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"CSS variables","suites":["Directive v-bind:style"],"line":199,"updatePoint":{"line":199,"column":21,"index":5531},"code":"    it('CSS variables', done => {\n      vm.styles = {\n        '--color': 'red'\n      };\n      waitForUpdate(() => {\n        expect(vm.$el.style.getPropertyValue('--color')).toBe('red');\n      }).then(done);\n    });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"should merge static style with binding style","suites":["Directive v-bind:style"],"line":209,"updatePoint":{"line":209,"column":50,"index":5780},"code":"  it('should merge static style with binding style', () => {\n    const vm = new Vue({\n      template: '<div style=\"background: url(https://vuejs.org/images/logo.png);color: blue\" :style=\"test\"></div>',\n      data: {\n        test: {\n          color: 'red',\n          fontSize: '12px'\n        }\n      }\n    }).$mount();\n    const style = vm.$el.style;\n    expect(style.getPropertyValue('background-image')).toMatch('https://vuejs.org/images/logo.png');\n    expect(style.getPropertyValue('color')).toBe('red');\n    expect(style.getPropertyValue('font-size')).toBe('12px');\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"should merge between parent and child","suites":["Directive v-bind:style"],"line":224,"updatePoint":{"line":224,"column":43,"index":6349},"code":"  it('should merge between parent and child', done => {\n    const vm = new Vue({\n      template: '<child style=\"text-align: left;margin-right:20px\" :style=\"test\"></child>',\n      data: {\n        test: {\n          color: 'red',\n          fontSize: '12px'\n        }\n      },\n      components: {\n        child: {\n          template: '<div style=\"margin-right:10px;\" :style=\"{marginLeft: marginLeft}\"></div>',\n          data: () => ({\n            marginLeft: '16px'\n          })\n        }\n      }\n    }).$mount();\n    const style = vm.$el.style;\n    const child = vm.$children[0];\n    const css = style.cssText.replace(/\\s/g, '');\n    expect(css).toContain('margin-right:20px;');\n    expect(css).toContain('margin-left:16px;');\n    expect(css).toContain('text-align:left;');\n    expect(css).toContain('color:red;');\n    expect(css).toContain('font-size:12px;');\n    expect(style.color).toBe('red');\n    expect(style.marginRight).toBe('20px');\n    vm.test.color = 'blue';\n    waitForUpdate(() => {\n      expect(style.color).toBe('blue');\n      child.marginLeft = '30px';\n    }).then(() => {\n      expect(style.marginLeft).toBe('30px');\n      child.fontSize = '30px';\n    }).then(() => {\n      expect(style.fontSize).toBe('12px');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"should not pass to child root element","suites":["Directive v-bind:style"],"line":263,"updatePoint":{"line":263,"column":43,"index":7599},"code":"  it('should not pass to child root element', () => {\n    const vm = new Vue({\n      template: '<child :style=\"test\"></child>',\n      data: {\n        test: {\n          color: 'red',\n          fontSize: '12px'\n        }\n      },\n      components: {\n        child: {\n          template: '<div><nested ref=\"nested\" style=\"color: blue;text-align:left\"></nested></div>',\n          components: {\n            nested: {\n              template: '<div></div>'\n            }\n          }\n        }\n      }\n    }).$mount();\n    const style = vm.$el.style;\n    expect(style.color).toBe('red');\n    expect(style.textAlign).toBe('');\n    expect(style.fontSize).toBe('12px');\n    expect(vm.$children[0].$refs.nested.$el.style.color).toBe('blue');\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"should merge between nested components","suites":["Directive v-bind:style"],"line":289,"updatePoint":{"line":289,"column":44,"index":8336},"code":"  it('should merge between nested components', done => {\n    const vm = new Vue({\n      template: '<child :style=\"test\"></child>',\n      data: {\n        test: {\n          color: 'red',\n          fontSize: '12px'\n        }\n      },\n      components: {\n        child: {\n          template: '<nested style=\"color: blue;text-align:left\"></nested>',\n          components: {\n            nested: {\n              template: '<div style=\"margin-left: 12px;\" :style=\"nestedStyle\"></div>',\n              data: () => ({\n                nestedStyle: {\n                  marginLeft: '30px'\n                }\n              })\n            }\n          }\n        }\n      }\n    }).$mount();\n    const style = vm.$el.style;\n    const child = vm.$children[0].$children[0];\n    expect(style.color).toBe('red');\n    expect(style.marginLeft).toBe('30px');\n    expect(style.textAlign).toBe('left');\n    expect(style.fontSize).toBe('12px');\n    vm.test.color = 'yellow';\n    waitForUpdate(() => {\n      child.nestedStyle.marginLeft = '60px';\n    }).then(() => {\n      expect(style.marginLeft).toBe('60px');\n      child.nestedStyle = {\n        fontSize: '14px',\n        marginLeft: '40px'\n      };\n    }).then(() => {\n      expect(style.fontSize).toBe('12px');\n      expect(style.marginLeft).toBe('40px');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"should not merge for different adjacent elements","suites":["Directive v-bind:style"],"line":334,"updatePoint":{"line":334,"column":54,"index":9649},"code":"  it('should not merge for different adjacent elements', done => {\n    const vm = new Vue({\n      template: '<div>' + '<section style=\"color: blue\" :style=\"style\" v-if=\"!bool\"></section>' + '<div></div>' + '<section style=\"margin-top: 12px\" v-if=\"bool\"></section>' + '</div>',\n      data: {\n        bool: false,\n        style: {\n          fontSize: '12px'\n        }\n      }\n    }).$mount();\n    const style = vm.$el.children[0].style;\n    expect(style.fontSize).toBe('12px');\n    expect(style.color).toBe('blue');\n    waitForUpdate(() => {\n      vm.bool = true;\n    }).then(() => {\n      expect(style.color).toBe('');\n      expect(style.fontSize).toBe('');\n      expect(style.marginTop).toBe('12px');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"should not merge for v-if, v-else-if and v-else elements","suites":["Directive v-bind:style"],"line":355,"updatePoint":{"line":355,"column":62,"index":10383},"code":"  it('should not merge for v-if, v-else-if and v-else elements', done => {\n    const vm = new Vue({\n      template: '<div>' + '<section style=\"color: blue\" :style=\"style\" v-if=\"foo\"></section>' + '<section style=\"margin-top: 12px\" v-else-if=\"bar\"></section>' + '<section style=\"margin-bottom: 24px\" v-else></section>' + '<div></div>' + '</div>',\n      data: {\n        foo: true,\n        bar: false,\n        style: {\n          fontSize: '12px'\n        }\n      }\n    }).$mount();\n    const style = vm.$el.children[0].style;\n    expect(style.fontSize).toBe('12px');\n    expect(style.color).toBe('blue');\n    waitForUpdate(() => {\n      vm.foo = false;\n    }).then(() => {\n      expect(style.color).toBe('');\n      expect(style.fontSize).toBe('');\n      expect(style.marginBottom).toBe('24px');\n      vm.bar = true;\n    }).then(() => {\n      expect(style.color).toBe('');\n      expect(style.fontSize).toBe('');\n      expect(style.marginBottom).toBe('');\n      expect(style.marginTop).toBe('12px');\n    }).then(done);\n  }); // #5318","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"should work for elements passed down as a slot","suites":["Directive v-bind:style"],"line":384,"updatePoint":{"line":384,"column":52,"index":11402},"code":"  it('should work for elements passed down as a slot', done => {\n    const vm = new Vue({\n      template: `<test><div :style=\"style\"/></test>`,\n      data: {\n        style: {\n          color: 'red'\n        }\n      },\n      components: {\n        test: {\n          template: `<div><slot/></div>`\n        }\n      }\n    }).$mount();\n    expect(vm.$el.children[0].style.color).toBe('red');\n    vm.style.color = 'green';\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].style.color).toBe('green');\n    }).then(done);\n  });","file":"unit/features/directives/style.spec.js","skipped":false,"dir":"test"},{"name":"should render text","suites":["Directive v-text"],"line":3,"updatePoint":{"line":3,"column":24,"index":85},"code":"  it('should render text', () => {\n    const vm = new Vue({\n      template: '<div v-text=\"a\"></div>',\n      data: {\n        a: 'hello'\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('hello');\n  });","file":"unit/features/directives/text.spec.js","skipped":false,"dir":"test"},{"name":"should encode html entities","suites":["Directive v-text"],"line":12,"updatePoint":{"line":12,"column":33,"index":304},"code":"  it('should encode html entities', () => {\n    const vm = new Vue({\n      template: '<div v-text=\"a\"></div>',\n      data: {\n        a: '<foo>'\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('&lt;foo&gt;');\n  });","file":"unit/features/directives/text.spec.js","skipped":false,"dir":"test"},{"name":"should support all value types","suites":["Directive v-text"],"line":21,"updatePoint":{"line":21,"column":36,"index":532},"code":"  it('should support all value types', done => {\n    const vm = new Vue({\n      template: '<div v-text=\"a\"></div>',\n      data: {\n        a: false\n      }\n    }).$mount();\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('false');\n      vm.a = [];\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('[]');\n      vm.a = {};\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('{}');\n      vm.a = 123;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('123');\n      vm.a = 0;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('0');\n      vm.a = ' ';\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe(' ');\n      vm.a = '    ';\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('    ');\n      vm.a = null;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('');\n      vm.a = undefined;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('');\n    }).then(done);\n  });","file":"unit/features/directives/text.spec.js","skipped":false,"dir":"test"},{"name":"should recover from errors in ","suites":["Error handling"],"line":8,"updatePoint":{"line":8,"column":45,"index":531},"code":"    it(`should recover from errors in ${type}`, done => {\n      const vm = createTestInstance(components[type]);\n      expect(`Error in ${description}`).toHaveBeenWarned();\n      expect(`Error: ${type}`).toHaveBeenWarned();\n      assertRootInstanceActive(vm).then(done);\n    });","file":"unit/features/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"should recover from errors in mounted hook","suites":["Error handling"],"line":16,"updatePoint":{"line":16,"column":48,"index":884},"code":"  it('should recover from errors in mounted hook', done => {\n    const vm = createTestInstance(components.mounted);\n    expect(`Error in mounted hook`).toHaveBeenWarned();\n    expect(`Error: mounted`).toHaveBeenWarned();\n    assertBothInstancesActive(vm).then(done);\n  }) // error in beforeUpdate/updated should affect neither child nor parent","file":"unit/features/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"should recover from errors in  hook","suites":["Error handling"],"line":24,"updatePoint":{"line":24,"column":50,"index":1391},"code":"    it(`should recover from errors in ${type} hook`, done => {\n      const vm = createTestInstance(components[type]);\n      assertBothInstancesActive(vm).then(() => {\n        expect(`Error in ${description}`).toHaveBeenWarned();\n        expect(`Error: ${type}`).toHaveBeenWarned();\n      }).then(done);\n    });","file":"unit/features/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"should recover from errors in  hook","suites":["Error handling"],"line":33,"updatePoint":{"line":33,"column":50,"index":1871},"code":"    it(`should recover from errors in ${type} hook`, done => {\n      const vm = createTestInstance(components[type]);\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(`Error in ${description}`).toHaveBeenWarned();\n        expect(`Error: ${type}`).toHaveBeenWarned();\n      }).thenWaitFor(next => {\n        assertRootInstanceActive(vm).end(next);\n      }).then(done);\n    });","file":"unit/features/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"should recover from errors in user watcher getter","suites":["Error handling"],"line":44,"updatePoint":{"line":44,"column":55,"index":2272},"code":"  it('should recover from errors in user watcher getter', done => {\n    const vm = createTestInstance(components.userWatcherGetter);\n    vm.n++;\n    waitForUpdate(() => {\n      expect(`Error in getter for watcher`).toHaveBeenWarned();\n\n      function getErrorMsg() {\n        try {\n          this.a.b.c;\n        } catch (e) {\n          return e.toString();\n        }\n      }\n\n      const msg = getErrorMsg.call(vm);\n      expect(msg).toHaveBeenWarned();\n    }).thenWaitFor(next => {\n      assertBothInstancesActive(vm).end(next);\n    }).then(done);\n  });","file":"unit/features/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"should recover from errors in user watcher callback","suites":["Error handling"],"line":64,"updatePoint":{"line":64,"column":57,"index":2828},"code":"  it('should recover from errors in user watcher callback', done => {\n    const vm = createTestInstance(components.userWatcherCallback);\n    vm.n++;\n    waitForUpdate(() => {\n      expect(`Error in callback for watcher \"n\"`).toHaveBeenWarned();\n      expect(`Error: userWatcherCallback`).toHaveBeenWarned();\n    }).thenWaitFor(next => {\n      assertBothInstancesActive(vm).end(next);\n    }).then(done);\n  });","file":"unit/features/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"config.errorHandler should capture errors","suites":["Error handling"],"line":74,"updatePoint":{"line":74,"column":47,"index":3227},"code":"  it('config.errorHandler should capture errors', done => {\n    const spy = Vue.config.errorHandler = jasmine.createSpy('errorHandler');\n    const vm = createTestInstance(components.render);\n    const args = spy.calls.argsFor(0);\n    expect(args[0].toString()).toContain('Error: render'); // error\n\n    expect(args[1]).toBe(vm.$refs.child); // vm\n\n    expect(args[2]).toContain('render function'); // description\n\n    assertRootInstanceActive(vm).then(() => {\n      Vue.config.errorHandler = null;\n    }).then(done);\n  });","file":"unit/features/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"should capture and recover from nextTick errors","suites":["Error handling"],"line":88,"updatePoint":{"line":88,"column":53,"index":3756},"code":"  it('should capture and recover from nextTick errors', done => {\n    const err1 = new Error('nextTick');\n    const err2 = new Error('nextTick2');\n    const spy = Vue.config.errorHandler = jasmine.createSpy('errorHandler');\n    Vue.nextTick(() => {\n      throw err1;\n    });\n    Vue.nextTick(() => {\n      expect(spy).toHaveBeenCalledWith(err1, undefined, 'nextTick');\n      const vm = new Vue();\n      vm.$nextTick(() => {\n        throw err2;\n      });\n      Vue.nextTick(() => {\n        // should be called with correct instance info\n        expect(spy).toHaveBeenCalledWith(err2, vm, 'nextTick');\n        Vue.config.errorHandler = null;\n        done();\n      });\n    });\n  });","file":"unit/features/error-handling.spec.js","skipped":false,"dir":"test"},{"name":"basic usage","suites":["Filters"],"line":4,"updatePoint":{"line":4,"column":17,"index":131},"code":"  it('basic usage', () => {\n    const vm = new Vue({\n      template: '<div>{{ msg | upper }}</div>',\n      data: {\n        msg: 'hi'\n      },\n      filters: {\n        upper: v => v.toUpperCase()\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('HI');\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"chained usage","suites":["Filters"],"line":16,"updatePoint":{"line":16,"column":19,"index":402},"code":"  it('chained usage', () => {\n    const vm = new Vue({\n      template: '<div>{{ msg | upper | reverse }}</div>',\n      data: {\n        msg: 'hi'\n      },\n      filters: {\n        upper: v => v.toUpperCase(),\n        reverse: v => v.split('').reverse().join('')\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('IH');\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"in v-bind","suites":["Filters"],"line":29,"updatePoint":{"line":29,"column":15,"index":733},"code":"  it('in v-bind', () => {\n    const vm = new Vue({\n      template: `\n        <div\n          v-bind:id=\"id | upper | reverse\"\n          :class=\"cls | reverse\"\n          :ref=\"ref | lower\">\n        </div>\n      `,\n      filters: {\n        upper: v => v.toUpperCase(),\n        reverse: v => v.split('').reverse().join(''),\n        lower: v => v.toLowerCase()\n      },\n      data: {\n        id: 'abc',\n        cls: 'foo',\n        ref: 'BAR'\n      }\n    }).$mount();\n    expect(vm.$el.id).toBe('CBA');\n    expect(vm.$el.className).toBe('oof');\n    expect(vm.$refs.bar).toBe(vm.$el);\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"handle regex with pipe","suites":["Filters"],"line":53,"updatePoint":{"line":53,"column":28,"index":1330},"code":"  it('handle regex with pipe', () => {\n    const vm = new Vue({\n      template: `<test ref=\"test\" :pattern=\"/a|b\\\\// | identity\"></test>`,\n      filters: {\n        identity: v => v\n      },\n      components: {\n        test: {\n          props: ['pattern'],\n          template: '<div></div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$refs.test.pattern instanceof RegExp).toBe(true);\n    expect(vm.$refs.test.pattern.toString()).toBe('/a|b\\\\//');\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"handle division","suites":["Filters"],"line":69,"updatePoint":{"line":69,"column":21,"index":1781},"code":"  it('handle division', () => {\n    const vm = new Vue({\n      data: {\n        a: 2\n      },\n      template: `<div>{{ 1/a / 4 | double }}</div>`,\n      filters: {\n        double: v => v * 2\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe(String(1 / 4));\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"handle division with parenthesis","suites":["Filters"],"line":81,"updatePoint":{"line":81,"column":38,"index":2071},"code":"  it('handle division with parenthesis', () => {\n    const vm = new Vue({\n      data: {\n        a: 20\n      },\n      template: `<div>{{ (a*2) / 5 | double }}</div>`,\n      filters: {\n        double: v => v * 2\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe(String(16));\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"handle division with dot","suites":["Filters"],"line":93,"updatePoint":{"line":93,"column":30,"index":2353},"code":"  it('handle division with dot', () => {\n    const vm = new Vue({\n      template: `<div>{{ 20. / 5 | double }}</div>`,\n      filters: {\n        double: v => v * 2\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe(String(8));\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"handle division with array values","suites":["Filters"],"line":102,"updatePoint":{"line":102,"column":39,"index":2604},"code":"  it('handle division with array values', () => {\n    const vm = new Vue({\n      data: {\n        a: [20]\n      },\n      template: `<div>{{ a[0] / 5 | double }}</div>`,\n      filters: {\n        double: v => v * 2\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe(String(8));\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"handle division with hash values","suites":["Filters"],"line":114,"updatePoint":{"line":114,"column":38,"index":2894},"code":"  it('handle division with hash values', () => {\n    const vm = new Vue({\n      data: {\n        a: {\n          n: 20\n        }\n      },\n      template: `<div>{{ a['n'] / 5 | double }}</div>`,\n      filters: {\n        double: v => v * 2\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe(String(8));\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"handle division with variable_","suites":["Filters"],"line":128,"updatePoint":{"line":128,"column":36,"index":3207},"code":"  it('handle division with variable_', () => {\n    const vm = new Vue({\n      data: {\n        a_: 8\n      },\n      template: `<div>{{ a_ / 2 | double }}</div>`,\n      filters: {\n        double: v => v * 2\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe(String(8));\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"arguments","suites":["Filters"],"line":140,"updatePoint":{"line":140,"column":15,"index":3470},"code":"  it('arguments', () => {\n    const vm = new Vue({\n      template: `<div>{{ msg | add(a, 3) }}</div>`,\n      data: {\n        msg: 1,\n        a: 2\n      },\n      filters: {\n        add: (v, arg1, arg2) => v + arg1 + arg2\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('6');\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"quotes","suites":["Filters"],"line":153,"updatePoint":{"line":153,"column":12,"index":3760},"code":"  it('quotes', () => {\n    const vm = new Vue({\n      template: `<div>{{ msg + \"b | c\" + 'd' | upper }}</div>`,\n      data: {\n        msg: 'a'\n      },\n      filters: {\n        upper: v => v.toUpperCase()\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('AB | CD');\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"double pipe","suites":["Filters"],"line":165,"updatePoint":{"line":165,"column":17,"index":4049},"code":"  it('double pipe', () => {\n    const vm = new Vue({\n      template: `<div>{{ b || msg | upper }}</div>`,\n      data: {\n        b: false,\n        msg: 'a'\n      },\n      filters: {\n        upper: v => v.toUpperCase()\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('A');\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"object literal","suites":["Filters"],"line":178,"updatePoint":{"line":178,"column":20,"index":4342},"code":"  it('object literal', () => {\n    const vm = new Vue({\n      template: `<div>{{ { a: 123 } | pick('a') }}</div>`,\n      filters: {\n        pick: (v, key) => v[key]\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('123');\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"array literal","suites":["Filters"],"line":187,"updatePoint":{"line":187,"column":19,"index":4581},"code":"  it('array literal', () => {\n    const vm = new Vue({\n      template: `<div>{{ [1, 2, 3] | reverse }}</div>`,\n      filters: {\n        reverse: arr => arr.reverse().join(',')\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('3,2,1');\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"warn non-existent","suites":["Filters"],"line":196,"updatePoint":{"line":196,"column":23,"index":4838},"code":"  it('warn non-existent', () => {\n    new Vue({\n      template: '<div>{{ msg | upper }}</div>',\n      data: {\n        msg: 'foo'\n      }\n    }).$mount();\n    expect('Failed to resolve filter: upper').toHaveBeenWarned();\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"support template string","suites":["Filters"],"line":205,"updatePoint":{"line":205,"column":29,"index":5070},"code":"  it('support template string', () => {\n    expect(parseFilters('`a | ${b}c` | d')).toBe('_f(\"d\")(`a | ${b}c`)');\n  });","file":"unit/features/filter/filter.spec.js","skipped":false,"dir":"test"},{"name":"directive / filters","suites":["Global API: assets"],"line":4,"updatePoint":{"line":4,"column":25,"index":117},"code":"  it('directive / filters', () => {\n    const assets = ['directive', 'filter'];\n    assets.forEach(function (type) {\n      const def = {};\n      Test[type]('test', def);\n      expect(Test.options[type + 's'].test).toBe(def);\n      expect(Test[type]('test')).toBe(def); // extended registration should not pollute global\n\n      expect(Vue.options[type + 's'].test).toBeUndefined();\n    });\n  });","file":"unit/features/global-api/assets.spec.js","skipped":false,"dir":"test"},{"name":"should register a component","suites":["Global API: assets","Vue.component"],"line":16,"updatePoint":{"line":16,"column":35,"index":558},"code":"    it('should register a component', () => {\n      Vue.component('foo', {\n        template: '<span>foo</span>'\n      });\n      Vue.component('bar', {\n        template: '<span>bar</span>'\n      });\n      const vm = new Vue({\n        template: '<div><foo></foo><bar></bar></div>'\n      }).$mount();\n      expect(vm.$el.innerHTML).toBe('<span>foo</span><span>bar</span>'); // unregister them\n\n      delete Vue.options.components.foo;\n      delete Vue.options.components.bar;\n    });","file":"unit/features/global-api/assets.spec.js","skipped":false,"dir":"test"},{"name":"component on extended constructor","suites":["Global API: assets","Vue.component"],"line":32,"updatePoint":{"line":32,"column":39,"index":1049},"code":"  it('component on extended constructor', () => {\n    const def = {\n      a: 1\n    };\n    Test.component('test', def);\n    const component = Test.options.components.test;\n    expect(typeof component).toBe('function');\n    expect(component.super).toBe(Vue);\n    expect(component.options.a).toBe(1);\n    expect(component.options.name).toBe('test');\n    expect(Test.component('test')).toBe(component); // already extended\n\n    Test.component('test2', component);\n    expect(Test.component('test2')).toBe(component); // extended registration should not pollute global\n\n    expect(Vue.options.components.test).toBeUndefined();\n  }); // #4434","file":"unit/features/global-api/assets.spec.js","skipped":false,"dir":"test"},{"name":"local registration should take priority regardless of naming convention","suites":["Global API: assets","Vue.component"],"line":50,"updatePoint":{"line":50,"column":77,"index":1725},"code":"  it('local registration should take priority regardless of naming convention', () => {\n    Vue.component('x-foo', {\n      template: '<span>global</span>'\n    });\n    const vm = new Vue({\n      components: {\n        xFoo: {\n          template: '<span>local</span>'\n        }\n      },\n      template: '<div><x-foo></x-foo></div>'\n    }).$mount();\n    expect(vm.$el.textContent).toBe('local');\n    delete Vue.options.components['x-foo'];\n  });","file":"unit/features/global-api/assets.spec.js","skipped":false,"dir":"test"},{"name":"should compile render functions","suites":["Global API: compile"],"line":3,"updatePoint":{"line":3,"column":37,"index":101},"code":"  it('should compile render functions', () => {\n    const res = Vue.compile('<div><span>{{ msg }}</span></div>');\n    const vm = new Vue({\n      data: {\n        msg: 'hello'\n      },\n      render: res.render,\n      staticRenderFns: res.staticRenderFns\n    }).$mount();\n    expect(vm.$el.innerHTML).toContain('<span>hello</span>');\n  });","file":"unit/features/global-api/compile.spec.js","skipped":false,"dir":"test"},{"name":"should warn replacing config object","suites":["Global config"],"line":4,"updatePoint":{"line":4,"column":41,"index":139},"code":"  it('should warn replacing config object', () => {\n    const originalConfig = Vue.config;\n    Vue.config = {};\n    expect(Vue.config).toBe(originalConfig);\n    expect('Do not replace the Vue.config object').toHaveBeenWarned();\n  });","file":"unit/features/global-api/config.spec.js","skipped":false,"dir":"test"},{"name":"should be false by default","suites":["Global config","silent"],"line":11,"updatePoint":{"line":11,"column":34,"index":395},"code":"    it('should be false by default', () => {\n      warn('foo');\n      expect('foo').toHaveBeenWarned();\n    });","file":"unit/features/global-api/config.spec.js","skipped":false,"dir":"test"},{"name":"should work when set to true","suites":["Global config","silent"],"line":15,"updatePoint":{"line":15,"column":36,"index":509},"code":"    it('should work when set to true', () => {\n      Vue.config.silent = true;\n      warn('foo');\n      expect('foo').not.toHaveBeenWarned();\n      Vue.config.silent = false;\n    });","file":"unit/features/global-api/config.spec.js","skipped":false,"dir":"test"},{"name":"should allow defining custom option merging strategies","suites":["Global config","optionMergeStrategies"],"line":23,"updatePoint":{"line":23,"column":62,"index":768},"code":"    it('should allow defining custom option merging strategies', () => {\n      const spy = jasmine.createSpy('option merging');\n\n      Vue.config.optionMergeStrategies.__test__ = (parent, child, vm) => {\n        spy(parent, child, vm);\n        return child + 1;\n      };\n\n      const Test = Vue.extend({\n        __test__: 1\n      });\n      expect(spy.calls.count()).toBe(1);\n      expect(spy).toHaveBeenCalledWith(undefined, 1, undefined);\n      expect(Test.options.__test__).toBe(2);\n      const test = new Test({\n        __test__: 2\n      });\n      expect(spy.calls.count()).toBe(2);\n      expect(spy).toHaveBeenCalledWith(2, 2, test);\n      expect(test.$options.__test__).toBe(3);\n    });","file":"unit/features/global-api/config.spec.js","skipped":false,"dir":"test"},{"name":"should correctly merge options","suites":["Global API: extend"],"line":3,"updatePoint":{"line":3,"column":36,"index":99},"code":"  it('should correctly merge options', () => {\n    const Test = Vue.extend({\n      name: 'test',\n      a: 1,\n      b: 2\n    });\n    expect(Test.options.a).toBe(1);\n    expect(Test.options.b).toBe(2);\n    expect(Test.super).toBe(Vue);\n    const t = new Test({\n      a: 2\n    });\n    expect(t.$options.a).toBe(2);\n    expect(t.$options.b).toBe(2); // inheritance\n\n    const Test2 = Test.extend({\n      a: 2\n    });\n    expect(Test2.options.a).toBe(2);\n    expect(Test2.options.b).toBe(2);\n    const t2 = new Test2({\n      a: 3\n    });\n    expect(t2.$options.a).toBe(3);\n    expect(t2.$options.b).toBe(2);\n  });","file":"unit/features/global-api/extend.spec.js","skipped":false,"dir":"test"},{"name":"should warn invalid names","suites":["Global API: extend"],"line":29,"updatePoint":{"line":29,"column":31,"index":703},"code":"  it('should warn invalid names', () => {\n    Vue.extend({\n      name: '123'\n    });\n    expect('Invalid component name: \"123\"').toHaveBeenWarned();\n    Vue.extend({\n      name: '_fesf'\n    });\n    expect('Invalid component name: \"_fesf\"').toHaveBeenWarned();\n    Vue.extend({\n      name: 'Some App'\n    });\n    expect('Invalid component name: \"Some App\"').toHaveBeenWarned();\n  });","file":"unit/features/global-api/extend.spec.js","skipped":false,"dir":"test"},{"name":"should work when used as components","suites":["Global API: extend"],"line":43,"updatePoint":{"line":43,"column":41,"index":1096},"code":"  it('should work when used as components', () => {\n    const foo = Vue.extend({\n      template: '<span>foo</span>'\n    });\n    const bar = Vue.extend({\n      template: '<span>bar</span>'\n    });\n    const vm = new Vue({\n      template: '<div><foo></foo><bar></bar></div>',\n      components: {\n        foo,\n        bar\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>foo</span><span>bar</span>');\n  });","file":"unit/features/global-api/extend.spec.js","skipped":false,"dir":"test"},{"name":"should merge lifecycle hooks","suites":["Global API: extend"],"line":59,"updatePoint":{"line":59,"column":34,"index":1510},"code":"  it('should merge lifecycle hooks', () => {\n    const calls = [];\n    const A = Vue.extend({\n      created() {\n        calls.push(1);\n      }\n\n    });\n    const B = A.extend({\n      created() {\n        calls.push(2);\n      }\n\n    });\n    new B({\n      created() {\n        calls.push(3);\n      }\n\n    });\n    expect(calls).toEqual([1, 2, 3]);\n  });","file":"unit/features/global-api/extend.spec.js","skipped":false,"dir":"test"},{"name":"should merge methods","suites":["Global API: extend"],"line":81,"updatePoint":{"line":81,"column":26,"index":1851},"code":"  it('should merge methods', () => {\n    const A = Vue.extend({\n      methods: {\n        a() {\n          return this.n;\n        }\n\n      }\n    });\n    const B = A.extend({\n      methods: {\n        b() {\n          return this.n + 1;\n        }\n\n      }\n    });\n    const b = new B({\n      data: {\n        n: 0\n      },\n      methods: {\n        c() {\n          return this.n + 2;\n        }\n\n      }\n    });\n    expect(b.a()).toBe(0);\n    expect(b.b()).toBe(1);\n    expect(b.c()).toBe(2);\n  });","file":"unit/features/global-api/extend.spec.js","skipped":false,"dir":"test"},{"name":"should merge assets","suites":["Global API: extend"],"line":113,"updatePoint":{"line":113,"column":25,"index":2341},"code":"  it('should merge assets', () => {\n    const A = Vue.extend({\n      components: {\n        aa: {\n          template: '<div>A</div>'\n        }\n      }\n    });\n    const B = A.extend({\n      components: {\n        bb: {\n          template: '<div>B</div>'\n        }\n      }\n    });\n    const b = new B({\n      template: '<div><aa></aa><bb></bb></div>'\n    }).$mount();\n    expect(b.$el.innerHTML).toBe('<div>A</div><div>B</div>');\n  });","file":"unit/features/global-api/extend.spec.js","skipped":false,"dir":"test"},{"name":"caching","suites":["Global API: extend"],"line":133,"updatePoint":{"line":133,"column":13,"index":2762},"code":"  it('caching', () => {\n    const options = {\n      template: '<div></div>'\n    };\n    const A = Vue.extend(options);\n    const B = Vue.extend(options);\n    expect(A).toBe(B);\n  }); // #4767","file":"unit/features/global-api/extend.spec.js","skipped":false,"dir":"test"},{"name":"extended options should use different identify from parent","suites":["Global API: extend"],"line":142,"updatePoint":{"line":142,"column":64,"index":3005},"code":"  it('extended options should use different identify from parent', () => {\n    const A = Vue.extend({\n      computed: {}\n    });\n    const B = A.extend();\n\n    B.options.computed.b = () => 'foo';\n\n    expect(B.options.computed).not.toBe(A.options.computed);\n    expect(A.options.computed.b).toBeUndefined();\n  });","file":"unit/features/global-api/extend.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Global API: mixin"],"line":10,"updatePoint":{"line":10,"column":17,"index":201},"code":"  it('should work', () => {\n    const spy = jasmine.createSpy('global mixin');\n    Vue.mixin({\n      created() {\n        spy(this.$options.myOption);\n      }\n\n    });\n    new Vue({\n      myOption: 'hello'\n    });\n    expect(spy).toHaveBeenCalledWith('hello');\n  });","file":"unit/features/global-api/mixin.spec.js","skipped":false,"dir":"test"},{"name":"should work for constructors created before mixin is applied","suites":["Global API: mixin"],"line":23,"updatePoint":{"line":23,"column":66,"index":516},"code":"  it('should work for constructors created before mixin is applied', () => {\n    const calls = [];\n    const Test = Vue.extend({\n      name: 'test',\n\n      beforeCreate() {\n        calls.push(this.$options.myOption + ' local');\n      }\n\n    });\n    Vue.mixin({\n      beforeCreate() {\n        calls.push(this.$options.myOption + ' global');\n      }\n\n    });\n    expect(Test.options.name).toBe('test');\n    new Test({\n      myOption: 'hello'\n    });\n    expect(calls).toEqual(['hello global', 'hello local']);\n  }); // #3957","file":"unit/features/global-api/mixin.spec.js","skipped":false,"dir":"test"},{"name":"should work for global props","suites":["Global API: mixin"],"line":46,"updatePoint":{"line":46,"column":34,"index":1008},"code":"  it('should work for global props', () => {\n    const Test = Vue.extend({\n      template: `<div>{{ prop }}</div>`\n    });\n    Vue.mixin({\n      props: ['prop']\n    }); // test child component\n\n    const vm = new Vue({\n      template: '<test prop=\"hi\"></test>',\n      components: {\n        Test\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('hi');\n  }); // vue-loader#433","file":"unit/features/global-api/mixin.spec.js","skipped":false,"dir":"test"},{"name":"should not drop late-set render functions","suites":["Global API: mixin"],"line":63,"updatePoint":{"line":63,"column":47,"index":1409},"code":"  it('should not drop late-set render functions', () => {\n    const Test = Vue.extend({});\n\n    Test.options.render = h => h('div', 'hello');\n\n    Vue.mixin({});\n    const vm = new Vue({\n      render: h => h(Test)\n    }).$mount();\n    expect(vm.$el.textContent).toBe('hello');\n  }); // #4266","file":"unit/features/global-api/mixin.spec.js","skipped":false,"dir":"test"},{"name":"should not drop scopedId","suites":["Global API: mixin"],"line":75,"updatePoint":{"line":75,"column":30,"index":1685},"code":"  it('should not drop scopedId', () => {\n    const Test = Vue.extend({});\n    Test.options._scopeId = 'foo';\n    Vue.mixin({});\n    const vm = new Test({\n      template: '<div><p>hi</p></div>'\n    }).$mount();\n    expect(vm.$el.children[0].hasAttribute('foo')).toBe(true);\n  }); // #4976","file":"unit/features/global-api/mixin.spec.js","skipped":false,"dir":"test"},{"name":"should not drop late-attached custom options on existing constructors","suites":["Global API: mixin"],"line":85,"updatePoint":{"line":85,"column":75,"index":2019},"code":"  it('should not drop late-attached custom options on existing constructors', () => {\n    const baseSpy = jasmine.createSpy('base');\n    const Base = Vue.extend({\n      beforeCreate: baseSpy\n    });\n    const Test = Base.extend({}); // Inject options later\n    // vue-loader and vue-hot-reload-api are doing like this\n\n    Test.options.computed = {\n      $style: () => 123\n    };\n    const spy = jasmine.createSpy('late attached');\n    Test.options.beforeCreate = Test.options.beforeCreate.concat(spy); // Update super constructor's options\n\n    const mixinSpy = jasmine.createSpy('mixin');\n    Vue.mixin({\n      beforeCreate: mixinSpy\n    }); // mount the component\n\n    const vm = new Test({\n      template: '<div>{{ $style }}</div>'\n    }).$mount();\n    expect(spy.calls.count()).toBe(1);\n    expect(baseSpy.calls.count()).toBe(1);\n    expect(mixinSpy.calls.count()).toBe(1);\n    expect(vm.$el.textContent).toBe('123');\n    expect(vm.$style).toBe(123); // Should not be dropped\n\n    expect(Test.options.computed.$style()).toBe(123);\n    expect(Test.options.beforeCreate).toEqual([mixinSpy, baseSpy, spy]);\n  }); // vue-class-component#83","file":"unit/features/global-api/mixin.spec.js","skipped":false,"dir":"test"},{"name":"should work for a constructor mixin","suites":["Global API: mixin"],"line":117,"updatePoint":{"line":117,"column":41,"index":3127},"code":"  it('should work for a constructor mixin', () => {\n    const spy = jasmine.createSpy('global mixin');\n    const Mixin = Vue.extend({\n      created() {\n        spy(this.$options.myOption);\n      }\n\n    });\n    Vue.mixin(Mixin);\n    new Vue({\n      myOption: 'hello'\n    });\n    expect(spy).toHaveBeenCalledWith('hello');\n  }); // vue-class-component#87","file":"unit/features/global-api/mixin.spec.js","skipped":false,"dir":"test"},{"name":"should not drop original lifecycle hooks","suites":["Global API: mixin"],"line":132,"updatePoint":{"line":132,"column":46,"index":3486},"code":"  it('should not drop original lifecycle hooks', () => {\n    const base = jasmine.createSpy('base');\n    const Base = Vue.extend({\n      beforeCreate: base\n    });\n    const injected = jasmine.createSpy('injected'); // inject a function\n\n    Base.options.beforeCreate = Base.options.beforeCreate.concat(injected);\n    Vue.mixin({});\n    new Base({});\n    expect(base).toHaveBeenCalled();\n    expect(injected).toHaveBeenCalled();\n  });","file":"unit/features/global-api/mixin.spec.js","skipped":false,"dir":"test"},{"name":"should update a vue object","suites":["Global API: set/delete","Vue.set"],"line":4,"updatePoint":{"line":4,"column":34,"index":131},"code":"    it('should update a vue object', done => {\n      const vm = new Vue({\n        template: '<div>{{x}}</div>',\n        data: {\n          x: 1\n        }\n      }).$mount();\n      expect(vm.$el.innerHTML).toBe('1');\n      Vue.set(vm, 'x', 2);\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('2');\n      }).then(done);\n    });","file":"unit/features/global-api/set-delete.spec.js","skipped":false,"dir":"test"},{"name":"should update a observing object","suites":["Global API: set/delete","Vue.set"],"line":17,"updatePoint":{"line":17,"column":40,"index":479},"code":"    it('should update a observing object', done => {\n      const vm = new Vue({\n        template: '<div>{{foo.x}}</div>',\n        data: {\n          foo: {\n            x: 1\n          }\n        }\n      }).$mount();\n      expect(vm.$el.innerHTML).toBe('1');\n      Vue.set(vm.foo, 'x', 2);\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('2');\n      }).then(done);\n    });","file":"unit/features/global-api/set-delete.spec.js","skipped":false,"dir":"test"},{"name":"should update a observing array","suites":["Global API: set/delete","Vue.set"],"line":32,"updatePoint":{"line":32,"column":39,"index":865},"code":"    it('should update a observing array', done => {\n      const vm = new Vue({\n        template: '<div><div v-for=\"v,k in list\">{{k}}-{{v}}</div></div>',\n        data: {\n          list: ['a', 'b', 'c']\n        }\n      }).$mount();\n      expect(vm.$el.innerHTML).toBe('<div>0-a</div><div>1-b</div><div>2-c</div>');\n      Vue.set(vm.list, 1, 'd');\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div>0-a</div><div>1-d</div><div>2-c</div>');\n        Vue.set(vm.list, '2', 'e');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div>0-a</div><div>1-d</div><div>2-e</div>');\n        /* eslint-disable no-new-wrappers */\n\n        Vue.set(vm.list, new Number(1), 'f');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div>0-a</div><div>1-f</div><div>2-e</div>');\n        Vue.set(vm.list, '3g', 'g');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div>0-a</div><div>1-f</div><div>2-e</div>');\n      }).then(done);\n    });","file":"unit/features/global-api/set-delete.spec.js","skipped":false,"dir":"test"},{"name":"should update a vue object with nothing","suites":["Global API: set/delete","Vue.set"],"line":56,"updatePoint":{"line":56,"column":47,"index":1847},"code":"    it('should update a vue object with nothing', done => {\n      const vm = new Vue({\n        template: '<div>{{x}}</div>',\n        data: {\n          x: 1\n        }\n      }).$mount();\n      expect(vm.$el.innerHTML).toBe('1');\n      Vue.set(vm, 'x', null);\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('');\n        Vue.set(vm, 'x');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('');\n      }).then(done);\n    });","file":"unit/features/global-api/set-delete.spec.js","skipped":false,"dir":"test"},{"name":"be able to use string type index in array","suites":["Global API: set/delete","Vue.set"],"line":72,"updatePoint":{"line":72,"column":49,"index":2297},"code":"    it('be able to use string type index in array', done => {\n      const vm = new Vue({\n        template: '<div><p v-for=\"obj in lists\">{{obj.name}}</p></div>',\n        data: {\n          lists: [{\n            name: 'A'\n          }, {\n            name: 'B'\n          }, {\n            name: 'C'\n          }]\n        }\n      }).$mount();\n      expect(vm.$el.innerHTML).toBe('<p>A</p><p>B</p><p>C</p>');\n      Vue.set(vm.lists, '0', {\n        name: 'D'\n      });\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<p>D</p><p>B</p><p>C</p>');\n      }).then(done);\n    });","file":"unit/features/global-api/set-delete.spec.js","skipped":false,"dir":"test"},{"name":"should delete a key","suites":["Global API: set/delete","Vue.delete"],"line":95,"updatePoint":{"line":95,"column":27,"index":2898},"code":"    it('should delete a key', done => {\n      const vm = new Vue({\n        template: '<div>{{obj.x}}</div>',\n        data: {\n          obj: {\n            x: 1\n          }\n        }\n      }).$mount();\n      expect(vm.$el.innerHTML).toBe('1');\n      vm.obj.x = 2;\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('2');\n        Vue.delete(vm.obj, 'x');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('');\n        vm.obj.x = 3;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('');\n      }).then(done);\n    });","file":"unit/features/global-api/set-delete.spec.js","skipped":false,"dir":"test"},{"name":"be able to delete an item in array","suites":["Global API: set/delete","Vue.delete"],"line":116,"updatePoint":{"line":116,"column":42,"index":3461},"code":"    it('be able to delete an item in array', done => {\n      const vm = new Vue({\n        template: '<div><p v-for=\"obj in lists\">{{obj.name}}</p></div>',\n        data: {\n          lists: [{\n            name: 'A'\n          }, {\n            name: 'B'\n          }, {\n            name: 'C'\n          }]\n        }\n      }).$mount();\n      expect(vm.$el.innerHTML).toBe('<p>A</p><p>B</p><p>C</p>');\n      Vue.delete(vm.lists, 1);\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<p>A</p><p>C</p>');\n        Vue.delete(vm.lists, NaN);\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<p>A</p><p>C</p>');\n        Vue.delete(vm.lists, -1);\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<p>A</p><p>C</p>');\n        Vue.delete(vm.lists, '1.3');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<p>A</p><p>C</p>');\n        Vue.delete(vm.lists, true);\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<p>A</p><p>C</p>');\n        Vue.delete(vm.lists, {});\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<p>A</p><p>C</p>');\n        Vue.delete(vm.lists, '1');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<p>A</p>');\n        /* eslint-disable no-new-wrappers */\n\n        Vue.delete(vm.lists, new Number(0));\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('');\n      }).then(done);\n    });","file":"unit/features/global-api/set-delete.spec.js","skipped":false,"dir":"test"},{"name":"should apply Object plugin","suites":["Global API: use"],"line":11,"updatePoint":{"line":11,"column":32,"index":271},"code":"  it('should apply Object plugin', () => {\n    Vue.use(pluginStub, options);\n    expect(Vue.options.directives['plugin-test']).toBe(def);\n    delete Vue.options.directives['plugin-test'];\n    expect(Vue.options.directives['plugin-test']).toBeUndefined(); // should not double apply\n\n    Vue.use(pluginStub, options);\n    expect(Vue.options.directives['plugin-test']).toBeUndefined();\n  });","file":"unit/features/global-api/use.spec.js","skipped":false,"dir":"test"},{"name":"should apply Function plugin","suites":["Global API: use"],"line":20,"updatePoint":{"line":20,"column":34,"index":663},"code":"  it('should apply Function plugin', () => {\n    Vue.use(pluginStub.install, options);\n    expect(Vue.options.directives['plugin-test']).toBe(def);\n    delete Vue.options.directives['plugin-test'];\n  });","file":"unit/features/global-api/use.spec.js","skipped":false,"dir":"test"},{"name":"should work on extended constructors without polluting the base","suites":["Global API: use"],"line":25,"updatePoint":{"line":25,"column":69,"index":902},"code":"  it('should work on extended constructors without polluting the base', () => {\n    const Ctor = Vue.extend({});\n    Ctor.use(pluginStub, options);\n    expect(Vue.options.directives['plugin-test']).toBeUndefined();\n    expect(Ctor.options.directives['plugin-test']).toBe(def);\n  }); // Github issue #5970","file":"unit/features/global-api/use.spec.js","skipped":false,"dir":"test"},{"name":"should work on multi version","suites":["Global API: use"],"line":32,"updatePoint":{"line":32,"column":34,"index":1173},"code":"  it('should work on multi version', () => {\n    const Ctor1 = Vue.extend({});\n    const Ctor2 = Vue.extend({});\n    Ctor1.use(pluginStub, options);\n    expect(Vue.options.directives['plugin-test']).toBeUndefined();\n    expect(Ctor1.options.directives['plugin-test']).toBe(def); // multi version Vue Ctor with the same cid\n\n    Ctor2.cid = Ctor1.cid;\n    Ctor2.use(pluginStub, options);\n    expect(Vue.options.directives['plugin-test']).toBeUndefined();\n    expect(Ctor2.options.directives['plugin-test']).toBe(def);\n  });","file":"unit/features/global-api/use.spec.js","skipped":false,"dir":"test"},{"name":"without new","suites":["Initialization"],"line":3,"updatePoint":{"line":3,"column":17,"index":76},"code":"  it('without new', () => {\n    try {\n      Vue();\n    } catch (e) {}\n\n    expect('Vue is a constructor and should be called with the `new` keyword').toHaveBeenWarned();\n  });","file":"unit/features/instance/init.spec.js","skipped":false,"dir":"test"},{"name":"with new","suites":["Initialization"],"line":10,"updatePoint":{"line":10,"column":14,"index":249},"code":"  it('with new', () => {\n    expect(new Vue() instanceof Vue).toBe(true);\n  });","file":"unit/features/instance/init.spec.js","skipped":false,"dir":"test"},{"name":"$set/$delete","suites":["Instance methods data"],"line":3,"updatePoint":{"line":3,"column":18,"index":84},"code":"  it('$set/$delete', done => {\n    const vm = new Vue({\n      template: '<div>{{ a.msg }}</div>',\n      data: {\n        a: {}\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('');\n    vm.$set(vm.a, 'msg', 'hello');\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('hello');\n      vm.$delete(vm.a, 'msg');\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('');\n    }).then(done);\n  });","file":"unit/features/instance/methods-data.spec.js","skipped":false,"dir":"test"},{"name":"basic usage","suites":["Instance methods data","$watch"],"line":34,"updatePoint":{"line":34,"column":19,"index":766},"code":"    it('basic usage', done => {\n      vm.$watch('a.b', spy);\n      vm.a.b = 2;\n      waitForUpdate(() => {\n        expect(spy.calls.count()).toBe(1);\n        expect(spy).toHaveBeenCalledWith(2, 1);\n        vm.a = {\n          b: 3\n        };\n      }).then(() => {\n        expect(spy.calls.count()).toBe(2);\n        expect(spy).toHaveBeenCalledWith(3, 2);\n      }).then(done);\n    });","file":"unit/features/instance/methods-data.spec.js","skipped":false,"dir":"test"},{"name":"immediate","suites":["Instance methods data","$watch"],"line":48,"updatePoint":{"line":48,"column":17,"index":1147},"code":"    it('immediate', () => {\n      vm.$watch('a.b', spy, {\n        immediate: true\n      });\n      expect(spy.calls.count()).toBe(1);\n      expect(spy).toHaveBeenCalledWith(1);\n    });","file":"unit/features/instance/methods-data.spec.js","skipped":false,"dir":"test"},{"name":"unwatch","suites":["Instance methods data","$watch"],"line":55,"updatePoint":{"line":55,"column":15,"index":1329},"code":"    it('unwatch', done => {\n      const unwatch = vm.$watch('a.b', spy);\n      unwatch();\n      vm.a.b = 2;\n      waitForUpdate(() => {\n        expect(spy.calls.count()).toBe(0);\n      }).then(done);\n    });","file":"unit/features/instance/methods-data.spec.js","skipped":false,"dir":"test"},{"name":"function watch","suites":["Instance methods data","$watch"],"line":63,"updatePoint":{"line":63,"column":22,"index":1544},"code":"    it('function watch', done => {\n      vm.$watch(function () {\n        return this.a.b;\n      }, spy);\n      vm.a.b = 2;\n      waitForUpdate(() => {\n        expect(spy).toHaveBeenCalledWith(2, 1);\n      }).then(done);\n    });","file":"unit/features/instance/methods-data.spec.js","skipped":false,"dir":"test"},{"name":"deep watch","suites":["Instance methods data","$watch"],"line":72,"updatePoint":{"line":72,"column":18,"index":1768},"code":"    it('deep watch', done => {\n      var oldA = vm.a;\n      vm.$watch('a', spy, {\n        deep: true\n      });\n      vm.a.b = 2;\n      waitForUpdate(() => {\n        expect(spy).toHaveBeenCalledWith(oldA, oldA);\n        vm.a = {\n          b: 3\n        };\n      }).then(() => {\n        expect(spy).toHaveBeenCalledWith(vm.a, oldA);\n      }).then(done);\n    });","file":"unit/features/instance/methods-data.spec.js","skipped":false,"dir":"test"},{"name":"handler option","suites":["Instance methods data","$watch"],"line":87,"updatePoint":{"line":87,"column":22,"index":2131},"code":"    it('handler option', done => {\n      var oldA = vm.a;\n      vm.$watch('a', {\n        handler: spy,\n        deep: true\n      });\n      vm.a.b = 2;\n      waitForUpdate(() => {\n        expect(spy).toHaveBeenCalledWith(oldA, oldA);\n        vm.a = {\n          b: 3\n        };\n      }).then(() => {\n        expect(spy).toHaveBeenCalledWith(vm.a, oldA);\n      }).then(done);\n    });","file":"unit/features/instance/methods-data.spec.js","skipped":false,"dir":"test"},{"name":"handler option in string","suites":["Instance methods data","$watch"],"line":103,"updatePoint":{"line":103,"column":32,"index":2521},"code":"    it('handler option in string', () => {\n      vm.$watch('a.b', {\n        handler: 'foo',\n        immediate: true\n      });\n      expect(spy.calls.count()).toBe(1);\n      expect(spy).toHaveBeenCalledWith(1);\n    });","file":"unit/features/instance/methods-data.spec.js","skipped":false,"dir":"test"},{"name":"warn expresssion","suites":["Instance methods data","$watch"],"line":111,"updatePoint":{"line":111,"column":24,"index":2731},"code":"    it('warn expresssion', () => {\n      vm.$watch('a + b', spy);\n      expect('Watcher only accepts simple dot-delimited paths').toHaveBeenWarned();\n    });","file":"unit/features/instance/methods-data.spec.js","skipped":false,"dir":"test"},{"name":"$on","suites":["Instance methods events"],"line":8,"updatePoint":{"line":8,"column":9,"index":179},"code":"  it('$on', () => {\n    vm.$on('test', function () {\n      // expect correct context\n      expect(this).toBe(vm);\n      spy.apply(this, arguments);\n    });\n    vm.$emit('test', 1, 2, 3, 4);\n    expect(spy.calls.count()).toBe(1);\n    expect(spy).toHaveBeenCalledWith(1, 2, 3, 4);\n  });","file":"unit/features/instance/methods-events.spec.js","skipped":false,"dir":"test"},{"name":"$on multi event","suites":["Instance methods events"],"line":18,"updatePoint":{"line":18,"column":21,"index":476},"code":"  it('$on multi event', () => {\n    vm.$on(['test1', 'test2'], function () {\n      expect(this).toBe(vm);\n      spy.apply(this, arguments);\n    });\n    vm.$emit('test1', 1, 2, 3, 4);\n    expect(spy.calls.count()).toBe(1);\n    expect(spy).toHaveBeenCalledWith(1, 2, 3, 4);\n    vm.$emit('test2', 5, 6, 7, 8);\n    expect(spy.calls.count()).toBe(2);\n    expect(spy).toHaveBeenCalledWith(5, 6, 7, 8);\n  });","file":"unit/features/instance/methods-events.spec.js","skipped":false,"dir":"test"},{"name":"$off multi event","suites":["Instance methods events"],"line":30,"updatePoint":{"line":30,"column":22,"index":879},"code":"  it('$off multi event', () => {\n    vm.$on(['test1', 'test2', 'test3'], spy);\n    vm.$off(['test1', 'test2'], spy);\n    vm.$emit('test1');\n    vm.$emit('test2');\n    expect(spy).not.toHaveBeenCalled();\n    vm.$emit('test3', 1, 2, 3, 4);\n    expect(spy.calls.count()).toBe(1);\n  });","file":"unit/features/instance/methods-events.spec.js","skipped":false,"dir":"test"},{"name":"$once","suites":["Instance methods events"],"line":39,"updatePoint":{"line":39,"column":11,"index":1151},"code":"  it('$once', () => {\n    vm.$once('test', spy);\n    vm.$emit('test', 1, 2, 3);\n    vm.$emit('test', 2, 3, 4);\n    expect(spy.calls.count()).toBe(1);\n    expect(spy).toHaveBeenCalledWith(1, 2, 3);\n  });","file":"unit/features/instance/methods-events.spec.js","skipped":false,"dir":"test"},{"name":"$off","suites":["Instance methods events"],"line":46,"updatePoint":{"line":46,"column":10,"index":1353},"code":"  it('$off', () => {\n    vm.$on('test1', spy);\n    vm.$on('test2', spy);\n    vm.$off();\n    vm.$emit('test1');\n    vm.$emit('test2');\n    expect(spy).not.toHaveBeenCalled();\n  });","file":"unit/features/instance/methods-events.spec.js","skipped":false,"dir":"test"},{"name":"$off event","suites":["Instance methods events"],"line":54,"updatePoint":{"line":54,"column":16,"index":1539},"code":"  it('$off event', () => {\n    vm.$on('test1', spy);\n    vm.$on('test2', spy);\n    vm.$off('test1');\n    vm.$off('test1'); // test off something that's already off\n\n    vm.$emit('test1', 1);\n    vm.$emit('test2', 2);\n    expect(spy.calls.count()).toBe(1);\n    expect(spy).toHaveBeenCalledWith(2);\n  });","file":"unit/features/instance/methods-events.spec.js","skipped":false,"dir":"test"},{"name":"$off event + fn","suites":["Instance methods events"],"line":65,"updatePoint":{"line":65,"column":21,"index":1847},"code":"  it('$off event + fn', () => {\n    var spy2 = jasmine.createSpy('emitter');\n    vm.$on('test', spy);\n    vm.$on('test', spy2);\n    vm.$off('test', spy);\n    vm.$emit('test', 1, 2, 3);\n    expect(spy).not.toHaveBeenCalled();\n    expect(spy2.calls.count()).toBe(1);\n    expect(spy2).toHaveBeenCalledWith(1, 2, 3);\n  });","file":"unit/features/instance/methods-events.spec.js","skipped":false,"dir":"test"},{"name":"empty mount","suites":["Instance methods lifecycle","$mount"],"line":4,"updatePoint":{"line":4,"column":19,"index":119},"code":"    it('empty mount', () => {\n      const vm = new Vue({\n        data: {\n          msg: 'hi'\n        },\n        template: '<div>{{ msg }}</div>'\n      }).$mount();\n      expect(vm.$el.tagName).toBe('DIV');\n      expect(vm.$el.textContent).toBe('hi');\n    });","file":"unit/features/instance/methods-lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"mount to existing element","suites":["Instance methods lifecycle","$mount"],"line":14,"updatePoint":{"line":14,"column":33,"index":392},"code":"    it('mount to existing element', () => {\n      const el = document.createElement('div');\n      el.innerHTML = '{{ msg }}';\n      const vm = new Vue({\n        data: {\n          msg: 'hi'\n        }\n      }).$mount(el);\n      expect(vm.$el.tagName).toBe('DIV');\n      expect(vm.$el.textContent).toBe('hi');\n    });","file":"unit/features/instance/methods-lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"mount to id","suites":["Instance methods lifecycle","$mount"],"line":25,"updatePoint":{"line":25,"column":19,"index":693},"code":"    it('mount to id', () => {\n      const el = document.createElement('div');\n      el.id = 'mount-test';\n      el.innerHTML = '{{ msg }}';\n      document.body.appendChild(el);\n      const vm = new Vue({\n        data: {\n          msg: 'hi'\n        }\n      }).$mount('#mount-test');\n      expect(vm.$el.tagName).toBe('DIV');\n      expect(vm.$el.textContent).toBe('hi');\n    });","file":"unit/features/instance/methods-lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"remove self from parent","suites":["Instance methods lifecycle","$destroy"],"line":40,"updatePoint":{"line":40,"column":31,"index":1119},"code":"    it('remove self from parent', () => {\n      const vm = new Vue({\n        template: '<test></test>',\n        components: {\n          test: {\n            template: '<div></div>'\n          }\n        }\n      }).$mount();\n      vm.$children[0].$destroy();\n      expect(vm.$children.length).toBe(0);\n    });","file":"unit/features/instance/methods-lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"teardown watchers","suites":["Instance methods lifecycle","$destroy"],"line":52,"updatePoint":{"line":52,"column":25,"index":1419},"code":"    it('teardown watchers', () => {\n      const vm = new Vue({\n        data: {\n          a: 123\n        },\n        template: '<div></div>'\n      }).$mount();\n      vm.$watch('a', () => {});\n      vm.$destroy();\n      expect(vm._watcher.active).toBe(false);\n      expect(vm._watchers.every(w => !w.active)).toBe(true);\n    });","file":"unit/features/instance/methods-lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"remove self from data observer","suites":["Instance methods lifecycle","$destroy"],"line":64,"updatePoint":{"line":64,"column":38,"index":1758},"code":"    it('remove self from data observer', () => {\n      const vm = new Vue({\n        data: {\n          a: 1\n        }\n      });\n      vm.$destroy();\n      expect(vm.$data.__ob__.vmCount).toBe(0);\n    });","file":"unit/features/instance/methods-lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"avoid duplicate calls","suites":["Instance methods lifecycle","$destroy"],"line":73,"updatePoint":{"line":73,"column":29,"index":1952},"code":"    it('avoid duplicate calls', () => {\n      const spy = jasmine.createSpy('destroy');\n      const vm = new Vue({\n        beforeDestroy: spy\n      });\n      vm.$destroy();\n      vm.$destroy();\n      expect(spy.calls.count()).toBe(1);\n    });","file":"unit/features/instance/methods-lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should force update","suites":["Instance methods lifecycle","$forceUpdate"],"line":84,"updatePoint":{"line":84,"column":27,"index":2234},"code":"    it('should force update', done => {\n      const vm = new Vue({\n        data: {\n          a: {}\n        },\n        template: '<div>{{ a.b }}</div>'\n      }).$mount();\n      expect(vm.$el.textContent).toBe('');\n      vm.a.b = 'foo';\n      waitForUpdate(() => {\n        // should not work because adding new property\n        expect(vm.$el.textContent).toBe('');\n        vm.$forceUpdate();\n      }).then(() => {\n        expect(vm.$el.textContent).toBe('foo');\n      }).then(done);\n    });","file":"unit/features/instance/methods-lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should be called after DOM update in correct context","suites":["Instance methods lifecycle","$nextTick"],"line":103,"updatePoint":{"line":103,"column":60,"index":2794},"code":"    it('should be called after DOM update in correct context', done => {\n      const vm = new Vue({\n        template: '<div>{{ msg }}</div>',\n        data: {\n          msg: 'foo'\n        }\n      }).$mount();\n      vm.msg = 'bar';\n      vm.$nextTick(function () {\n        expect(this).toBe(vm);\n        expect(vm.$el.textContent).toBe('bar');\n        done();\n      });\n    });","file":"unit/features/instance/methods-lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should be called after DOM update in correct context, when using Promise syntax","suites":["Instance methods lifecycle","$nextTick"],"line":119,"updatePoint":{"line":119,"column":89,"index":3242},"code":"      it('should be called after DOM update in correct context, when using Promise syntax', done => {\n        const vm = new Vue({\n          template: '<div>{{ msg }}</div>',\n          data: {\n            msg: 'foo'\n          }\n        }).$mount();\n        vm.msg = 'bar';\n        vm.$nextTick().then(ctx => {\n          expect(ctx).toBe(vm);\n          expect(vm.$el.textContent).toBe('bar');\n          done();\n        });\n      });","file":"unit/features/instance/methods-lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"$data","suites":["Instance properties"],"line":3,"updatePoint":{"line":3,"column":11,"index":75},"code":"  it('$data', () => {\n    const data = {\n      a: 1\n    };\n    const vm = new Vue({\n      data\n    });\n    expect(vm.a).toBe(1);\n    expect(vm.$data).toBe(data); // vm -> data\n\n    vm.a = 2;\n    expect(data.a).toBe(2); // data -> vm\n\n    data.a = 3;\n    expect(vm.a).toBe(3);\n  });","file":"unit/features/instance/properties.spec.js","skipped":false,"dir":"test"},{"name":"$options","suites":["Instance properties"],"line":19,"updatePoint":{"line":19,"column":14,"index":360},"code":"  it('$options', () => {\n    const A = Vue.extend({\n      methods: {\n        a() {}\n\n      }\n    });\n    const vm = new A({\n      methods: {\n        b() {}\n\n      }\n    });\n    expect(typeof vm.$options.methods.a).toBe('function');\n    expect(typeof vm.$options.methods.b).toBe('function');\n  });","file":"unit/features/instance/properties.spec.js","skipped":false,"dir":"test"},{"name":"$root/$children","suites":["Instance properties"],"line":35,"updatePoint":{"line":35,"column":21,"index":664},"code":"  it('$root/$children', done => {\n    const vm = new Vue({\n      template: '<div><test v-if=\"ok\"></test></div>',\n      data: {\n        ok: true\n      },\n      components: {\n        test: {\n          template: '<div></div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$root).toBe(vm);\n    expect(vm.$children.length).toBe(1);\n    expect(vm.$children[0].$root).toBe(vm);\n    vm.ok = false;\n    waitForUpdate(() => {\n      expect(vm.$children.length).toBe(0);\n      vm.ok = true;\n    }).then(() => {\n      expect(vm.$children.length).toBe(1);\n      expect(vm.$children[0].$root).toBe(vm);\n    }).then(done);\n  });","file":"unit/features/instance/properties.spec.js","skipped":false,"dir":"test"},{"name":"$parent","suites":["Instance properties"],"line":59,"updatePoint":{"line":59,"column":13,"index":1272},"code":"  it('$parent', () => {\n    const calls = [];\n\n    const makeOption = name => ({\n      name,\n      template: `<div><slot></slot></div>`,\n\n      created() {\n        calls.push(`${name}:${this.$parent.$options.name}`);\n      }\n\n    });\n\n    new Vue({\n      template: `\n        <div>\n          <outer><middle><inner></inner></middle></outer>\n          <next></next>\n        </div>\n      `,\n      components: {\n        outer: makeOption('outer'),\n        middle: makeOption('middle'),\n        inner: makeOption('inner'),\n        next: makeOption('next')\n      }\n    }).$mount();\n    expect(calls).toEqual(['outer:undefined', 'middle:outer', 'inner:middle', 'next:undefined']);\n  });","file":"unit/features/instance/properties.spec.js","skipped":false,"dir":"test"},{"name":"$props","suites":["Instance properties"],"line":88,"updatePoint":{"line":88,"column":12,"index":1950},"code":"  it('$props', done => {\n    const Comp = Vue.extend({\n      props: ['msg'],\n      template: '<div>{{ msg }} {{ $props.msg }}</div>'\n    });\n    const vm = new Comp({\n      propsData: {\n        msg: 'foo'\n      }\n    }).$mount(); // check render\n\n    expect(vm.$el.textContent).toContain('foo foo'); // warn set\n\n    vm.$props = {};\n    expect('$props is readonly').toHaveBeenWarned(); // check existence\n\n    expect(vm.$props.msg).toBe('foo'); // check change\n\n    vm.msg = 'bar';\n    expect(vm.$props.msg).toBe('bar');\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toContain('bar bar');\n    }).then(() => {\n      vm.$props.msg = 'baz';\n      expect(vm.msg).toBe('baz');\n    }).then(() => {\n      expect(vm.$el.textContent).toContain('baz baz');\n    }).then(done);\n  });","file":"unit/features/instance/properties.spec.js","skipped":false,"dir":"test"},{"name":"warn mutating $props","suites":["Instance properties"],"line":117,"updatePoint":{"line":117,"column":26,"index":2749},"code":"  it('warn mutating $props', () => {\n    const Comp = {\n      props: ['msg'],\n\n      render() {},\n\n      mounted() {\n        expect(this.$props.msg).toBe('foo');\n        this.$props.msg = 'bar';\n      }\n\n    };\n    new Vue({\n      template: `<comp ref=\"comp\" msg=\"foo\" />`,\n      components: {\n        Comp\n      }\n    }).$mount();\n    expect(`Avoid mutating a prop`).toHaveBeenWarned();\n  });","file":"unit/features/instance/properties.spec.js","skipped":false,"dir":"test"},{"name":"$attrs","suites":["Instance properties"],"line":137,"updatePoint":{"line":137,"column":12,"index":3129},"code":"  it('$attrs', done => {\n    const vm = new Vue({\n      template: `<foo :id=\"foo\" bar=\"1\"/>`,\n      data: {\n        foo: 'foo'\n      },\n      components: {\n        foo: {\n          props: ['bar'],\n          template: `<div><div v-bind=\"$attrs\"></div></div>`\n        }\n      }\n    }).$mount();\n    expect(vm.$el.children[0].id).toBe('foo');\n    expect(vm.$el.children[0].hasAttribute('bar')).toBe(false);\n    vm.foo = 'bar';\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].id).toBe('bar');\n      expect(vm.$el.children[0].hasAttribute('bar')).toBe(false);\n    }).then(done);\n  });","file":"unit/features/instance/properties.spec.js","skipped":false,"dir":"test"},{"name":"warn mutating $attrs","suites":["Instance properties"],"line":158,"updatePoint":{"line":158,"column":26,"index":3733},"code":"  it('warn mutating $attrs', () => {\n    const vm = new Vue();\n    vm.$attrs = {};\n    expect(`$attrs is readonly`).toHaveBeenWarned();\n  });","file":"unit/features/instance/properties.spec.js","skipped":false,"dir":"test"},{"name":"$listeners","suites":["Instance properties"],"line":163,"updatePoint":{"line":163,"column":16,"index":3865},"code":"  it('$listeners', done => {\n    const spyA = jasmine.createSpy('A');\n    const spyB = jasmine.createSpy('B');\n    const vm = new Vue({\n      template: `<foo @click=\"foo\"/>`,\n      data: {\n        foo: spyA\n      },\n      components: {\n        foo: {\n          template: `<div v-on=\"$listeners\"></div>`\n        }\n      }\n    }).$mount(); // has to be in dom for test to pass in IE\n\n    document.body.appendChild(vm.$el);\n    triggerEvent(vm.$el, 'click');\n    expect(spyA.calls.count()).toBe(1);\n    expect(spyB.calls.count()).toBe(0);\n    vm.foo = spyB;\n    waitForUpdate(() => {\n      triggerEvent(vm.$el, 'click');\n      expect(spyA.calls.count()).toBe(1);\n      expect(spyB.calls.count()).toBe(1);\n      document.body.removeChild(vm.$el);\n    }).then(done);\n  });","file":"unit/features/instance/properties.spec.js","skipped":false,"dir":"test"},{"name":"warn mutating $listeners","suites":["Instance properties"],"line":190,"updatePoint":{"line":190,"column":30,"index":4647},"code":"  it('warn mutating $listeners', () => {\n    const vm = new Vue();\n    vm.$listeners = {};\n    expect(`$listeners is readonly`).toHaveBeenWarned();\n  });","file":"unit/features/instance/properties.spec.js","skipped":false,"dir":"test"},{"name":"should warn missing property in render fns with `with`","suites":["render proxy"],"line":5,"updatePoint":{"line":5,"column":62,"index":158},"code":"    it('should warn missing property in render fns with `with`', () => {\n      new Vue({\n        template: `<div>{{ a }}</div>`\n      }).$mount();\n      expect(`Property or method \"a\" is not defined`).toHaveBeenWarned();\n    });","file":"unit/features/instance/render-proxy.spec.js","skipped":false,"dir":"test"},{"name":"should warn missing property in render fns without `with`","suites":["render proxy"],"line":11,"updatePoint":{"line":11,"column":65,"index":390},"code":"    it('should warn missing property in render fns without `with`', () => {\n      const render = function (h) {\n        return h('div', [this.a]);\n      };\n\n      render._withStripped = true;\n      new Vue({\n        render\n      }).$mount();\n      expect(`Property or method \"a\" is not defined`).toHaveBeenWarned();\n    });","file":"unit/features/instance/render-proxy.spec.js","skipped":false,"dir":"test"},{"name":"should not warn for hand-written render functions","suites":["render proxy"],"line":22,"updatePoint":{"line":22,"column":57,"index":706},"code":"    it('should not warn for hand-written render functions', () => {\n      new Vue({\n        render(h) {\n          return h('div', [this.a]);\n        }\n\n      }).$mount();\n      expect(`Property or method \"a\" is not defined`).not.toHaveBeenWarned();\n    });","file":"unit/features/instance/render-proxy.spec.js","skipped":false,"dir":"test"},{"name":"should add scopeId attributes","suites":["Options _scopeId"],"line":3,"updatePoint":{"line":3,"column":35,"index":96},"code":"  it('should add scopeId attributes', () => {\n    const vm = new Vue({\n      _scopeId: 'foo',\n      template: '<div><p><span></span></p></div>'\n    }).$mount();\n    expect(vm.$el.hasAttribute('foo')).toBe(true);\n    expect(vm.$el.children[0].hasAttribute('foo')).toBe(true);\n    expect(vm.$el.children[0].children[0].hasAttribute('foo')).toBe(true);\n  });","file":"unit/features/options/_scopeId.spec.js","skipped":false,"dir":"test"},{"name":"should add scopedId attributes from both parent and child on child root","suites":["Options _scopeId"],"line":12,"updatePoint":{"line":12,"column":77,"index":494},"code":"  it('should add scopedId attributes from both parent and child on child root', () => {\n    const vm = new Vue({\n      _scopeId: 'foo',\n      template: '<div><child></child></div>',\n      components: {\n        child: {\n          _scopeId: 'bar',\n          template: '<div></div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.children[0].hasAttribute('foo')).toBe(true);\n    expect(vm.$el.children[0].hasAttribute('bar')).toBe(true);\n  });","file":"unit/features/options/_scopeId.spec.js","skipped":false,"dir":"test"},{"name":"should add scopedId attributes from both parent and child on slot contents","suites":["Options _scopeId"],"line":26,"updatePoint":{"line":26,"column":80,"index":944},"code":"  it('should add scopedId attributes from both parent and child on slot contents', () => {\n    const vm = new Vue({\n      _scopeId: 'foo',\n      template: '<div><child><p>hi</p></child></div>',\n      components: {\n        child: {\n          _scopeId: 'bar',\n          template: '<div><slot></slot></div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.children[0].children[0].hasAttribute('foo')).toBe(true);\n    expect(vm.$el.children[0].children[0].hasAttribute('bar')).toBe(true);\n  }); // #4774","file":"unit/features/options/_scopeId.spec.js","skipped":false,"dir":"test"},{"name":"should not discard parent scopeId when component root element is replaced","suites":["Options _scopeId"],"line":41,"updatePoint":{"line":41,"column":79,"index":1449},"code":"  it('should not discard parent scopeId when component root element is replaced', done => {\n    const vm = new Vue({\n      _scopeId: 'data-1',\n      template: `<div><child ref=\"child\" /></div>`,\n      components: {\n        child: {\n          _scopeId: 'data-2',\n          data: () => ({\n            show: true\n          }),\n          template: '<div v-if=\"show\"></div>'\n        }\n      }\n    }).$mount();\n    const child = vm.$refs.child;\n    expect(child.$el.hasAttribute('data-1')).toBe(true);\n    expect(child.$el.hasAttribute('data-2')).toBe(true);\n    child.show = false;\n    waitForUpdate(() => {\n      child.show = true;\n    }).then(() => {\n      expect(child.$el.hasAttribute('data-1')).toBe(true);\n      expect(child.$el.hasAttribute('data-2')).toBe(true);\n    }).then(done);\n  });","file":"unit/features/options/_scopeId.spec.js","skipped":false,"dir":"test"},{"name":"comments should be kept","suites":["Comments"],"line":3,"updatePoint":{"line":3,"column":29,"index":82},"code":"  it('comments should be kept', () => {\n    const vm = new Vue({\n      comments: true,\n\n      data() {\n        return {\n          foo: 1\n        };\n      },\n\n      template: '<div><span>node1</span><!--comment1-->{{foo}}<!--comment2--></div>'\n    }).$mount();\n    expect(vm.$el.innerHTML).toEqual('<span>node1</span><!--comment1-->1<!--comment2-->');\n  });","file":"unit/features/options/comments.spec.js","skipped":false,"dir":"test"},{"name":"should accept plain object","suites":["Options components"],"line":4,"updatePoint":{"line":4,"column":32,"index":131},"code":"  it('should accept plain object', () => {\n    const vm = new Vue({\n      template: '<test></test>',\n      components: {\n        test: {\n          template: '<div>hi</div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.tagName).toBe('DIV');\n    expect(vm.$el.textContent).toBe('hi');\n  });","file":"unit/features/options/components.spec.js","skipped":false,"dir":"test"},{"name":"should accept extended constructor","suites":["Options components"],"line":16,"updatePoint":{"line":16,"column":40,"index":436},"code":"  it('should accept extended constructor', () => {\n    const Test = Vue.extend({\n      template: '<div>hi</div>'\n    });\n    const vm = new Vue({\n      template: '<test></test>',\n      components: {\n        test: Test\n      }\n    }).$mount();\n    expect(vm.$el.tagName).toBe('DIV');\n    expect(vm.$el.textContent).toBe('hi');\n  });","file":"unit/features/options/components.spec.js","skipped":false,"dir":"test"},{"name":"should accept camelCase","suites":["Options components"],"line":29,"updatePoint":{"line":29,"column":29,"index":757},"code":"  it('should accept camelCase', () => {\n    const myComp = {\n      template: '<div>hi</div>'\n    };\n    const vm = new Vue({\n      template: '<my-comp></my-comp>',\n      components: {\n        myComp\n      }\n    }).$mount();\n    expect(vm.$el.tagName).toBe('DIV');\n    expect(vm.$el.textContent).toBe('hi');\n  });","file":"unit/features/options/components.spec.js","skipped":false,"dir":"test"},{"name":"should accept PascalCase","suites":["Options components"],"line":42,"updatePoint":{"line":42,"column":30,"index":1071},"code":"  it('should accept PascalCase', () => {\n    const MyComp = {\n      template: '<div>hi</div>'\n    };\n    const vm = new Vue({\n      template: '<my-comp></my-comp>',\n      components: {\n        MyComp\n      }\n    }).$mount();\n    expect(vm.$el.tagName).toBe('DIV');\n    expect(vm.$el.textContent).toBe('hi');\n  });","file":"unit/features/options/components.spec.js","skipped":false,"dir":"test"},{"name":"should warn native HTML elements","suites":["Options components"],"line":55,"updatePoint":{"line":55,"column":38,"index":1393},"code":"  it('should warn native HTML elements', () => {\n    new Vue({\n      components: {\n        div: {\n          template: '<div></div>'\n        }\n      }\n    });\n    expect('Do not use built-in or reserved HTML elements as component').toHaveBeenWarned();\n  });","file":"unit/features/options/components.spec.js","skipped":false,"dir":"test"},{"name":"should warn built-in elements","suites":["Options components"],"line":65,"updatePoint":{"line":65,"column":35,"index":1647},"code":"  it('should warn built-in elements', () => {\n    new Vue({\n      components: {\n        component: {\n          template: '<div></div>'\n        }\n      }\n    });\n    expect('Do not use built-in or reserved HTML elements as component').toHaveBeenWarned();\n  }); // the HTMLUnknownElement check doesn't work in Android 4.2","file":"unit/features/options/components.spec.js","skipped":false,"dir":"test"},{"name":"warn non-existent","suites":["Options components"],"line":79,"updatePoint":{"line":79,"column":25,"index":2141},"code":"    it('warn non-existent', () => {\n      new Vue({\n        template: '<test></test>'\n      }).$mount();\n      expect('Unknown custom element: <test>').toHaveBeenWarned();\n    });","file":"unit/features/options/components.spec.js","skipped":false,"dir":"test"},{"name":"basic usage","suites":["Options computed"],"line":4,"updatePoint":{"line":4,"column":17,"index":146},"code":"  it('basic usage', done => {\n    const vm = new Vue({\n      template: '<div>{{ b }}</div>',\n      data: {\n        a: 1\n      },\n      computed: {\n        b() {\n          return this.a + 1;\n        }\n\n      }\n    }).$mount();\n    expect(vm.b).toBe(2);\n    expect(vm.$el.textContent).toBe('2');\n    vm.a = 2;\n    expect(vm.b).toBe(3);\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('3');\n    }).then(done);\n  });","file":"unit/features/options/computed.spec.js","skipped":false,"dir":"test"},{"name":"with setter","suites":["Options computed"],"line":25,"updatePoint":{"line":25,"column":17,"index":575},"code":"  it('with setter', done => {\n    const vm = new Vue({\n      template: '<div>{{ b }}</div>',\n      data: {\n        a: 1\n      },\n      computed: {\n        b: {\n          get() {\n            return this.a + 1;\n          },\n\n          set(v) {\n            this.a = v - 1;\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.b).toBe(2);\n    expect(vm.$el.textContent).toBe('2');\n    vm.a = 2;\n    expect(vm.b).toBe(3);\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('3');\n      vm.b = 1;\n      expect(vm.a).toBe(0);\n    }).then(() => {\n      expect(vm.$el.textContent).toBe('1');\n    }).then(done);\n  });","file":"unit/features/options/computed.spec.js","skipped":false,"dir":"test"},{"name":"warn with setter and no getter","suites":["Options computed"],"line":57,"updatePoint":{"line":57,"column":36,"index":1255},"code":"  it('warn with setter and no getter', () => {\n    const vm = new Vue({\n      template: `\n        <div>\n          <test></test>\n        </div>\n      `,\n      components: {\n        test: {\n          data() {\n            return {\n              a: 1\n            };\n          },\n\n          computed: {\n            b: {\n              set(v) {\n                this.a = v;\n              }\n\n            }\n          },\n          template: `<div>{{a}}</div>`\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<div>1</div>');\n    expect('No getter function has been defined for computed property \"b\".').toHaveBeenWarned();\n  });","file":"unit/features/options/computed.spec.js","skipped":false,"dir":"test"},{"name":"watching computed","suites":["Options computed"],"line":87,"updatePoint":{"line":87,"column":23,"index":1880},"code":"  it('watching computed', done => {\n    const spy = jasmine.createSpy('watch computed');\n    const vm = new Vue({\n      data: {\n        a: 1\n      },\n      computed: {\n        b() {\n          return this.a + 1;\n        }\n\n      }\n    });\n    vm.$watch('b', spy);\n    vm.a = 2;\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith(3, 2);\n    }).then(done);\n  });","file":"unit/features/options/computed.spec.js","skipped":false,"dir":"test"},{"name":"caching","suites":["Options computed"],"line":106,"updatePoint":{"line":106,"column":13,"index":2244},"code":"  it('caching', () => {\n    const spy = jasmine.createSpy('cached computed');\n    const vm = new Vue({\n      data: {\n        a: 1\n      },\n      computed: {\n        b() {\n          spy();\n          return this.a + 1;\n        }\n\n      }\n    });\n    expect(spy.calls.count()).toBe(0);\n    vm.b;\n    expect(spy.calls.count()).toBe(1);\n    vm.b;\n    expect(spy.calls.count()).toBe(1);\n  });","file":"unit/features/options/computed.spec.js","skipped":false,"dir":"test"},{"name":"cache: false","suites":["Options computed"],"line":126,"updatePoint":{"line":126,"column":18,"index":2636},"code":"  it('cache: false', () => {\n    const spy = jasmine.createSpy('cached computed');\n    const vm = new Vue({\n      data: {\n        a: 1\n      },\n      computed: {\n        b: {\n          cache: false,\n\n          get() {\n            spy();\n            return this.a + 1;\n          }\n\n        }\n      }\n    });\n    expect(spy.calls.count()).toBe(0);\n    vm.b;\n    expect(spy.calls.count()).toBe(1);\n    vm.b;\n    expect(spy.calls.count()).toBe(2);\n  });","file":"unit/features/options/computed.spec.js","skipped":false,"dir":"test"},{"name":"as component","suites":["Options computed"],"line":150,"updatePoint":{"line":150,"column":18,"index":3086},"code":"  it('as component', done => {\n    const Comp = Vue.extend({\n      template: `<div>{{ b }} {{ c }}</div>`,\n\n      data() {\n        return {\n          a: 1\n        };\n      },\n\n      computed: {\n        // defined on prototype\n        b() {\n          return this.a + 1;\n        }\n\n      }\n    });\n    const vm = new Comp({\n      computed: {\n        // defined at instantiation\n        c() {\n          return this.b + 1;\n        }\n\n      }\n    }).$mount();\n    expect(vm.b).toBe(2);\n    expect(vm.c).toBe(3);\n    expect(vm.$el.textContent).toBe('2 3');\n    vm.a = 2;\n    expect(vm.b).toBe(3);\n    expect(vm.c).toBe(4);\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('3 4');\n    }).then(done);\n  });","file":"unit/features/options/computed.spec.js","skipped":false,"dir":"test"},{"name":"warn conflict with data","suites":["Options computed"],"line":187,"updatePoint":{"line":187,"column":29,"index":3811},"code":"  it('warn conflict with data', () => {\n    new Vue({\n      data: {\n        a: 1\n      },\n      computed: {\n        a: () => 2\n      }\n    });\n    expect(`computed property \"a\" is already defined in data`).toHaveBeenWarned();\n  });","file":"unit/features/options/computed.spec.js","skipped":false,"dir":"test"},{"name":"warn conflict with props","suites":["Options computed"],"line":198,"updatePoint":{"line":198,"column":30,"index":4044},"code":"  it('warn conflict with props', () => {\n    new Vue({\n      props: ['a'],\n      propsData: {\n        a: 1\n      },\n      computed: {\n        a: () => 2\n      }\n    });\n    expect(`computed property \"a\" is already defined as a prop`).toHaveBeenWarned();\n  });","file":"unit/features/options/computed.spec.js","skipped":false,"dir":"test"},{"name":"rethrow computed error","suites":["Options computed"],"line":210,"updatePoint":{"line":210,"column":28,"index":4302},"code":"  it('rethrow computed error', () => {\n    const vm = new Vue({\n      computed: {\n        a: () => {\n          throw new Error('rethrow');\n        }\n      }\n    });\n    expect(() => vm.a).toThrowError('rethrow');\n  });","file":"unit/features/options/computed.spec.js","skipped":false,"dir":"test"},{"name":"should proxy and be reactive","suites":["Options data"],"line":3,"updatePoint":{"line":3,"column":34,"index":91},"code":"  it('should proxy and be reactive', done => {\n    const data = {\n      msg: 'foo'\n    };\n    const vm = new Vue({\n      data,\n      template: '<div>{{ msg }}</div>'\n    }).$mount();\n    expect(vm.$data).toEqual({\n      msg: 'foo'\n    });\n    expect(vm.$data).toBe(data);\n    data.msg = 'bar';\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('bar');\n    }).then(done);\n  });","file":"unit/features/options/data.spec.js","skipped":false,"dir":"test"},{"name":"should merge data properly","suites":["Options data"],"line":20,"updatePoint":{"line":20,"column":32,"index":480},"code":"  it('should merge data properly', () => {\n    const Test = Vue.extend({\n      data() {\n        return {\n          a: 1\n        };\n      }\n\n    });\n    let vm = new Test({\n      data: {\n        b: 2\n      }\n    });\n    expect(vm.a).toBe(1);\n    expect(vm.b).toBe(2); // no instance data\n\n    vm = new Test();\n    expect(vm.a).toBe(1); // no child-val\n\n    const Extended = Test.extend({});\n    vm = new Extended();\n    expect(vm.a).toBe(1); // recursively merge objects\n\n    const WithObject = Vue.extend({\n      data() {\n        return {\n          obj: {\n            a: 1\n          }\n        };\n      }\n\n    });\n    vm = new WithObject({\n      data: {\n        obj: {\n          b: 2\n        }\n      }\n    });\n    expect(vm.obj.a).toBe(1);\n    expect(vm.obj.b).toBe(2);\n  });","file":"unit/features/options/data.spec.js","skipped":false,"dir":"test"},{"name":"should warn non-function during extend","suites":["Options data"],"line":64,"updatePoint":{"line":64,"column":44,"index":1267},"code":"  it('should warn non-function during extend', () => {\n    Vue.extend({\n      data: {\n        msg: 'foo'\n      }\n    });\n    expect('The \"data\" option should be a function').toHaveBeenWarned();\n  });","file":"unit/features/options/data.spec.js","skipped":false,"dir":"test"},{"name":"should warn non object return","suites":["Options data"],"line":72,"updatePoint":{"line":72,"column":35,"index":1458},"code":"  it('should warn non object return', () => {\n    new Vue({\n      data() {}\n\n    });\n    expect('data functions should return an object').toHaveBeenWarned();\n  });","file":"unit/features/options/data.spec.js","skipped":false,"dir":"test"},{"name":"should warn replacing root $data","suites":["Options data"],"line":79,"updatePoint":{"line":79,"column":38,"index":1625},"code":"  it('should warn replacing root $data', () => {\n    const vm = new Vue({\n      data: {}\n    });\n    vm.$data = {};\n    expect('Avoid replacing instance root $data').toHaveBeenWarned();\n  });","file":"unit/features/options/data.spec.js","skipped":false,"dir":"test"},{"name":"should have access to props","suites":["Options data"],"line":86,"updatePoint":{"line":86,"column":33,"index":1812},"code":"  it('should have access to props', () => {\n    const Test = {\n      props: ['a'],\n\n      render() {},\n\n      data() {\n        return {\n          b: this.a\n        };\n      }\n\n    };\n    const vm = new Vue({\n      template: `<test ref=\"test\" :a=\"1\"></test>`,\n      components: {\n        Test\n      }\n    }).$mount();\n    expect(vm.$refs.test.b).toBe(1);\n  });","file":"unit/features/options/data.spec.js","skipped":false,"dir":"test"},{"name":"should have access to methods","suites":["Options data"],"line":107,"updatePoint":{"line":107,"column":35,"index":2174},"code":"  it('should have access to methods', () => {\n    const vm = new Vue({\n      methods: {\n        get() {\n          return {\n            a: 1\n          };\n        }\n\n      },\n\n      data() {\n        return this.get();\n      }\n\n    });\n    expect(vm.a).toBe(1);\n  });","file":"unit/features/options/data.spec.js","skipped":false,"dir":"test"},{"name":"default delimiters should work","suites":["Delimiters"],"line":3,"updatePoint":{"line":3,"column":36,"index":91},"code":"  it('default delimiters should work', () => {\n    const vm = new Vue({\n      data: {\n        a: 1\n      },\n      template: '<div>{{ a }}</div>'\n    }).$mount();\n    expect(vm.$el.textContent).toEqual('1');\n  });","file":"unit/features/options/delimiters.spec.js","skipped":false,"dir":"test"},{"name":"custom delimiters should work","suites":["Delimiters"],"line":12,"updatePoint":{"line":12,"column":35,"index":303},"code":"  it('custom delimiters should work', () => {\n    const vm = new Vue({\n      delimiters: ['[[', ']]'],\n      template: '<div>[[ a ]]</div>',\n      data: {\n        a: 1\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toEqual('1');\n  });","file":"unit/features/options/delimiters.spec.js","skipped":false,"dir":"test"},{"name":"default delimiters should be ignored when custom delimiters defined","suites":["Delimiters"],"line":22,"updatePoint":{"line":22,"column":73,"index":585},"code":"  it('default delimiters should be ignored when custom delimiters defined', () => {\n    const vm = new Vue({\n      delimiters: ['[[', ']]'],\n      template: '<div>{{ a }}</div>',\n      data: {\n        a: 1\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toEqual('{{ a }}');\n  });","file":"unit/features/options/delimiters.spec.js","skipped":false,"dir":"test"},{"name":"delimiters should only affect vm","suites":["Delimiters"],"line":32,"updatePoint":{"line":32,"column":38,"index":838},"code":"  it('delimiters should only affect vm', () => {\n    const Component = Vue.extend({\n      data: function () {\n        return {\n          b: 2\n        };\n      },\n      template: '<span>[[ b ]]</span>'\n    });\n    const vm = new Vue({\n      delimiters: ['[[', ']]'],\n      template: '<div>[[ a ]] - <test-component></test-component></div>',\n      data: {\n        a: 2\n      },\n      components: {\n        'test-component': Component\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toEqual('2 - [[ b ]]');\n  });","file":"unit/features/options/delimiters.spec.js","skipped":false,"dir":"test"},{"name":"delimiters defined globally should work on all vms","suites":["Delimiters"],"line":53,"updatePoint":{"line":53,"column":56,"index":1374},"code":"  it('delimiters defined globally should work on all vms', () => {\n    Vue.options.delimiters = ['[[', ']]'];\n    const Component = Vue.extend({\n      template: '<span>[[ a ]]</span>',\n      data: function () {\n        return {\n          a: 2\n        };\n      }\n    });\n    const vm = new Vue({\n      data: {\n        b: 1\n      },\n      template: '<div>[[ b ]] - <test-component></test-component></div>',\n      components: {\n        'test-component': Component\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toEqual('1 - 2'); // restore default options\n\n    delete Vue.options.delimiters;\n  });","file":"unit/features/options/delimiters.spec.js","skipped":false,"dir":"test"},{"name":"component specific delimiters should override global delimiters","suites":["Delimiters"],"line":76,"updatePoint":{"line":76,"column":69,"index":1991},"code":"  it('component specific delimiters should override global delimiters', () => {\n    Vue.options.delimiters = ['[[', ']]'];\n    const Component = Vue.extend({\n      delimiters: ['@{{', '}}'],\n      template: '<span>@{{ a }}</span>',\n      data: function () {\n        return {\n          a: 2\n        };\n      }\n    });\n    const vm = new Vue({\n      data: {\n        b: 1\n      },\n      template: '<div>[[ b ]] - <test-component></test-component></div>',\n      components: {\n        'test-component': Component\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toEqual('1 - 2'); // restore default options\n\n    delete Vue.options.delimiters;\n  });","file":"unit/features/options/delimiters.spec.js","skipped":false,"dir":"test"},{"name":"basic usage","suites":["Options directives"],"line":3,"updatePoint":{"line":3,"column":17,"index":80},"code":"  it('basic usage', done => {\n    const bindSpy = jasmine.createSpy('bind');\n    const insertedSpy = jasmine.createSpy('inserted');\n    const updateSpy = jasmine.createSpy('update');\n    const componentUpdatedSpy = jasmine.createSpy('componentUpdated');\n    const unbindSpy = jasmine.createSpy('unbind');\n\n    const assertContext = (el, binding, vnode) => {\n      expect(vnode.context).toBe(vm);\n      expect(binding.arg).toBe('arg');\n      expect(binding.modifiers).toEqual({\n        hello: true\n      });\n    };\n\n    const vm = new Vue({\n      template: '<div class=\"hi\"><div v-if=\"ok\" v-test:arg.hello=\"a\">{{ msg }}</div></div>',\n      data: {\n        msg: 'hi',\n        a: 'foo',\n        ok: true\n      },\n      directives: {\n        test: {\n          bind(el, binding, vnode) {\n            bindSpy();\n            assertContext(el, binding, vnode);\n            expect(binding.value).toBe('foo');\n            expect(binding.expression).toBe('a');\n            expect(binding.oldValue).toBeUndefined();\n            expect(el.parentNode).toBeNull();\n          },\n\n          inserted(el, binding, vnode) {\n            insertedSpy();\n            assertContext(el, binding, vnode);\n            expect(binding.value).toBe('foo');\n            expect(binding.expression).toBe('a');\n            expect(binding.oldValue).toBeUndefined();\n            expect(el.parentNode.className).toBe('hi');\n          },\n\n          update(el, binding, vnode, oldVnode) {\n            updateSpy();\n            assertContext(el, binding, vnode);\n            expect(el).toBe(vm.$el.children[0]);\n            expect(oldVnode).not.toBe(vnode);\n            expect(binding.expression).toBe('a');\n\n            if (binding.value !== binding.oldValue) {\n              expect(binding.value).toBe('bar');\n              expect(binding.oldValue).toBe('foo');\n            }\n          },\n\n          componentUpdated(el, binding, vnode) {\n            componentUpdatedSpy();\n            assertContext(el, binding, vnode);\n          },\n\n          unbind(el, binding, vnode) {\n            unbindSpy();\n            assertContext(el, binding, vnode);\n          }\n\n        }\n      }\n    });\n    vm.$mount();\n    expect(bindSpy).toHaveBeenCalled();\n    expect(insertedSpy).toHaveBeenCalled();\n    expect(updateSpy).not.toHaveBeenCalled();\n    expect(componentUpdatedSpy).not.toHaveBeenCalled();\n    expect(unbindSpy).not.toHaveBeenCalled();\n    vm.a = 'bar';\n    waitForUpdate(() => {\n      expect(updateSpy).toHaveBeenCalled();\n      expect(componentUpdatedSpy).toHaveBeenCalled();\n      expect(unbindSpy).not.toHaveBeenCalled();\n      vm.msg = 'bye';\n    }).then(() => {\n      expect(componentUpdatedSpy.calls.count()).toBe(2);\n      vm.ok = false;\n    }).then(() => {\n      expect(unbindSpy).toHaveBeenCalled();\n    }).then(done);\n  });","file":"unit/features/options/directives.spec.js","skipped":false,"dir":"test"},{"name":"function shorthand","suites":["Options directives"],"line":90,"updatePoint":{"line":90,"column":24,"index":2880},"code":"  it('function shorthand', done => {\n    const spy = jasmine.createSpy('directive');\n    const vm = new Vue({\n      template: '<div v-test:arg.hello=\"a\"></div>',\n      data: {\n        a: 'foo'\n      },\n      directives: {\n        test(el, binding, vnode) {\n          expect(vnode.context).toBe(vm);\n          expect(binding.arg).toBe('arg');\n          expect(binding.modifiers).toEqual({\n            hello: true\n          });\n          spy(binding.value, binding.oldValue);\n        }\n\n      }\n    });\n    vm.$mount();\n    expect(spy).toHaveBeenCalledWith('foo', undefined);\n    vm.a = 'bar';\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith('bar', 'foo');\n    }).then(done);\n  });","file":"unit/features/options/directives.spec.js","skipped":false,"dir":"test"},{"name":"function shorthand (global)","suites":["Options directives"],"line":116,"updatePoint":{"line":116,"column":33,"index":3586},"code":"  it('function shorthand (global)', done => {\n    const spy = jasmine.createSpy('directive');\n    Vue.directive('test', function (el, binding, vnode) {\n      expect(vnode.context).toBe(vm);\n      expect(binding.arg).toBe('arg');\n      expect(binding.modifiers).toEqual({\n        hello: true\n      });\n      spy(binding.value, binding.oldValue);\n    });\n    const vm = new Vue({\n      template: '<div v-test:arg.hello=\"a\"></div>',\n      data: {\n        a: 'foo'\n      }\n    });\n    vm.$mount();\n    expect(spy).toHaveBeenCalledWith('foo', undefined);\n    vm.a = 'bar';\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith('bar', 'foo');\n      delete Vue.options.directives.test;\n    }).then(done);\n  });","file":"unit/features/options/directives.spec.js","skipped":false,"dir":"test"},{"name":"should teardown directives on old vnodes when new vnodes have none","suites":["Options directives"],"line":140,"updatePoint":{"line":140,"column":72,"index":4340},"code":"  it('should teardown directives on old vnodes when new vnodes have none', done => {\n    const vm = new Vue({\n      data: {\n        ok: true\n      },\n      template: `\n        <div>\n          <div v-if=\"ok\" v-test>a</div>\n          <div v-else class=\"b\">b</div>\n        </div>\n      `,\n      directives: {\n        test: {\n          bind: el => {\n            el.id = 'a';\n          },\n          unbind: el => {\n            el.id = '';\n          }\n        }\n      }\n    }).$mount();\n    expect(vm.$el.children[0].id).toBe('a');\n    vm.ok = false;\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].id).toBe('');\n      expect(vm.$el.children[0].className).toBe('b');\n    }).then(done);\n  });","file":"unit/features/options/directives.spec.js","skipped":false,"dir":"test"},{"name":"should properly handle same node with different directive sets","suites":["Options directives"],"line":169,"updatePoint":{"line":169,"column":68,"index":5032},"code":"  it('should properly handle same node with different directive sets', done => {\n    const spies = {};\n\n    const createSpy = name => spies[name] = jasmine.createSpy(name);\n\n    const vm = new Vue({\n      data: {\n        ok: true,\n        val: 123\n      },\n      template: `\n        <div>\n          <div v-if=\"ok\" v-test=\"val\" v-test.hi=\"val\"></div>\n          <div v-if=\"!ok\" v-test.hi=\"val\" v-test2=\"val\"></div>\n        </div>\n      `,\n      directives: {\n        test: {\n          bind: createSpy('bind1'),\n          inserted: createSpy('inserted1'),\n          update: createSpy('update1'),\n          componentUpdated: createSpy('componentUpdated1'),\n          unbind: createSpy('unbind1')\n        },\n        test2: {\n          bind: createSpy('bind2'),\n          inserted: createSpy('inserted2'),\n          update: createSpy('update2'),\n          componentUpdated: createSpy('componentUpdated2'),\n          unbind: createSpy('unbind2')\n        }\n      }\n    }).$mount();\n    expect(spies.bind1.calls.count()).toBe(2);\n    expect(spies.inserted1.calls.count()).toBe(2);\n    expect(spies.bind2.calls.count()).toBe(0);\n    expect(spies.inserted2.calls.count()).toBe(0);\n    vm.ok = false;\n    waitForUpdate(() => {\n      // v-test with modifier should be updated\n      expect(spies.update1.calls.count()).toBe(1);\n      expect(spies.componentUpdated1.calls.count()).toBe(1); // v-test without modifier should be unbound\n\n      expect(spies.unbind1.calls.count()).toBe(1); // v-test2 should be bound\n\n      expect(spies.bind2.calls.count()).toBe(1);\n      expect(spies.inserted2.calls.count()).toBe(1);\n      vm.ok = true;\n    }).then(() => {\n      // v-test without modifier should be bound again\n      expect(spies.bind1.calls.count()).toBe(3);\n      expect(spies.inserted1.calls.count()).toBe(3); // v-test2 should be unbound\n\n      expect(spies.unbind2.calls.count()).toBe(1); // v-test with modifier should be updated again\n\n      expect(spies.update1.calls.count()).toBe(2);\n      expect(spies.componentUpdated1.calls.count()).toBe(2);\n      vm.val = 234;\n    }).then(() => {\n      expect(spies.update1.calls.count()).toBe(4);\n      expect(spies.componentUpdated1.calls.count()).toBe(4);\n    }).then(done);\n  });","file":"unit/features/options/directives.spec.js","skipped":false,"dir":"test"},{"name":"warn non-existent","suites":["Options directives"],"line":232,"updatePoint":{"line":232,"column":23,"index":7205},"code":"  it('warn non-existent', () => {\n    new Vue({\n      template: '<div v-test></div>'\n    }).$mount();\n    expect('Failed to resolve directive: test').toHaveBeenWarned();\n  });","file":"unit/features/options/directives.spec.js","skipped":false,"dir":"test"},{"name":"basic usage","suites":["Options el"],"line":3,"updatePoint":{"line":3,"column":17,"index":72},"code":"  it('basic usage', () => {\n    const el = document.createElement('div');\n    el.innerHTML = '<span>{{message}}</span>';\n    const vm = new Vue({\n      el,\n      data: {\n        message: 'hello world'\n      }\n    });\n    expect(vm.$el.tagName).toBe('DIV');\n    expect(vm.$el.textContent).toBe(vm.message);\n  });","file":"unit/features/options/el.spec.js","skipped":false,"dir":"test"},{"name":"should be replaced when use together with `template` option","suites":["Options el"],"line":15,"updatePoint":{"line":15,"column":65,"index":432},"code":"  it('should be replaced when use together with `template` option', () => {\n    const el = document.createElement('div');\n    el.innerHTML = '<span>{{message}}</span>';\n    const vm = new Vue({\n      el,\n      template: '<p id=\"app\"><span>{{message}}</span></p>',\n      data: {\n        message: 'hello world'\n      }\n    });\n    expect(vm.$el.tagName).toBe('P');\n    expect(vm.$el.textContent).toBe(vm.message);\n  });","file":"unit/features/options/el.spec.js","skipped":false,"dir":"test"},{"name":"should be replaced when use together with `render` option","suites":["Options el"],"line":28,"updatePoint":{"line":28,"column":63,"index":848},"code":"  it('should be replaced when use together with `render` option', () => {\n    const el = document.createElement('div');\n    el.innerHTML = '<span>{{message}}</span>';\n    const vm = new Vue({\n      el,\n\n      render(h) {\n        return h('p', {\n          staticAttrs: {\n            id: 'app'\n          }\n        }, [h('span', {}, [this.message])]);\n      },\n\n      data: {\n        message: 'hello world'\n      }\n    });\n    expect(vm.$el.tagName).toBe('P');\n    expect(vm.$el.textContent).toBe(vm.message);\n  });","file":"unit/features/options/el.spec.js","skipped":false,"dir":"test"},{"name":"svg element","suites":["Options el"],"line":49,"updatePoint":{"line":49,"column":17,"index":1315},"code":"  it('svg element', () => {\n    const parent = document.createElement('div');\n    parent.innerHTML = '<svg>' + '<text :x=\"x\" :y=\"y\" :fill=\"color\">{{ text }}</text>' + '<g><clipPath><foo></foo></clipPath></g>' + '</svg>';\n    const vm = new Vue({\n      el: parent.childNodes[0],\n      data: {\n        x: 64,\n        y: 128,\n        color: 'red',\n        text: 'svg text'\n      }\n    });\n    expect(vm.$el.tagName).toBe('svg');\n    expect(vm.$el.childNodes[0].getAttribute('x')).toBe(vm.x.toString());\n    expect(vm.$el.childNodes[0].getAttribute('y')).toBe(vm.y.toString());\n    expect(vm.$el.childNodes[0].getAttribute('fill')).toBe(vm.color);\n    expect(vm.$el.childNodes[0].textContent).toBe(vm.text); // nested, non-explicitly listed SVG elements\n\n    expect(vm.$el.childNodes[1].childNodes[0].namespaceURI).toContain('svg');\n    expect(vm.$el.childNodes[1].childNodes[0].childNodes[0].namespaceURI).toContain('svg');\n  }); // https://w3c.github.io/DOM-Parsing/#dfn-serializing-an-attribute-value","file":"unit/features/options/el.spec.js","skipped":false,"dir":"test"},{"name":"properly decode attribute values when parsing templates from DOM","suites":["Options el"],"line":71,"updatePoint":{"line":71,"column":70,"index":2369},"code":"  it('properly decode attribute values when parsing templates from DOM', () => {\n    const el = document.createElement('div');\n    el.innerHTML = '<a href=\"/a?foo=bar&baz=qux\" name=\"<abc>\" single=\\'\"hi\"\\'></a>';\n    const vm = new Vue({\n      el\n    });\n    expect(vm.$el.children[0].getAttribute('href')).toBe('/a?foo=bar&baz=qux');\n    expect(vm.$el.children[0].getAttribute('name')).toBe('<abc>');\n    expect(vm.$el.children[0].getAttribute('single')).toBe('\"hi\"');\n  });","file":"unit/features/options/el.spec.js","skipped":false,"dir":"test"},{"name":"decode attribute value newlines when parsing templates from DOM in IE","suites":["Options el"],"line":81,"updatePoint":{"line":81,"column":75,"index":2849},"code":"  it('decode attribute value newlines when parsing templates from DOM in IE', () => {\n    const el = document.createElement('div');\n    el.innerHTML = `<a :style=\"{\\ncolor:'red'\\n}\"></a>`;\n    const vm = new Vue({\n      el\n    });\n    expect(vm.$el.children[0].style.color).toBe('red');\n  });","file":"unit/features/options/el.spec.js","skipped":false,"dir":"test"},{"name":"warn cannot find element","suites":["Options el"],"line":89,"updatePoint":{"line":89,"column":30,"index":3097},"code":"  it('warn cannot find element', () => {\n    new Vue({\n      el: '#non-existent'\n    });\n    expect('Cannot find element: #non-existent').toHaveBeenWarned();\n  });","file":"unit/features/options/el.spec.js","skipped":false,"dir":"test"},{"name":"should work on objects","suites":["Options extends"],"line":3,"updatePoint":{"line":3,"column":28,"index":88},"code":"  it('should work on objects', () => {\n    const A = {\n      data() {\n        return {\n          a: 1\n        };\n      }\n\n    };\n    const B = {\n      extends: A,\n\n      data() {\n        return {\n          b: 2\n        };\n      }\n\n    };\n    const vm = new Vue({\n      extends: B,\n      data: {\n        c: 3\n      }\n    });\n    expect(vm.a).toBe(1);\n    expect(vm.b).toBe(2);\n    expect(vm.c).toBe(3);\n  });","file":"unit/features/options/extends.spec.js","skipped":false,"dir":"test"},{"name":"should work on extended constructors","suites":["Options extends"],"line":32,"updatePoint":{"line":32,"column":42,"index":510},"code":"  it('should work on extended constructors', () => {\n    const A = Vue.extend({\n      data() {\n        return {\n          a: 1\n        };\n      }\n\n    });\n    const B = Vue.extend({\n      extends: A,\n\n      data() {\n        return {\n          b: 2\n        };\n      }\n\n    });\n    const vm = new Vue({\n      extends: B,\n      data: {\n        c: 3\n      }\n    });\n    expect(vm.a).toBe(1);\n    expect(vm.b).toBe(2);\n    expect(vm.c).toBe(3);\n  });","file":"unit/features/options/extends.spec.js","skipped":false,"dir":"test"},{"name":"should work with global mixins + Object.prototype.watch","suites":["Options extends"],"line":61,"updatePoint":{"line":61,"column":61,"index":975},"code":"  it('should work with global mixins + Object.prototype.watch', done => {\n    let fakeWatch = false;\n\n    if (!Object.prototype.watch) {\n      fakeWatch = true; // eslint-disable-next-line no-extend-native\n\n      Object.defineProperty(Object.prototype, 'watch', {\n        writable: true,\n        configurable: true,\n        enumerable: false,\n        value: () => {}\n      });\n    }\n\n    Vue.mixin({});\n    const spy = jasmine.createSpy('watch');\n    const A = Vue.extend({\n      data: function () {\n        return {\n          a: 1\n        };\n      },\n      watch: {\n        a: spy\n      },\n      created: function () {\n        this.a = 2;\n      }\n    });\n    new Vue({\n      extends: A\n    });\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith(2, 1);\n\n      if (fakeWatch) {\n        delete Object.prototype.watch;\n      }\n    }).then(done);\n  });","file":"unit/features/options/extends.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Options functional"],"line":4,"updatePoint":{"line":4,"column":17,"index":132},"code":"  it('should work', done => {\n    const vm = new Vue({\n      data: {\n        test: 'foo'\n      },\n      template: '<div><wrap :msg=\"test\">bar</wrap></div>',\n      components: {\n        wrap: {\n          functional: true,\n          props: ['msg'],\n\n          render(h, {\n            props,\n            children\n          }) {\n            return h('div', null, [props.msg, ' '].concat(children));\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<div>foo bar</div>');\n    vm.test = 'qux';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<div>qux bar</div>');\n    }).then(done);\n  });","file":"unit/features/options/functional.spec.js","skipped":false,"dir":"test"},{"name":"should expose all props when not declared","suites":["Options functional"],"line":31,"updatePoint":{"line":31,"column":47,"index":793},"code":"  it('should expose all props when not declared', done => {\n    const fn = {\n      functional: true,\n\n      render(h, {\n        props\n      }) {\n        return h('div', `${props.msg} ${props.kebabMsg}`);\n      }\n\n    };\n    const vm = new Vue({\n      data: {\n        test: 'foo'\n      },\n\n      render(h) {\n        return h('div', [h(fn, {\n          props: {\n            msg: this.test\n          },\n          attrs: {\n            'kebab-msg': 'bar'\n          }\n        })]);\n      }\n\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<div>foo bar</div>');\n    vm.test = 'qux';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<div>qux bar</div>');\n    }).then(done);\n  });","file":"unit/features/options/functional.spec.js","skipped":false,"dir":"test"},{"name":"should expose data.on as listeners","suites":["Options functional"],"line":65,"updatePoint":{"line":65,"column":40,"index":1475},"code":"  it('should expose data.on as listeners', () => {\n    const foo = jasmine.createSpy('foo');\n    const bar = jasmine.createSpy('bar');\n    const vm = new Vue({\n      template: '<div><wrap @click=\"foo\" @test=\"bar\"/></div>',\n      methods: {\n        foo,\n        bar\n      },\n      components: {\n        wrap: {\n          functional: true,\n\n          render(h, {\n            listeners\n          }) {\n            return h('div', {\n              on: {\n                click: [listeners.click, () => listeners.test('bar')]\n              }\n            });\n          }\n\n        }\n      }\n    }).$mount();\n    triggerEvent(vm.$el.children[0], 'click');\n    expect(foo).toHaveBeenCalled();\n    expect(foo.calls.argsFor(0)[0].type).toBe('click'); // should have click event\n\n    triggerEvent(vm.$el.children[0], 'mousedown');\n    expect(bar).toHaveBeenCalledWith('bar');\n  });","file":"unit/features/options/functional.spec.js","skipped":false,"dir":"test"},{"name":"should support returning more than one root node","suites":["Options functional"],"line":98,"updatePoint":{"line":98,"column":54,"index":2356},"code":"  it('should support returning more than one root node', () => {\n    const vm = new Vue({\n      template: `<div><test></test></div>`,\n      components: {\n        test: {\n          functional: true,\n\n          render(h) {\n            return [h('span', 'foo'), h('span', 'bar')];\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<span>foo</span><span>bar</span>');\n  });","file":"unit/features/options/functional.spec.js","skipped":false,"dir":"test"},{"name":"should support slots","suites":["Options functional"],"line":114,"updatePoint":{"line":114,"column":26,"index":2731},"code":"  it('should support slots', () => {\n    const vm = new Vue({\n      data: {\n        test: 'foo'\n      },\n      template: '<div><wrap><div slot=\"a\">foo</div><div slot=\"b\">bar</div></wrap></div>',\n      components: {\n        wrap: {\n          functional: true,\n          props: ['msg'],\n\n          render(h, {\n            slots\n          }) {\n            slots = slots();\n            return h('div', null, [slots.b, slots.a]);\n          }\n\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<div><div>bar</div><div>foo</div></div>');\n  });","file":"unit/features/options/functional.spec.js","skipped":false,"dir":"test"},{"name":"should let vnode raw data pass through","suites":["Options functional"],"line":137,"updatePoint":{"line":137,"column":44,"index":3306},"code":"  it('should let vnode raw data pass through', done => {\n    const onValid = jasmine.createSpy('valid');\n    const vm = new Vue({\n      data: {\n        msg: 'hello'\n      },\n      template: `<div>\n        <validate field=\"field1\" @valid=\"onValid\">\n          <input type=\"text\" v-model=\"msg\">\n        </validate>\n      </div>`,\n      components: {\n        validate: {\n          functional: true,\n          props: ['field'],\n\n          render(h, {\n            props,\n            children,\n            data: {\n              on\n            }\n          }) {\n            props.child = children[0];\n            return h('validate-control', {\n              props,\n              on\n            });\n          }\n\n        },\n        'validate-control': {\n          props: ['field', 'child'],\n\n          render() {\n            return this.child;\n          },\n\n          mounted() {\n            this.$el.addEventListener('input', this.onInput);\n          },\n\n          destroyed() {\n            this.$el.removeEventListener('input', this.onInput);\n          },\n\n          methods: {\n            onInput(e) {\n              const value = e.target.value;\n\n              if (this.validate(value)) {\n                this.$emit('valid', this);\n              }\n            },\n\n            // something validation logic here\n            validate(val) {\n              return val.length > 0;\n            }\n\n          }\n        }\n      },\n      methods: {\n        onValid\n      }\n    }).$mount();\n    document.body.appendChild(vm.$el);\n    const input = vm.$el.querySelector('input');\n    expect(onValid).not.toHaveBeenCalled();\n    waitForUpdate(() => {\n      input.value = 'foo';\n      triggerEvent(input, 'input');\n    }).then(() => {\n      expect(onValid).toHaveBeenCalled();\n    }).then(() => {\n      document.body.removeChild(vm.$el);\n      vm.$destroy();\n    }).then(done);\n  });","file":"unit/features/options/functional.spec.js","skipped":false,"dir":"test"},{"name":"create empty vnode when render return null","suites":["Options functional"],"line":217,"updatePoint":{"line":217,"column":48,"index":5172},"code":"  it('create empty vnode when render return null', () => {\n    const child = {\n      functional: true,\n\n      render() {\n        return null;\n      }\n\n    };\n    const vm = new Vue({\n      components: {\n        child\n      }\n    });\n    const h = vm.$createElement;\n    const vnode = h('child');\n    expect(vnode).toEqual(createEmptyVNode());\n  });","file":"unit/features/options/functional.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Options inheritAttrs"],"line":3,"updatePoint":{"line":3,"column":17,"index":82},"code":"  it('should work', done => {\n    const vm = new Vue({\n      template: `<foo :id=\"foo\"/>`,\n      data: {\n        foo: 'foo'\n      },\n      components: {\n        foo: {\n          inheritAttrs: false,\n          template: `<div>foo</div>`\n        }\n      }\n    }).$mount();\n    expect(vm.$el.id).toBe('');\n    vm.foo = 'bar';\n    waitForUpdate(() => {\n      expect(vm.$el.id).toBe('');\n    }).then(done);\n  });","file":"unit/features/options/inheritAttrs.spec.js","skipped":false,"dir":"test"},{"name":"with inner v-bind","suites":["Options inheritAttrs"],"line":22,"updatePoint":{"line":22,"column":23,"index":496},"code":"  it('with inner v-bind', done => {\n    const vm = new Vue({\n      template: `<foo :id=\"foo\"/>`,\n      data: {\n        foo: 'foo'\n      },\n      components: {\n        foo: {\n          inheritAttrs: false,\n          template: `<div><div v-bind=\"$attrs\"></div></div>`\n        }\n      }\n    }).$mount();\n    expect(vm.$el.children[0].id).toBe('foo');\n    vm.foo = 'bar';\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].id).toBe('bar');\n    }).then(done);\n  });","file":"unit/features/options/inheritAttrs.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Options provide/inject"],"line":19,"updatePoint":{"line":19,"column":17,"index":397},"code":"  it('should work', () => {\n    new Vue({\n      template: `<child/>`,\n      provide: {\n        foo: 1,\n        bar: false\n      },\n      components: {\n        child: {\n          template: `<injected-comp/>`,\n          components: {\n            injectedComp\n          }\n        }\n      }\n    }).$mount();\n    expect(injected).toEqual([1, false]);\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should use closest parent","suites":["Options provide/inject"],"line":37,"updatePoint":{"line":37,"column":31,"index":763},"code":"  it('should use closest parent', () => {\n    new Vue({\n      template: `<child/>`,\n      provide: {\n        foo: 1,\n        bar: null\n      },\n      components: {\n        child: {\n          provide: {\n            foo: 3\n          },\n          template: `<injected-comp/>`,\n          components: {\n            injectedComp\n          }\n        }\n      }\n    }).$mount();\n    expect(injected).toEqual([3, null]);\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"provide function","suites":["Options provide/inject"],"line":58,"updatePoint":{"line":58,"column":22,"index":1171},"code":"  it('provide function', () => {\n    new Vue({\n      template: `<child/>`,\n      data: {\n        a: 1,\n        b: false\n      },\n\n      provide() {\n        return {\n          foo: this.a,\n          bar: this.b\n        };\n      },\n\n      components: {\n        child: {\n          template: `<injected-comp/>`,\n          components: {\n            injectedComp\n          }\n        }\n      }\n    }).$mount();\n    expect(injected).toEqual([1, false]);\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"inject with alias","suites":["Options provide/inject"],"line":84,"updatePoint":{"line":84,"column":23,"index":1624},"code":"  it('inject with alias', () => {\n    const injectAlias = {\n      inject: {\n        baz: 'foo',\n        qux: 'bar'\n      },\n\n      render() {},\n\n      created() {\n        injected = [this.baz, this.qux];\n      }\n\n    };\n    new Vue({\n      template: `<child/>`,\n      provide: {\n        foo: false,\n        bar: 2\n      },\n      components: {\n        child: {\n          template: `<inject-alias/>`,\n          components: {\n            injectAlias\n          }\n        }\n      }\n    }).$mount();\n    expect(injected).toEqual([false, 2]);\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"inject before resolving data/props","suites":["Options provide/inject"],"line":115,"updatePoint":{"line":115,"column":40,"index":2183},"code":"  it('inject before resolving data/props', () => {\n    const vm = new Vue({\n      provide: {\n        foo: 1\n      }\n    });\n    const child = new Vue({\n      parent: vm,\n      inject: ['foo'],\n\n      data() {\n        return {\n          bar: this.foo + 1\n        };\n      },\n\n      props: {\n        baz: {\n          default() {\n            return this.foo + 2;\n          }\n\n        }\n      }\n    });\n    expect(child.foo).toBe(1);\n    expect(child.bar).toBe(2);\n    expect(child.baz).toBe(3);\n  }); // Github issue #5194","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should work with functional","suites":["Options provide/inject"],"line":145,"updatePoint":{"line":145,"column":33,"index":2697},"code":"  it('should work with functional', () => {\n    new Vue({\n      template: `<child/>`,\n      provide: {\n        foo: 1,\n        bar: false\n      },\n      components: {\n        child: {\n          functional: true,\n          inject: ['foo', 'bar'],\n\n          render(h, context) {\n            const {\n              injections\n            } = context;\n            injected = [injections.foo, injections.bar];\n          }\n\n        }\n      }\n    }).$mount();\n    expect(injected).toEqual([1, false]);\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"with Symbol keys","suites":["Options provide/inject"],"line":171,"updatePoint":{"line":171,"column":24,"index":3259},"code":"    it('with Symbol keys', () => {\n      const s = Symbol();\n      const vm = new Vue({\n        template: `<child/>`,\n        provide: {\n          [s]: 123\n        },\n        components: {\n          child: {\n            inject: {\n              s\n            },\n            template: `<div>{{ s }}</div>`\n          }\n        }\n      }).$mount();\n      expect(vm.$el.textContent).toBe('123');\n    });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should work with reactive array","suites":["Options provide/inject"],"line":192,"updatePoint":{"line":192,"column":37,"index":3699},"code":"  it('should work with reactive array', done => {\n    const vm = new Vue({\n      template: `<div><child></child></div>`,\n\n      data() {\n        return {\n          foo: []\n        };\n      },\n\n      provide() {\n        return {\n          foo: this.foo\n        };\n      },\n\n      components: {\n        child: {\n          inject: ['foo'],\n          template: `<span>{{foo.length}}</span>`\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toEqual(`<span>0</span>`);\n    vm.foo.push(vm.foo.length);\n    vm.$nextTick(() => {\n      expect(vm.$el.innerHTML).toEqual(`<span>1</span>`);\n      vm.foo.pop();\n      vm.$nextTick(() => {\n        expect(vm.$el.innerHTML).toEqual(`<span>0</span>`);\n        done();\n      });\n    });\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should extend properly","suites":["Options provide/inject"],"line":226,"updatePoint":{"line":226,"column":28,"index":4430},"code":"  it('should extend properly', () => {\n    const parent = Vue.extend({\n      template: `<span/>`,\n      inject: ['foo']\n    });\n    const child = parent.extend({\n      template: `<span/>`,\n      inject: ['bar'],\n\n      created() {\n        injected = [this.foo, this.bar];\n      }\n\n    });\n    new Vue({\n      template: `<div><parent/><child/></div>`,\n      provide: {\n        foo: 1,\n        bar: false\n      },\n      components: {\n        parent,\n        child\n      }\n    }).$mount();\n    expect(injected).toEqual([1, false]);\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should warn when injections has been modified","suites":["Options provide/inject"],"line":253,"updatePoint":{"line":253,"column":51,"index":4988},"code":"  it('should warn when injections has been modified', () => {\n    const key = 'foo';\n    const vm = new Vue({\n      provide: {\n        foo: 1\n      }\n    });\n    const child = new Vue({\n      parent: vm,\n      inject: ['foo']\n    });\n    expect(child.foo).toBe(1);\n    child.foo = 2;\n    expect(`Avoid mutating an injected value directly since the changes will be ` + `overwritten whenever the provided component re-renders. ` + `injection being mutated: \"${key}\"`).toHaveBeenWarned();\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should warn when injections cannot be found","suites":["Options provide/inject"],"line":268,"updatePoint":{"line":268,"column":49,"index":5478},"code":"  it('should warn when injections cannot be found', () => {\n    const vm = new Vue({});\n    new Vue({\n      parent: vm,\n      inject: ['foo', 'bar'],\n\n      created() {}\n\n    });\n    expect(`Injection \"foo\" not found`).toHaveBeenWarned();\n    expect(`Injection \"bar\" not found`).toHaveBeenWarned();\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should not warn when injections can be found","suites":["Options provide/inject"],"line":280,"updatePoint":{"line":280,"column":50,"index":5784},"code":"  it('should not warn when injections can be found', () => {\n    const vm = new Vue({\n      provide: {\n        foo: 1,\n        bar: false,\n        baz: undefined\n      }\n    });\n    new Vue({\n      parent: vm,\n      inject: ['foo', 'bar', 'baz'],\n\n      created() {}\n\n    });\n    expect(`Injection \"foo\" not found`).not.toHaveBeenWarned();\n    expect(`Injection \"bar\" not found`).not.toHaveBeenWarned();\n    expect(`Injection \"baz\" not found`).not.toHaveBeenWarned();\n  }); // Github issue #6008","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should merge provide from mixins (objects)","suites":["Options provide/inject"],"line":300,"updatePoint":{"line":300,"column":48,"index":6279},"code":"  it('should merge provide from mixins (objects)', () => {\n    const mixinA = {\n      provide: {\n        foo: 'foo'\n      }\n    };\n    const mixinB = {\n      provide: {\n        bar: 'bar'\n      }\n    };\n    const child = {\n      inject: ['foo', 'bar'],\n      template: `<span/>`,\n\n      created() {\n        injected = [this.foo, this.bar];\n      }\n\n    };\n    new Vue({\n      mixins: [mixinA, mixinB],\n\n      render(h) {\n        return h(child);\n      }\n\n    }).$mount();\n    expect(injected).toEqual(['foo', 'bar']);\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should merge provide from mixins (functions)","suites":["Options provide/inject"],"line":330,"updatePoint":{"line":330,"column":50,"index":6805},"code":"  it('should merge provide from mixins (functions)', () => {\n    const mixinA = {\n      provide: () => ({\n        foo: 'foo'\n      })\n    };\n    const mixinB = {\n      provide: () => ({\n        bar: 'bar'\n      })\n    };\n    const child = {\n      inject: ['foo', 'bar'],\n      template: `<span/>`,\n\n      created() {\n        injected = [this.foo, this.bar];\n      }\n\n    };\n    new Vue({\n      mixins: [mixinA, mixinB],\n\n      render(h) {\n        return h(child);\n      }\n\n    }).$mount();\n    expect(injected).toEqual(['foo', 'bar']);\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should merge provide from mixins (mix of objects and functions)","suites":["Options provide/inject"],"line":360,"updatePoint":{"line":360,"column":69,"index":7366},"code":"  it('should merge provide from mixins (mix of objects and functions)', () => {\n    const mixinA = {\n      provide: {\n        foo: 'foo'\n      }\n    };\n    const mixinB = {\n      provide: () => ({\n        bar: 'bar'\n      })\n    };\n    const mixinC = {\n      provide: {\n        baz: 'baz'\n      }\n    };\n    const mixinD = {\n      provide: () => ({\n        bam: 'bam'\n      })\n    };\n    const child = {\n      inject: ['foo', 'bar', 'baz', 'bam'],\n      template: `<span/>`,\n\n      created() {\n        injected = [this.foo, this.bar, this.baz, this.bam];\n      }\n\n    };\n    new Vue({\n      mixins: [mixinA, mixinB, mixinC, mixinD],\n\n      render(h) {\n        return h(child);\n      }\n\n    }).$mount();\n    expect(injected).toEqual(['foo', 'bar', 'baz', 'bam']);\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should merge provide from mixins and override existing keys","suites":["Options provide/inject"],"line":400,"updatePoint":{"line":400,"column":65,"index":8131},"code":"  it('should merge provide from mixins and override existing keys', () => {\n    const mixinA = {\n      provide: {\n        foo: 'foo'\n      }\n    };\n    const mixinB = {\n      provide: {\n        foo: 'bar'\n      }\n    };\n    const child = {\n      inject: ['foo'],\n      template: `<span/>`,\n\n      created() {\n        injected = [this.foo];\n      }\n\n    };\n    new Vue({\n      mixins: [mixinA, mixinB],\n\n      render(h) {\n        return h(child);\n      }\n\n    }).$mount();\n    expect(injected).toEqual(['bar']);\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should merge provide when Vue.extend","suites":["Options provide/inject"],"line":430,"updatePoint":{"line":430,"column":42,"index":8625},"code":"  it('should merge provide when Vue.extend', () => {\n    const mixinA = {\n      provide: () => ({\n        foo: 'foo'\n      })\n    };\n    const child = {\n      inject: ['foo', 'bar'],\n      template: `<span/>`,\n\n      created() {\n        injected = [this.foo, this.bar];\n      }\n\n    };\n    const Ctor = Vue.extend({\n      mixins: [mixinA],\n      provide: {\n        bar: 'bar'\n      },\n\n      render(h) {\n        return h(child);\n      }\n\n    });\n    new Ctor().$mount();\n    expect(injected).toEqual(['foo', 'bar']);\n  }); // #5913","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should keep the reactive with provide","suites":["Options provide/inject"],"line":460,"updatePoint":{"line":460,"column":43,"index":9159},"code":"  it('should keep the reactive with provide', () => {\n    function isObserver(obj) {\n      if (isObject(obj)) {\n        return hasOwn(obj, '__ob__') && obj.__ob__ instanceof Observer;\n      }\n\n      return false;\n    }\n\n    const vm = new Vue({\n      template: `<div><child ref='child'></child></div>`,\n\n      data() {\n        return {\n          foo: {},\n          $foo: {},\n          foo1: []\n        };\n      },\n\n      provide() {\n        return {\n          foo: this.foo,\n          $foo: this.$foo,\n          foo1: this.foo1,\n          bar: {},\n          baz: []\n        };\n      },\n\n      components: {\n        child: {\n          inject: ['foo', '$foo', 'foo1', 'bar', 'baz'],\n          template: `<span/>`\n        }\n      }\n    }).$mount();\n    const child = vm.$refs.child;\n    expect(isObserver(child.foo)).toBe(true);\n    expect(isObserver(child.$foo)).toBe(false);\n    expect(isObserver(child.foo1)).toBe(true);\n    expect(isObserver(child.bar)).toBe(false);\n    expect(isObserver(child.baz)).toBe(false);\n  });","file":"unit/features/options/inject.spec.js","skipped":false,"dir":"test"},{"name":"should allow modifying options","suites":["Options lifecycle hooks","beforeCreate"],"line":8,"updatePoint":{"line":8,"column":38,"index":216},"code":"    it('should allow modifying options', () => {\n      const vm = new Vue({\n        data: {\n          a: 1\n        },\n\n        beforeCreate() {\n          spy();\n          expect(this.a).toBeUndefined();\n          this.$options.computed = {\n            b() {\n              return this.a + 1;\n            }\n\n          };\n        }\n\n      });\n      expect(spy).toHaveBeenCalled();\n      expect(vm.b).toBe(2);\n    });","file":"unit/features/options/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should have completed observation","suites":["Options lifecycle hooks","created"],"line":31,"updatePoint":{"line":31,"column":41,"index":669},"code":"    it('should have completed observation', () => {\n      new Vue({\n        data: {\n          a: 1\n        },\n\n        created() {\n          expect(this.a).toBe(1);\n          spy();\n        }\n\n      });\n      expect(spy).toHaveBeenCalled();\n    });","file":"unit/features/options/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should not have mounted","suites":["Options lifecycle hooks","beforeMount"],"line":47,"updatePoint":{"line":47,"column":31,"index":948},"code":"    it('should not have mounted', () => {\n      const vm = new Vue({\n        render() {},\n\n        beforeMount() {\n          spy();\n          expect(this._isMounted).toBe(false);\n          expect(this.$el).toBeUndefined(); // due to empty mount\n\n          expect(this._vnode).toBeNull();\n          expect(this._watcher).toBeNull();\n        }\n\n      });\n      expect(spy).not.toHaveBeenCalled();\n      vm.$mount();\n      expect(spy).toHaveBeenCalled();\n    });","file":"unit/features/options/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should have mounted","suites":["Options lifecycle hooks","mounted"],"line":67,"updatePoint":{"line":67,"column":27,"index":1440},"code":"    it('should have mounted', () => {\n      const vm = new Vue({\n        template: '<div></div>',\n\n        mounted() {\n          spy();\n          expect(this._isMounted).toBe(true);\n          expect(this.$el.tagName).toBe('DIV');\n          expect(this._vnode.tag).toBe('div');\n        }\n\n      });\n      expect(spy).not.toHaveBeenCalled();\n      vm.$mount();\n      expect(spy).toHaveBeenCalled();\n    }); // #3898","file":"unit/features/options/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should call for manually mounted instance with parent","suites":["Options lifecycle hooks","mounted"],"line":84,"updatePoint":{"line":84,"column":61,"index":1889},"code":"    it('should call for manually mounted instance with parent', () => {\n      const parent = new Vue();\n      expect(spy).not.toHaveBeenCalled();\n      new Vue({\n        parent,\n        template: '<div></div>',\n\n        mounted() {\n          spy();\n        }\n\n      }).$mount();\n      expect(spy).toHaveBeenCalled();\n    });","file":"unit/features/options/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should mount child parent in correct order","suites":["Options lifecycle hooks","mounted"],"line":98,"updatePoint":{"line":98,"column":50,"index":2203},"code":"    it('should mount child parent in correct order', () => {\n      const calls = [];\n      new Vue({\n        template: '<div><test></test></div>',\n\n        mounted() {\n          calls.push('parent');\n        },\n\n        components: {\n          test: {\n            template: '<nested></nested>',\n\n            mounted() {\n              expect(this.$el.parentNode).toBeTruthy();\n              calls.push('child');\n            },\n\n            components: {\n              nested: {\n                template: '<div></div>',\n\n                mounted() {\n                  expect(this.$el.parentNode).toBeTruthy();\n                  calls.push('nested');\n                }\n\n              }\n            }\n          }\n        }\n      }).$mount();\n      expect(calls).toEqual(['nested', 'child', 'parent']);\n    });","file":"unit/features/options/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should be called before update","suites":["Options lifecycle hooks","beforeUpdate"],"line":134,"updatePoint":{"line":134,"column":38,"index":3037},"code":"    it('should be called before update', done => {\n      const vm = new Vue({\n        template: '<div>{{ msg }}</div>',\n        data: {\n          msg: 'foo'\n        },\n\n        beforeUpdate() {\n          spy();\n          expect(this.$el.textContent).toBe('foo');\n        }\n\n      }).$mount();\n      expect(spy).not.toHaveBeenCalled();\n      vm.msg = 'bar';\n      expect(spy).not.toHaveBeenCalled(); // should be async\n\n      waitForUpdate(() => {\n        expect(spy).toHaveBeenCalled();\n      }).then(done);\n    });","file":"unit/features/options/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should be called after update","suites":["Options lifecycle hooks","updated"],"line":157,"updatePoint":{"line":157,"column":37,"index":3588},"code":"    it('should be called after update', done => {\n      const vm = new Vue({\n        template: '<div>{{ msg }}</div>',\n        data: {\n          msg: 'foo'\n        },\n\n        updated() {\n          spy();\n          expect(this.$el.textContent).toBe('bar');\n        }\n\n      }).$mount();\n      expect(spy).not.toHaveBeenCalled();\n      vm.msg = 'bar';\n      expect(spy).not.toHaveBeenCalled(); // should be async\n\n      waitForUpdate(() => {\n        expect(spy).toHaveBeenCalled();\n      }).then(done);\n    });","file":"unit/features/options/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should be called after children are updated","suites":["Options lifecycle hooks","updated"],"line":178,"updatePoint":{"line":178,"column":51,"index":4112},"code":"    it('should be called after children are updated', done => {\n      const calls = [];\n      const vm = new Vue({\n        template: '<div><test ref=\"child\">{{ msg }}</test></div>',\n        data: {\n          msg: 'foo'\n        },\n        components: {\n          test: {\n            template: `<div><slot></slot></div>`,\n\n            updated() {\n              expect(this.$el.textContent).toBe('bar');\n              calls.push('child');\n            }\n\n          }\n        },\n\n        updated() {\n          expect(this.$el.textContent).toBe('bar');\n          calls.push('parent');\n        }\n\n      }).$mount();\n      expect(calls).toEqual([]);\n      vm.msg = 'bar';\n      expect(calls).toEqual([]);\n      waitForUpdate(() => {\n        expect(calls).toEqual(['child', 'parent']);\n      }).then(done);\n    });","file":"unit/features/options/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should be called before destroy","suites":["Options lifecycle hooks","beforeDestroy"],"line":212,"updatePoint":{"line":212,"column":39,"index":4948},"code":"    it('should be called before destroy', () => {\n      const vm = new Vue({\n        render() {},\n\n        beforeDestroy() {\n          spy();\n          expect(this._isBeingDestroyed).toBe(false);\n          expect(this._isDestroyed).toBe(false);\n        }\n\n      }).$mount();\n      expect(spy).not.toHaveBeenCalled();\n      vm.$destroy();\n      vm.$destroy();\n      expect(spy).toHaveBeenCalled();\n      expect(spy.calls.count()).toBe(1);\n    });","file":"unit/features/options/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should be called after destroy","suites":["Options lifecycle hooks","destroyed"],"line":231,"updatePoint":{"line":231,"column":38,"index":5431},"code":"    it('should be called after destroy', () => {\n      const vm = new Vue({\n        render() {},\n\n        destroyed() {\n          spy();\n          expect(this._isBeingDestroyed).toBe(true);\n          expect(this._isDestroyed).toBe(true);\n        }\n\n      }).$mount();\n      expect(spy).not.toHaveBeenCalled();\n      vm.$destroy();\n      vm.$destroy();\n      expect(spy).toHaveBeenCalled();\n      expect(spy.calls.count()).toBe(1);\n    });","file":"unit/features/options/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should emit hook events","suites":["Options lifecycle hooks","destroyed"],"line":249,"updatePoint":{"line":249,"column":29,"index":5867},"code":"  it('should emit hook events', () => {\n    const created = jasmine.createSpy();\n    const mounted = jasmine.createSpy();\n    const destroyed = jasmine.createSpy();\n    const vm = new Vue({\n      render() {},\n\n      beforeCreate() {\n        this.$on('hook:created', created);\n        this.$on('hook:mounted', mounted);\n        this.$on('hook:destroyed', destroyed);\n      }\n\n    });\n    expect(created).toHaveBeenCalled();\n    expect(mounted).not.toHaveBeenCalled();\n    expect(destroyed).not.toHaveBeenCalled();\n    vm.$mount();\n    expect(mounted).toHaveBeenCalled();\n    expect(destroyed).not.toHaveBeenCalled();\n    vm.$destroy();\n    expect(destroyed).toHaveBeenCalled();\n  });","file":"unit/features/options/lifecycle.spec.js","skipped":false,"dir":"test"},{"name":"should have correct context","suites":["Options methods"],"line":4,"updatePoint":{"line":4,"column":33,"index":161},"code":"  it('should have correct context', () => {\n    const vm = new Vue({\n      data: {\n        a: 1\n      },\n      methods: {\n        plus() {\n          this.a++;\n        }\n\n      }\n    });\n    vm.plus();\n    expect(vm.a).toBe(2);\n  });","file":"unit/features/options/methods.spec.js","skipped":false,"dir":"test"},{"name":"should warn undefined methods","suites":["Options methods"],"line":20,"updatePoint":{"line":20,"column":35,"index":427},"code":"  it('should warn undefined methods', () => {\n    new Vue({\n      methods: {\n        hello: undefined\n      }\n    });\n    expect(`method \"hello\" has an undefined value in the component definition`).toHaveBeenWarned();\n  });","file":"unit/features/options/methods.spec.js","skipped":false,"dir":"test"},{"name":"should warn methods conflicting with data","suites":["Options methods"],"line":28,"updatePoint":{"line":28,"column":47,"index":663},"code":"  it('should warn methods conflicting with data', () => {\n    new Vue({\n      data: {\n        foo: 1\n      },\n      methods: {\n        foo() {}\n\n      }\n    });\n    expect(`method \"foo\" has already been defined as a data property`).toHaveBeenWarned();\n  });","file":"unit/features/options/methods.spec.js","skipped":false,"dir":"test"},{"name":"vm should have options from mixin","suites":["Options mixins"],"line":4,"updatePoint":{"line":4,"column":39,"index":146},"code":"  it('vm should have options from mixin', () => {\n    const mixin = {\n      directives: {\n        c: {}\n      },\n      methods: {\n        a: function () {}\n      }\n    };\n    const vm = new Vue({\n      mixins: [mixin],\n      methods: {\n        b: function () {}\n      }\n    });\n    expect(vm.a).toBeDefined();\n    expect(vm.b).toBeDefined();\n    expect(vm.$options.directives.c).toBeDefined();\n  });","file":"unit/features/options/mixins.spec.js","skipped":false,"dir":"test"},{"name":"should call hooks from mixins first","suites":["Options mixins"],"line":23,"updatePoint":{"line":23,"column":41,"index":548},"code":"  it('should call hooks from mixins first', () => {\n    const a = {};\n    const b = {};\n    const c = {};\n\n    const f1 = function () {};\n\n    const f2 = function () {};\n\n    const f3 = function () {};\n\n    const mixinA = {\n      a: 1,\n      template: 'foo',\n      directives: {\n        a: a\n      },\n      created: f1\n    };\n    const mixinB = {\n      b: 1,\n      directives: {\n        b: b\n      },\n      created: f2\n    };\n    const result = mergeOptions({}, {\n      directives: {\n        c: c\n      },\n      template: 'bar',\n      mixins: [mixinA, mixinB],\n      created: f3\n    });\n    expect(result.a).toBe(1);\n    expect(result.b).toBe(1);\n    expect(result.directives.a).toBe(a);\n    expect(result.directives.b).toBe(b);\n    expect(result.directives.c).toBe(c);\n    expect(result.created[0]).toBe(f1);\n    expect(result.created[1]).toBe(f2);\n    expect(result.created[2]).toBe(f3);\n    expect(result.template).toBe('bar');\n  });","file":"unit/features/options/mixins.spec.js","skipped":false,"dir":"test"},{"name":"mixin methods should not override defined method","suites":["Options mixins"],"line":67,"updatePoint":{"line":67,"column":54,"index":1498},"code":"  it('mixin methods should not override defined method', () => {\n    const f1 = function () {};\n\n    const f2 = function () {};\n\n    const f3 = function () {};\n\n    const mixinA = {\n      methods: {\n        xyz: f1\n      }\n    };\n    const mixinB = {\n      methods: {\n        xyz: f2\n      }\n    };\n    const result = mergeOptions({}, {\n      mixins: [mixinA, mixinB],\n      methods: {\n        xyz: f3\n      }\n    });\n    expect(result.methods.xyz).toBe(f3);\n  });","file":"unit/features/options/mixins.spec.js","skipped":false,"dir":"test"},{"name":"should accept constructors as mixins","suites":["Options mixins"],"line":92,"updatePoint":{"line":92,"column":42,"index":1951},"code":"  it('should accept constructors as mixins', () => {\n    const mixin = Vue.extend({\n      directives: {\n        c: {}\n      },\n      methods: {\n        a: function () {}\n      }\n    });\n    const vm = new Vue({\n      mixins: [mixin],\n      methods: {\n        b: function () {}\n      }\n    });\n    expect(vm.a).toBeDefined();\n    expect(vm.b).toBeDefined();\n    expect(vm.$options.directives.c).toBeDefined();\n  });","file":"unit/features/options/mixins.spec.js","skipped":false,"dir":"test"},{"name":"should contain itself in self components","suites":["Options name"],"line":3,"updatePoint":{"line":3,"column":46,"index":103},"code":"  it('should contain itself in self components', () => {\n    const vm = Vue.extend({\n      name: 'SuperVue'\n    });\n    expect(vm.options.components['SuperVue']).toEqual(vm);\n  });","file":"unit/features/options/name.spec.js","skipped":false,"dir":"test"},{"name":"should warn when incorrect name given","suites":["Options name"],"line":9,"updatePoint":{"line":9,"column":43,"index":281},"code":"  it('should warn when incorrect name given', () => {\n    Vue.extend({\n      name: 'Hyper*Vue'\n    });\n    /* eslint-disable */\n\n    expect(`Invalid component name: \"Hyper*Vue\". Component names can only contain alphanumeric characters and the hyphen, and must start with a letter.`).toHaveBeenWarned();\n    /* eslint-enable */\n\n    Vue.extend({\n      name: '2Cool2BValid'\n    });\n    /* eslint-disable */\n\n    expect(`Invalid component name: \"2Cool2BValid\". Component names can only contain alphanumeric characters and the hyphen, and must start with a letter.`).toHaveBeenWarned();\n    /* eslint-enable */\n  });","file":"unit/features/options/name.spec.js","skipped":false,"dir":"test"},{"name":"id should not override given name when using Vue.component","suites":["Options name"],"line":26,"updatePoint":{"line":26,"column":64,"index":915},"code":"  it('id should not override given name when using Vue.component', () => {\n    const SuperComponent = Vue.component('super-component', {\n      name: 'SuperVue'\n    });\n    expect(SuperComponent.options.components['SuperVue']).toEqual(SuperComponent);\n    expect(SuperComponent.options.components['super-component']).toEqual(SuperComponent);\n  });","file":"unit/features/options/name.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Options parent"],"line":3,"updatePoint":{"line":3,"column":17,"index":76},"code":"  it('should work', () => {\n    const parent = new Vue({\n      render() {}\n\n    }).$mount();\n    const child = new Vue({\n      parent: parent,\n\n      render() {}\n\n    }).$mount(); // this option is straight-forward\n    // it should register 'parent' as a $parent for 'child'\n    // and push 'child' to $children array on 'parent'\n\n    expect(child.$options.parent).toBeDefined();\n    expect(child.$options.parent).toEqual(parent);\n    expect(child.$parent).toBeDefined();\n    expect(child.$parent).toEqual(parent);\n    expect(parent.$children).toContain(child); // destroy 'child' and check if it was removed from 'parent' $children\n\n    child.$destroy();\n    expect(parent.$children.length).toEqual(0);\n    parent.$destroy();\n  });","file":"unit/features/options/parent.spec.js","skipped":false,"dir":"test"},{"name":"array syntax","suites":["Options props"],"line":4,"updatePoint":{"line":4,"column":18,"index":119},"code":"  it('array syntax', done => {\n    const vm = new Vue({\n      data: {\n        b: 'bar'\n      },\n      template: '<test v-bind:b=\"b\" ref=\"child\"></test>',\n      components: {\n        test: {\n          props: ['b'],\n          template: '<div>{{b}}</div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('bar');\n    vm.b = 'baz';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('baz');\n      vm.$refs.child.b = 'qux';\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('qux');\n      expect('Avoid mutating a prop directly').toHaveBeenWarned();\n    }).then(done);\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"object syntax","suites":["Options props"],"line":27,"updatePoint":{"line":27,"column":19,"index":726},"code":"  it('object syntax', done => {\n    const vm = new Vue({\n      data: {\n        b: 'bar'\n      },\n      template: '<test v-bind:b=\"b\" ref=\"child\"></test>',\n      components: {\n        test: {\n          props: {\n            b: String\n          },\n          template: '<div>{{b}}</div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('bar');\n    vm.b = 'baz';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('baz');\n      vm.$refs.child.b = 'qux';\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('qux');\n      expect('Avoid mutating a prop directly').toHaveBeenWarned();\n    }).then(done);\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"warn mixed syntax","suites":["Options props"],"line":52,"updatePoint":{"line":52,"column":23,"index":1367},"code":"  it('warn mixed syntax', () => {\n    new Vue({\n      props: [{\n        b: String\n      }]\n    });\n    expect('props must be strings when using array syntax').toHaveBeenWarned();\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"default values","suites":["Options props"],"line":60,"updatePoint":{"line":60,"column":20,"index":1549},"code":"  it('default values', () => {\n    const vm = new Vue({\n      data: {\n        b: undefined\n      },\n      template: '<test :b=\"b\"></test>',\n      components: {\n        test: {\n          props: {\n            a: {\n              default: 'A' // absent\n\n            },\n            b: {\n              default: 'B' // undefined\n\n            }\n          },\n          template: '<div>{{a}}{{b}}</div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('AB');\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"default value reactivity","suites":["Options props"],"line":84,"updatePoint":{"line":84,"column":30,"index":2037},"code":"  it('default value reactivity', done => {\n    const vm = new Vue({\n      props: {\n        a: {\n          default: () => ({\n            b: 1\n          })\n        }\n      },\n      propsData: {\n        a: undefined\n      },\n      template: '<div>{{ a.b }}</div>'\n    }).$mount();\n    expect(vm.$el.textContent).toBe('1');\n    vm.a.b = 2;\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('2');\n    }).then(done);\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"default value Function","suites":["Options props"],"line":104,"updatePoint":{"line":104,"column":28,"index":2466},"code":"  it('default value Function', () => {\n    const func = () => 132;\n\n    const vm = new Vue({\n      props: {\n        a: {\n          type: Function,\n          default: func\n        }\n      },\n      propsData: {\n        a: undefined\n      }\n    });\n    expect(vm.a).toBe(func);\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"warn object/array default values","suites":["Options props"],"line":120,"updatePoint":{"line":120,"column":38,"index":2757},"code":"  it('warn object/array default values', () => {\n    new Vue({\n      props: {\n        a: {\n          default: {\n            b: 1\n          }\n        }\n      },\n      propsData: {\n        a: undefined\n      }\n    });\n    expect('Props with type Object/Array must use a factory function').toHaveBeenWarned();\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"warn missing required","suites":["Options props"],"line":135,"updatePoint":{"line":135,"column":27,"index":3059},"code":"  it('warn missing required', () => {\n    new Vue({\n      template: '<test></test>',\n      components: {\n        test: {\n          props: {\n            a: {\n              required: true\n            }\n          },\n          template: '<div>{{a}}</div>'\n        }\n      }\n    }).$mount();\n    expect('Missing required prop: \"a\"').toHaveBeenWarned();\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"string","suites":["Options props","assertions"],"line":173,"updatePoint":{"line":173,"column":14,"index":3885},"code":"    it('string', () => {\n      makeInstance('hello', String);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance(123, String);\n      expect('Expected String').toHaveBeenWarned();\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"number","suites":["Options props","assertions"],"line":179,"updatePoint":{"line":179,"column":14,"index":4091},"code":"    it('number', () => {\n      makeInstance(123, Number);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance('123', Number);\n      expect('Expected Number').toHaveBeenWarned();\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"boolean","suites":["Options props","assertions"],"line":185,"updatePoint":{"line":185,"column":15,"index":4296},"code":"    it('boolean', () => {\n      makeInstance(true, Boolean);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance('123', Boolean);\n      expect('Expected Boolean').toHaveBeenWarned();\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"function","suites":["Options props","assertions"],"line":191,"updatePoint":{"line":191,"column":16,"index":4506},"code":"    it('function', () => {\n      makeInstance(() => {}, Function);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance(123, Function);\n      expect('Expected Function').toHaveBeenWarned();\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"object","suites":["Options props","assertions"],"line":197,"updatePoint":{"line":197,"column":14,"index":4719},"code":"    it('object', () => {\n      makeInstance({}, Object);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance([], Object);\n      expect('Expected Object').toHaveBeenWarned();\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"array","suites":["Options props","assertions"],"line":203,"updatePoint":{"line":203,"column":13,"index":4918},"code":"    it('array', () => {\n      makeInstance([], Array);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance({}, Array);\n      expect('Expected Array').toHaveBeenWarned();\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"symbol","suites":["Options props","assertions"],"line":211,"updatePoint":{"line":211,"column":16,"index":5139},"code":"      it('symbol', () => {\n        makeInstance(Symbol('foo'), Symbol);\n        expect(console.error.calls.count()).toBe(0);\n        makeInstance({}, Symbol);\n        expect('Expected Symbol').toHaveBeenWarned();\n      });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"custom constructor","suites":["Options props","assertions"],"line":219,"updatePoint":{"line":219,"column":26,"index":5379},"code":"    it('custom constructor', () => {\n      function Class() {}\n\n      makeInstance(new Class(), Class);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance({}, Class);\n      expect('type check failed').toHaveBeenWarned();\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"multiple types","suites":["Options props","assertions"],"line":227,"updatePoint":{"line":227,"column":22,"index":5623},"code":"    it('multiple types', () => {\n      makeInstance([], [Array, Number, Boolean]);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance({}, [Array, Number, Boolean]);\n      expect('Expected Array, Number, Boolean, got Object').toHaveBeenWarned();\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"custom validator","suites":["Options props","assertions"],"line":233,"updatePoint":{"line":233,"column":24,"index":5897},"code":"    it('custom validator', () => {\n      makeInstance(123, null, v => v === 123);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance(123, null, v => v === 234);\n      expect('custom validator check failed').toHaveBeenWarned();\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"type check + custom validator","suites":["Options props","assertions"],"line":239,"updatePoint":{"line":239,"column":37,"index":6164},"code":"    it('type check + custom validator', () => {\n      makeInstance(123, Number, v => v === 123);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance(123, Number, v => v === 234);\n      expect('custom validator check failed').toHaveBeenWarned();\n      makeInstance(123, String, v => v === 123);\n      expect('Expected String').toHaveBeenWarned();\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"multiple types + custom validator","suites":["Options props","assertions"],"line":247,"updatePoint":{"line":247,"column":41,"index":6540},"code":"    it('multiple types + custom validator', () => {\n      makeInstance(123, [Number, String, Boolean], v => v === 123);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance(123, [Number, String, Boolean], v => v === 234);\n      expect('custom validator check failed').toHaveBeenWarned();\n      makeInstance(123, [String, Boolean], v => v === 123);\n      expect('Expected String, Boolean').toHaveBeenWarned();\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"optional with type + null/undefined","suites":["Options props","assertions"],"line":255,"updatePoint":{"line":255,"column":43,"index":6976},"code":"    it('optional with type + null/undefined', () => {\n      makeInstance(undefined, String);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance(null, String);\n      expect(console.error.calls.count()).toBe(0);\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"required with type + null/undefined","suites":["Options props","assertions"],"line":261,"updatePoint":{"line":261,"column":43,"index":7213},"code":"    it('required with type + null/undefined', () => {\n      makeInstance(undefined, String, null, true);\n      expect(console.error.calls.count()).toBe(1);\n      expect('Expected String').toHaveBeenWarned();\n      makeInstance(null, Boolean, null, true);\n      expect(console.error.calls.count()).toBe(2);\n      expect('Expected Boolean').toHaveBeenWarned();\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"optional prop of any type (type: true or prop: true)","suites":["Options props","assertions"],"line":269,"updatePoint":{"line":269,"column":60,"index":7597},"code":"    it('optional prop of any type (type: true or prop: true)', () => {\n      makeInstance(1, true);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance('any', true);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance({}, true);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance(undefined, true);\n      expect(console.error.calls.count()).toBe(0);\n      makeInstance(null, true);\n      expect(console.error.calls.count()).toBe(0);\n    });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"should work with v-bind","suites":["Options props","assertions"],"line":282,"updatePoint":{"line":282,"column":29,"index":8067},"code":"  it('should work with v-bind', () => {\n    const vm = new Vue({\n      template: `<test v-bind=\"{ a: 1, b: 2 }\"></test>`,\n      components: {\n        test: {\n          props: ['a', 'b'],\n          template: '<div>{{ a }} {{ b }}</div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('1 2');\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"should warn data fields already defined as a prop","suites":["Options props","assertions"],"line":294,"updatePoint":{"line":294,"column":55,"index":8414},"code":"  it('should warn data fields already defined as a prop', () => {\n    new Vue({\n      template: '<test a=\"1\"></test>',\n      components: {\n        test: {\n          template: '<div></div>',\n          data: function () {\n            return {\n              a: 123\n            };\n          },\n          props: {\n            a: null\n          }\n        }\n      }\n    }).$mount();\n    expect('already declared as a prop').toHaveBeenWarned();\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"should warn methods already defined as a prop","suites":["Options props","assertions"],"line":313,"updatePoint":{"line":313,"column":51,"index":8853},"code":"  it('should warn methods already defined as a prop', () => {\n    new Vue({\n      template: '<test a=\"1\"></test>',\n      components: {\n        test: {\n          template: '<div></div>',\n          props: {\n            a: null\n          },\n          methods: {\n            a() {}\n\n          }\n        }\n      }\n    }).$mount();\n    expect(`method \"a\" has already been defined as a prop`).toHaveBeenWarned();\n    expect(`Avoid mutating a prop directly`).toHaveBeenWarned();\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"treat boolean props properly","suites":["Options props","assertions"],"line":332,"updatePoint":{"line":332,"column":34,"index":9313},"code":"  it('treat boolean props properly', () => {\n    const vm = new Vue({\n      template: '<comp ref=\"child\" prop-a prop-b=\"prop-b\"></comp>',\n      components: {\n        comp: {\n          template: '<div></div>',\n          props: {\n            propA: Boolean,\n            propB: Boolean,\n            propC: Boolean\n          }\n        }\n      }\n    }).$mount();\n    expect(vm.$refs.child.propA).toBe(true);\n    expect(vm.$refs.child.propB).toBe(true);\n    expect(vm.$refs.child.propC).toBe(false);\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"should respect default value of a Boolean prop","suites":["Options props","assertions"],"line":350,"updatePoint":{"line":350,"column":52,"index":9831},"code":"  it('should respect default value of a Boolean prop', function () {\n    const vm = new Vue({\n      template: '<test></test>',\n      components: {\n        test: {\n          props: {\n            prop: {\n              type: Boolean,\n              default: true\n            }\n          },\n          template: '<div>{{prop}}</div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$el.textContent).toBe('true');\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"non reactive values passed down as prop should not be converted","suites":["Options props","assertions"],"line":367,"updatePoint":{"line":367,"column":69,"index":10262},"code":"  it('non reactive values passed down as prop should not be converted', done => {\n    const a = Object.freeze({\n      nested: {\n        msg: 'hello'\n      }\n    });\n    const parent = new Vue({\n      template: '<comp :a=\"a.nested\"></comp>',\n      data: {\n        a: a\n      },\n      components: {\n        comp: {\n          template: '<div></div>',\n          props: ['a']\n        }\n      }\n    }).$mount();\n    const child = parent.$children[0];\n    expect(child.a.msg).toBe('hello');\n    expect(child.a.__ob__).toBeUndefined(); // should not be converted\n\n    parent.a = Object.freeze({\n      nested: {\n        msg: 'yo'\n      }\n    });\n    waitForUpdate(() => {\n      expect(child.a.msg).toBe('yo');\n      expect(child.a.__ob__).toBeUndefined();\n    }).then(done);\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"should not warn for non-required, absent prop","suites":["Options props","assertions"],"line":399,"updatePoint":{"line":399,"column":51,"index":11016},"code":"  it('should not warn for non-required, absent prop', function () {\n    new Vue({\n      template: '<test></test>',\n      components: {\n        test: {\n          template: '<div></div>',\n          props: {\n            prop: {\n              type: String\n            }\n          }\n        }\n      }\n    }).$mount();\n    expect(console.error.calls.count()).toBe(0);\n  }); // #3453","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"should not fire watcher on object/array props when parent re-renders","suites":["Options props","assertions"],"line":416,"updatePoint":{"line":416,"column":74,"index":11417},"code":"  it('should not fire watcher on object/array props when parent re-renders', done => {\n    const spy = jasmine.createSpy();\n    const vm = new Vue({\n      data: {\n        arr: []\n      },\n      template: '<test :prop=\"arr\">hi</test>',\n      components: {\n        test: {\n          props: ['prop'],\n          watch: {\n            prop: spy\n          },\n          template: '<div><slot></slot></div>'\n        }\n      }\n    }).$mount();\n    vm.$forceUpdate();\n    waitForUpdate(() => {\n      expect(spy).not.toHaveBeenCalled();\n    }).then(done);\n  }); // #4090","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"should not trigger watcher on default value","suites":["Options props","assertions"],"line":439,"updatePoint":{"line":439,"column":49,"index":11952},"code":"  it('should not trigger watcher on default value', done => {\n    const spy = jasmine.createSpy();\n    const vm = new Vue({\n      template: `<test :value=\"a\" :test=\"b\"></test>`,\n      data: {\n        a: 1,\n        b: undefined\n      },\n      components: {\n        test: {\n          template: '<div>{{ value }}</div>',\n          props: {\n            value: {\n              type: Number\n            },\n            test: {\n              type: Object,\n              default: () => ({})\n            }\n          },\n          watch: {\n            test: spy\n          }\n        }\n      }\n    }).$mount();\n    vm.a++;\n    waitForUpdate(() => {\n      expect(spy).not.toHaveBeenCalled();\n      vm.b = {};\n    }).then(() => {\n      expect(spy.calls.count()).toBe(1);\n    }).then(() => {\n      vm.b = undefined;\n    }).then(() => {\n      expect(spy.calls.count()).toBe(2);\n      vm.a++;\n    }).then(() => {\n      expect(spy.calls.count()).toBe(2);\n    }).then(done);\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"warn reserved props","suites":["Options props","assertions"],"line":480,"updatePoint":{"line":480,"column":25,"index":12888},"code":"  it('warn reserved props', () => {\n    const specialAttrs = ['key', 'ref', 'slot', 'is'];\n    new Vue({\n      props: specialAttrs\n    });\n    specialAttrs.forEach(attr => {\n      expect(`\"${attr}\" is a reserved attribute`).toHaveBeenWarned();\n    });\n  });","file":"unit/features/options/props.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["Options propsData"],"line":3,"updatePoint":{"line":3,"column":17,"index":79},"code":"  it('should work', done => {\n    const A = Vue.extend({\n      props: ['a'],\n      template: '<div>{{ a }}</div>'\n    });\n    const vm = new A({\n      propsData: {\n        a: 123\n      }\n    }).$mount();\n    expect(vm.a).toBe(123);\n    expect(vm.$el.textContent).toBe('123');\n    vm.a = 234;\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('234');\n    }).then(done);\n  });","file":"unit/features/options/propsData.spec.js","skipped":false,"dir":"test"},{"name":"warn non instantiation usage","suites":["Options propsData"],"line":20,"updatePoint":{"line":20,"column":34,"index":485},"code":"  it('warn non instantiation usage', () => {\n    Vue.extend({\n      propsData: {\n        a: 123\n      }\n    });\n    expect('option \"propsData\" can only be used during instance creation').toHaveBeenWarned();\n  });","file":"unit/features/options/propsData.spec.js","skipped":false,"dir":"test"},{"name":"basic usage","suites":["Options render"],"line":3,"updatePoint":{"line":3,"column":17,"index":76},"code":"  it('basic usage', () => {\n    const vm = new Vue({\n      render(h) {\n        const children = [];\n\n        for (let i = 0; i < this.items.length; i++) {\n          children.push(h('li', {\n            staticClass: 'task'\n          }, [this.items[i].name]));\n        }\n\n        return h('ul', {\n          staticClass: 'tasks'\n        }, children);\n      },\n\n      data: {\n        items: [{\n          id: 1,\n          name: 'task1'\n        }, {\n          id: 2,\n          name: 'task2'\n        }]\n      }\n    }).$mount();\n    expect(vm.$el.tagName).toBe('UL');\n\n    for (let i = 0; i < vm.$el.children.length; i++) {\n      const li = vm.$el.children[i];\n      expect(li.tagName).toBe('LI');\n      expect(li.textContent).toBe(vm.items[i].name);\n    }\n  });","file":"unit/features/options/render.spec.js","skipped":false,"dir":"test"},{"name":"allow null data","suites":["Options render"],"line":37,"updatePoint":{"line":37,"column":21,"index":834},"code":"  it('allow null data', () => {\n    const vm = new Vue({\n      render(h) {\n        return h('div', null, 'hello'\n        /* string as children*/\n        );\n      }\n\n    }).$mount();\n    expect(vm.$el.tagName).toBe('DIV');\n    expect(vm.$el.textContent).toBe('hello');\n  });","file":"unit/features/options/render.spec.js","skipped":false,"dir":"test"},{"name":"should warn non `render` option and non `template` option","suites":["Options render"],"line":49,"updatePoint":{"line":49,"column":63,"index":1150},"code":"  it('should warn non `render` option and non `template` option', () => {\n    new Vue().$mount();\n    expect('Failed to mount component: template or render function not defined.').toHaveBeenWarned();\n  });","file":"unit/features/options/render.spec.js","skipped":false,"dir":"test"},{"name":"should be used on render errors","suites":["Options renderError"],"line":3,"updatePoint":{"line":3,"column":37,"index":101},"code":"  it('should be used on render errors', done => {\n    Vue.config.errorHandler = () => {};\n\n    const vm = new Vue({\n      data: {\n        ok: true\n      },\n\n      render(h) {\n        if (this.ok) {\n          return h('div', 'ok');\n        } else {\n          throw new Error('no');\n        }\n      },\n\n      renderError(h, err) {\n        return h('div', err.toString());\n      }\n\n    }).$mount();\n    expect(vm.$el.textContent).toBe('ok');\n    vm.ok = false;\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('Error: no');\n      Vue.config.errorHandler = null;\n    }).then(done);\n  });","file":"unit/features/options/renderError.spec.js","skipped":false,"dir":"test"},{"name":"basic usage","suites":["Options template"],"line":14,"updatePoint":{"line":14,"column":17,"index":342},"code":"  it('basic usage', () => {\n    const vm = new Vue({\n      template: '<div>{{message}}</div>',\n      data: {\n        message: 'hello world'\n      }\n    }).$mount();\n    expect(vm.$el.tagName).toBe('DIV');\n    expect(vm.$el.textContent).toBe(vm.message);\n  });","file":"unit/features/options/template.spec.js","skipped":false,"dir":"test"},{"name":"id reference","suites":["Options template"],"line":24,"updatePoint":{"line":24,"column":18,"index":603},"code":"  it('id reference', () => {\n    const vm = new Vue({\n      template: '#app',\n      data: {\n        message: 'hello world'\n      }\n    }).$mount();\n    expect(vm.$el.tagName).toBe('P');\n    expect(vm.$el.textContent).toBe(vm.message);\n  });","file":"unit/features/options/template.spec.js","skipped":false,"dir":"test"},{"name":"DOM element","suites":["Options template"],"line":34,"updatePoint":{"line":34,"column":17,"index":843},"code":"  it('DOM element', () => {\n    const elm = document.createElement('p');\n    elm.innerHTML = '<p>{{message}}</p>';\n    const vm = new Vue({\n      template: elm,\n      data: {\n        message: 'hello world'\n      }\n    }).$mount();\n    expect(vm.$el.tagName).toBe('P');\n    expect(vm.$el.textContent).toBe(vm.message);\n  });","file":"unit/features/options/template.spec.js","skipped":false,"dir":"test"},{"name":"invalid template","suites":["Options template"],"line":46,"updatePoint":{"line":46,"column":22,"index":1172},"code":"  it('invalid template', () => {\n    new Vue({\n      template: Vue,\n      data: {\n        message: 'hello world'\n      }\n    }).$mount();\n    expect('invalid template option').toHaveBeenWarned();\n  });","file":"unit/features/options/template.spec.js","skipped":false,"dir":"test"},{"name":"warn error in generated function","suites":["Options template"],"line":55,"updatePoint":{"line":55,"column":38,"index":1390},"code":"  it('warn error in generated function', () => {\n    new Vue({\n      template: '<div v-if=\"!@\"><span>{{ a\"\" }}</span><span>{{ do + 1 }}</span></div>'\n    }).$mount();\n    expect('Error compiling template').toHaveBeenWarned();\n    expect('invalid expression: v-if=\"!@\"').toHaveBeenWarned();\n    expect('invalid expression: {{ a\"\" }}').toHaveBeenWarned();\n    expect('avoid using JavaScript keyword as property name: \"do\" in expression {{ do + 1 }}').toHaveBeenWarned();\n  });","file":"unit/features/options/template.spec.js","skipped":false,"dir":"test"},{"name":"should not warn $ prefixed keywords","suites":["Options template"],"line":64,"updatePoint":{"line":64,"column":41,"index":1868},"code":"  it('should not warn $ prefixed keywords', () => {\n    new Vue({\n      template: `<div @click=\"$delete(foo, 'bar')\"></div>`\n    }).$mount();\n    expect('avoid using JavaScript keyword as property name').not.toHaveBeenWarned();\n  });","file":"unit/features/options/template.spec.js","skipped":false,"dir":"test"},{"name":"warn error in generated function (v-for)","suites":["Options template"],"line":70,"updatePoint":{"line":70,"column":46,"index":2107},"code":"  it('warn error in generated function (v-for)', () => {\n    new Vue({\n      template: '<div><div v-for=\"(1, 2) in a----\"></div></div>'\n    }).$mount();\n    expect('Error compiling template').toHaveBeenWarned();\n    expect('invalid v-for alias \"1\"').toHaveBeenWarned();\n    expect('invalid v-for iterator \"2\"').toHaveBeenWarned();\n    expect('invalid expression: v-for=\"(1, 2) in a----\"').toHaveBeenWarned();\n  });","file":"unit/features/options/template.spec.js","skipped":false,"dir":"test"},{"name":"warn error in generated function (v-on)","suites":["Options template"],"line":79,"updatePoint":{"line":79,"column":45,"index":2521},"code":"  it('warn error in generated function (v-on)', () => {\n    new Vue({\n      template: `<div @click=\"delete('Delete')\"></div>`,\n      methods: {\n        delete: function () {}\n      }\n    }).$mount();\n    expect('Error compiling template').toHaveBeenWarned();\n    expect(`avoid using JavaScript unary operator as property name: \"delete()\" in expression @click=\"delete('Delete')\"`).toHaveBeenWarned();\n  });","file":"unit/features/options/template.spec.js","skipped":false,"dir":"test"},{"name":"basic usage","suites":["Options watch"],"line":9,"updatePoint":{"line":9,"column":17,"index":248},"code":"  it('basic usage', done => {\n    const vm = new Vue({\n      data: {\n        a: 1\n      },\n      watch: {\n        a: spy\n      }\n    });\n    expect(spy).not.toHaveBeenCalled();\n    vm.a = 2;\n    expect(spy).not.toHaveBeenCalled();\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith(2, 1);\n    }).then(done);\n  });","file":"unit/features/options/watch.spec.js","skipped":false,"dir":"test"},{"name":"string method name","suites":["Options watch"],"line":25,"updatePoint":{"line":25,"column":24,"index":583},"code":"  it('string method name', done => {\n    const vm = new Vue({\n      data: {\n        a: 1\n      },\n      watch: {\n        a: 'onChange'\n      },\n      methods: {\n        onChange: spy\n      }\n    });\n    expect(spy).not.toHaveBeenCalled();\n    vm.a = 2;\n    expect(spy).not.toHaveBeenCalled();\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith(2, 1);\n    }).then(done);\n  });","file":"unit/features/options/watch.spec.js","skipped":false,"dir":"test"},{"name":"multiple cbs (after option merge)","suites":["Options watch"],"line":44,"updatePoint":{"line":44,"column":39,"index":988},"code":"  it('multiple cbs (after option merge)', done => {\n    const spy1 = jasmine.createSpy('watch');\n    const Test = Vue.extend({\n      watch: {\n        a: spy1\n      }\n    });\n    const vm = new Test({\n      data: {\n        a: 1\n      },\n      watch: {\n        a: spy\n      }\n    });\n    vm.a = 2;\n    waitForUpdate(() => {\n      expect(spy1).toHaveBeenCalledWith(2, 1);\n      expect(spy).toHaveBeenCalledWith(2, 1);\n    }).then(done);\n  });","file":"unit/features/options/watch.spec.js","skipped":false,"dir":"test"},{"name":"with option: immediate","suites":["Options watch"],"line":65,"updatePoint":{"line":65,"column":28,"index":1417},"code":"  it('with option: immediate', done => {\n    const vm = new Vue({\n      data: {\n        a: 1\n      },\n      watch: {\n        a: {\n          handler: spy,\n          immediate: true\n        }\n      }\n    });\n    expect(spy).toHaveBeenCalledWith(1);\n    vm.a = 2;\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith(2, 1);\n    }).then(done);\n  });","file":"unit/features/options/watch.spec.js","skipped":false,"dir":"test"},{"name":"with option: deep","suites":["Options watch"],"line":83,"updatePoint":{"line":83,"column":23,"index":1770},"code":"  it('with option: deep', done => {\n    const vm = new Vue({\n      data: {\n        a: {\n          b: 1\n        }\n      },\n      watch: {\n        a: {\n          handler: spy,\n          deep: true\n        }\n      }\n    });\n    const oldA = vm.a;\n    expect(spy).not.toHaveBeenCalled();\n    vm.a.b = 2;\n    expect(spy).not.toHaveBeenCalled();\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith(vm.a, vm.a);\n      vm.a = {\n        b: 3\n      };\n    }).then(() => {\n      expect(spy).toHaveBeenCalledWith(vm.a, oldA);\n    }).then(done);\n  });","file":"unit/features/options/watch.spec.js","skipped":false,"dir":"test"},{"name":"correctly merges multiple extends","suites":["Options watch"],"line":110,"updatePoint":{"line":110,"column":39,"index":2338},"code":"  it('correctly merges multiple extends', done => {\n    var spy2 = jasmine.createSpy('A');\n    var spy3 = jasmine.createSpy('B');\n    var A = Vue.extend({\n      data: function () {\n        return {\n          a: 0,\n          b: 0\n        };\n      },\n      watch: {\n        b: spy\n      }\n    });\n    var B = Vue.extend({\n      extends: A,\n      watch: {\n        a: spy2\n      }\n    });\n    var C = Vue.extend({\n      extends: B,\n      watch: {\n        a: spy3\n      }\n    });\n    var vm = new C();\n    vm.a = 1;\n    waitForUpdate(() => {\n      expect(spy).not.toHaveBeenCalled();\n      expect(spy2).toHaveBeenCalledWith(1, 0);\n      expect(spy3).toHaveBeenCalledWith(1, 0);\n    }).then(done);\n  });","file":"unit/features/options/watch.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["ref"],"line":13,"updatePoint":{"line":13,"column":17,"index":237},"code":"  it('should work', () => {\n    const vm = new Vue({\n      data: {\n        value: 'bar'\n      },\n      template: `<div>\n        <test ref=\"foo\"></test>\n        <test2 :ref=\"value\"></test2>\n      </div>`,\n      components\n    });\n    vm.$mount();\n    expect(vm.$refs.foo).toBeTruthy();\n    expect(vm.$refs.foo.$options.id).toBe('test');\n    expect(vm.$refs.bar).toBeTruthy();\n    expect(vm.$refs.bar.$options.id).toBe('test2');\n  });","file":"unit/features/ref.spec.js","skipped":false,"dir":"test"},{"name":"should dynamically update refs","suites":["ref"],"line":30,"updatePoint":{"line":30,"column":36,"index":689},"code":"  it('should dynamically update refs', done => {\n    const vm = new Vue({\n      data: {\n        value: 'foo'\n      },\n      template: '<div :ref=\"value\"></div>'\n    }).$mount();\n    expect(vm.$refs.foo).toBe(vm.$el);\n    vm.value = 'bar';\n    waitForUpdate(() => {\n      expect(vm.$refs.foo).toBeUndefined();\n      expect(vm.$refs.bar).toBe(vm.$el);\n    }).then(done);\n  });","file":"unit/features/ref.spec.js","skipped":false,"dir":"test"},{"name":"should work as a hyperscript prop","suites":["ref"],"line":44,"updatePoint":{"line":44,"column":39,"index":1067},"code":"  it('should work as a hyperscript prop', () => {\n    const vm = new Vue({\n      components,\n\n      render(h) {\n        return h('div', null, [h('test', {\n          ref: 'test'\n        })]);\n      }\n\n    });\n    vm.$mount();\n    expect(vm.$refs.test).toBeTruthy();\n    expect(vm.$refs.test.$options.id).toBe('test');\n  });","file":"unit/features/ref.spec.js","skipped":false,"dir":"test"},{"name":"should accept HOC component","suites":["ref"],"line":59,"updatePoint":{"line":59,"column":33,"index":1384},"code":"  it('should accept HOC component', () => {\n    const vm = new Vue({\n      template: '<test ref=\"test\"></test>',\n      components\n    });\n    vm.$mount();\n    expect(vm.$refs.test).toBeTruthy();\n    expect(vm.$refs.test.$options.id).toBe('test');\n  });","file":"unit/features/ref.spec.js","skipped":false,"dir":"test"},{"name":"should accept dynamic component","suites":["ref"],"line":68,"updatePoint":{"line":68,"column":37,"index":1641},"code":"  it('should accept dynamic component', done => {\n    const vm = new Vue({\n      template: `<div>\n        <component :is=\"test\" ref=\"test\"></component>\n      </div>`,\n      components,\n      data: {\n        test: 'test'\n      }\n    });\n    vm.$mount();\n    expect(vm.$refs.test.$options.id).toBe('test');\n    vm.test = 'test2';\n    waitForUpdate(() => {\n      expect(vm.$refs.test.$options.id).toBe('test2');\n      vm.test = '';\n    }).then(() => {\n      expect(vm.$refs.test).toBeUndefined();\n    }).then(done);\n  });","file":"unit/features/ref.spec.js","skipped":false,"dir":"test"},{"name":"should register as Array when used with v-for","suites":["ref"],"line":88,"updatePoint":{"line":88,"column":51,"index":2174},"code":"  it('should register as Array when used with v-for', done => {\n    const vm = new Vue({\n      data: {\n        items: [1, 2, 3]\n      },\n      template: `\n        <div>\n          <div v-for=\"n in items\" ref=\"list\">{{n}}</div>\n        </div>\n      `\n    }).$mount();\n    assertRefs(); // updating\n\n    vm.items.push(4);\n    waitForUpdate(assertRefs).then(() => {\n      vm.items = [];\n    }).then(assertRefs).then(done);\n\n    function assertRefs() {\n      expect(Array.isArray(vm.$refs.list)).toBe(true);\n      expect(vm.$refs.list.length).toBe(vm.items.length);\n      expect(vm.$refs.list.every((item, i) => item.textContent === String(i + 1))).toBe(true);\n    }\n  });","file":"unit/features/ref.spec.js","skipped":false,"dir":"test"},{"name":"should register as Array when used with v-for (components)","suites":["ref"],"line":112,"updatePoint":{"line":112,"column":64,"index":2855},"code":"  it('should register as Array when used with v-for (components)', done => {\n    const vm = new Vue({\n      data: {\n        items: [1, 2, 3]\n      },\n      template: `\n        <div>\n          <test v-for=\"n in items\" ref=\"list\" :key=\"n\" :n=\"n\"></test>\n        </div>\n      `,\n      components: {\n        test: {\n          props: ['n'],\n          template: '<div>{{ n }}</div>'\n        }\n      }\n    }).$mount();\n    assertRefs(); // updating\n\n    vm.items.push(4);\n    waitForUpdate(assertRefs).then(() => {\n      vm.items = [];\n    }).then(assertRefs).then(done);\n\n    function assertRefs() {\n      expect(Array.isArray(vm.$refs.list)).toBe(true);\n      expect(vm.$refs.list.length).toBe(vm.items.length);\n      expect(vm.$refs.list.every((comp, i) => comp.$el.textContent === String(i + 1))).toBe(true);\n    }\n  });","file":"unit/features/ref.spec.js","skipped":false,"dir":"test"},{"name":"should work with v-for on dynamic component","suites":["ref"],"line":142,"updatePoint":{"line":142,"column":49,"index":3658},"code":"  it('should work with v-for on dynamic component', done => {\n    components.test3 = {\n      id: 'test3',\n      template: `<test1 v-if=\"!normal\"></test1><div v-else>test3</div>`,\n\n      data() {\n        return {\n          normal: false\n        };\n      },\n\n      components: {\n        test1: components.test\n      }\n    }; // a flag that representing whether to test component content or not\n\n    let testContent = false;\n    const vm = new Vue({\n      template: `\n        <div>\n          <component\n            v-for=\"(item, index) in items\"\n            :key=\"index\"\n            :is=\"item\"\n            ref=\"children\">\n          </component>\n        </div>\n      `,\n      data: {\n        items: ['test2', 'test3']\n      },\n      components\n    }).$mount();\n    assertRefs();\n    expect(vm.$refs.children[0].$el.textContent).toBe('test2');\n    expect(vm.$refs.children[1].$el.textContent).toBe('test'); // updating\n\n    vm.$refs.children[1].normal = true;\n    testContent = true;\n    waitForUpdate(assertRefs).then(() => {\n      vm.items.push('test');\n    }).then(assertRefs).then(done);\n\n    function assertRefs() {\n      expect(Array.isArray(vm.$refs.children)).toBe(true);\n      expect(vm.$refs.children.length).toBe(vm.items.length);\n\n      if (testContent) {\n        expect(vm.$refs.children.every((comp, i) => comp.$el.textContent === vm.items[i])).toBe(true);\n      }\n    }\n  });","file":"unit/features/ref.spec.js","skipped":false,"dir":"test"},{"name":"should register on component with empty roots","suites":["ref"],"line":194,"updatePoint":{"line":194,"column":51,"index":5046},"code":"  it('should register on component with empty roots', () => {\n    const vm = new Vue({\n      template: '<child ref=\"test\"></child>',\n      components: {\n        child: {\n          template: '<div v-if=\"false\"></div>'\n        }\n      }\n    }).$mount();\n    expect(vm.$refs.test).toBe(vm.$children[0]);\n  });","file":"unit/features/ref.spec.js","skipped":false,"dir":"test"},{"name":"enter","suites":["Transition group"],"line":39,"updatePoint":{"line":39,"column":13,"index":1054},"code":"    it('enter', done => {\n      const vm = createBasicVM();\n      vm.items.push('d', 'e');\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + ['a', 'b', 'c'].map(i => `<div class=\"test\">${i}</div>`).join('') + `<div class=\"test v-enter v-enter-active\">d</div>` + `<div class=\"test v-enter v-enter-active\">e</div>` + `</span>`);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + ['a', 'b', 'c'].map(i => `<div class=\"test\">${i}</div>`).join('') + `<div class=\"test v-enter-active v-enter-to\">d</div>` + `<div class=\"test v-enter-active v-enter-to\">e</div>` + `</span>`);\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + vm.items.map(i => `<div class=\"test\">${i}</div>`).join('') + `</span>`);\n      }).then(done);\n    });","file":"unit/features/transition/transition-group.spec.js","skipped":false,"dir":"test"},{"name":"leave","suites":["Transition group"],"line":50,"updatePoint":{"line":50,"column":13,"index":1898},"code":"    it('leave', done => {\n      const vm = createBasicVM();\n      vm.items = ['b'];\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + `<div class=\"test v-leave v-leave-active\">a</div>` + `<div class=\"test\">b</div>` + `<div class=\"test v-leave v-leave-active\">c</div>` + `</span>`);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + `<div class=\"test v-leave-active v-leave-to\">a</div>` + `<div class=\"test\">b</div>` + `<div class=\"test v-leave-active v-leave-to\">c</div>` + `</span>`);\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + vm.items.map(i => `<div class=\"test\">${i}</div>`).join('') + `</span>`);\n      }).then(done);\n    });","file":"unit/features/transition/transition-group.spec.js","skipped":false,"dir":"test"},{"name":"enter + leave","suites":["Transition group"],"line":61,"updatePoint":{"line":61,"column":21,"index":2667},"code":"    it('enter + leave', done => {\n      const vm = createBasicVM();\n      vm.items = ['b', 'c', 'd'];\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + `<div class=\"test v-leave v-leave-active\">a</div>` + `<div class=\"test\">b</div>` + `<div class=\"test\">c</div>` + `<div class=\"test v-enter v-enter-active\">d</div>` + `</span>`);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + `<div class=\"test v-leave-active v-leave-to\">a</div>` + `<div class=\"test\">b</div>` + `<div class=\"test\">c</div>` + `<div class=\"test v-enter-active v-enter-to\">d</div>` + `</span>`);\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + vm.items.map(i => `<div class=\"test\">${i}</div>`).join('') + `</span>`);\n      }).then(done);\n    });","file":"unit/features/transition/transition-group.spec.js","skipped":false,"dir":"test"},{"name":"use with \"is\" attribute","suites":["Transition group"],"line":72,"updatePoint":{"line":72,"column":31,"index":3516},"code":"    it('use with \"is\" attribute', done => {\n      const vm = createBasicVM(true);\n      vm.items = ['b', 'c', 'd'];\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + `<div class=\"test v-leave v-leave-active\">a</div>` + `<div class=\"test\">b</div>` + `<div class=\"test\">c</div>` + `<div class=\"test v-enter v-enter-active\">d</div>` + `</span>`);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + `<div class=\"test v-leave-active v-leave-to\">a</div>` + `<div class=\"test\">b</div>` + `<div class=\"test\">c</div>` + `<div class=\"test v-enter-active v-enter-to\">d</div>` + `</span>`);\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + vm.items.map(i => `<div class=\"test\">${i}</div>`).join('') + `</span>`);\n      }).then(done);\n    });","file":"unit/features/transition/transition-group.spec.js","skipped":false,"dir":"test"},{"name":"appear","suites":["Transition group"],"line":83,"updatePoint":{"line":83,"column":14,"index":4352},"code":"    it('appear', done => {\n      const vm = createBasicVM(false, true\n      /* appear */\n      );\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + vm.items.map(i => `<div class=\"test v-enter v-enter-active\">${i}</div>`).join('') + `</span>`);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + vm.items.map(i => `<div class=\"test v-enter-active v-enter-to\">${i}</div>`).join('') + `</span>`);\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + vm.items.map(i => `<div class=\"test\">${i}</div>`).join('') + `</span>`);\n      }).then(done);\n    });","file":"unit/features/transition/transition-group.spec.js","skipped":false,"dir":"test"},{"name":"events","suites":["Transition group"],"line":95,"updatePoint":{"line":95,"column":14,"index":5020},"code":"    it('events', done => {\n      let next;\n      const beforeEnterSpy = jasmine.createSpy();\n      const afterEnterSpy = jasmine.createSpy();\n      const afterLeaveSpy = jasmine.createSpy();\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition-group @before-enter=\"beforeEnter\" @after-enter=\"afterEnter\" @after-leave=\"afterLeave\">\n              <div v-for=\"item in items\" :key=\"item\" class=\"test\">{{ item }}</div>\n            </transition-group>\n          </div>\n        `,\n        data: {\n          items: ['a', 'b', 'c']\n        },\n        methods: {\n          beforeEnter(el) {\n            expect(el.textContent).toBe('d');\n            beforeEnterSpy();\n          },\n\n          afterEnter(el) {\n            expect(el.textContent).toBe('d');\n            afterEnterSpy();\n            next();\n          },\n\n          afterLeave(el) {\n            expect(el.textContent).toBe('a');\n            afterLeaveSpy();\n            next();\n          }\n\n        }\n      }).$mount(el);\n      vm.items.push('d');\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + `<div class=\"test\">a</div>` + `<div class=\"test\">b</div>` + `<div class=\"test\">c</div>` + `<div class=\"test v-enter v-enter-active\">d</div>` + `</span>`);\n        expect(beforeEnterSpy.calls.count()).toBe(1);\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + `<div class=\"test\">a</div>` + `<div class=\"test\">b</div>` + `<div class=\"test\">c</div>` + `<div class=\"test\">d</div>` + `</span>`);\n        expect(afterEnterSpy.calls.count()).toBe(1);\n        vm.items.shift();\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe(`<span>` + `<div class=\"test\">b</div>` + `<div class=\"test\">c</div>` + `<div class=\"test\">d</div>` + `</span>`);\n        expect(afterLeaveSpy.calls.count()).toBe(1);\n      }).then(done);\n    });","file":"unit/features/transition/transition-group.spec.js","skipped":false,"dir":"test"},{"name":"move","suites":["Transition group"],"line":148,"updatePoint":{"line":148,"column":12,"index":6982},"code":"    it('move', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition-group name=\"group\">\n              <div v-for=\"item in items\" :key=\"item\" class=\"test\">{{ item }}</div>\n            </transition-group>\n          </div>\n        `,\n        data: {\n          items: ['a', 'b', 'c']\n        }\n      }).$mount(el);\n      vm.items = ['d', 'b', 'a'];\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML.replace(/\\s?style=\"\"(\\s?)/g, '$1')).toBe(`<span>` + `<div class=\"test group-enter group-enter-active\">d</div>` + `<div class=\"test\">b</div>` + `<div class=\"test group-move\">a</div>` + `<div class=\"test group-leave group-leave-active group-move\">c</div>` + `</span>`);\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML.replace(/\\s?style=\"\"(\\s?)/g, '$1')).toBe(`<span>` + `<div class=\"test group-enter-active group-enter-to\">d</div>` + `<div class=\"test\">b</div>` + `<div class=\"test group-move\">a</div>` + `<div class=\"test group-leave-active group-move group-leave-to\">c</div>` + `</span>`);\n      }).thenWaitFor(duration * 2).then(() => {\n        expect(vm.$el.innerHTML.replace(/\\s?style=\"\"(\\s?)/g, '$1')).toBe(`<span>` + `<div class=\"test\">d</div>` + `<div class=\"test\">b</div>` + `<div class=\"test\">a</div>` + `</span>`);\n      }).then(done);\n    });","file":"unit/features/transition/transition-group.spec.js","skipped":false,"dir":"test"},{"name":"warn unkeyed children","suites":["Transition group"],"line":170,"updatePoint":{"line":170,"column":29,"index":8330},"code":"    it('warn unkeyed children', () => {\n      new Vue({\n        template: `<div><transition-group><div v-for=\"i in 3\"></div></transition-group></div>`\n      }).$mount();\n      expect('<transition-group> children must be keyed: <div>').toHaveBeenWarned();\n    }); // Github issue #6006","file":"unit/features/transition/transition-group.spec.js","skipped":false,"dir":"test"},{"name":"should work with dynamic name","suites":["Transition group"],"line":177,"updatePoint":{"line":177,"column":37,"index":8624},"code":"    it('should work with dynamic name', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition-group :name=\"name\">\n              <div v-for=\"item in items\" :key=\"item\">{{ item }}</div>\n            </transition-group>\n          </div>\n        `,\n        data: {\n          items: ['a', 'b', 'c'],\n          name: 'group'\n        }\n      }).$mount(el);\n      vm.name = 'invalid-name';\n      vm.items = ['b', 'c', 'a'];\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML.replace(/\\s?style=\"\"(\\s?)/g, '$1')).toBe(`<span>` + `<div>b</div>` + `<div>c</div>` + `<div>a</div>` + `</span>`);\n        vm.name = 'group';\n        vm.items = ['a', 'b', 'c'];\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML.replace(/\\s?style=\"\"(\\s?)/g, '$1')).toBe(`<span>` + `<div class=\"group-move\">a</div>` + `<div class=\"group-move\">b</div>` + `<div class=\"group-move\">c</div>` + `</span>`);\n      }).thenWaitFor(duration * 2 + buffer).then(() => {\n        expect(vm.$el.innerHTML.replace(/\\s?style=\"\"(\\s?)/g, '$1')).toBe(`<span>` + `<div>a</div>` + `<div>b</div>` + `<div>c</div>` + `</span>`);\n      }).then(done);\n    });","file":"unit/features/transition/transition-group.spec.js","skipped":false,"dir":"test"},{"name":"dynamic components, simultaneous","suites":["Transition mode"],"line":25,"updatePoint":{"line":25,"column":40,"index":589},"code":"    it('dynamic components, simultaneous', done => {\n      const vm = new Vue({\n        template: `<div>\n          <transition>\n            <component :is=\"view\" class=\"test\">\n            </component>\n          </transition>\n        </div>`,\n        data: {\n          view: 'one'\n        },\n        components\n      }).$mount(el);\n      expect(vm.$el.textContent).toBe('one');\n      vm.view = 'two';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test v-leave v-leave-active\">one</div>' + '<div class=\"test v-enter v-enter-active\">two</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test v-leave-active v-leave-to\">one</div>' + '<div class=\"test v-enter-active v-enter-to\">two</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>');\n      }).then(done);\n    });","file":"unit/features/transition/transition-mode.spec.js","skipped":false,"dir":"test"},{"name":"dynamic components, out-in","suites":["Transition mode"],"line":48,"updatePoint":{"line":48,"column":34,"index":1510},"code":"    it('dynamic components, out-in', done => {\n      let next;\n      const vm = new Vue({\n        template: `<div>\n          <transition name=\"test\" mode=\"out-in\" @after-leave=\"afterLeave\">\n            <component :is=\"view\" class=\"test\">\n            </component>\n          </transition>\n        </div>`,\n        data: {\n          view: 'one'\n        },\n        components,\n        methods: {\n          afterLeave() {\n            next();\n          }\n\n        }\n      }).$mount(el);\n      expect(vm.$el.textContent).toBe('one');\n      vm.view = 'two';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">one</div><!---->');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">one</div><!---->');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<!---->');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter test-enter-active\">two</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter-active test-enter-to\">two</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>');\n      }).then(done);\n    }); // #3440","file":"unit/features/transition/transition-mode.spec.js","skipped":false,"dir":"test"},{"name":"dynamic components, out-in (with extra re-render)","suites":["Transition mode"],"line":87,"updatePoint":{"line":87,"column":57,"index":2950},"code":"    it('dynamic components, out-in (with extra re-render)', done => {\n      let next;\n      const vm = new Vue({\n        template: `<div>\n          <transition name=\"test\" mode=\"out-in\" @after-leave=\"afterLeave\">\n            <component :is=\"view\" class=\"test\">\n            </component>\n          </transition>\n        </div>`,\n        data: {\n          view: 'one'\n        },\n        components,\n        methods: {\n          afterLeave() {\n            next();\n          }\n\n        }\n      }).$mount(el);\n      expect(vm.$el.textContent).toBe('one');\n      vm.view = 'two';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">one</div><!---->');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">one</div><!---->'); // Force re-render before the element finishes leaving\n        // this should not cause the incoming element to enter early\n\n        vm.$forceUpdate();\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<!---->');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter test-enter-active\">two</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter-active test-enter-to\">two</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>');\n      }).then(done);\n    });","file":"unit/features/transition/transition-mode.spec.js","skipped":false,"dir":"test"},{"name":"dynamic components, in-out","suites":["Transition mode"],"line":128,"updatePoint":{"line":128,"column":34,"index":4509},"code":"    it('dynamic components, in-out', done => {\n      let next;\n      const vm = new Vue({\n        template: `<div>\n          <transition name=\"test\" mode=\"in-out\" @after-enter=\"afterEnter\">\n            <component :is=\"view\" class=\"test\">\n            </component>\n          </transition>\n        </div>`,\n        data: {\n          view: 'one'\n        },\n        components,\n        methods: {\n          afterEnter() {\n            next();\n          }\n\n        }\n      }).$mount(el);\n      expect(vm.$el.textContent).toBe('one');\n      vm.view = 'two';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test test-enter test-enter-active\">two</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test test-enter-active test-enter-to\">two</div>');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test\">two</div>');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">one</div>' + '<div class=\"test\">two</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">one</div>' + '<div class=\"test\">two</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>');\n      }).then(done);\n    });","file":"unit/features/transition/transition-mode.spec.js","skipped":false,"dir":"test"},{"name":"dynamic components, in-out with early cancel","suites":["Transition mode"],"line":166,"updatePoint":{"line":166,"column":52,"index":6077},"code":"    it('dynamic components, in-out with early cancel', done => {\n      let next;\n      const vm = new Vue({\n        template: `<div>\n          <transition name=\"test\" mode=\"in-out\" @after-enter=\"afterEnter\">\n            <component :is=\"view\" class=\"test\"></component>\n          </transition>\n        </div>`,\n        data: {\n          view: 'one'\n        },\n        components,\n        methods: {\n          afterEnter() {\n            next();\n          }\n\n        }\n      }).$mount(el);\n      expect(vm.$el.textContent).toBe('one');\n      vm.view = 'two';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test test-enter test-enter-active\">two</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test test-enter-active test-enter-to\">two</div>'); // switch again before enter finishes,\n        // this cancels both enter and leave.\n\n        vm.view = 'one';\n      }).then(() => {\n        // 1. the pending leaving \"one\" should be removed instantly.\n        // 2. the entering \"two\" should be placed into its final state instantly.\n        // 3. a new \"one\" is created and entering\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>' + '<div class=\"test test-enter test-enter-active\">one</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>' + '<div class=\"test test-enter-active test-enter-to\">one</div>');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>' + '<div class=\"test\">one</div>');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">two</div>' + '<div class=\"test\">one</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">two</div>' + '<div class=\"test\">one</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>');\n      }).then(done).then(done);\n    });","file":"unit/features/transition/transition-mode.spec.js","skipped":false,"dir":"test"},{"name":"normal elements with different keys, simultaneous","suites":["Transition mode"],"line":213,"updatePoint":{"line":213,"column":57,"index":8292},"code":"    it('normal elements with different keys, simultaneous', done => {\n      const vm = new Vue({\n        template: `<div>\n          <transition>\n            <div :key=\"view\" class=\"test\">{{view}}</div>\n          </transition>\n        </div>`,\n        data: {\n          view: 'one'\n        },\n        components\n      }).$mount(el);\n      expect(vm.$el.textContent).toBe('one');\n      vm.view = 'two';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test v-leave v-leave-active\">one</div>' + '<div class=\"test v-enter v-enter-active\">two</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test v-leave-active v-leave-to\">one</div>' + '<div class=\"test v-enter-active v-enter-to\">two</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>');\n      }).then(done);\n    });","file":"unit/features/transition/transition-mode.spec.js","skipped":false,"dir":"test"},{"name":"normal elements with different keys, out-in","suites":["Transition mode"],"line":235,"updatePoint":{"line":235,"column":51,"index":9214},"code":"    it('normal elements with different keys, out-in', done => {\n      let next;\n      const vm = new Vue({\n        template: `<div>\n          <transition name=\"test\" mode=\"out-in\" @after-leave=\"afterLeave\">\n            <div :key=\"view\" class=\"test\">{{view}}</div>\n          </transition>\n        </div>`,\n        data: {\n          view: 'one'\n        },\n        components,\n        methods: {\n          afterLeave() {\n            next();\n          }\n\n        }\n      }).$mount(el);\n      expect(vm.$el.textContent).toBe('one');\n      vm.view = 'two';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">one</div><!---->');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">one</div><!---->');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<!---->');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter test-enter-active\">two</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-enter-active test-enter-to\">two</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>');\n      }).then(done);\n    });","file":"unit/features/transition/transition-mode.spec.js","skipped":false,"dir":"test"},{"name":"normal elements with different keys, in-out","suites":["Transition mode"],"line":272,"updatePoint":{"line":272,"column":51,"index":10622},"code":"    it('normal elements with different keys, in-out', done => {\n      let next;\n      const vm = new Vue({\n        template: `<div>\n          <transition name=\"test\" mode=\"in-out\" @after-enter=\"afterEnter\">\n            <div :key=\"view\" class=\"test\">{{view}}</div>\n          </transition>\n        </div>`,\n        data: {\n          view: 'one'\n        },\n        components,\n        methods: {\n          afterEnter() {\n            next();\n          }\n\n        }\n      }).$mount(el);\n      expect(vm.$el.textContent).toBe('one');\n      vm.view = 'two';\n      waitForUpdate(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test test-enter test-enter-active\">two</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test test-enter-active test-enter-to\">two</div>');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">one</div>' + '<div class=\"test\">two</div>');\n      }).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave test-leave-active\">one</div>' + '<div class=\"test\">two</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test test-leave-active test-leave-to\">one</div>' + '<div class=\"test\">two</div>');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">two</div>');\n      }).then(done);\n    });","file":"unit/features/transition/transition-mode.spec.js","skipped":false,"dir":"test"},{"name":"transition out-in on async component (resolve before leave complete)","suites":["Transition mode"],"line":309,"updatePoint":{"line":309,"column":76,"index":12198},"code":"    it('transition out-in on async component (resolve before leave complete)', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition name=\"test-anim\" mode=\"out-in\">\n              <component-a v-if=\"ok\"></component-a>\n              <component-b v-else></component-b>\n            </transition>\n          </div>\n        `,\n        components: {\n          componentA: resolve => {\n            setTimeout(() => {\n              resolve({\n                template: '<div><h1>component A</h1></div>'\n              });\n              next1();\n            }, duration / 2);\n          },\n          componentB: resolve => {\n            setTimeout(() => {\n              resolve({\n                template: '<div><h1>component B</h1></div>'\n              });\n            }, duration / 2);\n          }\n        },\n        data: {\n          ok: true\n        }\n      }).$mount(el);\n      expect(vm.$el.innerHTML).toBe('<!---->');\n\n      function next1() {\n        Vue.nextTick(() => {\n          expect(vm.$el.children.length).toBe(1);\n          expect(vm.$el.textContent).toBe('component A');\n          expect(vm.$el.children[0].className).toBe('test-anim-enter test-anim-enter-active');\n          nextFrame(() => {\n            expect(vm.$el.children[0].className).toBe('test-anim-enter-active test-anim-enter-to');\n            setTimeout(() => {\n              expect(vm.$el.children[0].className).toBe('');\n              vm.ok = false;\n              next2();\n            }, duration + buffer);\n          });\n        });\n      }\n\n      function next2() {\n        waitForUpdate(() => {\n          expect(vm.$el.children.length).toBe(1);\n          expect(vm.$el.textContent).toBe('component A');\n          expect(vm.$el.children[0].className).toBe('test-anim-leave test-anim-leave-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test-anim-leave-active test-anim-leave-to');\n        }).thenWaitFor(duration + buffer).then(() => {\n          expect(vm.$el.children.length).toBe(1);\n          expect(vm.$el.textContent).toBe('component B');\n          expect(vm.$el.children[0].className).toMatch('test-anim-enter-active');\n        }).thenWaitFor(duration * 2).then(() => {\n          expect(vm.$el.children[0].className).toBe('');\n        }).then(done);\n      }\n    });","file":"unit/features/transition/transition-mode.spec.js","skipped":false,"dir":"test"},{"name":"transition out-in on async component (resolve after leave complete)","suites":["Transition mode"],"line":374,"updatePoint":{"line":374,"column":75,"index":14545},"code":"    it('transition out-in on async component (resolve after leave complete)', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition name=\"test-anim\" mode=\"out-in\">\n              <component-a v-if=\"ok\"></component-a>\n              <component-b v-else></component-b>\n            </transition>\n          </div>\n        `,\n        components: {\n          componentA: {\n            template: '<div><h1>component A</h1></div>'\n          },\n          componentB: resolve => {\n            setTimeout(() => {\n              resolve({\n                template: '<div><h1>component B</h1></div>'\n              });\n              Vue.nextTick(next);\n            }, (duration + buffer) * 1.5);\n          }\n        },\n        data: {\n          ok: true\n        }\n      }).$mount(el);\n      expect(vm.$el.innerHTML).toBe('<div><h1>component A</h1></div>');\n      let next;\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children.length).toBe(1);\n        expect(vm.$el.textContent).toBe('component A');\n        expect(vm.$el.children[0].className).toBe('test-anim-leave test-anim-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test-anim-leave-active test-anim-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children.length).toBe(0);\n        expect(vm.$el.innerHTML).toBe('<!---->');\n      }).thenWaitFor(_next => {\n        next = _next;\n      }).then(() => {\n        expect(vm.$el.children.length).toBe(1);\n        expect(vm.$el.textContent).toBe('component B');\n        expect(vm.$el.children[0].className).toBe('test-anim-enter test-anim-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test-anim-enter-active test-anim-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children.length).toBe(1);\n        expect(vm.$el.textContent).toBe('component B');\n        expect(vm.$el.children[0].className).toBe('');\n      }).then(done);\n    });","file":"unit/features/transition/transition-mode.spec.js","skipped":false,"dir":"test"},{"name":"transition in-out on async component","suites":["Transition mode"],"line":427,"updatePoint":{"line":427,"column":44,"index":16606},"code":"    it('transition in-out on async component', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition name=\"test-anim\" mode=\"in-out\">\n              <component-a v-if=\"ok\"></component-a>\n              <component-b v-else></component-b>\n            </transition>\n          </div>\n        `,\n        components: {\n          componentA: resolve => {\n            setTimeout(() => {\n              resolve({\n                template: '<div><h1>component A</h1></div>'\n              });\n              next1();\n            }, duration / 2);\n          },\n          componentB: resolve => {\n            setTimeout(() => {\n              resolve({\n                template: '<div><h1>component B</h1></div>'\n              });\n              next2();\n            }, duration / 2);\n          }\n        },\n        data: {\n          ok: true\n        }\n      }).$mount(el);\n      expect(vm.$el.innerHTML).toBe('<!---->');\n\n      function next1() {\n        Vue.nextTick(() => {\n          expect(vm.$el.children.length).toBe(1);\n          expect(vm.$el.textContent).toBe('component A');\n          expect(vm.$el.children[0].className).toBe('test-anim-enter test-anim-enter-active');\n          nextFrame(() => {\n            expect(vm.$el.children[0].className).toBe('test-anim-enter-active test-anim-enter-to');\n            setTimeout(() => {\n              expect(vm.$el.children[0].className).toBe('');\n              vm.ok = false;\n            }, duration + buffer);\n          });\n        });\n      }\n\n      function next2() {\n        waitForUpdate(() => {\n          expect(vm.$el.children.length).toBe(2);\n          expect(vm.$el.textContent).toBe('component Acomponent B');\n          expect(vm.$el.children[0].className).toBe('');\n          expect(vm.$el.children[1].className).toBe('test-anim-enter test-anim-enter-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[1].className).toBe('test-anim-enter-active test-anim-enter-to');\n        }).thenWaitFor(duration + buffer).then(() => {\n          expect(vm.$el.children.length).toBe(2);\n          expect(vm.$el.textContent).toBe('component Acomponent B');\n          expect(vm.$el.children[0].className).toMatch('test-anim-leave-active');\n          expect(vm.$el.children[1].className).toBe('');\n        }).thenWaitFor(duration + buffer).then(() => {\n          expect(vm.$el.children.length).toBe(1);\n          expect(vm.$el.textContent).toBe('component B');\n          expect(vm.$el.children[0].className).toBe('');\n        }).then(done);\n      }\n    });","file":"unit/features/transition/transition-mode.spec.js","skipped":false,"dir":"test"},{"name":"warn invalid mode","suites":["Transition mode"],"line":496,"updatePoint":{"line":496,"column":25,"index":19152},"code":"    it('warn invalid mode', () => {\n      new Vue({\n        template: '<transition mode=\"foo\"><div>123</div></transition>'\n      }).$mount();\n      expect('invalid <transition> mode: foo').toHaveBeenWarned();\n    });","file":"unit/features/transition/transition-mode.spec.js","skipped":false,"dir":"test"},{"name":"basic transition","suites":["Transition basic"],"line":18,"updatePoint":{"line":18,"column":24,"index":472},"code":"    it('basic transition', done => {\n      const vm = new Vue({\n        template: '<div><transition><div v-if=\"ok\" class=\"test\">foo</div></transition></div>',\n        data: {\n          ok: true\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children.length).toBe(0);\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"named transition","suites":["Transition basic"],"line":43,"updatePoint":{"line":43,"column":24,"index":1585},"code":"    it('named transition', done => {\n      const vm = new Vue({\n        template: '<div><transition name=\"test\"><div v-if=\"ok\" class=\"test\">foo</div></transition></div>',\n        data: {\n          ok: true\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children.length).toBe(0);\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"custom transition classes","suites":["Transition basic"],"line":68,"updatePoint":{"line":68,"column":33,"index":2743},"code":"    it('custom transition classes', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition\n              enter-class=\"hello\"\n              enter-active-class=\"hello-active\"\n              enter-to-class=\"hello-to\"\n              leave-class=\"bye\"\n              leave-to-class=\"bye-to\"\n              leave-active-class=\"byebye active more \">\n              <div v-if=\"ok\" class=\"test\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test bye byebye active more');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test byebye active more bye-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children.length).toBe(0);\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.children[0].className).toBe('test hello hello-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test hello-active hello-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"dynamic transition","suites":["Transition basic"],"line":105,"updatePoint":{"line":105,"column":26,"index":4169},"code":"    it('dynamic transition', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition :name=\"trans\">\n              <div v-if=\"ok\" class=\"test\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true,\n          trans: 'test'\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children.length).toBe(0);\n        vm.ok = true;\n        vm.trans = 'changed';\n      }).then(() => {\n        expect(vm.$el.children[0].className).toBe('test changed-enter changed-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test changed-enter-active changed-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"inline transition object","suites":["Transition basic"],"line":138,"updatePoint":{"line":138,"column":32,"index":5467},"code":"    it('inline transition object', done => {\n      const enter = jasmine.createSpy('enter');\n      const leave = jasmine.createSpy('leave');\n      const vm = new Vue({\n        render(h) {\n          return h('div', null, [h('transition', {\n            props: {\n              name: 'inline',\n              enterClass: 'hello',\n              enterToClass: 'hello-to',\n              enterActiveClass: 'hello-active',\n              leaveClass: 'bye',\n              leaveToClass: 'bye-to',\n              leaveActiveClass: 'byebye active'\n            },\n            on: {\n              enter,\n              leave\n            }\n          }, this.ok ? [h('div', {\n            class: 'test'\n          }, 'foo')] : undefined)]);\n        },\n\n        data: {\n          ok: true\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test bye byebye active');\n        expect(leave).toHaveBeenCalled();\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test byebye active bye-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children.length).toBe(0);\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.children[0].className).toBe('test hello hello-active');\n        expect(enter).toHaveBeenCalled();\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test hello-active hello-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"transition events","suites":["Transition basic"],"line":186,"updatePoint":{"line":186,"column":25,"index":7210},"code":"    it('transition events', done => {\n      const onLeaveSpy = jasmine.createSpy('leave');\n      const onEnterSpy = jasmine.createSpy('enter');\n      const beforeLeaveSpy = jasmine.createSpy('beforeLeave');\n      const beforeEnterSpy = jasmine.createSpy('beforeEnter');\n      const afterLeaveSpy = jasmine.createSpy('afterLeave');\n      const afterEnterSpy = jasmine.createSpy('afterEnter');\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition\n              name=\"test\"\n              @before-enter=\"beforeEnter\"\n              @enter=\"enter\"\n              @after-enter=\"afterEnter\"\n              @before-leave=\"beforeLeave\"\n              @leave=\"leave\"\n              @after-leave=\"afterLeave\">\n              <div v-if=\"ok\" class=\"test\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true\n        },\n        methods: {\n          beforeLeave: el => {\n            expect(el).toBe(vm.$el.children[0]);\n            expect(el.className).toBe('test');\n            beforeLeaveSpy(el);\n          },\n          leave: el => onLeaveSpy(el),\n          afterLeave: el => afterLeaveSpy(el),\n          beforeEnter: el => {\n            expect(vm.$el.contains(el)).toBe(false);\n            expect(el.className).toBe('test');\n            beforeEnterSpy(el);\n          },\n          enter: el => {\n            expect(vm.$el.contains(el)).toBe(true);\n            onEnterSpy(el);\n          },\n          afterEnter: el => afterEnterSpy(el)\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      let _el = vm.$el.children[0];\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(beforeLeaveSpy).toHaveBeenCalledWith(_el);\n        expect(onLeaveSpy).toHaveBeenCalledWith(_el);\n        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(afterLeaveSpy).not.toHaveBeenCalled();\n        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(afterLeaveSpy).toHaveBeenCalledWith(_el);\n        expect(vm.$el.children.length).toBe(0);\n        vm.ok = true;\n      }).then(() => {\n        _el = vm.$el.children[0];\n        expect(beforeEnterSpy).toHaveBeenCalledWith(_el);\n        expect(onEnterSpy).toHaveBeenCalledWith(_el);\n        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(afterEnterSpy).not.toHaveBeenCalled();\n        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(afterEnterSpy).toHaveBeenCalledWith(_el);\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"transition events (v-show)","suites":["Transition basic"],"line":259,"updatePoint":{"line":259,"column":34,"index":10175},"code":"    it('transition events (v-show)', done => {\n      const onLeaveSpy = jasmine.createSpy('leave');\n      const onEnterSpy = jasmine.createSpy('enter');\n      const beforeLeaveSpy = jasmine.createSpy('beforeLeave');\n      const beforeEnterSpy = jasmine.createSpy('beforeEnter');\n      const afterLeaveSpy = jasmine.createSpy('afterLeave');\n      const afterEnterSpy = jasmine.createSpy('afterEnter');\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition\n              name=\"test\"\n              @before-enter=\"beforeEnter\"\n              @enter=\"enter\"\n              @after-enter=\"afterEnter\"\n              @before-leave=\"beforeLeave\"\n              @leave=\"leave\"\n              @after-leave=\"afterLeave\">\n              <div v-show=\"ok\" class=\"test\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true\n        },\n        methods: {\n          beforeLeave: el => {\n            expect(el.style.display).toBe('');\n            expect(el).toBe(vm.$el.children[0]);\n            expect(el.className).toBe('test');\n            beforeLeaveSpy(el);\n          },\n          leave: el => {\n            expect(el.style.display).toBe('');\n            onLeaveSpy(el);\n          },\n          afterLeave: el => {\n            expect(el.style.display).toBe('none');\n            afterLeaveSpy(el);\n          },\n          beforeEnter: el => {\n            expect(el.className).toBe('test');\n            expect(el.style.display).toBe('none');\n            beforeEnterSpy(el);\n          },\n          enter: el => {\n            expect(el.style.display).toBe('');\n            onEnterSpy(el);\n          },\n          afterEnter: el => {\n            expect(el.style.display).toBe('');\n            afterEnterSpy(el);\n          }\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      let _el = vm.$el.children[0];\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(beforeLeaveSpy).toHaveBeenCalledWith(_el);\n        expect(onLeaveSpy).toHaveBeenCalledWith(_el);\n        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(afterLeaveSpy).not.toHaveBeenCalled();\n        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(afterLeaveSpy).toHaveBeenCalledWith(_el);\n        expect(vm.$el.children[0].style.display).toBe('none');\n        vm.ok = true;\n      }).then(() => {\n        _el = vm.$el.children[0];\n        expect(beforeEnterSpy).toHaveBeenCalledWith(_el);\n        expect(onEnterSpy).toHaveBeenCalledWith(_el);\n        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(afterEnterSpy).not.toHaveBeenCalled();\n        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(afterEnterSpy).toHaveBeenCalledWith(_el);\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"explicit user callback in JavaScript hooks","suites":["Transition basic"],"line":342,"updatePoint":{"line":342,"column":50,"index":13439},"code":"    it('explicit user callback in JavaScript hooks', done => {\n      let next;\n      const vm = new Vue({\n        template: `<div>\n          <transition name=\"test\" @enter=\"enter\" @leave=\"leave\">\n            <div v-if=\"ok\" class=\"test\">foo</div>\n          </transition>\n        </div>`,\n        data: {\n          ok: true\n        },\n        methods: {\n          enter: (el, cb) => {\n            next = cb;\n          },\n          leave: (el, cb) => {\n            next = cb;\n          }\n        }\n      }).$mount(el);\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');\n        expect(next).toBeTruthy();\n        next();\n        expect(vm.$el.children.length).toBe(0);\n      }).then(() => {\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');\n        expect(next).toBeTruthy();\n        next();\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"css: false","suites":["Transition basic"],"line":385,"updatePoint":{"line":385,"column":18,"index":15012},"code":"    it('css: false', done => {\n      const enterSpy = jasmine.createSpy('enter');\n      const leaveSpy = jasmine.createSpy('leave');\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition :css=\"false\" name=\"test\" @enter=\"enter\" @leave=\"leave\">\n              <div v-if=\"ok\" class=\"test\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true\n        },\n        methods: {\n          enter: enterSpy,\n          leave: leaveSpy\n        }\n      }).$mount(el);\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(leaveSpy).toHaveBeenCalled();\n        expect(vm.$el.innerHTML).toBe('<!---->');\n        vm.ok = true;\n      }).then(() => {\n        expect(enterSpy).toHaveBeenCalled();\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"no transition detected","suites":["Transition basic"],"line":414,"updatePoint":{"line":414,"column":30,"index":15887},"code":"    it('no transition detected', done => {\n      const enterSpy = jasmine.createSpy('enter');\n      const leaveSpy = jasmine.createSpy('leave');\n      const vm = new Vue({\n        template: '<div><transition name=\"nope\" @enter=\"enter\" @leave=\"leave\"><div v-if=\"ok\">foo</div></transition></div>',\n        data: {\n          ok: true\n        },\n        methods: {\n          enter: enterSpy,\n          leave: leaveSpy\n        }\n      }).$mount(el);\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(leaveSpy).toHaveBeenCalled();\n        expect(vm.$el.innerHTML).toBe('<div class=\"nope-leave nope-leave-active\">foo</div><!---->');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<!---->');\n        vm.ok = true;\n      }).then(() => {\n        expect(enterSpy).toHaveBeenCalled();\n        expect(vm.$el.innerHTML).toBe('<div class=\"nope-enter nope-enter-active\">foo</div>');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div>foo</div>');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"enterCancelled","suites":["Transition basic"],"line":441,"updatePoint":{"line":441,"column":22,"index":16928},"code":"    it('enterCancelled', done => {\n      const spy = jasmine.createSpy('enterCancelled');\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition name=\"test\" @enter-cancelled=\"enterCancelled\">\n              <div v-if=\"ok\" class=\"test\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: false\n        },\n        methods: {\n          enterCancelled: spy\n        }\n      }).$mount(el);\n      expect(vm.$el.innerHTML).toBe('<!---->');\n      vm.ok = true;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');\n      }).thenWaitFor(duration / 2).then(() => {\n        vm.ok = false;\n      }).then(() => {\n        expect(spy).toHaveBeenCalled();\n        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children.length).toBe(0);\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"should remove stale leaving elements","suites":["Transition basic"],"line":475,"updatePoint":{"line":475,"column":44,"index":18214},"code":"    it('should remove stale leaving elements', done => {\n      const spy = jasmine.createSpy('afterLeave');\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition name=\"test\" @after-leave=\"afterLeave\">\n              <div v-if=\"ok\" class=\"test\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true\n        },\n        methods: {\n          afterLeave: spy\n        }\n      }).$mount(el);\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');\n      }).thenWaitFor(duration / 2).then(() => {\n        vm.ok = true;\n      }).then(() => {\n        expect(spy).toHaveBeenCalled();\n        expect(vm.$el.children.length).toBe(1); // should have removed leaving element\n\n        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"transition with v-show","suites":["Transition basic"],"line":509,"updatePoint":{"line":509,"column":30,"index":19463},"code":"    it('transition with v-show', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition name=\"test\">\n              <div v-show=\"ok\" class=\"test\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.textContent).toBe('foo');\n      expect(vm.$el.children[0].style.display).toBe('');\n      expect(vm.$el.children[0].className).toBe('test');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].style.display).toBe('none');\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.children[0].style.display).toBe('');\n        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"transition with v-show, inside child component","suites":["Transition basic"],"line":543,"updatePoint":{"line":543,"column":54,"index":20882},"code":"    it('transition with v-show, inside child component', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <test v-show=\"ok\"></test>\n          </div>\n        `,\n        data: {\n          ok: true\n        },\n        components: {\n          test: {\n            template: `<transition name=\"test\"><div class=\"test\">foo</div></transition>`\n          }\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.textContent).toBe('foo');\n      expect(vm.$el.children[0].style.display).toBe('');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].style.display).toBe('none');\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.children[0].style.display).toBe('');\n        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"leaveCancelled (v-show only)","suites":["Transition basic"],"line":579,"updatePoint":{"line":579,"column":36,"index":22299},"code":"    it('leaveCancelled (v-show only)', done => {\n      const spy = jasmine.createSpy('leaveCancelled');\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition name=\"test\" @leave-cancelled=\"leaveCancelled\">\n              <div v-show=\"ok\" class=\"test\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true\n        },\n        methods: {\n          leaveCancelled: spy\n        }\n      }).$mount(el);\n      expect(vm.$el.children[0].style.display).toBe('');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');\n      }).thenWaitFor(10).then(() => {\n        vm.ok = true;\n      }).then(() => {\n        expect(spy).toHaveBeenCalled();\n        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].style.display).toBe('');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"animations","suites":["Transition basic"],"line":613,"updatePoint":{"line":613,"column":18,"index":23570},"code":"    it('animations', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition name=\"test-anim\">\n              <div v-if=\"ok\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div>foo</div>');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test-anim-leave test-anim-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test-anim-leave-active test-anim-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children.length).toBe(0);\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.children[0].className).toBe('test-anim-enter test-anim-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test-anim-enter-active test-anim-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"explicit transition type","suites":["Transition basic"],"line":644,"updatePoint":{"line":644,"column":32,"index":24794},"code":"    it('explicit transition type', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition name=\"test-anim-long\" type=\"animation\">\n              <div v-if=\"ok\" class=\"test\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test test-anim-long-leave test-anim-long-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-anim-long-leave-active test-anim-long-leave-to');\n      }).thenWaitFor(duration + 5).then(() => {\n        // should not end early due to transition presence\n        expect(vm.$el.children[0].className).toBe('test test-anim-long-leave-active test-anim-long-leave-to');\n      }).thenWaitFor(duration + 5).then(() => {\n        expect(vm.$el.children.length).toBe(0);\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-anim-long-enter test-anim-long-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-anim-long-enter-active test-anim-long-enter-to');\n      }).thenWaitFor(duration + 5).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-anim-long-enter-active test-anim-long-enter-to');\n      }).thenWaitFor(duration + 5).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"transition on appear","suites":["Transition basic"],"line":680,"updatePoint":{"line":680,"column":28,"index":26493},"code":"    it('transition on appear', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition name=\"test\"\n              appear\n              appear-class=\"test-appear\"\n              appear-to-class=\"test-appear-to\"\n              appear-active-class=\"test-appear-active\">\n              <div v-if=\"ok\" class=\"test\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true\n        }\n      }).$mount(el);\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test test-appear test-appear-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-appear-active test-appear-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"transition on appear with v-show","suites":["Transition basic"],"line":705,"updatePoint":{"line":705,"column":40,"index":27379},"code":"    it('transition on appear with v-show', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition name=\"test\" appear>\n              <div v-show=\"ok\" class=\"test\">foo</div>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true\n        }\n      }).$mount(el);\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"transition on SVG elements","suites":["Transition basic"],"line":726,"updatePoint":{"line":726,"column":34,"index":28100},"code":"    it('transition on SVG elements', done => {\n      const vm = new Vue({\n        template: `\n          <svg>\n            <transition>\n              <circle cx=\"0\" cy=\"0\" r=\"10\" v-if=\"ok\" class=\"test\"></circle>\n            </transition>\n          </svg>\n        `,\n        data: {\n          ok: true\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.childNodes[0].getAttribute('class')).toBe('test');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.childNodes[0].getAttribute('class')).toBe('test v-leave v-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.childNodes[0].getAttribute('class')).toBe('test v-leave-active v-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.childNodes.length).toBe(1);\n        expect(vm.$el.childNodes[0].nodeType).toBe(8); // should be an empty comment node\n\n        expect(vm.$el.childNodes[0].textContent).toBe('');\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.childNodes[0].getAttribute('class')).toBe('test v-enter v-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.childNodes[0].getAttribute('class')).toBe('test v-enter-active v-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.childNodes[0].getAttribute('class')).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"transition on child components","suites":["Transition basic"],"line":760,"updatePoint":{"line":760,"column":38,"index":29548},"code":"    it('transition on child components', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <transition>\n              <test v-if=\"ok\" class=\"test\"></test>\n            </transition>\n          </div>\n        `,\n        data: {\n          ok: true\n        },\n        components: {\n          test: {\n            template: `\n              <transition name=\"test\">\n                <div>foo</div>\n              </transition>\n            ` // test transition override from parent\n\n          }\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children.length).toBe(0);\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"transition inside child component","suites":["Transition basic"],"line":801,"updatePoint":{"line":801,"column":41,"index":30989},"code":"    it('transition inside child component', done => {\n      const vm = new Vue({\n        template: `\n          <div>\n            <test v-if=\"ok\" class=\"test\"></test>\n          </div>\n        `,\n        data: {\n          ok: true\n        },\n        components: {\n          test: {\n            template: `\n              <transition>\n                <div>foo</div>\n              </transition>\n            `\n          }\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children.length).toBe(0);\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"custom transition higher-order component","suites":["Transition basic"],"line":839,"updatePoint":{"line":839,"column":48,"index":32331},"code":"    it('custom transition higher-order component', done => {\n      const vm = new Vue({\n        template: '<div><my-transition><div v-if=\"ok\" class=\"test\">foo</div></my-transition></div>',\n        data: {\n          ok: true\n        },\n        components: {\n          'my-transition': {\n            functional: true,\n\n            render(h, {\n              data,\n              children\n            }) {\n              (data.props || (data.props = {})).name = 'test';\n              return h('transition', data, children);\n            }\n\n          }\n        }\n      }).$mount(el); // should not apply transition on initial render by default\n\n      expect(vm.$el.innerHTML).toBe('<div class=\"test\">foo</div>');\n      vm.ok = false;\n      waitForUpdate(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave test-leave-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-leave-active test-leave-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children.length).toBe(0);\n        vm.ok = true;\n      }).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter test-enter-active');\n      }).thenWaitFor(nextFrame).then(() => {\n        expect(vm.$el.children[0].className).toBe('test test-enter-active test-enter-to');\n      }).thenWaitFor(duration + buffer).then(() => {\n        expect(vm.$el.children[0].className).toBe('test');\n      }).then(done);\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"warn when used on multiple elements","suites":["Transition basic"],"line":878,"updatePoint":{"line":878,"column":43,"index":33814},"code":"    it('warn when used on multiple elements', () => {\n      new Vue({\n        template: `<transition><p>1</p><p>2</p></transition>`\n      }).$mount();\n      expect(`<transition> can only be used on a single element`).toHaveBeenWarned();\n    });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"single value","suites":["Transition basic","explicit durations -"],"line":885,"updatePoint":{"line":885,"column":22,"index":34083},"code":"      it('single value', done => {\n        const vm = new Vue({\n          template: `\n            <div>\n              <transition duration=\"${explicitDuration}\">\n                <div v-if=\"ok\" class=\"test\">foo</div>\n              </transition>\n            </div>\n          `,\n          data: {\n            ok: true\n          }\n        }).$mount(el);\n        vm.ok = false;\n        waitForUpdate(() => {\n          expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');\n        }).thenWaitFor(explicitDuration + buffer).then(() => {\n          expect(vm.$el.children.length).toBe(0);\n          vm.ok = true;\n        }).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');\n        }).thenWaitFor(explicitDuration + buffer).then(() => {\n          expect(vm.$el.children[0].className).toBe('test');\n        }).then(done);\n      });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"enter and auto leave","suites":["Transition basic","explicit durations -"],"line":914,"updatePoint":{"line":914,"column":30,"index":35248},"code":"      it('enter and auto leave', done => {\n        const vm = new Vue({\n          template: `\n            <div>\n              <transition :duration=\"{ enter: ${explicitDuration} }\">\n                <div v-if=\"ok\" class=\"test\">foo</div>\n              </transition>\n            </div>\n          `,\n          data: {\n            ok: true\n          }\n        }).$mount(el);\n        vm.ok = false;\n        waitForUpdate(() => {\n          expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');\n        }).thenWaitFor(duration + buffer).then(() => {\n          expect(vm.$el.children.length).toBe(0);\n          vm.ok = true;\n        }).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');\n        }).thenWaitFor(explicitDuration + buffer).then(() => {\n          expect(vm.$el.children[0].className).toBe('test');\n        }).then(done);\n      });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"leave and auto enter","suites":["Transition basic","explicit durations -"],"line":943,"updatePoint":{"line":943,"column":30,"index":36417},"code":"      it('leave and auto enter', done => {\n        const vm = new Vue({\n          template: `\n            <div>\n              <transition :duration=\"{ leave: ${explicitDuration} }\">\n                <div v-if=\"ok\" class=\"test\">foo</div>\n              </transition>\n            </div>\n          `,\n          data: {\n            ok: true\n          }\n        }).$mount(el);\n        vm.ok = false;\n        waitForUpdate(() => {\n          expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');\n        }).thenWaitFor(explicitDuration + buffer).then(() => {\n          expect(vm.$el.children.length).toBe(0);\n          vm.ok = true;\n        }).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');\n        }).thenWaitFor(duration + buffer).then(() => {\n          expect(vm.$el.children[0].className).toBe('test');\n        }).then(done);\n      });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"separate enter and leave","suites":["Transition basic","explicit durations -"],"line":972,"updatePoint":{"line":972,"column":34,"index":37590},"code":"      it('separate enter and leave', done => {\n        const enter = explicitDuration;\n        const leave = explicitDuration * 2;\n        const vm = new Vue({\n          template: `\n            <div>\n              <transition :duration=\"{ enter: ${enter}, leave: ${leave} }\">\n                <div v-if=\"ok\" class=\"test\">foo</div>\n              </transition>\n            </div>\n          `,\n          data: {\n            ok: true\n          }\n        }).$mount(el);\n        vm.ok = false;\n        waitForUpdate(() => {\n          expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');\n        }).thenWaitFor(leave + buffer).then(() => {\n          expect(vm.$el.children.length).toBe(0);\n          vm.ok = true;\n        }).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');\n        }).thenWaitFor(enter + buffer).then(() => {\n          expect(vm.$el.children[0].className).toBe('test');\n        }).then(done);\n      });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"enter and leave + duration change","suites":["Transition basic","explicit durations -"],"line":1003,"updatePoint":{"line":1003,"column":43,"index":38848},"code":"      it('enter and leave + duration change', done => {\n        const enter1 = explicitDuration * 2;\n        const enter2 = explicitDuration;\n        const leave1 = explicitDuration * 0.5;\n        const leave2 = explicitDuration * 3;\n        const vm = new Vue({\n          template: `\n            <div>\n              <transition :duration=\"{ enter: enter, leave: leave }\">\n                <div v-if=\"ok\" class=\"test\">foo</div>\n              </transition>\n            </div>\n          `,\n          data: {\n            ok: true,\n            enter: enter1,\n            leave: leave1\n          }\n        }).$mount(el);\n        vm.ok = false;\n        waitForUpdate(() => {\n          expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');\n        }).thenWaitFor(leave1 + buffer).then(() => {\n          expect(vm.$el.children.length).toBe(0);\n          vm.ok = true;\n        }).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');\n        }).thenWaitFor(enter1 + buffer).then(() => {\n          expect(vm.$el.children[0].className).toBe('test');\n          vm.enter = enter2;\n          vm.leave = leave2;\n        }).then(() => {\n          vm.ok = false;\n        }).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-leave v-leave-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-leave-active v-leave-to');\n        }).thenWaitFor(leave2 + buffer).then(() => {\n          expect(vm.$el.children.length).toBe(0);\n          vm.ok = true;\n        }).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-enter v-enter-active');\n        }).thenWaitFor(nextFrame).then(() => {\n          expect(vm.$el.children[0].className).toBe('test v-enter-active v-enter-to');\n        }).thenWaitFor(enter2 + buffer).then(() => {\n          expect(vm.$el.children[0].className).toBe('test');\n        }).then(done);\n      }, 10000);","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"warn invalid durations","suites":["Transition basic","explicit durations -"],"line":1055,"updatePoint":{"line":1055,"column":32,"index":41078},"code":"      it('warn invalid durations', done => {\n        const vm = new Vue({\n          template: `\n            <div>\n              <transition :duration=\"{ enter: NaN, leave: 'foo' }\">\n                <div v-if=\"ok\" class=\"test\">foo</div>\n              </transition>\n            </div>\n          `,\n          data: {\n            ok: true\n          }\n        }).$mount(el);\n        vm.ok = false;\n        waitForUpdate(() => {\n          expect(`<transition> explicit leave duration is not a valid number - got \"foo\"`).toHaveBeenWarned();\n        }).thenWaitFor(duration + buffer).then(() => {\n          vm.ok = true;\n        }).then(() => {\n          expect(`<transition> explicit enter duration is NaN`).toHaveBeenWarned();\n        }).then(done);\n      });","file":"unit/features/transition/transition.spec.js","skipped":false,"dir":"test"},{"name":"generate directive","suites":["codegen"],"line":37,"updatePoint":{"line":37,"column":24,"index":1032},"code":"  it('generate directive', () => {\n    assertCodegen('<p v-custom1:arg1.modifier=\"value1\" v-custom2></p>', `with(this){return _c('p',{directives:[{name:\"custom1\",rawName:\"v-custom1:arg1.modifier\",value:(value1),expression:\"value1\",arg:\"arg1\",modifiers:{\"modifier\":true}},{name:\"custom2\",rawName:\"v-custom2\"}]})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate filters","suites":["codegen"],"line":40,"updatePoint":{"line":40,"column":22,"index":1351},"code":"  it('generate filters', () => {\n    assertCodegen('<div :id=\"a | b | c\">{{ d | e | f }}</div>', `with(this){return _c('div',{attrs:{\"id\":_f(\"c\")(_f(\"b\")(a))}},[_v(_s(_f(\"f\")(_f(\"e\")(d))))])}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate v-for directive","suites":["codegen"],"line":43,"updatePoint":{"line":43,"column":30,"index":1560},"code":"  it('generate v-for directive', () => {\n    assertCodegen('<div><li v-for=\"item in items\" :key=\"item.uid\"></li></div>', `with(this){return _c('div',_l((items),function(item){return _c('li',{key:item.uid})}))}`); // iterator syntax\n\n    assertCodegen('<div><li v-for=\"(item, i) in items\"></li></div>', `with(this){return _c('div',_l((items),function(item,i){return _c('li')}))}`);\n    assertCodegen('<div><li v-for=\"(item, key, index) in items\"></li></div>', `with(this){return _c('div',_l((items),function(item,key,index){return _c('li')}))}`); // destructuring\n\n    assertCodegen('<div><li v-for=\"{ a, b } in items\"></li></div>', `with(this){return _c('div',_l((items),function({ a, b }){return _c('li')}))}`);\n    assertCodegen('<div><li v-for=\"({ a, b }, key, index) in items\"></li></div>', `with(this){return _c('div',_l((items),function({ a, b },key,index){return _c('li')}))}`); // v-for with extra element\n\n    assertCodegen('<div><p></p><li v-for=\"item in items\"></li></div>', `with(this){return _c('div',[_c('p'),_l((items),function(item){return _c('li')})],2)}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate v-if directive","suites":["codegen"],"line":54,"updatePoint":{"line":54,"column":29,"index":2640},"code":"  it('generate v-if directive', () => {\n    assertCodegen('<p v-if=\"show\">hello</p>', `with(this){return (show)?_c('p',[_v(\"hello\")]):_e()}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate v-else directive","suites":["codegen"],"line":57,"updatePoint":{"line":57,"column":31,"index":2791},"code":"  it('generate v-else directive', () => {\n    assertCodegen('<div><p v-if=\"show\">hello</p><p v-else>world</p></div>', `with(this){return _c('div',[(show)?_c('p',[_v(\"hello\")]):_c('p',[_v(\"world\")])])}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate v-else-if directive","suites":["codegen"],"line":60,"updatePoint":{"line":60,"column":34,"index":3004},"code":"  it('generate v-else-if directive', () => {\n    assertCodegen('<div><p v-if=\"show\">hello</p><p v-else-if=\"hide\">world</p></div>', `with(this){return _c('div',[(show)?_c('p',[_v(\"hello\")]):(hide)?_c('p',[_v(\"world\")]):_e()])}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate v-else-if with v-else directive","suites":["codegen"],"line":63,"updatePoint":{"line":63,"column":46,"index":3251},"code":"  it('generate v-else-if with v-else directive', () => {\n    assertCodegen('<div><p v-if=\"show\">hello</p><p v-else-if=\"hide\">world</p><p v-else>bye</p></div>', `with(this){return _c('div',[(show)?_c('p',[_v(\"hello\")]):(hide)?_c('p',[_v(\"world\")]):_c('p',[_v(\"bye\")])])}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate multi v-else-if with v-else directive","suites":["codegen"],"line":66,"updatePoint":{"line":66,"column":52,"index":3536},"code":"  it('generate multi v-else-if with v-else directive', () => {\n    assertCodegen('<div><p v-if=\"show\">hello</p><p v-else-if=\"hide\">world</p><p v-else-if=\"3\">elseif</p><p v-else>bye</p></div>', `with(this){return _c('div',[(show)?_c('p',[_v(\"hello\")]):(hide)?_c('p',[_v(\"world\")]):(3)?_c('p',[_v(\"elseif\")]):_c('p',[_v(\"bye\")])])}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate ref","suites":["codegen"],"line":69,"updatePoint":{"line":69,"column":18,"index":3841},"code":"  it('generate ref', () => {\n    assertCodegen('<p ref=\"component1\"></p>', `with(this){return _c('p',{ref:\"component1\"})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate ref on v-for","suites":["codegen"],"line":72,"updatePoint":{"line":72,"column":27,"index":3981},"code":"  it('generate ref on v-for', () => {\n    assertCodegen('<ul><li v-for=\"item in items\" ref=\"component1\"></li></ul>', `with(this){return _c('ul',_l((items),function(item){return _c('li',{ref:\"component1\",refInFor:true})}))}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate v-bind directive","suites":["codegen"],"line":75,"updatePoint":{"line":75,"column":31,"index":4217},"code":"  it('generate v-bind directive', () => {\n    assertCodegen('<p v-bind=\"test\"></p>', `with(this){return _c('p',_b({},'p',test,false))}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate v-bind with prop directive","suites":["codegen"],"line":78,"updatePoint":{"line":78,"column":41,"index":4371},"code":"  it('generate v-bind with prop directive', () => {\n    assertCodegen('<p v-bind.prop=\"test\"></p>', `with(this){return _c('p',_b({},'p',test,true))}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate v-bind directive with sync modifier","suites":["codegen"],"line":81,"updatePoint":{"line":81,"column":50,"index":4538},"code":"  it('generate v-bind directive with sync modifier', () => {\n    assertCodegen('<p v-bind.sync=\"test\"></p>', `with(this){return _c('p',_b({},'p',test,false,true))}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate template tag","suites":["codegen"],"line":84,"updatePoint":{"line":84,"column":27,"index":4688},"code":"  it('generate template tag', () => {\n    assertCodegen('<div><template><p>{{hello}}</p></template></div>', `with(this){return _c('div',[[_c('p',[_v(_s(hello))])]],2)}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate single slot","suites":["codegen"],"line":87,"updatePoint":{"line":87,"column":26,"index":4864},"code":"  it('generate single slot', () => {\n    assertCodegen('<div><slot></slot></div>', `with(this){return _c('div',[_t(\"default\")],2)}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate named slot","suites":["codegen"],"line":90,"updatePoint":{"line":90,"column":25,"index":5003},"code":"  it('generate named slot', () => {\n    assertCodegen('<div><slot name=\"one\"></slot></div>', `with(this){return _c('div',[_t(\"one\")],2)}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate slot fallback content","suites":["codegen"],"line":93,"updatePoint":{"line":93,"column":36,"index":5160},"code":"  it('generate slot fallback content', () => {\n    assertCodegen('<div><slot><div>hi</div></slot></div>', `with(this){return _c('div',[_t(\"default\",[_c('div',[_v(\"hi\")])])],2)}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate slot target","suites":["codegen"],"line":96,"updatePoint":{"line":96,"column":26,"index":5336},"code":"  it('generate slot target', () => {\n    assertCodegen('<p slot=\"one\">hello world</p>', `with(this){return _c('p',{slot:\"one\"},[_v(\"hello world\")])}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate class binding","suites":["codegen"],"line":99,"updatePoint":{"line":99,"column":28,"index":5496},"code":"  it('generate class binding', () => {\n    // static\n    assertCodegen('<p class=\"class1\">hello world</p>', `with(this){return _c('p',{staticClass:\"class1\"},[_v(\"hello world\")])}`); // dynamic\n\n    assertCodegen('<p :class=\"class1\">hello world</p>', `with(this){return _c('p',{class:class1},[_v(\"hello world\")])}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate style binding","suites":["codegen"],"line":105,"updatePoint":{"line":105,"column":28,"index":5818},"code":"  it('generate style binding', () => {\n    assertCodegen('<p :style=\"error\">hello world</p>', `with(this){return _c('p',{style:(error)},[_v(\"hello world\")])}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate v-show directive","suites":["codegen"],"line":108,"updatePoint":{"line":108,"column":31,"index":5988},"code":"  it('generate v-show directive', () => {\n    assertCodegen('<p v-show=\"shown\">hello world</p>', `with(this){return _c('p',{directives:[{name:\"show\",rawName:\"v-show\",value:(shown),expression:\"shown\"}]},[_v(\"hello world\")])}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate DOM props with v-bind directive","suites":["codegen"],"line":111,"updatePoint":{"line":111,"column":46,"index":6236},"code":"  it('generate DOM props with v-bind directive', () => {\n    // input + value\n    assertCodegen('<input :value=\"msg\">', `with(this){return _c('input',{domProps:{\"value\":msg}})}`); // non input\n\n    assertCodegen('<p :value=\"msg\"/>', `with(this){return _c('p',{attrs:{\"value\":msg}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate attrs with v-bind directive","suites":["codegen"],"line":117,"updatePoint":{"line":117,"column":42,"index":6524},"code":"  it('generate attrs with v-bind directive', () => {\n    assertCodegen('<input :name=\"field1\">', `with(this){return _c('input',{attrs:{\"name\":field1}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate static attrs","suites":["codegen"],"line":120,"updatePoint":{"line":120,"column":27,"index":6671},"code":"  it('generate static attrs', () => {\n    assertCodegen('<input name=\"field1\">', `with(this){return _c('input',{attrs:{\"name\":\"field1\"}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate events with v-on directive","suites":["codegen"],"line":123,"updatePoint":{"line":123,"column":41,"index":6833},"code":"  it('generate events with v-on directive', () => {\n    assertCodegen('<input @input=\"onInput\">', `with(this){return _c('input',{on:{\"input\":onInput}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate events with keycode","suites":["codegen"],"line":126,"updatePoint":{"line":126,"column":34,"index":6988},"code":"  it('generate events with keycode', () => {\n    assertCodegen('<input @input.enter=\"onInput\">', `with(this){return _c('input',{on:{\"input\":function($event){if(!('button' in $event)&&_k($event.keyCode,\"enter\",13))return null;onInput($event)}}})}`); // multiple keycodes (delete)\n\n    assertCodegen('<input @input.delete=\"onInput\">', `with(this){return _c('input',{on:{\"input\":function($event){if(!('button' in $event)&&_k($event.keyCode,\"delete\",[8,46]))return null;onInput($event)}}})}`); // multiple keycodes (chained)\n\n    assertCodegen('<input @keydown.enter.delete=\"onInput\">', `with(this){return _c('input',{on:{\"keydown\":function($event){if(!('button' in $event)&&_k($event.keyCode,\"enter\",13)&&_k($event.keyCode,\"delete\",[8,46]))return null;onInput($event)}}})}`); // number keycode\n\n    assertCodegen('<input @input.13=\"onInput\">', `with(this){return _c('input',{on:{\"input\":function($event){if(!('button' in $event)&&$event.keyCode!==13)return null;onInput($event)}}})}`); // custom keycode\n\n    assertCodegen('<input @input.custom=\"onInput\">', `with(this){return _c('input',{on:{\"input\":function($event){if(!('button' in $event)&&_k($event.keyCode,\"custom\"))return null;onInput($event)}}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate events with generic modifiers","suites":["codegen"],"line":137,"updatePoint":{"line":137,"column":44,"index":8209},"code":"  it('generate events with generic modifiers', () => {\n    assertCodegen('<input @input.stop=\"onInput\">', `with(this){return _c('input',{on:{\"input\":function($event){$event.stopPropagation();onInput($event)}}})}`);\n    assertCodegen('<input @input.prevent=\"onInput\">', `with(this){return _c('input',{on:{\"input\":function($event){$event.preventDefault();onInput($event)}}})}`);\n    assertCodegen('<input @input.self=\"onInput\">', `with(this){return _c('input',{on:{\"input\":function($event){if($event.target !== $event.currentTarget)return null;onInput($event)}}})}`);\n  }); // Github Issues #5146","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate events with generic modifiers and keycode correct order","suites":["codegen"],"line":143,"updatePoint":{"line":143,"column":70,"index":8831},"code":"  it('generate events with generic modifiers and keycode correct order', () => {\n    assertCodegen('<input @keydown.enter.prevent=\"onInput\">', `with(this){return _c('input',{on:{\"keydown\":function($event){if(!('button' in $event)&&_k($event.keyCode,\"enter\",13))return null;$event.preventDefault();onInput($event)}}})}`);\n    assertCodegen('<input @keydown.enter.stop=\"onInput\">', `with(this){return _c('input',{on:{\"keydown\":function($event){if(!('button' in $event)&&_k($event.keyCode,\"enter\",13))return null;$event.stopPropagation();onInput($event)}}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate events with mouse event modifiers","suites":["codegen"],"line":147,"updatePoint":{"line":147,"column":48,"index":9374},"code":"  it('generate events with mouse event modifiers', () => {\n    assertCodegen('<input @click.ctrl=\"onClick\">', `with(this){return _c('input',{on:{\"click\":function($event){if(!$event.ctrlKey)return null;onClick($event)}}})}`);\n    assertCodegen('<input @click.shift=\"onClick\">', `with(this){return _c('input',{on:{\"click\":function($event){if(!$event.shiftKey)return null;onClick($event)}}})}`);\n    assertCodegen('<input @click.alt=\"onClick\">', `with(this){return _c('input',{on:{\"click\":function($event){if(!$event.altKey)return null;onClick($event)}}})}`);\n    assertCodegen('<input @click.meta=\"onClick\">', `with(this){return _c('input',{on:{\"click\":function($event){if(!$event.metaKey)return null;onClick($event)}}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate events with multiple modifiers","suites":["codegen"],"line":153,"updatePoint":{"line":153,"column":45,"index":10100},"code":"  it('generate events with multiple modifiers', () => {\n    assertCodegen('<input @input.stop.prevent.self=\"onInput\">', `with(this){return _c('input',{on:{\"input\":function($event){$event.stopPropagation();$event.preventDefault();if($event.target !== $event.currentTarget)return null;onInput($event)}}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate events with capture modifier","suites":["codegen"],"line":156,"updatePoint":{"line":156,"column":43,"index":10411},"code":"  it('generate events with capture modifier', () => {\n    assertCodegen('<input @input.capture=\"onInput\">', `with(this){return _c('input',{on:{\"!input\":function($event){onInput($event)}}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate events with once modifier","suites":["codegen"],"line":159,"updatePoint":{"line":159,"column":40,"index":10607},"code":"  it('generate events with once modifier', () => {\n    assertCodegen('<input @input.once=\"onInput\">', `with(this){return _c('input',{on:{\"~input\":function($event){onInput($event)}}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate events with capture and once modifier","suites":["codegen"],"line":162,"updatePoint":{"line":162,"column":52,"index":10812},"code":"  it('generate events with capture and once modifier', () => {\n    assertCodegen('<input @input.capture.once=\"onInput\">', `with(this){return _c('input',{on:{\"~!input\":function($event){onInput($event)}}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate events with once and capture modifier","suites":["codegen"],"line":165,"updatePoint":{"line":165,"column":52,"index":11026},"code":"  it('generate events with once and capture modifier', () => {\n    assertCodegen('<input @input.once.capture=\"onInput\">', `with(this){return _c('input',{on:{\"~!input\":function($event){onInput($event)}}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate events with inline statement","suites":["codegen"],"line":168,"updatePoint":{"line":168,"column":43,"index":11231},"code":"  it('generate events with inline statement', () => {\n    assertCodegen('<input @input=\"current++\">', `with(this){return _c('input',{on:{\"input\":function($event){current++}}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate events with inline function expression","suites":["codegen"],"line":171,"updatePoint":{"line":171,"column":53,"index":11427},"code":"  it('generate events with inline function expression', () => {\n    // normal function\n    assertCodegen('<input @input=\"function () { current++ }\">', `with(this){return _c('input',{on:{\"input\":function () { current++ }}})}`); // arrow with no args\n\n    assertCodegen('<input @input=\"()=>current++\">', `with(this){return _c('input',{on:{\"input\":()=>current++}})}`); // arrow with parens, single arg\n\n    assertCodegen('<input @input=\"(e) => current++\">', `with(this){return _c('input',{on:{\"input\":(e) => current++}})}`); // arrow with parens, multi args\n\n    assertCodegen('<input @input=\"(a, b, c) => current++\">', `with(this){return _c('input',{on:{\"input\":(a, b, c) => current++}})}`); // arrow with destructuring\n\n    assertCodegen('<input @input=\"({ a, b }) => current++\">', `with(this){return _c('input',{on:{\"input\":({ a, b }) => current++}})}`); // arrow single arg no parens\n\n    assertCodegen('<input @input=\"e=>current++\">', `with(this){return _c('input',{on:{\"input\":e=>current++}})}`); // with modifiers\n\n    assertCodegen(`<input @keyup.enter=\"e=>current++\">`, `with(this){return _c('input',{on:{\"keyup\":function($event){if(!('button' in $event)&&_k($event.keyCode,\"enter\",13))return null;(e=>current++)($event)}}})}`);\n  }); // #3893","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"should not treat handler with unexpected whitespace as inline statement","suites":["codegen"],"line":188,"updatePoint":{"line":188,"column":77,"index":12702},"code":"  it('should not treat handler with unexpected whitespace as inline statement', () => {\n    assertCodegen('<input @input=\" onInput \">', `with(this){return _c('input',{on:{\"input\": onInput }})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate unhandled events","suites":["codegen"],"line":191,"updatePoint":{"line":191,"column":31,"index":12858},"code":"  it('generate unhandled events', () => {\n    assertCodegen('<input @input=\"current++\">', `with(this){return _c('input',{on:{\"input\":function(){}}})}`, ast => {\n      ast.events.input = undefined;\n    });\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate multiple event handlers","suites":["codegen"],"line":196,"updatePoint":{"line":196,"column":38,"index":13076},"code":"  it('generate multiple event handlers', () => {\n    assertCodegen('<input @input=\"current++\" @input.stop=\"onInput\">', `with(this){return _c('input',{on:{\"input\":[function($event){current++},function($event){$event.stopPropagation();onInput($event)}]}})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate component","suites":["codegen"],"line":199,"updatePoint":{"line":199,"column":24,"index":13326},"code":"  it('generate component', () => {\n    assertCodegen('<my-component name=\"mycomponent1\" :msg=\"msg\" @notify=\"onNotify\"><div>hi</div></my-component>', `with(this){return _c('my-component',{attrs:{\"name\":\"mycomponent1\",\"msg\":msg},on:{\"notify\":onNotify}},[_c('div',[_v(\"hi\")])])}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate svg component with children","suites":["codegen"],"line":202,"updatePoint":{"line":202,"column":42,"index":13629},"code":"  it('generate svg component with children', () => {\n    assertCodegen('<svg><my-comp><circle :r=\"10\"></circle></my-comp></svg>', `with(this){return _c('svg',[_c('my-comp',[_c('circle',{attrs:{\"r\":10}})])],1)}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate is attribute","suites":["codegen"],"line":205,"updatePoint":{"line":205,"column":27,"index":13833},"code":"  it('generate is attribute', () => {\n    assertCodegen('<div is=\"component1\"></div>', `with(this){return _c(\"component1\",{tag:\"div\"})}`);\n    assertCodegen('<div :is=\"component1\"></div>', `with(this){return _c(component1,{tag:\"div\"})}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate component with inline-template","suites":["codegen"],"line":209,"updatePoint":{"line":209,"column":45,"index":14096},"code":"  it('generate component with inline-template', () => {\n    // have \"inline-template'\"\n    assertCodegen('<my-component inline-template><p><span>hello world</span></p></my-component>', `with(this){return _c('my-component',{inlineTemplate:{render:function(){with(this){return _m(0)}},staticRenderFns:[function(){with(this){return _c('p',[_c('span',[_v(\"hello world\")])])}}]}})}`); // \"have inline-template attrs, but not having exactly one child element\n\n    assertCodegen('<my-component inline-template><hr><hr></my-component>', `with(this){return _c('my-component',{inlineTemplate:{render:function(){with(this){return _c('hr')}},staticRenderFns:[]}})}`);\n    expect('Inline-template components must have exactly one child element.').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate static trees inside v-for","suites":["codegen"],"line":216,"updatePoint":{"line":216,"column":40,"index":14851},"code":"  it('generate static trees inside v-for', () => {\n    assertCodegen(`<div><div v-for=\"i in 10\"><p><span></span></p></div></div>`, `with(this){return _c('div',_l((10),function(i){return _c('div',[_m(0,true)])}))}`, [`with(this){return _c('p',[_c('span')])}`]);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate component with v-for","suites":["codegen"],"line":219,"updatePoint":{"line":219,"column":35,"index":15113},"code":"  it('generate component with v-for', () => {\n    // normalize type: 2\n    assertCodegen('<div><child></child><template v-for=\"item in list\">{{ item }}</template></div>', `with(this){return _c('div',[_c('child'),_l((list),function(item){return [_v(_s(item))]})],2)}`);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"generate component with comment","suites":["codegen"],"line":223,"updatePoint":{"line":223,"column":37,"index":15390},"code":"  it('generate component with comment', () => {\n    const options = extend({\n      comments: true\n    }, baseOptions);\n    const template = '<div><!--comment--></div>';\n    const generatedCode = `with(this){return _c('div',[_e('comment')])}`;\n    const ast = parse(template, options);\n    optimize(ast, options);\n    const res = generate(ast, options);\n    expect(res.render).toBe(generatedCode);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"not specified ast type","suites":["codegen"],"line":234,"updatePoint":{"line":234,"column":28,"index":15784},"code":"  it('not specified ast type', () => {\n    const res = generate(null, baseOptions);\n    expect(res.render).toBe(`with(this){return _c(\"div\")}`);\n    expect(res.staticRenderFns).toEqual([]);\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"not specified directives option","suites":["codegen"],"line":239,"updatePoint":{"line":239,"column":37,"index":15989},"code":"  it('not specified directives option', () => {\n    assertCodegen('<p v-if=\"show\">hello world</p>', `with(this){return (show)?_c('p',[_v(\"hello world\")]):_e()}`, {\n      isReservedTag\n    });\n  });","file":"unit/modules/compiler/codegen.spec.js","skipped":false,"dir":"test"},{"name":"should be compiled","suites":["compile options"],"line":5,"updatePoint":{"line":5,"column":24,"index":177},"code":"  it('should be compiled', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`\n      <div>\n        <input type=\"text\" v-model=\"msg\" required max=\"8\" v-validate:field1.group1.group2>\n      </div>\n    `, {\n      directives: {\n        validate(el, dir) {\n          if (dir.name === 'validate' && dir.arg) {\n            el.validate = {\n              field: dir.arg,\n              groups: dir.modifiers ? Object.keys(dir.modifiers) : []\n            };\n          }\n        }\n\n      },\n      modules: [{\n        transformNode(el) {\n          el.validators = el.validators || [];\n          const validators = ['required', 'min', 'max', 'pattern', 'maxlength', 'minlength'];\n          validators.forEach(name => {\n            const rule = getAndRemoveAttr(el, name);\n\n            if (rule !== undefined) {\n              el.validators.push({\n                name,\n                rule\n              });\n            }\n          });\n        },\n\n        genData(el) {\n          let data = '';\n\n          if (el.validate) {\n            data += `validate:${JSON.stringify(el.validate)},`;\n          }\n\n          if (el.validators) {\n            data += `validators:${JSON.stringify(el.validators)},`;\n          }\n\n          return data;\n        },\n\n        transformCode(el, code) {\n          // check\n          if (!el.validate || !el.validators) {\n            return code;\n          } // setup validation result props\n\n\n          const result = {\n            dirty: false\n          }; // define something other prop\n\n          el.validators.forEach(validator => {\n            result[validator.name] = null;\n          }); // generate code\n\n          return `_c('validate',{props:{\n            field:${JSON.stringify(el.validate.field)},\n            groups:${JSON.stringify(el.validate.groups)},\n            validators:${JSON.stringify(el.validators)},\n            result:${JSON.stringify(result)},\n            child:${code}}\n          })`;\n        }\n\n      }]\n    });\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).toEqual([]);\n    expect(errors).toEqual([]);\n    const renderFn = new Function(render);\n    const vm = new Vue({\n      data: {\n        msg: 'hello'\n      },\n      components: {\n        validate: {\n          props: ['field', 'groups', 'validators', 'result', 'child'],\n\n          render(h) {\n            return this.child;\n          },\n\n          computed: {\n            valid() {\n              let ret = true;\n\n              for (let i = 0; i > this.validators.length; i++) {\n                const {\n                  name\n                } = this.validators[i];\n\n                if (!this.result[name]) {\n                  ret = false;\n                  break;\n                }\n              }\n\n              return ret;\n            }\n\n          },\n\n          mounted() {\n            // initialize validation\n            const value = this.$el.value;\n            this.validators.forEach(validator => {\n              const ret = this[validator.name](value, validator.rule);\n              this.result[validator.name] = ret;\n            });\n          },\n\n          methods: {\n            // something validators logic\n            required(val) {\n              return val.length > 0;\n            },\n\n            max(val, rule) {\n              return !(parseInt(val, 10) > parseInt(rule, 10));\n            }\n\n          }\n        }\n      },\n      render: renderFn,\n      staticRenderFns\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<input type=\"text\">');\n    expect(vm.$children[0].valid).toBe(true);\n  });","file":"unit/modules/compiler/compiler-options.spec.js","skipped":false,"dir":"test"},{"name":"should collect errors","suites":["compile options"],"line":146,"updatePoint":{"line":146,"column":27,"index":3748},"code":"  it('should collect errors', () => {\n    let compiled = compile('hello');\n    expect(compiled.errors.length).toBe(1);\n    expect(compiled.errors[0]).toContain('root element');\n    compiled = compile('<div v-if=\"a----\">{{ b++++ }}</div>');\n    expect(compiled.errors.length).toBe(2);\n    expect(compiled.errors[0]).toContain('invalid expression: v-if=\"a----\"');\n    expect(compiled.errors[1]).toContain('invalid expression: {{ b++++ }}');\n  });","file":"unit/modules/compiler/compiler-options.spec.js","skipped":false,"dir":"test"},{"name":"simple","suites":["optimizer"],"line":6,"updatePoint":{"line":6,"column":12,"index":227},"code":"  it('simple', () => {\n    const ast = parse('<h1 id=\"section1\"><span>hello world</span></h1>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(true); // h1\n\n    expect(ast.staticRoot).toBe(true);\n    expect(ast.children[0].static).toBe(true); // span\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"simple with comment","suites":["optimizer"],"line":14,"updatePoint":{"line":14,"column":25,"index":524},"code":"  it('simple with comment', () => {\n    const options = extend({\n      comments: true\n    }, baseOptions);\n    const ast = parse('<h1 id=\"section1\"><span>hello world</span><!--comment--></h1>', options);\n    optimize(ast, options);\n    expect(ast.static).toBe(true); // h1\n\n    expect(ast.staticRoot).toBe(true);\n    expect(ast.children.length).toBe(2);\n    expect(ast.children[0].static).toBe(true); // span\n\n    expect(ast.children[1].static).toBe(true); // comment\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"skip simple nodes","suites":["optimizer"],"line":28,"updatePoint":{"line":28,"column":23,"index":996},"code":"  it('skip simple nodes', () => {\n    const ast = parse('<h1 id=\"section1\">hello</h1>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(true);\n    expect(ast.staticRoot).toBe(false); // this is too simple to warrant a static tree\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"interpolation","suites":["optimizer"],"line":34,"updatePoint":{"line":34,"column":19,"index":1254},"code":"  it('interpolation', () => {\n    const ast = parse('<h1>{{msg}}</h1>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false); // h1\n\n    expect(ast.children[0].static).toBe(false); // text node with interpolation\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"nested elements","suites":["optimizer"],"line":41,"updatePoint":{"line":41,"column":21,"index":1503},"code":"  it('nested elements', () => {\n    const ast = parse('<ul><li>hello</li><li>world</li></ul>', baseOptions);\n    optimize(ast, baseOptions); // ul\n\n    expect(ast.static).toBe(true);\n    expect(ast.staticRoot).toBe(true); // li\n\n    expect(ast.children[0].static).toBe(true); // first\n\n    expect(ast.children[1].static).toBe(true); // second\n    // text node inside li\n\n    expect(ast.children[0].children[0].static).toBe(true); // first\n\n    expect(ast.children[1].children[0].static).toBe(true); // second\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"nested complex elements","suites":["optimizer"],"line":57,"updatePoint":{"line":57,"column":29,"index":2026},"code":"  it('nested complex elements', () => {\n    const ast = parse('<ul><li>{{msg1}}</li><li>---</li><li>{{msg2}}</li></ul>', baseOptions);\n    optimize(ast, baseOptions); // ul\n\n    expect(ast.static).toBe(false); // ul\n    // li\n\n    expect(ast.children[0].static).toBe(false); // first\n\n    expect(ast.children[1].static).toBe(true); // second\n\n    expect(ast.children[2].static).toBe(false); // third\n    // text node inside li\n\n    expect(ast.children[0].children[0].static).toBe(false); // first\n\n    expect(ast.children[1].children[0].static).toBe(true); // second\n\n    expect(ast.children[2].children[0].static).toBe(false); // third\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"v-if directive","suites":["optimizer"],"line":77,"updatePoint":{"line":77,"column":20,"index":2660},"code":"  it('v-if directive', () => {\n    const ast = parse('<div id=\"section1\" v-if=\"show\"><p><span>hello world</span></p></div>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false);\n    expect(ast.children[0].static).toBe(true);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"v-else directive","suites":["optimizer"],"line":83,"updatePoint":{"line":83,"column":22,"index":2922},"code":"  it('v-else directive', () => {\n    const ast = parse('<div><p v-if=\"show\">hello world</p><div v-else><p><span>foo bar</span></p></div></div>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false);\n    expect(ast.children[0].static).toBe(false);\n    expect(ast.children[0].ifConditions[0].block.static).toBe(false);\n    expect(ast.children[0].ifConditions[1].block.static).toBe(false);\n    expect(ast.children[0].ifConditions[0].block.children[0].static).toBe(true);\n    expect(ast.children[0].ifConditions[1].block.children[0].static).toBe(true);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"v-pre directive","suites":["optimizer"],"line":93,"updatePoint":{"line":93,"column":21,"index":3504},"code":"  it('v-pre directive', () => {\n    const ast = parse('<ul v-pre><li>{{msg}}</li><li>world</li></ul>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(true);\n    expect(ast.staticRoot).toBe(true);\n    expect(ast.children[0].static).toBe(true);\n    expect(ast.children[1].static).toBe(true);\n    expect(ast.children[0].children[0].static).toBe(true);\n    expect(ast.children[1].children[0].static).toBe(true);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"v-for directive","suites":["optimizer"],"line":103,"updatePoint":{"line":103,"column":21,"index":3945},"code":"  it('v-for directive', () => {\n    const ast = parse('<ul><li v-for=\"item in items\">hello world {{$index}}</li></ul>', baseOptions);\n    optimize(ast, baseOptions); // ul\n\n    expect(ast.static).toBe(false); // li with v-for\n\n    expect(ast.children[0].static).toBe(false);\n    expect(ast.children[0].children[0].static).toBe(false);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"v-once directive","suites":["optimizer"],"line":112,"updatePoint":{"line":112,"column":22,"index":4287},"code":"  it('v-once directive', () => {\n    const ast = parse('<p v-once>{{msg}}</p>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false); // p\n\n    expect(ast.children[0].static).toBe(false); // text node\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"single slot","suites":["optimizer"],"line":119,"updatePoint":{"line":119,"column":17,"index":4517},"code":"  it('single slot', () => {\n    const ast = parse('<div><slot>hello</slot></div>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.children[0].static).toBe(false); // slot\n\n    expect(ast.children[0].children[0].static).toBe(true); // text node\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"named slot","suites":["optimizer"],"line":126,"updatePoint":{"line":126,"column":16,"index":4780},"code":"  it('named slot', () => {\n    const ast = parse('<div><slot name=\"one\">hello world</slot></div>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.children[0].static).toBe(false); // slot\n\n    expect(ast.children[0].children[0].static).toBe(true); // text node\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"slot target","suites":["optimizer"],"line":133,"updatePoint":{"line":133,"column":17,"index":5061},"code":"  it('slot target', () => {\n    const ast = parse('<p slot=\"one\">hello world</p>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false); // slot\n\n    expect(ast.children[0].static).toBe(true); // text node\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"component","suites":["optimizer"],"line":140,"updatePoint":{"line":140,"column":15,"index":5299},"code":"  it('component', () => {\n    const ast = parse('<my-component></my-component>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false); // component\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"component for inline-template","suites":["optimizer"],"line":145,"updatePoint":{"line":145,"column":35,"index":5501},"code":"  it('component for inline-template', () => {\n    const ast = parse('<my-component inline-template><p>hello world</p><p>{{msg}}</p></my-component>', baseOptions);\n    optimize(ast, baseOptions); // component\n\n    expect(ast.static).toBe(false); // component\n    // p\n\n    expect(ast.children[0].static).toBe(true); // first\n\n    expect(ast.children[1].static).toBe(false); // second\n    // text node inside p\n\n    expect(ast.children[0].children[0].static).toBe(true); // first\n\n    expect(ast.children[1].children[0].static).toBe(false); // second\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"class binding","suites":["optimizer"],"line":161,"updatePoint":{"line":161,"column":19,"index":6040},"code":"  it('class binding', () => {\n    const ast = parse('<p :class=\"class1\">hello world</p>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false);\n    expect(ast.children[0].static).toBe(true);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"style binding","suites":["optimizer"],"line":167,"updatePoint":{"line":167,"column":19,"index":6265},"code":"  it('style binding', () => {\n    const ast = parse('<p :style=\"error\">{{msg}}</p>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false);\n    expect(ast.children[0].static).toBe(false);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"key","suites":["optimizer"],"line":173,"updatePoint":{"line":173,"column":9,"index":6476},"code":"  it('key', () => {\n    const ast = parse('<p key=\"foo\">hello world</p>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false);\n    expect(ast.children[0].static).toBe(true);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"ref","suites":["optimizer"],"line":179,"updatePoint":{"line":179,"column":9,"index":6685},"code":"  it('ref', () => {\n    const ast = parse('<p ref=\"foo\">hello world</p>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false);\n    expect(ast.children[0].static).toBe(true);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"transition","suites":["optimizer"],"line":185,"updatePoint":{"line":185,"column":16,"index":6901},"code":"  it('transition', () => {\n    const ast = parse('<p v-if=\"show\" transition=\"expand\">hello world</p>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false);\n    expect(ast.children[0].static).toBe(true);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"v-bind directive","suites":["optimizer"],"line":191,"updatePoint":{"line":191,"column":22,"index":7145},"code":"  it('v-bind directive', () => {\n    const ast = parse('<input type=\"text\" name=\"field1\" :value=\"msg\">', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"v-on directive","suites":["optimizer"],"line":196,"updatePoint":{"line":196,"column":20,"index":7336},"code":"  it('v-on directive', () => {\n    const ast = parse('<input type=\"text\" name=\"field1\" :value=\"msg\" @input=\"onInput\">', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"custom directive","suites":["optimizer"],"line":201,"updatePoint":{"line":201,"column":22,"index":7546},"code":"  it('custom directive', () => {\n    const ast = parse('<form><input type=\"text\" name=\"field1\" :value=\"msg\" v-validate:field1=\"required\"></form>', baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.static).toBe(false);\n    expect(ast.children[0].static).toBe(false);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"not root ast","suites":["optimizer"],"line":207,"updatePoint":{"line":207,"column":18,"index":7825},"code":"  it('not root ast', () => {\n    const ast = null;\n    optimize(ast, baseOptions);\n    expect(ast).toBe(null);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"not specified isReservedTag option","suites":["optimizer"],"line":212,"updatePoint":{"line":212,"column":40,"index":7964},"code":"  it('not specified isReservedTag option', () => {\n    const ast = parse('<h1 id=\"section1\">hello world</h1>', baseOptions);\n    optimize(ast, {});\n    expect(ast.static).toBe(false);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"mark static trees inside v-for","suites":["optimizer"],"line":217,"updatePoint":{"line":217,"column":36,"index":8150},"code":"  it('mark static trees inside v-for', () => {\n    const ast = parse(`<div><div v-for=\"i in 10\"><p><span>hi</span></p></div></div>`, baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.children[0].children[0].staticRoot).toBe(true);\n    expect(ast.children[0].children[0].staticInFor).toBe(true);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"mark static trees inside v-for with nested v-else and v-once","suites":["optimizer"],"line":223,"updatePoint":{"line":223,"column":66,"index":8492},"code":"  it('mark static trees inside v-for with nested v-else and v-once', () => {\n    const ast = parse(`\n      <div v-if=\"1\"></div>\n      <div v-else-if=\"2\">\n        <div v-for=\"i in 10\" :key=\"i\">\n          <div v-if=\"1\">{{ i }}</div>\n          <div v-else-if=\"2\" v-once>{{ i }}</div>\n          <div v-else v-once>{{ i }}</div>\n        </div>\n      </div>\n      <div v-else>\n        <div v-for=\"i in 10\" :key=\"i\">\n          <div v-if=\"1\">{{ i }}</div>\n          <div v-else v-once>{{ i }}</div>\n        </div>\n      </div>\n      `, baseOptions);\n    optimize(ast, baseOptions);\n    expect(ast.ifConditions[1].block.children[0].children[0].ifConditions[1].block.staticRoot).toBe(false);\n    expect(ast.ifConditions[1].block.children[0].children[0].ifConditions[1].block.staticInFor).toBe(true);\n    expect(ast.ifConditions[1].block.children[0].children[0].ifConditions[2].block.staticRoot).toBe(false);\n    expect(ast.ifConditions[1].block.children[0].children[0].ifConditions[2].block.staticInFor).toBe(true);\n    expect(ast.ifConditions[2].block.children[0].children[0].ifConditions[1].block.staticRoot).toBe(false);\n    expect(ast.ifConditions[2].block.children[0].children[0].ifConditions[1].block.staticInFor).toBe(true);\n  });","file":"unit/modules/compiler/optimizer.spec.js","skipped":false,"dir":"test"},{"name":"simple element","suites":["parser"],"line":6,"updatePoint":{"line":6,"column":20,"index":231},"code":"  it('simple element', () => {\n    const ast = parse('<h1>hello world</h1>', baseOptions);\n    expect(ast.tag).toBe('h1');\n    expect(ast.plain).toBe(true);\n    expect(ast.children[0].text).toBe('hello world');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"interpolation in element","suites":["parser"],"line":12,"updatePoint":{"line":12,"column":30,"index":458},"code":"  it('interpolation in element', () => {\n    const ast = parse('<h1>{{msg}}</h1>', baseOptions);\n    expect(ast.tag).toBe('h1');\n    expect(ast.plain).toBe(true);\n    expect(ast.children[0].expression).toBe('_s(msg)');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"child elements","suites":["parser"],"line":18,"updatePoint":{"line":18,"column":20,"index":673},"code":"  it('child elements', () => {\n    const ast = parse('<ul><li>hello world</li></ul>', baseOptions);\n    expect(ast.tag).toBe('ul');\n    expect(ast.plain).toBe(true);\n    expect(ast.children[0].tag).toBe('li');\n    expect(ast.children[0].plain).toBe(true);\n    expect(ast.children[0].children[0].text).toBe('hello world');\n    expect(ast.children[0].parent).toBe(ast);\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"unary element","suites":["parser"],"line":27,"updatePoint":{"line":27,"column":19,"index":1046},"code":"  it('unary element', () => {\n    const ast = parse('<hr>', baseOptions);\n    expect(ast.tag).toBe('hr');\n    expect(ast.plain).toBe(true);\n    expect(ast.children.length).toBe(0);\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"svg element","suites":["parser"],"line":33,"updatePoint":{"line":33,"column":17,"index":1231},"code":"  it('svg element', () => {\n    const ast = parse('<svg><text>hello world</text></svg>', baseOptions);\n    expect(ast.tag).toBe('svg');\n    expect(ast.ns).toBe('svg');\n    expect(ast.plain).toBe(true);\n    expect(ast.children[0].tag).toBe('text');\n    expect(ast.children[0].children[0].text).toBe('hello world');\n    expect(ast.children[0].parent).toBe(ast);\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"camelCase element","suites":["parser"],"line":42,"updatePoint":{"line":42,"column":23,"index":1603},"code":"  it('camelCase element', () => {\n    const ast = parse('<MyComponent><p>hello world</p></MyComponent>', baseOptions);\n    expect(ast.tag).toBe('MyComponent');\n    expect(ast.plain).toBe(true);\n    expect(ast.children[0].tag).toBe('p');\n    expect(ast.children[0].plain).toBe(true);\n    expect(ast.children[0].children[0].text).toBe('hello world');\n    expect(ast.children[0].parent).toBe(ast);\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"forbidden element","suites":["parser"],"line":51,"updatePoint":{"line":51,"column":23,"index":2004},"code":"  it('forbidden element', () => {\n    // style\n    const styleAst = parse('<style>error { color: red; }</style>', baseOptions);\n    expect(styleAst.tag).toBe('style');\n    expect(styleAst.plain).toBe(true);\n    expect(styleAst.forbidden).toBe(true);\n    expect(styleAst.children[0].text).toBe('error { color: red; }');\n    expect('Templates should only be responsible for mapping the state').toHaveBeenWarned(); // script\n\n    const scriptAst = parse('<script type=\"text/javascript\">alert(\"hello world!\")</script>', baseOptions);\n    expect(scriptAst.tag).toBe('script');\n    expect(scriptAst.plain).toBe(false);\n    expect(scriptAst.forbidden).toBe(true);\n    expect(scriptAst.children[0].text).toBe('alert(\"hello world!\")');\n    expect('Templates should only be responsible for mapping the state').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"not contain root element","suites":["parser"],"line":67,"updatePoint":{"line":67,"column":30,"index":2837},"code":"  it('not contain root element', () => {\n    parse('hello world', baseOptions);\n    expect('Component template requires a root element, rather than just text').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn text before root element","suites":["parser"],"line":71,"updatePoint":{"line":71,"column":35,"index":3028},"code":"  it('warn text before root element', () => {\n    parse('before root {{ interpolation }}<div></div>', baseOptions);\n    expect('text \"before root {{ interpolation }}\" outside root element will be ignored.').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn text after root element","suites":["parser"],"line":75,"updatePoint":{"line":75,"column":34,"index":3260},"code":"  it('warn text after root element', () => {\n    parse('<div></div>after root {{ interpolation }}', baseOptions);\n    expect('text \"after root {{ interpolation }}\" outside root element will be ignored.').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn multiple root elements","suites":["parser"],"line":79,"updatePoint":{"line":79,"column":33,"index":3489},"code":"  it('warn multiple root elements', () => {\n    parse('<div></div><div></div>', baseOptions);\n    expect('Component template should contain exactly one root element').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"remove duplicate whitespace text nodes caused by comments","suites":["parser"],"line":83,"updatePoint":{"line":83,"column":63,"index":3712},"code":"  it('remove duplicate whitespace text nodes caused by comments', () => {\n    const ast = parse(`<div><a></a> <!----> <a></a></div>`, baseOptions);\n    expect(ast.children.length).toBe(3);\n    expect(ast.children[0].tag).toBe('a');\n    expect(ast.children[1].text).toBe(' ');\n    expect(ast.children[2].tag).toBe('a');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"remove text nodes between v-if conditions","suites":["parser"],"line":90,"updatePoint":{"line":90,"column":47,"index":4021},"code":"  it('remove text nodes between v-if conditions', () => {\n    const ast = parse(`<div><div v-if=\"1\"></div> <div v-else-if=\"2\"></div> <div v-else></div> <span></span></div>`, baseOptions);\n    expect(ast.children.length).toBe(3);\n    expect(ast.children[0].tag).toBe('div');\n    expect(ast.children[0].ifConditions.length).toBe(3);\n    expect(ast.children[1].text).toBe(' '); // text\n\n    expect(ast.children[2].tag).toBe('span');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn non whitespace text between v-if conditions","suites":["parser"],"line":99,"updatePoint":{"line":99,"column":54,"index":4464},"code":"  it('warn non whitespace text between v-if conditions', () => {\n    parse(`<div><div v-if=\"1\"></div> foo <div v-else></div></div>`, baseOptions);\n    expect(`text \"foo\" between v-if and v-else(-if) will be ignored`).toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"not warn 2 root elements with v-if and v-else","suites":["parser"],"line":103,"updatePoint":{"line":103,"column":51,"index":4704},"code":"  it('not warn 2 root elements with v-if and v-else', () => {\n    parse('<div v-if=\"1\"></div><div v-else></div>', baseOptions);\n    expect('Component template should contain exactly one root element').not.toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"not warn 3 root elements with v-if, v-else-if and v-else","suites":["parser"],"line":107,"updatePoint":{"line":107,"column":62,"index":4946},"code":"  it('not warn 3 root elements with v-if, v-else-if and v-else', () => {\n    parse('<div v-if=\"1\"></div><div v-else-if=\"2\"></div><div v-else></div>', baseOptions);\n    expect('Component template should contain exactly one root element').not.toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"not warn 2 root elements with v-if and v-else on separate lines","suites":["parser"],"line":111,"updatePoint":{"line":111,"column":69,"index":5220},"code":"  it('not warn 2 root elements with v-if and v-else on separate lines', () => {\n    parse(`\n      <div v-if=\"1\"></div>\n      <div v-else></div>\n    `, baseOptions);\n    expect('Component template should contain exactly one root element').not.toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"not warn 3 or more root elements with v-if, v-else-if and v-else on separate lines","suites":["parser"],"line":118,"updatePoint":{"line":118,"column":88,"index":5507},"code":"  it('not warn 3 or more root elements with v-if, v-else-if and v-else on separate lines', () => {\n    parse(`\n      <div v-if=\"1\"></div>\n      <div v-else-if=\"2\"></div>\n      <div v-else></div>\n    `, baseOptions);\n    expect('Component template should contain exactly one root element').not.toHaveBeenWarned();\n    parse(`\n      <div v-if=\"1\"></div>\n      <div v-else-if=\"2\"></div>\n      <div v-else-if=\"3\"></div>\n      <div v-else-if=\"4\"></div>\n      <div v-else></div>\n    `, baseOptions);\n    expect('Component template should contain exactly one root element').not.toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"generate correct ast for 2 root elements with v-if and v-else on separate lines","suites":["parser"],"line":134,"updatePoint":{"line":134,"column":85,"index":6101},"code":"  it('generate correct ast for 2 root elements with v-if and v-else on separate lines', () => {\n    const ast = parse(`\n      <div v-if=\"1\"></div>\n      <p v-else></p>\n    `, baseOptions);\n    expect(ast.tag).toBe('div');\n    expect(ast.ifConditions[1].block.tag).toBe('p');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"generate correct ast for 3 or more root elements with v-if and v-else on separate lines","suites":["parser"],"line":142,"updatePoint":{"line":142,"column":93,"index":6390},"code":"  it('generate correct ast for 3 or more root elements with v-if and v-else on separate lines', () => {\n    const ast = parse(`\n      <div v-if=\"1\"></div>\n      <span v-else-if=\"2\"></span>\n      <p v-else></p>\n    `, baseOptions);\n    expect(ast.tag).toBe('div');\n    expect(ast.ifConditions[0].block.tag).toBe('div');\n    expect(ast.ifConditions[1].block.tag).toBe('span');\n    expect(ast.ifConditions[2].block.tag).toBe('p');\n    const astMore = parse(`\n      <div v-if=\"1\"></div>\n      <span v-else-if=\"2\"></span>\n      <div v-else-if=\"3\"></div>\n      <span v-else-if=\"4\"></span>\n      <p v-else></p>\n    `, baseOptions);\n    expect(astMore.tag).toBe('div');\n    expect(astMore.ifConditions[0].block.tag).toBe('div');\n    expect(astMore.ifConditions[1].block.tag).toBe('span');\n    expect(astMore.ifConditions[2].block.tag).toBe('div');\n    expect(astMore.ifConditions[3].block.tag).toBe('span');\n    expect(astMore.ifConditions[4].block.tag).toBe('p');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn 2 root elements with v-if","suites":["parser"],"line":166,"updatePoint":{"line":166,"column":36,"index":7296},"code":"  it('warn 2 root elements with v-if', () => {\n    parse('<div v-if=\"1\"></div><div v-if=\"2\"></div>', baseOptions);\n    expect('Component template should contain exactly one root element').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn 3 root elements with v-if and v-else on first 2","suites":["parser"],"line":170,"updatePoint":{"line":170,"column":58,"index":7532},"code":"  it('warn 3 root elements with v-if and v-else on first 2', () => {\n    parse('<div v-if=\"1\"></div><div v-else></div><div></div>', baseOptions);\n    expect('Component template should contain exactly one root element').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn 3 root elements with v-if and v-else-if on first 2","suites":["parser"],"line":174,"updatePoint":{"line":174,"column":61,"index":7780},"code":"  it('warn 3 root elements with v-if and v-else-if on first 2', () => {\n    parse('<div v-if=\"1\"></div><div v-else-if></div><div></div>', baseOptions);\n    expect('Component template should contain exactly one root element').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn 4 root elements with v-if, v-else-if and v-else on first 2","suites":["parser"],"line":178,"updatePoint":{"line":178,"column":69,"index":8039},"code":"  it('warn 4 root elements with v-if, v-else-if and v-else on first 2', () => {\n    parse('<div v-if=\"1\"></div><div v-else-if></div><div v-else></div><div></div>', baseOptions);\n    expect('Component template should contain exactly one root element').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn 2 root elements with v-if and v-else with v-for on 2nd","suites":["parser"],"line":182,"updatePoint":{"line":182,"column":65,"index":8312},"code":"  it('warn 2 root elements with v-if and v-else with v-for on 2nd', () => {\n    parse('<div v-if=\"1\"></div><div v-else v-for=\"i in [1]\"></div>', baseOptions);\n    expect('Cannot use v-for on stateful component root element because it renders multiple elements').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn 2 root elements with v-if and v-else-if with v-for on 2nd","suites":["parser"],"line":186,"updatePoint":{"line":186,"column":68,"index":8603},"code":"  it('warn 2 root elements with v-if and v-else-if with v-for on 2nd', () => {\n    parse('<div v-if=\"1\"></div><div v-else-if=\"2\" v-for=\"i in [1]\"></div>', baseOptions);\n    expect('Cannot use v-for on stateful component root element because it renders multiple elements').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn <template> as root element","suites":["parser"],"line":190,"updatePoint":{"line":190,"column":37,"index":8870},"code":"  it('warn <template> as root element', () => {\n    parse('<template></template>', baseOptions);\n    expect('Cannot use <template> as component root element').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn <slot> as root element","suites":["parser"],"line":194,"updatePoint":{"line":194,"column":33,"index":9051},"code":"  it('warn <slot> as root element', () => {\n    parse('<slot></slot>', baseOptions);\n    expect('Cannot use <slot> as component root element').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn v-for on root element","suites":["parser"],"line":198,"updatePoint":{"line":198,"column":32,"index":9219},"code":"  it('warn v-for on root element', () => {\n    parse('<div v-for=\"item in items\"></div>', baseOptions);\n    expect('Cannot use v-for on stateful component root element').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"warn <template> key","suites":["parser"],"line":202,"updatePoint":{"line":202,"column":25,"index":9408},"code":"  it('warn <template> key', () => {\n    parse('<div><template v-for=\"i in 10\" :key=\"i\"></template></div>', baseOptions);\n    expect('<template> cannot be keyed').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"v-pre directive","suites":["parser"],"line":206,"updatePoint":{"line":206,"column":21,"index":9592},"code":"  it('v-pre directive', () => {\n    const ast = parse('<div v-pre id=\"message1\"><p>{{msg}}</p></div>', baseOptions);\n    expect(ast.pre).toBe(true);\n    expect(ast.attrs[0].name).toBe('id');\n    expect(ast.attrs[0].value).toBe('\"message1\"');\n    expect(ast.children[0].children[0].text).toBe('{{msg}}');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"v-for directive basic syntax","suites":["parser"],"line":213,"updatePoint":{"line":213,"column":34,"index":9915},"code":"  it('v-for directive basic syntax', () => {\n    const ast = parse('<ul><li v-for=\"item in items\"></li></ul>', baseOptions);\n    const liAst = ast.children[0];\n    expect(liAst.for).toBe('items');\n    expect(liAst.alias).toBe('item');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"v-for directive iteration syntax","suites":["parser"],"line":219,"updatePoint":{"line":219,"column":38,"index":10160},"code":"  it('v-for directive iteration syntax', () => {\n    const ast = parse('<ul><li v-for=\"(item, index) in items\"></li></ul>', baseOptions);\n    const liAst = ast.children[0];\n    expect(liAst.for).toBe('items');\n    expect(liAst.alias).toBe('item');\n    expect(liAst.iterator1).toBe('index');\n    expect(liAst.iterator2).toBeUndefined();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"v-for directive iteration syntax (multiple)","suites":["parser"],"line":227,"updatePoint":{"line":227,"column":49,"index":10513},"code":"  it('v-for directive iteration syntax (multiple)', () => {\n    const ast = parse('<ul><li v-for=\"(item, key, index) in items\"></li></ul>', baseOptions);\n    const liAst = ast.children[0];\n    expect(liAst.for).toBe('items');\n    expect(liAst.alias).toBe('item');\n    expect(liAst.iterator1).toBe('key');\n    expect(liAst.iterator2).toBe('index');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"v-for directive key","suites":["parser"],"line":235,"updatePoint":{"line":235,"column":25,"index":10843},"code":"  it('v-for directive key', () => {\n    const ast = parse('<ul><li v-for=\"item in items\" :key=\"item.uid\"></li></ul>', baseOptions);\n    const liAst = ast.children[0];\n    expect(liAst.for).toBe('items');\n    expect(liAst.alias).toBe('item');\n    expect(liAst.key).toBe('item.uid');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"v-for directive invalid syntax","suites":["parser"],"line":242,"updatePoint":{"line":242,"column":36,"index":11142},"code":"  it('v-for directive invalid syntax', () => {\n    parse('<ul><li v-for=\"item into items\"></li></ul>', baseOptions);\n    expect('Invalid v-for expression').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"v-if directive syntax","suites":["parser"],"line":246,"updatePoint":{"line":246,"column":27,"index":11315},"code":"  it('v-if directive syntax', () => {\n    const ast = parse('<p v-if=\"show\">hello world</p>', baseOptions);\n    expect(ast.if).toBe('show');\n    expect(ast.ifConditions[0].exp).toBe('show');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"v-else-if directive syntax","suites":["parser"],"line":251,"updatePoint":{"line":251,"column":32,"index":11517},"code":"  it('v-else-if directive syntax', () => {\n    const ast = parse('<div><p v-if=\"show\">hello</p><span v-else-if=\"2\">elseif</span><p v-else>world</p></div>', baseOptions);\n    const ifAst = ast.children[0];\n    const conditionsAst = ifAst.ifConditions;\n    expect(conditionsAst.length).toBe(3);\n    expect(conditionsAst[1].block.children[0].text).toBe('elseif');\n    expect(conditionsAst[1].block.parent).toBe(ast);\n    expect(conditionsAst[2].block.children[0].text).toBe('world');\n    expect(conditionsAst[2].block.parent).toBe(ast);\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"v-else directive syntax","suites":["parser"],"line":261,"updatePoint":{"line":261,"column":29,"index":12054},"code":"  it('v-else directive syntax', () => {\n    const ast = parse('<div><p v-if=\"show\">hello</p><p v-else>world</p></div>', baseOptions);\n    const ifAst = ast.children[0];\n    const conditionsAst = ifAst.ifConditions;\n    expect(conditionsAst.length).toBe(2);\n    expect(conditionsAst[1].block.children[0].text).toBe('world');\n    expect(conditionsAst[1].block.parent).toBe(ast);\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"v-else-if directive invalid syntax","suites":["parser"],"line":269,"updatePoint":{"line":269,"column":40,"index":12448},"code":"  it('v-else-if directive invalid syntax', () => {\n    parse('<div><p v-else-if=\"1\">world</p></div>', baseOptions);\n    expect('v-else-if=\"1\" used on element').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"v-else directive invalid syntax","suites":["parser"],"line":273,"updatePoint":{"line":273,"column":37,"index":12631},"code":"  it('v-else directive invalid syntax', () => {\n    parse('<div><p v-else>world</p></div>', baseOptions);\n    expect('v-else used on element').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"v-once directive syntax","suites":["parser"],"line":277,"updatePoint":{"line":277,"column":29,"index":12792},"code":"  it('v-once directive syntax', () => {\n    const ast = parse('<p v-once>world</p>', baseOptions);\n    expect(ast.once).toBe(true);\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"slot tag single syntax","suites":["parser"],"line":281,"updatePoint":{"line":281,"column":28,"index":12929},"code":"  it('slot tag single syntax', () => {\n    const ast = parse('<div><slot></slot></div>', baseOptions);\n    expect(ast.children[0].tag).toBe('slot');\n    expect(ast.children[0].slotName).toBeUndefined();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"slot tag named syntax","suites":["parser"],"line":286,"updatePoint":{"line":286,"column":27,"index":13137},"code":"  it('slot tag named syntax', () => {\n    const ast = parse('<div><slot name=\"one\">hello world</slot></div>', baseOptions);\n    expect(ast.children[0].tag).toBe('slot');\n    expect(ast.children[0].slotName).toBe('\"one\"');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"slot target","suites":["parser"],"line":291,"updatePoint":{"line":291,"column":17,"index":13355},"code":"  it('slot target', () => {\n    const ast = parse('<p slot=\"one\">hello world</p>', baseOptions);\n    expect(ast.slotTarget).toBe('\"one\"');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"component properties","suites":["parser"],"line":295,"updatePoint":{"line":295,"column":26,"index":13509},"code":"  it('component properties', () => {\n    const ast = parse('<my-component :msg=\"hello\"></my-component>', baseOptions);\n    expect(ast.attrs[0].name).toBe('msg');\n    expect(ast.attrs[0].value).toBe('hello');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"component \"is\" attribute","suites":["parser"],"line":300,"updatePoint":{"line":300,"column":30,"index":13727},"code":"  it('component \"is\" attribute', () => {\n    const ast = parse('<my-component is=\"component1\"></my-component>', baseOptions);\n    expect(ast.component).toBe('\"component1\"');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"component \"inline-template\" attribute","suites":["parser"],"line":304,"updatePoint":{"line":304,"column":43,"index":13920},"code":"  it('component \"inline-template\" attribute', () => {\n    const ast = parse('<my-component inline-template>hello world</my-component>', baseOptions);\n    expect(ast.inlineTemplate).toBe(true);\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"class binding","suites":["parser"],"line":308,"updatePoint":{"line":308,"column":19,"index":14095},"code":"  it('class binding', () => {\n    // static\n    const ast1 = parse('<p class=\"class1\">hello world</p>', baseOptions);\n    expect(ast1.staticClass).toBe('\"class1\"'); // dynamic\n\n    const ast2 = parse('<p :class=\"class1\">hello world</p>', baseOptions);\n    expect(ast2.classBinding).toBe('class1'); // interpolation warning\n\n    parse('<p class=\"{{error}}\">hello world</p>', baseOptions);\n    expect('Interpolation inside attributes has been removed').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"style binding","suites":["parser"],"line":319,"updatePoint":{"line":319,"column":19,"index":14572},"code":"  it('style binding', () => {\n    const ast = parse('<p :style=\"error\">hello world</p>', baseOptions);\n    expect(ast.styleBinding).toBe('error');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"attribute with v-bind","suites":["parser"],"line":323,"updatePoint":{"line":323,"column":27,"index":14733},"code":"  it('attribute with v-bind', () => {\n    const ast = parse('<input type=\"text\" name=\"field1\" :value=\"msg\">', baseOptions);\n    expect(ast.attrsList[0].name).toBe('type');\n    expect(ast.attrsList[0].value).toBe('text');\n    expect(ast.attrsList[1].name).toBe('name');\n    expect(ast.attrsList[1].value).toBe('field1');\n    expect(ast.attrsMap['type']).toBe('text');\n    expect(ast.attrsMap['name']).toBe('field1');\n    expect(ast.attrs[0].name).toBe('type');\n    expect(ast.attrs[0].value).toBe('\"text\"');\n    expect(ast.attrs[1].name).toBe('name');\n    expect(ast.attrs[1].value).toBe('\"field1\"');\n    expect(ast.props[0].name).toBe('value');\n    expect(ast.props[0].value).toBe('msg');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"attribute with v-on","suites":["parser"],"line":338,"updatePoint":{"line":338,"column":25,"index":15426},"code":"  it('attribute with v-on', () => {\n    const ast = parse('<input type=\"text\" name=\"field1\" :value=\"msg\" @input=\"onInput\">', baseOptions);\n    expect(ast.events.input.value).toBe('onInput');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"attribute with directive","suites":["parser"],"line":342,"updatePoint":{"line":342,"column":30,"index":15628},"code":"  it('attribute with directive', () => {\n    const ast = parse('<input type=\"text\" name=\"field1\" :value=\"msg\" v-validate:field1=\"required\">', baseOptions);\n    expect(ast.directives[0].name).toBe('validate');\n    expect(ast.directives[0].value).toBe('required');\n    expect(ast.directives[0].arg).toBe('field1');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"attribute with modifiered directive","suites":["parser"],"line":348,"updatePoint":{"line":348,"column":41,"index":15958},"code":"  it('attribute with modifiered directive', () => {\n    const ast = parse('<input type=\"text\" name=\"field1\" :value=\"msg\" v-validate.on.off>', baseOptions);\n    expect(ast.directives[0].modifiers.on).toBe(true);\n    expect(ast.directives[0].modifiers.off).toBe(true);\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"literal attribute","suites":["parser"],"line":353,"updatePoint":{"line":353,"column":23,"index":16213},"code":"  it('literal attribute', () => {\n    // basic\n    const ast1 = parse('<input type=\"text\" name=\"field1\" value=\"hello world\">', baseOptions);\n    expect(ast1.attrsList[0].name).toBe('type');\n    expect(ast1.attrsList[0].value).toBe('text');\n    expect(ast1.attrsList[1].name).toBe('name');\n    expect(ast1.attrsList[1].value).toBe('field1');\n    expect(ast1.attrsList[2].name).toBe('value');\n    expect(ast1.attrsList[2].value).toBe('hello world');\n    expect(ast1.attrsMap['type']).toBe('text');\n    expect(ast1.attrsMap['name']).toBe('field1');\n    expect(ast1.attrsMap['value']).toBe('hello world');\n    expect(ast1.attrs[0].name).toBe('type');\n    expect(ast1.attrs[0].value).toBe('\"text\"');\n    expect(ast1.attrs[1].name).toBe('name');\n    expect(ast1.attrs[1].value).toBe('\"field1\"');\n    expect(ast1.attrs[2].name).toBe('value');\n    expect(ast1.attrs[2].value).toBe('\"hello world\"'); // interpolation warning\n\n    parse('<input type=\"text\" name=\"field1\" value=\"{{msg}}\">', baseOptions);\n    expect('Interpolation inside attributes has been removed').toHaveBeenWarned();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"duplicate attribute","suites":["parser"],"line":377,"updatePoint":{"line":377,"column":27,"index":17327},"code":"    it('duplicate attribute', () => {\n      parse('<p class=\"class1\" class=\"class1\">hello world</p>', baseOptions);\n      expect('duplicate attribute').toHaveBeenWarned();\n    });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"custom delimiter","suites":["parser"],"line":383,"updatePoint":{"line":383,"column":22,"index":17507},"code":"  it('custom delimiter', () => {\n    const ast = parse('<p>{msg}</p>', extend({\n      delimiters: ['{', '}']\n    }, baseOptions));\n    expect(ast.children[0].expression).toBe('_s(msg)');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"not specified getTagNamespace option","suites":["parser"],"line":389,"updatePoint":{"line":389,"column":42,"index":17720},"code":"  it('not specified getTagNamespace option', () => {\n    const options = extend({}, baseOptions);\n    delete options.getTagNamespace;\n    const ast = parse('<svg><text>hello world</text></svg>', options);\n    expect(ast.tag).toBe('svg');\n    expect(ast.ns).toBeUndefined();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"not specified mustUseProp","suites":["parser"],"line":396,"updatePoint":{"line":396,"column":31,"index":17989},"code":"  it('not specified mustUseProp', () => {\n    const options = extend({}, baseOptions);\n    delete options.mustUseProp;\n    const ast = parse('<input type=\"text\" name=\"field1\" :value=\"msg\">', options);\n    expect(ast.props).toBeUndefined();\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"pre/post transforms","suites":["parser"],"line":402,"updatePoint":{"line":402,"column":25,"index":18229},"code":"  it('pre/post transforms', () => {\n    const options = extend({}, baseOptions);\n    const spy1 = jasmine.createSpy('preTransform');\n    const spy2 = jasmine.createSpy('postTransform');\n    options.modules = options.modules.concat([{\n      preTransformNode(el) {\n        spy1(el.tag);\n      },\n\n      postTransformNode(el) {\n        expect(el.attrs.length).toBe(1);\n        spy2(el.tag);\n      }\n\n    }]);\n    parse('<img v-pre src=\"hi\">', options);\n    expect(spy1).toHaveBeenCalledWith('img');\n    expect(spy2).toHaveBeenCalledWith('img');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"preserve whitespace in <pre> tag","suites":["parser"],"line":421,"updatePoint":{"line":421,"column":38,"index":18790},"code":"  it('preserve whitespace in <pre> tag', function () {\n    const options = extend({}, baseOptions);\n    const ast = parse('<pre><code>  \\n<span>hi</span>\\n  </code><span> </span></pre>', options);\n    const code = ast.children[0];\n    expect(code.children[0].type).toBe(3);\n    expect(code.children[0].text).toBe('  \\n');\n    expect(code.children[2].type).toBe(3);\n    expect(code.children[2].text).toBe('\\n  ');\n    const span = ast.children[1];\n    expect(span.children[0].type).toBe(3);\n    expect(span.children[0].text).toBe(' ');\n  }); // #5992","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"ignore the first newline in <pre> tag","suites":["parser"],"line":434,"updatePoint":{"line":434,"column":43,"index":19346},"code":"  it('ignore the first newline in <pre> tag', function () {\n    const options = extend({}, baseOptions);\n    const ast = parse('<div><pre>\\nabc</pre>\\ndef<pre>\\n\\nabc</pre></div>', options);\n    const pre = ast.children[0];\n    expect(pre.children[0].type).toBe(3);\n    expect(pre.children[0].text).toBe('abc');\n    const text = ast.children[1];\n    expect(text.type).toBe(3);\n    expect(text.text).toBe('\\ndef');\n    const pre2 = ast.children[2];\n    expect(pre2.children[0].type).toBe(3);\n    expect(pre2.children[0].text).toBe('\\nabc');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"forgivingly handle < in plain text","suites":["parser"],"line":447,"updatePoint":{"line":447,"column":40,"index":19889},"code":"  it('forgivingly handle < in plain text', () => {\n    const options = extend({}, baseOptions);\n    const ast = parse('<p>1 < 2 < 3</p>', options);\n    expect(ast.tag).toBe('p');\n    expect(ast.children.length).toBe(1);\n    expect(ast.children[0].type).toBe(3);\n    expect(ast.children[0].text).toBe('1 < 2 < 3');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"IE conditional comments","suites":["parser"],"line":455,"updatePoint":{"line":455,"column":29,"index":20198},"code":"  it('IE conditional comments', () => {\n    const options = extend({}, baseOptions);\n    const ast = parse(`\n      <div>\n        <!--[if lte IE 8]>\n          <p>Test 1</p>\n        <![endif]-->\n      </div>\n    `, options);\n    expect(ast.tag).toBe('div');\n    expect(ast.children.length).toBe(0);\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"parse content in textarea as text","suites":["parser"],"line":467,"updatePoint":{"line":467,"column":39,"index":20511},"code":"  it('parse content in textarea as text', () => {\n    const options = extend({}, baseOptions);\n    const whitespace = parse(`\n      <textarea>\n        <p>Test 1</p>\n        test2\n      </textarea>\n    `, options);\n    expect(whitespace.tag).toBe('textarea');\n    expect(whitespace.children.length).toBe(1);\n    expect(whitespace.children[0].type).toBe(3); // textarea is whitespace sensitive\n\n    expect(whitespace.children[0].text).toBe(`        <p>Test 1</p>\n        test2\n      `);\n    const comment = parse('<textarea><!--comment--></textarea>', options);\n    expect(comment.tag).toBe('textarea');\n    expect(comment.children.length).toBe(1);\n    expect(comment.children[0].type).toBe(3);\n    expect(comment.children[0].text).toBe('<!--comment-->');\n  }); // #5526","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"should not decode text in script tags","suites":["parser"],"line":489,"updatePoint":{"line":489,"column":43,"index":21285},"code":"  it('should not decode text in script tags', () => {\n    const options = extend({}, baseOptions);\n    const ast = parse(`<script type=\"x/template\">&gt;<foo>&lt;</script>`, options);\n    expect(ast.children[0].text).toBe(`&gt;<foo>&lt;`);\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"should ignore comments","suites":["parser"],"line":494,"updatePoint":{"line":494,"column":28,"index":21515},"code":"  it('should ignore comments', () => {\n    const options = extend({}, baseOptions);\n    const ast = parse(`<div>123<!--comment here--></div>`, options);\n    expect(ast.tag).toBe('div');\n    expect(ast.children.length).toBe(1);\n    expect(ast.children[0].type).toBe(3);\n    expect(ast.children[0].text).toBe('123');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"should kept comments","suites":["parser"],"line":502,"updatePoint":{"line":502,"column":26,"index":21834},"code":"  it('should kept comments', () => {\n    const options = extend({\n      comments: true\n    }, baseOptions);\n    const ast = parse(`<div>123<!--comment here--></div>`, options);\n    expect(ast.tag).toBe('div');\n    expect(ast.children.length).toBe(2);\n    expect(ast.children[0].type).toBe(3);\n    expect(ast.children[0].text).toBe('123');\n    expect(ast.children[1].type).toBe(3); // parse comment with ASTText\n\n    expect(ast.children[1].isComment).toBe(true); // parse comment with ASTText\n\n    expect(ast.children[1].text).toBe('comment here');\n  });","file":"unit/modules/compiler/parser.spec.js","skipped":false,"dir":"test"},{"name":"create on non-observables","suites":["Observer"],"line":6,"updatePoint":{"line":6,"column":31,"index":252},"code":"  it('create on non-observables', () => {\n    // skip primitive value\n    const ob1 = observe(1);\n    expect(ob1).toBeUndefined(); // avoid vue instance\n\n    const ob2 = observe(new Vue());\n    expect(ob2).toBeUndefined(); // avoid frozen objects\n\n    const ob3 = observe(Object.freeze({}));\n    expect(ob3).toBeUndefined();\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"create on object","suites":["Observer"],"line":17,"updatePoint":{"line":17,"column":22,"index":574},"code":"  it('create on object', () => {\n    // on object\n    const obj = {\n      a: {},\n      b: {}\n    };\n    const ob1 = observe(obj);\n    expect(ob1 instanceof Observer).toBe(true);\n    expect(ob1.value).toBe(obj);\n    expect(obj.__ob__).toBe(ob1); // should've walked children\n\n    expect(obj.a.__ob__ instanceof Observer).toBe(true);\n    expect(obj.b.__ob__ instanceof Observer).toBe(true); // should return existing ob on already observed objects\n\n    const ob2 = observe(obj);\n    expect(ob2).toBe(ob1);\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"create on null","suites":["Observer"],"line":34,"updatePoint":{"line":34,"column":20,"index":1082},"code":"  it('create on null', () => {\n    // on null\n    const obj = Object.create(null);\n    obj.a = {};\n    obj.b = {};\n    const ob1 = observe(obj);\n    expect(ob1 instanceof Observer).toBe(true);\n    expect(ob1.value).toBe(obj);\n    expect(obj.__ob__).toBe(ob1); // should've walked children\n\n    expect(obj.a.__ob__ instanceof Observer).toBe(true);\n    expect(obj.b.__ob__ instanceof Observer).toBe(true); // should return existing ob on already observed objects\n\n    const ob2 = observe(obj);\n    expect(ob2).toBe(ob1);\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"create on already observed object","suites":["Observer"],"line":50,"updatePoint":{"line":50,"column":39,"index":1626},"code":"  it('create on already observed object', () => {\n    // on object\n    const obj = {};\n    let val = 0;\n    let getCount = 0;\n    Object.defineProperty(obj, 'a', {\n      configurable: true,\n      enumerable: true,\n\n      get() {\n        getCount++;\n        return val;\n      },\n\n      set(v) {\n        val = v;\n      }\n\n    });\n    const ob1 = observe(obj);\n    expect(ob1 instanceof Observer).toBe(true);\n    expect(ob1.value).toBe(obj);\n    expect(obj.__ob__).toBe(ob1);\n    getCount = 0; // Each read of 'a' should result in only one get underlying get call\n\n    obj.a;\n    expect(getCount).toBe(1);\n    obj.a;\n    expect(getCount).toBe(2); // should return existing ob on already observed objects\n\n    const ob2 = observe(obj);\n    expect(ob2).toBe(ob1); // should call underlying setter\n\n    obj.a = 10;\n    expect(val).toBe(10);\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"create on property with only getter","suites":["Observer"],"line":86,"updatePoint":{"line":86,"column":41,"index":2469},"code":"  it('create on property with only getter', () => {\n    // on object\n    const obj = {};\n    Object.defineProperty(obj, 'a', {\n      configurable: true,\n      enumerable: true,\n\n      get() {\n        return 123;\n      }\n\n    });\n    const ob1 = observe(obj);\n    expect(ob1 instanceof Observer).toBe(true);\n    expect(ob1.value).toBe(obj);\n    expect(obj.__ob__).toBe(ob1); // should be able to read\n\n    expect(obj.a).toBe(123); // should return existing ob on already observed objects\n\n    const ob2 = observe(obj);\n    expect(ob2).toBe(ob1); // since there is no setter, you shouldn't be able to write to it\n    // PhantomJS throws when a property with no setter is set\n    // but other real browsers don't\n\n    try {\n      obj.a = 101;\n    } catch (e) {}\n\n    expect(obj.a).toBe(123);\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"create on property with only setter","suites":["Observer"],"line":116,"updatePoint":{"line":116,"column":41,"index":3264},"code":"  it('create on property with only setter', () => {\n    // on object\n    const obj = {};\n    let val = 10;\n    Object.defineProperty(obj, 'a', {\n      // eslint-disable-line accessor-pairs\n      configurable: true,\n      enumerable: true,\n\n      set(v) {\n        val = v;\n      }\n\n    });\n    const ob1 = observe(obj);\n    expect(ob1 instanceof Observer).toBe(true);\n    expect(ob1.value).toBe(obj);\n    expect(obj.__ob__).toBe(ob1); // reads should return undefined\n\n    expect(obj.a).toBe(undefined); // should return existing ob on already observed objects\n\n    const ob2 = observe(obj);\n    expect(ob2).toBe(ob1); // writes should call the set function\n\n    obj.a = 100;\n    expect(val).toBe(100);\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"create on property which is marked not configurable","suites":["Observer"],"line":143,"updatePoint":{"line":143,"column":57,"index":3988},"code":"  it('create on property which is marked not configurable', () => {\n    // on object\n    const obj = {};\n    Object.defineProperty(obj, 'a', {\n      configurable: false,\n      enumerable: true,\n      val: 10\n    });\n    const ob1 = observe(obj);\n    expect(ob1 instanceof Observer).toBe(true);\n    expect(ob1.value).toBe(obj);\n    expect(obj.__ob__).toBe(ob1);\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"create on array","suites":["Observer"],"line":156,"updatePoint":{"line":156,"column":21,"index":4319},"code":"  it('create on array', () => {\n    // on object\n    const arr = [{}, {}];\n    const ob1 = observe(arr);\n    expect(ob1 instanceof Observer).toBe(true);\n    expect(ob1.value).toBe(arr);\n    expect(arr.__ob__).toBe(ob1); // should've walked children\n\n    expect(arr[0].__ob__ instanceof Observer).toBe(true);\n    expect(arr[1].__ob__ instanceof Observer).toBe(true);\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"observing object prop change","suites":["Observer"],"line":167,"updatePoint":{"line":167,"column":34,"index":4704},"code":"  it('observing object prop change', () => {\n    const obj = {\n      a: {\n        b: 2\n      },\n      c: NaN\n    };\n    observe(obj); // mock a watcher!\n\n    const watcher = {\n      deps: [],\n\n      addDep(dep) {\n        this.deps.push(dep);\n        dep.addSub(this);\n      },\n\n      update: jasmine.createSpy()\n    }; // collect dep\n\n    Dep.target = watcher;\n    obj.a.b;\n    Dep.target = null;\n    expect(watcher.deps.length).toBe(3); // obj.a + a + a.b\n\n    obj.a.b = 3;\n    expect(watcher.update.calls.count()).toBe(1); // swap object\n\n    obj.a = {\n      b: 4\n    };\n    expect(watcher.update.calls.count()).toBe(2);\n    watcher.deps = [];\n    Dep.target = watcher;\n    obj.a.b;\n    obj.c;\n    Dep.target = null;\n    expect(watcher.deps.length).toBe(4); // set on the swapped object\n\n    obj.a.b = 5;\n    expect(watcher.update.calls.count()).toBe(3); // should not trigger on NaN -> NaN set\n\n    obj.c = NaN;\n    expect(watcher.update.calls.count()).toBe(3);\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"observing object prop change on defined property","suites":["Observer"],"line":212,"updatePoint":{"line":212,"column":54,"index":5695},"code":"  it('observing object prop change on defined property', () => {\n    const obj = {\n      val: 2\n    };\n    Object.defineProperty(obj, 'a', {\n      configurable: true,\n      enumerable: true,\n\n      get() {\n        return this.val;\n      },\n\n      set(v) {\n        this.val = v;\n        return this.val;\n      }\n\n    });\n    observe(obj); // mock a watcher!\n\n    const watcher = {\n      deps: [],\n      addDep: function (dep) {\n        this.deps.push(dep);\n        dep.addSub(this);\n      },\n      update: jasmine.createSpy()\n    }; // collect dep\n\n    Dep.target = watcher;\n    expect(obj.a).toBe(2); // Make sure 'this' is preserved\n\n    Dep.target = null;\n    obj.a = 3;\n    expect(obj.val).toBe(3); // make sure 'setter' was called\n\n    obj.val = 5;\n    expect(obj.a).toBe(5); // make sure 'getter' was called\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"observing set/delete","suites":["Observer"],"line":251,"updatePoint":{"line":251,"column":26,"index":6486},"code":"  it('observing set/delete', () => {\n    const obj1 = {\n      a: 1\n    };\n    const ob1 = observe(obj1);\n    const dep1 = ob1.dep;\n    spyOn(dep1, 'notify');\n    setProp(obj1, 'b', 2);\n    expect(obj1.b).toBe(2);\n    expect(dep1.notify.calls.count()).toBe(1);\n    delProp(obj1, 'a');\n    expect(hasOwn(obj1, 'a')).toBe(false);\n    expect(dep1.notify.calls.count()).toBe(2); // set existing key, should be a plain set and not\n    // trigger own ob's notify\n\n    setProp(obj1, 'b', 3);\n    expect(obj1.b).toBe(3);\n    expect(dep1.notify.calls.count()).toBe(2); // set non-existing key\n\n    setProp(obj1, 'c', 1);\n    expect(obj1.c).toBe(1);\n    expect(dep1.notify.calls.count()).toBe(3); // should ignore deleting non-existing key\n\n    delProp(obj1, 'a');\n    expect(dep1.notify.calls.count()).toBe(3); // should work on non-observed objects\n\n    const obj2 = {\n      a: 1\n    };\n    delProp(obj2, 'a');\n    expect(hasOwn(obj2, 'a')).toBe(false); // should work on Object.create(null)\n\n    const obj3 = Object.create(null);\n    obj3.a = 1;\n    const ob3 = observe(obj3);\n    const dep3 = ob3.dep;\n    spyOn(dep3, 'notify');\n    setProp(obj3, 'b', 2);\n    expect(obj3.b).toBe(2);\n    expect(dep3.notify.calls.count()).toBe(1);\n    delProp(obj3, 'a');\n    expect(hasOwn(obj3, 'a')).toBe(false);\n    expect(dep3.notify.calls.count()).toBe(2); // set and delete non-numeric key on array\n\n    const arr2 = ['a'];\n    const ob2 = observe(arr2);\n    const dep2 = ob2.dep;\n    spyOn(dep2, 'notify');\n    setProp(arr2, 'b', 2);\n    expect(arr2.b).toBe(2);\n    expect(dep2.notify.calls.count()).toBe(1);\n    delProp(arr2, 'b');\n    expect(hasOwn(arr2, 'b')).toBe(false);\n    expect(dep2.notify.calls.count()).toBe(2);\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"warning set/delete on a Vue instance","suites":["Observer"],"line":306,"updatePoint":{"line":306,"column":42,"index":8214},"code":"  it('warning set/delete on a Vue instance', done => {\n    const vm = new Vue({\n      template: '<div>{{a}}</div>',\n      data: {\n        a: 1\n      }\n    }).$mount();\n    expect(vm.$el.outerHTML).toBe('<div>1</div>');\n    Vue.set(vm, 'a', 2);\n    waitForUpdate(() => {\n      expect(vm.$el.outerHTML).toBe('<div>2</div>');\n      expect('Avoid adding reactive properties to a Vue instance').not.toHaveBeenWarned();\n      Vue.delete(vm, 'a');\n    }).then(() => {\n      expect('Avoid deleting properties on a Vue instance').toHaveBeenWarned();\n      expect(vm.$el.outerHTML).toBe('<div>2</div>');\n      Vue.set(vm, 'b', 123);\n      expect('Avoid adding reactive properties to a Vue instance').toHaveBeenWarned();\n    }).then(done);\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"warning set/delete on Vue instance root $data","suites":["Observer"],"line":326,"updatePoint":{"line":326,"column":51,"index":8958},"code":"  it('warning set/delete on Vue instance root $data', done => {\n    const data = {\n      a: 1\n    };\n    const vm = new Vue({\n      template: '<div>{{a}}</div>',\n      data\n    }).$mount();\n    expect(vm.$el.outerHTML).toBe('<div>1</div>');\n    expect(Vue.set(data, 'a', 2)).toBe(2);\n    waitForUpdate(() => {\n      expect(vm.$el.outerHTML).toBe('<div>2</div>');\n      expect('Avoid adding reactive properties to a Vue instance').not.toHaveBeenWarned();\n      Vue.delete(data, 'a');\n    }).then(() => {\n      expect('Avoid deleting properties on a Vue instance').toHaveBeenWarned();\n      expect(vm.$el.outerHTML).toBe('<div>2</div>');\n      expect(Vue.set(data, 'b', 123)).toBe(123);\n      expect('Avoid adding reactive properties to a Vue instance').toHaveBeenWarned();\n    }).then(done);\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"observing array mutation","suites":["Observer"],"line":347,"updatePoint":{"line":347,"column":30,"index":9734},"code":"  it('observing array mutation', () => {\n    const arr = [];\n    const ob = observe(arr);\n    const dep = ob.dep;\n    spyOn(dep, 'notify');\n    const objs = [{}, {}, {}];\n    arr.push(objs[0]);\n    arr.pop();\n    arr.unshift(objs[1]);\n    arr.shift();\n    arr.splice(0, 0, objs[2]);\n    arr.sort();\n    arr.reverse();\n    expect(dep.notify.calls.count()).toBe(7); // inserted elements should be observed\n\n    objs.forEach(obj => {\n      expect(obj.__ob__ instanceof Observer).toBe(true);\n    });\n  });","file":"unit/modules/observer/observer.spec.js","skipped":false,"dir":"test"},{"name":"queueWatcher","suites":["Scheduler"],"line":15,"updatePoint":{"line":15,"column":18,"index":337},"code":"  it('queueWatcher', done => {\n    queueWatcher({\n      run: spy\n    });\n    waitForUpdate(() => {\n      expect(spy.calls.count()).toBe(1);\n    }).then(done);\n  });","file":"unit/modules/observer/scheduler.spec.js","skipped":false,"dir":"test"},{"name":"dedup","suites":["Scheduler"],"line":23,"updatePoint":{"line":23,"column":11,"index":495},"code":"  it('dedup', done => {\n    queueWatcher({\n      id: 1,\n      run: spy\n    });\n    queueWatcher({\n      id: 1,\n      run: spy\n    });\n    waitForUpdate(() => {\n      expect(spy.calls.count()).toBe(1);\n    }).then(done);\n  });","file":"unit/modules/observer/scheduler.spec.js","skipped":false,"dir":"test"},{"name":"allow duplicate when flushing","suites":["Scheduler"],"line":36,"updatePoint":{"line":36,"column":35,"index":745},"code":"  it('allow duplicate when flushing', done => {\n    const job = {\n      id: 1,\n      run: spy\n    };\n    queueWatcher(job);\n    queueWatcher({\n      id: 2,\n\n      run() {\n        queueWatcher(job);\n      }\n\n    });\n    waitForUpdate(() => {\n      expect(spy.calls.count()).toBe(2);\n    }).then(done);\n  });","file":"unit/modules/observer/scheduler.spec.js","skipped":false,"dir":"test"},{"name":"call user watchers before component re-render","suites":["Scheduler"],"line":54,"updatePoint":{"line":54,"column":51,"index":1068},"code":"  it('call user watchers before component re-render', done => {\n    const calls = [];\n    const vm = new Vue({\n      data: {\n        a: 1\n      },\n      template: '<div>{{ a }}</div>',\n      watch: {\n        a() {\n          calls.push(1);\n        }\n\n      },\n\n      beforeUpdate() {\n        calls.push(2);\n      }\n\n    }).$mount();\n    vm.a = 2;\n    waitForUpdate(() => {\n      expect(calls).toEqual([1, 2]);\n    }).then(done);\n  });","file":"unit/modules/observer/scheduler.spec.js","skipped":false,"dir":"test"},{"name":"call user watcher triggered by component re-render immediately","suites":["Scheduler"],"line":78,"updatePoint":{"line":78,"column":68,"index":1519},"code":"  it('call user watcher triggered by component re-render immediately', done => {\n    // this happens when a component re-render updates the props of a child\n    const calls = [];\n    const vm = new Vue({\n      data: {\n        a: 1\n      },\n      watch: {\n        a() {\n          calls.push(1);\n        }\n\n      },\n\n      beforeUpdate() {\n        calls.push(2);\n      },\n\n      template: '<div><test :a=\"a\"></test></div>',\n      components: {\n        test: {\n          props: ['a'],\n          template: '<div>{{ a }}</div>',\n          watch: {\n            a() {\n              calls.push(3);\n            }\n\n          },\n\n          beforeUpdate() {\n            calls.push(4);\n          }\n\n        }\n      }\n    }).$mount();\n    vm.a = 2;\n    waitForUpdate(() => {\n      expect(calls).toEqual([1, 2, 3, 4]);\n    }).then(done);\n  });","file":"unit/modules/observer/scheduler.spec.js","skipped":false,"dir":"test"},{"name":"warn against infinite update loops","suites":["Scheduler"],"line":120,"updatePoint":{"line":120,"column":40,"index":2320},"code":"  it('warn against infinite update loops', function (done) {\n    let count = 0;\n    const job = {\n      id: 1,\n\n      run() {\n        count++;\n        queueWatcher(job);\n      }\n\n    };\n    queueWatcher(job);\n    waitForUpdate(() => {\n      expect(count).toBe(MAX_UPDATE_COUNT + 1);\n      expect('infinite update loop').toHaveBeenWarned();\n    }).then(done);\n  });","file":"unit/modules/observer/scheduler.spec.js","skipped":false,"dir":"test"},{"name":"should call newly pushed watcher after current watcher is done","suites":["Scheduler"],"line":137,"updatePoint":{"line":137,"column":68,"index":2713},"code":"  it('should call newly pushed watcher after current watcher is done', done => {\n    const callOrder = [];\n    queueWatcher({\n      id: 1,\n      user: true,\n\n      run() {\n        callOrder.push(1);\n        queueWatcher({\n          id: 2,\n\n          run() {\n            callOrder.push(3);\n          }\n\n        });\n        callOrder.push(2);\n      }\n\n    });\n    waitForUpdate(() => {\n      expect(callOrder).toEqual([1, 2, 3]);\n    }).then(done);\n  }); // Github issue #5191","file":"unit/modules/observer/scheduler.spec.js","skipped":false,"dir":"test"},{"name":"emit should work when updated hook called","suites":["Scheduler"],"line":162,"updatePoint":{"line":162,"column":47,"index":3168},"code":"  it('emit should work when updated hook called', done => {\n    const el = document.createElement('div');\n    const vm = new Vue({\n      template: `<div><child @change=\"bar\" :foo=\"foo\"></child></div>`,\n      data: {\n        foo: 0\n      },\n      methods: {\n        bar: spy\n      },\n      components: {\n        child: {\n          template: `<div>{{foo}}</div>`,\n          props: ['foo'],\n\n          updated() {\n            this.$emit('change');\n          }\n\n        }\n      }\n    }).$mount(el);\n    vm.$nextTick(() => {\n      vm.foo = 1;\n      vm.$nextTick(() => {\n        expect(vm.$el.innerHTML).toBe('<div>1</div>');\n        expect(spy).toHaveBeenCalled();\n        done();\n      });\n    });\n  });","file":"unit/modules/observer/scheduler.spec.js","skipped":false,"dir":"test"},{"name":"path","suites":["Watcher"],"line":20,"updatePoint":{"line":20,"column":10,"index":381},"code":"  it('path', done => {\n    const watcher = new Watcher(vm, 'b.c', spy);\n    expect(watcher.value).toBe(2);\n    vm.b.c = 3;\n    waitForUpdate(() => {\n      expect(watcher.value).toBe(3);\n      expect(spy).toHaveBeenCalledWith(3, 2);\n      vm.b = {\n        c: 4\n      }; // swapping the object\n    }).then(() => {\n      expect(watcher.value).toBe(4);\n      expect(spy).toHaveBeenCalledWith(4, 3);\n    }).then(done);\n  });","file":"unit/modules/observer/watcher.spec.js","skipped":false,"dir":"test"},{"name":"non-existent path, set later","suites":["Watcher"],"line":35,"updatePoint":{"line":35,"column":34,"index":825},"code":"  it('non-existent path, set later', done => {\n    const watcher1 = new Watcher(vm, 'b.e', spy);\n    expect(watcher1.value).toBeUndefined(); // check $add should not affect isolated children\n\n    const child2 = new Vue({\n      parent: vm\n    });\n    const watcher2 = new Watcher(child2, 'b.e', spy);\n    expect(watcher2.value).toBeUndefined();\n    Vue.set(vm.b, 'e', 123);\n    waitForUpdate(() => {\n      expect(watcher1.value).toBe(123);\n      expect(watcher2.value).toBeUndefined();\n      expect(spy.calls.count()).toBe(1);\n      expect(spy).toHaveBeenCalledWith(123, undefined);\n    }).then(done);\n  });","file":"unit/modules/observer/watcher.spec.js","skipped":false,"dir":"test"},{"name":"delete","suites":["Watcher"],"line":52,"updatePoint":{"line":52,"column":12,"index":1410},"code":"  it('delete', done => {\n    const watcher = new Watcher(vm, 'b.c', spy);\n    expect(watcher.value).toBe(2);\n    Vue.delete(vm.b, 'c');\n    waitForUpdate(() => {\n      expect(watcher.value).toBeUndefined();\n      expect(spy).toHaveBeenCalledWith(undefined, 2);\n    }).then(done);\n  });","file":"unit/modules/observer/watcher.spec.js","skipped":false,"dir":"test"},{"name":"path containing $data","suites":["Watcher"],"line":61,"updatePoint":{"line":61,"column":27,"index":1711},"code":"  it('path containing $data', done => {\n    const watcher = new Watcher(vm, '$data.b.c', spy);\n    expect(watcher.value).toBe(2);\n    vm.b = {\n      c: 3\n    };\n    waitForUpdate(() => {\n      expect(watcher.value).toBe(3);\n      expect(spy).toHaveBeenCalledWith(3, 2);\n      vm.$data.b.c = 4;\n    }).then(() => {\n      expect(watcher.value).toBe(4);\n      expect(spy).toHaveBeenCalledWith(4, 3);\n    }).then(done);\n  });","file":"unit/modules/observer/watcher.spec.js","skipped":false,"dir":"test"},{"name":"deep watch","suites":["Watcher"],"line":76,"updatePoint":{"line":76,"column":16,"index":2122},"code":"  it('deep watch', done => {\n    let oldB;\n    new Watcher(vm, 'b', spy, {\n      deep: true\n    });\n    vm.b.c = {\n      d: 4\n    };\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith(vm.b, vm.b);\n      oldB = vm.b;\n      vm.b = {\n        c: [{\n          a: 1\n        }]\n      };\n    }).then(() => {\n      expect(spy).toHaveBeenCalledWith(vm.b, oldB);\n      expect(spy.calls.count()).toBe(2);\n      vm.b.c[0].a = 2;\n    }).then(() => {\n      expect(spy).toHaveBeenCalledWith(vm.b, vm.b);\n      expect(spy.calls.count()).toBe(3);\n    }).then(done);\n  });","file":"unit/modules/observer/watcher.spec.js","skipped":false,"dir":"test"},{"name":"deep watch $data","suites":["Watcher"],"line":101,"updatePoint":{"line":101,"column":22,"index":2696},"code":"  it('deep watch $data', done => {\n    new Watcher(vm, '$data', spy, {\n      deep: true\n    });\n    vm.b.c = 3;\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith(vm.$data, vm.$data);\n    }).then(done);\n  });","file":"unit/modules/observer/watcher.spec.js","skipped":false,"dir":"test"},{"name":"deep watch with circular references","suites":["Watcher"],"line":110,"updatePoint":{"line":110,"column":41,"index":2938},"code":"  it('deep watch with circular references', done => {\n    new Watcher(vm, 'b', spy, {\n      deep: true\n    });\n    Vue.set(vm.b, '_', vm.b);\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith(vm.b, vm.b);\n      expect(spy.calls.count()).toBe(1);\n      vm.b._.c = 1;\n    }).then(() => {\n      expect(spy).toHaveBeenCalledWith(vm.b, vm.b);\n      expect(spy.calls.count()).toBe(2);\n    }).then(done);\n  });","file":"unit/modules/observer/watcher.spec.js","skipped":false,"dir":"test"},{"name":"fire change for prop addition/deletion in non-deep mode","suites":["Watcher"],"line":124,"updatePoint":{"line":124,"column":61,"index":3376},"code":"  it('fire change for prop addition/deletion in non-deep mode', done => {\n    new Watcher(vm, 'b', spy);\n    Vue.set(vm.b, 'e', 123);\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith(vm.b, vm.b);\n      expect(spy.calls.count()).toBe(1);\n      Vue.delete(vm.b, 'e');\n    }).then(() => {\n      expect(spy.calls.count()).toBe(2);\n    }).then(done);\n  });","file":"unit/modules/observer/watcher.spec.js","skipped":false,"dir":"test"},{"name":"watch function","suites":["Watcher"],"line":135,"updatePoint":{"line":135,"column":20,"index":3703},"code":"  it('watch function', done => {\n    const watcher = new Watcher(vm, function () {\n      return this.a + this.b.d;\n    }, spy);\n    expect(watcher.value).toBe(5);\n    vm.a = 2;\n    waitForUpdate(() => {\n      expect(spy).toHaveBeenCalledWith(6, 5);\n      vm.b = {\n        d: 2\n      };\n    }).then(() => {\n      expect(spy).toHaveBeenCalledWith(4, 6);\n    }).then(done);\n  });","file":"unit/modules/observer/watcher.spec.js","skipped":false,"dir":"test"},{"name":"lazy mode","suites":["Watcher"],"line":150,"updatePoint":{"line":150,"column":15,"index":4075},"code":"  it('lazy mode', done => {\n    const watcher = new Watcher(vm, function () {\n      return this.a + this.b.d;\n    }, null, {\n      lazy: true\n    });\n    expect(watcher.lazy).toBe(true);\n    expect(watcher.value).toBeUndefined();\n    expect(watcher.dirty).toBe(true);\n    watcher.evaluate();\n    expect(watcher.value).toBe(5);\n    expect(watcher.dirty).toBe(false);\n    vm.a = 2;\n    waitForUpdate(() => {\n      expect(watcher.value).toBe(5);\n      expect(watcher.dirty).toBe(true);\n      watcher.evaluate();\n      expect(watcher.value).toBe(6);\n      expect(watcher.dirty).toBe(false);\n    }).then(done);\n  });","file":"unit/modules/observer/watcher.spec.js","skipped":false,"dir":"test"},{"name":"teardown","suites":["Watcher"],"line":171,"updatePoint":{"line":171,"column":14,"index":4686},"code":"  it('teardown', done => {\n    const watcher = new Watcher(vm, 'b.c', spy);\n    watcher.teardown();\n    vm.b.c = 3;\n    waitForUpdate(() => {\n      expect(watcher.active).toBe(false);\n      expect(spy).not.toHaveBeenCalled();\n    }).then(done);\n  });","file":"unit/modules/observer/watcher.spec.js","skipped":false,"dir":"test"},{"name":"warn not support path","suites":["Watcher"],"line":180,"updatePoint":{"line":180,"column":27,"index":4950},"code":"  it('warn not support path', () => {\n    new Watcher(vm, 'd.e + c', spy);\n    expect('Failed watching path:').toHaveBeenWarned();\n  });","file":"unit/modules/observer/watcher.spec.js","skipped":false,"dir":"test"},{"name":"should parse","suites":["Single File Component parser"],"line":3,"updatePoint":{"line":3,"column":18,"index":113},"code":"  it('should parse', () => {\n    const res = parseComponent(`\n      <template>\n        <div>hi</div>\n      </template>\n      <style src=\"./test.css\"></style>\n      <style lang=\"stylus\" scoped>\n        h1\n          color red\n        h2\n          color green\n      </style>\n      <style module>\n        h1 { font-weight: bold }\n      </style>\n      <style bool-attr val-attr=\"test\"></style>\n      <script>\n        export default {}\n      </script>\n      <div>\n        <style>nested should be ignored</style>\n      </div>\n    `);\n    expect(res.template.content.trim()).toBe('<div>hi</div>');\n    expect(res.styles.length).toBe(4);\n    expect(res.styles[0].src).toBe('./test.css');\n    expect(res.styles[1].lang).toBe('stylus');\n    expect(res.styles[1].scoped).toBe(true);\n    expect(res.styles[1].content.trim()).toBe('h1\\n  color red\\nh2\\n  color green');\n    expect(res.styles[2].module).toBe(true);\n    expect(res.styles[3].attrs['bool-attr']).toBe(true);\n    expect(res.styles[3].attrs['val-attr']).toBe('test');\n    expect(res.script.content.trim()).toBe('export default {}');\n  });","file":"unit/modules/sfc/sfc-parser.spec.js","skipped":false,"dir":"test"},{"name":"should parse template with closed input","suites":["Single File Component parser"],"line":37,"updatePoint":{"line":37,"column":45,"index":1227},"code":"  it('should parse template with closed input', () => {\n    const res = parseComponent(`\n      <template>\n        <input type=\"text\"/>\n      </template>\n    `);\n    expect(res.template.content.trim()).toBe('<input type=\"text\"/>');\n  });","file":"unit/modules/sfc/sfc-parser.spec.js","skipped":false,"dir":"test"},{"name":"should handle nested template","suites":["Single File Component parser"],"line":45,"updatePoint":{"line":45,"column":35,"index":1454},"code":"  it('should handle nested template', () => {\n    const res = parseComponent(`\n      <template>\n        <div><template v-if=\"ok\">hi</template></div>\n      </template>\n    `);\n    expect(res.template.content.trim()).toBe('<div><template v-if=\"ok\">hi</template></div>');\n  });","file":"unit/modules/sfc/sfc-parser.spec.js","skipped":false,"dir":"test"},{"name":"pad content","suites":["Single File Component parser"],"line":53,"updatePoint":{"line":53,"column":17,"index":1711},"code":"  it('pad content', () => {\n    const content = `\n      <template>\n        <div></div>\n      </template>\n      <script>\n        export default {}\n      </script>\n      <style>\n        h1 { color: red }\n      </style>\n`;\n    const padDefault = parseComponent(content.trim(), {\n      pad: true\n    });\n    const padLine = parseComponent(content.trim(), {\n      pad: 'line'\n    });\n    const padSpace = parseComponent(content.trim(), {\n      pad: 'space'\n    });\n    expect(padDefault.script.content).toBe(Array(3 + 1).join('//\\n') + '\\nexport default {}\\n');\n    expect(padDefault.styles[0].content).toBe(Array(6 + 1).join('\\n') + '\\nh1 { color: red }\\n');\n    expect(padLine.script.content).toBe(Array(3 + 1).join('//\\n') + '\\nexport default {}\\n');\n    expect(padLine.styles[0].content).toBe(Array(6 + 1).join('\\n') + '\\nh1 { color: red }\\n');\n    expect(padSpace.script.content).toBe(`<template>\n        <div></div>\n      </template>\n      <script>`.replace(/./g, ' ') + '\\nexport default {}\\n');\n    expect(padSpace.styles[0].content).toBe(`<template>\n        <div></div>\n      </template>\n      <script>\n        export default {}\n      </script>\n      <style>`.replace(/./g, ' ') + '\\nh1 { color: red }\\n');\n  });","file":"unit/modules/sfc/sfc-parser.spec.js","skipped":false,"dir":"test"},{"name":"should handle template blocks with lang as special text","suites":["Single File Component parser"],"line":90,"updatePoint":{"line":90,"column":61,"index":2972},"code":"  it('should handle template blocks with lang as special text', () => {\n    const res = parseComponent(`\n      <template lang=\"pug\">\n        div\n          h1(v-if='1 < 2') hello\n      </template>\n    `);\n    expect(res.template.content.trim()).toBe(`div\\n  h1(v-if='1 < 2') hello`);\n  });","file":"unit/modules/sfc/sfc-parser.spec.js","skipped":false,"dir":"test"},{"name":"should handle component contains \"<\" only","suites":["Single File Component parser"],"line":99,"updatePoint":{"line":99,"column":47,"index":3247},"code":"  it('should handle component contains \"<\" only', () => {\n    const res = parseComponent(`\n      <template>\n        <span><</span>\n      </template>\n    `);\n    expect(res.template.content.trim()).toBe(`<span><</span>`);\n  });","file":"unit/modules/sfc/sfc-parser.spec.js","skipped":false,"dir":"test"},{"name":"should handle custom blocks without parsing them","suites":["Single File Component parser"],"line":107,"updatePoint":{"line":107,"column":54,"index":3481},"code":"  it('should handle custom blocks without parsing them', () => {\n    const res = parseComponent(`\n      <template>\n        <div></div>\n      </template>\n      <example name=\"simple\">\n        <my-button ref=\"button\">Hello</my-button>\n      </example>\n      <example name=\"with props\">\n        <my-button color=\"red\">Hello</my-button>\n      </example>\n      <test name=\"simple\" foo=\"bar\">\n      export default function simple (vm) {\n        describe('Hello', () => {\n          it('should display Hello', () => {\n            this.vm.$refs.button.$el.innerText.should.equal('Hello')\n          }))\n        }))\n      }\n      </test>\n    `);\n    expect(res.customBlocks.length).toBe(3);\n    const simpleExample = res.customBlocks[0];\n    expect(simpleExample.type).toBe('example');\n    expect(simpleExample.content.trim()).toBe('<my-button ref=\"button\">Hello</my-button>');\n    expect(simpleExample.attrs.name).toBe('simple');\n    const withProps = res.customBlocks[1];\n    expect(withProps.type).toBe('example');\n    expect(withProps.content.trim()).toBe('<my-button color=\"red\">Hello</my-button>');\n    expect(withProps.attrs.name).toBe('with props');\n    const simpleTest = res.customBlocks[2];\n    expect(simpleTest.type).toBe('test');\n    expect(simpleTest.content.trim()).toBe(`export default function simple (vm) {\n  describe('Hello', () => {\n    it('should display Hello', () => {\n      this.vm.$refs.button.$el.innerText.should.equal('Hello')\n    }))\n  }))\n}`);\n    expect(simpleTest.attrs.name).toBe('simple');\n    expect(simpleTest.attrs.foo).toBe('bar');\n  }); // Regression #4289","file":"unit/modules/sfc/sfc-parser.spec.js","skipped":false,"dir":"test"},{"name":"accepts nested template tag","suites":["Single File Component parser"],"line":150,"updatePoint":{"line":150,"column":33,"index":5047},"code":"  it('accepts nested template tag', () => {\n    const raw = `<div>\n      <template v-if=\"true === true\">\n        <section class=\"section\">\n          <div class=\"container\">\n            Should be shown\n          </div>\n        </section>\n      </template>\n      <template v-else>\n        <p>Should not be shown</p>\n      </template>\n    </div>`;\n    const res = parseComponent(`<template>${raw}</template>`);\n    expect(res.template.content.trim()).toBe(raw);\n  });","file":"unit/modules/sfc/sfc-parser.spec.js","skipped":false,"dir":"test"},{"name":"should not hang on trailing text","suites":["Single File Component parser"],"line":166,"updatePoint":{"line":166,"column":38,"index":5517},"code":"  it('should not hang on trailing text', () => {\n    const res = parseComponent(`<template>hi</`);\n    expect(res.template.content).toBe('hi');\n  });","file":"unit/modules/sfc/sfc-parser.spec.js","skipped":false,"dir":"test"},{"name":"accepts a callback","suites":["nextTick"],"line":3,"updatePoint":{"line":3,"column":24,"index":96},"code":"  it('accepts a callback', done => {\n    nextTick(done);\n  });","file":"unit/modules/util/next-tick.spec.js","skipped":false,"dir":"test"},{"name":"returns undefined when passed a callback","suites":["nextTick"],"line":6,"updatePoint":{"line":6,"column":46,"index":181},"code":"  it('returns undefined when passed a callback', () => {\n    expect(nextTick(() => {})).toBeUndefined();\n  });","file":"unit/modules/util/next-tick.spec.js","skipped":false,"dir":"test"},{"name":"returns a Promise when provided no callback","suites":["nextTick"],"line":11,"updatePoint":{"line":11,"column":51,"index":338},"code":"    it('returns a Promise when provided no callback', done => {\n      nextTick().then(done);\n    });","file":"unit/modules/util/next-tick.spec.js","skipped":false,"dir":"test"},{"name":"returns a Promise with a context argument when provided a falsy callback and an object","suites":["nextTick"],"line":14,"updatePoint":{"line":14,"column":94,"index":482},"code":"    it('returns a Promise with a context argument when provided a falsy callback and an object', done => {\n      const obj = {};\n      nextTick(undefined, obj).then(ctx => {\n        expect(ctx).toBe(obj);\n        done();\n      });\n    });","file":"unit/modules/util/next-tick.spec.js","skipped":false,"dir":"test"},{"name":"returned Promise should resolve correctly vs callback","suites":["nextTick"],"line":21,"updatePoint":{"line":21,"column":61,"index":688},"code":"    it('returned Promise should resolve correctly vs callback', done => {\n      const spy = jasmine.createSpy();\n      nextTick(spy);\n      nextTick().then(() => {\n        expect(spy).toHaveBeenCalled();\n        done();\n      });\n    });","file":"unit/modules/util/next-tick.spec.js","skipped":false,"dir":"test"},{"name":"create a component basically","suites":["create-component"],"line":18,"updatePoint":{"line":18,"column":34,"index":379},"code":"  it('create a component basically', () => {\n    const child = {\n      name: 'child',\n      props: ['msg'],\n\n      render() {}\n\n    };\n    const init = jasmine.createSpy();\n    const data = {\n      props: {\n        msg: 'hello world'\n      },\n      attrs: {\n        id: 1\n      },\n      staticAttrs: {\n        class: 'foo'\n      },\n      hook: {\n        init\n      },\n      on: {\n        notify: 'onNotify'\n      }\n    };\n    const vnode = createComponent(child, data, vm, vm);\n    expect(vnode.tag).toMatch(/vue-component-[0-9]+-child/);\n    expect(vnode.data.attrs).toEqual({\n      id: 1\n    });\n    expect(vnode.data.staticAttrs).toEqual({\n      class: 'foo'\n    });\n    expect(vnode.componentOptions.propsData).toEqual({\n      msg: 'hello world'\n    });\n    expect(vnode.componentOptions.listeners).toEqual({\n      notify: 'onNotify'\n    });\n    expect(vnode.children).toBeUndefined();\n    expect(vnode.text).toBeUndefined();\n    expect(vnode.elm).toBeUndefined();\n    expect(vnode.ns).toBeUndefined();\n    expect(vnode.context).toEqual(vm);\n    vnode.data.hook.init(vnode);\n    expect(init.calls.argsFor(0)[0]).toBe(vnode);\n  });","file":"unit/modules/vdom/create-component.spec.js","skipped":false,"dir":"test"},{"name":"create a component when resolved with async loading","suites":["create-component"],"line":66,"updatePoint":{"line":66,"column":57,"index":1537},"code":"  it('create a component when resolved with async loading', done => {\n    let vnode = null;\n    const data = {\n      props: {},\n      staticAttrs: {\n        class: 'foo'\n      }\n    };\n    spyOn(vm, '$forceUpdate');\n\n    function async(resolve, reject) {\n      setTimeout(() => {\n        resolve({\n          name: 'child',\n          props: ['msg']\n        });\n        Vue.nextTick(loaded);\n      }, 0);\n    }\n\n    function go() {\n      vnode = createComponent(async, data, vm, vm);\n      expect(vnode.isComment).toBe(true); // not to be loaded yet.\n\n      expect(vnode.asyncFactory).toBe(async);\n    }\n\n    function loaded() {\n      vnode = createComponent(async, data, vm, vm);\n      expect(vnode.tag).toMatch(/vue-component-[0-9]+-child/);\n      expect(vnode.data.staticAttrs).toEqual({\n        class: 'foo'\n      });\n      expect(vnode.children).toBeUndefined();\n      expect(vnode.text).toBeUndefined();\n      expect(vnode.elm).toBeUndefined();\n      expect(vnode.ns).toBeUndefined();\n      expect(vnode.context).toEqual(vm);\n      expect(vm.$forceUpdate).toHaveBeenCalled();\n      done();\n    }\n\n    go();\n  });","file":"unit/modules/vdom/create-component.spec.js","skipped":false,"dir":"test"},{"name":"not create a component when rejected with async loading","suites":["create-component"],"line":110,"updatePoint":{"line":110,"column":61,"index":2658},"code":"  it('not create a component when rejected with async loading', done => {\n    let vnode = null;\n    const data = {\n      props: {\n        msg: 'hello world'\n      },\n      attrs: {\n        id: 1\n      }\n    };\n    const reason = 'failed!!';\n\n    function async(resolve, reject) {\n      setTimeout(() => {\n        reject(reason);\n        Vue.nextTick(failed);\n      }, 0);\n    }\n\n    function go() {\n      vnode = createComponent(async, data, vm, vm);\n      expect(vnode.isComment).toBe(true); // not to be loaded yet.\n    }\n\n    function failed() {\n      vnode = createComponent(async, data, vm, vm);\n      expect(vnode.isComment).toBe(true); // failed, still a comment node\n\n      expect(`Failed to resolve async component: ${async}\\nReason: ${reason}`).toHaveBeenWarned();\n      done();\n    }\n\n    go();\n  });","file":"unit/modules/vdom/create-component.spec.js","skipped":false,"dir":"test"},{"name":"not create a component when specified with falsy","suites":["create-component"],"line":144,"updatePoint":{"line":144,"column":54,"index":3463},"code":"  it('not create a component when specified with falsy', () => {\n    const vnode = createComponent(null, {}, vm, vm);\n    expect(vnode).toBeUndefined();\n  });","file":"unit/modules/vdom/create-component.spec.js","skipped":false,"dir":"test"},{"name":"warn component definition type","suites":["create-component"],"line":148,"updatePoint":{"line":148,"column":36,"index":3604},"code":"  it('warn component definition type', () => {\n    const Ctor = 'child';\n    const vnode = createComponent(Ctor, {}, vm, vm);\n    expect(vnode).toBeUndefined();\n    expect(`Invalid Component definition: ${Ctor}`).toHaveBeenWarned();\n  });","file":"unit/modules/vdom/create-component.spec.js","skipped":false,"dir":"test"},{"name":"render vnode with basic reserved tag using createElement","suites":["create-element"],"line":4,"updatePoint":{"line":4,"column":62,"index":173},"code":"  it('render vnode with basic reserved tag using createElement', () => {\n    const vm = new Vue({\n      data: {\n        msg: 'hello world'\n      }\n    });\n    const h = vm.$createElement;\n    const vnode = h('p', {});\n    expect(vnode.tag).toBe('p');\n    expect(vnode.data).toEqual({});\n    expect(vnode.children).toBeUndefined();\n    expect(vnode.text).toBeUndefined();\n    expect(vnode.elm).toBeUndefined();\n    expect(vnode.ns).toBeUndefined();\n    expect(vnode.context).toEqual(vm);\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"render vnode with component using createElement","suites":["create-element"],"line":20,"updatePoint":{"line":20,"column":53,"index":657},"code":"  it('render vnode with component using createElement', () => {\n    const vm = new Vue({\n      data: {\n        message: 'hello world'\n      },\n      components: {\n        'my-component': {\n          props: ['msg']\n        }\n      }\n    });\n    const h = vm.$createElement;\n    const vnode = h('my-component', {\n      props: {\n        msg: vm.message\n      }\n    });\n    expect(vnode.tag).toMatch(/vue-component-[0-9]+/);\n    expect(vnode.componentOptions.propsData).toEqual({\n      msg: vm.message\n    });\n    expect(vnode.children).toBeUndefined();\n    expect(vnode.text).toBeUndefined();\n    expect(vnode.elm).toBeUndefined();\n    expect(vnode.ns).toBeUndefined();\n    expect(vnode.context).toEqual(vm);\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"render vnode with custom tag using createElement","suites":["create-element"],"line":47,"updatePoint":{"line":47,"column":54,"index":1370},"code":"  it('render vnode with custom tag using createElement', () => {\n    const vm = new Vue({\n      data: {\n        msg: 'hello world'\n      }\n    });\n    const h = vm.$createElement;\n    const tag = 'custom-tag';\n    const vnode = h(tag, {});\n    expect(vnode.tag).toBe('custom-tag');\n    expect(vnode.data).toEqual({});\n    expect(vnode.children).toBeUndefined();\n    expect(vnode.text).toBeUndefined();\n    expect(vnode.elm).toBeUndefined();\n    expect(vnode.ns).toBeUndefined();\n    expect(vnode.context).toEqual(vm);\n    expect(vnode.componentOptions).toBeUndefined();\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"render empty vnode with falsy tag using createElement","suites":["create-element"],"line":65,"updatePoint":{"line":65,"column":59,"index":1951},"code":"  it('render empty vnode with falsy tag using createElement', () => {\n    const vm = new Vue({\n      data: {\n        msg: 'hello world'\n      }\n    });\n    const h = vm.$createElement;\n    const vnode = h(null, {});\n    expect(vnode).toEqual(createEmptyVNode());\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"render vnode with not string tag using createElement","suites":["create-element"],"line":75,"updatePoint":{"line":75,"column":58,"index":2219},"code":"  it('render vnode with not string tag using createElement', () => {\n    const vm = new Vue({\n      data: {\n        msg: 'hello world'\n      }\n    });\n    const h = vm.$createElement;\n    const vnode = h(Vue.extend({\n      // Component class\n      props: ['msg']\n    }), {\n      props: {\n        msg: vm.message\n      }\n    });\n    expect(vnode.tag).toMatch(/vue-component-[0-9]+/);\n    expect(vnode.componentOptions.propsData).toEqual({\n      msg: vm.message\n    });\n    expect(vnode.children).toBeUndefined();\n    expect(vnode.text).toBeUndefined();\n    expect(vnode.elm).toBeUndefined();\n    expect(vnode.ns).toBeUndefined();\n    expect(vnode.context).toEqual(vm);\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"render vnode with createElement with children","suites":["create-element"],"line":100,"updatePoint":{"line":100,"column":51,"index":2886},"code":"  it('render vnode with createElement with children', () => {\n    const vm = new Vue({});\n    const h = vm.$createElement;\n    const vnode = h('p', void 0, [h('br'), 'hello world', h('br')]);\n    expect(vnode.children[0].tag).toBe('br');\n    expect(vnode.children[1].text).toBe('hello world');\n    expect(vnode.children[2].tag).toBe('br');\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"render vnode with children, omitting data","suites":["create-element"],"line":108,"updatePoint":{"line":108,"column":47,"index":3228},"code":"  it('render vnode with children, omitting data', () => {\n    const vm = new Vue({});\n    const h = vm.$createElement;\n    const vnode = h('p', [h('br'), 'hello world', h('br')]);\n    expect(vnode.children[0].tag).toBe('br');\n    expect(vnode.children[1].text).toBe('hello world');\n    expect(vnode.children[2].tag).toBe('br');\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"render vnode with children, including boolean and null type","suites":["create-element"],"line":116,"updatePoint":{"line":116,"column":65,"index":3580},"code":"  it('render vnode with children, including boolean and null type', () => {\n    const vm = new Vue({});\n    const h = vm.$createElement;\n    const vnode = h('p', [h('br'), true, 123, h('br'), 'abc', null]);\n    expect(vnode.children.length).toBe(4);\n    expect(vnode.children[0].tag).toBe('br');\n    expect(vnode.children[1].text).toBe('123');\n    expect(vnode.children[2].tag).toBe('br');\n    expect(vnode.children[3].text).toBe('abc');\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"render svg elements with correct namespace","suites":["create-element"],"line":126,"updatePoint":{"line":126,"column":48,"index":4007},"code":"  it('render svg elements with correct namespace', () => {\n    const vm = new Vue({});\n    const h = vm.$createElement;\n    const vnode = h('svg', [h('a', [h('foo', [h('bar')])])]);\n    expect(vnode.ns).toBe('svg'); // should apply ns to children recursively\n\n    expect(vnode.children[0].ns).toBe('svg');\n    expect(vnode.children[0].children[0].ns).toBe('svg');\n    expect(vnode.children[0].children[0].children[0].ns).toBe('svg');\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"render MathML elements with correct namespace","suites":["create-element"],"line":136,"updatePoint":{"line":136,"column":51,"index":4450},"code":"  it('render MathML elements with correct namespace', () => {\n    const vm = new Vue({});\n    const h = vm.$createElement;\n    const vnode = h('math', [h('matrix')]);\n    expect(vnode.ns).toBe('math'); // should apply ns to children\n\n    expect(vnode.children[0].ns).toBe('math'); // although not explicitly listed, elements nested under <math>\n    // should not be treated as component\n\n    expect(vnode.children[0].componentOptions).toBeUndefined();\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"render svg foreignObject with correct namespace","suites":["create-element"],"line":147,"updatePoint":{"line":147,"column":53,"index":4910},"code":"  it('render svg foreignObject with correct namespace', () => {\n    const vm = new Vue({});\n    const h = vm.$createElement;\n    const vnode = h('svg', [h('foreignObject', [h('p')])]);\n    expect(vnode.ns).toBe('svg');\n    expect(vnode.children[0].ns).toBe('svg');\n    expect(vnode.children[0].children[0].ns).toBeUndefined();\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"warn observed data objects","suites":["create-element"],"line":155,"updatePoint":{"line":155,"column":32,"index":5222},"code":"  it('warn observed data objects', () => {\n    new Vue({\n      data: {\n        data: {}\n      },\n\n      render(h) {\n        return h('div', this.data);\n      }\n\n    }).$mount();\n    expect('Avoid using observed data object as vnode data').toHaveBeenWarned();\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"warn non-primitive key","suites":["create-element"],"line":168,"updatePoint":{"line":168,"column":28,"index":5483},"code":"  it('warn non-primitive key', () => {\n    new Vue({\n      render(h) {\n        return h('div', {\n          key: {}\n        });\n      }\n\n    }).$mount();\n    expect('Avoid using non-primitive value as key').toHaveBeenWarned();\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"nested child elements should be updated correctly","suites":["create-element"],"line":179,"updatePoint":{"line":179,"column":55,"index":5742},"code":"  it('nested child elements should be updated correctly', done => {\n    const vm = new Vue({\n      data: {\n        n: 1\n      },\n\n      render(h) {\n        const list = [];\n\n        for (let i = 0; i < this.n; i++) {\n          list.push(h('span', i));\n        }\n\n        const input = h('input', {\n          attrs: {\n            value: 'a',\n            type: 'text'\n          }\n        });\n        return h('div', [[...list, input]]);\n      }\n\n    }).$mount();\n    expect(vm.$el.innerHTML).toContain('<span>0</span><input');\n    const el = vm.$el.querySelector('input');\n    el.value = 'b';\n    vm.n++;\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toContain('<span>0</span><span>1</span><input');\n      expect(vm.$el.querySelector('input')).toBe(el);\n      expect(vm.$el.querySelector('input').value).toBe('b');\n    }).then(done);\n  });","file":"unit/modules/vdom/create-element.spec.js","skipped":false,"dir":"test"},{"name":"should create an element with attrs","suites":["vdom attrs module"],"line":6,"updatePoint":{"line":6,"column":41,"index":225},"code":"  it('should create an element with attrs', () => {\n    const vnode = new VNode('p', {\n      attrs: {\n        id: 1,\n        class: 'class1'\n      }\n    });\n    const elm = patch(null, vnode);\n    expect(elm.id).toBe('1');\n    expect(elm).toHaveClass('class1');\n  });","file":"unit/modules/vdom/modules/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should change the elements attrs","suites":["vdom attrs module"],"line":17,"updatePoint":{"line":17,"column":38,"index":490},"code":"  it('should change the elements attrs', () => {\n    const vnode1 = new VNode('i', {\n      attrs: {\n        id: '1',\n        class: 'i am vdom'\n      }\n    });\n    const vnode2 = new VNode('i', {\n      attrs: {\n        id: '2',\n        class: 'i am'\n      }\n    });\n    patch(null, vnode1);\n    const elm = patch(vnode1, vnode2);\n    expect(elm.id).toBe('2');\n    expect(elm).toHaveClass('i');\n    expect(elm).toHaveClass('am');\n    expect(elm).not.toHaveClass('vdom');\n  });","file":"unit/modules/vdom/modules/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should remove the elements attrs","suites":["vdom attrs module"],"line":37,"updatePoint":{"line":37,"column":38,"index":966},"code":"  it('should remove the elements attrs', () => {\n    const vnode1 = new VNode('i', {\n      attrs: {\n        id: '1',\n        class: 'i am vdom'\n      }\n    });\n    const vnode2 = new VNode('i', {\n      attrs: {\n        id: '1'\n      }\n    });\n    patch(null, vnode1);\n    const elm = patch(vnode1, vnode2);\n    expect(elm.id).toBe('1');\n    expect(elm.className).toBe('');\n  });","file":"unit/modules/vdom/modules/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should remove the elements attrs for new nodes without attrs data","suites":["vdom attrs module"],"line":54,"updatePoint":{"line":54,"column":71,"index":1378},"code":"  it('should remove the elements attrs for new nodes without attrs data', () => {\n    const vnode1 = new VNode('i', {\n      attrs: {\n        id: '1',\n        class: 'i am vdom'\n      }\n    });\n    const vnode2 = new VNode('i', {});\n    patch(null, vnode1);\n    const elm = patch(vnode1, vnode2);\n    expect(elm.id).toBe('');\n    expect(elm.className).toBe('');\n  });","file":"unit/modules/vdom/modules/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should remove the falsy value from boolean attr","suites":["vdom attrs module"],"line":67,"updatePoint":{"line":67,"column":53,"index":1727},"code":"  it('should remove the falsy value from boolean attr', () => {\n    const vnode = new VNode('option', {\n      attrs: {\n        disabled: null\n      }\n    });\n    const elm = patch(null, vnode);\n    expect(elm.getAttribute('disabled')).toBe(null);\n  });","file":"unit/modules/vdom/modules/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should set the attr name to boolean attr","suites":["vdom attrs module"],"line":76,"updatePoint":{"line":76,"column":46,"index":1973},"code":"  it('should set the attr name to boolean attr', () => {\n    const vnode = new VNode('option', {\n      attrs: {\n        disabled: true\n      }\n    });\n    const elm = patch(null, vnode);\n    expect(elm.getAttribute('disabled')).toBe('disabled');\n  });","file":"unit/modules/vdom/modules/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should set the falsy value to enumerated attr","suites":["vdom attrs module"],"line":85,"updatePoint":{"line":85,"column":51,"index":2230},"code":"  it('should set the falsy value to enumerated attr', () => {\n    const vnode = new VNode('div', {\n      attrs: {\n        contenteditable: null\n      }\n    });\n    const elm = patch(null, vnode);\n    expect(elm.getAttribute('contenteditable')).toBe('false');\n  });","file":"unit/modules/vdom/modules/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should set the boolean string value to enumerated attr","suites":["vdom attrs module"],"line":94,"updatePoint":{"line":94,"column":60,"index":2504},"code":"  it('should set the boolean string value to enumerated attr', () => {\n    const vnode = new VNode('div', {\n      attrs: {\n        contenteditable: 'true'\n      }\n    });\n    const elm = patch(null, vnode);\n    expect(elm.getAttribute('contenteditable')).toBe('true');\n  });","file":"unit/modules/vdom/modules/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should set the xlink value to attr","suites":["vdom attrs module"],"line":103,"updatePoint":{"line":103,"column":40,"index":2759},"code":"  it('should set the xlink value to attr', () => {\n    const vnode = new VNode('a', {\n      attrs: {\n        'xlink:href': '#id1'\n      }\n    });\n    const elm = patch(null, vnode);\n    expect(elm.getAttributeNS(xlinkNS, 'href')).toBe('#id1');\n  });","file":"unit/modules/vdom/modules/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should set the xlink boolean string value to attr","suites":["vdom attrs module"],"line":112,"updatePoint":{"line":112,"column":55,"index":3024},"code":"  it('should set the xlink boolean string value to attr', () => {\n    const vnode = new VNode('option', {\n      attrs: {\n        'xlink:disabled': true\n      }\n    });\n    const elm = patch(null, vnode);\n    expect(elm.getAttributeNS(xlinkNS, 'disabled')).toBe('true');\n  });","file":"unit/modules/vdom/modules/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should handle mutating observed attrs object","suites":["vdom attrs module"],"line":121,"updatePoint":{"line":121,"column":50,"index":3295},"code":"  it('should handle mutating observed attrs object', done => {\n    const vm = new Vue({\n      data: {\n        attrs: {\n          id: 'foo'\n        }\n      },\n\n      render(h) {\n        return h('div', {\n          attrs: this.attrs\n        });\n      }\n\n    }).$mount();\n    expect(vm.$el.id).toBe('foo');\n    vm.attrs.id = 'bar';\n    waitForUpdate(() => {\n      expect(vm.$el.id).toBe('bar');\n      vm.attrs = {\n        id: 'baz'\n      };\n    }).then(() => {\n      expect(vm.$el.id).toBe('baz');\n    }).then(done);\n  });","file":"unit/modules/vdom/modules/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should create an element with staticClass","suites":["vdom class module"],"line":4,"updatePoint":{"line":4,"column":47,"index":166},"code":"  it('should create an element with staticClass', () => {\n    const vnode = new VNode('p', {\n      staticClass: 'class1'\n    });\n    const elm = patch(null, vnode);\n    expect(elm).toHaveClass('class1');\n  });","file":"unit/modules/vdom/modules/class.spec.js","skipped":false,"dir":"test"},{"name":"should create an element with class","suites":["vdom class module"],"line":11,"updatePoint":{"line":11,"column":41,"index":370},"code":"  it('should create an element with class', () => {\n    const vnode = new VNode('p', {\n      class: 'class1'\n    });\n    const elm = patch(null, vnode);\n    expect(elm).toHaveClass('class1');\n  });","file":"unit/modules/vdom/modules/class.spec.js","skipped":false,"dir":"test"},{"name":"should create an element with array class","suites":["vdom class module"],"line":18,"updatePoint":{"line":18,"column":47,"index":574},"code":"  it('should create an element with array class', () => {\n    const vnode = new VNode('p', {\n      class: ['class1', 'class2']\n    });\n    const elm = patch(null, vnode);\n    expect(elm).toHaveClass('class1');\n    expect(elm).toHaveClass('class2');\n  });","file":"unit/modules/vdom/modules/class.spec.js","skipped":false,"dir":"test"},{"name":"should create an element with object class","suites":["vdom class module"],"line":26,"updatePoint":{"line":26,"column":48,"index":830},"code":"  it('should create an element with object class', () => {\n    const vnode = new VNode('p', {\n      class: {\n        class1: true,\n        class2: false,\n        class3: true\n      }\n    });\n    const elm = patch(null, vnode);\n    expect(elm).toHaveClass('class1');\n    expect(elm).not.toHaveClass('class2');\n    expect(elm).toHaveClass('class3');\n  });","file":"unit/modules/vdom/modules/class.spec.js","skipped":false,"dir":"test"},{"name":"should create an element with mixed class","suites":["vdom class module"],"line":39,"updatePoint":{"line":39,"column":47,"index":1183},"code":"  it('should create an element with mixed class', () => {\n    const vnode = new VNode('p', {\n      class: [{\n        class1: false,\n        class2: true,\n        class3: false\n      }, 'class4', ['class5', 'class6']]\n    });\n    const elm = patch(null, vnode);\n    expect(elm).not.toHaveClass('class1');\n    expect(elm).toHaveClass('class2');\n    expect(elm).not.toHaveClass('class3');\n    expect(elm).toHaveClass('class4');\n    expect(elm).toHaveClass('class5');\n    expect(elm).toHaveClass('class6');\n  });","file":"unit/modules/vdom/modules/class.spec.js","skipped":false,"dir":"test"},{"name":"should create an element with staticClass and class","suites":["vdom class module"],"line":55,"updatePoint":{"line":55,"column":57,"index":1702},"code":"  it('should create an element with staticClass and class', () => {\n    const vnode = new VNode('p', {\n      staticClass: 'class1',\n      class: 'class2'\n    });\n    const elm = patch(null, vnode);\n    expect(elm).toHaveClass('class1');\n    expect(elm).toHaveClass('class2');\n  });","file":"unit/modules/vdom/modules/class.spec.js","skipped":false,"dir":"test"},{"name":"should handle transition class","suites":["vdom class module"],"line":64,"updatePoint":{"line":64,"column":36,"index":1963},"code":"  it('should handle transition class', () => {\n    const vnode1 = new VNode('p', {\n      class: {\n        class1: true,\n        class2: false,\n        class3: true\n      }\n    });\n    let elm = patch(null, vnode1);\n    elm._transitionClasses = ['class4'];\n    const vnode2 = new VNode('p', {\n      class: {\n        class1: true,\n        class2: true,\n        class3: true\n      }\n    });\n    elm = patch(vnode1, vnode2);\n    expect(elm).toHaveClass('class1');\n    expect(elm).toHaveClass('class2');\n    expect(elm).toHaveClass('class3');\n    expect(elm).toHaveClass('class4');\n  });","file":"unit/modules/vdom/modules/class.spec.js","skipped":false,"dir":"test"},{"name":"should change the elements class","suites":["vdom class module"],"line":87,"updatePoint":{"line":87,"column":38,"index":2548},"code":"  it('should change the elements class', () => {\n    const vnode1 = new VNode('p', {\n      class: {\n        class1: true,\n        class2: false,\n        class3: true\n      }\n    });\n    const vnode2 = new VNode('p', {\n      staticClass: 'foo bar'\n    });\n    let elm = patch(null, vnode1);\n    elm = patch(vnode1, vnode2);\n    expect(elm).not.toHaveClass('class1');\n    expect(elm).not.toHaveClass('class2');\n    expect(elm).not.toHaveClass('class3');\n    expect(elm).toHaveClass('foo');\n    expect(elm).toHaveClass('bar');\n  });","file":"unit/modules/vdom/modules/class.spec.js","skipped":false,"dir":"test"},{"name":"should remove the elements class","suites":["vdom class module"],"line":106,"updatePoint":{"line":106,"column":38,"index":3078},"code":"  it('should remove the elements class', () => {\n    const vnode1 = new VNode('p', {\n      class: {\n        class1: true,\n        class2: false,\n        class3: true\n      }\n    });\n    const vnode2 = new VNode('p', {\n      class: {}\n    });\n    let elm = patch(null, vnode1);\n    elm = patch(vnode1, vnode2);\n    expect(elm).not.toHaveClass('class1');\n    expect(elm).not.toHaveClass('class2');\n    expect(elm).not.toHaveClass('class3');\n  });","file":"unit/modules/vdom/modules/class.spec.js","skipped":false,"dir":"test"},{"name":"should remove class for new nodes without class data","suites":["vdom class module"],"line":123,"updatePoint":{"line":123,"column":58,"index":3543},"code":"  it('should remove class for new nodes without class data', () => {\n    const vnode1 = new VNode('p', {\n      class: {\n        class1: true,\n        class2: false,\n        class3: true\n      }\n    });\n    const vnode2 = new VNode('p', {});\n    let elm = patch(null, vnode1);\n    elm = patch(vnode1, vnode2);\n    expect(elm).not.toHaveClass('class1');\n    expect(elm).not.toHaveClass('class2');\n    expect(elm).not.toHaveClass('class3');\n  });","file":"unit/modules/vdom/modules/class.spec.js","skipped":false,"dir":"test"},{"name":"should work","suites":["vdom directive module"],"line":5,"updatePoint":{"line":5,"column":17,"index":163},"code":"  it('should work', () => {\n    const directive1 = {\n      bind: jasmine.createSpy('bind'),\n      update: jasmine.createSpy('update'),\n      unbind: jasmine.createSpy('unbind')\n    };\n    const vm = new Vue({\n      directives: {\n        directive1\n      }\n    }); // create\n\n    const vnode1 = new VNode('div', {}, [new VNode('p', {\n      directives: [{\n        name: 'directive1',\n        value: 'hello',\n        arg: 'arg1',\n        modifiers: {\n          modifire1: true\n        }\n      }]\n    }, undefined, 'hello world', undefined, vm)]);\n    patch(null, vnode1);\n    expect(directive1.bind).toHaveBeenCalled(); // update\n\n    const vnode2 = new VNode('div', {}, [new VNode('p', {\n      directives: [{\n        name: 'directive1',\n        value: 'world',\n        arg: 'arg1',\n        modifiers: {\n          modifire1: true\n        }\n      }]\n    }, undefined, 'hello world', undefined, vm)]);\n    patch(vnode1, vnode2);\n    expect(directive1.update).toHaveBeenCalled(); // destroy\n\n    const vnode3 = new VNode('div');\n    patch(vnode2, vnode3);\n    expect(directive1.unbind).toHaveBeenCalled();\n  });","file":"unit/modules/vdom/modules/directive.spec.js","skipped":false,"dir":"test"},{"name":"should create an element with domProps","suites":["vdom domProps module"],"line":5,"updatePoint":{"line":5,"column":44,"index":189},"code":"  it('should create an element with domProps', () => {\n    const vnode = new VNode('a', {\n      domProps: {\n        src: 'http://localhost/'\n      }\n    });\n    const elm = patch(null, vnode);\n    expect(elm.src).toBe('http://localhost/');\n  });","file":"unit/modules/vdom/modules/dom-props.spec.js","skipped":false,"dir":"test"},{"name":"should change the elements domProps","suites":["vdom domProps module"],"line":14,"updatePoint":{"line":14,"column":41,"index":432},"code":"  it('should change the elements domProps', () => {\n    const vnode1 = new VNode('a', {\n      domProps: {\n        src: 'http://localhost/'\n      }\n    });\n    const vnode2 = new VNode('a', {\n      domProps: {\n        src: 'https://vuejs.org/'\n      }\n    });\n    patch(null, vnode1);\n    const elm = patch(vnode1, vnode2);\n    expect(elm.src).toBe('https://vuejs.org/');\n  });","file":"unit/modules/vdom/modules/dom-props.spec.js","skipped":false,"dir":"test"},{"name":"should remove the elements domProps","suites":["vdom domProps module"],"line":29,"updatePoint":{"line":29,"column":41,"index":809},"code":"  it('should remove the elements domProps', () => {\n    const vnode1 = new VNode('a', {\n      domProps: {\n        src: 'http://localhost/'\n      }\n    });\n    const vnode2 = new VNode('a', {\n      domProps: {}\n    });\n    patch(null, vnode1);\n    const elm = patch(vnode1, vnode2);\n    expect(elm.src).toBe('');\n  });","file":"unit/modules/vdom/modules/dom-props.spec.js","skipped":false,"dir":"test"},{"name":"should initialize the elements value to zero","suites":["vdom domProps module"],"line":42,"updatePoint":{"line":42,"column":50,"index":1136},"code":"  it('should initialize the elements value to zero', () => {\n    const vnode = new VNode('input', {\n      domProps: {\n        value: 0\n      }\n    });\n    const elm = patch(null, vnode);\n    expect(elm.value).toBe('0');\n  });","file":"unit/modules/vdom/modules/dom-props.spec.js","skipped":false,"dir":"test"},{"name":"should save raw value on element","suites":["vdom domProps module"],"line":51,"updatePoint":{"line":51,"column":38,"index":1350},"code":"  it('should save raw value on element', () => {\n    const value = {};\n    const vnode = new VNode('input', {\n      domProps: {\n        value\n      }\n    });\n    const elm = patch(null, vnode);\n    expect(elm._value).toBe(value);\n  });","file":"unit/modules/vdom/modules/dom-props.spec.js","skipped":false,"dir":"test"},{"name":"should discard vnode children if the node has innerHTML or textContent as a prop","suites":["vdom domProps module"],"line":61,"updatePoint":{"line":61,"column":86,"index":1634},"code":"  it('should discard vnode children if the node has innerHTML or textContent as a prop', () => {\n    const vnode = new VNode('div', {\n      domProps: {\n        innerHTML: 'hi'\n      }\n    }, [new VNode('span'), new VNode('span')]);\n    const elm = patch(null, vnode);\n    expect(elm.innerHTML).toBe('hi');\n    expect(vnode.children.length).toBe(0);\n    const vnode2 = new VNode('div', {\n      domProps: {\n        textContent: 'hi'\n      }\n    }, [new VNode('span'), new VNode('span')]);\n    const elm2 = patch(null, vnode2);\n    expect(elm2.textContent).toBe('hi');\n    expect(vnode2.children.length).toBe(0);\n    const vnode3 = new VNode('div', undefined, undefined, '123');\n    patch(null, vnode3);\n    const elm3 = patch(vnode3, vnode2);\n    expect(elm3.textContent).toBe('hi');\n    const vnode4 = new VNode('div', undefined, undefined, new VNode('span'));\n    patch(null, vnode4);\n    const elm4 = patch(vnode4, vnode);\n    expect(elm4.textContent).toBe('hi');\n  });","file":"unit/modules/vdom/modules/dom-props.spec.js","skipped":false,"dir":"test"},{"name":"should handle mutating observed props object","suites":["vdom domProps module"],"line":87,"updatePoint":{"line":87,"column":50,"index":2569},"code":"  it('should handle mutating observed props object', done => {\n    const vm = new Vue({\n      data: {\n        props: {\n          id: 'foo'\n        }\n      },\n\n      render(h) {\n        return h('div', {\n          domProps: this.props\n        });\n      }\n\n    }).$mount();\n    expect(vm.$el.id).toBe('foo');\n    vm.props.id = 'bar';\n    waitForUpdate(() => {\n      expect(vm.$el.id).toBe('bar');\n      vm.props = {\n        id: 'baz'\n      };\n    }).then(() => {\n      expect(vm.$el.id).toBe('baz');\n    }).then(done);\n  });","file":"unit/modules/vdom/modules/dom-props.spec.js","skipped":false,"dir":"test"},{"name":"should attach event handler to element","suites":["vdom events module"],"line":4,"updatePoint":{"line":4,"column":44,"index":164},"code":"  it('should attach event handler to element', () => {\n    const click = jasmine.createSpy();\n    const vnode = new VNode('a', {\n      on: {\n        click\n      }\n    });\n    const elm = patch(null, vnode);\n    document.body.appendChild(elm);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(1);\n  });","file":"unit/modules/vdom/modules/events.spec.js","skipped":false,"dir":"test"},{"name":"should not duplicate the same listener","suites":["vdom events module"],"line":16,"updatePoint":{"line":16,"column":44,"index":486},"code":"  it('should not duplicate the same listener', () => {\n    const click = jasmine.createSpy();\n    const vnode1 = new VNode('a', {\n      on: {\n        click\n      }\n    });\n    const vnode2 = new VNode('a', {\n      on: {\n        click\n      }\n    });\n    const elm = patch(null, vnode1);\n    patch(vnode1, vnode2);\n    document.body.appendChild(elm);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(1);\n  });","file":"unit/modules/vdom/modules/events.spec.js","skipped":false,"dir":"test"},{"name":"should update different listener","suites":["vdom events module"],"line":34,"updatePoint":{"line":34,"column":38,"index":909},"code":"  it('should update different listener', () => {\n    const click = jasmine.createSpy();\n    const click2 = jasmine.createSpy();\n    const vnode1 = new VNode('a', {\n      on: {\n        click\n      }\n    });\n    const vnode2 = new VNode('a', {\n      on: {\n        click: click2\n      }\n    });\n    const elm = patch(null, vnode1);\n    document.body.appendChild(elm);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(1);\n    expect(click2.calls.count()).toBe(0);\n    patch(vnode1, vnode2);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(1);\n    expect(click2.calls.count()).toBe(1);\n  });","file":"unit/modules/vdom/modules/events.spec.js","skipped":false,"dir":"test"},{"name":"should attach Array of multiple handlers","suites":["vdom events module"],"line":57,"updatePoint":{"line":57,"column":46,"index":1545},"code":"  it('should attach Array of multiple handlers', () => {\n    const click = jasmine.createSpy();\n    const vnode = new VNode('a', {\n      on: {\n        click: [click, click]\n      }\n    });\n    const elm = patch(null, vnode);\n    document.body.appendChild(elm);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(2);\n  });","file":"unit/modules/vdom/modules/events.spec.js","skipped":false,"dir":"test"},{"name":"should update Array of multiple handlers","suites":["vdom events module"],"line":69,"updatePoint":{"line":69,"column":46,"index":1885},"code":"  it('should update Array of multiple handlers', () => {\n    const click = jasmine.createSpy();\n    const click2 = jasmine.createSpy();\n    const vnode1 = new VNode('a', {\n      on: {\n        click: [click, click2]\n      }\n    });\n    const vnode2 = new VNode('a', {\n      on: {\n        click: [click]\n      }\n    });\n    const elm = patch(null, vnode1);\n    document.body.appendChild(elm);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(1);\n    expect(click2.calls.count()).toBe(1);\n    patch(vnode1, vnode2);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(2);\n    expect(click2.calls.count()).toBe(1);\n  });","file":"unit/modules/vdom/modules/events.spec.js","skipped":false,"dir":"test"},{"name":"should remove handlers that are no longer present","suites":["vdom events module"],"line":92,"updatePoint":{"line":92,"column":55,"index":2548},"code":"  it('should remove handlers that are no longer present', () => {\n    const click = jasmine.createSpy();\n    const vnode1 = new VNode('a', {\n      on: {\n        click\n      }\n    });\n    const vnode2 = new VNode('a', {});\n    const elm = patch(null, vnode1);\n    document.body.appendChild(elm);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(1);\n    patch(vnode1, vnode2);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(1);\n  });","file":"unit/modules/vdom/modules/events.spec.js","skipped":false,"dir":"test"},{"name":"should remove Array handlers that are no longer present","suites":["vdom events module"],"line":108,"updatePoint":{"line":108,"column":61,"index":3028},"code":"  it('should remove Array handlers that are no longer present', () => {\n    const click = jasmine.createSpy();\n    const vnode1 = new VNode('a', {\n      on: {\n        click: [click, click]\n      }\n    });\n    const vnode2 = new VNode('a', {});\n    const elm = patch(null, vnode1);\n    document.body.appendChild(elm);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(2);\n    patch(vnode1, vnode2);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(2);\n  }); // #4650","file":"unit/modules/vdom/modules/events.spec.js","skipped":false,"dir":"test"},{"name":"should handle single -> array or array -> single handler changes","suites":["vdom events module"],"line":125,"updatePoint":{"line":125,"column":70,"index":3543},"code":"  it('should handle single -> array or array -> single handler changes', () => {\n    const click = jasmine.createSpy();\n    const click2 = jasmine.createSpy();\n    const click3 = jasmine.createSpy();\n    const vnode0 = new VNode('a', {\n      on: {\n        click: click\n      }\n    });\n    const vnode1 = new VNode('a', {\n      on: {\n        click: [click, click2]\n      }\n    });\n    const vnode2 = new VNode('a', {\n      on: {\n        click: click\n      }\n    });\n    const vnode3 = new VNode('a', {\n      on: {\n        click: [click2, click3]\n      }\n    });\n    const elm = patch(null, vnode0);\n    document.body.appendChild(elm);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(1);\n    expect(click2.calls.count()).toBe(0);\n    patch(vnode0, vnode1);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(2);\n    expect(click2.calls.count()).toBe(1);\n    patch(vnode1, vnode2);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(3);\n    expect(click2.calls.count()).toBe(1);\n    patch(vnode2, vnode3);\n    triggerEvent(elm, 'click');\n    expect(click.calls.count()).toBe(3);\n    expect(click2.calls.count()).toBe(2);\n    expect(click3.calls.count()).toBe(1);\n  });","file":"unit/modules/vdom/modules/events.spec.js","skipped":false,"dir":"test"},{"name":"should create an element with style","suites":["vdom style module"],"line":4,"updatePoint":{"line":4,"column":41,"index":160},"code":"  it('should create an element with style', () => {\n    const vnode = new VNode('p', {\n      style: {\n        fontSize: '12px'\n      }\n    });\n    const elm = patch(null, vnode);\n    expect(elm.style.fontSize).toBe('12px');\n  });","file":"unit/modules/vdom/modules/style.spec.js","skipped":false,"dir":"test"},{"name":"should create an element with array style","suites":["vdom style module"],"line":13,"updatePoint":{"line":13,"column":47,"index":396},"code":"  it('should create an element with array style', () => {\n    const vnode = new VNode('p', {\n      style: [{\n        fontSize: '12px'\n      }, {\n        color: 'red'\n      }]\n    });\n    const elm = patch(null, vnode);\n    expect(elm.style.fontSize).toBe('12px');\n    expect(elm.style.color).toBe('red');\n  });","file":"unit/modules/vdom/modules/style.spec.js","skipped":false,"dir":"test"},{"name":"should change elements style","suites":["vdom style module"],"line":25,"updatePoint":{"line":25,"column":34,"index":694},"code":"  it('should change elements style', () => {\n    const vnode1 = new VNode('p', {\n      style: {\n        fontSize: '12px'\n      }\n    });\n    const vnode2 = new VNode('p', {\n      style: {\n        fontSize: '10px',\n        display: 'block'\n      }\n    });\n    patch(null, vnode1);\n    const elm = patch(vnode1, vnode2);\n    expect(elm.style.fontSize).toBe('10px');\n    expect(elm.style.display).toBe('block');\n  });","file":"unit/modules/vdom/modules/style.spec.js","skipped":false,"dir":"test"},{"name":"should remove elements attrs","suites":["vdom style module"],"line":42,"updatePoint":{"line":42,"column":34,"index":1109},"code":"  it('should remove elements attrs', () => {\n    const vnode1 = new VNode('p', {\n      style: {\n        fontSize: '12px'\n      }\n    });\n    const vnode2 = new VNode('p', {\n      style: {\n        display: 'block'\n      }\n    });\n    patch(null, vnode1);\n    const elm = patch(vnode1, vnode2);\n    expect(elm.style.fontSize).toBe('');\n    expect(elm.style.display).toBe('block');\n  });","file":"unit/modules/vdom/modules/style.spec.js","skipped":false,"dir":"test"},{"name":"should appends elements","suites":["vdom patch: children"],"line":60,"updatePoint":{"line":60,"column":29,"index":1283},"code":"  it('should appends elements', () => {\n    const vnode1 = new VNode('p', {}, [1].map(spanNum));\n    const vnode2 = new VNode('p', {}, [1, 2, 3].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(1);\n    elm = patch(vnode1, vnode2);\n    expect(elm.children.length).toBe(3);\n    expect(elm.children[1].innerHTML).toBe('2');\n    expect(elm.children[2].innerHTML).toBe('3');\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should prepends elements","suites":["vdom patch: children"],"line":70,"updatePoint":{"line":70,"column":30,"index":1700},"code":"  it('should prepends elements', () => {\n    const vnode1 = new VNode('p', {}, [4, 5].map(spanNum));\n    const vnode2 = new VNode('p', {}, [1, 2, 3, 4, 5].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(2);\n    elm = patch(vnode1, vnode2);\n    expect(map(inner, elm.children)).toEqual(['1', '2', '3', '4', '5']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should add elements in the middle","suites":["vdom patch: children"],"line":78,"updatePoint":{"line":78,"column":39,"index":2069},"code":"  it('should add elements in the middle', () => {\n    const vnode1 = new VNode('p', {}, [1, 2, 4, 5].map(spanNum));\n    const vnode2 = new VNode('p', {}, [1, 2, 3, 4, 5].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(4);\n    elm = patch(vnode1, vnode2);\n    expect(map(inner, elm.children)).toEqual(['1', '2', '3', '4', '5']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should add elements at begin and end","suites":["vdom patch: children"],"line":86,"updatePoint":{"line":86,"column":42,"index":2447},"code":"  it('should add elements at begin and end', () => {\n    const vnode1 = new VNode('p', {}, [2, 3, 4].map(spanNum));\n    const vnode2 = new VNode('p', {}, [1, 2, 3, 4, 5].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(3);\n    elm = patch(vnode1, vnode2);\n    expect(map(inner, elm.children)).toEqual(['1', '2', '3', '4', '5']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should add children to parent with no children","suites":["vdom patch: children"],"line":94,"updatePoint":{"line":94,"column":52,"index":2832},"code":"  it('should add children to parent with no children', () => {\n    const vnode1 = new VNode('p', {\n      key: 'p'\n    });\n    const vnode2 = new VNode('p', {\n      key: 'p'\n    }, [1, 2, 3].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(0);\n    elm = patch(vnode1, vnode2);\n    expect(map(inner, elm.children)).toEqual(['1', '2', '3']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should remove all children from parent","suites":["vdom patch: children"],"line":106,"updatePoint":{"line":106,"column":44,"index":3209},"code":"  it('should remove all children from parent', () => {\n    const vnode1 = new VNode('p', {\n      key: 'p'\n    }, [1, 2, 3].map(spanNum));\n    const vnode2 = new VNode('p', {\n      key: 'p'\n    });\n    let elm = patch(vnode0, vnode1);\n    expect(map(inner, elm.children)).toEqual(['1', '2', '3']);\n    elm = patch(vnode1, vnode2);\n    expect(elm.children.length).toBe(0);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should remove elements from the beginning","suites":["vdom patch: children"],"line":118,"updatePoint":{"line":118,"column":47,"index":3589},"code":"  it('should remove elements from the beginning', () => {\n    const vnode1 = new VNode('p', {}, [1, 2, 3, 4, 5].map(spanNum));\n    const vnode2 = new VNode('p', {}, [3, 4, 5].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(5);\n    elm = patch(vnode1, vnode2);\n    expect(map(inner, elm.children)).toEqual(['3', '4', '5']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should removes elements from end","suites":["vdom patch: children"],"line":126,"updatePoint":{"line":126,"column":38,"index":3950},"code":"  it('should removes elements from end', () => {\n    const vnode1 = new VNode('p', {}, [1, 2, 3, 4, 5].map(spanNum));\n    const vnode2 = new VNode('p', {}, [1, 2, 3].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(5);\n    elm = patch(vnode1, vnode2);\n    expect(elm.children.length).toBe(3);\n    expect(map(inner, elm.children)).toEqual(['1', '2', '3']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should remove elements from the middle","suites":["vdom patch: children"],"line":135,"updatePoint":{"line":135,"column":44,"index":4358},"code":"  it('should remove elements from the middle', () => {\n    const vnode1 = new VNode('p', {}, [1, 2, 3, 4, 5].map(spanNum));\n    const vnode2 = new VNode('p', {}, [1, 2, 4, 5].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(5);\n    elm = patch(vnode1, vnode2);\n    expect(elm.children.length).toBe(4);\n    expect(map(inner, elm.children)).toEqual(['1', '2', '4', '5']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should moves element forward","suites":["vdom patch: children"],"line":144,"updatePoint":{"line":144,"column":34,"index":4764},"code":"  it('should moves element forward', () => {\n    const vnode1 = new VNode('p', {}, [1, 2, 3, 4].map(spanNum));\n    const vnode2 = new VNode('p', {}, [2, 3, 1, 4].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(4);\n    elm = patch(vnode1, vnode2);\n    expect(elm.children.length).toBe(4);\n    expect(map(inner, elm.children)).toEqual(['2', '3', '1', '4']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should move elements to end","suites":["vdom patch: children"],"line":153,"updatePoint":{"line":153,"column":33,"index":5166},"code":"  it('should move elements to end', () => {\n    const vnode1 = new VNode('p', {}, [1, 2, 3].map(spanNum));\n    const vnode2 = new VNode('p', {}, [2, 3, 1].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(3);\n    elm = patch(vnode1, vnode2);\n    expect(elm.children.length).toBe(3);\n    expect(map(inner, elm.children)).toEqual(['2', '3', '1']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should move element backwards","suites":["vdom patch: children"],"line":162,"updatePoint":{"line":162,"column":35,"index":5559},"code":"  it('should move element backwards', () => {\n    const vnode1 = new VNode('p', {}, [1, 2, 3, 4].map(spanNum));\n    const vnode2 = new VNode('p', {}, [1, 4, 2, 3].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(4);\n    elm = patch(vnode1, vnode2);\n    expect(elm.children.length).toBe(4);\n    expect(map(inner, elm.children)).toEqual(['1', '4', '2', '3']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should swap first and last","suites":["vdom patch: children"],"line":171,"updatePoint":{"line":171,"column":32,"index":5960},"code":"  it('should swap first and last', () => {\n    const vnode1 = new VNode('p', {}, [1, 2, 3, 4].map(spanNum));\n    const vnode2 = new VNode('p', {}, [4, 2, 3, 1].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(4);\n    elm = patch(vnode1, vnode2);\n    expect(elm.children.length).toBe(4);\n    expect(map(inner, elm.children)).toEqual(['4', '2', '3', '1']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should move to left and replace","suites":["vdom patch: children"],"line":180,"updatePoint":{"line":180,"column":37,"index":6366},"code":"  it('should move to left and replace', () => {\n    const vnode1 = new VNode('p', {}, [1, 2, 3, 4, 5].map(spanNum));\n    const vnode2 = new VNode('p', {}, [4, 1, 2, 3, 6].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(5);\n    elm = patch(vnode1, vnode2);\n    expect(elm.children.length).toBe(5);\n    expect(map(inner, elm.children)).toEqual(['4', '1', '2', '3', '6']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should move to left and leaves hold","suites":["vdom patch: children"],"line":189,"updatePoint":{"line":189,"column":41,"index":6787},"code":"  it('should move to left and leaves hold', () => {\n    const vnode1 = new VNode('p', {}, [1, 4, 5].map(spanNum));\n    const vnode2 = new VNode('p', {}, [4, 6].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(3);\n    elm = patch(vnode1, vnode2);\n    expect(map(inner, elm.children)).toEqual(['4', '6']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should handle moved and set to undefined element ending at the end","suites":["vdom patch: children"],"line":197,"updatePoint":{"line":197,"column":72,"index":7168},"code":"  it('should handle moved and set to undefined element ending at the end', () => {\n    const vnode1 = new VNode('p', {}, [2, 4, 5].map(spanNum));\n    const vnode2 = new VNode('p', {}, [4, 5, 3].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(3);\n    elm = patch(vnode1, vnode2);\n    expect(elm.children.length).toBe(3);\n    expect(map(inner, elm.children)).toEqual(['4', '5', '3']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should move a key in non-keyed nodes with a size up","suites":["vdom patch: children"],"line":206,"updatePoint":{"line":206,"column":57,"index":7583},"code":"  it('should move a key in non-keyed nodes with a size up', () => {\n    const vnode1 = new VNode('p', {}, [1, 'a', 'b', 'c'].map(spanNum));\n    const vnode2 = new VNode('p', {}, ['d', 'a', 'b', 'c', 1, 'e'].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(4);\n    expect(elm.textContent, '1abc');\n    elm = patch(vnode1, vnode2);\n    expect(elm.children.length).toBe(6);\n    expect(elm.textContent, 'dabc1e');\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should reverse element","suites":["vdom patch: children"],"line":216,"updatePoint":{"line":216,"column":28,"index":8010},"code":"  it('should reverse element', () => {\n    const vnode1 = new VNode('p', {}, [1, 2, 3, 4, 5, 6, 7, 8].map(spanNum));\n    const vnode2 = new VNode('p', {}, [8, 7, 6, 5, 4, 3, 2, 1].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(8);\n    elm = patch(vnode1, vnode2);\n    expect(map(inner, elm.children)).toEqual(['8', '7', '6', '5', '4', '3', '2', '1']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"something","suites":["vdom patch: children"],"line":224,"updatePoint":{"line":224,"column":15,"index":8397},"code":"  it('something', () => {\n    const vnode1 = new VNode('p', {}, [0, 1, 2, 3, 4, 5].map(spanNum));\n    const vnode2 = new VNode('p', {}, [4, 3, 2, 1, 5, 0].map(spanNum));\n    let elm = patch(vnode0, vnode1);\n    expect(elm.children.length).toBe(6);\n    elm = patch(vnode1, vnode2);\n    expect(map(inner, elm.children)).toEqual(['4', '3', '2', '1', '5', '0']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should handle random shuffle","suites":["vdom patch: children"],"line":232,"updatePoint":{"line":232,"column":34,"index":8781},"code":"  it('should handle random shuffle', () => {\n    let n;\n    let i;\n    const arr = [];\n    const opacities = [];\n    const elms = 14;\n    const samples = 5;\n\n    function spanNumWithOpacity(n, o) {\n      return new VNode('span', {\n        key: n,\n        style: {\n          opacity: o\n        }\n      }, undefined, n.toString());\n    }\n\n    for (n = 0; n < elms; ++n) {\n      arr[n] = n;\n    }\n\n    for (n = 0; n < samples; ++n) {\n      const vnode1 = new VNode('span', {}, arr.map(n => {\n        return spanNumWithOpacity(n, '1');\n      }));\n      const shufArr = shuffle(arr.slice(0));\n      let elm = patch(vnode0, vnode1);\n\n      for (i = 0; i < elms; ++i) {\n        expect(elm.children[i].innerHTML).toBe(i.toString());\n        opacities[i] = Math.random().toFixed(5).toString();\n      }\n\n      const vnode2 = new VNode('span', {}, arr.map(n => {\n        return spanNumWithOpacity(shufArr[n], opacities[n]);\n      }));\n      elm = patch(vnode1, vnode2);\n\n      for (i = 0; i < elms; ++i) {\n        expect(elm.children[i].innerHTML).toBe(shufArr[i].toString());\n        expect(opacities[i].indexOf(elm.children[i].style.opacity)).toBe(0);\n      }\n    }\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should append elements with updating children without keys","suites":["vdom patch: children"],"line":276,"updatePoint":{"line":276,"column":64,"index":9974},"code":"  it('should append elements with updating children without keys', () => {\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'hello')]);\n    const vnode2 = new VNode('div', {}, [new VNode('span', {}, undefined, 'hello'), new VNode('span', {}, undefined, 'world')]);\n    let elm = patch(vnode0, vnode1);\n    expect(map(inner, elm.children)).toEqual(['hello']);\n    elm = patch(vnode1, vnode2);\n    expect(map(inner, elm.children)).toEqual(['hello', 'world']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should handle unmoved text nodes with updating children without keys","suites":["vdom patch: children"],"line":284,"updatePoint":{"line":284,"column":74,"index":10473},"code":"  it('should handle unmoved text nodes with updating children without keys', () => {\n    const vnode1 = new VNode('div', {}, [createTextVNode('text'), new VNode('span', {}, undefined, 'hello')]);\n    const vnode2 = new VNode('div', {}, [createTextVNode('text'), new VNode('span', {}, undefined, 'hello')]);\n    let elm = patch(vnode0, vnode1);\n    expect(elm.childNodes[0].textContent).toBe('text');\n    elm = patch(vnode1, vnode2);\n    expect(elm.childNodes[0].textContent).toBe('text');\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should handle changing text children with updating children without keys","suites":["vdom patch: children"],"line":292,"updatePoint":{"line":292,"column":78,"index":10972},"code":"  it('should handle changing text children with updating children without keys', () => {\n    const vnode1 = new VNode('div', {}, [createTextVNode('text'), new VNode('span', {}, undefined, 'hello')]);\n    const vnode2 = new VNode('div', {}, [createTextVNode('text2'), new VNode('span', {}, undefined, 'hello')]);\n    let elm = patch(vnode0, vnode1);\n    expect(elm.childNodes[0].textContent).toBe('text');\n    elm = patch(vnode1, vnode2);\n    expect(elm.childNodes[0].textContent).toBe('text2');\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should prepend element with updating children without keys","suites":["vdom patch: children"],"line":300,"updatePoint":{"line":300,"column":64,"index":11459},"code":"  it('should prepend element with updating children without keys', () => {\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'world')]);\n    const vnode2 = new VNode('div', {}, [new VNode('span', {}, undefined, 'hello'), new VNode('span', {}, undefined, 'world')]);\n    let elm = patch(vnode0, vnode1);\n    expect(map(inner, elm.children)).toEqual(['world']);\n    elm = patch(vnode1, vnode2);\n    expect(map(inner, elm.children)).toEqual(['hello', 'world']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should prepend element of different tag type with updating children without keys","suites":["vdom patch: children"],"line":308,"updatePoint":{"line":308,"column":86,"index":11970},"code":"  it('should prepend element of different tag type with updating children without keys', () => {\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'world')]);\n    const vnode2 = new VNode('div', {}, [new VNode('div', {}, undefined, 'hello'), new VNode('span', {}, undefined, 'world')]);\n    let elm = patch(vnode0, vnode1);\n    expect(map(inner, elm.children)).toEqual(['world']);\n    elm = patch(vnode1, vnode2);\n    expect(map(prop('tagName'), elm.children)).toEqual(['DIV', 'SPAN']);\n    expect(map(inner, elm.children)).toEqual(['hello', 'world']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should remove elements with updating children without keys","suites":["vdom patch: children"],"line":317,"updatePoint":{"line":317,"column":64,"index":12531},"code":"  it('should remove elements with updating children without keys', () => {\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'one'), new VNode('span', {}, undefined, 'two'), new VNode('span', {}, undefined, 'three')]);\n    const vnode2 = new VNode('div', {}, [new VNode('span', {}, undefined, 'one'), new VNode('span', {}, undefined, 'three')]);\n    let elm = patch(vnode0, vnode1);\n    expect(map(inner, elm.children)).toEqual(['one', 'two', 'three']);\n    elm = patch(vnode1, vnode2);\n    expect(map(inner, elm.children)).toEqual(['one', 'three']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should remove a single text node with updating children without keys","suites":["vdom patch: children"],"line":325,"updatePoint":{"line":325,"column":74,"index":13122},"code":"  it('should remove a single text node with updating children without keys', () => {\n    const vnode1 = new VNode('div', {}, undefined, 'one');\n    const vnode2 = new VNode('div', {});\n    let elm = patch(vnode0, vnode1);\n    expect(elm.textContent).toBe('one');\n    elm = patch(vnode1, vnode2);\n    expect(elm.textContent).toBe('');\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should remove a single text node when children are updated","suites":["vdom patch: children"],"line":333,"updatePoint":{"line":333,"column":64,"index":13452},"code":"  it('should remove a single text node when children are updated', () => {\n    const vnode1 = new VNode('div', {}, undefined, 'one');\n    const vnode2 = new VNode('div', {}, [new VNode('div', {}, undefined, 'two'), new VNode('span', {}, undefined, 'three')]);\n    let elm = patch(vnode0, vnode1);\n    expect(elm.textContent).toBe('one');\n    elm = patch(vnode1, vnode2);\n    expect(map(prop('textContent'), elm.childNodes)).toEqual(['two', 'three']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should remove a text node among other elements","suites":["vdom patch: children"],"line":341,"updatePoint":{"line":341,"column":52,"index":13897},"code":"  it('should remove a text node among other elements', () => {\n    const vnode1 = new VNode('div', {}, [createTextVNode('one'), new VNode('span', {}, undefined, 'two')]);\n    const vnode2 = new VNode('div', {}, [new VNode('div', {}, undefined, 'three')]);\n    let elm = patch(vnode0, vnode1);\n    expect(map(prop('textContent'), elm.childNodes)).toEqual(['one', 'two']);\n    elm = patch(vnode1, vnode2);\n    expect(elm.childNodes.length).toBe(1);\n    expect(elm.childNodes[0].tagName).toBe('DIV');\n    expect(elm.childNodes[0].textContent).toBe('three');\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should reorder elements","suites":["vdom patch: children"],"line":351,"updatePoint":{"line":351,"column":29,"index":14435},"code":"  it('should reorder elements', () => {\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'one'), new VNode('div', {}, undefined, 'two'), new VNode('b', {}, undefined, 'three')]);\n    const vnode2 = new VNode('div', {}, [new VNode('b', {}, undefined, 'three'), new VNode('span', {}, undefined, 'two'), new VNode('div', {}, undefined, 'one')]);\n    let elm = patch(vnode0, vnode1);\n    expect(map(inner, elm.children)).toEqual(['one', 'two', 'three']);\n    elm = patch(vnode1, vnode2);\n    expect(map(inner, elm.children)).toEqual(['three', 'two', 'one']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should handle children with the same key but with different tag","suites":["vdom patch: children"],"line":359,"updatePoint":{"line":359,"column":69,"index":15061},"code":"  it('should handle children with the same key but with different tag', () => {\n    const vnode1 = new VNode('div', {}, [new VNode('div', {\n      key: 1\n    }, undefined, 'one'), new VNode('div', {\n      key: 2\n    }, undefined, 'two'), new VNode('div', {\n      key: 3\n    }, undefined, 'three'), new VNode('div', {\n      key: 4\n    }, undefined, 'four')]);\n    const vnode2 = new VNode('div', {}, [new VNode('div', {\n      key: 4\n    }, undefined, 'four'), new VNode('span', {\n      key: 3\n    }, undefined, 'three'), new VNode('span', {\n      key: 2\n    }, undefined, 'two'), new VNode('div', {\n      key: 1\n    }, undefined, 'one')]);\n    let elm = patch(vnode0, vnode1);\n    expect(map(tag, elm.children)).toEqual(['DIV', 'DIV', 'DIV', 'DIV']);\n    expect(map(inner, elm.children)).toEqual(['one', 'two', 'three', 'four']);\n    elm = patch(vnode1, vnode2);\n    expect(map(tag, elm.children)).toEqual(['DIV', 'SPAN', 'SPAN', 'DIV']);\n    expect(map(inner, elm.children)).toEqual(['four', 'three', 'two', 'one']);\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should handle children with the same tag, same key, but one with data and one without data","suites":["vdom patch: children"],"line":385,"updatePoint":{"line":385,"column":96,"index":16110},"code":"  it('should handle children with the same tag, same key, but one with data and one without data', () => {\n    const vnode1 = new VNode('div', {}, [new VNode('div', {\n      class: 'hi'\n    }, undefined, 'one')]);\n    const vnode2 = new VNode('div', {}, [new VNode('div', undefined, undefined, 'four')]);\n    let elm = patch(vnode0, vnode1);\n    const child1 = elm.children[0];\n    expect(child1.className).toBe('hi');\n    elm = patch(vnode1, vnode2);\n    const child2 = elm.children[0];\n    expect(child1).not.toBe(child2);\n    expect(child2.className).toBe('');\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should handle static vnodes properly","suites":["vdom patch: children"],"line":398,"updatePoint":{"line":398,"column":42,"index":16625},"code":"  it('should handle static vnodes properly', function () {\n    function makeNode(text) {\n      return new VNode('div', undefined, [new VNode(undefined, undefined, undefined, text)]);\n    }\n\n    const b = makeNode('B');\n    b.isStatic = true;\n    b.key = `__static__1`;\n    const vnode1 = new VNode('div', {}, [makeNode('A'), b, makeNode('C')]);\n    const vnode2 = new VNode('div', {}, [b]);\n    const vnode3 = new VNode('div', {}, [makeNode('A'), b, makeNode('C')]);\n    let elm = patch(vnode0, vnode1);\n    expect(elm.textContent).toBe('ABC');\n    elm = patch(vnode1, vnode2);\n    expect(elm.textContent).toBe('B');\n    elm = patch(vnode2, vnode3);\n    expect(elm.textContent).toBe('ABC');\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should handle static vnodes inside ","suites":["vdom patch: children"],"line":416,"updatePoint":{"line":416,"column":41,"index":17321},"code":"  it('should handle static vnodes inside ', function () {\n    function makeNode(text) {\n      return new VNode('div', undefined, [new VNode(undefined, undefined, undefined, text)]);\n    }\n\n    const b = makeNode('B');\n    b.isStatic = true;\n    b.key = `__static__1`;\n    const vnode1 = new VNode('div', {}, [makeNode('A'), b, makeNode('C')]);\n    const vnode2 = new VNode('div', {}, [b]);\n    const vnode3 = new VNode('div', {}, [makeNode('A'), b, makeNode('C')]);\n    let elm = patch(vnode0, vnode1);\n    expect(elm.textContent).toBe('ABC');\n    elm = patch(vnode1, vnode2);\n    expect(elm.textContent).toBe('B');\n    elm = patch(vnode2, vnode3);\n    expect(elm.textContent).toBe('ABC');\n  });","file":"unit/modules/vdom/patch/children.spec.js","skipped":false,"dir":"test"},{"name":"should handle static vnodes by key","suites":["vdom patch: edge cases"],"line":7,"updatePoint":{"line":7,"column":40,"index":358},"code":"  it('should handle static vnodes by key', done => {\n    const vm = new Vue({\n      data: {\n        ok: true\n      },\n      template: `\n        <div>\n          <div v-for=\"i in 2\">\n            <div v-if=\"ok\">a</div><div>b</div><div v-if=\"!ok\">c</div><div>d</div>\n          </div>\n        </div>\n      `\n    }).$mount();\n    expect(vm.$el.textContent).toBe('abdabd');\n    vm.ok = false;\n    waitForUpdate(() => {\n      expect(vm.$el.textContent).toBe('bcdbcd');\n    }).then(done);\n  }); // #3533","file":"unit/modules/vdom/patch/edge-cases.spec.js","skipped":false,"dir":"test"},{"name":"should handle static node edge case when it's reused AND used as a reference node for insertion","suites":["vdom patch: edge cases"],"line":31,"updatePoint":{"line":31,"column":102,"index":1165},"code":"  it('should handle static node edge case when it\\'s reused AND used as a reference node for insertion', done => {\n    const vm = new Vue({\n      data: {\n        ok: true\n      },\n      template: `\n        <div>\n          <button @click=\"ok = !ok\">toggle</button>\n          <div class=\"b\" v-if=\"ok\">123</div>\n          <div class=\"c\">\n            <br><p>{{ 1 }}</p>\n          </div>\n          <div class=\"d\">\n            <label>{{ 2 }}</label>\n          </div>\n        </div>\n      `\n    }).$mount();\n    expect(vm.$el.querySelector('.c').textContent).toBe('1');\n    expect(vm.$el.querySelector('.d').textContent).toBe('2');\n    vm.ok = false;\n    waitForUpdate(() => {\n      expect(vm.$el.querySelector('.c').textContent).toBe('1');\n      expect(vm.$el.querySelector('.d').textContent).toBe('2');\n    }).then(done);\n  });","file":"unit/modules/vdom/patch/edge-cases.spec.js","skipped":false,"dir":"test"},{"name":"should synchronize vm' vnode","suites":["vdom patch: edge cases"],"line":57,"updatePoint":{"line":57,"column":35,"index":1921},"code":"  it('should synchronize vm\\' vnode', done => {\n    const comp = {\n      data: () => ({\n        swap: true\n      }),\n\n      render(h) {\n        return this.swap ? h('a', 'atag') : h('span', 'span');\n      }\n\n    };\n    const wrapper = {\n      render: h => h('comp'),\n      components: {\n        comp\n      }\n    };\n    const vm = new Vue({\n      render(h) {\n        const children = [h('wrapper'), h('div', 'row')];\n\n        if (this.swap) {\n          children.reverse();\n        }\n\n        return h('div', children);\n      },\n\n      data: () => ({\n        swap: false\n      }),\n      components: {\n        wrapper\n      }\n    }).$mount();\n    expect(vm.$el.innerHTML).toBe('<a>atag</a><div>row</div>');\n    const wrapperVm = vm.$children[0];\n    const compVm = wrapperVm.$children[0];\n    vm.swap = true;\n    waitForUpdate(() => {\n      expect(compVm.$vnode.parent).toBe(wrapperVm.$vnode);\n      expect(vm.$el.innerHTML).toBe('<div>row</div><a>atag</a>');\n      vm.swap = false;\n    }).then(() => {\n      expect(compVm.$vnode.parent).toBe(wrapperVm.$vnode);\n      expect(vm.$el.innerHTML).toBe('<a>atag</a><div>row</div>');\n      compVm.swap = false;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>span</span><div>row</div>');\n      expect(compVm.$vnode.parent).toBe(wrapperVm.$vnode);\n      vm.swap = true;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<div>row</div><span>span</span>');\n      expect(compVm.$vnode.parent).toBe(wrapperVm.$vnode);\n      vm.swap = true;\n    }).then(done);\n  }); // #4530","file":"unit/modules/vdom/patch/edge-cases.spec.js","skipped":false,"dir":"test"},{"name":"should not reset value when patching between dynamic/static bindings","suites":["vdom patch: edge cases"],"line":115,"updatePoint":{"line":115,"column":74,"index":3493},"code":"  it('should not reset value when patching between dynamic/static bindings', done => {\n    const vm = new Vue({\n      data: {\n        ok: true\n      },\n      template: `\n        <div>\n          <input type=\"button\" v-if=\"ok\" value=\"a\">\n          <input type=\"button\" :value=\"'b'\">\n        </div>\n      `\n    }).$mount();\n    expect(vm.$el.children[0].value).toBe('a');\n    vm.ok = false;\n    waitForUpdate(() => {\n      expect(vm.$el.children[0].value).toBe('b');\n      vm.ok = true;\n    }).then(() => {\n      expect(vm.$el.children[0].value).toBe('a');\n    }).then(done);\n  });","file":"unit/modules/vdom/patch/edge-cases.spec.js","skipped":false,"dir":"test"},{"name":"should create an element","suites":["vdom patch: element"],"line":5,"updatePoint":{"line":5,"column":30,"index":174},"code":"  it('should create an element', () => {\n    const vnode = new VNode('p', {\n      attrs: {\n        id: '1'\n      }\n    }, [createTextVNode('hello world')]);\n    const elm = patch(null, vnode);\n    expect(elm.tagName).toBe('P');\n    expect(elm.outerHTML).toBe('<p id=\"1\">hello world</p>');\n  });","file":"unit/modules/vdom/patch/element.spec.js","skipped":false,"dir":"test"},{"name":"should create an element which having the namespace","suites":["vdom patch: element"],"line":15,"updatePoint":{"line":15,"column":57,"index":496},"code":"  it('should create an element which having the namespace', () => {\n    const vnode = new VNode('svg', {});\n    vnode.ns = 'svg';\n    const elm = patch(null, vnode);\n    expect(elm.namespaceURI).toBe('http://www.w3.org/2000/svg');\n  });","file":"unit/modules/vdom/patch/element.spec.js","skipped":false,"dir":"test"},{"name":"should warn unknown element","suites":["vdom patch: element"],"line":26,"updatePoint":{"line":26,"column":35,"index":968},"code":"    it('should warn unknown element', () => {\n      const vnode = new VNode('unknown');\n      patch(null, vnode);\n      expect(`Unknown custom element: <unknown>`).toHaveBeenWarned();\n    });","file":"unit/modules/vdom/patch/element.spec.js","skipped":false,"dir":"test"},{"name":"should warn unknown element with hyphen","suites":["vdom patch: element"],"line":33,"updatePoint":{"line":33,"column":45,"index":1175},"code":"  it('should warn unknown element with hyphen', () => {\n    const vnode = new VNode('unknown-foo');\n    patch(null, vnode);\n    expect(`Unknown custom element: <unknown-foo>`).toHaveBeenWarned();\n  });","file":"unit/modules/vdom/patch/element.spec.js","skipped":false,"dir":"test"},{"name":"should create an elements which having text content","suites":["vdom patch: element"],"line":38,"updatePoint":{"line":38,"column":57,"index":1389},"code":"  it('should create an elements which having text content', () => {\n    const vnode = new VNode('div', {}, [createTextVNode('hello world')]);\n    const elm = patch(null, vnode);\n    expect(elm.innerHTML).toBe('hello world');\n  });","file":"unit/modules/vdom/patch/element.spec.js","skipped":false,"dir":"test"},{"name":"should create create an elements which having span and text content","suites":["vdom patch: element"],"line":43,"updatePoint":{"line":43,"column":73,"index":1636},"code":"  it('should create create an elements which having span and text content', () => {\n    const vnode = new VNode('div', {}, [new VNode('span'), createTextVNode('hello world')]);\n    const elm = patch(null, vnode);\n    expect(elm.childNodes[0].tagName).toBe('SPAN');\n    expect(elm.childNodes[1].textContent).toBe('hello world');\n  });","file":"unit/modules/vdom/patch/element.spec.js","skipped":false,"dir":"test"},{"name":"should create element with scope attribute","suites":["vdom patch: element"],"line":49,"updatePoint":{"line":49,"column":48,"index":1945},"code":"  it('should create element with scope attribute', () => {\n    const vnode = new VNode('div');\n    vnode.context = new Vue({\n      _scopeId: 'foo'\n    });\n    const elm = patch(null, vnode);\n    expect(elm.hasAttribute('foo')).toBe(true);\n  });","file":"unit/modules/vdom/patch/element.spec.js","skipped":false,"dir":"test"},{"name":"should call `insert` listener after both parents, siblings and children have been inserted","suites":["vdom patch: hooks"],"line":18,"updatePoint":{"line":18,"column":96,"index":657},"code":"  it('should call `insert` listener after both parents, siblings and children have been inserted', () => {\n    const result = [];\n\n    function insert(vnode) {\n      expect(vnode.elm.children.length).toBe(2);\n      expect(vnode.elm.parentNode.children.length).toBe(3);\n      result.push(vnode);\n    }\n\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling'), new VNode('div', {\n      hook: {\n        insert\n      }\n    }, [new VNode('span', {}, undefined, 'child 1'), new VNode('span', {}, undefined, 'child 2')]), new VNode('span', {}, undefined, 'can touch me')]);\n    patch(vnode0, vnode1);\n    expect(result.length).toBe(1);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should call `prepatch` listener","suites":["vdom patch: hooks"],"line":35,"updatePoint":{"line":35,"column":37,"index":1268},"code":"  it('should call `prepatch` listener', () => {\n    const result = [];\n\n    function prepatch(oldVnode, newVnode) {\n      expect(oldVnode).toEqual(vnode1.children[1]);\n      expect(newVnode).toEqual(vnode2.children[1]);\n      result.push(newVnode);\n    }\n\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling'), new VNode('div', {\n      hook: {\n        prepatch\n      }\n    }, [new VNode('span', {}, undefined, 'child 1'), new VNode('span', {}, undefined, 'child 2')])]);\n    const vnode2 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling'), new VNode('div', {\n      hook: {\n        prepatch\n      }\n    }, [new VNode('span', {}, undefined, 'child 1'), new VNode('span', {}, undefined, 'child 2')])]);\n    patch(vnode0, vnode1);\n    patch(vnode1, vnode2);\n    expect(result.length).toBe(1);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should call `postpatch` after `prepatch` listener","suites":["vdom patch: hooks"],"line":58,"updatePoint":{"line":58,"column":55,"index":2141},"code":"  it('should call `postpatch` after `prepatch` listener', () => {\n    const pre = [];\n    const post = [];\n\n    function prepatch(oldVnode, newVnode) {\n      pre.push(pre);\n    }\n\n    function postpatch(oldVnode, newVnode) {\n      expect(pre.length).toBe(post.length + 1);\n      post.push(post);\n    }\n\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling'), new VNode('div', {\n      hook: {\n        prepatch,\n        postpatch\n      }\n    }, [new VNode('span', {}, undefined, 'child 1'), new VNode('span', {}, undefined, 'child 2')])]);\n    const vnode2 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling'), new VNode('div', {\n      hook: {\n        prepatch,\n        postpatch\n      }\n    }, [new VNode('span', {}, undefined, 'child 1'), new VNode('span', {}, undefined, 'child 2')])]);\n    patch(vnode0, vnode1);\n    patch(vnode1, vnode2);\n    expect(pre.length).toBe(1);\n    expect(post.length).toBe(1);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should call `update` listener","suites":["vdom patch: hooks"],"line":88,"updatePoint":{"line":88,"column":35,"index":3091},"code":"  it('should call `update` listener', () => {\n    const result1 = [];\n    const result2 = [];\n\n    function cb(result, oldVnode, newVnode) {\n      if (result.length > 1) {\n        expect(result[result.length - 1]).toEqual(oldVnode);\n      }\n\n      result.push(newVnode);\n    }\n\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling'), new VNode('div', {\n      hook: {\n        update: cb.bind(null, result1)\n      }\n    }, [new VNode('span', {}, undefined, 'child 1'), new VNode('span', {\n      hook: {\n        update: cb.bind(null, result2)\n      }\n    }, undefined, 'child 2')])]);\n    const vnode2 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling'), new VNode('div', {\n      hook: {\n        update: cb.bind(null, result1)\n      }\n    }, [new VNode('span', {}, undefined, 'child 1'), new VNode('span', {\n      hook: {\n        update: cb.bind(null, result2)\n      }\n    }, undefined, 'child 2')])]);\n    patch(vnode0, vnode1);\n    patch(vnode1, vnode2);\n    expect(result1.length).toBe(1);\n    expect(result2.length).toBe(1);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should call `remove` listener","suites":["vdom patch: hooks"],"line":123,"updatePoint":{"line":123,"column":35,"index":4181},"code":"  it('should call `remove` listener', () => {\n    const result = [];\n\n    function remove(vnode, rm) {\n      const parent = vnode.elm.parentNode;\n      expect(vnode.elm.children.length).toBe(2);\n      expect(vnode.elm.children.length).toBe(2);\n      result.push(vnode);\n      rm();\n      expect(parent.children.length).toBe(1);\n    }\n\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling'), new VNode('div', {\n      hook: {\n        remove\n      }\n    }, [new VNode('span', {}, undefined, 'child 1'), new VNode('span', {}, undefined, 'child 2')])]);\n    const vnode2 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling')]);\n    patch(vnode0, vnode1);\n    patch(vnode1, vnode2);\n    expect(result.length).toBe(1);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should call `init` and `prepatch` listeners on root","suites":["vdom patch: hooks"],"line":145,"updatePoint":{"line":145,"column":57,"index":4977},"code":"  it('should call `init` and `prepatch` listeners on root', () => {\n    let count = 0;\n\n    function init(vnode) {\n      count++;\n    }\n\n    function prepatch(oldVnode, newVnode) {\n      count++;\n    }\n\n    const vnode1 = new VNode('div', {\n      hook: {\n        init,\n        prepatch\n      }\n    });\n    patch(vnode0, vnode1);\n    expect(count).toBe(1);\n    const vnode2 = new VNode('span', {\n      hook: {\n        init,\n        prepatch\n      }\n    });\n    patch(vnode1, vnode2);\n    expect(count).toBe(2);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should remove element when all remove listeners are done","suites":["vdom patch: hooks"],"line":173,"updatePoint":{"line":173,"column":62,"index":5498},"code":"  it('should remove element when all remove listeners are done', () => {\n    let rm1, rm2, rm3;\n    const patch1 = createPatchFunction({\n      nodeOps,\n      modules: modules.concat([{\n        remove(_, rm) {\n          rm1 = rm;\n        }\n\n      }, {\n        remove(_, rm) {\n          rm2 = rm;\n        }\n\n      }])\n    });\n    const vnode1 = new VNode('div', {}, [new VNode('a', {\n      hook: {\n        remove(_, rm) {\n          rm3 = rm;\n        }\n\n      }\n    })]);\n    const vnode2 = new VNode('div', {}, []);\n    let elm = patch1(vnode0, vnode1);\n    expect(elm.children.length).toBe(1);\n    elm = patch1(vnode1, vnode2);\n    expect(elm.children.length).toBe(1);\n    rm1();\n    expect(elm.children.length).toBe(1);\n    rm3();\n    expect(elm.children.length).toBe(1);\n    rm2();\n    expect(elm.children.length).toBe(0);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should invoke the remove hook on replaced root","suites":["vdom patch: hooks"],"line":209,"updatePoint":{"line":209,"column":52,"index":6318},"code":"  it('should invoke the remove hook on replaced root', () => {\n    const result = [];\n    const parent = nodeOps.createElement('div');\n    vnode0 = nodeOps.createElement('div');\n    parent.appendChild(vnode0);\n\n    function remove(vnode, rm) {\n      result.push(vnode);\n      rm();\n    }\n\n    const vnode1 = new VNode('div', {\n      hook: {\n        remove\n      }\n    }, [new VNode('b', {}, undefined, 'child 1'), new VNode('i', {}, undefined, 'child 2')]);\n    const vnode2 = new VNode('span', {}, [new VNode('b', {}, undefined, 'child 1'), new VNode('i', {}, undefined, 'child 2')]);\n    patch(vnode0, vnode1);\n    patch(vnode1, vnode2);\n    expect(result.length).toBe(1);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should invoke global `destroy` hook for all removed children","suites":["vdom patch: hooks"],"line":230,"updatePoint":{"line":230,"column":66,"index":7013},"code":"  it('should invoke global `destroy` hook for all removed children', () => {\n    const result = [];\n\n    function destroy(vnode) {\n      result.push(vnode);\n    }\n\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling'), new VNode('div', {}, [new VNode('span', {\n      hook: {\n        destroy\n      }\n    }, undefined, 'child 1'), new VNode('span', {}, undefined, 'child 2')])]);\n    const vnode2 = new VNode('div');\n    patch(vnode0, vnode1);\n    patch(vnode1, vnode2);\n    expect(result.length).toBe(1);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should handle text vnodes with `undefined` `data` property","suites":["vdom patch: hooks"],"line":247,"updatePoint":{"line":247,"column":64,"index":7558},"code":"  it('should handle text vnodes with `undefined` `data` property', () => {\n    const vnode1 = new VNode('div', {}, [createTextVNode(' ')]);\n    const vnode2 = new VNode('div', {}, []);\n    patch(vnode0, vnode1);\n    patch(vnode1, vnode2);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should invoke `destroy` module hook for all removed children","suites":["vdom patch: hooks"],"line":253,"updatePoint":{"line":253,"column":66,"index":7805},"code":"  it('should invoke `destroy` module hook for all removed children', () => {\n    let created = 0;\n    let destroyed = 0;\n    const patch1 = createPatchFunction({\n      nodeOps,\n      modules: modules.concat([{\n        create() {\n          created++;\n        }\n\n      }, {\n        destroy() {\n          destroyed++;\n        }\n\n      }])\n    });\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling'), new VNode('div', {}, [new VNode('span', {}, undefined, 'child 1'), new VNode('span', {}, undefined, 'child 2')])]);\n    const vnode2 = new VNode('div', {});\n    patch1(vnode0, vnode1);\n    expect(destroyed).toBe(1); // should invoke for replaced root nodes too\n\n    patch1(vnode1, vnode2);\n    expect(created).toBe(5);\n    expect(destroyed).toBe(5);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should not invoke `create` and `remove` module hook for text nodes","suites":["vdom patch: hooks"],"line":279,"updatePoint":{"line":279,"column":72,"index":8603},"code":"  it('should not invoke `create` and `remove` module hook for text nodes', () => {\n    let created = 0;\n    let removed = 0;\n    const patch1 = createPatchFunction({\n      nodeOps,\n      modules: modules.concat([{\n        create() {\n          created++;\n        }\n\n      }, {\n        remove() {\n          removed++;\n        }\n\n      }])\n    });\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first child'), createTextVNode(''), new VNode('span', {}, undefined, 'third child')]);\n    const vnode2 = new VNode('div', {});\n    patch1(vnode0, vnode1);\n    patch1(vnode1, vnode2);\n    expect(created).toBe(3);\n    expect(removed).toBe(2);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should not invoke `destroy` module hook for text nodes","suites":["vdom patch: hooks"],"line":303,"updatePoint":{"line":303,"column":60,"index":9259},"code":"  it('should not invoke `destroy` module hook for text nodes', () => {\n    let created = 0;\n    let destroyed = 0;\n    const patch1 = createPatchFunction({\n      nodeOps,\n      modules: modules.concat([{\n        create() {\n          created++;\n        }\n\n      }, {\n        destroy() {\n          destroyed++;\n        }\n\n      }])\n    });\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling'), new VNode('div', {}, [new VNode('span', {}, undefined, 'child 1'), new VNode('span', {}, [createTextVNode('text1'), createTextVNode('text2')])])]);\n    const vnode2 = new VNode('div', {});\n    patch1(vnode0, vnode1);\n    expect(destroyed).toBe(1); // should invoke for replaced root nodes too\n\n    patch1(vnode1, vnode2);\n    expect(created).toBe(5);\n    expect(destroyed).toBe(5);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should call `create` listener before inserted into parent but after children","suites":["vdom patch: hooks"],"line":329,"updatePoint":{"line":329,"column":82,"index":10099},"code":"  it('should call `create` listener before inserted into parent but after children', () => {\n    const result = [];\n\n    function create(empty, vnode) {\n      expect(vnode.elm.children.length).toBe(2);\n      expect(vnode.elm.parentNode).toBe(null);\n      result.push(vnode);\n    }\n\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}, undefined, 'first sibling'), new VNode('div', {\n      hook: {\n        create\n      }\n    }, [new VNode('span', {}, undefined, 'child 1'), new VNode('span', {}, undefined, 'child 2')]), new VNode('span', {}, undefined, 'can\\'t touch me')]);\n    patch(vnode0, vnode1);\n    expect(result.length).toBe(1);\n  });","file":"unit/modules/vdom/patch/hooks.spec.js","skipped":false,"dir":"test"},{"name":"should hydrate elements when server-rendered DOM tree is same as virtual DOM tree","suites":["vdom patch: hydration"],"line":23,"updatePoint":{"line":23,"column":87,"index":624},"code":"  it('should hydrate elements when server-rendered DOM tree is same as virtual DOM tree', () => {\n    const result = [];\n\n    function init(vnode) {\n      result.push(vnode);\n    }\n\n    function createServerRenderedDOM() {\n      const root = document.createElement('div');\n      root.setAttribute(SSR_ATTR, 'true');\n      const span = document.createElement('span');\n      root.appendChild(span);\n      const div = document.createElement('div');\n      const child1 = document.createElement('span');\n      const child2 = document.createElement('span');\n      child1.textContent = 'hi';\n      child2.textContent = 'ho';\n      div.appendChild(child1);\n      div.appendChild(child2);\n      root.appendChild(div);\n      return root;\n    }\n\n    const node0 = createServerRenderedDOM();\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}), new VNode('div', {\n      hook: {\n        init\n      }\n    }, [new VNode('span', {}, [new VNode(undefined, undefined, undefined, 'hi')]), new VNode('span', {}, [new VNode(undefined, undefined, undefined, 'ho')])])]);\n    patch(node0, vnode1);\n    expect(result.length).toBe(1);\n\n    function traverseAndAssert(vnode, element) {\n      expect(vnode.elm).toBe(element);\n\n      if (vnode.children) {\n        vnode.children.forEach((node, i) => {\n          traverseAndAssert(node, element.childNodes[i]);\n        });\n      }\n    } // ensure vnodes are correctly associated with actual DOM\n\n\n    traverseAndAssert(vnode1, node0); // check update\n\n    const vnode2 = new VNode('div', {\n      attrs: {\n        id: 'foo'\n      }\n    }, [new VNode('span', {\n      attrs: {\n        id: 'bar'\n      }\n    }), new VNode('div', {\n      hook: {\n        init\n      }\n    }, [new VNode('span', {}), new VNode('span', {})])]);\n    patch(vnode1, vnode2);\n    expect(node0.id).toBe('foo');\n    expect(node0.children[0].id).toBe('bar');\n  });","file":"unit/modules/vdom/patch/hydration.spec.js","skipped":false,"dir":"test"},{"name":"should warn message that virtual DOM tree is not matching when hydrate element","suites":["vdom patch: hydration"],"line":85,"updatePoint":{"line":85,"column":84,"index":2486},"code":"  it('should warn message that virtual DOM tree is not matching when hydrate element', () => {\n    function createServerRenderedDOM() {\n      const root = document.createElement('div');\n      root.setAttribute(SSR_ATTR, 'true');\n      const span = document.createElement('span');\n      root.appendChild(span);\n      const div = document.createElement('div');\n      const child1 = document.createElement('span');\n      div.appendChild(child1);\n      root.appendChild(div);\n      return root;\n    }\n\n    const node0 = createServerRenderedDOM();\n    const vnode1 = new VNode('div', {}, [new VNode('span', {}), new VNode('div', {}, [new VNode('span', {}), new VNode('span', {})])]);\n    patch(node0, vnode1);\n    expect('The client-side rendered virtual DOM tree is not matching').toHaveBeenWarned();\n  }); // component hydration is better off with a more e2e approach","file":"unit/modules/vdom/patch/hydration.spec.js","skipped":false,"dir":"test"},{"name":"should hydrate components when server-rendered DOM tree is same as virtual DOM tree","suites":["vdom patch: hydration"],"line":104,"updatePoint":{"line":104,"column":89,"index":3357},"code":"  it('should hydrate components when server-rendered DOM tree is same as virtual DOM tree', done => {\n    const dom = createMockSSRDOM('<span>foo</span><div class=\"b a\"><span>foo qux</span></div><!---->');\n    const originalNode1 = dom.children[0];\n    const originalNode2 = dom.children[1];\n    const vm = new Vue({\n      template: '<div><span>{{msg}}</span><test class=\"a\" :msg=\"msg\"></test><p v-if=\"ok\"></p></div>',\n      data: {\n        msg: 'foo',\n        ok: false\n      },\n      components: {\n        test: {\n          props: ['msg'],\n\n          data() {\n            return {\n              a: 'qux'\n            };\n          },\n\n          template: '<div class=\"b\"><span>{{msg}} {{a}}</span></div>'\n        }\n      }\n    });\n    expect(() => {\n      vm.$mount(dom);\n    }).not.toThrow();\n    expect('not matching server-rendered content').not.toHaveBeenWarned();\n    expect(vm.$el).toBe(dom);\n    expect(vm.$children[0].$el).toBe(originalNode2);\n    expect(vm.$el.children[0]).toBe(originalNode1);\n    expect(vm.$el.children[1]).toBe(originalNode2);\n    vm.msg = 'bar';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<span>bar</span><div class=\"b a\"><span>bar qux</span></div><!---->');\n      vm.$children[0].a = 'ququx';\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>bar</span><div class=\"b a\"><span>bar ququx</span></div><!---->');\n      vm.ok = true;\n    }).then(() => {\n      expect(vm.$el.innerHTML).toBe('<span>bar</span><div class=\"b a\"><span>bar ququx</span></div><p></p>');\n    }).then(done);\n  });","file":"unit/modules/vdom/patch/hydration.spec.js","skipped":false,"dir":"test"},{"name":"should warn failed hydration for non-matching DOM in child component","suites":["vdom patch: hydration"],"line":147,"updatePoint":{"line":147,"column":74,"index":4889},"code":"  it('should warn failed hydration for non-matching DOM in child component', () => {\n    const dom = createMockSSRDOM('<div><span></span></div>');\n    new Vue({\n      template: '<div><test></test></div>',\n      components: {\n        test: {\n          template: '<div><a></a></div>'\n        }\n      }\n    }).$mount(dom);\n    expect('not matching server-rendered content').toHaveBeenWarned();\n  });","file":"unit/modules/vdom/patch/hydration.spec.js","skipped":false,"dir":"test"},{"name":"should overwrite textNodes in the correct position but with mismatching text without warning","suites":["vdom patch: hydration"],"line":159,"updatePoint":{"line":159,"column":98,"index":5310},"code":"  it('should overwrite textNodes in the correct position but with mismatching text without warning', () => {\n    const dom = createMockSSRDOM('<div><span>foo</span></div>');\n    new Vue({\n      template: '<div><test></test></div>',\n      components: {\n        test: {\n          data() {\n            return {\n              a: 'qux'\n            };\n          },\n\n          template: '<div><span>{{a}}</span></div>'\n        }\n      }\n    }).$mount(dom);\n    expect('not matching server-rendered content').not.toHaveBeenWarned();\n    expect(dom.querySelector('span').textContent).toBe('qux');\n  });","file":"unit/modules/vdom/patch/hydration.spec.js","skipped":false,"dir":"test"},{"name":"should pick up elements with no children and populate without warning","suites":["vdom patch: hydration"],"line":178,"updatePoint":{"line":178,"column":75,"index":5881},"code":"  it('should pick up elements with no children and populate without warning', done => {\n    const dom = createMockSSRDOM('<div><span></span></div>');\n    const span = dom.querySelector('span');\n    const vm = new Vue({\n      template: '<div><test></test></div>',\n      components: {\n        test: {\n          data() {\n            return {\n              a: 'qux'\n            };\n          },\n\n          template: '<div><span>{{a}}</span></div>'\n        }\n      }\n    }).$mount(dom);\n    expect('not matching server-rendered content').not.toHaveBeenWarned();\n    expect(span).toBe(vm.$el.querySelector('span'));\n    expect(vm.$el.innerHTML).toBe('<div><span>qux</span></div>');\n    vm.$children[0].a = 'foo';\n    waitForUpdate(() => {\n      expect(vm.$el.innerHTML).toBe('<div><span>foo</span></div>');\n    }).then(done);\n  });","file":"unit/modules/vdom/patch/hydration.spec.js","skipped":false,"dir":"test"},{"name":"should hydrate async component","suites":["vdom patch: hydration"],"line":203,"updatePoint":{"line":203,"column":36,"index":6667},"code":"  it('should hydrate async component', done => {\n    const dom = createMockSSRDOM('<span>foo</span>');\n    const span = dom.querySelector('span');\n\n    const Foo = resolve => setTimeout(() => {\n      resolve({\n        data: () => ({\n          msg: 'foo'\n        }),\n        template: `<span>{{ msg }}</span>`\n      });\n    }, 0);\n\n    const vm = new Vue({\n      template: '<div><foo ref=\"foo\" /></div>',\n      components: {\n        Foo\n      }\n    }).$mount(dom);\n    expect('not matching server-rendered content').not.toHaveBeenWarned();\n    expect(dom.innerHTML).toBe('<span>foo</span>');\n    expect(vm.$refs.foo).toBeUndefined();\n    setTimeout(() => {\n      expect(dom.innerHTML).toBe('<span>foo</span>');\n      expect(vm.$refs.foo).not.toBeUndefined();\n      vm.$refs.foo.msg = 'bar';\n      waitForUpdate(() => {\n        expect(dom.innerHTML).toBe('<span>bar</span>');\n        expect(dom.querySelector('span')).toBe(span);\n      }).then(done);\n    }, 10);\n  });","file":"unit/modules/vdom/patch/hydration.spec.js","skipped":false,"dir":"test"},{"name":"should hydrate async component without showing loading","suites":["vdom patch: hydration"],"line":235,"updatePoint":{"line":235,"column":60,"index":7658},"code":"  it('should hydrate async component without showing loading', done => {\n    const dom = createMockSSRDOM('<span>foo</span>');\n    const span = dom.querySelector('span');\n\n    const Foo = () => ({\n      component: new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            data: () => ({\n              msg: 'foo'\n            }),\n            template: `<span>{{ msg }}</span>`\n          });\n        }, 10);\n      }),\n      delay: 1,\n      loading: {\n        render: h => h('span', 'loading')\n      }\n    });\n\n    const vm = new Vue({\n      template: '<div><foo ref=\"foo\" /></div>',\n      components: {\n        Foo\n      }\n    }).$mount(dom);\n    expect('not matching server-rendered content').not.toHaveBeenWarned();\n    expect(dom.innerHTML).toBe('<span>foo</span>');\n    expect(vm.$refs.foo).toBeUndefined();\n    setTimeout(() => {\n      expect(dom.innerHTML).toBe('<span>foo</span>');\n    }, 2);\n    setTimeout(() => {\n      expect(dom.innerHTML).toBe('<span>foo</span>');\n      expect(vm.$refs.foo).not.toBeUndefined();\n      vm.$refs.foo.msg = 'bar';\n      waitForUpdate(() => {\n        expect(dom.innerHTML).toBe('<span>bar</span>');\n        expect(dom.querySelector('span')).toBe(span);\n      }).then(done);\n    }, 50);\n  });","file":"unit/modules/vdom/patch/hydration.spec.js","skipped":false,"dir":"test"},{"name":"should hydrate async component by replacing DOM if error occurs","suites":["vdom patch: hydration"],"line":278,"updatePoint":{"line":278,"column":69,"index":8924},"code":"  it('should hydrate async component by replacing DOM if error occurs', done => {\n    const dom = createMockSSRDOM('<span>foo</span>');\n\n    const Foo = () => ({\n      component: new Promise((resolve, reject) => {\n        setTimeout(() => {\n          reject('something went wrong');\n        }, 10);\n      }),\n      error: {\n        render: h => h('span', 'error')\n      }\n    });\n\n    new Vue({\n      template: '<div><foo ref=\"foo\" /></div>',\n      components: {\n        Foo\n      }\n    }).$mount(dom);\n    expect('not matching server-rendered content').not.toHaveBeenWarned();\n    expect(dom.innerHTML).toBe('<span>foo</span>');\n    setTimeout(() => {\n      expect('Failed to resolve async').toHaveBeenWarned();\n      expect(dom.innerHTML).toBe('<span>error</span>');\n      done();\n    }, 50);\n  });","file":"unit/modules/vdom/patch/hydration.spec.js","skipped":false,"dir":"test"},{"name":"append=\"tree\"","suites":["append props"],"line":4,"updatePoint":{"line":4,"column":19,"index":169},"code":"  it('append=\"tree\"', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<list><cell></cell></list>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).not.toBeUndefined();\n    expect(staticRenderFns.length).toEqual(1);\n    expect(staticRenderFns).toMatch(strToRegExp(`appendAsTree:true`));\n    expect(staticRenderFns).toMatch(strToRegExp(`attrs:{\"append\":\"tree\"}`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/append.spec.js","skipped":false,"dir":"test"},{"name":"should be compiled","suites":["compile class"],"line":4,"updatePoint":{"line":4,"column":24,"index":175},"code":"  it('should be compiled', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div class=\"a b c\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).not.toBeUndefined();\n    expect(staticRenderFns.length).toEqual(0);\n    expect(render).toMatch(strToRegExp(`staticClass:[\"a\",\"b\",\"c\"]`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/class.spec.js","skipped":false,"dir":"test"},{"name":"should compile dynamic class","suites":["compile class"],"line":16,"updatePoint":{"line":16,"column":34,"index":572},"code":"  it('should compile dynamic class', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div class=\"a {{b}} c\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).toEqual([]);\n    expect(render).toMatch(strToRegExp(`class:[\"a\",_s(b),\"c\"]`));\n    expect(errors).not.toBeUndefined();\n    expect(errors.length).toEqual(1);\n    expect(errors[0]).toMatch(strToRegExp(`a {{b}} c`));\n    expect(errors[0]).toMatch(strToRegExp(`v-bind`));\n  });","file":"weex/compiler/class.spec.js","skipped":false,"dir":"test"},{"name":"should compile class binding of array","suites":["compile class"],"line":30,"updatePoint":{"line":30,"column":43,"index":1080},"code":"  it('should compile class binding of array', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div v-bind:class=\"['a', 'b', c]\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).toEqual([]);\n    expect(render).toMatch(strToRegExp(`class:['a', 'b', c]`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/class.spec.js","skipped":false,"dir":"test"},{"name":"should compile class binding of map","suites":["compile class"],"line":41,"updatePoint":{"line":41,"column":41,"index":1438},"code":"  it('should compile class binding of map', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div v-bind:class=\"{ a: true, b: x }\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).toEqual([]);\n    expect(render).toMatch(strToRegExp(`class:{ a: true, b: x }`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/class.spec.js","skipped":false,"dir":"test"},{"name":"should compile class binding of a variable","suites":["compile class"],"line":52,"updatePoint":{"line":52,"column":48,"index":1811},"code":"  it('should compile class binding of a variable', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div v-bind:class=\"x\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).toEqual([]);\n    expect(render).toMatch(strToRegExp(`class:x`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/class.spec.js","skipped":false,"dir":"test"},{"name":"should compile class binding by shorthand","suites":["compile class"],"line":63,"updatePoint":{"line":63,"column":47,"index":2151},"code":"  it('should compile class binding by shorthand', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div :class=\"['a', 'b', c]\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).toEqual([]);\n    expect(render).toMatch(strToRegExp(`class:['a', 'b', c]`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/class.spec.js","skipped":false,"dir":"test"},{"name":"should be compiled","suites":["compile basic"],"line":4,"updatePoint":{"line":4,"column":24,"index":175},"code":"  it('should be compiled', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div>{{hi}}</div>`);\n    expect(render).toEqual(`with(this){return _c('div',[_v(_s(hi))])}`);\n    expect(staticRenderFns.length).toBe(0);\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/compile.spec.js","skipped":false,"dir":"test"},{"name":"should compile data bindings","suites":["compile basic"],"line":14,"updatePoint":{"line":14,"column":34,"index":475},"code":"  it('should compile data bindings', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div :a=\"b\"></div>`);\n    expect(render).toEqual(`with(this){return _c('div',{attrs:{\"a\":b}})}`);\n    expect(staticRenderFns).toEqual([]);\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/compile.spec.js","skipped":false,"dir":"test"},{"name":"should compile event bindings","suites":["compile basic"],"line":24,"updatePoint":{"line":24,"column":35,"index":777},"code":"  it('should compile event bindings', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div @click=\"x\"></div>`);\n    expect(render).toEqual(`with(this){return _c('div',{on:{\"click\":x}})}`);\n    expect(staticRenderFns).toEqual([]);\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/compile.spec.js","skipped":false,"dir":"test"},{"name":"should compile data bindings with children","suites":["compile basic"],"line":34,"updatePoint":{"line":34,"column":48,"index":1097},"code":"  it('should compile data bindings with children', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<foo :a=\"b\"><text>Hello</text></foo>`);\n    expect(render).toEqual(`with(this){return _c('foo',{attrs:{\"a\":b}},[_c('text',[_v(\"Hello\")])])}`);\n    expect(staticRenderFns).toEqual([]);\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/compile.spec.js","skipped":false,"dir":"test"},{"name":"should compile unary tag","suites":["compile basic"],"line":44,"updatePoint":{"line":44,"column":30,"index":1439},"code":"  it('should compile unary tag', () => {\n    const inputCase = compile(`<div><input><text>abc</text></div>`);\n    expect(inputCase.render).toMatch(strToRegExp(`return _m(0)`));\n    expect(inputCase.staticRenderFns).toMatch(strToRegExp(`_c('div',[_c('input'),_c('text',[_v(\"abc\")])])`));\n    expect(inputCase.errors).toEqual([]);\n    const imageCase = compile(`<div><image src=\"path\"><text>abc</text></div>`);\n    expect(imageCase.render).toMatch(strToRegExp(`return _m(0)`));\n    expect(imageCase.staticRenderFns).toMatch(strToRegExp(`_c('div',[_c('image',{attrs:{\"src\":\"path\"}}),_c('text',[_v(\"abc\")])])`));\n    expect(imageCase.errors).toEqual([]);\n    const complexCase = compile(`\n      <div>\n        <image src=\"path\">\n        <image></image>\n        <div>\n          <embed>\n          <text>start</text>\n          <input type=\"text\">\n          <input type=\"url\" />\n          <text>end</text>\n        </div>\n      </div>\n    `);\n    expect(complexCase.render).toMatch(strToRegExp(`return _m(0)`));\n    expect(complexCase.staticRenderFns).toMatch(strToRegExp(`_c('image',{attrs:{\"src\":\"path\"}}),_c('image'),_c('div'`));\n    expect(complexCase.staticRenderFns).toMatch(strToRegExp(`_c('div',[_c('embed'),_c('text',[_v(\"start\")]),_c('input',{attrs:{\"type\":\"text\"}}),_c('input',{attrs:{\"type\":\"url\"}}),_c('text',[_v(\"end\")])]`));\n    expect(complexCase.errors).toEqual([]);\n  });","file":"weex/compiler/compile.spec.js","skipped":false,"dir":"test"},{"name":"should compile more complex situation","suites":["compile basic"],"line":71,"updatePoint":{"line":71,"column":43,"index":2832},"code":"  it('should compile more complex situation', () => {\n    // from examples of https://github.com/alibaba/weex\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`\n      <refresh class=\"refresh\" @refresh=\"handleRefresh\" :display=\"displayRefresh\"\n        style=\"flex-direction:row;\">\n        <loading-indicator></loading-indicator>\n        <text style=\"margin-left:36px;color:#eee;\">Load more...</text>\n      </refresh>\n    `);\n    expect(render).toEqual(`with(this){return _c('refresh',{staticClass:[\"refresh\"],staticStyle:{flexDirection:\"row\"},attrs:{\"display\":displayRefresh},on:{\"refresh\":handleRefresh}},[_c('loading-indicator'),_c('text',{staticStyle:{marginLeft:\"36px\",color:\"#eee\"}},[_v(\"Load more...\")])])}`);\n    expect(staticRenderFns).toEqual([]);\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/compile.spec.js","skipped":false,"dir":"test"},{"name":"custom props","suites":["compile props"],"line":4,"updatePoint":{"line":4,"column":18,"index":169},"code":"  it('custom props', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div custom=\"whatever\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).not.toBeUndefined();\n    expect(staticRenderFns.length).toEqual(0);\n    expect(render).toMatch(strToRegExp(`attrs:{\"custom\":\"whatever\"}`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/props.spec.js","skipped":false,"dir":"test"},{"name":"camelize props","suites":["compile props"],"line":16,"updatePoint":{"line":16,"column":20,"index":558},"code":"  it('camelize props', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div kebab-case=\"whatever\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).not.toBeUndefined();\n    expect(staticRenderFns.length).toEqual(0);\n    expect(render).toMatch(strToRegExp(`attrs:{\"kebabCase\":\"whatever\"}`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/props.spec.js","skipped":false,"dir":"test"},{"name":"should be compiled","suites":["compile style"],"line":4,"updatePoint":{"line":4,"column":24,"index":175},"code":"  it('should be compiled', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div style=\"a: x; b: y\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).not.toBeUndefined();\n    expect(staticRenderFns.length).toEqual(0);\n    expect(render).toMatch(strToRegExp(`staticStyle:{a:\"x\",b:\"y\"}`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/style.spec.js","skipped":false,"dir":"test"},{"name":"should compile empty style value","suites":["compile style"],"line":16,"updatePoint":{"line":16,"column":38,"index":581},"code":"  it('should compile empty style value', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div style=\"\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).not.toBeUndefined();\n    expect(staticRenderFns.length).toEqual(0);\n    expect(render).toMatch(/[(^style|^staticStyle)]/);\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/style.spec.js","skipped":false,"dir":"test"},{"name":"should compile style value with trailing semicolon","suites":["compile style"],"line":28,"updatePoint":{"line":28,"column":56,"index":980},"code":"  it('should compile style value with trailing semicolon', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div style=\"a: x; b: y;\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).not.toBeUndefined();\n    expect(staticRenderFns.length).toEqual(0);\n    expect(render).toMatch(strToRegExp(`staticStyle:{a:\"x\",b:\"y\"}`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/style.spec.js","skipped":false,"dir":"test"},{"name":"should compile hyphenated style name & value","suites":["compile style"],"line":40,"updatePoint":{"line":40,"column":50,"index":1399},"code":"  it('should compile hyphenated style name & value', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div style=\"-abc-def: x-y; abc-def: x-y\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).not.toBeUndefined();\n    expect(staticRenderFns.length).toEqual(0);\n    expect(render).toMatch(strToRegExp(`staticStyle:{AbcDef:\"x-y\",abcDef:\"x-y\"}`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/style.spec.js","skipped":false,"dir":"test"},{"name":"should compile dynamic style","suites":["compile style"],"line":52,"updatePoint":{"line":52,"column":34,"index":1832},"code":"  it('should compile dynamic style', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div style=\"a: x; b: {{y}}\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).toEqual([]);\n    expect(render).toMatch(strToRegExp(`style:{a:\"x\",b:_s(y)}`));\n    expect(errors).not.toBeUndefined();\n    expect(errors.length).toEqual(1);\n    expect(errors[0]).toMatch(strToRegExp(`b: {{y}}`));\n    expect(errors[0]).toMatch(strToRegExp(`v-bind`));\n  });","file":"weex/compiler/style.spec.js","skipped":false,"dir":"test"},{"name":"should compile style binding of array","suites":["compile style"],"line":66,"updatePoint":{"line":66,"column":43,"index":2344},"code":"  it('should compile style binding of array', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div v-bind:style=\"[a, b, c]\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).toEqual([]);\n    expect(render).toMatch(strToRegExp(`style:[a, b, c]`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/style.spec.js","skipped":false,"dir":"test"},{"name":"should compile style binding of map","suites":["compile style"],"line":77,"updatePoint":{"line":77,"column":41,"index":2694},"code":"  it('should compile style binding of map', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div v-bind:style=\"{ a: x, b: 'y' + z }\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).toEqual([]);\n    expect(render).toMatch(strToRegExp(`style:{ a: x, b: 'y' + z }`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/style.spec.js","skipped":false,"dir":"test"},{"name":"should compile style binding of a variable","suites":["compile style"],"line":88,"updatePoint":{"line":88,"column":48,"index":3073},"code":"  it('should compile style binding of a variable', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div v-bind:style=\"x\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).toEqual([]);\n    expect(render).toMatch(strToRegExp(`style:x`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/style.spec.js","skipped":false,"dir":"test"},{"name":"should compile style binding by shorthand","suites":["compile style"],"line":99,"updatePoint":{"line":99,"column":47,"index":3413},"code":"  it('should compile style binding by shorthand', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div :style=\"[a, b, c]\"></div>`);\n    expect(render).not.toBeUndefined();\n    expect(staticRenderFns).toEqual([]);\n    expect(render).toMatch(strToRegExp(`style:[a, b, c]`));\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/style.spec.js","skipped":false,"dir":"test"},{"name":"should compile modelable native component","suites":["compile v-model"],"line":4,"updatePoint":{"line":4,"column":47,"index":200},"code":"  it('should compile modelable native component', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div><input v-model=\"x\" /></div>`);\n    expect(render).not.toBeUndefined();\n    expect(render).toMatch(strToRegExp(`attrs:{\"value\":(x)}`));\n    expect(render).toMatch(strToRegExp(`on:{\"input\":function($event){x=$event.target.attr.value}}`));\n    expect(staticRenderFns).toEqual([]);\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/v-model.spec.js","skipped":false,"dir":"test"},{"name":"should compile other component with whole $event as the value","suites":["compile v-model"],"line":16,"updatePoint":{"line":16,"column":67,"index":678},"code":"  it('should compile other component with whole $event as the value', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div><foo v-model=\"x\" /></div>`);\n    expect(render).not.toBeUndefined();\n    expect(render).toMatch(strToRegExp(`model:{value:(x),callback:function ($$v) {x=$$v},expression:\"x\"}`));\n    expect(staticRenderFns).toEqual([]);\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/v-model.spec.js","skipped":false,"dir":"test"},{"name":"should compile with trim modifier for modelable native component","suites":["compile v-model"],"line":27,"updatePoint":{"line":27,"column":70,"index":1100},"code":"  it('should compile with trim modifier for modelable native component', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div><input v-model.trim=\"x\" /></div>`);\n    expect(render).not.toBeUndefined();\n    expect(render).toMatch(strToRegExp(`attrs:{\"value\":(x)}`));\n    expect(render).toMatch(strToRegExp(`on:{\"input\":function($event){x=$event.target.attr.value.trim()}}`));\n    expect(staticRenderFns).toEqual([]);\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/v-model.spec.js","skipped":false,"dir":"test"},{"name":"should compile with trim & lazy modifier","suites":["compile v-model"],"line":39,"updatePoint":{"line":39,"column":46,"index":1569},"code":"  it('should compile with trim & lazy modifier', () => {\n    const {\n      render,\n      staticRenderFns,\n      errors\n    } = compile(`<div><input v-model.trim.lazy=\"x\" /><input v-model.lazy.trim=\"y\" /></div>`);\n    expect(render).not.toBeUndefined();\n    expect(render).toMatch(strToRegExp(`attrs:{\"value\":(x)}`));\n    expect(render).toMatch(strToRegExp(`attrs:{\"value\":(y)}`));\n    expect(render).toMatch(strToRegExp(`on:{\"change\":function($event){x=$event.target.attr.value.trim()}}`));\n    expect(render).toMatch(strToRegExp(`on:{\"change\":function($event){y=$event.target.attr.value.trim()}}`));\n    expect(staticRenderFns).toEqual([]);\n    expect(errors).toEqual([]);\n  });","file":"weex/compiler/v-model.spec.js","skipped":false,"dir":"test"},{"name":"should be generated","suites":["generate attribute"],"line":11,"updatePoint":{"line":11,"column":25,"index":305},"code":"  it('should be generated', () => {\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div>\n        <text value=\"Hello World\" style=\"font-size: 100\"></text>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        el: 'body'\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        style: {\n          fontSize: '100'\n        },\n        attr: {\n          value: 'Hello World'\n        }\n      }]\n    });\n  });","file":"weex/runtime/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should be updated","suites":["generate attribute"],"line":40,"updatePoint":{"line":40,"column":23,"index":925},"code":"  it('should be updated', done => {\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div @click=\"foo\">\n        <text :value=\"x\"></text>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          x: 'Hello World'\n        },\n        methods: {\n          foo: function () {\n            this.x = 'Hello Vue'\n          }\n        },\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      event: ['click'],\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello World'\n        }\n      }]\n    });\n    instance.$fireEvent(instance.doc.body.ref, 'click', {});\n    setTimeout(() => {\n      expect(instance.getRealRoot()).toEqual({\n        type: 'div',\n        event: ['click'],\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Hello Vue'\n          }\n        }]\n      });\n      done();\n    });\n  });","file":"weex/runtime/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should be cleared","suites":["generate attribute"],"line":89,"updatePoint":{"line":89,"column":23,"index":1983},"code":"  it('should be cleared', done => {\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div @click=\"foo\">\n        <text :value=\"x\"></text>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          x: 'Hello World'\n        },\n        methods: {\n          foo: function () {\n            this.x = ''\n          }\n        },\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      event: ['click'],\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello World'\n        }\n      }]\n    });\n    instance.$fireEvent(instance.doc.body.ref, 'click', {});\n    setTimeout(() => {\n      expect(instance.getRealRoot()).toEqual({\n        type: 'div',\n        event: ['click'],\n        children: [{\n          type: 'text',\n          attr: {\n            value: ''\n          }\n        }]\n      });\n      done();\n    });\n  });","file":"weex/runtime/attrs.spec.js","skipped":false,"dir":"test"},{"name":"should be generated","suites":["generate class"],"line":11,"updatePoint":{"line":11,"column":25,"index":301},"code":"  it('should be generated', () => {\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div>\n        <text class=\"a b c\">Hello World</text>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        style: {\n          a: {\n            fontSize: '100'\n          },\n          b: {\n            color: '#ff0000'\n          },\n          c: {\n            fontWeight: 'bold'\n          }\n        },\n        el: 'body'\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        style: {\n          fontSize: '100',\n          color: '#ff0000',\n          fontWeight: 'bold'\n        },\n        attr: {\n          value: 'Hello World'\n        }\n      }]\n    });\n  });","file":"weex/runtime/class.spec.js","skipped":false,"dir":"test"},{"name":"should be updated","suites":["generate class"],"line":53,"updatePoint":{"line":53,"column":23,"index":1160},"code":"  it('should be updated', done => {\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div>\n        <text :class=\"['a', x]\" @click=\"foo\">Hello World</text>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          x: 'b'\n        },\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        style: {\n          a: {\n            fontSize: '100'\n          },\n          b: {\n            color: '#ff0000'\n          },\n          c: {\n            fontWeight: 'bold'\n          },\n          d: {\n            color: '#0000ff',\n            fontWeight: 'bold'\n          }\n        },\n        methods: {\n          foo: function () {\n            this.x = 'd'\n          }\n        },\n        el: 'body'\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        event: ['click'],\n        style: {\n          fontSize: '100',\n          color: '#ff0000'\n        },\n        attr: {\n          value: 'Hello World'\n        }\n      }]\n    });\n    instance.$fireEvent(instance.doc.body.children[0].ref, 'click', {});\n    setTimeout(() => {\n      expect(instance.getRealRoot()).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          event: ['click'],\n          style: {\n            fontSize: '100',\n            color: '#0000ff',\n            fontWeight: 'bold'\n          },\n          attr: {\n            value: 'Hello World'\n          }\n        }]\n      });\n      done();\n    });\n  });","file":"weex/runtime/class.spec.js","skipped":false,"dir":"test"},{"name":"should be applied in order","suites":["generate class"],"line":126,"updatePoint":{"line":126,"column":32,"index":2737},"code":"  it('should be applied in order', done => {\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div>\n        <text :class=\"arr\" @click=\"foo\">Hello World</text>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          arr: ['b', 'a']\n        },\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        style: {\n          a: {\n            color: '#ff0000'\n          },\n          b: {\n            color: '#00ff00'\n          },\n          c: {\n            color: '#0000ff'\n          }\n        },\n        methods: {\n          foo: function () {\n            this.arr.push('c')\n          }\n        },\n        el: 'body'\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        event: ['click'],\n        style: {\n          color: '#ff0000'\n        },\n        attr: {\n          value: 'Hello World'\n        }\n      }]\n    });\n    instance.$fireEvent(instance.doc.body.children[0].ref, 'click', {});\n    setTimeout(() => {\n      expect(instance.getRealRoot()).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          event: ['click'],\n          style: {\n            color: '#0000ff'\n          },\n          attr: {\n            value: 'Hello World'\n          }\n        }]\n      });\n      done();\n    });\n  });","file":"weex/runtime/class.spec.js","skipped":false,"dir":"test"},{"name":"should be cleared","suites":["generate class"],"line":192,"updatePoint":{"line":192,"column":23,"index":4137},"code":"  it('should be cleared', done => {\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div>\n        <text :class=\"['a', x]\" @click=\"foo\">Hello World</text>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          x: 'b'\n        },\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        style: {\n          a: {\n            fontSize: '100'\n          },\n          b: {\n            color: '#ff0000'\n          },\n          c: {\n            fontWeight: 'bold'\n          }\n        },\n        methods: {\n          foo: function () {\n            this.x = 'c'\n          }\n        },\n        el: 'body'\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        event: ['click'],\n        style: {\n          fontSize: '100',\n          color: '#ff0000'\n        },\n        attr: {\n          value: 'Hello World'\n        }\n      }]\n    });\n    instance.$fireEvent(instance.doc.body.children[0].ref, 'click', {});\n    setTimeout(() => {\n      expect(instance.getRealRoot()).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          event: ['click'],\n          style: {\n            fontSize: '100',\n            color: '',\n            fontWeight: 'bold'\n          },\n          attr: {\n            value: 'Hello World'\n          }\n        }]\n      });\n      done();\n    });\n  });","file":"weex/runtime/class.spec.js","skipped":false,"dir":"test"},{"name":"should be bound and fired for native component","suites":["generate events"],"line":11,"updatePoint":{"line":11,"column":52,"index":329},"code":"  it('should be bound and fired for native component', done => {\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div>\n        <text @click=\"foo\">Hello {{x}}</text>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          x: 'World'\n        },\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        methods: {\n          foo: function () {\n            this.x = 'Weex'\n          }\n        },\n        el: 'body'\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        event: ['click'],\n        attr: {\n          value: 'Hello World'\n        }\n      }]\n    });\n    instance.$fireEvent(instance.doc.body.children[0].ref, 'click', {});\n    setTimeout(() => {\n      expect(instance.getRealRoot()).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          event: ['click'],\n          attr: {\n            value: 'Hello Weex'\n          }\n        }]\n      });\n      done();\n    });\n  });","file":"weex/runtime/events.spec.js","skipped":false,"dir":"test"},{"name":"should be bound and fired by custom component","suites":["generate events"],"line":60,"updatePoint":{"line":60,"column":51,"index":1421},"code":"  it('should be bound and fired by custom component', done => {\n    const subTemplate = compileAndStringify(`<text>Hello {{x}}</text>`);\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div>\n        <text>Hello {{x}}</text>\n        <sub @click=\"foo\" @click.native=\"bar\"></sub>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          x: 'World'\n        },\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        components: {\n          sub: {\n            data: function () {\n              return {\n                x: 'Sub'\n              }\n            },\n            render: ${subTemplate.render},\n            staticRenderFns: ${subTemplate.staticRenderFns},\n            created: function () {\n              this.$emit('click')\n            }\n          }\n        },\n        methods: {\n          foo: function () {\n            this.x = 'Foo'\n          },\n          bar: function () {\n            this.x = 'Bar'\n          }\n        },\n        el: 'body'\n      })\n    `);\n    setTimeout(() => {\n      expect(instance.getRealRoot()).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Hello Foo'\n          }\n        }, {\n          type: 'text',\n          event: ['click'],\n          attr: {\n            value: 'Hello Sub'\n          }\n        }]\n      });\n      instance.$fireEvent(instance.doc.body.children[1].ref, 'click', {});\n      setTimeout(() => {\n        expect(instance.getRealRoot()).toEqual({\n          type: 'div',\n          children: [{\n            type: 'text',\n            attr: {\n              value: 'Hello Bar'\n            }\n          }, {\n            type: 'text',\n            event: ['click'],\n            attr: {\n              value: 'Hello Sub'\n            }\n          }]\n        });\n        done();\n      });\n    });\n  });","file":"weex/runtime/events.spec.js","skipped":false,"dir":"test"},{"name":"createInstance","suites":["framework APIs"],"line":38,"updatePoint":{"line":38,"column":20,"index":827},"code":"  it('createInstance', () => {\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      new Vue({\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: 'Hello' }}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }]\n    });\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"createInstance with config","suites":["framework APIs"],"line":60,"updatePoint":{"line":60,"column":32,"index":1368},"code":"  it('createInstance with config', () => {\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      new Vue({\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: JSON.stringify(this.$getConfig()) }}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `, {\n      bundleUrl: 'http://example.com/',\n      a: 1,\n      b: 2\n    });\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: '{\"bundleUrl\":\"http://example.com/\",\"a\":1,\"b\":2}'\n        }\n      }]\n    });\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"createInstance with external data","suites":["framework APIs"],"line":86,"updatePoint":{"line":86,"column":39,"index":2056},"code":"  it('createInstance with external data', () => {\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      new Vue({\n        data: {\n          a: 1,\n          b: 2\n        },\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: this.a + '-' + this.b }}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `, undefined, {\n      a: 111\n    });\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: '111-2'\n        }\n      }]\n    });\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"destroyInstance","suites":["framework APIs"],"line":114,"updatePoint":{"line":114,"column":21,"index":2691},"code":"  it('destroyInstance', done => {\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      new Vue({\n        data: {\n          x: 'Hello'\n        },\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: this.x }}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }]\n    });\n    syncPromise([checkRefresh(instance, {\n      x: 'World'\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'World'\n          }\n        }]\n      });\n      framework.destroyInstance(instance.id);\n    }), checkRefresh(instance, {\n      x: 'Weex'\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'World'\n          }\n        }]\n      });\n      done();\n    })]);\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"refreshInstance","suites":["framework APIs"],"line":166,"updatePoint":{"line":166,"column":21,"index":3836},"code":"  it('refreshInstance', done => {\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      new Vue({\n        data: {\n          x: 'Hello'\n        },\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: this.x }}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }]\n    });\n    framework.refreshInstance(instance.id, {\n      x: 'World'\n    });\n    setTimeout(() => {\n      expect(instance.getRealRoot()).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'World'\n          }\n        }]\n      });\n      framework.destroyInstance(instance.id);\n      const result = framework.refreshInstance(instance.id, {\n        x: 'Weex'\n      });\n      expect(result instanceof Error).toBe(true);\n      expect(result).toMatch(/refreshInstance/);\n      expect(result).toMatch(/not found/);\n      setTimeout(() => {\n        expect(instance.getRealRoot()).toEqual({\n          type: 'div',\n          children: [{\n            type: 'text',\n            attr: {\n              value: 'World'\n            }\n          }]\n        });\n        done();\n      });\n    });\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"getRoot","suites":["framework APIs"],"line":224,"updatePoint":{"line":224,"column":13,"index":5237},"code":"  it('getRoot', () => {\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      new Vue({\n        data: {\n          x: 'Hello'\n        },\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: this.x }}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `);\n    let root = framework.getRoot(instance.id);\n    expect(root.ref).toEqual('_root');\n    expect(root.type).toEqual('div');\n    expect(root.children.length).toEqual(1);\n    expect(root.children[0].type).toEqual('text');\n    expect(root.children[0].attr).toEqual({\n      value: 'Hello'\n    });\n    framework.destroyInstance(instance.id);\n    root = framework.getRoot(instance.id);\n    expect(root instanceof Error).toBe(true);\n    expect(root).toMatch(/getRoot/);\n    expect(root).toMatch(/not found/);\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"receiveTasks: fireEvent","suites":["framework APIs"],"line":253,"updatePoint":{"line":253,"column":29,"index":6151},"code":"  it('receiveTasks: fireEvent', done => {\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      new Vue({\n        data: {\n          x: 'Hello'\n        },\n        methods: {\n          update: function (e) {\n            this.x = 'World'\n          }\n        },\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: this.x }, on: { click: this.update }}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        },\n        event: ['click']\n      }]\n    });\n    const textRef = framework.getRoot(instance.id).children[0].ref;\n    framework.receiveTasks(instance.id, [{\n      method: 'fireEvent',\n      args: [textRef, 'click']\n    }]);\n    setTimeout(() => {\n      expect(instance.getRealRoot()).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'World'\n          },\n          event: ['click']\n        }]\n      });\n      framework.destroyInstance(instance.id);\n      const result = framework.receiveTasks(instance.id, [{\n        method: 'fireEvent',\n        args: [textRef, 'click']\n      }]);\n      expect(result instanceof Error).toBe(true);\n      expect(result).toMatch(/invalid\\sinstance\\sid/);\n      expect(result).toMatch(instance.id);\n      done();\n    });\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"receiveTasks: callback","suites":["framework APIs"],"line":310,"updatePoint":{"line":310,"column":28,"index":7664},"code":"  it('receiveTasks: callback', done => {\n    framework.registerModules({\n      foo: ['a', 'b', 'c']\n    });\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      const moduleFoo = __weex_require_module__('foo')\n      new Vue({\n        data: {\n          x: 'Hello'\n        },\n        methods: {\n          update: function (data = {}) {\n            this.x = data.value || 'World'\n          }\n        },\n        mounted: function () {\n          moduleFoo.a(data => {\n            this.update(data)\n          })\n        },\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: this.x }}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }]\n    });\n    let callbackId;\n    instance.history.callNative.some(task => {\n      if (task.module === 'foo' && task.method === 'a') {\n        callbackId = task.args[0];\n        return true;\n      }\n    });\n    framework.receiveTasks(instance.id, [{\n      method: 'callback',\n      args: [callbackId, undefined, true]\n    }]);\n    setTimeout(() => {\n      expect(instance.getRealRoot()).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'World'\n          }\n        }]\n      });\n      framework.receiveTasks(instance.id, [{\n        method: 'callback',\n        args: [callbackId, {\n          value: 'Weex'\n        }, true]\n      }]);\n      setTimeout(() => {\n        expect(instance.getRealRoot()).toEqual({\n          type: 'div',\n          children: [{\n            type: 'text',\n            attr: {\n              value: 'Weex'\n            }\n          }]\n        });\n        framework.receiveTasks(instance.id, [{\n          method: 'callback',\n          args: [callbackId]\n        }]);\n        setTimeout(() => {\n          expect(instance.getRealRoot()).toEqual({\n            type: 'div',\n            children: [{\n              type: 'text',\n              attr: {\n                value: 'World'\n              }\n            }]\n          });\n          framework.destroyInstance(instance.id);\n          const result = framework.receiveTasks(instance.id, [{\n            method: 'callback',\n            args: [callbackId]\n          }]);\n          expect(result instanceof Error).toBe(true);\n          expect(result).toMatch(/invalid\\sinstance\\sid/);\n          expect(result).toMatch(instance.id);\n          done();\n        });\n      });\n    });\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"registerModules","suites":["framework APIs"],"line":412,"updatePoint":{"line":412,"column":21,"index":10299},"code":"  it('registerModules', () => {\n    framework.registerModules({\n      foo: ['a', 'b', 'c'],\n      bar: [{\n        name: 'a',\n        args: ['string']\n      }, {\n        name: 'b',\n        args: ['number']\n      }, {\n        name: 'c',\n        args: ['string', 'number']\n      }]\n    });\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      const moduleFoo = __weex_require_module__('foo')\n      const moduleBar = __weex_require_module__('bar')\n      const moduleBaz = __weex_require_module__('baz')\n      new Vue({\n        render: function (createElement) {\n          const value = []\n          if (typeof moduleFoo === 'object') {\n            value.push('foo')\n            value.push(Object.keys(moduleFoo))\n          }\n          if (typeof moduleBar === 'object') {\n            value.push('bar')\n            value.push(Object.keys(moduleBar))\n          }\n          if (typeof moduleBaz === 'object') {\n            value.push('baz')\n            value.push(Object.keys(moduleBaz))\n          }\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: value.toString() }}, [])\n          ])\n        },\n        mounted: function () {\n          moduleFoo.a(1, '2', true)\n          moduleBar.b(1)\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'foo,a,b,c,bar,a,b,c,baz,'\n        }\n      }]\n    });\n    expect(instance.history.callNative.filter(task => task.module === 'foo').map(task => `${task.method}(${task.args})`)).toEqual(['a(1,2,true)']);\n    expect(instance.history.callNative.filter(task => task.module === 'bar').map(task => `${task.method}(${task.args})`)).toEqual(['b(1)']);\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"isRegisteredModule","suites":["framework APIs"],"line":469,"updatePoint":{"line":469,"column":24,"index":12107},"code":"  it('isRegisteredModule', () => {\n    framework.registerModules({\n      foo: ['a', 'b'],\n      bar: [{\n        name: 'x',\n        args: ['string']\n      }, {\n        name: 'y',\n        args: ['number']\n      }]\n    });\n    expect(framework.isRegisteredModule('foo')).toBe(true);\n    expect(framework.isRegisteredModule('bar')).toBe(true);\n    expect(framework.isRegisteredModule('foo', 'a')).toBe(true);\n    expect(framework.isRegisteredModule('foo', 'b')).toBe(true);\n    expect(framework.isRegisteredModule('bar', 'x')).toBe(true);\n    expect(framework.isRegisteredModule('bar', 'y')).toBe(true);\n    expect(framework.isRegisteredModule('FOO')).toBe(false);\n    expect(framework.isRegisteredModule(' bar ')).toBe(false);\n    expect(framework.isRegisteredModule('unknown')).toBe(false);\n    expect(framework.isRegisteredModule('#}{)=}')).toBe(false);\n    expect(framework.isRegisteredModule('foo', '')).toBe(false);\n    expect(framework.isRegisteredModule('foo', 'c')).toBe(false);\n    expect(framework.isRegisteredModule('bar', 'z')).toBe(false);\n    expect(framework.isRegisteredModule('unknown', 'unknown')).toBe(false);\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"registerComponents","suites":["framework APIs"],"line":495,"updatePoint":{"line":495,"column":24,"index":13239},"code":"  it('registerComponents', () => {\n    framework.registerComponents(['foo', {\n      type: 'bar'\n    }, 'text']);\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      new Vue({\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', {}, []),\n            createElement('foo', {}, []),\n            createElement('bar', {}, []),\n            createElement('baz', {}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text'\n      }, {\n        type: 'foo'\n      }, {\n        type: 'bar'\n      }, {\n        type: 'baz'\n      }]\n    });\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"isRegisteredComponent","suites":["framework APIs"],"line":526,"updatePoint":{"line":526,"column":27,"index":13994},"code":"  it('isRegisteredComponent', () => {\n    framework.registerComponents(['foo', {\n      type: 'bar'\n    }, 'text']);\n    expect(framework.isRegisteredComponent('foo')).toBe(true);\n    expect(framework.isRegisteredComponent('bar')).toBe(true);\n    expect(framework.isRegisteredComponent('text')).toBe(true);\n    expect(framework.isRegisteredComponent('FOO')).toBe(false);\n    expect(framework.isRegisteredComponent(' bar ')).toBe(false);\n    expect(framework.isRegisteredComponent('<text>')).toBe(false);\n    expect(framework.isRegisteredComponent('#}{)=}')).toBe(false);\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"weex.supports","suites":["framework APIs"],"line":538,"updatePoint":{"line":538,"column":19,"index":14562},"code":"  it('weex.supports', () => {\n    framework.registerComponents(['apple', {\n      type: 'banana'\n    }]);\n    framework.registerModules({\n      cat: ['eat', 'sleep'],\n      dog: [{\n        name: 'bark',\n        args: ['string']\n      }]\n    });\n    expect(framework.supports('@component/apple')).toBe(true);\n    expect(framework.supports('@component/banana')).toBe(true);\n    expect(framework.supports('@module/cat')).toBe(true);\n    expect(framework.supports('@module/cat.eat')).toBe(true);\n    expect(framework.supports('@module/cat.sleep')).toBe(true);\n    expect(framework.supports('@module/dog.bark')).toBe(true);\n    expect(framework.supports('@component/candy')).toBe(false);\n    expect(framework.supports('@module/bird')).toBe(false);\n    expect(framework.supports('@module/bird.sing')).toBe(false);\n    expect(framework.supports('@module/dog.sleep')).toBe(false);\n    expect(framework.supports('apple')).toBe(null);\n    expect(framework.supports('<banana>')).toBe(null);\n    expect(framework.supports('cat')).toBe(null);\n    expect(framework.supports('@dog')).toBe(null);\n    expect(framework.supports('@component/dog#bark')).toBe(null);\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"vm.$getConfig","suites":["framework APIs"],"line":565,"updatePoint":{"line":565,"column":19,"index":15714},"code":"  it('vm.$getConfig', () => {\n    const instance = new Instance(runtime);\n    instance.$create(`\n      new Vue({\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: JSON.stringify(this.$getConfig()) }}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `);\n    expect(JSON.parse(instance.getRealRoot().children[0].attr.value)).toEqual({\n      env: DEFAULT_ENV\n    });\n    const instance2 = new Instance(runtime);\n    instance2.$create(`\n      new Vue({\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: JSON.stringify(this.$getConfig()) }}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `, undefined, {\n      a: 1,\n      b: 2\n    });\n    expect(JSON.parse(instance2.getRealRoot().children[0].attr.value)).toEqual({\n      a: 1,\n      b: 2,\n      env: DEFAULT_ENV\n    });\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"Timer","suites":["framework APIs"],"line":600,"updatePoint":{"line":600,"column":11,"index":16682},"code":"  it('Timer', done => {\n    const instance = new Instance(runtime);\n    instance.$create(`\n      new Vue({\n        data: {\n          x: 0,\n          y: 0\n        },\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: this.x + '-' + this.y }}, [])\n          ])\n        },\n        mounted: function () {\n          const now = Date.now()\n          let timer, timer2\n          setTimeout(() => {\n            this.x = 1\n            clearTimeout(timer)\n            clearInterval(timer2)\n            setInterval(() => {\n              this.y++\n            }, 600)\n          }, 2000)\n          timer = setTimeout(() => {\n            this.x = 3\n          }, 3000)\n          setTimeout(() => {\n            this.x = 3\n          }, 4000)\n          timer2 = setInterval(() => {\n            this.y++\n          }, 900)\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: '0-0'\n        }\n      }]\n    });\n    setTimeout(() => {\n      expect(instance.getRealRoot().children[0].attr.value).toEqual('0-1');\n    }, 950);\n    setTimeout(() => {\n      expect(instance.getRealRoot().children[0].attr.value).toEqual('0-2');\n    }, 1850);\n    setTimeout(() => {\n      expect(instance.getRealRoot().children[0].attr.value).toEqual('1-2');\n    }, 2050);\n    setTimeout(() => {\n      expect(instance.getRealRoot().children[0].attr.value).toEqual('1-3');\n    }, 2650);\n    setTimeout(() => {\n      expect(instance.getRealRoot().children[0].attr.value).toEqual('1-4');\n    }, 3250);\n    setTimeout(() => {\n      framework.destroyInstance(instance.id);\n    }, 3500);\n    setTimeout(() => {\n      expect(instance.getRealRoot().children[0].attr.value).toEqual('1-4');\n      done();\n    }, 4100);\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"send function param","suites":["framework APIs"],"line":669,"updatePoint":{"line":669,"column":25,"index":18584},"code":"  it('send function param', () => {\n    framework.registerModules({\n      foo: ['a']\n    });\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      const moduleFoo = __weex_require_module__('foo')\n      new Vue({\n        mounted: function () {\n          moduleFoo.a(a => a + 1)\n        },\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: 'Hello' }}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `);\n    let callbackId;\n    instance.history.callNative.some(task => {\n      if (task.module === 'foo' && task.method === 'a') {\n        callbackId = task.args[0];\n        return true;\n      }\n    });\n    expect(typeof callbackId).toEqual('string');\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"send Element param","suites":["framework APIs"],"line":697,"updatePoint":{"line":697,"column":24,"index":19378},"code":"  it('send Element param', () => {\n    framework.registerModules({\n      foo: ['a']\n    });\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      const moduleFoo = __weex_require_module__('foo')\n      new Vue({\n        mounted: function () {\n          moduleFoo.a(this.$refs.x)\n        },\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: 'Hello' }, ref: 'x' }, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `);\n    let callbackId;\n    instance.history.callNative.some(task => {\n      if (task.module === 'foo' && task.method === 'a') {\n        callbackId = task.args[0];\n        return true;\n      }\n    });\n    expect(typeof callbackId).toEqual('string');\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"registering global assets","suites":["framework APIs"],"line":725,"updatePoint":{"line":725,"column":31,"index":20192},"code":"  it('registering global assets', () => {\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      Vue.component('test', {\n        render (h) {\n          return h('div', 'Hello')\n        }\n      })\n      new Vue({\n        render (h) {\n          return h('test')\n        },\n        el: 'body'\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }]\n    });\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"adding prototype methods","suites":["framework APIs"],"line":750,"updatePoint":{"line":750,"column":30,"index":20716},"code":"  it('adding prototype methods', () => {\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      Vue.prototype.$test = () => 'Hello'\n      const Test = {\n        render (h) {\n          return h('div', this.$test())\n        }\n      }\n      new Vue({\n        render (h) {\n          return h(Test)\n        },\n        el: 'body'\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }]\n    });\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"using global mixins","suites":["framework APIs"],"line":776,"updatePoint":{"line":776,"column":25,"index":21270},"code":"  it('using global mixins', () => {\n    const instance = new Instance(runtime);\n    framework.createInstance(instance.id, `\n      Vue.mixin({\n        created () {\n          this.test = true\n        }\n      })\n      const Test = {\n        data: () => ({ test: false }),\n        render (h) {\n          return h('div', this.test ? 'Hello' : 'nope')\n        }\n      }\n      new Vue({\n        data: { test: false },\n        render (h) {\n          return this.test ? h(Test) : h('p')\n        },\n        el: 'body'\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }]\n    });\n  });","file":"weex/runtime/framework.spec.js","skipped":false,"dir":"test"},{"name":"should be generated","suites":["node in render function"],"line":11,"updatePoint":{"line":11,"column":25,"index":337},"code":"  it('should be generated', () => {\n    const instance = createInstance(runtime, `\n      new Vue({\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: 'Hello' }}, [])\n          ])\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }]\n    });\n  });","file":"weex/runtime/node.spec.js","skipped":false,"dir":"test"},{"name":"should be generated with all types of text","suites":["node in render function"],"line":32,"updatePoint":{"line":32,"column":48,"index":853},"code":"  it('should be generated with all types of text', () => {\n    const instance = createInstance(runtime, `\n      new Vue({\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: 'Hello' }}, []),\n            'World',\n            createElement('text', {}, ['Weex'])\n          ])\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }, {\n        type: 'text',\n        attr: {\n          value: 'World'\n        }\n      }, {\n        type: 'text',\n        attr: {\n          value: 'Weex'\n        }\n      }]\n    });\n  });","file":"weex/runtime/node.spec.js","skipped":false,"dir":"test"},{"name":"should be generated with comments","suites":["node in render function"],"line":65,"updatePoint":{"line":65,"column":39,"index":1597},"code":"  it('should be generated with comments', () => {// todo\n  });","file":"weex/runtime/node.spec.js","skipped":false,"dir":"test"},{"name":"should be generated with module diff","suites":["node in render function"],"line":67,"updatePoint":{"line":67,"column":42,"index":1663},"code":"  it('should be generated with module diff', done => {\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          counter: 0\n        },\n        methods: {\n          foo: function () {}\n        },\n        render: function (createElement) {\n          switch (this.counter) {\n            case 1:\n            return createElement('div', {}, [\n              createElement('text', { attrs: { value: 'World' }}, [])\n            ])\n\n            case 2:\n            return createElement('div', {}, [\n              createElement('text', { attrs: { value: 'World' }, style: { fontSize: 100 }}, [])\n            ])\n\n            case 3:\n            return createElement('div', {}, [\n              createElement('text', {\n                attrs: { value: 'World' },\n                style: { fontSize: 100 },\n                on: { click: this.foo }\n              }, [])\n            ])\n\n            case 4:\n            return createElement('div', {}, [\n              createElement('text', {\n                attrs: { value: 'Weex' },\n                style: { color: '#ff0000' }\n              }, [])\n            ])\n\n            default:\n            return createElement('div', {}, [\n              createElement('text', { attrs: { value: 'Hello' }}, [])\n            ])\n          }\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }]\n    });\n    syncPromise([checkRefresh(instance, {\n      counter: 1\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'World'\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      counter: 2\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'World'\n          },\n          style: {\n            fontSize: 100\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      counter: 3\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'World'\n          },\n          style: {\n            fontSize: 100\n          },\n          event: ['click']\n        }]\n      });\n    }), checkRefresh(instance, {\n      counter: 4\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Weex'\n          },\n          style: {\n            fontSize: '',\n            color: '#ff0000'\n          }\n        }]\n      });\n      done();\n    })]);\n  });","file":"weex/runtime/node.spec.js","skipped":false,"dir":"test"},{"name":"should be generated with sub components","suites":["node in render function"],"line":185,"updatePoint":{"line":185,"column":45,"index":4421},"code":"  it('should be generated with sub components', () => {\n    const instance = createInstance(runtime, `\n      new Vue({\n        render: function (createElement) {\n          return createElement('div', {}, [\n            createElement('text', { attrs: { value: 'Hello' }}, []),\n            createElement('foo', { props: { x: 'Weex' }})\n          ])\n        },\n        components: {\n          foo: {\n            props: {\n              x: { default: 'World' }\n            },\n            render: function (createElement) {\n              return createElement('text', { attrs: { value: this.x }}, [])\n            }\n          }\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }, {\n        type: 'text',\n        attr: {\n          value: 'Weex'\n        }\n      }]\n    });\n  });","file":"weex/runtime/node.spec.js","skipped":false,"dir":"test"},{"name":"should be generated with if/for diff","suites":["node in render function"],"line":222,"updatePoint":{"line":222,"column":42,"index":5346},"code":"  it('should be generated with if/for diff', done => {\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div>\n        <text v-for=\"item in list\" v-if=\"item.x\">{{item.v}}</text>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          list: [\n            { v: 'Hello', x: true },\n            { v: 'World', x: false },\n            { v: 'Weex', x: true }\n          ]\n        },\n        computed: {\n          x: {\n            get: function () { return 0 },\n            set: function (v) {\n              switch (v) {\n                case 1:\n                this.list[1].x = true\n                break\n                case 2:\n                this.list.push({ v: 'v-if' })\n                break\n                case 3:\n                this.list.push({ v: 'v-for', x: true })\n                break\n                case 4:\n                this.list.splice(1, 2)\n                break\n              }\n            }\n          }\n        },\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }, {\n        type: 'text',\n        attr: {\n          value: 'Weex'\n        }\n      }]\n    });\n    syncPromise([checkRefresh(instance, {\n      x: 1\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Hello'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'World'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'Weex'\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      x: 2\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Hello'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'World'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'Weex'\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      x: 3\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Hello'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'World'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'Weex'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'v-for'\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      x: 4\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Hello'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'v-for'\n          }\n        }]\n      });\n      done();\n    })]);\n  });","file":"weex/runtime/node.spec.js","skipped":false,"dir":"test"},{"name":"should be generated with node structure diff","suites":["node in render function"],"line":371,"updatePoint":{"line":371,"column":50,"index":8474},"code":"  it('should be generated with node structure diff', done => {\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          counter: 0\n        },\n        render: function (createElement) {\n          switch (this.counter) {\n            case 1:\n            return createElement('div', {}, [\n              createElement('text', { attrs: { value: 'Hello' }}, []),\n              createElement('text', { attrs: { value: 'World' }}, [])\n            ])\n\n            case 2:\n            return createElement('div', {}, [\n              createElement('text', { attrs: { value: 'Hello' }}, []),\n              createElement('text', { attrs: { value: 'World' }}, []),\n              createElement('text', { attrs: { value: 'Weex' }}, [])\n            ])\n\n            case 3:\n            return createElement('div', {}, [\n              createElement('text', { attrs: { value: 'Hello' }}, []),\n              createElement('text', { attrs: { value: 'Weex' }}, [])\n            ])\n\n            case 4:\n            return createElement('div', {}, [\n              createElement('text', { attrs: { value: 'Weex' }}, [])\n            ])\n\n            case 5:\n            return createElement('div', {}, [\n              createElement('text', { attrs: { value: 'Hello' }}, []),\n              createElement('text', { attrs: { value: 'Weex' }}, [])\n            ])\n\n            case 6:\n            return createElement('div', {}, [\n              createElement('input', { attrs: { value: 'Hello' }}, []),\n              createElement('text', { attrs: { value: 'Weex' }}, [])\n            ])\n\n            default:\n            return createElement('div', {}, [\n              createElement('text', { attrs: { value: 'Hello' }}, []),\n            ])\n          }\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: 'Hello'\n        }\n      }]\n    });\n    syncPromise([checkRefresh(instance, {\n      counter: 1\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Hello'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'World'\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      counter: 2\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Hello'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'World'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'Weex'\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      counter: 3\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Hello'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'Weex'\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      counter: 4\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Weex'\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      counter: 5\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Hello'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'Weex'\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      counter: 6\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'input',\n          attr: {\n            value: 'Hello'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'Weex'\n          }\n        }]\n      });\n      done();\n    })]);\n  });","file":"weex/runtime/node.spec.js","skipped":false,"dir":"test"},{"name":"should be generated with component diff","suites":["node in render function"],"line":538,"updatePoint":{"line":538,"column":45,"index":12502},"code":"  it('should be generated with component diff', done => {\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          counter: 0\n        },\n        components: {\n          foo: {\n            props: { a: { default: '1' }, b: { default: '2' }},\n            render: function (createElement) {\n              return createElement('text', { attrs: { value: this.a + '-' + this.b }}, [])\n            }\n          },\n          bar: {\n            render: function (createElement) {\n              return createElement('text', { attrs: { value: 'Bar' }, style: { fontSize: 100 }})\n            }\n          },\n          baz: {\n            render: function (createElement) {\n              return createElement('image', { attrs: { src: 'http://example.com/favicon.ico' }})\n            }\n          }\n        },\n        render: function (createElement) {\n          switch (this.counter) {\n            case 1:\n            return createElement('div', {}, [\n              createElement('foo', { props: { a: '111', b: '222' }}, [])\n            ])\n\n            case 2:\n            return createElement('div', {}, [\n              createElement('foo', {}, [])\n            ])\n\n            case 3:\n            return createElement('div', {}, [\n              createElement('bar', {}, [])\n            ])\n\n            case 4:\n            return createElement('div', {}, [\n              createElement('baz', {}, [])\n            ])\n\n            case 5:\n            return createElement('div', {}, [\n              createElement('foo', {}, []),\n              createElement('bar', {}, []),\n              createElement('baz', {}, [])\n            ])\n\n            default:\n            return createElement('div', {}, [\n              createElement('foo', { props: { a: '111' }}, [])\n            ])\n          }\n        },\n        el: \"body\"\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        attr: {\n          value: '111-2'\n        }\n      }]\n    });\n    syncPromise([checkRefresh(instance, {\n      counter: 1\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: '111-222'\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      counter: 2\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: '1-2'\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      counter: 3\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: 'Bar'\n          },\n          style: {\n            fontSize: 100\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      counter: 4\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'image',\n          attr: {\n            src: 'http://example.com/favicon.ico'\n          }\n        }]\n      });\n    }), checkRefresh(instance, {\n      counter: 5\n    }, result => {\n      expect(result).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          attr: {\n            value: '1-2'\n          }\n        }, {\n          type: 'text',\n          attr: {\n            value: 'Bar'\n          },\n          style: {\n            fontSize: 100\n          }\n        }, {\n          type: 'image',\n          attr: {\n            src: 'http://example.com/favicon.ico'\n          }\n        }]\n      });\n      done();\n    })]);\n  });","file":"weex/runtime/node.spec.js","skipped":false,"dir":"test"},{"name":"should be generated","suites":["generate style"],"line":11,"updatePoint":{"line":11,"column":25,"index":301},"code":"  it('should be generated', () => {\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div>\n        <text style=\"font-size: 100\">Hello World</text>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        el: 'body'\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        style: {\n          fontSize: '100'\n        },\n        attr: {\n          value: 'Hello World'\n        }\n      }]\n    });\n  });","file":"weex/runtime/style.spec.js","skipped":false,"dir":"test"},{"name":"should be generated by array binding","suites":["generate style"],"line":40,"updatePoint":{"line":40,"column":42,"index":931},"code":"  it('should be generated by array binding', done => {\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div>\n        <text :style=\"[x, y]\" @click=\"foo\">Hello {{z}}</text>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          x: { fontSize: 100, color: '#00ff00' },\n          y: { color: '#ff0000', fontWeight: 'bold' },\n          z: 'World'\n        },\n        methods: {\n          foo: function () {\n            this.x.fontSize = 200\n            this.x.color = '#0000ff'\n            Vue.delete(this.y, 'fontWeight')\n            this.z = 'Weex'\n          }\n        },\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        el: 'body'\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        event: ['click'],\n        style: {\n          fontSize: 100,\n          color: '#ff0000',\n          fontWeight: 'bold'\n        },\n        attr: {\n          value: 'Hello World'\n        }\n      }]\n    });\n    instance.$fireEvent(instance.doc.body.children[0].ref, 'click', {});\n    setTimeout(() => {\n      expect(instance.getRealRoot()).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          event: ['click'],\n          style: {\n            fontSize: 200,\n            color: '#ff0000',\n            fontWeight: ''\n          },\n          attr: {\n            value: 'Hello Weex'\n          }\n        }]\n      });\n      done();\n    });\n  });","file":"weex/runtime/style.spec.js","skipped":false,"dir":"test"},{"name":"should be generated by map binding","suites":["generate style"],"line":104,"updatePoint":{"line":104,"column":40,"index":2475},"code":"  it('should be generated by map binding', done => {\n    const {\n      render,\n      staticRenderFns\n    } = compileAndStringify(`\n      <div>\n        <text :style=\"{ fontSize: x, color: '#00ff00' }\" @click=\"foo\">Hello</text>\n        <text :style=\"y\">{{z}}</text>\n      </div>\n    `);\n    const instance = createInstance(runtime, `\n      new Vue({\n        data: {\n          x: 100,\n          y: { color: '#ff0000', fontWeight: 'bold' },\n          z: 'World'\n        },\n        methods: {\n          foo: function () {\n            this.x = 200\n            this.y.color = '#0000ff'\n            Vue.delete(this.y, 'fontWeight')\n            this.z = 'Weex'\n          }\n        },\n        render: ${render},\n        staticRenderFns: ${staticRenderFns},\n        el: 'body'\n      })\n    `);\n    expect(instance.getRealRoot()).toEqual({\n      type: 'div',\n      children: [{\n        type: 'text',\n        event: ['click'],\n        style: {\n          fontSize: 100,\n          color: '#00ff00'\n        },\n        attr: {\n          value: 'Hello'\n        }\n      }, {\n        type: 'text',\n        style: {\n          color: '#ff0000',\n          fontWeight: 'bold'\n        },\n        attr: {\n          value: 'World'\n        }\n      }]\n    });\n    instance.$fireEvent(instance.doc.body.children[0].ref, 'click', {});\n    setTimeout(() => {\n      expect(instance.getRealRoot()).toEqual({\n        type: 'div',\n        children: [{\n          type: 'text',\n          event: ['click'],\n          style: {\n            fontSize: 200,\n            color: '#00ff00'\n          },\n          attr: {\n            value: 'Hello'\n          }\n        }, {\n          type: 'text',\n          style: {\n            color: '#0000ff',\n            fontWeight: ''\n          },\n          attr: {\n            value: 'Weex'\n          }\n        }]\n      });\n      done();\n    });\n  });","file":"weex/runtime/style.spec.js","skipped":false,"dir":"test"}]}