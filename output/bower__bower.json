{"repo":"bower/bower","url":"https://github.com/bower/bower","branch":"master","configs":[{"package":"bower","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"bower-config","lang":"js","dir":"packages/bower-config/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"bower-endpoint-parser","lang":"js","dir":"packages/bower-endpoint-parser/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"bower-json","lang":"js","dir":"packages/bower-json/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"bower-logger","lang":"js","dir":"packages/bower-logger/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"bower-registry-client","lang":"js","dir":"packages/bower-registry-client/test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"runs bower installation","suites":["bower"],"updatePoint":{"line":7,"column":29,"index":166},"line":7,"code":"  it('runs bower installation', function () {\n    var result = runBin();\n    var text = result.stdout.toString();\n    expect(text).to.contain('Usage:');\n    expect(text).to.contain('Commands:');\n  });","file":"commands/bower.js","skipped":false,"dir":"test"},{"name":"Returns same value than the full command","suites":["abbreviations"],"updatePoint":{"line":15,"column":46,"index":428},"line":15,"code":"  it('Returns same value than the full command', function () {\n    var abbr = runBin(['install']);\n    var full = runBin(['i']);\n    expect(abbr.stdout.toString()).to.be.equal(full.stdout.toString());\n  });","file":"commands/bower.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower cache clean"],"updatePoint":{"line":34,"column":31,"index":894},"line":34,"code":"  it('correctly reads arguments', function () {\n    expect(cacheClean.readOptions(['jquery', 'angular'])).to.eql([['jquery', 'angular'], {}]);\n  });","file":"commands/cache/clean.js","skipped":false,"dir":"test"},{"name":"removes all cache","suites":["bower cache clean"],"updatePoint":{"line":37,"column":23,"index":1035},"line":37,"code":"  it('removes all cache', function () {\n    cacheDir.prepare();\n    return helpers.run(cacheClean, [undefined, {}, {\n      storage: {\n        packages: cacheDir.path\n      }\n    }]).spread(function (result) {\n      object.map(cacheFiles, function (_, cacheFile) {\n        expect(cacheDir.exists(cacheFile)).to.be(false);\n      });\n    });\n  });","file":"commands/cache/clean.js","skipped":false,"dir":"test"},{"name":"removes single package","suites":["bower cache clean"],"updatePoint":{"line":49,"column":28,"index":1385},"line":49,"code":"  it('removes single package', function () {\n    cacheDir.prepare();\n    return helpers.run(cacheClean, [['angular'], {}, {\n      storage: {\n        packages: cacheDir.path\n      }\n    }]).spread(function (result) {\n      var paths = Object.keys(cacheFiles);\n      expect(cacheDir.exists(paths[0])).to.be(false);\n      expect(cacheDir.exists(paths[1])).to.be(false);\n      expect(cacheDir.exists(paths[2])).to.be(true);\n    });\n  });","file":"commands/cache/clean.js","skipped":false,"dir":"test"},{"name":"removes single package package version","suites":["bower cache clean"],"updatePoint":{"line":62,"column":44,"index":1835},"line":62,"code":"  it('removes single package package version', function () {\n    cacheDir.prepare();\n    return helpers.run(cacheClean, [['angular#1.3.8'], {}, {\n      storage: {\n        packages: cacheDir.path\n      }\n    }]).spread(function (result) {\n      var paths = Object.keys(cacheFiles);\n      expect(cacheDir.exists(paths[0])).to.be(false);\n      expect(cacheDir.exists(paths[1])).to.be(true);\n      expect(cacheDir.exists(paths[2])).to.be(true);\n    });\n  });","file":"commands/cache/clean.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower cache list"],"updatePoint":{"line":21,"column":31,"index":581},"line":21,"code":"  it('correctly reads arguments', function () {\n    expect(cacheList.readOptions(['jquery', 'angular'])).to.eql([['jquery', 'angular'], {}]);\n  });","file":"commands/cache/list.js","skipped":false,"dir":"test"},{"name":"lists packages from cache","suites":["bower cache list"],"updatePoint":{"line":24,"column":31,"index":729},"line":24,"code":"  it('lists packages from cache', function () {\n    cacheDir.prepare();\n    return helpers.run(cacheList, [undefined, {}, {\n      storage: {\n        packages: cacheDir.path\n      }\n    }]).spread(function (result) {\n      expect(result[0].canonicalDir).to.be(cacheDir.getPath('87323d6d4e48be291a9616a033d4cc6c/1.3.8'));\n      expect(result[0].pkgMeta.version).to.be('1.3.8');\n      expect(result[1].pkgMeta.version).to.be('1.3.9');\n      expect(result[2].pkgMeta.version).to.be('1.0.0');\n    });\n  });","file":"commands/cache/list.js","skipped":false,"dir":"test"},{"name":"lists selected package names","suites":["bower cache list"],"updatePoint":{"line":37,"column":34,"index":1234},"line":37,"code":"  it('lists selected package names', function () {\n    cacheDir.prepare();\n    return helpers.run(cacheList, [['angular'], {}, {\n      storage: {\n        packages: cacheDir.path\n      }\n    }]).spread(function (result) {\n      expect(result[0].canonicalDir).to.be(cacheDir.getPath('87323d6d4e48be291a9616a033d4cc6c/1.3.8'));\n      expect(result[0].pkgMeta.version).to.be('1.3.8');\n      expect(result[1].pkgMeta.version).to.be('1.3.9');\n    });\n  });","file":"commands/cache/list.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower help"],"updatePoint":{"line":7,"column":31,"index":179},"line":7,"code":"  it('correctly reads arguments', function () {\n    expect(help.readOptions(['foo'])).to.eql(['foo']);\n  });","file":"commands/help.js","skipped":false,"dir":"test"},{"name":"shows general help","suites":["bower help"],"updatePoint":{"line":10,"column":24,"index":281},"line":10,"code":"  it('shows general help', function () {\n    return helpers.run(help).spread(function (result) {\n      expect(result.usage[0]).to.be.a('string');\n      expect(result.commands).to.be.a('object');\n      expect(result.options).to.be.a('object');\n    });\n  });","file":"commands/help.js","skipped":false,"dir":"test"},{"name":"displays error for non-existing command","suites":["bower help"],"updatePoint":{"line":27,"column":45,"index":1081},"line":27,"code":"  it('displays error for non-existing command', function () {\n    return helpers.run(help, ['fuu']).fail(function (e) {\n      expect(e.message).to.be('Unknown command: fuu');\n      expect(e.command).to.be('fuu');\n      expect(e.code).to.be('EUNKNOWNCMD');\n    });\n  });","file":"commands/help.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower home"],"updatePoint":{"line":9,"column":31,"index":202},"line":9,"code":"  it('correctly reads arguments', function () {\n    expect(home.readOptions(['foo'])).to.eql(['foo']);\n  });","file":"commands/home.js","skipped":false,"dir":"test"},{"name":"opens repository home page in web browser","suites":["bower home"],"updatePoint":{"line":23,"column":47,"index":555},"line":23,"code":"  it('opens repository home page in web browser', function () {\n    mainPackage.prepare();\n    return Q.Promise(function (resolve) {\n      var home = helpers.command('home', {\n        opn: resolve\n      });\n      helpers.run(home, [mainPackage.path]);\n    }).then(function (url) {\n      expect(url).to.be('http://bower.io');\n    });\n  });","file":"commands/home.js","skipped":false,"dir":"test"},{"name":"opens home page of current repository","suites":["bower home"],"updatePoint":{"line":34,"column":43,"index":890},"line":34,"code":"  it('opens home page of current repository', function () {\n    mainPackage.prepare();\n    return Q.Promise(function (resolve) {\n      var home = helpers.command('home', {\n        opn: resolve\n      });\n      helpers.run(home, [undefined, {\n        cwd: mainPackage.path\n      }]);\n    }).then(function (url) {\n      expect(url).to.be('http://bower.io');\n    });\n  });","file":"commands/home.js","skipped":false,"dir":"test"},{"name":"errors if no homepage is set","suites":["bower home"],"updatePoint":{"line":47,"column":34,"index":1250},"line":47,"code":"  it('errors if no homepage is set', function () {\n    wrongPackage.prepare();\n    return Q.Promise(function (resolve) {\n      var home = helpers.command('home', {\n        opn: resolve\n      });\n      helpers.run(home, [wrongPackage.path]).fail(resolve);\n    }).then(function (reason) {\n      expect(reason.message).to.be('No homepage set for package');\n      expect(reason.code).to.be('ENOHOME');\n    });\n  });","file":"commands/home.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower info"],"updatePoint":{"line":7,"column":31,"index":179},"line":7,"code":"  it('correctly reads arguments', function () {\n    expect(info.readOptions(['pkg', 'property'])).to.eql(['pkg', 'property']);\n  });","file":"commands/info.js","skipped":false,"dir":"test"},{"name":"just returns if not package is specified","suites":["bower info"],"updatePoint":{"line":30,"column":46,"index":733},"line":30,"code":"  it('just returns if not package is specified', function () {\n    return helpers.run(info).spread(function (results) {\n      expect(results).to.be(undefined);\n    });\n  });","file":"commands/info.js","skipped":false,"dir":"test"},{"name":"shows info about given package","suites":["bower info"],"updatePoint":{"line":35,"column":36,"index":897},"line":35,"code":"  it('shows info about given package', function () {\n    mainPackage.prepareGit({});\n    return helpers.run(info, [mainPackage.path]).spread(function (results) {\n      expect(results).to.eql({\n        latest: meta2,\n        name: mainPackage.path,\n        versions: ['0.1.3', '0.1.2']\n      });\n    });\n  });","file":"commands/info.js","skipped":false,"dir":"test"},{"name":"should handle @ as a divider","suites":["bower info"],"updatePoint":{"line":45,"column":34,"index":1204},"line":45,"code":"  it('should handle @ as a divider', function () {\n    return helpers.run(info, [mainPackage.path + '@0.1.3']).spread(function (results) {\n      expect(results).to.eql({\n        name: 'package',\n        version: '0.1.3',\n        homepage: 'http://bower.io',\n        description: 'Hello world! Hello!'\n      });\n    });\n  });","file":"commands/info.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower init"],"updatePoint":{"line":8,"column":31,"index":222},"line":8,"code":"  it('correctly reads arguments', function () {\n    expect(init.readOptions([])).to.eql([]);\n  });","file":"commands/init.js","skipped":false,"dir":"test"},{"name":"generates bower.json file","suites":["bower init"],"updatePoint":{"line":11,"column":31,"index":321},"line":11,"code":"  it('generates bower.json file', function () {\n    mainPackage.prepare();\n    var logger = init({\n      cwd: mainPackage.path,\n      interactive: true\n    });\n    return helpers.expectEvent(logger, 'prompt').spread(function (prompt, answer) {\n      answer({\n        name: 'test-name',\n        description: 'test-description',\n        keywords: 'test-keyword',\n        authors: 'test-author',\n        license: 'test-license',\n        homepage: 'test-homepage',\n        private: true\n      });\n      return helpers.expectEvent(logger, 'prompt');\n    }).spread(function (prompt, answer) {\n      answer({\n        prompt: true\n      });\n      return helpers.expectEvent(logger, 'end');\n    }).then(function () {\n      expect(mainPackage.readJson('bower.json')).to.eql({\n        name: 'test-name',\n        homepage: 'test-homepage',\n        authors: ['test-author'],\n        description: 'test-description',\n        keywords: ['test-keyword'],\n        license: 'test-license',\n        private: true\n      });\n    });\n  });","file":"commands/init.js","skipped":false,"dir":"test"},{"name":"errors on non-interactive mode","suites":["bower init"],"updatePoint":{"line":45,"column":36,"index":1344},"line":45,"code":"  it('errors on non-interactive mode', function () {\n    mainPackage.prepare();\n    return helpers.run(init, {\n      cwd: mainPackage.path\n    }).then(function () {\n      throw 'should fail';\n    }, function (reason) {\n      expect(reason.message).to.be('Register requires an interactive shell');\n      expect(reason.code).to.be('ENOINT');\n    });\n  });","file":"commands/init.js","skipped":false,"dir":"test"},{"name":"warns about existing bower.json","suites":["bower init"],"updatePoint":{"line":56,"column":37,"index":1699},"line":56,"code":"  it('warns about existing bower.json', function () {\n    mainPackage.prepare({\n      'bower.json': {\n        name: 'foobar'\n      }\n    });\n    var logger = init({\n      cwd: mainPackage.path,\n      interactive: true\n    });\n    return helpers.expectEvent(logger, 'log').spread(function (event) {\n      expect(event.level).to.be('warn');\n      expect(event.message).to.be('The existing bower.json file will be used and filled in');\n    });\n  });","file":"commands/init.js","skipped":false,"dir":"test"},{"name":"gets defaults from package.json","suites":["bower init"],"updatePoint":{"line":71,"column":37,"index":2146},"line":71,"code":"  it('gets defaults from package.json', function () {\n    mainPackage.prepare({\n      'package.json': {\n        name: 'name-from-npm',\n        description: 'description from npm',\n        main: 'index.js',\n        keywords: ['foo', 'bar'],\n        author: 'JD Isaacks',\n        license: 'ISC'\n      }\n    });\n    var logger = init({\n      cwd: mainPackage.path,\n      interactive: true\n    });\n    return helpers.expectEvent(logger, 'prompt').spread(function (prompt, answer) {\n      // Get defaults from prompt\n      var defaults = prompt.reduce(function (memo, obj) {\n        memo[obj.name] = obj['default'];\n        return memo;\n      }, {}); // Answer with defaults\n\n      answer({\n        name: defaults.name,\n        description: defaults.description,\n        main: defaults.main,\n        keywords: defaults.keywords,\n        authors: defaults.authors,\n        license: defaults.license,\n        homepage: 'test-homepage',\n        private: true\n      });\n      return helpers.expectEvent(logger, 'prompt');\n    }).spread(function (prompt, answer) {\n      answer({\n        prompt: true\n      });\n      return helpers.expectEvent(logger, 'end');\n    }).then(function () {\n      expect(mainPackage.readJson('bower.json')).to.eql({\n        name: 'name-from-npm',\n        description: 'description from npm',\n        main: 'index.js',\n        keywords: ['foo', 'bar'],\n        authors: ['JD Isaacks'],\n        license: 'ISC',\n        private: true,\n        homepage: 'test-homepage'\n      });\n    });\n  });","file":"commands/init.js","skipped":false,"dir":"test"},{"name":"can handle strange characters","suites":["bower init"],"updatePoint":{"line":122,"column":35,"index":3652},"line":122,"code":"  it('can handle strange characters', function () {\n    mainPackage.prepare({\n      'package.json': {\n        name: 'name/from npm'\n      }\n    });\n    var logger = init({\n      cwd: mainPackage.path,\n      interactive: true\n    });\n    return helpers.expectEvent(logger, 'prompt');\n  });","file":"commands/init.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower install"],"updatePoint":{"line":18,"column":33,"index":490},"line":18,"code":"    it('correctly reads arguments', function() {\n        expect(\n            install.readOptions([\n                'jquery',\n                'angular',\n                '-F',\n                '-p',\n                '-S',\n                '-D',\n                '-E'\n            ])\n        ).to.eql([\n            ['jquery', 'angular'],\n            {\n                forceLatest: true,\n                production: true,\n                save: true,\n                saveDev: true,\n                saveExact: true\n            }\n        ]);\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"correctly reads long arguments","suites":["bower install"],"updatePoint":{"line":41,"column":38,"index":1034},"line":41,"code":"    it('correctly reads long arguments', function() {\n        expect(\n            install.readOptions([\n                'jquery',\n                'angular',\n                '--force-latest',\n                '--production',\n                '--save',\n                '--save-dev',\n                '--save-exact'\n            ])\n        ).to.eql([\n            ['jquery', 'angular'],\n            {\n                forceLatest: true,\n                production: true,\n                save: true,\n                saveDev: true,\n                saveExact: true\n            }\n        ]);\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"writes to bower.json if --save flag is used","suites":["bower install"],"updatePoint":{"line":87,"column":51,"index":2121},"line":87,"code":"    it('writes to bower.json if --save flag is used', function() {\n        mainPackage.prepare();\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test'\n            }\n        });\n\n        return helpers\n            .run(install, [\n                [mainPackage.path],\n                {\n                    save: true\n                }\n            ])\n            .then(function() {\n                expect(tempDir.read('bower.json')).to.contain('dependencies');\n            });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"does not write to bower.json if no --save flag is used","suites":["bower install"],"updatePoint":{"line":108,"column":62,"index":2645},"line":108,"code":"    it('does not write to bower.json if no --save flag is used', function() {\n        mainPackage.prepare();\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test'\n            }\n        });\n\n        return helpers.run(install, [[mainPackage.path], {}]).then(function() {\n            expect(tempDir.read('bower.json')).to.not.contain('dependencies');\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"writes to bower.json if save config setting is set to true","suites":["bower install"],"updatePoint":{"line":122,"column":66,"index":3049},"line":122,"code":"    it('writes to bower.json if save config setting is set to true', function() {\n        mainPackage.prepare();\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test'\n            }\n        });\n\n        return helpers\n            .run(install, [\n                [mainPackage.path],\n                {},\n                {\n                    save: true\n                }\n            ])\n            .then(function() {\n                expect(tempDir.read('bower.json')).to.contain('dependencies');\n            });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"writes an exact version number to dependencies in bower.json if --save --save-exact flags are used","suites":["bower install"],"updatePoint":{"line":144,"column":106,"index":3637},"line":144,"code":"    it('writes an exact version number to dependencies in bower.json if --save --save-exact flags are used', function() {\n        mainPackage.prepare({\n            'bower.json': {\n                name: 'package',\n                version: '1.2.3'\n            }\n        });\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test'\n            }\n        });\n\n        return helpers\n            .run(install, [\n                [mainPackage.path],\n                {\n                    saveExact: true,\n                    save: true\n                }\n            ])\n            .then(function() {\n                expect(\n                    tempDir.readJson('bower.json').dependencies.package\n                ).to.equal(mainPackage.path + '#1.2.3');\n            });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"writes an exact version number to dependencies in bower.json if save and save-exact config settings are set to true","suites":["bower install"],"updatePoint":{"line":173,"column":123,"index":4452},"line":173,"code":"    it('writes an exact version number to dependencies in bower.json if save and save-exact config settings are set to true', function() {\n        mainPackage.prepare({\n            'bower.json': {\n                name: 'package',\n                version: '1.2.3'\n            }\n        });\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test'\n            }\n        });\n\n        return helpers\n            .run(install, [\n                [mainPackage.path],\n                {},\n                {\n                    saveExact: true,\n                    save: true\n                }\n            ])\n            .then(function() {\n                expect(\n                    tempDir.readJson('bower.json').dependencies.package\n                ).to.equal(mainPackage.path + '#1.2.3');\n            });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"writes an exact version number to devDependencies in bower.json if --save-dev --save-exact flags are used","suites":["bower install"],"updatePoint":{"line":203,"column":113,"index":5277},"line":203,"code":"    it('writes an exact version number to devDependencies in bower.json if --save-dev --save-exact flags are used', function() {\n        mainPackage.prepare({\n            'bower.json': {\n                name: 'package',\n                version: '0.1.0'\n            }\n        });\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test'\n            }\n        });\n\n        return helpers\n            .run(install, [\n                [mainPackage.path],\n                {\n                    saveExact: true,\n                    saveDev: true\n                }\n            ])\n            .then(function() {\n                expect(\n                    tempDir.readJson('bower.json').devDependencies.package\n                ).to.equal(mainPackage.path + '#0.1.0');\n            });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"writes an exact version number to devDependencies in bower.json if save-exact config setting is true and --save-dev flag is used","suites":["bower install"],"updatePoint":{"line":232,"column":136,"index":6111},"line":232,"code":"    it('writes an exact version number to devDependencies in bower.json if save-exact config setting is true and --save-dev flag is used', function() {\n        mainPackage.prepare({\n            'bower.json': {\n                name: 'package',\n                version: '0.1.0'\n            }\n        });\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test'\n            }\n        });\n\n        return helpers\n            .run(install, [\n                [mainPackage.path],\n                {\n                    saveDev: true\n                },\n                {\n                    saveExact: true\n                }\n            ])\n            .then(function() {\n                expect(\n                    tempDir.readJson('bower.json').devDependencies.package\n                ).to.equal(mainPackage.path + '#0.1.0');\n            });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"reads .bowerrc from cwd","suites":["bower install"],"updatePoint":{"line":263,"column":31,"index":6876},"line":263,"code":"    it('reads .bowerrc from cwd', function() {\n        mainPackage.prepare({\n            foo: 'bar'\n        });\n\n        tempDir.prepare({\n            '.bowerrc': {\n                directory: 'assets'\n            },\n            'bower.json': {\n                name: 'test',\n                dependencies: {\n                    package: mainPackage.path\n                }\n            }\n        });\n\n        return helpers.run(install).then(function() {\n            expect(tempDir.read('assets/package/foo')).to.be('bar');\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":".bowerrc directory can be an absolute path","suites":["bower install"],"updatePoint":{"line":285,"column":50,"index":7436},"line":285,"code":"    it('.bowerrc directory can be an absolute path', function() {\n        mainPackage.prepare({\n            foo: 'bar'\n        });\n\n        tempDir.prepare({\n            '.bowerrc': {\n                directory: '/tmp/bower-absolute-destination-directory'\n            },\n            'bower.json': {\n                name: 'test',\n                dependencies: {\n                    package: mainPackage.path\n                }\n            }\n        });\n\n        return helpers.run(install).then(function() {\n            expect(\n                require('fs')\n                    .readFileSync(\n                        '/tmp/bower-absolute-destination-directory/package/foo',\n                        'utf8'\n                    )\n                    .toString()\n            ).to.be('bar');\n            var deferred = Q.defer();\n            rimraf('/tmp/bower-absolute-destination-directory', function(err) {\n                if (err) {\n                    deferred.reject(err);\n                } else {\n                    deferred.resolve();\n                }\n            });\n            return deferred;\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"runs preinstall hook","suites":["bower install"],"updatePoint":{"line":323,"column":28,"index":8534},"line":323,"code":"    it('runs preinstall hook', function() {\n        mainPackage.prepare();\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test',\n                dependencies: {\n                    package: mainPackage.path\n                }\n            },\n            '.bowerrc': {\n                scripts: {\n                    preinstall:\n                        'node -e \\'require(\"fs\").writeFileSync(\"preinstall.txt\", \"%\")\\''\n                }\n            }\n        });\n\n        return helpers.run(install).then(function() {\n            expect(tempDir.read('preinstall.txt')).to.be('package');\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"runs postinstall hook","suites":["bower install"],"updatePoint":{"line":346,"column":29,"index":9169},"line":346,"code":"    it('runs postinstall hook', function() {\n        mainPackage.prepare();\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test',\n                dependencies: {\n                    package: mainPackage.path\n                }\n            },\n            '.bowerrc': {\n                scripts: {\n                    postinstall:\n                        'node -e \\'require(\"fs\").writeFileSync(\"postinstall.txt\", \"%\")\\''\n                }\n            }\n        });\n\n        return helpers.run(install).then(function() {\n            expect(tempDir.read('postinstall.txt')).to.be('package');\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"does not run hooks if nothing is installed","suites":["bower install"],"updatePoint":{"line":370,"column":50,"index":9886},"line":370,"code":"    it('does not run hooks if nothing is installed', function() {\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test'\n            },\n            '.bowerrc': {\n                scripts: {\n                    postinstall:\n                        'node -e \\'require(\"fs\").writeFileSync(\"hooks.txt\", \"%\")\\'',\n                    preinstall:\n                        'node -e \\'require(\"fs\").writeFileSync(\"hooks.txt\", \"%\")\\''\n                }\n            }\n        });\n\n        return helpers.run(install).then(function() {\n            expect(tempDir.exists('hooks.txt')).to.be(false);\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"runs postinstall after bower.json is written","suites":["bower install"],"updatePoint":{"line":390,"column":52,"index":10521},"line":390,"code":"    it('runs postinstall after bower.json is written', function() {\n        mainPackage.prepare();\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test'\n            },\n            '.bowerrc': {\n                scripts: {\n                    postinstall:\n                        'node -e \\'var fs = require(\"fs\"); fs.writeFileSync(\"hook.txt\", fs.readFileSync(\"bower.json\"));\\''\n                }\n            }\n        });\n\n        return helpers\n            .run(install, [\n                [mainPackage.path],\n                {\n                    save: true\n                }\n            ])\n            .then(function() {\n                expect(tempDir.read('hook.txt')).to.contain('dependencies');\n            });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"display the output of hook scripts","suites":["bower install"],"updatePoint":{"line":417,"column":42,"index":11265},"line":417,"code":"    it('display the output of hook scripts', function(next) {\n        mainPackage.prepare();\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test',\n                dependencies: {\n                    package: mainPackage.path\n                }\n            },\n            '.bowerrc': {\n                scripts: {\n                    postinstall: 'node -e \\'process.stdout.write(\"foobar\")\\''\n                }\n            }\n        });\n        var lastAction = null;\n\n        helpers\n            .run(install)\n            .logger.intercept(function(log) {\n                if (log.level === 'action') {\n                    lastAction = log;\n                }\n            })\n            .on('end', function() {\n                expect(lastAction.message).to.be('foobar');\n                next();\n            });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"skips components not installed by bower","suites":["bower install"],"updatePoint":{"line":448,"column":47,"index":12116},"line":448,"code":"    it('skips components not installed by bower', function() {\n        mainPackage.prepare({\n            '.git': {} //Make a dummy file instead of using slower gitPrepare()\n        });\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test',\n                dependencies: {\n                    package: mainPackage.path\n                }\n            }\n        });\n\n        return helpers.run(install).then(function() {\n            var packageFiles = fs.readdirSync(mainPackage.path);\n            //presence of .git file implies folder was not overwritten\n            expect(packageFiles).to.contain('.git');\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"works for git repositories","suites":["bower install"],"updatePoint":{"line":469,"column":34,"index":12760},"line":469,"code":"    it('works for git repositories', function() {\n        gitPackage.prepareGit({\n            '1.0.0': {\n                'bower.json': {\n                    name: 'package'\n                },\n                'version.txt': '1.0.0'\n            },\n            '1.0.1': {\n                'bower.json': {\n                    name: 'package'\n                },\n                'version.txt': '1.0.1'\n            }\n        });\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test',\n                dependencies: {\n                    package: gitPackage.path + '#1.0.0'\n                }\n            }\n        });\n\n        return helpers.run(install).then(function() {\n            expect(\n                tempDir.read('bower_components/package/version.txt')\n            ).to.contain('1.0.0');\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"works for dependencies that point to tar files","suites":["bower install"],"updatePoint":{"line":501,"column":54,"index":13618},"line":501,"code":"    it('works for dependencies that point to tar files', function() {\n        var packageDir = path.join(__dirname, '../assets/package-tar.tar');\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test',\n                dependencies: {\n                    package: packageDir\n                }\n            }\n        });\n\n        return helpers.run(install).then(function() {\n            expect(\n                tempDir.read('bower_components/package/index.txt')\n            ).to.contain('1.0.0');\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"does not install ignored dependencies","suites":["bower install"],"updatePoint":{"line":519,"column":45,"index":14153},"line":519,"code":"    it('does not install ignored dependencies', function() {\n        mainPackage.prepare();\n        var package2 = new helpers.TempDir({\n            'bower.json': {\n                name: 'package2'\n            }\n        }).prepare();\n\n        var package3 = new helpers.TempDir({\n            'bower.json': {\n                name: 'package3',\n                dependencies: {\n                    package2: package2.path,\n                    package: mainPackage.path\n                }\n            }\n        }).prepare();\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test_tw',\n                dependencies: {\n                    package3: package3.path\n                }\n            },\n            '.bowerrc': {\n                ignoredDependencies: ['package']\n            }\n        });\n\n        return helpers.run(install).then(function() {\n            expect(tempDir.exists('bower_components/package')).to.be(false);\n            expect(tempDir.exists('bower_components/package2')).to.be(true);\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"does not install ignored dependencies if run multiple times","suites":["bower install"],"updatePoint":{"line":555,"column":67,"index":15222},"line":555,"code":"    it('does not install ignored dependencies if run multiple times', function() {\n        mainPackage.prepare();\n        var package2 = new helpers.TempDir({\n            'bower.json': {\n                name: 'package2'\n            }\n        }).prepare();\n\n        var package3 = new helpers.TempDir({\n            'bower.json': {\n                name: 'package3',\n                dependencies: {\n                    package2: package2.path,\n                    package: mainPackage.path\n                }\n            }\n        }).prepare();\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test_tw',\n                dependencies: {\n                    package3: package3.path\n                }\n            },\n            '.bowerrc': {\n                ignoredDependencies: ['package']\n            }\n        });\n        return helpers.run(install).then(function() {\n            return helpers.run(install).then(function() {\n                expect(tempDir.exists('bower_components/package')).to.be(false);\n                expect(tempDir.exists('bower_components/package2')).to.be(true);\n            });\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"works if packages reference each other locally","suites":["bower install"],"updatePoint":{"line":592,"column":54,"index":16359},"line":592,"code":"    it('works if packages reference each other locally', function() {\n        mainPackage.prepare();\n        var package2 = new helpers.TempDir({\n            'bower.json': {\n                name: 'package2',\n                dependencies: {\n                    package: mainPackage.path\n                }\n            }\n        }).prepare();\n        var package3 = new helpers.TempDir({\n            'bower.json': {\n                name: 'package3',\n                dependencies: {\n                    package2: package2.path\n                }\n            }\n        }).prepare();\n\n        var installPackage = helpers.command('install', {\n            cwd: mainPackage.path\n        });\n        var installPackage2 = helpers.command('install', {\n            cwd: package2.path\n        });\n        var installPackage3 = helpers.command('install', {\n            cwd: package3.path\n        });\n        return helpers.run(installPackage).then(function() {\n            return helpers.run(installPackage2).then(function() {\n                return helpers.run(installPackage3).then(function() {\n                    expect(package2.exists('bower_components/package')).to.be(\n                        true\n                    );\n                    expect(package3.exists('bower_components/package2')).to.be(\n                        true\n                    );\n                    expect(package3.exists('bower_components/package')).to.be(\n                        true\n                    );\n                });\n            });\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"works if packages are nested and reference each other locally","suites":["bower install"],"updatePoint":{"line":637,"column":69,"index":17908},"line":637,"code":"    it('works if packages are nested and reference each other locally', function() {\n        // root directory for nested components\n        var rootDir = new helpers.TempDir().prepare();\n\n        var package = new helpers.TempDir({\n            'bower.json': {\n                name: 'package'\n            }\n        });\n        package.path = path.join(rootDir.path, 'src/a/b');\n        package.prepare();\n        var package2 = new helpers.TempDir({\n            'bower.json': {\n                name: 'package2',\n                dependencies: {\n                    package: package.path\n                }\n            }\n        });\n        package2.path = path.join(rootDir.path, 'src/a');\n        package2.create(); // run create to avoid deleting nested directories\n        var package3 = new helpers.TempDir({\n            'bower.json': {\n                name: 'package3',\n                dependencies: {\n                    package2: package2.path\n                }\n            }\n        });\n        package3.path = rootDir.path;\n        package3.create(); // run create to avoid deleting nested directories\n\n        var installPackage = helpers.command('install', {\n            cwd: package.path\n        });\n        var installPackage2 = helpers.command('install', {\n            cwd: package2.path\n        });\n        var installPackage3 = helpers.command('install', {\n            cwd: package3.path\n        });\n        return helpers.run(installPackage).then(function() {\n            return helpers.run(installPackage2).then(function() {\n                return helpers.run(installPackage3).then(function() {\n                    expect(package2.exists('bower_components/package')).to.be(\n                        true\n                    );\n                    expect(package3.exists('bower_components/package2')).to.be(\n                        true\n                    );\n                    expect(package3.exists('bower_components/package')).to.be(\n                        true\n                    );\n                });\n            });\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"recognizes proxy option in config","suites":["bower install"],"updatePoint":{"line":695,"column":41,"index":19942},"line":695,"code":"    it('recognizes proxy option in config', function() {\n        this.timeout(10000);\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test_tw',\n                dependencies: {\n                    pure: 'http://github.com/yahoo/pure/archive/v0.6.0.tar.gz'\n                }\n            }\n        });\n\n        var install = helpers.command('install', {\n            cwd: tempDir.path\n        });\n\n        nock('http://dummy.local/')\n            .get(function(uri) {\n                return true;\n            })\n            .reply(500);\n\n        return helpers\n            .run(install, [\n                undefined,\n                undefined,\n                { proxy: 'http://dummy.local/' }\n            ])\n            .fail(function(error) {\n                expect(error.message).to.equal('Status code of 500');\n            });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"errors if the components directory is not a directory","suites":["bower install"],"updatePoint":{"line":728,"column":61,"index":20825},"line":728,"code":"    it('errors if the components directory is not a directory', function() {\n        tempDir.prepare({\n            '.bowerrc': {\n                directory: '.bowerrc'\n            }\n        });\n\n        return helpers.run(install).fail(function(error) {\n            expect(error.code).to.equal('ENOTDIR');\n        });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"works if the package is a compressed single directory containing another directory with the same name","suites":["bower install"],"updatePoint":{"line":740,"column":109,"index":21199},"line":740,"code":"    it('works if the package is a compressed single directory containing another directory with the same name', function() {\n        var mainPackageBaseName = path.basename(mainPackage.path);\n        var parentDir = path.dirname(mainPackage.path);\n\n        // Setup the main package with a directory with the same name\n        var mainPackageFiles = {};\n        mainPackageFiles[mainPackageBaseName + '/test.js'] = 'test';\n        mainPackage.prepare(mainPackageFiles);\n\n        // Create an archive containing the main package\n        var archiveDeferred = Q.defer();\n        var archivePath = path.join(parentDir, mainPackageBaseName + '.tar');\n        var stream = tar.pack(parentDir, { entries: [mainPackageBaseName] });\n        stream\n            .pipe(fs.createWriteStream(archivePath))\n            .on('finish', function(result) {\n                destroy(stream);\n                archiveDeferred.resolve(result);\n            });\n\n        //// Attempt to install the package from the archive\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test'\n            }\n        });\n\n        return archiveDeferred.promise\n            .then(function() {\n                return helpers.run(install, [[archivePath]]);\n            })\n            .then(function() {\n                expect(\n                    tempDir.read(\n                        path.join(\n                            'bower_components',\n                            'package',\n                            mainPackageBaseName,\n                            'test.js'\n                        )\n                    )\n                ).to.contain('test');\n            });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"works if the package is an archive containing a file with an identical name","suites":["bower install"],"updatePoint":{"line":785,"column":83,"index":22837},"line":785,"code":"    it('works if the package is an archive containing a file with an identical name', function() {\n        var parentDir = path.dirname(mainPackage.path);\n\n        mainPackage.prepare({\n            'package.tar': 'test'\n        });\n\n        var archiveDeferred = Q.defer();\n        var archivePath = path.join(parentDir, 'package.tar');\n        var stream = tar.pack(mainPackage.path);\n        stream\n            .pipe(fs.createWriteStream(archivePath))\n            .on('finish', function(result) {\n                destroy(stream);\n                archiveDeferred.resolve(result);\n            });\n\n        tempDir.prepare({\n            'bower.json': {\n                name: 'test'\n            }\n        });\n\n        return archiveDeferred.promise\n            .then(function() {\n                return helpers.run(install, [[archivePath]]);\n            })\n            .then(function() {\n                expect(\n                    tempDir.read(\n                        path.join('bower_components', 'package', 'package.tar')\n                    )\n                ).to.contain('test');\n            });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"should handle @ as a divider","suites":["bower install"],"updatePoint":{"line":820,"column":36,"index":23898},"line":820,"code":"    it('should handle @ as a divider', function() {\n        return helpers\n            .run(install, [\n                ['empty@1.0.1'],\n                {\n                    save: true\n                }\n            ])\n            .then(function() {\n                expect(tempDir.readJson('bower.json').dependencies).to.eql({\n                    empty: '1.0.1'\n                });\n            });\n    });","file":"commands/install.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower link"],"updatePoint":{"line":27,"column":31,"index":620},"line":27,"code":"  it('correctly reads arguments', function () {\n    expect(link.readOptions(['jquery', 'angular'])).to.eql(['jquery', 'angular']);\n  });","file":"commands/link.js","skipped":false,"dir":"test"},{"name":"creates self link","suites":["bower link"],"updatePoint":{"line":30,"column":23,"index":749},"line":30,"code":"  it('creates self link', function () {\n    return helpers.run(link, [undefined, undefined, {\n      cwd: mainPackage.path,\n      storage: {\n        links: linksDir.path\n      }\n    }]).then(function () {\n      expect(linksDir.read('package/index.js')).to.be('Hello World!');\n    });\n  });","file":"commands/link.js","skipped":false,"dir":"test"},{"name":"creates inter-link","suites":["bower link"],"updatePoint":{"line":40,"column":24,"index":1039},"line":40,"code":"  it('creates inter-link', function () {\n    return helpers.run(link, [undefined, undefined, {\n      cwd: mainPackage.path,\n      storage: {\n        links: linksDir.path\n      }\n    }]).then(function () {\n      return helpers.run(link, ['package', undefined, {\n        cwd: otherPackage.path,\n        storage: {\n          links: linksDir.path\n        }\n      }]);\n    }).then(function () {\n      expect(otherPackage.read('bower_components/package/index.js')).to.be('Hello World!');\n    });\n  });","file":"commands/link.js","skipped":false,"dir":"test"},{"name":"creates inter-link to relative config.directory","suites":["bower link"],"updatePoint":{"line":57,"column":53,"index":1564},"line":57,"code":"  it('creates inter-link to relative config.directory', function () {\n    return helpers.run(link, [undefined, undefined, {\n      cwd: mainPackage.path,\n      storage: {\n        links: linksDir.path\n      }\n    }]).then(function () {\n      return helpers.run(link, ['package', undefined, {\n        cwd: otherPackage.path,\n        directory: 'valid-extend',\n        storage: {\n          links: linksDir.path\n        }\n      }]);\n    }).then(function () {\n      expect(otherPackage.read('valid-extend/package/index.js')).to.be('Hello World!');\n    });\n  });","file":"commands/link.js","skipped":false,"dir":"test"},{"name":"creates inter-link to absolute config.directory","suites":["bower link"],"updatePoint":{"line":75,"column":53,"index":2120},"line":75,"code":"  it('creates inter-link to absolute config.directory', function () {\n    return helpers.run(link, [undefined, undefined, {\n      cwd: mainPackage.path,\n      storage: {\n        links: linksDir.path\n      }\n    }]).then(function () {\n      return helpers.run(link, ['package', undefined, {\n        cwd: path.join(otherPackage.path, 'invalid'),\n        directory: path.join(otherPackage.path, 'valid-override'),\n        storage: {\n          links: linksDir.path\n        }\n      }]);\n    }).then(function () {\n      expect(otherPackage.read('valid-override/package/index.js')).to.be('Hello World!');\n    });\n  });","file":"commands/link.js","skipped":false,"dir":"test"},{"name":"creates inter-link with custom local name","suites":["bower link"],"updatePoint":{"line":93,"column":47,"index":2726},"line":93,"code":"  it('creates inter-link with custom local name', function () {\n    return helpers.run(link, [undefined, undefined, {\n      cwd: mainPackage.path,\n      storage: {\n        links: linksDir.path\n      }\n    }]).then(function () {\n      return helpers.run(link, ['package', 'local', {\n        cwd: otherPackage.path,\n        storage: {\n          links: linksDir.path\n        }\n      }]);\n    }).then(function () {\n      expect(otherPackage.read('bower_components/local/index.js')).to.be('Hello World!');\n    });\n  });","file":"commands/link.js","skipped":false,"dir":"test"},{"name":"errors on unexising package","suites":["bower link"],"updatePoint":{"line":110,"column":33,"index":3227},"line":110,"code":"  it('errors on unexising package', function () {\n    return helpers.run(link, ['package', 'local', {\n      cwd: otherPackage.path,\n      storage: {\n        links: linksDir.path\n      }\n    }]).then(function () {\n      throw 'Should fail creating a link!';\n    }).fail(function (reason) {\n      expect(reason.code).to.be('ENOENT');\n      expect(reason.message).to.be('Failed to create link to package');\n    });\n  });","file":"commands/link.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower list"],"updatePoint":{"line":31,"column":31,"index":769},"line":31,"code":"  it('correctly reads arguments', function () {\n    expect(commands.list.readOptions(['-p', '-r'])).to.eql([{\n      paths: true,\n      relative: true\n    }]);\n  });","file":"commands/list.js","skipped":false,"dir":"test"},{"name":"correctly reads long arguments","suites":["bower list"],"updatePoint":{"line":37,"column":36,"index":939},"line":37,"code":"  it('correctly reads long arguments', function () {\n    expect(commands.list.readOptions(['--paths', '--relative'])).to.eql([{\n      paths: true,\n      relative: true\n    }]);\n  });","file":"commands/list.js","skipped":false,"dir":"test"},{"name":"lists no packages when nothing installed","suites":["bower list"],"updatePoint":{"line":43,"column":46,"index":1132},"line":43,"code":"  it('lists no packages when nothing installed', function () {\n    tempDir.prepare();\n    return list().spread(function (results) {\n      expect(results).to.be.an(Object);\n      expect(results.canonicalDir).to.equal(tempDir.path);\n      expect(results.pkgMeta.dependencies).to.eql({});\n      expect(results.pkgMeta.devDependencies).to.eql({});\n      expect(results.dependencies).to.eql({});\n      expect(results.nrDependants).to.eql(0);\n      expect(results.versions).to.eql([]);\n    });\n  });","file":"commands/list.js","skipped":false,"dir":"test"},{"name":"lists 1 dependency when 1 local package installed","suites":["bower list"],"updatePoint":{"line":55,"column":55,"index":1635},"line":55,"code":"  it('lists 1 dependency when 1 local package installed', function () {\n    var mainPackage = new helpers.TempDir({\n      'bower.json': {\n        name: 'package',\n        main: 'test.txt'\n      }\n    }).prepare();\n    mainPackage.prepare();\n    return install([mainPackage.path]).then(function () {\n      return list().spread(function (results) {\n        expect(results).to.be.an(Object);\n        expect(results.canonicalDir).to.equal(tempDir.path);\n        expect(results.pkgMeta.dependencies).to.eql({\n          package: mainPackage.path + '#*'\n        });\n        expect(results.pkgMeta.devDependencies).to.eql({});\n        expect(results.dependencies.package).to.be.an(Object);\n        expect(results.dependencies.package.pkgMeta).to.be.an(Object);\n        expect(results.dependencies.package.pkgMeta.main).to.equal('test.txt');\n        expect(results.dependencies.package.canonicalDir).to.equal(path.join(tempDir.path, 'bower_components/package'));\n        expect(results.dependencies.package.dependencies).to.eql({});\n        expect(results.dependencies.package.nrDependants).to.equal(1);\n        expect(results.dependencies.package.versions).to.eql([]);\n        expect(results.nrDependants).to.equal(0);\n        expect(results.versions).to.eql([]);\n      });\n    });\n  });","file":"commands/list.js","skipped":false,"dir":"test"},{"name":"lists 1 dependency with relative paths when 1 local package installed","suites":["bower list"],"updatePoint":{"line":83,"column":75,"index":2935},"line":83,"code":"  it('lists 1 dependency with relative paths when 1 local package installed', function () {\n    var mainPackage = new helpers.TempDir({\n      'bower.json': {\n        name: 'package',\n        main: 'test.txt'\n      }\n    }).prepare();\n    mainPackage.prepare();\n    return install([mainPackage.path]).then(function () {\n      return list({\n        relative: true\n      }).spread(function (results) {\n        expect(results).to.be.an(Object);\n        expect(results.canonicalDir).to.equal(tempDir.path);\n        expect(results.dependencies).to.be.an(Object);\n        expect(results.dependencies.package).to.be.an(Object);\n        expect(results.dependencies.package.pkgMeta).to.be.an(Object);\n        expect(results.dependencies.package.pkgMeta.main).to.equal('test.txt');\n        expect(results.pkgMeta.dependencies).to.eql({\n          package: mainPackage.path + '#*'\n        });\n        expect(results.dependencies.package.canonicalDir).to.equal(path.normalize('bower_components/package'));\n      });\n    });\n  });","file":"commands/list.js","skipped":false,"dir":"test"},{"name":"lists 1 dependency with 1 source relative source mapping when 1 local package installed","suites":["bower list"],"updatePoint":{"line":108,"column":93,"index":3969},"line":108,"code":"  it('lists 1 dependency with 1 source relative source mapping when 1 local package installed', function () {\n    var mainPackage = new helpers.TempDir({\n      'bower.json': {\n        name: 'package',\n        main: 'test.txt'\n      }\n    }).prepare();\n    mainPackage.prepare();\n    return install([mainPackage.path]).then(function () {\n      return list({\n        paths: true\n      }).spread(function (results) {\n        expect(results).to.be.an(Object);\n        expect(results.package).to.equal('bower_components/package/test.txt');\n      });\n    });\n  });","file":"commands/list.js","skipped":false,"dir":"test"},{"name":"lists 1 dependency with 2 source relative source mapping when 1 local package installed","suites":["bower list"],"updatePoint":{"line":125,"column":93,"index":4528},"line":125,"code":"  it('lists 1 dependency with 2 source relative source mapping when 1 local package installed', function () {\n    var mainPackage = new helpers.TempDir({\n      'bower.json': {\n        name: 'package',\n        main: ['test.txt', 'test2.txt']\n      }\n    }).prepare();\n    mainPackage.prepare();\n    return install([mainPackage.path]).then(function () {\n      return list({\n        paths: true\n      }).spread(function (results) {\n        expect(results).to.be.an(Object);\n        expect(results.package).to.be.an(Object);\n        expect(results.package).to.eql(['bower_components/package/test.txt', 'bower_components/package/test2.txt']);\n      });\n    });\n  });","file":"commands/list.js","skipped":false,"dir":"test"},{"name":"lists 1 dependency when 1 git package installed","suites":["bower list"],"updatePoint":{"line":143,"column":53,"index":5150},"line":143,"code":"  it('lists 1 dependency when 1 git package installed', function () {\n    gitPackage.prepareGit({\n      '1.0.0': {\n        'bower.json': {\n          name: 'package',\n          main: 'test.txt'\n        },\n        'version.txt': '1.0.0'\n      },\n      '1.0.1': {\n        'bower.json': {\n          name: 'package',\n          main: 'test2.txt'\n        },\n        'version.txt': '1.0.1'\n      }\n    });\n    tempDir.prepare({\n      'bower.json': {\n        name: 'test',\n        dependencies: {\n          package: gitPackage.path + '#1.0.0'\n        }\n      }\n    });\n    return install().then(function () {\n      return list().spread(function (results) {\n        expect(results).to.be.an(Object);\n        expect(results.canonicalDir).to.equal(tempDir.path);\n        expect(results.pkgMeta.dependencies).to.eql({\n          package: gitPackage.path + '#1.0.0'\n        });\n        expect(results.pkgMeta.devDependencies).to.eql({});\n        expect(results.dependencies.package).to.be.an(Object);\n        expect(results.dependencies.package.pkgMeta).to.be.an(Object);\n        expect(results.dependencies.package.pkgMeta.main).to.equal('test.txt');\n        expect(results.dependencies.package.canonicalDir).to.equal(path.join(tempDir.path, 'bower_components/package'));\n        expect(results.dependencies.package.dependencies).to.eql({});\n        expect(results.dependencies.package.nrDependants).to.equal(1);\n        expect(results.dependencies.package.versions).to.eql(['1.0.1', '1.0.0']);\n        expect(results.nrDependants).to.equal(0);\n        expect(results.versions).to.eql([]);\n      });\n    });\n  });","file":"commands/list.js","skipped":false,"dir":"test"},{"name":"lists 1 dependency with relative paths when 1 git package installed","suites":["bower list"],"updatePoint":{"line":188,"column":73,"index":6770},"line":188,"code":"  it('lists 1 dependency with relative paths when 1 git package installed', function () {\n    gitPackage.prepareGit({\n      '1.0.0': {\n        'bower.json': {\n          name: 'package',\n          main: 'test.txt'\n        },\n        'version.txt': '1.0.0'\n      },\n      '1.0.1': {\n        'bower.json': {\n          name: 'package',\n          main: 'test2.txt'\n        },\n        'version.txt': '1.0.1'\n      }\n    });\n    tempDir.prepare({\n      'bower.json': {\n        name: 'test',\n        dependencies: {\n          package: gitPackage.path + '#1.0.0'\n        }\n      }\n    });\n    return install().then(function () {\n      return list({\n        relative: true\n      }).spread(function (results) {\n        expect(results.canonicalDir).to.equal(tempDir.path);\n        expect(results.pkgMeta.dependencies).to.eql({\n          package: gitPackage.path + '#1.0.0'\n        });\n        expect(results.dependencies.package.canonicalDir).to.equal(path.normalize('bower_components/package'));\n      });\n    });\n  });","file":"commands/list.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower login"],"updatePoint":{"line":64,"column":31,"index":1497},"line":64,"code":"  it('correctly reads arguments', function () {\n    expect(login.readOptions(['--token', 'foobar'])).to.eql([{\n      token: 'foobar'\n    }]);\n  });","file":"commands/login.js","skipped":false,"dir":"test"},{"name":"fails if run in non-interactive shell without token passed","suites":["bower login"],"updatePoint":{"line":69,"column":64,"index":1678},"line":69,"code":"  it('fails if run in non-interactive shell without token passed', function () {\n    return helpers.run(login, []).fail(function (reason) {\n      expect(reason.message).to.be('Login requires an interactive shell');\n      expect(reason.code).to.be('ENOINT');\n    });\n  });","file":"commands/login.js","skipped":false,"dir":"test"},{"name":"succeeds if run in non-interactive shell with token passed","suites":["bower login"],"updatePoint":{"line":75,"column":64,"index":1950},"line":75,"code":"  it('succeeds if run in non-interactive shell with token passed', function () {\n    return helpers.run(login, [{\n      token: 'foobar'\n    }]);\n  });","file":"commands/login.js","skipped":false,"dir":"test"},{"name":"succeeds if provided password is valid","suites":["bower login"],"updatePoint":{"line":80,"column":44,"index":2081},"line":80,"code":"  it('succeeds if provided password is valid', function () {\n    var login = loginFactory({});\n    var logger = login({}, {\n      interactive: true\n    });\n    logger.once('prompt', function (prompt, answer) {\n      answer({\n        username: 'user',\n        password: 'validpassword'\n      });\n    });\n    return helpers.expectEvent(logger, 'end').spread(function (options) {\n      expect(options.token).to.be('faketoken');\n    });\n  });","file":"commands/login.js","skipped":false,"dir":"test"},{"name":"supports two-factor authorization","suites":["bower login"],"updatePoint":{"line":95,"column":39,"index":2515},"line":95,"code":"  it('supports two-factor authorization', function () {\n    var login = loginFactory({});\n    var logger = login({}, {\n      interactive: true\n    });\n    logger.once('prompt', function (prompt, answer) {\n      logger.once('prompt', function (prompt, answer) {\n        answer({\n          otpcode: '123456'\n        });\n      });\n      answer({\n        username: 'user',\n        password: 'withtwofactor'\n      });\n    });\n    return helpers.expectEvent(logger, 'end').spread(function (options) {\n      expect(options.token).to.be('faketwoauthtoken');\n    });\n  });","file":"commands/login.js","skipped":false,"dir":"test"},{"name":"fails if provided password is invalid","suites":["bower login"],"updatePoint":{"line":115,"column":43,"index":3083},"line":115,"code":"  it('fails if provided password is invalid', function () {\n    var login = loginFactory({});\n    var logger = login({}, {\n      interactive: true\n    });\n    logger.once('prompt', function (prompt, answer) {\n      answer({\n        username: 'user',\n        password: 'invalidpassword'\n      });\n    });\n    return helpers.expectEvent(logger, 'error').spread(function (error) {\n      expect(error.code).to.be('EAUTH');\n      expect(error.message).to.be('Authorization failed');\n    });\n  });","file":"commands/login.js","skipped":false,"dir":"test"},{"name":"uses username stored in config as default username","suites":["bower login"],"updatePoint":{"line":131,"column":56,"index":3588},"line":131,"code":"  it('uses username stored in config as default username', function () {\n    var login = loginFactory({\n      get: function (key) {\n        if (key === 'username') {\n          return 'savedusername';\n        }\n      }\n    });\n    var logger = login({}, {\n      interactive: true\n    });\n    return helpers.expectEvent(logger, 'prompt').spread(function (prompt, answer) {\n      expect(prompt[0].default).to.be('savedusername');\n    });\n  });","file":"commands/login.js","skipped":false,"dir":"test"},{"name":"saves username in config","suites":["bower login"],"updatePoint":{"line":146,"column":30,"index":4003},"line":146,"code":"  it('saves username in config', function (done) {\n    var login = loginFactory({\n      set: function (key, value) {\n        if (key === 'username') {\n          expect(value).to.be('user');\n          done();\n        }\n      }\n    });\n    var logger = login({}, {\n      interactive: true\n    });\n    logger.once('prompt', function (prompt, answer) {\n      answer({\n        username: 'user',\n        password: 'validpassword'\n      });\n    });\n  });","file":"commands/login.js","skipped":false,"dir":"test"},{"name":"saves received token in accessToken config","suites":["bower login"],"updatePoint":{"line":165,"column":48,"index":4469},"line":165,"code":"  it('saves received token in accessToken config', function (done) {\n    var login = loginFactory({\n      set: function (key, value) {\n        if (key === 'accessToken') {\n          expect(value).to.be('faketoken');\n          done();\n        }\n      }\n    });\n    var logger = login({}, {\n      interactive: true\n    });\n    logger.once('prompt', function (prompt, answer) {\n      answer({\n        username: 'user',\n        password: 'validpassword'\n      });\n    });\n  });","file":"commands/login.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower lookup"],"updatePoint":{"line":27,"column":31,"index":693},"line":27,"code":"  it('correctly reads arguments', function () {\n    expect(lookup.readOptions(['jquery'])).to.eql(['jquery']);\n  });","file":"commands/lookup.js","skipped":false,"dir":"test"},{"name":"lookups package by name","suites":["bower lookup"],"updatePoint":{"line":30,"column":29,"index":808},"line":30,"code":"  it('lookups package by name', function () {\n    var lookup = lookupWithResult({\n      jquery: {\n        url: 'http://jquery.org'\n      }\n    });\n    return helpers.run(lookup, ['jquery']).spread(function (result) {\n      expect(result).to.eql({\n        name: 'jquery',\n        url: 'http://jquery.org'\n      });\n    });\n  });","file":"commands/lookup.js","skipped":false,"dir":"test"},{"name":"returns null if no package is found","suites":["bower lookup"],"updatePoint":{"line":43,"column":41,"index":1148},"line":43,"code":"  it('returns null if no package is found', function () {\n    var lookup = lookupWithResult({\n      jquery: {\n        url: 'http://jquery.org'\n      }\n    });\n    return helpers.run(lookup, ['foobar']).spread(function (result) {\n      expect(result).to.eql(null);\n    });\n  });","file":"commands/lookup.js","skipped":false,"dir":"test"},{"name":"returns null if called without argument","suites":["bower lookup"],"updatePoint":{"line":53,"column":45,"index":1430},"line":53,"code":"  it('returns null if called without argument', function () {\n    var lookup = lookupWithResult({\n      jquery: {\n        url: 'http://jquery.org'\n      }\n    });\n    return helpers.run(lookup, []).spread(function (result) {\n      expect(result).to.eql(null);\n    });\n  });","file":"commands/lookup.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower home"],"updatePoint":{"line":16,"column":31,"index":386},"line":16,"code":"  it('correctly reads arguments', function () {\n    expect(prune.readOptions(['-p'])).to.eql([{\n      production: true\n    }]);\n  });","file":"commands/prune.js","skipped":false,"dir":"test"},{"name":"correctly reads long arguments","suites":["bower home"],"updatePoint":{"line":21,"column":36,"index":525},"line":21,"code":"  it('correctly reads long arguments', function () {\n    expect(prune.readOptions(['--production'])).to.eql([{\n      production: true\n    }]);\n  });","file":"commands/prune.js","skipped":false,"dir":"test"},{"name":"removes extraneous packages","suites":["bower home"],"updatePoint":{"line":26,"column":33,"index":671},"line":26,"code":"  it('removes extraneous packages', function () {\n    mainPackage.prepare({\n      'bower_components/angular/angular.js': 'angular source',\n      'bower_components/angular/.bower.json': {\n        name: 'angular'\n      }\n    });\n    return helpers.run(prune, [{}, {\n      cwd: mainPackage.path\n    }]).then(function () {\n      expect(mainPackage.exists('bower_components/angular/angular.js')).to.be(false);\n    });\n  });","file":"commands/prune.js","skipped":false,"dir":"test"},{"name":"leaves non-bower packages","suites":["bower home"],"updatePoint":{"line":39,"column":31,"index":1088},"line":39,"code":"  it('leaves non-bower packages', function () {\n    mainPackage.prepare({\n      'bower_components/angular/angular.js': 'angular source'\n    });\n    return helpers.run(prune, [{}, {\n      cwd: mainPackage.path\n    }]).then(function () {\n      expect(mainPackage.exists('bower_components/angular/angular.js')).to.be(true);\n    });\n  });","file":"commands/prune.js","skipped":false,"dir":"test"},{"name":"deals with custom directory","suites":["bower home"],"updatePoint":{"line":49,"column":33,"index":1425},"line":49,"code":"  it('deals with custom directory', function () {\n    mainPackage.prepare({\n      '.bowerrc': {\n        directory: 'components'\n      },\n      'bower_components/angular/.bower.json': {\n        name: 'angular'\n      },\n      'bower_components/angular/angular.js': 'angular source',\n      'components/angular/.bower.json': {\n        name: 'angular'\n      },\n      'components/angular/angular.js': 'angular source'\n    });\n    return helpers.run(prune, [{}, {\n      cwd: mainPackage.path\n    }]).then(function () {\n      expect(mainPackage.exists('components/angular/angular.js')).to.be(false);\n      expect(mainPackage.exists('bower_components/angular/angular.js')).to.be(true);\n    });\n  });","file":"commands/prune.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower register"],"updatePoint":{"line":46,"column":31,"index":1008},"line":46,"code":"  it('correctly reads arguments', function () {\n    expect(register.readOptions(['jquery', 'url'])).to.eql(['jquery', 'url']);\n  });","file":"commands/register.js","skipped":false,"dir":"test"},{"name":"errors if name is not provided","suites":["bower register"],"updatePoint":{"line":49,"column":36,"index":1146},"line":49,"code":"  it('errors if name is not provided', function () {\n    return helpers.run(register).fail(function (reason) {\n      expect(reason.message).to.be('Usage: bower register <name> <url>');\n      expect(reason.code).to.be('EINVFORMAT');\n    });\n  });","file":"commands/register.js","skipped":false,"dir":"test"},{"name":"errors if url is not provided","suites":["bower register"],"updatePoint":{"line":55,"column":35,"index":1391},"line":55,"code":"  it('errors if url is not provided', function () {\n    return helpers.run(register, ['some-name']).fail(function (reason) {\n      expect(reason.message).to.be('Usage: bower register <name> <url>');\n      expect(reason.code).to.be('EINVFORMAT');\n    });\n  });","file":"commands/register.js","skipped":false,"dir":"test"},{"name":"errors if trying to register private package","suites":["bower register"],"updatePoint":{"line":61,"column":50,"index":1666},"line":61,"code":"  it('errors if trying to register private package', function () {\n    mainPackage.prepare({\n      'bower.json': {\n        private: true\n      }\n    });\n    var register = registerFactory(mainPackage.path, mainPackage.meta());\n    return helpers.run(register, ['some-name', 'git://fake-url.git']).fail(function (reason) {\n      expect(reason.message).to.be('The package you are trying to register is marked as private');\n      expect(reason.code).to.be('EPRIV');\n    });\n  });","file":"commands/register.js","skipped":false,"dir":"test"},{"name":"should call registry client with name and url","suites":["bower register"],"updatePoint":{"line":73,"column":51,"index":2144},"line":73,"code":"  it('should call registry client with name and url', function () {\n    mainPackage.prepare();\n    var register = registerFactory(mainPackage.path, mainPackage.meta());\n    return helpers.run(register, ['some-name', 'git://fake-url.git']).spread(function (result) {\n      expect(result).to.eql({\n        // Result from register action on stub\n        name: 'some-name',\n        url: 'git://fake-url.git'\n      });\n    });\n  });","file":"commands/register.js","skipped":false,"dir":"test"},{"name":"should call registry client with name and github source","suites":["bower register"],"updatePoint":{"line":84,"column":61,"index":2582},"line":84,"code":"  it('should call registry client with name and github source', function () {\n    mainPackage.prepare();\n    var register = registerFactory(mainPackage.path, mainPackage.meta());\n    return helpers.run(register, ['some-name', 'some-name/repo']).spread(function (result) {\n      expect(result).to.eql({\n        // Result from register action on stub\n        name: 'some-name',\n        url: 'git@github.com:some-name/repo.git'\n      });\n    });\n  });","file":"commands/register.js","skipped":false,"dir":"test"},{"name":"should support single-char github names","suites":["bower register"],"updatePoint":{"line":95,"column":45,"index":3015},"line":95,"code":"  it('should support single-char github names', function () {\n    mainPackage.prepare();\n    var register = registerFactory(mainPackage.path, mainPackage.meta());\n    return helpers.run(register, ['some-name', 'a/b']).spread(function (result) {\n      expect(result).to.eql({\n        // Result from register action on stub\n        name: 'some-name',\n        url: 'git@github.com:a/b.git'\n      });\n    });\n  });","file":"commands/register.js","skipped":false,"dir":"test"},{"name":"should confirm in interactive mode","suites":["bower register"],"updatePoint":{"line":106,"column":40,"index":3421},"line":106,"code":"  it('should confirm in interactive mode', function () {\n    mainPackage.prepare();\n    var register = registerFactory(mainPackage.path, mainPackage.meta());\n    var promise = helpers.run(register, ['some-name', 'git://fake-url.git', {\n      interactive: true\n    }]);\n    return helpers.expectEvent(promise.logger, 'confirm').spread(function (e) {\n      expect(e.type).to.be('confirm');\n      expect(e.message).to.be('Registering a package will make it installable via the registry (https://registry.bower.io), continue?');\n      expect(e.default).to.be(true);\n    });\n  });","file":"commands/register.js","skipped":false,"dir":"test"},{"name":"should skip confirming when forcing","suites":["bower register"],"updatePoint":{"line":118,"column":41,"index":3998},"line":118,"code":"  it('should skip confirming when forcing', function () {\n    mainPackage.prepare();\n    var register = registerFactory(mainPackage.path, mainPackage.meta());\n    return helpers.run(register, ['some-name', 'git://fake-url.git', {\n      interactive: true,\n      force: true\n    }]);\n  });","file":"commands/register.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower search"],"updatePoint":{"line":9,"column":31,"index":208},"line":9,"code":"  it('correctly reads arguments', function () {\n    expect(search.readOptions(['jquery'])).to.eql(['jquery']);\n  });","file":"commands/search.js","skipped":false,"dir":"test"},{"name":"searches for single repository","suites":["bower search"],"updatePoint":{"line":12,"column":36,"index":330},"line":12,"code":"  it('searches for single repository', function () {\n    return Q.Promise(function (resolve) {\n      var search = helpers.command('search', {\n        '../core/PackageRepository': function () {\n          return {\n            getRegistryClient: function () {\n              return {\n                search: resolve\n              };\n            }\n          };\n        }\n      });\n      helpers.run(search, ['jquery'], {});\n    }).then(function (query) {\n      expect(query).to.be('jquery');\n    });\n  });","file":"commands/search.js","skipped":false,"dir":"test"},{"name":"lists all repositories when no query given in non-interactive mode","suites":["bower search"],"updatePoint":{"line":30,"column":72,"index":867},"line":30,"code":"  it('lists all repositories when no query given in non-interactive mode', function () {\n    var nonInteractiveConfig = {\n      interactive: false\n    };\n    return Q.Promise(function (resolve) {\n      var search = helpers.command('search', {\n        '../core/PackageRepository': function () {\n          return {\n            getRegistryClient: function () {\n              return {\n                list: resolve\n              };\n            }\n          };\n        }\n      });\n      helpers.run(search, [null, nonInteractiveConfig]);\n    });\n  });","file":"commands/search.js","skipped":false,"dir":"test"},{"name":"lists all repositories when no query given and config.json is enabled in interactive mode","suites":["bower search"],"updatePoint":{"line":49,"column":95,"index":1436},"line":49,"code":"  it('lists all repositories when no query given and config.json is enabled in interactive mode', function () {\n    var interactiveConfig = {\n      interactive: true,\n      json: true\n    };\n    var search = helpers.command('search', {\n      '../core/PackageRepository': function () {\n        return {\n          getRegistryClient: function () {\n            return {\n              list: function (cb) {\n                return cb(null, 'foobar');\n              }\n            };\n          }\n        };\n      }\n    });\n    return helpers.run(search, [null, interactiveConfig]).spread(function (result) {\n      expect(result).to.be('foobar');\n    });\n  });","file":"commands/search.js","skipped":false,"dir":"test"},{"name":"does not list any repositories in interactive mode if no query given and config.json is disabled","suites":["bower search"],"updatePoint":{"line":71,"column":102,"index":2095},"line":71,"code":"  it('does not list any repositories in interactive mode if no query given and config.json is disabled', function () {\n    var interactiveConfig = {\n      interactive: true\n    };\n    var search = helpers.command('search', {\n      '../core/PackageRepository': function () {\n        return {\n          getRegistryClient: function () {\n            return {\n              list: function () {\n                throw 'list called';\n              },\n              search: function () {\n                throw 'search called';\n              }\n            };\n          }\n        };\n      }\n    });\n    return helpers.run(search, [null, interactiveConfig]).then(function (commandResult) {\n      expect().fail('should fail');\n    }).catch(function (e) {\n      expect(e.code).to.be('EREADOPTIONS');\n    });\n  });","file":"commands/search.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower uninstall"],"updatePoint":{"line":34,"column":31,"index":717},"line":34,"code":"  it('correctly reads arguments', function () {\n    expect(uninstall.readOptions(['jquery', '-S', '-D'])).to.eql([['jquery'], {\n      save: true,\n      saveDev: true\n    }]);\n  });","file":"commands/uninstall.js","skipped":false,"dir":"test"},{"name":"correctly reads long arguments","suites":["bower uninstall"],"updatePoint":{"line":40,"column":36,"index":903},"line":40,"code":"  it('correctly reads long arguments', function () {\n    expect(uninstall.readOptions(['jquery', '--save', '--save-dev'])).to.eql([['jquery'], {\n      save: true,\n      saveDev: true\n    }]);\n  });","file":"commands/uninstall.js","skipped":false,"dir":"test"},{"name":"does not remove anything from dependencies by default","suites":["bower uninstall"],"updatePoint":{"line":46,"column":59,"index":1124},"line":46,"code":"  it('does not remove anything from dependencies by default', function () {\n    return helpers.run(uninstall, [['underscore'], undefined, config]).then(function () {\n      expect(bowerJson().dependencies).to.eql({\n        underscore: '*'\n      });\n    });\n  });","file":"commands/uninstall.js","skipped":false,"dir":"test"},{"name":"removes dependency from bower.json if --save flag is used","suites":["bower uninstall"],"updatePoint":{"line":53,"column":63,"index":1390},"line":53,"code":"  it('removes dependency from bower.json if --save flag is used', function () {\n    return helpers.run(uninstall, [['underscore'], {\n      save: true\n    }, config]).then(function () {\n      expect(bowerJson().dependencies).to.eql({});\n    });\n  });","file":"commands/uninstall.js","skipped":false,"dir":"test"},{"name":"removes dependency from bower.json if save config setting is true","suites":["bower uninstall"],"updatePoint":{"line":60,"column":71,"index":1648},"line":60,"code":"  it('removes dependency from bower.json if save config setting is true', function () {\n    var configWithSave = {\n      cwd: tempDir.path,\n      interactive: true,\n      save: true\n    };\n    return helpers.run(uninstall, [['underscore'], {}, configWithSave]).then(function () {\n      expect(bowerJson().dependencies).to.eql({});\n    });\n  });","file":"commands/uninstall.js","skipped":false,"dir":"test"},{"name":"removes dependency from relative config.directory","suites":["bower uninstall"],"updatePoint":{"line":70,"column":55,"index":1977},"line":70,"code":"  it('removes dependency from relative config.directory', function () {\n    var targetPath = path.resolve(tempDir.path, 'other_directory/underscore');\n    mkdirp.sync(targetPath);\n    fs.writeFileSync(path.join(targetPath, '.bower.json'), '{ \"name\": \"underscore\" }');\n    return helpers.run(uninstall, [['underscore'], undefined, {\n      cwd: tempDir.path,\n      directory: 'other_directory',\n      interactive: true\n    }]).then(function () {\n      expect(function () {\n        fs.statSync(targetPath);\n      }).to.throwException(/no such file or directory/);\n    });\n  });","file":"commands/uninstall.js","skipped":false,"dir":"test"},{"name":"removes dependency from absolute config.directory","suites":["bower uninstall"],"updatePoint":{"line":84,"column":55,"index":2552},"line":84,"code":"  it('removes dependency from absolute config.directory', function () {\n    var targetPath = path.resolve(tempDir.path, 'other_directory/underscore');\n    mkdirp.sync(targetPath);\n    fs.writeFileSync(path.join(targetPath, '.bower.json'), '{ \"name\": \"underscore\" }');\n    return helpers.run(uninstall, [['underscore'], undefined, {\n      cwd: tempDir.path,\n      directory: path.resolve(tempDir.path, 'other_directory'),\n      interactive: true\n    }]).then(function () {\n      expect(function () {\n        fs.statSync(targetPath);\n      }).to.throwException(/no such file or directory/);\n    });\n  });","file":"commands/uninstall.js","skipped":false,"dir":"test"},{"name":"removes a project with url from absolute path","suites":["bower uninstall"],"updatePoint":{"line":98,"column":51,"index":3151},"line":98,"code":"  it('removes a project with url from absolute path', function () {\n    var targetPath = path.resolve(tempDir.path, 'other_directory/underscore');\n    mkdirp.sync(targetPath);\n    fs.writeFileSync(path.join(targetPath, '.bower.json'), '{ \"name\": \"underscore\", \"_source\": \"git://github.com/user/repo.git\" }');\n    return helpers.run(uninstall, [['git://github.com/user/repo.git'], undefined, {\n      cwd: tempDir.path,\n      directory: path.resolve(tempDir.path, 'other_directory'),\n      interactive: true\n    }]).then(function () {\n      expect(function () {\n        fs.statSync(targetPath);\n      }).to.throwException(/no such file or directory/);\n    });\n  });","file":"commands/uninstall.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower unregister"],"updatePoint":{"line":30,"column":31,"index":634},"line":30,"code":"  it('correctly reads arguments', function () {\n    expect(unregister.readOptions(['jquery'])).to.eql(['jquery']);\n  });","file":"commands/unregister.js","skipped":false,"dir":"test"},{"name":"errors if name is not provided","suites":["bower unregister"],"updatePoint":{"line":33,"column":36,"index":760},"line":33,"code":"  it('errors if name is not provided', function () {\n    return helpers.run(unregister).fail(function (reason) {\n      expect(reason.message).to.be('Usage: bower unregister <name> <url>');\n      expect(reason.code).to.be('EINVFORMAT');\n    });\n  });","file":"commands/unregister.js","skipped":false,"dir":"test"},{"name":"should call registry client with name","suites":["bower unregister"],"updatePoint":{"line":39,"column":43,"index":1017},"line":39,"code":"  it('should call registry client with name', function () {\n    var unregister = unregisterFactory();\n    return helpers.run(unregister, ['some-name']).spread(function (result) {\n      expect(result).to.eql({\n        // Result from register action on stub\n        name: 'some-name'\n      });\n    });\n  });","file":"commands/unregister.js","skipped":false,"dir":"test"},{"name":"should confirm in interactive mode","suites":["bower unregister"],"updatePoint":{"line":48,"column":40,"index":1320},"line":48,"code":"  it('should confirm in interactive mode', function () {\n    var register = unregisterFactory();\n    var promise = helpers.run(register, ['some-name', {\n      interactive: true,\n      registry: {\n        register: 'http://localhost'\n      }\n    }]);\n    return helpers.expectEvent(promise.logger, 'confirm').spread(function (e) {\n      expect(e.type).to.be('confirm');\n      expect(e.message).to.be('You are about to remove component \"some-name\" from the bower registry (http://localhost). It is generally considered bad behavior to remove versions of a library that others are depending on. Are you really sure?');\n      expect(e.default).to.be(false);\n    });\n  });","file":"commands/unregister.js","skipped":false,"dir":"test"},{"name":"should skip confirming when forcing","suites":["bower unregister"],"updatePoint":{"line":62,"column":41,"index":1989},"line":62,"code":"  it('should skip confirming when forcing', function () {\n    var register = unregisterFactory();\n    return helpers.run(register, ['some-name', {\n      interactive: true,\n      force: true\n    }]);\n  });","file":"commands/unregister.js","skipped":false,"dir":"test"},{"name":"correctly reads arguments","suites":["bower update"],"updatePoint":{"line":63,"column":31,"index":1521},"line":63,"code":"  it('correctly reads arguments', function () {\n    expect(updateCmd.readOptions(['jquery', '-F', '-p'])).to.eql([['jquery'], {\n      forceLatest: true,\n      production: true\n    }]);\n  });","file":"commands/update.js","skipped":false,"dir":"test"},{"name":"install missing packages","suites":["bower update"],"updatePoint":{"line":69,"column":30,"index":1711},"line":69,"code":"  it('install missing packages', function () {\n    mainPackage.prepare();\n    tempDir.prepare({\n      'bower.json': {\n        name: 'test',\n        dependencies: {\n          package: mainPackage.path\n        }\n      }\n    });\n    return update().then(function () {\n      expect(tempDir.exists('bower_components/package/bower.json')).to.equal(true);\n      expect(tempDir.read('bower_components/package/bower.json')).to.contain('\"name\": \"package\"');\n    });\n  });","file":"commands/update.js","skipped":false,"dir":"test"},{"name":"does not install ignored dependencies","suites":["bower update"],"updatePoint":{"line":84,"column":43,"index":2186},"line":84,"code":"  it('does not install ignored dependencies', function () {\n    var package3 = new helpers.TempDir({\n      'bower.json': {\n        name: 'package3'\n      }\n    }).prepare();\n    var package2 = new helpers.TempDir({\n      'bower.json': {\n        name: 'package2',\n        dependencies: {\n          package3: package3.path\n        }\n      }\n    }).prepare();\n    tempDir.prepare({\n      'bower.json': {\n        name: 'test',\n        dependencies: {\n          package2: package2.path\n        }\n      },\n      '.bowerrc': {\n        ignoredDependencies: ['package3']\n      }\n    });\n    return update().then(function () {\n      expect(tempDir.exists('bower_components/package2/bower.json')).to.equal(true);\n      expect(tempDir.exists('bower_components/package3')).to.equal(false);\n    });\n  });","file":"commands/update.js","skipped":false,"dir":"test"},{"name":"does not install ignored dependencies if run multiple times","suites":["bower update"],"updatePoint":{"line":114,"column":65,"index":2999},"line":114,"code":"  it('does not install ignored dependencies if run multiple times', function () {\n    var package3 = new helpers.TempDir({\n      'bower.json': {\n        name: 'package3'\n      }\n    }).prepare();\n    var package2 = new helpers.TempDir({\n      'bower.json': {\n        name: 'package2',\n        dependencies: {\n          package3: package3.path\n        }\n      }\n    }).prepare();\n    tempDir.prepare({\n      'bower.json': {\n        name: 'test',\n        dependencies: {\n          package2: package2.path\n        }\n      },\n      '.bowerrc': {\n        ignoredDependencies: ['package3']\n      }\n    });\n    return update().then(function () {\n      return update().then(function () {\n        expect(tempDir.exists('bower_components/package2/bower.json')).to.equal(true);\n        expect(tempDir.exists('bower_components/package3')).to.equal(false);\n      });\n    });\n  });","file":"commands/update.js","skipped":false,"dir":"test"},{"name":"runs preinstall hook when installing missing package","suites":["bower update"],"updatePoint":{"line":146,"column":58,"index":3860},"line":146,"code":"  it('runs preinstall hook when installing missing package', function () {\n    mainPackage.prepare();\n    tempDir.prepare({\n      'bower.json': {\n        name: 'test',\n        dependencies: {\n          package: mainPackage.path\n        }\n      },\n      '.bowerrc': {\n        scripts: {\n          preinstall: 'node -e \\'require(\"fs\").writeFileSync(\"preinstall.txt\", \"%\")\\''\n        }\n      }\n    });\n    return update().then(function () {\n      expect(tempDir.read('preinstall.txt')).to.be('package');\n    });\n  });","file":"commands/update.js","skipped":false,"dir":"test"},{"name":"runs postinstall hook when installing missing package","suites":["bower update"],"updatePoint":{"line":165,"column":59,"index":4376},"line":165,"code":"  it('runs postinstall hook when installing missing package', function () {\n    mainPackage.prepare();\n    tempDir.prepare({\n      'bower.json': {\n        name: 'test',\n        dependencies: {\n          package: mainPackage.path\n        }\n      },\n      '.bowerrc': {\n        scripts: {\n          postinstall: 'node -e \\'require(\"fs\").writeFileSync(\"postinstall.txt\", \"%\")\\''\n        }\n      }\n    });\n    return update().then(function () {\n      expect(tempDir.read('postinstall.txt')).to.be('package');\n    });\n  });","file":"commands/update.js","skipped":false,"dir":"test"},{"name":"doesn't runs postinstall when no package is update","suites":["bower update"],"updatePoint":{"line":184,"column":56,"index":4892},"line":184,"code":"  it(\"doesn't runs postinstall when no package is update\", function () {\n    mainPackage.prepare();\n    tempDir.prepare({\n      'bower.json': {\n        name: 'test',\n        dependencies: {\n          package: mainPackage.path\n        }\n      },\n      '.bowerrc': {\n        scripts: {\n          postinstall: 'node -e \\'require(\"fs\").writeFileSync(\"postinstall.txt\", \"%\")\\''\n        }\n      }\n    });\n    return install().then(function () {\n      tempDir.prepare();\n      return update().then(function () {\n        expect(tempDir.exists('postinstall.txt')).to.be(false);\n      });\n    });\n  });","file":"commands/update.js","skipped":false,"dir":"test"},{"name":"updates a package","suites":["bower update"],"updatePoint":{"line":206,"column":23,"index":5452},"line":206,"code":"  it('updates a package', function () {\n    tempDir.prepare({\n      'bower.json': {\n        name: 'test',\n        dependencies: {\n          package: gitPackage.path + '#1.0.0'\n        }\n      }\n    });\n    return install().then(function () {\n      expect(tempDir.read('bower_components/package/version.txt')).to.contain('1.0.0');\n      tempDir.prepare({\n        'bower.json': {\n          name: 'test',\n          dependencies: {\n            package: gitPackage.path + '#1.0.1'\n          }\n        }\n      });\n      return update().then(function () {\n        expect(tempDir.read('bower_components/package/version.txt')).to.contain('1.0.1');\n      });\n    });\n  });","file":"commands/update.js","skipped":false,"dir":"test"},{"name":"does not install ignored dependencies when updating a package","suites":["bower update"],"updatePoint":{"line":230,"column":67,"index":6159},"line":230,"code":"  it('does not install ignored dependencies when updating a package', function () {\n    this.timeout(15000);\n    var package3 = new helpers.TempDir({\n      'bower.json': {\n        name: 'package3'\n      }\n    }).prepare();\n    var package2 = new helpers.TempDir().prepareGit({\n      '1.0.0': {\n        'bower.json': {\n          name: 'package2',\n          version: '1.0.0',\n          dependencies: {\n            package3: package3.path\n          }\n        }\n      },\n      '1.0.1': {\n        'bower.json': {\n          name: 'package2',\n          version: '1.0.1',\n          dependencies: {\n            package3: package3.path\n          }\n        }\n      }\n    });\n    tempDir.prepare({\n      'bower.json': {\n        name: 'test',\n        dependencies: {\n          package2: package2.path + '#1.0.0'\n        }\n      },\n      '.bowerrc': {\n        ignoredDependencies: ['package3']\n      }\n    });\n    return install().then(function () {\n      expect(tempDir.readJson('bower_components/package2/bower.json').version).to.equal('1.0.0');\n      expect(tempDir.exists('bower_components/package3')).to.equal(false);\n      tempDir.prepare({\n        'bower.json': {\n          name: 'test',\n          dependencies: {\n            package2: package2.path + '#1.0.1'\n          }\n        },\n        '.bowerrc': {\n          ignoredDependencies: ['package3']\n        }\n      });\n      return update().then(function () {\n        expect(tempDir.readJson('bower_components/package2/bower.json').version).to.equal('1.0.1');\n        expect(tempDir.exists('bower_components/package3')).to.equal(false);\n      });\n    });\n  });","file":"commands/update.js","skipped":false,"dir":"test"},{"name":"runs preinstall hook when updating a package","suites":["bower update"],"updatePoint":{"line":288,"column":50,"index":7747},"line":288,"code":"  it('runs preinstall hook when updating a package', function () {\n    tempDir.prepare({\n      'bower.json': {\n        name: 'test',\n        dependencies: {\n          package: gitPackage.path + '#1.0.0'\n        }\n      }\n    });\n    return install().then(function () {\n      tempDir.prepare({\n        'bower.json': {\n          name: 'test',\n          dependencies: {\n            package: gitPackage.path + '#1.0.1'\n          }\n        },\n        '.bowerrc': {\n          scripts: {\n            preinstall: 'node -e \\'require(\"fs\").writeFileSync(\"preinstall.txt\", \"%\")\\''\n          }\n        }\n      });\n      expect(tempDir.exists('preinstall.txt')).to.be(false);\n      return update().then(function () {\n        expect(tempDir.read('preinstall.txt')).to.be('subPackage package');\n      });\n    });\n  });","file":"commands/update.js","skipped":false,"dir":"test"},{"name":"runs postinstall hook when updating a package","suites":["bower update"],"updatePoint":{"line":317,"column":51,"index":8552},"line":317,"code":"  it('runs postinstall hook when updating a package', function () {\n    tempDir.prepare({\n      'bower.json': {\n        name: 'test',\n        dependencies: {\n          package: gitPackage.path + '#1.0.0'\n        }\n      }\n    });\n    return install().then(function () {\n      tempDir.prepare({\n        'bower.json': {\n          name: 'test',\n          dependencies: {\n            package: gitPackage.path + '#1.0.1'\n          }\n        },\n        '.bowerrc': {\n          scripts: {\n            preinstall: 'node -e \\'require(\"fs\").writeFileSync(\"preinstall.txt\", \"%\")\\'',\n            postinstall: 'node -e \\'require(\"fs\").writeFileSync(\"postinstall.txt\", \"%\")\\''\n          }\n        }\n      });\n      expect(tempDir.exists('postinstall.txt')).to.be(false);\n      return update().then(function () {\n        expect(tempDir.read('postinstall.txt')).to.be('subPackage package');\n      });\n    });\n  });","file":"commands/update.js","skipped":false,"dir":"test"},{"name":"bumps patch version","suites":["bower version"],"updatePoint":{"line":15,"column":25,"index":319},"line":15,"code":"  it('bumps patch version', function () {\n    mainPackage.prepareGit();\n    return helpers.run(version, ['patch', {}, {\n      cwd: mainPackage.path\n    }]).then(function () {\n      expect(mainPackage.latestGitTag()).to.be('0.0.1');\n    });\n  });","file":"commands/version.js","skipped":false,"dir":"test"},{"name":"bumps minor version","suites":["bower version"],"updatePoint":{"line":23,"column":25,"index":565},"line":23,"code":"  it('bumps minor version', function () {\n    mainPackage.prepareGit();\n    return helpers.run(version, ['minor', {}, {\n      cwd: mainPackage.path\n    }]).then(function () {\n      expect(mainPackage.latestGitTag()).to.be('0.1.0');\n    });\n  });","file":"commands/version.js","skipped":false,"dir":"test"},{"name":"bumps major version","suites":["bower version"],"updatePoint":{"line":31,"column":25,"index":811},"line":31,"code":"  it('bumps major version', function () {\n    mainPackage.prepareGit();\n    return helpers.run(version, ['major', {}, {\n      cwd: mainPackage.path\n    }]).then(function () {\n      expect(mainPackage.latestGitTag()).to.be('1.0.0');\n    });\n  });","file":"commands/version.js","skipped":false,"dir":"test"},{"name":"changes version","suites":["bower version"],"updatePoint":{"line":39,"column":21,"index":1053},"line":39,"code":"  it('changes version', function () {\n    mainPackage.prepareGit();\n    return helpers.run(version, ['1.2.3', {}, {\n      cwd: mainPackage.path\n    }]).then(function () {\n      expect(mainPackage.latestGitTag()).to.be('1.2.3');\n    });\n  });","file":"commands/version.js","skipped":false,"dir":"test"},{"name":"returns the new version","suites":["bower version"],"updatePoint":{"line":47,"column":29,"index":1303},"line":47,"code":"  it('returns the new version', function () {\n    mainPackage.prepareGit();\n    return helpers.run(version, ['major', {}, {\n      cwd: mainPackage.path\n    }]).then(function (results) {\n      expect(results[0]).to.be('v1.0.0');\n    });\n  });","file":"commands/version.js","skipped":false,"dir":"test"},{"name":"fails on a dirty git repository","suites":["bower version"],"updatePoint":{"line":55,"column":37,"index":1553},"line":55,"code":"  it('fails on a dirty git repository', function () {\n    mainPackage.prepareGit();\n    mainPackage.create({\n      'dirty.txt': 'This file has not been committed'\n    });\n    return helpers.run(version, ['patch', {}, {\n      cwd: mainPackage.path\n    }]).then(null, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.code).to.be('ENOTGITREPOSITORY');\n    });\n  });","file":"commands/version.js","skipped":false,"dir":"test"},{"name":"fails when the version already exists","suites":["bower version"],"updatePoint":{"line":67,"column":43,"index":1942},"line":67,"code":"  it('fails when the version already exists', function () {\n    mainPackage.prepareGit();\n    return helpers.run(version, ['0.0.0', {}, {\n      cwd: mainPackage.path\n    }]).then(null, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.code).to.be('EVERSIONEXISTS');\n    });\n  });","file":"commands/version.js","skipped":false,"dir":"test"},{"name":"fails with an invalid argument","suites":["bower version"],"updatePoint":{"line":76,"column":36,"index":2234},"line":76,"code":"  it('fails with an invalid argument', function () {\n    mainPackage.prepareGit();\n    return helpers.run(version, ['lol', {}, {\n      cwd: mainPackage.path\n    }]).then(null, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.code).to.be('EINVALIDVERSION');\n    });\n  });","file":"commands/version.js","skipped":false,"dir":"test"},{"name":"bumps with custom commit message","suites":["bower version"],"updatePoint":{"line":85,"column":38,"index":2527},"line":85,"code":"  it('bumps with custom commit message', function () {\n    mainPackage.prepareGit();\n    return helpers.run(version, ['patch', {\n      message: 'Bumping %s, because what'\n    }, {\n      cwd: mainPackage.path\n    }]).then(function () {\n      var tags = mainPackage.git('tag');\n      expect(tags).to.be('v0.0.0\\nv0.0.1\\n');\n      var message = mainPackage.git('log', '--pretty=format:%s', '-n1');\n      expect(message).to.be('Bumping v0.0.1, because what');\n    });\n  });","file":"commands/version.js","skipped":false,"dir":"test"},{"name":"creates commit and tags","suites":["bower version"],"updatePoint":{"line":98,"column":29,"index":2988},"line":98,"code":"  it('creates commit and tags', function () {\n    mainPackage.prepareGit();\n    return helpers.run(version, ['patch', {}, {\n      cwd: mainPackage.path\n    }]).then(function () {\n      var tags = mainPackage.git('tag');\n      expect(tags).to.be('v0.0.0\\nv0.0.1\\n');\n      var message = mainPackage.git('log', '--pretty=format:%s', '-n1');\n      expect(message).to.be('v0.0.1');\n    });\n  });","file":"commands/version.js","skipped":false,"dir":"test"},{"name":"assumes v0.0.0 when no tags exist","suites":["bower version"],"updatePoint":{"line":109,"column":39,"index":3390},"line":109,"code":"  it('assumes v0.0.0 when no tags exist', function () {\n    var packageWithoutTags = new helpers.TempDir({});\n    packageWithoutTags.prepareGit();\n    packageWithoutTags.create({\n      'index.js': 'console.log(\"hello, world\");'\n    });\n    packageWithoutTags.git('add', '-A');\n    packageWithoutTags.git('commit', '-m\"commit\"');\n    return helpers.run(version, ['major', {}, {\n      cwd: packageWithoutTags.path\n    }]).then(function () {\n      expect(packageWithoutTags.latestGitTag()).to.be('1.0.0');\n    });\n  });","file":"commands/version.js","skipped":false,"dir":"test"},{"name":"prefers exact versions over ranges","suites":["Manager","resolve"],"updatePoint":{"line":33,"column":42,"index":897},"line":33,"code":"    it('prefers exact versions over ranges', function () {\n      manager._resolved = {\n        ember: [{\n          target: '>=1.4',\n          pkgMeta: {\n            version: '2.7.0'\n          }\n        }, {\n          target: '2.7.0',\n          pkgMeta: {\n            version: '2.7.0'\n          }\n        }]\n      };\n      return manager.resolve().then(function () {\n        expect(manager._dissected).to.eql({\n          ember: {\n            target: '2.7.0',\n            pkgMeta: {\n              version: '2.7.0'\n            }\n          }\n        });\n      });\n    });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"accepts endpoints with same targets","suites":["Manager","_areCompatible","resolved is being fetched"],"updatePoint":{"line":61,"column":45,"index":1573},"line":61,"code":"      it('accepts endpoints with same targets', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: 'xxx'\n        }, {\n          name: 'bar',\n          target: 'xxx'\n        })).to.be(true);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"rejects endpoints with different targets","suites":["Manager","_areCompatible","resolved is being fetched"],"updatePoint":{"line":70,"column":50,"index":1822},"line":70,"code":"      it('rejects endpoints with different targets', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: 'xxx'\n        }, {\n          name: 'bar',\n          target: 'yyy'\n        })).to.be(false);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"accepts with version and matching range","suites":["Manager","_areCompatible","resolved is being fetched"],"updatePoint":{"line":79,"column":49,"index":2071},"line":79,"code":"      it('accepts with version and matching range', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: '0.1.2'\n        }, {\n          name: 'bar',\n          target: '~0.1.0'\n        })).to.be(true);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"rejects with version and non-matching range","suites":["Manager","_areCompatible","resolved is being fetched"],"updatePoint":{"line":88,"column":53,"index":2328},"line":88,"code":"      it('rejects with version and non-matching range', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: '0.1.2'\n        }, {\n          name: 'bar',\n          target: '~0.1.3'\n        })).to.be(false);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"accepts with matching range and version","suites":["Manager","_areCompatible","resolved is being fetched"],"updatePoint":{"line":97,"column":49,"index":2582},"line":97,"code":"      it('accepts with matching range and version', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: '~0.1.0'\n        }, {\n          name: 'bar',\n          target: '0.1.2'\n        })).to.be(true);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"accepts with non-matching range and version","suites":["Manager","_areCompatible","resolved is being fetched"],"updatePoint":{"line":106,"column":53,"index":2839},"line":106,"code":"      it('accepts with non-matching range and version', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: '~0.1.3'\n        }, {\n          name: 'bar',\n          target: '0.1.2'\n        })).to.be(false);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"accepts with matching ranges","suites":["Manager","_areCompatible","resolved is being fetched"],"updatePoint":{"line":115,"column":38,"index":3082},"line":115,"code":"      it('accepts with matching ranges', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: '~0.1.0'\n        }, {\n          name: 'bar',\n          target: '~0.1.3'\n        })).to.be(true);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"rejects with non-matching ranges","suites":["Manager","_areCompatible","resolved is being fetched"],"updatePoint":{"line":124,"column":42,"index":3329},"line":124,"code":"      it('rejects with non-matching ranges', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: '~0.1.0'\n        }, {\n          name: 'bar',\n          target: '~0.2.3'\n        })).to.be(false);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"rejects with non-matching ranges","suites":["Manager","_areCompatible","resolved is being fetched"],"updatePoint":{"line":133,"column":42,"index":3577},"line":133,"code":"      it('rejects with non-matching ranges', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: '~0.1.0'\n        }, {\n          name: 'bar',\n          target: 'xxx'\n        })).to.be(false);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"accepts if the same version as resolved","suites":["Manager","_areCompatible","resolved is already fetched"],"updatePoint":{"line":151,"column":49,"index":4030},"line":151,"code":"      it('accepts if the same version as resolved', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: '1.2.3'\n        }, resolved)).to.be(true);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"rejects if different version than resolved","suites":["Manager","_areCompatible","resolved is already fetched"],"updatePoint":{"line":157,"column":52,"index":4233},"line":157,"code":"      it('rejects if different version than resolved', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: '1.2.4'\n        }, resolved)).to.be(false);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"accepts if range matches resolved version","suites":["Manager","_areCompatible","resolved is already fetched"],"updatePoint":{"line":163,"column":51,"index":4436},"line":163,"code":"      it('accepts if range matches resolved version', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: '~1.2.1'\n        }, resolved)).to.be(true);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"rejects if range does not match","suites":["Manager","_areCompatible","resolved is already fetched"],"updatePoint":{"line":169,"column":41,"index":4629},"line":169,"code":"      it('rejects if range does not match', function () {\n        expect(manager._areCompatible({\n          name: 'foo',\n          target: '~1.2.4'\n        }, resolved)).to.be(false);\n      });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"finds highest bound","suites":["Manager","_getCap"],"updatePoint":{"line":178,"column":27,"index":4859},"line":178,"code":"    it('finds highest bound', function () {\n      var highest = manager._getCap([['2.1.1-0', '<2.2.0-0'], '<3.2.0'], 'highest');\n\n      expect(highest).to.eql({\n        version: '3.2.0',\n        comparator: '<'\n      });\n    });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"finds lowest bound","suites":["Manager","_getCap"],"updatePoint":{"line":186,"column":26,"index":5087},"line":186,"code":"    it('finds lowest bound', function () {\n      var highest = manager._getCap([['2.1.1-0', '<2.2.0-0'], '<3.2.0'], 'lowest');\n\n      expect(highest).to.eql({\n        version: '2.1.1-0',\n        comparator: ''\n      });\n    });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"defaults to highest bound","suites":["Manager","_getCap"],"updatePoint":{"line":194,"column":33,"index":5322},"line":194,"code":"    it('defaults to highest bound', function () {\n      var highest = manager._getCap(['1.0.0', '2.0.0']);\n\n      expect(highest).to.eql({\n        version: '2.0.0',\n        comparator: ''\n      });\n    });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"ignores non-semver elements","suites":["Manager","_getCap"],"updatePoint":{"line":202,"column":35,"index":5530},"line":202,"code":"    it('ignores non-semver elements', function () {\n      var highest = manager._getCap(['0.9', '>1.0.1', ['<1.0.0', 'lol']]);\n\n      expect(highest).to.eql({\n        version: '1.0.1',\n        comparator: '>'\n      });\n    });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"returns empty object if cap is not found","suites":["Manager","_getCap"],"updatePoint":{"line":210,"column":48,"index":5770},"line":210,"code":"    it('returns empty object if cap is not found', function () {\n      var highest = manager._getCap(['0.9'] // Not a semver\n      );\n\n      expect(highest).to.eql({});\n    });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"leaves last unique element","suites":["Manager","_uniquify"],"updatePoint":{"line":218,"column":34,"index":5977},"line":218,"code":"    it('leaves last unique element', function () {\n      var unique = manager._uniquify([{\n        name: 'foo',\n        id: 1\n      }, {\n        name: 'foo',\n        id: 2\n      }]);\n\n      expect(unique).to.eql([{\n        name: 'foo',\n        id: 2\n      }]);\n    });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"compares by name first","suites":["Manager","_uniquify"],"updatePoint":{"line":232,"column":30,"index":6242},"line":232,"code":"    it('compares by name first', function () {\n      var unique = manager._uniquify([{\n        name: 'foo',\n        source: 'google.com'\n      }, {\n        name: 'foo',\n        source: 'facebook.com'\n      }]);\n\n      expect(unique).to.eql([{\n        name: 'foo',\n        source: 'facebook.com'\n      }]);\n    });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"compares by source if name is not available","suites":["Manager","_uniquify"],"updatePoint":{"line":246,"column":51,"index":6577},"line":246,"code":"    it('compares by source if name is not available', function () {\n      var unique = manager._uniquify([{\n        source: 'facebook.com'\n      }, {\n        source: 'facebook.com'\n      }]);\n\n      expect(unique).to.eql([{\n        source: 'facebook.com'\n      }]);\n    });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"leaves different targets intact","suites":["Manager","_uniquify"],"updatePoint":{"line":257,"column":39,"index":6839},"line":257,"code":"    it('leaves different targets intact', function () {\n      var unique = manager._uniquify([{\n        source: 'facebook.com',\n        target: 'a1b2c3'\n      }, {\n        source: 'facebook.com',\n        target: 'ffffff'\n      }]);\n\n      expect(unique).to.eql([{\n        source: 'facebook.com',\n        target: 'a1b2c3'\n      }, {\n        source: 'facebook.com',\n        target: 'ffffff'\n      }]);\n    });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"removes if same targets","suites":["Manager","_uniquify"],"updatePoint":{"line":274,"column":31,"index":7239},"line":274,"code":"    it('removes if same targets', function () {\n      var unique = manager._uniquify([{\n        source: 'facebook.com',\n        target: 'ffffff'\n      }, {\n        source: 'facebook.com',\n        target: 'ffffff'\n      }]);\n\n      expect(unique).to.eql([{\n        source: 'facebook.com',\n        target: 'ffffff'\n      }]);\n    });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"ignores other fields","suites":["Manager","_uniquify"],"updatePoint":{"line":288,"column":28,"index":7568},"line":288,"code":"    it('ignores other fields', function () {\n      var unique = manager._uniquify([{\n        source: 'facebook.com',\n        foo: 12\n      }, {\n        source: 'facebook.com',\n        bar: 13\n      }]);\n\n      expect(unique).to.eql([{\n        source: 'facebook.com',\n        bar: 13\n      }]);\n    });","file":"core/Manager.js","skipped":false,"dir":"test"},{"name":"should pass the config correctly to the registry client, including its cache folder","suites":["PackageRepository",".constructor"],"updatePoint":{"line":100,"column":91,"index":3040},"line":100,"code":"    it('should pass the config correctly to the registry client, including its cache folder', function () {\n      expect(packageRepository._registryClient._config.cache).to.equal(registryCacheDir);\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should call the resolver factory to get the appropriate resolver","suites":["PackageRepository",".fetch"],"updatePoint":{"line":105,"column":72,"index":3268},"line":105,"code":"    it('should call the resolver factory to get the appropriate resolver', function (next) {\n      var called;\n\n      resolverFactoryHook = function () {\n        called = true;\n      };\n\n      packageRepository.fetch({\n        name: '',\n        source: 'foo',\n        target: '~0.1.0'\n      }).spread(function (canonicalDir, pkgMeta) {\n        expect(called).to.be(true);\n        expect(fs.existsSync(canonicalDir)).to.be(true);\n        expect(pkgMeta).to.be.an('object');\n        expect(pkgMeta.name).to.be('package-a');\n        expect(pkgMeta.version).to.be('0.1.1');\n        next();\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should just call the resolver resolve method if force was specified","suites":["PackageRepository",".fetch"],"updatePoint":{"line":125,"column":75,"index":3882},"line":125,"code":"    it('should just call the resolver resolve method if force was specified', function (next) {\n      var called = [];\n\n      resolverFactoryHook = function (resolver) {\n        var originalResolve = resolver.resolve;\n\n        resolver.resolve = function () {\n          called.push('resolve');\n          return originalResolve.apply(this, arguments);\n        };\n\n        resolver.hasNew = function () {\n          called.push('hasNew');\n          return Q.resolve(false);\n        };\n      };\n\n      packageRepository._resolveCache.retrieve = function () {\n        called.push('retrieve');\n        return Q.resolve([]);\n      };\n\n      packageRepository._config.force = true;\n      packageRepository.fetch({\n        name: '',\n        source: 'foo',\n        target: ' ~0.1.0'\n      }).spread(function (canonicalDir, pkgMeta) {\n        expect(called).to.eql(['resolve']);\n        expect(fs.existsSync(canonicalDir)).to.be(true);\n        expect(pkgMeta).to.be.an('object');\n        expect(pkgMeta.name).to.be('package-a');\n        expect(pkgMeta.version).to.be('0.1.1');\n        next();\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should attempt to retrieve a resolved package from the resolve package","suites":["PackageRepository",".fetch"],"updatePoint":{"line":161,"column":78,"index":4992},"line":161,"code":"    it('should attempt to retrieve a resolved package from the resolve package', function (next) {\n      var called = false;\n      var originalRetrieve = packageRepository._resolveCache.retrieve;\n\n      packageRepository._resolveCache.retrieve = function (source) {\n        called = true;\n        expect(source).to.be(mockSource);\n        return originalRetrieve.apply(this, arguments);\n      };\n\n      packageRepository.fetch({\n        name: '',\n        source: 'foo',\n        target: '~0.1.0'\n      }).spread(function (canonicalDir, pkgMeta) {\n        expect(called).to.be(true);\n        expect(fs.existsSync(canonicalDir)).to.be(true);\n        expect(pkgMeta).to.be.an('object');\n        expect(pkgMeta.name).to.be('package-a');\n        expect(pkgMeta.version).to.be('0.1.1');\n        next();\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should avoid using cache for local resources","suites":["PackageRepository",".fetch"],"updatePoint":{"line":184,"column":52,"index":5787},"line":184,"code":"    it('should avoid using cache for local resources', function (next) {\n      forceCaching = false;\n      var called = false;\n      var originalRetrieve = packageRepository._resolveCache.retrieve;\n\n      packageRepository._resolveCache.retrieve = function (source) {\n        called = true;\n        expect(source).to.be(mockSource);\n        return originalRetrieve.apply(this, arguments);\n      };\n\n      packageRepository.fetch({\n        name: '',\n        source: helpers.localSource(testPackage),\n        target: '~0.1.0'\n      }).spread(function (canonicalDir, pkgMeta) {\n        expect(called).to.be(false);\n        expect(fs.existsSync(canonicalDir)).to.be(true);\n        expect(pkgMeta).to.be.an('object');\n        expect(pkgMeta.name).to.be('package-a');\n        expect(pkgMeta.version).to.be('0.1.1');\n        forceCaching = true;\n        next();\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should just call the resolver resolve method if no appropriate package was found in the resolve cache","suites":["PackageRepository",".fetch"],"updatePoint":{"line":209,"column":109,"index":6724},"line":209,"code":"    it('should just call the resolver resolve method if no appropriate package was found in the resolve cache', function (next) {\n      var called = [];\n\n      resolverFactoryHook = function (resolver) {\n        var originalResolve = resolver.resolve;\n\n        resolver.resolve = function () {\n          called.push('resolve');\n          return originalResolve.apply(this, arguments);\n        };\n\n        resolver.hasNew = function () {\n          called.push('hasNew');\n        };\n      };\n\n      packageRepository._resolveCache.retrieve = function () {\n        return Q.resolve([]);\n      };\n\n      packageRepository.fetch({\n        name: '',\n        source: 'foo',\n        target: ' ~0.1.0'\n      }).spread(function (canonicalDir, pkgMeta) {\n        expect(called).to.eql(['resolve']);\n        expect(fs.existsSync(canonicalDir)).to.be(true);\n        expect(pkgMeta).to.be.an('object');\n        expect(pkgMeta.name).to.be('package-a');\n        expect(pkgMeta.version).to.be('0.1.1');\n        next();\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should call the resolver hasNew method if an appropriate package was found in the resolve cache","suites":["PackageRepository",".fetch"],"updatePoint":{"line":242,"column":103,"index":7745},"line":242,"code":"    it('should call the resolver hasNew method if an appropriate package was found in the resolve cache', function (next) {\n      var json = {\n        name: 'a',\n        version: '0.2.1'\n      };\n      var called;\n\n      resolverFactoryHook = function (resolver) {\n        var originalHasNew = resolver.hasNew;\n\n        resolver.hasNew = function (pkgMeta) {\n          expect(pkgMeta).to.eql(json);\n          called = true;\n          return originalHasNew.apply(this, arguments);\n        };\n      };\n\n      packageRepository._resolveCache.retrieve = function () {\n        return Q.resolve([tempPackage, json]);\n      };\n\n      copy.copyDir(testPackage, tempPackage, {\n        ignore: ['.git']\n      }).then(function () {\n        fs.writeFileSync(path.join(tempPackage, '.bower.json'), JSON.stringify(json));\n        return packageRepository.fetch({\n          name: '',\n          source: 'foo',\n          target: '~0.1.0'\n        }).spread(function (canonicalDir, pkgMeta) {\n          expect(called).to.be(true);\n          expect(fs.existsSync(canonicalDir)).to.be(true);\n          expect(pkgMeta).to.be.an('object');\n          expect(pkgMeta.name).to.be('package-a');\n          expect(pkgMeta.version).to.be('0.1.1');\n          next();\n        });\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should call the resolver resolve method if hasNew resolved to true","suites":["PackageRepository",".fetch"],"updatePoint":{"line":281,"column":74,"index":8989},"line":281,"code":"    it('should call the resolver resolve method if hasNew resolved to true', function (next) {\n      var json = {\n        name: 'a',\n        version: '0.2.0'\n      };\n      var called = [];\n\n      resolverFactoryHook = function (resolver) {\n        var originalResolve = resolver.resolve;\n\n        resolver.resolve = function () {\n          called.push('resolve');\n          return originalResolve.apply(this, arguments);\n        };\n\n        resolver.hasNew = function (pkgMeta) {\n          expect(pkgMeta).to.eql(json);\n          called.push('hasNew');\n          return Q.resolve(true);\n        };\n      };\n\n      packageRepository._resolveCache.retrieve = function () {\n        return Q.resolve([tempPackage, json]);\n      };\n\n      copy.copyDir(testPackage, tempPackage, {\n        ignore: ['.git']\n      }).then(function () {\n        fs.writeFileSync(path.join(tempPackage, '.bower.json'), JSON.stringify(json));\n        return packageRepository.fetch({\n          name: '',\n          source: 'foo',\n          target: '~0.2.0'\n        }).spread(function (canonicalDir, pkgMeta) {\n          expect(called).to.eql(['hasNew', 'resolve']);\n          expect(fs.existsSync(canonicalDir)).to.be(true);\n          expect(pkgMeta).to.be.an('object');\n          expect(pkgMeta.name).to.be('a');\n          expect(pkgMeta.version).to.be('0.2.2');\n          next();\n        });\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should resolve to the cached package if hasNew resolve to false","suites":["PackageRepository",".fetch"],"updatePoint":{"line":325,"column":71,"index":10377},"line":325,"code":"    it('should resolve to the cached package if hasNew resolve to false', function (next) {\n      var json = {\n        name: 'a',\n        version: '0.2.0'\n      };\n      var called = [];\n\n      resolverFactoryHook = function (resolver) {\n        var originalResolve = resolver.resolve;\n\n        resolver.resolve = function () {\n          called.push('resolve');\n          return originalResolve.apply(this, arguments);\n        };\n\n        resolver.hasNew = function (pkgMeta) {\n          expect(pkgMeta).to.eql(json);\n          called.push('hasNew');\n          return Q.resolve(false);\n        };\n      };\n\n      packageRepository._resolveCache.retrieve = function () {\n        return Q.resolve([tempPackage, json]);\n      };\n\n      copy.copyDir(testPackage, tempPackage, {\n        ignore: ['.git']\n      }).then(function () {\n        fs.writeFileSync(path.join(tempPackage, '.bower.json'), JSON.stringify(json));\n        return packageRepository.fetch({\n          name: '',\n          source: 'foo',\n          target: '~0.2.0'\n        }).spread(function (canonicalDir, pkgMeta) {\n          expect(called).to.eql(['hasNew']);\n          expect(canonicalDir).to.equal(tempPackage);\n          expect(pkgMeta).to.eql(json);\n          next();\n        });\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should just use the cached package if offline was specified","suites":["PackageRepository",".fetch"],"updatePoint":{"line":367,"column":67,"index":11647},"line":367,"code":"    it('should just use the cached package if offline was specified', function (next) {\n      var json = {\n        name: 'a',\n        version: '0.2.0'\n      };\n      var called = [];\n\n      resolverFactoryHook = function (resolver) {\n        var originalResolve = resolver.resolve;\n\n        resolver.hasNew = function (pkgMeta) {\n          expect(pkgMeta).to.eql(json);\n          called.push('resolve');\n          return originalResolve.apply(this, arguments);\n        };\n\n        resolver.hasNew = function () {\n          called.push('hasNew');\n          return Q.resolve(false);\n        };\n      };\n\n      packageRepository._resolveCache.retrieve = function () {\n        return Q.resolve([tempPackage, json]);\n      };\n\n      copy.copyDir(testPackage, tempPackage, {\n        ignore: ['.git']\n      }).then(function () {\n        fs.writeFileSync(path.join(tempPackage, '.bower.json'), JSON.stringify(json));\n        packageRepository._config.offline = true;\n        return packageRepository.fetch({\n          name: '',\n          source: 'foo',\n          target: '~0.2.0'\n        }).spread(function (canonicalDir, pkgMeta) {\n          expect(called.length).to.be(0);\n          expect(canonicalDir).to.equal(tempPackage);\n          expect(pkgMeta).to.eql(json);\n          next();\n        });\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should error out if there is no appropriate package in the resolve cache and offline was specified","suites":["PackageRepository",".fetch"],"updatePoint":{"line":410,"column":106,"index":13002},"line":410,"code":"    it('should error out if there is no appropriate package in the resolve cache and offline was specified', function (next) {\n      packageRepository._config.offline = true;\n      packageRepository.fetch({\n        name: '',\n        source: 'foo',\n        target: '~0.2.0'\n      }).then(function () {\n        throw new Error('Should have failed');\n      }, function (err) {\n        expect(err).to.be.an(Error);\n        expect(err.code).to.equal('ENOCACHE');\n        next();\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should call the versions method on the concrete resolver","suites":["PackageRepository",".versions"],"updatePoint":{"line":426,"column":64,"index":13503},"line":426,"code":"    it('should call the versions method on the concrete resolver', function (next) {\n      var called = [];\n      var originalVersions = resolvers.GitRemote.versions;\n\n      resolvers.GitRemote.versions = function (source) {\n        expect(source).to.equal(mockSource);\n        called.push('resolver');\n        return Q.resolve([]);\n      };\n\n      packageRepository._resolveCache.versions = function () {\n        called.push('resolve-cache');\n        return Q.resolve([]);\n      };\n\n      packageRepository.versions('foo').then(function (versions) {\n        expect(called).to.eql(['resolver']);\n        expect(versions).to.be.an('array');\n        expect(versions.length).to.be(0);\n        next();\n      }).fin(function () {\n        resolvers.GitRemote.versions = originalVersions;\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should call the versions method on the resolve cache if offline was specified","suites":["PackageRepository",".versions"],"updatePoint":{"line":450,"column":85,"index":14331},"line":450,"code":"    it('should call the versions method on the resolve cache if offline was specified', function (next) {\n      var called = [];\n      var originalVersions = resolvers.GitRemote.versions;\n\n      resolvers.GitRemote.versions = function () {\n        called.push('resolver');\n        return Q.resolve([]);\n      };\n\n      packageRepository._resolveCache.versions = function (source) {\n        expect(source).to.equal(mockSource);\n        called.push('resolve-cache');\n        return Q.resolve([]);\n      };\n\n      packageRepository._config.offline = true;\n      packageRepository.versions('foo').then(function (versions) {\n        expect(called).to.eql(['resolve-cache']);\n        expect(versions).to.be.an('array');\n        expect(versions.length).to.be(0);\n        next();\n      }).fin(function () {\n        resolvers.GitRemote.versions = originalVersions;\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should call the eliminate method from the resolve cache","suites":["PackageRepository",".eliminate"],"updatePoint":{"line":477,"column":63,"index":15235},"line":477,"code":"    it('should call the eliminate method from the resolve cache', function (next) {\n      var called;\n      var json = {\n        name: 'a',\n        version: '0.2.0',\n        _source: 'foo'\n      };\n\n      packageRepository._resolveCache.eliminate = function (pkgMeta) {\n        expect(pkgMeta).to.eql(json);\n        called = true;\n        return Q.resolve();\n      };\n\n      packageRepository.eliminate(json).then(function () {\n        expect(called).to.be(true);\n        next();\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should call the clearCache method with the name from the registry client","suites":["PackageRepository",".eliminate"],"updatePoint":{"line":496,"column":80,"index":15757},"line":496,"code":"    it('should call the clearCache method with the name from the registry client', function (next) {\n      var called;\n      var json = {\n        name: 'a',\n        version: '0.2.0',\n        _source: 'foo'\n      };\n\n      packageRepository._registryClient.clearCache = function (name, callback) {\n        expect(name).to.eql(json.name);\n        called = true;\n        callback();\n      };\n\n      packageRepository.eliminate(json).then(function () {\n        expect(called).to.be(true);\n        next();\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should proxy to the resolve cache list method","suites":["PackageRepository",".list"],"updatePoint":{"line":517,"column":53,"index":16296},"line":517,"code":"    it('should proxy to the resolve cache list method', function (next) {\n      var called;\n      var originalList = packageRepository._resolveCache.list;\n\n      packageRepository._resolveCache.list = function () {\n        called = true;\n        return originalList.apply(this, arguments);\n      };\n\n      packageRepository.list().then(function (entries) {\n        expect(called).to.be(true);\n        expect(entries).to.be.an('array');\n        next();\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should call the clear method from the resolve cache","suites":["PackageRepository",".clear"],"updatePoint":{"line":534,"column":59,"index":16820},"line":534,"code":"    it('should call the clear method from the resolve cache', function (next) {\n      var called;\n\n      packageRepository._resolveCache.clear = function () {\n        called = true;\n        return Q.resolve();\n      };\n\n      packageRepository.clear().then(function () {\n        expect(called).to.be(true);\n        next();\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should call the clearCache method without name from the registry client","suites":["PackageRepository",".clear"],"updatePoint":{"line":547,"column":79,"index":17188},"line":547,"code":"    it('should call the clearCache method without name from the registry client', function (next) {\n      var called;\n\n      packageRepository._registryClient.clearCache = function (callback) {\n        called = true;\n        callback();\n      };\n\n      packageRepository.clear().then(function () {\n        expect(called).to.be(true);\n        next();\n      }).done();\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should call the reset method from the resolve cache","suites":["PackageRepository",".reset"],"updatePoint":{"line":562,"column":59,"index":17584},"line":562,"code":"    it('should call the reset method from the resolve cache', function () {\n      var called;\n\n      packageRepository._resolveCache.reset = function () {\n        called = true;\n        return packageRepository._resolveCache;\n      };\n\n      packageRepository.reset();\n      expect(called).to.be(true);\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should call the resetCache method without name from the registry client","suites":["PackageRepository",".reset"],"updatePoint":{"line":573,"column":79,"index":17915},"line":573,"code":"    it('should call the resetCache method without name from the registry client', function () {\n      var called;\n\n      packageRepository._registryClient.resetCache = function () {\n        called = true;\n        return packageRepository._registryClient;\n      };\n\n      packageRepository.reset();\n      expect(called).to.be(true);\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should return the underlying registry client","suites":["PackageRepository",".getRegistryClient"],"updatePoint":{"line":586,"column":52,"index":18281},"line":586,"code":"    it('should return the underlying registry client', function () {\n      expect(packageRepository.getRegistryClient()).to.be.an(RegistryClient);\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should return the underlying resolve cache","suites":["PackageRepository",".getResolveCache"],"updatePoint":{"line":591,"column":50,"index":18485},"line":591,"code":"    it('should return the underlying resolve cache', function () {\n      expect(packageRepository.getResolveCache()).to.be.an(ResolveCache);\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should clear the resolve cache runtime cache","suites":["PackageRepository","#clearRuntimeCache"],"updatePoint":{"line":596,"column":52,"index":18689},"line":596,"code":"    it('should clear the resolve cache runtime cache', function () {\n      var called;\n      var originalClearRuntimeCache = ResolveCache.clearRuntimeCache; // No need to restore the original method since the constructor\n      // gets re-assigned every time in beforeEach\n\n      ResolveCache.clearRuntimeCache = function () {\n        called = true;\n        return originalClearRuntimeCache.apply(ResolveCache, arguments);\n      };\n\n      packageRepository.constructor.clearRuntimeCache();\n      expect(called).to.be(true);\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should clear the resolver factory runtime cache","suites":["PackageRepository","#clearRuntimeCache"],"updatePoint":{"line":609,"column":55,"index":19223},"line":609,"code":"    it('should clear the resolver factory runtime cache', function () {\n      var called;\n\n      resolverFactoryClearHook = function () {\n        called = true;\n      };\n\n      packageRepository.constructor.clearRuntimeCache();\n      expect(called).to.be(true);\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should clear the registry runtime cache","suites":["PackageRepository","#clearRuntimeCache"],"updatePoint":{"line":619,"column":47,"index":19485},"line":619,"code":"    it('should clear the registry runtime cache', function () {\n      var called;\n      var originalClearRuntimeCache = RegistryClient.clearRuntimeCache; // No need to restore the original method since the constructor\n      // gets re-assigned every time in beforeEach\n\n      RegistryClient.clearRuntimeCache = function () {\n        called = true;\n        return originalClearRuntimeCache.apply(RegistryClient, arguments);\n      };\n\n      packageRepository.constructor.clearRuntimeCache();\n      expect(called).to.be(true);\n    });","file":"core/packageRepository.js","skipped":false,"dir":"test"},{"name":"should create the cache folder if it doesn't exists","suites":["ResolveCache",".constructor"],"updatePoint":{"line":71,"column":59,"index":1818},"line":71,"code":"    it(\"should create the cache folder if it doesn't exists\", function () {\n      initialize(tempPackage);\n      expect(fs.existsSync(tempPackage)).to.be(true);\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should not error out if the cache folder already exists","suites":["ResolveCache",".constructor"],"updatePoint":{"line":75,"column":63,"index":1991},"line":75,"code":"    it('should not error out if the cache folder already exists', function () {\n      mkdirp.sync(tempPackage);\n      initialize(tempPackage);\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should move the canonical dir to source-md5/version/ folder if package meta has a version","suites":["ResolveCache",".store"],"updatePoint":{"line":91,"column":97,"index":2553},"line":91,"code":"    it('should move the canonical dir to source-md5/version/ folder if package meta has a version', function (next) {\n      resolveCache.store(tempPackage, {\n        name: 'foo',\n        version: '1.0.0',\n        _source: 'foo',\n        _target: '*'\n      }).then(function (dir) {\n        expect(dir).to.equal(path.join(cacheDir, md5('foo'), '1.0.0'));\n        expect(fs.existsSync(dir)).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'baz'))).to.be(true);\n        expect(fs.existsSync(tempPackage)).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should move the canonical dir to source-md5/target/ folder if package meta has no version","suites":["ResolveCache",".store"],"updatePoint":{"line":105,"column":97,"index":3118},"line":105,"code":"    it('should move the canonical dir to source-md5/target/ folder if package meta has no version', function (next) {\n      resolveCache.store(tempPackage, {\n        name: 'foo',\n        _source: 'foo',\n        _target: 'some-branch'\n      }).then(function (dir) {\n        expect(dir).to.equal(path.join(cacheDir, md5('foo'), 'some-branch'));\n        expect(fs.existsSync(dir)).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'baz'))).to.be(true);\n        expect(fs.existsSync(tempPackage)).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should move the canonical dir to source-md5/_wildcard/ folder if package meta has no version and target is *","suites":["ResolveCache",".store"],"updatePoint":{"line":118,"column":116,"index":3692},"line":118,"code":"    it('should move the canonical dir to source-md5/_wildcard/ folder if package meta has no version and target is *', function (next) {\n      resolveCache.store(tempPackage, {\n        name: 'foo',\n        _source: 'foo',\n        _target: '*'\n      }).then(function (dir) {\n        expect(dir).to.equal(path.join(cacheDir, md5('foo'), '_wildcard'));\n        expect(fs.existsSync(dir)).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'baz'))).to.be(true);\n        expect(fs.existsSync(tempPackage)).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should read the package meta if not present","suites":["ResolveCache",".store"],"updatePoint":{"line":131,"column":51,"index":4189},"line":131,"code":"    it('should read the package meta if not present', function (next) {\n      var pkgMeta = path.join(tempPackage, '.bower.json'); // Copy bower.json to .bower.json and add some props\n\n      copy.copyFile(path.join(tempPackage, 'component.json'), pkgMeta).then(function () {\n        return Q.nfcall(fs.readFile, pkgMeta).then(function (contents) {\n          var json = JSON.parse(contents.toString());\n          json._target = '~0.2.0';\n          json._source = 'git://github.com/bower/test-package.git';\n          return Q.nfcall(fs.writeFile, pkgMeta, JSON.stringify(json, null, '  '));\n        });\n      }) // Store as usual\n      .then(function () {\n        return resolveCache.store(tempPackage);\n      }).then(function (dir) {\n        expect(dir).to.equal(path.join(cacheDir, md5('git://github.com/bower/test-package.git'), '0.2.0'));\n        expect(fs.existsSync(dir)).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'baz'))).to.be(true);\n        expect(fs.existsSync(tempPackage)).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should error out when reading the package meta if the file does not exist","suites":["ResolveCache",".store"],"updatePoint":{"line":152,"column":81,"index":5272},"line":152,"code":"    it('should error out when reading the package meta if the file does not exist', function (next) {\n      resolveCache.store(tempPackage).then(function () {\n        next(new Error('Should have failed'));\n      }, function (err) {\n        expect(err).to.be.an(Error);\n        expect(err.code).to.equal('ENOENT');\n        expect(err.message).to.contain(path.join(tempPackage, '.bower.json'));\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should error out when reading an invalid package meta","suites":["ResolveCache",".store"],"updatePoint":{"line":162,"column":61,"index":5686},"line":162,"code":"    it('should error out when reading an invalid package meta', function (next) {\n      var pkgMeta = path.join(tempPackage, '.bower.json');\n      return Q.nfcall(fs.writeFile, pkgMeta, 'w00t').then(function () {\n        return resolveCache.store(tempPackage).then(function () {\n          next(new Error('Should have failed'));\n        }, function (err) {\n          expect(err).to.be.an(Error);\n          expect(err.code).to.equal('EMALFORMED');\n          expect(err.message).to.contain(path.join(tempPackage, '.bower.json'));\n          next();\n        });\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should move the canonical dir, even if it is in a different drive","suites":["ResolveCache",".store"],"updatePoint":{"line":175,"column":73,"index":6280},"line":175,"code":"    it('should move the canonical dir, even if it is in a different drive', function (next) {\n      var hittedMock = false;\n\n      fs.rename = function (src, dest, cb) {\n        hittedMock = true;\n        setTimeout(function () {\n          var err = new Error();\n          err.code = 'EXDEV';\n          cb(err);\n        }, 10);\n      };\n\n      resolveCache.store(tempPackage, {\n        name: 'foo',\n        _source: 'foobar',\n        _target: 'some-branch'\n      }).then(function (dir) {\n        // Ensure mock was called\n        expect(hittedMock).to.be(true);\n        expect(dir).to.equal(path.join(cacheDir, md5('foobar'), 'some-branch'));\n        expect(fs.existsSync(dir)).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'baz'))).to.be(true);\n        expect(fs.existsSync(tempPackage)).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should update the in-memory cache","suites":["ResolveCache",".store"],"updatePoint":{"line":201,"column":41,"index":7103},"line":201,"code":"    it('should update the in-memory cache', function (next) {\n      // Feed the cache\n      resolveCache.versions('test-in-memory') // Copy temp package to temp package  2\n      .then(function () {\n        return copy.copyDir(tempPackage, tempPackage2, {\n          ignore: ['.git']\n        });\n      }) // Store the two packages\n      .then(function () {\n        return resolveCache.store(tempPackage, {\n          name: 'foo',\n          version: '1.0.0',\n          _source: 'test-in-memory',\n          _target: '*'\n        });\n      }).then(function () {\n        return resolveCache.store(tempPackage2, {\n          name: 'foo',\n          version: '1.0.1',\n          _source: 'test-in-memory',\n          _target: '*'\n        });\n      }) // Cache should have been updated\n      .then(function () {\n        return resolveCache.versions('test-in-memory').then(function (versions) {\n          expect(versions).to.eql(['1.0.1', '1.0.0']);\n          next();\n        });\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should url encode target when storing to the fs","suites":["ResolveCache",".store"],"updatePoint":{"line":231,"column":55,"index":8106},"line":231,"code":"    it('should url encode target when storing to the fs', function (next) {\n      resolveCache.store(tempPackage, {\n        name: 'foo',\n        _source: 'foo',\n        _target: 'foo/bar'\n      }).then(function (dir) {\n        expect(dir).to.equal(path.join(cacheDir, md5('foo'), 'foo%2Fbar'));\n        expect(fs.existsSync(dir)).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'baz'))).to.be(true);\n        expect(fs.existsSync(tempPackage)).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should be possible to store two package at same time","suites":["ResolveCache",".store"],"updatePoint":{"line":244,"column":60,"index":8618},"line":244,"code":"    it('should be possible to store two package at same time', function (next) {\n      var store = resolveCache.store.bind(resolveCache, tempPackage, {\n        name: 'foo',\n        _source: 'foo',\n        _target: 'foo/bar'\n      });\n      var store2 = resolveCache.store.bind(resolveCache, tempPackage2, {\n        name: 'foo',\n        _source: 'foo',\n        _target: 'foo/bar'\n      });\n      Q.all([store(), store2()]).then(function (dirs) {\n        var dir = dirs[0];\n        expect(dir).to.equal(path.join(cacheDir, md5('foo'), 'foo%2Fbar'));\n        expect(fs.existsSync(dir)).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'baz'))).to.be(true);\n        expect(fs.existsSync(tempPackage)).to.be(false);\n        expect(fs.existsSync(tempPackage2)).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should resolve to an array","suites":["ResolveCache",".versions"],"updatePoint":{"line":267,"column":34,"index":9454},"line":267,"code":"    it('should resolve to an array', function (next) {\n      resolveCache.versions(String(Math.random())).then(function (versions) {\n        expect(versions).to.be.an('array');\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should ignore non-semver folders of the source","suites":["ResolveCache",".versions"],"updatePoint":{"line":273,"column":54,"index":9692},"line":273,"code":"    it('should ignore non-semver folders of the source', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      fs.mkdirSync(path.join(sourceDir, '0.1.0'));\n      fs.mkdirSync(path.join(sourceDir, 'foo'));\n      resolveCache.versions(source).then(function (versions) {\n        expect(versions).to.not.contain('foo');\n        expect(versions).to.contain('0.0.1');\n        expect(versions).to.contain('0.1.0');\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should order the versions","suites":["ResolveCache",".versions"],"updatePoint":{"line":289,"column":33,"index":10326},"line":289,"code":"    it('should order the versions', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      fs.mkdirSync(path.join(sourceDir, '0.1.0'));\n      fs.mkdirSync(path.join(sourceDir, '0.1.0-rc.1'));\n      resolveCache.versions(source).then(function (versions) {\n        expect(versions).to.eql(['0.1.0', '0.1.0-rc.1', '0.0.1']);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should cache versions to speed-up subsequent calls","suites":["ResolveCache",".versions"],"updatePoint":{"line":303,"column":58,"index":10919},"line":303,"code":"    it('should cache versions to speed-up subsequent calls', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      resolveCache.versions(source).then(function () {\n        // Remove folder\n        rimraf.sync(sourceDir);\n        return resolveCache.versions(source);\n      }).then(function (versions) {\n        expect(versions).to.eql(['0.0.1']);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should resolve to empty if there are no packages for the requested source","suites":["ResolveCache",".retrieve"],"updatePoint":{"line":321,"column":81,"index":11580},"line":321,"code":"    it('should resolve to empty if there are no packages for the requested source', function (next) {\n      resolveCache.retrieve(String(Math.random())).spread(function () {\n        expect(arguments.length).to.equal(0);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should resolve to empty if there are no suitable packages for the requested target","suites":["ResolveCache",".retrieve"],"updatePoint":{"line":327,"column":90,"index":11850},"line":327,"code":"    it('should resolve to empty if there are no suitable packages for the requested target', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      fs.mkdirSync(path.join(sourceDir, '0.1.0'));\n      fs.mkdirSync(path.join(sourceDir, '0.1.9'));\n      fs.mkdirSync(path.join(sourceDir, '0.2.0'));\n      resolveCache.retrieve(source, '~0.3.0').spread(function () {\n        expect(arguments.length).to.equal(0);\n        return resolveCache.retrieve(source, 'some-branch');\n      }).spread(function () {\n        expect(arguments.length).to.equal(0);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should remove invalid packages from the cache if their package meta is missing or invalid","suites":["ResolveCache",".retrieve"],"updatePoint":{"line":345,"column":97,"index":12648},"line":345,"code":"    it('should remove invalid packages from the cache if their package meta is missing or invalid', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      fs.mkdirSync(path.join(sourceDir, '0.1.0'));\n      fs.mkdirSync(path.join(sourceDir, '0.1.9'));\n      fs.mkdirSync(path.join(sourceDir, '0.2.0')); // Create an invalid package meta\n\n      fs.writeFileSync(path.join(sourceDir, '0.2.0', '.bower.json'), 'w00t');\n      resolveCache.retrieve(source, '~0.1.0').spread(function () {\n        var dirs = fs.readdirSync(sourceDir);\n        expect(arguments.length).to.equal(0);\n        expect(dirs).to.contain('0.0.1');\n        expect(dirs).to.contain('0.2.0');\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should resolve to the highest package that matches a range target, ignoring pre-releases","suites":["ResolveCache",".retrieve"],"updatePoint":{"line":365,"column":96,"index":13551},"line":365,"code":"    it('should resolve to the highest package that matches a range target, ignoring pre-releases', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId);\n      var json = {\n        name: 'foo'\n      }; // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      json.version = '0.0.1';\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      fs.writeFileSync(path.join(sourceDir, '0.0.1', '.bower.json'), JSON.stringify(json, null, '  '));\n      json.version = '0.1.0';\n      fs.mkdirSync(path.join(sourceDir, '0.1.0'));\n      fs.writeFileSync(path.join(sourceDir, '0.1.0', '.bower.json'), JSON.stringify(json, null, '  '));\n      json.version = '0.1.0-rc.1';\n      fs.mkdirSync(path.join(sourceDir, '0.1.0-rc.1'));\n      fs.writeFileSync(path.join(sourceDir, '0.1.0-rc.1', '.bower.json'), JSON.stringify(json, null, '  '));\n      json.version = '0.1.9';\n      fs.mkdirSync(path.join(sourceDir, '0.1.9'));\n      fs.writeFileSync(path.join(sourceDir, '0.1.9', '.bower.json'), JSON.stringify(json, null, '  '));\n      json.version = '0.2.0';\n      fs.mkdirSync(path.join(sourceDir, '0.2.0'));\n      fs.writeFileSync(path.join(sourceDir, '0.2.0', '.bower.json'), JSON.stringify(json, null, '  '));\n      resolveCache.retrieve(source, '~0.1.0').spread(function (canonicalDir, pkgMeta) {\n        expect(pkgMeta).to.be.an('object');\n        expect(pkgMeta.version).to.equal('0.1.9');\n        expect(canonicalDir).to.equal(path.join(sourceDir, '0.1.9'));\n        return resolveCache.retrieve(source, '*');\n      }).spread(function (canonicalDir, pkgMeta) {\n        expect(pkgMeta).to.be.an('object');\n        expect(pkgMeta.version).to.equal('0.2.0');\n        expect(canonicalDir).to.equal(path.join(sourceDir, '0.2.0'));\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should resolve to the highest package that matches a range target, not ignoring pre-releases if they are the only versions","suites":["ResolveCache",".retrieve"],"updatePoint":{"line":401,"column":130,"index":15436},"line":401,"code":"    it('should resolve to the highest package that matches a range target, not ignoring pre-releases if they are the only versions', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId);\n      var json = {\n        name: 'foo'\n      }; // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      json.version = '0.1.0-rc.1';\n      fs.mkdirSync(path.join(sourceDir, '0.1.0-rc.1'));\n      fs.writeFileSync(path.join(sourceDir, '0.1.0-rc.1', '.bower.json'), JSON.stringify(json, null, '  '));\n      json.version = '0.1.0-rc.2';\n      fs.mkdirSync(path.join(sourceDir, '0.1.0-rc.2'));\n      fs.writeFileSync(path.join(sourceDir, '0.1.0-rc.2', '.bower.json'), JSON.stringify(json, null, '  '));\n      resolveCache.retrieve(source, '~0.1.0').spread(function (canonicalDir, pkgMeta) {\n        expect(pkgMeta).to.be.an('object');\n        expect(pkgMeta.version).to.equal('0.1.0-rc.2');\n        expect(canonicalDir).to.equal(path.join(sourceDir, '0.1.0-rc.2'));\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should resolve to exact match (including build metadata) if available","suites":["ResolveCache",".retrieve"],"updatePoint":{"line":423,"column":77,"index":16471},"line":423,"code":"    it('should resolve to exact match (including build metadata) if available', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId);\n      var json = {\n        name: 'foo'\n      };\n      var encoded; // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      json.version = '0.1.0';\n      fs.mkdirSync(path.join(sourceDir, '0.1.0'));\n      fs.writeFileSync(path.join(sourceDir, '0.1.0', '.bower.json'), JSON.stringify(json, null, '  '));\n      json.version = '0.1.0+build.4';\n      encoded = encodeURIComponent('0.1.0+build.4');\n      fs.mkdirSync(path.join(sourceDir, encoded));\n      fs.writeFileSync(path.join(sourceDir, encoded, '.bower.json'), JSON.stringify(json, null, '  '));\n      json.version = '0.1.0+build.5';\n      encoded = encodeURIComponent('0.1.0+build.5');\n      fs.mkdirSync(path.join(sourceDir, encoded));\n      fs.writeFileSync(path.join(sourceDir, encoded, '.bower.json'), JSON.stringify(json, null, '  '));\n      json.version = '0.1.0+build.6';\n      encoded = encodeURIComponent('0.1.0+build.6');\n      fs.mkdirSync(path.join(sourceDir, encoded));\n      fs.writeFileSync(path.join(sourceDir, encoded, '.bower.json'), JSON.stringify(json, null, '  '));\n      resolveCache.retrieve(source, '0.1.0+build.5').spread(function (canonicalDir, pkgMeta) {\n        expect(pkgMeta).to.be.an('object');\n        expect(pkgMeta.version).to.equal('0.1.0+build.5');\n        expect(canonicalDir).to.equal(path.join(sourceDir, encodeURIComponent('0.1.0+build.5')));\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should resolve to the _wildcard package if target is * and there are no semver versions","suites":["ResolveCache",".retrieve"],"updatePoint":{"line":455,"column":95,"index":18099},"line":455,"code":"    it('should resolve to the _wildcard package if target is * and there are no semver versions', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId);\n      var json = {\n        name: 'foo'\n      }; // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '_wildcard'));\n      fs.writeFileSync(path.join(sourceDir, '_wildcard', '.bower.json'), JSON.stringify(json, null, '  '));\n      resolveCache.retrieve(source, '*').spread(function (canonicalDir, pkgMeta) {\n        expect(pkgMeta).to.be.an('object');\n        expect(canonicalDir).to.equal(path.join(sourceDir, '_wildcard'));\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should resolve to the exact target it's not a semver range","suites":["ResolveCache",".retrieve"],"updatePoint":{"line":472,"column":66,"index":18824},"line":472,"code":"    it(\"should resolve to the exact target it's not a semver range\", function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId);\n      var json = {\n        name: 'foo'\n      }; // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, 'some-branch'));\n      fs.writeFileSync(path.join(sourceDir, 'some-branch', '.bower.json'), JSON.stringify(json, null, '  '));\n      fs.mkdirSync(path.join(sourceDir, 'other-branch'));\n      fs.writeFileSync(path.join(sourceDir, 'other-branch', '.bower.json'), JSON.stringify(json, null, '  '));\n      resolveCache.retrieve(source, 'some-branch').spread(function (canonicalDir, pkgMeta) {\n        expect(pkgMeta).to.be.an('object');\n        expect(pkgMeta).to.not.have.property('version');\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should delete the source-md5/version folder","suites":["ResolveCache",".eliminate"],"updatePoint":{"line":496,"column":51,"index":19811},"line":496,"code":"    it('should delete the source-md5/version folder', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      fs.mkdirSync(path.join(sourceDir, '0.1.0'));\n      resolveCache.eliminate({\n        name: 'foo',\n        version: '0.0.1',\n        _source: source,\n        _target: '*'\n      }).then(function () {\n        expect(fs.existsSync(path.join(sourceDir, '0.0.1'))).to.be(false);\n        expect(fs.existsSync(path.join(sourceDir, '0.1.0'))).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should delete the source-md5/target folder","suites":["ResolveCache",".eliminate"],"updatePoint":{"line":515,"column":50,"index":20511},"line":515,"code":"    it('should delete the source-md5/target folder', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      fs.mkdirSync(path.join(sourceDir, 'some-branch'));\n      resolveCache.eliminate({\n        name: 'foo',\n        _source: source,\n        _target: 'some-branch'\n      }).then(function () {\n        expect(fs.existsSync(path.join(sourceDir, 'some-branch'))).to.be(false);\n        expect(fs.existsSync(path.join(sourceDir, '0.0.1'))).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should delete the source-md5/_wildcard folder","suites":["ResolveCache",".eliminate"],"updatePoint":{"line":533,"column":53,"index":21210},"line":533,"code":"    it('should delete the source-md5/_wildcard folder', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      fs.mkdirSync(path.join(sourceDir, '_wildcard'));\n      resolveCache.eliminate({\n        name: 'foo',\n        _source: source,\n        _target: '*'\n      }).then(function () {\n        expect(fs.existsSync(path.join(sourceDir, '_wildcard'))).to.be(false);\n        expect(fs.existsSync(path.join(sourceDir, '0.0.1'))).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should delete the source-md5 folder if empty","suites":["ResolveCache",".eliminate"],"updatePoint":{"line":551,"column":52,"index":21894},"line":551,"code":"    it('should delete the source-md5 folder if empty', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      resolveCache.eliminate({\n        name: 'foo',\n        version: '0.0.1',\n        _source: source,\n        _target: '*'\n      }).then(function () {\n        expect(fs.existsSync(path.join(sourceDir, '0.0.1'))).to.be(false);\n        expect(fs.existsSync(path.join(sourceDir))).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should remove entry from in memory cache if the source-md5 folder was deleted","suites":["ResolveCache",".eliminate"],"updatePoint":{"line":569,"column":85,"index":22570},"line":569,"code":"    it('should remove entry from in memory cache if the source-md5 folder was deleted', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1')); // Feed up the cache\n\n      resolveCache.versions(source) // Eliminate\n      .then(function () {\n        return resolveCache.eliminate({\n          name: 'foo',\n          version: '0.0.1',\n          _source: source,\n          _target: '*'\n        });\n      }).then(function () {\n        // At this point the parent folder should be deleted\n        // To test against the in-memory cache, we create a folder\n        // manually and request the versions\n        mkdirp.sync(path.join(sourceDir, '0.0.2'));\n        resolveCache.versions(source).then(function (versions) {\n          expect(versions).to.eql(['0.0.2']);\n          next();\n        });\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should empty the whole cache folder","suites":["ResolveCache",".clear"],"updatePoint":{"line":601,"column":43,"index":23646},"line":601,"code":"    it('should empty the whole cache folder', function (next) {\n      resolveCache.clear().then(function () {\n        var files;\n        expect(fs.existsSync(cacheDir)).to.be(true);\n        files = fs.readdirSync(cacheDir);\n        expect(files.length).to.be(0);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should erase the in-memory cache","suites":["ResolveCache",".clear"],"updatePoint":{"line":610,"column":40,"index":23947},"line":610,"code":"    it('should erase the in-memory cache', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1')); // Feed the in-memory cache\n\n      resolveCache.versions(source) // Clear\n      .then(function () {\n        return resolveCache.clear();\n      }).then(function () {\n        // To test against the in-memory cache, we create a folder\n        // manually and request the versions\n        mkdirp.sync(path.join(sourceDir, '0.0.2'));\n        resolveCache.versions(source).then(function (versions) {\n          expect(versions).to.eql(['0.0.2']);\n          next();\n        });\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should erase the in-memory cache","suites":["ResolveCache",".reset"],"updatePoint":{"line":633,"column":40,"index":24780},"line":633,"code":"    it('should erase the in-memory cache', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1')); // Feed the in-memory cache\n\n      resolveCache.versions(source).then(function () {\n        // Delete 0.0.1 and create 0.0.2\n        fs.rmdirSync(path.join(sourceDir, '0.0.1'));\n        fs.mkdirSync(path.join(sourceDir, '0.0.2')); // Reset cache\n\n        resolveCache.reset(); // Get versions\n\n        return resolveCache.versions(source);\n      }).then(function (versions) {\n        expect(versions).to.eql(['0.0.2']);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should resolve to an empty array if the cache is empty","suites":["ResolveCache",".list"],"updatePoint":{"line":660,"column":62,"index":25695},"line":660,"code":"    it('should resolve to an empty array if the cache is empty', function (next) {\n      resolveCache.list().then(function (entries) {\n        expect(entries).to.be.an('array');\n        expect(entries.length).to.be(0);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should resolve to an ordered array of entries (name ASC, release ASC)","suites":["ResolveCache",".list"],"updatePoint":{"line":667,"column":77,"index":25970},"line":667,"code":"    it('should resolve to an ordered array of entries (name ASC, release ASC)', function (next) {\n      var source = 'list-package-1';\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId);\n      var source2 = 'list-package-2';\n      var sourceId2 = md5(source2);\n      var sourceDir2 = path.join(cacheDir, sourceId2);\n      var json = {\n        name: 'foo'\n      }; // Create some versions for different sources\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      json.version = '0.0.1';\n      fs.writeFileSync(path.join(sourceDir, '0.0.1', '.bower.json'), JSON.stringify(json, null, '  '));\n      fs.mkdirSync(path.join(sourceDir, '0.1.0'));\n      json.version = '0.1.0';\n      fs.writeFileSync(path.join(sourceDir, '0.1.0', '.bower.json'), JSON.stringify(json, null, '  '));\n      delete json.version;\n      fs.mkdirSync(path.join(sourceDir, 'foo'));\n      json._target = 'foo';\n      fs.writeFileSync(path.join(sourceDir, 'foo', '.bower.json'), JSON.stringify(json, null, '  '));\n      fs.mkdirSync(path.join(sourceDir, 'bar'));\n      json._target = 'bar';\n      fs.writeFileSync(path.join(sourceDir, 'bar', '.bower.json'), JSON.stringify(json, null, '  '));\n      fs.mkdirSync(path.join(sourceDir, 'aa'));\n      json._target = 'aa';\n      fs.writeFileSync(path.join(sourceDir, 'aa', '.bower.json'), JSON.stringify(json, null, '  '));\n      delete json._target;\n      fs.mkdirSync(sourceDir2);\n      fs.mkdirSync(path.join(sourceDir2, '0.2.1'));\n      json.version = '0.2.1';\n      fs.writeFileSync(path.join(sourceDir2, '0.2.1', '.bower.json'), JSON.stringify(json, null, '  '));\n      fs.mkdirSync(path.join(sourceDir2, '0.2.0'));\n      json.name = 'abc';\n      json.version = '0.2.0';\n      fs.writeFileSync(path.join(sourceDir2, '0.2.0', '.bower.json'), JSON.stringify(json, null, '  '));\n      resolveCache.list().then(function (entries) {\n        var expectedJson;\n        var bowerDir = path.join(__dirname, '../..');\n        expect(entries).to.be.an('array');\n        expectedJson = fs.readFileSync(path.join(__dirname, '../assets/resolve-cache/list-json-1.json'));\n        mout.object.forOwn(entries, function (entry) {\n          // Trim absolute bower path from json\n          entry.canonicalDir = entry.canonicalDir.substr(bowerDir.length); // Convert windows \\ paths to /\n\n          entry.canonicalDir = entry.canonicalDir.replace(/\\\\/g, '/');\n        });\n        expect(entries).to.eql(JSON.parse(expectedJson));\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should ignore lurking files where dirs are expected","suites":["ResolveCache",".list"],"updatePoint":{"line":719,"column":59,"index":28492},"line":719,"code":"    it('should ignore lurking files where dirs are expected', function (next) {\n      var source = 'list-package-1';\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId);\n      var json = {\n        name: 'foo'\n      }; // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      json.version = '0.0.1';\n      fs.writeFileSync(path.join(sourceDir, '0.0.1', '.bower.json'), JSON.stringify(json, null, '  ')); // Create lurking files\n\n      fs.writeFileSync(path.join(cacheDir, 'foo'), 'w00t');\n      fs.writeFileSync(path.join(cacheDir, '.DS_Store'), '');\n      fs.writeFileSync(path.join(sourceDir, 'foo'), 'w00t');\n      fs.writeFileSync(path.join(sourceDir, '.DS_Store'), ''); // It should not error out\n\n      resolveCache.list().then(function (entries) {\n        expect(entries).to.be.an('array');\n        expect(entries.length).to.be(1);\n        expect(entries[0].pkgMeta).to.eql(json); // Lurking file should have been removed\n\n        expect(fs.existsSync(path.join(cacheDir, 'foo'))).to.be(false);\n        expect(fs.existsSync(path.join(cacheDir, '.DS_Store'))).to.be(false);\n        expect(fs.existsSync(path.join(sourceDir, 'foo'))).to.be(false);\n        expect(fs.existsSync(path.join(sourceDir, '.DS_Store'))).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should delete entries if failed to read package meta","suites":["ResolveCache",".list"],"updatePoint":{"line":749,"column":60,"index":29855},"line":749,"code":"    it('should delete entries if failed to read package meta', function (next) {\n      var source = 'list-package-1';\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId);\n      var json = {\n        name: 'foo'\n      }; // Create invalid versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      fs.mkdirSync(path.join(sourceDir, '0.0.2'));\n      fs.writeFileSync(path.join(sourceDir, '0.0.2', '.bower.json'), 'w00t'); // Create valid version\n\n      fs.mkdirSync(path.join(sourceDir, '0.0.3'));\n      json.version = '0.0.3';\n      fs.writeFileSync(path.join(sourceDir, '0.0.3', '.bower.json'), JSON.stringify(json, null, '  ')); // It should not error out\n\n      resolveCache.list().then(function (entries) {\n        expect(entries).to.be.an('array');\n        expect(entries.length).to.be(1);\n        expect(entries[0].pkgMeta).to.eql(json); // Packages with invalid metas should have been removed\n\n        expect(fs.existsSync(path.join(sourceDir, '0.0.1'))).to.be(false);\n        expect(fs.existsSync(path.join(sourceDir, '0.0.2'))).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should clear the in-memory cache for all sources","suites":["ResolveCache","#clearRuntimeCache"],"updatePoint":{"line":778,"column":56,"index":31067},"line":778,"code":"    it('should clear the in-memory cache for all sources', function (next) {\n      var source = String(Math.random());\n      var sourceId = md5(source);\n      var sourceDir = path.join(cacheDir, sourceId);\n      var source2 = String(Math.random());\n      var sourceId2 = md5(source2);\n      var sourceDir2 = path.join(cacheDir, sourceId2); // Create some versions\n\n      fs.mkdirSync(sourceDir);\n      fs.mkdirSync(path.join(sourceDir, '0.0.1'));\n      fs.mkdirSync(sourceDir2);\n      fs.mkdirSync(path.join(sourceDir2, '0.0.2')); // Feed the cache\n\n      resolveCache.versions(source).then(function () {\n        return resolveCache.versions(source2);\n      }).then(function () {\n        // Create some more\n        fs.mkdirSync(path.join(sourceDir, '0.0.3'));\n        fs.mkdirSync(path.join(sourceDir2, '0.0.4')); // Reset cache\n\n        ResolveCache.clearRuntimeCache();\n      }).then(function () {\n        return resolveCache.versions(source).then(function (versions) {\n          expect(versions).to.eql(['0.0.3', '0.0.1']);\n          return resolveCache.versions(source2);\n        }).then(function (versions) {\n          expect(versions).to.eql(['0.0.4', '0.0.2']);\n          next();\n        });\n      }).done();\n    });","file":"core/resolveCache.js","skipped":false,"dir":"test"},{"name":"should recognize git remote endpoints correctly","suites":["resolverFactory"],"updatePoint":{"line":54,"column":53,"index":1243},"line":54,"code":"  it('should recognize git remote endpoints correctly', function (next) {\n    var promise = Q.resolve();\n    var endpoints;\n    endpoints = {\n      // git:\n      'git://hostname.com/user/project': 'git://hostname.com/user/project',\n      'git://hostname.com/user/project/': 'git://hostname.com/user/project',\n      'git://hostname.com/user/project.git': 'git://hostname.com/user/project.git',\n      'git://hostname.com/user/project.git/': 'git://hostname.com/user/project.git',\n      // git@:\n      'git@hostname.com:user/project': 'git@hostname.com:user/project',\n      'git@hostname.com:user/project/': 'git@hostname.com:user/project',\n      'git@hostname.com:user/project.git': 'git@hostname.com:user/project.git',\n      'git@hostname.com:user/project.git/': 'git@hostname.com:user/project.git',\n      // git+ssh:\n      'git+ssh://user@hostname.com:project': 'ssh://user@hostname.com:project',\n      'git+ssh://user@hostname.com:project/': 'ssh://user@hostname.com:project',\n      'git+ssh://user@hostname.com:project.git': 'ssh://user@hostname.com:project.git',\n      'git+ssh://user@hostname.com:project.git/': 'ssh://user@hostname.com:project.git',\n      'git+ssh://user@hostname.com/project': 'ssh://user@hostname.com/project',\n      'git+ssh://user@hostname.com/project/': 'ssh://user@hostname.com/project',\n      'git+ssh://user@hostname.com/project.git': 'ssh://user@hostname.com/project.git',\n      'git+ssh://user@hostname.com/project.git/': 'ssh://user@hostname.com/project.git',\n      // git+http\n      'git+http://hostname.com/project/blah': 'http://hostname.com/project/blah',\n      'git+http://hostname.com/project/blah/': 'http://hostname.com/project/blah',\n      'git+http://hostname.com/project/blah.git': 'http://hostname.com/project/blah.git',\n      'git+http://hostname.com/project/blah.git/': 'http://hostname.com/project/blah.git',\n      'git+http://user@hostname.com/project/blah': 'http://user@hostname.com/project/blah',\n      'git+http://user@hostname.com/project/blah/': 'http://user@hostname.com/project/blah',\n      'git+http://user@hostname.com/project/blah.git': 'http://user@hostname.com/project/blah.git',\n      'git+http://user@hostname.com/project/blah.git/': 'http://user@hostname.com/project/blah.git',\n      // git+https\n      'git+https://hostname.com/project/blah': 'https://hostname.com/project/blah',\n      'git+https://hostname.com/project/blah/': 'https://hostname.com/project/blah',\n      'git+https://hostname.com/project/blah.git': 'https://hostname.com/project/blah.git',\n      'git+https://hostname.com/project/blah.git/': 'https://hostname.com/project/blah.git',\n      'git+https://user@hostname.com/project/blah': 'https://user@hostname.com/project/blah',\n      'git+https://user@hostname.com/project/blah/': 'https://user@hostname.com/project/blah',\n      'git+https://user@hostname.com/project/blah.git': 'https://user@hostname.com/project/blah.git',\n      'git+https://user@hostname.com/project/blah.git/': 'https://user@hostname.com/project/blah.git',\n      // ssh .git$\n      'ssh://user@hostname.com:project.git': 'ssh://user@hostname.com:project.git',\n      'ssh://user@hostname.com:project.git/': 'ssh://user@hostname.com:project.git',\n      'ssh://user@hostname.com/project.git': 'ssh://user@hostname.com/project.git',\n      'ssh://user@hostname.com/project.git/': 'ssh://user@hostname.com/project.git',\n      // http .git$\n      'http://hostname.com/project.git': 'http://hostname.com/project.git',\n      'http://hostname.com/project.git/': 'http://hostname.com/project.git',\n      'http://user@hostname.com/project.git': 'http://user@hostname.com/project.git',\n      'http://user@hostname.com/project.git/': 'http://user@hostname.com/project.git',\n      // https .git$\n      'https://hostname.com/project.git': 'https://hostname.com/project.git',\n      'https://hostname.com/project.git/': 'https://hostname.com/project.git',\n      'https://user@hostname.com/project.git': 'https://user@hostname.com/project.git',\n      'https://user@hostname.com/project.git/': 'https://user@hostname.com/project.git',\n      // shorthand\n      'bower/bower': 'https://github.com/bower/bower.git'\n    };\n    mout.object.forOwn(endpoints, function (value, key) {\n      // Test without name and target\n      promise = promise.then(function () {\n        return callFactory({\n          source: key\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.GitRemote);\n        expect(resolver).to.not.be(resolvers.GitHub);\n        expect(resolver.getSource()).to.equal(value);\n        expect(resolver.getTarget()).to.equal('*');\n      }); // Test with target\n\n      promise = promise.then(function () {\n        return callFactory({\n          source: key,\n          target: 'commit-ish'\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.GitRemote);\n        expect(resolver).to.not.be(resolvers.GitHub);\n        expect(resolver.getSource()).to.equal(value);\n        expect(resolver.getTarget()).to.equal('commit-ish');\n      }); // Test with name\n\n      promise = promise.then(function () {\n        return callFactory({\n          name: 'foo',\n          source: key\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.GitRemote);\n        expect(resolver).to.not.be(resolvers.GitHub);\n        expect(resolver.getSource()).to.equal(value);\n        expect(resolver.getName()).to.equal('foo');\n        expect(resolver.getTarget()).to.equal('*');\n      });\n    });\n    promise.then(next.bind(next, null)).done();\n  });","file":"core/resolverFactory.js","skipped":false,"dir":"test"},{"name":"should recognize GitHub endpoints correctly","suites":["resolverFactory"],"updatePoint":{"line":153,"column":49,"index":6806},"line":153,"code":"  it('should recognize GitHub endpoints correctly', function (next) {\n    var promise = Q.resolve();\n    var gitHub;\n    var nonGitHub;\n    gitHub = {\n      // git:\n      'git://github.com/user/project': 'git://github.com/user/project.git',\n      'git://github.com/user/project/': 'git://github.com/user/project.git',\n      'git://github.com/user/project.git': 'git://github.com/user/project.git',\n      'git://github.com/user/project.git/': 'git://github.com/user/project.git',\n      // git@:\n      'git@github.com:user/project': 'git@github.com:user/project.git',\n      'git@github.com:user/project/': 'git@github.com:user/project.git',\n      'git@github.com:user/project.git': 'git@github.com:user/project.git',\n      'git@github.com:user/project.git/': 'git@github.com:user/project.git',\n      // git+ssh:\n      'git+ssh://git@github.com:project/blah': 'ssh://git@github.com:project/blah.git',\n      'git+ssh://git@github.com:project/blah/': 'ssh://git@github.com:project/blah.git',\n      'git+ssh://git@github.com:project/blah.git': 'ssh://git@github.com:project/blah.git',\n      'git+ssh://git@github.com:project/blah.git/': 'ssh://git@github.com:project/blah.git',\n      'git+ssh://git@github.com/project/blah': 'ssh://git@github.com/project/blah.git',\n      'git+ssh://git@github.com/project/blah/': 'ssh://git@github.com/project/blah.git',\n      'git+ssh://git@github.com/project/blah.git': 'ssh://git@github.com/project/blah.git',\n      'git+ssh://git@github.com/project/blah.git/': 'ssh://git@github.com/project/blah.git',\n      // git+http\n      'git+http://github.com/project/blah': 'http://github.com/project/blah.git',\n      'git+http://github.com/project/blah/': 'http://github.com/project/blah.git',\n      'git+http://github.com/project/blah.git': 'http://github.com/project/blah.git',\n      'git+http://github.com/project/blah.git/': 'http://github.com/project/blah.git',\n      'git+http://user@github.com/project/blah': 'http://user@github.com/project/blah.git',\n      'git+http://user@github.com/project/blah/': 'http://user@github.com/project/blah.git',\n      'git+http://user@github.com/project/blah.git': 'http://user@github.com/project/blah.git',\n      'git+http://user@github.com/project/blah.git/': 'http://user@github.com/project/blah.git',\n      // git+https\n      'git+https://github.com/project/blah': 'https://github.com/project/blah.git',\n      'git+https://github.com/project/blah/': 'https://github.com/project/blah.git',\n      'git+https://github.com/project/blah.git': 'https://github.com/project/blah.git',\n      'git+https://github.com/project/blah.git/': 'https://github.com/project/blah.git',\n      'git+https://user@github.com/project/blah': 'https://user@github.com/project/blah.git',\n      'git+https://user@github.com/project/blah/': 'https://user@github.com/project/blah.git',\n      'git+https://user@github.com/project/blah.git': 'https://user@github.com/project/blah.git',\n      'git+https://user@github.com/project/blah.git/': 'https://user@github.com/project/blah.git',\n      // ssh .git$\n      'ssh://git@github.com:project/blah.git': 'ssh://git@github.com:project/blah.git',\n      'ssh://git@github.com:project/blah.git/': 'ssh://git@github.com:project/blah.git',\n      'ssh://git@github.com/project/blah.git': 'ssh://git@github.com/project/blah.git',\n      'ssh://git@github.com/project/blah.git/': 'ssh://git@github.com/project/blah.git',\n      // http .git$\n      'http://github.com/project/blah.git': 'http://github.com/project/blah.git',\n      'http://github.com/project/blah.git/': 'http://github.com/project/blah.git',\n      'http://user@github.com/project/blah.git': 'http://user@github.com/project/blah.git',\n      'http://user@github.com/project/blah.git/': 'http://user@github.com/project/blah.git',\n      // https\n      'https://github.com/project/blah.git': 'https://github.com/project/blah.git',\n      'https://github.com/project/blah.git/': 'https://github.com/project/blah.git',\n      'https://user@github.com/project/blah.git': 'https://user@github.com/project/blah.git',\n      'https://user@github.com/project/blah.git/': 'https://user@github.com/project/blah.git',\n      // shorthand\n      'bower/bower': 'https://github.com/bower/bower.git'\n    };\n    nonGitHub = ['git://github.com/user/project/bleh.git', 'git://xxxxgithub.com/user/project.git', 'git@xxxxgithub.com:user:project.git', 'git@xxxxgithub.com:user/project.git', 'git+ssh://git@xxxxgithub.com:user/project', 'git+ssh://git@xxxxgithub.com/user/project', 'git+http://user@xxxxgithub.com/user/project', 'git+https://user@xxxxgithub.com/user/project', 'ssh://git@xxxxgithub.com:user/project.git', 'ssh://git@xxxxgithub.com/user/project.git', 'http://xxxxgithub.com/user/project.git', 'https://xxxxgithub.com/user/project.git', 'http://user@xxxxgithub.com/user/project.git', 'https://user@xxxxgithub.com/user/project.git']; // Test GitHub ones\n\n    mout.object.forOwn(gitHub, function (value, key) {\n      // Test without name and target\n      promise = promise.then(function () {\n        return callFactory({\n          source: key\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.GitHub);\n        expect(resolver.getSource()).to.equal(value);\n        expect(resolver.getTarget()).to.equal('*');\n      }); // Test with target\n\n      promise = promise.then(function () {\n        return callFactory({\n          source: key,\n          target: 'commit-ish'\n        });\n      }).then(function (resolver) {\n        if (value) {\n          expect(resolver).to.be.a(resolvers.GitHub);\n          expect(resolver.getSource()).to.equal(value);\n          expect(resolver.getTarget()).to.equal('commit-ish');\n        } else {\n          expect(resolver).to.not.be.a(resolvers.GitHub);\n        }\n      }); // Test with name\n\n      promise = promise.then(function () {\n        return callFactory({\n          name: 'foo',\n          source: key\n        });\n      }).then(function (resolver) {\n        if (value) {\n          expect(resolver).to.be.a(resolvers.GitHub);\n          expect(resolver.getSource()).to.equal(value);\n          expect(resolver.getName()).to.equal('foo');\n          expect(resolver.getTarget()).to.equal('*');\n        } else {\n          expect(resolver).to.not.be.a(resolvers.GitHub);\n        }\n      });\n    }); // Test similar to GitHub but not real GitHub\n\n    nonGitHub.forEach(function (value) {\n      promise = promise.then(function () {\n        return callFactory({\n          source: value\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.not.be.a(resolvers.GitHub);\n        expect(resolver).to.be.a(resolvers.GitRemote);\n      });\n    });\n    promise.then(next.bind(next, null)).done();\n  });","file":"core/resolverFactory.js","skipped":false,"dir":"test"},{"name":"should recognize local fs git endpoints correctly","suites":["resolverFactory"],"updatePoint":{"line":271,"column":55,"index":13514},"line":271,"code":"  it('should recognize local fs git endpoints correctly', function (next) {\n    var promise = Q.resolve();\n    var endpoints;\n    var temp;\n    endpoints = {}; // Absolute path\n\n    temp = path.resolve(__dirname, '../assets/package-a');\n    endpoints[temp] = temp; // Absolute path that ends with a /\n    // See: https://github.com/bower/bower/issues/898\n\n    temp = path.resolve(__dirname, '../assets/package-a') + '/';\n    endpoints[temp] = temp; // Relative path\n\n    endpoints[__dirname + '/../assets/package-a'] = temp; // TODO: test with backslashes on windows and ~/ on unix\n\n    mout.object.forOwn(endpoints, function (value, key) {\n      // Test without name\n      promise = promise.then(function () {\n        return callFactory({\n          source: key\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.GitFs);\n        expect(resolver.getTarget()).to.equal('*');\n      }); // Test with name\n\n      promise = promise.then(function () {\n        return callFactory({\n          name: 'foo',\n          source: key\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.GitFs);\n        expect(resolver.getName()).to.equal('foo');\n        expect(resolver.getTarget()).to.equal('*');\n      });\n    });\n    promise.then(next.bind(next, null)).done();\n  });","file":"core/resolverFactory.js","skipped":false,"dir":"test"},{"name":"should recognize svn remote endpoints correctly","suites":["resolverFactory","should recognize svn remote endpoints correctly"],"updatePoint":{"line":310,"column":162,"index":14955},"line":310,"code":"  if (!helpers.hasSvn()) describe.skip('should recognize svn remote endpoints correctly', function () {});else it('should recognize svn remote endpoints correctly', function (next) {\n    var promise = Q.resolve();\n    var endpoints;\n    endpoints = {\n      // svn:\n      'svn://hostname.com/user/project': 'http://hostname.com/user/project',\n      'svn://hostname.com/user/project/': 'http://hostname.com/user/project',\n      // svn@:\n      'svn://svn@hostname.com:user/project': 'http://svn@hostname.com:user/project',\n      'svn://svn@hostname.com:user/project/': 'http://svn@hostname.com:user/project',\n      // svn+http\n      'svn+http://hostname.com/project/blah': 'http://hostname.com/project/blah',\n      'svn+http://hostname.com/project/blah/': 'http://hostname.com/project/blah',\n      'svn+http://user@hostname.com/project/blah': 'http://user@hostname.com/project/blah',\n      'svn+http://user@hostname.com/project/blah/': 'http://user@hostname.com/project/blah',\n      // svn+https\n      'svn+https://hostname.com/project/blah': 'https://hostname.com/project/blah',\n      'svn+https://hostname.com/project/blah/': 'https://hostname.com/project/blah',\n      'svn+https://user@hostname.com/project/blah': 'https://user@hostname.com/project/blah',\n      'svn+https://user@hostname.com/project/blah/': 'https://user@hostname.com/project/blah',\n      // svn+ssh\n      'svn+ssh://hostname.com/project/blah': 'svn+ssh://hostname.com/project/blah',\n      'svn+ssh://hostname.com/project/blah/': 'svn+ssh://hostname.com/project/blah',\n      'svn+ssh://user@hostname.com/project/blah': 'svn+ssh://user@hostname.com/project/blah',\n      'svn+ssh://user@hostname.com/project/blah/': 'svn+ssh://user@hostname.com/project/blah',\n      // svn+file\n      'svn+file:///project/blah': 'file:///project/blah',\n      'svn+file:///project/blah/': 'file:///project/blah'\n    };\n    mout.object.forOwn(endpoints, function (value, key) {\n      // Test without name and target\n      promise = promise.then(function () {\n        return callFactory({\n          source: key\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.Svn);\n        expect(resolver).to.not.be(resolvers.GitHub);\n        expect(resolvers.Svn.getSource(resolver.getSource())).to.equal(value);\n        expect(resolver.getTarget()).to.equal('*');\n      }); // Test with target\n\n      promise = promise.then(function () {\n        return callFactory({\n          source: key,\n          target: 'commit-ish'\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.Svn);\n        expect(resolver).to.not.be(resolvers.GitHub);\n        expect(resolvers.Svn.getSource(resolver.getSource())).to.equal(value);\n        expect(resolver.getTarget()).to.equal('commit-ish');\n      }); // Test with name\n\n      promise = promise.then(function () {\n        return callFactory({\n          name: 'foo',\n          source: key\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.Svn);\n        expect(resolver).to.not.be(resolvers.GitHub);\n        expect(resolvers.Svn.getSource(resolver.getSource())).to.equal(value);\n        expect(resolver.getName()).to.equal('foo');\n        expect(resolver.getTarget()).to.equal('*');\n      });\n    });\n    promise.then(next.bind(next, null)).done();\n  });","file":"core/resolverFactory.js","skipped":true,"dir":"test"},{"name":"should recognize local fs files/folder endpoints correctly","suites":["resolverFactory","should recognize svn remote endpoints correctly"],"updatePoint":{"line":379,"column":64,"index":18196},"line":379,"code":"  it('should recognize local fs files/folder endpoints correctly', function (next) {\n    var promise = Q.resolve();\n    var endpoints;\n    var temp;\n    tempSource = path.resolve(__dirname, '../tmp/tmp');\n    mkdirp.sync(tempSource);\n    fs.writeFileSync(path.join(tempSource, '.git'), 'foo');\n    fs.writeFileSync(path.join(tempSource, 'file.with.multiple.dots'), 'foo');\n    endpoints = {}; // Absolute path to folder with .git file\n\n    endpoints[tempSource] = tempSource; // Relative path to folder with .git file\n\n    endpoints[__dirname + '/../tmp/tmp'] = tempSource; // Absolute path to folder\n\n    temp = path.resolve(__dirname, '../assets/test-temp-dir');\n    endpoints[temp] = temp; // Absolute + relative path to folder\n\n    endpoints[__dirname + '/../assets/test-temp-dir'] = temp; // Absolute path to file\n\n    temp = path.resolve(__dirname, '../assets/package-zip.zip');\n    endpoints[temp] = temp; // Absolute + relative path to file\n\n    endpoints[__dirname + '/../assets/package-zip.zip'] = temp; // Relative ../\n\n    endpoints['../'] = path.normalize(__dirname + '/../../..'); // Relative ./\n\n    endpoints['./test/assets'] = path.join(__dirname, '../assets'); // Relative with just one slash, to test fs resolution\n    // priority against shorthands\n\n    endpoints['./test'] = path.join(__dirname, '..'); // Test files with multiple dots (PR #474)\n\n    temp = path.join(tempSource, 'file.with.multiple.dots');\n    endpoints[temp] = temp;\n    mout.object.forOwn(endpoints, function (value, key) {\n      // Test without name\n      promise = promise.then(function () {\n        return callFactory({\n          source: key\n        });\n      }).then(function (resolver) {\n        expect(resolver.getSource()).to.equal(value);\n        expect(resolver).to.be.a(resolvers.Fs);\n        expect(resolver.getTarget()).to.equal('*');\n      }); // Test with name\n\n      promise = promise.then(function () {\n        return callFactory({\n          name: 'foo',\n          source: key\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.Fs);\n        expect(resolver.getName()).to.equal('foo');\n        expect(resolver.getTarget()).to.equal('*');\n        expect(resolver.getSource()).to.equal(value);\n      });\n    });\n    promise.then(next.bind(next, null)).done();\n  });","file":"core/resolverFactory.js","skipped":true,"dir":"test"},{"name":"should recognize URL endpoints correctly","suites":["resolverFactory","should recognize svn remote endpoints correctly"],"updatePoint":{"line":438,"column":46,"index":20488},"line":438,"code":"  it('should recognize URL endpoints correctly', function (next) {\n    var promise = Q.resolve();\n    var endpoints;\n    endpoints = ['http://bower.io/foo.js', 'https://bower.io/foo.js'];\n    endpoints.forEach(function (source) {\n      // Test without name\n      promise = promise.then(function () {\n        return callFactory({\n          source: source\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.Url);\n        expect(resolver.getSource()).to.equal(source);\n      }); // Test with name\n\n      promise = promise.then(function () {\n        return callFactory({\n          name: 'foo',\n          source: source\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.Url);\n        expect(resolver.getName()).to.equal('foo');\n        expect(resolver.getSource()).to.equal(source);\n      });\n    });\n    promise.then(next.bind(next, null)).done();\n  });","file":"core/resolverFactory.js","skipped":true,"dir":"test"},{"name":"should recognize URL endpoints correctly","suites":["resolverFactory","should recognize svn remote endpoints correctly"],"updatePoint":{"line":466,"column":46,"index":21419},"line":466,"code":"  it('should recognize URL endpoints correctly', function (next) {\n    var promise = Q.resolve();\n    var endpoints;\n    endpoints = ['http://bower.io/foo.js', 'https://bower.io/foo.js'];\n    endpoints.forEach(function (source) {\n      // Test without name\n      promise = promise.then(function () {\n        return callFactory({\n          source: source\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.Url);\n        expect(resolver.getSource()).to.equal(source);\n      }); // Test with name\n\n      promise = promise.then(function () {\n        return callFactory({\n          name: 'foo',\n          source: source\n        });\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.Url);\n        expect(resolver.getName()).to.equal('foo');\n        expect(resolver.getSource()).to.equal(source);\n      });\n    });\n    promise.then(next.bind(next, null)).done();\n  });","file":"core/resolverFactory.js","skipped":true,"dir":"test"},{"name":"should recognize registry endpoints correctly","suites":["resolverFactory","should recognize svn remote endpoints correctly"],"updatePoint":{"line":494,"column":51,"index":22355},"line":494,"code":"  it('should recognize registry endpoints correctly', function (next) {\n    // Create a 'pure' file at the root to prevent regressions of #666\n    fs.writeFileSync('pure', 'foo');\n    callFactory({\n      source: 'pure'\n    }).then(function (resolver) {\n      expect(resolver).to.be.a(resolvers.GitRemote);\n      expect(resolver.getSource()).to.equal('https://github.com/yui/pure-release.git');\n      expect(resolver.getTarget()).to.equal('*');\n    }).then(function () {\n      // Test with name\n      return callFactory({\n        source: 'pure',\n        name: 'foo'\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.GitRemote);\n        expect(resolver.getSource()).to.equal('https://github.com/yui/pure-release.git');\n        expect(resolver.getName()).to.equal('foo');\n        expect(resolver.getTarget()).to.equal('*');\n      });\n    }).then(function () {\n      // Test with target\n      return callFactory({\n        source: 'pure',\n        target: '~0.4.0'\n      }).then(function (resolver) {\n        expect(resolver).to.be.a(resolvers.GitRemote);\n        expect(resolver.getTarget()).to.equal('~0.4.0');\n        next();\n      });\n    }).done();\n  });","file":"core/resolverFactory.js","skipped":true,"dir":"test"},{"name":"should error out if the package was not found in the registry","suites":["resolverFactory","should recognize svn remote endpoints correctly"],"updatePoint":{"line":526,"column":67,"index":23554},"line":526,"code":"  it('should error out if the package was not found in the registry', function (next) {\n    callFactory({\n      source: 'some-package-that-will-never-exist'\n    }).then(function () {\n      throw new Error('Should have failed');\n    }, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.code).to.equal('ENOTFOUND');\n      expect(err.message).to.contain('some-package-that-will-never-exist');\n      next();\n    }).done();\n  }); // it('should set registry to true on the decomposed endpoint if fetched from the registry', function (next) {","file":"core/resolverFactory.js","skipped":true,"dir":"test"},{"name":"should use the configured shorthand resolver","suites":["resolverFactory","should recognize svn remote endpoints correctly"],"updatePoint":{"line":546,"column":50,"index":24313},"line":546,"code":"  it('should use the configured shorthand resolver', function (next) {\n    callFactory({\n      source: 'bower/bower'\n    }).then(function (resolver) {\n      var config = {\n        shorthandResolver: 'https://bower.io/{{owner}}/{{package}}/{{shorthand}}'\n      };\n      expect(resolver.getSource()).to.equal('https://github.com/bower/bower.git');\n      return callFactory({\n        source: 'IndigoUnited/promptly'\n      }, config);\n    }).then(function (resolver) {\n      expect(resolver.getSource()).to.equal('https://bower.io/IndigoUnited/promptly/IndigoUnited/promptly');\n      next();\n    }).done();\n  });","file":"core/resolverFactory.js","skipped":true,"dir":"test"},{"name":"should not expand using the shorthand resolver if it looks like a SSH URL","suites":["resolverFactory","should recognize svn remote endpoints correctly"],"updatePoint":{"line":562,"column":79,"index":24951},"line":562,"code":"  it('should not expand using the shorthand resolver if it looks like a SSH URL', function (next) {\n    callFactory({\n      source: 'bleh@xxx.com:foo/bar'\n    }).then(function (resolver) {\n      throw new Error('Should have failed');\n    }, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.code).to.equal('ENOTFOUND');\n      expect(err.message).to.contain('bleh@xxx.com:foo/bar');\n      next();\n    }).done();\n  });","file":"core/resolverFactory.js","skipped":true,"dir":"test"},{"name":"should error out if there's no suitable resolver for a given source","suites":["resolverFactory","should recognize svn remote endpoints correctly"],"updatePoint":{"line":574,"column":73,"index":25381},"line":574,"code":"  it(\"should error out if there's no suitable resolver for a given source\", function (next) {\n    callFactory({\n      source: 'some-package-that-will-never-exist'\n    }, undefined, true).then(function () {\n      throw new Error('Should have failed');\n    }, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.code).to.be('ENORESOLVER');\n      expect(err.message).to.contain('appropriate resolver');\n      next();\n    }).done();\n  });","file":"core/resolverFactory.js","skipped":true,"dir":"test"},{"name":"should use config.cwd when resolving relative paths","suites":["resolverFactory","should recognize svn remote endpoints correctly"],"line":586,"code":"  it.skip('should use config.cwd when resolving relative paths');","file":"core/resolverFactory.js","skipped":true,"dir":"test"},{"name":"should not swallow constructor errors when instantiating resolvers","suites":["resolverFactory","should recognize svn remote endpoints correctly"],"updatePoint":{"line":587,"column":72,"index":25898},"line":587,"code":"  it('should not swallow constructor errors when instantiating resolvers', function (next) {\n    var promise = Q.resolve();\n    var endpoints; // TODO: test with others\n\n    endpoints = ['http://bower.io/foo.js', path.resolve(__dirname, '../assets/test-temp-dir')];\n    endpoints.forEach(function (source) {\n      promise = promise.then(function () {\n        return callFactory({\n          source: source,\n          target: 'bleh'\n        });\n      }).then(function () {\n        throw new Error('Should have failed');\n      }, function (err) {\n        expect(err).to.be.an(Error);\n        expect(err.message).to.match(/can't resolve targets/i);\n        expect(err.code).to.equal('ENORESTARGET');\n      });\n    });\n    promise.then(next.bind(next, null)).done();\n  });","file":"core/resolverFactory.js","skipped":true,"dir":"test"},{"name":"should call every resolver static method that clears the runtime cache","suites":["resolverFactory",".clearRuntimeCache"],"updatePoint":{"line":609,"column":78,"index":26719},"line":609,"code":"    it('should call every resolver static method that clears the runtime cache', function () {\n      var originalMethods = {};\n      var called = [];\n      var error;\n      mout.object.forOwn(resolvers, function (ConcreteResolver, key) {\n        originalMethods[key] = ConcreteResolver.clearRuntimeCache;\n\n        ConcreteResolver.clearRuntimeCache = function () {\n          called.push(key);\n          return originalMethods[key].apply(this, arguments);\n        };\n      });\n\n      try {\n        resolverFactory.clearRuntimeCache();\n      } catch (e) {\n        error = e;\n      } finally {\n        mout.object.forOwn(resolvers, function (ConcreteResolver, key) {\n          ConcreteResolver.clearRuntimeCache = originalMethods[key];\n        });\n      }\n\n      if (error) {\n        throw error;\n      }\n\n      expect(called.sort()).to.eql(Object.keys(resolvers).sort());\n    });","file":"core/resolverFactory.js","skipped":false,"dir":"test"},{"name":"should guess the name from the path","suites":["FsResolver",".constructor"],"updatePoint":{"line":49,"column":47,"index":1457},"line":49,"code":"        it('should guess the name from the path', function() {\n            var resolver = create(path.resolve('../../assets/package-zip.zip'));\n\n            expect(resolver.getName()).to.equal('package-zip');\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should make paths absolute and normalized","suites":["FsResolver",".constructor"],"updatePoint":{"line":55,"column":53,"index":1685},"line":55,"code":"        it('should make paths absolute and normalized', function() {\n            var resolver;\n\n            resolver = create(path.relative(process.cwd(), testPackage));\n            expect(resolver.getSource()).to.equal(testPackage);\n\n            resolver = create(testPackage + '/something/..');\n            expect(resolver.getSource()).to.equal(testPackage);\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should use config.cwd for resolving relative paths","suites":["FsResolver",".constructor"],"line":65,"code":"        it.skip('should use config.cwd for resolving relative paths');","file":"core/resolvers/fsResolver.js","skipped":true,"dir":"test"},{"name":"should error out if a target was specified","suites":["FsResolver",".constructor"],"updatePoint":{"line":67,"column":54,"index":2132},"line":67,"code":"        it('should error out if a target was specified', function(next) {\n            var resolver;\n\n            try {\n                resolver = create({ source: testPackage, target: '0.0.1' });\n            } catch (err) {\n                expect(err).to.be.an(Error);\n                expect(err.message).to.match(/can\\'t resolve targets/i);\n                expect(err.code).to.equal('ENORESTARGET');\n                return next();\n            }\n\n            next(new Error('Should have thrown'));\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should resolve always to true (for now..)","suites":["FsResolver",".hasNew"],"updatePoint":{"line":84,"column":53,"index":2687},"line":84,"code":"        it('should resolve always to true (for now..)', function(next) {\n            var resolver = create(testPackage);\n\n            var pkgMeta = {\n                name: 'test'\n            };\n\n            resolver\n                .hasNew(pkgMeta)\n                .then(function(hasNew) {\n                    expect(hasNew).to.be(true);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should copy the source directory contents","suites":["FsResolver",".resolve"],"updatePoint":{"line":123,"column":53,"index":4028},"line":123,"code":"        it('should copy the source directory contents', function(next) {\n            var resolver = create(testPackage);\n\n            resolver\n                .resolve()\n                .then(function(dir) {\n                    expect(fs.existsSync(path.join(dir, 'foo'))).to.be(true);\n                    expect(fs.existsSync(path.join(dir, 'bar'))).to.be(true);\n                    expect(fs.existsSync(path.join(dir, 'baz'))).to.be(true);\n                    expect(fs.existsSync(path.join(dir, 'README.md'))).to.be(\n                        true\n                    );\n                    expect(fs.existsSync(path.join(dir, 'more'))).to.be(true);\n                    expect(\n                        fs.existsSync(path.join(dir, 'more', 'more-foo'))\n                    ).to.be(true);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should copy the source file, renaming it to index","suites":["FsResolver",".resolve"],"updatePoint":{"line":144,"column":61,"index":4909},"line":144,"code":"        it('should copy the source file, renaming it to index', function(next) {\n            var resolver = create(path.join(testPackage, 'foo'));\n\n            resolver\n                .resolve()\n                .then(function(dir) {\n                    expect(fs.existsSync(path.join(dir, 'index'))).to.be(true);\n                    expect(fs.existsSync(path.join(dir, 'foo'))).to.be(false);\n                    expect(fs.existsSync(path.join(dir, 'bar'))).to.be(false);\n                })\n                .then(function() {\n                    // Test with extension\n                    var resolver = create(path.join(testPackage, 'README.md'));\n                    return resolver.resolve();\n                })\n                .then(function(dir) {\n                    expect(fs.existsSync(path.join(dir, 'index.md'))).to.be(\n                        true\n                    );\n                    expect(fs.existsSync(path.join(dir, 'README.md'))).to.be(\n                        false\n                    );\n\n                    return assertMain(dir, 'index.md').then(\n                        next.bind(next, null)\n                    );\n                })\n                .done();\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should rename to index if source is a folder with just one file in it","suites":["FsResolver",".resolve"],"updatePoint":{"line":174,"column":81,"index":6130},"line":174,"code":"        it('should rename to index if source is a folder with just one file in it', function(next) {\n            var resolver;\n\n            tempSource = path.resolve(__dirname, '../../tmp/tmp');\n\n            mkdirp.sync(tempSource);\n            resolver = create(tempSource);\n\n            copy.copyFile(\n                path.join(testPackage, 'foo'),\n                path.join(tempSource, 'foo')\n            )\n                .then(resolver.resolve.bind(resolver))\n                .then(function(dir) {\n                    expect(fs.existsSync(path.join(dir, 'index'))).to.be(true);\n                    expect(fs.existsSync(path.join(dir, 'foo'))).to.be(false);\n\n                    return assertMain(dir, 'index').then(next.bind(next, null));\n                })\n                .done();\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should not rename to index if source is a folder with just bower.json/component.json file in it","suites":["FsResolver",".resolve"],"updatePoint":{"line":196,"column":107,"index":6957},"line":196,"code":"        it('should not rename to index if source is a folder with just bower.json/component.json file in it', function(next) {\n            var resolver;\n\n            tempSource = path.resolve(__dirname, '../../tmp/tmp');\n\n            mkdirp.sync(tempSource);\n            resolver = create(tempSource);\n\n            copy.copyFile(\n                path.join(testPackage, 'bower.json'),\n                path.join(tempSource, 'bower.json')\n            )\n                .then(resolver.resolve.bind(resolver))\n                .then(function(dir) {\n                    expect(fs.existsSync(path.join(dir, 'bower.json'))).to.be(\n                        true\n                    );\n\n                    rimraf.sync(tempSource);\n                    mkdirp.sync(tempSource);\n\n                    resolver = create(tempSource);\n                })\n                .then(\n                    copy.copyFile.bind(\n                        copy,\n                        path.join(testPackage, 'bower.json'),\n                        path.join(tempSource, 'component.json')\n                    )\n                )\n                .then(function() {\n                    return resolver.resolve();\n                })\n                .then(function(dir) {\n                    expect(\n                        fs.existsSync(path.join(dir, 'component.json'))\n                    ).to.be(true);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should copy the source directory permissions","suites":["FsResolver",".resolve"],"updatePoint":{"line":238,"column":56,"index":8360},"line":238,"code":"        it('should copy the source directory permissions', function(next) {\n            var mode0777;\n            var resolver;\n\n            tempSource = path.resolve(__dirname, '../../assets/package-a-copy');\n            resolver = create(tempSource);\n\n            copy.copyDir(testPackage, tempSource)\n                .then(function() {\n                    // Change tempSource dir to 0777\n                    fs.chmodSync(tempSource, 0777);\n                    // Get the mode to a variable\n                    mode0777 = fs.statSync(tempSource).mode;\n                })\n                .then(resolver.resolve.bind(resolver))\n                .then(function(dir) {\n                    // Check if temporary dir is 0777 instead of default 0777 & ~process.umask()\n                    var stat = fs.statSync(dir);\n                    expect(stat.mode).to.equal(mode0777);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should copy the source file permissions","suites":["FsResolver",".resolve"],"updatePoint":{"line":262,"column":51,"index":9311},"line":262,"code":"        it('should copy the source file permissions', function(next) {\n            var mode0777;\n            var resolver;\n\n            tempSource = path.resolve(__dirname, '../../tmp/temp-source');\n            resolver = create(tempSource);\n\n            copy.copyFile(path.join(testPackage, 'foo'), tempSource)\n                .then(function() {\n                    // Change tempSource dir to 0777\n                    fs.chmodSync(tempSource, 0777);\n                    // Get the mode to a variable\n                    mode0777 = fs.statSync(tempSource).mode;\n                })\n                .then(resolver.resolve.bind(resolver))\n                .then(function(dir) {\n                    // Check if file is 0777\n                    var stat = fs.statSync(path.join(dir, 'index'));\n                    expect(stat.mode).to.equal(mode0777);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should not copy ignored paths (to speed up copying)","suites":["FsResolver",".resolve"],"updatePoint":{"line":286,"column":63,"index":10255},"line":286,"code":"        it('should not copy ignored paths (to speed up copying)', function(next) {\n            var resolver = create(testPackage);\n\n            // Override the _applyPkgMeta function to prevent it from deleting ignored files\n            resolver._applyPkgMeta = function() {\n                return Q.resolve();\n            };\n\n            resolver\n                .resolve()\n                .then(function(dir) {\n                    expect(fs.existsSync(path.join(dir, 'foo'))).to.be(true);\n                    expect(fs.existsSync(path.join(dir, 'test'))).to.be(false);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should extract if source is an archive","suites":["FsResolver",".resolve"],"updatePoint":{"line":304,"column":50,"index":10898},"line":304,"code":"        it('should extract if source is an archive', function(next) {\n            var resolver = create(\n                path.resolve(__dirname, '../../assets/package-zip.zip')\n            );\n\n            resolver\n                .resolve()\n                .then(function(dir) {\n                    expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n                    expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n                    expect(\n                        fs.existsSync(path.join(dir, 'package-zip.zip'))\n                    ).to.be(false);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should copy extracted folder contents if archive contains only a folder inside","suites":["FsResolver",".resolve"],"updatePoint":{"line":322,"column":90,"index":11601},"line":322,"code":"        it('should copy extracted folder contents if archive contains only a folder inside', function(next) {\n            var resolver = create(\n                path.resolve(__dirname, '../../assets/package-zip-folder.zip')\n            );\n\n            resolver\n                .resolve()\n                .then(function(dir) {\n                    expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n                    expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n                    expect(fs.existsSync(path.join(dir, 'package-zip'))).to.be(\n                        false\n                    );\n                    expect(\n                        fs.existsSync(path.join(dir, 'package-zip-folder'))\n                    ).to.be(false);\n                    expect(\n                        fs.existsSync(path.join(dir, 'package-zip-folder.zip'))\n                    ).to.be(false);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should extract if source is an archive and rename to index if it's only one file inside","suites":["FsResolver",".resolve"],"updatePoint":{"line":346,"column":99,"index":12600},"line":346,"code":"        it(\"should extract if source is an archive and rename to index if it's only one file inside\", function(next) {\n            var resolver = create(\n                path.resolve(\n                    __dirname,\n                    '../../assets/package-zip-single-file.zip'\n                )\n            );\n\n            resolver\n                .resolve()\n                .then(function(dir) {\n                    expect(fs.existsSync(path.join(dir, 'index.js'))).to.be(\n                        true\n                    );\n                    expect(fs.existsSync(path.join(dir, 'package-zip'))).to.be(\n                        false\n                    );\n                    expect(\n                        fs.existsSync(path.join(dir, 'package-zip-single-file'))\n                    ).to.be(false);\n                    expect(\n                        fs.existsSync(\n                            path.join(dir, 'package-zip-single-file.zip')\n                        )\n                    ).to.be(false);\n\n                    return assertMain(dir, 'index.js').then(\n                        next.bind(next, null)\n                    );\n                })\n                .done();\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should rename single file from a single folder to index when source is an archive","suites":["FsResolver",".resolve"],"updatePoint":{"line":379,"column":93,"index":13790},"line":379,"code":"        it('should rename single file from a single folder to index when source is an archive', function(next) {\n            var resolver = create(\n                path.resolve(\n                    __dirname,\n                    '../../assets/package-zip-folder-single-file.zip'\n                )\n            );\n\n            resolver\n                .resolve()\n                .then(function(dir) {\n                    expect(fs.existsSync(path.join(dir, 'index.js'))).to.be(\n                        true\n                    );\n                    expect(fs.existsSync(path.join(dir, 'package-zip'))).to.be(\n                        false\n                    );\n                    expect(\n                        fs.existsSync(\n                            path.join(dir, 'package-zip-folder-single-file')\n                        )\n                    ).to.be(false);\n                    expect(\n                        fs.existsSync(\n                            path.join(dir, 'package-zip-folder-single-file.zip')\n                        )\n                    ).to.be(false);\n\n                    return assertMain(dir, 'index.js').then(\n                        next.bind(next, null)\n                    );\n                })\n                .done();\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should return false","suites":["FsResolver","#isTargetable"],"updatePoint":{"line":416,"column":31,"index":15044},"line":416,"code":"        it('should return false', function() {\n            expect(FsResolver.isTargetable()).to.be(false);\n        });","file":"core/resolvers/fsResolver.js","skipped":false,"dir":"test"},{"name":"should guess the name from the path","suites":["GitFsResolver",".constructor"],"updatePoint":{"line":45,"column":47,"index":1277},"line":45,"code":"        it('should guess the name from the path', function() {\n            var resolver = create(testPackage);\n\n            expect(resolver.getName()).to.equal('package-a');\n        });","file":"core/resolvers/gitFsResolver.js","skipped":false,"dir":"test"},{"name":"should not guess the name from the path if the name was specified","suites":["GitFsResolver",".constructor"],"updatePoint":{"line":51,"column":77,"index":1494},"line":51,"code":"        it('should not guess the name from the path if the name was specified', function() {\n            var resolver = create({ source: testPackage, name: 'foo' });\n\n            expect(resolver.getName()).to.equal('foo');\n        });","file":"core/resolvers/gitFsResolver.js","skipped":false,"dir":"test"},{"name":"should make paths absolute and normalized","suites":["GitFsResolver",".constructor"],"updatePoint":{"line":57,"column":53,"index":1706},"line":57,"code":"        it('should make paths absolute and normalized', function() {\n            var resolver;\n\n            resolver = create(path.relative(process.cwd(), testPackage));\n            expect(resolver.getSource()).to.equal(testPackage);\n\n            resolver = create(testPackage + '/something/..');\n            expect(resolver.getSource()).to.equal(testPackage);\n        });","file":"core/resolvers/gitFsResolver.js","skipped":false,"dir":"test"},{"name":"should use config.cwd for resolving relative paths","suites":["GitFsResolver",".constructor"],"line":67,"code":"        it.skip('should use config.cwd for resolving relative paths');","file":"core/resolvers/gitFsResolver.js","skipped":true,"dir":"test"},{"name":"should checkout correctly if resolution is a branch","suites":["GitFsResolver",".resolve"],"updatePoint":{"line":71,"column":63,"index":2208},"line":71,"code":"        it('should checkout correctly if resolution is a branch', function(next) {\n            var resolver = create({\n                source: testPackage,\n                target: 'some-branch'\n            });\n\n            resolver\n                .resolve()\n                .then(function(dir) {\n                    expect(dir).to.be.a('string');\n\n                    var files = fs.readdirSync(dir);\n                    var fooContents;\n\n                    expect(files).to.contain('foo');\n                    expect(files).to.contain('baz');\n                    expect(files).to.contain('baz');\n\n                    fooContents = fs\n                        .readFileSync(path.join(dir, 'foo'))\n                        .toString();\n                    expect(fooContents).to.equal('foo foo');\n\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitFsResolver.js","skipped":false,"dir":"test"},{"name":"should checkout correctly if resolution is a tag","suites":["GitFsResolver",".resolve"],"updatePoint":{"line":99,"column":60,"index":3087},"line":99,"code":"        it('should checkout correctly if resolution is a tag', function(next) {\n            var resolver = create({ source: testPackage, target: '~0.0.1' });\n\n            resolver\n                .resolve()\n                .then(function(dir) {\n                    expect(dir).to.be.a('string');\n\n                    var files = fs.readdirSync(dir);\n\n                    expect(files).to.contain('foo');\n                    expect(files).to.contain('bar');\n                    expect(files).to.not.contain('baz');\n\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitFsResolver.js","skipped":false,"dir":"test"},{"name":"should checkout correctly if resolution is a commit","suites":["GitFsResolver",".resolve"],"updatePoint":{"line":118,"column":63,"index":3690},"line":118,"code":"        it('should checkout correctly if resolution is a commit', function(next) {\n            var resolver = create({\n                source: testPackage,\n                target: 'bdf51ece75e20cf404e49286727b7e92d33e9ad0'\n            });\n\n            resolver\n                .resolve()\n                .then(function(dir) {\n                    expect(dir).to.be.a('string');\n\n                    var files = fs.readdirSync(dir);\n\n                    expect(files).to.not.contain('foo');\n                    expect(files).to.not.contain('bar');\n                    expect(files).to.not.contain('baz');\n                    expect(files).to.contain('.master');\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitFsResolver.js","skipped":false,"dir":"test"},{"name":"should remove any untracked files and directories","suites":["GitFsResolver",".resolve"],"updatePoint":{"line":140,"column":61,"index":4433},"line":140,"code":"        it('should remove any untracked files and directories', function(next) {\n            var resolver = create({\n                source: testPackage,\n                target: 'bdf51ece75e20cf404e49286727b7e92d33e9ad0'\n            });\n            var file = path.join(testPackage, 'new-file');\n            var dir = path.join(testPackage, 'new-dir');\n\n            fs.writeFileSync(file, 'foo');\n            fs.mkdirSync(dir);\n\n            function cleanup(err) {\n                fs.unlinkSync(file);\n                fs.rmdirSync(dir);\n\n                if (err) {\n                    throw err;\n                }\n            }\n\n            resolver\n                .resolve()\n                .then(function(dir) {\n                    expect(dir).to.be.a('string');\n\n                    var files = fs.readdirSync(dir);\n\n                    expect(files).to.not.contain('new-file');\n                    expect(files).to.not.contain('new-dir');\n\n                    cleanup();\n                    next();\n                })\n                .fail(cleanup)\n                .done();\n        });","file":"core/resolvers/gitFsResolver.js","skipped":false,"dir":"test"},{"name":"should leave the original repository untouched","suites":["GitFsResolver",".resolve"],"updatePoint":{"line":177,"column":58,"index":5522},"line":177,"code":"        it('should leave the original repository untouched', function(next) {\n            // Switch to master\n            cmd('git', ['checkout', 'master'], { cwd: testPackage })\n                // Resolve to some-branch\n                .then(function() {\n                    var resolver = create({\n                        source: testPackage,\n                        target: 'some-branch'\n                    });\n                    return resolver.resolve();\n                })\n                // Check if the original branch is still the master one\n                .then(function() {\n                    return cmd('git', ['branch', '--color=never'], {\n                        cwd: testPackage\n                    }).spread(function(stdout) {\n                        expect(stdout).to.contain('* master');\n                    });\n                })\n                // Check if git status is empty\n                .then(function() {\n                    return cmd('git', ['status', '--porcelain'], {\n                        cwd: testPackage\n                    }).spread(function(stdout) {\n                        stdout = stdout.trim();\n                        expect(stdout).to.equal('');\n                        next();\n                    });\n                })\n                .done();\n        });","file":"core/resolvers/gitFsResolver.js","skipped":false,"dir":"test"},{"name":"should copy source folder permissions","suites":["GitFsResolver",".resolve"],"updatePoint":{"line":209,"column":49,"index":6820},"line":209,"code":"        it('should copy source folder permissions', function(next) {\n            var mode0777;\n            var resolver;\n\n            tempSource = path.resolve(__dirname, '../../assets/package-a-copy');\n            resolver = create({ source: tempSource, target: 'some-branch' });\n\n            copy.copyDir(testPackage, tempSource)\n                .then(function() {\n                    // Change tempSource dir to 0777\n                    fs.chmodSync(tempSource, 0777);\n                    // Get the mode to a variable\n                    mode0777 = fs.statSync(tempSource).mode;\n                })\n                .then(resolver.resolve.bind(resolver))\n                .then(function(dir) {\n                    // Check if temporary dir is 0777 instead of default 0777 & ~process.umask()\n                    var stat = fs.statSync(dir);\n                    expect(stat.mode).to.equal(mode0777);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitFsResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the references of the local repository","suites":["GitFsResolver","#refs"],"updatePoint":{"line":237,"column":68,"index":7913},"line":237,"code":"        it('should resolve to the references of the local repository', function(next) {\n            GitFsResolver.refs(testPackage)\n                .then(function(refs) {\n                    // Remove master and test only for the first 7 refs\n                    refs = refs.slice(1, 8);\n\n                    expect(refs).to.eql([\n                        'e4655d250f2a3f64ef2d712f25dafa60652bb93e refs/heads/some-branch',\n                        '0a7daf646d4fd743b6ef701d63bdbe20eee422de refs/tags/0.0.1',\n                        '0791865e6f4b88f69fc35167a09a6f0626627765 refs/tags/0.0.2',\n                        '2af02ac6ddeaac1c2f4bead8d6287ce54269c039 refs/tags/0.1.0',\n                        '6ab264f1ba5bafa80fb0198183493e4d5b20804a refs/tags/0.1.1',\n                        'c91ed7facbb695510e3e1ab86bac8b5ac159f4f3 refs/tags/0.2.0',\n                        '8556e55c65722a351ca5fdce4f1ebe83ec3f2365 refs/tags/0.2.1'\n                    ]);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitFsResolver.js","skipped":false,"dir":"test"},{"name":"should cache the results","suites":["GitFsResolver","#refs"],"updatePoint":{"line":257,"column":36,"index":8915},"line":257,"code":"        it('should cache the results', function(next) {\n            GitFsResolver.refs(testPackage)\n                .then(function() {\n                    // Manipulate the cache and check if it resolves for the cached ones\n                    GitFsResolver._cache.refs.get(testPackage).splice(0, 1);\n\n                    // Check if it resolver to the same array\n                    return GitFsResolver.refs(testPackage);\n                })\n                .then(function(refs) {\n                    // Test only for the first 6 refs\n                    refs = refs.slice(0, 7);\n\n                    expect(refs).to.eql([\n                        'e4655d250f2a3f64ef2d712f25dafa60652bb93e refs/heads/some-branch',\n                        '0a7daf646d4fd743b6ef701d63bdbe20eee422de refs/tags/0.0.1',\n                        '0791865e6f4b88f69fc35167a09a6f0626627765 refs/tags/0.0.2',\n                        '2af02ac6ddeaac1c2f4bead8d6287ce54269c039 refs/tags/0.1.0',\n                        '6ab264f1ba5bafa80fb0198183493e4d5b20804a refs/tags/0.1.1',\n                        'c91ed7facbb695510e3e1ab86bac8b5ac159f4f3 refs/tags/0.2.0',\n                        '8556e55c65722a351ca5fdce4f1ebe83ec3f2365 refs/tags/0.2.1'\n                    ]);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitFsResolver.js","skipped":false,"dir":"test"},{"name":"should throw an error on invalid GitHub URLs","suites":["GitHub",".constructor"],"line":40,"code":"    it.skip('should throw an error on invalid GitHub URLs');","file":"core/resolvers/gitHubResolver.js","skipped":true,"dir":"test"},{"name":"should ensure .git in the source","suites":["GitHub",".constructor"],"updatePoint":{"line":41,"column":40,"index":1029},"line":41,"code":"    it('should ensure .git in the source', function () {\n      var resolver;\n      resolver = create('git://github.com/twitter/bower');\n      expect(resolver.getSource()).to.equal('git://github.com/twitter/bower.git');\n      resolver = create('git://github.com/twitter/bower.git');\n      expect(resolver.getSource()).to.equal('git://github.com/twitter/bower.git');\n      resolver = create('git://github.com/twitter/bower.git/');\n      expect(resolver.getSource()).to.equal('git://github.com/twitter/bower.git');\n    });","file":"core/resolvers/gitHubResolver.js","skipped":false,"dir":"test"},{"name":"should download and extract the .tar.gz archive from GitHub.com","suites":["GitHub",".resolve"],"updatePoint":{"line":52,"column":71,"index":1623},"line":52,"code":"    it('should download and extract the .tar.gz archive from GitHub.com', function (next) {\n      var resolver;\n      nock('https://github.com').get('/IndigoUnited/js-events-emitter/archive/0.1.0.tar.gz').replyWithFile(200, path.resolve(__dirname, '../../assets/package-tar.tar.gz'));\n      resolver = create({\n        source: 'git://github.com/IndigoUnited/js-events-emitter.git',\n        target: '0.1.0'\n      });\n      resolver.resolve().then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, '.bower.json'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-tar.tar.gz'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-tar.tar'))).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolvers/gitHubResolver.js","skipped":false,"dir":"test"},{"name":"should retry using the GitRemoteResolver mechanism if download failed","suites":["GitHub",".resolve"],"updatePoint":{"line":68,"column":77,"index":2506},"line":68,"code":"    it('should retry using the GitRemoteResolver mechanism if download failed', function (next) {\n      this.timeout(20000);\n      var resolver;\n      var retried;\n      nock('https://github.com').get('/IndigoUnited/js-events-emitter/archive/0.1.0.tar.gz').reply(200, 'this is not a valid tar');\n      logger.on('log', function (entry) {\n        if (entry.level === 'warn' && entry.id === 'retry') {\n          retried = true;\n        }\n      });\n      resolver = create({\n        source: 'git://github.com/IndigoUnited/js-events-emitter.git',\n        target: '0.1.0'\n      }); // Monkey patch source to file://\n\n      resolver._source = 'file://' + testPackage;\n      resolver.resolve().then(function (dir) {\n        expect(retried).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'foo'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'baz'))).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/gitHubResolver.js","skipped":false,"dir":"test"},{"name":"should retry using the GitRemoteResolver mechanism if extraction failed","suites":["GitHub",".resolve"],"updatePoint":{"line":92,"column":79,"index":3493},"line":92,"code":"    it('should retry using the GitRemoteResolver mechanism if extraction failed', function (next) {\n      this.timeout(20000);\n      var resolver;\n      var retried;\n      nock('https://github.com').get('/IndigoUnited/js-events-emitter/archive/0.1.0.tar.gz').reply(500);\n      logger.on('log', function (entry) {\n        if (entry.level === 'warn' && entry.id === 'retry') {\n          retried = true;\n        }\n      });\n      resolver = create({\n        source: 'git://github.com/IndigoUnited/js-events-emitter.git',\n        target: '0.1.0'\n      }); // Monkey patch source to file://\n\n      resolver._source = 'file://' + testPackage;\n      resolver.resolve().then(function (dir) {\n        expect(retried).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'foo'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'baz'))).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/gitHubResolver.js","skipped":false,"dir":"test"},{"name":"should fallback to the GitRemoteResolver mechanism if resolution is not a tag","suites":["GitHub",".resolve"],"updatePoint":{"line":116,"column":85,"index":4459},"line":116,"code":"    it('should fallback to the GitRemoteResolver mechanism if resolution is not a tag', function (next) {\n      var resolver = create({\n        source: 'git://github.com/foo/bar.git',\n        target: '2af02ac6ddeaac1c2f4bead8d6287ce54269c039'\n      });\n      var originalCheckout = GitRemoteResolver.prototype._checkout;\n      var called;\n\n      GitRemoteResolver.prototype._checkout = function () {\n        called = true;\n        return originalCheckout.apply(this, arguments);\n      }; // Monkey patch source to file://\n\n\n      resolver._source = 'file://' + testPackage;\n      resolver.resolve().then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'baz'))).to.be(true);\n        expect(called).to.be(true);\n        next();\n      }).fin(function () {\n        GitRemoteResolver.prototype._checkout = originalCheckout;\n      }).done();\n    });","file":"core/resolvers/gitHubResolver.js","skipped":false,"dir":"test"},{"name":"it should error out if the status code is not within 200-299","suites":["GitHub",".resolve"],"line":141,"code":"    it.skip('it should error out if the status code is not within 200-299');","file":"core/resolvers/gitHubResolver.js","skipped":true,"dir":"test"},{"name":"should report progress if it takes too long to download","suites":["GitHub",".resolve"],"line":142,"code":"    it.skip('should report progress if it takes too long to download');","file":"core/resolvers/gitHubResolver.js","skipped":true,"dir":"test"},{"name":"should guess the homepage if not already set","suites":["GitHub","._savePkgMeta"],"line":145,"code":"    it.skip('should guess the homepage if not already set');","file":"core/resolvers/gitHubResolver.js","skipped":true,"dir":"test"},{"name":"should guess the name from the path","suites":["GitRemoteResolver",".constructor"],"updatePoint":{"line":46,"column":43,"index":1071},"line":46,"code":"    it('should guess the name from the path', function () {\n      var resolver;\n      resolver = create('file://' + testPackage);\n      expect(resolver.getName()).to.equal('package-a');\n      resolver = create('git://github.com/twitter/bower.git');\n      expect(resolver.getName()).to.equal('bower');\n      resolver = create('git://github.com/twitter/bower');\n      expect(resolver.getName()).to.equal('bower');\n      resolver = create('git://github.com');\n      expect(resolver.getName()).to.equal('github.com');\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should checkout correctly if resolution is a branch","suites":["GitRemoteResolver",".resolve"],"updatePoint":{"line":59,"column":59,"index":1652},"line":59,"code":"    it('should checkout correctly if resolution is a branch', function (next) {\n      var resolver = create({\n        source: 'file://' + testPackage,\n        target: 'some-branch'\n      });\n      resolver.resolve().then(function (dir) {\n        expect(dir).to.be.a('string');\n        var files = fs.readdirSync(dir);\n        var fooContents;\n        expect(files).to.contain('foo');\n        expect(files).to.contain('baz');\n        expect(files).to.contain('baz');\n        fooContents = fs.readFileSync(path.join(dir, 'foo')).toString();\n        expect(fooContents).to.equal('foo foo');\n        next();\n      }).done();\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should checkout correctly if resolution is a tag","suites":["GitRemoteResolver",".resolve"],"updatePoint":{"line":76,"column":56,"index":2278},"line":76,"code":"    it('should checkout correctly if resolution is a tag', function (next) {\n      var resolver = create({\n        source: 'file://' + testPackage,\n        target: '~0.0.1'\n      });\n      resolver.resolve().then(function (dir) {\n        expect(dir).to.be.a('string');\n        var files = fs.readdirSync(dir);\n        expect(files).to.contain('foo');\n        expect(files).to.contain('bar');\n        expect(files).to.not.contain('baz');\n        next();\n      }).done();\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should checkout correctly if resolution is a commit","suites":["GitRemoteResolver",".resolve"],"updatePoint":{"line":90,"column":59,"index":2759},"line":90,"code":"    it('should checkout correctly if resolution is a commit', function (next) {\n      var resolver = create({\n        source: 'file://' + testPackage,\n        target: 'bdf51ece75e20cf404e49286727b7e92d33e9ad0'\n      });\n      resolver.resolve().then(function (dir) {\n        expect(dir).to.be.a('string');\n        var files = fs.readdirSync(dir);\n        expect(files).to.not.contain('foo');\n        expect(files).to.not.contain('bar');\n        expect(files).to.not.contain('baz');\n        expect(files).to.contain('.master');\n        next();\n      }).done();\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should add --depth=1 when shallow cloning is supported","suites":["GitRemoteResolver",".resolve","shallow cloning"],"updatePoint":{"line":114,"column":64,"index":3649},"line":114,"code":"      it('should add --depth=1 when shallow cloning is supported', function (next) {\n        var testSource = 'http://foo/bar.git';\n        var MyGitRemoteResolver = gitRemoteResolverFactory(function (cmd, args) {\n          // The first git call fetches the tags for the provided source\n          if (mout.array.equals(args, ['ls-remote', '--tags', '--heads', testSource])) {\n            // Return list of commits, including one tag.\n            // The tag will be used for the clone call.\n            return Q.all([multiline(function () {\n              /*\n              e4655d250f2a3f64ef2d712f25dafa60652bb93e refs/heads/some-branch\n              0a7daf646d4fd743b6ef701d63bdbe20eee422de refs/tags/0.0.1\n              */\n            })]);\n          } else if (args[0] === 'clone') {\n            // Verify parameters of the clone call.\n            // In this case, the arguments need to contain \"--depth 1\".\n            expect(args).to.eql(['clone', 'http://foo/bar.git', '-b', '0.0.1', '--progress', '.', '--depth', 1]); // In this case, only the stderr content is evaluated. Everything's fine as long as it\n            // does not contain any error description.\n\n            return Q.all(['stdout', 'stderr']);\n          }\n        }); // Mock the call, return true for this test.\n\n        MyGitRemoteResolver.prototype._supportsShallowCloning = function () {\n          return Q.resolve(true);\n        };\n\n        var resolver = new MyGitRemoteResolver({\n          source: testSource\n        }, defaultConfig(), logger);\n        resolver.resolve().then(function () {\n          next();\n        });\n      });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should not add --depth=1 when shallow cloning is not supported","suites":["GitRemoteResolver",".resolve","shallow cloning"],"updatePoint":{"line":148,"column":72,"index":5266},"line":148,"code":"      it('should not add --depth=1 when shallow cloning is not supported', function (next) {\n        var testSource = 'http://foo/bar.git';\n        var MyGitRemoteResolver = gitRemoteResolverFactory(function (cmd, args) {\n          // The first git call fetches the tags for the provided source\n          if (mout.array.equals(args, ['ls-remote', '--tags', '--heads', testSource])) {\n            // Return list of commits, including one tag.\n            // The tag will be used for the clone call.\n            return Q.all([multiline(function () {\n              /*\n              e4655d250f2a3f64ef2d712f25dafa60652bb93e refs/heads/some-branch\n              0a7daf646d4fd743b6ef701d63bdbe20eee422de refs/tags/0.0.1\n              */\n            })]);\n          } else if (args[0] === 'clone') {\n            // Verify parameters of the clone call.\n            // In this case, the arguments should not contain \"--depth 1\".\n            expect(args).to.eql(['clone', 'http://foo/bar.git', '-b', '0.0.1', '--progress', '.']); // In this case, only the stderr content is evaluated. Everything's fine as long as it\n            // does not contain any error description.\n\n            return Q.all(['stdout', 'stderr']);\n          }\n        }); // Mock the call, return false for this test.\n\n        MyGitRemoteResolver.prototype._supportsShallowCloning = function () {\n          return Q.resolve(false);\n        };\n\n        var resolver = new MyGitRemoteResolver({\n          source: testSource\n        }, defaultConfig(), logger);\n        resolver.resolve().then(function () {\n          next();\n        });\n      });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should handle gracefully servers that do not support --depth=1","suites":["GitRemoteResolver",".resolve","shallow cloning"],"line":183,"code":"    it.skip('should handle gracefully servers that do not support --depth=1');","file":"core/resolvers/gitRemoteResolver.js","skipped":true,"dir":"test"},{"name":"should report progress when it takes too long to clone","suites":["GitRemoteResolver",".resolve","shallow cloning"],"line":184,"code":"    it.skip('should report progress when it takes too long to clone');","file":"core/resolvers/gitRemoteResolver.js","skipped":true,"dir":"test"},{"name":"should resolve to the references of the remote repository","suites":["GitRemoteResolver","#refs"],"updatePoint":{"line":188,"column":65,"index":7107},"line":188,"code":"    it('should resolve to the references of the remote repository', function (next) {\n      GitRemoteResolver.refs('file://' + testPackage).then(function (refs) {\n        // Remove master and test only for the first 7 refs\n        refs = refs.slice(1, 8);\n        expect(refs).to.eql(['e4655d250f2a3f64ef2d712f25dafa60652bb93e refs/heads/some-branch', '0a7daf646d4fd743b6ef701d63bdbe20eee422de refs/tags/0.0.1', '0791865e6f4b88f69fc35167a09a6f0626627765 refs/tags/0.0.2', '2af02ac6ddeaac1c2f4bead8d6287ce54269c039 refs/tags/0.1.0', '6ab264f1ba5bafa80fb0198183493e4d5b20804a refs/tags/0.1.1', 'c91ed7facbb695510e3e1ab86bac8b5ac159f4f3 refs/tags/0.2.0', '8556e55c65722a351ca5fdce4f1ebe83ec3f2365 refs/tags/0.2.1']);\n        next();\n      }).done();\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should cache the results","suites":["GitRemoteResolver","#refs"],"updatePoint":{"line":196,"column":32,"index":7829},"line":196,"code":"    it('should cache the results', function (next) {\n      var source = 'file://' + testPackage;\n      GitRemoteResolver.refs(source).then(function () {\n        // Manipulate the cache and check if it resolves for the cached ones\n        GitRemoteResolver._cache.refs.get(source).splice(0, 1); // Check if it resolver to the same array\n\n\n        return GitRemoteResolver.refs('file://' + testPackage);\n      }).then(function (refs) {\n        // Test only for the first 7 refs\n        refs = refs.slice(0, 7);\n        expect(refs).to.eql(['e4655d250f2a3f64ef2d712f25dafa60652bb93e refs/heads/some-branch', '0a7daf646d4fd743b6ef701d63bdbe20eee422de refs/tags/0.0.1', '0791865e6f4b88f69fc35167a09a6f0626627765 refs/tags/0.0.2', '2af02ac6ddeaac1c2f4bead8d6287ce54269c039 refs/tags/0.1.0', '6ab264f1ba5bafa80fb0198183493e4d5b20804a refs/tags/0.1.1', 'c91ed7facbb695510e3e1ab86bac8b5ac159f4f3 refs/tags/0.2.0', '8556e55c65722a351ca5fdce4f1ebe83ec3f2365 refs/tags/0.2.1']);\n        next();\n      }).done();\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should call ls-remote when using http protocol","suites":["GitRemoteResolver","#_supportsShallowCloning"],"updatePoint":{"line":231,"column":54,"index":9489},"line":231,"code":"    it('should call ls-remote when using http protocol', function (next) {\n      var testSource = 'http://foo/bar.git';\n      var MyGitRemoteResolver = gitRemoteResolverFactory(createCmdHandlerFn(testSource, multiline(function () {\n        /*\n        foo: bar\n        Content-Type: none\n        1234: 5678\n        */\n      })));\n      var resolver = new MyGitRemoteResolver({\n        source: testSource\n      }, defaultConfig({\n        shallowCloneHosts: ['foo']\n      }), logger);\n\n      resolver._shallowClone().then(function (shallowCloningSupported) {\n        expect(shallowCloningSupported).to.be(false);\n        next();\n      });\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should call ls-remote when using https protocol","suites":["GitRemoteResolver","#_supportsShallowCloning"],"updatePoint":{"line":251,"column":55,"index":10134},"line":251,"code":"    it('should call ls-remote when using https protocol', function (next) {\n      var testSource = 'https://foo/bar.git';\n      var MyGitRemoteResolver = gitRemoteResolverFactory(createCmdHandlerFn(testSource, multiline(function () {\n        /*\n        foo: bar\n        Content-Type: none\n        1234: 5678\n        */\n      })));\n      var resolver = new MyGitRemoteResolver({\n        source: testSource\n      }, defaultConfig({\n        shallowCloneHosts: ['foo']\n      }), logger);\n\n      resolver._shallowClone().then(function (shallowCloningSupported) {\n        expect(shallowCloningSupported).to.be(false);\n        next();\n      });\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should evaluate to false when the URL can not be parsed","suites":["GitRemoteResolver","#_supportsShallowCloning"],"updatePoint":{"line":271,"column":63,"index":10788},"line":271,"code":"    it('should evaluate to false when the URL can not be parsed', function (next) {\n      var testSource = 'grmblfjx///:::.git';\n      var MyGitRemoteResolver = gitRemoteResolverFactory(createCmdHandlerFn(testSource, multiline(function () {\n        /*\n        foo: bar\n        Content-Type: none\n        1234: 5678\n        */\n      })));\n      var resolver = new MyGitRemoteResolver({\n        source: testSource\n      }, defaultConfig(), logger);\n\n      resolver._shallowClone().then(function (shallowCloningSupported) {\n        expect(shallowCloningSupported).to.be(false);\n        next();\n      }, function (err) {\n        next(err);\n      });\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should evaluate to true when the smart content type is returned","suites":["GitRemoteResolver","#_supportsShallowCloning"],"updatePoint":{"line":291,"column":71,"index":11450},"line":291,"code":"    it('should evaluate to true when the smart content type is returned', function (next) {\n      var testSource = 'https://foo/bar.git';\n      var MyGitRemoteResolver = gitRemoteResolverFactory(createCmdHandlerFn(testSource, multiline(function () {\n        /*\n        foo: bar\n        Content-Type: application/x-git-upload-pack-advertisement\n        1234: 5678\n        */\n      })));\n      var resolver = new MyGitRemoteResolver({\n        source: testSource\n      }, defaultConfig({\n        shallowCloneHosts: ['foo']\n      }), logger);\n\n      resolver._shallowClone().then(function (shallowCloningSupported) {\n        expect(shallowCloningSupported).to.be(true);\n        next();\n      });\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should evaluate to true when source is a ssh protocol and host is defined to support shallow cloning","suites":["GitRemoteResolver","#_supportsShallowCloning"],"updatePoint":{"line":311,"column":108,"index":12187},"line":311,"code":"    it('should evaluate to true when source is a ssh protocol and host is defined to support shallow cloning', function (next) {\n      var testSource = 'git@foo:bar.git';\n      var MyGitRemoteResolver = gitRemoteResolverFactory(createCmdHandlerFn(testSource, multiline(function () {\n        /*\n        foo: bar\n        Content-Type: application/x-git-upload-pack-advertisement\n        1234: 5678\n        */\n      })));\n      var resolver = new MyGitRemoteResolver({\n        source: testSource\n      }, defaultConfig({\n        shallowCloneHosts: ['foo']\n      }), logger);\n\n      resolver._shallowClone().then(function (shallowCloningSupported) {\n        expect(shallowCloningSupported).to.be(true);\n        next();\n      });\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should cache hosts that support shallow cloning","suites":["GitRemoteResolver","#_supportsShallowCloning"],"updatePoint":{"line":331,"column":55,"index":12867},"line":331,"code":"    it('should cache hosts that support shallow cloning', function (next) {\n      var testSource = 'https://foo/bar.git';\n      var counter = 0;\n      var MyGitRemoteResolver = gitRemoteResolverFactory(function (cmd, args, options) {\n        counter++;\n\n        if (counter === 1) {\n          expect(cmd).to.be('git');\n          expect(args).to.eql(['ls-remote', '--heads', testSource]);\n          expect(options.env.GIT_CURL_VERBOSE).to.be('2');\n          return Q.all(['stdout', multiline(function () {\n            /*\n            foo: bar\n            Content-Type: application/x-git-upload-pack-advertisement\n            1234: 5678\n            */\n          })]);\n        } else {\n          return Q.reject(new Error('More calls than expected'));\n        }\n      });\n      var resolver = new MyGitRemoteResolver({\n        source: testSource\n      }, defaultConfig({\n        shallowCloneHosts: ['foo']\n      }), logger);\n\n      resolver._shallowClone().then(function (shallowCloningSupported) {\n        expect(shallowCloningSupported).to.be(true);\n        var resolver2 = new MyGitRemoteResolver({\n          source: testSource\n        }, defaultConfig({\n          shallowCloneHosts: ['foo']\n        }), logger);\n\n        resolver2._shallowClone().then(function (shallowCloningSupported) {\n          expect(shallowCloningSupported).to.be(true);\n          next();\n        }, function (err) {\n          next(err);\n        });\n      });\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should cache hosts that support shallow cloning across multiple repos","suites":["GitRemoteResolver","#_supportsShallowCloning"],"updatePoint":{"line":374,"column":77,"index":14330},"line":374,"code":"    it('should cache hosts that support shallow cloning across multiple repos', function (next) {\n      var testSource1 = 'https://foo/bar.git';\n      var testSource2 = 'https://foo/barbaz.git';\n      var counter = 0;\n      var MyGitRemoteResolver = gitRemoteResolverFactory(function (cmd, args, options) {\n        counter++;\n\n        if (counter === 1) {\n          expect(cmd).to.be('git');\n          expect(args).to.eql(['ls-remote', '--heads', testSource1]);\n          expect(options.env.GIT_CURL_VERBOSE).to.be('2');\n          return Q.all(['stdout', multiline(function () {\n            /*\n            foo: bar\n            Content-Type: application/x-git-upload-pack-advertisement\n            1234: 5678\n            */\n          })]);\n        } else {\n          return Q.reject(new Error('More calls than expected'));\n        }\n      });\n      var resolver = new MyGitRemoteResolver({\n        source: testSource1\n      }, defaultConfig({\n        shallowCloneHosts: ['foo']\n      }), logger);\n\n      resolver._shallowClone().then(function (shallowCloningSupported) {\n        expect(shallowCloningSupported).to.be(true);\n        var resolver2 = new MyGitRemoteResolver({\n          source: testSource2\n        }, defaultConfig({\n          shallowCloneHosts: ['foo']\n        }), logger);\n\n        resolver2._shallowClone().then(function (shallowCloningSupported) {\n          expect(shallowCloningSupported).to.be(true);\n          next();\n        }, function (err) {\n          next(err);\n        });\n      });\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should run separate checks for separate hosts ","suites":["GitRemoteResolver","#_supportsShallowCloning"],"updatePoint":{"line":418,"column":54,"index":15824},"line":418,"code":"    it('should run separate checks for separate hosts ', function (next) {\n      var testSource1 = 'https://foo/bar.git';\n      var testSource2 = 'https://foo.bar.baz/barbaz.git';\n      var counter = 0;\n      var MyGitRemoteResolver = gitRemoteResolverFactory(function (cmd, args, options) {\n        counter++;\n\n        if (counter === 1) {\n          expect(cmd).to.be('git');\n          expect(args).to.eql(['ls-remote', '--heads', testSource1]);\n          expect(options.env.GIT_CURL_VERBOSE).to.be('2');\n          return Q.all(['stdout', multiline(function () {\n            /*\n            foo: bar\n            Content-Type: application/x-git-upload-pack-advertisement\n            1234: 5678\n            */\n          })]);\n        } else {\n          expect(cmd).to.be('git');\n          expect(args).to.eql(['ls-remote', '--heads', testSource2]);\n          expect(options.env.GIT_CURL_VERBOSE).to.be('2');\n          return Q.all(['stdout', multiline(function () {\n            /*\n            foo: barbaz\n            Content-Type: application/x-git-upload-pack-advertisement\n            1234: 5678\n            */\n          })]);\n        }\n      });\n      var resolver = new MyGitRemoteResolver({\n        source: testSource1\n      }, defaultConfig({\n        shallowCloneHosts: ['foo', 'foo.bar.baz']\n      }), logger);\n\n      resolver._shallowClone().then(function (shallowCloningSupported) {\n        expect(shallowCloningSupported).to.be(true);\n        var resolver2 = new MyGitRemoteResolver({\n          source: testSource2\n        }, defaultConfig({\n          shallowCloneHosts: ['foo', 'foo.bar.baz']\n        }), logger);\n\n        resolver2._shallowClone().then(function (shallowCloningSupported) {\n          expect(shallowCloningSupported).to.be(true);\n          next();\n        }, function (err) {\n          next(err);\n        });\n      });\n    });","file":"core/resolvers/gitRemoteResolver.js","skipped":false,"dir":"test"},{"name":"should error out if git is not installed","suites":["GitResolver","misc"],"line":44,"code":"        it.skip('should error out if git is not installed');","file":"core/resolvers/gitResolver.js","skipped":true,"dir":"test"},{"name":"should setup git template dir to an empty folder","suites":["GitResolver","misc"],"line":45,"code":"        it.skip('should setup git template dir to an empty folder');","file":"core/resolvers/gitResolver.js","skipped":true,"dir":"test"},{"name":"should set process.env.GIT_SSL_NO_VERIFY when strictSSL is false","suites":["GitResolver","misc"],"updatePoint":{"line":46,"column":76,"index":1460},"line":46,"code":"        it('should set process.env.GIT_SSL_NO_VERIFY when strictSSL is false', function() {\n            var resolver;\n            var decEndpoint = { source: 'foo' };\n\n            expect(process.env).to.not.have.property('GIT_SSL_NO_VERIFY');\n\n            resolver = new GitResolver(decEndpoint, defaultConfig(), logger);\n            expect(process.env).to.not.have.property('GIT_SSL_NO_VERIFY');\n\n            resolver = new GitResolver(\n                decEndpoint,\n                defaultConfig({ strictSsl: false }),\n                logger\n            );\n            expect(process.env).to.have.property('GIT_SSL_NO_VERIFY', 'true');\n            delete process.env.GIT_SSL_NO_VERIFY;\n\n            // git only checks the existence of GIT_SSL_NO_VERIFY.\n            // git does NOT check whether is true of false.\n            // Hence not exporting GIT_SSL_NO_VERIFY is effectively equivalent to 'false'\n            resolver = new GitResolver(\n                decEndpoint,\n                defaultConfig({ strictSsl: true }),\n                logger\n            );\n            expect(process.env).to.not.have.property('GIT_SSL_NO_VERIFY');\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should be true when the resolution type is different","suites":["GitResolver",".hasNew"],"updatePoint":{"line":89,"column":64,"index":2949},"line":89,"code":"        it('should be true when the resolution type is different', function(next) {\n            var resolver;\n\n            var pkgMeta = {\n                name: 'foo',\n                version: '0.0.0',\n                _resolution: {\n                    type: 'version',\n                    tag: '0.0.0',\n                    commit: 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                }\n            };\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/heads/master' // same commit hash on purpose\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                .hasNew(pkgMeta)\n                .then(function(hasNew) {\n                    expect(hasNew).to.be(true);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should be true when a higher version for a range is available","suites":["GitResolver",".hasNew"],"updatePoint":{"line":118,"column":73,"index":3860},"line":118,"code":"        it('should be true when a higher version for a range is available', function(next) {\n            var resolver;\n\n            var pkgMeta = {\n                name: 'foo',\n                version: '1.0.0',\n                _resolution: {\n                    type: 'version',\n                    tag: '1.0.0',\n                    commit: 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                }\n            };\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/1.0.0',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/1.0.1' // same commit hash on purpose\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                .hasNew(pkgMeta)\n                .then(function(hasNew) {\n                    expect(hasNew).to.be(true);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should be true when a resolved to a lower version of a range","suites":["GitResolver",".hasNew"],"updatePoint":{"line":149,"column":72,"index":4930},"line":149,"code":"        it('should be true when a resolved to a lower version of a range', function(next) {\n            var resolver;\n\n            var pkgMeta = {\n                name: 'foo',\n                version: '1.0.1',\n                _resolution: {\n                    type: 'version',\n                    tag: '1.0.1',\n                    commit: 'cccccccccccccccccccccccccccccccccccccccc'\n                }\n            };\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/1.0.0'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                .hasNew(pkgMeta)\n                .then(function(hasNew) {\n                    expect(hasNew).to.be(true);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should be false when resolved to the same tag (with same commit hash) for a given range","suites":["GitResolver",".hasNew"],"updatePoint":{"line":179,"column":99,"index":5916},"line":179,"code":"        it('should be false when resolved to the same tag (with same commit hash) for a given range', function(next) {\n            var resolver;\n\n            var pkgMeta = {\n                name: 'foo',\n                version: '1.0.1',\n                _resolution: {\n                    type: 'version',\n                    tag: '1.0.1',\n                    commit: 'cccccccccccccccccccccccccccccccccccccccc'\n                }\n            };\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/1.0.0',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/1.0.1'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                .hasNew(pkgMeta)\n                .then(function(hasNew) {\n                    expect(hasNew).to.be(false);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should be true when resolved to the same tag (with different commit hash) for a given range","suites":["GitResolver",".hasNew"],"updatePoint":{"line":210,"column":103,"index":6987},"line":210,"code":"        it('should be true when resolved to the same tag (with different commit hash) for a given range', function(next) {\n            var resolver;\n\n            var pkgMeta = {\n                name: 'foo',\n                version: '1.0.1',\n                _resolution: {\n                    type: 'version',\n                    tag: '1.0.1',\n                    commit: 'cccccccccccccccccccccccccccccccccccccccc'\n                }\n            };\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/1.0.0',\n                    'dddddddddddddddddddddddddddddddddddddddd refs/tags/1.0.1'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                .hasNew(pkgMeta)\n                .then(function(hasNew) {\n                    expect(hasNew).to.be(true);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should be true when a different commit hash for a given branch is available","suites":["GitResolver",".hasNew"],"updatePoint":{"line":241,"column":87,"index":8041},"line":241,"code":"        it('should be true when a different commit hash for a given branch is available', function(next) {\n            var resolver;\n\n            var pkgMeta = {\n                name: 'foo',\n                _resolution: {\n                    type: 'branch',\n                    branch: 'master',\n                    commit: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n                }\n            };\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/heads/master'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                .hasNew(pkgMeta)\n                .then(function(hasNew) {\n                    expect(hasNew).to.be(true);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should be false when resolved to the the same commit hash for a given branch","suites":["GitResolver",".hasNew"],"updatePoint":{"line":269,"column":88,"index":8905},"line":269,"code":"        it('should be false when resolved to the the same commit hash for a given branch', function(next) {\n            var resolver;\n\n            var pkgMeta = {\n                name: 'foo',\n                _resolution: {\n                    type: 'branch',\n                    branch: 'master',\n                    commit: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n                }\n            };\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                .hasNew(pkgMeta)\n                .then(function(hasNew) {\n                    expect(hasNew).to.be(false);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should be false when targeting commit hashes","suites":["GitResolver",".hasNew"],"updatePoint":{"line":297,"column":56,"index":9738},"line":297,"code":"        it('should be false when targeting commit hashes', function(next) {\n            var resolver;\n\n            var pkgMeta = {\n                name: 'foo',\n                _resolution: {\n                    type: 'commit',\n                    commit: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n                }\n            };\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/heads/master'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                .hasNew(pkgMeta)\n                .then(function(hasNew) {\n                    expect(hasNew).to.be(true);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should call the necessary functions by the correct order","suites":["GitResolver","._resolve"],"updatePoint":{"line":328,"column":68,"index":10638},"line":328,"code":"        it('should call the necessary functions by the correct order', function(next) {\n            var resolver;\n\n            function DummyResolver() {\n                GitResolver.apply(this, arguments);\n                this._stack = [];\n            }\n\n            util.inherits(DummyResolver, GitResolver);\n            mout.object.mixIn(DummyResolver, GitResolver);\n\n            DummyResolver.prototype.getStack = function() {\n                return this._stack;\n            };\n\n            DummyResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master'\n                ]);\n            };\n\n            DummyResolver.prototype.resolve = function() {\n                this._stack = [];\n                return GitResolver.prototype.resolve.apply(this, arguments);\n            };\n\n            DummyResolver.prototype._findResolution = function() {\n                this._stack.push('before _findResolution');\n                return GitResolver.prototype._findResolution\n                    .apply(this, arguments)\n                    .then(\n                        function(val) {\n                            this._stack.push('after _findResolution');\n                            return val;\n                        }.bind(this)\n                    );\n            };\n\n            DummyResolver.prototype._checkout = function() {\n                this._stack.push('before _checkout');\n                return Q.resolve().then(\n                    function(val) {\n                        this._stack.push('after _checkout');\n                        return val;\n                    }.bind(this)\n                );\n            };\n\n            DummyResolver.prototype._cleanup = function() {\n                this._stack.push('before _cleanup');\n                return GitResolver.prototype._cleanup\n                    .apply(this, arguments)\n                    .then(\n                        function(val) {\n                            this._stack.push('after _cleanup');\n                            return val;\n                        }.bind(this)\n                    );\n            };\n\n            resolver = new DummyResolver(\n                { source: 'foo', target: 'master' },\n                defaultConfig(),\n                logger\n            );\n\n            resolver\n                .resolve()\n                .then(function() {\n                    expect(resolver.getStack()).to.eql([\n                        'before _findResolution',\n                        'after _findResolution',\n                        'before _checkout',\n                        'after _checkout',\n                        'before _cleanup',\n                        'after _cleanup'\n                    ]);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should reject the promise if _checkout is not implemented","suites":["GitResolver","._resolve"],"updatePoint":{"line":410,"column":69,"index":13492},"line":410,"code":"        it('should reject the promise if _checkout is not implemented', function(next) {\n            var resolver = create('foo');\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master'\n                ]);\n            };\n\n            resolver\n                .resolve()\n                .then(\n                    function() {\n                        next(new Error('Should have rejected the promise'));\n                    },\n                    function(err) {\n                        expect(err).to.be.an(Error);\n                        expect(err.message).to.contain(\n                            '_checkout not implemented'\n                        );\n                        next();\n                    }\n                )\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should reject the promise if #refs is not implemented","suites":["GitResolver","._resolve"],"updatePoint":{"line":436,"column":65,"index":14358},"line":436,"code":"        it('should reject the promise if #refs is not implemented', function(next) {\n            var resolver = create('foo');\n\n            resolver._checkout = function() {\n                return Q.resolve();\n            };\n\n            resolver\n                .resolve()\n                .then(\n                    function() {\n                        next(new Error('Should have rejected the promise'));\n                    },\n                    function(err) {\n                        expect(err).to.be.an(Error);\n                        expect(err.message).to.contain('refs not implemented');\n                        next();\n                    }\n                )\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an object","suites":["GitResolver","._findResolution"],"updatePoint":{"line":462,"column":39,"index":15142},"line":462,"code":"        it('should resolve to an object', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('*')\n                .then(function(resolution) {\n                    expect(resolution).to.be.an('object');\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should fail to resolve * if no tags/heads are found","suites":["GitResolver","._findResolution"],"updatePoint":{"line":481,"column":63,"index":15734},"line":481,"code":"        it('should fail to resolve * if no tags/heads are found', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('*')\n                .then(\n                    function() {\n                        next(new Error('Should have failed'));\n                    },\n                    function(err) {\n                        expect(err).to.be.an(Error);\n                        expect(err.message).to.match(\n                            /branch master does not exist/i\n                        );\n                        expect(err.details).to.match(/no branches found/i);\n                        expect(err.code).to.equal('ENORESTARGET');\n                        next();\n                    }\n                )\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve \"*\" to the latest commit on master if a repository has no valid semver tags","suites":["GitResolver","._findResolution"],"updatePoint":{"line":508,"column":102,"index":16703},"line":508,"code":"        it('should resolve \"*\" to the latest commit on master if a repository has no valid semver tags', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/heads/some-branch',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/some-tag'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('*')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'branch',\n                        branch: 'master',\n                        commit: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve \"*\" to the latest version if a repository has valid semver tags, ignoring pre-releases","suites":["GitResolver","._findResolution"],"updatePoint":{"line":533,"column":113,"index":17685},"line":533,"code":"        it('should resolve \"*\" to the latest version if a repository has valid semver tags, ignoring pre-releases', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/0.1.0',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/v0.1.1',\n                    'dddddddddddddddddddddddddddddddddddddddd refs/tags/0.2.0-rc.1' // Should ignore release candidates\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('*')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'version',\n                        tag: 'v0.1.1',\n                        commit: 'cccccccccccccccccccccccccccccccccccccccc'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve \"0.1.*\" to the latest version if a repository has valid semver tags, ignoring pre-releases","suites":["GitResolver","._findResolution"],"updatePoint":{"line":559,"column":117,"index":18781},"line":559,"code":"        it('should resolve \"0.1.*\" to the latest version if a repository has valid semver tags, ignoring pre-releases', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/0.1.0',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/v0.1.1',\n                    'dddddddddddddddddddddddddddddddddddddddd refs/tags/0.1.2-rc.1' // Should ignore release candidates\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('0.1.*')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'version',\n                        tag: 'v0.1.1',\n                        commit: 'cccccccccccccccccccccccccccccccccccccccc'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve \"*\" to the latest version if a repository has valid semver tags, not ignoring pre-releases if they are the only versions","suites":["GitResolver","._findResolution"],"updatePoint":{"line":585,"column":147,"index":19911},"line":585,"code":"        it('should resolve \"*\" to the latest version if a repository has valid semver tags, not ignoring pre-releases if they are the only versions', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/0.1.0-rc.1',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/0.1.0-rc.2'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('*')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'version',\n                        tag: '0.1.0-rc.2',\n                        commit: 'cccccccccccccccccccccccccccccccccccccccc'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve \"0.1.*\" to the latest version if a repository has valid semver tags, not ignoring pre-releases if they are the only versions","suites":["GitResolver","._findResolution"],"updatePoint":{"line":610,"column":151,"index":20933},"line":610,"code":"        it('should resolve \"0.1.*\" to the latest version if a repository has valid semver tags, not ignoring pre-releases if they are the only versions', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/0.1.0-rc.1',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/0.1.0-rc.2'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('0.1.*')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'version',\n                        tag: '0.1.0-rc.2',\n                        commit: 'cccccccccccccccccccccccccccccccccccccccc'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the latest version that matches a range/version","suites":["GitResolver","._findResolution"],"updatePoint":{"line":635,"column":77,"index":21885},"line":635,"code":"        it('should resolve to the latest version that matches a range/version', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/0.1.0',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/v0.1.1',\n                    'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee refs/tags/0.2.0',\n                    'ffffffffffffffffffffffffffffffffffffffff refs/tags/v0.2.1'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('~0.2.0')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'version',\n                        tag: 'v0.2.1',\n                        commit: 'ffffffffffffffffffffffffffffffffffffffff'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to a branch even if target is a range/version that does not exist","suites":["GitResolver","._findResolution"],"updatePoint":{"line":662,"column":92,"index":23001},"line":662,"code":"        it('should resolve to a branch even if target is a range/version that does not exist', function(next) {\n            var resolver;\n\n            // See #771\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/heads/3.0.0-wip',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/v0.1.1'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('3.0.0-wip')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'branch',\n                        branch: '3.0.0-wip',\n                        commit: 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to a tag even if target is a range that does not exist","suites":["GitResolver","._findResolution"],"updatePoint":{"line":688,"column":81,"index":23982},"line":688,"code":"        it('should resolve to a tag even if target is a range that does not exist', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/1.0'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('1.0')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'tag',\n                        tag: '1.0',\n                        commit: 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the latest pre-release version that matches a range/version","suites":["GitResolver","._findResolution"],"updatePoint":{"line":712,"column":89,"index":24841},"line":712,"code":"        it('should resolve to the latest pre-release version that matches a range/version', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/0.1.0',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/v0.1.1',\n                    'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee refs/tags/0.2.0',\n                    'ffffffffffffffffffffffffffffffffffffffff refs/tags/v0.2.1-rc.1'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('~0.2.1')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'version',\n                        tag: 'v0.2.1-rc.1',\n                        commit: 'ffffffffffffffffffffffffffffffffffffffff'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the exact version if exists","suites":["GitResolver","._findResolution"],"updatePoint":{"line":739,"column":57,"index":25932},"line":739,"code":"        it('should resolve to the exact version if exists', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/0.8.1',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/0.8.1+build.1',\n                    'dddddddddddddddddddddddddddddddddddddddd refs/tags/0.8.1+build.2',\n                    'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee refs/tags/0.8.1+build.3'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('0.8.1+build.2')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'version',\n                        tag: '0.8.1+build.2',\n                        commit: 'dddddddddddddddddddddddddddddddddddddddd'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should fail to resolve if none of the versions matched a range/version","suites":["GitResolver","._findResolution"],"updatePoint":{"line":766,"column":82,"index":27074},"line":766,"code":"        it('should fail to resolve if none of the versions matched a range/version', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/0.1.0',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/v0.1.1'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('~0.2.0')\n                .then(\n                    function() {\n                        next(new Error('Should have failed'));\n                    },\n                    function(err) {\n                        expect(err).to.be.an(Error);\n                        expect(err.message).to.match(\n                            /was able to satisfy ~0.2.0/i\n                        );\n                        expect(err.details).to.match(\n                            /available versions in foo: 0\\.1\\.1, 0\\.1\\.0/i\n                        );\n                        expect(err.code).to.equal('ENORESTARGET');\n                        next();\n                    }\n                )\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should fail to resolve if there are no versions to match a range/version","suites":["GitResolver","._findResolution"],"updatePoint":{"line":799,"column":84,"index":28367},"line":799,"code":"        it('should fail to resolve if there are no versions to match a range/version', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master'\n                ]);\n            };\n\n            resolver = create('foo');\n\n            resolver\n                ._findResolution('~0.2.0')\n                .then(\n                    function() {\n                        next(new Error('Should have failed'));\n                    },\n                    function(err) {\n                        expect(err).to.be.an(Error);\n                        expect(err.message).to.match(\n                            /was able to satisfy ~0.2.0/i\n                        );\n                        expect(err.details).to.match(\n                            /no versions found in foo/i\n                        );\n                        expect(err.code).to.equal('ENORESTARGET');\n                        next();\n                    }\n                )\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the specified commit","suites":["GitResolver","._findResolution"],"updatePoint":{"line":831,"column":50,"index":29447},"line":831,"code":"        it('should resolve to the specified commit', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'commit',\n                        commit: 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the specified short commit","suites":["GitResolver","._findResolution"],"updatePoint":{"line":853,"column":56,"index":30199},"line":853,"code":"        it('should resolve to the specified short commit', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('bbbbbbb')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'commit',\n                        commit: 'bbbbbbb'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the specified tag if it exists","suites":["GitResolver","._findResolution"],"updatePoint":{"line":875,"column":60,"index":30889},"line":875,"code":"        it('should resolve to the specified tag if it exists', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/some-tag'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('some-tag')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'tag',\n                        tag: 'some-tag',\n                        commit: 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the specified branch if it exists","suites":["GitResolver","._findResolution"],"updatePoint":{"line":899,"column":63,"index":31737},"line":899,"code":"        it('should resolve to the specified branch if it exists', function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/heads/some-branch'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('some-branch')\n                .then(function(resolution) {\n                    expect(resolution).to.eql({\n                        type: 'branch',\n                        branch: 'some-branch',\n                        commit: 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should fail to resolve to the specified tag/branch if it doesn't exists","suites":["GitResolver","._findResolution"],"updatePoint":{"line":923,"column":83,"index":32621},"line":923,"code":"        it(\"should fail to resolve to the specified tag/branch if it doesn't exists\", function(next) {\n            var resolver;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/some-tag'\n                ]);\n            };\n\n            resolver = create('foo');\n            resolver\n                ._findResolution('some-branch')\n                .then(\n                    function() {\n                        next(new Error('Should have failed'));\n                    },\n                    function(err) {\n                        expect(err).to.be.an(Error);\n                        expect(err.message).to.match(\n                            /tag\\/branch some-branch does not exist/i\n                        );\n                        expect(err.details).to.match(\n                            /available branches: master/i\n                        );\n                        expect(err.details).to.match(\n                            /available tags: some-tag/i\n                        );\n                        expect(err.code).to.equal('ENORESTARGET');\n                        next();\n                    }\n                )\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should remove the .git folder from the temp dir","suites":["GitResolver","._cleanup"],"updatePoint":{"line":973,"column":59,"index":34385},"line":973,"code":"        it('should remove the .git folder from the temp dir', function(next) {\n            var resolver = create('foo');\n            var dst = path.join(tempDir, '.git');\n\n            // Copy .git folder to the tempDir\n            copy.copyDir(\n                path.resolve(__dirname, '../../assets/package-a/.git'),\n                dst,\n                {\n                    mode: 0777\n                }\n            )\n                .then(function() {\n                    resolver._tempDir = tempDir;\n\n                    return resolver._cleanup().then(function() {\n                        expect(fs.existsSync(dst)).to.be(false);\n                        next();\n                    });\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should not fail if .git does not exist for some reason","suites":["GitResolver","._cleanup"],"updatePoint":{"line":996,"column":66,"index":35139},"line":996,"code":"        it('should not fail if .git does not exist for some reason', function(next) {\n            var resolver = create('foo');\n            var dst = path.join(tempDir, '.git');\n\n            resolver._tempDir = tempDir;\n\n            resolver\n                ._cleanup()\n                .then(function() {\n                    expect(fs.existsSync(dst)).to.be(false);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should sill run even if _checkout fails for some reason","suites":["GitResolver","._cleanup"],"updatePoint":{"line":1011,"column":67,"index":35591},"line":1011,"code":"        it('should sill run even if _checkout fails for some reason', function(next) {\n            var resolver = create('foo');\n            var called = false;\n\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master'\n                ]);\n            };\n\n            resolver._tempDir = tempDir;\n            resolver._checkout = function() {\n                return Q.reject(new Error('Some error'));\n            };\n\n            resolver._cleanup = function() {\n                called = true;\n                return GitResolver.prototype._cleanup.apply(this, arguments);\n            };\n\n            resolver\n                .resolve()\n                .then(\n                    function() {\n                        next(new Error('Should have failed'));\n                    },\n                    function() {\n                        expect(called).to.be(true);\n                        next();\n                    }\n                )\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should save the resolution to the .bower.json to be used later by .hasNew","suites":["GitResolver","._savePkgMeta"],"updatePoint":{"line":1059,"column":85,"index":36997},"line":1059,"code":"        it('should save the resolution to the .bower.json to be used later by .hasNew', function(next) {\n            var resolver = create('foo');\n\n            resolver._resolution = { type: 'version', tag: '0.0.1' };\n            resolver._tempDir = tempDir;\n\n            resolver\n                ._savePkgMeta({ name: 'foo', version: '0.0.1' })\n                .then(function() {\n                    return Q.nfcall(\n                        fs.readFile,\n                        path.join(tempDir, '.bower.json')\n                    );\n                })\n                .then(function(contents) {\n                    var json = JSON.parse(contents.toString());\n\n                    expect(json._resolution).to.eql(resolver._resolution);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should save the release in the package meta","suites":["GitResolver","._savePkgMeta"],"updatePoint":{"line":1082,"column":55,"index":37790},"line":1082,"code":"        it('should save the release in the package meta', function(next) {\n            var resolver = create('foo');\n            var metaFile = path.join(tempDir, '.bower.json');\n\n            // Test with type 'version'\n            resolver._resolution = {\n                type: 'version',\n                tag: '0.0.1',\n                commit: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            };\n            resolver._tempDir = tempDir;\n\n            resolver\n                ._savePkgMeta({ name: 'foo', version: '0.0.1' })\n                .then(function() {\n                    return Q.nfcall(fs.readFile, metaFile);\n                })\n                .then(function(contents) {\n                    var json = JSON.parse(contents.toString());\n                    expect(json._release).to.equal('0.0.1');\n                })\n                // Test with type 'version' + build metadata\n                .then(function() {\n                    resolver._resolution = {\n                        type: 'version',\n                        tag: '0.0.1+build.5',\n                        commit: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n                    };\n                    return resolver._savePkgMeta({ name: 'foo' });\n                })\n                .then(function() {\n                    return Q.nfcall(fs.readFile, metaFile);\n                })\n                .then(function(contents) {\n                    var json = JSON.parse(contents.toString());\n                    expect(json._release).to.equal('0.0.1+build.5');\n                })\n                // Test with type 'tag'\n                .then(function() {\n                    resolver._resolution = {\n                        type: 'tag',\n                        tag: '0.0.1',\n                        commit: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n                    };\n                    return resolver._savePkgMeta({ name: 'foo' });\n                })\n                .then(function() {\n                    return Q.nfcall(fs.readFile, metaFile);\n                })\n                .then(function(contents) {\n                    var json = JSON.parse(contents.toString());\n                    expect(json._release).to.equal('0.0.1');\n                })\n                // Test with type 'branch'\n                // In this case, it should be the commit\n                .then(function() {\n                    resolver._resolution = {\n                        type: 'branch',\n                        branch: 'foo',\n                        commit: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n                    };\n                    return resolver._savePkgMeta({ name: 'foo' });\n                })\n                .then(function() {\n                    return Q.nfcall(fs.readFile, metaFile);\n                })\n                .then(function(contents) {\n                    var json = JSON.parse(contents.toString());\n                    expect(json._release).to.equal('aaaaaaaaaa');\n                })\n                // Test with type 'commit'\n                .then(function() {\n                    resolver._resolution = {\n                        type: 'commit',\n                        commit: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n                    };\n                    return resolver._savePkgMeta({ name: 'foo' });\n                })\n                .then(function() {\n                    return Q.nfcall(fs.readFile, metaFile);\n                })\n                .then(function(contents) {\n                    var json = JSON.parse(contents.toString());\n                    expect(json._release).to.equal('aaaaaaaaaa');\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should add the version to the package meta if not present and resolution is a version","suites":["GitResolver","._savePkgMeta"],"updatePoint":{"line":1171,"column":97,"index":41532},"line":1171,"code":"        it('should add the version to the package meta if not present and resolution is a version', function(next) {\n            var resolver = create('foo');\n\n            resolver._resolution = { type: 'version', tag: 'v0.0.1' };\n            resolver._tempDir = tempDir;\n\n            resolver\n                ._savePkgMeta({ name: 'foo' })\n                .then(function() {\n                    return Q.nfcall(\n                        fs.readFile,\n                        path.join(tempDir, '.bower.json')\n                    );\n                })\n                .then(function(contents) {\n                    var json = JSON.parse(contents.toString());\n                    expect(json.version).to.equal('0.0.1');\n\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should remove the version from the package meta if resolution is not a version","suites":["GitResolver","._savePkgMeta"],"updatePoint":{"line":1194,"column":90,"index":42328},"line":1194,"code":"        it('should remove the version from the package meta if resolution is not a version', function(next) {\n            var resolver = create('foo');\n\n            resolver._resolution = {\n                type: 'commit',\n                commit: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n            };\n            resolver._tempDir = tempDir;\n\n            resolver\n                ._savePkgMeta({ name: 'foo', version: '0.0.1' })\n                .then(function() {\n                    return Q.nfcall(\n                        fs.readFile,\n                        path.join(tempDir, '.bower.json')\n                    );\n                })\n                .then(function(contents) {\n                    var json = JSON.parse(contents.toString());\n                    expect(json).to.not.have.property('version');\n\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should warn if the resolution version is different than the package meta version","suites":["GitResolver","._savePkgMeta"],"updatePoint":{"line":1220,"column":92,"index":43230},"line":1220,"code":"        it('should warn if the resolution version is different than the package meta version', function(next) {\n            var resolver = create('foo');\n            var notified = false;\n\n            resolver._resolution = { type: 'version', tag: '0.0.1' };\n            resolver._tempDir = tempDir;\n\n            logger.on('log', function(log) {\n                expect(log).to.be.an('object');\n\n                if (log.level === 'warn' && log.id === 'mismatch') {\n                    expect(log.message).to.match(\n                        /\\(0\\.0\\.0\\).*different.*\\(0\\.0\\.1\\)/\n                    );\n                    notified = true;\n                }\n            });\n\n            resolver\n                ._savePkgMeta({ name: 'foo', version: '0.0.0' })\n                .then(function() {\n                    return Q.nfcall(\n                        fs.readFile,\n                        path.join(tempDir, '.bower.json')\n                    );\n                })\n                .then(function(contents) {\n                    var json = JSON.parse(contents.toString());\n                    expect(json.version).to.equal('0.0.1');\n                    expect(notified).to.be(true);\n\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should not warn if the resolution version and the package meta version are the same","suites":["GitResolver","._savePkgMeta"],"updatePoint":{"line":1256,"column":95,"index":44502},"line":1256,"code":"        it('should not warn if the resolution version and the package meta version are the same', function(next) {\n            var resolver = create('foo');\n            var notified = false;\n\n            resolver._resolution = { type: 'version', tag: 'v0.0.1' };\n            resolver._tempDir = tempDir;\n\n            resolver\n                ._savePkgMeta({ name: 'foo', version: '0.0.1' })\n                .then(function() {\n                    return Q.nfcall(\n                        fs.readFile,\n                        path.join(tempDir, '.bower.json')\n                    );\n                }, null)\n                .then(function(contents) {\n                    var json = JSON.parse(contents.toString());\n                    expect(json.version).to.equal('0.0.1');\n                    expect(notified).to.be(false);\n\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an empty object if no heads are found","suites":["GitResolver","#branches"],"updatePoint":{"line":1285,"column":67,"index":45478},"line":1285,"code":"        it('should resolve to an empty object if no heads are found', function(next) {\n            GitResolver.refs = function() {\n                return Q.resolve([]);\n            };\n\n            GitResolver.branches('foo')\n                .then(function(branches) {\n                    expect(branches).to.be.an('object');\n                    expect(branches).to.eql({});\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an object where keys are branches and values their commit hashes","suites":["GitResolver","#branches"],"updatePoint":{"line":1299,"column":94,"index":45964},"line":1299,"code":"        it('should resolve to an object where keys are branches and values their commit hashes', function(next) {\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/heads/some-branch',\n                    'foo refs/heads/invalid', // invalid\n                    'cccccccccccccccccccccccccccccccccccccccc refs/heads/', // invalid\n                    'dddddddddddddddddddddddddddddddddddddddd refs/heads', // invalid\n                    'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee refs/tags/some-tag',\n                    'ffffffffffffffffffffffffffffffffffffffff refs/tags/0.1.1'\n                ]);\n            };\n\n            GitResolver.branches('foo')\n                .then(function(branches) {\n                    expect(branches).to.eql({\n                        master: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n                        'some-branch':\n                            'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should cache the result for each source","suites":["GitResolver","#branches"],"updatePoint":{"line":1324,"column":51,"index":47135},"line":1324,"code":"        it('should cache the result for each source', function(next) {\n            GitResolver.refs = function(source) {\n                if (source === 'foo') {\n                    return Q.resolve([\n                        'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                        'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/heads/some-branch'\n                    ]);\n                }\n\n                return Q.resolve([\n                    'cccccccccccccccccccccccccccccccccccccccc refs/heads/master',\n                    'dddddddddddddddddddddddddddddddddddddddd refs/heads/other-branch'\n                ]);\n            };\n\n            GitResolver.branches('foo')\n                .then(function(branches) {\n                    expect(branches).to.eql({\n                        master: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n                        'some-branch':\n                            'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                    });\n\n                    return GitResolver.branches('bar');\n                })\n                .then(function(branches) {\n                    expect(branches).to.eql({\n                        master: 'cccccccccccccccccccccccccccccccccccccccc',\n                        'other-branch':\n                            'dddddddddddddddddddddddddddddddddddddddd'\n                    });\n\n                    // Manipulate the cache and check if it resolves for the cached ones\n                    delete GitResolver._cache.branches.get('foo').master;\n                    delete GitResolver._cache.branches.get('bar').master;\n\n                    return GitResolver.branches('foo');\n                })\n                .then(function(branches) {\n                    expect(branches).to.eql({\n                        'some-branch':\n                            'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                    });\n\n                    return GitResolver.branches('bar');\n                })\n                .then(function(branches) {\n                    expect(branches).to.eql({\n                        'other-branch':\n                            'dddddddddddddddddddddddddddddddddddddddd'\n                    });\n\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should work if requested in parallel for the same source","suites":["GitResolver","#branches"],"updatePoint":{"line":1381,"column":68,"index":49449},"line":1381,"code":"        it('should work if requested in parallel for the same source', function(next) {\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/heads/some-branch'\n                ]);\n            };\n\n            Q.all([GitResolver.branches('foo'), GitResolver.branches('foo')])\n                .spread(function(branches1, branches2) {\n                    expect(branches1).to.eql({\n                        master: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n                        'some-branch':\n                            'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                    });\n                    expect(branches1).to.eql(branches2);\n\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an empty hash if no tags are found","suites":["GitResolver","#tags"],"updatePoint":{"line":1407,"column":64,"index":50441},"line":1407,"code":"        it('should resolve to an empty hash if no tags are found', function(next) {\n            GitResolver.refs = function() {\n                return Q.resolve([]);\n            };\n\n            GitResolver.tags('foo')\n                .then(function(tags) {\n                    expect(tags).to.be.an('object');\n                    expect(tags).to.eql({});\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an hash of tags","suites":["GitResolver","#tags"],"updatePoint":{"line":1421,"column":45,"index":50862},"line":1421,"code":"        it('should resolve to an hash of tags', function(next) {\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/heads/some-branch',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/0.2.1',\n                    'dddddddddddddddddddddddddddddddddddddddd refs/tags/0.1.0',\n                    'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee refs/tags/v0.1.1',\n                    'abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/some-tag',\n                    'foo refs/tags/invalid', // invalid\n                    'ffffffffffffffffffffffffffffffffffffffff refs/tags/', // invalid\n                    'abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags' // invalid\n                ]);\n            };\n\n            GitResolver.tags('foo')\n                .then(function(tags) {\n                    expect(tags).to.eql({\n                        '0.2.1': 'cccccccccccccccccccccccccccccccccccccccc',\n                        '0.1.0': 'dddddddddddddddddddddddddddddddddddddddd',\n                        'v0.1.1': 'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n                        'some-tag': 'abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                    });\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should cache the result for each source","suites":["GitResolver","#tags"],"updatePoint":{"line":1449,"column":51,"index":52304},"line":1449,"code":"        it('should cache the result for each source', function(next) {\n            GitResolver.refs = function(source) {\n                if (source === 'foo') {\n                    return Q.resolve([\n                        'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/tags/0.2.1',\n                        'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/some-tag'\n                    ]);\n                }\n\n                return Q.resolve([\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/0.3.1',\n                    'dddddddddddddddddddddddddddddddddddddddd refs/tags/some-tag'\n                ]);\n            };\n\n            GitResolver.tags('foo')\n                .then(function(versions) {\n                    expect(versions).to.eql({\n                        '0.2.1': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n                        'some-tag': 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                    });\n\n                    return GitResolver.tags('bar');\n                })\n                .then(function(versions) {\n                    expect(versions).to.eql({\n                        '0.3.1': 'cccccccccccccccccccccccccccccccccccccccc',\n                        'some-tag': 'dddddddddddddddddddddddddddddddddddddddd'\n                    });\n\n                    // Manipulate the cache and check if it resolves for the cached ones\n                    delete GitResolver._cache.tags.get('foo')['0.2.1'];\n                    delete GitResolver._cache.tags.get('bar')['0.3.1'];\n\n                    return GitResolver.tags('foo');\n                })\n                .then(function(tags) {\n                    expect(tags).to.eql({\n                        'some-tag': 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                    });\n\n                    return GitResolver.tags('bar');\n                })\n                .then(function(tags) {\n                    expect(tags).to.eql({\n                        'some-tag': 'dddddddddddddddddddddddddddddddddddddddd'\n                    });\n\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should work if requested in parallel for the same source","suites":["GitResolver","#tags"],"updatePoint":{"line":1502,"column":68,"index":54445},"line":1502,"code":"        it('should work if requested in parallel for the same source', function(next) {\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/0.3.1',\n                    'dddddddddddddddddddddddddddddddddddddddd refs/tags/some-tag'\n                ]);\n            };\n\n            Q.all([GitResolver.tags('foo'), GitResolver.tags('foo')])\n                .spread(function(tags1, tags2) {\n                    expect(tags1).to.eql({\n                        '0.3.1': 'cccccccccccccccccccccccccccccccccccccccc',\n                        'some-tag': 'dddddddddddddddddddddddddddddddddddddddd'\n                    });\n                    expect(tags2).to.eql(tags1);\n\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should clear refs cache","suites":["GitResolver","#clearRuntimeCache"],"updatePoint":{"line":1531,"column":35,"index":55583},"line":1531,"code":"        it('should clear refs cache', function() {\n            CustomGitResolver._cache.refs.set('foo', {});\n            CustomGitResolver.clearRuntimeCache();\n            expect(CustomGitResolver._cache.refs.has('foo')).to.be(false);\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should clear branches cache","suites":["GitResolver","#clearRuntimeCache"],"updatePoint":{"line":1537,"column":39,"index":55835},"line":1537,"code":"        it('should clear branches cache', function() {\n            CustomGitResolver._cache.branches.set('foo', {});\n            CustomGitResolver.clearRuntimeCache();\n            expect(CustomGitResolver._cache.branches.has('foo')).to.be(false);\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should clear tags cache","suites":["GitResolver","#clearRuntimeCache"],"updatePoint":{"line":1543,"column":35,"index":56091},"line":1543,"code":"        it('should clear tags cache', function() {\n            CustomGitResolver._cache.tags.set('foo', {});\n            CustomGitResolver.clearRuntimeCache();\n            expect(CustomGitResolver._cache.tags.has('foo')).to.be(false);\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should clear versions cache","suites":["GitResolver","#clearRuntimeCache"],"updatePoint":{"line":1549,"column":39,"index":56343},"line":1549,"code":"        it('should clear versions cache', function() {\n            CustomGitResolver._cache.versions.set('foo', {});\n            CustomGitResolver.clearRuntimeCache();\n            expect(CustomGitResolver._cache.versions.has('foo')).to.be(false);\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an empty array if no tags are found","suites":["GitResolver","#versions"],"updatePoint":{"line":1559,"column":65,"index":56723},"line":1559,"code":"        it('should resolve to an empty array if no tags are found', function(next) {\n            GitResolver.refs = function() {\n                return Q.resolve([]);\n            };\n\n            GitResolver.versions('foo')\n                .then(function(versions) {\n                    expect(versions).to.be.an('array');\n                    expect(versions).to.eql([]);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an empty array if no valid semver tags","suites":["GitResolver","#versions"],"updatePoint":{"line":1573,"column":68,"index":57182},"line":1573,"code":"        it('should resolve to an empty array if no valid semver tags', function(next) {\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/heads/some-branch',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/some-tag'\n                ]);\n            };\n\n            GitResolver.versions('foo')\n                .then(function(versions) {\n                    expect(versions).to.be.an('array');\n                    expect(versions).to.eql([]);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an array of versions, ignoring invalid semver tags","suites":["GitResolver","#versions"],"updatePoint":{"line":1591,"column":80,"index":57921},"line":1591,"code":"        it('should resolve to an array of versions, ignoring invalid semver tags', function(next) {\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/heads/master',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/heads/some-branch',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/0.2.1',\n                    'dddddddddddddddddddddddddddddddddddddddd refs/tags/0.1.0',\n                    'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee refs/tags/v0.1.1',\n                    'foo refs/tags/invalid', // invalid\n                    'ffffffffffffffffffffffffffffffffffffffff refs/tags/', // invalid\n                    'abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags' // invalid\n                ]);\n            };\n\n            GitResolver.versions('foo', true)\n                .then(function(versions) {\n                    expect(versions).to.eql([\n                        {\n                            version: '0.2.1',\n                            tag: '0.2.1',\n                            commit: 'cccccccccccccccccccccccccccccccccccccccc'\n                        },\n                        {\n                            version: '0.1.1',\n                            tag: 'v0.1.1',\n                            commit: 'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\n                        },\n                        {\n                            version: '0.1.0',\n                            tag: '0.1.0',\n                            commit: 'dddddddddddddddddddddddddddddddddddddddd'\n                        }\n                    ]);\n                })\n                .then(function() {\n                    return GitResolver.versions('foo');\n                })\n                .then(function(versions) {\n                    expect(versions).to.eql(['0.2.1', '0.1.1', '0.1.0']);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should order the versions according to the semver spec","suites":["GitResolver","#versions"],"updatePoint":{"line":1635,"column":66,"index":59908},"line":1635,"code":"        it('should order the versions according to the semver spec', function(next) {\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/tags/0.1.0',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/0.1.1+build.11',\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/0.1.1+build.100',\n                    'dddddddddddddddddddddddddddddddddddddddd refs/tags/0.1.1-rc.22',\n                    'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee refs/tags/0.1.1-rc.200',\n                    'ffffffffffffffffffffffffffffffffffffffff refs/tags/0.1.1',\n                    'abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/v0.2.1'\n                ]);\n            };\n\n            GitResolver.versions('foo', true)\n                .then(function(versions) {\n                    expect(versions).to.eql([\n                        {\n                            version: '0.2.1',\n                            tag: 'v0.2.1',\n                            commit: 'abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                        },\n                        {\n                            version: '0.1.1+build.11',\n                            tag: '0.1.1+build.11',\n                            commit: 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n                        },\n                        {\n                            version: '0.1.1+build.100',\n                            tag: '0.1.1+build.100',\n                            commit: 'cccccccccccccccccccccccccccccccccccccccc'\n                        },\n                        {\n                            version: '0.1.1',\n                            tag: '0.1.1',\n                            commit: 'ffffffffffffffffffffffffffffffffffffffff'\n                        },\n                        {\n                            version: '0.1.1-rc.200',\n                            tag: '0.1.1-rc.200',\n                            commit: 'eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\n                        },\n                        {\n                            version: '0.1.1-rc.22',\n                            tag: '0.1.1-rc.22',\n                            commit: 'dddddddddddddddddddddddddddddddddddddddd'\n                        },\n                        {\n                            version: '0.1.0',\n                            tag: '0.1.0',\n                            commit: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n                        }\n                    ]);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should cache the result for each source","suites":["GitResolver","#versions"],"updatePoint":{"line":1692,"column":51,"index":62534},"line":1692,"code":"        it('should cache the result for each source', function(next) {\n            GitResolver.refs = function(source) {\n                if (source === 'foo') {\n                    return Q.resolve([\n                        'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/tags/0.2.1',\n                        'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/0.1.0'\n                    ]);\n                }\n\n                return Q.resolve([\n                    'cccccccccccccccccccccccccccccccccccccccc refs/tags/0.3.1',\n                    'dddddddddddddddddddddddddddddddddddddddd refs/tags/0.3.0'\n                ]);\n            };\n\n            GitResolver.versions('foo')\n                .then(function(versions) {\n                    expect(versions).to.eql(['0.2.1', '0.1.0']);\n\n                    return GitResolver.versions('bar');\n                })\n                .then(function(versions) {\n                    expect(versions).to.eql(['0.3.1', '0.3.0']);\n\n                    // Manipulate the cache and check if it resolves for the cached ones\n                    GitResolver._cache.versions.get('foo').splice(1, 1);\n                    GitResolver._cache.versions.get('bar').splice(1, 1);\n\n                    return GitResolver.versions('foo');\n                })\n                .then(function(versions) {\n                    expect(versions).to.eql(['0.2.1']);\n\n                    return GitResolver.versions('bar');\n                })\n                .then(function(versions) {\n                    expect(versions).to.eql(['0.3.1']);\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should work if requested in parallel for the same source","suites":["GitResolver","#versions"],"updatePoint":{"line":1734,"column":68,"index":64194},"line":1734,"code":"        it('should work if requested in parallel for the same source', function(next) {\n            GitResolver.refs = function() {\n                return Q.resolve([\n                    'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa refs/tags/0.2.1',\n                    'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb refs/tags/0.1.0'\n                ]);\n            };\n\n            Q.all([GitResolver.versions('foo'), GitResolver.versions('foo')])\n                .spread(function(versions1, versions2) {\n                    expect(versions1).to.eql(['0.2.1', '0.1.0']);\n                    expect(versions2).to.eql(versions1);\n\n                    next();\n                })\n                .done();\n        });","file":"core/resolvers/gitResolver.js","skipped":false,"dir":"test"},{"name":"should internally add decEndpoint","suites":["pluginResolverFactory",".constructor"],"updatePoint":{"line":67,"column":41,"index":1569},"line":67,"code":"    it('should internally add decEndpoint', function () {\n      var resolver;\n      resolver = create('file://' + testPackage);\n      expect(typeof resolver._decEndpoint).to.equal('object');\n      expect(resolver._decEndpoint.source).to.equal('file://' + testPackage);\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should throw when invalid resolverFactory is provided","suites":["pluginResolverFactory",".constructor"],"updatePoint":{"line":73,"column":61,"index":1866},"line":73,"code":"    it('should throw when invalid resolverFactory is provided', function () {\n      expect(function () {\n        pluginResolverFactory('not-a-function', defaultConfig());\n      }).to.throwException(createError('Resolver has \"string\" type instead of \"function\" type.', 'ERESOLERAPI'));\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should return endpoint","suites":["pluginResolverFactory",".getEndpoint"],"updatePoint":{"line":80,"column":30,"index":2175},"line":80,"code":"    it('should return endpoint', function () {\n      var resolver, endPoint;\n      resolver = create('file://' + testPackage);\n      endPoint = resolver.getEndpoint();\n      expect(endPoint).to.have.property('source');\n      expect(endPoint.source).to.equal('file://' + testPackage);\n      expect(endPoint).to.have.property('name');\n      expect(endPoint.name).to.equal('package-a');\n      expect(endPoint).to.have.property('target');\n      expect(endPoint.target).to.equal('*');\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should return endpoint","suites":["pluginResolverFactory",".getSource"],"updatePoint":{"line":93,"column":30,"index":2708},"line":93,"code":"    it('should return endpoint', function () {\n      var resolver, source;\n      resolver = create('file://' + testPackage);\n      source = resolver.getSource();\n      expect(source).to.equal('file://' + testPackage);\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should return target","suites":["pluginResolverFactory",".getTarget"],"updatePoint":{"line":101,"column":28,"index":2977},"line":101,"code":"    it('should return target', function () {\n      var resolver, source;\n      resolver = create({\n        source: 'file://' + testPackage,\n        target: 'some-target'\n      });\n      source = resolver.getTarget();\n      expect(source).to.equal('some-target');\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should return * when no target is specified","suites":["pluginResolverFactory",".getTarget"],"updatePoint":{"line":110,"column":51,"index":3271},"line":110,"code":"    it('should return * when no target is specified', function () {\n      var resolver, source;\n      resolver = create('file://' + testPackage);\n      source = resolver.getTarget();\n      expect(source).to.equal('*');\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should return target","suites":["pluginResolverFactory",".getName"],"updatePoint":{"line":118,"column":28,"index":3518},"line":118,"code":"    it('should return target', function () {});","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should return package meta","suites":["pluginResolverFactory",".getPkgMeta"],"updatePoint":{"line":121,"column":34,"index":3618},"line":121,"code":"    it('should return package meta', function () {\n      var resolver, pkgMeta;\n      resolver = create('file://' + testPackage);\n      resolver._pkgMeta = {\n        version: 'v1.0.1'\n      };\n      pkgMeta = resolver.getPkgMeta();\n      console.log(pkgMeta);\n      expect(pkgMeta).to.have.property('version');\n      expect(pkgMeta.version).to.equal('v1.0.1');\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should always return true","suites":["pluginResolverFactory",".isCacheable"],"updatePoint":{"line":134,"column":33,"index":4033},"line":134,"code":"    it('should always return true', function () {\n      var resolver, isCacheable;\n      resolver = create('file://' + testPackage);\n      isCacheable = resolver.isCacheable();\n      expect(isCacheable).to.be.ok();\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should return existing hasNewPromise if its set","suites":["pluginResolverFactory",".hasNew"],"updatePoint":{"line":142,"column":55,"index":4320},"line":142,"code":"    it('should return existing hasNewPromise if its set', function () {\n      var resolver;\n      resolver = create('file://' + testPackage);\n      resolver.hasNewPromise = Q.fcall(function () {\n        return 'some-dummy-value';\n      });\n      resolver.hasNew().then(function (resolvedtestValue) {\n        expect(resolvedtestValue).to.be('some-dummy-value');\n      });\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should return target","suites":["pluginResolverFactory",".hasNew"],"updatePoint":{"line":152,"column":28,"index":4672},"line":152,"code":"    it('should return target', function () {});","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should throw 'Resolver did not provide releases of package.'","suites":["pluginResolverFactory",".resolve"],"updatePoint":{"line":155,"column":68,"index":4803},"line":155,"code":"    it(\"should throw 'Resolver did not provide releases of package.'\", function (next) {\n      var mockPluginResolverWithEmptyReleases = function resolver(bower) {\n        return {\n          match: function (source) {\n            return true;\n          },\n          releases: function (source) {\n            return null;\n          },\n          fetch: function (endpoint, cached) {\n            if (cached && cached.version) {\n              return;\n            }\n\n            return {\n              tempPath: '/temp/path',\n              removeIgnores: true\n            };\n          }\n        };\n      };\n\n      var PluginResolver = pluginResolverFactory(mockPluginResolverWithEmptyReleases, defaultConfig());\n      var path = 'file://' + testPackage;\n      var resolver = new PluginResolver(path);\n      resolver.resolve().catch(function (e) {\n        expect(e.message).to.equal('Resolver did not provide releases of package.');\n        next();\n      });\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should throw 'No version found that was able to satisfy *.'","suites":["pluginResolverFactory",".resolve"],"updatePoint":{"line":185,"column":67,"index":5763},"line":185,"code":"    it(\"should throw 'No version found that was able to satisfy *.'\", function (next) {\n      var mockPluginResolverWithNoMatchingTarget = function resolver(bower) {\n        return {\n          match: function (source) {\n            return true;\n          },\n          releases: function (source) {\n            return [];\n          },\n          fetch: function (endpoint, cached) {\n            if (cached && cached.version) {\n              return;\n            }\n\n            return {\n              tempPath: '/temp/path',\n              removeIgnores: true\n            };\n          }\n        };\n      };\n\n      var PluginResolver = pluginResolverFactory(mockPluginResolverWithNoMatchingTarget, defaultConfig());\n      var path = 'file://' + testPackage;\n      var resolver = new PluginResolver(path);\n      resolver.resolve().catch(function (e) {\n        expect(e.message).to.equal('No version found that was able to satisfy *');\n        expect(e.code).to.equal('ENORESTARGET');\n        next();\n      });\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should throw 'Resolver does not accept version ranges'","suites":["pluginResolverFactory",".resolve"],"updatePoint":{"line":216,"column":62,"index":6769},"line":216,"code":"    it(\"should throw 'Resolver does not accept version ranges'\", function (next) {\n      var mockPluginResolverWithInvalidTarget = function resolver(bower) {\n        return {\n          match: function (source) {\n            return true;\n          },\n          releases: null,\n          fetch: function (endpoint, cached) {\n            if (cached && cached.version) {\n              return;\n            }\n\n            return {\n              tempPath: '/temp/path',\n              removeIgnores: true\n            };\n          }\n        };\n      };\n\n      var PluginResolver = pluginResolverFactory(mockPluginResolverWithInvalidTarget, defaultConfig());\n      var path = 'file://' + testPackage;\n      var resolver = new PluginResolver({\n        source: path,\n        target: '2.0.0'\n      });\n      resolver.resolve().catch(function (e) {\n        expect(e.message).to.equal('Resolver does not accept version ranges (2.0.0)');\n        next();\n      });\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should throw 'Resolver does not implement the \"fetch\" method.'","suites":["pluginResolverFactory",".resolve"],"updatePoint":{"line":247,"column":72,"index":7735},"line":247,"code":"    it('should throw \\'Resolver does not implement the \"fetch\" method.\\'', function (next) {\n      var mockPluginResolverWithoutFetch = function resolver(bower) {\n        return {\n          match: function (source) {\n            return true;\n          },\n          releases: function (source) {\n            return [{\n              target: 'v1.0.0',\n              version: '1.0.0'\n            }, {\n              target: 'v1.0.1',\n              version: '1.0.1'\n            }];\n          },\n          fetch: null\n        };\n      };\n\n      var PluginResolver = pluginResolverFactory(mockPluginResolverWithoutFetch, defaultConfig());\n      var path = 'file://' + testPackage;\n      var resolver = new PluginResolver(path);\n      resolver.resolve().catch(function (e) {\n        expect(e.message).to.equal('Resolver does not implement the \"fetch\" method.');\n        next();\n      });\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should throw 'Resolver did not provide path to extracted contents of package'","suites":["pluginResolverFactory",".resolve"],"updatePoint":{"line":274,"column":85,"index":8635},"line":274,"code":"    it(\"should throw 'Resolver did not provide path to extracted contents of package'\", function (next) {\n      var mockPluginResolverWithoutTempPath = function resolver(bower) {\n        return {\n          match: function (source) {\n            return true;\n          },\n          releases: function (source) {\n            return [{\n              target: 'v1.0.0',\n              version: '1.0.0'\n            }, {\n              target: 'v1.0.1',\n              version: '1.0.1'\n            }];\n          },\n          fetch: function (endpoint, cached) {\n            if (cached && cached.version) {\n              return;\n            }\n\n            return {\n              tempPath: null,\n              removeIgnores: true\n            };\n          }\n        };\n      };\n\n      var PluginResolver = pluginResolverFactory(mockPluginResolverWithoutTempPath, defaultConfig());\n      var path = 'file://' + testPackage;\n      var resolver = new PluginResolver(path);\n      resolver.resolve().catch(function (e) {\n        expect(e.message).to.equal('Resolver did not provide path to extracted contents of package.');\n        next();\n      });\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should accept mockPluginResolverWithReleasesFn","suites":["pluginResolverFactory",".isTargetable"],"updatePoint":{"line":312,"column":54,"index":9792},"line":312,"code":"    it('should accept mockPluginResolverWithReleasesFn', function () {\n      var PluginResolver = pluginResolverFactory(mockPluginResolver, defaultConfig());\n      expect(PluginResolver.isTargetable()).to.be.ok();\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should reject mockPluginResolverWithoutReleasesFn","suites":["pluginResolverFactory",".isTargetable"],"updatePoint":{"line":316,"column":57,"index":10017},"line":316,"code":"    it('should reject mockPluginResolverWithoutReleasesFn', function () {\n      var mockPluginResolverWithoutReleasesFn = function resolver(bower) {\n        return {\n          match: function (source) {\n            return true;\n          },\n          locate: function (source) {\n            return source;\n          },\n          fetch: function (endpoint, cached) {\n            if (cached && cached.version) {\n              return;\n            }\n\n            return {\n              tempPath: 'some/tmp/path',\n              removeIgnores: true\n            };\n          }\n        };\n      };\n\n      var PluginResolver = pluginResolverFactory(mockPluginResolverWithoutReleasesFn, defaultConfig());\n      expect(PluginResolver.isTargetable()).to.not.be.ok();\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"","suites":["pluginResolverFactory",".clearRuntimeCache"],"updatePoint":{"line":343,"column":8,"index":10784},"line":343,"code":"    it('', function () {//Unable to test private variable `resolver`\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should throw when plugin does not implement .match","suites":["pluginResolverFactory",".match"],"updatePoint":{"line":347,"column":58,"index":10952},"line":347,"code":"    it('should throw when plugin does not implement .match', function () {\n      var mockPluginResolverWithoutMatch = function resolver(bower) {\n        return {\n          releases: function (source) {\n            return [{\n              target: 'v1.0.0',\n              version: '1.0.0'\n            }, {\n              target: 'v1.0.1',\n              version: '1.0.1'\n            }];\n          },\n          fetch: function (endpoint, cached) {\n            if (cached && cached.version) {\n              return;\n            }\n\n            return {\n              tempPath: 'some/temp/path',\n              removeIgnores: true\n            };\n          }\n        };\n      };\n\n      var PluginResolver = pluginResolverFactory(mockPluginResolverWithoutMatch, defaultConfig());\n      var source = 'git://github.com/jquery/jquery.git';\n      expect(function () {\n        PluginResolver.match(source);\n      }).to.throwException(createError('Resolver is missing \"match\"' + 'method.', 'ERESOLVERAPI'));\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should match given source","suites":["pluginResolverFactory",".match"],"updatePoint":{"line":378,"column":33,"index":11925},"line":378,"code":"    it('should match given source', function () {\n      var PluginResolver = pluginResolverFactory(mockPluginResolver, defaultConfig());\n      var source = 'git://github.com/jquery/jquery.git';\n      PluginResolver.match(source).then(function (result) {\n        expect(result).to.be.ok();\n      });\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should return source when plugin does not implement .locate","suites":["pluginResolverFactory",".locate"],"updatePoint":{"line":387,"column":67,"index":12308},"line":387,"code":"    it('should return source when plugin does not implement .locate', function () {\n      var mockPluginResolverWithoutLocate = function resolver(bower) {\n        return {\n          match: function (source) {\n            return true;\n          },\n          releases: function (source) {\n            return [{\n              target: 'v1.0.0',\n              version: '1.0.0'\n            }, {\n              target: 'v1.0.1',\n              version: '1.0.1'\n            }];\n          },\n          fetch: function (endpoint, cached) {\n            if (cached && cached.version) {\n              return;\n            }\n\n            return {\n              tempPath: '/temp/path',\n              removeIgnores: true\n            };\n          }\n        };\n      };\n\n      var PluginResolver = pluginResolverFactory(mockPluginResolverWithoutLocate, defaultConfig());\n      var path = 'file://' + testPackage;\n      expect(PluginResolver.locate(path)).to.be(path);\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should locate the source","suites":["pluginResolverFactory",".locate"],"updatePoint":{"line":419,"column":32,"index":13228},"line":419,"code":"    it('should locate the source', function () {\n      var PluginResolver = pluginResolverFactory(mockPluginResolver, defaultConfig());\n      var source = 'jquery/jquery';\n      PluginResolver.locate(source).then(function (result) {\n        expect(result).to.be(source);\n      });\n    });","file":"core/resolvers/pluginResolverFactory.js","skipped":false,"dir":"test"},{"name":"should return the resolver source","suites":["Resolver",".getSource"],"updatePoint":{"line":56,"column":41,"index":1281},"line":56,"code":"    it('should return the resolver source', function () {\n      var resolver = create('foo');\n      expect(resolver.getSource()).to.equal('foo');\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should return the resolver name","suites":["Resolver",".getName"],"updatePoint":{"line":62,"column":39,"index":1476},"line":62,"code":"    it('should return the resolver name', function () {\n      var resolver = create({\n        source: 'foo',\n        name: 'bar'\n      });\n      expect(resolver.getName()).to.equal('bar');\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should return the resolver source if none is specified (default guess mechanism)","suites":["Resolver",".getName"],"updatePoint":{"line":69,"column":88,"index":1722},"line":69,"code":"    it('should return the resolver source if none is specified (default guess mechanism)', function () {\n      var resolver = create('foo');\n      expect(resolver.getName()).to.equal('foo');\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should return the resolver target","suites":["Resolver",".getTarget"],"updatePoint":{"line":75,"column":41,"index":1919},"line":75,"code":"    it('should return the resolver target', function () {\n      var resolver = create({\n        source: 'foo',\n        target: '~2.1.0'\n      });\n      expect(resolver.getTarget()).to.equal('~2.1.0');\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should return * if none was configured","suites":["Resolver",".getTarget"],"updatePoint":{"line":82,"column":46,"index":2133},"line":82,"code":"    it('should return * if none was configured', function () {\n      var resolver = create('foo');\n      expect(resolver.getTarget()).to.equal('*');\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should return * if latest was configured (for backwards compatibility)","suites":["Resolver",".getTarget"],"updatePoint":{"line":86,"column":78,"index":2322},"line":86,"code":"    it('should return * if latest was configured (for backwards compatibility)', function () {\n      var resolver = create('foo');\n      expect(resolver.getTarget()).to.equal('*');\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should throw an error if already working (resolving)","suites":["Resolver",".hasNew"],"updatePoint":{"line":103,"column":60,"index":2805},"line":103,"code":"    it('should throw an error if already working (resolving)', function (next) {\n      var resolver = create('foo');\n      var succeeded;\n\n      resolver._resolve = function () {};\n\n      resolver.resolve().then(function () {\n        // Test if resolve can be called again when done\n        resolver.resolve().then(function () {\n          next(succeeded ? new Error('Should have failed') : null);\n        });\n      }).done();\n      resolver.hasNew({}).then(function () {\n        succeeded = true;\n      }, function (err) {\n        expect(err).to.be.an(Error);\n        expect(err.code).to.equal('EWORKING');\n        expect(err.message).to.match(/already working/i);\n      });\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should throw an error if already working (checking for newer version)","suites":["Resolver",".hasNew"],"updatePoint":{"line":123,"column":77,"index":3505},"line":123,"code":"    it('should throw an error if already working (checking for newer version)', function (next) {\n      var resolver = create('foo');\n      var succeeded;\n      resolver.hasNew({}).then(function () {\n        // Test if hasNew can be called again when done\n        resolver.hasNew({}).then(function () {\n          next(succeeded ? new Error('Should have failed') : null);\n        });\n      }).done();\n      resolver.hasNew({}).then(function () {\n        succeeded = true;\n      }, function (err) {\n        expect(err).to.be.an(Error);\n        expect(err.code).to.equal('EWORKING');\n        expect(err.message).to.match(/already working/i);\n      });\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should resolve to true by default","suites":["Resolver",".hasNew"],"updatePoint":{"line":140,"column":41,"index":4126},"line":140,"code":"    it('should resolve to true by default', function (next) {\n      var resolver = create('foo');\n      resolver.hasNew({}).then(function (hasNew) {\n        expect(hasNew).to.equal(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should call _hasNew with the package meta","suites":["Resolver",".hasNew"],"updatePoint":{"line":147,"column":49,"index":4363},"line":147,"code":"    it('should call _hasNew with the package meta', function (next) {\n      var resolver = create('foo');\n      var meta;\n\n      resolver._hasNew = function (pkgMeta) {\n        meta = pkgMeta;\n        return Q.resolve(true);\n      };\n\n      resolver.hasNew({\n        name: 'test'\n      }).then(function () {\n        expect(meta).to.be.an('object');\n        expect(meta.name).to.equal('test');\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should not read the package meta if already passed","suites":["Resolver",".hasNew"],"updatePoint":{"line":164,"column":58,"index":4806},"line":164,"code":"    it('should not read the package meta if already passed', function (next) {\n      var resolver = create('foo');\n      var meta;\n\n      resolver._hasNew = function (pkgMeta) {\n        meta = pkgMeta;\n        return Q.resolve(true);\n      };\n\n      resolver.hasNew({\n        name: 'foo'\n      }).then(function () {\n        expect(meta).to.be.an('object');\n        expect(meta.name).to.equal('foo');\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should reject the promise if _resolve is not implemented","suites":["Resolver",".resolve"],"updatePoint":{"line":183,"column":64,"index":5296},"line":183,"code":"    it('should reject the promise if _resolve is not implemented', function (next) {\n      var resolver = create('foo');\n      resolver.resolve().then(function () {\n        next(new Error('Should have rejected the promise'));\n      }, function (err) {\n        expect(err).to.be.an(Error);\n        expect(err.message).to.contain('_resolve not implemented');\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should throw an error if already working (resolving)","suites":["Resolver",".resolve"],"updatePoint":{"line":193,"column":60,"index":5690},"line":193,"code":"    it('should throw an error if already working (resolving)', function (next) {\n      var resolver = create('foo');\n      var succeeded;\n\n      resolver._resolve = function () {};\n\n      resolver.resolve().then(function () {\n        // Test if resolve can be called again when done\n        resolver.resolve().then(function () {\n          next(succeeded ? new Error('Should have failed') : null);\n        });\n      }).done();\n      resolver.resolve().then(function () {\n        succeeded = true;\n      }, function (err) {\n        expect(err).to.be.an(Error);\n        expect(err.code).to.equal('EWORKING');\n        expect(err.message).to.match(/already working/i);\n      });\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should throw an error if already working (checking newer version)","suites":["Resolver",".resolve"],"updatePoint":{"line":213,"column":73,"index":6385},"line":213,"code":"    it('should throw an error if already working (checking newer version)', function (next) {\n      var resolver = create('foo');\n      var succeeded;\n\n      resolver._resolve = function () {};\n\n      resolver.hasNew({}).then(function () {\n        // Test if hasNew can be called again when done\n        resolver.hasNew({}).then(function () {\n          next(succeeded ? new Error('Should have failed') : null);\n        });\n      }).done();\n      resolver.resolve().then(function () {\n        succeeded = true;\n      }, function (err) {\n        expect(err).to.be.an(Error);\n        expect(err.code).to.equal('EWORKING');\n        expect(err.message).to.match(/already working/i);\n      });\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should call all the functions necessary to resolve by the correct order","suites":["Resolver",".resolve"],"updatePoint":{"line":233,"column":79,"index":7087},"line":233,"code":"    it('should call all the functions necessary to resolve by the correct order', function (next) {\n      var resolver;\n\n      function DummyResolver() {\n        Resolver.apply(this, arguments);\n        this._stack = [];\n      }\n\n      util.inherits(DummyResolver, Resolver);\n\n      DummyResolver.prototype.getStack = function () {\n        return this._stack;\n      };\n\n      DummyResolver.prototype.resolve = function () {\n        this._stack = [];\n        return Resolver.prototype.resolve.apply(this, arguments);\n      };\n\n      DummyResolver.prototype._createTempDir = function () {\n        this._stack.push('before _createTempDir');\n\n        return Resolver.prototype._createTempDir.apply(this, arguments).then(function (val) {\n          this._stack.push('after _createTempDir');\n\n          return val;\n        }.bind(this));\n      };\n\n      DummyResolver.prototype._resolve = function () {};\n\n      DummyResolver.prototype._readJson = function () {\n        this._stack.push('before _readJson');\n\n        return Resolver.prototype._readJson.apply(this, arguments).then(function (val) {\n          this._stack.push('after _readJson');\n\n          return val;\n        }.bind(this));\n      };\n\n      DummyResolver.prototype._applyPkgMeta = function () {\n        this._stack.push('before _applyPkgMeta');\n\n        return Resolver.prototype._applyPkgMeta.apply(this, arguments).then(function (val) {\n          this._stack.push('after _applyPkgMeta');\n\n          return val;\n        }.bind(this));\n      };\n\n      DummyResolver.prototype._savePkgMeta = function () {\n        this._stack.push('before _savePkgMeta');\n\n        return Resolver.prototype._savePkgMeta.apply(this, arguments).then(function (val) {\n          this._stack.push('after _savePkgMeta');\n\n          return val;\n        }.bind(this));\n      };\n\n      resolver = new DummyResolver({\n        source: 'foo'\n      }, config, logger);\n      resolver.resolve().then(function () {\n        expect(resolver.getStack()).to.eql(['before _createTempDir', 'after _createTempDir', 'before _readJson', 'after _readJson', // Both below are called in parallel\n        'before _applyPkgMeta', 'after _applyPkgMeta', 'before _savePkgMeta', 'after _savePkgMeta']);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should resolve with the canonical dir (folder)","suites":["Resolver",".resolve"],"updatePoint":{"line":303,"column":54,"index":9315},"line":303,"code":"    it('should resolve with the canonical dir (folder)', function (next) {\n      var resolver = create('foo');\n\n      resolver._resolve = function () {};\n\n      resolver.resolve().then(function (folder) {\n        expect(folder).to.be.a('string');\n        expect(fs.existsSync(folder)).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should return null if resolver is not yet resolved","suites":["Resolver",".getTempDir"],"updatePoint":{"line":316,"column":58,"index":9704},"line":316,"code":"    it('should return null if resolver is not yet resolved', function () {\n      var resolver = create('foo');\n      expect(resolver.getTempDir() == null).to.be(true);\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should still return null if resolve failed","suites":["Resolver",".getTempDir"],"updatePoint":{"line":320,"column":50,"index":9872},"line":320,"code":"    it('should still return null if resolve failed', function () {\n      it('should still return null', function (next) {\n        var resolver = create('foo');\n\n        resolver._resolve = function () {\n          throw new Error(\"I've failed to resolve\");\n        };\n\n        resolver.resolve().fail(function () {\n          expect(resolver.getTempDir() == null).to.be(true);\n          next();\n        });\n      });\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should still return null","suites":["Resolver",".getTempDir"],"updatePoint":{"line":321,"column":34,"index":9923},"line":321,"code":"      it('should still return null', function (next) {\n        var resolver = create('foo');\n\n        resolver._resolve = function () {\n          throw new Error(\"I've failed to resolve\");\n        };\n\n        resolver.resolve().fail(function () {\n          expect(resolver.getTempDir() == null).to.be(true);\n          next();\n        });\n      });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should return the canonical dir (folder) if resolve succeeded","suites":["Resolver",".getTempDir"],"updatePoint":{"line":334,"column":69,"index":10314},"line":334,"code":"    it('should return the canonical dir (folder) if resolve succeeded', function (next) {\n      var resolver = create('foo');\n\n      resolver._resolve = function () {};\n\n      resolver.resolve().then(function () {\n        var dir = resolver.getTempDir();\n        expect(dir).to.be.a('string');\n        expect(fs.existsSync(dir)).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should return null if resolver is not yet resolved","suites":["Resolver",".getPkgMeta"],"updatePoint":{"line":348,"column":58,"index":10732},"line":348,"code":"    it('should return null if resolver is not yet resolved', function () {\n      var resolver = create('foo');\n      expect(resolver.getPkgMeta() == null).to.be(true);\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should still return null if resolve failed","suites":["Resolver",".getPkgMeta"],"updatePoint":{"line":352,"column":50,"index":10900},"line":352,"code":"    it('should still return null if resolve failed', function () {\n      it('should still return null', function (next) {\n        var resolver = create('foo');\n\n        resolver._resolve = function () {\n          throw new Error(\"I've failed to resolve\");\n        };\n\n        resolver.resolve().fail(function () {\n          expect(resolver.getPkgMeta() == null).to.be(true);\n          next();\n        });\n      });\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should still return null","suites":["Resolver",".getPkgMeta"],"updatePoint":{"line":353,"column":34,"index":10951},"line":353,"code":"      it('should still return null', function (next) {\n        var resolver = create('foo');\n\n        resolver._resolve = function () {\n          throw new Error(\"I've failed to resolve\");\n        };\n\n        resolver.resolve().fail(function () {\n          expect(resolver.getPkgMeta() == null).to.be(true);\n          next();\n        });\n      });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should return the package meta if resolve succeeded","suites":["Resolver",".getPkgMeta"],"updatePoint":{"line":366,"column":59,"index":11332},"line":366,"code":"    it('should return the package meta if resolve succeeded', function (next) {\n      var resolver = create('foo');\n\n      resolver._resolve = function () {};\n\n      resolver.resolve().then(function () {\n        expect(resolver.getPkgMeta()).to.be.an('object');\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should create a directory inside a \"username/bower\" folder, located within the OS temp folder","suites":["Resolver","._createTempDir"],"updatePoint":{"line":378,"column":101,"index":11727},"line":378,"code":"    it('should create a directory inside a \"username/bower\" folder, located within the OS temp folder', function (next) {\n      var resolver = create('foo');\n\n      resolver._createTempDir().then(function (dir) {\n        var dirname;\n        var osTempDir;\n        expect(dir).to.be.a('string');\n        expect(fs.existsSync(dir)).to.be(true);\n        dirname = path.dirname(dir);\n        osTempDir = path.resolve(tmp.tmpdir);\n        expect(dir.indexOf(osTempDir)).to.be(0);\n        expect(dir.indexOf(config.tmp)).to.be(0);\n        expect(path.basename(dirname)).to.equal('bower');\n        expect(path.dirname(path.dirname(dirname))).to.equal(osTempDir);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should set the dir mode the same as the process","suites":["Resolver","._createTempDir"],"updatePoint":{"line":395,"column":55,"index":12379},"line":395,"code":"    it('should set the dir mode the same as the process', function (next) {\n      var resolver = create('foo');\n\n      resolver._createTempDir().then(function (dir) {\n        var stat = fs.statSync(dir);\n        var expectedMode = dirMode0777 & ~process.umask();\n        expect(stat.mode).to.equal(expectedMode);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should remove the folder after execution","suites":["Resolver","._createTempDir"],"updatePoint":{"line":405,"column":48,"index":12726},"line":405,"code":"    it('should remove the folder after execution', function (next) {\n      this.timeout(15000); // Give some time to execute\n\n      rimraf(config.tmp, function (err) {\n        if (err) return next(err);\n        cmd('node', ['test/assets/test-temp-dir/test.js'], {\n          cwd: path.resolve(__dirname, '../../..')\n        }).then(function () {\n          expect(fs.existsSync(config.tmp)).to.be(true);\n          expect(fs.readdirSync(config.tmp)).to.eql([]);\n          next();\n        }, function (err) {\n          next(new Error(err.details));\n        }).done();\n      });\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should remove the folder on an uncaught exception","suites":["Resolver","._createTempDir"],"updatePoint":{"line":421,"column":57,"index":13317},"line":421,"code":"    it('should remove the folder on an uncaught exception', function (next) {\n      rimraf(config.tmp, function (err) {\n        if (err) return next(err);\n        cmd('node', ['test/assets/test-temp-dir/test-exception.js'], {\n          cwd: path.resolve(__dirname, '../../..')\n        }).then(function () {\n          next(new Error('The command should have failed'));\n        }, function () {\n          expect(fs.existsSync(config.tmp)).to.be(true);\n          expect(fs.readdirSync(config.tmp)).to.eql([]);\n          next();\n        }).done();\n      });\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should set _tempDir with the created directory","suites":["Resolver","._createTempDir"],"updatePoint":{"line":435,"column":54,"index":13876},"line":435,"code":"    it('should set _tempDir with the created directory', function (next) {\n      var resolver = create('foo');\n\n      resolver._createTempDir().then(function (dir) {\n        expect(resolver._tempDir).to.be.ok();\n        expect(resolver._tempDir).to.equal(dir);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should remove @ from directory names","suites":["Resolver","._createTempDir"],"updatePoint":{"line":444,"column":44,"index":14168},"line":444,"code":"    it('should remove @ from directory names', function (next) {\n      var resolver = create('foo@bar');\n\n      resolver._createTempDir().then(function (dir) {\n        expect(resolver._tempDir).to.be.ok();\n        expect(resolver._tempDir.indexOf('@')).to.equal(-1);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should not error out if temporary dir is not yet created","suites":["Resolver","._cleanTempDir"],"updatePoint":{"line":455,"column":64,"index":14545},"line":455,"code":"    it('should not error out if temporary dir is not yet created', function (next) {\n      var resolver = create('foo');\n\n      resolver._cleanTempDir().then(next.bind(null)).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should delete the temporary folder contents","suites":["Resolver","._cleanTempDir"],"updatePoint":{"line":460,"column":51,"index":14723},"line":460,"code":"    it('should delete the temporary folder contents', function (next) {\n      var resolver = create('foo');\n\n      resolver._createTempDir().then(resolver._cleanTempDir.bind(resolver)).then(function (dir) {\n        expect(dir).to.equal(resolver.getTempDir());\n        expect(fs.readdirSync(dir).length).to.be(0);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should keep the mode","suites":["Resolver","._cleanTempDir"],"updatePoint":{"line":469,"column":28,"index":15054},"line":469,"code":"    it('should keep the mode', function (next) {\n      var resolver = create('foo');\n\n      resolver._createTempDir().then(resolver._cleanTempDir.bind(resolver)).then(function (dir) {\n        var stat = fs.statSync(dir);\n        var expectedMode = dirMode0777 & ~process.umask();\n        expect(stat.mode).to.equal(expectedMode);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should keep the dir path","suites":["Resolver","._cleanTempDir"],"updatePoint":{"line":479,"column":32,"index":15429},"line":479,"code":"    it('should keep the dir path', function (next) {\n      var resolver = create('foo');\n      var tempDir;\n\n      resolver._createTempDir().then(function (dir) {\n        tempDir = dir;\n        return resolver._cleanTempDir();\n      }).then(function (dir) {\n        expect(dir).to.equal(tempDir);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should read the bower.json file","suites":["Resolver","._readJson"],"updatePoint":{"line":496,"column":39,"index":15888},"line":496,"code":"    it('should read the bower.json file', function (next) {\n      var resolver = create('foo');\n      mkdirp.sync(tempDir);\n      fs.writeFileSync(path.join(tempDir, 'bower.json'), JSON.stringify({\n        name: 'foo',\n        version: '0.0.0'\n      }));\n      fs.writeFileSync(path.join(tempDir, 'component.json'), JSON.stringify({\n        name: 'bar',\n        version: '0.0.0'\n      }));\n\n      resolver._readJson(tempDir).then(function (meta) {\n        expect(meta).to.be.an('object');\n        expect(meta.name).to.equal('foo');\n        expect(meta.version).to.equal('0.0.0');\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should fallback to component.json (notifying a warn)","suites":["Resolver","._readJson"],"updatePoint":{"line":515,"column":60,"index":16530},"line":515,"code":"    it('should fallback to component.json (notifying a warn)', function (next) {\n      var resolver = create('foo');\n      var notified = false;\n      mkdirp.sync(tempDir);\n      fs.writeFileSync(path.join(tempDir, 'component.json'), JSON.stringify({\n        name: 'bar',\n        version: '0.0.0'\n      }));\n      logger.on('log', function (log) {\n        expect(log).to.be.an('object');\n\n        if (log.level === 'warn' && /deprecated/i.test(log.id)) {\n          expect(log.message).to.contain('component.json');\n          notified = true;\n        }\n      });\n\n      resolver._readJson(tempDir).then(function (meta) {\n        expect(meta).to.be.an('object');\n        expect(meta.name).to.equal('bar');\n        expect(meta.version).to.equal('0.0.0');\n        expect(notified).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an inferred json if no json file was found","suites":["Resolver","._readJson"],"updatePoint":{"line":540,"column":68,"index":17369},"line":540,"code":"    it('should resolve to an inferred json if no json file was found', function (next) {\n      var resolver = create('foo');\n\n      resolver._readJson(tempDir).then(function (meta) {\n        expect(meta).to.be.an('object');\n        expect(meta.name).to.equal('foo');\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should apply normalisation, defaults and validation to the json object","suites":["Resolver","._readJson"],"line":549,"code":"    it.skip('should apply normalisation, defaults and validation to the json object');","file":"core/resolvers/resolver.js","skipped":true,"dir":"test"},{"name":"should resolve with the same package meta","suites":["Resolver","._applyPkgMeta"],"updatePoint":{"line":555,"column":49,"index":17863},"line":555,"code":"    it('should resolve with the same package meta', function (next) {\n      var resolver = create('foo');\n      var meta = {\n        name: 'foo'\n      };\n      mkdirp.sync(tempDir);\n      resolver._tempDir = tempDir;\n\n      resolver._applyPkgMeta(meta).then(function (retMeta) {\n        expect(retMeta).to.equal(meta); // Test also with the ignore property because the code is different\n\n        meta = {\n          name: 'foo',\n          ignore: ['somefile']\n        };\n        return resolver._applyPkgMeta(meta).then(function (retMeta) {\n          expect(retMeta).to.equal(meta);\n          next();\n        });\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should remove files that match the ignore patterns excluding main files","suites":["Resolver","._applyPkgMeta"],"updatePoint":{"line":576,"column":79,"index":18530},"line":576,"code":"    it('should remove files that match the ignore patterns excluding main files', function (next) {\n      var resolver = create({\n        source: 'foo',\n        name: 'foo'\n      });\n      mkdirp.sync(tempDir); // Checkout test package version 0.2.1 which has a bower.json\n      // with ignores\n\n      cmd('git', ['checkout', '0.2.2'], {\n        cwd: testPackage\n      }) // Copy its contents to the temporary dir\n      .then(function () {\n        return copy.copyDir(testPackage, tempDir);\n      }).then(function () {\n        var json; // This is a very rudimentary check\n        // Complete checks are made in the 'describe' below\n\n        resolver._tempDir = tempDir;\n        json = JSON.parse(fs.readFileSync(path.join(tempDir, 'bower.json')).toString());\n        return resolver._applyPkgMeta(json).then(function () {\n          expect(fs.existsSync(path.join(tempDir, 'foo'))).to.be(true);\n          expect(fs.existsSync(path.join(tempDir, 'baz'))).to.be(true);\n          expect(fs.existsSync(path.join(tempDir, 'test'))).to.be(false);\n          expect(fs.existsSync(path.join(tempDir, 'bower.json'))).to.be(true);\n          expect(fs.existsSync(path.join(tempDir, 'main.js'))).to.be(true);\n          expect(fs.existsSync(path.join(tempDir, 'more/docs'))).to.be(false);\n          expect(fs.existsSync(path.join(tempDir, 'more/assets'))).to.be(false);\n          next();\n        });\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"A blank line matches no files, so it can serve as a separator for readability.","suites":["Resolver","._applyPkgMeta","handling of ignore property according to the .gitignore spec"],"line":608,"code":"      it.skip('A blank line matches no files, so it can serve as a separator for readability.');","file":"core/resolvers/resolver.js","skipped":true,"dir":"test"},{"name":"A line starting with # serves as a comment.","suites":["Resolver","._applyPkgMeta","handling of ignore property according to the .gitignore spec"],"line":609,"code":"      it.skip('A line starting with # serves as a comment.');","file":"core/resolvers/resolver.js","skipped":true,"dir":"test"},{"name":"An optional prefix ! which negates the pattern; any matching file excluded by a previous pattern will become included again...","suites":["Resolver","._applyPkgMeta","handling of ignore property according to the .gitignore spec"],"line":610,"code":"      it.skip('An optional prefix ! which negates the pattern; any matching file excluded by a previous pattern will become included again...', function () {// If a negated pattern matches, this will override lower precedence patterns sources. Put a backslash (\"\\\") in front of the first \"!\" for patterns that begin with a literal \"!\", for example, \"\\!important!.txt\".","file":"core/resolvers/resolver.js","skipped":true,"dir":"test"},{"name":"If the pattern ends with a slash, it is removed for the purpose of the following description, but it would only find a match with a directory...","suites":["Resolver","._applyPkgMeta","handling of ignore property according to the .gitignore spec"],"line":612,"code":"      it.skip('If the pattern ends with a slash, it is removed for the purpose of the following description, but it would only find a match with a directory...', function () {// In other words, foo/ will match a directory foo and paths underneath it, but will not match a regular file or a symbolic link foo (this is consistent with the way how pathspec works in general in git).","file":"core/resolvers/resolver.js","skipped":true,"dir":"test"},{"name":"If the pattern does not contain a slash /, git treats it as a shell glob pattern and checks for a match against the pathname without leading directories.","suites":["Resolver","._applyPkgMeta","handling of ignore property according to the .gitignore spec"],"line":614,"code":"      it.skip('If the pattern does not contain a slash /, git treats it as a shell glob pattern and checks for a match against the pathname without leading directories.');","file":"core/resolvers/resolver.js","skipped":true,"dir":"test"},{"name":"Otherwise, git treats the pattern as a shell glob suitable for consumption by fnmatch(3) with the FNM_PATHNAME flag..","suites":["Resolver","._applyPkgMeta","handling of ignore property according to the .gitignore spec"],"line":615,"code":"      it.skip('Otherwise, git treats the pattern as a shell glob suitable for consumption by fnmatch(3) with the FNM_PATHNAME flag..', function () {// wildcards in the pattern will not match a / in the pathname. For example, \"Documentation/*.html\" matches \"Documentation/git.html\" but not \"Documentation/ppc/ppc.html\" or \"tools/perf/Documentation/perf.html\".","file":"core/resolvers/resolver.js","skipped":true,"dir":"test"},{"name":"should resolve with the same package meta","suites":["Resolver","._savePkgMeta"],"updatePoint":{"line":629,"column":49,"index":21748},"line":629,"code":"    it('should resolve with the same package meta', function (next) {\n      var resolver = create('foo');\n      var meta = {\n        name: 'foo'\n      };\n      resolver._tempDir = tempDir;\n\n      resolver._savePkgMeta(meta).then(function (retMeta) {\n        expect(retMeta).to.equal(meta);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should set the original source and target in package meta file","suites":["Resolver","._savePkgMeta"],"updatePoint":{"line":641,"column":70,"index":22100},"line":641,"code":"    it('should set the original source and target in package meta file', function (next) {\n      var resolver = create({\n        source: 'bar',\n        target: '~2.0.0'\n      });\n      var meta = {\n        name: 'foo'\n      };\n      resolver._tempDir = tempDir;\n\n      resolver._savePkgMeta(meta).then(function (retMeta) {\n        expect(retMeta._source).to.equal('bar');\n        expect(retMeta._target).to.equal('~2.0.0');\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should save the package meta to the package meta file (.bower.json)","suites":["Resolver","._savePkgMeta"],"updatePoint":{"line":657,"column":75,"index":22570},"line":657,"code":"    it('should save the package meta to the package meta file (.bower.json)', function (next) {\n      var resolver = create('foo');\n      resolver._tempDir = tempDir;\n\n      resolver._savePkgMeta({\n        name: 'bar'\n      }).then(function (retMeta) {\n        fs.readFile(path.join(tempDir, '.bower.json'), function (err, contents) {\n          if (err) return next(err);\n          contents = contents.toString();\n          expect(JSON.parse(contents)).to.eql(retMeta);\n          next();\n        });\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should return true by default","suites":["Resolver","#isTargetable"],"updatePoint":{"line":674,"column":37,"index":23105},"line":674,"code":"    it('should return true by default', function () {\n      expect(Resolver.isTargetable()).to.be(true);\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an array by default","suites":["Resolver","#versions"],"updatePoint":{"line":679,"column":45,"index":23270},"line":679,"code":"    it('should resolve to an array by default', function (next) {\n      Resolver.versions().then(function (versions) {\n        expect(versions).to.be.an('array');\n        expect(versions.length).to.be(0);\n        next();\n      }).done();\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"caches for normal name","suites":["Resolver","#isCacheable"],"updatePoint":{"line":688,"column":30,"index":23548},"line":688,"code":"    it('caches for normal name', function () {\n      var resolver = new Resolver({\n        source: 'foo'\n      });\n      expect(resolver.isCacheable()).to.be(true);\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"does not cache for absolute paths","suites":["Resolver","#isCacheable"],"updatePoint":{"line":694,"column":41,"index":23732},"line":694,"code":"    it('does not cache for absolute paths', function () {\n      var resolver = new Resolver({\n        source: '/foo'\n      });\n      expect(resolver.isCacheable()).to.be(false);\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"does not cache for relative paths","suites":["Resolver","#isCacheable"],"updatePoint":{"line":700,"column":41,"index":23918},"line":700,"code":"    it('does not cache for relative paths', function () {\n      var resolver = new Resolver({\n        source: './foo'\n      });\n      expect(resolver.isCacheable()).to.be(false);\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"does not cache for parent paths","suites":["Resolver","#isCacheable"],"updatePoint":{"line":706,"column":39,"index":24103},"line":706,"code":"    it('does not cache for parent paths', function () {\n      var resolver = new Resolver({\n        source: '../foo'\n      });\n      expect(resolver.isCacheable()).to.be(false);\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"does not cache for file:/// prefix","suites":["Resolver","#isCacheable"],"updatePoint":{"line":712,"column":42,"index":24292},"line":712,"code":"    it('does not cache for file:/// prefix', function () {\n      var resolver = new Resolver({\n        source: 'file:///foo'\n      });\n      expect(resolver.isCacheable()).to.be(false);\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"does not cache for windows paths","suites":["Resolver","#isCacheable"],"updatePoint":{"line":718,"column":40,"index":24484},"line":718,"code":"    it('does not cache for windows paths', function () {\n      var resolver = new Resolver({\n        source: '..\\\\foo'\n      });\n      expect(resolver.isCacheable()).to.be(false);\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"does not cache for windows absolute paths","suites":["Resolver","#isCacheable"],"updatePoint":{"line":724,"column":49,"index":24681},"line":724,"code":"    it('does not cache for windows absolute paths', function () {\n      var resolver = new Resolver({\n        source: 'C:\\\\foo'\n      });\n      expect(resolver.isCacheable()).to.be(false);\n    });","file":"core/resolvers/resolver.js","skipped":false,"dir":"test"},{"name":"should error out if svn is not installed","suites":["SvnResolver","misc"],"line":54,"code":"    it.skip('should error out if svn is not installed');","file":"core/resolvers/svnResolver.js","skipped":true,"dir":"test"},{"name":"should setup svn template dir to an empty folder","suites":["SvnResolver","misc"],"line":55,"code":"    it.skip('should setup svn template dir to an empty folder');","file":"core/resolvers/svnResolver.js","skipped":true,"dir":"test"},{"name":"should be true when the resolution type is different","suites":["SvnResolver",".hasNew"],"updatePoint":{"line":68,"column":60,"index":1832},"line":68,"code":"    it('should be true when the resolution type is different', function (next) {\n      var resolver;\n      var pkgMeta = {\n        name: 'foo',\n        version: '0.0.0',\n        _resolution: {\n          type: 'version',\n          tag: '0.0.0',\n          commit: 123\n        }\n      };\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          boo: 123 // same commit hash on purpose\n\n        });\n      };\n\n      SvnResolver.branches = function () {\n        return Q.resolve({\n          trunk: '*'\n        });\n      };\n\n      resolver = create('foo');\n      resolver.hasNew(pkgMeta).then(function (hasNew) {\n        expect(hasNew).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should be true when a higher version for a range is available","suites":["SvnResolver",".hasNew"],"updatePoint":{"line":99,"column":69,"index":2544},"line":99,"code":"    it('should be true when a higher version for a range is available', function (next) {\n      var resolver;\n      var pkgMeta = {\n        name: 'foo',\n        version: '1.0.0',\n        _resolution: {\n          type: 'version',\n          tag: '1.0.0',\n          commit: 3\n        }\n      };\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '1.0.0': 2,\n          '1.0.1': 2 // same commit hash on purpose\n\n        });\n      };\n\n      resolver = create('foo');\n      resolver.hasNew(pkgMeta).then(function (hasNew) {\n        expect(hasNew).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should be true when a resolved to a lower version of a range","suites":["SvnResolver",".hasNew"],"updatePoint":{"line":125,"column":68,"index":3164},"line":125,"code":"    it('should be true when a resolved to a lower version of a range', function (next) {\n      var resolver;\n      var pkgMeta = {\n        name: 'foo',\n        version: '1.0.1',\n        _resolution: {\n          type: 'version',\n          tag: '1.0.1',\n          commit: 3\n        }\n      };\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '1.0.0': 2\n        });\n      };\n\n      resolver = create('foo');\n      resolver.hasNew(pkgMeta).then(function (hasNew) {\n        expect(hasNew).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should be false when resolved to the same tag (with same commit hash) for a given range","suites":["SvnResolver",".hasNew"],"updatePoint":{"line":149,"column":95,"index":3757},"line":149,"code":"    it('should be false when resolved to the same tag (with same commit hash) for a given range', function (next) {\n      var resolver;\n      var pkgMeta = {\n        name: 'foo',\n        version: '1.0.1',\n        _resolution: {\n          type: 'version',\n          tag: '1.0.1',\n          commit: 2\n        }\n      };\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '1.0.0': 1,\n          '1.0.1': 2\n        });\n      };\n\n      resolver = create('foo');\n      resolver.hasNew(pkgMeta).then(function (hasNew) {\n        expect(hasNew).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should be true when resolved to the same tag (with different commit hash) for a given range","suites":["SvnResolver",".hasNew"],"updatePoint":{"line":174,"column":99,"index":4377},"line":174,"code":"    it('should be true when resolved to the same tag (with different commit hash) for a given range', function (next) {\n      var resolver;\n      var pkgMeta = {\n        name: 'foo',\n        version: '1.0.1',\n        _resolution: {\n          type: 'version',\n          tag: '1.0.1',\n          commit: 3\n        }\n      };\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '1.0.0': 2,\n          '1.0.1': 4\n        });\n      };\n\n      resolver = create('foo');\n      resolver.hasNew(pkgMeta).then(function (hasNew) {\n        expect(hasNew).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should be false when targeting commit hashes","suites":["SvnResolver",".hasNew"],"updatePoint":{"line":199,"column":52,"index":4949},"line":199,"code":"    it('should be false when targeting commit hashes', function (next) {\n      var resolver;\n      var pkgMeta = {\n        name: 'foo',\n        _resolution: {\n          type: 'commit',\n          commit: 1\n        }\n      };\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '1.0.0': 2\n        });\n      };\n\n      resolver = create('foo');\n      resolver.hasNew(pkgMeta).then(function (hasNew) {\n        expect(hasNew).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should call the necessary functions by the correct order","suites":["SvnResolver","._resolve"],"updatePoint":{"line":224,"column":64,"index":5546},"line":224,"code":"    it('should call the necessary functions by the correct order', function (next) {\n      var resolver;\n\n      function DummyResolver() {\n        SvnResolver.apply(this, arguments);\n        this._stack = [];\n      }\n\n      util.inherits(DummyResolver, SvnResolver);\n      mout.object.mixIn(DummyResolver, SvnResolver);\n\n      DummyResolver.prototype.getStack = function () {\n        return this._stack;\n      };\n\n      DummyResolver.tags = function () {\n        return Q.resolve({\n          '1.0.0': 1\n        });\n      };\n\n      DummyResolver.prototype.resolve = function () {\n        this._stack = [];\n        return SvnResolver.prototype.resolve.apply(this, arguments);\n      };\n\n      DummyResolver.prototype._findResolution = function () {\n        this._stack.push('before _findResolution');\n\n        return SvnResolver.prototype._findResolution.apply(this, arguments).then(function (val) {\n          this._stack.push('after _findResolution');\n\n          return val;\n        }.bind(this));\n      };\n\n      DummyResolver.prototype._export = function () {\n        this._stack.push('before _export');\n\n        return Q.resolve().then(function (val) {\n          this._stack.push('after _export');\n\n          return val;\n        }.bind(this));\n      };\n\n      resolver = new DummyResolver({\n        source: 'foo',\n        target: '1.0.0'\n      }, defaultConfig(), logger);\n      resolver.resolve().then(function () {\n        expect(resolver.getStack()).to.eql(['before _findResolution', 'after _findResolution', 'before _export', 'after _export']);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an object","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":282,"column":35,"index":7201},"line":282,"code":"    it('should resolve to an object', function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({});\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('*').then(function (resolution) {\n        expect(resolution).to.be.an('object');\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve \"*\" to the trunk if a repository has no valid semver tags","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":296,"column":80,"index":7588},"line":296,"code":"    it('should resolve \"*\" to the trunk if a repository has no valid semver tags', function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          'some-tag': 1\n        });\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('*').then(function (resolution) {\n        expect(resolution).to.eql({\n          type: 'branch',\n          branch: 'trunk',\n          commit: '*'\n        });\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve \"*\" to the latest version if a repository has valid semver tags, ignoring pre-releases","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":316,"column":109,"index":8113},"line":316,"code":"    it('should resolve \"*\" to the latest version if a repository has valid semver tags, ignoring pre-releases', function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '0.1.0': 1,\n          'v0.1.1': 2,\n          '0.2.0-rc.1': 3 // Should ignore release candidates\n\n        });\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('*').then(function (resolution) {\n        expect(resolution).to.eql({\n          type: 'version',\n          tag: 'v0.1.1',\n          commit: 2\n        });\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve \"*\" to the latest version if a repository has valid semver tags, not ignoring pre-releases if they are the only versions","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":339,"column":143,"index":8753},"line":339,"code":"    it('should resolve \"*\" to the latest version if a repository has valid semver tags, not ignoring pre-releases if they are the only versions', function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '0.1.0-rc.1': 1,\n          '0.1.0-rc.2': 2\n        });\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('*').then(function (resolution) {\n        expect(resolution).to.eql({\n          type: 'version',\n          tag: '0.1.0-rc.2',\n          commit: 2\n        });\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the latest version that matches a range/version","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":360,"column":73,"index":9272},"line":360,"code":"    it('should resolve to the latest version that matches a range/version', function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '0.1.0': 1,\n          'v0.1.1': 2,\n          '0.2.0': 3,\n          'v0.2.1': 4\n        });\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('~0.2.0').then(function (resolution) {\n        expect(resolution).to.eql({\n          type: 'version',\n          tag: 'v0.2.1',\n          commit: 4\n        });\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to a tag even if target is a range that does not exist","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":383,"column":77,"index":9832},"line":383,"code":"    it('should resolve to a tag even if target is a range that does not exist', function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '1.0': 1\n        });\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('1.0').then(function (resolution) {\n        expect(resolution).to.eql({\n          type: 'tag',\n          tag: '1.0',\n          commit: 1\n        });\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the latest pre-release version that matches a range/version","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":403,"column":85,"index":10320},"line":403,"code":"    it('should resolve to the latest pre-release version that matches a range/version', function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '0.1.0': 1,\n          'v0.1.1': 2,\n          '0.2.0': 3,\n          'v0.2.1-rc.1': 4\n        });\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('~0.2.1').then(function (resolution) {\n        expect(resolution).to.eql({\n          type: 'version',\n          tag: 'v0.2.1-rc.1',\n          commit: 4\n        });\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the exact version if exists","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":426,"column":53,"index":10866},"line":426,"code":"    it('should resolve to the exact version if exists', function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '0.8.1': 1,\n          '0.8.1+build.1': 2,\n          '0.8.1+build.2': 3,\n          '0.8.1+build.3': 4\n        });\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('0.8.1+build.2').then(function (resolution) {\n        expect(resolution).to.eql({\n          type: 'version',\n          tag: '0.8.1+build.2',\n          commit: 3\n        });\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should fail to resolve if none of the versions matched a range/version","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":449,"column":78,"index":11463},"line":449,"code":"    it('should fail to resolve if none of the versions matched a range/version', function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '0.1.0': 1,\n          'v0.1.1': 2\n        });\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('~0.2.0').then(function () {\n        next(new Error('Should have failed'));\n      }, function (err) {\n        expect(err).to.be.an(Error);\n        expect(err.message).to.match(/was able to satisfy ~0.2.0/i);\n        expect(err.details).to.match(/available versions in foo: 0\\.1\\.1, 0\\.1\\.0/i);\n        expect(err.code).to.equal('ENORESTARGET');\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should fail to resolve if there are no versions to match a range/version","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":471,"column":80,"index":12167},"line":471,"code":"    it('should fail to resolve if there are no versions to match a range/version', function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          foo: 1\n        });\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('~0.2.0').then(function () {\n        next(new Error('Should have failed'));\n      }, function (err) {\n        expect(err).to.be.an(Error);\n        expect(err.message).to.match(/was able to satisfy ~0.2.0/i);\n        expect(err.details).to.match(/no versions found in foo/i);\n        expect(err.code).to.equal('ENORESTARGET');\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the specified commit","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":492,"column":46,"index":12791},"line":492,"code":"    it('should resolve to the specified commit', function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          'some-tag': 1\n        });\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('r1').then(function (resolution) {\n        expect(resolution).to.eql({\n          type: 'commit',\n          commit: 1\n        });\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to the specified tag if it exists","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":511,"column":56,"index":13235},"line":511,"code":"    it('should resolve to the specified tag if it exists', function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          'some-tag': 1\n        });\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('some-tag').then(function (resolution) {\n        expect(resolution).to.eql({\n          type: 'tag',\n          tag: 'some-tag',\n          commit: 1\n        });\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should fail to resolve to the specified tag if it doesn't exists","suites":["SvnResolver","._findResolution"],"updatePoint":{"line":531,"column":72,"index":13725},"line":531,"code":"    it(\"should fail to resolve to the specified tag if it doesn't exists\", function (next) {\n      var resolver;\n\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          'some-tag': 2\n        });\n      };\n\n      resolver = create('foo');\n\n      resolver._findResolution('some-branch').then(function () {\n        next(new Error('Should have failed'));\n      }, function (err) {\n        expect(err).to.be.an(Error);\n        expect(err.message).to.match(/target some-branch does not exist/i);\n        expect(err.details).to.match(/available tags: some-tag/i);\n        expect(err.code).to.equal('ENORESTARGET');\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should save the resolution to the .bower.json to be used later by .hasNew","suites":["SvnResolver","._savePkgMeta"],"updatePoint":{"line":563,"column":81,"index":14672},"line":563,"code":"    it('should save the resolution to the .bower.json to be used later by .hasNew', function (next) {\n      var resolver = create('foo');\n      resolver._resolution = {\n        type: 'version',\n        tag: '0.0.1'\n      };\n      resolver._tempDir = tempDir;\n\n      resolver._savePkgMeta({\n        name: 'foo',\n        version: '0.0.1'\n      }).then(function () {\n        return Q.nfcall(fs.readFile, path.join(tempDir, '.bower.json'));\n      }).then(function (contents) {\n        var json = JSON.parse(contents.toString());\n        expect(json._resolution).to.eql(resolver._resolution);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should save the release in the package meta","suites":["SvnResolver","._savePkgMeta"],"updatePoint":{"line":582,"column":51,"index":15271},"line":582,"code":"    it('should save the release in the package meta', function (next) {\n      var resolver = create('foo');\n      var metaFile = path.join(tempDir, '.bower.json'); // Test with type 'version'\n\n      resolver._resolution = {\n        type: 'version',\n        tag: '0.0.1',\n        commit: '1'\n      };\n      resolver._tempDir = tempDir;\n\n      resolver._savePkgMeta({\n        name: 'foo',\n        version: '0.0.1'\n      }).then(function () {\n        return Q.nfcall(fs.readFile, metaFile);\n      }).then(function (contents) {\n        var json = JSON.parse(contents.toString());\n        expect(json._release).to.equal('0.0.1');\n      }) // Test with type 'version' + build metadata\n      .then(function () {\n        resolver._resolution = {\n          type: 'version',\n          tag: '0.0.1+build.5',\n          commit: '1'\n        };\n        return resolver._savePkgMeta({\n          name: 'foo'\n        });\n      }).then(function () {\n        return Q.nfcall(fs.readFile, metaFile);\n      }).then(function (contents) {\n        var json = JSON.parse(contents.toString());\n        expect(json._release).to.equal('0.0.1+build.5');\n      }) // Test with type 'tag'\n      .then(function () {\n        resolver._resolution = {\n          type: 'tag',\n          tag: '0.0.1',\n          commit: '1'\n        };\n        return resolver._savePkgMeta({\n          name: 'foo'\n        });\n      }).then(function () {\n        return Q.nfcall(fs.readFile, metaFile);\n      }).then(function (contents) {\n        var json = JSON.parse(contents.toString());\n        expect(json._release).to.equal('0.0.1');\n      }) // Test with type 'branch'\n      // In this case, it should be the commit\n      .then(function () {\n        resolver._resolution = {\n          type: 'branch',\n          branch: 'foo',\n          commit: '1'\n        };\n        return resolver._savePkgMeta({\n          name: 'foo'\n        });\n      }).then(function () {\n        return Q.nfcall(fs.readFile, metaFile);\n      }).then(function (contents) {\n        var json = JSON.parse(contents.toString());\n        expect(json._release).to.equal('1');\n      }) // Test with type 'commit'\n      .then(function () {\n        resolver._resolution = {\n          type: 'commit',\n          commit: '1'\n        };\n        return resolver._savePkgMeta({\n          name: 'foo'\n        });\n      }).then(function () {\n        return Q.nfcall(fs.readFile, metaFile);\n      }).then(function (contents) {\n        var json = JSON.parse(contents.toString());\n        expect(json._release).to.equal('1');\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should add the version to the package meta if not present and resolution is a version","suites":["SvnResolver","._savePkgMeta"],"updatePoint":{"line":664,"column":93,"index":17880},"line":664,"code":"    it('should add the version to the package meta if not present and resolution is a version', function (next) {\n      var resolver = create('foo');\n      resolver._resolution = {\n        type: 'version',\n        tag: 'v0.0.1'\n      };\n      resolver._tempDir = tempDir;\n\n      resolver._savePkgMeta({\n        name: 'foo'\n      }).then(function () {\n        return Q.nfcall(fs.readFile, path.join(tempDir, '.bower.json'));\n      }).then(function (contents) {\n        var json = JSON.parse(contents.toString());\n        expect(json.version).to.equal('0.0.1');\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should remove the version from the package meta if resolution is not a version","suites":["SvnResolver","._savePkgMeta"],"updatePoint":{"line":682,"column":86,"index":18474},"line":682,"code":"    it('should remove the version from the package meta if resolution is not a version', function (next) {\n      var resolver = create('foo');\n      resolver._resolution = {\n        type: 'commit',\n        commit: '1'\n      };\n      resolver._tempDir = tempDir;\n\n      resolver._savePkgMeta({\n        name: 'foo',\n        version: '0.0.1'\n      }).then(function () {\n        return Q.nfcall(fs.readFile, path.join(tempDir, '.bower.json'));\n      }).then(function (contents) {\n        var json = JSON.parse(contents.toString());\n        expect(json).to.not.have.property('version');\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should warn if the resolution version is different than the package meta version","suites":["SvnResolver","._savePkgMeta"],"updatePoint":{"line":701,"column":88,"index":19099},"line":701,"code":"    it('should warn if the resolution version is different than the package meta version', function (next) {\n      var resolver = create('foo');\n      var notified = false;\n      resolver._resolution = {\n        type: 'version',\n        tag: '0.0.1'\n      };\n      resolver._tempDir = tempDir;\n      logger.on('log', function (log) {\n        expect(log).to.be.an('object');\n\n        if (log.level === 'warn' && log.id === 'mismatch') {\n          expect(log.message).to.match(/\\(0\\.0\\.0\\).*different.*\\(0\\.0\\.1\\)/);\n          notified = true;\n        }\n      });\n\n      resolver._savePkgMeta({\n        name: 'foo',\n        version: '0.0.0'\n      }).then(function () {\n        return Q.nfcall(fs.readFile, path.join(tempDir, '.bower.json'));\n      }).then(function (contents) {\n        var json = JSON.parse(contents.toString());\n        expect(json.version).to.equal('0.0.1');\n        expect(notified).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should not warn if the resolution version and the package meta version are the same","suites":["SvnResolver","._savePkgMeta"],"updatePoint":{"line":730,"column":91,"index":20057},"line":730,"code":"    it('should not warn if the resolution version and the package meta version are the same', function (next) {\n      var resolver = create('foo');\n      var notified = false;\n      resolver._resolution = {\n        type: 'version',\n        tag: 'v0.0.1'\n      };\n      resolver._tempDir = tempDir;\n\n      resolver._savePkgMeta({\n        name: 'foo',\n        version: '0.0.1'\n      }).then(function () {\n        return Q.nfcall(fs.readFile, path.join(tempDir, '.bower.json'));\n      }, null).then(function (contents) {\n        var json = JSON.parse(contents.toString());\n        expect(json.version).to.equal('0.0.1');\n        expect(notified).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should clear tags cache","suites":["SvnResolver","#clearRuntimeCache"],"updatePoint":{"line":759,"column":31,"index":21001},"line":759,"code":"    it('should clear tags cache', function () {\n      CustomSvnResolver._cache.tags.set('foo', {});\n\n      CustomSvnResolver.clearRuntimeCache();\n      expect(CustomSvnResolver._cache.tags.has('foo')).to.be(false);\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should clear versions cache","suites":["SvnResolver","#clearRuntimeCache"],"updatePoint":{"line":765,"column":35,"index":21228},"line":765,"code":"    it('should clear versions cache', function () {\n      CustomSvnResolver._cache.versions.set('foo', {});\n\n      CustomSvnResolver.clearRuntimeCache();\n      expect(CustomSvnResolver._cache.versions.has('foo')).to.be(false);\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an empty array if no tags are found","suites":["SvnResolver","#versions"],"updatePoint":{"line":774,"column":61,"index":21575},"line":774,"code":"    it('should resolve to an empty array if no tags are found', function (next) {\n      SvnResolver.tags = function () {\n        return Q.resolve({});\n      };\n\n      SvnResolver.versions('foo').then(function (versions) {\n        expect(versions).to.be.an('array');\n        expect(versions).to.eql([]);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an empty array if no valid semver tags","suites":["SvnResolver","#versions"],"updatePoint":{"line":785,"column":64,"index":21922},"line":785,"code":"    it('should resolve to an empty array if no valid semver tags', function (next) {\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          foo: 1,\n          bar: 2,\n          baz: 3\n        });\n      };\n\n      SvnResolver.versions('foo').then(function (versions) {\n        expect(versions).to.be.an('array');\n        expect(versions).to.eql([]);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to an array of versions, ignoring invalid semver tags","suites":["SvnResolver","#versions"],"updatePoint":{"line":800,"column":76,"index":22343},"line":800,"code":"    it('should resolve to an array of versions, ignoring invalid semver tags', function (next) {\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '0.2.1': 1,\n          'v0.1.1': 2,\n          '0.1.0': 3,\n          invalid: 4,\n          // invalid\n          '/': 5,\n          // invalid\n          '': 6 // invalid\n\n        });\n      };\n\n      SvnResolver.versions('foo', true).then(function (versions) {\n        expect(versions).to.eql([{\n          version: '0.2.1',\n          tag: '0.2.1',\n          commit: 1\n        }, {\n          version: '0.1.1',\n          tag: 'v0.1.1',\n          commit: 2\n        }, {\n          version: '0.1.0',\n          tag: '0.1.0',\n          commit: 3\n        }]);\n      }).then(function () {\n        return SvnResolver.versions('foo');\n      }).then(function (versions) {\n        expect(versions).to.eql(['0.2.1', '0.1.1', '0.1.0']);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should order the versions according to the semver spec","suites":["SvnResolver","#versions"],"updatePoint":{"line":836,"column":62,"index":23260},"line":836,"code":"    it('should order the versions according to the semver spec', function (next) {\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '0.1.0': 1,\n          '0.1.1+build.11': 2,\n          '0.1.1+build.100': 3,\n          '0.1.1-rc.22': 4,\n          '0.1.1-rc.200': 5,\n          '0.1.1': 6,\n          'v0.2.1': 7\n        });\n      };\n\n      SvnResolver.versions('foo', true).then(function (versions) {\n        expect(versions).to.eql([{\n          version: '0.2.1',\n          tag: 'v0.2.1',\n          commit: '7'\n        }, {\n          version: '0.1.1+build.11',\n          tag: '0.1.1+build.11',\n          commit: '2'\n        }, {\n          version: '0.1.1+build.100',\n          tag: '0.1.1+build.100',\n          commit: '3'\n        }, {\n          version: '0.1.1',\n          tag: '0.1.1',\n          commit: '6'\n        }, {\n          version: '0.1.1-rc.200',\n          tag: '0.1.1-rc.200',\n          commit: '5'\n        }, {\n          version: '0.1.1-rc.22',\n          tag: '0.1.1-rc.22',\n          commit: '4'\n        }, {\n          version: '0.1.0',\n          tag: '0.1.0',\n          commit: '1'\n        }]);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should cache the result for each source","suites":["SvnResolver","#versions"],"updatePoint":{"line":882,"column":47,"index":24419},"line":882,"code":"    it('should cache the result for each source', function (next) {\n      SvnResolver.tags = function (source) {\n        if (source === 'foo') {\n          return Q.resolve({\n            '0.2.1': 123,\n            '0.1.0': 456\n          });\n        }\n\n        return Q.resolve({\n          '0.3.1': 7,\n          '0.3.0': 8\n        });\n      };\n\n      SvnResolver.versions('foo').then(function (versions) {\n        expect(versions).to.eql(['0.2.1', '0.1.0']);\n        return SvnResolver.versions('bar');\n      }).then(function (versions) {\n        expect(versions).to.eql(['0.3.1', '0.3.0']); // Manipulate the cache and check if it resolves for the cached ones\n\n        SvnResolver._cache.versions.get('foo').splice(1, 1);\n\n        SvnResolver._cache.versions.get('bar').splice(1, 1);\n\n        return SvnResolver.versions('foo');\n      }).then(function (versions) {\n        expect(versions).to.eql(['0.2.1']);\n        return SvnResolver.versions('bar');\n      }).then(function (versions) {\n        expect(versions).to.eql(['0.3.1']);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should work if requested in parallel for the same source","suites":["SvnResolver","#versions"],"updatePoint":{"line":916,"column":64,"index":25508},"line":916,"code":"    it('should work if requested in parallel for the same source', function (next) {\n      SvnResolver.tags = function () {\n        return Q.resolve({\n          '0.2.1': 123,\n          '0.1.0': 456\n        });\n      };\n\n      Q.all([SvnResolver.versions('foo'), SvnResolver.versions('foo')]).spread(function (versions1, versions2) {\n        expect(versions1).to.eql(['0.2.1', '0.1.0']);\n        expect(versions2).to.eql(versions1);\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should not include the . (dot)path","suites":["SvnResolver","#parseSubversionListOutput"],"updatePoint":{"line":933,"column":42,"index":26330},"line":933,"code":"    it('should not include the . (dot)path', function () {\n      var actual = SvnResolver.parseSubversionListOutput(list);\n      expect(actual).to.not.have.keys('.');\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should parse path names with alphanumerics, dashes, dots and underscores","suites":["SvnResolver","#parseSubversionListOutput"],"updatePoint":{"line":937,"column":80,"index":26543},"line":937,"code":"    it('should parse path names with alphanumerics, dashes, dots and underscores', function () {\n      var actual = SvnResolver.parseSubversionListOutput(list);\n      expect(actual).to.eql({\n        'branch-name': '12346',\n        branch_name: '12347',\n        'branch.1.2.3': '12348',\n        BranchName: '12349'\n      });\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should guess the name from the path","suites":["SvnResolver",".constructor"],"updatePoint":{"line":949,"column":43,"index":26911},"line":949,"code":"    it('should guess the name from the path', function () {\n      var resolver;\n      resolver = create(helpers.localSource(testPackage));\n      expect(resolver.getName()).to.equal('repo');\n      resolver = create('svn+http://yii.googlecode.com/svn');\n      expect(resolver.getName()).to.equal('svn');\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should export correctly if resolution is a tag","suites":["SvnResolver",".resolve"],"updatePoint":{"line":958,"column":54,"index":27275},"line":958,"code":"    it('should export correctly if resolution is a tag', function (next) {\n      var resolver = create({\n        source: testPackage,\n        target: '0.0.1'\n      });\n      resolver.resolve().then(function (dir) {\n        expect(dir).to.be.a('string');\n        var files = fs.readdirSync(dir);\n        expect(files).to.contain('foo');\n        expect(files).to.not.contain('bar');\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should export correctly if resolution is a commit","suites":["SvnResolver",".resolve"],"updatePoint":{"line":971,"column":57,"index":27700},"line":971,"code":"    it('should export correctly if resolution is a commit', function (next) {\n      var resolver = create({\n        source: testPackage,\n        target: 'r1'\n      });\n      resolver.resolve().then(function (dir) {\n        expect(dir).to.be.a('string');\n        var files = fs.readdirSync(dir);\n        expect(files).to.not.contain('foo');\n        expect(files).to.not.contain('bar');\n        expect(files).to.not.contain('baz');\n        next();\n      }).done();\n    });","file":"core/resolvers/svnResolver.js","skipped":false,"dir":"test"},{"name":"should guess the name from the URL","suites":["UrlResolver",".constructor"],"updatePoint":{"line":49,"column":42,"index":1212},"line":49,"code":"    it('should guess the name from the URL', function () {\n      var resolver = create('http://bower.io/foo.txt');\n      expect(resolver.getName()).to.equal('foo');\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should remove ?part from the URL when guessing the name","suites":["UrlResolver",".constructor"],"updatePoint":{"line":53,"column":63,"index":1406},"line":53,"code":"    it('should remove ?part from the URL when guessing the name', function () {\n      var resolver = create('http://bower.io/foo.txt?bar');\n      expect(resolver.getName()).to.equal('foo');\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should not guess the name or remove ?part from the URL if not guessing","suites":["UrlResolver",".constructor"],"updatePoint":{"line":57,"column":78,"index":1619},"line":57,"code":"    it('should not guess the name or remove ?part from the URL if not guessing', function () {\n      var resolver = create({\n        source: 'http://bower.io/foo.txt?bar',\n        name: 'baz'\n      });\n      expect(resolver.getName()).to.equal('baz');\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should error out if a target was specified","suites":["UrlResolver",".constructor"],"updatePoint":{"line":64,"column":50,"index":1851},"line":64,"code":"    it('should error out if a target was specified', function (next) {\n      var resolver;\n\n      try {\n        resolver = create({\n          source: testPackage,\n          target: '0.0.1'\n        });\n      } catch (err) {\n        expect(err).to.be.an(Error);\n        expect(err.message).to.match(/can\\'t resolve targets/i);\n        expect(err.code).to.equal('ENORESTARGET');\n        return next();\n      }\n\n      next(new Error('Should have thrown'));\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to true if the response is not in the 2xx range","suites":["UrlResolver",".hasNew"],"updatePoint":{"line":92,"column":70,"index":2595},"line":92,"code":"    it('should resolve to true if the response is not in the 2xx range', function (next) {\n      var resolver = create('http://bower.io/foo.js');\n      nock('http://bower.io').head('/foo.js').reply(500);\n      var pkgMeta = {\n        name: 'foo',\n        version: '0.0.0'\n      };\n      resolver.hasNew(pkgMeta).then(function (hasNew) {\n        expect(hasNew).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to true if cache headers changed","suites":["UrlResolver",".hasNew"],"updatePoint":{"line":104,"column":55,"index":2994},"line":104,"code":"    it('should resolve to true if cache headers changed', function (next) {\n      var resolver = create('http://bower.io/foo.js');\n      nock('http://bower.io').head('/foo.js').reply(200, '', {\n        ETag: '686897696a7c876b7e',\n        'Last-Modified': 'Tue, 15 Nov 2012 12:45:26 GMT'\n      });\n      var pkgMeta = {\n        name: 'foo',\n        version: '0.0.0',\n        _cacheHeaders: {\n          ETag: 'fk3454fdmmlw20i9nf',\n          'Last-Modified': 'Tue, 16 Nov 2012 13:35:29 GMT'\n        }\n      };\n      resolver.hasNew(pkgMeta).then(function (hasNew) {\n        expect(hasNew).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to false if cache headers haven't changed","suites":["UrlResolver",".hasNew"],"updatePoint":{"line":123,"column":64,"index":3643},"line":123,"code":"    it(\"should resolve to false if cache headers haven't changed\", function (next) {\n      var resolver = create('http://bower.io/foo.js');\n      nock('http://bower.io').head('/foo.js').reply(200, '', {\n        ETag: '686897696a7c876b7e',\n        'Last-Modified': 'Tue, 15 Nov 2012 12:45:26 GMT'\n      });\n      var pkgMeta = {\n        name: 'foo',\n        version: '0.0.0',\n        _cacheHeaders: {\n          ETag: '686897696a7c876b7e',\n          'Last-Modified': 'Tue, 15 Nov 2012 12:45:26 GMT'\n        }\n      };\n      resolver.hasNew(pkgMeta).then(function (hasNew) {\n        expect(hasNew).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should resolve to true if server responds with 304 (ETag mechanism)","suites":["UrlResolver",".hasNew"],"updatePoint":{"line":142,"column":75,"index":4304},"line":142,"code":"    it('should resolve to true if server responds with 304 (ETag mechanism)', function (next) {\n      var resolver = create('http://bower.io/foo.js');\n      nock('http://bower.io').head('/foo.js').matchHeader('If-None-Match', '686897696a7c876b7e').reply(304, '', {\n        ETag: '686897696a7c876b7e',\n        'Last-Modified': 'Tue, 15 Nov 2012 12:45:26 GMT'\n      });\n      var pkgMeta = {\n        name: 'foo',\n        version: '0.0.0',\n        _cacheHeaders: {\n          ETag: '686897696a7c876b7e',\n          'Last-Modified': 'Tue, 15 Nov 2012 12:45:26 GMT'\n        }\n      };\n      resolver.hasNew(pkgMeta).then(function (hasNew) {\n        expect(hasNew).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should work with redirects","suites":["UrlResolver",".hasNew"],"updatePoint":{"line":161,"column":34,"index":4975},"line":161,"code":"    it('should work with redirects', function (next) {\n      var redirectingUrl = 'http://redirecting-url.com';\n      var redirectingToUrl = 'http://bower.io';\n      var resolver;\n      nock(redirectingUrl).head('/foo.js').reply(302, '', {\n        location: redirectingToUrl + '/foo.js'\n      });\n      nock(redirectingToUrl).head('/foo.js').reply(200, 'foo contents', {\n        ETag: '686897696a7c876b7e',\n        'Last-Modified': 'Tue, 15 Nov 2012 12:45:26 GMT'\n      });\n      var pkgMeta = {\n        name: 'foo',\n        version: '0.0.0',\n        _cacheHeaders: {\n          ETag: '686897696a7c876b7e',\n          'Last-Modified': 'Tue, 15 Nov 2012 12:45:26 GMT'\n        }\n      };\n      resolver = create(redirectingUrl + '/foo.js');\n      resolver.hasNew(pkgMeta).then(function (hasNew) {\n        expect(hasNew).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should download file, renaming it to index","suites":["UrlResolver",".resolve"],"updatePoint":{"line":199,"column":50,"index":6319},"line":199,"code":"    it('should download file, renaming it to index', function (next) {\n      var resolver;\n      nock('http://bower.io').get('/foo.js').reply(200, 'foo contents');\n      resolver = create('http://bower.io/foo.js');\n      resolver.resolve().then(function (dir) {\n        var contents;\n        expect(fs.existsSync(path.join(dir, 'index.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(false);\n        contents = fs.readFileSync(path.join(dir, 'index.js')).toString();\n        expect(contents).to.equal('foo contents');\n        assertMain(dir, 'index.js').then(next.bind(next, null));\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should extract if source is an archive","suites":["UrlResolver",".resolve"],"updatePoint":{"line":212,"column":46,"index":6956},"line":212,"code":"    it('should extract if source is an archive', function (next) {\n      var resolver;\n      nock('http://bower.io').get('/package-zip.zip').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip.zip'));\n      resolver = create('http://bower.io/package-zip.zip');\n      resolver.resolve().then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-zip.zip'))).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should extract if source is an archive (case insensitive)","suites":["UrlResolver",".resolve"],"updatePoint":{"line":223,"column":65,"index":7558},"line":223,"code":"    it('should extract if source is an archive (case insensitive)', function (next) {\n      var resolver;\n      nock('http://bower.io').get('/package-zip.ZIP').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip.zip'));\n      resolver = create('http://bower.io/package-zip.ZIP');\n      resolver.resolve().then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-zip.ZIP'))).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should copy extracted folder contents if archive contains only a folder inside","suites":["UrlResolver",".resolve"],"updatePoint":{"line":234,"column":86,"index":8181},"line":234,"code":"    it('should copy extracted folder contents if archive contains only a folder inside', function (next) {\n      var resolver;\n      nock('http://bower.io').get('/package-zip-folder.zip').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip-folder.zip'));\n      nock('http://bower.io').get('/package-zip.zip').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip-folder.zip'));\n      resolver = create('http://bower.io/package-zip-folder.zip');\n      resolver.resolve().then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-zip'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-zip-folder'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-zip-folder.zip'))).to.be(false);\n        resolver = create({\n          source: 'http://bower.io/package-zip.zip',\n          name: 'package-zip'\n        });\n        return resolver.resolve();\n      }).then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-zip'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-zip.zip'))).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should extract if source is an archive and rename to index if it's only one file inside","suites":["UrlResolver",".resolve"],"updatePoint":{"line":258,"column":95,"index":9617},"line":258,"code":"    it(\"should extract if source is an archive and rename to index if it's only one file inside\", function (next) {\n      var resolver;\n      nock('http://bower.io').get('/package-zip-single-file.zip').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip-single-file.zip'));\n      resolver = create('http://bower.io/package-zip-single-file.zip');\n      resolver.resolve().then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'index.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-zip'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-zip-single-file'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-zip-single-file.zip'))).to.be(false);\n        return assertMain(dir, 'index.js').then(next.bind(next, null));\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should extract if source is an archive and not rename to index if inside it's just a just bower.json/component.json file in it","suites":["UrlResolver",".resolve"],"updatePoint":{"line":270,"column":134,"index":10487},"line":270,"code":"    it(\"should extract if source is an archive and not rename to index if inside it's just a just bower.json/component.json file in it\", function (next) {\n      var resolver;\n      nock('http://bower.io').get('/package-zip-single-bower-json.zip').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip-single-bower-json.zip')).get('/package-zip-single-component-json.zip').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip-single-component-json.zip'));\n      resolver = create('http://bower.io/package-zip-single-bower-json.zip');\n      resolver.resolve().then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'bower.json'))).to.be(true);\n        resolver = create('http://bower.io/package-zip-single-component-json.zip');\n      }).then(function () {\n        return resolver.resolve();\n      }).then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'component.json'))).to.be(true);\n        next();\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should rename single file from a single folder to index when source is an archive","suites":["UrlResolver",".resolve"],"updatePoint":{"line":284,"column":89,"index":11422},"line":284,"code":"    it('should rename single file from a single folder to index when source is an archive', function (next) {\n      var resolver;\n      nock('http://bower.io').get('/package-zip-folder-single-file.zip').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip-folder-single-file.zip'));\n      resolver = create('http://bower.io/package-zip-folder-single-file.zip');\n      resolver.resolve().then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'index.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-zip'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-zip-folder-single-file'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-zip-folder-single-file.zip'))).to.be(false);\n        return assertMain(dir, 'index.js').then(next.bind(next, null));\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should extract if response content-type is an archive","suites":["UrlResolver",".resolve"],"updatePoint":{"line":296,"column":61,"index":12254},"line":296,"code":"    it('should extract if response content-type is an archive', function (next) {\n      var resolver;\n      nock('http://bower.io').get('/package-zip').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip.zip'), {\n        'Content-Type': 'application/zip'\n      }).get('/package-zip2').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip.zip'), {\n        'Content-Type': 'application/zip; charset=UTF-8'\n      }).get('/package-zip3').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip.zip'), {\n        'Content-Type': ' application/zip ; charset=UTF-8'\n      }).get('/package-zip4').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip.zip'), {\n        'Content-Type': '\"application/x-zip\"' // Test with quotes\n\n      }).get('/package-tar').replyWithFile(200, path.resolve(__dirname, '../../assets/package-tar.tar.gz'), {\n        'Content-Type': ' application/x-tgz ; charset=UTF-8'\n      }).get('/package-tar.tar.gz').replyWithFile(200, path.resolve(__dirname, '../../assets/package-tar.tar.gz'), {\n        'Content-Type': ' application/x-tgz ; charset=UTF-8'\n      }).get('/package-tar2.tar.gz').replyWithFile(200, path.resolve(__dirname, '../../assets/package-tar.tar.gz'), {\n        'Content-Type': ' application/octet-stream ; charset=UTF-8'\n      });\n      resolver = create('http://bower.io/package-zip');\n      resolver.resolve().then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-zip'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-zip.zip'))).to.be(false);\n        resolver = create('http://bower.io/package-zip2');\n        return resolver.resolve();\n      }).then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-zip'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-zip3.zip'))).to.be(false);\n        resolver = create('http://bower.io/package-zip3');\n        return resolver.resolve();\n      }).then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-zip'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-zip4.zip'))).to.be(false);\n        resolver = create('http://bower.io/package-zip4');\n        return resolver.resolve();\n      }).then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-tar'))).to.be(false);\n        resolver = create('http://bower.io/package-tar');\n        return resolver.resolve();\n      }).then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-tar'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-tar.tar.gz'))).to.be(false);\n        resolver = create('http://bower.io/package-tar.tar.gz');\n        return resolver.resolve();\n      }).then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-tar'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-tar.tar.gz'))).to.be(false);\n        resolver = create('http://bower.io/package-tar2.tar.gz');\n        return resolver.resolve();\n      }).then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-tar'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-tar.tar.gz'))).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should extract if response content-disposition filename is an archive","suites":["UrlResolver",".resolve"],"updatePoint":{"line":364,"column":77,"index":16476},"line":364,"code":"    it('should extract if response content-disposition filename is an archive', function (next) {\n      var resolver;\n      nock('http://bower.io').get('/package-zip').replyWithFile(200, path.resolve(__dirname, '../../assets/package-zip.zip'), {\n        'Content-Disposition': 'attachment; filename=\"package-zip.zip\"'\n      });\n      resolver = create('http://bower.io/package-zip');\n      resolver.resolve().then(function (dir) {\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'bar.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'package-zip'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'package-zip.zip'))).to.be(false);\n        next();\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should save the release if there's a E-Tag","suites":["UrlResolver",".resolve"],"updatePoint":{"line":378,"column":50,"index":17213},"line":378,"code":"    it(\"should save the release if there's a E-Tag\", function (next) {\n      var resolver;\n      nock('http://bower.io').get('/foo.js').reply(200, 'foo contents', {\n        ETag: '686897696a7c876b7e',\n        'Last-Modified': 'Tue, 15 Nov 2012 12:45:26 GMT'\n      });\n      resolver = create('http://bower.io/foo.js');\n      resolver.resolve().then(function (dir) {\n        assertMain(dir, 'index.js').then(function (pkgMeta) {\n          expect(pkgMeta._release).to.equal('e-tag:686897696a');\n          next();\n        });\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should allow for query strings in URL","suites":["UrlResolver",".resolve"],"updatePoint":{"line":392,"column":45,"index":17756},"line":392,"code":"    it('should allow for query strings in URL', function (next) {\n      var resolver;\n      nock('http://bower.io').get('/foo.js?bar=baz').reply(200, 'foo contents');\n      resolver = create('http://bower.io/foo.js?bar=baz');\n      resolver.resolve().then(function (dir) {\n        var contents;\n        expect(fs.existsSync(path.join(dir, 'index.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(false);\n        expect(fs.existsSync(path.join(dir, 'foo.js?bar=baz'))).to.be(false);\n        contents = fs.readFileSync(path.join(dir, 'index.js')).toString();\n        expect(contents).to.equal('foo contents');\n        assertMain(dir, 'index.js').then(next.bind(next, null));\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should save cache headers","suites":["UrlResolver",".resolve"],"updatePoint":{"line":406,"column":33,"index":18474},"line":406,"code":"    it('should save cache headers', function (next) {\n      var resolver;\n      nock('http://bower.io').get('/foo.js').reply(200, 'foo contents', {\n        ETag: '686897696a7c876b7e',\n        'Last-Modified': 'Tue, 15 Nov 2012 12:45:26 GMT'\n      });\n      resolver = create('http://bower.io/foo.js');\n      resolver.resolve().then(function (dir) {\n        assertMain(dir, 'index.js').then(function (pkgMeta) {\n          expect(pkgMeta._cacheHeaders).to.eql({\n            ETag: '686897696a7c876b7e',\n            'Last-Modified': 'Tue, 15 Nov 2012 12:45:26 GMT'\n          });\n          next();\n        });\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should work with redirects","suites":["UrlResolver",".resolve"],"updatePoint":{"line":423,"column":34,"index":19105},"line":423,"code":"    it('should work with redirects', function (next) {\n      var redirectingUrl = 'http://redirecting-url.com';\n      var redirectingToUrl = 'http://bower.io';\n      var resolver;\n      nock(redirectingUrl).get('/foo.js').reply(302, '', {\n        location: redirectingToUrl + '/foo.js'\n      });\n      nock(redirectingToUrl).get('/foo.js').reply(200, 'foo contents');\n      resolver = create(redirectingUrl + '/foo.js');\n      resolver.resolve().then(function (dir) {\n        var contents;\n        expect(fs.existsSync(path.join(dir, 'index.js'))).to.be(true);\n        expect(fs.existsSync(path.join(dir, 'foo.js'))).to.be(false);\n        contents = fs.readFileSync(path.join(dir, 'index.js')).toString();\n        expect(contents).to.equal('foo contents');\n        assertMain(dir, 'index.js').then(next.bind(next, null));\n      }).done();\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"it should error out if the status code is not within 200-299","suites":["UrlResolver",".resolve"],"line":441,"code":"    it.skip('it should error out if the status code is not within 200-299');","file":"core/resolvers/urlResolver.js","skipped":true,"dir":"test"},{"name":"should report progress when it takes too long to download","suites":["UrlResolver",".resolve"],"line":442,"code":"    it.skip('should report progress when it takes too long to download');","file":"core/resolvers/urlResolver.js","skipped":true,"dir":"test"},{"name":"should work with and without quotes","suites":["UrlResolver",".resolve","content-disposition validation"],"updatePoint":{"line":464,"column":45,"index":21146},"line":464,"code":"      it('should work with and without quotes', function (next) {\n        performTest('attachment; filename=\"package-zip.zip\"', true).then(function () {\n          return performTest('attachment; filename=package-zip.zip', true);\n        }).then(next.bind(next, null)).done();\n      });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should not work with partial quotes","suites":["UrlResolver",".resolve","content-disposition validation"],"updatePoint":{"line":469,"column":45,"index":21432},"line":469,"code":"      it('should not work with partial quotes', function (next) {\n        performTest('attachment; filename=\"package-zip.zip', false).then(function () {\n          // This one works, and the last quote is simply ignored\n          return performTest('attachment; filename=package-zip.zip\"', true);\n        }).then(next.bind(next, null)).done();\n      });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should not work if the filename contain chars other than alphanumerical, dashes, spaces and dots","suites":["UrlResolver",".resolve","content-disposition validation"],"updatePoint":{"line":475,"column":106,"index":21846},"line":475,"code":"      it('should not work if the filename contain chars other than alphanumerical, dashes, spaces and dots', function (next) {\n        performTest('attachment; filename=\"1package01 _-zip.zip\"', true).then(function () {\n          return performTest('attachment; filename=\"package$%\"', false);\n        }).then(function () {\n          return performTest('attachment; filename=packagé', false);\n        }).then(function () {\n          // This one works, but since the filename is truncated once a space is found\n          // the extraction will not happen because the file has no .zip extension\n          return performTest('attachment; filename=1package01 _-zip.zip\"', false);\n        }).then(function () {\n          return performTest('attachment; filename=1package01.zip _-zip.zip\"', true);\n        }).then(next.bind(next, null)).done();\n      });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should trim leading and trailing spaces","suites":["UrlResolver",".resolve","content-disposition validation"],"updatePoint":{"line":488,"column":49,"index":22636},"line":488,"code":"      it('should trim leading and trailing spaces', function (next) {\n        performTest('attachment; filename=\" package.zip \"', true).then(next.bind(next, null)).done();\n      });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should not work if the filename ends with a dot","suites":["UrlResolver",".resolve","content-disposition validation"],"updatePoint":{"line":491,"column":57,"index":22826},"line":491,"code":"      it('should not work if the filename ends with a dot', function (next) {\n        performTest('attachment; filename=\"package.zip.\"', false).then(function () {\n          return performTest('attachment; filename=\"package.zip. \"', false);\n        }).then(function () {\n          return performTest('attachment; filename=package.zip.', false);\n        }).then(function () {\n          return performTest('attachment; filename=\"package.zip .\"', false);\n        }).then(function () {\n          return performTest('attachment; filename=\"package.zip. \"', false);\n        }).then(next.bind(next, null)).done();\n      });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should be case insensitive","suites":["UrlResolver",".resolve","content-disposition validation"],"updatePoint":{"line":502,"column":36,"index":23420},"line":502,"code":"      it('should be case insensitive', function (next) {\n        performTest('attachment; FILENAME=\"package.zip\"', true).then(function () {\n          return performTest('attachment; filename=\"package.ZIP\"', true);\n        }).then(function () {\n          return performTest('attachment; FILENAME=package.zip', true);\n        }).then(function () {\n          return performTest('attachment; filename=package.ZIP', true);\n        }).then(next.bind(next, null)).done();\n      });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should return false","suites":["UrlResolver","#isTargetable"],"updatePoint":{"line":514,"column":27,"index":23942},"line":514,"code":"    it('should return false', function () {\n      expect(UrlResolver.isTargetable()).to.be(false);\n    });","file":"core/resolvers/urlResolver.js","skipped":false,"dir":"test"},{"name":"should run preinstall and postinstall hooks.","suites":["scripts"],"updatePoint":{"line":44,"column":50,"index":1300},"line":44,"code":"  it('should run preinstall and postinstall hooks.', function (next) {\n    bower.commands.install([packageDir], undefined, config).on('end', function (installed) {\n      expect(fs.existsSync(path.join(tempDir, 'preinstall_' + packageName + '_' + packageName))).to.be(true);\n      expect(fs.existsSync(path.join(tempDir, 'postinstall_' + packageName + '_' + packageName))).to.be(true);\n      next();\n    });\n  });","file":"core/scripts.js","skipped":false,"dir":"test"},{"name":"should run preuninstall hook.","suites":["scripts"],"updatePoint":{"line":51,"column":35,"index":1698},"line":51,"code":"  it('should run preuninstall hook.', function (next) {\n    bower.commands.uninstall([packageName], undefined, config).on('end', function (installed) {\n      expect(fs.existsSync(path.join(tempDir, 'preuninstall_' + packageName + '_' + packageName))).to.be(true);\n      next();\n    });\n  });","file":"core/scripts.js","skipped":false,"dir":"test"},{"name":"should run postuninstall hook.","suites":["scripts"],"updatePoint":{"line":57,"column":36,"index":1991},"line":57,"code":"  it('should run postuninstall hook.', function (next) {\n    bower.commands.uninstall([packageName], undefined, config).on('end', function (installed) {\n      expect(fs.existsSync(path.join(tempDir, 'postuninstall_' + packageName + '_' + packageName))).to.be(true);\n      next();\n    });\n  });","file":"core/scripts.js","skipped":false,"dir":"test"},{"name":"should not break anything when no hooks configured.","suites":["scripts"],"updatePoint":{"line":63,"column":57,"index":2306},"line":63,"code":"  it('should not break anything when no hooks configured.', function (next) {\n    bower.commands.uninstall([packageName], undefined, {\n      cwd: tempDir\n    }).on('end', function (installed) {\n      //no exception then we're good\n      next();\n    });\n  });","file":"core/scripts.js","skipped":false,"dir":"test"},{"name":"should reorder packages by dependencies, while trying to maintain order from bower.json, correctly.","suites":["scripts"],"updatePoint":{"line":71,"column":105,"index":2613},"line":71,"code":"  it('should reorder packages by dependencies, while trying to maintain order from bower.json, correctly.', function () {\n    var mockAngularUI = {\n      dependencies: {\n        angular: '*'\n      }\n    };\n    var mockJQuery = {\n      dependencies: {}\n    };\n    var mockAngular = {\n      dependencies: {\n        jquery: '*'\n      }\n    };\n    var mockMoment = {\n      dependencies: {}\n    };\n    var mockSelect2 = {\n      dependencies: {\n        jquery: '*'\n      }\n    };\n    var mockBadPackage = {\n      dependencies: {\n        'something-not-installed': '*'\n      }\n    };\n    var packages = {\n      select2: mockSelect2,\n      'angular-ui': mockAngularUI,\n      jquery: mockJQuery,\n      'bad-package': mockBadPackage,\n      angular: mockAngular,\n      moment: mockMoment\n    };\n    var installed = [];\n    var mockBowerJson = {\n      dependencies: {\n        jquery: '*',\n        select2: '*',\n        'angular-ui': '*',\n        angular: '*',\n        moment: '*'\n      }\n    };\n\n    var ordered = scripts._orderByDependencies(packages, installed, mockBowerJson);\n\n    expect(ordered).to.eql(['jquery', 'select2', 'angular', 'angular-ui', 'moment', 'bad-package']);\n  });","file":"core/scripts.js","skipped":false,"dir":"test"},{"name":"should process scripts with quotes and vars in the cmd properly.","suites":["scripts"],"updatePoint":{"line":121,"column":70,"index":3754},"line":121,"code":"  it('should process scripts with quotes and vars in the cmd properly.', function (next) {\n    config.scripts.preinstall = touchWithPid(' %');\n    bower.commands.install([packageDir], undefined, config).on('end', function (installed) {\n      expect(fs.existsSync(path.join(tempDir, process.pid + ' ' + packageName))).to.be(true);\n      next();\n    });\n  });","file":"core/scripts.js","skipped":false,"dir":"test"},{"name":"logs simple message to stderr","suites":["JsonRenderer"],"updatePoint":{"line":21,"column":35,"index":546},"line":21,"code":"  it('logs simple message to stderr', function () {\n    return helpers.capture(function () {\n      var renderer = new JsonRenderer();\n      renderer.log({\n        id: 'foobar',\n        message: 'hello world'\n      });\n      renderer.end();\n    }).spread(function (stdout, stderr) {\n      expect(stderr).to.eq(normalize(multiline(function () {\n        /*\n        [{\n        \"id\": \"foobar\",\n        \"message\": \"hello world\"\n        }]\n        */\n      })));\n    });\n  });","file":"renderers/JsonRenderer.js","skipped":false,"dir":"test"},{"name":"logs error message to stderr","suites":["JsonRenderer"],"updatePoint":{"line":40,"column":34,"index":1015},"line":40,"code":"  it('logs error message to stderr', function () {\n    return helpers.capture(function () {\n      var renderer = new JsonRenderer();\n      renderer.error({\n        id: 'foobar',\n        message: 'hello world',\n        data: {\n          foo: 'bar'\n        },\n        stacktrace: ['./foo:23', './bar:23']\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stderr).to.eq(normalize(multiline(function () {\n        /*\n        [{\n        \"id\": \"error\",\n        \"data\": {\n        \"foo\": \"bar\"\n        },\n        \"stacktrace\": \"N/A\",\n        \"level\": \"error\",\n        \"message\": \"hello world\"\n        }]\n        */\n      })));\n    });\n  });","file":"renderers/JsonRenderer.js","skipped":false,"dir":"test"},{"name":"prompts for answer","suites":["JsonRenderer"],"updatePoint":{"line":67,"column":24,"index":1652},"line":67,"code":"  it('prompts for answer', function () {\n    var JsonRenderer = jsonRendererWithPrompt({\n      prompt: function (name, opts, callback) {\n        callback(null, 'something2');\n      }\n    });\n    var renderer = new JsonRenderer();\n    return helpers.capture(function () {\n      return renderer.prompt([{\n        type: 'input',\n        name: 'field',\n        message: 'Please enter something',\n        default: 'something'\n      }]).then(function (response) {\n        expect(response.field).to.eq('something2');\n        renderer.end();\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stderr).to.eq(normalize(multiline(function () {\n        /*\n        [{\n        \"type\": \"input\",\n        \"name\": \"field\",\n        \"message\": \"Please enter something\",\n        \"default\": \"something\",\n        \"level\": \"prompt\"\n        }]\n        */\n      })));\n    });\n  });","file":"renderers/JsonRenderer.js","skipped":false,"dir":"test"},{"name":"logs generic simple message","suites":["StandardRenderer"],"updatePoint":{"line":13,"column":33,"index":336},"line":13,"code":"  it('logs generic simple message', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer();\n      renderer.log({\n        id: 'foobar',\n        message: 'hello world'\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.eq(multiline(function () {\n        /*\n        bower foobar        hello world\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"logs simple error","suites":["StandardRenderer"],"updatePoint":{"line":28,"column":23,"index":726},"line":28,"code":"  it('logs simple error', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer();\n      renderer.error({\n        code: 'EFOOBAR',\n        message: 'Hello error'\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stderr).to.eq(multiline(function () {\n        /*\n        bower EFOOBAR       Hello error\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"logs error with details","suites":["StandardRenderer"],"updatePoint":{"line":43,"column":29,"index":1127},"line":43,"code":"  it('logs error with details', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer();\n      renderer.error({\n        code: 'EFOOBAR',\n        message: 'Hello error',\n        details: '  Some awesome details\\nMultiline!    '\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stderr).to.eq(multiline(function () {\n        /*\n        bower EFOOBAR       Hello error\n        Additional error details:\n        Some awesome details\n        Multiline!\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"logs system details in verbose mode","suites":["StandardRenderer"],"updatePoint":{"line":62,"column":41,"index":1681},"line":62,"code":"  it('logs system details in verbose mode', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer(undefined, {\n        verbose: true\n      });\n      renderer.error({\n        code: 'EFOOBAR',\n        message: 'Hello error',\n        details: '  Some awesome details\\nMultiline!    '\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stderr).to.match(new RegExp(multiline(function () {\n        /*\n        System info:\n        Bower version: [^\\r\\n]+\n        Node version: [^\\r\\n]+\n        OS: [^\\r\\n]+\n        */\n      })));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"logs stack trace in verbose mode","suites":["StandardRenderer"],"updatePoint":{"line":83,"column":38,"index":2272},"line":83,"code":"  it('logs stack trace in verbose mode', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer(undefined, {\n        verbose: true\n      });\n      renderer.error({\n        code: 'EFOOBAR',\n        message: 'Hello error',\n        details: '  Some awesome details\\nMultiline!    ',\n        stack: ['./one.js:1', './two.js:2']\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stderr).to.string(multiline(function () {\n        /*\n        Stack trace:\n        ./one.js:1\n        ./two.js:2\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"logs console trace in verbose mode","suites":["StandardRenderer"],"updatePoint":{"line":104,"column":40,"index":2853},"line":104,"code":"  it('logs console trace in verbose mode', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer(undefined, {\n        verbose: true\n      });\n      renderer.error({\n        code: 'EFOOBAR',\n        message: 'Hello error',\n        details: '  Some awesome details\\nMultiline!    '\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stderr).to.match(new RegExp(multiline(function () {\n        /*\n        Console trace:\n        Error\n        \\s+at StandardRenderer.error \\(.+?\\)\n        */\n      })));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs checkout command log","suites":["StandardRenderer"],"updatePoint":{"line":124,"column":34,"index":3417},"line":124,"code":"  it('outputs checkout command log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer();\n      renderer.log({\n        id: 'checkout',\n        origin: 'jquery#master',\n        message: 'foobar'\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        bower checkout      jquery#foobar\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs full progress for wide command","suites":["StandardRenderer"],"updatePoint":{"line":140,"column":44,"index":3863},"line":140,"code":"  it('outputs full progress for wide command', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('install');\n      renderer.log({\n        id: 'progress',\n        origin: 'jquery#master',\n        message: 'foobar'\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        bower jquery#master           progress foobar\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs full progress for narrow command","suites":["StandardRenderer"],"updatePoint":{"line":156,"column":46,"index":4332},"line":156,"code":"  it('outputs full progress for narrow command', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('help');\n      renderer.log({\n        id: 'progress',\n        origin: 'jquery#master',\n        message: 'foobar'\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        bower progress      jquery#master foobar\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs extract log just as progress log","suites":["StandardRenderer"],"updatePoint":{"line":172,"column":46,"index":4793},"line":172,"code":"  it('outputs extract log just as progress log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('install');\n      renderer.log({\n        id: 'extract',\n        origin: 'jquery#master',\n        message: 'foobar'\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        bower jquery#master            extract foobar\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs incompatible log with suitable package","suites":["StandardRenderer"],"updatePoint":{"line":188,"column":52,"index":5267},"line":188,"code":"  it('outputs incompatible log with suitable package', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer();\n      renderer.log({\n        id: 'incompatible',\n        data: {\n          resolution: '~0.1.1',\n          suitable: {\n            pkgMeta: {\n              _release: '0.1.2'\n            },\n            endpoint: {\n              name: 'foobar'\n            }\n          },\n          picks: [{\n            pkgMeta: {\n              _release: '0.0.0'\n            },\n            endpoint: {\n              name: 'fizfuz',\n              target: '~0.0.0'\n            },\n            dependants: [{\n              pkgMeta: {\n                _release: 'release1'\n              },\n              endpoint: {\n                name: 'dependant1'\n              }\n            }, {\n              pkgMeta: {\n                _release: 'release2'\n              },\n              endpoint: {\n                name: 'dependant2'\n              }\n            }]\n          }, {\n            endpoint: {\n              name: 'fizfuz2'\n            },\n            dependants: [{\n              pkgMeta: {// no release\n              },\n              endpoint: {\n                name: 'jquery2'\n              }\n            }]\n          }]\n        }\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        Please note that,\n        dependant1#release1, dependant2#release2 depends on fizfuz#~0.0.0 which resolved to fizfuz#0.0.0\n        jquery2 depends on fizfuz2#\n        Resort to using foobar#~0.1.1 which resolved to foobar#0.1.2\n        Code incompatibilities may occur.\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs solver log without suitable package","suites":["StandardRenderer"],"updatePoint":{"line":252,"column":49,"index":6958},"line":252,"code":"  it('outputs solver log without suitable package', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer();\n      renderer.log({\n        id: 'solved',\n        data: {\n          resolution: '~0.1.1',\n          picks: [{\n            pkgMeta: {\n              _release: '0.0.0'\n            },\n            endpoint: {\n              name: 'fizfuz',\n              target: '~0.0.0'\n            },\n            dependants: [{\n              pkgMeta: {\n                _release: 'release1'\n              },\n              endpoint: {\n                name: 'dependant1'\n              }\n            }, {\n              pkgMeta: {\n                _release: 'release2'\n              },\n              endpoint: {\n                name: 'dependant2'\n              }\n            }]\n          }, {\n            endpoint: {\n              name: 'fizfuz2'\n            },\n            dependants: [{\n              pkgMeta: {// no release\n              },\n              endpoint: {\n                name: 'jquery2'\n              }\n            }]\n          }]\n        }\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        Unable to find a suitable version for , please choose one by typing one of the numbers below:\n        1) fizfuz#~0.0.0 which resolved to 0.0.0 and is required by dependant1#release1, dependant2#release2\n        2) fizfuz2# and is required by jquery2\n        Prefix the choice with ! to persist it to bower.json\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs json log","suites":["StandardRenderer"],"updatePoint":{"line":307,"column":22,"index":8485},"line":307,"code":"  it('outputs json log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer();\n      renderer.log({\n        id: 'json',\n        data: {\n          json: {\n            foo: 'bar',\n            fiz: {\n              fuz: 'faz'\n            }\n          }\n        }\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        {\n        foo: 'bar',\n        fiz: {\n        fuz: 'faz'\n        }\n        }\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs cached entry log","suites":["StandardRenderer"],"updatePoint":{"line":334,"column":30,"index":9034},"line":334,"code":"  it('outputs cached entry log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('install');\n      renderer.log({\n        id: 'cached-entry',\n        origin: 'origin',\n        message: 'message'\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        bower origin                    cached message\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"adjusts whitespace when package id too long","suites":["StandardRenderer"],"updatePoint":{"line":350,"column":49,"index":9505},"line":350,"code":"  it('adjusts whitespace when package id too long', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('install', {});\n      renderer.log({\n        id: 'generic',\n        origin: 'short-origin',\n        message: 'message'\n      });\n      renderer.log({\n        id: 'generic',\n        origin: 'very-very-long-origin-string',\n        message: 'message'\n      });\n      renderer.log({\n        id: 'generic',\n        origin: 'short-origin',\n        message: 'message'\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        bower short-origin             generic message\n        bower very-very-long-origin-string          generic message\n        bower short-origin                          generic message\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs install command log","suites":["StandardRenderer"],"updatePoint":{"line":378,"column":33,"index":10343},"line":378,"code":"  it('outputs install command log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('install', {\n        cwd: '/tmp'\n      });\n      renderer.end([{\n        canonicalDir: '/tmp/components/jquery',\n        pkgMeta: {\n          _release: '0.1.2'\n        },\n        endpoint: {\n          name: 'jquery'\n        }\n      }, {\n        canonicalDir: '/tmp/components/jquery',\n        pkgMeta: {\n          version: '0.1.2'\n        },\n        endpoint: {\n          name: 'jquery'\n        }\n      }, {\n        canonicalDir: '/tmp/components/jquery',\n        pkgMeta: {\n          _release: '0.1.2'\n        },\n        endpoint: {\n          name: 'jquery'\n        },\n        missing: true\n      }, {\n        canonicalDir: '/tmp/components/jquery',\n        pkgMeta: {\n          _release: '0.1.2'\n        },\n        endpoint: {\n          name: 'jquery'\n        },\n        different: true\n      }, {\n        canonicalDir: '/tmp/components/jquery',\n        pkgMeta: {\n          _release: '0.1.2'\n        },\n        endpoint: {\n          name: 'jquery'\n        },\n        linked: true\n      }, {\n        canonicalDir: '/tmp/components/jquery',\n        pkgMeta: {\n          _release: '0.1.2'\n        },\n        endpoint: {\n          name: 'jquery',\n          target: '~0.1.2'\n        },\n        incompatible: true\n      }, {\n        canonicalDir: '/tmp/components/jquery',\n        pkgMeta: {\n          _release: '0.1.2'\n        },\n        endpoint: {\n          name: 'jquery',\n          target: '~0.1.2'\n        },\n        extraneous: true\n      }, {\n        canonicalDir: '/tmp/components/jquery',\n        pkgMeta: {\n          _release: '0.1.2'\n        },\n        endpoint: {\n          name: 'jquery',\n          target: '~0.1.2'\n        },\n        update: {\n          target: '0.1.5',\n          latest: '0.2.0'\n        }\n      }, {\n        canonicalDir: '/tmp/components/jquery',\n        pkgMeta: {\n          _release: '0.1.2'\n        },\n        endpoint: {\n          name: 'jquery'\n        },\n        dependencies: {\n          angular: {\n            canonicalDir: '/tmp/components/angular',\n            pkgMeta: {\n              _release: '0.1.3'\n            },\n            endpoint: {\n              name: 'angular'\n            }\n          },\n          ember: {\n            canonicalDir: '/tmp/components/ember',\n            pkgMeta: {\n              _release: '0.2.3'\n            },\n            endpoint: {\n              name: 'ember'\n            },\n            dependencies: {\n              // Should be ingored (only one level)\n              react: {\n                canonicalDir: '/tmp/components/react',\n                pkgMeta: {\n                  _release: '0.2.3'\n                },\n                endpoint: {\n                  name: 'react'\n                }\n              }\n            }\n          }\n        }\n      }]);\n    }).spread(function (stdout, stderr) {\n      if (helpers.isWin()) {\n        expect(stdout).to.equal(multiline(function () {\n          /*\n          jquery#0.1.2 components\\jquery\n          jquery#0.1.2 components\\jquery\n          jquery components\\jquery not installed\n          jquery#0.1.2 components\\jquery different\n          jquery#0.1.2 components\\jquery linked\n          jquery#0.1.2 components\\jquery incompatible with ~0.1.2\n          jquery#0.1.2 components\\jquery extraneous\n          jquery#0.1.2 components\\jquery (0.1.5 available, latest is 0.2.0)\n          jquery#0.1.2 components\\jquery\n          ├── angular#0.1.3\n          └── ember#0.2.3\n          */\n        }));\n      } else {\n        expect(stdout).to.equal(multiline(function () {\n          /*\n          jquery#0.1.2 components/jquery\n          jquery#0.1.2 components/jquery\n          jquery components/jquery not installed\n          jquery#0.1.2 components/jquery different\n          jquery#0.1.2 components/jquery linked\n          jquery#0.1.2 components/jquery incompatible with ~0.1.2\n          jquery#0.1.2 components/jquery extraneous\n          jquery#0.1.2 components/jquery (0.1.5 available, latest is 0.2.0)\n          jquery#0.1.2 components/jquery\n          ├── angular#0.1.3\n          └── ember#0.2.3\n          */\n        }));\n      }\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs short info command log","suites":["StandardRenderer"],"updatePoint":{"line":536,"column":36,"index":14544},"line":536,"code":"  it('outputs short info command log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('info', {});\n      renderer.end({\n        version: '1.2.3'\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        {\n        version: '1.2.3'\n        }\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs full info command log","suites":["StandardRenderer"],"updatePoint":{"line":552,"column":35,"index":14936},"line":552,"code":"  it('outputs full info command log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('info', {});\n      renderer.end({\n        name: 'foo',\n        latest: {\n          version: '1.2.3'\n        },\n        versions: ['1.2.0', '1.2.1', '1.2.2', '1.2.3+build-1234', '1.2.8-build.2098+sha.cb9c0f2', '1.3.0-rc.5', '1.3.0-beta.18']\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        {\n        version: '1.2.3'\n        }\n        Available versions:\n        - 1.2.0\n        - 1.2.1\n        - 1.2.2\n        Show 4 additional prereleases with ‘bower info foo --verbose’\n        You can request info for a specific version with 'bower info foo#<version>'\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs full info command log with prereleases","suites":["StandardRenderer"],"updatePoint":{"line":578,"column":52,"index":15756},"line":578,"code":"  it('outputs full info command log with prereleases', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('info', {\n        verbose: true\n      });\n      renderer.end({\n        name: 'foo',\n        latest: {\n          version: '1.2.3'\n        },\n        versions: ['1.2.0', '1.2.1', '1.2.2', '1.2.3+build-1234', '1.2.8-build.2098+sha.cb9c0f2', '1.3.0-rc.5', '1.3.0-beta.18']\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        {\n        version: '1.2.3'\n        }\n        Available versions:\n        - 1.2.0\n        - 1.2.1\n        - 1.2.2\n        - 1.2.3+build-1234\n        - 1.2.8-build.2098+sha.cb9c0f2\n        - 1.3.0-rc.5\n        - 1.3.0-beta.18\n        You can request info for a specific version with 'bower info foo#<version>'\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs lookup command log","suites":["StandardRenderer"],"updatePoint":{"line":609,"column":32,"index":16626},"line":609,"code":"  it('outputs lookup command log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('lookup', {});\n      renderer.end({\n        name: 'bower',\n        url: 'http://bower.io'\n      });\n      renderer.end({\n        name: 'bower'\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        bower http://bower.io\n        Package not found.\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs link command log","suites":["StandardRenderer"],"updatePoint":{"line":628,"column":30,"index":17109},"line":628,"code":"  it('outputs link command log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('link', {\n        cwd: '/tmp'\n      });\n      renderer.end({\n        src: './foo',\n        dst: './bar',\n        installed: [{\n          canonicalDir: '/tmp/components/jquery',\n          pkgMeta: {\n            _release: '0.1.2'\n          },\n          endpoint: {\n            name: 'jquery'\n          }\n        }]\n      });\n    }).spread(function (stdout, stderr) {\n      if (helpers.isWin()) {\n        expect(stdout).to.equal(multiline(function () {\n          /*\n          bower                    link ./bar > ./foo\n          jquery#0.1.2 components\\jquery\n          */\n        }));\n      } else {\n        expect(stdout).to.equal(multiline(function () {\n          /*\n          bower                    link ./bar > ./foo\n          jquery#0.1.2 components/jquery\n          */\n        }));\n      }\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs search command log","suites":["StandardRenderer"],"updatePoint":{"line":664,"column":32,"index":18052},"line":664,"code":"  it('outputs search command log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('search');\n      renderer.end([{\n        name: 'jquery',\n        url: 'http://jquery.io'\n      }, {\n        name: 'bower',\n        url: 'http://bower.io'\n      }]);\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        Search results:\n        jquery http://jquery.io\n        bower http://bower.io\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs register command log","suites":["StandardRenderer"],"updatePoint":{"line":684,"column":34,"index":18580},"line":684,"code":"  it('outputs register command log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('register');\n      renderer.end({\n        name: 'jquery',\n        url: 'http://jquery.io'\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        Package jquery registered successfully!\n        All valid semver tags on http://jquery.io will be available as versions.\n        To publish a new version, just release a valid semver tag.\n        Run bower info jquery to list the available versions.\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs cache list command log","suites":["StandardRenderer"],"updatePoint":{"line":702,"column":36,"index":19217},"line":702,"code":"  it('outputs cache list command log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('cache list');\n      renderer.end([{\n        pkgMeta: {\n          name: 'awesome-jquery',\n          _target: '0.1.1',\n          _source: 'jquery'\n        }\n      }]);\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        awesome-jquery=jquery#0.1.1\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"outputs help command log","suites":["StandardRenderer"],"updatePoint":{"line":720,"column":30,"index":19693},"line":720,"code":"  it('outputs help command log', function () {\n    return helpers.capture(function () {\n      var renderer = new StandardRenderer('help');\n      renderer.end({\n        command: 'uninstall',\n        description: 'Uninstalls a package locally from your bower_components directory',\n        usage: ['uninstall <name> [<name> ..] [<options>]'],\n        options: [{\n          shorthand: '-h',\n          flag: '--help',\n          description: 'Show this help message'\n        }, {\n          shorthand: '-S',\n          flag: '--save',\n          description: \"Remove uninstalled packages from the project's bower.json dependencies\"\n        }, {\n          shorthand: '-D',\n          flag: '--save-dev',\n          description: \"Remove uninstalled packages from the project's bower.json devDependencies\"\n        }]\n      });\n    }).spread(function (stdout, stderr) {\n      expect(stdout).to.equal(multiline(function () {\n        /*\n        Usage:\n        bower uninstall <name> [<name> ..] [<options>]\n        Options:\n        -h, --help              Show this help message\n        -S, --save              Remove uninstalled packages from the project's bower.json dependencies\n        -D, --save-dev          Remove uninstalled packages from the project's bower.json devDependencies\n        Additionally all global options listed in 'bower help' are available\n        Description:\n        Uninstalls a package locally from your bower_components directory\n        */\n      }));\n    });\n  });","file":"renderers/StandardRenderer.js","skipped":false,"dir":"test"},{"name":"creates a symlink to a file","suites":["createLink"],"updatePoint":{"line":25,"column":33,"index":523},"line":25,"code":"  it('creates a symlink to a file', function () {\n    var src = path.join(srcDir.path, 'someFile'),\n        dst = path.join(dstDir.path, 'someFile');\n    return createLink(src, dst).then(function () {\n      return Q.nfcall(fs.readlink, dst).then(function (linkString) {\n        expect(linkString).to.be.equal(src);\n      });\n    });\n  });","file":"util/createLink.js","skipped":false,"dir":"test"},{"name":"throws an error when destination already exists","suites":["createLink"],"updatePoint":{"line":34,"column":53,"index":882},"line":34,"code":"  it('throws an error when destination already exists', function () {\n    var src = path.join(srcDir.path, 'someFile'),\n        dst = path.join(dstDir.path);\n    var deferred = Q.defer();\n    createLink(src, dst).catch(function (err) {\n      expect(err.code).to.be.equal('EEXIST');\n      deferred.resolve();\n    }).then(function () {\n      deferred.reject();\n    });\n    return deferred.promise;\n  });","file":"util/createLink.js","skipped":false,"dir":"test"},{"name":"download file to directory","suites":["download"],"updatePoint":{"line":38,"column":32,"index":1049},"line":38,"code":"  it('download file to directory', function () {\n    return downloadTest({\n      response: function (nock) {\n        nock.get('/package.tar.gz').replyWithFile(200, source);\n      },\n      expect: function () {\n        expect(fs.existsSync(destination)).to.be(true);\n        expect(fs.readdirSync(tempDir.path)).to.have.length(1);\n      }\n    });\n  });","file":"util/download.js","skipped":false,"dir":"test"},{"name":"pass custom user-agent to server","suites":["download"],"updatePoint":{"line":49,"column":38,"index":1407},"line":49,"code":"  it('pass custom user-agent to server', function () {\n    var userAgent = 'Custom User-Agent';\n    return downloadTest({\n      nockOpts: {\n        reqheaders: {\n          'user-agent': userAgent\n        }\n      },\n      downloadOpts: {\n        headers: {\n          'User-Agent': userAgent\n        }\n      },\n      response: function (nock) {\n        nock.get('/package.tar.gz').replyWithFile(200, source);\n      },\n      expect: function () {\n        expect(fs.existsSync(destination)).to.be(true);\n        expect(fs.readdirSync(tempDir.path)).to.have.length(1);\n      }\n    });\n  });","file":"util/download.js","skipped":false,"dir":"test"},{"name":"handle server response 404","suites":["download"],"updatePoint":{"line":71,"column":32,"index":1987},"line":71,"code":"  it('handle server response 404', function () {\n    return downloadTest({\n      response: function (nock) {\n        nock.get('/package.tar.gz').reply(404);\n      },\n      expectError: function () {\n        expect(fs.readdirSync(tempDir.path)).to.be.empty();\n      }\n    });\n  });","file":"util/download.js","skipped":false,"dir":"test"},{"name":"handle network error","suites":["download"],"updatePoint":{"line":81,"column":26,"index":2262},"line":81,"code":"  it('handle network error', function () {\n    return downloadTest({\n      response: function (nock) {\n        nock.get('/package.tar.gz').replyWithError('network error');\n      },\n      expectError: function () {\n        expect(fs.readdirSync(tempDir.path)).to.be.empty();\n      }\n    });\n  });","file":"util/download.js","skipped":false,"dir":"test"},{"name":"handles connection timeout","suites":["download"],"updatePoint":{"line":91,"column":32,"index":2564},"line":91,"code":"  it('handles connection timeout', function () {\n    return downloadTest({\n      response: function (nock) {\n        // First connection + 5 retries\n        nock.get('/package.tar.gz').times(6).delayConnection(1000).replyWithFile(200, source);\n      },\n      expectError: function (e) {\n        expect(e.code).to.be('ESOCKETTIMEDOUT');\n        expect(fs.readdirSync(tempDir.path)).to.be.empty();\n      },\n      downloadOpts: {\n        timeout: 10,\n        maxTimeout: 0,\n        minTimeout: 0\n      }\n    });\n  });","file":"util/download.js","skipped":false,"dir":"test"},{"name":"handles socket timeout","suites":["download"],"updatePoint":{"line":108,"column":28,"index":3075},"line":108,"code":"  it('handles socket timeout', function () {\n    return downloadTest({\n      response: function (nock) {\n        // First connection + 5 retries\n        nock.get('/package.tar.gz').times(6).socketDelay(1000).replyWithFile(200, source);\n      },\n      expectError: function (e) {\n        expect(e.code).to.be('ESOCKETTIMEDOUT');\n        expect(fs.readdirSync(tempDir.path)).to.be.empty();\n      },\n      downloadOpts: {\n        timeout: 10,\n        maxTimeout: 0,\n        minTimeout: 0\n      }\n    });\n  });","file":"util/download.js","skipped":false,"dir":"test"},{"name":"handles retries correctly","suites":["download"],"updatePoint":{"line":125,"column":31,"index":3585},"line":125,"code":"  it('handles retries correctly', function () {\n    return downloadTest({\n      response: function (nock) {\n        // First connection + 5 retries\n        nock.get('/package.tar.gz').times(5).delayConnection(1000).replyWithFile(200, source); // Success last time\n\n        nock.get('/package.tar.gz').replyWithFile(200, source);\n      },\n      expect: function () {\n        expect(fs.existsSync(destination)).to.be(true);\n        expect(fs.readdirSync(tempDir.path)).to.have.length(1);\n      },\n      downloadOpts: {\n        timeout: 10,\n        maxTimeout: 0,\n        minTimeout: 0\n      }\n    });\n  });","file":"util/download.js","skipped":false,"dir":"test"},{"name":"fails on incorrect Content-Length match","suites":["download"],"updatePoint":{"line":144,"column":45,"index":4204},"line":144,"code":"  it('fails on incorrect Content-Length match', function () {\n    return downloadTest({\n      response: function (nock) {\n        // First connection + 5 retries\n        nock.get('/package.tar.gz').replyWithFile(200, source, {\n          'Content-Length': 5000\n        });\n      },\n      expectError: function (e) {\n        expect(e.code).to.be('EINCOMPLETE');\n        expect(e.message).to.be('Transfer closed with 4636 bytes remaining to read');\n      },\n      downloadOpts: {\n        timeout: 10,\n        maxTimeout: 0,\n        minTimeout: 0\n      }\n    });\n  });","file":"util/download.js","skipped":false,"dir":"test"},{"name":"correctly decodes gzipped files without gz extension","suites":["download","gzipped files"],"updatePoint":{"line":181,"column":60,"index":5448},"line":181,"code":"    it('correctly decodes gzipped files without gz extension', function () {\n      return testGzip('test-gz.txt');\n    });","file":"util/download.js","skipped":false,"dir":"test"},{"name":"correctly decodes gzipped files with gz extension","suites":["download","gzipped files"],"updatePoint":{"line":184,"column":57,"index":5568},"line":184,"code":"    it('correctly decodes gzipped files with gz extension', function () {\n      return testGzip('test-gz.txt.gz');\n    });","file":"util/download.js","skipped":false,"dir":"test"},{"name":"returns true when a path begins with /","suites":["isPathAbsolute"],"updatePoint":{"line":6,"column":44,"index":186},"line":6,"code":"  it('returns true when a path begins with /', function () {\n    expect(isPathAbsolute('/tmp/foo')).to.be.ok();\n  });","file":"util/isPathAbsolute.js","skipped":false,"dir":"test"},{"name":"returns false when a path does not begin with /","suites":["isPathAbsolute"],"updatePoint":{"line":9,"column":53,"index":313},"line":9,"code":"  it('returns false when a path does not begin with /', function () {\n    expect(isPathAbsolute('./tmp/foo')).to.not.be.ok();\n  });","file":"util/isPathAbsolute.js","skipped":false,"dir":"test"},{"name":"returns a partial function that joins paths of the partials first arguments","suites":["relativeToBaseDir"],"updatePoint":{"line":9,"column":81,"index":321},"line":9,"code":"  it('returns a partial function that joins paths of the partials first arguments', function () {\n    expect(joinOrReturnAbsolutePath('foo')).to.be.equal(path.resolve('/tmp/foo'));\n    expect(joinOrReturnAbsolutePath('./foo')).to.be.equal(path.resolve('/tmp/foo'));\n  });","file":"util/relativeToBaseDir.js","skipped":false,"dir":"test"},{"name":"returns a partial function that returns it's first argument when it begins with /","suites":["relativeToBaseDir"],"updatePoint":{"line":13,"column":87,"index":599},"line":13,"code":"  it(\"returns a partial function that returns it's first argument when it begins with /\", function () {\n    expect(joinOrReturnAbsolutePath('/foo')).to.be.equal(path.resolve('/foo'));\n    expect(joinOrReturnAbsolutePath('/foo/bar')).to.be.equal(path.resolve('/foo/bar'));\n  });","file":"util/relativeToBaseDir.js","skipped":false,"dir":"test"},{"name":"removes all files in directory","suites":["removeIgnores"],"updatePoint":{"line":32,"column":36,"index":773},"line":32,"code":"  it('removes all files in directory', function () {\n    return ignoreTest(tempDir.path, {\n      ignore: ['node_modules/**/*']\n    }, ['bower.json', 'index.js']);\n  });","file":"util/removeIgnores.js","skipped":false,"dir":"test"},{"name":"removes whole directory","suites":["removeIgnores"],"updatePoint":{"line":37,"column":29,"index":935},"line":37,"code":"  it('removes whole directory', function () {\n    return ignoreTest(tempDir.path, {\n      ignore: ['node_modules/']\n    }, ['bower.json', 'index.js']);\n  });","file":"util/removeIgnores.js","skipped":false,"dir":"test"},{"name":"removes whole directory (no ending slash)","suites":["removeIgnores"],"updatePoint":{"line":42,"column":47,"index":1111},"line":42,"code":"  it('removes whole directory (no ending slash)', function () {\n    return ignoreTest(tempDir.path, {\n      ignore: ['node_modules']\n    }, ['bower.json', 'index.js']);\n  });","file":"util/removeIgnores.js","skipped":false,"dir":"test"},{"name":"removes all but one file","suites":["removeIgnores"],"updatePoint":{"line":47,"column":30,"index":1269},"line":47,"code":"  it('removes all but one file', function () {\n    return ignoreTest(tempDir.path, {\n      ignore: ['**/*', '!bower.json']\n    }, ['bower.json']);\n  });","file":"util/removeIgnores.js","skipped":false,"dir":"test"},{"name":"refuses to ignore bower.json","suites":["removeIgnores"],"updatePoint":{"line":52,"column":34,"index":1426},"line":52,"code":"  it('refuses to ignore bower.json', function () {\n    return ignoreTest(tempDir.path, {\n      ignore: ['**/*', '!index.js']\n    }, ['bower.json', 'index.js']);\n  });","file":"util/removeIgnores.js","skipped":false,"dir":"test"},{"name":"removes all but one file deep down the tree","suites":["removeIgnores"],"updatePoint":{"line":57,"column":49,"index":1608},"line":57,"code":"  it('removes all but one file deep down the tree', function () {\n    return ignoreTest(tempDir.path, {\n      ignore: ['**/*', '!node_modules/underscore/index.js']\n    }, ['bower.json', 'node_modules/underscore/index.js']);\n  });","file":"util/removeIgnores.js","skipped":false,"dir":"test"},{"name":".render() returns a compiled test-template template","suites":["template: util template methods for templates in lib/templates",".render() - Renders a handlebars template"],"updatePoint":{"line":15,"column":59,"index":574},"line":15,"code":"    it('.render() returns a compiled test-template template', function () {\n      var compiledStr = template.render(testTemplateName, {\n        foo: 'foo value'\n      });\n      expect(compiledStr).to.be.equal('foo value');\n    });","file":"util/template.js","skipped":false,"dir":"test"},{"name":".render() throws when a non existent template is provided","suites":["template: util template methods for templates in lib/templates",".render() - Renders a handlebars template"],"updatePoint":{"line":21,"column":65,"index":811},"line":21,"code":"    it('.render() throws when a non existent template is provided', function () {\n      expect(function () {\n        template.render('test-template.not-present.tpl', {\n          foo: 'foo value'\n        });\n      }).to.throwException();\n    });","file":"util/template.js","skipped":false,"dir":"test"},{"name":".exists() returns true for an existing template","suites":["template: util template methods for templates in lib/templates",".exists() - Checks existence of a template"],"updatePoint":{"line":38,"column":55,"index":1419},"line":38,"code":"    it('.exists() returns true for an existing template', function () {\n      var templateExists = template.exists(testTemplateName);\n      expect(templateExists).to.be.ok();\n    });","file":"util/template.js","skipped":false,"dir":"test"},{"name":".exists() returns false for a non existing template","suites":["template: util template methods for templates in lib/templates",".exists() - Checks existence of a template"],"updatePoint":{"line":42,"column":59,"index":1606},"line":42,"code":"    it('.exists() returns false for a non existing template', function () {\n      var templateExists = template.exists('test-template.not-present.tpl');\n      expect(templateExists).to.not.be.ok();\n    });","file":"util/template.js","skipped":false,"dir":"test"},{"name":"defaults registry entries to default registry","suites":["NPM Config on package.json"],"updatePoint":{"line":11,"column":51,"index":374},"line":11,"code":"  it('defaults registry entries to default registry', function () {\n    var config = require('../lib/Config').read(null, {});\n\n    assert.deepEqual(config.registry, {\n      default: 'https://registry.bower.io',\n      search: ['https://registry.bower.io'],\n      register: 'https://registry.bower.io',\n      publish: 'https://registry.bower.io'\n    });\n  });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"can change default registry","suites":["NPM Config on package.json"],"updatePoint":{"line":21,"column":33,"index":714},"line":21,"code":"  it('can change default registry', function () {\n    var config = require('../lib/Config').read(null, {\n      registry: 'https://foobar'\n    });\n\n    assert.deepEqual(config.registry, {\n      default: 'https://foobar',\n      search: ['https://foobar'],\n      register: 'https://foobar',\n      publish: 'https://foobar'\n    });\n  });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"can override single entries in registry configuration","suites":["NPM Config on package.json"],"updatePoint":{"line":33,"column":59,"index":1074},"line":33,"code":"  it('can override single entries in registry configuration', function () {\n    var config = require('../lib/Config').read(null, {\n      registry: {\n        search: 'https://foobar'\n      }\n    });\n\n    assert.deepEqual(config.registry, {\n      default: 'https://registry.bower.io',\n      search: ['https://foobar'],\n      register: 'https://registry.bower.io',\n      publish: 'https://registry.bower.io'\n    });\n  });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"can override single entries in registry configuration and defaults","suites":["NPM Config on package.json"],"updatePoint":{"line":47,"column":72,"index":1506},"line":47,"code":"  it('can override single entries in registry configuration and defaults', function () {\n    var config = require('../lib/Config').read(null, {\n      registry: {\n        default: 'https://fizfuz',\n        search: 'https://foobar'\n      }\n    });\n\n    assert.deepEqual(config.registry, {\n      default: 'https://fizfuz',\n      search: ['https://foobar'],\n      register: 'https://fizfuz',\n      publish: 'https://fizfuz'\n    });\n  });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"allows for not providing cwd","suites":["NPM Config on package.json"],"updatePoint":{"line":62,"column":34,"index":1902},"line":62,"code":"  it('allows for not providing cwd', function () {\n    var config = require('../lib/Config').read();\n\n    config.tmp = '/foo/bar';\n    config.userAgent = 'firefox';\n    delete config.storage;\n    assert.deepEqual(config, {\n      directory: 'bower_components',\n      registry: {\n        default: 'https://registry.bower.io',\n        search: ['https://registry.bower.io'],\n        register: 'https://registry.bower.io',\n        publish: 'https://registry.bower.io'\n      },\n      shorthandResolver: 'https://github.com/{{owner}}/{{package}}.git',\n      tmp: '/foo/bar',\n      timeout: 30000,\n      ca: {\n        search: []\n      },\n      strictSsl: true,\n      userAgent: 'firefox',\n      color: true\n    });\n  });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"should return \"npm-path\" for \"bower_directory\"","suites":["NPM Config on package.json","Setting process.env.npm_package_config"],"updatePoint":{"line":105,"column":54,"index":3383},"line":105,"code":"    it('should return \"npm-path\" for \"bower_directory\"', function () {\n      assert.equal('npm-path', config.directory);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"should return \"false\" for \"bower_colors\"","suites":["NPM Config on package.json","Setting process.env.npm_package_config"],"updatePoint":{"line":108,"column":48,"index":3506},"line":108,"code":"    it('should return \"false\" for \"bower_colors\"', function () {\n      assert.equal('false', config.colors);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"should expand array \"false\" for \"bower_resolvers\"","suites":["NPM Config on package.json","Setting process.env.npm_package_config"],"updatePoint":{"line":111,"column":57,"index":3632},"line":111,"code":"    it('should expand array \"false\" for \"bower_resolvers\"', function () {\n      assert.deepEqual(['foo', 'bar', 'baz'], config.resolvers);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"should read the CA file","suites":["NPM Config on package.json","Specifying custom CA"],"updatePoint":{"line":116,"column":31,"index":3808},"line":116,"code":"    it('should read the CA file', function () {\n      var config = require('../lib/Config').read(path.resolve('test/assets/custom-ca'));\n\n      ['register', 'publish', 'default'].forEach(function (p) {\n        assertCAContents(config.ca[p], 'config.ca.' + p);\n      });\n      assert(Array.isArray(config.ca.search), 'ca property search should be an array');\n      config.ca.search.forEach(function (c, i) {\n        assertCAContents(c, 'config.ca.search[' + i + ']');\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"should backward-support certificate inside .bowerrc","suites":["NPM Config on package.json","Specifying custom CA"],"updatePoint":{"line":127,"column":59,"index":4321},"line":127,"code":"    it('should backward-support certificate inside .bowerrc', function () {\n      var config = require('../lib/Config').read(path.resolve('test/assets/custom-ca-embed'));\n\n      ['register', 'publish', 'default'].forEach(function (p) {\n        assertCAContents(config.ca[p], 'config.ca.' + p);\n      });\n      assert(Array.isArray(config.ca.search), 'ca property search should be an array');\n      config.ca.search.forEach(function (c, i) {\n        assertCAContents(c, 'config.ca.search[' + i + ']');\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"sets env variables","suites":["NPM Config on package.json","setting ENV variables"],"updatePoint":{"line":148,"column":26,"index":5120},"line":148,"code":"    it('sets env variables', function () {\n      require('../lib/Config').read('test/assets/env-variables');\n\n      assert.equal(process.env.HTTP_PROXY, 'http://HTTP_PROXY');\n      assert.equal(process.env.HTTPS_PROXY, 'http://HTTPS_PROXY');\n      assert.equal(process.env.NO_PROXY, 'google.com'); // On windows env is case insensitive\n\n      if (process.platform === 'win32') {\n        assert.equal(process.env.http_proxy, 'http://HTTP_PROXY');\n        assert.equal(process.env.https_proxy, 'http://HTTPS_PROXY');\n        assert.equal(process.env.no_proxy, 'google.com');\n      } else {\n        assert.equal(process.env.http_proxy, undefined);\n        assert.equal(process.env.https_proxy, undefined);\n        assert.equal(process.env.no_proxy, undefined);\n      }\n    });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"restores env variables","suites":["NPM Config on package.json","setting ENV variables"],"updatePoint":{"line":165,"column":30,"index":5898},"line":165,"code":"    it('restores env variables', function () {\n      process.env.http_proxy = 'd';\n      process.env.https_proxy = 'e';\n      process.env.no_proxy = 'f';\n      process.env.HTTP_PROXY = 'a';\n      process.env.HTTPS_PROXY = 'b';\n      process.env.NO_PROXY = 'c';\n\n      var config = require('../lib/Config').create('test/assets/env-variables').load();\n\n      config.restore();\n      assert.equal(process.env.HTTP_PROXY, 'a');\n      assert.equal(process.env.HTTPS_PROXY, 'b');\n      assert.equal(process.env.NO_PROXY, 'c'); // On windows precedence for restoring is for capital case\n\n      if (process.platform === 'win32') {\n        assert.equal(process.env.http_proxy, 'a');\n        assert.equal(process.env.https_proxy, 'b');\n        assert.equal(process.env.no_proxy, 'c');\n      } else {\n        assert.equal(process.env.http_proxy, 'd');\n        assert.equal(process.env.https_proxy, 'e');\n        assert.equal(process.env.no_proxy, 'f');\n      }\n    });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"restores env variables if they are undefined","suites":["NPM Config on package.json","setting ENV variables"],"updatePoint":{"line":190,"column":52,"index":6878},"line":190,"code":"    it('restores env variables if they are undefined', function () {\n      var config = require('../lib/Config').create('test/assets/env-variables').load();\n\n      config.restore();\n      assert.equal(process.env.HTTP_PROXY, undefined);\n      assert.equal(process.env.HTTPS_PROXY, undefined);\n      assert.equal(process.env.NO_PROXY, undefined);\n      assert.equal(process.env.http_proxy, undefined);\n      assert.equal(process.env.https_proxy, undefined);\n      assert.equal(process.env.no_proxy, undefined);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"allows for overriding options","suites":["NPM Config on package.json","setting ENV variables"],"updatePoint":{"line":201,"column":37,"index":7381},"line":201,"code":"    it('allows for overriding options', function () {\n      require('../lib/Config').read('test/assets/env-variables', {\n        httpsProxy: 'http://other-proxy.local'\n      });\n\n      assert.equal(process.env.HTTP_PROXY, 'http://HTTP_PROXY');\n      assert.equal(process.env.HTTPS_PROXY, 'http://other-proxy.local');\n    });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"sets values from process.env","suites":["Allow ${ENV} variables in .bowerrc"],"updatePoint":{"line":212,"column":34,"index":7774},"line":212,"code":"  it('sets values from process.env', function () {\n    process.env._BOWERRC_MY_PACKAGES = 'a';\n    process.env._BOWERRC_MY_TMP = '/tmp/b';\n    process.env._BOWERRC_MY_USER = 'username';\n    process.env._BOWERRC_MY_PASS = 'password';\n\n    var config = require('../lib/Config').read('test/assets/env-variables-values');\n\n    assert.equal('a', config.storage.packages);\n    assert.equal(path.resolve('/tmp/b'), config.tmp);\n    assert.equal('username:password', config.storage.registry.search[0]);\n    assert.equal('${_myshellvar}', config.scripts.postinstall);\n  });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"resolve ~/ in .bowerrc","suites":["untildify paths in .bowerrc"],"updatePoint":{"line":227,"column":28,"index":8391},"line":227,"code":"  it('resolve ~/ in .bowerrc', function () {\n    var config = require('../lib/Config').read('test/assets/env-variables-values');\n\n    var untildify = require('untildify');\n\n    assert.equal(untildify('~/.bower-test/registry'), config.storage.registry.register);\n  });","file":"test.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"correctly reads .bowerrc files","suites":["rc"],"updatePoint":{"line":33,"column":36,"index":664},"line":33,"code":"  it('correctly reads .bowerrc files', function () {\n    var config = rc('bower', tempDir.path);\n    expect(config.key).to.eql('value');\n    expect(config.key2).to.eql(undefined);\n  });","file":"util/rc.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"correctly reads .bowerrc files from child","suites":["rc"],"updatePoint":{"line":38,"column":47,"index":861},"line":38,"code":"  it('correctly reads .bowerrc files from child', function () {\n    var config = rc('bower', tempDir.path + '/child/');\n    expect(config.key).to.eql('value');\n    expect(config.key2).to.eql('value2');\n  });","file":"util/rc.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"correctly reads .bowerrc files from child2","suites":["rc"],"updatePoint":{"line":43,"column":48,"index":1070},"line":43,"code":"  it('correctly reads .bowerrc files from child2', function () {\n    var config = rc('bower', tempDir.path + '/child2/');\n    expect(config.key).to.eql('valueShouldBeOverwriteParent');\n    expect(config.key2).to.eql(undefined);\n  });","file":"util/rc.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"correctly reads .bowerrc files from child3","suites":["rc"],"updatePoint":{"line":48,"column":48,"index":1304},"line":48,"code":"  it('correctly reads .bowerrc files from child3', function () {\n    var config = rc('bower', tempDir.path + '/child3/');\n    expect(config.key).to.eql('value');\n    expect(config.key2).to.eql(undefined);\n  });","file":"util/rc.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"loads the .bowerrc file from the cwd specified on the command line","suites":["rc"],"updatePoint":{"line":53,"column":72,"index":1539},"line":53,"code":"  it('loads the .bowerrc file from the cwd specified on the command line', function () {\n    var argv = {\n      config: {\n        cwd: tempDir.path + '/other_dir/'\n      }\n    };\n    var config = rc('bower', tempDir.path, argv);\n    expect(config.key).to.eql('othervalue');\n  });","file":"util/rc.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"throws an easy to understand error if .bowerrc is a dir","suites":["rc"],"updatePoint":{"line":62,"column":61,"index":1808},"line":62,"code":"  it('throws an easy to understand error if .bowerrc is a dir', function () {\n    // Gotta wrap this to catch the error\n    var config = function () {\n      rc('bower', tempDirBowerrc.path);\n    };\n\n    expect(config).to.throwError(/should not be a directory/);\n  });","file":"util/rc.js","skipped":false,"dir":"packages/bower-config/test"},{"name":"should decompose endpoints correctly","suites":["endpoint-parser",".decompose"],"updatePoint":{"line":11,"column":44,"index":272},"line":11,"code":"    it('should decompose endpoints correctly', function () {\n      var suite = {\n        'jquery#~2.0.0': {\n          name: '',\n          source: 'jquery',\n          target: '~2.0.0'\n        },\n        'jquery#*': {\n          name: '',\n          source: 'jquery',\n          target: '*'\n        },\n        'jquery#latest': {\n          name: '',\n          source: 'jquery',\n          target: '*'\n        },\n        'jquery#3dc50c62fe2d2d01afc58e7ad42236a35acff4d8': {\n          name: '',\n          source: 'jquery',\n          target: '3dc50c62fe2d2d01afc58e7ad42236a35acff4d8'\n        },\n        'jquery#master': {\n          name: '',\n          source: 'jquery',\n          target: 'master'\n        },\n        'backbone=backbone-amd#~1.0.0': {\n          name: 'backbone',\n          source: 'backbone-amd',\n          target: '~1.0.0'\n        },\n        'backbone=backbone-amd#latest': {\n          name: 'backbone',\n          source: 'backbone-amd',\n          target: '*'\n        },\n        'backbone=backbone-amd#*': {\n          name: 'backbone',\n          source: 'backbone-amd',\n          target: '*'\n        },\n        'http://twitter.github.io/bootstrap/assets/bootstrap.zip': {\n          name: '',\n          source: 'http://twitter.github.io/bootstrap/assets/bootstrap.zip',\n          target: '*'\n        },\n        'bootstrap=http://twitter.github.io/bootstrap/assets/bootstrap.zip': {\n          name: 'bootstrap',\n          source: 'http://twitter.github.io/bootstrap/assets/bootstrap.zip',\n          target: '*'\n        },\n        'bootstrap=http://twitter.github.io/bootstrap/assets/bootstrap.zip#latest': {\n          name: 'bootstrap',\n          source: 'http://twitter.github.io/bootstrap/assets/bootstrap.zip',\n          target: '*'\n        }\n      };\n      object.forOwn(suite, function (decEndpoint, endpoint) {\n        expect(endpointParser.decompose(endpoint)).to.eql(decEndpoint);\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-endpoint-parser/test"},{"name":"should trim sources and targets","suites":["endpoint-parser",".decompose"],"updatePoint":{"line":73,"column":39,"index":2179},"line":73,"code":"    it('should trim sources and targets', function () {\n      var decEndpoint = endpointParser.decompose('foo= source # ~1.0.2 ');\n      expect(decEndpoint.source).to.equal('source');\n      expect(decEndpoint.target).to.equal('~1.0.2');\n      decEndpoint = endpointParser.decompose('foo= source # latest');\n      expect(decEndpoint.source).to.equal('source');\n      expect(decEndpoint.target).to.equal('*');\n      decEndpoint = endpointParser.decompose('foo= source # *');\n      expect(decEndpoint.source).to.equal('source');\n      expect(decEndpoint.target).to.equal('*');\n    });","file":"test.js","skipped":false,"dir":"packages/bower-endpoint-parser/test"},{"name":"should compose endpoints correctly","suites":["endpoint-parser",".compose"],"updatePoint":{"line":86,"column":42,"index":2807},"line":86,"code":"    it('should compose endpoints correctly', function () {\n      var suite = {\n        'jquery#~2.0.0': {\n          name: '',\n          source: 'jquery',\n          target: '~2.0.0'\n        },\n        jquery: [{\n          name: '',\n          source: 'jquery',\n          target: '*'\n        }, {\n          name: '',\n          source: 'jquery',\n          target: 'latest'\n        }, {\n          name: '',\n          source: 'jquery',\n          target: ''\n        }],\n        'jquery#3dc50c62fe2d2d01afc58e7ad42236a35acff4d8': {\n          name: '',\n          source: 'jquery',\n          target: '3dc50c62fe2d2d01afc58e7ad42236a35acff4d8'\n        },\n        'jquery#master': {\n          name: '',\n          source: 'jquery',\n          target: 'master'\n        },\n        'backbone=backbone-amd#~1.0.0': {\n          name: 'backbone',\n          source: 'backbone-amd',\n          target: '~1.0.0'\n        },\n        'backbone=backbone-amd': [{\n          name: 'backbone',\n          source: 'backbone-amd',\n          target: '*'\n        }, {\n          name: 'backbone',\n          source: 'backbone-amd',\n          target: '*'\n        }, {\n          name: 'backbone',\n          source: 'backbone-amd',\n          target: ''\n        }],\n        'http://twitter.github.io/bootstrap/assets/bootstrap.zip': {\n          name: '',\n          source: 'http://twitter.github.io/bootstrap/assets/bootstrap.zip',\n          target: '*'\n        },\n        'bootstrap=http://twitter.github.io/bootstrap/assets/bootstrap.zip': {\n          name: 'bootstrap',\n          source: 'http://twitter.github.io/bootstrap/assets/bootstrap.zip',\n          target: '*'\n        }\n      };\n      object.forOwn(suite, function (decEndpoints, endpoint) {\n        decEndpoints = lang.toArray(decEndpoints);\n        decEndpoints.forEach(function (decEndpoint) {\n          expect(endpointParser.compose(decEndpoint)).to.equal(endpoint);\n        });\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-endpoint-parser/test"},{"name":"should trim values","suites":["endpoint-parser",".compose"],"updatePoint":{"line":152,"column":26,"index":4712},"line":152,"code":"    it('should trim values', function () {\n      expect(endpointParser.compose({\n        name: ' foo ',\n        source: ' bar ',\n        target: ' ~1.0.2 '\n      })).to.equal('foo=bar#~1.0.2');\n      expect(endpointParser.compose({\n        name: ' foo ',\n        source: ' foo ',\n        target: ' ~1.0.2 '\n      })).to.equal('foo=foo#~1.0.2');\n      expect(endpointParser.compose({\n        name: ' foo ',\n        source: ' foo ',\n        target: ' * '\n      })).to.equal('foo=foo');\n      expect(endpointParser.compose({\n        name: ' foo ',\n        source: ' foo ',\n        target: ' * '\n      })).to.equal('foo=foo');\n      expect(endpointParser.compose({\n        name: ' ',\n        source: ' foo ',\n        target: ''\n      })).to.equal('foo');\n    });","file":"test.js","skipped":false,"dir":"packages/bower-endpoint-parser/test"},{"name":"should decompose json endpoints correctly","suites":["endpoint-parser",".json2decomposed"],"updatePoint":{"line":230,"column":49,"index":6579},"line":230,"code":"    it('should decompose json endpoints correctly', function () {\n      var dependencies = {\n        jquery: '~1.9.1',\n        foo: 'latest',\n        bar: '*',\n        baz: '#~0.2.0',\n        backbone: 'backbone-amd#~1.0.0',\n        backbone2: 'backbone=backbone-amd#~1.0.0',\n        bootstrap: 'http://twitter.github.io/bootstrap/assets/bootstrap',\n        bootstrap2: 'http://twitter.github.io/bootstrap/assets/bootstrap#*',\n        ssh: 'git@example.com',\n        git: 'git://example.com',\n        path: '/foo',\n        winpath: 'c:\\\\foo'\n      };\n      var x = 0;\n      object.forOwn(dependencies, function (value, key) {\n        expect(endpointParser.json2decomposed(key, value)).to.eql(expected[x]);\n        x += 1;\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-endpoint-parser/test"},{"name":"should trim values","suites":["endpoint-parser",".json2decomposed"],"updatePoint":{"line":251,"column":26,"index":7296},"line":251,"code":"    it('should trim values', function () {\n      var dependencies = {\n        ' jquery ': ' ~1.9.1 ',\n        ' foo ': ' latest ',\n        ' bar ': ' * ',\n        ' baz ': '# ~0.2.0 ',\n        ' backbone ': ' backbone-amd#~1.0.0 ',\n        ' backbone2 ': ' backbone=backbone-amd # ~1.0.0 ',\n        ' bootstrap ': ' http://twitter.github.io/bootstrap/assets/bootstrap',\n        ' bootstrap2 ': ' http://twitter.github.io/bootstrap/assets/bootstrap # *',\n        ' ssh ': ' git@example.com ',\n        ' git ': ' git://example.com ',\n        ' path ': ' /foo ',\n        ' winpath ': ' c:\\\\foo '\n      };\n      var x = 0;\n      object.forOwn(dependencies, function (value, key) {\n        expect(endpointParser.json2decomposed(key, value)).to.eql(expected[x]);\n        x += 1;\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-endpoint-parser/test"},{"name":"should error out if key is not specified","suites":["endpoint-parser",".json2decomposed"],"updatePoint":{"line":272,"column":48,"index":8109},"line":272,"code":"    it('should error out if key is not specified', function () {\n      try {\n        endpointParser.json2decomposed(null);\n        throw new Error('Should have failed');\n      } catch (e) {\n        expect(e.code).to.equal('EINVEND');\n        expect(e.message).to.contain('key must be specified');\n      }\n\n      try {\n        endpointParser.json2decomposed('');\n        throw new Error('Should have failed');\n      } catch (e) {\n        expect(e.code).to.equal('EINVEND');\n        expect(e.message).to.contain('key must be specified');\n      }\n    });","file":"test.js","skipped":false,"dir":"packages/bower-endpoint-parser/test"},{"name":"should compose endpoints to json correctly","suites":["endpoint-parser",".decomposed2json"],"updatePoint":{"line":320,"column":50,"index":9333},"line":320,"code":"    it('should compose endpoints to json correctly', function () {\n      var decEndpoints = [{\n        name: 'jquery',\n        source: 'jquery',\n        target: '~1.9.1'\n      }, {\n        name: 'foo',\n        source: 'foo',\n        target: 'latest'\n      }, {\n        name: 'bar',\n        source: 'bar',\n        target: '*'\n      }, {\n        name: 'baz',\n        source: 'baz',\n        target: ''\n      }, {\n        name: 'jqueryx',\n        source: 'jquery',\n        target: '~1.9.1'\n      }, {\n        name: 'jqueryy',\n        source: 'jquery-x',\n        target: ''\n      }, {\n        name: 'jqueryy',\n        source: 'jquery-x',\n        target: '*'\n      }, {\n        name: 'backbone',\n        source: 'backbone-amd',\n        target: '~1.0.0'\n      }, {\n        name: 'backbone',\n        source: 'backbone=backbone-amd',\n        target: '~1.0.0'\n      }, {\n        name: 'bootstrap',\n        source: 'http://twitter.github.io/bootstrap/assets/bootstrap',\n        target: ''\n      }, {\n        name: 'bootstrap',\n        source: 'http://twitter.github.io/bootstrap/assets/bootstrap',\n        target: '*'\n      }, {\n        name: 'ssh',\n        source: 'git@example.com',\n        target: '*'\n      }, {\n        name: 'git',\n        source: 'git://example.com',\n        target: '*'\n      }, {\n        name: 'ckeditor',\n        source: 'ckeditor',\n        target: 'full/4.3.3'\n      }];\n      var x = 0;\n      decEndpoints.forEach(function (decEndpoint) {\n        expect(endpointParser.decomposed2json(decEndpoint)).to.eql(expected[x]);\n        x += 1;\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-endpoint-parser/test"},{"name":"should trim values","suites":["endpoint-parser",".decomposed2json"],"updatePoint":{"line":384,"column":26,"index":10880},"line":384,"code":"    it('should trim values', function () {\n      var decEndpoints = [{\n        name: ' jquery ',\n        source: ' jquery ',\n        target: ' ~1.9.1 '\n      }, {\n        name: 'foo',\n        source: ' foo',\n        target: ' latest '\n      }, {\n        name: 'bar',\n        source: 'bar ',\n        target: ' * '\n      }, {\n        name: 'baz ',\n        source: 'baz',\n        target: ' '\n      }, {\n        name: ' jqueryx ',\n        source: ' jquery ',\n        target: ' ~1.9.1 '\n      }, {\n        name: ' jqueryy ',\n        source: ' jquery-x ',\n        target: ' '\n      }, {\n        name: ' jqueryy ',\n        source: ' jquery-x ',\n        target: ' * '\n      }, {\n        name: ' backbone ',\n        source: ' backbone-amd ',\n        target: ' ~1.0.0 '\n      }, {\n        name: ' backbone ',\n        source: ' backbone=backbone-amd ',\n        target: ' ~1.0.0 '\n      }, {\n        name: ' bootstrap ',\n        source: ' http://twitter.github.io/bootstrap/assets/bootstrap ',\n        target: ' '\n      }, {\n        name: ' bootstrap ',\n        source: ' http://twitter.github.io/bootstrap/assets/bootstrap ',\n        target: ' * '\n      }, {\n        name: ' ssh ',\n        source: ' git@example.com ',\n        target: ' * '\n      }, {\n        name: ' git ',\n        source: ' git://example.com ',\n        target: ' * '\n      }];\n      var x = 0;\n      decEndpoints.forEach(function (decEndpoint) {\n        expect(endpointParser.decomposed2json(decEndpoint)).to.eql(expected[x]);\n        x += 1;\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-endpoint-parser/test"},{"name":"should throw an error if name is empty","suites":["endpoint-parser",".decomposed2json"],"updatePoint":{"line":444,"column":46,"index":12419},"line":444,"code":"    it('should throw an error if name is empty', function () {\n      try {\n        endpointParser.decomposed2json({\n          name: '',\n          source: 'jquery',\n          target: '*'\n        });\n        throw new Error('Should have failed');\n      } catch (e) {\n        expect(e.code).to.equal('EINVEND');\n        expect(e.message).to.contain('must have a name');\n      }\n\n      try {\n        endpointParser.decomposed2json({\n          name: ' ',\n          source: 'jquery',\n          target: '*'\n        });\n        throw new Error('Should have failed');\n      } catch (e) {\n        expect(e.code).to.equal('EINVEND');\n        expect(e.message).to.contain('must have a name');\n      }\n    });","file":"test.js","skipped":false,"dir":"packages/bower-endpoint-parser/test"},{"name":"should find the bower.json file","suites":[".find"],"updatePoint":{"line":8,"column":39,"index":248},"line":8,"code":"    it('should find the bower.json file', function(done) {\n        bowerJson.find(__dirname + '/pkg-bower-json', function(err, file) {\n            if (err) {\n                return done(err);\n            }\n\n            expect(file).to.equal(\n                path.resolve(__dirname + '/pkg-bower-json/bower.json')\n            );\n            done();\n        });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should fallback to the component.json file","suites":[".find"],"updatePoint":{"line":21,"column":50,"index":628},"line":21,"code":"    it('should fallback to the component.json file', function(done) {\n        bowerJson.find(__dirname + '/pkg-component-json', function(err, file) {\n            if (err) {\n                return done(err);\n            }\n\n            expect(file).to.equal(\n                path.resolve(__dirname + '/pkg-component-json/component.json')\n            );\n            done();\n        });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should not fallback to the component.json file if it's a component(1) file","suites":[".find"],"updatePoint":{"line":34,"column":82,"index":1052},"line":34,"code":"    it(\"should not fallback to the component.json file if it's a component(1) file\", function(done) {\n        bowerJson.find(__dirname + '/pkg-component(1)-json', function(err) {\n            expect(err).to.be.an(Error);\n            expect(err.code).to.equal('ENOENT');\n            expect(err.message).to.equal(\n                'None of bower.json, component.json, .bower.json were found in ' +\n                    __dirname +\n                    '/pkg-component(1)-json'\n            );\n            done();\n        });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should fallback to the .bower.json file","suites":[".find"],"updatePoint":{"line":47,"column":47,"index":1544},"line":47,"code":"    it('should fallback to the .bower.json file', function(done) {\n        bowerJson.find(__dirname + '/pkg-dot-bower-json', function(err, file) {\n            if (err) {\n                return done(err);\n            }\n\n            expect(file).to.equal(\n                path.resolve(__dirname + '/pkg-dot-bower-json/.bower.json')\n            );\n            done();\n        });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should error if no component.json / bower.json / .bower.json is found","suites":[".find"],"updatePoint":{"line":60,"column":77,"index":1960},"line":60,"code":"    it('should error if no component.json / bower.json / .bower.json is found', function(done) {\n        bowerJson.find(__dirname, function(err) {\n            expect(err).to.be.an(Error);\n            expect(err.code).to.equal('ENOENT');\n            expect(err.message).to.equal(\n                'None of bower.json, component.json, .bower.json were found in ' +\n                    __dirname\n            );\n            done();\n        });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should find the bower.json file","suites":[".findSync"],"updatePoint":{"line":74,"column":39,"index":2409},"line":74,"code":"    it('should find the bower.json file', function(done) {\n        var file = bowerJson.findSync(__dirname + '/pkg-bower-json');\n\n        expect(file).to.equal(\n            path.resolve(__dirname + '/pkg-bower-json/bower.json')\n        );\n        done();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should fallback to the component.json file","suites":[".findSync"],"updatePoint":{"line":83,"column":50,"index":2684},"line":83,"code":"    it('should fallback to the component.json file', function(done) {\n        var file = bowerJson.findSync(__dirname + '/pkg-component-json');\n\n        expect(file).to.equal(\n            path.resolve(__dirname + '/pkg-component-json/component.json')\n        );\n        done();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should fallback to the .bower.json file","suites":[".findSync"],"updatePoint":{"line":92,"column":47,"index":2968},"line":92,"code":"    it('should fallback to the .bower.json file', function(done) {\n        var file = bowerJson.findSync(__dirname + '/pkg-dot-bower-json');\n\n        expect(file).to.equal(\n            path.resolve(__dirname + '/pkg-dot-bower-json/.bower.json')\n        );\n        done();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should error if no component.json / bower.json / .bower.json is found","suites":[".findSync"],"updatePoint":{"line":101,"column":77,"index":3279},"line":101,"code":"    it('should error if no component.json / bower.json / .bower.json is found', function(done) {\n        var err = bowerJson.findSync(__dirname);\n        expect(err).to.be.an(Error);\n        expect(err.code).to.equal('ENOENT');\n        expect(err.message).to.equal(\n            'None of bower.json, component.json, .bower.json were found in ' +\n                __dirname\n        );\n        done();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should give error if file does not exists","suites":[".read"],"updatePoint":{"line":114,"column":49,"index":3693},"line":114,"code":"    it('should give error if file does not exists', function(done) {\n        bowerJson.read(__dirname + '/willneverexist', function(err) {\n            expect(err).to.be.an(Error);\n            expect(err.code).to.equal('ENOENT');\n            done();\n        });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should give error if when reading an invalid json","suites":[".read"],"updatePoint":{"line":122,"column":57,"index":3971},"line":122,"code":"    it('should give error if when reading an invalid json', function(done) {\n        bowerJson.read(\n            __dirname + '/pkg-bower-json-malformed/bower.json',\n            function(err) {\n                expect(err).to.be.an(Error);\n                expect(err.code).to.equal('EMALFORMED');\n                expect(err.file).to.equal(\n                    path.resolve(\n                        __dirname + '/pkg-bower-json-malformed/bower.json'\n                    )\n                );\n                done();\n            }\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should read the file and give an object","suites":[".read"],"updatePoint":{"line":138,"column":47,"index":4507},"line":138,"code":"    it('should read the file and give an object', function(done) {\n        bowerJson.read(__dirname + '/pkg-bower-json/bower.json', function(\n            err,\n            json\n        ) {\n            if (err) {\n                return done(err);\n            }\n\n            expect(json).to.be.an('object');\n            expect(json.name).to.equal('some-pkg');\n            expect(json.version).to.equal('0.0.0');\n\n            done();\n        });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should give the json file that was read","suites":[".read"],"updatePoint":{"line":155,"column":47,"index":4958},"line":155,"code":"    it('should give the json file that was read', function(done) {\n        bowerJson.read(__dirname + '/pkg-bower-json', function(\n            err,\n            json,\n            file\n        ) {\n            if (err) {\n                return done(err);\n            }\n\n            expect(file).to.equal(\n                path.resolve(__dirname + '/pkg-bower-json/bower.json')\n            );\n            done();\n        });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should find for a json file if a directory is given","suites":[".read"],"updatePoint":{"line":172,"column":59,"index":5399},"line":172,"code":"    it('should find for a json file if a directory is given', function(done) {\n        bowerJson.read(__dirname + '/pkg-component-json', function(\n            err,\n            json,\n            file\n        ) {\n            if (err) {\n                return done(err);\n            }\n\n            expect(json).to.be.an('object');\n            expect(json.name).to.equal('some-pkg');\n            expect(json.version).to.equal('0.0.0');\n            expect(file).to.equal(\n                path.resolve(__dirname + '/pkg-component-json/component.json')\n            );\n            done();\n        });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the returned object unless validate is false","suites":[".read"],"updatePoint":{"line":192,"column":68,"index":6010},"line":192,"code":"    it('should validate the returned object unless validate is false', function(done) {\n        bowerJson.read(\n            __dirname + '/pkg-bower-json-invalid/bower.json',\n            function(err) {\n                expect(err).to.be.an(Error);\n                expect(err.message).to.contain('name');\n                expect(err.file).to.equal(\n                    path.resolve(\n                        __dirname + '/pkg-bower-json-invalid/bower.json'\n                    )\n                );\n\n                bowerJson.read(\n                    __dirname + '/pkg-bower-json-invalid/bower.json',\n                    { validate: false },\n                    function(err) {\n                        done(err);\n                    }\n                );\n            }\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should normalize the returned object if normalize is true","suites":[".read"],"updatePoint":{"line":215,"column":65,"index":6791},"line":215,"code":"    it('should normalize the returned object if normalize is true', function(done) {\n        bowerJson.read(__dirname + '/pkg-bower-json/bower.json', function(\n            err,\n            json\n        ) {\n            if (err) {\n                return done(err);\n            }\n\n            expect(json.main).to.equal('foo.js');\n\n            bowerJson.read(\n                __dirname + '/pkg-bower-json/bower.json',\n                { normalize: true },\n                function(err, json) {\n                    if (err) {\n                        return done(err);\n                    }\n\n                    expect(json.main).to.eql(['foo.js']);\n                    done();\n                }\n            );\n        });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should give error if file does not exists","suites":[".readSync"],"updatePoint":{"line":243,"column":49,"index":7540},"line":243,"code":"    it('should give error if file does not exists', function(done) {\n        var err = bowerJson.readSync(__dirname + '/willneverexist');\n        expect(err).to.be.an(Error);\n        expect(err.code).to.equal('ENOENT');\n        done();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should give error if when reading an invalid json","suites":[".readSync"],"updatePoint":{"line":250,"column":57,"index":7793},"line":250,"code":"    it('should give error if when reading an invalid json', function(done) {\n        var err = bowerJson.readSync(\n            __dirname + '/pkg-bower-json-malformed/bower.json'\n        );\n        expect(err).to.be.an(Error);\n        expect(err.code).to.equal('EMALFORMED');\n        expect(err.file).to.equal(\n            path.resolve(__dirname + '/pkg-bower-json-malformed/bower.json')\n        );\n        done();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should read the file and give an object","suites":[".readSync"],"updatePoint":{"line":262,"column":47,"index":8206},"line":262,"code":"    it('should read the file and give an object', function(done) {\n        var json = bowerJson.readSync(__dirname + '/pkg-bower-json/bower.json');\n\n        expect(json).to.be.an('object');\n        expect(json.name).to.equal('some-pkg');\n        expect(json.version).to.equal('0.0.0');\n\n        done();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should find for a json file if a directory is given","suites":[".readSync"],"updatePoint":{"line":272,"column":59,"index":8530},"line":272,"code":"    it('should find for a json file if a directory is given', function(done) {\n        var json = bowerJson.readSync(__dirname + '/pkg-component-json');\n\n        expect(json).to.be.an('object');\n        expect(json.name).to.equal('some-pkg');\n        expect(json.version).to.equal('0.0.0');\n        done();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the returned object unless validate is false","suites":[".readSync"],"updatePoint":{"line":281,"column":68,"index":8855},"line":281,"code":"    it('should validate the returned object unless validate is false', function(done) {\n        var err = bowerJson.readSync(\n            __dirname + '/pkg-bower-json-invalid/bower.json'\n        );\n        expect(err).to.be.an(Error);\n        expect(err.message).to.contain('name');\n        expect(err.file).to.equal(\n            path.resolve(__dirname + '/pkg-bower-json-invalid/bower.json')\n        );\n\n        err = bowerJson.readSync(\n            __dirname + '/pkg-bower-json-invalid/bower.json',\n            { validate: false }\n        );\n        expect(err).to.not.be.an(Error);\n        done();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should normalize the returned object if normalize is true","suites":[".readSync"],"updatePoint":{"line":299,"column":65,"index":9462},"line":299,"code":"    it('should normalize the returned object if normalize is true', function(done) {\n        var json = bowerJson.readSync(__dirname + '/pkg-bower-json/bower.json');\n        expect(json.main).to.equal('foo.js');\n\n        json = bowerJson.readSync(__dirname + '/pkg-bower-json/bower.json', {\n            normalize: true\n        });\n\n        expect(json.main).to.eql(['foo.js']);\n        done();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should return the same object, unless clone is true","suites":[".parse"],"updatePoint":{"line":313,"column":59,"index":9895},"line":313,"code":"    it('should return the same object, unless clone is true', function() {\n        var json = { name: 'foo' };\n\n        expect(bowerJson.parse(json)).to.equal(json);\n        expect(bowerJson.parse(json, { clone: true })).to.not.equal(json);\n        expect(bowerJson.parse(json, { clone: true })).to.eql(json);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the passed object, unless validate is false","suites":[".parse"],"updatePoint":{"line":321,"column":67,"index":10222},"line":321,"code":"    it('should validate the passed object, unless validate is false', function() {\n        expect(function() {\n            bowerJson.parse({});\n        }).to.throwException(/name/);\n\n        expect(function() {\n            bowerJson.parse({}, { validate: false });\n        }).to.not.throwException();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should not normalize the passed object unless normalize is true","suites":[".parse"],"updatePoint":{"line":331,"column":71,"index":10536},"line":331,"code":"    it('should not normalize the passed object unless normalize is true', function() {\n        var json = { name: 'foo', main: 'foo.js' };\n\n        bowerJson.parse(json);\n        expect(json.main).to.eql('foo.js');\n\n        bowerJson.parse(json, { normalize: true });\n        expect(json.main).to.eql(['foo.js']);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should print no errors even for weird package names","suites":[".getIssues"],"updatePoint":{"line":343,"column":59,"index":10887},"line":343,"code":"    it('should print no errors even for weird package names', function() {\n        var json = { name: '@gruNt/my dependency' };\n\n        expect(bowerJson.getIssues(json).errors).to.be.empty();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the name length","suites":[".getIssues"],"updatePoint":{"line":349,"column":39,"index":11069},"line":349,"code":"    it('should validate the name length', function() {\n        var json = {\n            name: 'a_123456789_123456789_123456789_123456789_123456789_z'\n        };\n\n        expect(bowerJson.getIssues(json).warnings).to.contain(\n            'The \"name\" is too long, the limit is 50 characters'\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the name is lowercase","suites":[".getIssues"],"updatePoint":{"line":359,"column":45,"index":11385},"line":359,"code":"    it('should validate the name is lowercase', function() {\n        var json = { name: 'gruNt' };\n\n        expect(bowerJson.getIssues(json).warnings).to.contain(\n            'The \"name\" is recommended to be lowercase, can contain digits, dots, dashes'\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the name starts with lowercase","suites":[".getIssues"],"updatePoint":{"line":367,"column":54,"index":11667},"line":367,"code":"    it('should validate the name starts with lowercase', function() {\n        var json = { name: '-runt' };\n\n        expect(bowerJson.getIssues(json).warnings).to.contain(\n            'The \"name\" cannot start with dot or dash'\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the name starts with lowercase","suites":[".getIssues"],"updatePoint":{"line":375,"column":54,"index":11914},"line":375,"code":"    it('should validate the name starts with lowercase', function() {\n        var json = { name: '.grunt' };\n\n        expect(bowerJson.getIssues(json).warnings).to.contain(\n            'The \"name\" cannot start with dot or dash'\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the name ends with lowercase","suites":[".getIssues"],"updatePoint":{"line":383,"column":52,"index":12160},"line":383,"code":"    it('should validate the name ends with lowercase', function() {\n        var json = { name: 'grun-' };\n\n        expect(bowerJson.getIssues(json).warnings).to.contain(\n            'The \"name\" cannot end with dot or dash'\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the name ends with lowercase","suites":[".getIssues"],"updatePoint":{"line":391,"column":52,"index":12403},"line":391,"code":"    it('should validate the name ends with lowercase', function() {\n        var json = { name: 'grun.' };\n\n        expect(bowerJson.getIssues(json).warnings).to.contain(\n            'The \"name\" cannot end with dot or dash'\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the name is valid","suites":[".getIssues"],"updatePoint":{"line":399,"column":41,"index":12635},"line":399,"code":"    it('should validate the name is valid', function() {\n        var json = { name: 'gru.n-t' };\n\n        expect(bowerJson.getIssues(json).warnings).to.eql([]);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the description length","suites":[".getIssues"],"updatePoint":{"line":405,"column":46,"index":12810},"line":405,"code":"    it('should validate the description length', function() {\n        var json = {\n            name: 'foo',\n            description: _s.repeat('æ', 141)\n        };\n\n        expect(bowerJson.getIssues(json).warnings).to.contain(\n            'The \"description\" is too long, the limit is 140 characters'\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the description is valid","suites":[".getIssues"],"updatePoint":{"line":416,"column":48,"index":13133},"line":416,"code":"    it('should validate the description is valid', function() {\n        var json = {\n            name: 'foo',\n            description: _s.repeat('æ', 140)\n        };\n\n        expect(bowerJson.getIssues(json).warnings).to.eql([]);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate that main does not contain globs","suites":[".getIssues"],"updatePoint":{"line":425,"column":56,"index":13380},"line":425,"code":"    it('should validate that main does not contain globs', function() {\n        var json = {\n            name: 'foo',\n            main: ['js/*.js']\n        };\n\n        expect(bowerJson.getIssues(json).warnings).to.contain(\n            'The \"main\" field cannot contain globs (example: \"*.js\")'\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate that main does not contain minified files","suites":[".getIssues"],"updatePoint":{"line":436,"column":65,"index":13702},"line":436,"code":"    it('should validate that main does not contain minified files', function() {\n        var json = {\n            name: 'foo',\n            main: ['foo.min.css']\n        };\n\n        expect(bowerJson.getIssues(json).warnings).to.contain(\n            'The \"main\" field cannot contain minified files'\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate that main does not contain fonts","suites":[".getIssues"],"updatePoint":{"line":447,"column":56,"index":14010},"line":447,"code":"    it('should validate that main does not contain fonts', function() {\n        var json = {\n            name: 'foo',\n            main: ['foo.woff']\n        };\n\n        expect(bowerJson.getIssues(json).warnings).to.contain(\n            'The \"main\" field cannot contain font, image, audio, or video files'\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate that main does not contain images","suites":[".getIssues"],"updatePoint":{"line":458,"column":57,"index":14336},"line":458,"code":"    it('should validate that main does not contain images', function() {\n        var json = {\n            name: 'foo',\n            main: ['foo.png']\n        };\n\n        expect(bowerJson.getIssues(json).warnings).to.contain(\n            'The \"main\" field cannot contain font, image, audio, or video files'\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate that main does not contain multiple files of the same filetype","suites":[".getIssues"],"updatePoint":{"line":469,"column":86,"index":14690},"line":469,"code":"    it('should validate that main does not contain multiple files of the same filetype', function() {\n        var json = {\n            name: 'foo',\n            main: ['foo.js', 'bar.js']\n        };\n\n        expect(bowerJson.getIssues(json).warnings).to.contain(\n            'The \"main\" field has to contain only 1 file per filetype; found multiple .js files: [\"foo.js\",\"bar.js\"]'\n        );\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the name property","suites":[".validate"],"updatePoint":{"line":482,"column":41,"index":15084},"line":482,"code":"    it('should validate the name property', function() {\n        expect(function() {\n            bowerJson.validate({});\n        }).to.throwException(/name/);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the type of main","suites":[".validate"],"updatePoint":{"line":488,"column":40,"index":15251},"line":488,"code":"    it('should validate the type of main', function() {\n        var json = {\n            name: 'foo',\n            main: {}\n        };\n        expect(function() {\n            bowerJson.validate(json);\n        }).to.throwException();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate the type of items of an Array main","suites":[".validate"],"updatePoint":{"line":497,"column":58,"index":15509},"line":497,"code":"    it('should validate the type of items of an Array main', function() {\n        var json = {\n            name: 'foo',\n            main: [{}]\n        };\n        expect(function() {\n            bowerJson.validate(json);\n        }).to.throwException();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should normalize the main property","suites":[".normalize"],"updatePoint":{"line":509,"column":42,"index":15794},"line":509,"code":"    it('should normalize the main property', function() {\n        var json = { name: 'foo', main: 'foo.js' };\n\n        bowerJson.normalize(json);\n        expect(json.main).to.eql(['foo.js']);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should validate each listed package","suites":["packages from bower registry"],"updatePoint":{"line":545,"column":43,"index":16688},"line":545,"code":"    it('should validate each listed package', function(done) {\n        expect(packageList).to.be.an('array');\n\n        var invalidPackageCount = 0;\n\n        packageList.forEach(function(package) {\n            try {\n                bowerJson.validate(package);\n            } catch (e) {\n                invalidPackageCount++;\n                console.error(\n                    'validation of \"' + package.name + '\" failed: ' + e.message\n                );\n            }\n        });\n\n        if (invalidPackageCount) {\n            throw new Error(\n                invalidPackageCount +\n                    '/' +\n                    packageList.length +\n                    ' package names do not validate'\n            );\n        }\n\n        done();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-json/test"},{"name":"should provide an instance of Logger","suites":["Logger",".constructor"],"updatePoint":{"line":13,"column":44,"index":311},"line":13,"code":"    it('should provide an instance of Logger', function () {\n      expect(logger instanceof Logger).to.be(true);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should provide an instance of EventEmitter","suites":["Logger",".constructor"],"updatePoint":{"line":16,"column":50,"index":438},"line":16,"code":"    it('should provide an instance of EventEmitter', function () {\n      expect(logger instanceof EventEmitter).to.be(true);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should have prototype methods","suites":["Logger",".constructor"],"updatePoint":{"line":19,"column":37,"index":558},"line":19,"code":"    it('should have prototype methods', function () {\n      var methods = ['intercept', 'pipe', 'geminate', 'log'];\n      methods.forEach(function (method) {\n        expect(logger).to.have.property(method);\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should pass through {}","suites":["Logger","events"],"updatePoint":{"line":31,"column":30,"index":882},"line":31,"code":"    it('should pass through {}', function (next) {\n      logger.on('log', function (log) {\n        expect(log.data).to.eql({});\n        next();\n      });\n      logger.info();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should pass through logData","suites":["Logger","events"],"updatePoint":{"line":38,"column":35,"index":1070},"line":38,"code":"    it('should pass through logData', function (next) {\n      logger.on('log', function (log) {\n        expect(log.data).to.eql(logData);\n        next();\n      });\n      logger.info('foo', 'message', logData);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should emit error event","suites":["Logger","events"],"updatePoint":{"line":45,"column":31,"index":1284},"line":45,"code":"    it('should emit error event', function (next) {\n      logger.on('log', function (log) {\n        expect(log.level).to.eql('error');\n        expect(log.id).to.eql('foo');\n        expect(log.message).to.eql('error message');\n        expect(log.data).to.eql({});\n        next();\n      });\n      logger.error('foo', 'error message');\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should emit conflict event","suites":["Logger","events"],"updatePoint":{"line":55,"column":34,"index":1628},"line":55,"code":"    it('should emit conflict event', function (next) {\n      logger.on('log', function (log) {\n        expect(log.level).to.eql('conflict');\n        expect(log.id).to.eql('foo');\n        expect(log.message).to.eql('conflict message');\n        expect(log.data).to.eql({});\n        next();\n      });\n      logger.conflict('foo', 'conflict message');\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should emit warn event","suites":["Logger","events"],"updatePoint":{"line":65,"column":30,"index":1980},"line":65,"code":"    it('should emit warn event', function (next) {\n      logger.on('log', function (log) {\n        expect(log.level).to.eql('warn');\n        expect(log.id).to.eql('foo');\n        expect(log.message).to.eql('warn message');\n        expect(log.data).to.eql({});\n        next();\n      });\n      logger.warn('foo', 'warn message');\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should emit action event","suites":["Logger","events"],"updatePoint":{"line":75,"column":32,"index":2318},"line":75,"code":"    it('should emit action event', function (next) {\n      logger.on('log', function (log) {\n        expect(log.level).to.eql('action');\n        expect(log.id).to.eql('foo');\n        expect(log.message).to.eql('action message');\n        expect(log.data).to.eql({});\n        next();\n      });\n      logger.action('foo', 'action message');\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should emit info event","suites":["Logger","events"],"updatePoint":{"line":85,"column":30,"index":2662},"line":85,"code":"    it('should emit info event', function (next) {\n      logger.on('log', function (log) {\n        expect(log.level).to.eql('info');\n        expect(log.id).to.eql('foo');\n        expect(log.message).to.eql('info message');\n        expect(log.data).to.eql({});\n        next();\n      });\n      logger.info('foo', 'info message');\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should emit debug event","suites":["Logger","events"],"updatePoint":{"line":95,"column":31,"index":2999},"line":95,"code":"    it('should emit debug event', function (next) {\n      logger.on('log', function (log) {\n        expect(log.level).to.eql('debug');\n        expect(log.id).to.eql('foo');\n        expect(log.message).to.eql('debug message');\n        expect(log.data).to.eql({});\n        next();\n      });\n      logger.debug('foo', 'debug message');\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should add the function and call it when a log occurs","suites":["Logger",".intercept"],"updatePoint":{"line":107,"column":61,"index":3415},"line":107,"code":"    it('should add the function and call it when a log occurs', function (next) {\n      var called;\n      var data = {\n        some: 'thing'\n      };\n      logger.intercept(function (log) {\n        called = true;\n        expect(log).to.eql({\n          level: 'warn',\n          id: 'foo',\n          message: 'bar',\n          data: data\n        });\n        expect(log.data).to.equal(data);\n      });\n      logger.log('warn', 'foo', 'bar', data);\n      expect(called).to.be(true);\n      next();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should call the interceptors by order before emitting the event","suites":["Logger",".intercept"],"updatePoint":{"line":126,"column":71,"index":3925},"line":126,"code":"    it('should call the interceptors by order before emitting the event', function (next) {\n      var called = [];\n      logger.intercept(function () {\n        called.push(1);\n      });\n      logger.intercept(function () {\n        called.push(2);\n      });\n      logger.log('warn', 'foo', 'bar');\n      expect(called).to.eql([1, 2]);\n      next();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should call the interceptors along the chain","suites":["Logger",".intercept"],"updatePoint":{"line":138,"column":52,"index":4262},"line":138,"code":"    it('should call the interceptors along the chain', function (next) {\n      var called = [];\n      var childLogger = logger.geminate();\n      childLogger.intercept(function () {\n        called.push(1);\n      });\n      logger.intercept(function () {\n        called.push(3);\n      });\n      childLogger.on('log', function () {\n        called.push(2);\n      });\n      logger.on('log', function () {\n        called.push(4);\n      });\n      childLogger.log('warn', 'foo', 'bar');\n      expect(called).to.eql([1, 2, 3, 4]);\n      next();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should return the passed emitter","suites":["Logger",".pipe"],"updatePoint":{"line":159,"column":40,"index":4833},"line":159,"code":"    it('should return the passed emitter', function () {\n      var otherEmitter = new EventEmitter();\n      expect(logger.pipe(otherEmitter)).to.equal(otherEmitter);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should pipe log events to another emitter","suites":["Logger",".pipe"],"updatePoint":{"line":163,"column":49,"index":5016},"line":163,"code":"    it('should pipe log events to another emitter', function (next) {\n      var otherEmitter = new EventEmitter();\n      var data = {\n        some: 'thing'\n      };\n      var piped;\n      logger.pipe(otherEmitter);\n      otherEmitter.on('log', function (log) {\n        piped = true;\n        expect(log).to.eql({\n          level: 'warn',\n          id: 'foo',\n          message: 'bar',\n          data: data\n        });\n      });\n      logger.log('warn', 'foo', 'bar', data);\n      expect(piped).to.be(true);\n      next();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should return a new logger instance","suites":["Logger",".geminate"],"updatePoint":{"line":185,"column":43,"index":5582},"line":185,"code":"    it('should return a new logger instance', function () {\n      var newLogger = logger.geminate();\n      expect(newLogger).to.be.an(Logger);\n      expect(newLogger).to.be.an(EventEmitter);\n      expect(newLogger).to.not.be.equal(logger);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should pipe the new logger events to the original logger","suites":["Logger",".geminate"],"updatePoint":{"line":191,"column":64,"index":5851},"line":191,"code":"    it('should pipe the new logger events to the original logger', function (next) {\n      var piped = [];\n      var childLogger = logger.geminate();\n      var data = {\n        some: 'thing'\n      };\n      childLogger.on('log', function (log) {\n        piped.push(1);\n        expect(log).to.eql({\n          level: 'warn',\n          id: 'foo',\n          message: 'bar',\n          data: data\n        });\n        expect(log.data).to.equal(data);\n      });\n      logger.on('log', function (log) {\n        piped.push(2);\n        expect(log).to.eql({\n          level: 'warn',\n          id: 'foo',\n          message: 'bar',\n          data: data\n        });\n        expect(log.data).to.equal(data);\n      });\n      childLogger.log('warn', 'foo', 'bar', data);\n      expect(piped).to.eql([1, 2]);\n      next();\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should only allow calling the callback once","suites":["Logger",".prompt"],"updatePoint":{"line":223,"column":51,"index":6690},"line":223,"code":"    it('should only allow calling the callback once', function () {\n      var calls = 0;\n      logger.once('prompt', function (prompts, callback) {\n        callback({\n          prompt: 'bar'\n        });\n        callback({\n          prompt: 'foo'\n        });\n      }).prompt({\n        type: 'input',\n        message: 'foo'\n      }, function () {\n        calls += 1;\n      });\n      expect(calls).to.equal(1);\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should accept a prompt","suites":["Logger",".prompt"],"updatePoint":{"line":240,"column":30,"index":7085},"line":240,"code":"    it('should accept a prompt', function (next) {\n      logger.once('prompt', function (prompts, callback) {\n        callback({\n          prompt: 'bar'\n        });\n      }).prompt({\n        type: 'input',\n        message: 'foo'\n      }, function (err, answer) {\n        expect(err).to.not.be.ok();\n        expect(answer).to.equal('bar');\n        next();\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should accept several prompts","suites":["Logger",".prompt"],"updatePoint":{"line":254,"column":37,"index":7465},"line":254,"code":"    it('should accept several prompts', function (next) {\n      logger.once('prompt', function (prompts, callback) {\n        callback({\n          foo: 'bar',\n          foz: 'baz'\n        });\n      }).prompt([{\n        name: 'foo',\n        type: 'input',\n        message: 'foo'\n      }, {\n        name: 'foz',\n        type: 'confirm',\n        message: 'foz'\n      }], function (err, answer) {\n        expect(err).to.not.be.ok();\n        expect(answer.foo).to.equal('bar');\n        expect(answer.foz).to.equal('baz');\n        logger.once('prompt', function (prompts, callback) {\n          callback({\n            foo: 'bar'\n          });\n        }).prompt([{\n          name: 'foo',\n          type: 'input',\n          message: 'foo'\n        }], function (err, answer) {\n          expect(err).to.not.be.ok();\n          expect(answer.foo).to.equal('bar');\n          next();\n        });\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should error on invalid prompt type","suites":["Logger",".prompt"],"updatePoint":{"line":287,"column":43,"index":8369},"line":287,"code":"    it('should error on invalid prompt type', function (next) {\n      logger.prompt({\n        type: 'xxx',\n        message: 'foo'\n      }, function (err) {\n        expect(err).to.be.an(Error);\n        expect(err.code).to.be('ENOTSUP');\n        next();\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should trim the answers","suites":["Logger",".prompt"],"updatePoint":{"line":297,"column":31,"index":8627},"line":297,"code":"    it('should trim the answers', function (next) {\n      logger.once('prompt', function (prompts, callback) {\n        callback({\n          prompt: ' bar '\n        });\n      }).prompt({\n        type: 'input',\n        message: 'foo'\n      }, function (err, answer) {\n        expect(err).to.not.be.ok();\n        expect(answer).to.equal('bar');\n        next();\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should trim multiple response answers","suites":["Logger",".prompt"],"updatePoint":{"line":311,"column":45,"index":9017},"line":311,"code":"    it('should trim multiple response answers', function (next) {\n      logger.once('prompt', function (prompts, callback) {\n        callback({\n          prompt: [' bar ', ' foo', 'baz ']\n        });\n      }).prompt({\n        type: 'checkbox',\n        message: 'foo'\n      }, function (err, answer) {\n        expect(err).to.not.be.ok();\n        expect(answer).to.eql(['bar', 'foo', 'baz']);\n        next();\n      });\n    });","file":"test.js","skipped":false,"dir":"packages/bower-logger/test"},{"name":"should provide an instance of RegistryClient","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":32,"column":54,"index":793},"line":32,"code":"      it('should provide an instance of RegistryClient', function () {\n        expect(this.registry instanceof RegistryClient).to.be.ok;\n      });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should set default registry config","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":35,"column":44,"index":930},"line":35,"code":"      it('should set default registry config', function () {\n        expect(this.registry._config.registry).to.eql(this.conf);\n      });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should set default search config","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":38,"column":42,"index":1065},"line":38,"code":"      it('should set default search config', function () {\n        expect(this.registry._config.registry.search[0]).to.eql(this.uri);\n      });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should set default register config","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":41,"column":44,"index":1211},"line":41,"code":"      it('should set default register config', function () {\n        expect(this.registry._config.registry.register).to.eql(this.uri);\n      });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should set default publish config","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":44,"column":43,"index":1355},"line":44,"code":"      it('should set default publish config', function () {\n        expect(this.registry._config.registry.publish).to.eql(this.uri);\n      });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should set default cache path config","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":47,"column":46,"index":1501},"line":47,"code":"      it('should set default cache path config', function () {\n        expect(typeof this.registry._config.cache === 'string').to.be.ok;\n      });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should set default timeout config","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":50,"column":43,"index":1645},"line":50,"code":"      it('should set default timeout config', function () {\n        expect(this.registry._config.timeout).to.eql(this.timeoutVal);\n      });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should set default strictSsl config","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":53,"column":45,"index":1788},"line":53,"code":"      it('should set default strictSsl config', function () {\n        expect(this.registry._config.strictSsl).to.be(false);\n      });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should have a lookup prototype method","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":57,"column":45,"index":1930},"line":57,"code":"    it('should have a lookup prototype method', function () {\n      expect(RegistryClient.prototype).to.have.property('lookup');\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should have a search prototype method","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":60,"column":45,"index":2067},"line":60,"code":"    it('should have a search prototype method', function () {\n      expect(RegistryClient.prototype).to.have.property('search');\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should have a list prototype method","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":63,"column":43,"index":2202},"line":63,"code":"    it('should have a list prototype method', function () {\n      expect(RegistryClient.prototype).to.have.property('list');\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should have a register prototype method","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":66,"column":47,"index":2339},"line":66,"code":"    it('should have a register prototype method', function () {\n      expect(RegistryClient.prototype).to.have.property('register');\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should have a clearCache prototype method","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":69,"column":49,"index":2482},"line":69,"code":"    it('should have a clearCache prototype method', function () {\n      expect(RegistryClient.prototype).to.have.property('clearCache');\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should have a resetCache prototype method","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":72,"column":49,"index":2627},"line":72,"code":"    it('should have a resetCache prototype method', function () {\n      expect(RegistryClient.prototype).to.have.property('resetCache');\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should have a clearRuntimeCache static method","suites":["RegistryClient","Constructor","instantiating a client"],"updatePoint":{"line":75,"column":53,"index":2776},"line":75,"code":"    it('should have a clearRuntimeCache static method', function () {\n      expect(RegistryClient).to.have.property('clearRuntimeCache');\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should not return search results if cache is empty","suites":["RegistryClient","instantiating a client with custom options","offline"],"updatePoint":{"line":81,"column":60,"index":3044},"line":81,"code":"      it('should not return search results if cache is empty', function (next) {\n        // TODO: this test should be made individually for search, list and lookup\n        this.registry.clearCache(function () {\n          this.registry._config.offline = true;\n          this.registry.search('jquery', function (err, results) {\n            expect(err).to.be(null);\n            expect(results.length).to.eql(0);\n            next();\n          });\n        }.bind(this));\n      });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should fill cache","suites":["RegistryClient","instantiating a client with custom options","cache"],"updatePoint":{"line":109,"column":27,"index":4215},"line":109,"code":"      it('should fill cache', function (next) {\n        var self = this; // fill cache\n\n        self.client.search(self.pkg, function (err, results) {\n          expect(err).to.be(null);\n          expect(results.length).to.eql(334); // check for cache existence\n\n          fs.exists(self.path, function (exists) {\n            expect(exists).to.be(true);\n            next();\n          });\n        });\n      });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should read results from cache","suites":["RegistryClient","instantiating a client with custom options","cache"],"updatePoint":{"line":122,"column":40,"index":4637},"line":122,"code":"      it('should read results from cache', function (next) {\n        var self = this;\n        self.client.search(self.pkg, function (err, results) {\n          expect(err).to.be(null);\n          expect(results.length).to.eql(334);\n          fs.exists(self.path, function (exists) {\n            expect(exists).to.be(true);\n            next();\n          });\n        });\n      });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should not return an error","suites":["RegistryClient","calling the lookup instance method with argument"],"updatePoint":{"line":146,"column":34,"index":5368},"line":146,"code":"    it('should not return an error', function (next) {\n      this.registry.lookup('jquery', function (err) {\n        expect(err).to.be(null);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry type","suites":["RegistryClient","calling the lookup instance method with argument"],"updatePoint":{"line":152,"column":32,"index":5542},"line":152,"code":"    it('should return entry type', function (next) {\n      this.registry.lookup('jquery', function (err, entry) {\n        expect(err).to.be(null);\n        expect(entry.type).to.eql('alias');\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry url ","suites":["RegistryClient","calling the lookup instance method with argument"],"updatePoint":{"line":159,"column":32,"index":5767},"line":159,"code":"    it('should return entry url ', function (next) {\n      this.registry.lookup('jquery', function (err, entry) {\n        expect(err).to.be(null);\n        expect(entry.url).to.eql('git://github.com/components/jquery.git');\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return no result","suites":["RegistryClient","calling the lookup instance method without argument"],"updatePoint":{"line":168,"column":31,"index":6114},"line":168,"code":"    it('should return no result', function (next) {\n      this.timeout(10000);\n      this.registry.lookup('', function (err, entry) {\n        expect(err).to.not.be.ok();\n        expect(entry).to.not.be.ok();\n        next();\n      });\n    });","file":"Client.js","skipped":true,"dir":"packages/bower-registry-client/test"},{"name":"should return entry type","suites":["RegistryClient","calling the lookup instance method with two registries, and the first missing."],"updatePoint":{"line":197,"column":32,"index":7077},"line":197,"code":"    it('should return entry type', function (next) {\n      this.registry.lookup('jquery', function (err, entry) {\n        expect(err).to.be(null);\n        expect(entry).to.be.an('object');\n        expect(entry.type).to.eql('alias');\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry url ","suites":["RegistryClient","calling the lookup instance method with two registries, and the first missing."],"updatePoint":{"line":205,"column":32,"index":7344},"line":205,"code":"    it('should return entry url ', function (next) {\n      this.registry.lookup('jquery', function (err, entry) {\n        expect(err).to.be(null);\n        expect(entry).to.be.an('object');\n        expect(entry.url).to.eql('git://github.com/foo/baz');\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry type","suites":["RegistryClient","calling the lookup instance method with three registries"],"updatePoint":{"line":233,"column":32,"index":8409},"line":233,"code":"    it('should return entry type', function (next) {\n      this.registry.lookup('jquery', function (err, entry) {\n        expect(err).to.be(null);\n        expect(entry).to.be.an('object');\n        expect(entry.type).to.eql('alias');\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry url ","suites":["RegistryClient","calling the lookup instance method with three registries"],"updatePoint":{"line":241,"column":32,"index":8676},"line":241,"code":"    it('should return entry url ', function (next) {\n      this.registry.lookup('jquery', function (err, entry) {\n        expect(err).to.be(null);\n        expect(entry).to.be.an('object');\n        expect(entry.url).to.eql('git://github.com/foo/bar');\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should respect order","suites":["RegistryClient","calling the lookup instance method with three registries"],"updatePoint":{"line":249,"column":28,"index":8957},"line":249,"code":"    it('should respect order', function (next) {\n      this.registry._config.registry.search = ['https://registry.bower.io', 'http://custom-registry2.com', 'http://custom-registry.com'];\n      this.registry.lookup('jquery', function (err, entry) {\n        expect(err).to.be(null);\n        expect(entry).to.be.an('object');\n        expect(entry.url).to.eql('git://github.com/foo/baz');\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should not return an error","suites":["RegistryClient","calling the register instance method with argument"],"updatePoint":{"line":268,"column":34,"index":9756},"line":268,"code":"    it('should not return an error', function (next) {\n      this.registry.register(this.pkg, this.pkgUrl, function (err) {\n        expect(err).to.be(null);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry name","suites":["RegistryClient","calling the register instance method with argument"],"updatePoint":{"line":274,"column":32,"index":9945},"line":274,"code":"    it('should return entry name', function (next) {\n      var self = this;\n      this.registry.register(this.pkg, this.pkgUrl, function (err, entry) {\n        expect(err).to.be(null);\n        expect(entry.name).to.eql(self.pkg);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry url","suites":["RegistryClient","calling the register instance method with argument"],"updatePoint":{"line":282,"column":31,"index":10208},"line":282,"code":"    it('should return entry url', function (next) {\n      var self = this;\n      this.registry.register(this.pkg, this.pkgUrl, function (err, entry) {\n        expect(err).to.be(null);\n        expect(entry.url).to.eql(self.pkgUrl);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return an error and no result","suites":["RegistryClient","calling the register instance method without arguments"],"updatePoint":{"line":295,"column":44,"index":10700},"line":295,"code":"    it('should return an error and no result', function (next) {\n      this.registry.register('', '', function (err, entry) {\n        expect(err).to.be.an(Error);\n        expect(entry).to.be(undefined);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should not return an error when valid","suites":["RegistryClient","calling the unregister instance method with argument"],"updatePoint":{"line":313,"column":45,"index":11338},"line":313,"code":"    it('should not return an error when valid', function (next) {\n      this.registry.unregister(this.pkg, function (err) {\n        expect(err).to.be(null);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry name","suites":["RegistryClient","calling the unregister instance method with argument"],"updatePoint":{"line":319,"column":32,"index":11516},"line":319,"code":"    it('should return entry name', function (next) {\n      var self = this;\n      this.registry.unregister(this.pkg, function (err, entry) {\n        expect(err).to.be(null);\n        expect(entry.name).to.eql(self.pkg);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return an error","suites":["RegistryClient","calling the unregister instance method with invalid token"],"updatePoint":{"line":334,"column":30,"index":12058},"line":334,"code":"    it('should return an error', function (next) {\n      this.registry.unregister(this.pkg, function (err, entry) {\n        expect(err).to.be.an(Error);\n        expect(entry).to.be(undefined);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return an error","suites":["RegistryClient","calling the unregister instance method with invalid package"],"updatePoint":{"line":349,"column":30,"index":12673},"line":349,"code":"    it('should return an error', function (next) {\n      this.registry.unregister(this.notpkg, function (err, entry) {\n        expect(err).to.be.an(Error);\n        expect(entry).to.be(undefined);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should not return an error","suites":["RegistryClient","calling the search instance method with argument"],"updatePoint":{"line":367,"column":34,"index":13311},"line":367,"code":"    it('should not return an error', function (next) {\n      this.registry.search(this.pkg, function (err) {\n        expect(err).to.be(null);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry name","suites":["RegistryClient","calling the search instance method with argument"],"updatePoint":{"line":373,"column":32,"index":13485},"line":373,"code":"    it('should return entry name', function (next) {\n      var self = this;\n      this.registry.search(this.pkg, function (err, results) {\n        var found = results.some(function (entry) {\n          return entry.name === self.pkg;\n        });\n        expect(found).to.be(true);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry url","suites":["RegistryClient","calling the search instance method with argument"],"updatePoint":{"line":383,"column":31,"index":13798},"line":383,"code":"    it('should return entry url', function (next) {\n      var self = this;\n      this.registry.search(this.pkg, function (err, results) {\n        var found = results.some(function (entry) {\n          return entry.url === self.pkgUrl;\n        });\n        expect(found).to.be(true);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry name","suites":["RegistryClient","calling the search instance method with two registries"],"updatePoint":{"line":411,"column":32,"index":14811},"line":411,"code":"    it('should return entry name', function (next) {\n      var self = this;\n      this.registry.search(this.pkg, function (err, results) {\n        var found = results.some(function (entry) {\n          return entry.name === self.pkg;\n        });\n        expect(found).to.be(true);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry url","suites":["RegistryClient","calling the search instance method with two registries"],"updatePoint":{"line":421,"column":31,"index":15124},"line":421,"code":"    it('should return entry url', function (next) {\n      var self = this;\n      this.registry.search(this.pkg, function (err, results) {\n        if (!results.length) {\n          return next(new Error('Result expected'));\n        }\n\n        var found = results.some(function (entry) {\n          return entry.url === self.pkgUrl;\n        });\n        expect(found).to.be(true);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return an error and no results","suites":["RegistryClient","calling the search instance method without argument"],"updatePoint":{"line":440,"column":45,"index":15752},"line":440,"code":"    it('should return an error and no results', function (next) {\n      this.registry.search('', function (err, results) {\n        expect(err).to.be.an(Error);\n        expect(results).to.be(undefined);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should not return an error","suites":["RegistryClient","calling the list instance method"],"updatePoint":{"line":456,"column":34,"index":16223},"line":456,"code":"    it('should not return an error', function (next) {\n      this.registry.list(function (err) {\n        expect(err).to.be(null);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return results array","suites":["RegistryClient","calling the list instance method"],"updatePoint":{"line":462,"column":35,"index":16388},"line":462,"code":"    it('should return results array', function (next) {\n      this.registry.list(function (err, results) {\n        expect(results).to.be.an('array');\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry name","suites":["RegistryClient","calling the list instance method with two registries"],"updatePoint":{"line":486,"column":32,"index":17232},"line":486,"code":"    it('should return entry name', function (next) {\n      var self = this;\n      this.registry.list(function (err, results) {\n        var found = results.some(function (entry) {\n          return entry.name === self.pkg;\n        });\n        expect(found).to.be(true);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return entry url","suites":["RegistryClient","calling the list instance method with two registries"],"updatePoint":{"line":496,"column":31,"index":17533},"line":496,"code":"    it('should return entry url', function (next) {\n      var self = this;\n      this.registry.list(function (err, results) {\n        if (!results.length) {\n          return next(new Error('Result expected'));\n        }\n\n        var found = results.some(function (entry) {\n          return entry.url === self.pkgUrl;\n        });\n        expect(found).to.be(true);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return an error and no results","suites":["RegistryClient","calling the list instance method"],"updatePoint":{"line":515,"column":45,"index":18130},"line":515,"code":"    it('should return an error and no results', function (next) {\n      this.registry.list(function (err) {\n        expect(err).to.be(null);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should not return an error","suites":["RegistryClient","called the clearCache instance method with argument"],"updatePoint":{"line":529,"column":34,"index":18469},"line":529,"code":"    it('should not return an error', function (next) {\n      this.registry.clearCache(this.pkg, function (err) {\n        expect(err).to.be(null);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should not return any errors and remove all cache items","suites":["RegistryClient","called the clearCache instance method without argument"],"updatePoint":{"line":537,"column":63,"index":18767},"line":537,"code":"    it('should not return any errors and remove all cache items', function (next) {\n      this.registry.clearCache(function (err) {\n        expect(err).to.be(null);\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should send custom userAgent to the server","suites":["RegistryClient","add a custom userAgent with argument"],"updatePoint":{"line":549,"column":50,"index":19077},"line":549,"code":"    it('should send custom userAgent to the server', function (next) {\n      var self = this;\n      this.ua = '';\n      this.server = http.createServer(function (req, res) {\n        self.ua = req.headers['user-agent'];\n        res.writeHeader(200, {\n          'Content-Type': 'application/json'\n        });\n        res.end('{\"name\":\"jquery\",\"url\":\"git://github.com/components/jquery.git\"}');\n        self.server.close();\n      });\n      this.server.listen('7777', '127.0.0.1');\n      this.registry = new RegistryClient(Config.read(process.cwd(), {\n        userAgent: 'test agent',\n        registry: 'http://127.0.0.1:7777'\n      }));\n      this.registry.search('jquery', function (err, result) {\n        expect(self.ua).to.be('test agent');\n        next();\n      });\n    });","file":"Client.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a lookup method","suites":["index module","requiring the index module"],"updatePoint":{"line":7,"column":37,"index":209},"line":7,"code":"    it('should expose a lookup method', function () {\n      expect(index.lookup).to.be.ok;\n    });","file":"core/index.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a list method","suites":["index module","requiring the index module"],"updatePoint":{"line":10,"column":35,"index":306},"line":10,"code":"    it('should expose a list method', function () {\n      expect(index.list).to.be.ok;\n    });","file":"core/index.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a register method","suites":["index module","requiring the index module"],"updatePoint":{"line":13,"column":39,"index":405},"line":13,"code":"    it('should expose a register method', function () {\n      expect(index.register).to.be.ok;\n    });","file":"core/index.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a search method","suites":["index module","requiring the index module"],"updatePoint":{"line":16,"column":37,"index":506},"line":16,"code":"    it('should expose a search method', function () {\n      expect(index.search).to.be.ok;\n    });","file":"core/index.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a list method","suites":["list module","requiring the list module"],"updatePoint":{"line":7,"column":35,"index":203},"line":7,"code":"    it('should expose a list method', function () {\n      expect(typeof list === 'function').to.be.ok;\n    });","file":"core/list.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a initCache method","suites":["list module","requiring the list module"],"updatePoint":{"line":10,"column":40,"index":319},"line":10,"code":"    it('should expose a initCache method', function () {\n      expect(list.initCache).to.be.ok;\n      expect(typeof list.initCache === 'function').to.be.ok;\n    });","file":"core/list.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a clearCache method","suites":["list module","requiring the list module"],"updatePoint":{"line":14,"column":41,"index":485},"line":14,"code":"    it('should expose a clearCache method', function () {\n      expect(list.clearCache).to.be.ok;\n      expect(typeof list.clearCache === 'function').to.be.ok;\n    });","file":"core/list.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a resetCache method","suites":["list module","requiring the list module"],"updatePoint":{"line":18,"column":41,"index":653},"line":18,"code":"    it('should expose a resetCache method', function () {\n      expect(list.resetCache).to.be.ok;\n      expect(typeof list.resetCache === 'function').to.be.ok;\n    });","file":"core/list.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a lookup method","suites":["lookup module","requiring the lookup module"],"updatePoint":{"line":7,"column":37,"index":213},"line":7,"code":"    it('should expose a lookup method', function () {\n      expect(typeof lookup === 'function').to.be.ok;\n    });","file":"core/lookup.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a initCache method","suites":["lookup module","requiring the lookup module"],"updatePoint":{"line":10,"column":40,"index":331},"line":10,"code":"    it('should expose a initCache method', function () {\n      expect(lookup.initCache).to.be.ok;\n      expect(typeof lookup.initCache === 'function').to.be.ok;\n    });","file":"core/lookup.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a clearCache method","suites":["lookup module","requiring the lookup module"],"updatePoint":{"line":14,"column":41,"index":501},"line":14,"code":"    it('should expose a clearCache method', function () {\n      expect(lookup.clearCache).to.be.ok;\n      expect(typeof lookup.clearCache === 'function').to.be.ok;\n    });","file":"core/lookup.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a resetCache method","suites":["lookup module","requiring the lookup module"],"updatePoint":{"line":18,"column":41,"index":673},"line":18,"code":"    it('should expose a resetCache method', function () {\n      expect(lookup.resetCache).to.be.ok;\n      expect(typeof lookup.resetCache === 'function').to.be.ok;\n    });","file":"core/lookup.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a register method","suites":["register module","requiring the register module"],"updatePoint":{"line":7,"column":39,"index":223},"line":7,"code":"    it('should expose a register method', function () {\n      expect(typeof register === 'function').to.be.ok;\n    });","file":"core/register.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a search method","suites":["search module","requiring the search module"],"updatePoint":{"line":7,"column":37,"index":213},"line":7,"code":"    it('should expose a search method', function () {\n      expect(typeof search === 'function').to.be.ok;\n    });","file":"core/search.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a initCache method","suites":["search module","requiring the search module"],"updatePoint":{"line":10,"column":40,"index":331},"line":10,"code":"    it('should expose a initCache method', function () {\n      expect(search.initCache).to.be.ok;\n      expect(typeof search.initCache === 'function').to.be.ok;\n    });","file":"core/search.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a clearCache method","suites":["search module","requiring the search module"],"updatePoint":{"line":14,"column":41,"index":501},"line":14,"code":"    it('should expose a clearCache method', function () {\n      expect(search.clearCache).to.be.ok;\n      expect(typeof search.clearCache === 'function').to.be.ok;\n    });","file":"core/search.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a resetCache method","suites":["search module","requiring the search module"],"updatePoint":{"line":18,"column":41,"index":673},"line":18,"code":"    it('should expose a resetCache method', function () {\n      expect(search.resetCache).to.be.ok;\n      expect(typeof search.resetCache === 'function').to.be.ok;\n    });","file":"core/search.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should provide an instance of RegistryClient","suites":["Cache","Constructor","instantiating cache"],"updatePoint":{"line":11,"column":54,"index":334},"line":11,"code":"      it('should provide an instance of RegistryClient', function () {\n        expect(this.cache instanceof Cache).to.be.ok;\n      });","file":"core/util/Cache.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should inherit LRU cache methods","suites":["Cache","Constructor","instantiating cache"],"updatePoint":{"line":14,"column":42,"index":457},"line":14,"code":"      it('should inherit LRU cache methods', function () {\n        var self = this,\n            lruMethods = ['max', 'lengthCalculator', 'length', 'itemCount', 'forEach', 'keys', 'values', 'reset', 'dump', 'dumpLru', 'set', 'has', 'get', 'peek', 'del'];\n        lruMethods.forEach(function (method) {\n          expect(self.cache._cache).to.have.property(method);\n        });\n      });","file":"core/util/Cache.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should have a get prototype method","suites":["Cache","Constructor","instantiating cache"],"updatePoint":{"line":22,"column":42,"index":850},"line":22,"code":"    it('should have a get prototype method', function () {\n      expect(Cache.prototype).to.have.property('get');\n    });","file":"core/util/Cache.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should have a set prototype method","suites":["Cache","Constructor","instantiating cache"],"updatePoint":{"line":25,"column":42,"index":972},"line":25,"code":"    it('should have a set prototype method', function () {\n      expect(Cache.prototype).to.have.property('set');\n    });","file":"core/util/Cache.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should have a del prototype method","suites":["Cache","Constructor","instantiating cache"],"updatePoint":{"line":28,"column":42,"index":1094},"line":28,"code":"    it('should have a del prototype method', function () {\n      expect(Cache.prototype).to.have.property('del');\n    });","file":"core/util/Cache.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should have a clear prototype method","suites":["Cache","Constructor","instantiating cache"],"updatePoint":{"line":31,"column":44,"index":1218},"line":31,"code":"    it('should have a clear prototype method', function () {\n      expect(Cache.prototype).to.have.property('clear');\n    });","file":"core/util/Cache.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should have a reset prototype method","suites":["Cache","Constructor","instantiating cache"],"updatePoint":{"line":34,"column":44,"index":1344},"line":34,"code":"    it('should have a reset prototype method', function () {\n      expect(Cache.prototype).to.have.property('reset');\n    });","file":"core/util/Cache.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should expose a createError method","suites":["createError","requiring the createError module"],"updatePoint":{"line":10,"column":42,"index":316},"line":10,"code":"    it('should expose a createError method', function () {\n      expect(typeof createError === 'function').to.be.ok;\n    });","file":"core/util/createError.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return a new Error Object","suites":["createError","invoking createError"],"updatePoint":{"line":15,"column":40,"index":494},"line":15,"code":"    it('should return a new Error Object', function () {\n      expect(typeof createError() === 'object').to.be.ok;\n    });","file":"core/util/createError.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return an Error with message","suites":["createError","invoking createError"],"updatePoint":{"line":18,"column":43,"index":620},"line":18,"code":"    it('should return an Error with message', function () {\n      expect(this.err.message).to.eql('message');\n    });","file":"core/util/createError.js","skipped":false,"dir":"packages/bower-registry-client/test"},{"name":"should return an Error with code","suites":["createError","invoking createError"],"updatePoint":{"line":21,"column":40,"index":735},"line":21,"code":"    it('should return an Error with code', function () {\n      expect(this.err.code).to.eql(500);\n    });","file":"core/util/createError.js","skipped":false,"dir":"packages/bower-registry-client/test"}]}