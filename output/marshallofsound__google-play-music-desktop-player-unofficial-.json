{
    "repo": "MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-",
    "url": "https://github.com/MarshallOfSound/Google-Play-Music-Desktop-Player-UNOFFICIAL-",
    "branch": "master",
    "configs": [
        {
            "package": "google-play-music-desktop-player",
            "lang": "js",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "should set the primary color to the default",
            "suites": [
                "muiTheme util",
                "when the theme is disabled"
            ],
            "updatePoint": {
                "line": 7,
                "column": 51
            },
            "line": 7,
            "code": "    it('should set the primary color to the default', () => {\n      const theme = generateTheme(false, 'red', 'FULL');\n      theme.palette.primary1Color.should.be.equal('#FF5722');\n    });",
            "file": "electron-renderer/muiTheme_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set the text color to be darkBlack",
            "suites": [
                "muiTheme util",
                "when the theme is disabled"
            ],
            "updatePoint": {
                "line": 11,
                "column": 49
            },
            "line": 11,
            "code": "    it('should set the text color to be darkBlack', () => {\n      const theme = generateTheme(false, 'red', 'FULL');\n      theme.palette.textColor.should.be.equal(darkBlack);\n    });",
            "file": "electron-renderer/muiTheme_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set the primary color to the theme color",
            "suites": [
                "muiTheme util",
                "when the theme is enabled"
            ],
            "updatePoint": {
                "line": 17,
                "column": 55
            },
            "line": 17,
            "code": "    it('should set the primary color to the theme color', () => {\n      const theme = generateTheme(true, 'red', 'FULL');\n      theme.palette.primary1Color.should.be.equal('red');\n    });",
            "file": "electron-renderer/muiTheme_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set the text color to be white",
            "suites": [
                "muiTheme util",
                "when the theme is enabled",
                "and the themeType is FULL"
            ],
            "updatePoint": {
                "line": 22,
                "column": 47
            },
            "line": 22,
            "code": "      it('should set the text color to be white', () => {\n        const theme = generateTheme(true, 'red', 'FULL');\n        theme.palette.textColor.should.be.equal(white);\n      });",
            "file": "electron-renderer/muiTheme_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the tabs settings",
            "suites": [
                "muiTheme util",
                "when the theme is enabled",
                "and the themeType is FULL"
            ],
            "updatePoint": {
                "line": 26,
                "column": 41
            },
            "line": 26,
            "code": "      it('should update the tabs settings', () => {\n        const theme = generateTheme(true, 'red', 'FULL');\n        theme.tabs.backgroundColor.should.be.equal('#222326');\n      });",
            "file": "electron-renderer/muiTheme_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not update the tabs settings",
            "suites": [
                "muiTheme util",
                "when the theme is enabled",
                "and the themeType is HIGHLIGHT_ONLY"
            ],
            "updatePoint": {
                "line": 32,
                "column": 45
            },
            "line": 32,
            "code": "      it('should not update the tabs settings', () => {\n        const theme = generateTheme(true, 'red', 'HIGHLIGHT_ONLY');\n        theme.tabs.backgroundColor.should.not.be.equal('#222326');\n      });",
            "file": "electron-renderer/muiTheme_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a selection menu",
            "suites": [
                "<AudioDeviceSelector />"
            ],
            "updatePoint": {
                "line": 19,
                "column": 36
            },
            "line": 19,
            "code": "  it('should render a selection menu', () => {\n    const component = mount( /*#__PURE__*/React.createElement(AudioDeviceSelector, null), materialUIContext);\n    component.find('SelectField').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/AudioDeviceSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should initialy render a disabled dropdown menu",
            "suites": [
                "<AudioDeviceSelector />"
            ],
            "updatePoint": {
                "line": 23,
                "column": 53
            },
            "line": 23,
            "code": "  it('should initialy render a disabled dropdown menu', () => {\n    const component = mount( /*#__PURE__*/React.createElement(AudioDeviceSelector, null), materialUIContext);\n    component.find('SelectField').props().disabled.should.be.equal(true);\n  });",
            "file": "electron-renderer/ui/AudioDeviceSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should hook into audiooutput events when mounting",
            "suites": [
                "<AudioDeviceSelector />"
            ],
            "updatePoint": {
                "line": 27,
                "column": 55
            },
            "line": 27,
            "code": "  it('should hook into audiooutput events when mounting', () => {\n    mount( /*#__PURE__*/React.createElement(AudioDeviceSelector, null), materialUIContext);\n    hooks.should.have.property('settings:change:audiooutput');\n    hooks.should.have.property('audiooutput:list');\n    hooks.should.have.property('audiooutput:set');\n  });",
            "file": "electron-renderer/ui/AudioDeviceSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should unhook from audiooutput events when unmounting",
            "suites": [
                "<AudioDeviceSelector />"
            ],
            "updatePoint": {
                "line": 33,
                "column": 59
            },
            "line": 33,
            "code": "  it('should unhook from audiooutput events when unmounting', () => {\n    mount( /*#__PURE__*/React.createElement(AudioDeviceSelector, null), materialUIContext).unmount();\n    unhooks.should.have.property('settings:change:audiooutput');\n    unhooks.should.have.property('audiooutput:list');\n    unhooks.should.have.property('audiooutput:set');\n  });",
            "file": "electron-renderer/ui/AudioDeviceSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should enable the dropdown when a device list is recieved",
            "suites": [
                "<AudioDeviceSelector />"
            ],
            "updatePoint": {
                "line": 39,
                "column": 63
            },
            "line": 39,
            "code": "  it('should enable the dropdown when a device list is recieved', () => {\n    const component = mount( /*#__PURE__*/React.createElement(AudioDeviceSelector, null), materialUIContext);\n    mockEvent('audiooutput:list', [{\n      deviceId: 'id',\n      label: 'label',\n      kind: 'audiooutput'\n    }], 'audiooutput:list');\n    component.find('SelectField').props().disabled.should.be.equal(false);\n  });",
            "file": "electron-renderer/ui/AudioDeviceSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render the dropdown with correct default labels",
            "suites": [
                "<AudioDeviceSelector />"
            ],
            "updatePoint": {
                "line": 48,
                "column": 60
            },
            "line": 48,
            "code": "  it('should render the dropdown with correct default labels', () => {\n    const component = mount( /*#__PURE__*/React.createElement(AudioDeviceSelector, null), materialUIContext);\n    mockEvent('audiooutput:list', [{\n      deviceId: 'id',\n      label: 'label',\n      kind: 'audiooutput'\n    }, {\n      deviceId: 'default',\n      label: '',\n      kind: 'audiooutput'\n    }, {\n      deviceId: 'communications',\n      label: '',\n      kind: 'audiooutput'\n    }, {\n      deviceId: 'a_mic_id',\n      label: 'Microphone',\n      kind: 'audioinput'\n    }, {\n      deviceId: 'unknown_thing',\n      label: '',\n      kind: 'audiooutput'\n    }], 'audiooutput:list');\n    component.find('SelectField').props().disabled.should.be.equal(false);\n    component.find('SelectField').props().children[0].props.primaryText.should.be.equal('label');\n    component.find('SelectField').props().children[1].props.primaryText.should.be.equal('audio-device-default');\n    component.find('SelectField').props().children[2].props.primaryText.should.be.equal('audio-device-communications');\n    component.find('SelectField').props().children[3].props.primaryText.should.be.equal('audio-device-unknown');\n  });",
            "file": "electron-renderer/ui/AudioDeviceSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the audiooutput device when a new option is chosen",
            "suites": [
                "<AudioDeviceSelector />"
            ],
            "updatePoint": {
                "line": 77,
                "column": 70
            },
            "line": 77,
            "code": "  it('should update the audiooutput device when a new option is chosen', () => {\n    const component = mount( /*#__PURE__*/React.createElement(AudioDeviceSelector, null), materialUIContext);\n    mockEvent('audiooutput:list', [{\n      deviceId: 'id',\n      label: 'label',\n      kind: 'audiooutput'\n    }], 'audiooutput:list');\n    component.find('SelectField').props().disabled.should.be.equal(false);\n    component.find('SelectField').props().onChange({}, 0, 'label');\n    fired.should.have.property('audiooutput:set');\n    fired['audiooutput:set'][0][0].should.have.be.equal('id');\n    fired['audiooutput:set'][1][0].should.have.be.equal('label');\n  });",
            "file": "electron-renderer/ui/AudioDeviceSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render as a static element with no state",
            "suites": [
                "<ColorPicker />"
            ],
            "updatePoint": {
                "line": 19,
                "column": 53
            },
            "line": 19,
            "code": "  it('should render as a static element with no state', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ColorPicker, null), materialUIContext);\n    expect(component.state()).to.be.equal(null);\n  });",
            "file": "electron-renderer/ui/ColorPicker_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render inner children",
            "suites": [
                "<ColorPicker />"
            ],
            "updatePoint": {
                "line": 23,
                "column": 38
            },
            "line": 23,
            "code": "  it('should not render inner children', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ColorPicker, null, /*#__PURE__*/React.createElement(NullComponent, null)), materialUIContext);\n    component.find(NullComponent).length.should.be.equal(0);\n  });",
            "file": "electron-renderer/ui/ColorPicker_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render an inner chrome style color picker",
            "suites": [
                "<ColorPicker />"
            ],
            "updatePoint": {
                "line": 27,
                "column": 54
            },
            "line": 27,
            "code": "  it('should render an inner chrome style color picker', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ColorPicker, null), materialUIContext);\n    component.find('Chrome').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/ColorPicker_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the themeColor setting when the color picker changes",
            "suites": [
                "<ColorPicker />"
            ],
            "updatePoint": {
                "line": 31,
                "column": 72
            },
            "line": 31,
            "code": "  it('should update the themeColor setting when the color picker changes', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ColorPicker, null), materialUIContext);\n    component.find('Chrome').props().onChangeComplete({\n      hex: 'fancy_red'\n    });\n    fired['settings:set'].should.be.ok;\n    fired['settings:set'].length.should.be.equal(1);\n    fired['settings:set'][0][0].should.be.deep.equal({\n      key: 'themeColor',\n      value: 'fancy_red'\n    });\n  });",
            "file": "electron-renderer/ui/ColorPicker_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render buttons to select a file and clear",
            "suites": [
                "<FileInput />"
            ],
            "updatePoint": {
                "line": 33,
                "column": 54
            },
            "line": 33,
            "code": "  it('should render buttons to select a file and clear', () => {\n    component.find('RaisedButton').length.should.be.equal(2);\n  });",
            "file": "electron-renderer/ui/FileInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a text input field",
            "suites": [
                "<FileInput />"
            ],
            "updatePoint": {
                "line": 36,
                "column": 38
            },
            "line": 36,
            "code": "  it('should render a text input field', () => {\n    component.find('TextField').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/FileInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should open a file dialog when the button is clicked",
            "suites": [
                "<FileInput />"
            ],
            "updatePoint": {
                "line": 39,
                "column": 58
            },
            "line": 39,
            "code": "  it('should open a file dialog when the button is clicked', () => {\n    callCount.should.be.equal(0);\n    const button = component.find('RaisedButton').at(0);\n    button.props().onTouchTap();\n    callCount.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/FileInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should open a file dialog when the text input is clicked",
            "suites": [
                "<FileInput />"
            ],
            "updatePoint": {
                "line": 45,
                "column": 62
            },
            "line": 45,
            "code": "  it('should open a file dialog when the text input is clicked', () => {\n    callCount.should.be.equal(0);\n    component.find('TextField').props().onClick();\n    callCount.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/FileInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be a noop when the user does not select any files",
            "suites": [
                "<FileInput />"
            ],
            "updatePoint": {
                "line": 50,
                "column": 62
            },
            "line": 50,
            "code": "  it('should be a noop when the user does not select any files', () => {\n    dummyFileList = undefined;\n    component.find('TextField').props().onClick();\n    fired.should.be.deep.equal({});\n  });",
            "file": "electron-renderer/ui/FileInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the correct setting when the file exists",
            "suites": [
                "<FileInput />"
            ],
            "updatePoint": {
                "line": 55,
                "column": 60
            },
            "line": 55,
            "code": "  it('should update the correct setting when the file exists', () => {\n    dummyFileList = [__filename];\n    component.find('TextField').props().onClick();\n    fired.should.have.property('settings:set');\n    fired['settings:set'].should.deep.equal([[{\n      key: 'fakeSettingKey',\n      value: __filename\n    }]]);\n  });",
            "file": "electron-renderer/ui/FileInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire the bonus events when the file exists",
            "suites": [
                "<FileInput />"
            ],
            "updatePoint": {
                "line": 64,
                "column": 55
            },
            "line": 64,
            "code": "  it('should fire the bonus events when the file exists', () => {\n    dummyFileList = [__filename];\n    component.find('TextField').props().onClick();\n    fired.should.have.property('BonusEvent1');\n  });",
            "file": "electron-renderer/ui/FileInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the correct setting when cleared",
            "suites": [
                "<FileInput />"
            ],
            "updatePoint": {
                "line": 69,
                "column": 52
            },
            "line": 69,
            "code": "  it('should update the correct setting when cleared', () => {\n    const button = component.find('RaisedButton').at(1);\n    button.props().onTouchTap();\n    fired.should.have.property('settings:set');\n    fired['settings:set'].should.deep.equal([[{\n      key: 'fakeSettingKey',\n      value: null\n    }]]);\n  });",
            "file": "electron-renderer/ui/FileInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a text field",
            "suites": [
                "<HotkeyInput />"
            ],
            "updatePoint": {
                "line": 29,
                "column": 32
            },
            "line": 29,
            "code": "  it('should render a text field', () => {\n    const component = mount( /*#__PURE__*/React.createElement(HotkeyInput, {\n      label: \"Test Label\",\n      hotkeyAction: \"playPause\"\n    }), materialUIContext);\n    component.find(TextField).length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/HotkeyInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a text field with the correct default value",
            "suites": [
                "<HotkeyInput />"
            ],
            "updatePoint": {
                "line": 36,
                "column": 63
            },
            "line": 36,
            "code": "  it('should render a text field with the correct default value', () => {\n    const component = mount( /*#__PURE__*/React.createElement(HotkeyInput, {\n      label: \"Test Label\",\n      hotkeyAction: \"playPause\"\n    }), materialUIContext);\n    component.find(TextField).props().value.should.be.equal('settings-option-hotkey-not-set');\n    fakeSettings('hotkeys', {\n      playPause: 'Ctrl+Shift+P'\n    });\n    const component2 = mount( /*#__PURE__*/React.createElement(HotkeyInput, {\n      label: \"Test Label\",\n      hotkeyAction: \"playPause\"\n    }), materialUIContext);\n    component2.find(TextField).props().value.should.be.equal('Ctrl+Shift+P');\n  });",
            "file": "electron-renderer/ui/HotkeyInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the value when a new hotkey is entered",
            "suites": [
                "<HotkeyInput />"
            ],
            "updatePoint": {
                "line": 51,
                "column": 58
            },
            "line": 51,
            "code": "  it('should update the value when a new hotkey is entered', () => {\n    const component = mount( /*#__PURE__*/React.createElement(HotkeyInput, {\n      label: \"Test Label\",\n      hotkeyAction: \"playPause\"\n    }), materialUIContext);\n    const input = component.find(TextField).find('input');\n    simulateKeyDown(input, 17);\n    simulateKeyDown(input, 38);\n    fired['hotkey:set'].should.be.ok;\n    const hotkeyArg = fired['hotkey:set'][0][0];\n    hotkeyArg.should.be.deep.equal({\n      action: 'playPause',\n      accelerator: 'Ctrl+Up'\n    });\n  });",
            "file": "electron-renderer/ui/HotkeyInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not update the value when a new hotkey is entered if the accelerator does not change",
            "suites": [
                "<HotkeyInput />"
            ],
            "updatePoint": {
                "line": 66,
                "column": 97
            },
            "line": 66,
            "code": "  it('should not update the value when a new hotkey is entered if the accelerator does not change', () => {\n    fakeSettings('hotkeys', {\n      playPause: 'Ctrl+Up'\n    });\n    const component = mount( /*#__PURE__*/React.createElement(HotkeyInput, {\n      label: \"Test Label\",\n      hotkeyAction: \"playPause\"\n    }), materialUIContext);\n    const input = component.find(TextField).find('input');\n    simulateKeyDown(input, 17);\n    simulateKeyDown(input, 38);\n    simulateKeyDown(input, 38);\n    simulateKeyDown(input, 38);\n    simulateKeyDown(input, 38);\n    expect(fired['hotkey:set']).to.not.be.ok;\n  });",
            "file": "electron-renderer/ui/HotkeyInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the value and sort it when a new multi-component hotkey is entered",
            "suites": [
                "<HotkeyInput />"
            ],
            "updatePoint": {
                "line": 82,
                "column": 86
            },
            "line": 82,
            "code": "  it('should update the value and sort it when a new multi-component hotkey is entered', () => {\n    const component = mount( /*#__PURE__*/React.createElement(HotkeyInput, {\n      label: \"Test Label\",\n      hotkeyAction: \"playPause\"\n    }), materialUIContext);\n    const input = component.find(TextField).find('input');\n    simulateKeyDown(input, 17);\n    simulateKeyDown(input, 16);\n    simulateKeyDown(input, 38);\n    simulateKeyDown(input, 39);\n    simulateKeyDown(input, 40);\n    simulateKeyDown(input, 41);\n    fired['hotkey:set'].should.be.ok;\n    const hotkeyArg = fired['hotkey:set'][3][0];\n    hotkeyArg.should.be.deep.equal({\n      action: 'playPause',\n      accelerator: 'Ctrl+Shift+Down+Right+Up'\n    });\n  });",
            "file": "electron-renderer/ui/HotkeyInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should reset the accelerator when the escape key is released",
            "suites": [
                "<HotkeyInput />"
            ],
            "updatePoint": {
                "line": 101,
                "column": 66
            },
            "line": 101,
            "code": "  it('should reset the accelerator when the escape key is released', () => {\n    const component = mount( /*#__PURE__*/React.createElement(HotkeyInput, {\n      label: \"Test Label\",\n      hotkeyAction: \"playPause\"\n    }), materialUIContext);\n    const input = component.find(TextField).find('input');\n    simulateKeyUp(input, 27);\n    fired['hotkey:set'].should.be.ok;\n    const hotkeyArg = fired['hotkey:set'][0][0];\n    hotkeyArg.should.be.deep.equal({\n      action: 'playPause',\n      accelerator: null\n    });\n  });",
            "file": "electron-renderer/ui/HotkeyInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should naturally reset the keys object when all depressed keys are released",
            "suites": [
                "<HotkeyInput />"
            ],
            "updatePoint": {
                "line": 115,
                "column": 81
            },
            "line": 115,
            "code": "  it('should naturally reset the keys object when all depressed keys are released', () => {\n    const component = mount( /*#__PURE__*/React.createElement(HotkeyInput, {\n      label: \"Test Label\",\n      hotkeyAction: \"playPause\"\n    }), materialUIContext);\n    const input = component.find(TextField).find('input');\n    simulateKeyDown(input, 17);\n    simulateKeyDown(input, 16);\n    simulateKeyDown(input, 38);\n    simulateKeyUp(input, 17);\n    simulateKeyUp(input, 16);\n    simulateKeyDown(input, 999);\n    simulateKeyUp(input, 38);\n    simulateKeyUp(input, 999);\n  });",
            "file": "electron-renderer/ui/HotkeyInput_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a selection menu",
            "suites": [
                "<LocaleSelector />"
            ],
            "updatePoint": {
                "line": 21,
                "column": 36
            },
            "line": 21,
            "code": "  it('should render a selection menu', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LocaleSelector, null), materialUIContext);\n    component.find('SelectField').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/LocaleSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should initialy render an enabled dropdown menu",
            "suites": [
                "<LocaleSelector />"
            ],
            "updatePoint": {
                "line": 25,
                "column": 53
            },
            "line": 25,
            "code": "  it('should initialy render an enabled dropdown menu', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LocaleSelector, null), materialUIContext);\n    component.find('SelectField').props().disabled.should.be.equal(false);\n  });",
            "file": "electron-renderer/ui/LocaleSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should hook into locale events when mounting",
            "suites": [
                "<LocaleSelector />"
            ],
            "updatePoint": {
                "line": 29,
                "column": 50
            },
            "line": 29,
            "code": "  it('should hook into locale events when mounting', () => {\n    mount( /*#__PURE__*/React.createElement(LocaleSelector, null), materialUIContext);\n    hooks.should.have.property('settings:change:locale');\n  });",
            "file": "electron-renderer/ui/LocaleSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should unhook from locale events when unmounting",
            "suites": [
                "<LocaleSelector />"
            ],
            "updatePoint": {
                "line": 33,
                "column": 54
            },
            "line": 33,
            "code": "  it('should unhook from locale events when unmounting', () => {\n    mount( /*#__PURE__*/React.createElement(LocaleSelector, null), materialUIContext).unmount();\n    unhooks.should.have.property('settings:change:locale');\n  });",
            "file": "electron-renderer/ui/LocaleSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set the locale setting when the dropdown option changes",
            "suites": [
                "<LocaleSelector />"
            ],
            "updatePoint": {
                "line": 37,
                "column": 68
            },
            "line": 37,
            "code": "  it('should set the locale setting when the dropdown option changes', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LocaleSelector, null), materialUIContext);\n    component.find('SelectField').props().onChange(null, null, 'magic_language');\n    fired['settings:set'].should.be.ok;\n    fired['settings:set'].length.should.be.equal(1);\n    fired['settings:set'][0][0].should.be.deep.equal({\n      key: 'locale',\n      value: 'magic_language'\n    });\n  });",
            "file": "electron-renderer/ui/LocaleSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should display all possible JSON languages in the dropdown",
            "suites": [
                "<LocaleSelector />"
            ],
            "updatePoint": {
                "line": 47,
                "column": 64
            },
            "line": 47,
            "code": "  it('should display all possible JSON languages in the dropdown', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LocaleSelector, null), materialUIContext);\n    const JSONCount = fs.readdirSync(path.resolve(__dirname, '..', '..', '..', 'src', '_locales')).length - 1;\n    component.find('SelectField').props().children.length.should.be.equal(JSONCount);\n  });",
            "file": "electron-renderer/ui/LocaleSelector_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render the lyrics container",
            "suites": [
                "<LyricsViewer />"
            ],
            "updatePoint": {
                "line": 29,
                "column": 40
            },
            "line": 29,
            "code": "  it('should render the lyrics container', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LyricsViewer, null));\n    component.children().length.should.be.gt(0);\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should hook into the PlaybackAPI events",
            "suites": [
                "<LyricsViewer />"
            ],
            "updatePoint": {
                "line": 33,
                "column": 45
            },
            "line": 33,
            "code": "  it('should hook into the PlaybackAPI events', () => {\n    mount( /*#__PURE__*/React.createElement(LyricsViewer, null));\n    hooks['lyrics:show'].should.be.ok;\n    hooks['PlaybackAPI:change:lyrics'].should.be.ok;\n    hooks['PlaybackAPI:change:state'].should.be.ok;\n    hooks['settings:set:scrollLyrics'].should.be.ok;\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should unhook the PlaybackAPI events when unmounting",
            "suites": [
                "<LyricsViewer />"
            ],
            "updatePoint": {
                "line": 40,
                "column": 58
            },
            "line": 40,
            "code": "  it('should unhook the PlaybackAPI events when unmounting', () => {\n    mount( /*#__PURE__*/React.createElement(LyricsViewer, null)).unmount();\n    unhooks['lyrics:show'].should.be.ok;\n    unhooks['PlaybackAPI:change:lyrics'].should.be.ok;\n    unhooks['PlaybackAPI:change:state'].should.be.ok;\n    unhooks['settings:set:scrollLyrics'].should.be.ok;\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should hook into the time event when shown",
            "suites": [
                "<LyricsViewer />"
            ],
            "updatePoint": {
                "line": 47,
                "column": 48
            },
            "line": 47,
            "code": "  it('should hook into the time event when shown', () => {\n    mount( /*#__PURE__*/React.createElement(LyricsViewer, null));\n    mockEvent('lyrics:show');\n    hooks['PlaybackAPI:change:time'].should.be.ok;\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show when recieving the show event",
            "suites": [
                "<LyricsViewer />"
            ],
            "updatePoint": {
                "line": 52,
                "column": 47
            },
            "line": 52,
            "code": "  it('should show when recieving the show event', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LyricsViewer, null));\n    component.find('#lyrics_back.vis').length.should.be.equal(0);\n    mockEvent('lyrics:show');\n    component.find('#lyrics_back.vis').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should hide when the lyrics are clicked",
            "suites": [
                "<LyricsViewer />"
            ],
            "updatePoint": {
                "line": 58,
                "column": 45
            },
            "line": 58,
            "code": "  it('should hide when the lyrics are clicked', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LyricsViewer, null));\n    component.find('#lyrics_back.vis').length.should.be.equal(0);\n    mockEvent('lyrics:show');\n    component.find('#lyrics_back.vis').length.should.be.equal(1);\n    component.find('#lyrics_back').simulate('click');\n    component.find('#lyrics_back.vis').length.should.be.equal(0);\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should say loading lyrics when null lyrics are passed in",
            "suites": [
                "<LyricsViewer />"
            ],
            "updatePoint": {
                "line": 66,
                "column": 62
            },
            "line": 66,
            "code": "  it('should say loading lyrics when null lyrics are passed in', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    mockEvent('PlaybackAPI:change:lyrics', null);\n    const domNode = $(findDOMNode(component.instance()));\n    domNode.find('h1').text().should.be.equal('lyrics-loading-message');\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should timeout if lyrics aren't found in 4 seconds",
            "suites": [
                "<LyricsViewer />"
            ],
            "updatePoint": {
                "line": 72,
                "column": 57
            },
            "line": 72,
            "code": "  it('should timeout if lyrics aren\\'t found in 4 seconds', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    mockEvent('PlaybackAPI:change:lyrics', null);\n    const domNode = $(findDOMNode(component.instance()));\n    clock.tick(4500);\n    domNode.find('h1').text().should.be.equal('lyrics-failed-message');\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show \"search in Google.com\" link if lyrics was not found",
            "suites": [
                "<LyricsViewer />"
            ],
            "updatePoint": {
                "line": 79,
                "column": 69
            },
            "line": 79,
            "code": "  it('should show \"search in Google.com\" link if lyrics was not found', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    mockEvent('PlaybackAPI:change:lyrics', null);\n    component.find('#search-link').length.should.be.equal(0);\n    clock.tick(4500);\n    component.find('#search-link').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should open browser, point it to google.com and prefill query field with current song artist and title",
            "suites": [
                "<LyricsViewer />",
                "When clicked on \"search in Google.com\" link"
            ],
            "updatePoint": {
                "line": 87,
                "column": 110
            },
            "line": 87,
            "code": "    it('should open browser, point it to google.com and prefill query field with current song artist and title', () => {\n      const remoteStub = sinon.stub(remote, 'getGlobal', () => ({\n        currentSong: () => ({\n          title: 'songTitle',\n          artist: 'artistName'\n        })\n      }));\n      const shellStub = sinon.stub(shell, 'openExternal');\n      const query = encodeURIComponent('songTitle - artistName lyrics-lyrics');\n      const component = mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n      mockEvent('PlaybackAPI:change:lyrics', null);\n      clock.tick(4500);\n      component.find('#search-link').simulate('click');\n      remoteStub.restore();\n      expect(shellStub.calledOnce).to.equal(true);\n      expect(shellStub.getCall(0).args.length).to.equal(1);\n      expect(shellStub.getCall(0).args[0]).to.equal(`https://www.google.com/search?q=${query}`);\n    });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the lyrics when a string of lyrics are passed in",
            "suites": [
                "<LyricsViewer />",
                "When clicked on \"search in Google.com\" link"
            ],
            "updatePoint": {
                "line": 106,
                "column": 68
            },
            "line": 106,
            "code": "  it('should update the lyrics when a string of lyrics are passed in', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    mockEvent('PlaybackAPI:change:lyrics', null);\n    const domNode = $(findDOMNode(component.instance()));\n    domNode.find('h1').text().should.be.equal('lyrics-loading-message');\n    mockEvent('PlaybackAPI:change:lyrics', 'new lyrics');\n    domNode.find('p').text().should.be.equal('new lyrics');\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should stop scrolling when settings change to false",
            "suites": [
                "<LyricsViewer />",
                "When clicked on \"search in Google.com\" link"
            ],
            "updatePoint": {
                "line": 114,
                "column": 57
            },
            "line": 114,
            "code": "  it('should stop scrolling when settings change to false', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    mockEvent('settings:set:scrollLyrics', false);\n    const domNode = $(findDOMNode(component.instance()));\n    expect(domNode.find('#lyrics p').attr('data-scroll')).to.be.equal(undefined);\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should start scrolling when settings change to true",
            "suites": [
                "<LyricsViewer />",
                "When clicked on \"search in Google.com\" link"
            ],
            "updatePoint": {
                "line": 120,
                "column": 57
            },
            "line": 120,
            "code": "  it('should start scrolling when settings change to true', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    mockEvent('PlaybackAPI:change:lyrics', 'new lyrics');\n    mockEvent('settings:set:scrollLyrics', true);\n    const domNode = $(findDOMNode(component.instance()));\n    expect(domNode.find('#lyrics p').attr('data-scroll')).to.be.equal('true');\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should start scrolling when the time changes",
            "suites": [
                "<LyricsViewer />",
                "When clicked on \"search in Google.com\" link"
            ],
            "updatePoint": {
                "line": 127,
                "column": 50
            },
            "line": 127,
            "code": "  it('should start scrolling when the time changes', () => {\n    mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    mockEvent('PlaybackAPI:change:lyrics', 'new lyrics');\n    mockEvent('PlaybackAPI:change:state', true);\n    mockEvent('settings:set:scrollLyrics', true);\n    mockEvent('PlaybackAPI:change:time', {\n      current: 1000,\n      total: 2000\n    });\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should jump scrolling when the time jumps",
            "suites": [
                "<LyricsViewer />",
                "When clicked on \"search in Google.com\" link"
            ],
            "updatePoint": {
                "line": 137,
                "column": 47
            },
            "line": 137,
            "code": "  it('should jump scrolling when the time jumps', () => {\n    mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    mockEvent('PlaybackAPI:change:lyrics', 'new lyrics');\n    mockEvent('PlaybackAPI:change:state', true);\n    mockEvent('settings:set:scrollLyrics', true);\n    mockEvent('PlaybackAPI:change:time', {\n      current: 1000,\n      total: 20000\n    });\n    mockEvent('PlaybackAPI:change:time', {\n      current: 18000,\n      total: 20000\n    });\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should stop animating when the music stops",
            "suites": [
                "<LyricsViewer />",
                "When clicked on \"search in Google.com\" link"
            ],
            "updatePoint": {
                "line": 151,
                "column": 48
            },
            "line": 151,
            "code": "  it('should stop animating when the music stops', () => {\n    mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    mockEvent('PlaybackAPI:change:lyrics', 'new lyrics');\n    mockEvent('PlaybackAPI:change:state', true);\n    mockEvent('settings:set:scrollLyrics', true);\n    mockEvent('PlaybackAPI:change:time', {\n      current: 1000,\n      total: 2000\n    });\n    mockEvent('PlaybackAPI:change:state', false);\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not animate when the music isn't playing",
            "suites": [
                "<LyricsViewer />",
                "When clicked on \"search in Google.com\" link"
            ],
            "updatePoint": {
                "line": 162,
                "column": 54
            },
            "line": 162,
            "code": "  it('should not animate when the music isn\\'t playing', () => {\n    mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    mockEvent('PlaybackAPI:change:lyrics', 'new lyrics');\n    mockEvent('PlaybackAPI:change:state', false);\n    mockEvent('settings:set:scrollLyrics', true);\n    mockEvent('PlaybackAPI:change:time', {\n      current: 1000,\n      total: 2000\n    });\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should animate when the window is resized",
            "suites": [
                "<LyricsViewer />",
                "When clicked on \"search in Google.com\" link"
            ],
            "updatePoint": {
                "line": 172,
                "column": 47
            },
            "line": 172,
            "code": "  it('should animate when the window is resized', () => {\n    mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    window.dispatchEvent(new Event('resize'));\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the styling in dark mode",
            "suites": [
                "<LyricsViewer />",
                "When clicked on \"search in Google.com\" link"
            ],
            "updatePoint": {
                "line": 176,
                "column": 44
            },
            "line": 176,
            "code": "  it('should update the styling in dark mode', () => {\n    fakeSettings('themeType', 'FULL');\n    const component = mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    component.find('#lyrics_bar').props().style.backgroundColor.should.be.equal('themeColor');\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should reset styling when the theme is disabled",
            "suites": [
                "<LyricsViewer />",
                "When clicked on \"search in Google.com\" link"
            ],
            "updatePoint": {
                "line": 181,
                "column": 53
            },
            "line": 181,
            "code": "  it('should reset styling when the theme is disabled', () => {\n    fakeSettings('theme', false);\n    const component = mount( /*#__PURE__*/React.createElement(LyricsViewer, null), opts);\n    component.find('#lyrics_bar').props().style.backgroundColor.should.be.equal('rgb(252, 88, 37)');\n  });",
            "file": "electron-renderer/ui/LyricsViewer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the date when the time picker changes",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 57
            },
            "line": 7,
            "code": "  it('should update the date when the time picker changes', () => {\n    const {\n      component\n    } = _c;\n\n    _c.fired.should.not.have.property('settings:set');\n\n    component.find('AlarmModal').get(0).onChange({}, 'NEW_VALUE');\n\n    _c.fired.should.have.property('settings:set');\n\n    _c.fired['settings:set'][0][0].should.be.deep.equal({\n      key: 'alarm',\n      value: 'NEW_VALUE'\n    });\n  });",
            "file": "electron-renderer/ui/modals/AlarmModal_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should reset the current value when the reset button is clicked",
            "suites": [],
            "updatePoint": {
                "line": 23,
                "column": 69
            },
            "line": 23,
            "code": "  it('should reset the current value when the reset button is clicked', () => {\n    const {\n      component\n    } = _c;\n\n    _c.fired.should.not.have.property('settings:set');\n\n    component.find('AlarmModal').get(0).cancel();\n\n    _c.fired.should.have.property('settings:set');\n\n    _c.fired['settings:set'][0][0].should.be.deep.equal({\n      key: 'alarm',\n      value: null\n    });\n  });",
            "file": "electron-renderer/ui/modals/AlarmModal_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "updates the current value when it recieves a change event",
            "suites": [],
            "updatePoint": {
                "line": 12,
                "column": 63
            },
            "line": 12,
            "code": "  it('updates the current value when it recieves a change event', () => {\n    const {\n      component\n    } = _c;\n    expect(component.instance().value).to.be.equal(undefined);\n\n    component.instance()._onChange({}, 'foo');\n\n    expect(component.instance().value).to.be.equal('foo');\n  });",
            "file": "electron-renderer/ui/modals/GoToModal_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not attempt to parse the URL when you hit enter if the value is empty",
            "suites": [],
            "updatePoint": {
                "line": 22,
                "column": 82
            },
            "line": 22,
            "code": "  it('should not attempt to parse the URL when you hit enter if the value is empty', () => {\n    const {\n      component\n    } = _c;\n    const instance = component.instance();\n    const spy = sinon.spy(instance, 'parseURL');\n\n    instance._onKeyUp({\n      which: 10\n    });\n\n    spy.callCount.should.be.equal(0);\n\n    instance._onKeyUp({\n      which: 13\n    });\n\n    spy.callCount.should.be.equal(0);\n  });",
            "file": "electron-renderer/ui/modals/GoToModal_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should attempt to parse the URL when you hit enter if the value is not empty",
            "suites": [],
            "updatePoint": {
                "line": 41,
                "column": 82
            },
            "line": 41,
            "code": "  it('should attempt to parse the URL when you hit enter if the value is not empty', () => {\n    const {\n      component\n    } = _c;\n    const instance = component.instance();\n\n    instance._onChange({}, 'foo');\n\n    const spy = sinon.spy(instance, 'parseURL');\n\n    instance._onKeyUp({\n      which: 10\n    });\n\n    spy.callCount.should.be.equal(0);\n\n    instance._onKeyUp({\n      which: 13\n    });\n\n    spy.callCount.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/modals/GoToModal_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should emit the generateDebugInfo event if you enter DEBUG_INFO",
            "suites": [],
            "updatePoint": {
                "line": 110,
                "column": 69
            },
            "line": 110,
            "code": "  it('should emit the generateDebugInfo event if you enter DEBUG_INFO', () => {\n    const {\n      component,\n      fired\n    } = _c;\n    const instance = component.instance();\n    fired.should.not.have.property('generateDebugInfo');\n\n    instance._onChange({}, 'DEBUG_INFO');\n\n    instance._onKeyUp({\n      which: 13\n    });\n\n    fired.should.have.property('generateDebugInfo');\n    fired.generateDebugInfo.should.be.ok;\n  });",
            "file": "electron-renderer/ui/modals/GoToModal_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not emit the navigate event if it is an invalid redirected GPM URL",
            "suites": [
                "when making stubbed fetch requests"
            ],
            "updatePoint": {
                "line": 167,
                "column": 81
            },
            "line": 167,
            "code": "    it('should not emit the navigate event if it is an invalid redirected GPM URL', () => {\n      const fakeInvalidURL = () => Promise.resolve({\n        url: 'https://not.a.valid.gpm.url',\n        status: 200\n      });\n\n      const {\n        component,\n        fired\n      } = _c;\n      const instance = component.instance(); // setup the stub to trigger on our test payload\n\n      const request = instance.createRequest('https://www.not.google/play/music');\n      window.fetch.withArgs(request).returns(fakeInvalidURL());\n      const resolveURLSpy = sinon.spy(instance, 'resolveURL');\n      const goToURLSpy = sinon.spy(instance, 'goToURL');\n      const validURLSpy = sinon.spy(instance, 'validURL');\n      return instance.attemptToResolveURL('https://www.not.google/play/music').catch(() => {\n        resolveURLSpy.callCount.should.be.equal(1);\n        validURLSpy.callCount.should.be.equal(1);\n        goToURLSpy.callCount.should.be.equal(0);\n        fired.should.not.have.property('navigate:gotourl');\n        return Promise.reject('rejected');\n      }).should.be.rejected;\n    });",
            "file": "electron-renderer/ui/modals/GoToModal_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fail if the URL is redirected too many times",
            "suites": [
                "when making stubbed fetch requests"
            ],
            "updatePoint": {
                "line": 192,
                "column": 59
            },
            "line": 192,
            "code": "    it('should fail if the URL is redirected too many times', () => {\n      const fakeRedirect = () => Promise.resolve({\n        url: 'http://google.com/redirected',\n        status: 301\n      });\n\n      const {\n        component,\n        fired\n      } = _c;\n      const instance = component.instance(); // setup the stub to trigger on our test payload\n\n      const request = instance.createRequest('https://play.google.com/music/redirectforever');\n      window.fetch.withArgs(request).returns(fakeRedirect());\n      const resolveURLSpy = sinon.spy(instance, 'resolveURL');\n      const goToURLSpy = sinon.spy(instance, 'goToURL');\n      const validURLSpy = sinon.spy(instance, 'validURL');\n      return instance.attemptToResolveURL('https://play.google.com/music/redirectforever').catch(err => {\n        err.should.be.eq(new Error('Too many redirects'));\n        resolveURLSpy.callCount.should.be.equal(1);\n        validURLSpy.callCount.should.be.equal(1);\n        goToURLSpy.callCount.should.be.equal(0);\n        fired.should.not.have.property('navigate:gotourl');\n        return Promise.reject('rejected');\n      }).should.be.rejected;\n    });",
            "file": "electron-renderer/ui/modals/GoToModal_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should attempt to launch into dev mode when DEV_MODE is submitted and confirmed",
            "suites": [
                "when stubbed"
            ],
            "updatePoint": {
                "line": 239,
                "column": 87
            },
            "line": 239,
            "code": "    it('should attempt to launch into dev mode when DEV_MODE is submitted and confirmed', () => {\n      const {\n        component\n      } = _c;\n      const instance = component.instance();\n\n      instance._onChange({}, 'DEV_MODE');\n\n      confirmStub.returns(true);\n\n      instance._onKeyUp({\n        which: 13\n      });\n\n      confirmStub.callCount.should.be.equal(1);\n      relaunchStub.callCount.should.be.equal(1);\n      quitStub.callCount.should.be.equal(1);\n    });",
            "file": "electron-renderer/ui/modals/GoToModal_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not attempt to launch into dev mode when DEV_MODE is submitted and is not confirmed",
            "suites": [
                "when stubbed"
            ],
            "updatePoint": {
                "line": 257,
                "column": 98
            },
            "line": 257,
            "code": "    it('should not attempt to launch into dev mode when DEV_MODE is submitted and is not confirmed', () => {\n      const {\n        component\n      } = _c;\n      const instance = component.instance();\n\n      instance._onChange({}, 'DEV_MODE');\n\n      confirmStub.returns(false);\n\n      instance._onKeyUp({\n        which: 13\n      });\n\n      confirmStub.callCount.should.be.equal(1);\n      relaunchStub.callCount.should.be.equal(0);\n      quitStub.callCount.should.be.equal(0);\n    });",
            "file": "electron-renderer/ui/modals/GoToModal_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render null when online",
            "suites": [
                "<OfflineWarning />"
            ],
            "updatePoint": {
                "line": 8,
                "column": 36
            },
            "line": 8,
            "code": "  it('should render null when online', () => {\n    const component = mount( /*#__PURE__*/React.createElement(OfflineWarning, {\n      navigator: {\n        onLine: true\n      }\n    }));\n    component.children().length.should.be.equal(0);\n  });",
            "file": "electron-renderer/ui/OfflineWarning_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render an offline-warning when offline",
            "suites": [
                "<OfflineWarning />"
            ],
            "updatePoint": {
                "line": 16,
                "column": 51
            },
            "line": 16,
            "code": "  it('should render an offline-warning when offline', () => {\n    const component = mount( /*#__PURE__*/React.createElement(OfflineWarning, {\n      navigator: {\n        onLine: false\n      }\n    }));\n    component.children().length.should.be.equal(2);\n    component.find('.offline-warning').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/OfflineWarning_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render null then a warning if the online state changes",
            "suites": [
                "<OfflineWarning />"
            ],
            "updatePoint": {
                "line": 25,
                "column": 67
            },
            "line": 25,
            "code": "  it('should render null then a warning if the online state changes', () => {\n    const fakeNavigator = {\n      onLine: true\n    };\n    const component = mount( /*#__PURE__*/React.createElement(OfflineWarning, {\n      navigator: fakeNavigator\n    }));\n    component.children().length.should.be.equal(0);\n    fakeNavigator.onLine = false;\n    window.dispatchEvent(new Event('online'));\n    component.children().length.should.be.equal(2);\n  });",
            "file": "electron-renderer/ui/OfflineWarning_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a warning then null if the online state changes",
            "suites": [
                "<OfflineWarning />"
            ],
            "updatePoint": {
                "line": 37,
                "column": 67
            },
            "line": 37,
            "code": "  it('should render a warning then null if the online state changes', () => {\n    const fakeNavigator = {\n      onLine: false\n    };\n    const component = mount( /*#__PURE__*/React.createElement(OfflineWarning, {\n      navigator: fakeNavigator\n    }));\n    component.children().length.should.be.equal(2);\n    fakeNavigator.onLine = true;\n    window.dispatchEvent(new Event('online'));\n    component.children().length.should.be.equal(0);\n  });",
            "file": "electron-renderer/ui/OfflineWarning_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should remove event listeners once unounted",
            "suites": [
                "<OfflineWarning />"
            ],
            "updatePoint": {
                "line": 49,
                "column": 49
            },
            "line": 49,
            "code": "  it('should remove event listeners once unounted', () => {\n    const fakeNavigator = {\n      onLine: false\n    };\n    const component = mount( /*#__PURE__*/React.createElement(OfflineWarning, {\n      navigator: fakeNavigator\n    }));\n    component.unmount();\n    fakeNavigator.onLine = true;\n    window.dispatchEvent(new Event('online'));\n  });",
            "file": "electron-renderer/ui/OfflineWarning_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a WindowContainer root",
            "suites": [
                "<ColorWheelPage />"
            ],
            "updatePoint": {
                "line": 8,
                "column": 42
            },
            "line": 8,
            "code": "  it('should render a WindowContainer root', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ColorWheelPage, null));\n    component.find('WindowContainer').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/pages/ColorWheelPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a WindowContainer root",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 16,
                "column": 42
            },
            "line": 16,
            "code": "  it('should render a WindowContainer root', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n    component.find('WindowContainer').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should initialy be in a non-ready state",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 20,
                "column": 45
            },
            "line": 20,
            "code": "  it('should initialy be in a non-ready state', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n    component.instance().ready.should.be.equal(false);\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show the tray modal when closing the window",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 24,
                "column": 56
            },
            "line": 24,
            "code": "  it('should show the tray modal when closing the window', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n    component.find('WindowContainer').props().confirmClose(); // TODO: Test this somehow\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shouldbe marked as ready when the DOM is ready inside the webview",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 28,
                "column": 71
            },
            "line": 28,
            "code": "  it('shouldbe marked as ready when the DOM is ready inside the webview', done => {\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n    const stub = sinon.stub(window, 'addEventListener');\n    const _on = remote.getCurrentWindow().on;\n    const windowSpy = remote.getCurrentWindow().on = sinon.spy();\n\n    component.instance()._domReady();\n\n    component.instance().refs.view = {\n      focus: sinon.spy()\n    };\n    setTimeout(() => {\n      component.instance().ready.should.be.equal(true);\n      component.instance().refs.view.focus.callCount.should.be.equal(1);\n      stub.callCount.should.be.at.least(19);\n      stub.getCall(18).args[1]({});\n      windowSpy.firstCall.args[0].should.be.equal('focus');\n      const queryStub = sinon.stub(document, 'querySelector');\n      const focusObj = {\n        focus: sinon.spy()\n      };\n      queryStub.returns(focusObj);\n      windowSpy.firstCall.args[1]();\n      queryStub.callCount.should.be.equal(1);\n      focusObj.focus.callCount.should.be.equal(1);\n      queryStub.restore();\n      stub.restore();\n      remote.getCurrentWindow().on = _on;\n      done();\n    }, 800);\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should immediately navigate to the target page once when the webview stops loading",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 59,
                "column": 88
            },
            "line": 59,
            "code": "  it('should immediately navigate to the target page once when the webview stops loading', done => {\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n    component.instance().once.should.be.equal(true);\n    document.body.setAttribute('loading', 'loading');\n\n    component.instance()._didStopLoading();\n\n    component.instance().once.should.be.equal(false);\n    setTimeout(() => {\n      expect(document.body.getAttribute('loading')).to.be.equal(null);\n\n      component.instance()._didStopLoading();\n\n      component.instance().once.should.be.equal(false);\n      done();\n    }, 1200);\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should persist GPM URLS on navigate events",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 76,
                "column": 48
            },
            "line": 76,
            "code": "  it('should persist GPM URLS on navigate events', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n    component.instance().ready = true;\n\n    component.instance()._didNavigate('https://play.google.com/music/now');\n\n    fired['settings:set'].should.be.ok;\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should persist GPM URLS on navigate in pageevents",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 84,
                "column": 55
            },
            "line": 84,
            "code": "  it('should persist GPM URLS on navigate in pageevents', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n    component.instance().ready = true;\n\n    component.instance()._didNavigateInPage('https://play.google.com/music/now');\n\n    fired['settings:set'].should.be.ok;\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not persist GPM URLS on navigate events when not ready",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 92,
                "column": 67
            },
            "line": 92,
            "code": "  it('should not persist GPM URLS on navigate events when not ready', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n\n    component.instance()._didNavigate('https://play.google.com/music/now');\n\n    expect(fired['settings:set']).to.not.be.ok;\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not persist GPM URLS on navigate in page events when not ready",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 99,
                "column": 75
            },
            "line": 99,
            "code": "  it('should not persist GPM URLS on navigate in page events when not ready', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n\n    component.instance()._didNavigateInPage('https://play.google.com/music/now');\n\n    expect(fired['settings:set']).to.not.be.ok;\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not persist non-GPM URLS on navigate events",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 106,
                "column": 56
            },
            "line": 106,
            "code": "  it('should not persist non-GPM URLS on navigate events', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n    component.instance().ready = true;\n\n    component.instance()._didNavigate('https://www.google.com');\n\n    expect(fired['settings:set']).to.not.be.ok;\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not persist non-GPM URLS on navigate in page events",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 114,
                "column": 64
            },
            "line": 114,
            "code": "  it('should not persist non-GPM URLS on navigate in page events', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n    component.instance().ready = true;\n\n    component.instance()._didNavigateInPage('https://www.google.com');\n\n    expect(fired['settings:set']).to.not.be.ok;\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should recieve new-window events and attempt to launch them externally",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 122,
                "column": 76
            },
            "line": 122,
            "code": "  it('should recieve new-window events and attempt to launch them externally', done => {\n    const _openExternal = shell.openExternal;\n\n    shell.openExternal = url => {\n      shell.openExternal = _openExternal;\n      expect(url).to.be.equal('https://www.google.com');\n      done();\n    };\n\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n\n    component.instance()._newWindow({\n      url: 'https://www.google.com'\n    });\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should recieve new-window events and not do anything if they are not valid URL's",
            "suites": [
                "<PlayerPage />"
            ],
            "updatePoint": {
                "line": 137,
                "column": 87
            },
            "line": 137,
            "code": "  it('should recieve new-window events and not do anything if they are not valid URL\\'s', () => {\n    let called = false;\n    const _openExternal = shell.openExternal;\n\n    shell.openExternal = () => {\n      shell.openExternal = _openExternal;\n      called = true;\n    };\n\n    const component = mount( /*#__PURE__*/React.createElement(PlayerPage, null));\n\n    component.instance()._newWindow({\n      url: 'steamapp://791'\n    });\n\n    expect(called).to.be.equal(false);\n  });",
            "file": "electron-renderer/ui/pages/PlayerPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a WindowContainer root",
            "suites": [
                "<SettingsPage />"
            ],
            "updatePoint": {
                "line": 8,
                "column": 42
            },
            "line": 8,
            "code": "  it('should render a WindowContainer root', () => {\n    const component = mount( /*#__PURE__*/React.createElement(SettingsPage, null));\n    component.find('WindowContainer').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/pages/SettingsPage_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render the children on the correct platform",
            "suites": [
                "<PlatformSpecific />"
            ],
            "updatePoint": {
                "line": 14,
                "column": 56
            },
            "line": 14,
            "code": "  it('should render the children on the correct platform', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlatformSpecific, {\n      platform: process.platform\n    }, renderedNullComponent));\n    component.contains(renderedNullComponent).should.be.ok;\n  });",
            "file": "electron-renderer/ui/PlatformSpecific_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render the children on the correct versionRange",
            "suites": [
                "<PlatformSpecific />"
            ],
            "updatePoint": {
                "line": 20,
                "column": 60
            },
            "line": 20,
            "code": "  it('should render the children on the correct versionRange', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlatformSpecific, {\n      platform: process.platform,\n      versionRange: `>=${os.release().split('.')[0]}`\n    }, renderedNullComponent));\n    component.contains(renderedNullComponent).should.be.ok;\n  });",
            "file": "electron-renderer/ui/PlatformSpecific_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render the children on the incorrect platform",
            "suites": [
                "<PlatformSpecific />"
            ],
            "updatePoint": {
                "line": 27,
                "column": 62
            },
            "line": 27,
            "code": "  it('should not render the children on the incorrect platform', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlatformSpecific, {\n      platform: \"bad-plat\"\n    }, renderedNullComponent));\n    component.contains(renderedNullComponent).should.not.be.ok;\n  });",
            "file": "electron-renderer/ui/PlatformSpecific_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render the children on an invalid versionRange",
            "suites": [
                "<PlatformSpecific />"
            ],
            "updatePoint": {
                "line": 33,
                "column": 63
            },
            "line": 33,
            "code": "  it('should not render the children on an invalid versionRange', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlatformSpecific, {\n      platform: process.platform,\n      versionRange: \"bad.version.\"\n    }, renderedNullComponent));\n    component.contains(renderedNullComponent).should.not.be.ok;\n  });",
            "file": "electron-renderer/ui/PlatformSpecific_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render the children on a non-matching versionRange",
            "suites": [
                "<PlatformSpecific />"
            ],
            "updatePoint": {
                "line": 40,
                "column": 67
            },
            "line": 40,
            "code": "  it('should not render the children on a non-matching versionRange', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlatformSpecific, {\n      platform: process.platform,\n      versionRange: \"<=1\"\n    }, renderedNullComponent));\n    component.contains(renderedNullComponent).should.not.be.ok;\n  });",
            "file": "electron-renderer/ui/PlatformSpecific_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should load initial key values",
            "suites": [
                "<SettingsProvider />"
            ],
            "updatePoint": {
                "line": 24,
                "column": 36
            },
            "line": 24,
            "code": "  it('should load initial key values', () => {\n    mount( /*#__PURE__*/React.createElement(SettingsProvider, {\n      component: NullComponent,\n      defaults: {},\n      keys: ['foo', 'bar']\n    }));\n    queries.foo.should.be.equal(1);\n    queries.bar.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/SettingsProvider_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should load initial key values, with defaults if set",
            "suites": [
                "<SettingsProvider />"
            ],
            "updatePoint": {
                "line": 33,
                "column": 58
            },
            "line": 33,
            "code": "  it('should load initial key values, with defaults if set', () => {\n    const component = mount( /*#__PURE__*/React.createElement(SettingsProvider, {\n      component: NullComponent,\n      defaults: {\n        bar: 'default_bar'\n      },\n      keys: ['foo', 'bar']\n    }));\n    const props = component.find('NullComponent').props();\n    props.foo.should.be.equal('foo');\n    props.bar.should.be.equal('default_bar');\n  });",
            "file": "electron-renderer/ui/SettingsProvider_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should hook into the settings change events",
            "suites": [
                "<SettingsProvider />"
            ],
            "updatePoint": {
                "line": 45,
                "column": 49
            },
            "line": 45,
            "code": "  it('should hook into the settings change events', () => {\n    mount( /*#__PURE__*/React.createElement(SettingsProvider, {\n      component: NullComponent,\n      defaults: {\n        bar: 'default_bar'\n      },\n      keys: ['foo', 'bar']\n    }));\n    hooks['settings:change:foo'].should.be.ok;\n    hooks['settings:change:foo'].length.should.be.equal(1);\n    hooks['settings:change:bar'].should.be.ok;\n    hooks['settings:change:bar'].length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/SettingsProvider_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the props of the component when the settings change",
            "suites": [
                "<SettingsProvider />"
            ],
            "updatePoint": {
                "line": 58,
                "column": 71
            },
            "line": 58,
            "code": "  it('should update the props of the component when the settings change', () => {\n    const component = mount( /*#__PURE__*/React.createElement(SettingsProvider, {\n      component: NullComponent,\n      defaults: {\n        bar: 'default_bar'\n      },\n      keys: ['foo', 'bar']\n    }));\n    hooks['settings:change:foo'].forEach(fn => fn(null, 'new_foo', 'foo'));\n    const props = component.find('NullComponent').props();\n    props.foo.should.be.equal('new_foo');\n  });",
            "file": "electron-renderer/ui/SettingsProvider_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire settings:set when calling provided setSettings prop",
            "suites": [
                "<SettingsProvider />"
            ],
            "updatePoint": {
                "line": 70,
                "column": 69
            },
            "line": 70,
            "code": "  it('should fire settings:set when calling provided setSettings prop', () => {\n    const component = mount( /*#__PURE__*/React.createElement(SettingsProvider, {\n      component: NullComponent,\n      defaults: {\n        bar: 'default_bar'\n      },\n      keys: ['foo', 'bar']\n    }));\n    const props = component.find('NullComponent').props();\n    props.setSetting('foo', 'dummy_value');\n    fired['settings:set'].should.be.ok;\n    fired['settings:set'].length.should.be.equal(1);\n    fired['settings:set'][0][0].should.be.deep.equal({\n      key: 'foo',\n      value: 'dummy_value'\n    });\n  });",
            "file": "electron-renderer/ui/SettingsProvider_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should unhook the settings change events when unmounting",
            "suites": [
                "<SettingsProvider />"
            ],
            "updatePoint": {
                "line": 87,
                "column": 62
            },
            "line": 87,
            "code": "  it('should unhook the settings change events when unmounting', () => {\n    const component = mount( /*#__PURE__*/React.createElement(SettingsProvider, {\n      component: NullComponent,\n      defaults: {\n        bar: 'default_bar'\n      },\n      keys: ['foo', 'bar']\n    }));\n    unhooks.should.be.deep.equal({});\n    component.unmount();\n    unhooks['settings:change:foo'].should.be.ok;\n    unhooks['settings:change:foo'].length.should.be.equal(1);\n    unhooks['settings:change:bar'].should.be.ok;\n    unhooks['settings:change:bar'].length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/SettingsProvider_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass props through the wrapped component",
            "suites": [
                "<SettingsProvider />"
            ],
            "updatePoint": {
                "line": 102,
                "column": 53
            },
            "line": 102,
            "code": "  it('should pass props through the wrapped component', () => {\n    const WrappedNullComponent = requireSettings(NullComponent, ['foo', 'bar'], {});\n    const component = mount( /*#__PURE__*/React.createElement(WrappedNullComponent, {\n      passed: \"passed_through\"\n    }));\n    const props = component.find('NullComponent').props();\n    props.should.have.property('passed');\n    props.passed.should.be.ok;\n    props.passed.should.be.equal('passed_through');\n  });",
            "file": "electron-renderer/ui/SettingsProvider_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a SettingsTabWrapper",
            "suites": [
                "<GeneralTab />"
            ],
            "updatePoint": {
                "line": 9,
                "column": 40
            },
            "line": 9,
            "code": "  it('should render a SettingsTabWrapper', () => {\n    const component = mount( /*#__PURE__*/React.createElement(GeneralTab, null), materialUIContext);\n    component.find('SettingsTabWrapper').length.should.be.equal(2); // Theme also renders a SettingsTabWrapper\n  });",
            "file": "electron-renderer/ui/tabs/GeneralTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a SettingsTabWrapper",
            "suites": [
                "<HotkeyTab />"
            ],
            "updatePoint": {
                "line": 9,
                "column": 40
            },
            "line": 9,
            "code": "  it('should render a SettingsTabWrapper', () => {\n    const component = mount( /*#__PURE__*/React.createElement(HotkeyTab, null), materialUIContext);\n    component.find('SettingsTabWrapper').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/tabs/HotkeyTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a SettingsTabWrapper",
            "suites": [
                "<LastFMTab />"
            ],
            "updatePoint": {
                "line": 13,
                "column": 40
            },
            "line": 13,
            "code": "  it('should render a SettingsTabWrapper', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LastFMTab, null), materialUIContext);\n    component.find('SettingsTabWrapper').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/tabs/LastFMTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should initially render a controller button",
            "suites": [
                "<LastFMTab />"
            ],
            "updatePoint": {
                "line": 17,
                "column": 49
            },
            "line": 17,
            "code": "  it('should initially render a controller button', () => {\n    const component = mount( /*#__PURE__*/React.createElement(LastFMTab, null), materialUIContext);\n    component.find('FlatButton').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/tabs/LastFMTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a logout button",
            "suites": [
                "<LastFMTab />",
                "when logged in to Last.FM"
            ],
            "updatePoint": {
                "line": 27,
                "column": 37
            },
            "line": 27,
            "code": "    it('should render a logout button', () => {\n      const component = mount( /*#__PURE__*/React.createElement(LastFMTab, null), materialUIContext);\n      component.find('FlatButton').text().should.be.equal('lastfm-logout-button-text');\n    });",
            "file": "electron-renderer/ui/tabs/LastFMTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should reset the lastFMKey setting when the button is clicked",
            "suites": [
                "<LastFMTab />",
                "when logged in to Last.FM"
            ],
            "updatePoint": {
                "line": 31,
                "column": 69
            },
            "line": 31,
            "code": "    it('should reset the lastFMKey setting when the button is clicked', () => {\n      const component = mount( /*#__PURE__*/React.createElement(LastFMTab, null), materialUIContext);\n      component.find('FlatButton').props().onTouchTap();\n      fired.should.have.property('settings:set');\n      fired['settings:set'][0][0].should.be.deep.equal({\n        key: 'lastFMKey',\n        value: false\n      });\n    });",
            "file": "electron-renderer/ui/tabs/LastFMTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a login button",
            "suites": [
                "<LastFMTab />",
                "when logged out of Last.FM"
            ],
            "updatePoint": {
                "line": 47,
                "column": 36
            },
            "line": 47,
            "code": "    it('should render a login button', () => {\n      const component = mount( /*#__PURE__*/React.createElement(LastFMTab, null), materialUIContext);\n      component.find('FlatButton').text().should.be.equal('lastfm-login-button-text');\n    });",
            "file": "electron-renderer/ui/tabs/LastFMTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show three dots when the button is clicked",
            "suites": [
                "<LastFMTab />",
                "when logged out of Last.FM"
            ],
            "updatePoint": {
                "line": 51,
                "column": 57
            },
            "line": 51,
            "code": "    it('should show three dots when the button is clicked', () => {\n      const component = mount( /*#__PURE__*/React.createElement(LastFMTab, null), materialUIContext);\n      component.find('FlatButton').props().onTouchTap();\n      component.find('FlatButton').text().should.be.equal('...');\n    });",
            "file": "electron-renderer/ui/tabs/LastFMTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should attempt to login when the button is clicked",
            "suites": [
                "<LastFMTab />",
                "when logged out of Last.FM"
            ],
            "updatePoint": {
                "line": 56,
                "column": 58
            },
            "line": 56,
            "code": "    it('should attempt to login when the button is clicked', () => {\n      const component = mount( /*#__PURE__*/React.createElement(LastFMTab, null), materialUIContext);\n      component.find('FlatButton').props().onTouchTap();\n      fired.should.have.property('lastfm:auth');\n    });",
            "file": "electron-renderer/ui/tabs/LastFMTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be a noop if clicked multiple times without being authorized",
            "suites": [
                "<LastFMTab />",
                "when logged out of Last.FM"
            ],
            "updatePoint": {
                "line": 61,
                "column": 75
            },
            "line": 61,
            "code": "    it('should be a noop if clicked multiple times without being authorized', () => {\n      const component = mount( /*#__PURE__*/React.createElement(LastFMTab, null), materialUIContext);\n      component.find('FlatButton').props().onTouchTap();\n      component.find('FlatButton').text().should.be.equal('...');\n      component.find('FlatButton').props().onTouchTap();\n      component.find('FlatButton').text().should.be.equal('...');\n    });",
            "file": "electron-renderer/ui/tabs/LastFMTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show the logout button when the auth process is successful",
            "suites": [
                "<LastFMTab />",
                "when logged out of Last.FM"
            ],
            "updatePoint": {
                "line": 68,
                "column": 73
            },
            "line": 68,
            "code": "    it('should show the logout button when the auth process is successful', () => {\n      const component = mount( /*#__PURE__*/React.createElement(LastFMTab, null), materialUIContext);\n      component.find('FlatButton').props().onTouchTap();\n      component.find('FlatButton').text().should.be.equal('...');\n      mockEvent('settings:change:lastFMKey', 'FAKE_YET_NON_NULL_KEY', 'lastFMKey');\n      component.find('FlatButton').text().should.be.equal('lastfm-logout-button-text');\n    });",
            "file": "electron-renderer/ui/tabs/LastFMTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should keep showing the logout button when the auth process is successfully processed multiple times",
            "suites": [
                "<LastFMTab />",
                "when logged out of Last.FM"
            ],
            "updatePoint": {
                "line": 75,
                "column": 108
            },
            "line": 75,
            "code": "    it('should keep showing the logout button when the auth process is successfully processed multiple times', () => {\n      const component = mount( /*#__PURE__*/React.createElement(LastFMTab, null), materialUIContext);\n      component.find('FlatButton').props().onTouchTap();\n      component.find('FlatButton').text().should.be.equal('...');\n      mockEvent('settings:change:lastFMKey', 'FAKE_YET_NON_NULL_KEY', 'lastFMKey');\n      component.find('FlatButton').text().should.be.equal('lastfm-logout-button-text');\n      mockEvent('settings:change:lastFMKey', 'FAKE_YET_NON_NULL_KEY', 'lastFMKey');\n      component.find('FlatButton').text().should.be.equal('lastfm-logout-button-text');\n    });",
            "file": "electron-renderer/ui/tabs/LastFMTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a SettingsTabWrapper",
            "suites": [
                "<ListenBrainzTab />"
            ],
            "updatePoint": {
                "line": 13,
                "column": 40
            },
            "line": 13,
            "code": "  it('should render a SettingsTabWrapper', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ListenBrainzTab, null), materialUIContext);\n    component.find('SettingsTabWrapper').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/tabs/ListenBrainzTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should initially render a heading text",
            "suites": [
                "<ListenBrainzTab />"
            ],
            "updatePoint": {
                "line": 17,
                "column": 44
            },
            "line": 17,
            "code": "  it('should initially render a heading text', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ListenBrainzTab, null), materialUIContext);\n    component.find('h4').text().should.be.equal('listenbrainz-label-user-token');\n  });",
            "file": "electron-renderer/ui/tabs/ListenBrainzTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should initially render a TextField",
            "suites": [
                "<ListenBrainzTab />"
            ],
            "updatePoint": {
                "line": 21,
                "column": 41
            },
            "line": 21,
            "code": "  it('should initially render a TextField', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ListenBrainzTab, null), materialUIContext);\n    component.find('TextField').length.should.be.equal(1);\n    component.find('TextField').props().label.should.be.equal('listenbrainz-label-user-token');\n  });",
            "file": "electron-renderer/ui/tabs/ListenBrainzTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set the listenBrainzUserToken setting when TextField's value is changed",
            "suites": [
                "<ListenBrainzTab />",
                "when a user key is not defined"
            ],
            "updatePoint": {
                "line": 32,
                "column": 87
            },
            "line": 32,
            "code": "    it('should set the listenBrainzUserToken setting when TextField\\'s value is changed', () => {\n      const component = mount( /*#__PURE__*/React.createElement(ListenBrainzTab, null), materialUIContext);\n      component.find('TextField').props().onChange(null, 'a-b-c-d');\n      fired.should.have.property('settings:set');\n      fired['settings:set'][0][0].should.be.deep.equal({\n        key: 'listenBrainzUserToken',\n        value: 'a-b-c-d'\n      });\n    });",
            "file": "electron-renderer/ui/tabs/ListenBrainzTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set the listenBrainzUserToken setting when TextField's value is changed",
            "suites": [
                "<ListenBrainzTab />",
                "when a user key is not defined"
            ],
            "updatePoint": {
                "line": 48,
                "column": 87
            },
            "line": 48,
            "code": "    it('should set the listenBrainzUserToken setting when TextField\\'s value is changed', () => {\n      const component = mount( /*#__PURE__*/React.createElement(ListenBrainzTab, null), materialUIContext); // component.find('TextField').simulate('change', {target: {value: 'My new value'}});\n\n      component.find('TextField').props().onChange(null, '');\n      fired.should.have.property('settings:set');\n      fired['settings:set'][0][0].should.be.deep.equal({\n        key: 'listenBrainzUserToken',\n        value: ''\n      });\n    });",
            "file": "electron-renderer/ui/tabs/ListenBrainzTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a SettingsTabWrapper",
            "suites": [
                "<MiniTab />"
            ],
            "updatePoint": {
                "line": 9,
                "column": 40
            },
            "line": 9,
            "code": "  it('should render a SettingsTabWrapper', () => {\n    const component = mount( /*#__PURE__*/React.createElement(MiniTab, null), materialUIContext);\n    component.find('SettingsTabWrapper').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/tabs/MiniTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a SettingsTabWrapper",
            "suites": [
                "<PlaybackTab />"
            ],
            "updatePoint": {
                "line": 9,
                "column": 40
            },
            "line": 9,
            "code": "  it('should render a SettingsTabWrapper', () => {\n    const component = mount( /*#__PURE__*/React.createElement(PlaybackTab, null), materialUIContext);\n    component.find('SettingsTabWrapper').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/tabs/PlaybackTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render as a wrapper with no state",
            "suites": [
                "<SettingsTabWrapper />"
            ],
            "updatePoint": {
                "line": 12,
                "column": 46
            },
            "line": 12,
            "code": "  it('should render as a wrapper with no state', () => {\n    const component = mount( /*#__PURE__*/React.createElement(SettingsTabWrapper, null, /*#__PURE__*/React.createElement(NullComponent, null)));\n    expect(component.state()).to.be.equal(null);\n  });",
            "file": "electron-renderer/ui/tabs/SettingsTabWrapper_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render the inner child component",
            "suites": [
                "<SettingsTabWrapper />"
            ],
            "updatePoint": {
                "line": 16,
                "column": 45
            },
            "line": 16,
            "code": "  it('should render the inner child component', () => {\n    const component = mount( /*#__PURE__*/React.createElement(SettingsTabWrapper, null, /*#__PURE__*/React.createElement(NullComponent, null)));\n    component.find(NullComponent).length.should.be.ok;\n  });",
            "file": "electron-renderer/ui/tabs/SettingsTabWrapper_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a SettingsTabWrapper",
            "suites": [
                "<SlackTab />"
            ],
            "updatePoint": {
                "line": 9,
                "column": 40
            },
            "line": 9,
            "code": "  it('should render a SettingsTabWrapper', () => {\n    const component = mount( /*#__PURE__*/React.createElement(SlackTab, null), materialUIContext);\n    component.find('SettingsTabWrapper').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/tabs/SlackTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a SettingsTabWrapper",
            "suites": [
                "<StyleTab />"
            ],
            "updatePoint": {
                "line": 13,
                "column": 40
            },
            "line": 13,
            "code": "  it('should render a SettingsTabWrapper', () => {\n    const component = mount( /*#__PURE__*/React.createElement(StyleTab, null), materialUIContext);\n    component.find('SettingsTabWrapper').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/tabs/StyleTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should refresh the styles when the refresh button is clicked",
            "suites": [
                "<StyleTab />"
            ],
            "updatePoint": {
                "line": 17,
                "column": 66
            },
            "line": 17,
            "code": "  it('should refresh the styles when the refresh button is clicked', () => {\n    const component = mount( /*#__PURE__*/React.createElement(StyleTab, null), materialUIContext);\n    const buttons = component.find('RaisedButton');\n    buttons.last().props().onClick();\n    const fired = getVars().fired;\n    fired.should.haveOwnProperty('FetchGPMCustomStyles');\n    fired.should.haveOwnProperty('FetchMainAppCustomStyles');\n  });",
            "file": "electron-renderer/ui/tabs/StyleTab_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render as a static element with no state",
            "suites": [
                "<ThemeOptions />"
            ],
            "updatePoint": {
                "line": 21,
                "column": 53
            },
            "line": 21,
            "code": "  it('should render as a static element with no state', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ThemeOptions, null), materialUIContext);\n    expect(component.state()).to.be.equal(null);\n  });",
            "file": "electron-renderer/ui/ThemeOptions_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render inner children",
            "suites": [
                "<ThemeOptions />"
            ],
            "updatePoint": {
                "line": 25,
                "column": 38
            },
            "line": 25,
            "code": "  it('should not render inner children', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ThemeOptions, null, /*#__PURE__*/React.createElement(NullComponent, null)), materialUIContext);\n    component.find(NullComponent).length.should.be.equal(0);\n  });",
            "file": "electron-renderer/ui/ThemeOptions_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a toggle option for each theme state",
            "suites": [
                "<ThemeOptions />"
            ],
            "updatePoint": {
                "line": 29,
                "column": 56
            },
            "line": 29,
            "code": "  it('should render a toggle option for each theme state', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ThemeOptions, null), materialUIContext);\n    component.find('RadioButton').length.should.be.equal(2);\n    component.find('RadioButton').at(0).props().value.should.be.equal('HIGHLIGHT_ONLY');\n    component.find('RadioButton').at(1).props().value.should.be.equal('FULL');\n  });",
            "file": "electron-renderer/ui/ThemeOptions_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should change the themeType setting when a user chooses a toggle option",
            "suites": [
                "<ThemeOptions />"
            ],
            "updatePoint": {
                "line": 35,
                "column": 77
            },
            "line": 35,
            "code": "  it('should change the themeType setting when a user chooses a toggle option', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ThemeOptions, null), materialUIContext);\n    component.find('RadioButton').length.should.be.equal(2);\n    component.find('RadioButton').at(0).find('input').simulate('change', {\n      target: {\n        checked: true\n      }\n    });\n    fired['settings:set'].should.be.ok;\n    fired['settings:set'].length.should.be.equal(1);\n    fired['settings:set'][0][0].should.be.deep.equal({\n      key: 'themeType',\n      value: 'HIGHLIGHT_ONLY'\n    });\n    component.find('RadioButton').at(1).find('input').simulate('change', {\n      target: {\n        checked: true\n      }\n    });\n    fired['settings:set'].length.should.be.equal(2);\n    fired['settings:set'][1][0].should.be.deep.equal({\n      key: 'themeType',\n      value: 'FULL'\n    });\n  });",
            "file": "electron-renderer/ui/ThemeOptions_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should hide the manual themeType control on darwin when themeTypeShouldTrackSystem is enabled",
            "suites": [
                "<ThemeOptions />"
            ],
            "updatePoint": {
                "line": 60,
                "column": 99
            },
            "line": 60,
            "code": "  it('should hide the manual themeType control on darwin when themeTypeShouldTrackSystem is enabled', () => {\n    fakeSettings('themeTypeShouldTrackSystem', true);\n    const component = mount( /*#__PURE__*/React.createElement(ThemeOptions, null), materialUIContext);\n    component.find('RadioButton').length.should.be.equal(0);\n  });",
            "file": "electron-renderer/ui/ThemeOptions_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a square for every predefined color",
            "suites": [
                "<ThemeOptions />"
            ],
            "updatePoint": {
                "line": 65,
                "column": 55
            },
            "line": 65,
            "code": "  it('should render a square for every predefined color', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ThemeOptions, null), materialUIContext);\n    component.find('.color-square').length.should.be.equal(themeColors.length);\n    component.find('.color-square').forEach((colorSquare, i) => colorSquare.props().className.split(' ')[1].should.be.equal(themeColors[i]));\n  });",
            "file": "electron-renderer/ui/ThemeOptions_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should change the themeColor setting when a used clicks a square",
            "suites": [
                "<ThemeOptions />"
            ],
            "updatePoint": {
                "line": 70,
                "column": 70
            },
            "line": 70,
            "code": "  it('should change the themeColor setting when a used clicks a square', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ThemeOptions, null), materialUIContext);\n    component.find('.color-square').at(0).simulate('click');\n    fired['settings:set'].should.be.ok;\n    fired['settings:set'].length.should.be.equal(1);\n    fired['settings:set'][0][0].should.be.deep.equal({\n      key: 'themeColor',\n      value: ''\n    });\n  });",
            "file": "electron-renderer/ui/ThemeOptions_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should attempt to open the color picker when we click the color picker button",
            "suites": [
                "<ThemeOptions />"
            ],
            "updatePoint": {
                "line": 80,
                "column": 83
            },
            "line": 80,
            "code": "  it('should attempt to open the color picker when we click the color picker button', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ThemeOptions, null), materialUIContext);\n    component.find('a').at(0).simulate('click');\n    fired['window:color_wheel'].should.be.ok;\n    fired['window:color_wheel'].length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/ThemeOptions_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a checkbox",
            "suites": [
                "<ToggleableOption />"
            ],
            "updatePoint": {
                "line": 19,
                "column": 30
            },
            "line": 19,
            "code": "  it('should render a checkbox', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ToggleableOption, {\n      label: \"Test Label\",\n      settingsKey: \"foo\"\n    }), materialUIContext);\n    component.find(Checkbox).length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/ToggleableOption_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a checkbox with a hint",
            "suites": [
                "<ToggleableOption />"
            ],
            "updatePoint": {
                "line": 26,
                "column": 42
            },
            "line": 26,
            "code": "  it('should render a checkbox with a hint', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ToggleableOption, {\n      label: \"Test Label\",\n      hintLabel: \"This is a hint\",\n      settingsKey: \"foo\"\n    }), materialUIContext);\n    component.find('.settings-toggle-hint-label').length.should.be.equal(1);\n    component.find('.settings-toggle-hint-label').text().should.be.equal('This is a hint');\n  });",
            "file": "electron-renderer/ui/ToggleableOption_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a checkbox with the correct default value",
            "suites": [
                "<ToggleableOption />"
            ],
            "updatePoint": {
                "line": 35,
                "column": 61
            },
            "line": 35,
            "code": "  it('should render a checkbox with the correct default value', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ToggleableOption, {\n      label: \"Test Label\",\n      settingsKey: \"foo\"\n    }), materialUIContext);\n    component.find(Checkbox).props().checked.should.be.ok;\n    fakeSettings('foo', false);\n    const component2 = mount( /*#__PURE__*/React.createElement(ToggleableOption, {\n      label: \"Test Label\",\n      settingsKey: \"foo\"\n    }), materialUIContext);\n    component2.find(Checkbox).props().checked.should.not.be.ok;\n  });",
            "file": "electron-renderer/ui/ToggleableOption_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call setSetting when the checkbox is toggled",
            "suites": [
                "<ToggleableOption />"
            ],
            "updatePoint": {
                "line": 48,
                "column": 57
            },
            "line": 48,
            "code": "  it('should call setSetting when the checkbox is toggled', () => {\n    const component = mount( /*#__PURE__*/React.createElement(ToggleableOption, {\n      label: \"Test Label\",\n      settingsKey: \"foo\"\n    }), materialUIContext);\n    expect(fired['settings:set']).to.not.be.ok;\n    component.find('input').simulate('change', {\n      target: {\n        checked: true\n      }\n    });\n    fired['settings:set'].should.be.ok;\n    fired['settings:set'].length.should.be.equal(1);\n    fired['settings:set'][0][0].should.be.deep.equal({\n      key: 'foo',\n      value: true\n    });\n  });",
            "file": "electron-renderer/ui/ToggleableOption_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render a title when being the main window",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 20,
                "column": 58
            },
            "line": 20,
            "code": "  it('should not render a title when being the main window', () => {\n    fakeSettings('theme', false);\n    const component = mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      isMainWindow: true,\n      title: \"Test Title\"\n    }));\n    component.find('.window-title').length.should.be.equal(0);\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a title when not the main window",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 28,
                "column": 52
            },
            "line": 28,
            "code": "  it('should render a title when not the main window', () => {\n    const component = mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      title: \"Test Title\"\n    }));\n    component.find('.window-title').length.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should hook into theme settings change events on mount",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 34,
                "column": 60
            },
            "line": 34,
            "code": "  it('should hook into theme settings change events on mount', () => {\n    mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      isMainWindow: true,\n      title: \"Test Title\"\n    }));\n    hooks['settings:change:theme'].should.be.ok;\n    hooks['settings:change:themeColor'].should.be.ok;\n    hooks['settings:change:themeType'].should.be.ok;\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should unhook from theme settings change events on unmount",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 43,
                "column": 64
            },
            "line": 43,
            "code": "  it('should unhook from theme settings change events on unmount', () => {\n    mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      isMainWindow: true,\n      title: \"Test Title\"\n    })).unmount();\n    unhooks['settings:change:theme'].should.be.ok;\n    unhooks['settings:change:themeColor'].should.be.ok;\n    unhooks['settings:change:themeType'].should.be.ok;\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the theme state when theme event is fired",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 52,
                "column": 61
            },
            "line": 52,
            "code": "  it('should update the theme state when theme event is fired', () => {\n    const component = mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      isMainWindow: true,\n      title: \"Test Title\"\n    }));\n    component.state().theme.should.be.equal('theme');\n    mockEvent('settings:change:theme', true);\n    component.state().theme.should.be.equal(true);\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the themeType state when themeType event is fired",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 61,
                "column": 69
            },
            "line": 61,
            "code": "  it('should update the themeType state when themeType event is fired', () => {\n    const component = mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      isMainWindow: true,\n      title: \"Test Title\"\n    }));\n    component.state().themeType.should.be.equal('FULL');\n    mockEvent('settings:change:themeType', 'FULL');\n    component.state().themeType.should.be.equal('FULL');\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the themeColor state when themeColor event is fired",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 70,
                "column": 71
            },
            "line": 70,
            "code": "  it('should update the themeColor state when themeColor event is fired', () => {\n    const component = mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      isMainWindow: true,\n      title: \"Test Title\"\n    }));\n    component.state().themeColor.should.be.equal('themeColor');\n    mockEvent('settings:change:themeColor', 'red');\n    component.state().themeColor.should.be.equal('red');\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render the window controls",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 79,
                "column": 39
            },
            "line": 79,
            "code": "  it('should render the window controls', () => {\n    const component = mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      isMainWindow: true,\n      title: \"Test Title\"\n    }));\n    component.find('.control').length.should.be.equal(3);\n    fired.should.not.have.property('window:minimize');\n    component.find('.control').at(0).props().onClick();\n    fired.should.have.property('window:minimize');\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire the window control events when the controls are used",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 89,
                "column": 70
            },
            "line": 89,
            "code": "  it('should fire the window control events when the controls are used', () => {\n    const component = mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      title: \"Test Title\"\n    }));\n    fired.should.not.have.property('window:minimize');\n    component.find('.control').at(0).props().onClick();\n    fired.should.have.property('window:minimize');\n    fired.should.not.have.property('window:maximize');\n    component.find('.control').at(1).props().onClick();\n    fired.should.have.property('window:maximize');\n    fired.should.not.have.property('window:close');\n    component.find('.control').at(2).props().onClick();\n    fired.should.have.property('window:close');\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should confirm close when on the main page and a function is provided",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 103,
                "column": 75
            },
            "line": 103,
            "code": "  it('should confirm close when on the main page and a function is provided', () => {\n    const spy = sinon.spy();\n    const component = mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      isMainWindow: true,\n      title: \"Test Title\",\n      confirmClose: spy\n    }));\n    spy.callCount.should.be.equal(0);\n    component.find('.control').at(2).props().onClick();\n    spy.callCount.should.be.equal(1);\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should attempt to minimize on darwin when double clicking the titlebar and the user config is minimize",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 114,
                "column": 108
            },
            "line": 114,
            "code": "  it('should attempt to minimize on darwin when double clicking the titlebar and the user config is minimize', () => {\n    const _orig = remote.systemPreferences.getUserDefault;\n\n    remote.systemPreferences.getUserDefault = () => 'Minimize';\n\n    const component = mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      isMainWindow: true,\n      title: \"Test Title\"\n    }));\n\n    component.instance()._darwinExpand();\n\n    fired.should.have.property('window:minimize');\n    remote.systemPreferences.getUserDefault = _orig;\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should attempt to maximize on darwin when double clicking the titlebar and the user config is maximize",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 129,
                "column": 108
            },
            "line": 129,
            "code": "  it('should attempt to maximize on darwin when double clicking the titlebar and the user config is maximize', () => {\n    const _orig = remote.systemPreferences.getUserDefault;\n\n    remote.systemPreferences.getUserDefault = () => 'Maximize';\n\n    const component = mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      isMainWindow: true,\n      title: \"Test Title\"\n    }));\n\n    component.instance()._darwinExpand();\n\n    fired.should.have.property('window:maximize');\n    remote.systemPreferences.getUserDefault = _orig;\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not attempt to perform a window actions on darwin when double clicking the titlebar and the user config is unknown",
            "suites": [
                "<WindowContainer />"
            ],
            "updatePoint": {
                "line": 144,
                "column": 127
            },
            "line": 144,
            "code": "  it('should not attempt to perform a window actions on darwin when double clicking the titlebar and the user config is unknown', () => {\n    const _orig = remote.systemPreferences.getUserDefault;\n\n    remote.systemPreferences.getUserDefault = () => 'RandomString';\n\n    const component = mount( /*#__PURE__*/React.createElement(WindowContainer, {\n      isMainWindow: true,\n      title: \"Test Title\"\n    }));\n\n    component.instance()._darwinExpand();\n\n    fired.should.be.deep.equal({});\n    remote.systemPreferences.getUserDefault = _orig;\n  });",
            "file": "electron-renderer/ui/WindowContainer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should automatically hook into passback events",
            "suites": [
                "Emitter (main)"
            ],
            "updatePoint": {
                "line": 60,
                "column": 52
            },
            "line": 60,
            "code": "  it('should automatically hook into passback events', () => {\n    IPCHooks.passback.should.be.ok;\n    IPCHooks.passback.length.should.be.equal(1);\n    IPCHooks['passback:main'].should.be.ok;\n    IPCHooks['passback:main'].length.should.be.equal(1);\n    IPCHooks['passback:all'].should.be.ok;\n    IPCHooks['passback:all'].length.should.be.equal(1);\n  });",
            "file": "electron/Emitter_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should send an IPC event to a window with a given ID",
            "suites": [
                "Emitter (main)"
            ],
            "updatePoint": {
                "line": 68,
                "column": 58
            },
            "line": 68,
            "code": "  it('should send an IPC event to a window with a given ID', () => {\n    testWindow1.recieved.length.should.be.equal(0);\n    Emitter.sendToWindow(Symbol(), 'test-event', 'arg1', 'arg2');\n    testWindow1.recieved.length.should.be.equal(1);\n    testWindow1.recieved[0].should.be.deep.equal({\n      event: 'test-event',\n      args: ['arg1', 'arg2']\n    }); // Should not throw error\n\n    Emitter.sendToWindow('goodie', 'test-event', 'arg1', 'arg2');\n  });",
            "file": "electron/Emitter_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should send an IPC event to all windows",
            "suites": [
                "Emitter (main)"
            ],
            "updatePoint": {
                "line": 79,
                "column": 45
            },
            "line": 79,
            "code": "  it('should send an IPC event to all windows', () => {\n    testWindow1.recieved.length.should.be.equal(0);\n    Emitter.sendToAll('test-event', 'arg1', 'arg2');\n    testWindow1.recieved.length.should.be.equal(1);\n    testWindow1.recieved[0].should.be.deep.equal({\n      event: 'test-event',\n      args: ['arg1', 'arg2']\n    });\n  });",
            "file": "electron/Emitter_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass a method to be executed on a window",
            "suites": [
                "Emitter (main)"
            ],
            "updatePoint": {
                "line": 88,
                "column": 53
            },
            "line": 88,
            "code": "  it('should pass a method to be executed on a window', () => {\n    testWindow1.recieved.length.should.be.equal(0);\n    Emitter.executeOnWindow(Symbol(), function () {\n      doFoo();\n    }, 'bar', 'arg2'); // eslint-disable-line\n\n    testWindow1.recieved.length.should.be.equal(1);\n    testWindow1.recieved[0].should.be.deep.equal({\n      event: 'execute',\n      args: [{\n        fn: '(function () {\\n      doFoo();\\n    }).apply(window, [\"bar\",\"arg2\"])'\n      }]\n    });\n  });",
            "file": "electron/Emitter_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should send IPC events to all windows with a given name",
            "suites": [
                "Emitter (main)"
            ],
            "updatePoint": {
                "line": 102,
                "column": 61
            },
            "line": 102,
            "code": "  it('should send IPC events to all windows with a given name', () => {\n    testWindow1.recieved.length.should.be.equal(0);\n    Emitter.sendToWindowsOfName('dummy-name', 'test-event-2', 'arg1', 'arg2');\n    testWindow1.recieved.length.should.be.equal(1);\n    testWindow1.recieved[0].should.be.deep.equal({\n      event: 'test-event-2',\n      args: ['arg1', 'arg2']\n    });\n    testWindow2.recieved.length.should.be.equal(1);\n    testWindow2.recieved[0].should.be.deep.equal({\n      event: 'test-event-2',\n      args: ['arg1', 'arg2']\n    });\n  });",
            "file": "electron/Emitter_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should send passthrough IPC events to GPM when using sendToGooglePlayMusic",
            "suites": [
                "Emitter (main)"
            ],
            "updatePoint": {
                "line": 116,
                "column": 80
            },
            "line": 116,
            "code": "  it('should send passthrough IPC events to GPM when using sendToGooglePlayMusic', () => {\n    testWindow1.recieved.length.should.be.equal(0);\n    Emitter.sendToGooglePlayMusic('gpm-event', 'bar1', 'bar2');\n    testWindow1.recieved.length.should.be.equal(1);\n    testWindow1.recieved[0].should.be.deep.equal({\n      event: 'passthrough',\n      args: [{\n        event: 'gpm-event',\n        details: ['bar1', 'bar2']\n      }]\n    });\n    testWindow2.recieved.length.should.be.equal(0);\n  });",
            "file": "electron/Emitter_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should default the details of an event to an empty object",
            "suites": [
                "Emitter (main)"
            ],
            "updatePoint": {
                "line": 129,
                "column": 63
            },
            "line": 129,
            "code": "  it('should default the details of an event to an empty object', () => {\n    testWindow1.recieved.length.should.be.equal(0);\n    Emitter.sendToWindow(Symbol(), 'empty-event');\n    testWindow1.recieved.length.should.be.equal(1);\n    testWindow1.recieved[0].args.length.should.be.equal(1);\n    testWindow1.recieved[0].args[0].should.deep.equal({});\n  });",
            "file": "electron/Emitter_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should hook events when requested",
            "suites": [
                "Emitter (main)"
            ],
            "updatePoint": {
                "line": 136,
                "column": 39
            },
            "line": 136,
            "code": "  it('should hook events when requested', () => {\n    const fn = () => {};\n\n    Emitter.on('dummy-event', fn);\n    IPCHooks['dummy-event'].should.be.ok;\n    IPCHooks['dummy-event'].length.should.be.equal(1);\n    IPCHooks['dummy-event'][0].should.be.equal(fn);\n  });",
            "file": "electron/Emitter_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should hook events (once) when requested",
            "suites": [
                "Emitter (main)"
            ],
            "updatePoint": {
                "line": 144,
                "column": 46
            },
            "line": 144,
            "code": "  it('should hook events (once) when requested', () => {\n    const fn = () => {};\n\n    Emitter.once('dummy-event', fn);\n    IPCHooksOnce['dummy-event'].should.be.ok;\n    IPCHooksOnce['dummy-event'].length.should.be.equal(1);\n    IPCHooksOnce['dummy-event'][0].should.be.equal(fn);\n  });",
            "file": "electron/Emitter_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should wait for the webContents to load before sending the event",
            "suites": [
                "Emitter (main)",
                "when the webcontents is not loaded"
            ],
            "updatePoint": {
                "line": 153,
                "column": 72
            },
            "line": 153,
            "code": "    it('should wait for the webContents to load before sending the event', done => {\n      testWindow1.mockLoading = true;\n      testWindow1.recieved.length.should.be.equal(0);\n      Emitter.sendToWindow(Symbol(), 'delayed-event', 'delayed', 'for', 'a', 'bit');\n      testWindow1.recieved.length.should.be.equal(0);\n      testWindow1.webContents.once('did-stop-loading', () => {\n        testWindow1.recieved.length.should.be.equal(1);\n        testWindow1.recieved[0].should.be.deep.equal({\n          event: 'delayed-event',\n          args: ['delayed', 'for', 'a', 'bit']\n        });\n        done();\n      });\n      testWindow1.mockLoading = false;\n    });",
            "file": "electron/Emitter_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should only send the event on the first load event, not successive events",
            "suites": [
                "Emitter (main)",
                "when the webcontents is not loaded"
            ],
            "updatePoint": {
                "line": 168,
                "column": 81
            },
            "line": 168,
            "code": "    it('should only send the event on the first load event, not successive events', done => {\n      testWindow1.mockLoading = true;\n      Emitter.sendToWindow(Symbol(), 'delayed-event', 'delayed', 'for', 'a', 'bit');\n      testWindow1.recieved.length.should.be.equal(0);\n      testWindow1.webContents.once('did-stop-loading', () => {\n        testWindow1.recieved.length.should.be.equal(1);\n        testWindow1.webContents.once('did-stop-loading', () => {\n          testWindow1.recieved.length.should.be.equal(1);\n          done();\n        });\n        testWindow1.mockLoading = false;\n      });\n      testWindow1.mockLoading = false;\n    });",
            "file": "electron/Emitter_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return a valid path",
            "suites": [
                "JSONCreator"
            ],
            "updatePoint": {
                "line": 13,
                "column": 32
            },
            "line": 13,
            "code": "  it('should return a valid path', () => {\n    const jsonPath = jsonCreator('test');\n    jsonPath.should.be.a('string');\n    jsonPath.should.have.extname('.json');\n  });",
            "file": "electron/jsonCreator_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should make the required directory structure",
            "suites": [
                "JSONCreator"
            ],
            "updatePoint": {
                "line": 18,
                "column": 50
            },
            "line": 18,
            "code": "  it('should make the required directory structure', () => {\n    const jsonPath = jsonCreator('test');\n    path.dirname(jsonPath).should.be.a.directory();\n  });",
            "file": "electron/jsonCreator_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should preserve the old file",
            "suites": [
                "JSONCreator",
                "when an old JSON file exists"
            ],
            "updatePoint": {
                "line": 38,
                "column": 36
            },
            "line": 38,
            "code": "    it('should preserve the old file', () => {\n      jsonPath = jsonCreator('test');\n      jsonPath.should.be.a.file();\n    });",
            "file": "electron/jsonCreator_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should preserve the contents of the old file",
            "suites": [
                "JSONCreator",
                "when an old JSON file exists"
            ],
            "updatePoint": {
                "line": 42,
                "column": 52
            },
            "line": 42,
            "code": "    it('should preserve the contents of the old file', () => {\n      jsonPath = jsonCreator('test');\n      jsonPath.should.have.content('{\"test\":123}');\n    });",
            "file": "electron/jsonCreator_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should delete the old JSON directory",
            "suites": [
                "JSONCreator",
                "when an old JSON file exists"
            ],
            "updatePoint": {
                "line": 46,
                "column": 44
            },
            "line": 46,
            "code": "    it('should delete the old JSON directory', () => {\n      jsonPath = jsonCreator('test');\n      fs.existsSync(oldPath).should.be.equal(false);\n    });",
            "file": "electron/jsonCreator_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should resolve when given a valid song object with brackets",
            "suites": [
                "Lyrics Resolver"
            ],
            "updatePoint": {
                "line": 41,
                "column": 65
            },
            "line": 41,
            "code": "  it('should resolve when given a valid song object with brackets', done => {\n    resolveLyrics(testSong).then(lyrics => {\n      lyrics.should.be.a('string');\n      done();\n    }).catch(() => done(new Error(`Failed to fetch lyrics for song: ${testSong.title}`)));\n  });",
            "file": "electron/lyrics/lyrics_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should change lyrics when recieving a PlaybackAPI event",
            "suites": [
                "Lyrics Resolver"
            ],
            "updatePoint": {
                "line": 47,
                "column": 61
            },
            "line": 47,
            "code": "  it('should change lyrics when recieving a PlaybackAPI event', done => {\n    PlaybackAPI.on('change:lyrics', lyrics => {\n      lyrics.should.be.ok; // eslint-disable-line\n\n      lyrics.should.be.a('string');\n      done();\n    });\n    PlaybackAPI.emit('change:track', testSong);\n  });",
            "file": "electron/lyrics/lyrics_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not change lyrics when recieving a PlaybackAPI event if the current song has changed",
            "suites": [
                "Lyrics Resolver"
            ],
            "updatePoint": {
                "line": 56,
                "column": 97
            },
            "line": 56,
            "code": "  it('should not change lyrics when recieving a PlaybackAPI event if the current song has changed', done => {\n    PlaybackAPI.on('change:lyrics', lyrics => {\n      lyrics.should.be.a('string');\n      lyrics.split('I\\'m only one call away').length.should.be.gt(2);\n      done();\n    });\n    const originalSong = Object.assign({}, testSong);\n    testSong = validSongs[1];\n    PlaybackAPI.emit('change:track', testSong);\n    testSong = originalSong;\n    PlaybackAPI.emit('change:track', testSong);\n  });",
            "file": "electron/lyrics/lyrics_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not store data in a JSON file",
            "suites": [
                "PlaybackAPI"
            ],
            "updatePoint": {
                "line": 61,
                "column": 42
            },
            "line": 61,
            "code": "  it('should not store data in a JSON file', () => {\n    fs.existsSync(PlaybackAPI.PATH).should.be.false;\n  });",
            "file": "electron/PlaybackAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the  when setting with ()",
            "suites": [
                "PlaybackAPI"
            ],
            "updatePoint": {
                "line": 66,
                "column": 75
            },
            "line": 66,
            "code": "    it(`should update the ${propName} when setting with ${propMethodName}()`, () => {\n      if (newValueArgs.length === 0) {\n        newValueArgs = [expectedNewValue]; // eslint-disable-line\n      }\n\n      expect(PlaybackAPI[propName](true)).to.be.not.deep.equal(expectedNewValue);\n      PlaybackAPI[propMethodName](...newValueArgs);\n      PlaybackAPI[propName](true).should.be.deep.equal(expectedNewValue);\n    });",
            "file": "electron/PlaybackAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should store data in a JSON file",
            "suites": [
                "PlaybackAPI",
                "when the JSON API is enabled"
            ],
            "updatePoint": {
                "line": 126,
                "column": 40
            },
            "line": 126,
            "code": "    it('should store data in a JSON file', () => {\n      fs.existsSync(PlaybackAPI.PATH).should.be.true;\n\n      require(PlaybackAPI.PATH).should.be.a('object');\n    });",
            "file": "electron/PlaybackAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should initialize with default settings",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 23,
                "column": 45
            },
            "line": 23,
            "code": "  it('should initialize with default settings', () => {\n    settings.data.should.be.deep.equal(initialSettings);\n  });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should save a value in the runtime",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 26,
                "column": 40
            },
            "line": 26,
            "code": "  it('should save a value in the runtime', () => {\n    settings.set('test_key', 'test_value');\n    settings.get('test_key').should.be.equal('test_value');\n  });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should save a value to a file",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 30,
                "column": 35
            },
            "line": 30,
            "code": "  it('should save a value to a file', done => {\n    settings.set('test_key', 'test_value');\n    setTimeout(() => {\n      settings = null;\n      settings = new Settings('test');\n      settings.get('test_key').should.be.equal('test_value');\n      done();\n    }, 300);\n  });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should instantly save to a file with force enabled",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 39,
                "column": 56
            },
            "line": 39,
            "code": "  it('should instantly save to a file with force enabled', () => {\n    settings.set('test_key', 'test_value');\n\n    settings._save(true);\n\n    settings = null;\n    settings = new Settings('test');\n    settings.get('test_key').should.be.equal('test_value');\n  });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fire change functions when a setting key is changed",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 48,
                "column": 64
            },
            "line": 48,
            "code": "  it('should fire change functions when a setting key is changed', () => {\n    let hookCalled = false;\n    settings.onChange('test_key', newValue => {\n      hookCalled = true;\n      newValue.should.be.equal('test_value_2');\n      settings.get('test_key', 'null').should.be.equal('test_value_2');\n    });\n    settings.set('test_key', 'test_value_2');\n    hookCalled.should.be.equal(true);\n  });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not fire change function on position key when another key is changed",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 58,
                "column": 81
            },
            "line": 58,
            "code": "  it('should not fire change function on position key when another key is changed', () => {\n    let hookCalled = false;\n    settings.onChange('test_key', () => {\n      hookCalled = true;\n    });\n    settings.set('position', 'test_value_2');\n    hookCalled.should.be.equal(false);\n  });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should retry when loading JSON failed",
            "suites": [
                "Settings"
            ],
            "line": 66,
            "code": "  it.skip('should retry when loading JSON failed', done => {",
            "file": "electron/Settings_spec.js",
            "skipped": true,
            "dir": "test"
        },
        {
            "name": "should eventually stop retrying when loading JSON failed",
            "suites": [
                "Settings"
            ],
            "line": 88,
            "code": "  it.skip('should eventually stop retrying when loading JSON failed', done => {",
            "file": "electron/Settings_spec.js",
            "skipped": true,
            "dir": "test"
        },
        {
            "name": "should instantly save when calling _save with force parameter",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 111,
                "column": 67
            },
            "line": 111,
            "code": "  it('should instantly save when calling _save with force parameter', () => {\n    settings.data = {};\n    settings.set('foo_key', 'bar_value');\n    settings.set('foo_key2', 'bar_value2');\n    JSON.parse(fs.readFileSync(settings.PATH), 'utf8').should.not.have.property('foo_key');\n    JSON.parse(fs.readFileSync(settings.PATH), 'utf8').should.not.have.property('foo_key2');\n\n    settings._save(true);\n\n    JSON.parse(fs.readFileSync(settings.PATH), 'utf8').should.have.property('foo_key');\n    JSON.parse(fs.readFileSync(settings.PATH), 'utf8').should.have.property('foo_key2');\n  });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should delete the file when destroying",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 123,
                "column": 44
            },
            "line": 123,
            "code": "  it('should delete the file when destroying', () => {\n    fs.existsSync(settings.PATH).should.be.equal(true);\n    settings.destroy();\n    fs.existsSync(settings.PATH).should.be.equal(false);\n  });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should delete the file and not error when destroying multiple times",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 128,
                "column": 73
            },
            "line": 128,
            "code": "  it('should delete the file and not error when destroying multiple times', () => {\n    fs.existsSync(settings.PATH).should.be.equal(true);\n    settings.destroy();\n    fs.existsSync(settings.PATH).should.be.equal(false);\n    settings.destroy();\n    fs.existsSync(settings.PATH).should.be.equal(false);\n  });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should NOT save values in the runtime",
            "suites": [
                "Settings",
                "when uncoupled"
            ],
            "updatePoint": {
                "line": 139,
                "column": 45
            },
            "line": 139,
            "code": "    it('should NOT save values in the runtime', () => {\n      settings.set('test_key', 'test_value');\n      expect(settings.get('test_key')).to.be.equal(null);\n    });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should NOT save a value to a file",
            "suites": [
                "Settings",
                "when uncoupled"
            ],
            "updatePoint": {
                "line": 143,
                "column": 41
            },
            "line": 143,
            "code": "    it('should NOT save a value to a file', done => {\n      settings.set('test_key', 'test_value');\n      setTimeout(() => {\n        settings = null;\n        settings = new Settings('test');\n        settings.uncouple();\n        expect(settings.get('test_key')).to.be.equal(null);\n        done();\n      }, 300);\n    });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should send the set event to the main process when setting a value",
            "suites": [
                "Settings",
                "when uncoupled"
            ],
            "updatePoint": {
                "line": 153,
                "column": 74
            },
            "line": 153,
            "code": "    it('should send the set event to the main process when setting a value', () => {\n      settings.set('foo', 'bar');\n      fired[0][0].should.be.equal('settings:set');\n      fired[0][1].should.be.deep.equal({\n        key: 'foo',\n        value: 'bar'\n      });\n    });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should load settings created from other processes each fetch",
            "suites": [
                "Settings",
                "when uncoupled"
            ],
            "updatePoint": {
                "line": 161,
                "column": 68
            },
            "line": 161,
            "code": "    it('should load settings created from other processes each fetch', done => {\n      const settings2 = new Settings('test');\n      settings2.set('test_key', 'test_value');\n      setTimeout(() => {\n        settings.get('test_key').should.be.equal('test_value');\n        done();\n      }, 300);\n    });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not delete the file when calling destroy",
            "suites": [
                "Settings",
                "when uncoupled"
            ],
            "updatePoint": {
                "line": 169,
                "column": 55
            },
            "line": 169,
            "code": "    it('should not delete the file when calling destroy', () => {\n      fs.existsSync(settings.PATH).should.be.equal(true);\n      settings.destroy();\n      fs.existsSync(settings.PATH).should.be.equal(true);\n    });",
            "file": "electron/Settings_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should resolve a translation key to a string",
            "suites": [
                "Translations"
            ],
            "updatePoint": {
                "line": 16,
                "column": 50
            },
            "line": 16,
            "code": "  it('should resolve a translation key to a string', () => {\n    provider.query('label-about').should.be.a('string');\n  });",
            "file": "electron/translations_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should resolve a valid translation key to a non-default string",
            "suites": [
                "Translations"
            ],
            "updatePoint": {
                "line": 19,
                "column": 68
            },
            "line": 19,
            "code": "  it('should resolve a valid translation key to a non-default string', () => {\n    provider.query('label-about').should.not.be.equal(TranslationProvider.UNKNOWN);\n  });",
            "file": "electron/translations_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should resolve a invalid translation key to the default string",
            "suites": [
                "Translations"
            ],
            "updatePoint": {
                "line": 22,
                "column": 68
            },
            "line": 22,
            "code": "  it('should resolve a invalid translation key to the default string', () => {\n    provider.query('label-magical-unicorn').should.be.equal(TranslationProvider.UNKNOWN);\n  });",
            "file": "electron/translations_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should default to en-US if the current locale does not exist",
            "suites": [
                "Translations"
            ],
            "updatePoint": {
                "line": 25,
                "column": 66
            },
            "line": 25,
            "code": "  it('should default to en-US if the current locale does not exist', () => {\n    const _getLocale = app.getLocale;\n\n    app.getLocale = () => 'zb-FQ';\n\n    provider = new TranslationProvider();\n    provider.t.should.be.deep.equal(provider._t);\n    app.getLocale = _getLocale;\n  });",
            "file": "electron/translations_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be valid JSON",
            "suites": [
                "Translations"
            ],
            "updatePoint": {
                "line": 40,
                "column": 32
            },
            "line": 40,
            "code": "        it('should be valid JSON', () => {\n          filePath.should.be.a.file().with.json; // eslint-disable-line\n        });",
            "file": "electron/translations_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have the same translation keys as en-US",
            "suites": [
                "Translations"
            ],
            "updatePoint": {
                "line": 43,
                "column": 58
            },
            "line": 43,
            "code": "        it('should have the same translation keys as en-US', () => {\n          const locale = JSON.parse(fs.readFileSync(filePath, 'utf8'));\n          baseKeys.forEach(key => {\n            locale.should.have.property(key);\n          });\n        });",
            "file": "electron/translations_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shouldn't have extra translation keys compared to en-US",
            "suites": [
                "Translations"
            ],
            "updatePoint": {
                "line": 49,
                "column": 68
            },
            "line": 49,
            "code": "        it('shouldn\\'t have extra translation keys compared to en-US', () => {\n          const locale = JSON.parse(fs.readFileSync(filePath, 'utf8'));\n          Object.keys(locale).forEach(key => {\n            baseKeys.should.contain(key);\n          });\n        });",
            "file": "electron/translations_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be online",
            "suites": [
                "Update Server"
            ],
            "updatePoint": {
                "line": 6,
                "column": 22
            },
            "line": 6,
            "code": "  it('should be online', done => {\n    https.get('https://update.gpmdp.xyz', () => done()).on('error', () => done(new Error('Update server was unreachable')));\n  });",
            "file": "electron/updateServer_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return JSON from the api URL",
            "suites": [
                "Update Server"
            ],
            "line": 9,
            "code": "  it.skip('should return JSON from the api URL', done => {",
            "file": "electron/updateServer_spec.js",
            "skipped": true,
            "dir": "test"
        },
        {
            "name": "should start a WebSocket server on port ",
            "suites": [
                "WebSocketAPI"
            ],
            "updatePoint": {
                "line": 49,
                "column": 64
            },
            "line": 49,
            "code": "  it(`should start a WebSocket server on port ${global.API_PORT}`, done => {\n    const ws = new WebSocket(`ws://localhost:${global.API_PORT}`);\n    ws.on('open', done);\n    ws.on('error', () => done(new Error('Failed to connect to the WebSocket')));\n  });",
            "file": "electron/webSocketAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should send the API version on connect",
            "suites": [
                "WebSocketAPI",
                "when connected"
            ],
            "updatePoint": {
                "line": 79,
                "column": 46
            },
            "line": 79,
            "code": "    it('should send the API version on connect', wait(done => {\n      spy.getCall(0).args[0].channel.should.be.equal('API_VERSION');\n      done();\n    }));",
            "file": "electron/webSocketAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should send the player control states on connect",
            "suites": [
                "WebSocketAPI",
                "when connected"
            ],
            "updatePoint": {
                "line": 83,
                "column": 56
            },
            "line": 83,
            "code": "    it('should send the player control states on connect', wait(done => {\n      spy.should.have.callCount(INITIAL_DATA_COUNT); // eslint-disable-line\n\n      spy.getCall(1).args[0].channel.should.be.equal('playState');\n      spy.getCall(2).args[0].channel.should.be.equal('shuffle');\n      spy.getCall(3).args[0].channel.should.be.equal('repeat');\n      spy.getCall(4).args[0].channel.should.be.equal('queue');\n      spy.getCall(5).args[0].channel.should.be.equal('search-results');\n      spy.getCall(6).args[0].channel.should.be.equal('volume');\n      spy.getCall(7).args[0].channel.should.be.equal('track');\n      spy.getCall(8).args[0].channel.should.be.equal('time');\n      spy.getCall(9).args[0].channel.should.be.equal('lyrics');\n      spy.getCall(10).args[0].channel.should.be.equal('rating');\n      spy.getCall(11).args[0].channel.should.be.equal('playlists');\n      spy.getCall(12).args[0].channel.should.be.equal('library');\n      done();\n    }));",
            "file": "electron/webSocketAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should send the correct initial player control values",
            "suites": [
                "WebSocketAPI",
                "when connected"
            ],
            "updatePoint": {
                "line": 100,
                "column": 61
            },
            "line": 100,
            "code": "    it('should send the correct initial player control values', wait(done => {\n      spy.should.have.callCount(INITIAL_DATA_COUNT); // eslint-disable-line\n      // playState\n\n      spy.getCall(1).args[0].payload.should.be.equal(false); // shuffle\n\n      spy.getCall(2).args[0].payload.should.be.equal('NO_SHUFFLE'); // repeat\n\n      spy.getCall(3).args[0].payload.should.be.equal('NO_REPEAT'); // queue\n\n      spy.getCall(4).args[0].payload.should.be.deep.equal([]); // search-results\n\n      spy.getCall(5).args[0].payload.should.be.deep.equal({\n        searchText: '',\n        albums: [],\n        artists: [],\n        tracks: []\n      }); // volume\n\n      spy.getCall(6).args[0].payload.should.be.equal(50); // track\n\n      spy.getCall(7).args[0].payload.should.have.property('title');\n      spy.getCall(7).args[0].payload.should.have.property('artist');\n      spy.getCall(7).args[0].payload.should.have.property('album');\n      expect(spy.getCall(7).args[0].payload.title).to.be.equal(null);\n      expect(spy.getCall(7).args[0].payload.artist).to.be.equal(null);\n      expect(spy.getCall(7).args[0].payload.album).to.be.equal(null); // time\n\n      spy.getCall(8).args[0].payload.should.have.property('current');\n      spy.getCall(8).args[0].payload.should.have.property('total');\n      spy.getCall(8).args[0].payload.current.should.be.equal(0);\n      spy.getCall(8).args[0].payload.total.should.be.equal(0); // lyrics\n\n      expect(spy.getCall(9).args[0].payload).to.be.equal(null); // rating\n\n      expect(spy.getCall(10).args[0].payload).to.be.deep.equal({\n        liked: false,\n        disliked: false\n      }); // playlists\n\n      spy.getCall(11).args[0].payload.should.be.deep.equal([]); // library\n\n      spy.getCall(12).args[0].payload.should.be.deep.equal({\n        albums: [],\n        artists: [],\n        tracks: []\n      });\n      done();\n    }));",
            "file": "electron/webSocketAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update the  value",
            "suites": [
                "WebSocketAPI",
                "when connected",
                "when PlaybackAPI values change"
            ],
            "updatePoint": {
                "line": 176,
                "column": 46
            },
            "line": 176,
            "code": "        it(`should update the ${channel} value`, done => {\n          if (Array.isArray(newValueArgs)) {\n            global.PlaybackAPI[updateMethodName](...newValueArgs);\n          } else {\n            global.PlaybackAPI[updateMethodName](newValueArgs);\n          }\n\n          waitForResponse(() => {\n            spy.getCall(0).args[0].channel.should.be.equal(channel);\n            spy.getCall(0).args[0].payload.should.be.deep.equal(expectedValue || newValueArgs);\n            done();\n          });\n        });",
            "file": "electron/webSocketAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should reject commands when not authoenticated",
            "suites": [
                "WebSocketAPI",
                "when connected",
                "when sending commands"
            ],
            "updatePoint": {
                "line": 269,
                "column": 56
            },
            "line": 269,
            "code": "      it('should reject commands when not authoenticated', done => {\n        ws.send(playPauseCMD);\n        ws.once('message', msg => {\n          const payload = JSON.parse(msg);\n          payload.channel.should.be.equal('connect');\n          payload.payload.should.be.equal('CODE_REQUIRED');\n          done();\n        });\n      });",
            "file": "electron/webSocketAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should ask for a code when connecting and not authoenticated",
            "suites": [
                "WebSocketAPI",
                "when connected",
                "when sending commands"
            ],
            "updatePoint": {
                "line": 278,
                "column": 70
            },
            "line": 278,
            "code": "      it('should ask for a code when connecting and not authoenticated', done => {\n        ws.send(connectCMD);\n        ws.once('message', msg => {\n          const payload = JSON.parse(msg);\n          payload.channel.should.be.equal('connect');\n          payload.payload.should.be.equal('CODE_REQUIRED');\n          done();\n        });\n      });",
            "file": "electron/webSocketAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should ask for a code when connecting and not authenticated when sending an incorrect code",
            "suites": [
                "WebSocketAPI",
                "when connected",
                "when sending commands"
            ],
            "updatePoint": {
                "line": 287,
                "column": 100
            },
            "line": 287,
            "code": "      it('should ask for a code when connecting and not authenticated when sending an incorrect code', done => {\n        ws.send(connectBadCMD);\n        ws.once('message', msg => {\n          const payload = JSON.parse(msg);\n          payload.channel.should.be.equal('connect');\n          payload.payload.should.be.equal('CODE_REQUIRED');\n          done();\n        });\n      });",
            "file": "electron/webSocketAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should respond with a permenant code when connecting and not authenticated when sending a correct code",
            "suites": [
                "WebSocketAPI",
                "when connected",
                "when sending commands"
            ],
            "updatePoint": {
                "line": 296,
                "column": 112
            },
            "line": 296,
            "code": "      it('should respond with a permenant code when connecting and not authenticated when sending a correct code', done => {\n        ws.send(connectGoodCMD);\n        ws.once('message', msg => {\n          const payload = JSON.parse(msg);\n          payload.channel.should.be.equal('connect');\n          payload.payload.should.not.be.equal('CODE_REQUIRED');\n          permCode = payload.payload;\n          done();\n        });\n      });",
            "file": "electron/webSocketAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not respond when connecting and not authenticated when sending a valid permenant code",
            "suites": [
                "WebSocketAPI",
                "when connected",
                "when sending commands"
            ],
            "updatePoint": {
                "line": 306,
                "column": 102
            },
            "line": 306,
            "code": "      it('should not respond when connecting and not authenticated when sending a valid permenant code', done => {\n        permCode.should.not.be.equal(false);\n        ws.send(JSON.stringify({\n          namespace: 'connect',\n          method: 'connect',\n          arguments: ['Test Device', permCode]\n        }));\n        let msgRec = false;\n        ws.once('message', () => {\n          msgRec = true;\n        });\n        setTimeout(() => {\n          msgRec.should.not.be.equal(true);\n          done();\n        }, 20);\n      });",
            "file": "electron/webSocketAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should accept commands once authenticated",
            "suites": [
                "WebSocketAPI",
                "when connected",
                "when sending commands"
            ],
            "updatePoint": {
                "line": 322,
                "column": 51
            },
            "line": 322,
            "code": "      it('should accept commands once authenticated', done => {\n        permCode.should.not.be.equal(false);\n        ws.send(JSON.stringify({\n          namespace: 'connect',\n          method: 'connect',\n          arguments: ['Test Device', permCode]\n        }));\n        ws.send(playPauseCMD);\n        let msgRec = false;\n        ws.once('message', () => {\n          msgRec = true;\n        });\n        setTimeout(() => {\n          msgRec.should.not.be.equal(true);\n          done();\n        }, 20);\n      });",
            "file": "electron/webSocketAPI_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add a window a return a Symbol",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 12,
                "column": 43
            },
            "line": 12,
            "code": "  it('should add a window a return a Symbol', () => {\n    const window = new MockWindow();\n    const result = WindowManager.add(window);\n    result.should.be.a('symbol');\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return a unique Symbol for each window",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 17,
                "column": 51
            },
            "line": 17,
            "code": "  it('should return a unique Symbol for each window', () => {\n    const window = new MockWindow();\n    const result = WindowManager.add(window);\n    result.should.be.a('symbol');\n    const window2 = new MockWindow();\n    const result2 = WindowManager.add(window2);\n    result2.should.be.a('symbol');\n    result.should.not.be.equal(result2);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fetch a window from its symbol",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 26,
                "column": 43
            },
            "line": 26,
            "code": "  it('should fetch a window from its symbol', () => {\n    const window = new MockWindow();\n    const result = WindowManager.add(window);\n    WindowManager.get(result).should.be.equal(window);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return null when fetching with an unknown ID",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 31,
                "column": 57
            },
            "line": 31,
            "code": "  it('should return null when fetching with an unknown ID', () => {\n    expect(WindowManager.get(Symbol())).to.be.equal(null);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fetch a window from its internal id",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 34,
                "column": 48
            },
            "line": 34,
            "code": "  it('should fetch a window from its internal id', () => {\n    const window = new MockWindow();\n    WindowManager.add(window);\n    WindowManager.getByInternalID(window.id).should.be.equal(window);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fetch a windows from its assigned name",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 39,
                "column": 51
            },
            "line": 39,
            "code": "  it('should fetch a windows from its assigned name', () => {\n    const window = new MockWindow();\n    WindowManager.add(window, 'MyWindowName');\n    WindowManager.getAll('MyWindowName').length.should.be.equal(1);\n    WindowManager.getAll('MyWindowName')[0].should.be.equal(window);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should fetch all windows from their assigned names",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 45,
                "column": 56
            },
            "line": 45,
            "code": "  it('should fetch all windows from their assigned names', () => {\n    const window = new MockWindow();\n    WindowManager.add(window, 'MyWindowName');\n    const window2 = new MockWindow();\n    WindowManager.add(window2, 'MyWindowName');\n    WindowManager.getAll('MyWindowName').length.should.be.equal(2);\n    WindowManager.getAll('MyWindowName')[0].should.be.equal(window);\n    WindowManager.getAll('MyWindowName')[1].should.be.equal(window2);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should attempt to close a window by its symbol",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 54,
                "column": 52
            },
            "line": 54,
            "code": "  it('should attempt to close a window by its symbol', () => {\n    const window = new MockWindow();\n    const result = WindowManager.add(window);\n    window.open.should.be.equal(true);\n    WindowManager.close(result);\n    window.open.should.be.equal(false);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should remove reference to the window when it is closed",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 61,
                "column": 61
            },
            "line": 61,
            "code": "  it('should remove reference to the window when it is closed', () => {\n    const window = new MockWindow();\n    const result = WindowManager.add(window);\n    expect(WindowManager.get(result)).to.be.equal(window);\n    window.emit('closed');\n    expect(WindowManager.get(result)).to.be.equal(null);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not throw errors when closing a non existent window",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 68,
                "column": 64
            },
            "line": 68,
            "code": "  it('should not throw errors when closing a non existent window', () => {\n    WindowManager.close(-1);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return null when fetching non existent windows through any method",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 71,
                "column": 78
            },
            "line": 71,
            "code": "  it('should return null when fetching non existent windows through any method', () => {\n    expect(WindowManager.get(-1)).to.be.equal(null);\n    expect(WindowManager.getByInternalID(-1)).to.be.equal(null);\n    expect(WindowManager.getAll(-1)).to.be.deep.equal([]);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return an empty array if it can't convert a name to a valid window",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 76,
                "column": 80
            },
            "line": 76,
            "code": "  it('should return an empty array if it can\\'t convert a name to a valid window', () => {\n    WindowManager.nameReferences['test.name'] = [-1, -2, -3];\n    WindowManager.getAll('test.name').should.be.deep.equal([]);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return the current WM name when requested",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 80,
                "column": 54
            },
            "line": 80,
            "code": "  it('should return the current WM name when requested', () => {\n    if (process.platform === 'linux') return;\n    expect(WindowManager.getWindowManagerName()).to.equal(undefined);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return the current WM GD name when requested",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 84,
                "column": 57
            },
            "line": 84,
            "code": "  it('should return the current WM GD name when requested', () => {\n    if (process.platform === 'linux') return;\n    expect(WindowManager.getWindowManagerGDMName()).to.equal(undefined);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should correctly force chain of focus",
            "suites": [
                "WindowManager"
            ],
            "updatePoint": {
                "line": 88,
                "column": 43
            },
            "line": 88,
            "code": "  it('should correctly force chain of focus', () => {\n    const window = new MockWindow();\n    const window2 = new MockWindow();\n    const window3 = new MockWindow();\n    WindowManager.add(window);\n    WindowManager.add(window2);\n    WindowManager.add(window3);\n    WindowManager.forceFocus(window);\n    window.focused.should.be.equal(false);\n    window2.emit('focus');\n    window.focused.should.be.equal(true);\n    window.focused = false;\n    window.emit('close');\n    window3.emit('focus');\n    window.focused.should.be.equal(false);\n  });",
            "file": "electron/WindowManager_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should display the welcome modal",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 38
            },
            "line": 3,
            "code": "  it('should display the welcome modal', () => app.client.waitUntilWindowLoaded().windowByIndex(0).waitForVisible('body > div > div > div > div > div > div:last-child > button').should.eventually.be.ok);",
            "file": "spectron/firstLoad_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should load an initial window",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 35
            },
            "line": 3,
            "code": "  it('should load an initial window', () => app.client.waitUntilWindowLoaded());",
            "file": "spectron/init_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should hide the loader eventually",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 39
            },
            "line": 4,
            "code": "  it('should hide the loader eventually', () => app.client.waitUntilWindowLoaded().windowByIndex(0).waitForExist('body').should.eventually.be.true.waitUntil(() => app.client.getAttribute('body', 'loading').then(loading => loading !== 'loading')).should.eventually.be.true);",
            "file": "spectron/init_spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show the intial window eventually",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 46
            },
            "line": 5,
            "code": "  it('should show the intial window eventually', () => app.client.waitUntilWindowLoaded().windowByIndex(0).browserWindow.isMinimized().should.eventually.be.false.browserWindow.isDevToolsOpened().should.eventually.be.false.browserWindow.isVisible().should.eventually.be.true.browserWindow.getBounds().should.eventually.have.property('width').and.be.above(0).browserWindow.getBounds().should.eventually.have.property('height').and.be.above(0));",
            "file": "spectron/init_spec.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "MarshallOfSound__Google-Play-Music-Desktop-Player-UNOFFICIAL-.svg"
}