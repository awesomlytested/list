{"repo":"expo/create-react-native-app","url":"https://github.com/expo/create-react-native-app","branch":"main","configs":[{"package":"create-react-native-app","lang":"js","dir":"__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"prevents overwriting directories with projects","suites":[],"updatePoint":{"line":47,"column":50,"index":1357},"line":47,"code":"it('prevents overwriting directories with projects', async () => {\n  const projectName = 'cannot-overwrite-files';\n  const projectRoot = getRoot(projectName);\n  // Create the project root aot\n  await fs.mkdirp(projectRoot);\n  // Create a fake package.json -- this is a terminal file that cannot be overwritten.\n  fs.writeFileSync(path.join(projectRoot, 'package.json'), '{ \"version\": \"1.0.0\" }');\n  expect.assertions(1);\n  try {\n    await executeDefaultAsync(projectName);\n  } catch (e) {\n    expect(e.stdout).toMatch(/has files that might be overwritten/);\n  }\n});","file":"index-test.js","skipped":false,"dir":"__tests__"},{"name":"creates a full bare project by default","suites":[],"updatePoint":{"line":61,"column":42,"index":1915},"line":61,"code":"it('creates a full bare project by default', async () => {\n  const projectName = 'defaults-to-bare';\n  await executeDefaultAsync(projectName, '--install');\n  expect(fileExists(projectName, 'package.json')).toBeTruthy();\n  expect(fileExists(projectName, 'App.js')).toBeTruthy();\n  expect(fileExists(projectName, '.gitignore')).toBeTruthy();\n  expect(fileExists(projectName, 'node_modules')).toBeTruthy();\n  expect(fileExists(projectName, 'ios/')).toBeTruthy();\n  expect(fileExists(projectName, 'android/')).toBeTruthy();\n  expect(fileExists(projectName, 'app.json')).toBeTruthy();\n  if (process.platform === 'darwin') {\n    expect(fileExists(projectName, 'ios/Pods/')).toBeTruthy();\n  }\n  // Ensure the app.json is written properly\n  const appJsonPath = path.join(projectRoot, projectName, 'app.json');\n  const appJson = JSON.parse(await fs.readFile(appJsonPath, 'utf8'));\n  expect(appJson.name).toBe(projectName);\n  expect(appJson.expo.name).toBe(projectName);\n  expect(appJson.expo.slug).toBe(projectName);\n});","file":"index-test.js","skipped":false,"dir":"__tests__"},{"name":"creates a default project in the current directory","suites":["yes"],"updatePoint":{"line":82,"column":56,"index":2965},"line":82,"code":"  it('creates a default project in the current directory', async () => {\n    const projectName = 'yes-default-directory';\n    const projectRoot = getRoot(projectName);\n    // Create the project root aot\n    await fs.mkdirp(projectRoot);\n    const results = await execa('node', [cli, '--yes', '--no-install'], {\n      cwd: projectRoot\n    });\n    expect(results.exitCode).toBe(0);\n    expect(fileExists(projectName, 'package.json')).toBeTruthy();\n    expect(fileExists(projectName, 'App.js')).toBeTruthy();\n    expect(fileExists(projectName, '.gitignore')).toBeTruthy();\n    expect(fileExists(projectName, 'node_modules')).not.toBeTruthy();\n  });","file":"index-test.js","skipped":false,"dir":"__tests__"},{"name":"creates a default project in a new directory","suites":["yes"],"updatePoint":{"line":96,"column":50,"index":3605},"line":96,"code":"  it('creates a default project in a new directory', async () => {\n    const projectName = 'yes-new-directory';\n    const results = await execa('node', [cli, projectName, '-y', '--no-install'], {\n      cwd: projectRoot\n    });\n    expect(results.exitCode).toBe(0);\n    expect(fileExists(projectName, 'package.json')).toBeTruthy();\n    expect(fileExists(projectName, 'App.js')).toBeTruthy();\n    expect(fileExists(projectName, '.gitignore')).toBeTruthy();\n    expect(fileExists(projectName, 'node_modules')).not.toBeTruthy();\n  });","file":"index-test.js","skipped":false,"dir":"__tests__"},{"name":"creates a default project in a new directory with a custom template","suites":["yes"],"updatePoint":{"line":107,"column":73,"index":4159},"line":107,"code":"  it('creates a default project in a new directory with a custom template', async () => {\n    const projectName = 'yes-custom-template';\n    const results = await execa('node', [cli, projectName, '--yes', '--template', 'blank', '--no-install'], {\n      cwd: projectRoot\n    });\n    expect(results.exitCode).toBe(0);\n    expect(fileExists(projectName, 'package.json')).toBeTruthy();\n    expect(fileExists(projectName, 'App.js')).toBeTruthy();\n    expect(fileExists(projectName, '.gitignore')).toBeTruthy();\n    expect(fileExists(projectName, 'node_modules')).not.toBeTruthy();\n  });","file":"index-test.js","skipped":false,"dir":"__tests__"},{"name":"allows overwriting directories with tolerable files","suites":["templates"],"updatePoint":{"line":120,"column":57,"index":4759},"line":120,"code":"  it('allows overwriting directories with tolerable files', async () => {\n    const projectName = 'can-overwrite';\n    const projectRoot = getRoot(projectName);\n    // Create the project root aot\n    await fs.mkdirp(projectRoot);\n    // Create a fake package.json -- this is a terminal file that cannot be overwritten.\n    fs.writeFileSync(path.join(projectRoot, 'LICENSE'), 'hello world');\n    await executePassingAsync(projectName, '--template', 'https://github.com/expo/examples/tree/master/blank', '--no-install');\n    expect(fileExists(projectName, 'package.json')).toBeTruthy();\n    expect(fileExists(projectName, 'App.js')).toBeTruthy();\n    expect(fileExists(projectName, '.gitignore')).toBeTruthy();\n    expect(fileExists(projectName, 'node_modules')).not.toBeTruthy();\n  });","file":"index-test.js","skipped":false,"dir":"__tests__"},{"name":"throws when an invalid template is used","suites":["templates"],"updatePoint":{"line":133,"column":45,"index":5532},"line":133,"code":"  it('throws when an invalid template is used', async () => {\n    const projectName = 'invalid-template-name';\n    expect.assertions(2);\n    try {\n      await execute(projectName, '--template', 'fake template path that is too obviously long to be real');\n    } catch (e) {\n      expect(e.stderr).toMatch(/Could not locate the template/i);\n    }\n    expect(fs.existsSync(getRoot(projectName, 'package.json'))).toBeFalsy();\n  });","file":"index-test.js","skipped":false,"dir":"__tests__"},{"name":"downloads a valid template","suites":["templates"],"updatePoint":{"line":143,"column":32,"index":5947},"line":143,"code":"  it('downloads a valid template', async () => {\n    const projectName = 'valid-template-name';\n    await executePassingAsync(projectName, '--template', 'blank');\n    expect(fileExists(projectName, 'package.json')).toBeTruthy();\n    expect(fileExists(projectName, 'App.js')).toBeTruthy();\n    expect(fileExists(projectName, 'README.md')).toBeTruthy();\n    expect(fileExists(projectName, '.gitignore')).toBeTruthy();\n    // Check if it skipped install\n    expect(fileExists(projectName, 'node_modules')).toBeTruthy();\n  });","file":"index-test.js","skipped":false,"dir":"__tests__"},{"name":"doesn't prompt to install cocoapods in a project without an ios folder","suites":["templates"],"updatePoint":{"line":153,"column":76,"index":6514},"line":153,"code":"  it(`doesn't prompt to install cocoapods in a project without an ios folder`, async () => {\n    const projectName = 'no-install-no-pods-no-prompt';\n    const results = await executePassingAsync(projectName, '--template', 'blank', '--no-install');\n\n    // Ensure it doesn't warn to install pods since blank doesn't have an ios folder.\n    expect(results.stdout).not.toMatch(/make sure you have CocoaPods installed/);\n    expect(results.stdout).not.toMatch(/npx pod-install/);\n    expect(fileExists(projectName, 'package.json')).toBeTruthy();\n    expect(fileExists(projectName, 'App.js')).toBeTruthy();\n    expect(fileExists(projectName, '.gitignore')).toBeTruthy();\n    // Ensure it skipped install\n    expect(fileExists(projectName, 'node_modules')).not.toBeTruthy();\n  });","file":"index-test.js","skipped":false,"dir":"__tests__"},{"name":"uses npm","suites":["templates"],"updatePoint":{"line":166,"column":14,"index":7227},"line":166,"code":"  it('uses npm', async () => {\n    const projectName = 'uses-npm';\n    const results = await executeDefaultAsync(projectName, '--use-npm', '--no-install');\n\n    // Test that the user was warned about deps\n    expect(results.stdout).toMatch(/make sure you have node modules installed/);\n    expect(results.stdout).toMatch(/npm install/);\n    if (process.platform === 'darwin') {\n      expect(results.stdout).toMatch(/make sure you have CocoaPods installed/);\n      expect(results.stdout).toMatch(/npx pod-install/);\n    }\n    expect(fileExists(projectName, 'package.json')).toBeTruthy();\n    expect(fileExists(projectName, 'App.js')).toBeTruthy();\n    expect(fileExists(projectName, '.gitignore')).toBeTruthy();\n    // Check if it skipped install\n    expect(fileExists(projectName, 'node_modules')).not.toBeTruthy();\n  });","file":"index-test.js","skipped":false,"dir":"__tests__"},{"name":"downloads a github repo with sub-project","suites":["templates"],"updatePoint":{"line":183,"column":46,"index":8081},"line":183,"code":"  it('downloads a github repo with sub-project', async () => {\n    const projectName = 'full-url';\n    const results = await executePassingAsync(projectName, '--template', 'https://github.com/expo/examples/tree/master/blank', '--no-install');\n\n    // Test that the user was warned about deps\n    expect(results.stdout).toMatch(/make sure you have node modules installed/);\n    expect(results.stdout).toMatch(/yarn/);\n    expect(fileExists(projectName, 'package.json')).toBeTruthy();\n    expect(fileExists(projectName, 'App.js')).toBeTruthy();\n    expect(fileExists(projectName, 'README.md')).toBeTruthy();\n    expect(fileExists(projectName, '.gitignore')).toBeTruthy();\n    // Check if it skipped install\n    expect(fileExists(projectName, 'node_modules')).not.toBeTruthy();\n  });","file":"index-test.js","skipped":false,"dir":"__tests__"},{"name":"downloads a github repo with the template path option","suites":["templates"],"updatePoint":{"line":197,"column":59,"index":8875},"line":197,"code":"  it('downloads a github repo with the template path option', async () => {\n    const projectName = 'partial-url-and-path';\n    await executePassingAsync(projectName, '--template', 'https://github.com/expo/examples/tree/master', '--template-path', 'blank', '--no-install');\n    expect(fileExists(projectName, 'package.json')).toBeTruthy();\n    expect(fileExists(projectName, 'App.js')).toBeTruthy();\n    expect(fileExists(projectName, 'README.md')).toBeTruthy();\n    expect(fileExists(projectName, '.gitignore')).toBeTruthy();\n    // Check if it skipped install\n    expect(fileExists(projectName, 'node_modules')).not.toBeTruthy();\n  });","file":"index-test.js","skipped":false,"dir":"__tests__"}]}