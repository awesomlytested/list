{"repo":"nuxt/nuxt.js","url":"https://github.com/nuxt/nuxt.js","branch":"dev","configs":[{"package":"example-jest-puppeteer","lang":"js","dir":"examples/jest-puppeteer/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"example-with-ava","lang":"js","dir":"examples/with-ava/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"example-with-feathers","lang":"js","dir":"examples/with-feathers/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"example-with-tape","lang":"js","dir":"examples/with-tape/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"nuxt","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/builder","lang":"js","dir":"packages/builder/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/cli","lang":"js","dir":"packages/cli/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/config","lang":"js","dir":"packages/config/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/core","lang":"js","dir":"packages/core/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/generator","lang":"js","dir":"packages/generator/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/server","lang":"js","dir":"packages/server/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/types","lang":"ts","dir":"packages/types/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@nuxt/utils","lang":"js","dir":"packages/utils/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/vue-app","lang":"js","dir":"packages/vue-app/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/webpack","lang":"js","dir":"packages/webpack/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"default client bundle size","suites":[],"updatePoint":{"line":23,"column":34,"index":915},"line":23,"code":"    it('default client bundle size', async () => {\n      const clientStats = await analyzeSizes('**/*.js', join(rootDir, outputDir, 'public'));\n      expect.soft(roundToKilobytes(clientStats.totalBytes)).toMatchInlineSnapshot('\"97.4k\"');\n      expect(clientStats.files.map(f => f.replace(/\\..*\\.js/, '.js'))).toMatchInlineSnapshot(`\n        [\n          \"_nuxt/entry.js\",\n        ]\n      `);\n    });","file":"bundle.test.ts","skipped":false,"dir":"test"},{"name":"default server bundle size","suites":[],"updatePoint":{"line":33,"column":32,"index":1316},"line":33,"code":"  it('default server bundle size', async () => {\n    const serverDir = join(rootDir, '.output/server');\n    const serverStats = await analyzeSizes(['**/*.mjs', '!node_modules'], serverDir);\n    expect.soft(roundToKilobytes(serverStats.totalBytes)).toMatchInlineSnapshot('\"64.5k\"');\n    const modules = await analyzeSizes('node_modules/**/*', serverDir);\n    expect.soft(roundToKilobytes(modules.totalBytes)).toMatchInlineSnapshot('\"2342k\"');\n    const packages = modules.files.filter(m => m.endsWith('package.json')).map(m => m.replace('/package.json', '').replace('node_modules/', '')).sort();\n    expect(packages).toMatchInlineSnapshot(`\n      [\n        \"@babel/parser\",\n        \"@unhead/dom\",\n        \"@unhead/shared\",\n        \"@unhead/ssr\",\n        \"@vue/compiler-core\",\n        \"@vue/compiler-dom\",\n        \"@vue/compiler-ssr\",\n        \"@vue/reactivity\",\n        \"@vue/runtime-core\",\n        \"@vue/runtime-dom\",\n        \"@vue/server-renderer\",\n        \"@vue/shared\",\n        \"cookie-es\",\n        \"debug\",\n        \"defu\",\n        \"destr\",\n        \"devalue\",\n        \"estree-walker\",\n        \"h3\",\n        \"has-flag\",\n        \"hookable\",\n        \"http-graceful-shutdown\",\n        \"iron-webcrypto\",\n        \"klona\",\n        \"ms\",\n        \"node-fetch-native\",\n        \"ofetch\",\n        \"ohash\",\n        \"pathe\",\n        \"radix3\",\n        \"scule\",\n        \"source-map-js\",\n        \"supports-color\",\n        \"ufo\",\n        \"uncrypto\",\n        \"unctx\",\n        \"unenv\",\n        \"unhead\",\n        \"unstorage\",\n        \"vue\",\n        \"vue-bundle-renderer\",\n      ]\n    `);\n  });","file":"bundle.test.ts","skipped":false,"dir":"test"},{"name":"default server bundle size (inlined vue modules)","suites":[],"updatePoint":{"line":86,"column":54,"index":2913},"line":86,"code":"  it('default server bundle size (inlined vue modules)', async () => {\n    const serverDir = join(rootDir, '.output-inline/server');\n    const serverStats = await analyzeSizes(['**/*.mjs', '!node_modules'], serverDir);\n    expect.soft(roundToKilobytes(serverStats.totalBytes)).toMatchInlineSnapshot('\"370k\"');\n    const modules = await analyzeSizes('node_modules/**/*', serverDir);\n    expect.soft(roundToKilobytes(modules.totalBytes)).toMatchInlineSnapshot('\"603k\"');\n    const packages = modules.files.filter(m => m.endsWith('package.json')).map(m => m.replace('/package.json', '').replace('node_modules/', '')).sort();\n    expect(packages).toMatchInlineSnapshot(`\n      [\n        \"@unhead/dom\",\n        \"@unhead/shared\",\n        \"@unhead/ssr\",\n        \"cookie-es\",\n        \"debug\",\n        \"defu\",\n        \"destr\",\n        \"devalue\",\n        \"h3\",\n        \"has-flag\",\n        \"hookable\",\n        \"http-graceful-shutdown\",\n        \"iron-webcrypto\",\n        \"klona\",\n        \"ms\",\n        \"node-fetch-native\",\n        \"ofetch\",\n        \"ohash\",\n        \"pathe\",\n        \"radix3\",\n        \"scule\",\n        \"supports-color\",\n        \"ufo\",\n        \"uncrypto\",\n        \"unctx\",\n        \"unenv\",\n        \"unhead\",\n        \"unstorage\",\n      ]\n    `);\n  });","file":"bundle.test.ts","skipped":false,"dir":"test"},{"name":"are all tested","suites":["composables"],"updatePoint":{"line":15,"column":20,"index":788},"line":15,"code":"  it('are all tested', () => {\n    const testedComposables = ['clearNuxtData', 'refreshNuxtData', 'useAsyncData', 'useNuxtData', 'createError', 'isNuxtError', 'clearError', 'showError', 'useError', 'onNuxtReady', 'setResponseStatus', 'useRequestEvent', 'useRequestFetch', 'useRequestHeaders', 'clearNuxtState', 'useState', 'useRequestURL'];\n    const skippedComposables = ['abortNavigation', 'addRouteMiddleware', 'defineNuxtComponent', 'defineNuxtRouteMiddleware', 'definePayloadReducer', 'definePayloadReviver', 'isPrerendered', 'loadPayload', 'navigateTo', 'onBeforeRouteLeave', 'onBeforeRouteUpdate', 'prefetchComponents', 'preloadComponents', 'preloadPayload', 'preloadRouteComponents', 'reloadNuxtApp', 'setPageLayout', 'useCookie', 'useFetch', 'useHead', 'useHydration', 'useLazyFetch', 'useLazyAsyncData', 'useRoute', 'useRouter', 'useSeoMeta', 'useServerSeoMeta'];\n    expect(Object.keys(composables).sort()).toEqual([...new Set([...testedComposables, ...skippedComposables])].sort());\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"should work at basic level","suites":["useAsyncData"],"updatePoint":{"line":22,"column":32,"index":1838},"line":22,"code":"  it('should work at basic level', async () => {\n    const res = useAsyncData(() => Promise.resolve('test'));\n    expect(Object.keys(res)).toMatchInlineSnapshot(`\n      [\n        \"data\",\n        \"pending\",\n        \"error\",\n        \"status\",\n        \"execute\",\n        \"refresh\",\n      ]\n    `);\n    expect(res instanceof Promise).toBeTruthy();\n    expect(res.data.value).toBe(null);\n    await res;\n    expect(res.data.value).toBe('test');\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"should not execute with immediate: false","suites":["useAsyncData"],"updatePoint":{"line":39,"column":46,"index":2297},"line":39,"code":"  it('should not execute with immediate: false', async () => {\n    const immediate = await useAsyncData(() => Promise.resolve('test'));\n    expect(immediate.data.value).toBe('test');\n    expect(immediate.status.value).toBe('success');\n    expect(immediate.pending.value).toBe(false);\n    const nonimmediate = await useAsyncData(() => Promise.resolve('test'), {\n      immediate: false\n    });\n    expect(nonimmediate.data.value).toBe(null);\n    expect(nonimmediate.status.value).toBe('idle');\n    expect(nonimmediate.pending.value).toBe(true);\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"should capture errors","suites":["useAsyncData"],"updatePoint":{"line":51,"column":27,"index":2827},"line":51,"code":"  it('should capture errors', async () => {\n    const {\n      error,\n      status,\n      pending\n    } = await useAsyncData(() => Promise.reject(new Error('test')));\n    expect(error.value).toMatchInlineSnapshot('[Error: test]');\n    expect(status.value).toBe('error');\n    expect(pending.value).toBe(false);\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"should be accessible with useNuxtData","suites":["useAsyncData"],"updatePoint":{"line":61,"column":43,"index":3158},"line":61,"code":"  it('should be accessible with useNuxtData', async () => {\n    await useAsyncData('key', () => Promise.resolve('test'));\n    const data = useNuxtData('key');\n    expect(data.data.value).toMatchInlineSnapshot('\"test\"');\n    clearNuxtData('key');\n    expect(data.data.value).toBeUndefined();\n    expect(useNuxtData('key').data.value).toBeUndefined();\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"should be refreshable","suites":["useAsyncData"],"updatePoint":{"line":69,"column":27,"index":3498},"line":69,"code":"  it('should be refreshable', async () => {\n    await useAsyncData('key', () => Promise.resolve('test'));\n    clearNuxtData('key');\n    const data = useNuxtData('key');\n    expect(data.data.value).toBeUndefined();\n    await refreshNuxtData('key');\n    expect(data.data.value).toMatchInlineSnapshot('\"test\"');\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"createError","suites":["errors"],"updatePoint":{"line":79,"column":17,"index":3834},"line":79,"code":"  it('createError', () => {\n    expect(createError({\n      statusCode: 404\n    }).toJSON()).toMatchInlineSnapshot(`\n      {\n        \"message\": \"\",\n        \"statusCode\": 404,\n      }\n    `);\n    expect(createError('Message').toJSON()).toMatchInlineSnapshot(`\n      {\n        \"message\": \"Message\",\n        \"statusCode\": 500,\n      }\n    `);\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"isNuxtError","suites":["errors"],"updatePoint":{"line":95,"column":17,"index":4179},"line":95,"code":"  it('isNuxtError', () => {\n    const error = createError({\n      statusCode: 404\n    });\n    expect(isNuxtError(error)).toBe(true);\n    expect(isNuxtError(new Error('test'))).toBe(false);\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"global nuxt errors","suites":["errors"],"updatePoint":{"line":102,"column":24,"index":4381},"line":102,"code":"  it('global nuxt errors', () => {\n    const err = useError();\n    expect(err.value).toBeUndefined();\n    showError('new error');\n    expect(err.value).toMatchInlineSnapshot('[Error: new error]');\n    clearError();\n    // TODO: should this return to being undefined?\n    expect(err.value).toBeNull();\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"should call callback immediately once nuxt is hydrated","suites":["onNuxtReady"],"updatePoint":{"line":113,"column":60,"index":4760},"line":113,"code":"  it('should call callback immediately once nuxt is hydrated', () => {\n    const fn = vi.fn();\n    onNuxtReady(fn);\n    expect(fn).toHaveBeenCalled();\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"work on client","suites":["ssr composables"],"updatePoint":{"line":120,"column":20,"index":4917},"line":120,"code":"  it('work on client', () => {\n    // @ts-expect-error This should work for backward compatibility\n    expect(setResponseStatus()).toBeUndefined();\n    expect(useRequestEvent()).toBeUndefined();\n    expect(useRequestFetch()).toEqual($fetch);\n    expect(useRequestHeaders()).toEqual({});\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"default","suites":["useState"],"updatePoint":{"line":129,"column":13,"index":5236},"line":129,"code":"  it('default', () => {\n    expect(useState(() => 'default').value).toBe('default');\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"registers state in payload","suites":["useState"],"updatePoint":{"line":132,"column":32,"index":5346},"line":132,"code":"  it('registers state in payload', () => {\n    useState('key', () => 'value');\n    expect(Object.entries(useNuxtApp().payload.state)).toContainEqual(['$skey', 'value']);\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"useRequestURL","suites":["url"],"updatePoint":{"line":144,"column":19,"index":5727},"line":144,"code":"  it('useRequestURL', () => {\n    const url = useRequestURL();\n    expect(url).toMatchInlineSnapshot('\"http://localhost:3000/\"');\n    expect(url.hostname).toMatchInlineSnapshot('\"localhost\"');\n    expect(url.port).toMatchInlineSnapshot('\"3000\"');\n    expect(url.protocol).toMatchInlineSnapshot('\"http:\"');\n  });","file":"nuxt/composables.test.ts","skipped":false,"dir":"test"},{"name":"expect render page without any error or logs","suites":["test basic config"],"updatePoint":{"line":18,"column":50,"index":668},"line":18,"code":"  it('expect render page without any error or logs', async () => {\n    await expectNoClientErrors('/');\n  });","file":"runtime-compiler.test.ts","skipped":false,"dir":"test"},{"name":"test HelloWorld.vue","suites":["test basic config"],"updatePoint":{"line":21,"column":25,"index":753},"line":21,"code":"  it('test HelloWorld.vue', async () => {\n    const html = await $fetch('/');\n    const {\n      page\n    } = await renderPage('/');\n    expect(html).toContain('<div id=\"hello-world\">hello, Helloworld.vue here ! </div>');\n    expect(await page.locator('body').innerHTML()).toContain('<div id=\"hello-world\">hello, Helloworld.vue here ! </div>');\n  });","file":"runtime-compiler.test.ts","skipped":false,"dir":"test"},{"name":"test Name.ts","suites":["test basic config"],"updatePoint":{"line":29,"column":18,"index":1096},"line":29,"code":"  it('test Name.ts', async () => {\n    const html = await $fetch('/');\n    const {\n      page\n    } = await renderPage('/');\n    expect(html).toContain('<div id=\"name\">I am the Name.ts component</div>');\n    expect(await page.locator('body').innerHTML()).toContain('<div id=\"name\">I am the Name.ts component</div>');\n  });","file":"runtime-compiler.test.ts","skipped":false,"dir":"test"},{"name":"test ShowTemplate.ts","suites":["test basic config"],"updatePoint":{"line":37,"column":26,"index":1427},"line":37,"code":"  it('test ShowTemplate.ts', async () => {\n    const html = await $fetch('/');\n    const {\n      page\n    } = await renderPage('/');\n    expect(html).toContain('<div id=\"show-template\">Hello my name is : John, i am defined by ShowTemplate.vue and my template is retrieved from the API</div>');\n    expect(await page.locator('body').innerHTML()).toContain('<div id=\"show-template\">Hello my name is : John, i am defined by ShowTemplate.vue and my template is retrieved from the API</div>');\n  });","file":"runtime-compiler.test.ts","skipped":false,"dir":"test"},{"name":"test Interactive component.ts","suites":["test basic config"],"updatePoint":{"line":45,"column":35,"index":1931},"line":45,"code":"  it('test Interactive component.ts', async () => {\n    const html = await $fetch('/');\n    const {\n      page\n    } = await renderPage('/');\n    expect(html).toContain('I am defined by Interactive in the setup of App.vue. My full component definition is retrieved from the api');\n    expect(await page.locator('#interactive').innerHTML()).toContain('I am defined by Interactive in the setup of App.vue. My full component definition is retrieved from the api');\n    const button = page.locator('#inc-interactive-count');\n    await button.click();\n    const count = page.locator('#interactive-count');\n    expect(await count.innerHTML()).toBe('1');\n  });","file":"runtime-compiler.test.ts","skipped":false,"dir":"test"}]}