{"repo":"recharts/recharts","url":"https://github.com/recharts/recharts","branch":"master","configs":[{"package":"recharts","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"Render 1 x-CartesianAxis and 1 y-CartesianAxis ticks in ScatterChart","suites":["<XAxis />"],"updatePoint":{"line":63,"column":74,"index":1052},"line":63,"code":"  it('Render 1 x-CartesianAxis and 1 y-CartesianAxis ticks in ScatterChart', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ScatterChart, {\n      width: 400,\n      height: 400,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\",\n      name: \"weight\",\n      unit: \"kg\"\n    }), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"A school\",\n      data: data,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find(CartesianAxis).length).to.equal(2);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't render anything","suites":["<XAxis />"],"updatePoint":{"line":88,"column":27,"index":1710},"line":88,"code":"  it(\"Don't render anything\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    })));\n    expect(wrapper.find('svg').children.length).to.equal(1);\n    expect(wrapper.find('svg noscript').children.length).to.equal(1);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't render x-axis when hide is setted to be true","suites":["<XAxis />"],"updatePoint":{"line":100,"column":56,"index":2141},"line":100,"code":"  it(\"Don't render x-axis when hide is setted to be true\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: lineData,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      hide: true\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-x-axis').length).to.equal(0);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render ticks of XAxis when specify ticks","suites":["<XAxis />"],"updatePoint":{"line":120,"column":46,"index":2693},"line":120,"code":"  it('Render ticks of XAxis when specify ticks', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: lineData,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      ticks: [0, 4]\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.xAxis .recharts-cartesian-axis-tick').length).to.equal(2);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render ticks with tickFormatter","suites":["<XAxis />"],"updatePoint":{"line":140,"column":37,"index":3259},"line":140,"code":"  it('Render ticks with tickFormatter', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: lineData,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      tickFormatter: (value, i) => `${i}`\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.xAxis .recharts-cartesian-axis-tick').first()).text().to.equal('0');\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render duplicated ticks of XAxis","suites":["<XAxis />"],"updatePoint":{"line":161,"column":38,"index":3881},"line":161,"code":"  it('Render duplicated ticks of XAxis', () => {\n    const lineData = [{\n      name: '03/07/2017',\n      balance: 23126.11\n    }, {\n      name: '03/02/2017',\n      balance: 23137.39\n    }, {\n      name: '03/01/2017',\n      balance: 24609.55\n    }, {\n      name: '03/01/2017',\n      balance: 26827.66\n    }, {\n      name: '02/24/2017',\n      balance: 26807.66\n    }, {\n      name: '02/21/2017',\n      balance: 23835.62\n    }, {\n      name: '02/16/2017',\n      balance: 23829.62\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: lineData,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      interval: 0\n    }), /*#__PURE__*/React.createElement(YAxis, null), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"balance\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      }\n    })));\n    expect(wrapper.find('.recharts-xAxis .recharts-cartesian-axis-tick').length).to.equal(lineData.length);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render ticks of when the scale of XAxis is time","suites":["<XAxis />"],"updatePoint":{"line":207,"column":53,"index":5034},"line":207,"code":"  it('Render ticks of when the scale of XAxis is time', () => {\n    const timeData = [{\n      x: new Date('2019-07-04T00:00:00.000Z'),\n      y: 5\n    }, {\n      x: new Date('2019-07-05T00:00:00.000Z'),\n      y: 30\n    }, {\n      x: new Date('2019-07-06T00:00:00.000Z'),\n      y: 50\n    }, {\n      x: new Date('2019-07-07T00:00:00.000Z'),\n      y: 43\n    }, {\n      x: new Date('2019-07-08T00:00:00.000Z'),\n      y: 20\n    }, {\n      x: new Date('2019-07-09T00:00:00.000Z'),\n      y: -20\n    }, {\n      x: new Date('2019-07-10T00:00:00.000Z'),\n      y: 30\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: timeData,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      domain: [timeData[0].x.getTime(), timeData[timeData.length - 1].x.getTime()],\n      scale: \"time\",\n      type: \"number\"\n    }), /*#__PURE__*/React.createElement(YAxis, null), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"y\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      }\n    })));\n    expect(wrapper.find('.recharts-xAxis .recharts-cartesian-axis-tick').length).to.equal(1);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render Bars with gap","suites":["<XAxis />"],"updatePoint":{"line":255,"column":26,"index":6308},"line":255,"code":"  it('Render Bars with gap', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(BarChart, {\n      width: 300,\n      height: 300,\n      data: data\n    }, /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"y\"\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      type: \"number\",\n      domain: ['dataMin', 'dataMax'],\n      padding: \"gap\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\"\n    })));\n    expect(parseInt(wrapper.find(Bar).prop('data')[0].x, 10)).to.equal(70);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render Bars with no gap","suites":["<XAxis />"],"updatePoint":{"line":272,"column":29,"index":6852},"line":272,"code":"  it('Render Bars with no gap', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(BarChart, {\n      width: 300,\n      height: 300,\n      data: data\n    }, /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"y\"\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      type: \"number\",\n      domain: ['dataMin', 'dataMax'],\n      padding: \"no-gap\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\"\n    })));\n    expect(parseInt(wrapper.find(Bar).prop('data')[0].x, 10)).to.equal(66);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Does not wrap long text if enough width","suites":["<Text />"],"updatePoint":{"line":6,"column":45,"index":208},"line":6,"code":"  it('Does not wrap long text if enough width', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n      width: 300,\n      style: {\n        fontFamily: 'Courier'\n      }\n    }, \"This is really long text\"));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(1);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Wraps long text if not enough width","suites":["<Text />"],"updatePoint":{"line":15,"column":41,"index":514},"line":15,"code":"  it('Wraps long text if not enough width', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n      width: 200,\n      style: {\n        fontFamily: 'Courier'\n      }\n    }, \"This is really long text for 200px\"));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(2);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Wraps long text if styled but would have had enough room","suites":["<Text />"],"updatePoint":{"line":24,"column":62,"index":851},"line":24,"code":"  it('Wraps long text if styled but would have had enough room', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n      width: 300,\n      style: {\n        fontSize: '2em',\n        fontFamily: 'Courier'\n      }\n    }, \"This is really long text\"));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(2);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Does not perform word length calculation if width or scaleToFit props not set","suites":["<Text />"],"updatePoint":{"line":34,"column":83,"index":1224},"line":34,"code":"  it('Does not perform word length calculation if width or scaleToFit props not set', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, null, \"This is really long text\"));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(1);\n    expect(wrapper.instance().state.wordsByLines[0].width).to.equal(undefined);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Render 0 success when specify the width","suites":["<Text />"],"updatePoint":{"line":39,"column":45,"index":1540},"line":39,"code":"  it('Render 0 success when specify the width', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Text, {\n      x: 0,\n      y: 0,\n      width: 30\n    }, 0));\n    setTimeout(() => {\n      expect(wrapper.text()).to.contain('0');\n    }, 1000);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Render 0 success when not specify the width","suites":["<Text />"],"updatePoint":{"line":49,"column":49,"index":1810},"line":49,"code":"  it('Render 0 success when not specify the width', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Text, {\n      x: 0,\n      y: 0\n    }, 0));\n    setTimeout(() => {\n      expect(wrapper.text()).to.contain('0');\n    }, 1000);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Render text when x or y is a percentage","suites":["<Text />"],"updatePoint":{"line":58,"column":45,"index":2059},"line":58,"code":"  it('Render text when x or y is a percentage', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Text, {\n      x: \"50%\",\n      y: \"50%\"\n    }, \"anything\"));\n    setTimeout(() => {\n      expect(wrapper.text()).to.contain('anything');\n    }, 1000);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Don't Render text when x or y is NaN ","suites":["<Text />"],"updatePoint":{"line":67,"column":43,"index":2330},"line":67,"code":"  it(\"Don't Render text when x or y is NaN \", () => {\n    const wrapperNan = render( /*#__PURE__*/React.createElement(Text, {\n      x: NaN,\n      y: 10\n    }, \"anything\"));\n    expect(wrapperNan.text()).to.not.contain('anything');\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Only split contents on breaking spaces","suites":["<Text />"],"updatePoint":{"line":74,"column":44,"index":2568},"line":74,"code":"  it('Only split contents on breaking spaces', () => {\n    const testString = 'These spaces\\tshould\\nbreak,\\rbut\\xA0these\\xA0should\\xA0not.';\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n      width: \"auto\"\n    }, testString));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(5);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"does not do anything when maxLines are not exceeded","suites":["<Text />","maxLines"],"updatePoint":{"line":82,"column":59,"index":2943},"line":82,"code":"    it('does not do anything when maxLines are not exceeded', () => {\n      const withMaxLines = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 500,\n        maxLines: 3\n      }, \"test\"));\n      const withoutMaxLines = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 500,\n        maxLines: 3\n      }, \"test\"));\n      expect(withMaxLines.text()).to.equal(withoutMaxLines.text());\n    });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"limits the output to maxLines","suites":["<Text />","maxLines"],"updatePoint":{"line":93,"column":37,"index":3342},"line":93,"code":"    it('limits the output to maxLines', () => {\n      const testString = 'Lorem ratione omnis fuga dignissimos in amet. Minus quam architecto non ea iste! Nihil amet in itaque error velit. Corporis autem sequi aut temporibus placeat. Perferendis quos veritatis quasi pariatur!';\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 200,\n        maxLines: 2\n      }, testString));\n      expect(wrapper.instance().state.wordsByLines <= 2);\n    });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"adds an ellipsis at the end of the truncated line","suites":["<Text />","maxLines"],"updatePoint":{"line":101,"column":57,"index":3842},"line":101,"code":"    it('adds an ellipsis at the end of the truncated line', () => {\n      const testString = 'Sit totam suscipit aliquid suscipit eius, cupiditate Aut excepturi ipsum ut suscipit facilis debitis Provident impedit a distinctio neque quaerat Optio quo quibusdam possimus provident accusantium. Molestiae similique nemo labore';\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 200,\n        maxLines: 2\n      }, testString));\n      const text = wrapper.text();\n      expect(text[text.length - 1]).to.equal('…');\n    });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"adds an ellipsis at the end of a very long word","suites":["<Text />","maxLines"],"updatePoint":{"line":110,"column":55,"index":4395},"line":110,"code":"    it('adds an ellipsis at the end of a very long word', () => {\n      const testString = 'longwooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooord';\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 200,\n        maxLines: 1\n      }, testString));\n      const text = wrapper.text();\n      expect(text[text.length - 1]).to.equal('…');\n    });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"}]}