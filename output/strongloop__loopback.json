{"repo":"strongloop/loopback","url":"https://github.com/strongloop/loopback","branch":"master","configs":[{"package":"loopback","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"defaults to built-in AccessToken model","suites":["loopback.token(options)"],"updatePoint":{"line":80,"column":44,"index":1881},"line":80,"code":"  it('defaults to built-in AccessToken model', function () {\n    const BuiltInToken = app.registry.getModel('AccessToken');\n    app.model(BuiltInToken, {\n      dataSource: 'db'\n    });\n    app.enableAuth({\n      dataSource: 'db'\n    });\n    app.use(loopback.token());\n    app.use(loopback.rest());\n    return BuiltInToken.create({\n      userId: 123\n    }).then(function (token) {\n      return request(app).get('/TestModels/token?_format=json').set('authorization', token.id).expect(200).expect('Content-Type', /json/).then(res => {\n        expect(res.body.token.id).to.eql(token.id);\n      });\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"uses correct custom AccessToken model from model class param","suites":["loopback.token(options)"],"updatePoint":{"line":98,"column":66,"index":2511},"line":98,"code":"  it('uses correct custom AccessToken model from model class param', function () {\n    User.hasMany(Token, {\n      as: 'accessTokens',\n      options: {\n        disableInclude: true\n      }\n    });\n    app.enableAuth();\n    app.use(loopback.token({\n      model: Token\n    }));\n    app.use(loopback.rest());\n    return Token.create({\n      userId: 123\n    }).then(function (token) {\n      return request(app).get('/TestModels/token?_format=json').set('authorization', token.id).expect(200).expect('Content-Type', /json/).then(res => {\n        expect(res.body.token.id).to.eql(token.id);\n      });\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"uses correct custom AccessToken model from string param","suites":["loopback.token(options)"],"updatePoint":{"line":118,"column":61,"index":3115},"line":118,"code":"  it('uses correct custom AccessToken model from string param', function () {\n    User.hasMany(Token, {\n      as: 'accessTokens',\n      options: {\n        disableInclude: true\n      }\n    });\n    app.enableAuth();\n    app.use(loopback.token({\n      model: Token.modelName\n    }));\n    app.use(loopback.rest());\n    return Token.create({\n      userId: 123\n    }).then(function (token) {\n      return request(app).get('/TestModels/token?_format=json').set('authorization', token.id).expect(200).expect('Content-Type', /json/).then(res => {\n        expect(res.body.token.id).to.eql(token.id);\n      });\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"populates req.token from the query string","suites":["loopback.token(options)"],"updatePoint":{"line":138,"column":47,"index":3715},"line":138,"code":"  it('populates req.token from the query string', function (done) {\n    createTestAppAndRequest(this.token, done).get('/?access_token=' + this.token.id).expect(200).end(done);\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"populates req.token from an authorization header","suites":["loopback.token(options)"],"updatePoint":{"line":141,"column":54,"index":3904},"line":141,"code":"  it('populates req.token from an authorization header', function (done) {\n    createTestAppAndRequest(this.token, done).get('/').set('authorization', this.token.id).expect(200).end(done);\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"populates req.token from an X-Access-Token header","suites":["loopback.token(options)"],"updatePoint":{"line":144,"column":55,"index":4100},"line":144,"code":"  it('populates req.token from an X-Access-Token header', function (done) {\n    createTestAppAndRequest(this.token, done).get('/').set('X-Access-Token', this.token.id).expect(200).end(done);\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"does not search default keys when searchDefaultTokenKeys is false","suites":["loopback.token(options)"],"updatePoint":{"line":147,"column":71,"index":4313},"line":147,"code":"  it('does not search default keys when searchDefaultTokenKeys is false', function (done) {\n    const tokenId = this.token.id;\n    const app = createTestApp(this.token, {\n      token: {\n        searchDefaultTokenKeys: false\n      }\n    }, done);\n    const agent = request.agent(app); // Set the token cookie\n\n    agent.get('/token').expect(200).end(function (err, res) {\n      if (err) return done(err); // Make a request that sets the token in all places searched by default\n\n      agent.get('/check-access?access_token=' + tokenId).set('X-Access-Token', tokenId).set('authorization', tokenId) // Expect 401 because there is no (non-default) place configured where\n      // the middleware should load the token from\n      .expect(401).end(done);\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"populates req.token from an authorization header with bearer token with base64","suites":["loopback.token(options)"],"updatePoint":{"line":164,"column":84,"index":5087},"line":164,"code":"  it('populates req.token from an authorization header with bearer token with base64', function (done) {\n    let token = this.token.id;\n    token = 'Bearer ' + new Buffer(token).toString('base64');\n    createTestAppAndRequest(this.token, done).get('/').set('authorization', token).expect(200).end(done);\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"populates req.token from an authorization header with bearer token","suites":["loopback.token(options)"],"updatePoint":{"line":169,"column":72,"index":5385},"line":169,"code":"  it('populates req.token from an authorization header with bearer token', function (done) {\n    let token = this.token.id;\n    token = 'Bearer ' + token;\n    createTestAppAndRequest(this.token, {\n      token: {\n        bearerTokenBase64Encoded: false\n      }\n    }, done).get('/').set('authorization', token).expect(200).end(done);\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"parses \"standalone-token\"","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":179,"column":33,"index":5786},"line":179,"code":"    it('parses \"standalone-token\"', function (done) {\n      let token = this.token.id;\n      token = 'Basic ' + new Buffer(token).toString('base64');\n      createTestAppAndRequest(this.token, done).get('/').set('authorization', this.token.id).expect(200).end(done);\n    });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"parses \"token-and-empty-password:\"","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":184,"column":42,"index":6069},"line":184,"code":"    it('parses \"token-and-empty-password:\"', function (done) {\n      let token = this.token.id + ':';\n      token = 'Basic ' + new Buffer(token).toString('base64');\n      createTestAppAndRequest(this.token, done).get('/').set('authorization', this.token.id).expect(200).end(done);\n    });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"parses \"ignored-user:token-is-password\"","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":189,"column":47,"index":6363},"line":189,"code":"    it('parses \"ignored-user:token-is-password\"', function (done) {\n      let token = 'username:' + this.token.id;\n      token = 'Basic ' + new Buffer(token).toString('base64');\n      createTestAppAndRequest(this.token, done).get('/').set('authorization', this.token.id).expect(200).end(done);\n    });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"parses \"token-is-username:ignored-password\"","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":194,"column":51,"index":6669},"line":194,"code":"    it('parses \"token-is-username:ignored-password\"', function (done) {\n      let token = this.token.id + ':password';\n      token = 'Basic ' + new Buffer(token).toString('base64');\n      createTestAppAndRequest(this.token, done).get('/').set('authorization', this.token.id).expect(200).end(done);\n    });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"populates req.token from a secure cookie","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":200,"column":46,"index":6976},"line":200,"code":"  it('populates req.token from a secure cookie', function (done) {\n    const app = createTestApp(this.token, done);\n    request(app).get('/token').end(function (err, res) {\n      request(app).get('/').set('Cookie', res.header['set-cookie']).end(done);\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"populates req.token from a header or a secure cookie","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":206,"column":58,"index":7254},"line":206,"code":"  it('populates req.token from a header or a secure cookie', function (done) {\n    const app = createTestApp(this.token, done);\n    const id = this.token.id;\n    request(app).get('/token').end(function (err, res) {\n      request(app).get('/').set('authorization', id).set('Cookie', res.header['set-cookie']).end(done);\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"rewrites url for the current user literal at the end without query","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":213,"column":72,"index":7601},"line":213,"code":"  it('rewrites url for the current user literal at the end without query', function (done) {\n    const app = createTestApp(this.token, done);\n    const id = this.token.id;\n    const userId = this.token.userId;\n    request(app).get('/users/me').set('authorization', id).end(function (err, res) {\n      assert(!err);\n      assert.deepEqual(res.body, {\n        userId: userId\n      });\n      done();\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"rewrites url for the current user literal at the end with query","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":225,"column":69,"index":8009},"line":225,"code":"  it('rewrites url for the current user literal at the end with query', function (done) {\n    const app = createTestApp(this.token, done);\n    const id = this.token.id;\n    const userId = this.token.userId;\n    request(app).get('/users/me?state=1').set('authorization', id).end(function (err, res) {\n      assert(!err);\n      assert.deepEqual(res.body, {\n        userId: userId,\n        state: 1\n      });\n      done();\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"rewrites url for the current user literal in the middle","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":238,"column":61,"index":8435},"line":238,"code":"  it('rewrites url for the current user literal in the middle', function (done) {\n    const app = createTestApp(this.token, done);\n    const id = this.token.id;\n    const userId = this.token.userId;\n    request(app).get('/users/me/1').set('authorization', id).end(function (err, res) {\n      assert(!err);\n      assert.deepEqual(res.body, {\n        userId: userId,\n        state: 1\n      });\n      done();\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"generates a 401 on a current user literal route without an authToken","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":251,"column":74,"index":8868},"line":251,"code":"  it('generates a 401 on a current user literal route without an authToken', function (done) {\n    const app = createTestApp(null, done);\n    request(app).get('/users/me').set('authorization', null).expect(401).end(done);\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"generates a 401 on a current user literal route with empty authToken","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":255,"column":74,"index":9096},"line":255,"code":"  it('generates a 401 on a current user literal route with empty authToken', function (done) {\n    const app = createTestApp(null, done);\n    request(app).get('/users/me').set('authorization', '').expect(401).end(done);\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"generates a 401 on a current user literal route with invalid authToken","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":259,"column":76,"index":9324},"line":259,"code":"  it('generates a 401 on a current user literal route with invalid authToken', function (done) {\n    const app = createTestApp(this.token, done);\n    request(app).get('/users/me').set('Authorization', 'invald-token-id').expect(401).end(done);\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"skips when req.token is already present","suites":["loopback.token(options)","populating req.token from HTTP Basic Auth formatted authorization header"],"updatePoint":{"line":263,"column":45,"index":9542},"line":263,"code":"  it('skips when req.token is already present', function (done) {\n    const tokenStub = {\n      id: 'stub id'\n    };\n    app.use(function (req, res, next) {\n      req.accessToken = tokenStub;\n      next();\n    });\n    app.use(loopback.token({\n      model: Token\n    }));\n    app.get('/', function (req, res, next) {\n      res.send(req.accessToken);\n    });\n    request(app).get('/').set('Authorization', this.token.id).expect(200).end(function (err, res) {\n      if (err) return done(err);\n      expect(res.body).to.eql(tokenStub);\n      done();\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"skips when req.token is already present and no further options are set","suites":["loopback.token(options)","loading multiple instances of token middleware"],"updatePoint":{"line":284,"column":78,"index":10210},"line":284,"code":"    it('skips when req.token is already present and no further options are set', function (done) {\n      const tokenStub = {\n        id: 'stub id'\n      };\n      app.use(function (req, res, next) {\n        req.accessToken = tokenStub;\n        next();\n      });\n      app.use(loopback.token({\n        model: Token\n      }));\n      app.get('/', function (req, res, next) {\n        res.send(req.accessToken);\n      });\n      request(app).get('/').set('Authorization', this.token.id).expect(200).end(function (err, res) {\n        if (err) return done(err);\n        expect(res.body).to.eql(tokenStub);\n        done();\n      });\n    });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"has getIdForRequest method","suites":["AccessToken"],"updatePoint":{"line":381,"column":32,"index":13256},"line":381,"code":"  it('has getIdForRequest method', function () {\n    expect(typeof Token.getIdForRequest).to.eql('function');\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"has resolve method","suites":["AccessToken"],"updatePoint":{"line":384,"column":24,"index":13364},"line":384,"code":"  it('has resolve method', function () {\n    expect(typeof Token.resolve).to.eql('function');\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"generates id automatically","suites":["AccessToken"],"updatePoint":{"line":387,"column":32,"index":13472},"line":387,"code":"  it('generates id automatically', function () {\n    assert(this.token.id);\n    assert.equal(this.token.id.length, 64);\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"generates created date automatically","suites":["AccessToken"],"updatePoint":{"line":391,"column":42,"index":13608},"line":391,"code":"  it('generates created date automatically', function () {\n    assert(this.token.created);\n    assert(Object.prototype.toString.call(this.token.created), '[object Date]');\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"accepts valid tokens","suites":["AccessToken",".validate()"],"updatePoint":{"line":396,"column":28,"index":13812},"line":396,"code":"    it('accepts valid tokens', function (done) {\n      this.token.validate(function (err, isValid) {\n        assert(isValid);\n        done();\n      });\n    });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"rejects eternal TTL by default","suites":["AccessToken",".validate()"],"updatePoint":{"line":402,"column":38,"index":13982},"line":402,"code":"    it('rejects eternal TTL by default', function (done) {\n      this.token.ttl = -1;\n      this.token.validate(function (err, isValid) {\n        if (err) return done(err);\n        expect(isValid, 'isValid').to.equal(false);\n        done();\n      });\n    });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"allows eternal tokens when enabled by User.allowEternalTokens","suites":["AccessToken",".validate()"],"updatePoint":{"line":410,"column":69,"index":14272},"line":410,"code":"    it('allows eternal tokens when enabled by User.allowEternalTokens', function (done) {\n      const Token = givenLocalTokenModel(); // Overwrite User settings - enable eternal tokens\n\n      Token.app.models.User.settings.allowEternalTokens = true;\n      Token.create({\n        userId: '123',\n        ttl: -1\n      }, function (err, token) {\n        if (err) return done(err);\n        token.validate(function (err, isValid) {\n          if (err) return done(err);\n          expect(isValid, 'isValid').to.equal(true);\n          done();\n        });\n      });\n    });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"supports two-arg variant with no options","suites":["AccessToken",".findForRequest()"],"updatePoint":{"line":429,"column":48,"index":14904},"line":429,"code":"    it('supports two-arg variant with no options', function (done) {\n      const expectedTokenId = this.token.id;\n      const req = mockRequest({\n        headers: {\n          'authorization': expectedTokenId\n        }\n      });\n      Token.findForRequest(req, function (err, token) {\n        if (err) return done(err);\n        expect(token.id).to.eql(expectedTokenId);\n        done();\n      });\n    });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"allows getIdForRequest() to be overridden","suites":["AccessToken",".findForRequest()"],"updatePoint":{"line":442,"column":49,"index":15308},"line":442,"code":"    it('allows getIdForRequest() to be overridden', function (done) {\n      const expectedTokenId = this.token.id;\n      const current = Token.getIdForRequest;\n      let called = false;\n\n      Token.getIdForRequest = function (req, options) {\n        called = true;\n        return expectedTokenId;\n      };\n\n      const req = mockRequest({\n        headers: {\n          'authorization': 'dummy'\n        }\n      });\n      Token.findForRequest(req, function (err, token) {\n        Token.getIdForRequest = current;\n        if (err) return done(err);\n        expect(token.id).to.eql(expectedTokenId);\n        expect(called).to.be.true();\n        done();\n      });\n    });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"allows resolve() to be overridden","suites":["AccessToken",".findForRequest()"],"updatePoint":{"line":465,"column":41,"index":15967},"line":465,"code":"    it('allows resolve() to be overridden', function (done) {\n      const expectedTokenId = this.token.id;\n      const current = Token.resolve;\n      let called = false;\n\n      Token.resolve = function (id, cb) {\n        called = true;\n        process.nextTick(function () {\n          cb(null, {\n            id: expectedTokenId\n          });\n        });\n      };\n\n      const req = mockRequest({\n        headers: {\n          'authorization': expectedTokenId\n        }\n      });\n      Token.findForRequest(req, function (err, token) {\n        Token.validate = current;\n        if (err) return done(err);\n        expect(token.id).to.eql(expectedTokenId);\n        expect(called).to.be.true();\n        done();\n      });\n    });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"prevents remote call with 401 status on denied ACL","suites":["app.enableAuth()"],"updatePoint":{"line":536,"column":56,"index":17790},"line":536,"code":"  it('prevents remote call with 401 status on denied ACL', function (done) {\n    createTestAppAndRequest(this.token, done).del('/tests/123').expect(401).set('authorization', this.token.id).end(function (err, res) {\n      if (err) {\n        return done(err);\n      }\n\n      const errorResponse = res.body.error;\n      assert(errorResponse);\n      assert.equal(errorResponse.code, 'AUTHORIZATION_REQUIRED');\n      done();\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"denies remote call with app setting status 403","suites":["app.enableAuth()"],"updatePoint":{"line":548,"column":52,"index":18220},"line":548,"code":"  it('denies remote call with app setting status 403', function (done) {\n    createTestAppAndRequest(this.token, {\n      app: {\n        aclErrorStatus: 403\n      }\n    }, done).del('/tests/123').expect(403).set('authorization', this.token.id).end(function (err, res) {\n      if (err) {\n        return done(err);\n      }\n\n      const errorResponse = res.body.error;\n      assert(errorResponse);\n      assert.equal(errorResponse.code, 'ACCESS_DENIED');\n      done();\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"denies remote call with app setting status 404","suites":["app.enableAuth()"],"updatePoint":{"line":564,"column":52,"index":18699},"line":564,"code":"  it('denies remote call with app setting status 404', function (done) {\n    createTestAppAndRequest(this.token, {\n      model: {\n        aclErrorStatus: 404\n      }\n    }, done).del('/tests/123').expect(404).set('authorization', this.token.id).end(function (err, res) {\n      if (err) {\n        return done(err);\n      }\n\n      const errorResponse = res.body.error;\n      assert(errorResponse);\n      assert.equal(errorResponse.code, 'MODEL_NOT_FOUND');\n      done();\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"prevents remote call if the accessToken is missing and required","suites":["app.enableAuth()"],"updatePoint":{"line":580,"column":69,"index":19199},"line":580,"code":"  it('prevents remote call if the accessToken is missing and required', function (done) {\n    createTestAppAndRequest(null, done).del('/tests/123').expect(401).set('authorization', null).end(function (err, res) {\n      if (err) {\n        return done(err);\n      }\n\n      const errorResponse = res.body.error;\n      assert(errorResponse);\n      assert.equal(errorResponse.code, 'AUTHORIZATION_REQUIRED');\n      done();\n    });\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"stores token in the context","suites":["app.enableAuth()"],"updatePoint":{"line":592,"column":33,"index":19595},"line":592,"code":"  it('stores token in the context', function (done) {\n    const TestModel = app.registry.createModel('TestModel', {\n      base: 'Model'\n    });\n\n    TestModel.getToken = function (cb) {\n      const ctx = LoopBackContext.getCurrentContext();\n      cb(null, ctx && ctx.get('accessToken') || null);\n    };\n\n    TestModel.remoteMethod('getToken', {\n      returns: {\n        arg: 'token',\n        type: 'object'\n      },\n      http: {\n        verb: 'GET',\n        path: '/token'\n      }\n    });\n    app.model(TestModel, {\n      dataSource: null\n    });\n    app.enableAuth();\n    app.use(contextMiddleware());\n    app.use(loopback.token({\n      model: Token\n    }));\n    app.use(loopback.rest());\n    const token = this.token;\n    request(app).get('/TestModels/token?_format=json').set('authorization', token.id).expect(200).expect('Content-Type', /json/).end(function (err, res) {\n      if (err) return done(err);\n      expect(res.body.token.id).to.eql(token.id);\n      done();\n    });\n  }); // See https://github.com/strongloop/loopback-context/issues/6","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"checks whether context is active","suites":["app.enableAuth()"],"updatePoint":{"line":629,"column":38,"index":20651},"line":629,"code":"  it('checks whether context is active', function (done) {\n    app.enableAuth();\n    app.use(contextMiddleware());\n    app.use(session({\n      secret: 'kitty',\n      saveUninitialized: true,\n      resave: true\n    }));\n    app.use(loopback.token({\n      model: Token\n    }));\n    app.get('/', function (req, res) {\n      res.send('OK');\n    });\n    app.use(loopback.rest());\n    request(app).get('/').set('authorization', this.token.id).set('cookie', 'connect.sid=s%3AFTyno9_MbGTJuOwdh9bxsYCVxlhlulTZ.' + 'PZvp85jzLXZBCBkhCsSfuUjhij%2Fb0B1K2RYZdxSQU0c').expect(200, 'OK').end(done);\n  });","file":"access-token.test.js","skipped":false,"dir":"test"},{"name":"provides DEFAULT_SCOPE constant","suites":["ACL model"],"updatePoint":{"line":33,"column":37,"index":826},"line":33,"code":"  it('provides DEFAULT_SCOPE constant', () => {\n    expect(ACL).to.have.property('DEFAULT_SCOPE', 'DEFAULT');\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"should allow access to models for the given scope by wildcard","suites":["security scopes"],"updatePoint":{"line":39,"column":67,"index":1049},"line":39,"code":"  it('should allow access to models for the given scope by wildcard', function (done) {\n    Scope.create({\n      name: 'userScope',\n      description: 'access user information'\n    }, function (err, scope) {\n      ACL.create({\n        principalType: ACL.SCOPE,\n        principalId: scope.id,\n        model: 'User',\n        property: ACL.ALL,\n        accessType: ACL.ALL,\n        permission: ACL.ALLOW\n      }, function (err, resource) {\n        async.parallel([cb => Scope.checkPermission('userScope', 'User', ACL.ALL, ACL.ALL, cb), cb => Scope.checkPermission('userScope', 'User', 'name', ACL.ALL, cb), cb => Scope.checkPermission('userScope', 'User', 'name', ACL.READ, cb)], err => {\n          assert.ifError(err);\n          done();\n        });\n      });\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"should allow access to models for the given scope","suites":["security scopes"],"updatePoint":{"line":59,"column":55,"index":1808},"line":59,"code":"  it('should allow access to models for the given scope', function (done) {\n    Scope.create({\n      name: 'testModelScope',\n      description: 'access testModel information'\n    }, function (err, scope) {\n      ACL.create({\n        principalType: ACL.SCOPE,\n        principalId: scope.id,\n        model: 'testModel',\n        property: 'name',\n        accessType: ACL.READ,\n        permission: ACL.ALLOW\n      }, function (err, resource) {\n        ACL.create({\n          principalType: ACL.SCOPE,\n          principalId: scope.id,\n          model: 'testModel',\n          property: 'name',\n          accessType: ACL.WRITE,\n          permission: ACL.DENY\n        }, function (err, resource) {\n          async.parallel([cb => Scope.checkPermission('testModelScope', 'testModel', ACL.ALL, ACL.ALL, cb), cb => Scope.checkPermission('testModelScope', 'testModel', 'name', ACL.ALL, cb), cb => Scope.checkPermission('testModelScope', 'testModel', 'name', ACL.READ, cb), cb => Scope.checkPermission('testModelScope', 'testModel', 'name', ACL.WRITE, cb)], (err, perms) => {\n            if (err) return done(err);\n            assert.deepEqual(perms.map(p => p.permission), [ACL.DENY, ACL.DENY, ACL.ALLOW, ACL.DENY]);\n            done();\n          });\n        });\n      });\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"supports checkPermission() returning a promise","suites":["security ACLs"],"updatePoint":{"line":92,"column":52,"index":3155},"line":92,"code":"  it('supports checkPermission() returning a promise', function () {\n    return ACL.create({\n      principalType: ACL.USER,\n      principalId: 'u001',\n      model: 'testModel',\n      property: ACL.ALL,\n      accessType: ACL.ALL,\n      permission: ACL.ALLOW\n    }).then(function () {\n      return ACL.checkPermission(ACL.USER, 'u001', 'testModel', 'name', ACL.ALL);\n    }).then(function (access) {\n      assert(access.permission === ACL.ALLOW);\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"supports ACL rules with a wildcard for models","suites":["security ACLs"],"updatePoint":{"line":106,"column":51,"index":3612},"line":106,"code":"  it('supports ACL rules with a wildcard for models', function () {\n    const A_USER_ID = 'a-test-user'; // By default, access is allowed to all users\n\n    return assertPermission(ACL.ALLOW, 'initial state') // An ACL rule applying to all models denies access to everybody\n    .then(() => ACL.create({\n      model: '*',\n      property: '*',\n      accessType: '*',\n      principalType: 'ROLE',\n      principalId: '$everyone',\n      permission: 'DENY'\n    })).then(() => assertPermission(ACL.DENY, 'all denied')) // A rule for a specific model overrides the rule matching all models\n    .then(() => ACL.create({\n      model: testModel.modelName,\n      property: '*',\n      accessType: '*',\n      principalType: ACL.USER,\n      principalId: A_USER_ID,\n      permission: ACL.ALLOW\n    })).then(() => assertPermission(ACL.ALLOW, 'only a single model allowed'));\n\n    function assertPermission(expectedPermission, msg) {\n      return ACL.checkAccessForContext({\n        principals: [{\n          type: ACL.USER,\n          id: A_USER_ID\n        }],\n        model: testModel.modelName,\n        accessType: ACL.ALL\n      }).then(accessContext => {\n        const actual = accessContext.isAllowed() ? ACL.ALLOW : ACL.DENY;\n        expect(actual, msg).to.equal(expectedPermission);\n      });\n    }\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"supports checkAccessForContext() returning a promise","suites":["security ACLs"],"updatePoint":{"line":141,"column":58,"index":4910},"line":141,"code":"  it('supports checkAccessForContext() returning a promise', function () {\n    const testModel = ds.createModel('testModel', {\n      acls: [{\n        principalType: ACL.USER,\n        principalId: 'u001',\n        accessType: ACL.ALL,\n        permission: ACL.ALLOW\n      }]\n    });\n    return ACL.checkAccessForContext({\n      principals: [{\n        type: ACL.USER,\n        id: 'u001'\n      }],\n      model: 'testModel',\n      accessType: ACL.ALL\n    }).then(function (access) {\n      assert(access.permission === ACL.ALLOW);\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"should order ACL entries based on the matching score","suites":["security ACLs"],"updatePoint":{"line":161,"column":58,"index":5448},"line":161,"code":"  it('should order ACL entries based on the matching score', function () {\n    let acls = [{\n      'model': 'account',\n      'accessType': '*',\n      'permission': 'DENY',\n      'principalType': 'ROLE',\n      'principalId': '$everyone'\n    }, {\n      'model': 'account',\n      'accessType': '*',\n      'permission': 'ALLOW',\n      'principalType': 'ROLE',\n      'principalId': '$owner'\n    }, {\n      'model': 'account',\n      'accessType': 'READ',\n      'permission': 'ALLOW',\n      'principalType': 'ROLE',\n      'principalId': '$everyone'\n    }];\n    const req = {\n      model: 'account',\n      property: 'find',\n      accessType: 'WRITE'\n    };\n    acls = acls.map(function (a) {\n      return new ACL(a);\n    });\n    const perm = ACL.resolvePermission(acls, req); // remove the registry from AccessRequest instance to ease asserting\n\n    delete perm.registry;\n    assert.deepEqual(perm, {\n      model: 'account',\n      property: 'find',\n      accessType: 'WRITE',\n      permission: 'ALLOW',\n      methodNames: []\n    }); // NOTE: when fixed in chaijs, use this implement rather than modifying\n    // the resolved access request\n    //\n    // expect(perm).to.deep.include({\n    //   model: 'account',\n    //   property: 'find',\n    //   accessType: 'WRITE',\n    //   permission: 'ALLOW',\n    //   methodNames: [],\n    // });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"should order ACL entries based on the matching score even with wildcard req","suites":["security ACLs"],"updatePoint":{"line":209,"column":81,"index":6805},"line":209,"code":"  it('should order ACL entries based on the matching score even with wildcard req', function () {\n    let acls = [{\n      'model': 'account',\n      'accessType': '*',\n      'permission': 'DENY',\n      'principalType': 'ROLE',\n      'principalId': '$everyone'\n    }, {\n      'model': 'account',\n      'accessType': '*',\n      'permission': 'ALLOW',\n      'principalType': 'ROLE',\n      'principalId': '$owner'\n    }];\n    const req = {\n      model: 'account',\n      property: '*',\n      accessType: 'WRITE'\n    };\n    acls = acls.map(function (a) {\n      return new ACL(a);\n    });\n    const perm = ACL.resolvePermission(acls, req); // remove the registry from AccessRequest instance to ease asserting.\n    // Check the above test case for more info.\n\n    delete perm.registry;\n    assert.deepEqual(perm, {\n      model: 'account',\n      property: '*',\n      accessType: 'WRITE',\n      permission: 'ALLOW',\n      methodNames: []\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"should allow access to models for the given principal by wildcard","suites":["security ACLs"],"updatePoint":{"line":243,"column":71,"index":7736},"line":243,"code":"  it('should allow access to models for the given principal by wildcard', function (done) {\n    // jscs:disable validateIndentation\n    ACL.create({\n      principalType: ACL.USER,\n      principalId: 'u001',\n      model: 'User',\n      property: ACL.ALL,\n      accessType: ACL.ALL,\n      permission: ACL.ALLOW\n    }, function (err, acl) {\n      ACL.create({\n        principalType: ACL.USER,\n        principalId: 'u001',\n        model: 'User',\n        property: ACL.ALL,\n        accessType: ACL.READ,\n        permission: ACL.DENY\n      }, function (err, acl) {\n        async.parallel([cb => ACL.checkPermission(ACL.USER, 'u001', 'User', 'name', ACL.READ, cb), cb => ACL.checkPermission(ACL.USER, 'u001', 'User', 'name', ACL.ALL, cb)], (err, perms) => {\n          if (err) return done(err);\n          assert.deepEqual(perms.map(p => p.permission), [ACL.DENY, ACL.DENY]);\n          done();\n        });\n      });\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"should allow access to models by exception","suites":["security ACLs"],"updatePoint":{"line":269,"column":48,"index":8634},"line":269,"code":"  it('should allow access to models by exception', function (done) {\n    ACL.create({\n      principalType: ACL.USER,\n      principalId: 'u001',\n      model: 'testModel',\n      property: ACL.ALL,\n      accessType: ACL.ALL,\n      permission: ACL.DENY\n    }, function (err, acl) {\n      ACL.create({\n        principalType: ACL.USER,\n        principalId: 'u001',\n        model: 'testModel',\n        property: ACL.ALL,\n        accessType: ACL.READ,\n        permission: ACL.ALLOW\n      }, function (err, acl) {\n        ACL.create({\n          principalType: ACL.USER,\n          principalId: 'u002',\n          model: 'testModel',\n          property: ACL.ALL,\n          accessType: ACL.EXECUTE,\n          permission: ACL.ALLOW\n        }, function (err, acl) {\n          async.parallel([cb => ACL.checkPermission(ACL.USER, 'u001', 'testModel', 'name', ACL.READ, cb), cb => ACL.checkPermission(ACL.USER, 'u001', 'testModel', ACL.ALL, ACL.READ, cb), cb => ACL.checkPermission(ACL.USER, 'u001', 'testModel', 'name', ACL.WRITE, cb), cb => ACL.checkPermission(ACL.USER, 'u001', 'testModel', 'name', ACL.ALL, cb), cb => ACL.checkPermission(ACL.USER, 'u002', 'testModel', 'name', ACL.WRITE, cb), cb => ACL.checkPermission(ACL.USER, 'u002', 'testModel', 'name', ACL.READ, cb)], (err, perms) => {\n            if (err) return done(err);\n            assert.deepEqual(perms.map(p => p.permission), [ACL.ALLOW, ACL.ALLOW, ACL.DENY, ACL.DENY, ACL.ALLOW, ACL.ALLOW]);\n            done();\n          });\n        });\n      });\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"should honor defaultPermission from the model","suites":["security ACLs"],"updatePoint":{"line":303,"column":51,"index":10150},"line":303,"code":"  it('should honor defaultPermission from the model', function (done) {\n    const Customer = ds.createModel('Customer', {\n      name: {\n        type: String,\n        acls: [{\n          principalType: ACL.USER,\n          principalId: 'u001',\n          accessType: ACL.WRITE,\n          permission: ACL.DENY\n        }, {\n          principalType: ACL.USER,\n          principalId: 'u001',\n          accessType: ACL.ALL,\n          permission: ACL.ALLOW\n        }]\n      }\n    }, {\n      acls: [{\n        principalType: ACL.USER,\n        principalId: 'u001',\n        accessType: ACL.ALL,\n        permission: ACL.ALLOW\n      }]\n    }); // ACL default permission is to DENY for model Customer\n\n    Customer.settings.defaultPermission = ACL.DENY;\n    async.parallel([cb => ACL.checkPermission(ACL.USER, 'u001', 'Customer', 'name', ACL.WRITE, cb), cb => ACL.checkPermission(ACL.USER, 'u001', 'Customer', 'name', ACL.READ, cb), cb => ACL.checkPermission(ACL.USER, 'u002', 'Customer', 'name', ACL.WRITE, cb)], (err, perms) => {\n      if (err) return done(err);\n      assert.deepEqual(perms.map(p => p.permission), [ACL.DENY, ACL.ALLOW, ACL.DENY]);\n      done();\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"should honor static ACLs from the model","suites":["security ACLs"],"updatePoint":{"line":335,"column":45,"index":11307},"line":335,"code":"  it('should honor static ACLs from the model', function (done) {\n    const Customer = ds.createModel('Customer', {\n      name: {\n        type: String,\n        acls: [{\n          principalType: ACL.USER,\n          principalId: 'u001',\n          accessType: ACL.WRITE,\n          permission: ACL.DENY\n        }, {\n          principalType: ACL.USER,\n          principalId: 'u001',\n          accessType: ACL.ALL,\n          permission: ACL.ALLOW\n        }]\n      }\n    }, {\n      acls: [{\n        principalType: ACL.USER,\n        principalId: 'u001',\n        accessType: ACL.ALL,\n        permission: ACL.ALLOW\n      }, {\n        principalType: ACL.USER,\n        principalId: 'u002',\n        accessType: ACL.EXECUTE,\n        permission: ACL.ALLOW\n      }, {\n        principalType: ACL.USER,\n        principalId: 'u003',\n        accessType: ACL.EXECUTE,\n        permission: ACL.DENY\n      }]\n    });\n    /*\n     Customer.settings.acls = [\n     {principalType: ACL.USER, principalId: 'u001', accessType: ACL.ALL, permission: ACL.ALLOW}\n     ];\n     */\n\n    async.parallel([cb => ACL.checkPermission(ACL.USER, 'u001', 'Customer', 'name', ACL.WRITE, cb), cb => ACL.checkPermission(ACL.USER, 'u001', 'Customer', 'name', ACL.READ, cb), cb => ACL.checkPermission(ACL.USER, 'u001', 'Customer', 'name', ACL.ALL, cb), cb => ACL.checkPermission(ACL.USER, 'u002', 'Customer', 'name', ACL.READ, cb), cb => ACL.checkPermission(ACL.USER, 'u003', 'Customer', 'name', ACL.WRITE, cb)], (err, perms) => {\n      if (err) return done(err);\n      assert.deepEqual(perms.map(p => p.permission), [ACL.DENY, ACL.ALLOW, ACL.ALLOW, ACL.ALLOW, ACL.DENY]);\n      done();\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"should filter static ACLs by model/property","suites":["security ACLs"],"updatePoint":{"line":381,"column":49,"index":12961},"line":381,"code":"  it('should filter static ACLs by model/property', function () {\n    const Model1 = ds.createModel('Model1', {\n      name: {\n        type: String,\n        acls: [{\n          principalType: ACL.USER,\n          principalId: 'u001',\n          accessType: ACL.WRITE,\n          permission: ACL.DENY\n        }, {\n          principalType: ACL.USER,\n          principalId: 'u001',\n          accessType: ACL.ALL,\n          permission: ACL.ALLOW\n        }]\n      }\n    }, {\n      acls: [{\n        principalType: ACL.USER,\n        principalId: 'u001',\n        property: 'name',\n        accessType: ACL.ALL,\n        permission: ACL.ALLOW\n      }, {\n        principalType: ACL.USER,\n        principalId: 'u002',\n        property: 'findOne',\n        accessType: ACL.ALL,\n        permission: ACL.ALLOW\n      }, {\n        principalType: ACL.USER,\n        principalId: 'u003',\n        property: ['findOne', 'findById'],\n        accessType: ACL.ALL,\n        permission: ACL.ALLOW\n      }]\n    });\n    let staticACLs = ACL.getStaticACLs('Model1', 'name');\n    assert(staticACLs.length === 3);\n    staticACLs = ACL.getStaticACLs('Model1', 'findOne');\n    assert(staticACLs.length === 2);\n    staticACLs = ACL.getStaticACLs('Model1', 'findById');\n    assert(staticACLs.length === 1);\n    assert(staticACLs[0].property === 'findById');\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"should check access against LDL, ACL, and Role","suites":["security ACLs"],"updatePoint":{"line":426,"column":52,"index":14285},"line":426,"code":"  it('should check access against LDL, ACL, and Role', function (done) {\n    const log = function () {}; // Create\n\n\n    User.create({\n      name: 'Raymond',\n      email: 'x@y.com',\n      password: 'foobar'\n    }, function (err, user) {\n      log('User: ', user.toObject());\n      const userId = user.id; // Define a model with static ACLs\n\n      const Customer = ds.createModel('Customer', {\n        name: {\n          type: String,\n          acls: [{\n            principalType: ACL.USER,\n            principalId: userId,\n            accessType: ACL.WRITE,\n            permission: ACL.DENY\n          }, {\n            principalType: ACL.USER,\n            principalId: userId,\n            accessType: ACL.ALL,\n            permission: ACL.ALLOW\n          }]\n        }\n      }, {\n        acls: [{\n          principalType: ACL.USER,\n          principalId: userId,\n          accessType: ACL.ALL,\n          permission: ACL.ALLOW\n        }],\n        defaultPermission: 'DENY'\n      });\n      ACL.create({\n        principalType: ACL.USER,\n        principalId: userId,\n        model: 'Customer',\n        property: ACL.ALL,\n        accessType: ACL.ALL,\n        permission: ACL.ALLOW\n      }, function (err, acl) {\n        log('ACL 1: ', acl.toObject());\n        Role.create({\n          name: 'MyRole'\n        }, function (err, myRole) {\n          log('Role: ', myRole.toObject());\n          myRole.principals.create({\n            principalType: RoleMapping.USER,\n            principalId: userId\n          }, function (err, p) {\n            log('Principal added to role: ', p.toObject());\n            ACL.create({\n              principalType: ACL.ROLE,\n              principalId: 'MyRole',\n              model: 'Customer',\n              property: ACL.ALL,\n              accessType: ACL.READ,\n              permission: ACL.DENY\n            }, function (err, acl) {\n              log('ACL 2: ', acl.toObject());\n              async.parallel([cb => {\n                ACL.checkAccessForContext({\n                  principals: [{\n                    type: ACL.USER,\n                    id: userId\n                  }],\n                  model: 'Customer',\n                  property: 'name',\n                  accessType: ACL.READ\n                }, function (err, access) {\n                  assert.ifError(err);\n                  assert.equal(access.permission, ACL.ALLOW);\n                  cb();\n                });\n              }, cb => {\n                ACL.checkAccessForContext({\n                  principals: [{\n                    type: ACL.ROLE,\n                    id: Role.EVERYONE\n                  }],\n                  model: 'Customer',\n                  property: 'name',\n                  accessType: ACL.READ\n                }, function (err, access) {\n                  assert.ifError(err);\n                  assert.equal(access.permission, ACL.DENY);\n                  cb();\n                });\n              }], done);\n            });\n          });\n        });\n      });\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"should occur before other remote hooks","suites":["access check"],"updatePoint":{"line":526,"column":44,"index":17312},"line":526,"code":"  it('should occur before other remote hooks', function (done) {\n    const app = loopback();\n    const MyTestModel = app.registry.createModel('MyTestModel');\n    let checkAccessCalled = false;\n    let beforeHookCalled = false;\n    app.use(loopback.rest());\n    app.set('remoting', {\n      errorHandler: {\n        debug: true,\n        log: false\n      }\n    });\n    app.enableAuth();\n    app.dataSource('test', {\n      connector: 'memory'\n    });\n    app.model(MyTestModel, {\n      dataSource: 'test'\n    }); // fake / spy on the checkAccess method\n\n    MyTestModel.checkAccess = function () {\n      const cb = arguments[arguments.length - 1];\n      checkAccessCalled = true;\n      const allowed = true;\n      cb(null, allowed);\n    };\n\n    MyTestModel.beforeRemote('find', function (ctx, next) {\n      // ensure this is called after checkAccess\n      if (!checkAccessCalled) return done(new Error('incorrect order'));\n      beforeHookCalled = true;\n      next();\n    });\n    request(app).get('/MyTestModels').end(function (err, result) {\n      assert(beforeHookCalled, 'the before hook should be called');\n      assert(checkAccessCalled, 'checkAccess should have been called');\n      done();\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"contains all authorized roles for a principal if query is allowed","suites":["authorized roles propagation in RemotingContext"],"updatePoint":{"line":570,"column":71,"index":18709},"line":570,"code":"  it('contains all authorized roles for a principal if query is allowed', function () {\n    return createACLs('MyTestModel', [{\n      permission: ACL.ALLOW,\n      principalId: '$everyone'\n    }, {\n      permission: ACL.ALLOW,\n      principalId: '$authenticated'\n    }, {\n      permission: ACL.ALLOW,\n      principalId: 'myRole'\n    }]).then(makeAuthorizedHttpRequestOnMyTestModel).then(function () {\n      const ctx = models.MyTestModel.lastRemotingContext;\n      expect(ctx.args.options.authorizedRoles).to.eql({\n        $everyone: true,\n        $authenticated: true,\n        myRole: true\n      });\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"does not contain any denied role even if query is allowed","suites":["authorized roles propagation in RemotingContext"],"updatePoint":{"line":589,"column":63,"index":19315},"line":589,"code":"  it('does not contain any denied role even if query is allowed', function () {\n    return createACLs('MyTestModel', [{\n      permission: ACL.ALLOW,\n      principalId: '$everyone'\n    }, {\n      permission: ACL.DENY,\n      principalId: '$authenticated'\n    }, {\n      permission: ACL.ALLOW,\n      principalId: 'myRole'\n    }]).then(makeAuthorizedHttpRequestOnMyTestModel).then(function () {\n      const ctx = models.MyTestModel.lastRemotingContext;\n      expect(ctx.args.options.authorizedRoles).to.eql({\n        $everyone: true,\n        myRole: true\n      });\n    });\n  });","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"honors default permission setting","suites":["authorized roles propagation in RemotingContext"],"updatePoint":{"line":607,"column":39,"index":19866},"line":607,"code":"  it('honors default permission setting', function () {\n    // default permission is set to DENY for MyTestModel\n    models.MyTestModel.settings.defaultPermission = ACL.DENY;\n    return createACLs('MyTestModel', [{\n      permission: ACL.DEFAULT,\n      principalId: '$everyone'\n    }, {\n      permission: ACL.DENY,\n      principalId: '$authenticated'\n    }, {\n      permission: ACL.ALLOW,\n      principalId: 'myRole'\n    }]).then(makeAuthorizedHttpRequestOnMyTestModel).then(function () {\n      const ctx = models.MyTestModel.lastRemotingContext;\n      expect(ctx.args.options.authorizedRoles).to.eql( // '$everyone' is not expected as default permission is DENY\n      {\n        myRole: true\n      });\n    });\n  }); // helpers","file":"acl.test.js","skipped":false,"dir":"test"},{"name":"runs middleware in phases","suites":["app"],"updatePoint":{"line":44,"column":33,"index":989},"line":44,"code":"    it('runs middleware in phases', function (done) {\n      const PHASES = ['initial', 'session', 'auth', 'parse', 'routes', 'files', 'final'];\n      PHASES.forEach(function (name) {\n        app.middleware(name, namedHandler(name));\n      });\n      app.use(namedHandler('main'));\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['initial', 'session', 'auth', 'parse', 'main', 'routes', 'files', 'final']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"preserves order of handlers in the same phase","suites":["app"],"updatePoint":{"line":56,"column":53,"index":1519},"line":56,"code":"    it('preserves order of handlers in the same phase', function (done) {\n      app.middleware('initial', namedHandler('first'));\n      app.middleware('initial', namedHandler('second'));\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['first', 'second']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"supports `before:` and `after:` prefixes","suites":["app"],"updatePoint":{"line":65,"column":48,"index":1875},"line":65,"code":"    it('supports `before:` and `after:` prefixes', function (done) {\n      app.middleware('routes:before', namedHandler('routes:before'));\n      app.middleware('routes:after', namedHandler('routes:after'));\n      app.use(namedHandler('main'));\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['routes:before', 'main', 'routes:after']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"allows extra handlers on express stack during app.use","suites":["app"],"updatePoint":{"line":75,"column":61,"index":2328},"line":75,"code":"    it('allows extra handlers on express stack during app.use', function (done) {\n      function handlerThatAddsHandler(name) {\n        app.use(namedHandler('extra-handler'));\n        return namedHandler(name);\n      }\n\n      let myHandler;\n      app.middleware('routes:before', myHandler = handlerThatAddsHandler('my-handler'));\n\n      const found = app._findLayerByHandler(myHandler);\n\n      expect(found).to.be.an('object');\n      expect(myHandler).to.equal(found.handle);\n      expect(found).have.property('phase', 'routes:before');\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['my-handler', 'extra-handler']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"allows handlers to be wrapped as __NR_handler on express stack","suites":["app"],"updatePoint":{"line":95,"column":70,"index":3060},"line":95,"code":"    it('allows handlers to be wrapped as __NR_handler on express stack', function (done) {\n      const myHandler = namedHandler('my-handler');\n\n      const wrappedHandler = function (req, res, next) {\n        myHandler(req, res, next);\n      };\n\n      wrappedHandler['__NR_handler'] = myHandler;\n      app.middleware('routes:before', wrappedHandler);\n\n      const found = app._findLayerByHandler(myHandler);\n\n      expect(found).to.be.an('object');\n      expect(found).have.property('phase', 'routes:before');\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['my-handler']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"allows handlers to be wrapped as __appdynamicsProxyInfo__ on express stack","suites":["app"],"updatePoint":{"line":115,"column":82,"index":3751},"line":115,"code":"    it('allows handlers to be wrapped as __appdynamicsProxyInfo__ on express stack', function (done) {\n      const myHandler = namedHandler('my-handler');\n\n      const wrappedHandler = function (req, res, next) {\n        myHandler(req, res, next);\n      };\n\n      wrappedHandler['__appdynamicsProxyInfo__'] = {\n        orig: myHandler\n      };\n      app.middleware('routes:before', wrappedHandler);\n\n      const found = app._findLayerByHandler(myHandler);\n\n      expect(found).to.be.an('object');\n      expect(found).have.property('phase', 'routes:before');\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['my-handler']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"allows handlers to be wrapped as a property on express stack","suites":["app"],"updatePoint":{"line":137,"column":68,"index":4464},"line":137,"code":"    it('allows handlers to be wrapped as a property on express stack', function (done) {\n      const myHandler = namedHandler('my-handler');\n\n      const wrappedHandler = function (req, res, next) {\n        myHandler(req, res, next);\n      };\n\n      wrappedHandler['__handler'] = myHandler;\n      app.middleware('routes:before', wrappedHandler);\n\n      const found = app._findLayerByHandler(myHandler);\n\n      expect(found).to.be.an('object');\n      expect(found).have.property('phase', 'routes:before');\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['my-handler']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"injects error from previous phases into the router","suites":["app"],"updatePoint":{"line":157,"column":58,"index":5128},"line":157,"code":"    it('injects error from previous phases into the router', function (done) {\n      const expectedError = new Error('expected error');\n      app.middleware('initial', function (req, res, next) {\n        steps.push('initial');\n        next(expectedError);\n      }); // legacy solution for error handling\n\n      app.use(function errorHandler(err, req, res, next) {\n        expect(err).to.equal(expectedError);\n        steps.push('error');\n        next();\n      });\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['initial', 'error']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"passes unhandled error to callback","suites":["app"],"updatePoint":{"line":175,"column":42,"index":5751},"line":175,"code":"    it('passes unhandled error to callback', function (done) {\n      const expectedError = new Error('expected error');\n      app.middleware('initial', function (req, res, next) {\n        next(expectedError);\n      });\n      executeMiddlewareHandlers(app, function (err) {\n        expect(err).to.equal(expectedError);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"passes errors to error handlers in the same phase","suites":["app"],"updatePoint":{"line":185,"column":57,"index":6118},"line":185,"code":"    it('passes errors to error handlers in the same phase', function (done) {\n      const expectedError = new Error('this should be handled by middleware');\n      let handledError;\n      app.middleware('initial', function (req, res, next) {\n        // continue in the next tick, this verifies that the next\n        // handler waits until the previous one is done\n        process.nextTick(function () {\n          next(expectedError);\n        });\n      });\n      app.middleware('initial', function (err, req, res, next) {\n        handledError = err;\n        next();\n      });\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done(err);\n        expect(handledError).to.equal(expectedError);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"scopes middleware to a string path","suites":["app"],"updatePoint":{"line":205,"column":42,"index":6854},"line":205,"code":"    it('scopes middleware to a string path', function (done) {\n      app.middleware('initial', '/scope', pathSavingHandler());\n      async.eachSeries(['/', '/scope', '/scope/item', '/other'], function (url, next) {\n        executeMiddlewareHandlers(app, url, next);\n      }, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['/scope', '/scope/item']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"scopes middleware to a regex path","suites":["app"],"updatePoint":{"line":215,"column":41,"index":7271},"line":215,"code":"    it('scopes middleware to a regex path', function (done) {\n      app.middleware('initial', /^\\/(a|b)/, pathSavingHandler());\n      async.eachSeries(['/', '/a', '/b', '/c'], function (url, next) {\n        executeMiddlewareHandlers(app, url, next);\n      }, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['/a', '/b']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"scopes middleware to a list of scopes","suites":["app"],"updatePoint":{"line":225,"column":45,"index":7664},"line":225,"code":"    it('scopes middleware to a list of scopes', function (done) {\n      app.middleware('initial', ['/scope', /^\\/(a|b)/], pathSavingHandler());\n      async.eachSeries(['/', '/a', '/b', '/c', '/scope', '/other'], function (url, next) {\n        executeMiddlewareHandlers(app, url, next);\n      }, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['/a', '/b', '/scope']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"sets req.url to a sub-path","suites":["app"],"updatePoint":{"line":235,"column":34,"index":8088},"line":235,"code":"    it('sets req.url to a sub-path', function (done) {\n      app.middleware('initial', ['/scope'], function (req, res, next) {\n        steps.push(req.url);\n        next();\n      });\n      executeMiddlewareHandlers(app, '/scope/id', function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['/id']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"exposes express helpers on req and res objects","suites":["app"],"updatePoint":{"line":246,"column":54,"index":8465},"line":246,"code":"    it('exposes express helpers on req and res objects', function (done) {\n      let req, res;\n      app.middleware('initial', function (rq, rs, next) {\n        req = rq;\n        res = rs;\n        next();\n      });\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done(err);\n        expect(getObjectAndPrototypeKeys(req), 'request').to.include.members(['accepts', 'get', 'param', 'params', 'query', 'res']);\n        expect(getObjectAndPrototypeKeys(res), 'response').to.include.members(['cookie', 'download', 'json', 'jsonp', 'redirect', 'req', 'send', 'sendFile', 'set']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"sets req.baseUrl and req.originalUrl","suites":["app"],"updatePoint":{"line":260,"column":44,"index":9092},"line":260,"code":"    it('sets req.baseUrl and req.originalUrl', function (done) {\n      let reqProps;\n      app.middleware('initial', function (req, res, next) {\n        reqProps = {\n          baseUrl: req.baseUrl,\n          originalUrl: req.originalUrl\n        };\n        next();\n      });\n      executeMiddlewareHandlers(app, '/test/url', function (err) {\n        if (err) return done(err);\n        expect(reqProps).to.eql({\n          baseUrl: '',\n          originalUrl: '/test/url'\n        });\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"preserves correct order of routes vs. middleware","suites":["app"],"updatePoint":{"line":278,"column":56,"index":9618},"line":278,"code":"    it('preserves correct order of routes vs. middleware', function (done) {\n      // This test verifies that `app.route` triggers sort of layers\n      app.middleware('files', namedHandler('files'));\n      app.get('/test', namedHandler('route'));\n      executeMiddlewareHandlers(app, '/test', function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['route', 'files']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"preserves order of middleware in the same phase","suites":["app"],"updatePoint":{"line":288,"column":55,"index":10046},"line":288,"code":"    it('preserves order of middleware in the same phase', function (done) {\n      // while we are discouraging developers from depending on\n      // the registration order of middleware in the same phase,\n      // we must preserve the order for compatibility with `app.use`\n      // and `app.route`.\n      // we need at least 9 elements to expose non-stability\n      // of the built-in sort function\n      const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n      numbers.forEach(function (n) {\n        app.middleware('routes', namedHandler(n));\n      });\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done;\n        expect(steps).to.eql(numbers);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"correctly mounts express apps","suites":["app"],"updatePoint":{"line":305,"column":37,"index":10734},"line":305,"code":"    it('correctly mounts express apps', function (done) {\n      let data, mountWasEmitted;\n      const subapp = express();\n      subapp.use(function (req, res, next) {\n        data = {\n          mountpath: req.app.mountpath,\n          parent: req.app.parent\n        };\n        next();\n      });\n      subapp.on('mount', function () {\n        mountWasEmitted = true;\n      });\n      app.middleware('routes', '/mountpath', subapp);\n      executeMiddlewareHandlers(app, '/mountpath/test', function (err) {\n        if (err) return done(err);\n        expect(mountWasEmitted, 'mountWasEmitted').to.be.true();\n        expect(data).to.eql({\n          mountpath: '/mountpath',\n          parent: app\n        });\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"restores req & res on return from mounted express app","suites":["app"],"updatePoint":{"line":329,"column":61,"index":11494},"line":329,"code":"    it('restores req & res on return from mounted express app', function (done) {\n      const expected = {};\n      const actual = {};\n      const subapp = express();\n      subapp.use(function verifyTestAssumptions(req, res, next) {\n        expect(req.__proto__).to.not.equal(expected.req);\n        expect(res.__proto__).to.not.equal(expected.res);\n        next();\n      });\n      app.middleware('initial', function saveOriginalValues(req, res, next) {\n        expected.req = req.__proto__;\n        expected.res = res.__proto__;\n        next();\n      });\n      app.middleware('routes', subapp);\n      app.middleware('final', function saveActualValues(req, res, next) {\n        actual.req = req.__proto__;\n        actual.res = res.__proto__;\n        next();\n      });\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done(err);\n        expect(actual.req, 'req').to.equal(expected.req);\n        expect(actual.res, 'res').to.equal(expected.res);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"provides API for loading middleware from JSON config","suites":["app"],"updatePoint":{"line":383,"column":60,"index":13024},"line":383,"code":"    it('provides API for loading middleware from JSON config', function (done) {\n      const steps = [];\n      const expectedConfig = {\n        key: 'value'\n      };\n\n      const handlerFactory = function () {\n        const args = Array.prototype.slice.apply(arguments);\n        return function (req, res, next) {\n          steps.push(args);\n          next();\n        };\n      }; // Config as an object (single arg)\n\n\n      app.middlewareFromConfig(handlerFactory, {\n        enabled: true,\n        phase: 'session',\n        params: expectedConfig\n      }); // Config as a value (single arg)\n\n      app.middlewareFromConfig(handlerFactory, {\n        enabled: true,\n        phase: 'session:before',\n        params: 'before'\n      }); // Config as a list of args\n\n      app.middlewareFromConfig(handlerFactory, {\n        enabled: true,\n        phase: 'session:after',\n        params: ['after', 2]\n      }); // Disabled by configuration\n\n      app.middlewareFromConfig(handlerFactory, {\n        enabled: false,\n        phase: 'initial',\n        params: null\n      }); // This should be triggered with matching verbs\n\n      app.middlewareFromConfig(handlerFactory, {\n        enabled: true,\n        phase: 'routes:before',\n        methods: ['get', 'head'],\n        params: {\n          x: 1\n        }\n      }); // This should be skipped as the verb doesn't match\n\n      app.middlewareFromConfig(handlerFactory, {\n        enabled: true,\n        phase: 'routes:before',\n        methods: ['post'],\n        params: {\n          x: 2\n        }\n      });\n      executeMiddlewareHandlers(app, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql([['before'], [expectedConfig], ['after', 2], [{\n          x: 1\n        }]]);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"scopes middleware from config to a list of scopes","suites":["app"],"updatePoint":{"line":447,"column":57,"index":14791},"line":447,"code":"    it('scopes middleware from config to a list of scopes', function (done) {\n      const steps = [];\n      app.middlewareFromConfig(function factory() {\n        return function (req, res, next) {\n          steps.push(req.originalUrl);\n          next();\n        };\n      }, {\n        phase: 'initial',\n        paths: ['/scope', /^\\/(a|b)/]\n      });\n      async.eachSeries(['/', '/a', '/b', '/c', '/scope', '/other'], function (url, next) {\n        executeMiddlewareHandlers(app, url, next);\n      }, function (err) {\n        if (err) return done(err);\n        expect(steps).to.eql(['/a', '/b', '/scope']);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"adds the phase just before `routes` by default","suites":["app"],"updatePoint":{"line":472,"column":54,"index":15583},"line":472,"code":"    it('adds the phase just before `routes` by default', function (done) {\n      app.defineMiddlewarePhases('custom');\n      verifyMiddlewarePhases(['custom', 'routes'], done);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"merges phases adding to the start of the list","suites":["app"],"updatePoint":{"line":476,"column":53,"index":15767},"line":476,"code":"    it('merges phases adding to the start of the list', function (done) {\n      app.defineMiddlewarePhases(['first', 'routes', 'subapps']);\n      verifyMiddlewarePhases(['first', 'initial', // this was the original first phase\n      'routes', 'subapps'], done);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"merges phases preserving the order","suites":["app"],"updatePoint":{"line":481,"column":42,"index":16026},"line":481,"code":"    it('merges phases preserving the order', function (done) {\n      app.defineMiddlewarePhases(['initial', 'postinit', 'preauth', // add\n      'auth', 'routes', 'subapps', // add\n      'final', 'last' // add\n      ]);\n      verifyMiddlewarePhases(['initial', 'postinit', 'preauth', // new\n      'auth', 'routes', 'subapps', // new\n      'files', 'final', 'last' // new\n      ], done);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"throws helpful error on ordering conflict","suites":["app"],"updatePoint":{"line":491,"column":49,"index":16427},"line":491,"code":"    it('throws helpful error on ordering conflict', function () {\n      app.defineMiddlewarePhases(['first', 'second']);\n      expect(function () {\n        app.defineMiddlewarePhases(['second', 'first']);\n      }).to.throw(/Ordering conflict.*first.*second/);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"Expose a `Model` to remote clients","suites":["app","app.model(Model)"],"updatePoint":{"line":528,"column":42,"index":17482},"line":528,"code":"    it('Expose a `Model` to remote clients', function () {\n      const Color = PersistedModel.extend('color', {\n        name: String\n      });\n      app.model(Color);\n      Color.attachTo(db);\n      expect(app.models()).to.eql([Color]);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"uses singular name as app.remoteObjects() key","suites":["app","app.model(Model)"],"updatePoint":{"line":536,"column":53,"index":17738},"line":536,"code":"    it('uses singular name as app.remoteObjects() key', function () {\n      const Color = PersistedModel.extend('color', {\n        name: String\n      });\n      app.model(Color);\n      Color.attachTo(db);\n      expect(app.remoteObjects()).to.eql({\n        color: Color\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"uses singular name as shared class name","suites":["app","app.model(Model)"],"updatePoint":{"line":546,"column":47,"index":18018},"line":546,"code":"    it('uses singular name as shared class name', function () {\n      const Color = PersistedModel.extend('color', {\n        name: String\n      });\n      app.model(Color);\n      Color.attachTo(db);\n      const classes = app.remotes().classes().map(function (c) {\n        return c.name;\n      });\n      expect(classes).to.contain('color');\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"registers existing models to app.models","suites":["app","app.model(Model)"],"updatePoint":{"line":557,"column":47,"index":18365},"line":557,"code":"    it('registers existing models to app.models', function () {\n      const Color = db.createModel('color', {\n        name: String\n      });\n      app.model(Color);\n      expect(Color.app).to.be.equal(app);\n      expect(Color.shared).to.equal(true);\n      expect(app.models.color).to.equal(Color);\n      expect(app.models.Color).to.equal(Color);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"emits a `modelRemoted` event","suites":["app","app.model(Model)"],"updatePoint":{"line":567,"column":36,"index":18708},"line":567,"code":"    it('emits a `modelRemoted` event', function () {\n      const Color = PersistedModel.extend('color', {\n        name: String\n      });\n      Color.shared = true;\n      let remotedClass;\n      app.on('modelRemoted', function (sharedClass) {\n        remotedClass = sharedClass;\n      });\n      app.model(Color);\n      expect(remotedClass).to.exist();\n      expect(remotedClass).to.eql(Color.sharedClass);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"emits a `remoteMethodDisabled` event","suites":["app","app.model(Model)"],"updatePoint":{"line":580,"column":44,"index":19129},"line":580,"code":"    it('emits a `remoteMethodDisabled` event', function () {\n      const Color = PersistedModel.extend('color', {\n        name: String\n      });\n      Color.shared = true;\n      let remoteMethodDisabledClass, disabledRemoteMethod;\n      app.on('remoteMethodDisabled', function (sharedClass, methodName) {\n        remoteMethodDisabledClass = sharedClass;\n        disabledRemoteMethod = methodName;\n      });\n      app.model(Color);\n      app.models.Color.disableRemoteMethodByName('findOne');\n      expect(remoteMethodDisabledClass).to.exist();\n      expect(remoteMethodDisabledClass).to.eql(Color.sharedClass);\n      expect(disabledRemoteMethod).to.exist();\n      expect(disabledRemoteMethod).to.eql('findOne');\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"emits a `remoteMethodAdded` event","suites":["app","app.model(Model)"],"updatePoint":{"line":597,"column":41,"index":19846},"line":597,"code":"    it('emits a `remoteMethodAdded` event', function () {\n      app.dataSource('db', {\n        connector: 'memory'\n      });\n      const Book = app.registry.createModel('Book', {\n        name: 'string'\n      }, {\n        plural: 'books'\n      });\n      app.model(Book, {\n        dataSource: 'db'\n      });\n      const Page = app.registry.createModel('Page', {\n        name: 'string'\n      }, {\n        plural: 'pages'\n      });\n      app.model(Page, {\n        dataSource: 'db'\n      });\n      Book.hasMany(Page);\n      let remoteMethodAddedClass;\n      app.on('remoteMethodAdded', function (sharedClass) {\n        remoteMethodAddedClass = sharedClass;\n      });\n      Book.nestRemoting('pages');\n      expect(remoteMethodAddedClass).to.exist();\n      expect(remoteMethodAddedClass).to.eql(Book.sharedClass);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"accepts null dataSource","suites":["app","app.model(Model)"],"updatePoint":{"line":626,"column":31,"index":20652},"line":626,"code":"    it('accepts null dataSource', function (done) {\n      app.model(MyTestModel, {\n        dataSource: null\n      });\n      expect(MyTestModel.dataSource).to.eql(null);\n      done();\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"accepts false dataSource","suites":["app","app.model(Model)"],"updatePoint":{"line":633,"column":32,"index":20844},"line":633,"code":"    it('accepts false dataSource', function (done) {\n      app.model(MyTestModel, {\n        dataSource: false\n      });\n      expect(MyTestModel.getDataSource()).to.eql(null);\n      done();\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"does not require dataSource","suites":["app","app.model(Model)"],"updatePoint":{"line":640,"column":35,"index":21045},"line":640,"code":"    it('does not require dataSource', function (done) {\n      app.model(MyTestModel);\n      done();\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"throws error if model typeof string is passed","suites":["app","app.model(Model)"],"updatePoint":{"line":644,"column":53,"index":21171},"line":644,"code":"    it('throws error if model typeof string is passed', function () {\n      const fn = function () {\n        app.model('MyTestModel');\n      };\n\n      expect(fn).to.throw(/app(\\.model|\\.registry)/);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"attaches the model to a datasource","suites":["app","app.model(ModelCtor, config)"],"updatePoint":{"line":653,"column":42,"index":21430},"line":653,"code":"    it('attaches the model to a datasource', function () {\n      const previousModel = loopback.registry.findModel('TestModel');\n      app.dataSource('db', {\n        connector: 'memory'\n      });\n\n      if (previousModel) {\n        delete previousModel.dataSource;\n      }\n\n      assert(!previousModel || !previousModel.dataSource);\n      const TestModel = app.registry.createModel('TestModel');\n      app.model(TestModel, {\n        dataSource: 'db'\n      });\n      expect(app.models.TestModel.dataSource).to.equal(app.dataSources.db);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"removes the model from app registries","suites":["app","app.deleteModelByName()"],"updatePoint":{"line":674,"column":45,"index":22080},"line":674,"code":"    it('removes the model from app registries', () => {\n      expect(Object.keys(app.models)).to.contain('test-model').and.contain('TestModel').and.contain('testModel');\n      expect(app.models().map(m => m.modelName)).to.contain('test-model');\n      app.deleteModelByName('test-model');\n      expect(Object.keys(app.models)).to.not.contain('test-model').and.not.contain('TestModel').and.not.contain('testModel');\n      expect(app.models().map(m => m.modelName)).to.not.contain('test-model');\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"removes the model from juggler registries","suites":["app","app.deleteModelByName()"],"updatePoint":{"line":681,"column":49,"index":22585},"line":681,"code":"    it('removes the model from juggler registries', () => {\n      expect(Object.keys(app.registry.modelBuilder.models)).to.contain('test-model');\n      app.deleteModelByName('test-model');\n      expect(Object.keys(app.registry.modelBuilder.models)).to.not.contain('test-model');\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"removes the model from remoting registries","suites":["app","app.deleteModelByName()"],"updatePoint":{"line":686,"column":50,"index":22873},"line":686,"code":"    it('removes the model from remoting registries', () => {\n      expect(Object.keys(app.remotes()._classes)).to.contain('test-model');\n      app.deleteModelByName('test-model');\n      expect(Object.keys(app.remotes()._classes)).to.not.contain('test-model');\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"emits \"modelDeleted\" event","suites":["app","app.deleteModelByName()"],"updatePoint":{"line":691,"column":34,"index":23125},"line":691,"code":"    it('emits \"modelDeleted\" event', () => {\n      const spy = sinon.spy();\n      app.on('modelDeleted', spy);\n      app.deleteModelByName('test-model');\n      sinon.assert.calledWith(spy, TestModel);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"is unique per app instance","suites":["app","app.models"],"updatePoint":{"line":709,"column":34,"index":23587},"line":709,"code":"    it('is unique per app instance', function () {\n      app.dataSource('db', {\n        connector: 'memory'\n      });\n      const Color = app.registry.createModel('Color');\n      app.model(Color, {\n        dataSource: 'db'\n      });\n      expect(app.models.Color).to.equal(Color);\n      const anotherApp = loopback();\n      expect(anotherApp.models.Color).to.equal(undefined);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"is unique per app instance","suites":["app","app.dataSources"],"updatePoint":{"line":723,"column":34,"index":24022},"line":723,"code":"    it('is unique per app instance', function () {\n      app.dataSource('ds', {\n        connector: 'memory'\n      });\n      expect(app.datasources.ds).to.not.equal(undefined);\n      const anotherApp = loopback();\n      expect(anotherApp.datasources.ds).to.equal(undefined);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"looks up the connector in `app.connectors`","suites":["app","app.dataSource"],"updatePoint":{"line":733,"column":50,"index":24369},"line":733,"code":"    it('looks up the connector in `app.connectors`', function () {\n      app.connector('custom', loopback.Memory);\n      app.dataSource('custom', {\n        connector: 'custom'\n      });\n      expect(app.dataSources.custom.name).to.equal('custom');\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"adds data source name to error messages","suites":["app","app.dataSource"],"updatePoint":{"line":740,"column":47,"index":24622},"line":740,"code":"    it('adds data source name to error messages', function () {\n      app.connector('throwing', {\n        initialize: function () {\n          throw new Error('expected test error');\n        }\n      });\n      expect(function () {\n        app.dataSource('bad-ds', {\n          connector: 'throwing'\n        });\n      }).to.throw(/bad-ds.*throwing/);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"adds app reference to the data source object","suites":["app","app.dataSource"],"updatePoint":{"line":752,"column":52,"index":24982},"line":752,"code":"    it('adds app reference to the data source object', function () {\n      app.dataSource('ds', {\n        connector: 'memory'\n      });\n      expect(app.datasources.ds.app).to.not.equal(undefined);\n      expect(app.datasources.ds.app).to.equal(app);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"starts http server","suites":["app","app.dataSource"],"updatePoint":{"line":761,"column":26,"index":25266},"line":761,"code":"    it('starts http server', function (done) {\n      const app = loopback();\n      app.set('port', 0);\n      app.get('/', function (req, res) {\n        res.status(200).send('OK');\n      });\n      const server = app.listen();\n      expect(server).to.be.an.instanceOf(require('http').Server);\n      request(server).get('/').expect(200, done);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"updates port on `listening` event","suites":["app","app.dataSource"],"updatePoint":{"line":771,"column":41,"index":25630},"line":771,"code":"    it('updates port on `listening` event', function (done) {\n      const app = loopback();\n      app.set('port', 0);\n      app.listen(function () {\n        expect(app.get('port'), 'port').to.not.equal(0);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"updates `url` on `listening` event","suites":["app","app.dataSource"],"updatePoint":{"line":779,"column":42,"index":25871},"line":779,"code":"    it('updates `url` on `listening` event', function (done) {\n      const app = loopback();\n      app.set('port', 0);\n      app.set('host', undefined);\n      app.listen(function () {\n        const expectedUrl = 'http://localhost:' + app.get('port') + '/';\n        expect(app.get('url'), 'url').to.equal(expectedUrl);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"forwards to http.Server.listen on more than one arg","suites":["app","app.dataSource"],"updatePoint":{"line":789,"column":59,"index":26240},"line":789,"code":"    it('forwards to http.Server.listen on more than one arg', function (done) {\n      const app = loopback();\n      app.set('port', 1);\n      app.listen(0, '127.0.0.1', function () {\n        expect(app.get('port'), 'port').to.not.equal(0).and.not.equal(1);\n        expect(this.address().address).to.equal('127.0.0.1');\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"forwards to http.Server.listen when the single arg is not a function","suites":["app","app.dataSource"],"updatePoint":{"line":798,"column":76,"index":26610},"line":798,"code":"    it('forwards to http.Server.listen when the single arg is not a function', function (done) {\n      const app = loopback();\n      app.set('port', 1);\n      app.listen(0).on('listening', function () {\n        expect(app.get('port'), 'port').to.not.equal(0).and.not.equal(1);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"uses app config when no parameter is supplied","suites":["app","app.dataSource"],"updatePoint":{"line":806,"column":53,"index":26898},"line":806,"code":"    it('uses app config when no parameter is supplied', function (done) {\n      const app = loopback(); // Http listens on all interfaces by default\n      // Custom host serves as an indicator whether\n      // the value was used by app.listen\n\n      app.set('host', '127.0.0.1');\n      app.listen().on('listening', function () {\n        expect(this.address().address).to.equal('127.0.0.1');\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"should set app.isAuthEnabled to true","suites":["app","app.dataSource"],"updatePoint":{"line":819,"column":44,"index":27368},"line":819,"code":"    it('should set app.isAuthEnabled to true', function () {\n      expect(app.isAuthEnabled).to.not.equal(true);\n      app.enableAuth();\n      expect(app.isAuthEnabled).to.equal(true);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"auto-configures required models to provided dataSource","suites":["app","app.dataSource"],"updatePoint":{"line":824,"column":62,"index":27579},"line":824,"code":"    it('auto-configures required models to provided dataSource', function () {\n      const AUTH_MODELS = ['User', 'ACL', 'AccessToken', 'Role', 'RoleMapping'];\n      const app = loopback({\n        localRegistry: true,\n        loadBuiltinModels: true\n      });\n\n      require('../lib/builtin-models')(app.registry);\n\n      const db = app.dataSource('db', {\n        connector: 'memory'\n      });\n      app.enableAuth({\n        dataSource: 'db'\n      });\n      expect(Object.keys(app.models)).to.include.members(AUTH_MODELS);\n      AUTH_MODELS.forEach(function (m) {\n        const Model = app.models[m];\n        expect(Model.dataSource, m + '.dataSource').to.equal(db);\n        expect(Model.shared, m + '.shared').to.equal(m === 'User');\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"detects already configured subclass of a required model","suites":["app","app.dataSource"],"updatePoint":{"line":846,"column":63,"index":28333},"line":846,"code":"    it('detects already configured subclass of a required model', function () {\n      const app = loopback({\n        localRegistry: true,\n        loadBuiltinModels: true\n      });\n      const db = app.dataSource('db', {\n        connector: 'memory'\n      });\n      const Customer = app.registry.createModel('Customer', {}, {\n        base: 'User'\n      });\n      app.model(Customer, {\n        dataSource: 'db'\n      }); // Fix AccessToken's \"belongsTo user\" relation to use our new Customer model\n\n      const AccessToken = app.registry.getModel('AccessToken');\n      AccessToken.settings.relations.user.model = 'Customer';\n      app.enableAuth({\n        dataSource: 'db'\n      });\n      expect(Object.keys(app.models)).to.not.include('User');\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"should return the status of the application","suites":["app","app.dataSource"],"updatePoint":{"line":870,"column":51,"index":29148},"line":870,"code":"    it('should return the status of the application', function (done) {\n      const app = loopback();\n      app.get('/', loopback.status());\n      request(app).get('/').expect(200).end(function (err, res) {\n        if (err) return done(err);\n        expect(res.body).to.be.an('object');\n        expect(res.body).to.have.property('started');\n        expect(res.body.uptime, 'uptime').to.be.gte(0);\n        const elapsed = Date.now() - Number(new Date(res.body.started)); // elapsed should be a small positive number...\n\n        expect(elapsed, 'elapsed').to.be.within(0, 300);\n        done();\n      });\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"is unique per app instance","suites":["app","app.connectors"],"updatePoint":{"line":886,"column":34,"index":29790},"line":886,"code":"    it('is unique per app instance', function () {\n      app.connectors.foo = 'bar';\n      const anotherApp = loopback();\n      expect(anotherApp.connectors.foo).to.equal(undefined);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"includes Remote connector","suites":["app","app.connectors"],"updatePoint":{"line":891,"column":33,"index":29980},"line":891,"code":"    it('includes Remote connector', function () {\n      expect(app.connectors.remote).to.equal(loopback.Remote);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"includes Memory connector","suites":["app","app.connectors"],"updatePoint":{"line":894,"column":33,"index":30101},"line":894,"code":"    it('includes Memory connector', function () {\n      expect(app.connectors.memory).to.equal(loopback.Memory);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"adds the connector to the registry","suites":["app","app.connector"],"updatePoint":{"line":900,"column":42,"index":30308},"line":900,"code":"    it('adds the connector to the registry', function () {\n      app.connector('foo-bar', loopback.Memory);\n      expect(app.connectors['foo-bar']).to.equal(loopback.Memory);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"adds a classified alias","suites":["app","app.connector"],"updatePoint":{"line":904,"column":31,"index":30480},"line":904,"code":"    it('adds a classified alias', function () {\n      app.connector('foo-bar', loopback.Memory);\n      expect(app.connectors.FooBar).to.equal(loopback.Memory);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"adds a camelized alias","suites":["app","app.connector"],"updatePoint":{"line":908,"column":30,"index":30647},"line":908,"code":"    it('adds a camelized alias', function () {\n      app.connector('FOO-BAR', loopback.Memory);\n      expect(app.connectors.FOOBAR).to.equal(loopback.Memory);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"can be altered via `app.set(key, value)`","suites":["app","app.settings"],"updatePoint":{"line":914,"column":48,"index":30879},"line":914,"code":"    it('can be altered via `app.set(key, value)`', function () {\n      app.set('write-key', 'write-value');\n      expect(app.settings).to.have.property('write-key', 'write-value');\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"can be read via `app.get(key)`","suites":["app","app.settings"],"updatePoint":{"line":918,"column":38,"index":31058},"line":918,"code":"    it('can be read via `app.get(key)`', function () {\n      app.settings['read-key'] = 'read-value';\n      expect(app.get('read-key')).to.equal('read-value');\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"is unique per app instance","suites":["app","app.settings"],"updatePoint":{"line":922,"column":34,"index":31222},"line":922,"code":"    it('is unique per app instance', function () {\n      const app1 = loopback();\n      const app2 = loopback();\n      expect(app1.settings).to.not.equal(app2.settings);\n      app1.set('key', 'value');\n      expect(app2.get('key'), 'app2 value').to.equal(undefined);\n    });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"exposes loopback as a property","suites":["app","app.settings"],"updatePoint":{"line":930,"column":36,"index":31505},"line":930,"code":"  it('exposes loopback as a property', function () {\n    const app = loopback();\n    expect(app.loopback).to.equal(loopback);\n  });","file":"app.test.js","skipped":false,"dir":"test"},{"name":"denies regular token to invoke custom-scoped method","suites":["Authorization scopes"],"updatePoint":{"line":25,"column":57,"index":891},"line":25,"code":"  it('denies regular token to invoke custom-scoped method', () => {\n    logServerErrorsOtherThan(401, app);\n    return request.get('/users/scoped').set('Authorization', regularToken.id).expect(401);\n  });","file":"authorization-scopes.test.js","skipped":false,"dir":"test"},{"name":"allows regular tokens to invoke default-scoped method","suites":["Authorization scopes"],"updatePoint":{"line":29,"column":59,"index":1098},"line":29,"code":"  it('allows regular tokens to invoke default-scoped method', () => {\n    logAllServerErrors(app);\n    return request.get('/users/' + testUser.id).set('Authorization', regularToken.id).expect(200);\n  });","file":"authorization-scopes.test.js","skipped":false,"dir":"test"},{"name":"allows scoped token to invoke custom-scoped method","suites":["Authorization scopes"],"updatePoint":{"line":33,"column":56,"index":1299},"line":33,"code":"  it('allows scoped token to invoke custom-scoped method', () => {\n    logAllServerErrors(app);\n    return request.get('/users/scoped').set('Authorization', scopedToken.id).expect(204);\n  });","file":"authorization-scopes.test.js","skipped":false,"dir":"test"},{"name":"denies scoped token to invoke default-scoped method","suites":["Authorization scopes"],"updatePoint":{"line":37,"column":57,"index":1492},"line":37,"code":"  it('denies scoped token to invoke default-scoped method', () => {\n    logServerErrorsOtherThan(401, app);\n    return request.get('/users/' + testUser.id).set('Authorization', scopedToken.id).expect(401);\n  });","file":"authorization-scopes.test.js","skipped":false,"dir":"test"},{"name":"allows invocation of default-scoped method","suites":["Authorization scopes","token granted both default and custom scope"],"updatePoint":{"line":44,"column":50,"index":1922},"line":44,"code":"    it('allows invocation of default-scoped method', () => {\n      return request.get('/users/' + testUser.id).set('Authorization', scopedToken.id).expect(200);\n    });","file":"authorization-scopes.test.js","skipped":false,"dir":"test"},{"name":"allows invocation of custom-scoped method","suites":["Authorization scopes","token granted both default and custom scope"],"updatePoint":{"line":47,"column":49,"index":2090},"line":47,"code":"    it('allows invocation of custom-scoped method', () => {\n      return request.get('/users/scoped').set('Authorization', scopedToken.id).expect(204);\n    });","file":"authorization-scopes.test.js","skipped":false,"dir":"test"},{"name":"allows invocation when at least one method scope is matched","suites":["Authorization scopes","token granted both default and custom scope"],"updatePoint":{"line":51,"column":65,"index":2272},"line":51,"code":"  it('allows invocation when at least one method scope is matched', () => {\n    givenRemoteMethodWithCustomScope(['read', 'write']);\n    return givenScopedToken(['read', 'execute']).then(() => {\n      return request.get('/users/scoped').set('Authorization', scopedToken.id).expect(204);\n    });\n  });","file":"authorization-scopes.test.js","skipped":false,"dir":"test"},{"name":"should detect create","suites":["PersistedModel.createChangeStream()","configured to source changes locally"],"updatePoint":{"line":31,"column":28,"index":908},"line":31,"code":"    it('should detect create', function (done) {\n      const Score = this.Score;\n      Score.createChangeStream(function (err, changes) {\n        changes.on('data', function (change) {\n          expect(change.type).to.equal('create');\n          changes.destroy();\n          done();\n        });\n        Score.create({\n          team: 'foo'\n        });\n      });\n    });","file":"change-stream.test.js","skipped":false,"dir":"test"},{"name":"should detect update","suites":["PersistedModel.createChangeStream()","configured to source changes locally"],"updatePoint":{"line":44,"column":28,"index":1277},"line":44,"code":"    it('should detect update', function (done) {\n      const Score = this.Score;\n      Score.create({\n        team: 'foo'\n      }, function (err, newScore) {\n        Score.createChangeStream(function (err, changes) {\n          changes.on('data', function (change) {\n            expect(change.type).to.equal('update');\n            changes.destroy();\n            done();\n          });\n          newScore.updateAttributes({\n            bat: 'baz'\n          });\n        });\n      });\n    });","file":"change-stream.test.js","skipped":false,"dir":"test"},{"name":"should detect delete","suites":["PersistedModel.createChangeStream()","configured to source changes locally"],"updatePoint":{"line":61,"column":28,"index":1765},"line":61,"code":"    it('should detect delete', function (done) {\n      const Score = this.Score;\n      Score.create({\n        team: 'foo'\n      }, function (err, newScore) {\n        Score.createChangeStream(function (err, changes) {\n          changes.on('data', function (change) {\n            expect(change.type).to.equal('remove');\n            changes.destroy();\n            done();\n          });\n          newScore.remove();\n        });\n      });\n    });","file":"change-stream.test.js","skipped":false,"dir":"test"},{"name":"should apply \"where\" and \"fields\" to create events","suites":["PersistedModel.createChangeStream()","configured to source changes locally"],"updatePoint":{"line":76,"column":58,"index":2237},"line":76,"code":"    it('should apply \"where\" and \"fields\" to create events', function () {\n      const Score = this.Score;\n      const data = [{\n        team: 'baz',\n        player: 'baz',\n        value: 1\n      }, {\n        team: 'bar',\n        player: 'baz',\n        value: 2\n      }, {\n        team: 'foo',\n        player: 'bar',\n        value: 3\n      }];\n      const options = {\n        where: {\n          player: 'bar'\n        },\n        fields: ['team', 'value']\n      };\n      const changes = [];\n      let changeStream;\n      return Score.createChangeStream(options).then(stream => {\n        changeStream = stream;\n        changeStream.on('data', function (change) {\n          changes.push(change);\n        });\n        return Score.create(data);\n      }).then(scores => {\n        changeStream.destroy();\n        expect(changes).to.have.length(1);\n        expect(changes[0]).to.have.property('type', 'create');\n        expect(changes[0].data).to.eql({\n          'team': 'foo',\n          value: 3\n        });\n      });\n    });","file":"change-stream.test.js","skipped":false,"dir":"test"},{"name":"should not emit changes after destroy","suites":["PersistedModel.createChangeStream()","configured to source changes locally"],"updatePoint":{"line":115,"column":45,"index":3242},"line":115,"code":"    it('should not emit changes after destroy', function (done) {\n      const Score = this.Score;\n      const spy = sinon.spy();\n      Score.createChangeStream(function (err, changes) {\n        changes.on('data', function () {\n          spy();\n          changes.destroy();\n        });\n        Score.create({\n          team: 'foo'\n        }).then(() => Score.deleteAll()).then(() => {\n          expect(spy.calledOnce);\n          done();\n        });\n      });\n    });","file":"change-stream.test.js","skipped":false,"dir":"test"},{"name":"should detect a change","suites":["PersistedModel.createChangeStream()","configured to source changes using pubsub"],"updatePoint":{"line":159,"column":30,"index":4491},"line":159,"code":"    it('should detect a change', function (done) {\n      const Score = this.Score;\n      Score.createChangeStream(function (err, changes) {\n        changes.on('data', function (change) {\n          done();\n        });\n      });\n    });","file":"change-stream.test.js","skipped":true,"dir":"test"},{"name":"Shouldnt create two models if called twice","suites":["Change","Change.getCheckpointModel()"],"updatePoint":{"line":48,"column":50,"index":1285},"line":48,"code":"    it('Shouldnt create two models if called twice', function () {\n      assert.equal(Change.getCheckpointModel(), Change.getCheckpointModel());\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should be a hash of the modelName and modelId","suites":["Change","change.id"],"updatePoint":{"line":53,"column":53,"index":1485},"line":53,"code":"    it('should be a hash of the modelName and modelId', function () {\n      const change = new Change({\n        rev: 'abc',\n        modelName: 'foo',\n        modelId: 'bar'\n      });\n      const hash = Change.hash([change.modelName, change.modelId].join('-'));\n      assert.equal(change.id, hash);\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should create an entry","suites":["Change","Change.rectifyModelChanges(modelName, modelIds, callback)","using an existing untracked model"],"updatePoint":{"line":72,"column":32,"index":2165},"line":72,"code":"      it('should create an entry', function (done) {\n        const test = this;\n        Change.find(function (err, trackedChanges) {\n          assert.equal(trackedChanges[0].modelId, test.modelId.toString());\n          done();\n        });\n      });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should only create one change","suites":["Change","Change.rectifyModelChanges(modelName, modelIds, callback)","using an existing untracked model"],"updatePoint":{"line":79,"column":39,"index":2421},"line":79,"code":"      it('should only create one change', function (done) {\n        Change.count(function (err, count) {\n          assert.equal(count, 1);\n          done();\n        });\n      });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should create an entry","suites":["Change","Change.rectifyModelChanges - promise variant","using an existing untracked model"],"updatePoint":{"line":95,"column":32,"index":2958},"line":95,"code":"      it('should create an entry', function (done) {\n        const test = this;\n        Change.find().then(function (trackedChanges) {\n          assert.equal(trackedChanges[0].modelId, test.modelId.toString());\n          done();\n        }).catch(done);\n      });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should only create one change","suites":["Change","Change.rectifyModelChanges - promise variant","using an existing untracked model"],"updatePoint":{"line":102,"column":39,"index":3228},"line":102,"code":"      it('should only create one change', function (done) {\n        Change.count().then(function (count) {\n          assert.equal(count, 1);\n          done();\n        }).catch(done);\n      });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should create an entry","suites":["Change","Change.findOrCreateChange(modelName, modelId, callback)","when a change doesnt exist"],"updatePoint":{"line":120,"column":32,"index":3829},"line":120,"code":"      it('should create an entry', function (done) {\n        const test = this;\n        Change.findById(this.result.id, function (err, change) {\n          if (err) return done(err);\n          assert.equal(change.id, test.result.id);\n          done();\n        });\n      });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should create an entry","suites":["Change","Change.findOrCreateChange(modelName, modelId, callback)","when a change doesnt exist - promise variant"],"updatePoint":{"line":137,"column":32,"index":4420},"line":137,"code":"      it('should create an entry', function (done) {\n        const test = this;\n        Change.findById(this.result.id, function (err, change) {\n          if (err) return done(err);\n          assert.equal(change.id, test.result.id);\n          done();\n        });\n      });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should find the entry","suites":["Change","Change.findOrCreateChange(modelName, modelId, callback)","when a change does exist"],"updatePoint":{"line":165,"column":31,"index":5286},"line":165,"code":"      it('should find the entry', function (done) {\n        const test = this;\n        assert.equal(test.existingChange.id, test.result.id);\n        done();\n      });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should create a new change with the correct revision","suites":["Change","change.rectify(callback)"],"updatePoint":{"line":183,"column":60,"index":5779},"line":183,"code":"    it('should create a new change with the correct revision', function (done) {\n      const test = this;\n      change.rectify(function (err, ch) {\n        assert.equal(ch.rev, test.revisionForModel);\n        done();\n      });\n    }); // This test is a low-level equivalent of the test in replication.test.js","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should merge updates within the same checkpoint","suites":["Change","change.rectify(callback)"],"updatePoint":{"line":192,"column":55,"index":6147},"line":192,"code":"    it('should merge updates within the same checkpoint', function (done) {\n      const test = this;\n      const originalRev = this.revisionForModel;\n      let cp;\n      async.series([rectify, checkpoint, update, rectify, update, rectify, function (next) {\n        expect(change.checkpoint, 'checkpoint').to.equal(cp);\n        expect(change.type(), 'type').to.equal('update');\n        expect(change.prev, 'prev').to.equal(originalRev);\n        expect(change.rev, 'rev').to.equal(test.revisionForModel);\n        next();\n      }], done);\n\n      function rectify(next) {\n        change.rectify(next);\n      }\n\n      function checkpoint(next) {\n        TestModel.checkpoint(function (err, inst) {\n          if (err) return next(err);\n          cp = inst.seq;\n          next();\n        });\n      }\n\n      function update(next) {\n        const model = test.model;\n        model.name += 'updated';\n        model.save(function (err) {\n          test.revisionForModel = Change.revisionForInst(model);\n          next(err);\n        });\n      }\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should not change checkpoint when rev is the same","suites":["Change","change.rectify(callback)"],"updatePoint":{"line":225,"column":57,"index":7190},"line":225,"code":"    it('should not change checkpoint when rev is the same', function (done) {\n      const test = this;\n      const originalCheckpoint = change.checkpoint;\n      const originalRev = change.rev;\n      TestModel.checkpoint(function (err, inst) {\n        if (err) return done(err);\n        change.rectify(function (err, c) {\n          if (err) return done(err);\n          expect(c.rev, 'rev').to.equal(originalRev); // sanity check\n\n          expect(c.checkpoint, 'checkpoint').to.equal(originalCheckpoint);\n          done();\n        });\n      });\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should create a new change with the correct revision","suites":["Change","change.rectify - promise variant"],"updatePoint":{"line":249,"column":60,"index":8011},"line":249,"code":"    it('should create a new change with the correct revision', function (done) {\n      const test = this;\n      change.rectify().then(function (ch) {\n        assert.equal(ch.rev, test.revisionForModel);\n        done();\n      }).catch(done);\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should get the correct revision","suites":["Change","change.currentRevision(callback)"],"updatePoint":{"line":258,"column":39,"index":8306},"line":258,"code":"    it('should get the correct revision', function (done) {\n      const test = this;\n      const change = new Change({\n        modelName: this.modelName,\n        modelId: this.modelId\n      });\n      change.currentRevision(function (err, rev) {\n        assert.equal(rev, test.revisionForModel);\n        done();\n      });\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should get the correct revision","suites":["Change","change.currentRevision - promise variant"],"updatePoint":{"line":271,"column":39,"index":8710},"line":271,"code":"    it('should get the correct revision', function (done) {\n      const test = this;\n      const change = new Change({\n        modelName: this.modelName,\n        modelId: this.modelId\n      });\n      change.currentRevision().then(function (rev) {\n        assert.equal(rev, test.revisionForModel);\n        done();\n      }).catch(done);\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should hash the given string","suites":["Change","Change.hash(str)"],"updatePoint":{"line":285,"column":36,"index":9150},"line":285,"code":"    it('should hash the given string', function () {\n      const str = 'foo';\n      const hash = Change.hash(str);\n      assert(hash !== str);\n      assert(typeof hash === 'string');\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should return the same revision for the same data","suites":["Change","Change.revisionForInst(inst)"],"updatePoint":{"line":293,"column":57,"index":9425},"line":293,"code":"    it('should return the same revision for the same data', function () {\n      const a = {\n        b: {\n          b: ['c', 'd'],\n          c: ['d', 'e']\n        }\n      };\n      const b = {\n        b: {\n          c: ['d', 'e'],\n          b: ['c', 'd']\n        }\n      };\n      const aRev = Change.revisionForInst(a);\n      const bRev = Change.revisionForInst(b);\n      assert.equal(aRev, bRev);\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"CREATE","suites":["Change","change.type()"],"updatePoint":{"line":312,"column":14,"index":9834},"line":312,"code":"    it('CREATE', function () {\n      const change = new Change({\n        rev: this.revisionForModel\n      });\n      assert.equal(Change.CREATE, change.type());\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"UPDATE","suites":["Change","change.type()"],"updatePoint":{"line":318,"column":14,"index":10002},"line":318,"code":"    it('UPDATE', function () {\n      const change = new Change({\n        rev: this.revisionForModel,\n        prev: this.revisionForModel\n      });\n      assert.equal(Change.UPDATE, change.type());\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"DELETE","suites":["Change","change.type()"],"updatePoint":{"line":325,"column":14,"index":10207},"line":325,"code":"    it('DELETE', function () {\n      const change = new Change({\n        prev: this.revisionForModel\n      });\n      assert.equal(Change.DELETE, change.type());\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"UNKNOWN","suites":["Change","change.type()"],"updatePoint":{"line":331,"column":15,"index":10377},"line":331,"code":"    it('UNKNOWN', function () {\n      const change = new Change();\n      assert.equal(Change.UNKNOWN, change.type());\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should get the correct model class","suites":["Change","change.getModelCtor()"],"updatePoint":{"line":337,"column":42,"index":10586},"line":337,"code":"    it('should get the correct model class', function () {\n      const change = new Change({\n        modelName: this.modelName\n      });\n      assert.equal(change.getModelCtor(), TestModel);\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should return true when the change is equal","suites":["Change","change.equals(otherChange)"],"updatePoint":{"line":345,"column":51,"index":10855},"line":345,"code":"    it('should return true when the change is equal', function () {\n      const change = new Change({\n        rev: this.revisionForModel\n      });\n      const otherChange = new Change({\n        rev: this.revisionForModel\n      });\n      assert.equal(change.equals(otherChange), true);\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should return true when both changes are deletes","suites":["Change","change.equals(otherChange)"],"updatePoint":{"line":354,"column":56,"index":11153},"line":354,"code":"    it('should return true when both changes are deletes', function () {\n      const REV = 'foo';\n      const change = new Change({\n        rev: null,\n        prev: REV\n      });\n      const otherChange = new Change({\n        rev: undefined,\n        prev: REV\n      });\n      assert.equal(change.type(), Change.DELETE);\n      assert.equal(otherChange.type(), Change.DELETE);\n      assert.equal(change.equals(otherChange), true);\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should return true when the change is based on the other","suites":["Change","change.isBasedOn(otherChange)"],"updatePoint":{"line":370,"column":64,"index":11662},"line":370,"code":"    it('should return true when the change is based on the other', function () {\n      const change = new Change({\n        prev: this.revisionForModel\n      });\n      const otherChange = new Change({\n        rev: this.revisionForModel\n      });\n      assert.equal(change.isBasedOn(otherChange), true);\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should return delta and conflict lists","suites":["Change","Change.diff(modelName, since, remoteChanges, callback)"],"updatePoint":{"line":399,"column":46,"index":12439},"line":399,"code":"    it('should return delta and conflict lists', function (done) {\n      const remoteChanges = [// an update => should result in a delta\n      {\n        rev: 'foo2',\n        prev: 'foo',\n        modelName: this.modelName,\n        modelId: 9,\n        checkpoint: 1\n      }, // no change => should not result in a delta / conflict\n      {\n        rev: 'bar',\n        prev: 'bar',\n        modelName: this.modelName,\n        modelId: 10,\n        checkpoint: 1\n      }, // a conflict => should result in a conflict\n      {\n        rev: 'bat2',\n        prev: 'bat0',\n        modelName: this.modelName,\n        modelId: 11,\n        checkpoint: 1\n      }];\n      Change.diff(this.modelName, 0, remoteChanges, function (err, diff) {\n        if (err) return done(err);\n        assert.equal(diff.deltas.length, 1);\n        assert.equal(diff.conflicts.length, 1);\n        done();\n      });\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should return delta and conflict lists - promise variant","suites":["Change","Change.diff(modelName, since, remoteChanges, callback)"],"updatePoint":{"line":429,"column":64,"index":13343},"line":429,"code":"    it('should return delta and conflict lists - promise variant', function (done) {\n      const remoteChanges = [// an update => should result in a delta\n      {\n        rev: 'foo2',\n        prev: 'foo',\n        modelName: this.modelName,\n        modelId: 9,\n        checkpoint: 1\n      }, // no change => should not result in a delta / conflict\n      {\n        rev: 'bar',\n        prev: 'bar',\n        modelName: this.modelName,\n        modelId: 10,\n        checkpoint: 1\n      }, // a conflict => should result in a conflict\n      {\n        rev: 'bat2',\n        prev: 'bat0',\n        modelName: this.modelName,\n        modelId: 11,\n        checkpoint: 1\n      }];\n      Change.diff(this.modelName, 0, remoteChanges).then(function (diff) {\n        assert.equal(diff.deltas.length, 1);\n        assert.equal(diff.conflicts.length, 1);\n        done();\n      }).catch(done);\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should set \"prev\" to local revision in non-conflicting delta","suites":["Change","Change.diff(modelName, since, remoteChanges, callback)"],"updatePoint":{"line":458,"column":68,"index":14228},"line":458,"code":"    it('should set \"prev\" to local revision in non-conflicting delta', function (done) {\n      const updateRecord = {\n        rev: 'foo-new',\n        prev: 'foo',\n        modelName: this.modelName,\n        modelId: '9',\n        checkpoint: 2\n      };\n      Change.diff(this.modelName, 0, [updateRecord], function (err, diff) {\n        if (err) return done(err);\n        expect(diff.conflicts, 'conflicts').to.have.length(0);\n        expect(diff.deltas, 'deltas').to.have.length(1);\n        const actual = diff.deltas[0].toObject();\n        delete actual.id;\n        expect(actual).to.eql({\n          checkpoint: 2,\n          modelId: '9',\n          modelName: updateRecord.modelName,\n          prev: 'foo',\n          // this is the current local revision\n          rev: 'foo-new'\n        });\n        done();\n      });\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should set \"prev\" to local revision in remote-only delta","suites":["Change","Change.diff(modelName, since, remoteChanges, callback)"],"updatePoint":{"line":483,"column":64,"index":15050},"line":483,"code":"    it('should set \"prev\" to local revision in remote-only delta', function (done) {\n      const updateRecord = {\n        rev: 'foo-new',\n        prev: 'foo-prev',\n        modelName: this.modelName,\n        modelId: '9',\n        checkpoint: 2\n      }; // IMPORTANT: the diff call excludes the local change\n      // with rev=foo CP=1\n\n      Change.diff(this.modelName, 2, [updateRecord], function (err, diff) {\n        if (err) return done(err);\n        expect(diff.conflicts, 'conflicts').to.have.length(0);\n        expect(diff.deltas, 'deltas').to.have.length(1);\n        const actual = diff.deltas[0].toObject();\n        delete actual.id;\n        expect(actual).to.eql({\n          checkpoint: 2,\n          modelId: '9',\n          modelName: updateRecord.modelName,\n          prev: 'foo',\n          // this is the current local revision\n          rev: 'foo-new'\n        });\n        done();\n      });\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"should set \"prev\" to null for a new instance","suites":["Change","Change.diff(modelName, since, remoteChanges, callback)"],"updatePoint":{"line":510,"column":52,"index":15947},"line":510,"code":"    it('should set \"prev\" to null for a new instance', function (done) {\n      const updateRecord = {\n        rev: 'new-rev',\n        prev: 'new-prev',\n        modelName: this.modelName,\n        modelId: 'new-id',\n        checkpoint: 2\n      };\n      Change.diff(this.modelName, 0, [updateRecord], function (err, diff) {\n        if (err) return done(err);\n        expect(diff.conflicts).to.have.length(0);\n        expect(diff.deltas).to.have.length(1);\n        const actual = diff.deltas[0].toObject();\n        delete actual.id;\n        expect(actual).to.eql({\n          checkpoint: 2,\n          modelId: 'new-id',\n          modelName: updateRecord.modelName,\n          prev: null,\n          // this is the current local revision\n          rev: 'new-rev'\n        });\n        done();\n      });\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"stores the custom property in the Change instance","suites":["Change with with custom properties","change.rectify"],"updatePoint":{"line":580,"column":57,"index":17815},"line":580,"code":"    it('stores the custom property in the Change instance', function () {\n      return change.rectify().then(function (ch) {\n        expect(ch.toObject()).to.have.property('tenantId', TENANT_ID);\n      });\n    });","file":"change.test.js","skipped":false,"dir":"test"},{"name":"returns the highest `seq` value","suites":["Checkpoint","bumpLastSeq() and current()"],"updatePoint":{"line":22,"column":39,"index":684},"line":22,"code":"    it('returns the highest `seq` value', function (done) {\n      async.series([Checkpoint.bumpLastSeq.bind(Checkpoint), Checkpoint.bumpLastSeq.bind(Checkpoint), function (next) {\n        Checkpoint.current(function (err, seq) {\n          if (err) next(err);\n          expect(seq).to.equal(3);\n          next();\n        });\n      }], done);\n    });","file":"checkpoint.test.js","skipped":false,"dir":"test"},{"name":"Should be no race condition for current() when calling in parallel","suites":["Checkpoint","bumpLastSeq() and current()"],"updatePoint":{"line":31,"column":74,"index":1068},"line":31,"code":"    it('Should be no race condition for current() when calling in parallel', function (done) {\n      async.parallel([function (next) {\n        Checkpoint.current(next);\n      }, function (next) {\n        Checkpoint.current(next);\n      }], function (err, list) {\n        if (err) return done(err);\n        Checkpoint.find(function (err, data) {\n          if (err) return done(err);\n          expect(data).to.have.length(1);\n          done();\n        });\n      });\n    });","file":"checkpoint.test.js","skipped":false,"dir":"test"},{"name":"Should be no race condition for bumpLastSeq() when calling in parallel","suites":["Checkpoint","bumpLastSeq() and current()"],"updatePoint":{"line":45,"column":78,"index":1544},"line":45,"code":"    it('Should be no race condition for bumpLastSeq() when calling in parallel', function (done) {\n      async.parallel([function (next) {\n        Checkpoint.bumpLastSeq(next);\n      }, function (next) {\n        Checkpoint.bumpLastSeq(next);\n      }], function (err, list) {\n        if (err) return done(err);\n        Checkpoint.find(function (err, data) {\n          if (err) return done(err); // The invariant \"we have at most 1 checkpoint instance\" is preserved\n          // even when multiple calls are made in parallel\n\n          expect(data).to.have.length(1); // There is a race condition here, we could end up with both 2 or 3 as the \"seq\".\n          // The current implementation of the memory connector always yields 2 though.\n\n          expect(data[0].seq).to.equal(2); // In this particular case, since the new last seq is always 2, both results\n          // should be 2.\n\n          expect(list.map(function (it) {\n            return it.seq;\n          })).to.eql([2, 2]);\n          done();\n        });\n      });\n    });","file":"checkpoint.test.js","skipped":false,"dir":"test"},{"name":"Checkpoint.current() for non existing checkpoint should initialize checkpoint","suites":["Checkpoint","bumpLastSeq() and current()"],"updatePoint":{"line":69,"column":85,"index":2582},"line":69,"code":"    it('Checkpoint.current() for non existing checkpoint should initialize checkpoint', function (done) {\n      Checkpoint.current(function (err, seq) {\n        expect(seq).to.equal(1);\n        done(err);\n      });\n    });","file":"checkpoint.test.js","skipped":false,"dir":"test"},{"name":"bumpLastSeq() works when singleton instance does not exists yet","suites":["Checkpoint","bumpLastSeq() and current()"],"updatePoint":{"line":75,"column":71,"index":2791},"line":75,"code":"    it('bumpLastSeq() works when singleton instance does not exists yet', function (done) {\n      Checkpoint.bumpLastSeq(function (err, cp) {\n        // We expect `seq` to be 2 since `checkpoint` does not exist and\n        // `bumpLastSeq` for the first time not only initializes it to one,\n        // but also increments the initialized value by one.\n        expect(cp.seq).to.equal(2);\n        done(err);\n      });\n    });","file":"checkpoint.test.js","skipped":false,"dir":"test"},{"name":"injects options to create()","suites":["OptionsFromRemotingContext","when making updates via REST"],"updatePoint":{"line":19,"column":35,"index":642},"line":19,"code":"    it('injects options to create()', function () {\n      return request.post('/products').send({\n        name: 'Pen'\n      }).expect(200).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to patchOrCreate()","suites":["OptionsFromRemotingContext","when making updates via REST"],"updatePoint":{"line":24,"column":42,"index":825},"line":24,"code":"    it('injects options to patchOrCreate()', function () {\n      return request.patch('/products').send({\n        id: 1,\n        name: 'Pen'\n      }).expect(200).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to replaceOrCreate()","suites":["OptionsFromRemotingContext","when making updates via REST"],"updatePoint":{"line":30,"column":44,"index":1026},"line":30,"code":"    it('injects options to replaceOrCreate()', function () {\n      return request.put('/products').send({\n        id: 1,\n        name: 'Pen'\n      }).expect(200).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to patchOrCreateWithWhere()","suites":["OptionsFromRemotingContext","when making updates via REST"],"updatePoint":{"line":36,"column":51,"index":1232},"line":36,"code":"    it('injects options to patchOrCreateWithWhere()', function () {\n      return request.post('/products/upsertWithWhere?where[name]=Pen').send({\n        name: 'Pencil'\n      }).expect(200).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to replaceById()","suites":["OptionsFromRemotingContext","when making updates via REST"],"updatePoint":{"line":41,"column":40,"index":1448},"line":41,"code":"    it('injects options to replaceById()', function () {\n      return Product.create({\n        id: 1,\n        name: 'Pen'\n      }).then(function (p) {\n        return request.put('/products/1').send({\n          name: 'Pencil'\n        }).expect(200);\n      }).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to prototype.patchAttributes()","suites":["OptionsFromRemotingContext","when making updates via REST"],"updatePoint":{"line":51,"column":54,"index":1757},"line":51,"code":"    it('injects options to prototype.patchAttributes()', function () {\n      return Product.create({\n        id: 1,\n        name: 'Pen'\n      }).then(function (p) {\n        return request.patch('/products/1').send({\n          name: 'Pencil'\n        }).expect(200);\n      }).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to updateAll()","suites":["OptionsFromRemotingContext","when making updates via REST"],"updatePoint":{"line":61,"column":38,"index":2052},"line":61,"code":"    it('injects options to updateAll()', function () {\n      return request.post('/products/update?where[name]=Pen').send({\n        name: 'Pencil'\n      }).expect(200).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to deleteById()","suites":["OptionsFromRemotingContext","when deleting via REST"],"updatePoint":{"line":69,"column":39,"index":2358},"line":69,"code":"    it('injects options to deleteById()', function () {\n      return Product.create({\n        id: 1,\n        name: 'Pen'\n      }).then(function (p) {\n        return request.delete('/products/1').expect(200);\n      }).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to find()","suites":["OptionsFromRemotingContext","when querying via REST"],"updatePoint":{"line":81,"column":33,"index":2735},"line":81,"code":"    it('injects options to find()', function () {\n      return request.get('/products').expect(200).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to findById()","suites":["OptionsFromRemotingContext","when querying via REST"],"updatePoint":{"line":84,"column":37,"index":2876},"line":84,"code":"    it('injects options to findById()', function () {\n      return request.get('/products/1').expect(200).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to findOne()","suites":["OptionsFromRemotingContext","when querying via REST"],"updatePoint":{"line":87,"column":36,"index":3018},"line":87,"code":"    it('injects options to findOne()', function () {\n      return request.get('/products/findOne?where[id]=1').expect(200).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to exists()","suites":["OptionsFromRemotingContext","when querying via REST"],"updatePoint":{"line":90,"column":35,"index":3177},"line":90,"code":"    it('injects options to exists()', function () {\n      return request.head('/products/1').expect(200).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to count()","suites":["OptionsFromRemotingContext","when querying via REST"],"updatePoint":{"line":93,"column":34,"index":3318},"line":93,"code":"    it('injects options to count()', function () {\n      return request.get('/products/count').expect(200).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to sharedCtor","suites":["OptionsFromRemotingContext","when invoking prototype methods"],"updatePoint":{"line":100,"column":37,"index":3603},"line":100,"code":"    it('injects options to sharedCtor', function () {\n      Product.prototype.dummy = function (cb) {\n        cb();\n      };\n\n      Product.remoteMethod('prototype.dummy', {});\n      return request.post('/products/1/dummy').expect(204).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to findById","suites":["OptionsFromRemotingContext","hasManyThrough"],"updatePoint":{"line":116,"column":35,"index":4275},"line":116,"code":"    it('injects options to findById', function () {\n      observeOptionsOnAccess(Product);\n      return request.get('/categories/1/products/1').expect(200).then(expectOptionsInjectedFromCategory);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to destroyById","suites":["OptionsFromRemotingContext","hasManyThrough"],"updatePoint":{"line":120,"column":38,"index":4483},"line":120,"code":"    it('injects options to destroyById', function () {\n      observeOptionsBeforeDelete(Product);\n      return request.del('/categories/1/products/1').expect(204).then(expectOptionsInjectedFromCategory);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to updateById","suites":["OptionsFromRemotingContext","hasManyThrough"],"updatePoint":{"line":124,"column":37,"index":4694},"line":124,"code":"    it('injects options to updateById', function () {\n      observeOptionsBeforeSave(Product);\n      return request.put('/categories/1/products/1').send({\n        description: 'a description'\n      }).expect(200).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to link","suites":["OptionsFromRemotingContext","hasManyThrough","through-model operations"],"updatePoint":{"line":131,"column":33,"index":4994},"line":131,"code":"      it('injects options to link', function () {\n        observeOptionsBeforeSave(ThroughModel);\n        return Product.create({\n          id: 2,\n          name: 'Car2'\n        }).then(function () {\n          return request.put('/categories/1/products/rel/2').send({\n            description: 'a description'\n          }).expect(200);\n        }).then(expectOptionsInjectedFromCategory);\n      });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to unlink","suites":["OptionsFromRemotingContext","hasManyThrough","through-model operations"],"updatePoint":{"line":142,"column":35,"index":5393},"line":142,"code":"      it('injects options to unlink', function () {\n        observeOptionsBeforeDelete(ThroughModel);\n        return request.del('/categories/1/products/rel/1').expect(204).then(expectOptionsInjectedFromCategory);\n      });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to exists","suites":["OptionsFromRemotingContext","hasManyThrough","through-model operations"],"updatePoint":{"line":146,"column":35,"index":5617},"line":146,"code":"      it('injects options to exists', function () {\n        observeOptionsOnAccess(ThroughModel);\n        return request.head('/categories/1/products/rel/1').expect(200).then(expectOptionsInjectedFromCategory);\n      });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to get","suites":["OptionsFromRemotingContext","hasManyThrough","scope operations"],"updatePoint":{"line":152,"column":32,"index":5889},"line":152,"code":"      it('injects options to get', function () {\n        observeOptionsOnAccess(Product);\n        return request.get('/categories/1/products').expect(200).then(expectOptionsInjectedFromCategory);\n      });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to create","suites":["OptionsFromRemotingContext","hasManyThrough","scope operations"],"updatePoint":{"line":156,"column":35,"index":6098},"line":156,"code":"      it('injects options to create', function () {\n        observeOptionsBeforeSave(Product);\n        return request.post('/categories/1/products').send({\n          name: 'Pen'\n        }).expect(200).then(expectOptionsInjectedFromCategory);\n      });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to delete","suites":["OptionsFromRemotingContext","hasManyThrough","scope operations"],"updatePoint":{"line":162,"column":35,"index":6350},"line":162,"code":"      it('injects options to delete', function () {\n        observeOptionsBeforeDelete(ThroughModel);\n        return request.del('/categories/1/products').expect(204).then(expectOptionsInjectedFromCategory);\n      });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to count","suites":["OptionsFromRemotingContext","hasManyThrough","scope operations"],"updatePoint":{"line":166,"column":34,"index":6567},"line":166,"code":"      it('injects options to count', function () {\n        observeOptionsOnAccess(ThroughModel);\n        return request.get('/categories/1/products/count').expect(200).then(expectOptionsInjectedFromCategory);\n      });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to get","suites":["OptionsFromRemotingContext","hasOne"],"updatePoint":{"line":214,"column":30,"index":7913},"line":214,"code":"    it('injects options to get', function () {\n      observeOptionsOnAccess(Product);\n      return givenProductInCategory1().then(function () {\n        return request.get('/categories/1/product').expect(200);\n      }).then(expectOptionsInjectedFromCategory);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to create","suites":["OptionsFromRemotingContext","hasOne"],"updatePoint":{"line":220,"column":33,"index":8183},"line":220,"code":"    it('injects options to create', function () {\n      observeOptionsBeforeSave(Product);\n      return request.post('/categories/1/product').send({\n        name: 'Pen'\n      }).expect(200).then(expectOptionsInjectedFromCategory);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to update","suites":["OptionsFromRemotingContext","hasOne"],"updatePoint":{"line":226,"column":33,"index":8422},"line":226,"code":"    it('injects options to update', function () {\n      return givenProductInCategory1().then(function () {\n        observeOptionsBeforeSave(Product);\n        return request.put('/categories/1/product').send({\n          description: 'a description'\n        }).expect(200);\n      }).then(expectInjectedOptions);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to destroy","suites":["OptionsFromRemotingContext","hasOne"],"updatePoint":{"line":234,"column":34,"index":8742},"line":234,"code":"    it('injects options to destroy', function () {\n      observeOptionsBeforeDelete(Product);\n      return givenProductInCategory1().then(function () {\n        return request.del('/categories/1/product').expect(204);\n      }).then(expectOptionsInjectedFromCategory);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"injects options to get","suites":["OptionsFromRemotingContext","belongsTo"],"updatePoint":{"line":282,"column":30,"index":9962},"line":282,"code":"    it('injects options to get', function () {\n      observeOptionsOnAccess(Product);\n      return Product.create({\n        id: 1,\n        name: 'Pen'\n      }).then(function () {\n        return Category.create({\n          id: 1,\n          name: 'a name',\n          productId: 1\n        });\n      }).then(function () {\n        return request.get('/categories/1/product').expect(200);\n      }).then(expectOptionsInjectedFromCategory);\n    });","file":"context-options.test.js","skipped":false,"dir":"test"},{"name":"Define a model and attach it to a `DataSource`","suites":["DataSource","dataSource.createModel(name, properties, settings)"],"updatePoint":{"line":20,"column":54,"index":612},"line":20,"code":"    it('Define a model and attach it to a `DataSource`', function () {\n      const Color = memory.createModel('color', {\n        name: String\n      });\n      assert.isFunc(Color, 'find');\n      assert.isFunc(Color, 'findById');\n      assert.isFunc(Color, 'findOne');\n      assert.isFunc(Color, 'create');\n      assert.isFunc(Color, 'updateOrCreate');\n      assert.isFunc(Color, 'upsertWithWhere');\n      assert.isFunc(Color, 'upsert');\n      assert.isFunc(Color, 'findOrCreate');\n      assert.isFunc(Color, 'exists');\n      assert.isFunc(Color, 'destroyAll');\n      assert.isFunc(Color, 'count');\n      assert.isFunc(Color, 'include');\n      assert.isFunc(Color, 'hasMany');\n      assert.isFunc(Color, 'belongsTo');\n      assert.isFunc(Color, 'hasAndBelongsToMany');\n      assert.isFunc(Color.prototype, 'save');\n      assert.isFunc(Color.prototype, 'isNewRecord');\n      assert.isFunc(Color.prototype, 'destroy');\n      assert.isFunc(Color.prototype, 'updateAttribute');\n      assert.isFunc(Color.prototype, 'updateAttributes');\n      assert.isFunc(Color.prototype, 'reload');\n    });","file":"data-source.test.js","skipped":false,"dir":"test"},{"name":"should honor settings.base","suites":["DataSource","dataSource.createModel(name, properties, settings)"],"updatePoint":{"line":46,"column":34,"index":1678},"line":46,"code":"    it('should honor settings.base', function () {\n      const Base = memory.createModel('base');\n      const Color = memory.createModel('color', {\n        name: String\n      }, {\n        base: Base\n      });\n      assert(Color.prototype instanceof Base);\n      assert.equal(Color.base, Base);\n    });","file":"data-source.test.js","skipped":false,"dir":"test"},{"name":"should use loopback.PersistedModel as the base for DBs","suites":["DataSource","dataSource.createModel(name, properties, settings)"],"updatePoint":{"line":56,"column":62,"index":2008},"line":56,"code":"    it('should use loopback.PersistedModel as the base for DBs', function () {\n      const Color = memory.createModel('color', {\n        name: String\n      });\n      assert(Color.prototype instanceof loopback.PersistedModel);\n      assert.equal(Color.base, loopback.PersistedModel);\n    });","file":"data-source.test.js","skipped":false,"dir":"test"},{"name":"should use loopback.Model as the base for non DBs","suites":["DataSource","dataSource.createModel(name, properties, settings)"],"updatePoint":{"line":63,"column":57,"index":2294},"line":63,"code":"    it('should use loopback.Model as the base for non DBs', function () {\n      // Mock up a non-DB connector\n      const Connector = function () {};\n\n      Connector.prototype.getTypes = function () {\n        return ['rest'];\n      };\n\n      const ds = loopback.createDataSource({\n        connector: new Connector()\n      });\n      const Color = ds.createModel('color', {\n        name: String\n      });\n      assert(Color.prototype instanceof Color.registry.getModel('Model'));\n      assert.equal(Color.base.modelName, 'PersistedModel');\n    });","file":"data-source.test.js","skipped":false,"dir":"test"},{"name":"List the enabled and disabled methods","suites":["DataSource","PersistedModel Methods"],"updatePoint":{"line":82,"column":45,"index":2891},"line":82,"code":"    it('List the enabled and disabled methods', function () {\n      const TestModel = loopback.PersistedModel.extend('TestPersistedModel');\n      TestModel.attachTo(loopback.memory()); // assert the defaults\n      // - true: the method should be remote enabled\n      // - false: the method should not be remote enabled\n      // -\n\n      existsAndShared('_forDB', false);\n      existsAndShared('create', true);\n      existsAndShared('updateOrCreate', true);\n      existsAndShared('upsertWithWhere', true);\n      existsAndShared('upsert', true);\n      existsAndShared('findOrCreate', false);\n      existsAndShared('exists', true);\n      existsAndShared('find', true);\n      existsAndShared('findOne', true);\n      existsAndShared('destroyAll', false);\n      existsAndShared('count', true);\n      existsAndShared('include', false);\n      existsAndShared('hasMany', false);\n      existsAndShared('belongsTo', false);\n      existsAndShared('hasAndBelongsToMany', false);\n      existsAndShared('save', false);\n      existsAndShared('isNewRecord', false);\n      existsAndShared('_adapter', false);\n      existsAndShared('destroyById', true);\n      existsAndShared('destroy', false);\n      existsAndShared('updateAttributes', true);\n      existsAndShared('updateAll', true);\n      existsAndShared('reload', false);\n\n      function existsAndShared(Model, name, isRemoteEnabled, isProto) {\n        const scope = isProto ? Model.prototype : Model;\n        const fn = scope[name];\n        const actuallyEnabled = Model.getRemoteMethod(name);\n        assert(fn, name + ' should be defined!');\n        assert(actuallyEnabled === isRemoteEnabled, name + ' ' + (isRemoteEnabled ? 'should' : 'should not') + ' be remote enabled');\n      }\n    });","file":"data-source.test.js","skipped":true,"dir":"test"},{"name":"should set up SMTP","suites":["Email connector"],"updatePoint":{"line":16,"column":24,"index":416},"line":16,"code":"  it('should set up SMTP', function () {\n    const connector = new MailConnector({\n      transports: [{\n        type: 'smtp',\n        service: 'gmail'\n      }]\n    });\n    assert(connector.transportForName('smtp'));\n  });","file":"email.test.js","skipped":false,"dir":"test"},{"name":"should set up DIRECT","suites":["Email connector"],"updatePoint":{"line":25,"column":26,"index":640},"line":25,"code":"  it('should set up DIRECT', function () {\n    const connector = new MailConnector({\n      transports: [{\n        type: 'direct',\n        name: 'localhost'\n      }]\n    });\n    assert(connector.transportForName('direct'));\n  });","file":"email.test.js","skipped":false,"dir":"test"},{"name":"should set up STUB","suites":["Email connector"],"updatePoint":{"line":34,"column":24,"index":867},"line":34,"code":"  it('should set up STUB', function () {\n    const connector = new MailConnector({\n      transports: [{\n        type: 'stub',\n        service: 'gmail'\n      }]\n    });\n    assert(connector.transportForName('stub'));\n  });","file":"email.test.js","skipped":false,"dir":"test"},{"name":"should set up a single transport for SMTP","suites":["Email connector"],"updatePoint":{"line":43,"column":47,"index":1112},"line":43,"code":"  it('should set up a single transport for SMTP', function () {\n    const connector = new MailConnector({\n      transport: {\n        type: 'smtp',\n        service: 'gmail'\n      }\n    });\n    assert(connector.transportForName('smtp'));\n  });","file":"email.test.js","skipped":false,"dir":"test"},{"name":"should set up a aliased transport for SMTP","suites":["Email connector"],"updatePoint":{"line":52,"column":48,"index":1355},"line":52,"code":"  it('should set up a aliased transport for SMTP', function () {\n    const connector = new MailConnector({\n      transport: {\n        type: 'smtp',\n        service: 'ses-us-east-1',\n        alias: 'ses-smtp'\n      }\n    });\n    assert(connector.transportForName('ses-smtp'));\n  });","file":"email.test.js","skipped":false,"dir":"test"},{"name":"should have a send method","suites":["Email and SMTP"],"updatePoint":{"line":74,"column":31,"index":1916},"line":74,"code":"  it('should have a send method', function () {\n    assert(typeof MyEmail.send === 'function');\n    assert(typeof MyEmail.prototype.send === 'function');\n  });","file":"email.test.js","skipped":false,"dir":"test"},{"name":"MyEmail.send(options, callback)","suites":["Email and SMTP","MyEmail"],"updatePoint":{"line":79,"column":39,"index":2120},"line":79,"code":"    it('MyEmail.send(options, callback)', function (done) {\n      const options = {\n        to: 'to@to.com',\n        from: 'from@from.com',\n        subject: 'subject',\n        text: 'text',\n        html: '<h1>html</h1>'\n      };\n      MyEmail.send(options, function (err, mail) {\n        assert(!err);\n        assert(mail.response);\n        assert(mail.envelope);\n        assert(mail.messageId);\n        done(err);\n      });\n    });","file":"email.test.js","skipped":false,"dir":"test"},{"name":"myEmail.send(callback)","suites":["Email and SMTP","MyEmail"],"updatePoint":{"line":95,"column":30,"index":2544},"line":95,"code":"    it('myEmail.send(callback)', function (done) {\n      const message = new MyEmail({\n        to: 'to@to.com',\n        from: 'from@from.com',\n        subject: 'subject',\n        text: 'text',\n        html: '<h1>html</h1>'\n      });\n      message.send(function (err, mail) {\n        assert(mail.response);\n        assert(mail.envelope);\n        assert(mail.messageId);\n        done(err);\n      });\n    });","file":"email.test.js","skipped":false,"dir":"test"},{"name":"should throw a descriptive error","suites":["loopback.errorHandler(options)"],"updatePoint":{"line":18,"column":38,"index":467},"line":18,"code":"  it('should throw a descriptive error', function () {\n    expect(function () {\n      loopback.errorHandler();\n    }).to.throw(/no longer available.*strong-error-handler/);\n  });","file":"error-handler.test.js","skipped":false,"dir":"test"},{"name":"Get the distance to another `GeoPoint`","suites":["GeoPoint","geoPoint.distanceTo(geoPoint, options)"],"updatePoint":{"line":14,"column":46,"index":462},"line":14,"code":"    it('Get the distance to another `GeoPoint`', function () {\n      const here = new GeoPoint({\n        lat: 10,\n        lng: 10\n      });\n      const there = new GeoPoint({\n        lat: 5,\n        lng: 5\n      });\n      const distance = here.distanceTo(there, {\n        type: 'meters'\n      });\n      assert.equal(Math.floor(distance), 782777);\n    });","file":"geo-point.test.js","skipped":false,"dir":"test"},{"name":"Get the distance between two points","suites":["GeoPoint","GeoPoint.distanceBetween(a, b, options)"],"updatePoint":{"line":30,"column":43,"index":888},"line":30,"code":"    it('Get the distance between two points', function () {\n      const here = new GeoPoint({\n        lat: 10,\n        lng: 10\n      });\n      const there = new GeoPoint({\n        lat: 5,\n        lng: 5\n      });\n      const distance = GeoPoint.distanceBetween(here, there, {\n        type: 'feet'\n      });\n      assert.equal(Math.floor(distance), 2568169);\n    });","file":"geo-point.test.js","skipped":false,"dir":"test"},{"name":"Create from string","suites":["GeoPoint","GeoPoint()"],"updatePoint":{"line":46,"column":26,"index":1282},"line":46,"code":"    it('Create from string', function () {\n      const point = new GeoPoint('1.234,5.678');\n      assert.equal(point.lat, 1.234);\n      assert.equal(point.lng, 5.678);\n      const point2 = new GeoPoint('1.222,         5.333');\n      assert.equal(point2.lat, 1.222);\n      assert.equal(point2.lng, 5.333);\n      const point3 = new GeoPoint('1.333, 5.111');\n      assert.equal(point3.lat, 1.333);\n      assert.equal(point3.lng, 5.111);\n    });","file":"geo-point.test.js","skipped":false,"dir":"test"},{"name":"Serialize as string","suites":["GeoPoint","GeoPoint()"],"updatePoint":{"line":57,"column":27,"index":1725},"line":57,"code":"    it('Serialize as string', function () {\n      const str = '1.234,5.678';\n      const point = new GeoPoint(str);\n      assert.equal(point.toString(), str);\n    });","file":"geo-point.test.js","skipped":false,"dir":"test"},{"name":"Create from array","suites":["GeoPoint","GeoPoint()"],"updatePoint":{"line":62,"column":25,"index":1890},"line":62,"code":"    it('Create from array', function () {\n      const point = new GeoPoint([5.555, 6.777]);\n      assert.equal(point.lat, 5.555);\n      assert.equal(point.lng, 6.777);\n    });","file":"geo-point.test.js","skipped":false,"dir":"test"},{"name":"Create as Model property","suites":["GeoPoint","GeoPoint()"],"updatePoint":{"line":67,"column":32,"index":2073},"line":67,"code":"    it('Create as Model property', function () {\n      const Model = loopback.createModel('geo-model', {\n        geo: {\n          type: 'GeoPoint'\n        }\n      });\n      const m = new Model({\n        geo: '1.222,3.444'\n      });\n      assert(m.geo instanceof GeoPoint);\n      assert.equal(m.geo.lat, 1.222);\n      assert.equal(m.geo.lng, 3.444);\n    });","file":"geo-point.test.js","skipped":false,"dir":"test"},{"name":"should hide a property remotely","suites":["hidden properties"],"updatePoint":{"line":41,"column":37,"index":1207},"line":41,"code":"  it('should hide a property remotely', function (done) {\n    request(this.app).get('/products').expect('Content-Type', /json/).expect(200).end(function (err, res) {\n      if (err) return done(err);\n      const product = res.body[0];\n      assert.equal(product.secret, undefined);\n      done();\n    });\n  });","file":"hidden-properties.test.js","skipped":false,"dir":"test"},{"name":"should hide a property of nested models","suites":["hidden properties"],"updatePoint":{"line":49,"column":45,"index":1524},"line":49,"code":"  it('should hide a property of nested models', function (done) {\n    const app = this.app;\n    request(app).get('/categories?filter[include]=products').expect('Content-Type', /json/).expect(200).end(function (err, res) {\n      if (err) return done(err);\n      const category = res.body[0];\n      const product = category.products[0];\n      assert.equal(product.secret, undefined);\n      done();\n    });\n  });","file":"hidden-properties.test.js","skipped":false,"dir":"test"},{"name":"pauses request stream during authentication","suites":["loopback application"],"updatePoint":{"line":14,"column":49,"index":413},"line":14,"code":"  it('pauses request stream during authentication', function (done) {\n    // This test reproduces the issue reported in\n    //   https://github.com/strongloop/loopback-storage-service/issues/7\n    const app = loopback();\n    setupAppWithStreamingMethod();\n    app.listen(0, function () {\n      sendHttpRequestInOnePacket(this.address().port, 'POST /streamers/read HTTP/1.0\\n' + 'Content-Length: 1\\n' + 'Content-Type: application/x-custom-octet-stream\\n' + '\\n' + 'X', function (err, res) {\n        if (err) return done(err);\n        expect(res).to.match(/\\nX$/);\n        done();\n      });\n    });\n\n    function setupAppWithStreamingMethod() {\n      app.dataSource('db', {\n        connector: loopback.Memory\n      });\n      const db = app.datasources.db;\n      loopback.User.attachTo(db);\n      loopback.AccessToken.attachTo(db);\n      loopback.Role.attachTo(db);\n      loopback.ACL.attachTo(db);\n      loopback.User.hasMany(loopback.AccessToken, {\n        as: 'accessTokens'\n      });\n      const Streamer = app.registry.createModel('Streamer');\n      app.model(Streamer, {\n        dataSource: 'db'\n      });\n\n      Streamer.read = function (req, res, cb) {\n        let body = new Buffer(0);\n        req.on('data', function (chunk) {\n          body += chunk;\n        });\n        req.on('end', function () {\n          res.end(body.toString()); // we must not call the callback here\n          // because it will attempt to add response headers\n        });\n        req.once('error', function (err) {\n          cb(err);\n        });\n      };\n\n      loopback.remoteMethod(Streamer.read, {\n        http: {\n          method: 'post'\n        },\n        accepts: [{\n          arg: 'req',\n          type: 'Object',\n          http: {\n            source: 'req'\n          }\n        }, {\n          arg: 'res',\n          type: 'Object',\n          http: {\n            source: 'res'\n          }\n        }]\n      });\n      app.enableAuth();\n      app.use(loopback.token({\n        model: app.models.accessToken\n      }));\n      app.use(loopback.rest());\n    }\n\n    function sendHttpRequestInOnePacket(port, reqString, cb) {\n      const socket = net.createConnection(port);\n      let response = new Buffer(0);\n      socket.on('data', function (chunk) {\n        response += chunk;\n      });\n      socket.on('end', function () {\n        callCb(null, response.toString());\n      });\n      socket.once('error', function (err) {\n        callCb(err);\n      });\n      socket.write(reqString.replace(/\\n/g, '\\r\\n'));\n\n      function callCb(err, res) {\n        if (!cb) return;\n        cb(err, res);\n        cb = null;\n      }\n    }\n  });","file":"integration.test.js","skipped":false,"dir":"test"},{"name":"provides \"get(key)\" at \"GET /key\"","suites":["KeyValueModel","REST API"],"updatePoint":{"line":23,"column":41,"index":628},"line":23,"code":"    it('provides \"get(key)\" at \"GET /key\"', function (done) {\n      CacheItem.set('get-key', AN_OBJECT_VALUE);\n      request.get('/CacheItems/get-key').end(function (err, res) {\n        if (err) return done(err);\n        expect(res.body).to.eql(AN_OBJECT_VALUE);\n        done();\n      });\n    });","file":"key-value-model.test.js","skipped":false,"dir":"test"},{"name":"returns 404 when getting a key that does not exist","suites":["KeyValueModel","REST API"],"updatePoint":{"line":31,"column":58,"index":942},"line":31,"code":"    it('returns 404 when getting a key that does not exist', function (done) {\n      request.get('/CacheItems/key-does-not-exist').expect(404, done);\n    });","file":"key-value-model.test.js","skipped":false,"dir":"test"},{"name":"provides \"set(key)\" at \"PUT /key\"","suites":["KeyValueModel","REST API"],"updatePoint":{"line":34,"column":41,"index":1083},"line":34,"code":"    it('provides \"set(key)\" at \"PUT /key\"', function (done) {\n      request.put('/CacheItems/set-key').send(AN_OBJECT_VALUE).expect(204).end(function (err, res) {\n        if (err) return done(err);\n        CacheItem.get('set-key', function (err, value) {\n          if (err) return done(err);\n          expect(value).to.eql(AN_OBJECT_VALUE);\n          done();\n        });\n      });\n    });","file":"key-value-model.test.js","skipped":false,"dir":"test"},{"name":"provides \"set(key, ttl)\" at \"PUT /key?ttl={num}\"","suites":["KeyValueModel","REST API"],"updatePoint":{"line":44,"column":56,"index":1487},"line":44,"code":"    it('provides \"set(key, ttl)\" at \"PUT /key?ttl={num}\"', function (done) {\n      request.put('/CacheItems/set-key-ttl?ttl=10').send(AN_OBJECT_VALUE).end(function (err, res) {\n        if (err) return done(err);\n        setTimeout(function () {\n          CacheItem.get('set-key-ttl', function (err, value) {\n            if (err) return done(err);\n            expect(value).to.equal(null);\n            done();\n          });\n        }, 20);\n      });\n    });","file":"key-value-model.test.js","skipped":false,"dir":"test"},{"name":"provides \"expire(key, ttl)\" at \"PUT /key/expire\"","suites":["KeyValueModel","REST API"],"updatePoint":{"line":56,"column":56,"index":1944},"line":56,"code":"    it('provides \"expire(key, ttl)\" at \"PUT /key/expire\"', function (done) {\n      CacheItem.set('expire-key', AN_OBJECT_VALUE, function (err) {\n        if (err) return done(err);\n        request.put('/CacheItems/expire-key/expire').send({\n          ttl: 10\n        }).end(function (err, res) {\n          if (err) return done(err);\n          setTimeout(function () {\n            CacheItem.get('set-key-ttl', function (err, value) {\n              if (err) return done(err);\n              expect(value).to.equal(null);\n              done();\n            });\n          }, 20);\n        });\n      });\n    });","file":"key-value-model.test.js","skipped":false,"dir":"test"},{"name":"returns 404 when expiring a key that does not exist","suites":["KeyValueModel","REST API"],"updatePoint":{"line":73,"column":59,"index":2550},"line":73,"code":"    it('returns 404 when expiring a key that does not exist', function (done) {\n      request.put('/CacheItems/key-does-not-exist/expire').send({\n        ttl: 10\n      }).expect(404, done);\n    });","file":"key-value-model.test.js","skipped":false,"dir":"test"},{"name":"provides \"ttl(key)\" at \"GET /key/ttl\"","suites":["KeyValueModel","REST API"],"updatePoint":{"line":78,"column":45,"index":2734},"line":78,"code":"    it('provides \"ttl(key)\" at \"GET /key/ttl\"', function (done) {\n      request.put('/CacheItems/ttl-key?ttl=2000').end(function (err, res) {\n        if (err) return done(err);\n        request.get('/CacheItems/ttl-key/ttl').end(function (err, res) {\n          if (err) return done(err);\n          expect(res.body).to.be.a('number');\n          done();\n        });\n      });\n    });","file":"key-value-model.test.js","skipped":false,"dir":"test"},{"name":"returns 204 when getting TTL for a key that does not have TTL set","suites":["KeyValueModel","REST API"],"updatePoint":{"line":88,"column":73,"index":3143},"line":88,"code":"    it('returns 204 when getting TTL for a key that does not have TTL set', function (done) {\n      request.put('/CacheItems/ttl-key').end(function (err, res) {\n        if (err) return done(err);\n        request.get('/CacheItems/ttl-key/ttl').expect(204, done);\n      });\n    });","file":"key-value-model.test.js","skipped":false,"dir":"test"},{"name":"returns 404 when getting TTL for a key when TTL has expired","suites":["KeyValueModel","REST API"],"updatePoint":{"line":94,"column":67,"index":3417},"line":94,"code":"    it('returns 404 when getting TTL for a key when TTL has expired', function (done) {\n      request.put('/CacheItems/ttl-key?ttl=10').end(function (err, res) {\n        setTimeout(function () {\n          if (err) return done(err);\n          request.get('/CacheItems/ttl-key/ttl').expect(404, done);\n        }, 20);\n      });\n    });","file":"key-value-model.test.js","skipped":false,"dir":"test"},{"name":"returns 404 when getting TTL for a key that does not exist","suites":["KeyValueModel","REST API"],"updatePoint":{"line":102,"column":66,"index":3750},"line":102,"code":"    it('returns 404 when getting TTL for a key that does not exist', function (done) {\n      request.get('/CacheItems/key-does-not-exist/ttl').expect(404, done);\n    });","file":"key-value-model.test.js","skipped":false,"dir":"test"},{"name":"provides \"keys(filter)\" at \"GET /keys\"","suites":["KeyValueModel","REST API"],"updatePoint":{"line":105,"column":46,"index":3900},"line":105,"code":"    it('provides \"keys(filter)\" at \"GET /keys\"', function (done) {\n      CacheItem.set('list-key', AN_OBJECT_VALUE, function (err) {\n        if (err) return done(err);\n        request.get('/CacheItems/keys').send(AN_OBJECT_VALUE).end(function (err, res) {\n          if (err) return done(err);\n          if (res.body.error) return done(res.body.error);\n          expect(res.body).to.eql(['list-key']);\n          done();\n        });\n      });\n    });","file":"key-value-model.test.js","skipped":false,"dir":"test"},{"name":"ValidationError","suites":["loopback","exports"],"updatePoint":{"line":28,"column":23,"index":717},"line":28,"code":"    it('ValidationError', function () {\n      expect(loopback.ValidationError).to.be.a('function').and.have.property('name', 'ValidationError');\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"supports localRegistry:true","suites":["loopback","loopback(options)"],"updatePoint":{"line":47,"column":35,"index":2283},"line":47,"code":"    it('supports localRegistry:true', function () {\n      const app = loopback({\n        localRegistry: true\n      });\n      expect(app.registry).to.not.equal(loopback.registry);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"does not load builtin models into the local registry","suites":["loopback","loopback(options)"],"updatePoint":{"line":53,"column":60,"index":2495},"line":53,"code":"    it('does not load builtin models into the local registry', function () {\n      const app = loopback({\n        localRegistry: true\n      });\n      expect(app.registry.findModel('User')).to.equal(undefined);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"supports loadBuiltinModels:true","suites":["loopback","loopback(options)"],"updatePoint":{"line":59,"column":39,"index":2692},"line":59,"code":"    it('supports loadBuiltinModels:true', function () {\n      const app = loopback({\n        localRegistry: true,\n        loadBuiltinModels: true\n      });\n      expect(app.registry.findModel('User')).to.have.property('modelName', 'User');\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"Create a data source with a connector.","suites":["loopback","loopback.createDataSource(options)"],"updatePoint":{"line":68,"column":46,"index":3016},"line":68,"code":"    it('Create a data source with a connector.', function () {\n      const dataSource = loopback.createDataSource({\n        connector: loopback.Memory\n      });\n      assert(dataSource.connector);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"should create model extending Model by default","suites":["loopback","data source created by loopback"],"updatePoint":{"line":76,"column":54,"index":3295},"line":76,"code":"    it('should create model extending Model by default', function () {\n      const dataSource = loopback.createDataSource({\n        connector: loopback.Memory\n      });\n      const m1 = dataSource.createModel('m1', {});\n      assert(m1.prototype instanceof loopback.Model);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"should extend from Model by default","suites":["loopback","model created by loopback"],"updatePoint":{"line":85,"column":43,"index":3626},"line":85,"code":"    it('should extend from Model by default', function () {\n      const m1 = loopback.createModel('m1', {});\n      assert(m1.prototype instanceof loopback.Model);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"Setup a remote method.","suites":["loopback","loopback.remoteMethod(Model, fn, [options]);"],"updatePoint":{"line":91,"column":30,"index":3863},"line":91,"code":"    it('Setup a remote method.', function () {\n      const Product = loopback.createModel('product', {\n        price: Number\n      });\n\n      Product.stats = function (fn) {// ...\n      };\n\n      loopback.remoteMethod(Product.stats, {\n        returns: {\n          arg: 'stats',\n          type: 'array'\n        },\n        http: {\n          path: '/info',\n          verb: 'get'\n        }\n      });\n      assert.equal(Product.stats.returns.arg, 'stats');\n      assert.equal(Product.stats.returns.type, 'array');\n      assert.equal(Product.stats.http.path, '/info');\n      assert.equal(Product.stats.http.verb, 'get');\n      assert.equal(Product.stats.shared, true);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"should extend from options.base","suites":["loopback","loopback.createModel(name, properties, options)","options.base"],"updatePoint":{"line":118,"column":41,"index":4670},"line":118,"code":"      it('should extend from options.base', function () {\n        const MyModel = loopback.createModel('MyModel', {}, {\n          foo: {\n            bar: 'bat'\n          }\n        });\n        const MyCustomModel = loopback.createModel('MyCustomModel', {}, {\n          base: 'MyModel',\n          foo: {\n            bat: 'baz'\n          }\n        });\n        assert(MyCustomModel.super_ === MyModel);\n        assert.deepEqual(MyCustomModel.settings.foo, {\n          bar: 'bat',\n          bat: 'baz'\n        });\n        assert(MyCustomModel.super_.modelName === MyModel.modelName);\n      });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"should be able to get model by name","suites":["loopback","loopback.createModel(name, properties, options)","loopback.getModel and getModelByType"],"updatePoint":{"line":139,"column":45,"index":5338},"line":139,"code":"      it('should be able to get model by name', function () {\n        const MyModel = loopback.createModel('MyModel', {}, {\n          foo: {\n            bar: 'bat'\n          }\n        });\n        const MyCustomModel = loopback.createModel('MyCustomModel', {}, {\n          base: 'MyModel',\n          foo: {\n            bat: 'baz'\n          }\n        });\n        assert(loopback.getModel('MyModel') === MyModel);\n        assert(loopback.getModel('MyCustomModel') === MyCustomModel);\n        assert(loopback.findModel('Invalid') === undefined);\n        assert(loopback.getModel(MyModel) === MyModel);\n      });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"should be able to get model by type","suites":["loopback","loopback.createModel(name, properties, options)","loopback.getModel and getModelByType"],"updatePoint":{"line":156,"column":45,"index":5946},"line":156,"code":"      it('should be able to get model by type', function () {\n        const MyModel = loopback.createModel('MyModel', {}, {\n          foo: {\n            bar: 'bat'\n          }\n        });\n        const MyCustomModel = loopback.createModel('MyCustomModel', {}, {\n          base: 'MyModel',\n          foo: {\n            bat: 'baz'\n          }\n        });\n        assert(loopback.getModelByType(MyModel) === MyCustomModel);\n        assert(loopback.getModelByType(MyCustomModel) === MyCustomModel);\n      });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"should throw when the model does not exist","suites":["loopback","loopback.createModel(name, properties, options)","loopback.getModel and getModelByType"],"updatePoint":{"line":171,"column":52,"index":6458},"line":171,"code":"      it('should throw when the model does not exist', function () {\n        expect(function () {\n          loopback.getModel(uniqueModelName);\n        }).to.throw(Error, new RegExp('Model not found: ' + uniqueModelName));\n      });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"configures remote methods","suites":["loopback","loopback.createModel(name, properties, options)","loopback.getModel and getModelByType"],"updatePoint":{"line":177,"column":33,"index":6680},"line":177,"code":"    it('configures remote methods', function () {\n      const TestModel = loopback.createModel(uniqueModelName, {}, {\n        methods: {\n          staticMethod: {\n            isStatic: true,\n            http: {\n              path: '/static'\n            }\n          },\n          instanceMethod: {\n            isStatic: false,\n            http: {\n              path: '/instance'\n            }\n          }\n        }\n      });\n      const methodNames = TestModel.sharedClass.methods().map(function (m) {\n        return m.stringName.replace(/^[^.]+\\./, ''); // drop the class name\n      });\n      expect(methodNames).to.include.members(['staticMethod', 'prototype.instanceMethod']);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"creates the model","suites":["loopback","loopback.createModel(config)"],"updatePoint":{"line":201,"column":25,"index":7421},"line":201,"code":"    it('creates the model', function () {\n      const model = loopback.createModel({\n        name: uniqueModelName\n      });\n      expect(model.prototype).to.be.instanceof(loopback.Model);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"interprets extra first-level keys as options","suites":["loopback","loopback.createModel(config)"],"updatePoint":{"line":207,"column":52,"index":7645},"line":207,"code":"    it('interprets extra first-level keys as options', function () {\n      const model = loopback.createModel({\n        name: uniqueModelName,\n        base: 'User'\n      });\n      expect(model.prototype).to.be.instanceof(loopback.User);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"prefers config.options.key over config.key","suites":["loopback","loopback.createModel(config)"],"updatePoint":{"line":214,"column":50,"index":7888},"line":214,"code":"    it('prefers config.options.key over config.key', function () {\n      const model = loopback.createModel({\n        name: uniqueModelName,\n        base: 'User',\n        options: {\n          base: 'Application'\n        }\n      });\n      expect(model.prototype).to.be.instanceof(loopback.Application);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"adds new relations","suites":["loopback","loopback.configureModel(ModelCtor, config)"],"updatePoint":{"line":226,"column":26,"index":8251},"line":226,"code":"    it('adds new relations', function () {\n      const model = loopback.Model.extend(uniqueModelName);\n      loopback.configureModel(model, {\n        dataSource: null,\n        relations: {\n          owner: {\n            type: 'belongsTo',\n            model: 'User'\n          }\n        }\n      });\n      expect(model.settings.relations).to.have.property('owner');\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"updates existing relations","suites":["loopback","loopback.configureModel(ModelCtor, config)"],"updatePoint":{"line":239,"column":34,"index":8630},"line":239,"code":"    it('updates existing relations', function () {\n      const model = loopback.Model.extend(uniqueModelName, {}, {\n        relations: {\n          owner: {\n            type: 'belongsTo',\n            model: 'User'\n          }\n        }\n      });\n      loopback.configureModel(model, {\n        dataSource: false,\n        relations: {\n          owner: {\n            model: 'Application'\n          }\n        }\n      });\n      expect(model.settings.relations.owner).to.eql({\n        type: 'belongsTo',\n        model: 'Application'\n      });\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"updates relations before attaching to a dataSource","suites":["loopback","loopback.configureModel(ModelCtor, config)"],"updatePoint":{"line":261,"column":58,"index":9198},"line":261,"code":"    it('updates relations before attaching to a dataSource', function () {\n      const db = loopback.createDataSource({\n        connector: loopback.Memory\n      });\n      const model = loopback.Model.extend(uniqueModelName); // This test used to work because User model was already attached\n      // by other tests via `loopback.autoAttach()`\n      // Now that autoAttach is gone, it turns out the tested functionality\n      // does not work exactly as intended. To keep this change narrowly\n      // focused on removing autoAttach, we are attaching the User model\n      // to simulate the old test setup.\n\n      loopback.User.attachTo(db);\n      loopback.configureModel(model, {\n        dataSource: db,\n        relations: {\n          owner: {\n            type: 'belongsTo',\n            model: 'User'\n          }\n        }\n      });\n      const owner = model.prototype.owner;\n      expect(owner, 'model.prototype.owner').to.be.a('function');\n      expect(owner._targetClass).to.equal('User');\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"adds new acls","suites":["loopback","loopback.configureModel(ModelCtor, config)"],"updatePoint":{"line":286,"column":21,"index":10162},"line":286,"code":"    it('adds new acls', function () {\n      const model = loopback.Model.extend(uniqueModelName, {}, {\n        acls: [{\n          property: 'find',\n          accessType: 'EXECUTE',\n          principalType: 'ROLE',\n          principalId: '$everyone',\n          permission: 'DENY'\n        }]\n      });\n      loopback.configureModel(model, {\n        dataSource: null,\n        acls: [{\n          property: 'find',\n          accessType: 'EXECUTE',\n          principalType: 'ROLE',\n          principalId: 'admin',\n          permission: 'ALLOW'\n        }]\n      });\n      expect(model.settings.acls).eql([{\n        property: 'find',\n        accessType: 'EXECUTE',\n        principalType: 'ROLE',\n        principalId: '$everyone',\n        permission: 'DENY'\n      }, {\n        property: 'find',\n        accessType: 'EXECUTE',\n        principalType: 'ROLE',\n        principalId: 'admin',\n        permission: 'ALLOW'\n      }]);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"updates existing acls","suites":["loopback","loopback.configureModel(ModelCtor, config)"],"updatePoint":{"line":320,"column":29,"index":11095},"line":320,"code":"    it('updates existing acls', function () {\n      const model = loopback.Model.extend(uniqueModelName, {}, {\n        acls: [{\n          property: 'find',\n          accessType: 'EXECUTE',\n          principalType: 'ROLE',\n          principalId: '$everyone',\n          permission: 'DENY'\n        }]\n      });\n      loopback.configureModel(model, {\n        dataSource: null,\n        acls: [{\n          property: 'find',\n          accessType: 'EXECUTE',\n          principalType: 'ROLE',\n          principalId: '$everyone',\n          permission: 'ALLOW'\n        }]\n      });\n      expect(model.settings.acls).eql([{\n        property: 'find',\n        accessType: 'EXECUTE',\n        principalType: 'ROLE',\n        principalId: '$everyone',\n        permission: 'ALLOW'\n      }]);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"updates existing settings","suites":["loopback","loopback.configureModel(ModelCtor, config)"],"updatePoint":{"line":348,"column":33,"index":11880},"line":348,"code":"    it('updates existing settings', function () {\n      const model = loopback.Model.extend(uniqueModelName, {}, {\n        ttl: 10,\n        emailVerificationRequired: false\n      });\n      const baseName = model.settings.base.name;\n      loopback.configureModel(model, {\n        dataSource: null,\n        options: {\n          ttl: 20,\n          realmRequired: true,\n          base: 'X'\n        }\n      });\n      expect(model.settings).to.have.property('ttl', 20);\n      expect(model.settings).to.have.property('emailVerificationRequired', false);\n      expect(model.settings).to.have.property('realmRequired', true); // configureModel MUST NOT change Model's base class\n\n      expect(model.settings.base.name).to.equal(baseName);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"configures remote methods","suites":["loopback","loopback.configureModel(ModelCtor, config)"],"updatePoint":{"line":368,"column":33,"index":12618},"line":368,"code":"    it('configures remote methods', function () {\n      const TestModel = loopback.createModel(uniqueModelName);\n      loopback.configureModel(TestModel, {\n        dataSource: null,\n        methods: {\n          staticMethod: {\n            isStatic: true,\n            http: {\n              path: '/static'\n            }\n          },\n          instanceMethod: {\n            isStatic: false,\n            http: {\n              path: '/instance'\n            }\n          }\n        }\n      });\n      const methodNames = TestModel.sharedClass.methods().map(function (m) {\n        return m.stringName.replace(/^[^.]+\\./, ''); // drop the class name\n      });\n      expect(methodNames).to.include.members(['staticMethod', 'prototype.instanceMethod']);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"inherits properties from express","suites":["loopback","loopback object"],"updatePoint":{"line":394,"column":40,"index":13425},"line":394,"code":"    it('inherits properties from express', function () {\n      const express = require('express');\n\n      for (const i in express) {\n        expect(loopback).to.have.property(i, express[i]);\n      }\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"exports all built-in models","suites":["loopback","loopback object"],"updatePoint":{"line":401,"column":35,"index":13627},"line":401,"code":"    it('exports all built-in models', function () {\n      const expectedModelNames = ['Email', 'User', 'Application', 'AccessToken', 'Role', 'RoleMapping', 'ACL', 'Scope', 'Change', 'Checkpoint'];\n      expect(Object.keys(loopback)).to.include.members(expectedModelNames);\n      expectedModelNames.forEach(function (name) {\n        expect(loopback[name], name).to.be.a('function');\n        expect(loopback[name].modelName, name + '.modelName').to.eql(name);\n      });\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"treats method names that don't start with \"prototype.\" as \"isStatic:true\"","suites":["loopback","new remote method configuration"],"updatePoint":{"line":417,"column":82,"index":14433},"line":417,"code":"    it('treats method names that don\\'t start with \"prototype.\" as \"isStatic:true\"', function () {\n      const TestModel = loopback.createModel(uniqueModelName);\n      loopback.configureModel(TestModel, {\n        dataSource: null,\n        methods: {\n          staticMethod: {\n            http: {\n              path: '/static'\n            }\n          }\n        }\n      });\n      const methodNames = getAllMethodNamesWithoutClassName(TestModel);\n      expect(methodNames).to.include('staticMethod');\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"treats method names starting with \"prototype.\" as \"isStatic:false\"","suites":["loopback","new remote method configuration"],"updatePoint":{"line":432,"column":74,"index":14931},"line":432,"code":"    it('treats method names starting with \"prototype.\" as \"isStatic:false\"', function () {\n      const TestModel = loopback.createModel(uniqueModelName);\n      loopback.configureModel(TestModel, {\n        dataSource: null,\n        methods: {\n          'prototype.instanceMethod': {\n            http: {\n              path: '/instance'\n            }\n          }\n        }\n      });\n      const methodNames = getAllMethodNamesWithoutClassName(TestModel);\n      expect(methodNames).to.include('prototype.instanceMethod');\n    }); // Skip this test in browsers because strong-globalize is not removing","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"use \"isStatic:true\" if method name does not start with \"prototype.\"","suites":["loopback","new remote method configuration"],"updatePoint":{"line":465,"column":75,"index":16222},"line":465,"code":"    it('use \"isStatic:true\" if method name does not start with \"prototype.\"', function () {\n      const TestModel = loopback.createModel(uniqueModelName);\n      loopback.configureModel(TestModel, {\n        dataSource: null,\n        methods: {\n          staticMethod: {\n            isStatic: true,\n            http: {\n              path: '/static'\n            }\n          }\n        }\n      });\n      const methodNames = getAllMethodNamesWithoutClassName(TestModel);\n      expect(methodNames).to.include('staticMethod');\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"use \"isStatic:false\" if method name starts with \"prototype.\"","suites":["loopback","new remote method configuration"],"updatePoint":{"line":481,"column":68,"index":16742},"line":481,"code":"    it('use \"isStatic:false\" if method name starts with \"prototype.\"', function () {\n      const TestModel = loopback.createModel(uniqueModelName);\n      loopback.configureModel(TestModel, {\n        dataSource: null,\n        methods: {\n          'prototype.instanceMethod': {\n            isStatic: false,\n            http: {\n              path: '/instance'\n            }\n          }\n        }\n      });\n      const methodNames = getAllMethodNamesWithoutClassName(TestModel);\n      expect(methodNames).to.include('prototype.instanceMethod');\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"inherits remote methods defined via createModel","suites":["loopback","Remote method inheritance"],"updatePoint":{"line":501,"column":55,"index":17382},"line":501,"code":"    it('inherits remote methods defined via createModel', function () {\n      const Base = app.registry.createModel('Base', {}, {\n        methods: {\n          greet: {\n            http: {\n              path: '/greet'\n            }\n          }\n        }\n      });\n      const MyCustomModel = app.registry.createModel('MyCustomModel', {}, {\n        base: 'Base',\n        methods: {\n          hello: {\n            http: {\n              path: '/hello'\n            }\n          }\n        }\n      });\n      const methodNames = getAllMethodNamesWithoutClassName(MyCustomModel);\n      expect(methodNames).to.include('greet');\n      expect(methodNames).to.include('hello');\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"same remote method with different metadata should override parent","suites":["loopback","Remote method inheritance"],"updatePoint":{"line":525,"column":73,"index":18072},"line":525,"code":"    it('same remote method with different metadata should override parent', function () {\n      const Base = app.registry.createModel('Base', {}, {\n        methods: {\n          greet: {\n            http: {\n              path: '/greet'\n            }\n          }\n        }\n      });\n      const MyCustomModel = app.registry.createModel('MyCustomModel', {}, {\n        base: 'Base',\n        methods: {\n          greet: {\n            http: {\n              path: '/hello'\n            }\n          }\n        }\n      });\n      const methodNames = getAllMethodNamesWithoutClassName(MyCustomModel);\n      const baseMethod = Base.sharedClass.findMethodByName('greet');\n      const customMethod = MyCustomModel.sharedClass.findMethodByName('greet'); // Base Method\n\n      expect(baseMethod.http).to.eql({\n        path: '/greet'\n      });\n      expect(baseMethod.http.path).to.equal('/greet');\n      expect(baseMethod.http.path).to.not.equal('/hello'); // Custom Method\n\n      expect(methodNames).to.include('greet');\n      expect(customMethod.http).to.eql({\n        path: '/hello'\n      });\n      expect(customMethod.http.path).to.equal('/hello');\n      expect(customMethod.http.path).to.not.equal('/greet');\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"does not inherit remote methods defined via configureModel","suites":["loopback","Remote method inheritance"],"updatePoint":{"line":562,"column":66,"index":19269},"line":562,"code":"    it('does not inherit remote methods defined via configureModel', function () {\n      const Base = app.registry.createModel('Base');\n      app.registry.configureModel(Base, {\n        dataSource: null,\n        methods: {\n          greet: {\n            http: {\n              path: '/greet'\n            }\n          }\n        }\n      });\n      const MyCustomModel = app.registry.createModel('MyCustomModel', {}, {\n        base: 'Base',\n        methods: {\n          hello: {\n            http: {\n              path: '/hello'\n            }\n          }\n        }\n      });\n      const methodNames = getAllMethodNamesWithoutClassName(MyCustomModel);\n      expect(methodNames).to.not.include('greet');\n      expect(methodNames).to.include('hello');\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"hides remote methods using fixed method names","suites":["loopback","Hiding shared methods"],"updatePoint":{"line":635,"column":53,"index":21407},"line":635,"code":"    it('hides remote methods using fixed method names', function () {\n      const TestModel = app.registry.createModel(uniqueModelName);\n      app.model(TestModel, {\n        dataSource: null,\n        methods: {\n          staticMethod: {\n            isStatic: true,\n            http: {\n              path: '/static'\n            }\n          }\n        },\n        options: {\n          remoting: {\n            sharedMethods: {\n              staticMethod: false\n            }\n          }\n        }\n      });\n      const publicMethods = getSharedMethods(TestModel);\n      expect(publicMethods).not.to.include.members(['staticMethod']);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"hides remote methods using a glob pattern","suites":["loopback","Hiding shared methods"],"updatePoint":{"line":658,"column":49,"index":22040},"line":658,"code":"    it('hides remote methods using a glob pattern', function () {\n      const TestModel = app.registry.createModel(uniqueModelName);\n      app.model(TestModel, {\n        dataSource: null,\n        methods: {\n          staticMethod: {\n            isStatic: true,\n            http: {\n              path: '/static'\n            }\n          },\n          instanceMethod: {\n            isStatic: false,\n            http: {\n              path: '/instance'\n            }\n          }\n        },\n        options: {\n          remoting: {\n            sharedMethods: {\n              'prototype.*': false\n            }\n          }\n        }\n      });\n      const publicMethods = getSharedMethods(TestModel);\n      expect(publicMethods).to.include.members(['staticMethod']);\n      expect(publicMethods).not.to.include.members(['instanceMethod']);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"hides all remote methods using *","suites":["loopback","Hiding shared methods"],"updatePoint":{"line":688,"column":40,"index":22869},"line":688,"code":"    it('hides all remote methods using *', function () {\n      const TestModel = app.registry.createModel(uniqueModelName);\n      app.model(TestModel, {\n        dataSource: null,\n        methods: {\n          staticMethod: {\n            isStatic: true,\n            http: {\n              path: '/static'\n            }\n          },\n          instanceMethod: {\n            isStatic: false,\n            http: {\n              path: '/instance'\n            }\n          }\n        },\n        options: {\n          remoting: {\n            sharedMethods: {\n              '*': false\n            }\n          }\n        }\n      });\n      const publicMethods = getSharedMethods(TestModel);\n      expect(publicMethods).to.be.empty();\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"hides methods for related models using globs (model configured first)","suites":["loopback","Hiding shared methods"],"updatePoint":{"line":717,"column":77,"index":23630},"line":717,"code":"    it('hides methods for related models using globs (model configured first)', function () {\n      const TestModel = app.registry.createModel('TestModel');\n      const RelatedModel = app.registry.createModel('RelatedModel');\n      app.dataSource('test', {\n        connector: 'memory'\n      });\n      app.model(TestModel, {\n        dataSource: 'test',\n        relations: {\n          related: {\n            type: 'hasOne',\n            model: RelatedModel\n          }\n        },\n        options: {\n          remoting: {\n            sharedMethods: {\n              '*__related': false\n            }\n          }\n        }\n      });\n      app.model(RelatedModel, {\n        dataSource: 'test'\n      });\n      const publicMethods = getSharedMethods(TestModel);\n      expect(publicMethods).to.not.include.members(['prototype.__create__related']);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"hides methods for related models using globs (related model configured first)","suites":["loopback","Hiding shared methods"],"updatePoint":{"line":745,"column":85,"index":24484},"line":745,"code":"    it('hides methods for related models using globs (related model configured first)', function () {\n      const TestModel = app.registry.createModel('TestModel');\n      const RelatedModel = app.registry.createModel('RelatedModel');\n      app.dataSource('test', {\n        connector: 'memory'\n      });\n      app.model(RelatedModel, {\n        dataSource: 'test'\n      });\n      app.model(TestModel, {\n        dataSource: 'test',\n        relations: {\n          related: {\n            type: 'hasOne',\n            model: RelatedModel\n          }\n        },\n        options: {\n          remoting: {\n            sharedMethods: {\n              '*__related': false\n            }\n          }\n        }\n      });\n      const publicMethods = getSharedMethods(TestModel);\n      expect(publicMethods).to.not.include.members(['prototype.__create__related']);\n    });","file":"loopback.test.js","skipped":false,"dir":"test"},{"name":"Create a model using the memory connector","suites":["Memory Connector"],"updatePoint":{"line":12,"column":47,"index":368},"line":12,"code":"  it('Create a model using the memory connector', function (done) {\n    // use the built in memory function\n    // to create a memory data source\n    let memory = loopback.memory(); // or create it using the standard\n    // data source creation api\n\n    memory = loopback.createDataSource({\n      connector: loopback.Memory\n    }); // create a model using the\n    // memory data source\n\n    const properties = {\n      name: String,\n      price: Number\n    };\n    const Product = memory.createModel('product', properties);\n    Product.create([{\n      name: 'apple',\n      price: 0.79\n    }, {\n      name: 'pear',\n      price: 1.29\n    }, {\n      name: 'orange',\n      price: 0.59\n    }], count);\n\n    function count() {\n      Product.count(function (err, count) {\n        assert.equal(count, 3);\n        done();\n      });\n    }\n  });","file":"memory.test.js","skipped":false,"dir":"test"},{"name":"honors `application.register` - callback variant","suites":["Application"],"updatePoint":{"line":17,"column":54,"index":528},"line":17,"code":"  it('honors `application.register` - callback variant', function (done) {\n    Application.register('rfeng', 'MyTestApp', {\n      description: 'My test application'\n    }, function (err, result) {\n      const app = result;\n      assert.equal(app.owner, 'rfeng');\n      assert.equal(app.name, 'MyTestApp');\n      assert.equal(app.description, 'My test application');\n      done(err, result);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"honors `application.register` - promise variant","suites":["Application"],"updatePoint":{"line":28,"column":53,"index":932},"line":28,"code":"  it('honors `application.register` - promise variant', function (done) {\n    Application.register('rfeng', 'MyTestApp', {\n      description: 'My test application'\n    }).then(function (result) {\n      const app = result;\n      assert.equal(app.owner, 'rfeng');\n      assert.equal(app.name, 'MyTestApp');\n      assert.equal(app.description, 'My test application');\n      done();\n    }).catch(function (err) {\n      done(err);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Create a new application","suites":["Application"],"updatePoint":{"line":41,"column":30,"index":1349},"line":41,"code":"  it('Create a new application', function (done) {\n    Application.create({\n      owner: 'rfeng',\n      name: 'MyApp1',\n      description: 'My first mobile application'\n    }, function (err, result) {\n      const app = result;\n      assert.equal(app.owner, 'rfeng');\n      assert.equal(app.name, 'MyApp1');\n      assert.equal(app.description, 'My first mobile application');\n      assert(app.clientKey);\n      assert(app.javaScriptKey);\n      assert(app.restApiKey);\n      assert(app.windowsKey);\n      assert(app.masterKey);\n      assert(app.created);\n      assert(app.modified);\n      assert.equal(typeof app.id, 'string');\n      done(err, result);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Create a new application with push settings","suites":["Application"],"updatePoint":{"line":62,"column":49,"index":2033},"line":62,"code":"  it('Create a new application with push settings', function (done) {\n    Application.create({\n      owner: 'rfeng',\n      name: 'MyAppWithPush',\n      description: 'My push mobile application',\n      pushSettings: {\n        apns: {\n          production: false,\n          certData: 'cert',\n          keyData: 'key',\n          pushOptions: {\n            gateway: 'gateway.sandbox.push.apple.com',\n            port: 2195\n          },\n          feedbackOptions: {\n            gateway: 'feedback.sandbox.push.apple.com',\n            port: 2196,\n            interval: 300,\n            batchFeedback: true\n          }\n        },\n        gcm: {\n          serverApiKey: 'serverKey'\n        }\n      }\n    }, function (err, result) {\n      const app = result;\n      assert.deepEqual(app.pushSettings.toObject(), {\n        apns: {\n          production: false,\n          certData: 'cert',\n          keyData: 'key',\n          pushOptions: {\n            gateway: 'gateway.sandbox.push.apple.com',\n            port: 2195\n          },\n          feedbackOptions: {\n            gateway: 'feedback.sandbox.push.apple.com',\n            port: 2196,\n            interval: 300,\n            batchFeedback: true\n          }\n        },\n        gcm: {\n          serverApiKey: 'serverKey'\n        }\n      });\n      done(err, result);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Reset keys","suites":["Application"],"updatePoint":{"line":131,"column":16,"index":3926},"line":131,"code":"  it('Reset keys', function (done) {\n    Application.resetKeys(registeredApp.id, function (err, result) {\n      const app = result;\n      assert.equal(app.owner, 'rfeng');\n      assert.equal(app.name, 'MyApp2');\n      assert.equal(app.description, 'My second mobile application');\n      assert(app.clientKey);\n      assert(app.javaScriptKey);\n      assert(app.restApiKey);\n      assert(app.windowsKey);\n      assert(app.masterKey);\n      assert(app.clientKey !== registeredApp.clientKey);\n      assert(app.javaScriptKey !== registeredApp.javaScriptKey);\n      assert(app.restApiKey !== registeredApp.restApiKey);\n      assert(app.windowsKey !== registeredApp.windowsKey);\n      assert(app.masterKey !== registeredApp.masterKey);\n      assert(app.created);\n      assert(app.modified);\n      registeredApp = app;\n      done(err, result);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Reset keys - promise variant","suites":["Application"],"updatePoint":{"line":153,"column":34,"index":4794},"line":153,"code":"  it('Reset keys - promise variant', function (done) {\n    Application.resetKeys(registeredApp.id).then(function (result) {\n      const app = result;\n      assert.equal(app.owner, 'rfeng');\n      assert.equal(app.name, 'MyApp2');\n      assert.equal(app.description, 'My second mobile application');\n      assert(app.clientKey);\n      assert(app.javaScriptKey);\n      assert(app.restApiKey);\n      assert(app.windowsKey);\n      assert(app.masterKey);\n      assert(app.clientKey !== registeredApp.clientKey);\n      assert(app.javaScriptKey !== registeredApp.javaScriptKey);\n      assert(app.restApiKey !== registeredApp.restApiKey);\n      assert(app.windowsKey !== registeredApp.windowsKey);\n      assert(app.masterKey !== registeredApp.masterKey);\n      assert(app.created);\n      assert(app.modified);\n      registeredApp = app;\n      done();\n    }).catch(function (err) {\n      done(err);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Reset keys without create a new instance","suites":["Application"],"updatePoint":{"line":177,"column":46,"index":5710},"line":177,"code":"  it('Reset keys without create a new instance', function (done) {\n    Application.resetKeys(registeredApp.id, function (err, result) {\n      const app = result;\n      assert(app.id);\n      assert(app.id === registeredApp.id);\n      registeredApp = app;\n      done(err, result);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Reset keys without create a new instance - promise variant","suites":["Application"],"updatePoint":{"line":186,"column":64,"index":6021},"line":186,"code":"  it('Reset keys without create a new instance - promise variant', function (done) {\n    Application.resetKeys(registeredApp.id).then(function (result) {\n      const app = result;\n      assert(app.id);\n      assert(app.id === registeredApp.id);\n      registeredApp = app;\n      done();\n    }).catch(function (err) {\n      done(err);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Authenticate with application id & clientKey","suites":["Application"],"updatePoint":{"line":197,"column":50,"index":6354},"line":197,"code":"  it('Authenticate with application id & clientKey', function (done) {\n    Application.authenticate(registeredApp.id, registeredApp.clientKey, function (err, result) {\n      assert.equal(result.application.id, registeredApp.id);\n      assert.equal(result.keyType, 'clientKey');\n      done(err, result);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Authenticate with application id & clientKey - promise variant","suites":["Application"],"updatePoint":{"line":204,"column":68,"index":6689},"line":204,"code":"  it('Authenticate with application id & clientKey - promise variant', function (done) {\n    Application.authenticate(registeredApp.id, registeredApp.clientKey).then(function (result) {\n      assert.equal(result.application.id, registeredApp.id);\n      assert.equal(result.keyType, 'clientKey');\n      done();\n    }).catch(function (err) {\n      done(err);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Authenticate with application id & javaScriptKey","suites":["Application"],"updatePoint":{"line":213,"column":54,"index":7046},"line":213,"code":"  it('Authenticate with application id & javaScriptKey', function (done) {\n    Application.authenticate(registeredApp.id, registeredApp.javaScriptKey, function (err, result) {\n      assert.equal(result.application.id, registeredApp.id);\n      assert.equal(result.keyType, 'javaScriptKey');\n      done(err, result);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Authenticate with application id & restApiKey","suites":["Application"],"updatePoint":{"line":220,"column":51,"index":7372},"line":220,"code":"  it('Authenticate with application id & restApiKey', function (done) {\n    Application.authenticate(registeredApp.id, registeredApp.restApiKey, function (err, result) {\n      assert.equal(result.application.id, registeredApp.id);\n      assert.equal(result.keyType, 'restApiKey');\n      done(err, result);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Authenticate with application id & masterKey","suites":["Application"],"updatePoint":{"line":227,"column":50,"index":7691},"line":227,"code":"  it('Authenticate with application id & masterKey', function (done) {\n    Application.authenticate(registeredApp.id, registeredApp.masterKey, function (err, result) {\n      assert.equal(result.application.id, registeredApp.id);\n      assert.equal(result.keyType, 'masterKey');\n      done(err, result);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Authenticate with application id & windowsKey","suites":["Application"],"updatePoint":{"line":234,"column":51,"index":8009},"line":234,"code":"  it('Authenticate with application id & windowsKey', function (done) {\n    Application.authenticate(registeredApp.id, registeredApp.windowsKey, function (err, result) {\n      assert.equal(result.application.id, registeredApp.id);\n      assert.equal(result.keyType, 'windowsKey');\n      done(err, result);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Fail to authenticate with application id & invalid key","suites":["Application"],"updatePoint":{"line":241,"column":60,"index":8338},"line":241,"code":"  it('Fail to authenticate with application id & invalid key', function (done) {\n    Application.authenticate(registeredApp.id, 'invalid-key', function (err, result) {\n      assert(!result);\n      done(err, result);\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Fail to authenticate with application id - promise variant","suites":["Application"],"updatePoint":{"line":247,"column":64,"index":8572},"line":247,"code":"  it('Fail to authenticate with application id - promise variant', function (done) {\n    Application.authenticate(registeredApp.id, 'invalid-key').then(function (result) {\n      assert(!result);\n      done();\n    }).catch(function (err) {\n      done(err);\n      throw new Error('Error should NOT be thrown');\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"should use subclass model name","suites":["Application subclass"],"updatePoint":{"line":258,"column":36,"index":8918},"line":258,"code":"  it('should use subclass model name', function (done) {\n    const MyApp = Application.extend('MyApp');\n    const ds = loopback.createDataSource({\n      connector: loopback.Memory\n    });\n    MyApp.attachTo(ds);\n    MyApp.register('rfeng', 'MyApp123', {\n      description: 'My 123 mobile application'\n    }, function (err, result) {\n      const app = result;\n      assert.equal(app.owner, 'rfeng');\n      assert.equal(app.name, 'MyApp123');\n      assert.equal(app.description, 'My 123 mobile application');\n      assert(app.clientKey);\n      assert(app.javaScriptKey);\n      assert(app.restApiKey);\n      assert(app.windowsKey);\n      assert(app.masterKey);\n      assert(app.created);\n      assert(app.modified); // Remove all instances from Application model to avoid left-over data\n\n      Application.destroyAll(function () {\n        MyApp.findById(app.id, function (err, myApp) {\n          assert(!err);\n          assert(myApp);\n          Application.findById(app.id, function (err, myApp) {\n            assert(!err);\n            assert(myApp === null);\n            done(err, myApp);\n          });\n        });\n      });\n    });\n  });","file":"model.application.test.js","skipped":false,"dir":"test"},{"name":"Ensure the value for `property` is unique","suites":["Model / PersistedModel","Model.validatesUniquenessOf(property, options)"],"updatePoint":{"line":36,"column":49,"index":950},"line":36,"code":"    it('Ensure the value for `property` is unique', function (done) {\n      const User = PersistedModel.extend('ValidatedUser', {\n        'first': String,\n        'last': String,\n        'age': Number,\n        'password': String,\n        'gender': String,\n        'domain': String,\n        'email': String\n      });\n      const dataSource = loopback.createDataSource({\n        connector: loopback.Memory\n      });\n      User.attachTo(dataSource);\n      User.validatesUniquenessOf('email', {\n        message: 'email is not unique'\n      });\n      const joe = new User({\n        email: 'joe@joe.com'\n      });\n      const joe2 = new User({\n        email: 'joe@joe.com'\n      });\n      joe.save(function () {\n        joe2.save(function (err) {\n          assert(err, 'should get a validation error');\n          assert(joe2.errors.email, 'model should have email error');\n          done();\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Attach a model to a [DataSource](#data-source)","suites":["Model / PersistedModel","Model.attachTo(dataSource)"],"updatePoint":{"line":69,"column":54,"index":1931},"line":69,"code":"    it('Attach a model to a [DataSource](#data-source)', function () {\n      const MyModel = loopback.createModel('my-model', {\n        name: String\n      });\n      const dataSource = loopback.createDataSource({\n        connector: loopback.Memory\n      });\n      MyModel.attachTo(dataSource);\n      MyModel.find(function (err, results) {\n        assert(results.length === 0, 'should have data access methods after attaching to a data source');\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"creates model","suites":["Model.create(data, callback)"],"updatePoint":{"line":165,"column":21,"index":4125},"line":165,"code":"    it('creates model', function (done) {\n      const anObject = {\n        first: 'June'\n      };\n      request(app).post('/users') // sends an object\n      .send(anObject).expect('Content-Type', /json/).expect(200).end(function (err, res) {\n        if (err) return done(err);\n        expect(res.body).to.have.property('id');\n        expect(res.body).to.have.property('first', 'June');\n        done();\n      });\n    }); // batch create must be tested with a remote request because there are","file":"model.test.js","skipped":false,"dir":"test"},{"name":"creates array of models","suites":["Model.create(data, callback)"],"updatePoint":{"line":179,"column":31,"index":4678},"line":179,"code":"    it('creates array of models', function (done) {\n      const arrayOfObjects = [{\n        first: 'John'\n      }, {\n        first: 'Jane'\n      }];\n      request(app).post('/users') // sends an array of objects\n      .send(arrayOfObjects).expect('Content-Type', /json/).expect(200).end(function (err, res) {\n        if (err) return done(err);\n        expect(res.body.length).to.eql(2);\n        expect(res.body).to.have.nested.property('[0].first', 'John');\n        expect(res.body).to.have.nested.property('[1].first', 'Jane');\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"creates related models","suites":["Model.create(data, callback)"],"updatePoint":{"line":194,"column":30,"index":5240},"line":194,"code":"    it('creates related models', function (done) {\n      User.create({\n        first: 'Bob'\n      }, function (err, res) {\n        expect(res).to.have.property('id');\n        const aPost = {\n          title: 'A story',\n          content: 'Once upon a time'\n        };\n        request(app).post('/users/' + res.id + '/posts').send(aPost).expect('Content-Type', /json/).expect(200).end(function (err, result) {\n          if (err) return done(err);\n          expect(result.body).to.have.property('id');\n          expect(result.body).to.have.property('title', aPost.title);\n          expect(result.body).to.have.property('content', aPost.content);\n          done();\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"creates array of hasMany models","suites":["Model.create(data, callback)"],"updatePoint":{"line":212,"column":39,"index":5941},"line":212,"code":"    it('creates array of hasMany models', function (done) {\n      User.create({\n        first: 'Bob'\n      }, function (err, res) {\n        expect(res).to.have.property('id');\n        const twoPosts = [{\n          title: 'One story',\n          content: 'Content #1'\n        }, {\n          title: 'Two story',\n          content: 'Content #2'\n        }];\n        request(app).post('/users/' + res.id + '/posts').send(twoPosts).expect('Content-Type', /json/).expect(200).end(function (err, result) {\n          if (err) return done(err);\n          expect(result.body.length).to.eql(2);\n          expect(result.body).to.have.nested.property('[0].title', 'One story');\n          expect(result.body).to.have.nested.property('[1].title', 'Two story');\n          done();\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"rejects array of obj input for hasOne relation","suites":["Model.create(data, callback)"],"updatePoint":{"line":233,"column":54,"index":6748},"line":233,"code":"    it('rejects array of obj input for hasOne relation', function (done) {\n      const Friend = app.registry.createModel('friend', {\n        name: String\n      });\n      app.model(Friend, {\n        dataSource: 'db'\n      });\n      User.hasOne(Friend);\n      User.create({\n        first: 'Bob'\n      }, function (err, res) {\n        expect(res).to.have.property('id');\n        const twoFriends = [{\n          name: 'bob'\n        }, {\n          name: 'rob'\n        }];\n        request(app).post('/users/' + res.id + '/friend').send(twoFriends).expect('Content-Type', /json/).expect(400).end(function (err, result) {\n          if (err) return done(err);\n          const resError = result.body.error;\n          expect(resError.message).to.match(/value(.*?)not(.*?)object(\\.?)/i);\n          done();\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Delete all Model instances from data source","suites":["Model.destroyAll(callback)"],"updatePoint":{"line":261,"column":51,"index":7689},"line":261,"code":"    it('Delete all Model instances from data source', function (done) {\n      new TaskEmitter().task(User, 'create', {\n        first: 'jill'\n      }).task(User, 'create', {\n        first: 'bob'\n      }).task(User, 'create', {\n        first: 'jan'\n      }).task(User, 'create', {\n        first: 'sam'\n      }).task(User, 'create', {\n        first: 'suzy'\n      }).on('done', function () {\n        User.count(function (err, count) {\n          User.destroyAll(function () {\n            User.count(function (err, count) {\n              assert.equal(count, 0);\n              done();\n            });\n          });\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Updates when a Model instance is retreived from data source","suites":["Model.upsertWithWhere(where, data, callback)"],"updatePoint":{"line":285,"column":67,"index":8422},"line":285,"code":"    it('Updates when a Model instance is retreived from data source', function (done) {\n      const taskEmitter = new TaskEmitter();\n      taskEmitter.task(User, 'create', {\n        first: 'jill',\n        second: 'pill'\n      }).task(User, 'create', {\n        first: 'bob',\n        second: 'sob'\n      }).on('done', function () {\n        User.upsertWithWhere({\n          second: 'pill'\n        }, {\n          second: 'jones'\n        }, function (err, user) {\n          if (err) return done(err);\n          const id = user.id;\n          User.findById(id, function (err, user) {\n            if (err) return done(err);\n            assert.equal(user.second, 'jones');\n            done();\n          });\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Creates when no Model instance is retreived from data source","suites":["Model.upsertWithWhere(where, data, callback)"],"updatePoint":{"line":309,"column":68,"index":9151},"line":309,"code":"    it('Creates when no Model instance is retreived from data source', function (done) {\n      const taskEmitter = new TaskEmitter();\n      taskEmitter.task(User, 'create', {\n        first: 'simon',\n        second: 'somers'\n      }).on('done', function () {\n        User.upsertWithWhere({\n          first: 'somers'\n        }, {\n          first: 'Simon'\n        }, function (err, user) {\n          if (err) return done(err);\n          const id = user.id;\n          User.findById(id, function (err, user) {\n            if (err) return done(err);\n            assert.equal(user.first, 'Simon');\n            done();\n          });\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Call the method using HTTP / REST","suites":["Example Remote Method"],"updatePoint":{"line":332,"column":41,"index":9835},"line":332,"code":"    it('Call the method using HTTP / REST', function (done) {\n      request(app).get('/users/sign-in?username=foo&password=bar').expect('Content-Type', /json/).expect(200).end(function (err, res) {\n        if (err) return done(err);\n        assert.equal(res.body, 123);\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Converts null result of findById to 404 Not Found","suites":["Example Remote Method"],"updatePoint":{"line":339,"column":57,"index":10155},"line":339,"code":"    it('Converts null result of findById to 404 Not Found', function (done) {\n      request(app).get('/users/not-found').expect(404).end(function (err, res) {\n        if (err) return done(err);\n        const errorResponse = res.body.error;\n        assert(errorResponse);\n        assert.equal(errorResponse.code, 'MODEL_NOT_FOUND');\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Call the findById with filter.fields using HTTP / REST","suites":["Example Remote Method"],"updatePoint":{"line":348,"column":62,"index":10526},"line":348,"code":"    it('Call the findById with filter.fields using HTTP / REST', function (done) {\n      request(app).post('/users').send({\n        first: 'x',\n        last: 'y'\n      }).expect('Content-Type', /json/).expect(200).end(function (err, res) {\n        if (err) return done(err);\n        const userId = res.body.id;\n        assert(userId);\n        request(app).get('/users/' + userId + '?filter[fields]=first').expect('Content-Type', /json/).expect(200).end(function (err, res) {\n          if (err) return done(err);\n          assert.equal(res.body.first, 'x', 'first should be x');\n          assert(res.body.last === undefined, 'last should not be present');\n          done();\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Call the findById with filter.include using HTTP / REST","suites":["Example Remote Method"],"updatePoint":{"line":364,"column":63,"index":11230},"line":364,"code":"    it('Call the findById with filter.include using HTTP / REST', function (done) {\n      request(app).post('/users').send({\n        first: 'x',\n        last: 'y'\n      }).expect('Content-Type', /json/).expect(200).end(function (err, res) {\n        if (err) return done(err);\n        const userId = res.body.id;\n        assert(userId);\n        request(app).post('/users/' + userId + '/posts').send({\n          title: 'T1',\n          content: 'C1'\n        }).expect('Content-Type', /json/).expect(200).end(function (err, res) {\n          if (err) return done(err);\n          const post = res.body;\n          request(app).get('/users/' + userId + '?filter[include]=posts').expect('Content-Type', /json/).expect(200).end(function (err, res) {\n            if (err) return done(err);\n            assert.equal(res.body.first, 'x', 'first should be x');\n            assert.equal(res.body.last, 'y', 'last should be y');\n            assert.deepEqual(post, res.body.posts[0]);\n            done();\n          });\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Run a function before a remote method is called by a client","suites":["Model.beforeRemote(name, fn)"],"updatePoint":{"line":390,"column":67,"index":12329},"line":390,"code":"    it('Run a function before a remote method is called by a client', function (done) {\n      let hookCalled = false;\n      User.beforeRemote('create', function (ctx, user, next) {\n        hookCalled = true;\n        next();\n      }); // invoke save\n\n      request(app).post('/users').send({\n        data: {\n          first: 'foo',\n          last: 'bar'\n        }\n      }).expect('Content-Type', /json/).expect(200).end(function (err, res) {\n        if (err) return done(err);\n        assert(hookCalled, 'hook wasnt called');\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Does not stop the hook chain after returning a promise","suites":["Model.beforeRemote(name, fn)"],"updatePoint":{"line":408,"column":62,"index":12883},"line":408,"code":"    it('Does not stop the hook chain after returning a promise', function (done) {\n      const hooksCalled = [];\n      User.beforeRemote('create', function () {\n        hooksCalled.push('first');\n        return Promise.resolve();\n      });\n      User.beforeRemote('create', function (ctx, user, next) {\n        hooksCalled.push('second');\n        next();\n      }); // invoke save\n\n      request(app).post('/users').send({\n        data: {\n          first: 'foo',\n          last: 'bar'\n        }\n      }).expect('Content-Type', /json/).expect(200).end(function (err, res) {\n        if (err) return done(err);\n        expect(hooksCalled).to.eql(['first', 'second']);\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Run a function after a remote method is called by a client","suites":["Model.afterRemote(name, fn)"],"updatePoint":{"line":432,"column":66,"index":13647},"line":432,"code":"    it('Run a function after a remote method is called by a client', function (done) {\n      let beforeCalled = false;\n      let afterCalled = false;\n      User.beforeRemote('create', function (ctx, user, next) {\n        assert(!afterCalled);\n        beforeCalled = true;\n        next();\n      });\n      User.afterRemote('create', function (ctx, user, next) {\n        assert(beforeCalled);\n        afterCalled = true;\n        next();\n      }); // invoke save\n\n      request(app).post('/users').send({\n        data: {\n          first: 'foo',\n          last: 'bar'\n        }\n      }).expect('Content-Type', /json/).expect(200).end(function (err, res) {\n        if (err) return done(err);\n        assert(beforeCalled, 'before hook was not called');\n        assert(afterCalled, 'after hook was not called');\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"runs the function when method fails","suites":["Model.afterRemoteError(name, fn)"],"updatePoint":{"line":460,"column":43,"index":14529},"line":460,"code":"    it('runs the function when method fails', function (done) {\n      let actualError = 'hook not called';\n      User.afterRemoteError('login', function (ctx, next) {\n        actualError = ctx.error;\n        next();\n      });\n      request(app).get('/users/sign-in?username=bob&password=123').end(function (err, res) {\n        if (err) return done(err);\n        expect(actualError).to.have.property('message', 'bad username and password!');\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"The express ServerRequest object","suites":["Remote Method invoking context","ctx.req"],"updatePoint":{"line":475,"column":42,"index":15106},"line":475,"code":"      it('The express ServerRequest object', function (done) {\n        let hookCalled = false;\n        User.beforeRemote('create', function (ctx, user, next) {\n          hookCalled = true;\n          assert(ctx.req);\n          assert(ctx.req.url);\n          assert(ctx.req.method);\n          assert(ctx.res);\n          assert(ctx.res.write);\n          assert(ctx.res.end);\n          next();\n        }); // invoke save\n\n        request(app).post('/users').send({\n          data: {\n            first: 'foo',\n            last: 'bar'\n          }\n        }).expect('Content-Type', /json/).expect(200).end(function (err, res) {\n          if (err) return done(err);\n          assert(hookCalled);\n          done();\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"The express ServerResponse object","suites":["Remote Method invoking context","ctx.res"],"updatePoint":{"line":501,"column":43,"index":15881},"line":501,"code":"      it('The express ServerResponse object', function (done) {\n        let hookCalled = false;\n        User.beforeRemote('create', function (ctx, user, next) {\n          hookCalled = true;\n          assert(ctx.req);\n          assert(ctx.req.url);\n          assert(ctx.req.method);\n          assert(ctx.res);\n          assert(ctx.res.write);\n          assert(ctx.res.end);\n          next();\n        }); // invoke save\n\n        request(app).post('/users').send({\n          data: {\n            first: 'foo',\n            last: 'bar'\n          }\n        }).expect('Content-Type', /json/).expect(200).end(function (err, res) {\n          if (err) return done(err);\n          assert(hookCalled);\n          done();\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Define a one to many relationship","suites":["Model.hasMany(Model)"],"updatePoint":{"line":528,"column":41,"index":16671},"line":528,"code":"    it('Define a one to many relationship', function (done) {\n      const Book = dataSource.createModel('book', {\n        title: String,\n        author: String\n      });\n      const Chapter = dataSource.createModel('chapter', {\n        title: String\n      }); // by referencing model\n\n      Book.hasMany(Chapter);\n      Book.create({\n        title: 'Into the Wild',\n        author: 'Jon Krakauer'\n      }, function (err, book) {\n        // using 'chapters' scope for build:\n        const c = book.chapters.build({\n          title: 'Chapter 1'\n        });\n        book.chapters.create({\n          title: 'Chapter 2'\n        }, function () {\n          c.save(function () {\n            Chapter.count({\n              bookId: book.id\n            }, function (err, count) {\n              assert.equal(count, 2);\n              book.chapters({\n                where: {\n                  title: 'Chapter 1'\n                }\n              }, function (err, chapters) {\n                assert.equal(chapters.length, 1);\n                assert.equal(chapters[0].title, 'Chapter 1');\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Normalized properties passed in originally by loopback.createModel()","suites":["Model.properties"],"updatePoint":{"line":570,"column":76,"index":17931},"line":570,"code":"    it('Normalized properties passed in originally by loopback.createModel()', function () {\n      const props = {\n        s: String,\n        n: {\n          type: 'Number'\n        },\n        o: {\n          type: 'String',\n          min: 10,\n          max: 100\n        },\n        d: Date,\n        g: loopback.GeoPoint\n      };\n      const MyModel = loopback.createModel('foo', props);\n      Object.keys(MyModel.definition.properties).forEach(function (key) {\n        const p = MyModel.definition.properties[key];\n        const o = MyModel.definition.properties[key];\n        assert(p);\n        assert(o);\n        assert(typeof p.type === 'function');\n\n        if (typeof o === 'function') {\n          // the normalized property\n          // should match the given property\n          assert(p.type.name === o.name || p.type.name === o);\n        }\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Create a new model by extending an existing model","suites":["Model.extend()"],"updatePoint":{"line":601,"column":57,"index":18824},"line":601,"code":"    it('Create a new model by extending an existing model', function () {\n      const User = loopback.PersistedModel.extend('test-user', {\n        email: String\n      });\n\n      User.foo = function () {\n        return 'bar';\n      };\n\n      User.prototype.bar = function () {\n        return 'foo';\n      };\n\n      const MyUser = User.extend('my-user', {\n        a: String,\n        b: String\n      });\n      assert.equal(MyUser.prototype.bar, User.prototype.bar);\n      assert.equal(MyUser.foo, User.foo);\n      const user = new MyUser({\n        email: 'foo@bar.com',\n        a: 'foo',\n        b: 'bar'\n      });\n      assert.equal(user.email, 'foo@bar.com');\n      assert.equal(user.a, 'foo');\n      assert.equal(user.b, 'bar');\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"create isolated emitters for subclasses","suites":["Model.extend() events"],"updatePoint":{"line":631,"column":47,"index":19607},"line":631,"code":"    it('create isolated emitters for subclasses', function () {\n      const User1 = loopback.createModel('User1', {\n        'first': String,\n        'last': String\n      });\n      const User2 = loopback.createModel('User2', {\n        'name': String\n      });\n      let user1Triggered = false;\n      User1.once('x', function (event) {\n        user1Triggered = true;\n      });\n      let user2Triggered = false;\n      User2.once('x', function (event) {\n        user2Triggered = true;\n      });\n      assert(User1.once !== User2.once);\n      assert(User1.once !== loopback.Model.once);\n      User1.emit('x', User1);\n      assert(user1Triggered);\n      assert(!user2Triggered);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Get the Change Model","suites":["Model.getChangeModel()"],"updatePoint":{"line":681,"column":28,"index":21309},"line":681,"code":"    it('Get the Change Model', function () {\n      const UserChange = User.getChangeModel();\n      const change = new UserChange();\n      assert(change instanceof app.registry.getModel('Change'));\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Get the Source Id","suites":["Model.getSourceId(callback)"],"updatePoint":{"line":688,"column":25,"index":21573},"line":688,"code":"    it('Get the Source Id', function (done) {\n      User.getSourceId(function (err, id) {\n        assert.equal('memory-user', id);\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Create a checkpoint","suites":["Model.checkpoint(callback)"],"updatePoint":{"line":696,"column":27,"index":21801},"line":696,"code":"    it('Create a checkpoint', function (done) {\n      const Checkpoint = User.getChangeModel().getCheckpointModel();\n      const tasks = [getCurrentCheckpoint, checkpoint];\n      let result, current;\n      async.series(tasks, function (err) {\n        if (err) return done(err);\n        assert.equal(result, current + 1);\n        done();\n      });\n\n      function getCurrentCheckpoint(cb) {\n        Checkpoint.current(function (err, cp) {\n          current = cp;\n          cb(err);\n        });\n      }\n\n      function checkpoint(cb) {\n        User.checkpoint(function (err, cp) {\n          result = cp.seq;\n          cb(err);\n        });\n      }\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"should return the subclass of ACL","suites":["Model._getACLModel()"],"updatePoint":{"line":722,"column":41,"index":22523},"line":722,"code":"    it('should return the subclass of ACL', function () {\n      const Model = require('../').Model;\n\n      const originalValue = Model._ACL();\n\n      const acl = ACL.extend('acl');\n\n      Model._ACL(null); // Reset the ACL class for the base model\n\n\n      const model = Model._ACL();\n\n      Model._ACL(originalValue); // Reset the value back\n\n\n      assert.equal(model, acl);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"includes all aliases","suites":["PersistedModel remote methods"],"updatePoint":{"line":741,"column":28,"index":22958},"line":741,"code":"    it('includes all aliases', function () {\n      const app = loopback();\n      const model = PersistedModel.extend('PersistedModelForAliases');\n      app.dataSource('db', {\n        connector: 'memory'\n      });\n      app.model(model, {\n        dataSource: 'db'\n      }); // this code is used by loopback-sdk-angular codegen\n\n      const metadata = app.handler('rest').adapter.getClasses().filter(function (c) {\n        return c.name === model.modelName;\n      })[0];\n      let methodNames = [];\n      metadata.methods.forEach(function (method) {\n        methodNames.push(method.name);\n        let aliases = method.sharedMethod.aliases;\n\n        if (method.name.indexOf('prototype.') === 0) {\n          aliases = aliases.map(function (alias) {\n            return 'prototype.' + alias;\n          });\n        }\n\n        methodNames = methodNames.concat(aliases || []);\n      });\n      expect(methodNames).to.have.members([// NOTE(bajtos) These three methods are disabled by default\n      // Because all tests share the same global registry model\n      // and one of the tests was enabling remoting of \"destroyAll\",\n      // this test was seeing this method (with all aliases) as public\n      // 'destroyAll', 'deleteAll', 'remove',\n      'create', 'upsert', 'updateOrCreate', 'patchOrCreate', 'upsertWithWhere', 'patchOrCreateWithWhere', 'exists', 'findById', 'replaceById', 'replaceOrCreate', 'find', 'findOne', 'updateAll', 'update', 'deleteById', 'destroyById', 'removeById', 'count', 'prototype.patchAttributes', 'prototype.updateAttributes', 'createChangeStream']);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"emits a `remoteMethodDisabled` event","suites":["PersistedModel remote methods"],"updatePoint":{"line":774,"column":44,"index":24552},"line":774,"code":"    it('emits a `remoteMethodDisabled` event', function () {\n      const app = loopback();\n      const model = PersistedModel.extend('TestModelForDisablingRemoteMethod');\n      app.dataSource('db', {\n        connector: 'memory'\n      });\n      app.model(model, {\n        dataSource: 'db'\n      });\n\n      const callbackSpy = require('sinon').spy();\n\n      const TestModel = app.models.TestModelForDisablingRemoteMethod;\n      TestModel.on('remoteMethodDisabled', callbackSpy);\n      TestModel.disableRemoteMethod('findOne', true);\n      expect(callbackSpy).to.have.been.calledWith(TestModel.sharedClass, 'findOne');\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"emits a `remoteMethodDisabled` event from disableRemoteMethodByName","suites":["PersistedModel remote methods"],"updatePoint":{"line":791,"column":75,"index":25207},"line":791,"code":"    it('emits a `remoteMethodDisabled` event from disableRemoteMethodByName', function () {\n      const app = loopback();\n      const model = PersistedModel.extend('TestModelForDisablingRemoteMethod');\n      app.dataSource('db', {\n        connector: 'memory'\n      });\n      app.model(model, {\n        dataSource: 'db'\n      });\n\n      const callbackSpy = require('sinon').spy();\n\n      const TestModel = app.models.TestModelForDisablingRemoteMethod;\n      TestModel.on('remoteMethodDisabled', callbackSpy);\n      TestModel.disableRemoteMethodByName('findOne');\n      expect(callbackSpy).to.have.been.calledWith(TestModel.sharedClass, 'findOne');\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"emits a `remoteMethodAdded` event","suites":["PersistedModel remote methods"],"updatePoint":{"line":808,"column":41,"index":25828},"line":808,"code":"    it('emits a `remoteMethodAdded` event', function () {\n      const app = loopback();\n      app.dataSource('db', {\n        connector: 'memory'\n      });\n      const User = app.registry.getModel('User');\n      app.model(User, {\n        dataSource: 'db'\n      });\n      const Token = app.registry.getModel('AccessToken');\n      app.model(Token, {\n        dataSource: 'db'\n      });\n\n      const callbackSpy = require('sinon').spy();\n\n      const TestModel = app.models.User;\n      TestModel.on('remoteMethodAdded', callbackSpy);\n      TestModel.nestRemoting('accessTokens');\n      expect(callbackSpy).to.have.been.calledWith(TestModel.sharedClass);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"emits a `remoteMethodAdded` event from remoteMethod","suites":["PersistedModel remote methods"],"updatePoint":{"line":830,"column":57,"index":26507},"line":830,"code":"  it('emits a `remoteMethodAdded` event from remoteMethod', function () {\n    const app = loopback();\n    const model = PersistedModel.extend('TestModelForAddingRemoteMethod');\n    app.dataSource('db', {\n      connector: 'memory'\n    });\n    app.model(model, {\n      dataSource: 'db'\n    });\n\n    const callbackSpy = require('sinon').spy();\n\n    const TestModel = app.models.TestModelForAddingRemoteMethod;\n    TestModel.on('remoteMethodAdded', callbackSpy);\n    TestModel.remoteMethod('getTest', {\n      accepts: {\n        arg: 'options',\n        type: 'object',\n        http: 'optionsFromRequest'\n      },\n      returns: {\n        arg: 'test',\n        type: 'object'\n      },\n      http: {\n        verb: 'GET',\n        path: '/test'\n      }\n    });\n    expect(callbackSpy).to.have.been.calledWith(TestModel.sharedClass);\n  });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"calls the callback when already attached","suites":["Model.getApp(cb)"],"updatePoint":{"line":871,"column":48,"index":27607},"line":871,"code":"    it('calls the callback when already attached', function (done) {\n      app.model(TestModel, {\n        dataSource: 'db'\n      });\n      TestModel.getApp(function (err, a) {\n        if (err) return done(err);\n        expect(a).to.equal(app);\n        done();\n      }); // fails on time-out when not implemented correctly\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"calls the callback after attached","suites":["Model.getApp(cb)"],"updatePoint":{"line":881,"column":41,"index":27930},"line":881,"code":"    it('calls the callback after attached', function (done) {\n      TestModel.getApp(function (err, a) {\n        if (err) return done(err);\n        expect(a).to.equal(app);\n        done();\n      });\n      app.model(TestModel, {\n        dataSource: 'db'\n      }); // fails on time-out when not implemented correctly\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"sets empty options.accessToken for anonymous requests","suites":["Model.createOptionsFromRemotingContext"],"updatePoint":{"line":899,"column":61,"index":28547},"line":899,"code":"    it('sets empty options.accessToken for anonymous requests', function (done) {\n      request(app).get('/TestModels/saveOptions').expect(204, function (err) {\n        if (err) return done(err);\n        expect(actualOptions).to.include({\n          accessToken: null\n        });\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"sets options for juggler","suites":["Model.createOptionsFromRemotingContext"],"updatePoint":{"line":908,"column":32,"index":28831},"line":908,"code":"    it('sets options for juggler', function (done) {\n      request(app).get('/TestModels/saveOptions').expect(204, function (err) {\n        if (err) return done(err);\n        expect(actualOptions).to.include({\n          prohibitHiddenPropertiesInQuery: true,\n          maxDepthOfQuery: 12,\n          maxDepthOfData: 32\n        });\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"honors model settings to create options for juggler","suites":["Model.createOptionsFromRemotingContext"],"updatePoint":{"line":919,"column":59,"index":29223},"line":919,"code":"    it('honors model settings to create options for juggler', function (done) {\n      TestModel.definition.settings = {\n        prohibitHiddenPropertiesInQuery: false,\n        maxDepthOfData: 64\n      };\n      request(app).get('/TestModels/saveOptions').expect(204, function (err) {\n        if (err) return done(err);\n        expect(actualOptions).to.include({\n          prohibitHiddenPropertiesInQuery: false,\n          maxDepthOfQuery: 12,\n          maxDepthOfData: 64\n        });\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"sets options.accessToken for authorized requests","suites":["Model.createOptionsFromRemotingContext"],"updatePoint":{"line":934,"column":56,"index":29737},"line":934,"code":"    it('sets options.accessToken for authorized requests', function (done) {\n      request(app).get('/TestModels/saveOptions').set('Authorization', accessToken.id).expect(204, function (err) {\n        if (err) return done(err);\n        expect(actualOptions).to.have.property('accessToken');\n        expect(actualOptions.accessToken.toObject()).to.eql(accessToken.toObject());\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"allows \"beforeRemote\" hooks to contribute options","suites":["Model.createOptionsFromRemotingContext"],"updatePoint":{"line":942,"column":57,"index":30148},"line":942,"code":"    it('allows \"beforeRemote\" hooks to contribute options', function (done) {\n      TestModel.beforeRemote('saveOptions', function (ctx, unused, next) {\n        ctx.args.options.hooked = true;\n        next();\n      });\n      request(app).get('/TestModels/saveOptions').expect(204, function (err) {\n        if (err) return done(err);\n        expect(actualOptions).to.have.property('hooked', true);\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"sets empty options.accessToken for requests coming from websocket/primus adapters","suites":["Model.createOptionsFromRemotingContext"],"updatePoint":{"line":953,"column":89,"index":30611},"line":953,"code":"    it('sets empty options.accessToken for requests coming from websocket/primus adapters', function () {\n      const primusContext = {};\n      const opts = TestModel.createOptionsFromRemotingContext(primusContext);\n      expect(opts).to.have.property('accessToken', null);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"allows apps to add options before remoting hooks","suites":["Model.createOptionsFromRemotingContext"],"updatePoint":{"line":958,"column":56,"index":30860},"line":958,"code":"    it('allows apps to add options before remoting hooks', function (done) {\n      TestModel.createOptionsFromRemotingContext = function (ctx) {\n        return {\n          hooks: []\n        };\n      };\n\n      TestModel.beforeRemote('saveOptions', function (ctx, unused, next) {\n        ctx.args.options.hooks.push('beforeRemote');\n        next();\n      }); // In real apps, this code can live in a component or in a boot script\n\n      app.remotes().phases.addBefore('invoke', 'options-from-request').use(function (ctx, next) {\n        ctx.args.options.hooks.push('custom');\n        next();\n      });\n      request(app).get('/TestModels/saveOptions').expect(204, function (err) {\n        if (err) return done(err);\n        expect(actualOptions.hooks).to.eql(['custom', 'beforeRemote']);\n        done();\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"does not add isStatic properties to the method settings","suites":["Create Model with remote methods from JSON description"],"updatePoint":{"line":1033,"column":63,"index":32994},"line":1033,"code":"    it('does not add isStatic properties to the method settings', function () {\n      const app = loopback();\n      const Foo = app.registry.createModel({\n        name: 'Foo',\n        methods: {\n          staticMethod: {}\n        }\n      });\n      app.model(Foo);\n      expect(app.models.Foo.settings.methods.staticMethod).to.eql({});\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"works for one user model and valid credentials","suites":["Multiple users with custom principalType","User.login"],"updatePoint":{"line":110,"column":54,"index":3340},"line":110,"code":"    it('works for one user model and valid credentials', function () {\n      return OneUser.login(commonCredentials).then(function (accessToken) {\n        assertGoodToken(accessToken, userFromOneModel);\n      });\n    });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"works for a second user model and valid credentials","suites":["Multiple users with custom principalType","User.login"],"updatePoint":{"line":115,"column":59,"index":3566},"line":115,"code":"    it('works for a second user model and valid credentials', function () {\n      return AnotherUser.login(commonCredentials).then(function (accessToken) {\n        assertGoodToken(accessToken, userFromAnotherModel);\n      });\n    });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"fails when credentials are not correct","suites":["Multiple users with custom principalType","User.login"],"updatePoint":{"line":120,"column":46,"index":3787},"line":120,"code":"    it('fails when credentials are not correct', function () {\n      return OneUser.login({\n        email: 'foo@bar.com',\n        password: 'invalid'\n      }).then(function onSuccess() {\n        throw new Error('OneUser.login() should have failed');\n      }, function onError(err) {\n        expect(err).to.have.property('code', 'LOGIN_FAILED');\n      });\n    });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"logs out a user from user model 1 without logging out user from model 2","suites":["Multiple users with custom principalType","User.logout"],"updatePoint":{"line":143,"column":79,"index":4593},"line":143,"code":"    it('logs out a user from user model 1 without logging out user from model 2', function () {\n      let tokenOfOneUser;\n      return Promise.all([OneUser.login(commonCredentials), AnotherUser.login(commonCredentials)]).spread(function (t1, t2) {\n        tokenOfOneUser = t1;\n        return OneUser.logout(tokenOfOneUser.id);\n      }).then(function () {\n        return AccessToken.find({});\n      }).then(function (allTokens) {\n        const data = allTokens.map(function (token) {\n          return {\n            userId: token.userId,\n            principalType: token.principalType\n          };\n        });\n        expect(data).to.eql([// no token for userFromAnotherModel\n        {\n          userId: userFromAnotherModel.id,\n          principalType: 'AnotherUser'\n        }]);\n      });\n    });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"creates a temp accessToken to allow a user to change password","suites":["Multiple users with custom principalType","Password Reset","User.resetPassword(options)"],"updatePoint":{"line":171,"column":71,"index":5605},"line":171,"code":"      it('creates a temp accessToken to allow a user to change password', function () {\n        return Promise.all([OneUser.resetPassword({\n          email: options.email\n        }), waitForResetRequestAndVerify]);\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"impact only the related user","suites":["Multiple users with custom principalType","AccessToken (session) invalidation when changing email"],"updatePoint":{"line":190,"column":36,"index":6368},"line":190,"code":"    it('impact only the related user', function () {\n      return OneUser.create({\n        email: 'original@example.com',\n        password: 'bar'\n      }).then(function (u) {\n        anotherUserFromOneModel = u;\n        return Promise.all([OneUser.login({\n          email: 'original@example.com',\n          password: 'bar'\n        }), OneUser.login(commonCredentials), AnotherUser.login(commonCredentials)]);\n      }).then(function () {\n        return anotherUserFromOneModel.updateAttribute('email', 'updated@example.com');\n      }).then(function () {\n        // we need to sort on principalType to ensure stability in results' order\n        return AccessToken.find({\n          'order': 'principalType ASC'\n        });\n      }).then(function (allTokens) {\n        const data = allTokens.map(function (token) {\n          return {\n            userId: token.userId,\n            principalType: token.principalType\n          };\n        });\n        expect(data).to.eql([// no token for anotherUserFromOneModel\n        {\n          userId: userFromAnotherModel.id,\n          principalType: 'AnotherUser'\n        }, {\n          userId: userFromOneModel.id,\n          principalType: 'OneUser'\n        }]);\n      });\n    });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"returns user although principals contain non USER principals","suites":["Multiple users with custom principalType","AccessContext","getUser()"],"updatePoint":{"line":233,"column":70,"index":7883},"line":233,"code":"      it('returns user although principals contain non USER principals', function () {\n        return Promise.try(function () {\n          addToAccessContext([{\n            type: Principal.ROLE\n          }, {\n            type: Principal.APP\n          }, {\n            type: Principal.SCOPE\n          }, {\n            type: OneUser.modelName,\n            id: userFromOneModel.id\n          }]);\n          const user = accessContext.getUser();\n          expect(user).to.eql({\n            id: userFromOneModel.id,\n            principalType: OneUser.modelName\n          });\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"returns user although principals contain invalid principals","suites":["Multiple users with custom principalType","AccessContext","getUser()"],"updatePoint":{"line":252,"column":69,"index":8472},"line":252,"code":"      it('returns user although principals contain invalid principals', function () {\n        return Promise.try(function () {\n          addToAccessContext([{\n            type: 'AccessToken'\n          }, {\n            type: 'invalidModelName'\n          }, {\n            type: OneUser.modelName,\n            id: userFromOneModel.id\n          }]);\n          const user = accessContext.getUser();\n          expect(user).to.eql({\n            id: userFromOneModel.id,\n            principalType: OneUser.modelName\n          });\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"supports any level of built-in User model inheritance","suites":["Multiple users with custom principalType","AccessContext","getUser()"],"updatePoint":{"line":269,"column":63,"index":9010},"line":269,"code":"      it('supports any level of built-in User model inheritance', function () {\n        ThirdUser = createUserModel(app, 'ThirdUser', {\n          base: 'OneUser'\n        });\n        return ThirdUser.create(commonCredentials).then(function (userFromThirdModel) {\n          accessContext.addPrincipal(ThirdUser.modelName, userFromThirdModel.id);\n          const user = accessContext.getUser();\n          expect(user).to.eql({\n            id: userFromThirdModel.id,\n            principalType: ThirdUser.modelName\n          });\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"returns users when using custom user principalType","suites":["Multiple users with custom principalType","Role model","role.users()"],"updatePoint":{"line":305,"column":60,"index":10180},"line":305,"code":"      it('returns users when using custom user principalType', function () {\n        return userRole.principals.create({\n          principalType: OneUser.modelName,\n          principalId: userFromOneModel.id\n        }).then(function () {\n          return userRole.users({\n            where: {\n              principalType: OneUser.modelName\n            }\n          });\n        }).then(getIds).then(function (userIds) {\n          expect(userIds).to.eql([userFromOneModel.id]);\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"returns empty array when using invalid principalType","suites":["Multiple users with custom principalType","Role model","role.users()"],"updatePoint":{"line":319,"column":62,"index":10679},"line":319,"code":"      it('returns empty array when using invalid principalType', function () {\n        return userRole.principals.create({\n          principalType: 'invalidModelName',\n          principalId: userFromOneModel.id\n        }).then(function () {\n          return userRole.users({\n            where: {\n              principalType: 'invalidModelName'\n            }\n          });\n        }).then(function (users) {\n          expect(users).to.be.empty();\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"returns the correct user instance","suites":["Multiple users with custom principalType","Role model","principal.user()"],"updatePoint":{"line":335,"column":43,"index":11183},"line":335,"code":"      it('returns the correct user instance', function () {\n        return userRole.principals.create({\n          principalType: OneUser.modelName,\n          principalId: userFromOneModel.id\n        }).then(function (principal) {\n          return principal.user();\n        }).then(function (user) {\n          expect(user).to.have.property('id', userFromOneModel.id);\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"returns null when created with invalid principalType","suites":["Multiple users with custom principalType","Role model","principal.user()"],"updatePoint":{"line":345,"column":62,"index":11591},"line":345,"code":"      it('returns null when created with invalid principalType', function () {\n        return userRole.principals.create({\n          principalType: 'invalidModelName',\n          principalId: userFromOneModel.id\n        }).then(function (principal) {\n          return principal.user();\n        }).then(function (user) {\n          expect(user).to.not.exist();\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"supports isInRole()","suites":["Multiple users with custom principalType","Role model","isInRole() & getRole()"],"updatePoint":{"line":363,"column":29,"index":12183},"line":363,"code":"      it('supports isInRole()', function () {\n        return Role.isInRole('userRole', userOneBaseContext).then(function (isInRole) {\n          expect(isInRole).to.be.true();\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"supports getRoles()","suites":["Multiple users with custom principalType","Role model","isInRole() & getRole()"],"updatePoint":{"line":368,"column":29,"index":12380},"line":368,"code":"      it('supports getRoles()', function () {\n        return Role.getRoles(userOneBaseContext).then(function (roles) {\n          expect(roles).to.eql([Role.AUTHENTICATED, Role.EVERYONE, userRole.id]);\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"supports $authenticated","suites":["Multiple users with custom principalType","Role model","built-in role resolvers"],"updatePoint":{"line":375,"column":33,"index":12669},"line":375,"code":"      it('supports $authenticated', function () {\n        return Role.isInRole(Role.AUTHENTICATED, userOneBaseContext).then(function (isInRole) {\n          expect(isInRole).to.be.true();\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"supports $unauthenticated","suites":["Multiple users with custom principalType","Role model","built-in role resolvers"],"updatePoint":{"line":380,"column":35,"index":12880},"line":380,"code":"      it('supports $unauthenticated', function () {\n        return Role.isInRole(Role.UNAUTHENTICATED, userOneBaseContext).then(function (isInRole) {\n          expect(isInRole).to.be.false();\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"supports legacy behavior with relations","suites":["Multiple users with custom principalType","Role model","built-in role resolvers","$owner"],"updatePoint":{"line":386,"column":51,"index":13149},"line":386,"code":"        it('supports legacy behavior with relations', function () {\n          const Album = app.registry.createModel('Album', {\n            name: String,\n            userId: Number\n          }, {\n            relations: {\n              user: {\n                type: 'belongsTo',\n                model: 'OneUser',\n                foreignKey: 'userId'\n              }\n            }\n          });\n          app.model(Album, {\n            dataSource: 'db'\n          });\n          return Album.create({\n            name: 'album',\n            userId: userFromOneModel.id\n          }).then(function (album) {\n            const validContext = {\n              principalType: OneUser.modelName,\n              principalId: userFromOneModel.id,\n              model: Album,\n              id: album.id\n            };\n            return Role.isInRole(Role.OWNER, validContext);\n          }).then(function (isOwner) {\n            expect(isOwner).to.be.true();\n          });\n        }); // With multiple users config, we cannot resolve a user based just on","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"legacy behavior resolves false without belongsTo relation","suites":["Multiple users with custom principalType","Role model","built-in role resolvers","$owner"],"updatePoint":{"line":419,"column":69,"index":14286},"line":419,"code":"        it('legacy behavior resolves false without belongsTo relation', function () {\n          const Album = app.registry.createModel('Album', {\n            name: String,\n            userId: Number,\n            owner: Number\n          });\n          app.model(Album, {\n            dataSource: 'db'\n          });\n          return Album.create({\n            name: 'album',\n            userId: userFromOneModel.id,\n            owner: userFromOneModel.id\n          }).then(function (album) {\n            const authContext = {\n              principalType: OneUser.modelName,\n              principalId: userFromOneModel.id,\n              model: Album,\n              id: album.id\n            };\n            return Role.isInRole(Role.OWNER, authContext);\n          }).then(function (isOwner) {\n            expect(isOwner).to.be.false();\n          });\n        });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"legacy behavior resolves false if owner has incorrect principalType","suites":["Multiple users with custom principalType","Role model","built-in role resolvers","$owner"],"updatePoint":{"line":444,"column":79,"index":15151},"line":444,"code":"        it('legacy behavior resolves false if owner has incorrect principalType', function () {\n          const Album = app.registry.createModel('Album', {\n            name: String,\n            userId: Number\n          }, {\n            relations: {\n              user: {\n                type: 'belongsTo',\n                model: 'OneUser',\n                foreignKey: 'userId'\n              }\n            }\n          });\n          app.model(Album, {\n            dataSource: 'db'\n          });\n          return Album.create({\n            name: 'album',\n            userId: userFromOneModel.id\n          }).then(function (album) {\n            const invalidPrincipalTypes = ['invalidContextName', 'USER', AnotherUser.modelName];\n            const invalidContexts = invalidPrincipalTypes.map(principalType => {\n              return {\n                principalType,\n                principalId: userFromOneModel.id,\n                model: Album,\n                id: album.id\n              };\n            });\n            return Promise.map(invalidContexts, context => {\n              return Role.isInRole(Role.OWNER, context).then(isOwner => {\n                return {\n                  principalType: context.principalType,\n                  isOwner\n                };\n              });\n            });\n          }).then(result => {\n            expect(result).to.eql([{\n              principalType: 'invalidContextName',\n              isOwner: false\n            }, {\n              principalType: 'USER',\n              isOwner: false\n            }, {\n              principalType: AnotherUser.modelName,\n              isOwner: false\n            }]);\n          });\n        });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"resolves the owner using the corrent belongsTo relation","suites":["Multiple users with custom principalType","Role model","built-in role resolvers","$owner"],"line":494,"code":"        it.skip('resolves the owner using the corrent belongsTo relation', function () {","file":"multiple-user-principal-types.test.js","skipped":true,"dir":"test"},{"name":"resolves user by id using custom user principalType","suites":["Multiple users with custom principalType","Role model","isMappedToRole()"],"updatePoint":{"line":614,"column":61,"index":21354},"line":614,"code":"      it('resolves user by id using custom user principalType', function () {\n        return ACL.resolvePrincipal(OneUser.modelName, userFromOneModel.id).then(function (principal) {\n          expect(principal.id).to.eql(userFromOneModel.id);\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"throws error with code 'INVALID_PRINCIPAL_TYPE' when principalType is incorrect","suites":["Multiple users with custom principalType","Role model","isMappedToRole()"],"updatePoint":{"line":619,"column":91,"index":21648},"line":619,"code":"      it('throws error with code \\'INVALID_PRINCIPAL_TYPE\\' when principalType is incorrect', function () {\n        return ACL.resolvePrincipal('incorrectPrincipalType', userFromOneModel.id).then(function onSuccess() {\n          throw new Error('ACL.resolvePrincipal() should have failed');\n        }, function onError(err) {\n          expect(err).to.have.property('statusCode', 400);\n          expect(err).to.have.property('code', 'INVALID_PRINCIPAL_TYPE');\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"reports isMappedToRole by user.username using custom user principalType","suites":["Multiple users with custom principalType","Role model","isMappedToRole()"],"updatePoint":{"line":627,"column":81,"index":22119},"line":627,"code":"      it('reports isMappedToRole by user.username using custom user principalType', function () {\n        return ACL.isMappedToRole(OneUser.modelName, userFromOneModel.username, 'userRole').then(function (isMappedToRole) {\n          expect(isMappedToRole).to.be.true();\n        });\n      });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"sets password when the access token belongs to the user","suites":["Multiple users with custom principalType","setPassword"],"updatePoint":{"line":637,"column":63,"index":22512},"line":637,"code":"    it('sets password when the access token belongs to the user', () => {\n      return supertest(app).post('/OneUsers/reset-password').set('Authorization', resetToken.id).send({\n        newPassword: 'new-pass'\n      }).expect(204).then(() => {\n        return supertest(app).post('/OneUsers/login').send({\n          email: commonCredentials.email,\n          password: 'new-pass'\n        }).expect(200);\n      });\n    });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"fails when the access token belongs to a different user mode","suites":["Multiple users with custom principalType","setPassword"],"updatePoint":{"line":647,"column":68,"index":22937},"line":647,"code":"    it('fails when the access token belongs to a different user mode', () => {\n      logServerErrorsOtherThan(403, app);\n      return supertest(app).post('/AnotherUsers/reset-password').set('Authorization', resetToken.id).send({\n        newPassword: 'new-pass'\n      }).expect(403).then(() => {\n        return supertest(app).post('/AnotherUsers/login').send(commonCredentials).expect(200);\n      });\n    });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"changes password when the access token belongs to the user","suites":["Multiple users with custom principalType","changePassword"],"updatePoint":{"line":665,"column":66,"index":23700},"line":665,"code":"    it('changes password when the access token belongs to the user', () => {\n      return supertest(app).post('/OneUsers/change-password').set('Authorization', token.id).send({\n        oldPassword: commonCredentials.password,\n        newPassword: 'new-pass'\n      }).expect(204).then(() => {\n        return supertest(app).post('/OneUsers/login').send({\n          email: commonCredentials.email,\n          password: 'new-pass'\n        }).expect(200);\n      });\n    });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"fails when the access token belongs to a different user mode","suites":["Multiple users with custom principalType","changePassword"],"updatePoint":{"line":676,"column":68,"index":24170},"line":676,"code":"    it('fails when the access token belongs to a different user mode', () => {\n      logServerErrorsOtherThan(403, app);\n      return supertest(app).post('/AnotherUsers/change-password').set('Authorization', token.id).send({\n        oldPassword: commonCredentials.password,\n        newPassword: 'new-pass'\n      }).expect(403).then(() => {\n        return supertest(app).post('/AnotherUsers/login').send(commonCredentials).expect(200);\n      });\n    });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"allows users belonging to authorized role","suites":["Multiple users with custom principalType","authorization"],"updatePoint":{"line":692,"column":49,"index":24820},"line":692,"code":"    it('allows users belonging to authorized role', () => {\n      logServerErrorsOtherThan(200, app);\n      return userFromOneModel.createAccessToken().then(token => {\n        return supertest(app).get('/Products').set('Authorization', token.id).expect(200, []);\n      });\n    });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"rejects other users","suites":["Multiple users with custom principalType","authorization"],"updatePoint":{"line":698,"column":27,"index":25079},"line":698,"code":"    it('rejects other users', () => {\n      logServerErrorsOtherThan(401, app);\n      return userFromAnotherModel.createAccessToken().then(token => {\n        return supertest(app).get('/Products').set('Authorization', token.id).expect(401);\n      });\n    });","file":"multiple-user-principal-types.test.js","skipped":false,"dir":"test"},{"name":"should throw error upon extending non-exist base model","suites":["Registry","createModel"],"updatePoint":{"line":15,"column":62,"index":460},"line":15,"code":"    it('should throw error upon extending non-exist base model', function () {\n      const app = loopback();\n      const props = {};\n      const opts = {\n        base: 'nonexistent'\n      };\n      expect(function () {\n        app.registry.createModel('aModel', props, opts);\n      }).to.throw(/model\\s`aModel`(.*)unknown\\smodel\\s`nonexistent`/);\n    });","file":"registries.test.js","skipped":false,"dir":"test"},{"name":"should allow two apps to reuse the same model name","suites":["Registry","one per app"],"updatePoint":{"line":27,"column":58,"index":856},"line":27,"code":"    it('should allow two apps to reuse the same model name', function (done) {\n      const appFoo = loopback();\n      const appBar = loopback();\n      const modelName = 'MyModel';\n      const subModelName = 'Sub' + modelName;\n      const settings = {\n        base: 'PersistedModel'\n      };\n      appFoo.set('perAppRegistries', true);\n      appBar.set('perAppRegistries', true);\n      const dsFoo = appFoo.dataSource('dsFoo', {\n        connector: 'memory'\n      });\n      const dsBar = appFoo.dataSource('dsBar', {\n        connector: 'memory'\n      });\n      const FooModel = appFoo.registry.createModel(modelName, {}, settings);\n      appFoo.model(FooModel, {\n        dataSource: dsFoo\n      });\n      const FooSubModel = appFoo.registry.createModel(subModelName, {}, settings);\n      appFoo.model(FooSubModel, {\n        dataSource: dsFoo\n      });\n      const BarModel = appBar.registry.createModel(modelName, {}, settings);\n      appBar.model(BarModel, {\n        dataSource: dsBar\n      });\n      const BarSubModel = appBar.registry.createModel(subModelName, {}, settings);\n      appBar.model(BarSubModel, {\n        dataSource: dsBar\n      });\n      FooModel.hasMany(FooSubModel);\n      BarModel.hasMany(BarSubModel);\n      expect(appFoo.models[modelName]).to.not.equal(appBar.models[modelName]);\n      BarModel.create({\n        name: 'bar'\n      }, function (err, bar) {\n        assert(!err);\n        bar.subMyModels.create({\n          parent: 'bar'\n        }, function (err) {\n          assert(!err);\n          FooSubModel.find(function (err, foos) {\n            assert(!err);\n            expect(foos).to.eql([]);\n            BarSubModel.find(function (err, bars) {\n              assert(!err);\n              expect(bars.map(function (f) {\n                return f.parent;\n              })).to.eql(['bar']);\n              done();\n            });\n          });\n        });\n      });\n    });","file":"registries.test.js","skipped":false,"dir":"test"},{"name":"should support the save method","suites":["RemoteConnector"],"updatePoint":{"line":77,"column":36,"index":2376},"line":77,"code":"  it('should support the save method', function (done) {\n    let calledServerCreate = false;\n    const RemoteModel = loopback.PersistedModel.extend('TestModel');\n    RemoteModel.attachTo(this.remote);\n    const ServerModel = this.ServerModel;\n\n    ServerModel.create = function (data, options, cb) {\n      calledServerCreate = true;\n      data.id = 1;\n      cb(null, data);\n    };\n\n    ServerModel.setupRemoting();\n    const m = new RemoteModel({\n      foo: 'bar'\n    });\n    m.save(function (err, inst) {\n      if (err) return done(err);\n      assert(inst instanceof RemoteModel);\n      assert(calledServerCreate);\n      done();\n    });\n  });","file":"remote-connector.test.js","skipped":false,"dir":"test"},{"name":"should coerce arguments based on the type","suites":["remoting coercion"],"updatePoint":{"line":14,"column":47,"index":408},"line":14,"code":"  it('should coerce arguments based on the type', function (done) {\n    let called = false;\n    const app = loopback();\n    app.use(loopback.rest());\n    const TestModel = app.registry.createModel('TestModel', {}, {\n      base: 'Model'\n    });\n    app.model(TestModel, {\n      public: true\n    });\n\n    TestModel.test = function (inst, cb) {\n      called = true;\n      assert(inst instanceof TestModel);\n      assert(inst.foo === 'bar');\n      cb();\n    };\n\n    TestModel.remoteMethod('test', {\n      accepts: {\n        arg: 'inst',\n        type: 'TestModel',\n        http: {\n          source: 'body'\n        }\n      },\n      http: {\n        path: '/test',\n        verb: 'post'\n      }\n    });\n    request(app).post('/TestModels/test').set('Content-Type', 'application/json').send({\n      foo: 'bar'\n    }).end(function (err) {\n      if (err) return done(err);\n      assert(called);\n      done();\n    });\n  });","file":"remoting-coercion.test.js","skipped":false,"dir":"test"},{"name":"rejects anonymous READ","suites":["Replication over REST","the replication scenario scaffolded for the tests","Car model"],"updatePoint":{"line":53,"column":32,"index":1356},"line":53,"code":"      it('rejects anonymous READ', function (done) {\n        listCars().expect(401, done);\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"rejects anonymous WRITE","suites":["Replication over REST","the replication scenario scaffolded for the tests","Car model"],"updatePoint":{"line":56,"column":33,"index":1458},"line":56,"code":"      it('rejects anonymous WRITE', function (done) {\n        createCar().expect(401, done);\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"allows EMERY to READ","suites":["Replication over REST","the replication scenario scaffolded for the tests","Car model"],"updatePoint":{"line":59,"column":30,"index":1558},"line":59,"code":"      it('allows EMERY to READ', function (done) {\n        listCars().set('Authorization', emeryToken).expect(200, done);\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"denies EMERY to WRITE","suites":["Replication over REST","the replication scenario scaffolded for the tests","Car model"],"updatePoint":{"line":62,"column":31,"index":1691},"line":62,"code":"      it('denies EMERY to WRITE', function (done) {\n        createCar().set('Authorization', emeryToken).expect(401, done);\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"allows ALICE to READ","suites":["Replication over REST","the replication scenario scaffolded for the tests","Car model"],"updatePoint":{"line":65,"column":30,"index":1824},"line":65,"code":"      it('allows ALICE to READ', function (done) {\n        listCars().set('Authorization', aliceToken).expect(200, done);\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"denies ALICE to WRITE","suites":["Replication over REST","the replication scenario scaffolded for the tests","Car model"],"updatePoint":{"line":68,"column":31,"index":1957},"line":68,"code":"      it('denies ALICE to WRITE', function (done) {\n        createCar().set('Authorization', aliceToken).expect(401, done);\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"allows PETER to READ","suites":["Replication over REST","the replication scenario scaffolded for the tests","Car model"],"updatePoint":{"line":71,"column":30,"index":2090},"line":71,"code":"      it('allows PETER to READ', function (done) {\n        listCars().set('Authorization', peterToken).expect(200, done);\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"allows PETER to WRITE","suites":["Replication over REST","the replication scenario scaffolded for the tests","Car model"],"updatePoint":{"line":74,"column":31,"index":2223},"line":74,"code":"      it('allows PETER to WRITE', function (done) {\n        createCar().set('Authorization', peterToken).expect(200, done);\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"rejects pull from server","suites":["Replication over REST","sync with model-level permissions","as anonymous user"],"updatePoint":{"line":91,"column":34,"index":2679},"line":91,"code":"      it('rejects pull from server', function (done) {\n        RemoteCar.replicate(LocalCar, expectHttpError(401, done));\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"rejects push to the server","suites":["Replication over REST","sync with model-level permissions","as anonymous user"],"updatePoint":{"line":94,"column":36,"index":2813},"line":94,"code":"      it('rejects push to the server', function (done) {\n        LocalCar.replicate(RemoteCar, expectHttpError(401, done));\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"rejects pull from server","suites":["Replication over REST","sync with model-level permissions","as user with READ-only permissions"],"updatePoint":{"line":102,"column":34,"index":3095},"line":102,"code":"      it('rejects pull from server', function (done) {\n        RemoteCar.replicate(LocalCar, expectHttpError(401, done));\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"rejects push to the server","suites":["Replication over REST","sync with model-level permissions","as user with READ-only permissions"],"updatePoint":{"line":105,"column":36,"index":3229},"line":105,"code":"      it('rejects push to the server', function (done) {\n        LocalCar.replicate(RemoteCar, expectHttpError(401, done));\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"allows pull from server","suites":["Replication over REST","sync with model-level permissions","as user with REPLICATE-only permissions"],"updatePoint":{"line":113,"column":33,"index":3515},"line":113,"code":"      it('allows pull from server', function (done) {\n        RemoteCar.replicate(LocalCar, function (err, conflicts, cps) {\n          if (err) return done(err);\n          if (conflicts.length) return done(conflictError(conflicts));\n          LocalCar.find(function (err, list) {\n            if (err) return done(err);\n            expect(list.map(carToString)).to.include.members(serverCars);\n            done();\n          });\n        });\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"rejects push to the server","suites":["Replication over REST","sync with model-level permissions","as user with REPLICATE-only permissions"],"updatePoint":{"line":124,"column":36,"index":3967},"line":124,"code":"      it('rejects push to the server', function (done) {\n        LocalCar.replicate(RemoteCar, expectHttpError(401, done));\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"allows pull from server","suites":["Replication over REST","sync with model-level permissions","as user with READ and WRITE permissions"],"updatePoint":{"line":132,"column":33,"index":4253},"line":132,"code":"      it('allows pull from server', function (done) {\n        RemoteCar.replicate(LocalCar, function (err, conflicts, cps) {\n          if (err) return done(err);\n          if (conflicts.length) return done(conflictError(conflicts));\n          LocalCar.find(function (err, list) {\n            if (err) return done(err);\n            expect(list.map(carToString)).to.include.members(serverCars);\n            done();\n          });\n        });\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"allows push to the server","suites":["Replication over REST","sync with model-level permissions","as user with READ and WRITE permissions"],"updatePoint":{"line":143,"column":35,"index":4704},"line":143,"code":"      it('allows push to the server', function (done) {\n        LocalCar.replicate(RemoteCar, function (err, conflicts, cps) {\n          if (err) return done(err);\n          if (conflicts.length) return done(conflictError(conflicts));\n          ServerCar.find(function (err, list) {\n            if (err) return done(err);\n            expect(list.map(carToString)).to.include.members(clientCars);\n            done();\n          });\n        });\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"rejects resolve() on the client","suites":["Replication over REST","conflict resolution with model-level permissions","as anonymous user"],"updatePoint":{"line":164,"column":41,"index":5540},"line":164,"code":"      it('rejects resolve() on the client', function (done) {\n        // simulate replication Client->Server\n        const conflict = new LocalConflict(conflictedCarId, LocalCar, RemoteCar);\n        conflict.resolveUsingSource(expectHttpError(401, done));\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"rejects resolve() on the server","suites":["Replication over REST","conflict resolution with model-level permissions","as anonymous user"],"updatePoint":{"line":169,"column":41,"index":5806},"line":169,"code":"      it('rejects resolve() on the server', function (done) {\n        // simulate replication Server->Client\n        const conflict = new RemoteConflict(conflictedCarId, RemoteCar, LocalCar);\n        conflict.resolveUsingSource(expectHttpError(401, done));\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"allows resolve() on the client","suites":["Replication over REST","conflict resolution with model-level permissions","as user with READ-only permissions"],"updatePoint":{"line":179,"column":40,"index":6222},"line":179,"code":"      it('allows resolve() on the client', function (done) {\n        // simulate replication Client->Server\n        const conflict = new LocalConflict(conflictedCarId, LocalCar, RemoteCar);\n        conflict.resolveUsingSource(done);\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"rejects resolve() on the server","suites":["Replication over REST","conflict resolution with model-level permissions","as user with READ-only permissions"],"updatePoint":{"line":184,"column":41,"index":6466},"line":184,"code":"      it('rejects resolve() on the server', function (done) {\n        // simulate replication Server->Client\n        const conflict = new RemoteConflict(conflictedCarId, RemoteCar, LocalCar);\n        conflict.resolveUsingSource(expectHttpError(401, done));\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"allows reverse resolve() on the client","suites":["Replication over REST","conflict resolution with model-level permissions","as user with REPLICATE-only permissions"],"updatePoint":{"line":194,"column":48,"index":6895},"line":194,"code":"      it('allows reverse resolve() on the client', function (done) {\n        RemoteCar.replicate(LocalCar, function (err, conflicts) {\n          if (err) return done(err);\n          expect(conflicts, 'conflicts').to.have.length(1); // By default, conflicts are always resolved by modifying\n          // the source datasource, so that the next replication run\n          // replicates the resolved data.\n          // However, when replicating changes from a datasource that\n          // users are not authorized to change, the users have to resolve\n          // conflicts at the target, discarding any changes made in\n          // the target datasource only.\n\n          conflicts[0].swapParties().resolveUsingTarget(function (err) {\n            if (err) return done(err);\n            RemoteCar.replicate(LocalCar, function (err, conflicts) {\n              if (err) return done(err);\n              if (conflicts.length) return done(conflictError(conflicts));\n              done();\n            });\n          });\n        });\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"rejects resolve() on the server","suites":["Replication over REST","conflict resolution with model-level permissions","as user with REPLICATE-only permissions"],"updatePoint":{"line":215,"column":41,"index":7918},"line":215,"code":"      it('rejects resolve() on the server', function (done) {\n        RemoteCar.replicate(LocalCar, function (err, conflicts) {\n          if (err) return done(err);\n          expect(conflicts, 'conflicts').to.have.length(1);\n          conflicts[0].resolveUsingSource(expectHttpError(401, done));\n        });\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"allows resolve() on the client","suites":["Replication over REST","conflict resolution with model-level permissions","as user with READ and WRITE permissions"],"updatePoint":{"line":227,"column":40,"index":8390},"line":227,"code":"      it('allows resolve() on the client', function (done) {\n        LocalCar.replicate(RemoteCar, function (err, conflicts) {\n          if (err) return done(err);\n          expect(conflicts).to.have.length(1);\n          conflicts[0].resolveUsingSource(function (err) {\n            if (err) return done(err);\n            LocalCar.replicate(RemoteCar, function (err, conflicts) {\n              if (err) return done(err);\n              if (conflicts.length) return done(conflictError(conflicts));\n              done();\n            });\n          });\n        });\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"allows resolve() on the server","suites":["Replication over REST","conflict resolution with model-level permissions","as user with READ and WRITE permissions"],"updatePoint":{"line":241,"column":40,"index":8959},"line":241,"code":"      it('allows resolve() on the server', function (done) {\n        RemoteCar.replicate(LocalCar, function (err, conflicts) {\n          if (err) return done(err);\n          expect(conflicts).to.have.length(1);\n          conflicts[0].resolveUsingSource(function (err) {\n            if (err) return done(err);\n            RemoteCar.replicate(LocalCar, function (err, conflicts) {\n              if (err) return done(err);\n              if (conflicts.length) return done(conflictError(conflicts));\n              done();\n            });\n          });\n        });\n      });","file":"replication.rest.test.js","skipped":false,"dir":"test"},{"name":"pulls only authorized records","suites":["Replication over REST","sync with instance-level permissions"],"updatePoint":{"line":258,"column":37,"index":9609},"line":258,"code":"    it('pulls only authorized records', function (done) {\n      setAccessToken(aliceToken);\n      RemoteUser.replicate(LocalUser, function (err, conflicts, cps) {\n        if (err) return done(err);\n        if (conflicts.length) return done(conflictError(conflicts));\n        LocalUser.find(function (err, users) {\n          const userNames = users.map(function (u) {\n            return u.username;\n          });\n          expect(userNames).to.eql([ALICE.username]);\n          done();\n        });\n      });\n    });","file":"replication.rest.test.js","skipped":true,"dir":"test"},{"name":"allows push of authorized records","suites":["Replication over REST","sync with instance-level permissions"],"updatePoint":{"line":272,"column":41,"index":10127},"line":272,"code":"    it('allows push of authorized records', function (done) {\n      async.series([setupModifiedLocalCopyOfAlice, function replicateAsCurrentUser(next) {\n        setAccessToken(aliceToken);\n        LocalUser.replicate(RemoteUser, function (err, conflicts) {\n          if (err) return next(err);\n          if (conflicts.length) return next(conflictError(conflicts));\n          next();\n        });\n      }, function verify(next) {\n        RemoteUser.findById(aliceId, function (err, found) {\n          if (err) return next(err);\n          expect(found.toObject()).to.have.property('fullname', 'Alice Smith');\n          next();\n        });\n      }], done);\n    });","file":"replication.rest.test.js","skipped":true,"dir":"test"},{"name":"rejects push of unauthorized records","suites":["Replication over REST","sync with instance-level permissions"],"updatePoint":{"line":288,"column":44,"index":10791},"line":288,"code":"    it('rejects push of unauthorized records', function (done) {\n      async.series([setupModifiedLocalCopyOfAlice, function replicateAsDifferentUser(next) {\n        setAccessToken(peterToken);\n        LocalUser.replicate(RemoteUser, function (err, conflicts) {\n          if (!err) return next(new Error('Replicate should have failed.'));\n          expect(err).to.have.property('statusCode', 401); // or 403?\n\n          next();\n        });\n      }, function verify(next) {\n        ServerUser.findById(aliceId, function (err, found) {\n          if (err) return next(err);\n          expect(found.toObject()).to.not.have.property('fullname');\n          next();\n        });\n      }], done);\n    }); // TODO(bajtos) verify conflict resolution","file":"replication.rest.test.js","skipped":true,"dir":"test"},{"name":"should call rectifyAllChanges if running on server","suites":["Replication / Change APIs","cleanup check for enableChangeTracking","when no changeCleanupInterval set"],"updatePoint":{"line":78,"column":60,"index":2409},"line":78,"code":"      it('should call rectifyAllChanges if running on server', function (done) {\n        const calls = mockRectifyAllChanges(SourceModel);\n        SourceModel.enableChangeTracking();\n\n        if (runtime.isServer) {\n          expect(calls).to.eql(['rectifyAllChanges']);\n        } else {\n          expect(calls).to.eql([]);\n        }\n\n        done();\n      });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"should not call rectifyAllChanges","suites":["Replication / Change APIs","cleanup check for enableChangeTracking","when changeCleanupInterval set to -1"],"updatePoint":{"line":106,"column":43,"index":3188},"line":106,"code":"      it('should not call rectifyAllChanges', function (done) {\n        const calls = mockRectifyAllChanges(Model);\n        Model.enableChangeTracking();\n        expect(calls).to.eql([]);\n        done();\n      });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"should call rectifyAllChanges if running on server","suites":["Replication / Change APIs","cleanup check for enableChangeTracking","when changeCleanupInterval set to 10000"],"updatePoint":{"line":128,"column":60,"index":3860},"line":128,"code":"      it('should call rectifyAllChanges if running on server', function (done) {\n        const calls = mockRectifyAllChanges(Model);\n        Model.enableChangeTracking();\n\n        if (runtime.isServer) {\n          expect(calls).to.eql(['rectifyAllChanges']);\n        } else {\n          expect(calls).to.eql([]);\n        }\n\n        done();\n      });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"should call rectifyAllChanges if no id is passed for rectifyOnDelete","suites":["Replication / Change APIs","optimization check rectifyChange Vs rectifyAllChanges"],"updatePoint":{"line":170,"column":76,"index":4975},"line":170,"code":"    it('should call rectifyAllChanges if no id is passed for rectifyOnDelete', function (done) {\n      const calls = mockSourceModelRectify();\n      SourceModel.destroyAll({\n        name: 'John'\n      }, function (err, data) {\n        if (err) return done(err);\n        expect(calls).to.eql(['rectifyAllChanges']);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"should call rectifyAllChanges if no id is passed for rectifyOnSave","suites":["Replication / Change APIs","optimization check rectifyChange Vs rectifyAllChanges"],"updatePoint":{"line":180,"column":74,"index":5322},"line":180,"code":"    it('should call rectifyAllChanges if no id is passed for rectifyOnSave', function (done) {\n      const calls = mockSourceModelRectify();\n      const newData = {\n        'name': 'Janie'\n      };\n      SourceModel.update({\n        name: 'Jane'\n      }, newData, function (err, data) {\n        if (err) return done(err);\n        expect(calls).to.eql(['rectifyAllChanges']);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"rectifyOnDelete for Delete should call rectifyChange instead of rectifyAllChanges","suites":["Replication / Change APIs","optimization check rectifyChange Vs rectifyAllChanges"],"updatePoint":{"line":193,"column":89,"index":5746},"line":193,"code":"    it('rectifyOnDelete for Delete should call rectifyChange instead of rectifyAllChanges', function (done) {\n      const calls = mockTargetModelRectify();\n      async.waterfall([function (callback) {\n        SourceModel.destroyAll({\n          name: 'John'\n        }, callback);\n      }, function (data, callback) {\n        SourceModel.replicate(TargetModel, callback); // replicate should call `rectifyOnSave` and then `rectifyChange` not `rectifyAllChanges` through `after save` operation\n      }], function (err, results) {\n        if (err) return done(err);\n        expect(calls).to.eql(['rectifyChange']);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"rectifyOnSave for Update should call rectifyChange instead of rectifyAllChanges","suites":["Replication / Change APIs","optimization check rectifyChange Vs rectifyAllChanges"],"updatePoint":{"line":207,"column":87,"index":6389},"line":207,"code":"    it('rectifyOnSave for Update should call rectifyChange instead of rectifyAllChanges', function (done) {\n      const calls = mockTargetModelRectify();\n      const newData = {\n        'name': 'Janie'\n      };\n      async.waterfall([function (callback) {\n        SourceModel.update({\n          name: 'Jane'\n        }, newData, callback);\n      }, function (data, callback) {\n        SourceModel.replicate(TargetModel, callback); // replicate should call `rectifyOnSave` and then `rectifyChange` not `rectifyAllChanges` through `after save` operation\n      }], function (err, result) {\n        if (err) return done(err);\n        expect(calls).to.eql(['rectifyChange']);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"rectifyOnSave for Create should call rectifyChange instead of rectifyAllChanges","suites":["Replication / Change APIs","optimization check rectifyChange Vs rectifyAllChanges"],"updatePoint":{"line":224,"column":87,"index":7093},"line":224,"code":"    it('rectifyOnSave for Create should call rectifyChange instead of rectifyAllChanges', function (done) {\n      const calls = mockTargetModelRectify();\n      const newData = [{\n        name: 'Janie',\n        surname: 'Doe'\n      }];\n      async.waterfall([function (callback) {\n        SourceModel.create(newData, callback);\n      }, function (data, callback) {\n        SourceModel.replicate(TargetModel, callback); // replicate should call `rectifyOnSave` and then `rectifyChange` not `rectifyAllChanges` through `after save` operation\n      }], function (err, result) {\n        if (err) return done(err);\n        expect(calls).to.eql(['rectifyChange']);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"Get changes since the given checkpoint","suites":["Replication / Change APIs","Model.changes(since, filter, callback)"],"updatePoint":{"line":274,"column":46,"index":8533},"line":274,"code":"    it('Get changes since the given checkpoint', function (done) {\n      const test = this;\n      this.SourceModel.create({\n        name: 'foo'\n      }, function (err) {\n        if (err) return done(err);\n        setTimeout(function () {\n          test.SourceModel.changes(test.startingCheckpoint, {}, function (err, changes) {\n            assert.equal(changes.length, 1);\n            done();\n          });\n        }, 1);\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"excludes changes from older checkpoints","suites":["Replication / Change APIs","Model.changes(since, filter, callback)"],"updatePoint":{"line":288,"column":47,"index":8974},"line":288,"code":"    it('excludes changes from older checkpoints', function (done) {\n      const FUTURE_CHECKPOINT = 999;\n      SourceModel.create({\n        name: 'foo'\n      }, function (err) {\n        if (err) return done(err);\n        SourceModel.changes(FUTURE_CHECKPOINT, {}, function (err, changes) {\n          if (err) return done(err);\n          expect(changes).to.be.empty();\n          done();\n        });\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"Replicate data using the target model","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":303,"column":45,"index":9477},"line":303,"code":"    it('Replicate data using the target model', function (done) {\n      const test = this;\n      const options = {};\n      this.SourceModel.create({\n        name: 'foo'\n      }, function (err) {\n        if (err) return done(err);\n        test.SourceModel.replicate(test.startingCheckpoint, test.TargetModel, options, function (err, conflicts) {\n          if (err) return done(err);\n          assertTargetModelEqualsSourceModel(conflicts, test.SourceModel, test.TargetModel, done);\n        });\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"Replicate data using the target model - promise variant","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":316,"column":63,"index":10006},"line":316,"code":"    it('Replicate data using the target model - promise variant', function (done) {\n      const test = this;\n      const options = {};\n      this.SourceModel.create({\n        name: 'foo'\n      }, function (err) {\n        if (err) return done(err);\n        test.SourceModel.replicate(test.startingCheckpoint, test.TargetModel, options).then(function (conflicts) {\n          assertTargetModelEqualsSourceModel(conflicts, test.SourceModel, test.TargetModel, done);\n        }).catch(function (err) {\n          done(err);\n        });\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"applies \"since\" filter on source changes","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":330,"column":48,"index":10538},"line":330,"code":"    it('applies \"since\" filter on source changes', function (done) {\n      async.series([function createModelInSourceCp1(next) {\n        SourceModel.create({\n          id: '1'\n        }, next);\n      }, function checkpoint(next) {\n        SourceModel.checkpoint(next);\n      }, function createModelInSourceCp2(next) {\n        SourceModel.create({\n          id: '2'\n        }, next);\n      }, function replicateLastChangeOnly(next) {\n        SourceModel.currentCheckpoint(function (err, cp) {\n          if (err) return done(err);\n          SourceModel.replicate(cp, TargetModel, next);\n        });\n      }, function verify(next) {\n        TargetModel.find(function (err, list) {\n          if (err) return done(err); // '1' should be skipped by replication\n\n          expect(getIds(list)).to.eql(['2']);\n          next();\n        });\n      }], done);\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"applies \"since\" filter on source changes - promise variant","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":355,"column":66,"index":11413},"line":355,"code":"    it('applies \"since\" filter on source changes - promise variant', function (done) {\n      async.series([function createModelInSourceCp1(next) {\n        SourceModel.create({\n          id: '1'\n        }, next);\n      }, function checkpoint(next) {\n        SourceModel.checkpoint(next);\n      }, function createModelInSourceCp2(next) {\n        SourceModel.create({\n          id: '2'\n        }, next);\n      }, function replicateLastChangeOnly(next) {\n        SourceModel.currentCheckpoint(function (err, cp) {\n          if (err) return done(err);\n          SourceModel.replicate(cp, TargetModel, {}).then(function (next) {\n            done();\n          }).catch(err);\n        });\n      }, function verify(next) {\n        TargetModel.find(function (err, list) {\n          if (err) return done(err); // '1' should be skipped by replication\n\n          expect(getIds(list)).to.eql(['2']);\n          next();\n        });\n      }], done);\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"applies \"since\" filter on target changes","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":382,"column":48,"index":12335},"line":382,"code":"    it('applies \"since\" filter on target changes', function (done) {\n      // Because the \"since\" filter is just an optimization,\n      // there isn't really any observable behaviour we could\n      // check to assert correct implementation.\n      const diffSince = [];\n      spyAndStoreSinceArg(TargetModel, 'diff', diffSince);\n      SourceModel.replicate(10, TargetModel, function (err) {\n        if (err) return done(err);\n        expect(diffSince).to.eql([10]);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"applies \"since\" filter on target changes - promise variant","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":394,"column":66,"index":12852},"line":394,"code":"    it('applies \"since\" filter on target changes - promise variant', function (done) {\n      // Because the \"since\" filter is just an optimization,\n      // there isn't really any observable behaviour we could\n      // check to assert correct implementation.\n      const diffSince = [];\n      spyAndStoreSinceArg(TargetModel, 'diff', diffSince);\n      SourceModel.replicate(10, TargetModel, {}).then(function () {\n        expect(diffSince).to.eql([10]);\n        done();\n      }).catch(function (err) {\n        done(err);\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"uses different \"since\" value for source and target","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":407,"column":58,"index":13383},"line":407,"code":"    it('uses different \"since\" value for source and target', function (done) {\n      const sourceSince = [];\n      const targetSince = [];\n      spyAndStoreSinceArg(SourceModel, 'changes', sourceSince);\n      spyAndStoreSinceArg(TargetModel, 'diff', targetSince);\n      const since = {\n        source: 1,\n        target: 2\n      };\n      SourceModel.replicate(since, TargetModel, function (err) {\n        if (err) return done(err);\n        expect(sourceSince).to.eql([1]);\n        expect(targetSince).to.eql([2]);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"uses different \"since\" value for source and target - promise variant","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":423,"column":76,"index":13949},"line":423,"code":"    it('uses different \"since\" value for source and target - promise variant', function (done) {\n      const sourceSince = [];\n      const targetSince = [];\n      spyAndStoreSinceArg(SourceModel, 'changes', sourceSince);\n      spyAndStoreSinceArg(TargetModel, 'diff', targetSince);\n      const since = {\n        source: 1,\n        target: 2\n      };\n      SourceModel.replicate(since, TargetModel, {}).then(function () {\n        expect(sourceSince).to.eql([1]);\n        expect(targetSince).to.eql([2]);\n        done();\n      }).catch(function (err) {\n        done(err);\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"picks up changes made during replication","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":440,"column":48,"index":14509},"line":440,"code":"    it('picks up changes made during replication', function (done) {\n      setupRaceConditionInReplication(function (cb) {\n        // simulate the situation when another model is created\n        // while a replication run is in progress\n        SourceModel.create({\n          id: 'racer'\n        }, cb);\n      });\n      let lastCp;\n      async.series([function buildSomeDataToReplicate(next) {\n        SourceModel.create({\n          id: 'init'\n        }, next);\n      }, function getLastCp(next) {\n        SourceModel.currentCheckpoint(function (err, cp) {\n          if (err) return done(err);\n          lastCp = cp;\n          next();\n        });\n      }, function replicate(next) {\n        SourceModel.replicate(TargetModel, next);\n      }, function verifyAssumptions(next) {\n        SourceModel.find(function (err, list) {\n          expect(getIds(list), 'source ids').to.eql(['init', 'racer']);\n          TargetModel.find(function (err, list) {\n            expect(getIds(list), 'target ids after first sync').to.include.members(['init']);\n            next();\n          });\n        });\n      }, function replicateAgain(next) {\n        SourceModel.replicate(lastCp + 1, TargetModel, next);\n      }, function verify(next) {\n        TargetModel.find(function (err, list) {\n          expect(getIds(list), 'target ids').to.eql(['init', 'racer']);\n          next();\n        });\n      }], done);\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"returns new current checkpoints to callback","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":478,"column":51,"index":15910},"line":478,"code":"    it('returns new current checkpoints to callback', function (done) {\n      let sourceCp, targetCp;\n      async.series([bumpSourceCheckpoint, bumpTargetCheckpoint, bumpTargetCheckpoint, function replicate(cb) {\n        expect(sourceCp).to.not.equal(targetCp);\n        SourceModel.replicate(TargetModel, function (err, conflicts, newCheckpoints) {\n          if (err) return cb(err);\n          expect(conflicts, 'conflicts').to.eql([]);\n          expect(newCheckpoints, 'currentCheckpoints').to.eql({\n            source: sourceCp + 1,\n            target: targetCp + 1\n          });\n          cb();\n        });\n      }], done);\n\n      function bumpSourceCheckpoint(cb) {\n        SourceModel.checkpoint(function (err, inst) {\n          if (err) return cb(err);\n          sourceCp = inst.seq;\n          cb();\n        });\n      }\n\n      function bumpTargetCheckpoint(cb) {\n        TargetModel.checkpoint(function (err, inst) {\n          if (err) return cb(err);\n          targetCp = inst.seq;\n          cb();\n        });\n      }\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"leaves current target checkpoint empty","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":509,"column":46,"index":16938},"line":509,"code":"    it('leaves current target checkpoint empty', function (done) {\n      async.series([function createTestData(next) {\n        SourceModel.create({}, next);\n      }, replicateExpectingSuccess(), function verify(next) {\n        TargetModel.currentCheckpoint(function (err, cp) {\n          if (err) return next(err);\n          TargetModel.getChangeModel().find({\n            where: {\n              checkpoint: {\n                gte: cp\n              }\n            }\n          }, function (err, changes) {\n            if (err) return done(err);\n            expect(changes).to.have.length(0);\n            done();\n          });\n        });\n      }], done);\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects UPDATE made during UPDATE","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)","with 3rd-party changes"],"updatePoint":{"line":530,"column":43,"index":17648},"line":530,"code":"      it('detects UPDATE made during UPDATE', function (done) {\n        async.series([createModel(SourceModel, {\n          id: '1'\n        }), replicateExpectingSuccess(), function updateModel(next) {\n          SourceModel.updateAll({\n            id: '1'\n          }, {\n            name: 'source'\n          }, next);\n        }, function replicateWith3rdPartyModifyingData(next) {\n          setupRaceConditionInReplication(function (cb) {\n            const connector = TargetModel.dataSource.connector;\n\n            if (connector.updateAttributes.length <= 4) {\n              connector.updateAttributes(TargetModel.modelName, '1', {\n                name: '3rd-party'\n              }, cb);\n            } else {\n              // 2.x connectors require `options`\n              connector.updateAttributes(TargetModel.modelName, '1', {\n                name: '3rd-party'\n              }, {}, // options\n              cb);\n            }\n          });\n          SourceModel.replicate(TargetModel, function (err, conflicts, cps, updates) {\n            if (err) return next(err);\n            const conflictedIds = getPropValue(conflicts || [], 'modelId');\n            expect(conflictedIds).to.eql(['1']); // resolve the conflict using ours\n\n            conflicts[0].resolve(next);\n          });\n        }, replicateExpectingSuccess(), verifyInstanceWasReplicated(SourceModel, TargetModel, '1')], done);\n      });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects CREATE made during CREATE","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)","with 3rd-party changes"],"updatePoint":{"line":564,"column":43,"index":19050},"line":564,"code":"      it('detects CREATE made during CREATE', function (done) {\n        async.series([// FIXME(bajtos) Remove the 'name' property once the implementation\n        // of UPDATE is fixed to correctly remove properties\n        createModel(SourceModel, {\n          id: '1',\n          name: 'source'\n        }), function replicateWith3rdPartyModifyingData(next) {\n          const connector = TargetModel.dataSource.connector;\n          setupRaceConditionInReplication(function (cb) {\n            if (connector.create.length <= 3) {\n              connector.create(TargetModel.modelName, {\n                id: '1',\n                name: '3rd-party'\n              }, cb);\n            } else {\n              // 2.x connectors require `options`\n              connector.create(TargetModel.modelName, {\n                id: '1',\n                name: '3rd-party'\n              }, {}, // options\n              cb);\n            }\n          });\n          SourceModel.replicate(TargetModel, function (err, conflicts, cps, updates) {\n            if (err) return next(err);\n            const conflictedIds = getPropValue(conflicts || [], 'modelId');\n            expect(conflictedIds).to.eql(['1']); // resolve the conflict using ours\n\n            conflicts[0].resolve(next);\n          });\n        }, replicateExpectingSuccess(), verifyInstanceWasReplicated(SourceModel, TargetModel, '1')], done);\n      });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects UPDATE made during DELETE","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)","with 3rd-party changes"],"updatePoint":{"line":596,"column":43,"index":20437},"line":596,"code":"      it('detects UPDATE made during DELETE', function (done) {\n        async.series([createModel(SourceModel, {\n          id: '1'\n        }), replicateExpectingSuccess(), function deleteModel(next) {\n          SourceModel.deleteById('1', next);\n        }, function replicateWith3rdPartyModifyingData(next) {\n          setupRaceConditionInReplication(function (cb) {\n            const connector = TargetModel.dataSource.connector;\n\n            if (connector.updateAttributes.length <= 4) {\n              connector.updateAttributes(TargetModel.modelName, '1', {\n                name: '3rd-party'\n              }, cb);\n            } else {\n              // 2.x connectors require `options`\n              connector.updateAttributes(TargetModel.modelName, '1', {\n                name: '3rd-party'\n              }, {}, // options\n              cb);\n            }\n          });\n          SourceModel.replicate(TargetModel, function (err, conflicts, cps, updates) {\n            if (err) return next(err);\n            const conflictedIds = getPropValue(conflicts || [], 'modelId');\n            expect(conflictedIds).to.eql(['1']); // resolve the conflict using ours\n\n            conflicts[0].resolve(next);\n          });\n        }, replicateExpectingSuccess(), verifyInstanceWasReplicated(SourceModel, TargetModel, '1')], done);\n      });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"handles DELETE made during DELETE","suites":["Replication / Change APIs","Model.replicate(since, targetModel, options, callback)","with 3rd-party changes"],"updatePoint":{"line":626,"column":43,"index":21768},"line":626,"code":"      it('handles DELETE made during DELETE', function (done) {\n        async.series([createModel(SourceModel, {\n          id: '1'\n        }), replicateExpectingSuccess(), function deleteModel(next) {\n          SourceModel.deleteById('1', next);\n        }, function setup3rdPartyModifyingData(next) {\n          const connector = TargetModel.dataSource.connector;\n          setupRaceConditionInReplication(function (cb) {\n            if (connector.destroy.length <= 3) {\n              connector.destroy(TargetModel.modelName, '1', cb);\n            } else {\n              // 2.x connectors require `options`\n              connector.destroy(TargetModel.modelName, '1', {}, // options\n              cb);\n            }\n          });\n          next();\n        }, replicateExpectingSuccess(), verifyInstanceWasReplicated(SourceModel, TargetModel, '1')], done);\n      });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"should detect a single conflict","suites":["Replication / Change APIs","conflict detection - both updated"],"updatePoint":{"line":678,"column":39,"index":23677},"line":678,"code":"    it('should detect a single conflict', function () {\n      assert.equal(this.conflicts.length, 1);\n      assert(this.conflict);\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"type should be UPDATE","suites":["Replication / Change APIs","conflict detection - both updated"],"updatePoint":{"line":682,"column":29,"index":23806},"line":682,"code":"    it('type should be UPDATE', function (done) {\n      this.conflict.type(function (err, type) {\n        assert.equal(type, Change.UPDATE);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"conflict.changes()","suites":["Replication / Change APIs","conflict detection - both updated"],"updatePoint":{"line":688,"column":26,"index":23978},"line":688,"code":"    it('conflict.changes()', function (done) {\n      const test = this;\n      this.conflict.changes(function (err, sourceChange, targetChange) {\n        assert.equal(typeof sourceChange.id, 'string');\n        assert.equal(typeof targetChange.id, 'string');\n        assert.equal(test.model.getId(), sourceChange.getModelId());\n        assert.equal(sourceChange.type(), Change.UPDATE);\n        assert.equal(targetChange.type(), Change.UPDATE);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"conflict.models()","suites":["Replication / Change APIs","conflict detection - both updated"],"updatePoint":{"line":699,"column":25,"index":24453},"line":699,"code":"    it('conflict.models()', function (done) {\n      const test = this;\n      this.conflict.models(function (err, source, target) {\n        assert.deepEqual(source.toJSON(), {\n          id: test.model.id,\n          name: 'source update'\n        });\n        assert.deepEqual(target.toJSON(), {\n          id: test.model.id,\n          name: 'target update'\n        });\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"should detect a single conflict","suites":["Replication / Change APIs","conflict detection - source deleted"],"updatePoint":{"line":745,"column":39,"index":25887},"line":745,"code":"    it('should detect a single conflict', function () {\n      assert.equal(this.conflicts.length, 1);\n      assert(this.conflict);\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"type should be DELETE","suites":["Replication / Change APIs","conflict detection - source deleted"],"updatePoint":{"line":749,"column":29,"index":26016},"line":749,"code":"    it('type should be DELETE', function (done) {\n      this.conflict.type(function (err, type) {\n        assert.equal(type, Change.DELETE);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"conflict.changes()","suites":["Replication / Change APIs","conflict detection - source deleted"],"updatePoint":{"line":755,"column":26,"index":26188},"line":755,"code":"    it('conflict.changes()', function (done) {\n      const test = this;\n      this.conflict.changes(function (err, sourceChange, targetChange) {\n        assert.equal(typeof sourceChange.id, 'string');\n        assert.equal(typeof targetChange.id, 'string');\n        assert.equal(test.model.getId(), sourceChange.getModelId());\n        assert.equal(sourceChange.type(), Change.DELETE);\n        assert.equal(targetChange.type(), Change.UPDATE);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"conflict.models()","suites":["Replication / Change APIs","conflict detection - source deleted"],"updatePoint":{"line":766,"column":25,"index":26663},"line":766,"code":"    it('conflict.models()', function (done) {\n      const test = this;\n      this.conflict.models(function (err, source, target) {\n        assert.equal(source, null);\n        assert.deepEqual(target.toJSON(), {\n          id: test.model.id,\n          name: 'target update'\n        });\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"should detect a single conflict","suites":["Replication / Change APIs","conflict detection - target deleted"],"updatePoint":{"line":809,"column":39,"index":28016},"line":809,"code":"    it('should detect a single conflict', function () {\n      assert.equal(this.conflicts.length, 1);\n      assert(this.conflict);\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"type should be DELETE","suites":["Replication / Change APIs","conflict detection - target deleted"],"updatePoint":{"line":813,"column":29,"index":28145},"line":813,"code":"    it('type should be DELETE', function (done) {\n      this.conflict.type(function (err, type) {\n        assert.equal(type, Change.DELETE);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"conflict.changes()","suites":["Replication / Change APIs","conflict detection - target deleted"],"updatePoint":{"line":819,"column":26,"index":28317},"line":819,"code":"    it('conflict.changes()', function (done) {\n      const test = this;\n      this.conflict.changes(function (err, sourceChange, targetChange) {\n        assert.equal(typeof sourceChange.id, 'string');\n        assert.equal(typeof targetChange.id, 'string');\n        assert.equal(test.model.getId(), sourceChange.getModelId());\n        assert.equal(sourceChange.type(), Change.UPDATE);\n        assert.equal(targetChange.type(), Change.DELETE);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"conflict.models()","suites":["Replication / Change APIs","conflict detection - target deleted"],"updatePoint":{"line":830,"column":25,"index":28792},"line":830,"code":"    it('conflict.models()', function (done) {\n      const test = this;\n      this.conflict.models(function (err, source, target) {\n        assert.equal(target, null);\n        assert.deepEqual(source.toJSON(), {\n          id: test.model.id,\n          name: 'source update'\n        });\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"should not detect a conflict","suites":["Replication / Change APIs","conflict detection - both deleted"],"updatePoint":{"line":872,"column":36,"index":30101},"line":872,"code":"    it('should not detect a conflict', function () {\n      assert.equal(this.conflicts.length, 0);\n      assert(!this.conflict);\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects \"create\"","suites":["Replication / Change APIs","change detection"],"updatePoint":{"line":878,"column":24,"index":30277},"line":878,"code":"    it('detects \"create\"', function (done) {\n      SourceModel.create({}, function (err, inst) {\n        if (err) return done(err);\n        assertChangeRecordedForId(inst.id, done);\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects \"updateOrCreate\"","suites":["Replication / Change APIs","change detection"],"updatePoint":{"line":884,"column":32,"index":30485},"line":884,"code":"    it('detects \"updateOrCreate\"', function (done) {\n      givenReplicatedInstance(function (err, created) {\n        if (err) return done(err);\n        const data = created.toObject();\n        created.name = 'updated';\n        SourceModel.updateOrCreate(created, function (err, inst) {\n          if (err) return done(err);\n          assertChangeRecordedForId(inst.id, done);\n        });\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects \"upsertWithWhere\"","suites":["Replication / Change APIs","change detection"],"updatePoint":{"line":895,"column":33,"index":30891},"line":895,"code":"    it('detects \"upsertWithWhere\"', function (done) {\n      givenReplicatedInstance(function (err, inst) {\n        if (err) return done(err);\n        SourceModel.upsertWithWhere({\n          name: inst.name\n        }, {\n          name: 'updated'\n        }, function (err) {\n          if (err) return done(err);\n          assertChangeRecordedForId(inst.id, done);\n        });\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects \"findOrCreate\"","suites":["Replication / Change APIs","change detection"],"updatePoint":{"line":908,"column":30,"index":31280},"line":908,"code":"    it('detects \"findOrCreate\"', function (done) {\n      // make sure we bypass find+create and call the connector directly\n      SourceModel.dataSource.connector.findOrCreate = function (model, query, data, callback) {\n        if (this.all.length <= 3) {\n          this.all(model, query, function (err, list) {\n            if (err || list && list[0]) return callback(err, list && list[0], false);\n            this.create(model, data, function (err) {\n              callback(err, data, true);\n            });\n          }.bind(this));\n        } else {\n          // 2.x connectors requires `options`\n          this.all(model, query, {}, function (err, list) {\n            if (err || list && list[0]) return callback(err, list && list[0], false);\n            this.create(model, data, {}, function (err) {\n              callback(err, data, true);\n            });\n          }.bind(this));\n        }\n      };\n\n      SourceModel.findOrCreate({\n        where: {\n          name: 'does-not-exist'\n        }\n      }, {\n        name: 'created'\n      }, function (err, inst) {\n        if (err) return done(err);\n        assertChangeRecordedForId(inst.id, done);\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects \"deleteById\"","suites":["Replication / Change APIs","change detection"],"updatePoint":{"line":940,"column":28,"index":32445},"line":940,"code":"    it('detects \"deleteById\"', function (done) {\n      givenReplicatedInstance(function (err, inst) {\n        if (err) return done(err);\n        SourceModel.deleteById(inst.id, function (err) {\n          assertChangeRecordedForId(inst.id, done);\n        });\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects \"deleteAll\"","suites":["Replication / Change APIs","change detection"],"updatePoint":{"line":948,"column":27,"index":32720},"line":948,"code":"    it('detects \"deleteAll\"', function (done) {\n      givenReplicatedInstance(function (err, inst) {\n        if (err) return done(err);\n        SourceModel.deleteAll({\n          name: inst.name\n        }, function (err) {\n          if (err) return done(err);\n          assertChangeRecordedForId(inst.id, done);\n        });\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects \"updateAll\"","suites":["Replication / Change APIs","change detection"],"updatePoint":{"line":959,"column":27,"index":33061},"line":959,"code":"    it('detects \"updateAll\"', function (done) {\n      givenReplicatedInstance(function (err, inst) {\n        if (err) return done(err);\n        SourceModel.updateAll({\n          name: inst.name\n        }, {\n          name: 'updated'\n        }, function (err) {\n          if (err) return done(err);\n          assertChangeRecordedForId(inst.id, done);\n        });\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects \"prototype.save\"","suites":["Replication / Change APIs","change detection"],"updatePoint":{"line":972,"column":32,"index":33446},"line":972,"code":"    it('detects \"prototype.save\"', function (done) {\n      givenReplicatedInstance(function (err, inst) {\n        if (err) return done(err);\n        inst.name = 'updated';\n        inst.save(function (err) {\n          if (err) return done(err);\n          assertChangeRecordedForId(inst.id, done);\n        });\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects \"prototype.updateAttributes\"","suites":["Replication / Change APIs","change detection"],"updatePoint":{"line":982,"column":44,"index":33784},"line":982,"code":"    it('detects \"prototype.updateAttributes\"', function (done) {\n      givenReplicatedInstance(function (err, inst) {\n        if (err) return done(err);\n        inst.updateAttributes({\n          name: 'updated'\n        }, function (err) {\n          if (err) return done(err);\n          assertChangeRecordedForId(inst.id, done);\n        });\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"detects \"prototype.delete\"","suites":["Replication / Change APIs","change detection"],"updatePoint":{"line":993,"column":34,"index":34132},"line":993,"code":"    it('detects \"prototype.delete\"', function (done) {\n      givenReplicatedInstance(function (err, inst) {\n        if (err) return done(err);\n        inst.delete(function (err) {\n          assertChangeRecordedForId(inst.id, done);\n        });\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"correctly replicates without checkpoint filter","suites":["Replication / Change APIs","complex setup"],"updatePoint":{"line":1064,"column":54,"index":36769},"line":1064,"code":"    it('correctly replicates without checkpoint filter', function (done) {\n      async.series([updateSourceInstanceNameTo('updated'), replicateExpectingSuccess(), verifySourceWasReplicated(), function deleteInstance(next) {\n        sourceInstance.remove(next);\n      }, replicateExpectingSuccess(), function verifyTargetModelWasDeleted(next) {\n        TargetModel.find(function (err, list) {\n          if (err) return next(err);\n          expect(getIds(list)).to.not.contain(sourceInstance.id);\n          next();\n        });\n      }], done);\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"replicates multiple updates within the same CP","suites":["Replication / Change APIs","complex setup"],"updatePoint":{"line":1075,"column":54,"index":37319},"line":1075,"code":"    it('replicates multiple updates within the same CP', function (done) {\n      async.series([replicateExpectingSuccess(), verifySourceWasReplicated(), updateSourceInstanceNameTo('updated'), updateSourceInstanceNameTo('again'), replicateExpectingSuccess(), verifySourceWasReplicated()], done);\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"replicates new models","suites":["Replication / Change APIs","complex setup","clientA-server-clientB"],"updatePoint":{"line":1089,"column":31,"index":38065},"line":1089,"code":"      it('replicates new models', function (done) {\n        async.series([// Note that ClientA->Server was already replicated during setup\n        replicateExpectingSuccess(Server, ClientB), verifySourceWasReplicated(ClientB)], done);\n      });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"propagates updates with no false conflicts","suites":["Replication / Change APIs","complex setup","clientA-server-clientB"],"updatePoint":{"line":1093,"column":52,"index":38331},"line":1093,"code":"      it('propagates updates with no false conflicts', function (done) {\n        async.series([updateSourceInstanceNameTo('v2'), replicateExpectingSuccess(ClientA, Server), replicateExpectingSuccess(Server, ClientB), updateSourceInstanceNameTo('v3'), replicateExpectingSuccess(ClientA, Server), updateSourceInstanceNameTo('v4'), replicateExpectingSuccess(ClientA, Server), replicateExpectingSuccess(Server, ClientB), verifySourceWasReplicated(ClientB)], done);\n      });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"propagates deletes with no false conflicts","suites":["Replication / Change APIs","complex setup","clientA-server-clientB"],"updatePoint":{"line":1096,"column":52,"index":38802},"line":1096,"code":"      it('propagates deletes with no false conflicts', function (done) {\n        async.series([deleteSourceInstance(), replicateExpectingSuccess(ClientA, Server), replicateExpectingSuccess(Server, ClientB), verifySourceWasReplicated(ClientB)], done);\n      });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"propagates CREATE","suites":["Replication / Change APIs","complex setup","clientA-server-clientB","bidirectional sync"],"updatePoint":{"line":1107,"column":29,"index":39498},"line":1107,"code":"        it('propagates CREATE', function (done) {\n          async.series([sync(ClientA, Server), sync(ClientB, Server)], done);\n        });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"propagates CREATE+UPDATE","suites":["Replication / Change APIs","complex setup","clientA-server-clientB","bidirectional sync"],"updatePoint":{"line":1110,"column":36,"index":39645},"line":1110,"code":"        it('propagates CREATE+UPDATE', function (done) {\n          async.series([// NOTE: ClientB has not fetched the new model instance yet\n          updateSourceInstanceNameTo('v2'), sync(ClientA, Server), // ClientB fetches the created & updated instance from the server\n          sync(ClientB, Server)], done);\n        });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"propagates DELETE","suites":["Replication / Change APIs","complex setup","clientA-server-clientB","bidirectional sync"],"updatePoint":{"line":1115,"column":29,"index":39965},"line":1115,"code":"        it('propagates DELETE', function (done) {\n          async.series([// NOTE: ClientB has not fetched the new model instance yet\n          updateSourceInstanceNameTo('v2'), sync(ClientA, Server), // ClientB fetches the created & updated instance from the server\n          sync(ClientB, Server)], done);\n        });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"does not report false conflicts","suites":["Replication / Change APIs","complex setup","clientA-server-clientB","bidirectional sync"],"updatePoint":{"line":1120,"column":43,"index":40299},"line":1120,"code":"        it('does not report false conflicts', function (done) {\n          async.series([// client A makes some work\n          updateSourceInstanceNameTo('v2'), sync(ClientA, Server), // ClientB fetches the change from the server\n          sync(ClientB, Server), verifySourceWasReplicated(ClientB), // client B makes some work\n          updateClientB('v5'), sync(Server, ClientB), updateClientB('v6'), sync(ClientB, Server), // client A fetches the changes\n          sync(ClientA, Server)], done);\n        });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"handles UPDATE conflict resolved using \"ours\"","suites":["Replication / Change APIs","complex setup","clientA-server-clientB","bidirectional sync"],"updatePoint":{"line":1127,"column":57,"index":40822},"line":1127,"code":"        it('handles UPDATE conflict resolved using \"ours\"', function (done) {\n          testUpdateConflictIsResolved(function resolveUsingOurs(conflict, cb) {\n            conflict.resolveUsingSource(cb);\n          }, done);\n        });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"handles UPDATE conflict resolved using \"theirs\"","suites":["Replication / Change APIs","complex setup","clientA-server-clientB","bidirectional sync"],"updatePoint":{"line":1132,"column":59,"index":41060},"line":1132,"code":"        it('handles UPDATE conflict resolved using \"theirs\"', function (done) {\n          testUpdateConflictIsResolved(function resolveUsingTheirs(conflict, cb) {\n            // We sync ClientA->Server first\n            expect(conflict.SourceModel.modelName).to.equal(ClientB.modelName);\n            conflict.resolveUsingTarget(cb);\n          }, done);\n        });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"handles UPDATE conflict resolved manually","suites":["Replication / Change APIs","complex setup","clientA-server-clientB","bidirectional sync"],"updatePoint":{"line":1139,"column":53,"index":41419},"line":1139,"code":"        it('handles UPDATE conflict resolved manually', function (done) {\n          testUpdateConflictIsResolved(function resolveManually(conflict, cb) {\n            conflict.resolveManually({\n              name: 'manual'\n            }, cb);\n          }, done);\n        });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"handles DELETE conflict resolved using \"ours\"","suites":["Replication / Change APIs","complex setup","clientA-server-clientB","bidirectional sync"],"updatePoint":{"line":1146,"column":57,"index":41697},"line":1146,"code":"        it('handles DELETE conflict resolved using \"ours\"', function (done) {\n          testDeleteConflictIsResolved(function resolveUsingOurs(conflict, cb) {\n            conflict.resolveUsingSource(cb);\n          }, done);\n        });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"handles DELETE conflict resolved using \"theirs\"","suites":["Replication / Change APIs","complex setup","clientA-server-clientB","bidirectional sync"],"updatePoint":{"line":1151,"column":59,"index":41935},"line":1151,"code":"        it('handles DELETE conflict resolved using \"theirs\"', function (done) {\n          testDeleteConflictIsResolved(function resolveUsingTheirs(conflict, cb) {\n            // We sync ClientA->Server first\n            expect(conflict.SourceModel.modelName).to.equal(ClientB.modelName);\n            conflict.resolveUsingTarget(cb);\n          }, done);\n        });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"handles DELETE conflict resolved as manual delete","suites":["Replication / Change APIs","complex setup","clientA-server-clientB","bidirectional sync"],"updatePoint":{"line":1158,"column":61,"index":42302},"line":1158,"code":"        it('handles DELETE conflict resolved as manual delete', function (done) {\n          testDeleteConflictIsResolved(function resolveManually(conflict, cb) {\n            conflict.resolveManually(null, cb);\n          }, done);\n        });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"handles DELETE conflict resolved manually","suites":["Replication / Change APIs","complex setup","clientA-server-clientB","bidirectional sync"],"updatePoint":{"line":1163,"column":53,"index":42536},"line":1163,"code":"        it('handles DELETE conflict resolved manually', function (done) {\n          testDeleteConflictIsResolved(function resolveManually(conflict, cb) {\n            conflict.resolveManually({\n              name: 'manual'\n            }, cb);\n          }, done);\n        });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"bulkUpdate should call Model updates with the provided options object","suites":["Replication / Change APIs","ensure options object is set on context during bulkUpdate"],"updatePoint":{"line":1280,"column":77,"index":47205},"line":1280,"code":"    it('bulkUpdate should call Model updates with the provided options object', function (done) {\n      const testData = {\n        name: 'Janie',\n        surname: 'Doe'\n      };\n      const updates = [{\n        data: null,\n        change: null,\n        type: 'create'\n      }];\n      const options = {\n        sync: true\n      };\n      async.waterfall([function (callback) {\n        TargetModel.create(testData, callback);\n      }, function (data, callback) {\n        updates[0].data = data;\n        TargetModel.getChangeModel().find({\n          where: {\n            modelId: data.id\n          }\n        }, callback);\n      }, function (data, callback) {\n        updates[0].change = data;\n        OptionsSourceModel.bulkUpdate(updates, options, callback);\n      }], function (err, result) {\n        if (err) return done(err);\n        expect(syncPropertyExists).to.eql(true);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"bulkUpdate should successfully finish without options","suites":["Replication / Change APIs","ensure bulkUpdate works with just 2 args"],"updatePoint":{"line":1313,"column":61,"index":48173},"line":1313,"code":"    it('bulkUpdate should successfully finish without options', function (done) {\n      const testData = {\n        name: 'Janie',\n        surname: 'Doe'\n      };\n      const updates = [{\n        data: null,\n        change: null,\n        type: 'create'\n      }];\n      async.waterfall([function (callback) {\n        TargetModel.create(testData, callback);\n      }, function (data, callback) {\n        updates[0].data = data;\n        TargetModel.getChangeModel().find({\n          where: {\n            modelId: data.id\n          }\n        }, callback);\n      }, function (data, callback) {\n        updates[0].change = data;\n        SourceModel.bulkUpdate(updates, callback);\n      }], function (err, result) {\n        if (err) return done(err);\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"calls bulkUpdate multiple times","suites":["Replication / Change APIs","Replication with chunking","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":1372,"column":41,"index":49955},"line":1372,"code":"      it('calls bulkUpdate multiple times', function (done) {\n        const test = this;\n        const options = {};\n        const calls = mockBulkUpdate(TargetModel);\n        SourceModel.create([{\n          name: 'foo'\n        }, {\n          name: 'bar'\n        }], function (err) {\n          if (err) return done(err);\n          test.SourceModel.replicate(test.startingCheckpoint, test.TargetModel, options, function (err, conflicts) {\n            if (err) return done(err);\n            assertTargetModelEqualsSourceModel(conflicts, test.SourceModel, test.TargetModel, done);\n            expect(calls.length).to.eql(2);\n          });\n        });\n      });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"calls bulkUpdate only once","suites":["Replication / Change APIs","Replication without chunking","Model.replicate(since, targetModel, options, callback)"],"updatePoint":{"line":1420,"column":36,"index":51579},"line":1420,"code":"      it('calls bulkUpdate only once', function (done) {\n        const test = this;\n        const options = {};\n        const calls = mockBulkUpdate(TargetModel);\n        SourceModel.create([{\n          name: 'foo'\n        }, {\n          name: 'bar'\n        }], function (err) {\n          if (err) return done(err);\n          test.SourceModel.replicate(test.startingCheckpoint, test.TargetModel, options, function (err, conflicts) {\n            if (err) return done(err);\n            assertTargetModelEqualsSourceModel(conflicts, test.SourceModel, test.TargetModel, done);\n            expect(calls.length).to.eql(1);\n          });\n        });\n      });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"defines change model with custom properties","suites":["Replication / Change APIs with custom change properties","Model._defineChangeModel()"],"updatePoint":{"line":1642,"column":51,"index":58166},"line":1642,"code":"    it('defines change model with custom properties', function () {\n      const changeModel = SourceModel.getChangeModel();\n      const changeModelProperties = changeModel.definition.properties;\n      expect(changeModelProperties).to.have.property('customProperty');\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"queries changes using customized filter","suites":["Replication / Change APIs with custom change properties","Model.changes(since, filter, callback)"],"updatePoint":{"line":1650,"column":47,"index":58557},"line":1650,"code":"    it('queries changes using customized filter', function (done) {\n      const filterUsed = mockChangeFind(this.SourceModel);\n      SourceModel.changes(startingCheckpoint, {\n        where: {\n          customProperty: '123'\n        }\n      }, function (err, changes) {\n        if (err) return done(err);\n        expect(filterUsed[0]).to.eql({\n          where: {\n            checkpoint: {\n              gte: -1\n            },\n            modelName: SourceModel.modelName,\n            customProperty: '123'\n          }\n        });\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"query returns the matching changes","suites":["Replication / Change APIs with custom change properties","Model.changes(since, filter, callback)"],"updatePoint":{"line":1670,"column":42,"index":59115},"line":1670,"code":"    it('query returns the matching changes', function (done) {\n      SourceModel.changes(startingCheckpoint, {\n        where: {\n          customProperty: '123'\n        }\n      }, function (err, changes) {\n        expect(changes).to.have.length(1);\n        expect(changes[0]).to.have.property('customProperty', '123');\n        done();\n      });\n    });","file":"replication.test.js","skipped":false,"dir":"test"},{"name":"works out-of-the-box","suites":["loopback.rest"],"updatePoint":{"line":39,"column":26,"index":1013},"line":39,"code":"  it('works out-of-the-box', function (done) {\n    app.model(MyModel);\n    app.use(loopback.rest());\n    request(app).get('/mymodels').expect(200).end(done);\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should report 200 for DELETE /:id found","suites":["loopback.rest"],"updatePoint":{"line":44,"column":45,"index":1196},"line":44,"code":"  it('should report 200 for DELETE /:id found', function (done) {\n    app.model(MyModel);\n    app.use(loopback.rest());\n    MyModel.create({\n      name: 'm1'\n    }, function (err, inst) {\n      request(app).del('/mymodels/' + inst.id).expect(200, function (err, res) {\n        expect(res.body.count).to.equal(1);\n        done();\n      });\n    });\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should report 404 for GET /:id not found","suites":["loopback.rest"],"updatePoint":{"line":56,"column":46,"index":1550},"line":56,"code":"  it('should report 404 for GET /:id not found', function (done) {\n    app.model(MyModel);\n    app.use(loopback.rest());\n    request(app).get('/mymodels/1').expect(404).end(function (err, res) {\n      if (err) return done(err);\n      const errorResponse = res.body.error;\n      assert(errorResponse);\n      assert.equal(errorResponse.code, 'MODEL_NOT_FOUND');\n      done();\n    });\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should report 404 for HEAD /:id not found","suites":["loopback.rest"],"updatePoint":{"line":67,"column":47,"index":1939},"line":67,"code":"  it('should report 404 for HEAD /:id not found', function (done) {\n    app.model(MyModel);\n    app.use(loopback.rest());\n    request(app).head('/mymodels/1').expect(404).end(done);\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should report 200 for GET /:id/exists not found","suites":["loopback.rest"],"updatePoint":{"line":72,"column":53,"index":2133},"line":72,"code":"  it('should report 200 for GET /:id/exists not found', function (done) {\n    app.model(MyModel);\n    app.use(loopback.rest());\n    request(app).get('/mymodels/1/exists').expect(200).end(function (err, res) {\n      if (err) return done(err);\n      expect(res.body).to.eql({\n        exists: false\n      });\n      done();\n    });\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should report 200 for GET /:id found","suites":["loopback.rest"],"updatePoint":{"line":83,"column":42,"index":2456},"line":83,"code":"  it('should report 200 for GET /:id found', function (done) {\n    app.model(MyModel);\n    app.use(loopback.rest());\n    MyModel.create({\n      name: 'm1'\n    }, function (err, inst) {\n      request(app).get('/mymodels/' + inst.id).expect(200).end(done);\n    });\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should report 200 for HEAD /:id found","suites":["loopback.rest"],"updatePoint":{"line":92,"column":43,"index":2726},"line":92,"code":"  it('should report 200 for HEAD /:id found', function (done) {\n    app.model(MyModel);\n    app.use(loopback.rest());\n    MyModel.create({\n      name: 'm2'\n    }, function (err, inst) {\n      request(app).head('/mymodels/' + inst.id).expect(200).end(done);\n    });\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should report 200 for GET /:id/exists found","suites":["loopback.rest"],"updatePoint":{"line":101,"column":49,"index":3003},"line":101,"code":"  it('should report 200 for GET /:id/exists found', function (done) {\n    app.model(MyModel);\n    app.use(loopback.rest());\n    MyModel.create({\n      name: 'm2'\n    }, function (err, inst) {\n      request(app).get('/mymodels/' + inst.id + '/exists').expect(200).end(function (err, res) {\n        if (err) return done(err);\n        expect(res.body).to.eql({\n          exists: true\n        });\n        done();\n      });\n    });\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should honour `remoting.rest.supportedTypes`","suites":["loopback.rest"],"updatePoint":{"line":116,"column":50,"index":3437},"line":116,"code":"  it('should honour `remoting.rest.supportedTypes`', function (done) {\n    const app = loopback({\n      localRegistry: true\n    }); // NOTE it is crucial to set `remoting` before creating any models\n\n    const supportedTypes = ['json', 'application/javascript', 'text/javascript'];\n    app.set('remoting', {\n      rest: {\n        supportedTypes: supportedTypes\n      }\n    });\n    app.model(MyModel);\n    app.use(loopback.rest());\n    request(app).get('/mymodels').set('Accept', 'text/html,application/xml;q= 0.9,*/*;q= 0.8').expect('Content-Type', 'application/json; charset=utf-8').expect(200, done);\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"allows models to provide a custom HTTP path","suites":["loopback.rest"],"updatePoint":{"line":131,"column":49,"index":4045},"line":131,"code":"  it('allows models to provide a custom HTTP path', function (done) {\n    const CustomModel = app.registry.createModel('CustomModel', {\n      name: String\n    }, {\n      http: {\n        'path': 'domain1/CustomModelPath'\n      }\n    });\n    app.model(CustomModel, {\n      dataSource: 'db'\n    });\n    app.use(loopback.rest());\n    request(app).get('/domain1/CustomModelPath').expect(200).end(done);\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should report 200 for url-encoded HTTP path","suites":["loopback.rest"],"updatePoint":{"line":145,"column":49,"index":4449},"line":145,"code":"  it('should report 200 for url-encoded HTTP path', function (done) {\n    const CustomModel = app.registry.createModel('CustomModel', {\n      name: String\n    }, {\n      http: {\n        path: 'domain%20one/CustomModelPath'\n      }\n    });\n    app.model(CustomModel, {\n      dataSource: 'db'\n    });\n    app.use(loopback.rest());\n    request(app).get('/domain%20one/CustomModelPath').expect(200).end(done);\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"includes loopback.token when necessary","suites":["loopback.rest"],"updatePoint":{"line":159,"column":44,"index":4856},"line":159,"code":"  it('includes loopback.token when necessary', function (done) {\n    givenUserModelWithAuth();\n    app.enableAuth({\n      dataSource: 'db'\n    });\n    app.use(loopback.rest());\n    givenLoggedInUser(function (err, token) {\n      if (err) return done(err);\n      expect(token).instanceOf(app.models.AccessToken);\n      request(app).get('/users/' + token.userId).set('Authorization', token.id).expect(200).end(done);\n    }, done);\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"does not include loopback.token when auth not enabled","suites":["loopback.rest"],"updatePoint":{"line":171,"column":59,"index":5306},"line":171,"code":"  it('does not include loopback.token when auth not enabled', function (done) {\n    const User = givenUserModelWithAuth();\n\n    User.getToken = function (req, cb) {\n      cb(null, req.accessToken ? req.accessToken.id : null);\n    };\n\n    loopback.remoteMethod(User.getToken, {\n      accepts: [{\n        type: 'object',\n        http: {\n          source: 'req'\n        }\n      }],\n      returns: [{\n        type: 'object',\n        name: 'id'\n      }]\n    });\n    app.use(loopback.rest());\n    givenLoggedInUser(function (err, token) {\n      if (err) return done(err);\n      request(app).get('/users/getToken').set('Authorization', token.id).expect(200).end(function (err, res) {\n        if (err) return done(err);\n        expect(res.body.id).to.equal(null);\n        done();\n      });\n    }, done);\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"rebuilds REST endpoints after a model was added","suites":["loopback.rest"],"updatePoint":{"line":200,"column":53,"index":6102},"line":200,"code":"  it('rebuilds REST endpoints after a model was added', () => {\n    app.use(loopback.rest());\n    return request(app).get('/mymodels').expect(404).then(() => {\n      app.model(MyModel);\n      return request(app).get('/mymodels').expect(200);\n    });\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"rebuilds REST endpoints after a model was deleted","suites":["loopback.rest"],"updatePoint":{"line":207,"column":55,"index":6360},"line":207,"code":"  it('rebuilds REST endpoints after a model was deleted', () => {\n    app.model(MyModel);\n    app.use(loopback.rest());\n    return request(app).get('/mymodels').expect(200).then(() => {\n      app.deleteModelByName('MyModel');\n      return request(app).get('/mymodels').expect(404);\n    });\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"rebuilds REST endpoints after a remoteMethod was added","suites":["loopback.rest"],"updatePoint":{"line":215,"column":60,"index":6661},"line":215,"code":"  it('rebuilds REST endpoints after a remoteMethod was added', () => {\n    app.model(MyModel);\n    app.use(loopback.rest());\n    return request(app).get('/mymodels/customMethod').expect(404).then(() => {\n      MyModel.customMethod = function (req, cb) {\n        cb(null, true);\n      };\n\n      MyModel.remoteMethod('customMethod', {\n        http: {\n          verb: 'get'\n        },\n        accepts: [{\n          type: 'object',\n          http: {\n            source: 'req'\n          }\n        }],\n        returns: [{\n          type: 'boolean',\n          name: 'success'\n        }]\n      });\n      return request(app).get('/mymodels/customMethod').expect(200);\n    });\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"rebuilds REST endpoints after a remoteMethod was disabled","suites":["loopback.rest"],"updatePoint":{"line":241,"column":63,"index":7337},"line":241,"code":"  it('rebuilds REST endpoints after a remoteMethod was disabled', () => {\n    app.model(MyModel);\n    app.use(loopback.rest());\n\n    MyModel.customMethod = function (req, cb) {\n      cb(null, true);\n    };\n\n    MyModel.remoteMethod('customMethod', {\n      http: {\n        verb: 'get'\n      },\n      accepts: [{\n        type: 'object',\n        http: {\n          source: 'req'\n        }\n      }],\n      returns: [{\n        type: 'boolean',\n        name: 'success'\n      }]\n    });\n    return request(app).get('/mymodels/customMethod').expect(200).then(() => {\n      MyModel.disableRemoteMethodByName('customMethod');\n      return request(app).get('/mymodels/customMethod').expect(404);\n    });\n  });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should not be exposed when the definition value is false","suites":["loopback.rest","shared methods","with specific definitions in model-config.json"],"updatePoint":{"line":316,"column":66,"index":9514},"line":316,"code":"      it('should not be exposed when the definition value is false', function (done) {\n        const app = require(getFixturePath('model-config-defined-false'));\n\n        request(app).get('/todos').expect(404, done);\n      });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should be exposed when the definition value is true","suites":["loopback.rest","shared methods","with specific definitions in model-config.json"],"updatePoint":{"line":321,"column":61,"index":9736},"line":321,"code":"      it('should be exposed when the definition value is true', function (done) {\n        const app = require(getFixturePath('model-config-defined-true'));\n\n        request(app).get('/todos').expect(200, done);\n      });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should not be exposed when the definition value is false","suites":["loopback.rest","shared methods","with default definitions in model-config.json"],"updatePoint":{"line":328,"column":66,"index":10046},"line":328,"code":"      it('should not be exposed when the definition value is false', function (done) {\n        const app = require(getFixturePath('model-config-default-false'));\n\n        request(app).get('/todos').expect(404, done);\n      });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should be exposed when the definition value is true","suites":["loopback.rest","shared methods","with default definitions in model-config.json"],"updatePoint":{"line":333,"column":61,"index":10268},"line":333,"code":"      it('should be exposed when the definition value is true', function (done) {\n        const app = require(getFixturePath('model-config-default-true'));\n\n        app.models.Todo.create([{\n          content: 'a'\n        }, {\n          content: 'b'\n        }, {\n          content: 'c'\n        }], function () {\n          request(app).del('/todos').expect(200).end(function (err, res) {\n            if (err) return done(err);\n            expect(res.body.count).to.equal(3);\n            done();\n          });\n        });\n      });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should not be exposed when the definition value is false","suites":["loopback.rest","shared methods","with specific definitions in config.json"],"updatePoint":{"line":352,"column":66,"index":10882},"line":352,"code":"      it('should not be exposed when the definition value is false', function (done) {\n        const app = require(getFixturePath('config-defined-false'));\n\n        request(app).get('/todos').expect(404, done);\n      });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should be exposed when the definition value is true","suites":["loopback.rest","shared methods","with specific definitions in config.json"],"updatePoint":{"line":357,"column":61,"index":11098},"line":357,"code":"      it('should be exposed when the definition value is true', function (done) {\n        const app = require(getFixturePath('config-defined-true'));\n\n        request(app).get('/todos').expect(200, done);\n      });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should not be exposed when the definition value is false","suites":["loopback.rest","shared methods","with default definitions in config.json"],"updatePoint":{"line":364,"column":66,"index":11396},"line":364,"code":"      it('should not be exposed when the definition value is false', function (done) {\n        const app = require(getFixturePath('config-default-false'));\n\n        request(app).get('/todos').expect(404, done);\n      });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should be exposed when the definition value is true","suites":["loopback.rest","shared methods","with default definitions in config.json"],"updatePoint":{"line":369,"column":61,"index":11612},"line":369,"code":"      it('should be exposed when the definition value is true', function (done) {\n        const app = require(getFixturePath('config-default-true'));\n\n        app.models.Todo.create([{\n          content: 'a'\n        }, {\n          content: 'b'\n        }, {\n          content: 'c'\n        }], function () {\n          request(app).del('/todos').expect(200).end(function (err, res) {\n            if (err) return done(err);\n            expect(res.body.count).to.equal(3);\n            done();\n          });\n        });\n      });","file":"rest.middleware.test.js","skipped":false,"dir":"test"},{"name":"should prioritize the settings in model-config.json","suites":["loopback.rest","shared methods","with definitions in both config.json and model-config.json"],"updatePoint":{"line":392,"column":61,"index":12540},"line":392,"code":"      it('should prioritize the settings in model-config.json', function (done) {\n        const app = require(getFixturePath('both-configs-set'));\n\n        request(app).del('/todos').expect(404, done);\n      });","file":"rest.middleware.test.js","skipped":true,"dir":"test"},{"name":"supports .user() with a callback","suites":["role-mapping model"],"updatePoint":{"line":50,"column":38,"index":1315},"line":50,"code":"  it('supports .user() with a callback', function (done) {\n    models.RoleMapping.create({\n      principalType: 'USER',\n      principalId: oneUser.id\n    }, function (err, mapping) {\n      if (err) done(err);\n      mapping.user(function (err, user) {\n        if (err) done(err);\n        expect(user.id).to.equal(oneUser.id);\n        done();\n      });\n    });\n  });","file":"role-mapping.test.js","skipped":false,"dir":"test"},{"name":"supports .user() returning a promise","suites":["role-mapping model"],"updatePoint":{"line":63,"column":42,"index":1684},"line":63,"code":"  it('supports .user() returning a promise', function () {\n    return models.RoleMapping.create({\n      principalType: 'USER',\n      principalId: oneUser.id\n    }).then(function (mapping) {\n      return mapping.user();\n    }).then(function (user) {\n      expect(user.id).to.equal(oneUser.id);\n    });\n  });","file":"role-mapping.test.js","skipped":false,"dir":"test"},{"name":"supports .application() with a callback","suites":["role-mapping model"],"updatePoint":{"line":73,"column":45,"index":1994},"line":73,"code":"  it('supports .application() with a callback', function (done) {\n    models.RoleMapping.create({\n      principalType: 'APP',\n      principalId: anApp.id\n    }, function (err, mapping) {\n      if (err) done(err);\n      mapping.application(function (err, app) {\n        if (err) done(err);\n        expect(app.id).to.equal(anApp.id);\n        done();\n      });\n    });\n  });","file":"role-mapping.test.js","skipped":false,"dir":"test"},{"name":"supports .application() returning a promise","suites":["role-mapping model"],"updatePoint":{"line":86,"column":49,"index":2370},"line":86,"code":"  it('supports .application() returning a promise', function () {\n    return models.RoleMapping.create({\n      principalType: 'APP',\n      principalId: anApp.id\n    }).then(function (mapping) {\n      return mapping.application();\n    }).then(function (app) {\n      expect(app.id).to.equal(anApp.id);\n    });\n  });","file":"role-mapping.test.js","skipped":false,"dir":"test"},{"name":"supports .childRole() with a callback","suites":["role-mapping model"],"updatePoint":{"line":96,"column":43,"index":2678},"line":96,"code":"  it('supports .childRole() with a callback', function (done) {\n    models.RoleMapping.create({\n      principalType: 'ROLE',\n      principalId: aRole.id\n    }, function (err, mapping) {\n      if (err) done(err);\n      mapping.childRole(function (err, role) {\n        if (err) done(err);\n        expect(role.id).to.equal(aRole.id);\n        done();\n      });\n    });\n  });","file":"role-mapping.test.js","skipped":false,"dir":"test"},{"name":"supports .childRole() returning a promise","suites":["role-mapping model"],"updatePoint":{"line":109,"column":47,"index":3053},"line":109,"code":"  it('supports .childRole() returning a promise', function () {\n    return models.RoleMapping.create({\n      principalType: 'ROLE',\n      principalId: aRole.id\n    }).then(function (mapping) {\n      return mapping.childRole();\n    }).then(function (role) {\n      expect(role.id).to.equal(aRole.id);\n    });\n  });","file":"role-mapping.test.js","skipped":false,"dir":"test"},{"name":"should define role/role relations","suites":["role model"],"updatePoint":{"line":65,"column":39,"index":1703},"line":65,"code":"  it('should define role/role relations', function (done) {\n    Role.create({\n      name: 'user'\n    }, function (err, userRole) {\n      if (err) return done(err);\n      Role.create({\n        name: 'admin'\n      }, function (err, adminRole) {\n        if (err) return done(err);\n        userRole.principals.create({\n          principalType: RoleMapping.ROLE,\n          principalId: adminRole.id\n        }, function (err, mapping) {\n          if (err) return done(err);\n          async.parallel([function (next) {\n            Role.find(function (err, roles) {\n              if (err) return next(err);\n              assert.equal(roles.length, 2);\n              next();\n            });\n          }, function (next) {\n            RoleMapping.find(function (err, mappings) {\n              if (err) return next(err);\n              assert.equal(mappings.length, 1);\n              assert.equal(mappings[0].principalType, RoleMapping.ROLE);\n              assert.equal(mappings[0].principalId, adminRole.id);\n              next();\n            });\n          }, function (next) {\n            userRole.principals(function (err, principals) {\n              if (err) return next(err);\n              assert.equal(principals.length, 1);\n              next();\n            });\n          }, function (next) {\n            userRole.roles(function (err, roles) {\n              if (err) return next(err);\n              assert.equal(roles.length, 1);\n              next();\n            });\n          }], done);\n        });\n      });\n    });\n  });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should generate created/modified properties","suites":["role model"],"updatePoint":{"line":110,"column":49,"index":3233},"line":110,"code":"  it('should generate created/modified properties', () => {\n    return Role.create({\n      name: 'ADMIN'\n    }).then(role => {\n      expect(role.toJSON().created).to.be.instanceOf(Date);\n      expect(role.toJSON().modified).to.be.instanceOf(Date);\n    });\n  });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should define role/user relations","suites":["role model"],"updatePoint":{"line":118,"column":39,"index":3485},"line":118,"code":"  it('should define role/user relations', function (done) {\n    User.create({\n      name: 'Raymond',\n      email: 'x@y.com',\n      password: 'foobar'\n    }, function (err, user) {\n      if (err) return done(err);\n      Role.create({\n        name: 'userRole'\n      }, function (err, role) {\n        if (err) return done(err);\n        role.principals.create({\n          principalType: RoleMapping.USER,\n          principalId: user.id\n        }, function (err, p) {\n          if (err) return done(err);\n          async.parallel([function (next) {\n            Role.find(function (err, roles) {\n              if (err) return next(err);\n              assert.equal(roles.length, 1);\n              assert.equal(roles[0].name, 'userRole');\n              next();\n            });\n          }, function (next) {\n            role.principals(function (err, principals) {\n              if (err) return next(err);\n              assert.equal(principals.length, 1);\n              assert.equal(principals[0].principalType, RoleMapping.USER);\n              assert.equal(principals[0].principalId, user.id);\n              next();\n            });\n          }, function (next) {\n            role.users(function (err, users) {\n              if (err) return next(err);\n              assert.equal(users.length, 1);\n              assert.equal(users[0].id, user.id);\n              next();\n            });\n          }], done);\n        });\n      });\n    });\n  });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should not allow duplicate role name","suites":["role model"],"updatePoint":{"line":161,"column":42,"index":4922},"line":161,"code":"  it('should not allow duplicate role name', function (done) {\n    Role.create({\n      name: 'userRole'\n    }, function (err, role) {\n      if (err) return done(err);\n      Role.create({\n        name: 'userRole'\n      }, function (err, role) {\n        expect(err).to.exist();\n        expect(err).to.have.property('name', 'ValidationError');\n        expect(err).to.have.nested.property('details.codes.name');\n        expect(err.details.codes.name).to.contain('uniqueness');\n        expect(err).to.have.property('statusCode', 422);\n        done();\n      });\n    });\n  });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should automatically generate role id","suites":["role model"],"updatePoint":{"line":178,"column":43,"index":5493},"line":178,"code":"  it('should automatically generate role id', function (done) {\n    User.create({\n      name: 'Raymond',\n      email: 'x@y.com',\n      password: 'foobar'\n    }, function (err, user) {\n      if (err) return done(err);\n      Role.create({\n        name: 'userRole'\n      }, function (err, role) {\n        if (err) return done(err);\n        assert(role.id);\n        role.principals.create({\n          principalType: RoleMapping.USER,\n          principalId: user.id\n        }, function (err, p) {\n          if (err) return done(err);\n          assert(p.id);\n          assert.equal(p.roleId, role.id);\n          async.parallel([function (next) {\n            Role.find(function (err, roles) {\n              if (err) return next(err);\n              assert.equal(roles.length, 1);\n              assert.equal(roles[0].name, 'userRole');\n              next();\n            });\n          }, function (next) {\n            role.principals(function (err, principals) {\n              if (err) return next(err);\n              assert.equal(principals.length, 1);\n              assert.equal(principals[0].principalType, RoleMapping.USER);\n              assert.equal(principals[0].principalId, user.id);\n              next();\n            });\n          }, function (next) {\n            role.users(function (err, users) {\n              if (err) return next(err);\n              assert.equal(users.length, 1);\n              assert.equal(users[0].id, user.id);\n            });\n            next();\n          }], done);\n        });\n      });\n    });\n  });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should support getRoles() and isInRole()","suites":["role model"],"updatePoint":{"line":224,"column":46,"index":7024},"line":224,"code":"  it('should support getRoles() and isInRole()', function (done) {\n    User.create({\n      name: 'Raymond',\n      email: 'x@y.com',\n      password: 'foobar'\n    }, function (err, user) {\n      if (err) return done(err);\n      Role.create({\n        name: 'userRole'\n      }, function (err, role) {\n        if (err) return done(err);\n        role.principals.create({\n          principalType: RoleMapping.USER,\n          principalId: user.id\n        }, function (err, p) {\n          if (err) return done(err);\n          async.series([function (next) {\n            Role.isInRole('userRole', {\n              principalType: RoleMapping.USER,\n              principalId: user.id\n            }, function (err, inRole) {\n              if (err) return next(err); // NOTE(bajtos) Apparently isRole is not a boolean,\n              // but the matchin role object instead\n\n              assert(!!inRole);\n              next();\n            });\n          }, function (next) {\n            Role.isInRole('userRole', {\n              principalType: RoleMapping.APP,\n              principalId: user.id\n            }, function (err, inRole) {\n              if (err) return next(err);\n              assert(!inRole);\n              next();\n            });\n          }, function (next) {\n            Role.isInRole('userRole', {\n              principalType: RoleMapping.USER,\n              principalId: 100\n            }, function (err, inRole) {\n              if (err) return next(err);\n              assert(!inRole);\n              next();\n            });\n          }, function (next) {\n            Role.getRoles({\n              principalType: RoleMapping.USER,\n              principalId: user.id\n            }, function (err, roles) {\n              if (err) return next(err);\n              expect(roles).to.eql([Role.AUTHENTICATED, Role.EVERYONE, role.id]);\n              next();\n            });\n          }, function (next) {\n            Role.getRoles({\n              principalType: RoleMapping.USER,\n              principalId: user.id\n            }, {\n              returnOnlyRoleNames: true\n            }, function (err, roles) {\n              if (err) return next(err);\n              expect(roles).to.eql([Role.AUTHENTICATED, Role.EVERYONE, role.name]);\n              next();\n            });\n          }, function (next) {\n            Role.getRoles({\n              principalType: RoleMapping.APP,\n              principalId: user.id\n            }, function (err, roles) {\n              if (err) return next(err);\n              expect(roles).to.eql([Role.AUTHENTICATED, Role.EVERYONE]);\n              next();\n            });\n          }, function (next) {\n            Role.getRoles({\n              principalType: RoleMapping.USER,\n              principalId: 100\n            }, function (err, roles) {\n              if (err) return next(err);\n              expect(roles).to.eql([Role.AUTHENTICATED, Role.EVERYONE]);\n              next();\n            });\n          }, function (next) {\n            Role.getRoles({\n              principalType: RoleMapping.USER,\n              principalId: null\n            }, function (err, roles) {\n              if (err) return next(err);\n              expect(roles).to.eql([Role.UNAUTHENTICATED, Role.EVERYONE]);\n              next();\n            });\n          }], done);\n        });\n      });\n    });\n  });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"supports isInRole() returning a Promise","suites":["role model"],"updatePoint":{"line":321,"column":45,"index":10340},"line":321,"code":"  it('supports isInRole() returning a Promise', function (done) {\n    const userData = {\n      name: 'Raymond',\n      email: 'x@y.com',\n      password: 'foobar'\n    };\n    User.create(userData, function (err, user) {\n      if (err) return done(err);\n      Role.create({\n        name: 'userRole'\n      }, function (err, role) {\n        if (err) return done(err);\n        const principalData = {\n          principalType: RoleMapping.USER,\n          principalId: user.id\n        };\n        role.principals.create(principalData, function (err, p) {\n          if (err) return done(err);\n          Role.isInRole('userRole', principalData).then(function (inRole) {\n            expect(inRole).to.be.true();\n            done();\n          }).catch(done);\n        });\n      });\n    });\n  });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"supports getRole() returning a Promise","suites":["role model"],"updatePoint":{"line":347,"column":44,"index":11120},"line":347,"code":"  it('supports getRole() returning a Promise', function (done) {\n    const userData = {\n      name: 'Raymond',\n      email: 'x@y.com',\n      password: 'foobar'\n    };\n    User.create(userData, function (err, user) {\n      if (err) return done(err);\n      Role.create({\n        name: 'userRole'\n      }, function (err, role) {\n        if (err) return done(err);\n        const principalData = {\n          principalType: RoleMapping.USER,\n          principalId: user.id\n        };\n        role.principals.create(principalData, function (err, p) {\n          if (err) return done(err);\n          Role.getRoles(principalData).then(function (roles) {\n            expect(roles).to.eql([Role.AUTHENTICATED, Role.EVERYONE, role.id]);\n            done();\n          }).catch(done);\n        });\n      });\n    });\n  });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should be properly authenticated with 0 userId","suites":["role model"],"updatePoint":{"line":373,"column":52,"index":11934},"line":373,"code":"  it('should be properly authenticated with 0 userId', function (done) {\n    const userData = {\n      name: 'Raymond',\n      email: 'x@y.com',\n      password: 'foobar',\n      id: 0\n    };\n    const TestUser = app.registry.createModel({\n      name: 'TestUser',\n      base: 'User',\n      // forceId is set to false so we can create a user with a known ID,\n      // in this case 0 - which used to fail the falsy checks.\n      forceId: false\n    });\n    app.model(TestUser, {\n      dataSource: 'db'\n    });\n    TestUser.create(userData, function (err, user) {\n      if (err) return done(err);\n      Role.create({\n        name: 'userRole'\n      }, function (err, role) {\n        if (err) return done(err);\n        role.principals.create({\n          principalType: RoleMapping.USER,\n          principalId: user.id\n        }, function (err, p) {\n          if (err) return done(err);\n          async.series([function (next) {\n            Role.isInRole('userRole', {\n              principalType: RoleMapping.USER,\n              principalId: user.id\n            }, function (err, inRole) {\n              if (err) return next(err);\n              assert(!!inRole);\n              next();\n            });\n          }, function (next) {\n            Role.isInRole('userRole', {\n              principalType: RoleMapping.APP,\n              principalId: user.id\n            }, function (err, inRole) {\n              if (err) return next(err);\n              assert(!inRole);\n              next();\n            });\n          }, function (next) {\n            Role.getRoles({\n              principalType: RoleMapping.USER,\n              principalId: user.id\n            }, function (err, roles) {\n              if (err) return next(err);\n              expect(roles).to.eql([Role.AUTHENTICATED, Role.EVERYONE, role.id]);\n              next();\n            });\n          }], done);\n        });\n      });\n    });\n  }); // this test should be split to address one resolver at a time","file":"role.test.js","skipped":false,"dir":"test"},{"name":"supports built-in role resolvers","suites":["role model"],"updatePoint":{"line":434,"column":38,"index":13875},"line":434,"code":"  it('supports built-in role resolvers', function (done) {\n    Role.registerResolver('returnPromise', function (role, context) {\n      return new Promise(function (resolve) {\n        process.nextTick(function () {\n          resolve(true);\n        });\n      });\n    });\n    const Album = app.registry.createModel('Album', {\n      name: String,\n      userId: Number\n    }, {\n      relations: {\n        user: {\n          type: 'belongsTo',\n          model: 'User',\n          foreignKey: 'userId'\n        }\n      }\n    });\n    app.model(Album, {\n      dataSource: 'db'\n    });\n    User.create({\n      name: 'Raymond',\n      email: 'x@y.com',\n      password: 'foobar'\n    }, function (err, user) {\n      if (err) return done(err);\n      async.parallel([function (next) {\n        Role.isInRole('returnPromise', {\n          principalType: ACL.USER,\n          principalId: user.id\n        }, function (err, yes) {\n          if (err) return next(err);\n          assert(yes);\n          next();\n        });\n      }, function (next) {\n        Role.isInRole(Role.AUTHENTICATED, {\n          principalType: ACL.USER,\n          principalId: user.id\n        }, function (err, yes) {\n          if (err) next(err);\n          assert(yes);\n          next();\n        });\n      }, function (next) {\n        Role.isInRole(Role.AUTHENTICATED, {\n          principalType: ACL.USER,\n          principalId: null\n        }, function (err, yes) {\n          if (err) next(err);\n          assert(!yes);\n          next();\n        });\n      }, function (next) {\n        Role.isInRole(Role.UNAUTHENTICATED, {\n          principalType: ACL.USER,\n          principalId: user.id\n        }, function (err, yes) {\n          if (err) return next(err);\n          assert(!yes);\n          next();\n        });\n      }, function (next) {\n        Role.isInRole(Role.UNAUTHENTICATED, {\n          principalType: ACL.USER,\n          principalId: null\n        }, function (err, yes) {\n          if (err) return next(err);\n          assert(yes);\n          next();\n        });\n      }, function (next) {\n        Role.isInRole(Role.EVERYONE, {\n          principalType: ACL.USER,\n          principalId: user.id\n        }, function (err, yes) {\n          if (err) return next(err);\n          assert(yes);\n          next();\n        });\n      }, function (next) {\n        Role.isInRole(Role.EVERYONE, {\n          principalType: ACL.USER,\n          principalId: null\n        }, function (err, yes) {\n          if (err) return next(err);\n          assert(yes);\n          next();\n        });\n      }, function (next) {\n        Album.create({\n          name: 'Album 1',\n          userId: user.id\n        }, function (err, album1) {\n          if (err) return done(err);\n          let role = {\n            principalType: ACL.USER,\n            principalId: user.id,\n            model: Album,\n            id: album1.id\n          };\n          Role.isInRole(Role.OWNER, role, function (err, yes) {\n            if (err) return next(err);\n            assert(yes);\n            Album.create({\n              name: 'Album 2'\n            }, function (err, album2) {\n              if (err) return next(err);\n              role = {\n                principalType: ACL.USER,\n                principalId: user.id,\n                model: Album,\n                id: album2.id\n              };\n              Role.isInRole(Role.OWNER, role, function (err, yes) {\n                if (err) return next(err);\n                assert(!yes);\n                next();\n              });\n            });\n          });\n        });\n      }], done);\n    });\n  });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"resolves the owner via property \"userId\"","suites":["role model","$owner role resolver","ownerRelations not set (legacy behaviour)"],"updatePoint":{"line":574,"column":50,"index":17803},"line":574,"code":"      it('resolves the owner via property \"userId\"', function () {\n        let user;\n        const Album = app.registry.createModel('Album', {\n          name: String,\n          userId: Number\n        });\n        app.model(Album, {\n          dataSource: 'db'\n        });\n        return User.create({\n          email: 'test@example.com',\n          password: 'pass'\n        }).then(u => {\n          user = u;\n          return Album.create({\n            name: 'Album 1',\n            userId: user.id\n          });\n        }).then(album => {\n          return Role.isInRole(Role.OWNER, {\n            principalType: ACL.USER,\n            principalId: user.id,\n            model: Album,\n            id: album.id\n          });\n        }).then(isInRole => expect(isInRole).to.be.true());\n      });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"resolves the owner via property \"owner\"","suites":["role model","$owner role resolver","ownerRelations not set (legacy behaviour)"],"updatePoint":{"line":601,"column":49,"index":18589},"line":601,"code":"      it('resolves the owner via property \"owner\"', function () {\n        let user;\n        const Album = app.registry.createModel('Album', {\n          name: String,\n          owner: Number\n        });\n        app.model(Album, {\n          dataSource: 'db'\n        });\n        return User.create({\n          email: 'test@example.com',\n          password: 'pass'\n        }).then(u => {\n          user = u;\n          return Album.create({\n            name: 'Album 1',\n            owner: user.id\n          });\n        }).then(album => {\n          return Role.isInRole(Role.OWNER, {\n            principalType: ACL.USER,\n            principalId: user.id,\n            model: Album,\n            id: album.id\n          });\n        }).then(isInRole => expect(isInRole).to.be.true());\n      });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"resolves the owner via a belongsTo relation","suites":["role model","$owner role resolver","ownerRelations not set (legacy behaviour)"],"updatePoint":{"line":628,"column":53,"index":19377},"line":628,"code":"      it('resolves the owner via a belongsTo relation', function () {\n        // passing no options will result calling\n        // the legacy $owner role resolver behavior\n        const Message = givenModelWithSenderReceiverRelations('ModelWithNoOptions');\n        return givenUsers().then(() => {\n          const messages = [{\n            content: 'firstMessage',\n            senderId: sender.id\n          }, {\n            content: 'secondMessage',\n            receiverId: receiver.id\n          }, {\n            content: 'thirdMessage'\n          }];\n          return Promise.map(messages, msg => {\n            return Message.create(msg);\n          });\n        }).then(messages => {\n          return Promise.all([isOwnerForMessage(sender, messages[0]), isOwnerForMessage(receiver, messages[1]), isOwnerForMessage(receiver, messages[2])]);\n        }).then(result => {\n          expect(result).to.eql([{\n            user: 'sender',\n            msg: 'firstMessage',\n            isOwner: true\n          }, {\n            user: 'receiver',\n            msg: 'secondMessage',\n            isOwner: false\n          }, {\n            user: 'receiver',\n            msg: 'thirdMessage',\n            isOwner: false\n          }]);\n        });\n      });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"resolves as false without belongsTo relation","suites":["role model","$owner role resolver","ownerRelations not set (legacy behaviour)"],"updatePoint":{"line":664,"column":52,"index":20621},"line":664,"code":"    it('resolves as false without belongsTo relation', function () {\n      let user;\n      const Album = app.registry.createModel('Album', {\n        name: String,\n        userId: Number,\n        owner: Number\n      }, // passing {ownerRelations: true} will enable the new $owner role resolver\n      // and hence resolve false when no belongsTo relation is defined\n      {\n        ownerRelations: true\n      });\n      app.model(Album, {\n        dataSource: 'db'\n      });\n      return User.create({\n        email: 'test@example.com',\n        password: 'pass'\n      }).then(u => {\n        user = u;\n        return Album.create({\n          name: 'Album 1',\n          userId: user.id,\n          owner: user.id\n        });\n      }).then(album => {\n        return Role.isInRole(Role.OWNER, {\n          principalType: ACL.USER,\n          principalId: user.id,\n          model: Album,\n          id: album.id\n        });\n      }).then(isInRole => expect(isInRole).to.be.false());\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"resolves the owner using the corrent belongsTo relation","suites":["role model","$owner role resolver","ownerRelations not set (legacy behaviour)"],"updatePoint":{"line":697,"column":63,"index":21611},"line":697,"code":"    it('resolves the owner using the corrent belongsTo relation', function () {\n      // passing {ownerRelations: true} will enable the new $owner role resolver\n      // with any belongsTo relation allowing to resolve truthy\n      const Message = givenModelWithSenderReceiverRelations('ModelWithAllRelations', {\n        ownerRelations: true\n      });\n      return givenUsers().then(() => {\n        const messages = [{\n          content: 'firstMessage',\n          senderId: sender.id\n        }, {\n          content: 'secondMessage',\n          receiverId: receiver.id\n        }, {\n          content: 'thirdMessage'\n        }];\n        return Promise.map(messages, msg => {\n          return Message.create(msg);\n        });\n      }).then(messages => {\n        return Promise.all([isOwnerForMessage(sender, messages[0]), isOwnerForMessage(receiver, messages[1]), isOwnerForMessage(receiver, messages[2])]);\n      }).then(result => {\n        expect(result).to.eql([{\n          user: 'sender',\n          msg: 'firstMessage',\n          isOwner: true\n        }, {\n          user: 'receiver',\n          msg: 'secondMessage',\n          isOwner: true\n        }, {\n          user: 'receiver',\n          msg: 'thirdMessage',\n          isOwner: false\n        }]);\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"allows fine-grained control of which relations grant ownership","suites":["role model","$owner role resolver","ownerRelations not set (legacy behaviour)"],"updatePoint":{"line":734,"column":70,"index":22886},"line":734,"code":"    it('allows fine-grained control of which relations grant ownership', function () {\n      // passing {ownerRelations: true} will enable the new $owner role resolver\n      // with a specified list of belongsTo relations allowing to resolve truthy\n      const Message = givenModelWithSenderReceiverRelations('ModelWithCoercedRelations', {\n        ownerRelations: ['receiver']\n      });\n      return givenUsers().then(() => {\n        const messages = [{\n          content: 'firstMessage',\n          senderId: sender.id\n        }, {\n          content: 'secondMessage',\n          receiverId: receiver.id\n        }, {\n          content: 'thirdMessage'\n        }];\n        return Promise.map(messages, msg => {\n          return Message.create(msg);\n        });\n      }).then(messages => {\n        return Promise.all([isOwnerForMessage(sender, messages[0]), isOwnerForMessage(receiver, messages[1]), isOwnerForMessage(receiver, messages[2])]);\n      }).then(result => {\n        expect(result).to.eql([{\n          user: 'sender',\n          msg: 'firstMessage',\n          isOwner: false\n        }, {\n          user: 'receiver',\n          msg: 'secondMessage',\n          isOwner: true\n        }, {\n          user: 'receiver',\n          msg: 'thirdMessage',\n          isOwner: false\n        }]);\n      });\n    }); // helpers","file":"role.test.js","skipped":false,"dir":"test"},{"name":"passes accessToken to modelClass.findById when resolving OWNER","suites":["role model","$owner role resolver","ownerRelations not set (legacy behaviour)"],"updatePoint":{"line":822,"column":68,"index":25419},"line":822,"code":"  it('passes accessToken to modelClass.findById when resolving OWNER', () => {\n    const Album = app.registry.createModel('Album', {\n      name: String\n    });\n    app.model(Album, {\n      dataSource: 'db'\n    });\n    Album.belongsTo(User);\n    let observedOptions = null;\n    Album.observe('access', ctx => {\n      observedOptions = ctx.options;\n      return Promise.resolve();\n    });\n    let user, token;\n    return User.create({\n      email: 'test@example.com',\n      password: 'pass'\n    }).then(u => {\n      user = u;\n      return Album.create({\n        name: 'Album 1',\n        userId: user.id\n      });\n    }).then(album => {\n      return Role.isInRole(Role.OWNER, {\n        principalType: ACL.USER,\n        principalId: user.id,\n        model: Album,\n        id: album.id,\n        accessToken: 'test-token'\n      });\n    }).then(isInRole => {\n      expect(observedOptions).to.eql({\n        accessToken: 'test-token'\n      });\n    });\n  });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"supports ACL.resolvePrincipal() returning a promise","suites":["role model","isMappedToRole"],"updatePoint":{"line":900,"column":59,"index":27549},"line":900,"code":"    it('supports ACL.resolvePrincipal() returning a promise', function () {\n      return ACL.resolvePrincipal(ACL.USER, user.id).then(function (u) {\n        expect(u.id).to.eql(user.id);\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should resolve user by id","suites":["role model","isMappedToRole"],"updatePoint":{"line":905,"column":33,"index":27728},"line":905,"code":"    it('should resolve user by id', function (done) {\n      ACL.resolvePrincipal(ACL.USER, user.id, function (err, u) {\n        if (err) return done(err);\n        expect(u.id).to.eql(user.id);\n        done();\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should resolve user by username","suites":["role model","isMappedToRole"],"updatePoint":{"line":912,"column":39,"index":27961},"line":912,"code":"    it('should resolve user by username', function (done) {\n      ACL.resolvePrincipal(ACL.USER, user.username, function (err, u) {\n        if (err) return done(err);\n        expect(u.username).to.eql(user.username);\n        done();\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should resolve user by email","suites":["role model","isMappedToRole"],"updatePoint":{"line":919,"column":36,"index":28209},"line":919,"code":"    it('should resolve user by email', function (done) {\n      ACL.resolvePrincipal(ACL.USER, user.email, function (err, u) {\n        if (err) return done(err);\n        expect(u.email).to.eql(user.email);\n        done();\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should resolve app by id","suites":["role model","isMappedToRole"],"updatePoint":{"line":926,"column":32,"index":28444},"line":926,"code":"    it('should resolve app by id', function (done) {\n      ACL.resolvePrincipal(ACL.APP, app.id, function (err, a) {\n        if (err) return done(err);\n        expect(a.id).to.eql(app.id);\n        done();\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should resolve app by name","suites":["role model","isMappedToRole"],"updatePoint":{"line":933,"column":34,"index":28669},"line":933,"code":"    it('should resolve app by name', function (done) {\n      ACL.resolvePrincipal(ACL.APP, app.name, function (err, a) {\n        if (err) return done(err);\n        expect(a.name).to.eql(app.name);\n        done();\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"supports ACL.isMappedToRole() returning a promise","suites":["role model","isMappedToRole"],"updatePoint":{"line":940,"column":57,"index":28923},"line":940,"code":"    it('supports ACL.isMappedToRole() returning a promise', function () {\n      return ACL.isMappedToRole(ACL.USER, user.username, 'admin').then(function (flag) {\n        expect(flag).to.be.true();\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should report isMappedToRole by user.username","suites":["role model","isMappedToRole"],"updatePoint":{"line":945,"column":53,"index":29135},"line":945,"code":"    it('should report isMappedToRole by user.username', function (done) {\n      ACL.isMappedToRole(ACL.USER, user.username, 'admin', function (err, flag) {\n        if (err) return done(err);\n        expect(flag).to.eql(true);\n        done();\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should report isMappedToRole by user.email","suites":["role model","isMappedToRole"],"updatePoint":{"line":952,"column":50,"index":29392},"line":952,"code":"    it('should report isMappedToRole by user.email', function (done) {\n      ACL.isMappedToRole(ACL.USER, user.email, 'admin', function (err, flag) {\n        if (err) return done(err);\n        expect(flag).to.eql(true);\n        done();\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should report isMappedToRole by user.username for mismatch","suites":["role model","isMappedToRole"],"updatePoint":{"line":959,"column":66,"index":29662},"line":959,"code":"    it('should report isMappedToRole by user.username for mismatch', function (done) {\n      ACL.isMappedToRole(ACL.USER, 'mary', 'admin', function (err, flag) {\n        if (err) return done(err);\n        expect(flag).to.eql(false);\n        done();\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should report isMappedToRole by app.name","suites":["role model","isMappedToRole"],"updatePoint":{"line":966,"column":48,"index":29911},"line":966,"code":"    it('should report isMappedToRole by app.name', function (done) {\n      ACL.isMappedToRole(ACL.APP, app.name, 'admin', function (err, flag) {\n        if (err) return done(err);\n        expect(flag).to.eql(true);\n        done();\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should fetch all models assigned to the role","suites":["role model","listByPrincipalType"],"updatePoint":{"line":982,"column":52,"index":30373},"line":982,"code":"    it('should fetch all models assigned to the role', function (done) {\n      const principalTypesToModels = {};\n      let runs = 0;\n      principalTypesToModels[RoleMapping.USER] = User;\n      principalTypesToModels[RoleMapping.APPLICATION] = Application;\n      principalTypesToModels[RoleMapping.ROLE] = Role;\n      const mappings = Object.keys(principalTypesToModels);\n      mappings.forEach(function (principalType) {\n        const Model = principalTypesToModels[principalType];\n        Model.create({\n          name: 'test',\n          email: 'x@y.com',\n          password: 'foobar'\n        }, function (err, model) {\n          if (err) return done(err);\n          const uniqueRoleName = 'testRoleFor' + principalType;\n          Role.create({\n            name: uniqueRoleName\n          }, function (err, role) {\n            if (err) return done(err);\n            role.principals.create({\n              principalType: principalType,\n              principalId: model.id\n            }, function (err, p) {\n              if (err) return done(err);\n              const pluralName = Model.pluralModelName.toLowerCase();\n              role[pluralName](function (err, models) {\n                if (err) return done(err);\n                assert.equal(models.length, 1);\n\n                if (++runs === mappings.length) {\n                  done();\n                }\n              });\n            });\n          });\n        });\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should fetch all models only assigned to the role","suites":["role model","listByPrincipalType"],"updatePoint":{"line":1021,"column":57,"index":31817},"line":1021,"code":"    it('should fetch all models only assigned to the role', function (done) {\n      const principalTypesToModels = {};\n      principalTypesToModels[RoleMapping.USER] = User;\n      principalTypesToModels[RoleMapping.APPLICATION] = Application;\n      principalTypesToModels[RoleMapping.ROLE] = Role;\n      const mappings = Object.keys(principalTypesToModels);\n      async.each(mappings, function (principalType, eachCallback) {\n        const Model = principalTypesToModels[principalType];\n        async.waterfall([// Create models\n        function (next) {\n          Model.create([{\n            name: 'test',\n            email: 'x@y.com',\n            password: 'foobar'\n          }, {\n            name: 'test2',\n            email: 'f@v.com',\n            password: 'bargoo'\n          }, {\n            name: 'test3',\n            email: 'd@t.com',\n            password: 'bluegoo'\n          }], function (err, models) {\n            if (err) return next(err);\n            next(null, models);\n          });\n        }, // Create Roles\n        function (models, next) {\n          const uniqueRoleName = 'testRoleFor' + principalType;\n          const otherUniqueRoleName = 'otherTestRoleFor' + principalType;\n          Role.create([{\n            name: uniqueRoleName\n          }, {\n            name: otherUniqueRoleName\n          }], function (err, roles) {\n            if (err) return next(err);\n            next(null, models, roles);\n          });\n        }, // Create principles\n        function (models, roles, next) {\n          async.parallel([function (callback) {\n            roles[0].principals.create({\n              principalType: principalType,\n              principalId: models[0].id\n            }, function (err, p) {\n              if (err) return callback(err);\n              callback(p);\n            });\n          }, function (callback) {\n            roles[1].principals.create({\n              principalType: principalType,\n              principalId: models[1].id\n            }, function (err, p) {\n              if (err) return callback(err);\n              callback(p);\n            });\n          }], function (err, principles) {\n            next(null, models, roles, principles);\n          });\n        }, // Run tests against unique Role\n        function (models, roles, principles, next) {\n          const pluralName = Model.pluralModelName.toLowerCase();\n          const uniqueRole = roles[0];\n          uniqueRole[pluralName](function (err, models) {\n            if (err) return done(err);\n            assert.equal(models.length, 1);\n            next();\n          });\n        }], eachCallback);\n      }, function (err) {\n        done();\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"should apply query","suites":["role model","listByPrincipalType"],"updatePoint":{"line":1094,"column":26,"index":34449},"line":1094,"code":"    it('should apply query', function (done) {\n      User.create({\n        name: 'Raymond',\n        email: 'x@y.com',\n        password: 'foobar'\n      }, function (err, user) {\n        if (err) return done(err);\n        Role.create({\n          name: 'userRole'\n        }, function (err, role) {\n          if (err) return done(err);\n          role.principals.create({\n            principalType: RoleMapping.USER,\n            principalId: user.id\n          }, function (err, p) {\n            if (err) return done(err);\n            const query = {\n              fields: ['id', 'name']\n            };\n            sandbox.spy(User, 'find');\n            role.users(query, function (err, users) {\n              if (err) return done(err);\n              assert.equal(users.length, 1);\n              assert.equal(users[0].id, user.id);\n              assert(User.find.calledWith(query));\n              done();\n            });\n          });\n        });\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"supports Promise API","suites":["role model","listByPrincipalType"],"updatePoint":{"line":1125,"column":28,"index":35410},"line":1125,"code":"    it('supports Promise API', function (done) {\n      const userData = {\n        name: 'Raymond',\n        email: 'x@y.com',\n        password: 'foobar'\n      };\n      User.create(userData, function (err, user) {\n        if (err) return done(err);\n        Role.create({\n          name: 'userRole'\n        }, function (err, role) {\n          if (err) return done(err);\n          const principalData = {\n            principalType: RoleMapping.USER,\n            principalId: user.id\n          };\n          role.principals.create(principalData, function (err, p) {\n            if (err) return done(err);\n            role.users().then(function (users) {\n              const userIds = users.map(function (u) {\n                return u.id;\n              });\n              expect(userIds).to.eql([user.id]);\n              done();\n            }).catch(done);\n          });\n        });\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"supports app-local model registry","suites":["role model","isOwner"],"updatePoint":{"line":1156,"column":41,"index":36358},"line":1156,"code":"    it('supports app-local model registry', function (done) {\n      const app = loopback({\n        localRegistry: true,\n        loadBuiltinModels: true\n      });\n      app.dataSource('db', {\n        connector: 'memory'\n      }); // attach all auth-related models to 'db' datasource\n\n      app.enableAuth({\n        dataSource: 'db'\n      });\n      const Role = app.models.Role;\n      const User = app.models.User; // Speed up the password hashing algorithm for tests\n\n      User.settings.saltWorkFactor = 4;\n      const u = app.registry.findModel('User');\n      const credentials = {\n        email: 'test@example.com',\n        password: 'pass'\n      };\n      User.create(credentials, function (err, user) {\n        if (err) return done(err);\n        Role.isOwner(User, user.id, user.id, function (err, result) {\n          if (err) return done(err);\n          expect(result, 'isOwner result').to.equal(true);\n          done();\n        });\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"supports Promise API","suites":["role model","isOwner"],"updatePoint":{"line":1186,"column":28,"index":37300},"line":1186,"code":"    it('supports Promise API', function (done) {\n      const credentials = {\n        email: 'test@example.com',\n        password: 'pass'\n      };\n      User.create(credentials, function (err, user) {\n        if (err) return done(err);\n        Role.isOwner(User, user.id, user.id).then(function (result) {\n          expect(result, 'isOwner result').to.equal(true);\n          done();\n        }).catch(done);\n      });\n    });","file":"role.test.js","skipped":false,"dir":"test"},{"name":"allows patching user name","suites":["User.password","restrict reset password token scope","using regular access token"],"updatePoint":{"line":29,"column":35,"index":880},"line":29,"code":"      it('allows patching user name', () => {\n        return changeName(regularToken).expect(200);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows patching user password","suites":["User.password","restrict reset password token scope","using regular access token"],"updatePoint":{"line":32,"column":39,"index":993},"line":32,"code":"      it('allows patching user password', () => {\n        return patchPassword(regularToken).expect(200);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows changing user password","suites":["User.password","restrict reset password token scope","using regular access token"],"updatePoint":{"line":35,"column":39,"index":1109},"line":35,"code":"      it('allows changing user password', () => {\n        return changePassword(regularToken).expect(204);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"denies resetting user password","suites":["User.password","restrict reset password token scope","using regular access token"],"updatePoint":{"line":38,"column":40,"index":1227},"line":38,"code":"      it('denies resetting user password', () => {\n        return resetPassword(regularToken).expect(401);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"denies patching user name","suites":["User.password","restrict reset password token scope","using password-reset token"],"updatePoint":{"line":44,"column":35,"index":1440},"line":44,"code":"      it('denies patching user name', () => {\n        return changeName(resetToken).expect(401);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"denies patching user password","suites":["User.password","restrict reset password token scope","using password-reset token"],"updatePoint":{"line":47,"column":39,"index":1551},"line":47,"code":"      it('denies patching user password', () => {\n        return patchPassword(resetToken).expect(401);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"denies changing user password","suites":["User.password","restrict reset password token scope","using password-reset token"],"updatePoint":{"line":50,"column":39,"index":1665},"line":50,"code":"      it('denies changing user password', () => {\n        return changePassword(resetToken).expect(401);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows resetting user password","suites":["User.password","restrict reset password token scope","using password-reset token"],"updatePoint":{"line":53,"column":40,"index":1781},"line":53,"code":"      it('allows resetting user password', () => {\n        return resetPassword(resetToken).expect(204);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows patching user name","suites":["User.password","reject password changes via patch or replace"],"updatePoint":{"line":67,"column":33,"index":2199},"line":67,"code":"    it('allows patching user name', () => {\n      return changeName(regularToken).expect(200);\n    });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"denies patching user password","suites":["User.password","reject password changes via patch or replace"],"updatePoint":{"line":70,"column":37,"index":2306},"line":70,"code":"    it('denies patching user password', () => {\n      return patchPassword(regularToken).expect(401);\n    });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows changing user password","suites":["User.password","reject password changes via patch or replace"],"updatePoint":{"line":73,"column":37,"index":2416},"line":73,"code":"    it('allows changing user password', () => {\n      return changePassword(regularToken).expect(204);\n    });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"denies setPassword-like call with non-password changes","suites":["User.password","reject password changes via patch or replace"],"updatePoint":{"line":76,"column":62,"index":2552},"line":76,"code":"    it('denies setPassword-like call with non-password changes', () => {\n      return patchNameAndPasswordDirectly().then(function onSuccess() {\n        throw new Error('patchAttributes() should have failed');\n      }, function onError(err) {\n        expect(err.message).to.match(/Invalid use.*options.setPassword/);\n      });\n    });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows changing user name","suites":["User.password","all feature flags disabled","using regular access token"],"updatePoint":{"line":94,"column":35,"index":3199},"line":94,"code":"      it('allows changing user name', () => {\n        return changeName(regularToken).expect(200);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows patching user password","suites":["User.password","all feature flags disabled","using regular access token"],"updatePoint":{"line":97,"column":39,"index":3312},"line":97,"code":"      it('allows patching user password', () => {\n        return patchPassword(regularToken).expect(200);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows changing user password","suites":["User.password","all feature flags disabled","using regular access token"],"updatePoint":{"line":100,"column":39,"index":3428},"line":100,"code":"      it('allows changing user password', () => {\n        return changePassword(regularToken).expect(204);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows resetting user password","suites":["User.password","all feature flags disabled","using regular access token"],"updatePoint":{"line":103,"column":40,"index":3546},"line":103,"code":"      it('allows resetting user password', () => {\n        return resetPassword(regularToken).expect(204);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows changing user name","suites":["User.password","all feature flags disabled","using password-reset token"],"updatePoint":{"line":109,"column":35,"index":3759},"line":109,"code":"      it('allows changing user name', () => {\n        return changeName(resetToken).expect(200);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows patching user password","suites":["User.password","all feature flags disabled","using password-reset token"],"updatePoint":{"line":112,"column":39,"index":3870},"line":112,"code":"      it('allows patching user password', () => {\n        return patchPassword(resetToken).expect(200);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows changing user password","suites":["User.password","all feature flags disabled","using password-reset token"],"updatePoint":{"line":115,"column":39,"index":3984},"line":115,"code":"      it('allows changing user password', () => {\n        return changePassword(resetToken).expect(204);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows resetting user password","suites":["User.password","all feature flags disabled","using password-reset token"],"updatePoint":{"line":118,"column":40,"index":4100},"line":118,"code":"      it('allows resetting user password', () => {\n        return resetPassword(resetToken).expect(204);\n      });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"allows setPassword-like call with non-password changes","suites":["User.password","all feature flags disabled","using password-reset token"],"updatePoint":{"line":122,"column":62,"index":4245},"line":122,"code":"    it('allows setPassword-like call with non-password changes', () => {\n      return patchNameAndPasswordDirectly().then(() => {// test passed\n      });\n    });","file":"user-password.test.js","skipped":false,"dir":"test"},{"name":"Create a new user","suites":["User","User.create"],"updatePoint":{"line":160,"column":25,"index":4418},"line":160,"code":"    it('Create a new user', function (done) {\n      User.create({\n        email: 'f@b.com',\n        password: 'bar'\n      }, function (err, user) {\n        assert(!err);\n        assert(user.pk);\n        assert(user.email);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Create a new user (email case-sensitivity off)","suites":["User","User.create"],"updatePoint":{"line":171,"column":54,"index":4704},"line":171,"code":"    it('Create a new user (email case-sensitivity off)', function (done) {\n      User.settings.caseSensitiveEmail = false;\n      User.create({\n        email: 'F@b.com',\n        password: 'bar'\n      }, function (err, user) {\n        if (err) return done(err);\n        assert(user.pk);\n        assert.equal(user.email, user.email.toLowerCase());\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Create a new user (email case-sensitive)","suites":["User","User.create"],"updatePoint":{"line":183,"column":48,"index":5077},"line":183,"code":"    it('Create a new user (email case-sensitive)', function (done) {\n      User.create({\n        email: 'F@b.com',\n        password: 'bar'\n      }, function (err, user) {\n        if (err) return done(err);\n        assert(user.pk);\n        assert(user.email);\n        assert.notEqual(user.email, user.email.toLowerCase());\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"fails when the required email is missing (case-sensitivity on)","suites":["User","User.create"],"updatePoint":{"line":195,"column":70,"index":5455},"line":195,"code":"    it('fails when the required email is missing (case-sensitivity on)', () => {\n      User.create({\n        password: '123'\n      }).then(success => {\n        throw new Error('create should have failed');\n      }, err => {\n        expect(err.name).to.equal('ValidationError');\n        expect(err.statusCode).to.equal(422);\n        expect(err.details.context).to.equal(User.modelName);\n        expect(err.details.codes.email).to.deep.equal(['presence']);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"fails when the required email is missing (case-sensitivity off)","suites":["User","User.create"],"updatePoint":{"line":207,"column":71,"index":5929},"line":207,"code":"    it('fails when the required email is missing (case-sensitivity off)', () => {\n      User.settings.caseSensitiveEmail = false;\n      User.create({\n        email: undefined,\n        password: '123'\n      }).then(success => {\n        throw new Error('create should have failed');\n      }, err => {\n        expect(err.name).to.equal('ValidationError');\n        expect(err.statusCode).to.equal(422);\n        expect(err.details.context).to.equal(User.modelName);\n        expect(err.details.codes.email).to.deep.equal(['presence']);\n      });\n    }); // will change in future versions where password will be optional by default","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Password is required","suites":["User","User.create"],"updatePoint":{"line":222,"column":28,"index":6512},"line":222,"code":"    it('Password is required', function (done) {\n      const u = new User({\n        email: '123@456.com'\n      });\n      User.create({\n        email: 'c@d.com'\n      }, function (err) {\n        assert(err);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Requires a valid email","suites":["User","User.create"],"updatePoint":{"line":233,"column":30,"index":6755},"line":233,"code":"    it('Requires a valid email', function (done) {\n      User.create({\n        email: 'foo@',\n        password: '123'\n      }, function (err) {\n        assert(err);\n        assert.equal(err.name, 'ValidationError');\n        assert.equal(err.statusCode, 422);\n        assert.equal(err.details.context, User.modelName);\n        assert.deepEqual(err.details.codes.email, ['custom.email']);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"allows TLD domains in email","suites":["User","User.create"],"updatePoint":{"line":246,"column":35,"index":7181},"line":246,"code":"    it('allows TLD domains in email', function () {\n      return User.create({\n        email: 'local@com',\n        password: '123'\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Requires a unique email","suites":["User","User.create"],"updatePoint":{"line":252,"column":31,"index":7326},"line":252,"code":"    it('Requires a unique email', function (done) {\n      User.create({\n        email: 'a@b.com',\n        password: 'foobar'\n      }, function () {\n        User.create({\n          email: 'a@b.com',\n          password: 'batbaz'\n        }, function (err) {\n          assert(err, 'should error because the email is not unique!');\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Requires a unique email (email case-sensitivity off)","suites":["User","User.create"],"updatePoint":{"line":266,"column":60,"index":7730},"line":266,"code":"    it('Requires a unique email (email case-sensitivity off)', function (done) {\n      User.settings.caseSensitiveEmail = false;\n      User.create({\n        email: 'A@b.com',\n        password: 'foobar'\n      }, function (err) {\n        if (err) return done(err);\n        User.create({\n          email: 'a@b.com',\n          password: 'batbaz'\n        }, function (err) {\n          assert(err, 'should error because the email is not unique!');\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Requires a unique email (email case-sensitive)","suites":["User","User.create"],"updatePoint":{"line":282,"column":54,"index":8214},"line":282,"code":"    it('Requires a unique email (email case-sensitive)', function (done) {\n      User.create({\n        email: 'A@b.com',\n        password: 'foobar'\n      }, function (err, user1) {\n        User.create({\n          email: 'a@b.com',\n          password: 'batbaz'\n        }, function (err, user2) {\n          if (err) return done(err);\n          assert.notEqual(user1.email, user2.email);\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Requires a unique username","suites":["User","User.create"],"updatePoint":{"line":297,"column":34,"index":8627},"line":297,"code":"    it('Requires a unique username', function (done) {\n      User.create({\n        email: 'a@b.com',\n        username: 'abc',\n        password: 'foobar'\n      }, function () {\n        User.create({\n          email: 'b@b.com',\n          username: 'abc',\n          password: 'batbaz'\n        }, function (err) {\n          assert(err, 'should error because the username is not unique!');\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Requires a password to login with basic auth","suites":["User","User.create"],"updatePoint":{"line":313,"column":52,"index":9078},"line":313,"code":"    it('Requires a password to login with basic auth', function (done) {\n      User.create({\n        email: 'b@c.com'\n      }, function (err) {\n        User.login({\n          email: 'b@c.com'\n        }, function (err, accessToken) {\n          assert(!accessToken, 'should not create a accessToken without a valid password');\n          assert(err, 'should not login without a password');\n          assert.equal(err.code, 'LOGIN_FAILED');\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Hashes the given password","suites":["User","User.create"],"updatePoint":{"line":327,"column":33,"index":9544},"line":327,"code":"    it('Hashes the given password', function () {\n      const u = new User({\n        username: 'foo',\n        password: 'bar'\n      });\n      assert(u.password !== 'bar');\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"does not hash the password if it's already hashed","suites":["User","User.create"],"updatePoint":{"line":334,"column":58,"index":9749},"line":334,"code":"    it('does not hash the password if it\\'s already hashed', function () {\n      const u1 = new User({\n        username: 'foo',\n        password: 'bar'\n      });\n      assert(u1.password !== 'bar');\n      const u2 = new User({\n        username: 'foo',\n        password: u1.password\n      });\n      assert(u2.password === u1.password);\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"invalidates the user's accessToken when the user is deleted By id","suites":["User","User.create"],"updatePoint":{"line":346,"column":74,"index":10108},"line":346,"code":"    it('invalidates the user\\'s accessToken when the user is deleted By id', function (done) {\n      let usersId;\n      async.series([function (next) {\n        User.create({\n          email: 'b@c.com',\n          password: 'bar'\n        }, function (err, user) {\n          usersId = user.pk;\n          next(err);\n        });\n      }, function (next) {\n        User.login({\n          email: 'b@c.com',\n          password: 'bar'\n        }, function (err, accessToken) {\n          if (err) return next(err);\n          assert(accessToken.userId);\n          next();\n        });\n      }, function (next) {\n        User.deleteById(usersId, function (err) {\n          next(err);\n        });\n      }, function (next) {\n        User.findById(usersId, function (err, userFound) {\n          if (err) return next(err);\n          expect(userFound).to.equal(null);\n          AccessToken.find({\n            where: {\n              userId: usersId\n            }\n          }, function (err, tokens) {\n            if (err) return next(err);\n            expect(tokens.length).to.equal(0);\n            next();\n          });\n        });\n      }], function (err) {\n        if (err) return done(err);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"skips token invalidation when the relation is not configured","suites":["User","User.create"],"updatePoint":{"line":388,"column":68,"index":11311},"line":388,"code":"    it('skips token invalidation when the relation is not configured', () => {\n      const app = loopback({\n        localRegistry: true,\n        loadBuiltinModels: true\n      });\n      app.dataSource('db', {\n        connector: 'memory'\n      });\n      const PrivateUser = app.registry.createModel({\n        name: 'PrivateUser',\n        base: 'User',\n        // Speed up the password hashing algorithm for tests\n        saltWorkFactor: 4\n      });\n      app.model(PrivateUser, {\n        dataSource: 'db'\n      });\n      return PrivateUser.create({\n        email: 'private@example.com',\n        password: 'pass'\n      }).then(u => PrivateUser.deleteById(u.id)); // the test passed when the operation did not crash\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"invalidates the user's accessToken when the user is deleted all","suites":["User","User.create"],"updatePoint":{"line":410,"column":72,"index":12035},"line":410,"code":"    it('invalidates the user\\'s accessToken when the user is deleted all', function (done) {\n      let userIds = [];\n      let users;\n      async.series([function (next) {\n        User.create([{\n          name: 'myname',\n          email: 'b@c.com',\n          password: 'bar'\n        }, {\n          name: 'myname',\n          email: 'd@c.com',\n          password: 'bar'\n        }], function (err, createdUsers) {\n          users = createdUsers;\n          userIds = createdUsers.map(function (u) {\n            return u.pk;\n          });\n          next(err);\n        });\n      }, function (next) {\n        User.login({\n          email: 'b@c.com',\n          password: 'bar'\n        }, function (err, accessToken) {\n          if (err) return next(err);\n          assertGoodToken(accessToken, users[0]);\n          next();\n        });\n      }, function (next) {\n        User.login({\n          email: 'd@c.com',\n          password: 'bar'\n        }, function (err, accessToken) {\n          if (err) return next(err);\n          assertGoodToken(accessToken, users[1]);\n          next();\n        });\n      }, function (next) {\n        User.deleteAll({\n          name: 'myname'\n        }, function (err, user) {\n          next(err);\n        });\n      }, function (next) {\n        User.find({\n          where: {\n            name: 'myname'\n          }\n        }, function (err, userFound) {\n          if (err) return next(err);\n          expect(userFound.length).to.equal(0);\n          AccessToken.find({\n            where: {\n              userId: {\n                inq: userIds\n              }\n            }\n          }, function (err, tokens) {\n            if (err) return next(err);\n            expect(tokens.length).to.equal(0);\n            next();\n          });\n        });\n      }], function (err) {\n        if (err) return done(err);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Reports invalid password","suites":["User","User.create","custom password hash"],"updatePoint":{"line":500,"column":34,"index":14564},"line":500,"code":"      it('Reports invalid password', function () {\n        try {\n          const u = new User({\n            username: 'foo',\n            password: 'aa'\n          });\n          assert(false, 'Error should have been thrown');\n        } catch (e) {// Ignore\n        }\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Hashes the given password","suites":["User","User.create","custom password hash"],"updatePoint":{"line":510,"column":35,"index":14840},"line":510,"code":"      it('Hashes the given password', function () {\n        const u = new User({\n          username: 'foo',\n          password: 'bar'\n        });\n        assert(u.password === 'BAR');\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Create a user over REST should remove emailVerified property","suites":["User","User.create","custom password hash"],"updatePoint":{"line":518,"column":68,"index":15075},"line":518,"code":"    it('Create a user over REST should remove emailVerified property', function (done) {\n      request(app).post('/test-users').expect('Content-Type', /json/).expect(200).send(validCredentialsEmailVerifiedOverREST).end(function (err, res) {\n        if (err) return done(err);\n        assert(!res.body.emailVerified);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects empty passwords creation","suites":["User","Password length validation"],"updatePoint":{"line":530,"column":40,"index":15605},"line":530,"code":"    it('rejects empty passwords creation', function (done) {\n      User.create({\n        email: 'b@c.com',\n        password: ''\n      }, function (err) {\n        expect(err.code).to.equal('INVALID_PASSWORD');\n        expect(err.statusCode).to.equal(422);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects updating with empty password","suites":["User","Password length validation"],"updatePoint":{"line":540,"column":44,"index":15898},"line":540,"code":"    it('rejects updating with empty password', function (done) {\n      User.create({\n        email: 'blank@c.com',\n        password: pass72Char\n      }, function (err, userCreated) {\n        if (err) return done(err);\n        userCreated.updateAttribute('password', '', function (err, userUpdated) {\n          expect(err.code).to.equal('INVALID_PASSWORD');\n          expect(err.statusCode).to.equal(422);\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects updating with empty password using replaceAttributes","suites":["User","Password length validation"],"updatePoint":{"line":553,"column":68,"index":16375},"line":553,"code":"    it('rejects updating with empty password using replaceAttributes', function (done) {\n      User.create({\n        email: 'b@example.com',\n        password: pass72Char\n      }, function (err, userCreated) {\n        if (err) return done(err);\n        userCreated.replaceAttributes({\n          'password': ''\n        }, function (err, userUpdated) {\n          expect(err.code).to.equal('INVALID_PASSWORD');\n          expect(err.statusCode).to.equal(422);\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects updating with empty password using updateOrCreate","suites":["User","Password length validation"],"updatePoint":{"line":568,"column":65,"index":16875},"line":568,"code":"    it('rejects updating with empty password using updateOrCreate', function (done) {\n      User.create({\n        email: 'b@example.com',\n        password: pass72Char\n      }, function (err, userCreated) {\n        if (err) return done(err);\n        User.updateOrCreate({\n          id: userCreated.id,\n          'password': ''\n        }, function (err, userUpdated) {\n          expect(err.code).to.equal('INVALID_PASSWORD');\n          expect(err.statusCode).to.equal(422);\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects updating with empty password using updateAll","suites":["User","Password length validation"],"updatePoint":{"line":584,"column":60,"index":17390},"line":584,"code":"    it('rejects updating with empty password using updateAll', function (done) {\n      User.create({\n        email: 'b@example.com',\n        password: pass72Char\n      }, function (err, userCreated) {\n        if (err) return done(err);\n        User.updateAll({\n          where: {\n            id: userCreated.id\n          }\n        }, {\n          'password': ''\n        }, function (err, userUpdated) {\n          expect(err.code).to.equal('INVALID_PASSWORD');\n          expect(err.statusCode).to.equal(422);\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects passwords longer than 72 characters","suites":["User","Password length validation"],"updatePoint":{"line":603,"column":51,"index":17936},"line":603,"code":"    it('rejects passwords longer than 72 characters', function (done) {\n      User.create({\n        email: 'b@c.com',\n        password: pass73Char\n      }, function (err) {\n        expect(err.code).to.equal('PASSWORD_TOO_LONG');\n        expect(err.statusCode).to.equal(422);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects a new user with password longer than 72 characters","suites":["User","Password length validation"],"updatePoint":{"line":613,"column":66,"index":18260},"line":613,"code":"    it('rejects a new user with password longer than 72 characters', function (done) {\n      try {\n        const u = new User({\n          username: 'foo',\n          password: pass73Char\n        });\n        assert(false, 'Error should have been thrown');\n      } catch (e) {\n        expect(e).to.match(/password entered was too long/);\n        done();\n      }\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"accepts passwords that are exactly 72 characters long","suites":["User","Password length validation"],"updatePoint":{"line":625,"column":61,"index":18622},"line":625,"code":"    it('accepts passwords that are exactly 72 characters long', function (done) {\n      User.create({\n        email: 'b@c.com',\n        password: pass72Char\n      }, function (err, user) {\n        if (err) return done(err);\n        User.findById(user.pk, function (err, userFound) {\n          if (err) return done(err);\n          assert(userFound);\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"allows login with password exactly 72 characters long","suites":["User","Password length validation"],"updatePoint":{"line":638,"column":61,"index":19019},"line":638,"code":"    it('allows login with password exactly 72 characters long', function (done) {\n      User.create({\n        email: 'b@c.com',\n        password: pass72Char\n      }, function (err, user) {\n        if (err) return done(err);\n        User.login({\n          email: 'b@c.com',\n          password: pass72Char\n        }, function (err, accessToken) {\n          if (err) return done(err);\n          assertGoodToken(accessToken, user);\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects password reset when password is more than 72 chars","suites":["User","Password length validation"],"updatePoint":{"line":654,"column":66,"index":19500},"line":654,"code":"    it('rejects password reset when password is more than 72 chars', function (done) {\n      User.create({\n        email: 'b@c.com',\n        password: pass72Char\n      }, function (err) {\n        if (err) return done(err);\n        User.resetPassword({\n          email: 'b@c.com',\n          password: pass73Char\n        }, function (err) {\n          assert(err);\n          expect(err).to.match(/password entered was too long/);\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects changePassword when new password is longer than 72 chars","suites":["User","Password length validation"],"updatePoint":{"line":670,"column":72,"index":19981},"line":670,"code":"    it('rejects changePassword when new password is longer than 72 chars', function () {\n      return User.create({\n        email: 'test@example.com',\n        password: pass72Char\n      }).then(u => u.changePassword(pass72Char, pass73Char)).then(success => {\n        throw new Error('changePassword should have failed');\n      }, err => {\n        expect(err.message).to.match(/password entered was too long/); // workaround for chai problem\n        //   object tested must be an array, an object, or a string,\n        //   but error given\n\n        const props = Object.assign({}, err);\n        expect(props).to.contain({\n          code: 'PASSWORD_TOO_LONG',\n          statusCode: 422\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects setPassword when new password is longer than 72 chars","suites":["User","Password length validation"],"updatePoint":{"line":688,"column":69,"index":20692},"line":688,"code":"    it('rejects setPassword when new password is longer than 72 chars', function () {\n      return User.create({\n        email: 'test@example.com',\n        password: pass72Char\n      }).then(u => u.setPassword(pass73Char)).then(success => {\n        throw new Error('setPassword should have failed');\n      }, err => {\n        expect(err.message).to.match(/password entered was too long/); // workaround for chai problem\n        //   object tested must be an array, an object, or a string,\n        //   but error given\n\n        const props = Object.assign({}, err);\n        expect(props).to.contain({\n          code: 'PASSWORD_TOO_LONG',\n          statusCode: 422\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Should not throw an error if the query does not contain {where: }","suites":["User","Access-hook for queries with email NOT case-sensitive"],"updatePoint":{"line":708,"column":73,"index":21477},"line":708,"code":"    it('Should not throw an error if the query does not contain {where: }', function (done) {\n      User.find({}, function (err) {\n        if (err) done(err);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Should be able to find lowercase email with mixed-case email query","suites":["User","Access-hook for queries with email NOT case-sensitive"],"updatePoint":{"line":714,"column":74,"index":21671},"line":714,"code":"    it('Should be able to find lowercase email with mixed-case email query', function (done) {\n      User.settings.caseSensitiveEmail = false;\n      User.find({\n        where: {\n          email: validMixedCaseEmailCredentials.email\n        }\n      }, function (err, result) {\n        if (err) done(err);\n        assert(result[0], 'The query did not find the user');\n        assert.equal(result[0].email, validCredentialsEmail);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Should be able to use query filters (email case-sensitivity off)","suites":["User","Access-hook for queries with email NOT case-sensitive"],"updatePoint":{"line":727,"column":72,"index":22131},"line":727,"code":"    it('Should be able to use query filters (email case-sensitivity off)', function (done) {\n      User.settings.caseSensitiveEmail = false;\n      const insensitiveUser = {\n        email: 'insensitive@example.com',\n        password: 'abc'\n      };\n      User.create(insensitiveUser, function (err, user) {\n        User.find({\n          where: {\n            email: {\n              inq: [insensitiveUser.email]\n            }\n          }\n        }, function (err, result) {\n          if (err) done(err);\n          assert(result[0], 'The query did not find the user');\n          assert.equal(result[0].email, insensitiveUser.email);\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Should be able to use query filters (email case-sensitivity on)","suites":["User","Access-hook for queries with email NOT case-sensitive"],"updatePoint":{"line":748,"column":71,"index":22807},"line":748,"code":"    it('Should be able to use query filters (email case-sensitivity on)', function (done) {\n      User.settings.caseSensitiveEmail = true;\n      const sensitiveUser = {\n        email: 'senSiTive@example.com',\n        password: 'abc'\n      };\n      User.create(sensitiveUser, function (err, user) {\n        User.find({\n          where: {\n            email: {\n              inq: [sensitiveUser.email]\n            }\n          }\n        }, function (err, result) {\n          if (err) done(err);\n          assert(result[0], 'The query did not find the user');\n          assert.equal(result[0].email, sensitiveUser.email);\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login a user by providing credentials","suites":["User","User.login"],"updatePoint":{"line":771,"column":45,"index":23491},"line":771,"code":"    it('Login a user by providing credentials', function (done) {\n      User.login(validCredentials, function (err, accessToken) {\n        assertGoodToken(accessToken, validCredentialsUser);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login a user by providing email credentials (email case-sensitivity off)","suites":["User","User.login"],"updatePoint":{"line":777,"column":80,"index":23751},"line":777,"code":"    it('Login a user by providing email credentials (email case-sensitivity off)', function (done) {\n      User.settings.caseSensitiveEmail = false;\n      User.login(validMixedCaseEmailCredentials, function (err, accessToken) {\n        assertGoodToken(accessToken, validCredentialsUser);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Try to login with invalid email case","suites":["User","User.login"],"updatePoint":{"line":784,"column":44,"index":24037},"line":784,"code":"    it('Try to login with invalid email case', function (done) {\n      User.login(validMixedCaseEmailCredentials, function (err, accessToken) {\n        assert(err);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"should not allow queries in email field","suites":["User","User.login"],"updatePoint":{"line":790,"column":47,"index":24239},"line":790,"code":"    it('should not allow queries in email field', function (done) {\n      User.login({\n        email: {\n          'neq': 'x'\n        },\n        password: 'x'\n      }, function (err, accessToken) {\n        assert(err);\n        assert.equal(err.code, 'INVALID_EMAIL');\n        assert(!accessToken);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"should not allow queries in username field","suites":["User","User.login"],"updatePoint":{"line":803,"column":50,"index":24573},"line":803,"code":"    it('should not allow queries in username field', function (done) {\n      User.login({\n        username: {\n          'neq': 'x'\n        },\n        password: 'x'\n      }, function (err, accessToken) {\n        assert(err);\n        assert.equal(err.code, 'INVALID_USERNAME');\n        assert(!accessToken);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"should not allow queries in realm field","suites":["User","User.login"],"updatePoint":{"line":816,"column":47,"index":24910},"line":816,"code":"    it('should not allow queries in realm field', function (done) {\n      User.settings.realmRequired = true;\n      User.login({\n        username: 'x',\n        password: 'x',\n        realm: {\n          'neq': 'x'\n        }\n      }, function (err, accessToken) {\n        assert(err);\n        assert.equal(err.code, 'INVALID_REALM');\n        assert(!accessToken);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login a user by providing credentials with TTL","suites":["User","User.login"],"updatePoint":{"line":831,"column":54,"index":25313},"line":831,"code":"    it('Login a user by providing credentials with TTL', function (done) {\n      User.login(validCredentialsWithTTL, function (err, accessToken) {\n        assertGoodToken(accessToken, validCredentialsUser);\n        assert.equal(accessToken.ttl, validCredentialsWithTTL.ttl);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"honors default `createAccessToken` implementation","suites":["User","User.login"],"updatePoint":{"line":838,"column":57,"index":25625},"line":838,"code":"    it('honors default `createAccessToken` implementation', function (done) {\n      User.login(validCredentialsWithTTL, function (err, accessToken) {\n        assert(accessToken.userId);\n        assert(accessToken.id);\n        User.findById(accessToken.userId, function (err, user) {\n          user.createAccessToken(120, function (err, accessToken) {\n            assertGoodToken(accessToken, validCredentialsUser);\n            assert.equal(accessToken.ttl, 120);\n            done();\n          });\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"honors default `createAccessToken` implementation - promise variant","suites":["User","User.login"],"updatePoint":{"line":851,"column":75,"index":26170},"line":851,"code":"    it('honors default `createAccessToken` implementation - promise variant', function (done) {\n      User.login(validCredentialsWithTTL, function (err, accessToken) {\n        assert(accessToken.userId);\n        assert(accessToken.id);\n        User.findById(accessToken.userId, function (err, user) {\n          user.createAccessToken(120).then(function (accessToken) {\n            assertGoodToken(accessToken, validCredentialsUser);\n            assert.equal(accessToken.ttl, 120);\n            done();\n          }).catch(function (err) {\n            done(err);\n          });\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login a user using a custom createAccessToken","suites":["User","User.login"],"updatePoint":{"line":866,"column":53,"index":26752},"line":866,"code":"    it('Login a user using a custom createAccessToken', function (done) {\n      const createToken = User.prototype.createAccessToken; // Save the original method\n      // Override createAccessToken\n\n      User.prototype.createAccessToken = function (ttl, cb) {\n        // Reduce the ttl by half for testing purpose\n        this.accessTokens.create({\n          ttl: ttl / 2\n        }, cb);\n      };\n\n      User.login(validCredentialsWithTTL, function (err, accessToken) {\n        assertGoodToken(accessToken, validCredentialsUser);\n        assert.equal(accessToken.ttl, 1800);\n        User.findById(accessToken.userId, function (err, user) {\n          user.createAccessToken(120, function (err, accessToken) {\n            assertGoodToken(accessToken, validCredentialsUser);\n            assert.equal(accessToken.ttl, 60); // Restore create access token\n\n            User.prototype.createAccessToken = createToken;\n            done();\n          });\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login a user using a custom createAccessToken with options","suites":["User","User.login"],"updatePoint":{"line":891,"column":66,"index":27741},"line":891,"code":"    it('Login a user using a custom createAccessToken with options', function (done) {\n      const createToken = User.prototype.createAccessToken; // Save the original method\n      // Override createAccessToken\n\n      User.prototype.createAccessToken = function (ttl, options, cb) {\n        // Reduce the ttl by half for testing purpose\n        this.accessTokens.create({\n          ttl: ttl / 2,\n          scopes: [options.scope]\n        }, cb);\n      };\n\n      User.login(validCredentialsWithTTLAndScope, function (err, accessToken) {\n        assertGoodToken(accessToken, validCredentialsUser);\n        assert.equal(accessToken.ttl, 1800);\n        assert.deepEqual(accessToken.scopes, ['all']);\n        User.findById(accessToken.userId, function (err, user) {\n          user.createAccessToken(120, {\n            scope: 'default'\n          }, function (err, accessToken) {\n            assertGoodToken(accessToken, validCredentialsUser);\n            assert.equal(accessToken.ttl, 60);\n            assert.deepEqual(accessToken.scopes, ['default']); // Restore create access token\n\n            User.prototype.createAccessToken = createToken;\n            done();\n          });\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login should only allow correct credentials","suites":["User","User.login"],"updatePoint":{"line":921,"column":51,"index":28929},"line":921,"code":"    it('Login should only allow correct credentials', function (done) {\n      User.login(invalidCredentials, function (err, accessToken) {\n        assert(err);\n        assert.equal(err.code, 'LOGIN_FAILED');\n        assert(!accessToken);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login should only allow correct credentials - promise variant","suites":["User","User.login"],"updatePoint":{"line":929,"column":69,"index":29219},"line":929,"code":"    it('Login should only allow correct credentials - promise variant', function (done) {\n      User.login(invalidCredentials).then(function (accessToken) {\n        expect(accessToken, 'accessToken').to.not.exist();\n        done();\n      }).catch(function (err) {\n        expect(err, 'err').to.exist();\n        expect(err).to.have.property('code', 'LOGIN_FAILED');\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login a user providing incomplete credentials","suites":["User","User.login"],"updatePoint":{"line":939,"column":53,"index":29602},"line":939,"code":"    it('Login a user providing incomplete credentials', function (done) {\n      User.login(incompleteCredentials, function (err, accessToken) {\n        expect(err, 'err').to.exist();\n        expect(err).to.have.property('code', 'USERNAME_EMAIL_REQUIRED');\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login a user providing incomplete credentials - promise variant","suites":["User","User.login"],"updatePoint":{"line":946,"column":71,"index":29910},"line":946,"code":"    it('Login a user providing incomplete credentials - promise variant', function (done) {\n      User.login(incompleteCredentials).then(function (accessToken) {\n        expect(accessToken, 'accessToken').to.not.exist();\n        done();\n      }).catch(function (err) {\n        expect(err, 'err').to.exist();\n        expect(err).to.have.property('code', 'USERNAME_EMAIL_REQUIRED');\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login a user over REST by providing credentials","suites":["User","User.login"],"updatePoint":{"line":956,"column":55,"index":30309},"line":956,"code":"    it('Login a user over REST by providing credentials', function (done) {\n      request(app).post('/test-users/login').expect('Content-Type', /json/).expect(200).send(validCredentials).end(function (err, res) {\n        if (err) return done(err);\n        const accessToken = res.body;\n        assertGoodToken(accessToken, validCredentialsUser);\n        assert(accessToken.user === undefined);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login a user over REST by providing invalid credentials","suites":["User","User.login"],"updatePoint":{"line":965,"column":63,"index":30745},"line":965,"code":"    it('Login a user over REST by providing invalid credentials', function (done) {\n      request(app).post('/test-users/login').expect('Content-Type', /json/).expect(401).send(invalidCredentials).end(function (err, res) {\n        if (err) return done(err);\n        const errorResponse = res.body.error;\n        assert.equal(errorResponse.code, 'LOGIN_FAILED');\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login a user over REST by providing incomplete credentials","suites":["User","User.login"],"updatePoint":{"line":973,"column":66,"index":31144},"line":973,"code":"    it('Login a user over REST by providing incomplete credentials', function (done) {\n      request(app).post('/test-users/login').expect('Content-Type', /json/).expect(400).send(incompleteCredentials).end(function (err, res) {\n        if (err) return done(err);\n        const errorResponse = res.body.error;\n        assert.equal(errorResponse.code, 'USERNAME_EMAIL_REQUIRED');\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Login a user over REST with the wrong Content-Type","suites":["User","User.login"],"updatePoint":{"line":981,"column":58,"index":31549},"line":981,"code":"    it('Login a user over REST with the wrong Content-Type', function (done) {\n      request(app).post('/test-users/login').set('Content-Type', null).expect('Content-Type', /json/).expect(400).send(JSON.stringify(validCredentials)).end(function (err, res) {\n        if (err) return done(err);\n        const errorResponse = res.body.error;\n        assert.equal(errorResponse.code, 'USERNAME_EMAIL_REQUIRED');\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Returns current user when `include` is `USER`","suites":["User","User.login"],"updatePoint":{"line":989,"column":53,"index":31986},"line":989,"code":"    it('Returns current user when `include` is `USER`', function (done) {\n      request(app).post('/test-users/login?include=USER').send(validCredentials).expect(200).expect('Content-Type', /json/).end(function (err, res) {\n        if (err) return done(err);\n        const token = res.body;\n        expect(token.user, 'body.user').to.not.equal(undefined);\n        expect(token.user, 'body.user').to.have.property('email', validCredentials.email);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"should handle multiple `include`","suites":["User","User.login"],"updatePoint":{"line":998,"column":40,"index":32454},"line":998,"code":"    it('should handle multiple `include`', function (done) {\n      request(app).post('/test-users/login?include=USER&include=Post').send(validCredentials).expect(200).expect('Content-Type', /json/).end(function (err, res) {\n        if (err) return done(err);\n        const token = res.body;\n        expect(token.user, 'body.user').to.not.equal(undefined);\n        expect(token.user, 'body.user').to.have.property('email', validCredentials.email);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"allows login with password too long but created in old LB version","suites":["User","User.login"],"updatePoint":{"line":1007,"column":73,"index":32968},"line":1007,"code":"    it('allows login with password too long but created in old LB version', function (done) {\n      const bcrypt = require('bcryptjs');\n\n      const longPassword = new Array(80).join('a');\n      const oldHash = bcrypt.hashSync(longPassword, bcrypt.genSaltSync(1));\n      User.create({\n        email: 'b@c.com',\n        password: oldHash\n      }, function (err) {\n        if (err) return done(err);\n        User.login({\n          email: 'b@c.com',\n          password: longPassword\n        }, function (err, accessToken) {\n          if (err) return done(err);\n          assert(accessToken.id); // we are logged in, the test passed\n\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"requires valid and complete credentials for email verification","suites":["User","User.login requiring email verification"],"updatePoint":{"line":1047,"column":70,"index":34182},"line":1047,"code":"    it('requires valid and complete credentials for email verification', function (done) {\n      User.login({\n        email: validCredentialsEmail\n      }, function (err, accessToken) {\n        // strongloop/loopback#931\n        // error message should be \"login failed\"\n        // and not \"login failed as the email has not been verified\"\n        assert(err && !/verified/.test(err.message), 'expecting \"login failed\" error message, received: \"' + err.message + '\"');\n        assert.equal(err.code, 'LOGIN_FAILED'); // as login is failing because of invalid credentials it should to return\n        // the user id in the error message\n\n        assert.equal(err.details, undefined);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"requires valid and complete credentials for email verification - promise variant","suites":["User","User.login requiring email verification"],"updatePoint":{"line":1062,"column":88,"index":34916},"line":1062,"code":"    it('requires valid and complete credentials for email verification - promise variant', function (done) {\n      User.login({\n        email: validCredentialsEmail\n      }).then(function (accessToken) {\n        done();\n      }).catch(function (err) {\n        // strongloop/loopback#931\n        // error message should be \"login failed\" and not \"login failed as the email has not been verified\"\n        assert(err && !/verified/.test(err.message), 'expecting \"login failed\" error message, received: \"' + err.message + '\"');\n        assert.equal(err.code, 'LOGIN_FAILED');\n        assert.equal(err.details, undefined);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"does not login a user with unverified email but provides userId","suites":["User","User.login requiring email verification"],"updatePoint":{"line":1076,"column":71,"index":35551},"line":1076,"code":"    it('does not login a user with unverified email but provides userId', function () {\n      return User.login(validCredentials).then(function (user) {\n        throw new Error('User.login() should have failed');\n      }, function (err, accessToken) {\n        err = Object.assign({}, err);\n        expect(err).to.eql({\n          statusCode: 401,\n          code: 'LOGIN_FAILED_EMAIL_NOT_VERIFIED',\n          details: {\n            userId: validCredentialsUser.pk\n          }\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"login a user with verified email","suites":["User","User.login requiring email verification"],"updatePoint":{"line":1090,"column":40,"index":36024},"line":1090,"code":"    it('login a user with verified email', function (done) {\n      User.login(validCredentialsEmailVerified, function (err, accessToken) {\n        assertGoodToken(accessToken, validCredentialsEmailVerifiedUser);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"login a user with verified email - promise variant","suites":["User","User.login requiring email verification"],"updatePoint":{"line":1096,"column":58,"index":36288},"line":1096,"code":"    it('login a user with verified email - promise variant', function (done) {\n      User.login(validCredentialsEmailVerified).then(function (accessToken) {\n        assertGoodToken(accessToken, validCredentialsEmailVerifiedUser);\n        done();\n      }).catch(function (err) {\n        done(err);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"login a user over REST when email verification is required","suites":["User","User.login requiring email verification"],"updatePoint":{"line":1104,"column":66,"index":36611},"line":1104,"code":"    it('login a user over REST when email verification is required', function (done) {\n      request(app).post('/test-users/login').expect('Content-Type', /json/).expect(200).send(validCredentialsEmailVerified).end(function (err, res) {\n        if (err) return done(err);\n        const accessToken = res.body;\n        assertGoodToken(accessToken, validCredentialsEmailVerifiedUser);\n        assert(accessToken.user === undefined);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"login a user over REST without email verification when it is required","suites":["User","User.login requiring email verification"],"updatePoint":{"line":1127,"column":77,"index":37863},"line":1127,"code":"    it('login a user over REST without email verification when it is required', function (done) {\n      // make sure the app is configured in production mode\n      app.set('remoting', {\n        errorHandler: {\n          debug: false,\n          log: false\n        }\n      });\n      request(app).post('/test-users/login').expect('Content-Type', /json/).expect(401).send(validCredentials).end(function (err, res) {\n        if (err) return done(err);\n        const errorResponse = res.body.error; // extracting code and details error response\n\n        const errorExcerpts = {\n          code: errorResponse.code,\n          details: errorResponse.details\n        };\n        expect(errorExcerpts).to.eql({\n          code: 'LOGIN_FAILED_EMAIL_NOT_VERIFIED',\n          details: {\n            userId: validCredentialsUser.pk\n          }\n        });\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"honors unique email for realm","suites":["User","User.login requiring realm"],"updatePoint":{"line":1232,"column":37,"index":40791},"line":1232,"code":"    it('honors unique email for realm', function (done) {\n      User.create(realm1User, function (err, u) {\n        assert(err);\n        assert(err.message.match(/User already exists/) && err.message.match(/Email already exists/));\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects a user by without realm","suites":["User","User.login requiring realm"],"updatePoint":{"line":1239,"column":39,"index":41059},"line":1239,"code":"    it('rejects a user by without realm', function (done) {\n      User.login(credentialWithoutRealm, function (err, accessToken) {\n        assert(err);\n        assert.equal(err.code, 'REALM_REQUIRED');\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects a user by with bad realm","suites":["User","User.login requiring realm"],"updatePoint":{"line":1246,"column":40,"index":41296},"line":1246,"code":"    it('rejects a user by with bad realm', function (done) {\n      User.login(credentialWithBadRealm, function (err, accessToken) {\n        assert(err);\n        assert.equal(err.code, 'LOGIN_FAILED');\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects a user by with bad pass","suites":["User","User.login requiring realm"],"updatePoint":{"line":1253,"column":39,"index":41530},"line":1253,"code":"    it('rejects a user by with bad pass', function (done) {\n      User.login(credentialWithBadPass, function (err, accessToken) {\n        assert(err);\n        assert.equal(err.code, 'LOGIN_FAILED');\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"logs in a user by with realm","suites":["User","User.login requiring realm"],"updatePoint":{"line":1260,"column":36,"index":41760},"line":1260,"code":"    it('logs in a user by with realm', function (done) {\n      User.login(credentialWithRealm, function (err, accessToken) {\n        assertGoodToken(accessToken, user1);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"logs in a user by with realm in username","suites":["User","User.login requiring realm"],"updatePoint":{"line":1266,"column":48,"index":41976},"line":1266,"code":"    it('logs in a user by with realm in username', function (done) {\n      User.login(credentialRealmInUsername, function (err, accessToken) {\n        assertGoodToken(accessToken, user1);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"logs in a user by with realm in email","suites":["User","User.login requiring realm"],"updatePoint":{"line":1272,"column":45,"index":42195},"line":1272,"code":"    it('logs in a user by with realm in email', function (done) {\n      User.login(credentialRealmInEmail, function (err, accessToken) {\n        assertGoodToken(accessToken, user1);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"logs in a user by with realm","suites":["User","User.login requiring realm","User.login with realmRequired but no realmDelimiter"],"updatePoint":{"line":1285,"column":38,"index":42661},"line":1285,"code":"      it('logs in a user by with realm', function (done) {\n        User.login(credentialWithRealm, function (err, accessToken) {\n          assertGoodToken(accessToken, user1);\n          done();\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"rejects a user by with realm in email if realmDelimiter is not set","suites":["User","User.login requiring realm","User.login with realmRequired but no realmDelimiter"],"updatePoint":{"line":1291,"column":76,"index":42915},"line":1291,"code":"      it('rejects a user by with realm in email if realmDelimiter is not set', function (done) {\n        User.login(credentialRealmInEmail, function (err, accessToken) {\n          assert(err);\n          assert.equal(err.code, 'REALM_REQUIRED');\n          done();\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Logout a user by providing the current accessToken id (using node)","suites":["User","User.logout"],"updatePoint":{"line":1301,"column":74,"index":43252},"line":1301,"code":"    it('Logout a user by providing the current accessToken id (using node)', function (done) {\n      login(logout);\n\n      function login(fn) {\n        User.login(validCredentials, fn);\n      }\n\n      function logout(err, accessToken) {\n        User.logout(accessToken.id, verify(accessToken.id, done));\n      }\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Logout a user by providing the current accessToken id (using node) - promise variant","suites":["User","User.logout"],"updatePoint":{"line":1312,"column":92,"index":43590},"line":1312,"code":"    it('Logout a user by providing the current accessToken id (using node) - promise variant', function (done) {\n      login(logout);\n\n      function login(fn) {\n        User.login(validCredentials, fn);\n      }\n\n      function logout(err, accessToken) {\n        User.logout(accessToken.id).then(function () {\n          verify(accessToken.id, done);\n        }).catch(done(err));\n      }\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Logout a user by providing the current accessToken id (over rest)","suites":["User","User.logout"],"updatePoint":{"line":1325,"column":73,"index":43966},"line":1325,"code":"    it('Logout a user by providing the current accessToken id (over rest)', function (done) {\n      login(logout);\n\n      function login(fn) {\n        request(app).post('/test-users/login').expect('Content-Type', /json/).expect(200).send(validCredentials).end(function (err, res) {\n          if (err) return done(err);\n          const accessToken = res.body;\n          assertGoodToken(accessToken, validCredentialsUser);\n          fn(null, accessToken.id);\n        });\n      }\n\n      function logout(err, token) {\n        request(app).post('/test-users/logout').set('Authorization', token).expect(204).end(verify(token, done));\n      }\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"fails when accessToken is not provided","suites":["User","User.logout"],"updatePoint":{"line":1341,"column":46,"index":44583},"line":1341,"code":"    it('fails when accessToken is not provided', function (done) {\n      User.logout(undefined, function (err) {\n        expect(err).to.have.property('message');\n        expect(err).to.have.property('statusCode', 401);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"fails when accessToken is not found","suites":["User","User.logout"],"updatePoint":{"line":1348,"column":43,"index":44833},"line":1348,"code":"    it('fails when accessToken is not found', function (done) {\n      User.logout('expired-access-token', function (err) {\n        expect(err).to.have.property('message');\n        expect(err).to.have.property('statusCode', 401);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Determine if the password matches the stored password","suites":["User","user.hasPassword(plain, fn)"],"updatePoint":{"line":1368,"column":61,"index":45494},"line":1368,"code":"    it('Determine if the password matches the stored password', function (done) {\n      const u = new User({\n        username: 'foo',\n        password: 'bar'\n      });\n      u.hasPassword('bar', function (err, isMatch) {\n        assert(isMatch, 'password doesnt match');\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Determine if the password matches the stored password - promise variant","suites":["User","user.hasPassword(plain, fn)"],"updatePoint":{"line":1378,"column":79,"index":45817},"line":1378,"code":"    it('Determine if the password matches the stored password - promise variant', function (done) {\n      const u = new User({\n        username: 'foo',\n        password: 'bar'\n      });\n      u.hasPassword('bar').then(function (isMatch) {\n        assert(isMatch, 'password doesnt match');\n        done();\n      }).catch(function (err) {\n        done(err);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"should match a password when saved","suites":["User","user.hasPassword(plain, fn)"],"updatePoint":{"line":1390,"column":42,"index":46154},"line":1390,"code":"    it('should match a password when saved', function (done) {\n      const u = new User({\n        username: 'a',\n        password: 'b',\n        email: 'z@z.net'\n      });\n      u.save(function (err, user) {\n        User.findById(user.pk, function (err, uu) {\n          uu.hasPassword('b', function (err, isMatch) {\n            assert(isMatch);\n            done();\n          });\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"should match a password after it is changed","suites":["User","user.hasPassword(plain, fn)"],"updatePoint":{"line":1405,"column":51,"index":46571},"line":1405,"code":"    it('should match a password after it is changed', function (done) {\n      User.create({\n        email: 'foo@baz.net',\n        username: 'bat',\n        password: 'baz'\n      }, function (err, user) {\n        User.findById(user.pk, function (err, foundUser) {\n          assert(foundUser);\n          foundUser.hasPassword('baz', function (err, isMatch) {\n            assert(isMatch);\n            foundUser.password = 'baz2';\n            foundUser.save(function (err, updatedUser) {\n              updatedUser.hasPassword('baz2', function (err, isMatch) {\n                assert(isMatch);\n                User.findById(user.pk, function (err, uu) {\n                  uu.hasPassword('baz2', function (err, isMatch) {\n                    assert(isMatch);\n                    done();\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"changes the password - callback-style","suites":["User","User.changePassword()"],"updatePoint":{"line":1435,"column":45,"index":47588},"line":1435,"code":"    it('changes the password - callback-style', done => {\n      User.changePassword(userId, currentPassword, 'new password', err => {\n        if (err) return done(err);\n        expect(arguments.length, 'changePassword callback arguments length').to.be.at.most(1);\n        User.findById(userId, (err, user) => {\n          if (err) return done(err);\n          user.hasPassword('new password', (err, isMatch) => {\n            if (err) return done(err);\n            expect(isMatch, 'user has new password').to.be.true();\n            done();\n          });\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"changes the password - Promise-style","suites":["User","User.changePassword()"],"updatePoint":{"line":1449,"column":44,"index":48168},"line":1449,"code":"    it('changes the password - Promise-style', () => {\n      return User.changePassword(userId, currentPassword, 'new password').then(() => {\n        expect(arguments.length, 'changePassword promise resolution').to.equal(0);\n        return User.findById(userId);\n      }).then(user => {\n        return user.hasPassword('new password');\n      }).then(isMatch => {\n        expect(isMatch, 'user has new password').to.be.true();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"changes the password - instance method","suites":["User","User.changePassword()"],"updatePoint":{"line":1459,"column":46,"index":48614},"line":1459,"code":"    it('changes the password - instance method', () => {\n      return validCredentialsUser.changePassword(currentPassword, 'new password').then(() => {\n        expect(arguments.length, 'changePassword promise resolution').to.equal(0);\n        return User.findById(userId);\n      }).then(user => {\n        return user.hasPassword('new password');\n      }).then(isMatch => {\n        expect(isMatch, 'user has new password').to.be.true();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"fails when current password does not match","suites":["User","User.changePassword()"],"updatePoint":{"line":1469,"column":50,"index":49072},"line":1469,"code":"    it('fails when current password does not match', () => {\n      return User.changePassword(userId, 'bad password', 'new password').then(success => {\n        throw new Error('changePassword should have failed');\n      }, err => {\n        // workaround for chai problem\n        //   object tested must be an array, an object,\n        //   or a string, but error given\n        const props = Object.assign({}, err);\n        expect(props).to.contain({\n          code: 'INVALID_PASSWORD',\n          statusCode: 400\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"fails with 401 for unknown user id","suites":["User","User.changePassword()"],"updatePoint":{"line":1483,"column":42,"index":49606},"line":1483,"code":"    it('fails with 401 for unknown user id', () => {\n      return User.changePassword('unknown-id', 'pass', 'pass').then(success => {\n        throw new Error('changePassword should have failed');\n      }, err => {\n        // workaround for chai problem\n        //   object tested must be an array, an object, or a string,\n        //   but error given\n        const props = Object.assign({}, err);\n        expect(props).to.contain({\n          code: 'USER_NOT_FOUND',\n          statusCode: 401\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"forwards the \"options\" argument","suites":["User","User.changePassword()"],"updatePoint":{"line":1497,"column":39,"index":50125},"line":1497,"code":"    it('forwards the \"options\" argument', () => {\n      const options = {\n        testFlag: true\n      };\n      const observedOptions = [];\n      saveObservedOptionsForHook('access');\n      saveObservedOptionsForHook('before save');\n      return User.changePassword(userId, currentPassword, 'new', options).then(() => expect(observedOptions).to.eql([// findById\n      {\n        hook: 'access',\n        testFlag: true\n      }, // \"before save\" hook prepareForTokenInvalidation\n      {\n        hook: 'access',\n        setPassword: true,\n        testFlag: true\n      }, // updateAttributes\n      {\n        hook: 'before save',\n        setPassword: true,\n        testFlag: true\n      }, // validate uniqueness of User.email\n      {\n        hook: 'access',\n        setPassword: true,\n        testFlag: true\n      }]));\n\n      function saveObservedOptionsForHook(name) {\n        User.observe(name, (ctx, next) => {\n          observedOptions.push(Object.assign({\n            hook: name\n          }, ctx.options));\n          next();\n        });\n      }\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"changes the password - callback-style","suites":["User","User.setPassword()"],"updatePoint":{"line":1543,"column":45,"index":51414},"line":1543,"code":"    it('changes the password - callback-style', done => {\n      User.setPassword(userId, 'new password', err => {\n        if (err) return done(err);\n        expect(arguments.length, 'changePassword callback arguments length').to.be.at.most(1);\n        User.findById(userId, (err, user) => {\n          if (err) return done(err);\n          user.hasPassword('new password', (err, isMatch) => {\n            if (err) return done(err);\n            expect(isMatch, 'user has new password').to.be.true();\n            done();\n          });\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"changes the password - Promise-style","suites":["User","User.setPassword()"],"updatePoint":{"line":1557,"column":44,"index":51974},"line":1557,"code":"    it('changes the password - Promise-style', () => {\n      return User.setPassword(userId, 'new password').then(() => {\n        expect(arguments.length, 'changePassword promise resolution').to.equal(0);\n        return User.findById(userId);\n      }).then(user => {\n        return user.hasPassword('new password');\n      }).then(isMatch => {\n        expect(isMatch, 'user has new password').to.be.true();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"fails with 401 for unknown users","suites":["User","User.setPassword()"],"updatePoint":{"line":1567,"column":40,"index":52394},"line":1567,"code":"    it('fails with 401 for unknown users', () => {\n      return User.setPassword('unknown-id', 'pass').then(success => {\n        throw new Error('setPassword should have failed');\n      }, err => {\n        // workaround for chai problem\n        //   object tested must be an array, an object, or a string,\n        //   but error given\n        const props = Object.assign({}, err);\n        expect(props).to.contain({\n          code: 'USER_NOT_FOUND',\n          statusCode: 401\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"forwards the \"options\" argument","suites":["User","User.setPassword()"],"updatePoint":{"line":1581,"column":39,"index":52899},"line":1581,"code":"    it('forwards the \"options\" argument', () => {\n      const options = {\n        testFlag: true\n      };\n      const observedOptions = [];\n      saveObservedOptionsForHook('access');\n      saveObservedOptionsForHook('before save');\n      return User.setPassword(userId, 'new', options).then(() => expect(observedOptions).to.eql([// findById\n      {\n        hook: 'access',\n        testFlag: true\n      }, // \"before save\" hook prepareForTokenInvalidation\n      {\n        hook: 'access',\n        setPassword: true,\n        testFlag: true\n      }, // updateAttributes\n      {\n        hook: 'before save',\n        setPassword: true,\n        testFlag: true\n      }, // validate uniqueness of User.email\n      {\n        hook: 'access',\n        setPassword: true,\n        testFlag: true\n      }]));\n\n      function saveObservedOptionsForHook(name) {\n        User.observe(name, (ctx, next) => {\n          observedOptions.push(Object.assign({\n            hook: name\n          }, ctx.options));\n          next();\n        });\n      }\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"returns default verify options","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","User.getVerifyOptions()"],"updatePoint":{"line":1637,"column":42,"index":54466},"line":1637,"code":"        it('returns default verify options', function (done) {\n          const verifyOptions = User.getVerifyOptions();\n          expect(verifyOptions).to.eql({\n            type: 'email',\n            from: 'noreply@example.com'\n          });\n          done();\n        });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"handles custom verify options defined via model.settings","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","User.getVerifyOptions()"],"updatePoint":{"line":1645,"column":68,"index":54764},"line":1645,"code":"        it('handles custom verify options defined via model.settings', function (done) {\n          User.settings.verifyOptions = {\n            type: 'email',\n            from: 'test@example.com'\n          };\n          const verifyOptions = User.getVerifyOptions();\n          expect(verifyOptions).to.eql(User.settings.verifyOptions);\n          done();\n        });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"returns same verifyOptions after verify user model","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","User.getVerifyOptions()"],"updatePoint":{"line":1654,"column":62,"index":55122},"line":1654,"code":"        it('returns same verifyOptions after verify user model', () => {\n          const defaultOptions = {\n            type: 'email',\n            from: 'test@example.com'\n          };\n          const verifyOptions = Object.assign({}, defaultOptions);\n          const user = new User({\n            email: 'example@example.com',\n            password: 'pass',\n            verificationToken: 'example-token'\n          });\n          return user.verify(verifyOptions).then(res => expect(verifyOptions).to.eql(defaultOptions));\n        });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"getVerifyOptions() always returns the same","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","User.getVerifyOptions()"],"updatePoint":{"line":1667,"column":54,"index":55648},"line":1667,"code":"        it('getVerifyOptions() always returns the same', () => {\n          const defaultOptions = {\n            type: 'email',\n            from: 'test@example.com'\n          };\n          User.settings.verifyOptions = Object.assign({}, defaultOptions);\n          const verifyOptions = User.getVerifyOptions();\n          verifyOptions.from = 'newTest@example.com';\n          verifyOptions.test = 'test';\n          expect(User.getVerifyOptions()).to.eql(defaultOptions);\n        });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"can be extended by user","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","User.getVerifyOptions()"],"updatePoint":{"line":1678,"column":35,"index":56109},"line":1678,"code":"        it('can be extended by user', function (done) {\n          User.getVerifyOptions = function () {\n            const base = User.base.getVerifyOptions();\n            return Object.assign({}, base, {\n              redirect: '/redirect'\n            });\n          };\n\n          const verifyOptions = User.getVerifyOptions();\n          expect(verifyOptions).to.eql({\n            type: 'email',\n            from: 'noreply@example.com',\n            redirect: '/redirect'\n          });\n          done();\n        });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"verifies a user's email address","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","User.getVerifyOptions()"],"updatePoint":{"line":1695,"column":42,"index":56640},"line":1695,"code":"      it('verifies a user\\'s email address', function (done) {\n        User.afterRemote('create', function (ctx, user, next) {\n          assert(user, 'afterRemote should include result');\n          user.verify(verifyOptions, function (err, result) {\n            assert(result.email);\n            assert(result.email.response);\n            assert(result.token);\n            const msg = result.email.response.toString('utf-8');\n            assert(~msg.indexOf('/api/test-users/confirm'));\n            assert(~msg.indexOf('To: bar@bat.com'));\n            done();\n          });\n        });\n        request(app).post('/test-users').expect('Content-Type', /json/).expect(200).send({\n          email: 'bar@bat.com',\n          password: 'bar'\n        }).end(function (err, res) {\n          if (err) return done(err);\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"verifies a user's email address - promise variant","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","User.getVerifyOptions()"],"updatePoint":{"line":1715,"column":60,"index":57489},"line":1715,"code":"      it('verifies a user\\'s email address - promise variant', function (done) {\n        User.afterRemote('create', function (ctx, user, next) {\n          assert(user, 'afterRemote should include result');\n          user.verify(verifyOptions).then(function (result) {\n            assert(result.email);\n            assert(result.email.response);\n            assert(result.token);\n            const msg = result.email.response.toString('utf-8');\n            assert(~msg.indexOf('/api/test-users/confirm'));\n            assert(~msg.indexOf('To: bar@bat.com'));\n            done();\n          }).catch(function (err) {\n            done(err);\n          });\n        });\n        request(app).post('/test-users').send({\n          email: 'bar@bat.com',\n          password: 'bar'\n        }).expect('Content-Type', /json/).expect(200).end(function (err, res) {\n          if (err) return done(err);\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"verifies a user's email address with custom header","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","User.getVerifyOptions()"],"updatePoint":{"line":1737,"column":61,"index":58398},"line":1737,"code":"      it('verifies a user\\'s email address with custom header', function (done) {\n        User.afterRemote('create', function (ctx, user, next) {\n          assert(user, 'afterRemote should include result');\n          verifyOptions.headers = {\n            'message-id': 'custom-header-value'\n          };\n          user.verify(verifyOptions, function (err, result) {\n            assert(result.email);\n            assert.equal(result.email.messageId, 'custom-header-value');\n            done();\n          });\n        });\n        request(app).post('/test-users').expect('Content-Type', /json/).expect(200).send({\n          email: 'bar@bat.com',\n          password: 'bar'\n        }).end(function (err, res) {\n          if (err) return done(err);\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"verifies a user's email address with custom template function","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","User.getVerifyOptions()"],"updatePoint":{"line":1756,"column":72,"index":59173},"line":1756,"code":"      it('verifies a user\\'s email address with custom template function', function (done) {\n        User.afterRemote('create', function (ctx, user, next) {\n          assert(user, 'afterRemote should include result');\n\n          verifyOptions.templateFn = function (verifyOptions, cb) {\n            cb(null, 'custom template  - verify url: ' + verifyOptions.verifyHref);\n          };\n\n          user.verify(verifyOptions, function (err, result) {\n            assert(result.email);\n            assert(result.email.response);\n            assert(result.token);\n            const msg = result.email.response.toString('utf-8');\n            assert(~msg.indexOf('/api/test-users/confirm'));\n            assert(~msg.indexOf('custom template'));\n            assert(~msg.indexOf('To: bar@bat.com'));\n            done();\n          });\n        });\n        request(app).post('/test-users').expect('Content-Type', /json/).expect(200).send({\n          email: 'bar@bat.com',\n          password: 'bar'\n        }).end(function (err, res) {\n          if (err) return done(err);\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"converts uid value to string","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","User.getVerifyOptions()"],"updatePoint":{"line":1782,"column":38,"index":60220},"line":1782,"code":"      it('converts uid value to string', function (done) {\n        const idString = '58be263abc88dd483956030a';\n        let actualVerifyHref;\n        User.afterRemote('create', function (ctx, user, next) {\n          assert(user, 'afterRemote should include result');\n\n          verifyOptions.templateFn = function (verifyOptions, cb) {\n            actualVerifyHref = verifyOptions.verifyHref;\n            cb(null, 'dummy body');\n          }; // replace the string id with an object\n          // TODO: find a better way to do this\n\n\n          Object.defineProperty(user, 'pk', {\n            get: function () {\n              return this.__data.pk;\n            },\n            set: function (value) {\n              this.__data.pk = value;\n            }\n          });\n          user.pk = {\n            toString: function () {\n              return idString;\n            }\n          };\n          user.verify(verifyOptions, function (err, result) {\n            expect(result.uid).to.exist().and.be.an('object');\n            expect(result.uid.toString()).to.equal(idString);\n            const parsed = url.parse(actualVerifyHref, true);\n            expect(parsed.query.uid, 'uid query field').to.eql(idString);\n            done();\n          });\n        });\n        request(app).post('/test-users').expect('Content-Type', /json/).expect(200).send({\n          email: 'bar@bat.com',\n          password: 'bar',\n          pk: idString\n        }).end(function (err, res) {\n          if (err) return done(err);\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"verifies a user's email address with custom token generator","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","User.getVerifyOptions()"],"updatePoint":{"line":1824,"column":70,"index":61769},"line":1824,"code":"      it('verifies a user\\'s email address with custom token generator', function (done) {\n        User.afterRemote('create', function (ctx, user, next) {\n          assert(user, 'afterRemote should include result');\n\n          verifyOptions.generateVerificationToken = function (user, cb) {\n            assert(user);\n            assert.equal(user.email, 'bar@bat.com');\n            assert(cb);\n            assert.equal(typeof cb, 'function'); // let's ensure async execution works on this one\n\n            process.nextTick(function () {\n              cb(null, 'token-123456');\n            });\n          };\n\n          user.verify(verifyOptions, function (err, result) {\n            assert(result.email);\n            assert(result.email.response);\n            assert(result.token);\n            assert.equal(result.token, 'token-123456');\n            const msg = result.email.response.toString('utf-8');\n            assert(~msg.indexOf('token-123456'));\n            done();\n          });\n        });\n        request(app).post('/test-users').expect('Content-Type', /json/).expect(200).send({\n          email: 'bar@bat.com',\n          password: 'bar'\n        }).end(function (err, res) {\n          if (err) return done(err);\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"fails if custom token generator returns error","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","User.getVerifyOptions()"],"updatePoint":{"line":1856,"column":55,"index":62996},"line":1856,"code":"      it('fails if custom token generator returns error', function (done) {\n        User.afterRemote('create', function (ctx, user, next) {\n          assert(user, 'afterRemote should include result');\n\n          verifyOptions.generateVerificationToken = function (user, cb) {\n            // let's ensure async execution works on this one\n            process.nextTick(function () {\n              cb(new Error('Fake error'));\n            });\n          };\n\n          user.verify(verifyOptions, function (err, result) {\n            assert(err);\n            assert.equal(err.message, 'Fake error');\n            assert.equal(result, undefined);\n            done();\n          });\n        });\n        request(app).post('/test-users').expect('Content-Type', /json/).expect(200).send({\n          email: 'bar@bat.com',\n          password: 'bar'\n        }).end(function (err, res) {\n          if (err) return done(err);\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"does not squash non-80 ports for HTTP links","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":1882,"column":55,"index":63991},"line":1882,"code":"        it('does not squash non-80 ports for HTTP links', function (done) {\n          User.afterRemote('create', function (ctx, user, next) {\n            assert(user, 'afterRemote should include result');\n            Object.assign(verifyOptions, {\n              host: 'myapp.org',\n              port: 3000\n            });\n            user.verify(verifyOptions, function (err, result) {\n              const msg = result.email.response.toString('utf-8');\n              assert(~msg.indexOf('http://myapp.org:3000/'));\n              done();\n            });\n          });\n          request(app).post('/test-users').expect('Content-Type', /json/).expect(200).send({\n            email: 'bar@bat.com',\n            password: 'bar'\n          }).end(function (err, res) {\n            if (err) return done(err);\n          });\n        });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"squashes port 80 for HTTP links","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":1902,"column":43,"index":64805},"line":1902,"code":"        it('squashes port 80 for HTTP links', function (done) {\n          User.afterRemote('create', function (ctx, user, next) {\n            assert(user, 'afterRemote should include result');\n            Object.assign(verifyOptions, {\n              host: 'myapp.org',\n              port: 80\n            });\n            user.verify(verifyOptions, function (err, result) {\n              const msg = result.email.response.toString('utf-8');\n              assert(~msg.indexOf('http://myapp.org/'));\n              done();\n            });\n          });\n          request(app).post('/test-users').expect('Content-Type', /json/).expect(200).send({\n            email: 'bar@bat.com',\n            password: 'bar'\n          }).end(function (err, res) {\n            if (err) return done(err);\n          });\n        });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"does not squash non-443 ports for HTTPS links","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":1922,"column":57,"index":65626},"line":1922,"code":"        it('does not squash non-443 ports for HTTPS links', function (done) {\n          User.afterRemote('create', function (ctx, user, next) {\n            assert(user, 'afterRemote should include result');\n            Object.assign(verifyOptions, {\n              host: 'myapp.org',\n              port: 3000,\n              protocol: 'https'\n            });\n            user.verify(verifyOptions, function (err, result) {\n              const msg = result.email.response.toString('utf-8');\n              assert(~msg.indexOf('https://myapp.org:3000/'));\n              done();\n            });\n          });\n          request(app).post('/test-users').expect('Content-Type', /json/).expect(200).send({\n            email: 'bar@bat.com',\n            password: 'bar'\n          }).end(function (err, res) {\n            if (err) return done(err);\n          });\n        });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"squashes port 443 for HTTPS links","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":1943,"column":45,"index":66476},"line":1943,"code":"        it('squashes port 443 for HTTPS links', function (done) {\n          User.afterRemote('create', function (ctx, user, next) {\n            assert(user, 'afterRemote should include result');\n            Object.assign(verifyOptions, {\n              host: 'myapp.org',\n              protocol: 'https',\n              port: 443\n            });\n            user.verify(verifyOptions, function (err, result) {\n              const msg = result.email.response.toString('utf-8');\n              assert(~msg.indexOf('https://myapp.org/'));\n              done();\n            });\n          });\n          request(app).post('/test-users').expect('Content-Type', /json/).expect(200).send({\n            email: 'bar@bat.com',\n            password: 'bar'\n          }).end(function (err, res) {\n            if (err) return done(err);\n          });\n        });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"hides verification tokens from user JSON","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":1965,"column":50,"index":67335},"line":1965,"code":"      it('hides verification tokens from user JSON', function (done) {\n        const user = new User({\n          email: 'bar@bat.com',\n          password: 'bar',\n          verificationToken: 'a-token'\n        });\n        const data = user.toJSON();\n        assert(!('verificationToken' in data));\n        done();\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"squashes \"//\" when restApiRoot is \"/\"","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":1975,"column":47,"index":67655},"line":1975,"code":"      it('squashes \"//\" when restApiRoot is \"/\"', function (done) {\n        let emailBody;\n        User.afterRemote('create', function (ctx, user, next) {\n          assert(user, 'afterRemote should include result');\n          Object.assign(verifyOptions, {\n            host: 'myapp.org',\n            port: 3000,\n            restApiRoot: '/'\n          });\n          user.verify(verifyOptions, function (err, result) {\n            if (err) return next(err);\n            emailBody = result.email.response.toString('utf-8');\n            next();\n          });\n        });\n        request(app).post('/test-users').expect('Content-Type', /json/).expect(200).send({\n          email: 'user@example.com',\n          password: 'pass'\n        }).end(function (err, res) {\n          if (err) return done(err);\n          expect(emailBody).to.contain('http://myapp.org:3000/test-users/confirm');\n          done();\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"removes \"verifyOptions.template\" from Email payload","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":1999,"column":61,"index":68589},"line":1999,"code":"      it('removes \"verifyOptions.template\" from Email payload', function () {\n        const MailerMock = {\n          send: function (verifyOptions, cb) {\n            cb(null, verifyOptions);\n          }\n        };\n        verifyOptions.mailer = MailerMock;\n        return user.verify(verifyOptions).then(function (result) {\n          expect(result.email).to.not.have.property('template');\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"allows hash fragment in redirectUrl","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":2010,"column":45,"index":68984},"line":2010,"code":"      it('allows hash fragment in redirectUrl', function () {\n        let actualVerifyHref;\n        Object.assign(verifyOptions, {\n          redirect: '#/some-path?a=1&b=2',\n          templateFn: (verifyOptions, cb) => {\n            actualVerifyHref = verifyOptions.verifyHref;\n            cb(null, 'dummy body');\n          }\n        });\n        return user.verify(verifyOptions).then(() => actualVerifyHref).then(verifyHref => {\n          const parsed = url.parse(verifyHref, true);\n          expect(parsed.query.redirect, 'redirect query').to.equal('#/some-path?a=1&b=2');\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"verifies that verifyOptions.templateFn receives verifyOptions.verificationToken","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":2024,"column":89,"index":69625},"line":2024,"code":"      it('verifies that verifyOptions.templateFn receives verifyOptions.verificationToken', function () {\n        let actualVerificationToken;\n        Object.assign(verifyOptions, {\n          redirect: '#/some-path?a=1&b=2',\n          templateFn: (verifyOptions, cb) => {\n            actualVerificationToken = verifyOptions.verificationToken;\n            cb(null, 'dummy body');\n          }\n        });\n        return user.verify(verifyOptions).then(() => actualVerificationToken).then(token => {\n          expect(token).to.exist();\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"forwards the \"options\" argument to a custom templateFn function","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":2052,"column":73,"index":70815},"line":2052,"code":"      it('forwards the \"options\" argument to a custom templateFn function', function () {\n        let templateFnOptions; // custom templateFn function accepting the options argument\n\n        verifyOptions.templateFn = (verifyOptions, options, cb) => {\n          templateFnOptions = options;\n          cb(null, 'dummy body');\n        };\n\n        return user.verify(verifyOptions, ctxOptions).then(() => {\n          // not checking equality since other properties are added by user.save()\n          expect(templateFnOptions).to.contain({\n            testFlag: true\n          });\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"forwards the \"options\" argment to a custom token generator function","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":2067,"column":77,"index":71418},"line":2067,"code":"      it('forwards the \"options\" argment to a custom token generator function', function () {\n        let generateTokenOptions; // custom generateVerificationToken function accepting the options argument\n\n        verifyOptions.generateVerificationToken = (user, options, cb) => {\n          generateTokenOptions = options;\n          cb(null, 'dummy token');\n        };\n\n        return user.verify(verifyOptions, ctxOptions).then(() => {\n          // not checking equality since other properties are added by user.save()\n          expect(generateTokenOptions).to.contain({\n            testFlag: true\n          });\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"forwards the \"options\" argument to a custom mailer function","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":2082,"column":69,"index":72044},"line":2082,"code":"      it('forwards the \"options\" argument to a custom mailer function', function () {\n        let mailerOptions; // custom mailer function accepting the options argument\n\n        const mailer = function () {};\n\n        mailer.send = function (verifyOptions, options, cb) {\n          mailerOptions = options;\n          cb(null, 'dummy result');\n        };\n\n        verifyOptions.mailer = mailer;\n        return user.verify(verifyOptions, ctxOptions).then(() => {\n          // not checking equality since other properties are added by user.save()\n          expect(mailerOptions).to.contain({\n            testFlag: true\n          });\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"handles the case when remote method \"confirm\" is disabled","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":2100,"column":67,"index":72695},"line":2100,"code":"      it('handles the case when remote method \"confirm\" is disabled', () => {\n        let actualVerifyHref;\n        const VERIFY_HREF = 'http://example.com/a-verify-url';\n        Object.assign(verifyOptions, {\n          verifyHref: VERIFY_HREF,\n          templateFn: (options, cb) => {\n            actualVerifyHref = options.verifyHref;\n            cb(null, 'dummy body');\n          }\n        });\n        User.disableRemoteMethodByName('confirm');\n        return user.verify(verifyOptions).then(() => {\n          expect(actualVerifyHref.substring(0, VERIFY_HREF.length + 1)).to.equal(`${VERIFY_HREF}?`);\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"is called over REST method /User/:id/verify","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":2123,"column":53,"index":73471},"line":2123,"code":"      it('is called over REST method /User/:id/verify', function () {\n        return User.create({\n          email: 'bar@bat.com',\n          password: 'bar'\n        }).then(user => {\n          return request(app).post('/test-users/' + user.pk + '/verify').expect('Content-Type', /json/) // we already tested before that User.verify(id) works correctly\n          // having the remote method returning 204 is enough to make sure\n          // User.verify() was called successfully\n          .expect(204);\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"fails over REST method /User/:id/verify with invalid user id","suites":["User","Identity verification","user.verify(verifyOptions, options, cb)","Verification link port-squashing"],"updatePoint":{"line":2134,"column":70,"index":74012},"line":2134,"code":"      it('fails over REST method /User/:id/verify with invalid user id', function () {\n        return request(app).post('/test-users/' + 'invalid-id' + '/verify').expect('Content-Type', /json/).expect(404);\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Confirm a user verification","suites":["User","Identity verification","User.confirm(options, fn)"],"updatePoint":{"line":2165,"column":37,"index":75120},"line":2165,"code":"      it('Confirm a user verification', function (done) {\n        testConfirm(function (result, done) {\n          request(app).get('/test-users/confirm?uid=' + result.uid + '&token=' + encodeURIComponent(result.token) + '&redirect=' + encodeURIComponent(verifyOptions.redirect)).expect(302).end(function (err, res) {\n            if (err) return done(err);\n            done();\n          });\n        }, done);\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"sets verificationToken to null after confirmation","suites":["User","Identity verification","User.confirm(options, fn)"],"updatePoint":{"line":2173,"column":59,"index":75560},"line":2173,"code":"      it('sets verificationToken to null after confirmation', function (done) {\n        testConfirm(function (result, done) {\n          User.confirm(result.uid, result.token, false, function (err) {\n            if (err) return done(err); // Verify by loading user data stored in the datasource\n\n            User.findById(result.uid, function (err, user) {\n              if (err) return done(err);\n              expect(user).to.have.property('verificationToken', null);\n              done();\n            });\n          });\n        }, done);\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Should report 302 when redirect url is set","suites":["User","Identity verification","User.confirm(options, fn)"],"updatePoint":{"line":2186,"column":52,"index":76102},"line":2186,"code":"      it('Should report 302 when redirect url is set', function (done) {\n        testConfirm(function (result, done) {\n          request(app).get('/test-users/confirm?uid=' + result.uid + '&token=' + encodeURIComponent(result.token) + '&redirect=http://foo.com/bar').expect(302).expect('Location', 'http://foo.com/bar').end(done);\n        }, done);\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Should report 204 when redirect url is not set","suites":["User","Identity verification","User.confirm(options, fn)"],"updatePoint":{"line":2191,"column":56,"index":76465},"line":2191,"code":"      it('Should report 204 when redirect url is not set', function (done) {\n        testConfirm(function (result, done) {\n          request(app).get('/test-users/confirm?uid=' + result.uid + '&token=' + encodeURIComponent(result.token)).expect(204).end(done);\n        }, done);\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Report error for invalid user id during verification","suites":["User","Identity verification","User.confirm(options, fn)"],"updatePoint":{"line":2196,"column":62,"index":76760},"line":2196,"code":"      it('Report error for invalid user id during verification', function (done) {\n        testConfirm(function (result, done) {\n          request(app).get('/test-users/confirm?uid=' + (result.uid + '_invalid') + '&token=' + encodeURIComponent(result.token) + '&redirect=' + encodeURIComponent(verifyOptions.redirect)).expect(404).end(function (err, res) {\n            if (err) return done(err);\n            const errorResponse = res.body.error;\n            assert(errorResponse);\n            assert.equal(errorResponse.code, 'USER_NOT_FOUND');\n            done();\n          });\n        }, done);\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Report error for invalid token during verification","suites":["User","Identity verification","User.confirm(options, fn)"],"updatePoint":{"line":2207,"column":60,"index":77365},"line":2207,"code":"      it('Report error for invalid token during verification', function (done) {\n        testConfirm(function (result, done) {\n          request(app).get('/test-users/confirm?uid=' + result.uid + '&token=' + encodeURIComponent(result.token) + '_invalid' + '&redirect=' + encodeURIComponent(verifyOptions.redirect)).expect(400).end(function (err, res) {\n            if (err) return done(err);\n            const errorResponse = res.body.error;\n            assert(errorResponse);\n            assert.equal(errorResponse.code, 'INVALID_TOKEN');\n            done();\n          });\n        }, done);\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Requires email address to reset password","suites":["User","Password Reset","User.resetPassword(options, cb)"],"updatePoint":{"line":2226,"column":50,"index":78192},"line":2226,"code":"      it('Requires email address to reset password', function (done) {\n        User.resetPassword({}, function (err) {\n          assert(err);\n          assert.equal(err.code, 'EMAIL_REQUIRED');\n          done();\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Requires email address to reset password - promise variant","suites":["User","Password Reset","User.resetPassword(options, cb)"],"updatePoint":{"line":2233,"column":68,"index":78444},"line":2233,"code":"      it('Requires email address to reset password - promise variant', function (done) {\n        User.resetPassword({}).then(function () {\n          throw new Error('Error should NOT be thrown');\n        }).catch(function (err) {\n          assert(err);\n          assert.equal(err.code, 'EMAIL_REQUIRED');\n          done();\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Reports when email is not found","suites":["User","Password Reset","User.resetPassword(options, cb)"],"updatePoint":{"line":2242,"column":41,"index":78762},"line":2242,"code":"      it('Reports when email is not found', function (done) {\n        User.resetPassword({\n          email: 'unknown@email.com'\n        }, function (err) {\n          assert(err);\n          assert.equal(err.code, 'EMAIL_NOT_FOUND');\n          assert.equal(err.statusCode, 404);\n          done();\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Checks that options exist","suites":["User","Password Reset","User.resetPassword(options, cb)"],"updatePoint":{"line":2252,"column":35,"index":79073},"line":2252,"code":"      it('Checks that options exist', function (done) {\n        let calledBack = false;\n        User.resetPassword(options, function () {\n          calledBack = true;\n        });\n        User.once('resetPasswordRequest', function (info) {\n          assert(info.options);\n          assert.equal(info.options, options);\n          assert(calledBack);\n          done();\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Creates a temp accessToken to allow a user to change password","suites":["User","Password Reset","User.resetPassword(options, cb)"],"updatePoint":{"line":2264,"column":71,"index":79497},"line":2264,"code":"      it('Creates a temp accessToken to allow a user to change password', function (done) {\n        let calledBack = false;\n        User.resetPassword({\n          email: options.email\n        }, function () {\n          calledBack = true;\n        });\n        User.once('resetPasswordRequest', function (info) {\n          assert(info.email);\n          assert(info.accessToken);\n          assert(info.accessToken.id);\n          assert.equal(info.accessToken.ttl / 60, 15);\n          assert(calledBack);\n          info.accessToken.user(function (err, user) {\n            if (err) return done(err);\n            assert.equal(user.email, options.email);\n            done();\n          });\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"calls createAccessToken() to create the token","suites":["User","Password Reset","User.resetPassword(options, cb)"],"updatePoint":{"line":2284,"column":55,"index":80184},"line":2284,"code":"      it('calls createAccessToken() to create the token', function (done) {\n        User.prototype.createAccessToken = function (ttl, cb) {\n          cb(null, new AccessToken({\n            id: 'custom-token'\n          }));\n        };\n\n        User.resetPassword({\n          email: options.email\n        }, function () {});\n        User.once('resetPasswordRequest', function (info) {\n          expect(info.accessToken.id).to.equal('custom-token');\n          done();\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Password reset over REST rejected without email address","suites":["User","Password Reset","User.resetPassword(options, cb)"],"updatePoint":{"line":2299,"column":65,"index":80681},"line":2299,"code":"      it('Password reset over REST rejected without email address', function (done) {\n        request(app).post('/test-users/reset').expect('Content-Type', /json/).expect(400).send({}).end(function (err, res) {\n          if (err) return done(err);\n          const errorResponse = res.body.error;\n          assert(errorResponse);\n          assert.equal(errorResponse.code, 'EMAIL_REQUIRED');\n          done();\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Password reset over REST requires email address","suites":["User","Password Reset","User.resetPassword(options, cb)"],"updatePoint":{"line":2308,"column":57,"index":81104},"line":2308,"code":"      it('Password reset over REST requires email address', function (done) {\n        request(app).post('/test-users/reset').expect('Content-Type', /json/).expect(204).send({\n          email: options.email\n        }).end(function (err, res) {\n          if (err) return done(err);\n          assert.deepEqual(res.body, '');\n          done();\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"creates token that allows patching User with new password","suites":["User","Password Reset","User.resetPassword(options, cb)"],"updatePoint":{"line":2317,"column":67,"index":81476},"line":2317,"code":"      it('creates token that allows patching User with new password', () => {\n        return triggerPasswordReset(options.email).then(info => {\n          // Make a REST request to change the password\n          return request(app).patch(`/test-users/${info.user.id}`).set('Authorization', info.accessToken.id).send({\n            password: 'new-pass'\n          }).expect(200);\n        }).then(() => {\n          // Call login to verify the password was changed\n          const credentials = {\n            email: options.email,\n            password: 'new-pass'\n          };\n          return User.login(credentials);\n        });\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"creates token that allows calling other endpoints too","suites":["User","Password Reset","User.resetPassword(options, cb)"],"updatePoint":{"line":2332,"column":63,"index":82106},"line":2332,"code":"      it('creates token that allows calling other endpoints too', () => {\n        // Setup a test method that can be executed by $owner only\n        User.prototype.testMethod = function (cb) {\n          cb(null, 'ok');\n        };\n\n        User.remoteMethod('prototype.testMethod', {\n          returns: {\n            arg: 'status',\n            type: 'string'\n          },\n          http: {\n            verb: 'get',\n            path: '/test'\n          }\n        });\n        User.settings.acls.push({\n          principalType: 'ROLE',\n          principalId: '$owner',\n          permission: 'ALLOW',\n          property: 'testMethod'\n        });\n        return triggerPasswordReset(options.email).then(info => request(app).get(`/test-users/${info.user.id}/test`).set('Authorization', info.accessToken.id).expect(200));\n      });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Reports when email is not found in realm","suites":["User","Password Reset","User.resetPassword(options, cb)","User.resetPassword(options, cb) requiring realm"],"updatePoint":{"line":2365,"column":52,"index":83239},"line":2365,"code":"        it('Reports when email is not found in realm', function (done) {\n          User.resetPassword({\n            email: realmUser.email,\n            realm: 'unknown'\n          }, function (err) {\n            assert(err);\n            assert.equal(err.code, 'EMAIL_NOT_FOUND');\n            assert.equal(err.statusCode, 404);\n            done();\n          });\n        });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"Creates a temp accessToken to allow user in realm to change password","suites":["User","Password Reset","User.resetPassword(options, cb)","User.resetPassword(options, cb) requiring realm"],"updatePoint":{"line":2376,"column":80,"index":83639},"line":2376,"code":"        it('Creates a temp accessToken to allow user in realm to change password', function (done) {\n          let calledBack = false;\n          User.resetPassword({\n            email: realmUser.email,\n            realm: realmUser.realm\n          }, function () {\n            calledBack = true;\n          });\n          User.once('resetPasswordRequest', function (info) {\n            assert(info.email);\n            assert(info.accessToken);\n            assert(info.accessToken.id);\n            assert.equal(info.accessToken.ttl / 60, 15);\n            assert(calledBack);\n            info.accessToken.user(function (err, user) {\n              if (err) return done(err);\n              assert.equal(user.email, realmUser.email);\n              done();\n            });\n          });\n        });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"invalidates sessions when email is changed using `updateAttributes`","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2437,"column":75,"index":85779},"line":2437,"code":"    it('invalidates sessions when email is changed using `updateAttributes`', function (done) {\n      user.updateAttributes({\n        email: updatedEmailCredentials.email\n      }, function (err, userInstance) {\n        if (err) return done(err);\n        assertNoAccessTokens(done);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"invalidates sessions after `replaceAttributes`","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2445,"column":54,"index":86058},"line":2445,"code":"    it('invalidates sessions after `replaceAttributes`', function (done) {\n      // The way how the invalidation is implemented now, all sessions\n      // are invalidated on a full replace\n      user.replaceAttributes(currentEmailCredentials, function (err, userInstance) {\n        if (err) return done(err);\n        assertNoAccessTokens(done);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"invalidates sessions when email is changed using `updateOrCreate`","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2453,"column":73,"index":86440},"line":2453,"code":"    it('invalidates sessions when email is changed using `updateOrCreate`', function (done) {\n      User.updateOrCreate({\n        pk: user.pk,\n        email: updatedEmailCredentials.email\n      }, function (err, userInstance) {\n        if (err) return done(err);\n        assertNoAccessTokens(done);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"invalidates sessions after `replaceById`","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2462,"column":48,"index":86732},"line":2462,"code":"    it('invalidates sessions after `replaceById`', function (done) {\n      // The way how the invalidation is implemented now, all sessions\n      // are invalidated on a full replace\n      User.replaceById(user.pk, currentEmailCredentials, function (err, userInstance) {\n        if (err) return done(err);\n        assertNoAccessTokens(done);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"invalidates sessions after `replaceOrCreate`","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2470,"column":52,"index":87096},"line":2470,"code":"    it('invalidates sessions after `replaceOrCreate`', function (done) {\n      // The way how the invalidation is implemented now, all sessions\n      // are invalidated on a full replace\n      User.replaceOrCreate({\n        pk: user.pk,\n        email: currentEmailCredentials.email,\n        password: currentEmailCredentials.password\n      }, function (err, userInstance) {\n        if (err) return done(err);\n        assertNoAccessTokens(done);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"keeps sessions AS IS if firstName is added using `updateAttributes`","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2482,"column":75,"index":87582},"line":2482,"code":"    it('keeps sessions AS IS if firstName is added using `updateAttributes`', function (done) {\n      user.updateAttributes({\n        'firstName': 'Janny'\n      }, function (err, userInstance) {\n        if (err) return done(err);\n        assertPreservedTokens(done);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"keeps sessions AS IS when calling save() with no changes","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2490,"column":64,"index":87856},"line":2490,"code":"    it('keeps sessions AS IS when calling save() with no changes', function (done) {\n      user.save(function (err) {\n        if (err) return done(err);\n        assertPreservedTokens(done);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"keeps sessions AS IS if firstName is added using `updateOrCreate`","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2496,"column":73,"index":88073},"line":2496,"code":"    it('keeps sessions AS IS if firstName is added using `updateOrCreate`', function (done) {\n      User.updateOrCreate({\n        pk: user.pk,\n        firstName: 'Loay',\n        email: currentEmailCredentials.email\n      }, function (err, userInstance) {\n        if (err) return done(err);\n        assertPreservedTokens(done);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"keeps sessions AS IS if a new user is created using `create`","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2506,"column":68,"index":88413},"line":2506,"code":"    it('keeps sessions AS IS if a new user is created using `create`', function (done) {\n      async.series([function (next) {\n        User.create(newUserCred, function (err, newUserInstance) {\n          if (err) return done(err);\n          newUserCreated = newUserInstance;\n          next();\n        });\n      }, function (next) {\n        User.login(newUserCred, function (err, newAccessToken) {\n          if (err) return done(err);\n          assert(newAccessToken.id);\n          assertPreservedTokens(next);\n        });\n      }], done);\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"keeps sessions AS IS if a new user is created using `updateOrCreate`","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2521,"column":76,"index":88968},"line":2521,"code":"    it('keeps sessions AS IS if a new user is created using `updateOrCreate`', function (done) {\n      async.series([function (next) {\n        User.create(newUserCred, function (err, newUserInstance2) {\n          if (err) return done(err);\n          newUserCreated = newUserInstance2;\n          next();\n        });\n      }, function (next) {\n        User.login(newUserCred, function (err, newAccessToken2) {\n          if (err) return done(err);\n          assert(newAccessToken2.id);\n          assertPreservedTokens(next);\n        });\n      }], done);\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"keeps sessions AS IS if non-email property is changed using updateAll","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2536,"column":77,"index":89528},"line":2536,"code":"    it('keeps sessions AS IS if non-email property is changed using updateAll', function (done) {\n      let userPartial;\n      async.series([function createPartialUser(next) {\n        User.create({\n          email: 'partial@example.com',\n          password: 'pass1',\n          age: 25\n        }, function (err, partialInstance) {\n          if (err) return next(err);\n          userPartial = partialInstance;\n          next();\n        });\n      }, function loginPartiallUser(next) {\n        User.login({\n          email: 'partial@example.com',\n          password: 'pass1'\n        }, function (err, ats) {\n          if (err) return next(err);\n          next();\n        });\n      }, function updatePartialUser(next) {\n        User.updateAll({\n          pk: userPartial.pk\n        }, {\n          age: userPartial.age + 1\n        }, function (err, info) {\n          if (err) return next(err);\n          next();\n        });\n      }, function verifyTokensOfPartialUser(next) {\n        AccessToken.find({\n          where: {\n            userId: userPartial.pk\n          }\n        }, function (err, tokens1) {\n          if (err) return next(err);\n          expect(tokens1.length).to.equal(1);\n          next();\n        });\n      }], done);\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"keeps sessions sessions when preserveAccessTokens is passed in options","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2577,"column":78,"index":90767},"line":2577,"code":"    it('keeps sessions sessions when preserveAccessTokens is passed in options', function (done) {\n      user.updateAttributes({\n        email: 'invalidateAccessTokens@example.com'\n      }, {\n        preserveAccessTokens: true\n      }, function (err, userInstance) {\n        if (err) return done(err);\n        assertPreservedTokens(done);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"preserves other users' sessions if their email is  untouched","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2587,"column":69,"index":91115},"line":2587,"code":"    it('preserves other users\\' sessions if their email is  untouched', function (done) {\n      let user1, user2, user3;\n      async.series([function (next) {\n        User.create({\n          email: 'user1@example.com',\n          password: 'u1pass'\n        }, function (err, u1) {\n          if (err) return done(err);\n          User.create({\n            email: 'user2@example.com',\n            password: 'u2pass'\n          }, function (err, u2) {\n            if (err) return done(err);\n            User.create({\n              email: 'user3@example.com',\n              password: 'u3pass'\n            }, function (err, u3) {\n              if (err) return done(err);\n              user1 = u1;\n              user2 = u2;\n              user3 = u3;\n              next();\n            });\n          });\n        });\n      }, function (next) {\n        User.login({\n          email: 'user1@example.com',\n          password: 'u1pass'\n        }, function (err, accessToken1) {\n          if (err) return next(err);\n          User.login({\n            email: 'user2@example.com',\n            password: 'u2pass'\n          }, function (err, accessToken2) {\n            if (err) return next(err);\n            User.login({\n              email: 'user3@example.com',\n              password: 'u3pass'\n            }, function (err, accessToken3) {\n              if (err) return next(err);\n              next();\n            });\n          });\n        });\n      }, function (next) {\n        user2.updateAttribute('email', 'user2Update@b.com', function (err, userInstance) {\n          if (err) return next(err);\n          assert.equal(userInstance.email, 'user2Update@b.com');\n          next();\n        });\n      }, function (next) {\n        AccessToken.find({\n          where: {\n            userId: user1.pk\n          }\n        }, function (err, tokens1) {\n          if (err) return next(err);\n          AccessToken.find({\n            where: {\n              userId: user2.pk\n            }\n          }, function (err, tokens2) {\n            if (err) return next(err);\n            AccessToken.find({\n              where: {\n                userId: user3.pk\n              }\n            }, function (err, tokens3) {\n              if (err) return next(err);\n              expect(tokens1.length).to.equal(1);\n              expect(tokens2.length).to.equal(0);\n              expect(tokens3.length).to.equal(1);\n              next();\n            });\n          });\n        });\n      }], done);\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"invalidates correct sessions after changing email using updateAll","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2666,"column":73,"index":93581},"line":2666,"code":"    it('invalidates correct sessions after changing email using updateAll', function (done) {\n      let userSpecial, userNormal;\n      async.series([function createSpecialUser(next) {\n        User.create({\n          email: 'special@example.com',\n          password: 'pass1',\n          name: 'Special'\n        }, function (err, specialInstance) {\n          if (err) return next(err);\n          userSpecial = specialInstance;\n          next();\n        });\n      }, function loginSpecialUser(next) {\n        User.login({\n          email: 'special@example.com',\n          password: 'pass1'\n        }, function (err, ats) {\n          if (err) return next(err);\n          next();\n        });\n      }, function updateSpecialUser(next) {\n        User.updateAll({\n          name: 'Special'\n        }, {\n          email: 'superspecial@example.com'\n        }, function (err, info) {\n          if (err) return next(err);\n          next();\n        });\n      }, function verifyTokensOfSpecialUser(next) {\n        AccessToken.find({\n          where: {\n            userId: userSpecial.pk\n          }\n        }, function (err, tokens1) {\n          if (err) return done(err);\n          expect(tokens1.length, 'tokens - special user tokens').to.equal(0);\n          next();\n        });\n      }, assertPreservedTokens], done);\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"invalidates session when password is reset","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2707,"column":50,"index":94872},"line":2707,"code":"    it('invalidates session when password is reset', function (done) {\n      user.updateAttribute('password', 'newPass', function (err, user2) {\n        if (err) return done(err);\n        assertNoAccessTokens(done);\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"preserves current session","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2713,"column":33,"index":95089},"line":2713,"code":"    it('preserves current session', function (done) {\n      const options = {\n        accessToken: originalUserToken1\n      };\n      user.updateAttribute('email', 'new@example.com', options, function (err) {\n        if (err) return done(err);\n        AccessToken.find({\n          where: {\n            userId: user.pk\n          }\n        }, function (err, tokens) {\n          if (err) return done(err);\n          const tokenIds = tokens.map(function (t) {\n            return t.id;\n          });\n          expect(tokenIds).to.eql([originalUserToken1.id]);\n          done();\n        });\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"forwards the \"options\" argument","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2733,"column":39,"index":95697},"line":2733,"code":"    it('forwards the \"options\" argument', function (done) {\n      const options = {\n        testFlag: true\n      };\n      const observedOptions = [];\n      saveObservedOptionsForHook('access', User);\n      saveObservedOptionsForHook('before delete', AccessToken);\n      user.updateAttribute('password', 'newPass', options, function (err, updated) {\n        if (err) return done(err);\n        expect(observedOptions).to.eql([// prepareForTokenInvalidation - load current instance data\n        {\n          hook: 'access',\n          testFlag: true\n        }, // validate uniqueness of User.email\n        {\n          hook: 'access',\n          testFlag: true\n        }, // _invalidateAccessTokensOfUsers - deleteAll\n        {\n          hook: 'before delete',\n          testFlag: true\n        }]);\n        done();\n      });\n\n      function saveObservedOptionsForHook(name, model) {\n        model.observe(name, function (ctx, next) {\n          observedOptions.push(extend({\n            hook: name\n          }, ctx.options));\n          next();\n        });\n      }\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"preserves other user sessions if their password is  untouched","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2767,"column":69,"index":96791},"line":2767,"code":"    it('preserves other user sessions if their password is  untouched', function (done) {\n      let user1, user2, user1Token;\n      async.series([function (next) {\n        User.create({\n          email: 'user1@example.com',\n          password: 'u1pass'\n        }, function (err, u1) {\n          if (err) return done(err);\n          User.create({\n            email: 'user2@example.com',\n            password: 'u2pass'\n          }, function (err, u2) {\n            if (err) return done(err);\n            user1 = u1;\n            user2 = u2;\n            next();\n          });\n        });\n      }, function (next) {\n        User.login({\n          email: 'user1@example.com',\n          password: 'u1pass'\n        }, function (err, at1) {\n          User.login({\n            email: 'user2@example.com',\n            password: 'u2pass'\n          }, function (err, at2) {\n            assert(at1.userId);\n            assert(at2.userId);\n            user1Token = at1.id;\n            next();\n          });\n        });\n      }, function (next) {\n        user2.updateAttribute('password', 'newPass', function (err, user2Instance) {\n          if (err) return next(err);\n          assert(user2Instance);\n          next();\n        });\n      }, function (next) {\n        AccessToken.find({\n          where: {\n            userId: user1.pk\n          }\n        }, function (err, tokens1) {\n          if (err) return next(err);\n          AccessToken.find({\n            where: {\n              userId: user2.pk\n            }\n          }, function (err, tokens2) {\n            if (err) return next(err);\n            expect(tokens1.length).to.equal(1);\n            expect(tokens2.length).to.equal(0);\n            assert.equal(tokens1[0].id, user1Token);\n            next();\n          });\n        });\n      }], function (err) {\n        done();\n      });\n    }); // See https://github.com/strongloop/loopback/issues/3215","file":"user.test.js","skipped":false,"dir":"test"},{"name":"handles subclassed user with no accessToken relation","suites":["User","AccessToken (session) invalidation"],"updatePoint":{"line":2830,"column":60,"index":98674},"line":2830,"code":"    it('handles subclassed user with no accessToken relation', () => {\n      // setup a new LoopBack app, we don't want to use shared models\n      app = loopback({\n        localRegistry: true,\n        loadBuiltinModels: true\n      });\n      app.set('_verifyAuthModelRelations', false);\n      app.set('remoting', {\n        errorHandler: {\n          debug: true,\n          log: false\n        }\n      });\n      app.dataSource('db', {\n        connector: 'memory'\n      });\n      const User = app.registry.createModel({\n        name: 'user',\n        base: 'User'\n      });\n      app.model(User, {\n        dataSource: 'db'\n      });\n      app.enableAuth({\n        dataSource: 'db'\n      });\n      expect(app.models.User.modelName).to.eql('user');\n      return User.create(validCredentials).then(u => {\n        u.email = 'updated@example.com';\n        return u.save(); // the test passes when save() does not throw any error\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"sets verification to false after email update if verification is required","suites":["User","Verification after updating email"],"updatePoint":{"line":2897,"column":81,"index":100554},"line":2897,"code":"    it('sets verification to false after email update if verification is required', function (done) {\n      User.settings.emailVerificationRequired = true;\n      async.series([function updateUser(next) {\n        userInstance.updateAttribute('email', NEW_EMAIL, function (err, info) {\n          if (err) return next(err);\n          assert.equal(info.email, NEW_EMAIL);\n          next();\n        });\n      }, function findUser(next) {\n        User.findById(userInstance.pk, function (err, info) {\n          if (err) return next(err);\n          assert.equal(info.email, NEW_EMAIL);\n          assert.equal(info.emailVerified, false);\n          next();\n        });\n      }], done);\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"leaves verification as is after email update if verification is not required","suites":["User","Verification after updating email"],"updatePoint":{"line":2914,"column":84,"index":101242},"line":2914,"code":"    it('leaves verification as is after email update if verification is not required', function (done) {\n      User.settings.emailVerificationRequired = false;\n      async.series([function updateUser(next) {\n        userInstance.updateAttribute('email', NEW_EMAIL, function (err, info) {\n          if (err) return next(err);\n          assert.equal(info.email, NEW_EMAIL);\n          next();\n        });\n      }, function findUser(next) {\n        User.findById(userInstance.pk, function (err, info) {\n          if (err) return next(err);\n          assert.equal(info.email, NEW_EMAIL);\n          assert.equal(info.emailVerified, true);\n          next();\n        });\n      }], done);\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"should not set verification to false after something other than email is updated","suites":["User","Verification after updating email"],"updatePoint":{"line":2931,"column":88,"index":101934},"line":2931,"code":"    it('should not set verification to false after something other than email is updated', function (done) {\n      User.settings.emailVerificationRequired = true;\n      async.series([function updateUser(next) {\n        userInstance.updateAttribute('realm', 'test', function (err, info) {\n          if (err) return next(err);\n          assert.equal(info.realm, 'test');\n          next();\n        });\n      }, function findUser(next) {\n        User.findById(userInstance.pk, function (err, info) {\n          if (err) return next(err);\n          assert.equal(info.realm, 'test');\n          assert.equal(info.emailVerified, true);\n          next();\n        });\n      }], done);\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"allows resetPassword by email if email verification is required and done","suites":["User","password reset with/without email verification"],"updatePoint":{"line":2963,"column":80,"index":103011},"line":2963,"code":"    it('allows resetPassword by email if email verification is required and done', function (done) {\n      User.settings.emailVerificationRequired = true;\n      const email = validCredentialsEmailVerified.email;\n      User.resetPassword({\n        email: email\n      }, function (err, info) {\n        if (err) return done(err);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"disallows resetPassword by email if email verification is required and not done","suites":["User","password reset with/without email verification"],"updatePoint":{"line":2973,"column":87,"index":103379},"line":2973,"code":"    it('disallows resetPassword by email if email verification is required and not done', function (done) {\n      User.settings.emailVerificationRequired = true;\n      const email = validCredentialsEmail;\n      User.resetPassword({\n        email: email\n      }, function (err) {\n        assert(err);\n        assert.equal(err.code, 'RESET_FAILED_EMAIL_NOT_VERIFIED');\n        assert.equal(err.statusCode, 401);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"allows resetPassword by email if email verification is not required","suites":["User","password reset with/without email verification"],"updatePoint":{"line":2985,"column":75,"index":103811},"line":2985,"code":"    it('allows resetPassword by email if email verification is not required', function (done) {\n      User.settings.emailVerificationRequired = false;\n      const email = validCredentialsEmail;\n      User.resetPassword({\n        email: email\n      }, function (err) {\n        if (err) return done(err);\n        done();\n      });\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"exports default Email model","suites":["User","ctor"],"updatePoint":{"line":2997,"column":35,"index":104147},"line":2997,"code":"    it('exports default Email model', function () {\n      expect(User.email, 'User.email').to.be.a('function');\n      expect(User.email.modelName, 'modelName').to.eql('Email');\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"exports default AccessToken model","suites":["User","ctor"],"updatePoint":{"line":3001,"column":41,"index":104338},"line":3001,"code":"    it('exports default AccessToken model', function () {\n      expect(User.accessToken, 'User.accessToken').to.be.a('function');\n      expect(User.accessToken.modelName, 'modelName').to.eql('AccessToken');\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"should override ttl setting in based User model","suites":["User","ttl"],"updatePoint":{"line":3013,"column":55,"index":104733},"line":3013,"code":"    it('should override ttl setting in based User model', function () {\n      expect(User2.settings.ttl).to.equal(10);\n    });","file":"user.test.js","skipped":false,"dir":"test"},{"name":"calls process function for each chunk","suites":["Utils","uploadInChunks"],"updatePoint":{"line":13,"column":45,"index":404},"line":13,"code":"    it('calls process function for each chunk', function (done) {\n      const largeArray = ['item1', 'item2', 'item3'];\n      const calls = [];\n      utils.uploadInChunks(largeArray, 1, function processFunction(array, cb) {\n        calls.push(array);\n        cb();\n      }, function finished(err) {\n        if (err) return done(err);\n        assert.deepEqual(calls, [['item1'], ['item2'], ['item3']]);\n        done();\n      });\n    });","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"calls process function only once when array is smaller than chunk size","suites":["Utils","uploadInChunks"],"updatePoint":{"line":25,"column":78,"index":873},"line":25,"code":"    it('calls process function only once when array is smaller than chunk size', function (done) {\n      const largeArray = ['item1', 'item2'];\n      const calls = [];\n      utils.uploadInChunks(largeArray, 3, function processFunction(array, cb) {\n        calls.push(array);\n        cb();\n      }, function finished(err) {\n        if (err) return done(err);\n        assert.deepEqual(calls, [['item1', 'item2']]);\n        done();\n      });\n    });","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"concats results from each call to the process function","suites":["Utils","uploadInChunks"],"updatePoint":{"line":37,"column":62,"index":1304},"line":37,"code":"    it('concats results from each call to the process function', function (done) {\n      const largeArray = ['item1', 'item2', 'item3', 'item4'];\n      utils.uploadInChunks(largeArray, 2, function processFunction(array, cb) {\n        cb(null, array);\n      }, function finished(err, results) {\n        if (err) return done(err);\n        assert.deepEqual(results, ['item1', 'item2', 'item3', 'item4']);\n        done();\n      });\n    });","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"calls process function with the correct filter","suites":["Utils","downloadInChunks"],"updatePoint":{"line":71,"column":54,"index":2285},"line":71,"code":"    it('calls process function with the correct filter', function (done) {\n      const expectedFilters = [{\n        skip: 0,\n        limit: chunkSize\n      }, {\n        skip: chunkSize,\n        limit: chunkSize\n      }];\n      utils.downloadInChunks({}, chunkSize, processFunction, function finished(err) {\n        if (err) return done(err);\n        assert.deepEqual(calls, expectedFilters);\n        done();\n      });\n    });","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"concats the results of all calls of the process function","suites":["Utils","downloadInChunks"],"updatePoint":{"line":85,"column":64,"index":2721},"line":85,"code":"    it('concats the results of all calls of the process function', function (done) {\n      utils.downloadInChunks({}, chunkSize, processFunction, function finished(err, results) {\n        if (err) return done(err);\n        assert.deepEqual(results, largeArray);\n        done();\n      });\n    });","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"concats regular arrays","suites":["Utils","concatResults"],"updatePoint":{"line":94,"column":30,"index":3031},"line":94,"code":"    it('concats regular arrays', function () {\n      const array1 = ['item1', 'item2'];\n      const array2 = ['item3', 'item4'];\n      const concatResults = utils.concatResults(array1, array2);\n      assert.deepEqual(concatResults, ['item1', 'item2', 'item3', 'item4']);\n    });","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"concats objects containing arrays","suites":["Utils","concatResults"],"updatePoint":{"line":100,"column":41,"index":3321},"line":100,"code":"    it('concats objects containing arrays', function () {\n      const object1 = {\n        deltas: [{\n          change: 'change 1'\n        }],\n        conflict: []\n      };\n      const object2 = {\n        deltas: [{\n          change: 'change 2'\n        }],\n        conflict: [{\n          conflict: 'conflict 1'\n        }]\n      };\n      const expectedResults = {\n        deltas: [{\n          change: 'change 1'\n        }, {\n          change: 'change 2'\n        }],\n        conflict: [{\n          conflict: 'conflict 1'\n        }]\n      };\n      const concatResults = utils.concatResults(object1, object2);\n      assert.deepEqual(concatResults, expectedResults);\n    });","file":"utils.test.js","skipped":false,"dir":"test"}]}