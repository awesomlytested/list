{"repo":"reactjs/react-transition-group","url":"https://github.com/reactjs/react-transition-group","branch":"master","configs":[{"package":"react-transition-group","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should support getChildMapping","suites":["ChildMapping"],"updatePoint":{"line":8,"column":36,"index":213},"line":8,"code":"  it('should support getChildMapping', () => {\n    let oneone = /*#__PURE__*/React.createElement(\"div\", {\n      key: \"oneone\"\n    });\n    let onetwo = /*#__PURE__*/React.createElement(\"div\", {\n      key: \"onetwo\"\n    });\n    let one = /*#__PURE__*/React.createElement(\"div\", {\n      key: \"one\"\n    }, oneone, onetwo);\n    let two = /*#__PURE__*/React.createElement(\"div\", {\n      key: \"two\"\n    }, \"foo\");\n    let component = /*#__PURE__*/React.createElement(\"div\", null, one, two);\n    let mapping = ChildMapping.getChildMapping(component.props.children);\n    expect(mapping['.$one'].props).toEqual(one.props);\n    expect(mapping['.$two'].props).toEqual(two.props);\n  });","file":"ChildMapping-test.js","skipped":false,"dir":"test"},{"name":"should support mergeChildMappings for adding keys","suites":["ChildMapping"],"updatePoint":{"line":26,"column":55,"index":905},"line":26,"code":"  it('should support mergeChildMappings for adding keys', () => {\n    let prev = {\n      one: true,\n      two: true\n    };\n    let next = {\n      one: true,\n      two: true,\n      three: true\n    };\n    expect(ChildMapping.mergeChildMappings(prev, next)).toEqual({\n      one: true,\n      two: true,\n      three: true\n    });\n  });","file":"ChildMapping-test.js","skipped":false,"dir":"test"},{"name":"should support mergeChildMappings for removing keys","suites":["ChildMapping"],"updatePoint":{"line":42,"column":57,"index":1238},"line":42,"code":"  it('should support mergeChildMappings for removing keys', () => {\n    let prev = {\n      one: true,\n      two: true,\n      three: true\n    };\n    let next = {\n      one: true,\n      two: true\n    };\n    expect(ChildMapping.mergeChildMappings(prev, next)).toEqual({\n      one: true,\n      two: true,\n      three: true\n    });\n  });","file":"ChildMapping-test.js","skipped":false,"dir":"test"},{"name":"should support mergeChildMappings for adding and removing","suites":["ChildMapping"],"updatePoint":{"line":58,"column":63,"index":1577},"line":58,"code":"  it('should support mergeChildMappings for adding and removing', () => {\n    let prev = {\n      one: true,\n      two: true,\n      three: true\n    };\n    let next = {\n      one: true,\n      two: true,\n      four: true\n    };\n    expect(ChildMapping.mergeChildMappings(prev, next)).toEqual({\n      one: true,\n      two: true,\n      three: true,\n      four: true\n    });\n  });","file":"ChildMapping-test.js","skipped":false,"dir":"test"},{"name":"should reconcile overlapping insertions and deletions","suites":["ChildMapping"],"updatePoint":{"line":76,"column":59,"index":1948},"line":76,"code":"  it('should reconcile overlapping insertions and deletions', () => {\n    let prev = {\n      one: true,\n      two: true,\n      four: true,\n      five: true\n    };\n    let next = {\n      one: true,\n      two: true,\n      three: true,\n      five: true\n    };\n    expect(ChildMapping.mergeChildMappings(prev, next)).toEqual({\n      one: true,\n      two: true,\n      three: true,\n      four: true,\n      five: true\n    });\n  });","file":"ChildMapping-test.js","skipped":false,"dir":"test"},{"name":"should support mergeChildMappings with undefined input","suites":["ChildMapping"],"updatePoint":{"line":97,"column":60,"index":2374},"line":97,"code":"  it('should support mergeChildMappings with undefined input', () => {\n    let prev = {\n      one: true,\n      two: true\n    };\n    let next;\n    expect(ChildMapping.mergeChildMappings(prev, next)).toEqual({\n      one: true,\n      two: true\n    });\n    prev = undefined;\n    next = {\n      three: true,\n      four: true\n    };\n    expect(ChildMapping.mergeChildMappings(prev, next)).toEqual({\n      three: true,\n      four: true\n    });\n  });","file":"ChildMapping-test.js","skipped":false,"dir":"test"},{"name":"should flush new props to the DOM before initiating a transition","suites":["CSSTransition"],"updatePoint":{"line":8,"column":70,"index":589},"line":8,"code":"  it('should flush new props to the DOM before initiating a transition', done => {\n    const nodeRef = /*#__PURE__*/React.createRef();\n    const {\n      setProps\n    } = render( /*#__PURE__*/React.createElement(CSSTransition, {\n      in: false,\n      nodeRef: nodeRef,\n      timeout: 0,\n      classNames: \"test\",\n      onEnter: () => {\n        expect(nodeRef.current.classList.contains('test-class')).toEqual(true);\n        expect(nodeRef.current.classList.contains('test-entering')).toEqual(false);\n        done();\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: nodeRef\n    })));\n    expect(nodeRef.current.classList.contains('test-class')).toEqual(false);\n    setProps({\n      in: true,\n      className: 'test-class'\n    });\n  });","file":"CSSTransition-test.js","skipped":false,"dir":"test"},{"name":"should apply classes at each transition state","suites":["CSSTransition","entering"],"updatePoint":{"line":32,"column":53,"index":1357},"line":32,"code":"    it('should apply classes at each transition state', done => {\n      let count = 0;\n      const nodeRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(CSSTransition, {\n        nodeRef: nodeRef,\n        timeout: 10,\n        classNames: \"test\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      })));\n      setProps({\n        in: true,\n\n        onEnter() {\n          count++;\n          expect(nodeRef.current.className).toEqual('test-enter');\n        },\n\n        onEntering() {\n          count++;\n          expect(nodeRef.current.className).toEqual('test-enter test-enter-active');\n        },\n\n        onEntered() {\n          expect(nodeRef.current.className).toEqual('test-enter-done');\n          expect(count).toEqual(2);\n          done();\n        }\n\n      });\n    });","file":"CSSTransition-test.js","skipped":false,"dir":"test"},{"name":"should apply custom classNames names","suites":["CSSTransition","entering"],"updatePoint":{"line":65,"column":44,"index":2216},"line":65,"code":"    it('should apply custom classNames names', done => {\n      let count = 0;\n      const nodeRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(CSSTransition, {\n        timeout: 10,\n        nodeRef: nodeRef,\n        classNames: {\n          enter: 'custom',\n          enterActive: 'custom-super-active',\n          enterDone: 'custom-super-done'\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      })));\n      setProps({\n        in: true,\n\n        onEnter() {\n          count++;\n          expect(nodeRef.current.className).toEqual('custom');\n        },\n\n        onEntering() {\n          count++;\n          expect(nodeRef.current.className).toEqual('custom custom-super-active');\n        },\n\n        onEntered() {\n          expect(nodeRef.current.className).toEqual('custom-super-done');\n          expect(count).toEqual(2);\n          done();\n        }\n\n      });\n    });","file":"CSSTransition-test.js","skipped":false,"dir":"test"},{"name":"should apply appear classes at each transition state","suites":["CSSTransition","appearing"],"updatePoint":{"line":104,"column":60,"index":3244},"line":104,"code":"    it('should apply appear classes at each transition state', done => {\n      let count = 0;\n      const nodeRef = /*#__PURE__*/React.createRef();\n      render( /*#__PURE__*/React.createElement(CSSTransition, {\n        timeout: 10,\n        nodeRef: nodeRef,\n        classNames: \"appear-test\",\n        in: true,\n        appear: true,\n        onEnter: isAppearing => {\n          count++;\n          expect(isAppearing).toEqual(true);\n          expect(nodeRef.current.className).toEqual('appear-test-appear');\n        },\n        onEntering: isAppearing => {\n          count++;\n          expect(isAppearing).toEqual(true);\n          expect(nodeRef.current.className).toEqual('appear-test-appear appear-test-appear-active');\n        },\n        onEntered: isAppearing => {\n          expect(isAppearing).toEqual(true);\n          expect(nodeRef.current.className).toEqual('appear-test-appear-done appear-test-enter-done');\n          expect(count).toEqual(2);\n          done();\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      })));\n    });","file":"CSSTransition-test.js","skipped":false,"dir":"test"},{"name":"should lose the \"*-appear-done\" class after leaving and entering again","suites":["CSSTransition","appearing"],"updatePoint":{"line":133,"column":78,"index":4333},"line":133,"code":"    it('should lose the \"*-appear-done\" class after leaving and entering again', done => {\n      const nodeRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(CSSTransition, {\n        timeout: 10,\n        nodeRef: nodeRef,\n        classNames: \"appear-test\",\n        in: true,\n        appear: true,\n        onEntered: () => {\n          setProps({\n            in: false,\n            onEntered: () => {},\n            onExited: () => {\n              expect(nodeRef.current.className).toBe('appear-test-exit-done');\n              setProps({\n                in: true,\n                onEntered: () => {\n                  expect(nodeRef.current.className).toBe('appear-test-enter-done');\n                  done();\n                }\n              });\n            }\n          });\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      })));\n    });","file":"CSSTransition-test.js","skipped":false,"dir":"test"},{"name":"should not add undefined when appearDone is not defined","suites":["CSSTransition","appearing"],"updatePoint":{"line":163,"column":63,"index":5259},"line":163,"code":"    it('should not add undefined when appearDone is not defined', done => {\n      const nodeRef = /*#__PURE__*/React.createRef();\n      render( /*#__PURE__*/React.createElement(CSSTransition, {\n        timeout: 10,\n        nodeRef: nodeRef,\n        classNames: {\n          appear: 'appear-test'\n        },\n        in: true,\n        appear: true,\n        onEnter: isAppearing => {\n          expect(isAppearing).toEqual(true);\n          expect(nodeRef.current.className).toEqual('appear-test');\n        },\n        onEntered: isAppearing => {\n          expect(isAppearing).toEqual(true);\n          expect(nodeRef.current.className).toEqual('');\n          done();\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      })));\n    });","file":"CSSTransition-test.js","skipped":false,"dir":"test"},{"name":"should not be appearing in normal enter mode","suites":["CSSTransition","appearing"],"updatePoint":{"line":186,"column":52,"index":6010},"line":186,"code":"    it('should not be appearing in normal enter mode', done => {\n      let count = 0;\n      const nodeRef = /*#__PURE__*/React.createRef();\n      render( /*#__PURE__*/React.createElement(CSSTransition, {\n        timeout: 10,\n        nodeRef: nodeRef,\n        classNames: \"not-appear-test\",\n        appear: true\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      }))).setProps({\n        in: true,\n\n        onEnter(isAppearing) {\n          count++;\n          expect(isAppearing).toEqual(false);\n          expect(nodeRef.current.className).toEqual('not-appear-test-enter');\n        },\n\n        onEntering(isAppearing) {\n          count++;\n          expect(isAppearing).toEqual(false);\n          expect(nodeRef.current.className).toEqual('not-appear-test-enter not-appear-test-enter-active');\n        },\n\n        onEntered(isAppearing) {\n          expect(isAppearing).toEqual(false);\n          expect(nodeRef.current.className).toEqual('not-appear-test-enter-done');\n          expect(count).toEqual(2);\n          done();\n        }\n\n      });\n    });","file":"CSSTransition-test.js","skipped":false,"dir":"test"},{"name":"should not enter the transition states when appear=false","suites":["CSSTransition","appearing"],"updatePoint":{"line":220,"column":64,"index":7095},"line":220,"code":"    it('should not enter the transition states when appear=false', () => {\n      const nodeRef = /*#__PURE__*/React.createRef();\n      render( /*#__PURE__*/React.createElement(CSSTransition, {\n        timeout: 10,\n        nodeRef: nodeRef,\n        classNames: \"appear-fail-test\",\n        in: true,\n        appear: false,\n        onEnter: () => {\n          throw Error('Enter called!');\n        },\n        onEntering: () => {\n          throw Error('Entring called!');\n        },\n        onEntered: () => {\n          throw Error('Entred called!');\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      })));\n    });","file":"CSSTransition-test.js","skipped":false,"dir":"test"},{"name":"should apply classes at each transition state","suites":["CSSTransition","exiting"],"updatePoint":{"line":243,"column":53,"index":7768},"line":243,"code":"    it('should apply classes at each transition state', done => {\n      let count = 0;\n      const nodeRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(CSSTransition, {\n        in: true,\n        nodeRef: nodeRef,\n        timeout: 10,\n        classNames: \"test\"\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      })));\n      setProps({\n        in: false,\n\n        onExit() {\n          count++;\n          expect(nodeRef.current.className).toEqual('test-exit');\n        },\n\n        onExiting() {\n          count++;\n          expect(nodeRef.current.className).toEqual('test-exit test-exit-active');\n        },\n\n        onExited() {\n          expect(nodeRef.current.className).toEqual('test-exit-done');\n          expect(count).toEqual(2);\n          done();\n        }\n\n      });\n    });","file":"CSSTransition-test.js","skipped":false,"dir":"test"},{"name":"should apply custom classNames names","suites":["CSSTransition","exiting"],"updatePoint":{"line":277,"column":44,"index":8639},"line":277,"code":"    it('should apply custom classNames names', done => {\n      let count = 0;\n      const nodeRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(CSSTransition, {\n        in: true,\n        nodeRef: nodeRef,\n        timeout: 10,\n        classNames: {\n          exit: 'custom',\n          exitActive: 'custom-super-active',\n          exitDone: 'custom-super-done'\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      })));\n      setProps({\n        in: false,\n\n        onExit() {\n          count++;\n          expect(nodeRef.current.className).toEqual('custom');\n        },\n\n        onExiting() {\n          count++;\n          expect(nodeRef.current.className).toEqual('custom custom-super-active');\n        },\n\n        onExited() {\n          expect(nodeRef.current.className).toEqual('custom-super-done');\n          expect(count).toEqual(2);\n          done();\n        }\n\n      });\n    });","file":"CSSTransition-test.js","skipped":false,"dir":"test"},{"name":"should support empty prefix","suites":["CSSTransition","exiting"],"updatePoint":{"line":315,"column":35,"index":9617},"line":315,"code":"    it('should support empty prefix', done => {\n      let count = 0;\n      const nodeRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(CSSTransition, {\n        in: true,\n        nodeRef: nodeRef,\n        timeout: 10\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      })));\n      setProps({\n        in: false,\n\n        onExit() {\n          count++;\n          expect(nodeRef.current.className).toEqual('exit');\n        },\n\n        onExiting() {\n          count++;\n          expect(nodeRef.current.className).toEqual('exit exit-active');\n        },\n\n        onExited() {\n          expect(nodeRef.current.className).toEqual('exit-done');\n          expect(count).toEqual(2);\n          done();\n        }\n\n      });\n    });","file":"CSSTransition-test.js","skipped":false,"dir":"test"},{"name":"should remove dynamically applied classes","suites":["CSSTransition","reentering"],"updatePoint":{"line":350,"column":49,"index":10484},"line":350,"code":"    it('should remove dynamically applied classes', async () => {\n      let count = 0;\n\n      class Test extends React.Component {\n        render() {\n          const {\n            direction,\n            text,\n            nodeRef,\n            ...props\n          } = this.props;\n          return /*#__PURE__*/React.createElement(TransitionGroup, {\n            component: null,\n            childFactory: child => /*#__PURE__*/React.cloneElement(child, {\n              classNames: direction\n            })\n          }, /*#__PURE__*/React.createElement(CSSTransition, _extends({\n            key: text,\n            timeout: 100,\n            nodeRef: nodeRef\n          }, props), /*#__PURE__*/React.createElement(\"span\", {\n            ref: nodeRef\n          }, text)));\n        }\n\n      }\n\n      const nodeRef = {\n        foo: /*#__PURE__*/React.createRef(),\n        bar: /*#__PURE__*/React.createRef()\n      };\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(Test, {\n        direction: \"down\",\n        text: \"foo\",\n        nodeRef: nodeRef.foo\n      }));\n\n      const rerender = getProps => new Promise(resolve => setProps({\n        onEnter: undefined,\n        onEntering: undefined,\n        onEntered: undefined,\n        onExit: undefined,\n        onExiting: undefined,\n        onExited: undefined,\n        ...getProps(resolve)\n      }));\n\n      await rerender(resolve => ({\n        direction: 'up',\n        text: 'bar',\n        nodeRef: nodeRef.bar,\n\n        onEnter() {\n          count++;\n          expect(nodeRef.bar.current.className).toEqual('up-enter');\n        },\n\n        onEntering() {\n          count++;\n          expect(nodeRef.bar.current.className).toEqual('up-enter up-enter-active');\n          resolve();\n        }\n\n      }));\n      await rerender(resolve => ({\n        direction: 'down',\n        text: 'foo',\n        nodeRef: nodeRef.foo,\n\n        onEntering() {\n          count++;\n          expect(nodeRef.foo.current.className).toEqual('down-enter down-enter-active');\n        },\n\n        onEntered() {\n          count++;\n          expect(nodeRef.foo.current.className).toEqual('down-enter-done');\n          resolve();\n        }\n\n      }));\n      expect(count).toEqual(4);\n    });","file":"CSSTransition-test.js","skipped":false,"dir":"test"},{"name":"should clean-up silently after the timeout elapses","suites":["CSSTransitionGroup"],"updatePoint":{"line":54,"column":56,"index":1747},"line":54,"code":"  it('should clean-up silently after the timeout elapses', () => {\n    render( /*#__PURE__*/React.createElement(TransitionGroup, {\n      enter: false\n    }, /*#__PURE__*/React.createElement(YoloTransition, {\n      key: \"one\",\n      id: \"one\"\n    })), container);\n    const transitionGroupDiv = container.childNodes[0];\n    expect(transitionGroupDiv.childNodes.length).toBe(1);\n    render( /*#__PURE__*/React.createElement(TransitionGroup, {\n      enter: false\n    }, /*#__PURE__*/React.createElement(YoloTransition, {\n      key: \"two\",\n      id: \"two\"\n    })), container);\n    expect(transitionGroupDiv.childNodes.length).toBe(2);\n    expect(transitionGroupDiv.childNodes[0].id).toBe('two');\n    expect(transitionGroupDiv.childNodes[1].id).toBe('one');\n    act(() => {\n      jest.runAllTimers();\n    }); // No warnings\n\n    expect(consoleErrorSpy).not.toHaveBeenCalled(); // The leaving child has been removed\n\n    expect(transitionGroupDiv.childNodes.length).toBe(1);\n    expect(transitionGroupDiv.childNodes[0].id).toBe('two');\n  });","file":"CSSTransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should keep both sets of DOM nodes around","suites":["CSSTransitionGroup"],"updatePoint":{"line":81,"column":47,"index":2774},"line":81,"code":"  it('should keep both sets of DOM nodes around', () => {\n    render( /*#__PURE__*/React.createElement(TransitionGroup, null, /*#__PURE__*/React.createElement(YoloTransition, {\n      key: \"one\",\n      id: \"one\"\n    })), container);\n    const transitionGroupDiv = container.childNodes[0];\n    expect(transitionGroupDiv.childNodes.length).toBe(1);\n    render( /*#__PURE__*/React.createElement(TransitionGroup, null, /*#__PURE__*/React.createElement(YoloTransition, {\n      key: \"two\",\n      id: \"two\"\n    })), container);\n    expect(transitionGroupDiv.childNodes.length).toBe(2);\n    expect(transitionGroupDiv.childNodes[0].id).toBe('two');\n    expect(transitionGroupDiv.childNodes[1].id).toBe('one');\n  });","file":"CSSTransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should switch transitionLeave from false to true","suites":["CSSTransitionGroup"],"updatePoint":{"line":96,"column":54,"index":3487},"line":96,"code":"  it('should switch transitionLeave from false to true', () => {\n    render( /*#__PURE__*/React.createElement(TransitionGroup, {\n      enter: false,\n      leave: false\n    }, /*#__PURE__*/React.createElement(YoloTransition, {\n      key: \"one\",\n      id: \"one\"\n    })), container);\n    const transitionGroupDiv = container.childNodes[0];\n    expect(transitionGroupDiv.childNodes.length).toBe(1);\n    render( /*#__PURE__*/React.createElement(TransitionGroup, {\n      enter: false,\n      leave: false\n    }, /*#__PURE__*/React.createElement(YoloTransition, {\n      key: \"two\",\n      id: \"two\"\n    })), container);\n    act(() => {\n      jest.runAllTimers();\n    });\n    expect(transitionGroupDiv.childNodes.length).toBe(1);\n    render( /*#__PURE__*/React.createElement(TransitionGroup, {\n      enter: false,\n      leave: true\n    }, /*#__PURE__*/React.createElement(YoloTransition, {\n      key: \"three\",\n      id: \"three\"\n    })), container);\n    expect(transitionGroupDiv.childNodes.length).toBe(2);\n    expect(transitionGroupDiv.childNodes[0].id).toBe('three');\n    expect(transitionGroupDiv.childNodes[1].id).toBe('two');\n  });","file":"CSSTransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should work with a null child","suites":["CSSTransitionGroup"],"updatePoint":{"line":128,"column":35,"index":4595},"line":128,"code":"  it('should work with a null child', () => {\n    render( /*#__PURE__*/React.createElement(TransitionGroup, null, [null]), container);\n  });","file":"CSSTransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should work with a child which renders as null","suites":["CSSTransitionGroup"],"updatePoint":{"line":131,"column":52,"index":4753},"line":131,"code":"  it('should work with a child which renders as null', () => {\n    const NullComponent = () => null; // Testing the whole lifecycle of entering and exiting,\n    // because those lifecycle methods used to fail when the DOM node was null.\n\n\n    render( /*#__PURE__*/React.createElement(TransitionGroup, null), container);\n    render( /*#__PURE__*/React.createElement(TransitionGroup, null, /*#__PURE__*/React.createElement(CSSTransition, {\n      classNames: \"yolo\",\n      timeout: 0\n    }, /*#__PURE__*/React.createElement(NullComponent, null))), container);\n    render( /*#__PURE__*/React.createElement(TransitionGroup, null), container);\n  });","file":"CSSTransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should transition from one to null","suites":["CSSTransitionGroup"],"updatePoint":{"line":143,"column":40,"index":5385},"line":143,"code":"  it('should transition from one to null', () => {\n    render( /*#__PURE__*/React.createElement(TransitionGroup, null, /*#__PURE__*/React.createElement(YoloTransition, {\n      key: \"one\",\n      id: \"one\"\n    })), container);\n    const transitionGroupDiv = container.childNodes[0];\n    expect(transitionGroupDiv.childNodes.length).toBe(1);\n    render( /*#__PURE__*/React.createElement(TransitionGroup, null, null), container); // (Here, we expect the original child to stick around but test that no\n    // exception is thrown)\n\n    expect(transitionGroupDiv.childNodes.length).toBe(1);\n    expect(transitionGroupDiv.childNodes[0].id).toBe('one');\n  });","file":"CSSTransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should transition from false to one","suites":["CSSTransitionGroup"],"updatePoint":{"line":156,"column":41,"index":6038},"line":156,"code":"  it('should transition from false to one', () => {\n    render( /*#__PURE__*/React.createElement(TransitionGroup, null, false), container);\n    const transitionGroupDiv = container.childNodes[0];\n    expect(transitionGroupDiv.childNodes.length).toBe(0);\n    render( /*#__PURE__*/React.createElement(TransitionGroup, null, /*#__PURE__*/React.createElement(YoloTransition, {\n      key: \"one\",\n      id: \"one\"\n    })), container);\n    expect(transitionGroupDiv.childNodes.length).toBe(1);\n    expect(transitionGroupDiv.childNodes[0].id).toBe('one');\n  });","file":"CSSTransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should clear transition timeouts when unmounted","suites":["CSSTransitionGroup"],"updatePoint":{"line":167,"column":53,"index":6603},"line":167,"code":"  it('should clear transition timeouts when unmounted', () => {\n    class Component extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(TransitionGroup, null, this.props.children);\n      }\n\n    }\n\n    render( /*#__PURE__*/React.createElement(Component, null), container);\n    render( /*#__PURE__*/React.createElement(Component, null, /*#__PURE__*/React.createElement(YoloTransition, {\n      key: \"yolo\",\n      id: \"yolo\"\n    })), container);\n    ReactDOM.unmountComponentAtNode(container); // Testing that no exception is thrown here, as the timeout has been cleared.\n\n    jest.runAllTimers();\n  });","file":"CSSTransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should handle unmounted elements properly","suites":["CSSTransitionGroup"],"updatePoint":{"line":184,"column":47,"index":7236},"line":184,"code":"  it('should handle unmounted elements properly', () => {\n    class Child extends React.Component {\n      render() {\n        if (!this.props.show) return null;\n        return /*#__PURE__*/React.createElement(\"div\", null);\n      }\n\n    }\n\n    class Component extends React.Component {\n      state = {\n        showChild: true\n      };\n\n      componentDidMount() {\n        this.setState({\n          showChild: false\n        });\n      }\n\n      render() {\n        return /*#__PURE__*/React.createElement(TransitionGroup, {\n          appear: true\n        }, /*#__PURE__*/React.createElement(Child, {\n          show: this.state.showChild\n        }));\n      }\n\n    }\n\n    render( /*#__PURE__*/React.createElement(Component, null), container); // Testing that no exception is thrown here, as the timeout has been cleared.\n\n    act(() => {\n      jest.runAllTimers();\n    });\n  });","file":"CSSTransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should work with custom component wrapper cloning children","suites":["CSSTransitionGroup"],"updatePoint":{"line":220,"column":64,"index":8124},"line":220,"code":"  it('should work with custom component wrapper cloning children', () => {\n    const extraClassNameProp = 'wrapper-item';\n\n    class Wrapper extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(\"div\", null, React.Children.map(this.props.children, child => React.cloneElement(child, {\n          className: extraClassNameProp\n        })));\n      }\n\n    }\n\n    class Child extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(\"div\", this.props);\n      }\n\n    }\n\n    class Component extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(TransitionGroup, {\n          component: Wrapper\n        }, /*#__PURE__*/React.createElement(Child, null));\n      }\n\n    }\n\n    render( /*#__PURE__*/React.createElement(Component, null), container);\n    const transitionGroupDiv = container.childNodes[0];\n    transitionGroupDiv.childNodes.forEach(child => {\n      expect(hasClass(child, extraClassNameProp)).toBe(true);\n    }); // Testing that no exception is thrown here, as the timeout has been cleared.\n\n    act(() => {\n      jest.runAllTimers();\n    });\n  });","file":"CSSTransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should import react-transition-group in node env","suites":["SSR"],"updatePoint":{"line":8,"column":54,"index":235},"line":8,"code":"  it('should import react-transition-group in node env', () => {});","file":"SSR-test.js","skipped":false,"dir":"test"},{"name":"should have default status ENTERED","suites":["SwitchTransition"],"updatePoint":{"line":39,"column":40,"index":1519},"line":39,"code":"  it('should have default status ENTERED', () => {\n    const nodeRef = /*#__PURE__*/React.createRef();\n    render( /*#__PURE__*/React.createElement(SwitchTransition, null, /*#__PURE__*/React.createElement(Transition, {\n      nodeRef: nodeRef,\n      timeout: 0,\n      key: \"first\"\n    }, status => {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        ref: nodeRef\n      }, \"status: \", status);\n    })));\n    expect(nodeRef.current.textContent).toBe(`status: ${ENTERED}`);\n  });","file":"SwitchTransition-test.js","skipped":false,"dir":"test"},{"name":"should have default mode: out-in","suites":["SwitchTransition"],"updatePoint":{"line":52,"column":38,"index":2007},"line":52,"code":"  it('should have default mode: out-in', () => {\n    const firstNodeRef = /*#__PURE__*/React.createRef();\n    const secondNodeRef = /*#__PURE__*/React.createRef();\n    const {\n      rerender\n    } = render( /*#__PURE__*/React.createElement(SwitchTransition, null, /*#__PURE__*/React.createElement(Transition, {\n      nodeRef: firstNodeRef,\n      timeout: 0,\n      key: \"first\"\n    }, status => {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        ref: firstNodeRef\n      }, \"first status: \", status);\n    })));\n    rerender( /*#__PURE__*/React.createElement(SwitchTransition, null, /*#__PURE__*/React.createElement(Transition, {\n      nodeRef: secondNodeRef,\n      timeout: 0,\n      key: \"second\"\n    }, status => {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        ref: secondNodeRef\n      }, \"second status: \", status);\n    })));\n    expect(firstNodeRef.current.textContent).toBe('first status: exiting');\n    expect(secondNodeRef.current).toBe(null);\n  });","file":"SwitchTransition-test.js","skipped":false,"dir":"test"},{"name":"should work without childs","suites":["SwitchTransition"],"updatePoint":{"line":78,"column":32,"index":2988},"line":78,"code":"  it('should work without childs', () => {\n    const nodeRef = /*#__PURE__*/React.createRef();\n    expect(() => {\n      render( /*#__PURE__*/React.createElement(SwitchTransition, null, /*#__PURE__*/React.createElement(Transition, {\n        nodeRef: nodeRef,\n        timeout: 0,\n        key: \"first\"\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        ref: nodeRef\n      }))));\n    }).not.toThrow();\n  });","file":"SwitchTransition-test.js","skipped":false,"dir":"test"},{"name":"should switch between components on change state","suites":["SwitchTransition"],"updatePoint":{"line":90,"column":54,"index":3423},"line":90,"code":"  it('should switch between components on change state', () => {\n    const {\n      container,\n      setProps\n    } = render( /*#__PURE__*/React.createElement(Parent, {\n      on: true\n    }));\n    expect(container.textContent).toBe('first');\n    setProps({\n      on: false\n    });\n    expect(log).toEqual(['exit', 'exiting']);\n    act(() => {\n      jest.runAllTimers();\n    });\n    expect(log).toEqual(['exit', 'exiting', 'exited', 'enter', 'entering', 'entered']);\n    expect(container.textContent).toBe('second');\n  });","file":"SwitchTransition-test.js","skipped":false,"dir":"test"},{"name":"should switch between null and component","suites":["SwitchTransition"],"updatePoint":{"line":108,"column":46,"index":3936},"line":108,"code":"  it('should switch between null and component', () => {\n    const {\n      container,\n      setProps\n    } = render( /*#__PURE__*/React.createElement(Parent, {\n      on: true,\n      rendered: false\n    }));\n    expect(container.textContent).toBe('');\n    jest.useFakeTimers();\n    setProps({\n      rendered: true\n    });\n    act(() => {\n      jest.runAllTimers();\n    });\n    expect(log).toEqual(['enter', 'entering', 'entered']);\n    expect(container.textContent).toBe('first');\n    setProps({\n      on: false,\n      rendered: true\n    });\n    act(() => {\n      jest.runAllTimers();\n    });\n    expect(log).toEqual(['enter', 'entering', 'entered', 'exit', 'exiting', 'exited', 'enter', 'entering', 'entered']);\n    expect(container.textContent).toBe('second');\n  });","file":"SwitchTransition-test.js","skipped":false,"dir":"test"},{"name":"should not transition on mount","suites":["Transition"],"updatePoint":{"line":27,"column":36,"index":996},"line":27,"code":"  it('should not transition on mount', () => {\n    const nodeRef = /*#__PURE__*/React.createRef();\n    render( /*#__PURE__*/React.createElement(Transition, {\n      in: true,\n      nodeRef: nodeRef,\n      timeout: 0,\n      onEnter: () => {\n        throw new Error('should not Enter');\n      }\n    }, status => /*#__PURE__*/React.createElement(\"div\", {\n      ref: nodeRef\n    }, \"status: \", status)));\n    expect(nodeRef.current.textContent).toEqual(`status: ${ENTERED}`);\n  });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should transition on mount with `appear`","suites":["Transition"],"updatePoint":{"line":41,"column":46,"index":1483},"line":41,"code":"  it('should transition on mount with `appear`', done => {\n    const nodeRef = /*#__PURE__*/React.createRef();\n    render( /*#__PURE__*/React.createElement(Transition, {\n      in: true,\n      nodeRef: nodeRef,\n      timeout: 0,\n      onEnter: () => {\n        throw Error('Animated!');\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: nodeRef\n    })));\n    render( /*#__PURE__*/React.createElement(Transition, {\n      nodeRef: nodeRef,\n      in: true,\n      appear: true,\n      timeout: 0,\n      onEnter: () => done()\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: nodeRef\n    })));\n  });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should pass filtered props to children","suites":["Transition"],"updatePoint":{"line":63,"column":44,"index":2101},"line":63,"code":"  it('should pass filtered props to children', () => {\n    class Child extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.props.nodeRef\n        }, \"foo: \", this.props.foo, \", bar: \", this.props.bar);\n      }\n\n    }\n\n    const nodeRef = /*#__PURE__*/React.createRef();\n    render( /*#__PURE__*/React.createElement(Transition, {\n      foo: \"foo\",\n      bar: \"bar\",\n      in: true,\n      nodeRef: nodeRef,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      appear: true,\n      enter: true,\n      exit: true,\n      timeout: 0,\n      addEndListener: () => {},\n      onEnter: () => {},\n      onEntering: () => {},\n      onEntered: () => {},\n      onExit: () => {},\n      onExiting: () => {},\n      onExited: () => {}\n    }, /*#__PURE__*/React.createElement(Child, {\n      nodeRef: nodeRef\n    })));\n    expect(nodeRef.current.textContent).toBe('foo: foo, bar: bar');\n  });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should allow addEndListener instead of timeouts","suites":["Transition"],"updatePoint":{"line":97,"column":53,"index":3054},"line":97,"code":"  it('should allow addEndListener instead of timeouts', done => {\n    let listener = jest.fn(end => setTimeout(end, 0));\n    const nodeRef = /*#__PURE__*/React.createRef();\n    const {\n      setProps\n    } = render( /*#__PURE__*/React.createElement(Transition, {\n      nodeRef: nodeRef,\n      addEndListener: listener,\n      onEntered: () => {\n        expect(listener).toHaveBeenCalledTimes(1);\n        done();\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: nodeRef\n    })));\n    setProps({\n      in: true\n    });\n  });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should fallback to timeouts with addEndListener","suites":["Transition"],"updatePoint":{"line":116,"column":53,"index":3595},"line":116,"code":"  it('should fallback to timeouts with addEndListener', done => {\n    let calledEnd = false;\n\n    let listener = end => setTimeout(() => {\n      calledEnd = true;\n      end();\n    }, 100);\n\n    const nodeRef = /*#__PURE__*/React.createRef();\n    const {\n      setProps\n    } = render( /*#__PURE__*/React.createElement(Transition, {\n      timeout: 0,\n      nodeRef: nodeRef,\n      addEndListener: listener,\n      onEntered: () => {\n        expect(calledEnd).toEqual(false);\n        done();\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: nodeRef\n    })));\n    setProps({\n      in: true\n    });\n  });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should mount/unmount immediately if not have enter/exit timeout","suites":["Transition"],"updatePoint":{"line":142,"column":69,"index":4230},"line":142,"code":"  it('should mount/unmount immediately if not have enter/exit timeout', done => {\n    const nodeRef = /*#__PURE__*/React.createRef();\n    const {\n      setProps\n    } = render( /*#__PURE__*/React.createElement(Transition, {\n      nodeRef: nodeRef,\n      in: true,\n      timeout: {}\n    }, status => /*#__PURE__*/React.createElement(\"div\", {\n      ref: nodeRef\n    }, \"status: \", status)));\n    expect(nodeRef.current.textContent).toEqual(`status: ${ENTERED}`);\n    let calledAfterTimeout = false;\n    setTimeout(() => {\n      calledAfterTimeout = true;\n    }, 10);\n    setProps({\n      in: false,\n\n      onExited() {\n        expect(nodeRef.current.textContent).toEqual(`status: ${EXITED}`);\n\n        if (!calledAfterTimeout) {\n          return done();\n        }\n\n        throw new Error('wrong timeout');\n      }\n\n    });\n  });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should use `React.findDOMNode` when `nodeRef` is not provided","suites":["Transition"],"updatePoint":{"line":173,"column":67,"index":5056},"line":173,"code":"  it('should use `React.findDOMNode` when `nodeRef` is not provided', () => {\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n    const findDOMNodeSpy = jest.spyOn(ReactDOM, 'findDOMNode');\n    render( /*#__PURE__*/React.createElement(Transition, {\n      in: true,\n      appear: true,\n      timeout: 0\n    }, /*#__PURE__*/React.createElement(\"div\", null)));\n    expect(findDOMNodeSpy).toHaveBeenCalled();\n    findDOMNodeSpy.mockRestore();\n    consoleSpy.mockRestore();\n  });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should not use `React.findDOMNode` when `nodeRef` is provided","suites":["Transition"],"updatePoint":{"line":185,"column":67,"index":5557},"line":185,"code":"  it('should not use `React.findDOMNode` when `nodeRef` is provided', () => {\n    const findDOMNodeSpy = jest.spyOn(ReactDOM, 'findDOMNode');\n    const nodeRef = /*#__PURE__*/React.createRef();\n    render( /*#__PURE__*/React.createElement(Transition, {\n      nodeRef: nodeRef,\n      in: true,\n      appear: true,\n      timeout: 0\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: nodeRef\n    })));\n    expect(findDOMNodeSpy).not.toHaveBeenCalled();\n    findDOMNodeSpy.mockRestore();\n  });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should use enter timeout if appear not set","suites":["Transition","appearing timeout"],"updatePoint":{"line":200,"column":50,"index":6079},"line":200,"code":"    it('should use enter timeout if appear not set', done => {\n      let calledBeforeEntered = false;\n      setTimeout(() => {\n        calledBeforeEntered = true;\n      }, 10);\n      const nodeRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(Transition, {\n        nodeRef: nodeRef,\n        in: true,\n        timeout: {\n          enter: 20,\n          exit: 10\n        },\n        appear: true\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      })));\n      setProps({\n        onEntered() {\n          if (calledBeforeEntered) {\n            done();\n          } else {\n            throw new Error('wrong timeout');\n          }\n        }\n\n      });\n    });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should use appear timeout if appear is set","suites":["Transition","appearing timeout"],"updatePoint":{"line":230,"column":50,"index":6827},"line":230,"code":"    it('should use appear timeout if appear is set', done => {\n      const nodeRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(Transition, {\n        nodeRef: nodeRef,\n        in: true,\n        timeout: {\n          enter: 20,\n          exit: 10,\n          appear: 5\n        },\n        appear: true\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      })));\n      let isCausedLate = false;\n      setTimeout(() => {\n        isCausedLate = true;\n      }, 15);\n      setProps({\n        onEntered() {\n          if (isCausedLate) {\n            throw new Error('wrong timeout');\n          } else {\n            done();\n          }\n        }\n\n      });\n    });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should fire callbacks","suites":["Transition","entering"],"updatePoint":{"line":263,"column":29,"index":7591},"line":263,"code":"    it('should fire callbacks', done => {\n      let callOrder = [];\n      let onEnter = jest.fn(() => callOrder.push('onEnter'));\n      let onEntering = jest.fn(() => callOrder.push('onEntering'));\n      const nodeRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(Transition, {\n        nodeRef: nodeRef,\n        timeout: 10\n      }, status => /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      }, \"status: \", status)));\n      expect(nodeRef.current.textContent).toEqual(`status: ${EXITED}`);\n      setProps({\n        in: true,\n        onEnter,\n        onEntering,\n\n        onEntered() {\n          expect(onEnter).toHaveBeenCalledTimes(1);\n          expect(onEntering).toHaveBeenCalledTimes(1);\n          expect(callOrder).toEqual(['onEnter', 'onEntering']);\n          done();\n        }\n\n      });\n    });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should move to each transition state","suites":["Transition","entering"],"updatePoint":{"line":291,"column":44,"index":8499},"line":291,"code":"    it('should move to each transition state', done => {\n      let count = 0;\n      const nodeRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(Transition, {\n        nodeRef: nodeRef,\n        timeout: 10\n      }, status => /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      }, \"status: \", status)));\n      expect(nodeRef.current.textContent).toEqual(`status: ${EXITED}`);\n      setProps({\n        in: true,\n\n        onEnter() {\n          count++;\n          expect(nodeRef.current.textContent).toEqual(`status: ${EXITED}`);\n        },\n\n        onEntering() {\n          count++;\n          expect(nodeRef.current.textContent).toEqual(`status: ${ENTERING}`);\n        },\n\n        onEntered() {\n          expect(nodeRef.current.textContent).toEqual(`status: ${ENTERED}`);\n          expect(count).toEqual(2);\n          done();\n        }\n\n      });\n    });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should fire callbacks","suites":["Transition","exiting"],"updatePoint":{"line":326,"column":29,"index":9457},"line":326,"code":"    it('should fire callbacks', done => {\n      let callOrder = [];\n      let onExit = jest.fn(() => callOrder.push('onExit'));\n      let onExiting = jest.fn(() => callOrder.push('onExiting'));\n      const nodeRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(Transition, {\n        nodeRef: nodeRef,\n        in: true,\n        timeout: 10\n      }, status => /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      }, \"status: \", status)));\n      expect(nodeRef.current.textContent).toEqual(`status: ${ENTERED}`);\n      setProps({\n        in: false,\n        onExit,\n        onExiting,\n\n        onExited() {\n          expect(onExit).toHaveBeenCalledTimes(1);\n          expect(onExiting).toHaveBeenCalledTimes(1);\n          expect(callOrder).toEqual(['onExit', 'onExiting']);\n          done();\n        }\n\n      });\n    });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should move to each transition state","suites":["Transition","exiting"],"updatePoint":{"line":355,"column":44,"index":10374},"line":355,"code":"    it('should move to each transition state', done => {\n      let count = 0;\n      const nodeRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(Transition, {\n        nodeRef: nodeRef,\n        in: true,\n        timeout: 10\n      }, status => /*#__PURE__*/React.createElement(\"div\", {\n        ref: nodeRef\n      }, \"status: \", status)));\n      expect(nodeRef.current.textContent).toEqual(`status: ${ENTERED}`);\n      setProps({\n        in: false,\n\n        onExit() {\n          count++;\n          expect(nodeRef.current.textContent).toEqual(`status: ${ENTERED}`);\n        },\n\n        onExiting() {\n          count++;\n          expect(nodeRef.current.textContent).toEqual(`status: ${EXITING}`);\n        },\n\n        onExited() {\n          expect(nodeRef.current.textContent).toEqual(`status: ${EXITED}`);\n          expect(count).toEqual(2);\n          done();\n        }\n\n      });\n    });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should mount when entering","suites":["Transition","mountOnEnter"],"updatePoint":{"line":414,"column":34,"index":12048},"line":414,"code":"    it('should mount when entering', done => {\n      const {\n        container,\n        setProps\n      } = render( /*#__PURE__*/React.createElement(MountTransition, {\n        in: false,\n        onEnter: () => {\n          expect(container.textContent).toEqual(`status: ${EXITED}`);\n          done();\n        }\n      }));\n      expect(container.textContent).toEqual('');\n      setProps({\n        in: true\n      });\n    });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should stay mounted after exiting","suites":["Transition","mountOnEnter"],"updatePoint":{"line":430,"column":41,"index":12476},"line":430,"code":"    it('should stay mounted after exiting', done => {\n      const {\n        container,\n        setProps\n      } = render( /*#__PURE__*/React.createElement(MountTransition, {\n        in: false,\n        onEntered: () => {\n          expect(container.textContent).toEqual(`status: ${ENTERED}`);\n          setProps({\n            in: false\n          });\n        },\n        onExited: () => {\n          expect(container.textContent).toEqual(`status: ${EXITED}`);\n          done();\n        }\n      }));\n      expect(container.textContent).toEqual('');\n      setProps({\n        in: true\n      });\n    });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should mount when entering","suites":["Transition","unmountOnExit"],"updatePoint":{"line":477,"column":34,"index":13769},"line":477,"code":"    it('should mount when entering', done => {\n      const instanceRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(UnmountTransition, {\n        ref: instanceRef,\n        in: false,\n        onEnter: () => {\n          expect(instanceRef.current.getStatus()).toEqual(EXITED);\n          expect(instanceRef.current.nodeRef.current).toExist();\n          done();\n        }\n      }));\n      expect(instanceRef.current.getStatus()).toEqual(UNMOUNTED);\n      expect(instanceRef.current.nodeRef.current).toBeNull();\n      setProps({\n        in: true\n      });\n    });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should unmount after exiting","suites":["Transition","unmountOnExit"],"updatePoint":{"line":496,"column":36,"index":14400},"line":496,"code":"    it('should unmount after exiting', done => {\n      const instanceRef = /*#__PURE__*/React.createRef();\n      const {\n        setProps\n      } = render( /*#__PURE__*/React.createElement(UnmountTransition, {\n        ref: instanceRef,\n        in: true,\n        onExited: () => {\n          setTimeout(() => {\n            expect(instanceRef.current.getStatus()).toEqual(UNMOUNTED);\n            expect(instanceRef.current.nodeRef.current).not.toExist();\n            done();\n          });\n        }\n      }));\n      expect(instanceRef.current.getStatus()).toEqual(ENTERED);\n      expect(instanceRef.current.nodeRef.current).toExist();\n      setProps({\n        in: false\n      });\n    });","file":"Transition-test.js","skipped":false,"dir":"test"},{"name":"should allow null components","suites":["TransitionGroup"],"updatePoint":{"line":45,"column":34,"index":1710},"line":45,"code":"  it('should allow null components', () => {\n    function FirstChild(props) {\n      const childrenArray = React.Children.toArray(props.children);\n      return childrenArray[0] || null;\n    }\n\n    render( /*#__PURE__*/React.createElement(TransitionGroup, {\n      component: FirstChild\n    }, /*#__PURE__*/React.createElement(Child, null)));\n  });","file":"TransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should allow callback refs","suites":["TransitionGroup"],"updatePoint":{"line":55,"column":32,"index":2054},"line":55,"code":"  it('should allow callback refs', () => {\n    const ref = jest.fn();\n\n    class Child extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(\"span\", null);\n      }\n\n    }\n\n    render( /*#__PURE__*/React.createElement(TransitionGroup, null, /*#__PURE__*/React.createElement(Child, {\n      ref: ref\n    })));\n    expect(ref).toHaveBeenCalled();\n  });","file":"TransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should work with no children","suites":["TransitionGroup"],"updatePoint":{"line":70,"column":34,"index":2442},"line":70,"code":"  it('should work with no children', () => {\n    renderStrict( /*#__PURE__*/React.createElement(TransitionGroup, null), container);\n  });","file":"TransitionGroup-test.js","skipped":false,"dir":"test"},{"name":"should handle transitioning correctly","suites":["TransitionGroup"],"updatePoint":{"line":73,"column":43,"index":2589},"line":73,"code":"  it('should handle transitioning correctly', () => {\n    function Parent({\n      count = 1\n    }) {\n      let children = [];\n\n      for (let i = 0; i < count; i++) children.push( /*#__PURE__*/React.createElement(Child, {\n        key: i\n      }));\n\n      return /*#__PURE__*/React.createElement(TransitionGroup, {\n        appear: true,\n        enter: true,\n        exit: true\n      }, children);\n    }\n\n    jest.useFakeTimers();\n    renderStrict( /*#__PURE__*/React.createElement(Parent, null), container);\n    act(() => {\n      jest.runAllTimers();\n    });\n    expect(log).toEqual(['appear', 'appearing', 'appeared']);\n    log = [];\n    renderStrict( /*#__PURE__*/React.createElement(Parent, {\n      count: 2\n    }), container);\n    act(() => {\n      jest.runAllTimers();\n    });\n    expect(log).toEqual(['enter', 'entering', 'entered']);\n    log = [];\n    renderStrict( /*#__PURE__*/React.createElement(Parent, {\n      count: 1\n    }), container);\n    act(() => {\n      jest.runAllTimers();\n    });\n    expect(log).toEqual(['exit', 'exiting', 'exited']);\n  });","file":"TransitionGroup-test.js","skipped":false,"dir":"test"}]}