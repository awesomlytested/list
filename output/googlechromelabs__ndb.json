{"repo":"GoogleChromeLabs/ndb","url":"https://github.com/GoogleChromeLabs/ndb","branch":"master","configs":[{"package":"ndb","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"run configuration","suites":[],"updatePoint":{"line":34,"column":24,"index":1208},"line":34,"code":"  xit('run configuration', async function () {\n    const configDir = await fsMkdtemp(path.join(os.tmpdir(), 'ndb-test-'));\n    const frontend = await launch({\n      configDir: configDir,\n      argv: ['.'],\n      cwd: path.join(__dirname, 'assets', 'test-project'),\n      debugFrontend: false,\n      doNotCopyPreferences: true\n    });\n    const configItem = await frontend.waitForSelector('body /deep/ .list-item');\n    configItem.hover();\n    const runButton = await frontend.waitForSelector('body /deep/ .list-item /deep/ [aria-label=Run]', {\n      visible: true\n    });\n    runButton.click();\n    const consoleMessage = await frontend.waitForSelector('body /deep/ .console-message-wrapper:nth-child(3) .console-message-text');\n    assert.equal('42', await frontend.evaluate(x => x.innerText, consoleMessage));\n    await frontend.close();\n    await util.promisify(removeFolder)(configDir);\n  });","skipped":true,"file":"basic.spec.js","dir":"test"},{"name":"run, pause at start, kill","suites":[],"updatePoint":{"line":54,"column":32,"index":2113},"line":54,"code":"  xit('run, pause at start, kill', async function () {\n    const configDir = await fsMkdtemp(path.join(os.tmpdir(), 'ndb-test-'));\n    const frontend = await launch({\n      configDir: configDir,\n      argv: ['.'],\n      cwd: path.join(__dirname, 'assets', 'test-project'),\n      debugFrontend: false,\n      doNotCopyPreferences: true\n    });\n    const [pauseAtStartCheckbox, configItem] = await Promise.all([frontend.waitForSelector('body /deep/ #pause-at-start-checkbox'), frontend.waitForSelector('body /deep/ .list-item')]);\n    await pauseAtStartCheckbox.click();\n    configItem.hover();\n    const runButton = await frontend.waitForSelector('body /deep/ .list-item /deep/ [aria-label=Run]', {\n      visible: true\n    });\n    runButton.click();\n    const executionLine = await frontend.waitForSelector('.cm-execution-line .CodeMirror-line');\n    const executionLineText = await frontend.evaluate(x => x.innerText, executionLine);\n    assert.equal(executionLineText, 'console.log(42);');\n    const processItem = await frontend.waitForSelector('body /deep/ li.selected');\n    processItem.hover();\n    const killButton = await frontend.waitForSelector('body /deep/ li.selected /deep/ [aria-label=Kill]');\n    killButton.click();\n    await frontend.waitForSelector('body /deep/ #no-running-nodes-msg', {\n      visible: true\n    });\n    await frontend.close();\n    await util.promisify(removeFolder)(configDir);\n  });","skipped":true,"file":"basic.spec.js","dir":"test"},{"name":"terminal","suites":[],"updatePoint":{"line":83,"column":15,"index":3512},"line":83,"code":"  xit('terminal', async function () {\n    const configDir = await fsMkdtemp(path.join(os.tmpdir(), 'ndb-test-'));\n    const frontend = await launch({\n      configDir: configDir,\n      argv: ['.'],\n      cwd: path.join(__dirname, 'assets', 'test-project'),\n      debugFrontend: false,\n      doNotCopyPreferences: true\n    });\n    const [pauseAtStartCheckbox, terminalTab, resumeButton, consoleTab] = await Promise.all([frontend.waitForSelector('body /deep/ #pause-at-start-checkbox'), frontend.waitForSelector('body /deep/ #tab-ndb\\\\.terminal'), frontend.waitForSelector('body /deep/ [aria-label=\"Pause script execution\"]'), frontend.waitForSelector('body /deep/ #tab-console-view')]);\n    await pauseAtStartCheckbox.click();\n    terminalTab.click();\n    const terminal = await frontend.waitForSelector('body /deep/ .xterm-cursor-layer', {\n      visible: true\n    });\n    await frontend.click('body /deep/ .xterm-cursor-layer');\n    await frontend.type('body /deep/ .xterm-cursor-layer', 'node -e \"console.log(42)\"');\n    await terminal.press('Enter');\n    const executionLine = await frontend.waitForSelector('.cm-execution-line .CodeMirror-line');\n    const executionLineText = await frontend.evaluate(x => x.innerText, executionLine);\n    assert.equal(executionLineText, 'console.log(42);');\n    resumeButton.click();\n    await frontend.waitForSelector('body /deep/ #no-running-nodes-msg', {\n      visible: true\n    });\n    consoleTab.click();\n    const consoleMessage = await frontend.waitForSelector('body /deep/ .console-message-wrapper:nth-child(2) .console-message-text');\n    assert.equal('42', await frontend.evaluate(x => x.innerText, consoleMessage));\n    await frontend.close();\n    await util.promisify(removeFolder)(configDir);\n  });","skipped":true,"file":"basic.spec.js","dir":"test"},{"name":"terminal exit","suites":[],"updatePoint":{"line":114,"column":20,"index":5265},"line":114,"code":"  xit('terminal exit', async function () {\n    const configDir = await fsMkdtemp(path.join(os.tmpdir(), 'ndb-test-'));\n    const frontend = await launch({\n      configDir: configDir,\n      argv: ['.'],\n      cwd: path.join(__dirname, 'assets', 'test-project'),\n      debugFrontend: false,\n      doNotCopyPreferences: true\n    });\n    const [terminalTab, consoleTab] = await Promise.all([frontend.waitForSelector('body /deep/ #tab-ndb\\\\.terminal'), frontend.waitForSelector('body /deep/ #tab-console-view')]);\n    terminalTab.click();\n    const terminal = await frontend.waitForSelector('body /deep/ .xterm-cursor-layer', {\n      visible: true\n    });\n    await frontend.click('body /deep/ .xterm-cursor-layer');\n    await frontend.type('body /deep/ .xterm-cursor-layer', 'exit');\n    await terminal.press('Enter');\n    // we need better way to wait until terminal reconnected.\n    await new Promise(resolve => setTimeout(resolve, 300));\n    await frontend.type('body /deep/ .xterm-cursor-layer', 'node -e \"console.log(42)\"');\n    await terminal.press('Enter');\n    consoleTab.click();\n    const consoleMessage = await frontend.waitForSelector('body /deep/ .console-message-wrapper:nth-child(2) .console-message-text');\n    assert.equal('42', await frontend.evaluate(x => x.innerText, consoleMessage));\n    await frontend.close();\n    await util.promisify(removeFolder)(configDir);\n  });","skipped":true,"file":"basic.spec.js","dir":"test"},{"name":"repl and uncaught error","suites":[],"updatePoint":{"line":141,"column":30,"index":6662},"line":141,"code":"  xit('repl and uncaught error', async function () {\n    const configDir = await fsMkdtemp(path.join(os.tmpdir(), 'ndb-test-'));\n    const frontend = await launch({\n      configDir: configDir,\n      argv: ['.'],\n      cwd: path.join(__dirname, 'assets', 'test-project'),\n      debugFrontend: false,\n      doNotCopyPreferences: true\n    });\n    const consolePrompt = await frontend.waitForSelector('body /deep/ #console-prompt');\n    await frontend.type('body /deep/ #console-prompt', 'require(\"child_process\").spawn(\"!@#$%\")');\n    await consolePrompt.press('Enter');\n    await frontend.type('body /deep/ #console-prompt', 'console.log(42)');\n    consolePrompt.press('Enter');\n    const consoleMessage = await frontend.waitForSelector('body /deep/ .console-message-wrapper:nth-child(6) .console-message-text');\n    assert.equal('42', await frontend.evaluate(x => x.innerText, consoleMessage));\n    await frontend.close();\n    await util.promisify(removeFolder)(configDir);\n  });","skipped":true,"file":"basic.spec.js","dir":"test"},{"name":"breakpoint inside .mjs file","suites":[],"updatePoint":{"line":169,"column":33,"index":8237},"line":169,"code":"  it('breakpoint inside .mjs file', async function (state) {\n    const configDir = await fsMkdtemp(path.join(os.tmpdir(), 'ndb-test-'));\n    const frontend = await launch({\n      configDir: configDir,\n      argv: ['.'],\n      cwd: path.join(__dirname, 'assets', 'test-project'),\n      debugFrontend: false,\n      doNotCopyPreferences: true,\n      appName: 'integration_test_runner',\n      releaseFrontendFolder: state.frontendFolder,\n      doNotProcessExit: true\n    });\n    await setupHelpers(frontend);\n    await frontend.showScriptSource('index.mjs');\n    await frontend.setBreakpoint(6, '');\n    await frontend.waitForConfigurations();\n    {\n      frontend.runConfiguration('run-module');\n      const {\n        frames: [{\n          location\n        }]\n      } = await frontend.waitUntilPaused();\n      assert.equal(6, location.lineNumber);\n      assert.equal(2, location.columnNumber);\n      await frontend.resumeExecution();\n    }\n    {\n      frontend.runConfiguration('run-module-without-flag');\n      const {\n        frames: [{\n          location\n        }]\n      } = await frontend.waitUntilPaused();\n      assert.equal(6, location.lineNumber);\n      assert.equal(2, location.columnNumber);\n      await frontend.resumeExecution();\n    }\n    await frontend.close();\n    await util.promisify(removeFolder)(configDir);\n  });","file":"basic.spec.js","skipped":false,"dir":"test"},{"name":"Stay attached","suites":[],"updatePoint":{"line":210,"column":19,"index":9553},"line":210,"code":"  it('Stay attached', async function (state) {\n    const configDir = await fsMkdtemp(path.join(os.tmpdir(), 'ndb-test-'));\n    const frontend = await launch({\n      configDir: configDir,\n      argv: ['.'],\n      cwd: path.join(__dirname, 'assets', 'test-project'),\n      debugFrontend: false,\n      doNotCopyPreferences: true,\n      appName: 'integration_test_runner',\n      releaseFrontendFolder: state.frontendFolder,\n      doNotProcessExit: true\n    });\n    await setupHelpers(frontend);\n    await frontend.setSetting('waitAtEnd', true);\n    frontend.runConfiguration('atexit');\n    await frontend.waitForConsoleMessage('42');\n    const processes = await frontend.nodeProcess();\n    processes.sort();\n    assert.equal(`node -e process.once('exit', _ => console.log(42))`, processes[0]);\n    assert.equal(`node npm run atexit`, processes[1]);\n    const targetDestroyed = frontend.waitTargetDestroyed(2);\n    await frontend.killProcess(`node -e process.once('exit', _ => console.log(42))`);\n    await targetDestroyed;\n    assert.deepStrictEqual([], await frontend.nodeProcess());\n    await frontend.close();\n    await util.promisify(removeFolder)(configDir);\n  });","file":"basic.spec.js","skipped":false,"dir":"test"},{"name":"--title flag (fails on Node v8.x)","suites":[],"updatePoint":{"line":42,"column":40,"index":1319},"line":42,"code":"  xit('--title flag (fails on Node v8.x)', async function () {\n    const result = await new Promise(resolve => execFile(process.execPath, ['--title=abc', '-p', 'process.title'], (error, stdout, stderr) => {\n      resolve(stdout + stderr);\n    }));\n    expect(result).toBe('abc\\n');\n  });","skipped":true,"file":"platform.spec.js","dir":"test"}]}