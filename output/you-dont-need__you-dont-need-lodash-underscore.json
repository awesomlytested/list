{"repo":"you-dont-need/You-Dont-Need-Lodash-Underscore","url":"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore","branch":"master","configs":[{"package":"eslint-plugin-you-dont-need-lodash-underscore","lang":"js","dir":"tests","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"compact","suites":["code snippet example"],"updatePoint":{"line":8,"column":13},"line":8,"code":"  it('compact', () => {\n    assert.deepEqual(_.compact([0, 1, false, 2, '', 3]), [0, 1, false, 2, '', 3].filter(v => v));\n  });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"concat","suites":["code snippet example"],"updatePoint":{"line":11,"column":12},"line":11,"code":"  it('concat', () => {\n    const lodashArray = [1];\n\n    const lodashResult = _.concat(lodashArray, 2, [3], [[4]]);\n\n    const nativeArray = [1];\n    const nativeResult = nativeArray.concat(2, [3], [[4]]);\n    assert.deepEqual(lodashResult, nativeResult);\n  });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"pick","suites":["code snippet example"],"updatePoint":{"line":20,"column":10},"line":20,"code":"  it('pick', () => {\n    var object = {\n      'a': 1,\n      'b': '2',\n      'c': 3\n    };\n\n    function pick(object, paths) {\n      const obj = {};\n\n      for (const path of paths) {\n        if (object[path]) {\n          obj[path] = object[path];\n        }\n      }\n\n      return obj;\n    }\n\n    assert.deepEqual(_.pick(object, ['a', 'c']), pick(object, ['a', 'c']));\n  });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"pickBy","suites":["code snippet example"],"updatePoint":{"line":41,"column":12},"line":41,"code":"  it('pickBy', () => {\n    var object = {\n      'a': 1,\n      'b': null,\n      'c': 3,\n      'd': false,\n      'e': undefined,\n      'f': '',\n      'g': 0\n    };\n\n    function pickBy(object) {\n      const obj = {};\n\n      for (const key in object) {\n        if (object[key]) {\n          obj[key] = object[key];\n        }\n      }\n\n      return obj;\n    }\n\n    assert.deepEqual(_.pickBy(object), pickBy(object));\n  });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.fill(array, 'a')","suites":["code snippet example","fill"],"updatePoint":{"line":67,"column":26},"line":67,"code":"    it(\"_.fill(array, 'a')\", () => {\n      var array = [1, 2, 3];\n      assert.deepEqual(_.fill(array, 'a'), array.fill('a'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.fill(Array(3), 2)","suites":["code snippet example","fill"],"updatePoint":{"line":71,"column":27},"line":71,"code":"    it(\"_.fill(Array(3), 2)\", () => {\n      assert.deepEqual(_.fill(Array(3), 2), Array(3).fill(2));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.fill([4, 6, 8, 10], '*', 1, 3)","suites":["code snippet example","fill"],"updatePoint":{"line":74,"column":40},"line":74,"code":"    it(\"_.fill([4, 6, 8, 10], '*', 1, 3)\", () => {\n      assert.deepEqual(_.fill([4, 6, 8, 10], '*', 1, 3), [4, 6, 8, 10].fill('*', 1, 3));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.chunk(['a', 'b', 'c', 'd'], 2);","suites":["code snippet example","chunk"],"updatePoint":{"line":85,"column":41},"line":85,"code":"    it(\"_.chunk(['a', 'b', 'c', 'd'], 2);\", () => {\n      assert.deepEqual(_.chunk(['a', 'b', 'c', 'd'], 2), chunk(['a', 'b', 'c', 'd'], 2));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.chunk(['a', 'b', 'c', 'd'], 3);","suites":["code snippet example","chunk"],"updatePoint":{"line":88,"column":41},"line":88,"code":"    it(\"_.chunk(['a', 'b', 'c', 'd'], 3);\", () => {\n      assert.deepEqual(_.chunk(['a', 'b', 'c', 'd'], 3), chunk(['a', 'b', 'c', 'd'], 3));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.times(10);","suites":["code snippet example","times"],"updatePoint":{"line":97,"column":20},"line":97,"code":"    it(\"_.times(10);\", () => {\n      assert.deepEqual(_.times(10), times(10));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.times(10, x => x + 1);","suites":["code snippet example","times"],"updatePoint":{"line":100,"column":32},"line":100,"code":"    it(\"_.times(10, x => x + 1);\", () => {\n      assert.deepEqual(_.times(10, x => x + 1), times(10, (_, x) => x + 1));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.assign({}, new Foo, new Bar);","suites":["code snippet example","assign"],"updatePoint":{"line":118,"column":39},"line":118,"code":"    it(\"_.assign({}, new Foo, new Bar);\", () => {\n      assert.deepEqual(_.assign({}, new Foo(), new Bar()), assign({}, new Foo(), new Bar()));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.assign(new Foo, new Bar);","suites":["code snippet example","assign"],"updatePoint":{"line":121,"column":35},"line":121,"code":"    it(\"_.assign(new Foo, new Bar);\", () => {\n      assert.deepEqual(_.assign(new Foo(), new Bar()), assign(new Foo(), new Bar()));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.extend({}, new Foo, new Bar);","suites":["code snippet example","extend"],"updatePoint":{"line":152,"column":39},"line":152,"code":"    it(\"_.extend({}, new Foo, new Bar);\", () => {\n      assert.deepEqual(_.extend({}, new Foo(), new Bar()), extend({}, new Foo(), new Bar()));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.extend(new Foo, new Bar);","suites":["code snippet example","extend"],"updatePoint":{"line":155,"column":35},"line":155,"code":"    it(\"_.extend(new Foo, new Bar);\", () => {\n      assert.deepEqual(_.extend(new Foo(), new Bar()), extend(new Foo(), new Bar()));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.Date(null)","suites":["code snippet example","isDate"],"updatePoint":{"line":164,"column":20},"line":164,"code":"    it('_.Date(null)', () => {\n      assert.equal(_.isDate(null), isDate(null));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.Date('Mon April 23 2012')","suites":["code snippet example","isDate"],"updatePoint":{"line":167,"column":35},"line":167,"code":"    it(\"_.Date('Mon April 23 2012')\", () => {\n      assert.equal(_.isDate('Mon April 23 2012'), isDate('Mon April 23 2012'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.Date(new Date)","suites":["code snippet example","isDate"],"updatePoint":{"line":170,"column":24},"line":170,"code":"    it('_.Date(new Date)', () => {\n      assert.equal(_.isDate(new Date()), isDate(new Date()));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isEmpty(null)","suites":["code snippet example","isEmpty"],"updatePoint":{"line":179,"column":23},"line":179,"code":"    it('_.isEmpty(null)', () => {\n      assert.equal(_.isEmpty(null), isEmpty(null));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isEmpty('')","suites":["code snippet example","isEmpty"],"updatePoint":{"line":182,"column":21},"line":182,"code":"    it(\"_.isEmpty('')\", () => {\n      assert.equal(_.isEmpty(''), isEmpty(''));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isEmpty({})","suites":["code snippet example","isEmpty"],"updatePoint":{"line":185,"column":21},"line":185,"code":"    it(\"_.isEmpty({})\", () => {\n      assert.equal(_.isEmpty({}), isEmpty({}));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isEmpty([])","suites":["code snippet example","isEmpty"],"updatePoint":{"line":188,"column":21},"line":188,"code":"    it(\"_.isEmpty([])\", () => {\n      assert.equal(_.isEmpty([]), isEmpty([]));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isEmpty({a: '1'})","suites":["code snippet example","isEmpty"],"updatePoint":{"line":191,"column":27},"line":191,"code":"    it(\"_.isEmpty({a: '1'})\", () => {\n      assert.equal(_.isEmpty({\n        a: '1'\n      }), isEmpty({\n        a: '1'\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isInteger(3)","suites":["code snippet example","isInteger"],"updatePoint":{"line":200,"column":22},"line":200,"code":"    it('_.isInteger(3)', () => {\n      assert.equal(_.isInteger(3), Number.isInteger(3));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isInteger(\"3\")","suites":["code snippet example","isInteger"],"updatePoint":{"line":203,"column":24},"line":203,"code":"    it('_.isInteger(\"3\")', () => {\n      assert.equal(_.isInteger(\"3\"), Number.isInteger(\"3\"));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isInteger(2.9)","suites":["code snippet example","isInteger"],"updatePoint":{"line":206,"column":24},"line":206,"code":"    it('_.isInteger(2.9)', () => {\n      assert.equal(_.isInteger(2.9), Number.isInteger(2.9));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isInteger(NaN)","suites":["code snippet example","isInteger"],"updatePoint":{"line":209,"column":24},"line":209,"code":"    it('_.isInteger(NaN)', () => {\n      assert.equal(_.isInteger(NaN), Number.isInteger(NaN));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle falsy values","suites":["code snippet example","get"],"updatePoint":{"line":243,"column":34},"line":243,"code":"    it(\"should handle falsy values\", () => {\n      var val = _.get(obj, 'aa[0].b.c', 1);\n\n      assert.strictEqual(val, get(obj, 'aa[0].b.c', 1));\n      assert.notEqual(val, 1);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle just bracket notation","suites":["code snippet example","get"],"updatePoint":{"line":249,"column":43},"line":249,"code":"    it(\"should handle just bracket notation\", () => {\n      var val = _.get(obj, 'aa[0][1]', 1);\n\n      assert.strictEqual(val, get(obj, 'aa[0][1]', 1));\n      assert.notEqual(val, 1);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle just period notation","suites":["code snippet example","get"],"updatePoint":{"line":255,"column":42},"line":255,"code":"    it(\"should handle just period notation\", () => {\n      var val = _.get(obj, 'dd.ee.ff', 1);\n\n      assert.strictEqual(val, get(obj, 'dd.ee.ff', 1));\n      assert.notEqual(val, 1);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle neither notation","suites":["code snippet example","get"],"updatePoint":{"line":261,"column":38},"line":261,"code":"    it(\"should handle neither notation\", () => {\n      var val = _.get(obj, 'aa', 1);\n\n      assert.deepEqual(val, get(obj, 'aa', 1));\n      assert.notEqual(val, 1);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle both notation","suites":["code snippet example","get"],"updatePoint":{"line":267,"column":35},"line":267,"code":"    it(\"should handle both notation\", () => {\n      var val = _.get(obj, 'aa[0].b.c', 1);\n\n      assert.strictEqual(val, get(obj, 'aa[0].b.c', 1));\n      assert.notEqual(val, 1);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle array path","suites":["code snippet example","get"],"updatePoint":{"line":273,"column":32},"line":273,"code":"    it(\"should handle array path\", () => {\n      var val = _.get(obj, ['aa', [0], 'b', 'c'], 1);\n\n      assert.strictEqual(val, get(obj, ['aa', [0], 'b', 'c'], 1));\n      assert.notEqual(val, 1);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle undefined without default","suites":["code snippet example","get"],"updatePoint":{"line":279,"column":47},"line":279,"code":"    it(\"should handle undefined without default\", () => {\n      var val = _.get(obj, 'dd.b');\n\n      assert.strictEqual(val, get(obj, 'dd.b'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle undefined with default","suites":["code snippet example","get"],"updatePoint":{"line":284,"column":44},"line":284,"code":"    it(\"should handle undefined with default\", () => {\n      var val = _.get(obj, 'dd.b', 1);\n\n      assert.strictEqual(val, get(obj, 'dd.b', 1));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle deep undefined without default","suites":["code snippet example","get"],"updatePoint":{"line":289,"column":52},"line":289,"code":"    it(\"should handle deep undefined without default\", () => {\n      var val = _.get(obj, 'dd.b.c');\n\n      assert.strictEqual(val, get(obj, 'dd.b.c'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle deep undefined with default","suites":["code snippet example","get"],"updatePoint":{"line":294,"column":49},"line":294,"code":"    it(\"should handle deep undefined with default\", () => {\n      var val = _.get(obj, 'dd.b.c', 1);\n\n      assert.strictEqual(val, get(obj, 'dd.b.c', 1));\n      assert.strictEqual(val, 1);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle null default","suites":["code snippet example","get"],"updatePoint":{"line":300,"column":34},"line":300,"code":"    it(\"should handle null default\", () => {\n      var val = _.get(obj, 'dd.b', null);\n\n      assert.strictEqual(val, get(obj, 'dd.b', null));\n      assert.strictEqual(val, null);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle empty path","suites":["code snippet example","get"],"updatePoint":{"line":306,"column":32},"line":306,"code":"    it(\"should handle empty path\", () => {\n      var val = _.get(obj, '', 1);\n\n      assert.strictEqual(val, get(obj, '', 1));\n      assert.notEqual(val, obj);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle undefined obj","suites":["code snippet example","get"],"updatePoint":{"line":312,"column":35},"line":312,"code":"    it(\"should handle undefined obj\", () => {\n      var val = _.get(undefined, 'aa');\n\n      assert.strictEqual(val, get(undefined, 'aa'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle path contains a key with dots","suites":["code snippet example","get"],"updatePoint":{"line":317,"column":51},"line":317,"code":"    it(\"should handle path contains a key with dots\", () => {\n      var val = _.get(obj, 'gg.h');\n\n      assert.strictEqual(val, get(obj, 'gg.h'));\n      assert.strictEqual(val, 1);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle array path of keys with dots","suites":["code snippet example","get"],"updatePoint":{"line":323,"column":50},"line":323,"code":"    it(\"should handle array path of keys with dots\", () => {\n      var val = _.get(obj, [\"kk.ll\", \"mm.n\", 0, \"oo.p\"]);\n\n      assert.strictEqual(val, get(obj, [\"kk.ll\", \"mm.n\", 0, \"oo.p\"]));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.split(\"\", \"\")","suites":["code snippet example","split"],"updatePoint":{"line":333,"column":44},"line":333,"code":"    it(`_.split(\"${source}\", \"${separator}\")`, () => {\n      assert.deepEqual(_.split(source, separator), source.split(separator));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.split(\"\", \"\", )","suites":["code snippet example","split"],"updatePoint":{"line":336,"column":54},"line":336,"code":"    it(`_.split(\"${source}\", \"${separator}\", ${limit})`, () => {\n      assert.deepEqual(_.split(source, separator, limit), source.split(separator, limit));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.inRange(3, 2, 4)","suites":["code snippet example","inRange"],"updatePoint":{"line":350,"column":26},"line":350,"code":"    it('_.inRange(3, 2, 4)', () => {\n      assert.equal(_.inRange(3, 2, 4), inRange(3, 2, 4));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.inRange(4, 8)","suites":["code snippet example","inRange"],"updatePoint":{"line":353,"column":23},"line":353,"code":"    it('_.inRange(4, 8)', () => {\n      assert.equal(_.inRange(4, 8), inRange(4, 8));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.inRange(4, 2)","suites":["code snippet example","inRange"],"updatePoint":{"line":356,"column":23},"line":356,"code":"    it('_.inRange(4, 2)', () => {\n      assert.equal(_.inRange(4, 2), inRange(4, 2));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.inRange(2, 2)","suites":["code snippet example","inRange"],"updatePoint":{"line":359,"column":23},"line":359,"code":"    it('_.inRange(2, 2)', () => {\n      assert.equal(_.inRange(2, 2), inRange(2, 2));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.inRange(1.2, 2)","suites":["code snippet example","inRange"],"updatePoint":{"line":362,"column":25},"line":362,"code":"    it('_.inRange(1.2, 2)', () => {\n      assert.equal(_.inRange(1.2, 2), inRange(1.2, 2));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.inRange(5.2, 4)","suites":["code snippet example","inRange"],"updatePoint":{"line":365,"column":25},"line":365,"code":"    it('_.inRange(5.2, 4)', () => {\n      assert.equal(_.inRange(5.2, 4), inRange(5.2, 4));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.inRange(-3, -2, -6)","suites":["code snippet example","inRange"],"updatePoint":{"line":368,"column":29},"line":368,"code":"    it('_.inRange(-3, -2, -6)', () => {\n      assert.equal(_.inRange(-3, -2, -6), inRange(-3, -2, -6));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.inRange(1, 1, 5)","suites":["code snippet example","inRange"],"updatePoint":{"line":371,"column":26},"line":371,"code":"    it('_.inRange(1, 1, 5)', () => {\n      assert.equal(_.inRange(1, 1, 5), inRange(1, 1, 5));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"random() in range [0, 1]","suites":["code snippet example","random"],"updatePoint":{"line":383,"column":32},"line":383,"code":"    it('random() in range [0, 1]', () => {\n      assert.ok(array.every(() => {\n        const randomValue = random();\n        return randomValue >= 0 && randomValue <= 1;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"random() is float","suites":["code snippet example","random"],"updatePoint":{"line":389,"column":25},"line":389,"code":"    it('random() is float', () => {\n      assert.ok(array.some(() => {\n        const randomValue = random();\n        return !Number.isInteger(randomValue);\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"random(5) in range [0, 5]","suites":["code snippet example","random"],"updatePoint":{"line":395,"column":33},"line":395,"code":"    it('random(5) in range [0, 5]', () => {\n      assert.ok(array.every(() => {\n        const randomValue = random(5);\n        return randomValue >= 0 && randomValue <= 5;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"random(5) is float","suites":["code snippet example","random"],"updatePoint":{"line":401,"column":26},"line":401,"code":"    it('random(5) is float', () => {\n      assert.ok(array.some(() => {\n        const randomValue = random(5);\n        return !Number.isInteger(randomValue);\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"random(-10) supports negative","suites":["code snippet example","random"],"updatePoint":{"line":407,"column":37},"line":407,"code":"    it('random(-10) supports negative', () => {\n      assert.ok(array.every(() => {\n        const randomValue = random(-10);\n        return randomValue <= 0;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"random(10, 5) swap the bounds","suites":["code snippet example","random"],"updatePoint":{"line":413,"column":37},"line":413,"code":"    it('random(10, 5) swap the bounds', () => {\n      assert.ok(array.every(() => {\n        const randomValue = random(10, 5);\n        return randomValue >= 5 && randomValue <= 10;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"random(-10, 10) supports negative","suites":["code snippet example","random"],"updatePoint":{"line":419,"column":41},"line":419,"code":"    it('random(-10, 10) supports negative', () => {\n      assert.ok(array.some(() => {\n        const randomValue = random(-10, 10);\n        return randomValue > 0;\n      }));\n      assert.ok(array.some(() => {\n        const randomValue = random(-10, 10);\n        return randomValue < 0;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"random(-10, 10) in range [-10, 10]","suites":["code snippet example","random"],"updatePoint":{"line":429,"column":42},"line":429,"code":"    it('random(-10, 10) in range [-10, 10]', () => {\n      assert.ok(array.every(() => {\n        const randomValue = random(-10, 10);\n        return randomValue >= -10 && randomValue <= 10;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"random(1.2, 5.2) supports floats","suites":["code snippet example","random"],"updatePoint":{"line":435,"column":40},"line":435,"code":"    it('random(1.2, 5.2) supports floats', () => {\n      assert.ok(array.every(() => {\n        const randomValue = random(1.2, 5.2);\n        return randomValue >= 1.2 && randomValue <= 5.2;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"random(100000, 100001) in range [100000, 100001]","suites":["code snippet example","random"],"updatePoint":{"line":441,"column":56},"line":441,"code":"    it('random(100000, 100001) in range [100000, 100001]', () => {\n      assert.ok(array.every(() => {\n        const randomValue = random(100000, 100001);\n        return randomValue >= 100000 && randomValue <= 100001;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"randomInt() return `0` or `1`","suites":["code snippet example","randomInt"],"updatePoint":{"line":459,"column":37},"line":459,"code":"    it('randomInt() return `0` or `1`', () => {\n      const randoms = uniq(array.map(() => {\n        return randomInt();\n      })).sort();\n      assert.deepStrictEqual(randoms, [0, 1]);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"randomInt(5) in range [0, 5]","suites":["code snippet example","randomInt"],"updatePoint":{"line":465,"column":36},"line":465,"code":"    it('randomInt(5) in range [0, 5]', () => {\n      assert.ok(array.every(() => {\n        const randomValue = randomInt(5);\n        return randomValue >= 0 && randomValue <= 5;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"randomInt(5) is integer","suites":["code snippet example","randomInt"],"updatePoint":{"line":471,"column":31},"line":471,"code":"    it('randomInt(5) is integer', () => {\n      assert.ok(array.some(() => {\n        const randomValue = randomInt(5);\n        return Number.isInteger(randomValue);\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"randomInt(-10) supports negative","suites":["code snippet example","randomInt"],"updatePoint":{"line":477,"column":40},"line":477,"code":"    it('randomInt(-10) supports negative', () => {\n      assert.ok(array.every(() => {\n        const randomValue = randomInt(-10);\n        return randomValue <= 0;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"randomInt(10, 5) swap the bounds","suites":["code snippet example","randomInt"],"updatePoint":{"line":483,"column":40},"line":483,"code":"    it('randomInt(10, 5) swap the bounds', () => {\n      assert.ok(array.every(() => {\n        const randomValue = randomInt(10, 5);\n        return randomValue >= 5 && randomValue <= 10;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"randomInt(-10, 10) supports negative","suites":["code snippet example","randomInt"],"updatePoint":{"line":489,"column":44},"line":489,"code":"    it('randomInt(-10, 10) supports negative', () => {\n      assert.ok(array.some(() => {\n        const randomValue = randomInt(-10, 10);\n        return randomValue > 0;\n      }));\n      assert.ok(array.some(() => {\n        const randomValue = randomInt(-10, 10);\n        return randomValue < 0;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"randomInt(-10, 10) in range [-10, 10]","suites":["code snippet example","randomInt"],"updatePoint":{"line":499,"column":45},"line":499,"code":"    it('randomInt(-10, 10) in range [-10, 10]', () => {\n      assert.ok(array.every(() => {\n        const randomValue = randomInt(-10, 10);\n        return randomValue >= -10 && randomValue <= 10;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"randomInt(1.2, 5.2) supports floats","suites":["code snippet example","randomInt"],"updatePoint":{"line":505,"column":43},"line":505,"code":"    it('randomInt(1.2, 5.2) supports floats', () => {\n      assert.ok(array.every(() => {\n        const randomValue = randomInt(1.2, 5.2);\n        return randomValue >= 2 && randomValue <= 5;\n      }));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"randomInt(100000, 100001) return `100000` or `100001`","suites":["code snippet example","randomInt"],"updatePoint":{"line":511,"column":61},"line":511,"code":"    it('randomInt(100000, 100001) return `100000` or `100001`', () => {\n      const randoms = uniq(array.map(() => {\n        return randomInt(100000, 100001);\n      })).sort();\n      assert.deepStrictEqual(randoms, [100000, 100001]);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"clamp(-10, -5, 5) returns lower bound if number is less than it","suites":["code snippet example","clamp"],"updatePoint":{"line":531,"column":71},"line":531,"code":"    it('clamp(-10, -5, 5) returns lower bound if number is less than it', () => {\n      assert.deepStrictEqual(clamp(-10, -5, 5), -5);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"clamp(10, -5, 5) returns upper bound if number is greater than it","suites":["code snippet example","clamp"],"updatePoint":{"line":534,"column":73},"line":534,"code":"    it('clamp(10, -5, 5) returns upper bound if number is greater than it', () => {\n      assert.deepStrictEqual(clamp(10, -5, 5), 5);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"clamp(10, -5) treats second parameter as upper bound","suites":["code snippet example","clamp"],"updatePoint":{"line":537,"column":60},"line":537,"code":"    it('clamp(10, -5) treats second parameter as upper bound', () => {\n      assert.deepStrictEqual(clamp(10, -5), -5);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.padStart(\"123\", 5, \"0\")","suites":["code snippet example","padStart"],"updatePoint":{"line":542,"column":33},"line":542,"code":"    it('_.padStart(\"123\", 5, \"0\")', () => {\n      assert.equal(_.padStart(\"123\", 5, '0'), \"123\".padStart(5, '0'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.padStart(\"123\", 6, \"_-\")","suites":["code snippet example","padStart"],"updatePoint":{"line":545,"column":34},"line":545,"code":"    it('_.padStart(\"123\", 6, \"_-\")', () => {\n      assert.equal(_.padStart(\"123\", 6, '_-'), \"123\".padStart(6, '_-'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.padEnd(\"123\", 5, \"0\")","suites":["code snippet example","padEnd"],"updatePoint":{"line":550,"column":31},"line":550,"code":"    it('_.padEnd(\"123\", 5, \"0\")', () => {\n      assert.equal(_.padEnd(\"123\", 5, '0'), \"123\".padEnd(5, '0'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.padEnd(\"123\", 6, \"_-\")","suites":["code snippet example","padEnd"],"updatePoint":{"line":553,"column":32},"line":553,"code":"    it('_.padEnd(\"123\", 6, \"_-\")', () => {\n      assert.equal(_.padEnd(\"123\", 6, '_-'), \"123\".padEnd(6, '_-'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.upperFirst(\"george\")","suites":["code snippet example","upperFirst"],"updatePoint":{"line":562,"column":30},"line":562,"code":"    it('_.upperFirst(\"george\")', () => {\n      assert.equal(_.upperFirst('george'), upperFirst('george'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.upperFirst(null)","suites":["code snippet example","upperFirst"],"updatePoint":{"line":565,"column":26},"line":565,"code":"    it('_.upperFirst(null)', () => {\n      assert.equal(_.upperFirst(null), upperFirst(null));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.upperFirst(\"\")","suites":["code snippet example","upperFirst"],"updatePoint":{"line":568,"column":24},"line":568,"code":"    it('_.upperFirst(\"\")', () => {\n      assert.equal(_.upperFirst(''), upperFirst(''));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isString(\"abc\")","suites":["code snippet example","isString"],"updatePoint":{"line":581,"column":25},"line":581,"code":"    it('_.isString(\"abc\")', () => {\n      assert.deepEqual(_.isString(\"abc\"), isString(\"abc\"));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isString(1)","suites":["code snippet example","isString"],"updatePoint":{"line":584,"column":21},"line":584,"code":"    it('_.isString(1)', () => {\n      assert.deepEqual(_.isString(1), isString(1));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isString(\"\")","suites":["code snippet example","isString"],"updatePoint":{"line":587,"column":22},"line":587,"code":"    it('_.isString(\"\")', () => {\n      assert.deepEqual(_.isString(''), isString(''));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.lowerFirst(\"Fred\")","suites":["code snippet example","lowerFirst"],"updatePoint":{"line":596,"column":28},"line":596,"code":"    it('_.lowerFirst(\"Fred\")', () => {\n      assert.equal(_.lowerFirst('fred'), lowerFirst('fred'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.lowerFirst(null)","suites":["code snippet example","lowerFirst"],"updatePoint":{"line":599,"column":26},"line":599,"code":"    it('_.lowerFirst(null)', () => {\n      assert.equal(_.lowerFirst(null), lowerFirst(null));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.lowerFirst(\"\")","suites":["code snippet example","lowerFirst"],"updatePoint":{"line":602,"column":24},"line":602,"code":"    it('_.lowerFirst(\"\")', () => {\n      assert.equal(_.lowerFirst(''), lowerFirst(''));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isUndefined(definedVariable)","suites":["code snippet example","isUndefined"],"updatePoint":{"line":611,"column":38},"line":611,"code":"    it('_.isUndefined(definedVariable)', () => {\n      assert.equal(_.isUndefined(definedVariable), definedVariable === undefined);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_(definedVariable).isUndefined()","suites":["code snippet example","isUndefined"],"updatePoint":{"line":614,"column":40},"line":614,"code":"    it('_(definedVariable).isUndefined()', () => {\n      assert.equal(_(definedVariable).isUndefined(), definedVariable === undefined);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isUndefined(undefinedVariable)","suites":["code snippet example","isUndefined"],"updatePoint":{"line":617,"column":40},"line":617,"code":"    it('_.isUndefined(undefinedVariable)', () => {\n      assert.equal(_.isUndefined(undefinedVariable), undefinedVariable === undefined);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_(undefinedVariable).isUndefined()","suites":["code snippet example","isUndefined"],"updatePoint":{"line":620,"column":42},"line":620,"code":"    it('_(undefinedVariable).isUndefined()', () => {\n      assert.equal(_(undefinedVariable).isUndefined(), undefinedVariable === undefined);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.flatten(twoLayerArray)","suites":["code snippet example","flatten"],"updatePoint":{"line":625,"column":32},"line":625,"code":"    it('_.flatten(twoLayerArray)', () => {\n      const testArray = [1, 2[(3, 4)]];\n      assert.deepEqual(_.flatten(testArray), testArray.reduce((a, b) => a.concat(b), []));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.flatten(multiLayerArray)","suites":["code snippet example","flatten"],"updatePoint":{"line":629,"column":34},"line":629,"code":"    it('_.flatten(multiLayerArray)', () => {\n      const testArray = [1, 2[(3, 4, [5, 6, [7, 8]])]];\n      assert.deepEqual(_.flatten(testArray), testArray.reduce((a, b) => a.concat(b), []));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.forEach(array)","suites":["code snippet example","forEach"],"updatePoint":{"line":635,"column":24},"line":635,"code":"    it('_.forEach(array)', () => {\n      const testArray = [1, 2, 3, 4];\n      let lodashOutput = [];\n      let nativeOutput = [];\n\n      _.forEach(testArray, element => {\n        lodashOutput.push(element);\n      });\n\n      testArray.forEach(element => {\n        nativeOutput.push(element);\n      });\n      assert.deepEqual(lodashOutput, nativeOutput);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.forEach(object)","suites":["code snippet example","forEach"],"updatePoint":{"line":649,"column":25},"line":649,"code":"    it('_.forEach(object)', () => {\n      const testObject = {\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4\n      };\n      let lodashOutput = [];\n      let nativeOutput = [];\n\n      _.forEach(testObject, value => {\n        lodashOutput.push(value);\n      });\n\n      Object.entries(testObject).forEach(([key, value]) => {\n        nativeOutput.push(value);\n      });\n      assert.deepEqual(lodashOutput, nativeOutput);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.startsWith('abc', 'a')","suites":["code snippet example","startsWith"],"updatePoint":{"line":670,"column":32},"line":670,"code":"    it(`_.startsWith('abc', 'a')`, () => {\n      assert.deepEqual(_.startsWith('abc', 'a'), 'abc'.startsWith('a'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.startsWith('abc', 'b')","suites":["code snippet example","startsWith"],"updatePoint":{"line":673,"column":32},"line":673,"code":"    it(`_.startsWith('abc', 'b')`, () => {\n      assert.deepEqual(_.startsWith('abc', 'b'), 'abc'.startsWith('b'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.startsWith('abc', 'b', 1)","suites":["code snippet example","startsWith"],"updatePoint":{"line":676,"column":35},"line":676,"code":"    it(`_.startsWith('abc', 'b', 1)`, () => {\n      assert.deepEqual(_.startsWith('abc', 'b', 1), 'abc'.startsWith('b', 1));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.endsWith('abc', 'c')","suites":["code snippet example","endsWith"],"updatePoint":{"line":681,"column":30},"line":681,"code":"    it(`_.endsWith('abc', 'c')`, () => {\n      assert.deepEqual(_.endsWith('abc', 'c'), 'abc'.endsWith('c'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.endsWith('abc', 'b')","suites":["code snippet example","endsWith"],"updatePoint":{"line":684,"column":30},"line":684,"code":"    it(`_.endsWith('abc', 'b')`, () => {\n      assert.deepEqual(_.endsWith('abc', 'b'), 'abc'.endsWith('b'));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.endsWith('abc', 'b', 2)","suites":["code snippet example","endsWith"],"updatePoint":{"line":687,"column":33},"line":687,"code":"    it(`_.endsWith('abc', 'b', 2)`, () => {\n      assert.deepEqual(_.endsWith('abc', 'b', 2), 'abc'.endsWith('b', 2));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"throttle is not called more than once within timeframe","suites":["code snippet example","throttle"],"updatePoint":{"line":704,"column":62},"line":704,"code":"    it('throttle is not called more than once within timeframe', () => {\n      let callCount = 0;\n      const fn = throttle(() => callCount++, 100);\n      fn();\n      fn();\n      fn();\n      assert.equal(callCount, 1);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isFunction(setTimeout)","suites":["code snippet example","isFunction"],"updatePoint":{"line":718,"column":32},"line":718,"code":"    it('_.isFunction(setTimeout)', () => {\n      assert.deepEqual(_.isFunction(setTimeout), isFunction(setTimeout));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isFunction(1)","suites":["code snippet example","isFunction"],"updatePoint":{"line":721,"column":23},"line":721,"code":"    it('_.isFunction(1)', () => {\n      assert.deepEqual(_.isFunction(1), isFunction(1));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.isFunction(abc)","suites":["code snippet example","isFunction"],"updatePoint":{"line":724,"column":25},"line":724,"code":"    it('_.isFunction(abc)', () => {\n      assert.deepEqual(_.isFunction(\"abc\"), isFunction(\"abc\"));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should take an iteratee function","suites":["code snippet example","unionBy"],"updatePoint":{"line":740,"column":40},"line":740,"code":"    it('should take an iteratee function', () => {\n      assert.deepStrictEqual(_.unionBy([2.1], [1.2, 2.3], Math.floor), unionBy([2.1], [1.2, 2.3], Math.floor));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should output values from the first possible array","suites":["code snippet example","unionBy"],"updatePoint":{"line":743,"column":58},"line":743,"code":"    it('should output values from the first possible array', () => {\n      assert.deepStrictEqual(_.unionBy([{\n        x: 1,\n        y: 1\n      }], [{\n        x: 1,\n        y: 2\n      }], x => x.x), unionBy([{\n        x: 1,\n        y: 1\n      }], [{\n        x: 1,\n        y: 2\n      }], x => x.x));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.capitalize(\"FRED\")","suites":["code snippet example","capitalize"],"updatePoint":{"line":764,"column":28},"line":764,"code":"    it('_.capitalize(\"FRED\")', () => {\n      assert.deepStrictEqual(_.capitalize(\"FRED\"), capitalize(\"FRED\"));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.capitalize(\"fred\")","suites":["code snippet example","capitalize"],"updatePoint":{"line":767,"column":28},"line":767,"code":"    it('_.capitalize(\"fred\")', () => {\n      assert.deepStrictEqual(_.capitalize(\"fred\"), capitalize(\"fred\"));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.capitalize(\"HELLO WORLD\")","suites":["code snippet example","capitalize"],"updatePoint":{"line":770,"column":35},"line":770,"code":"    it('_.capitalize(\"HELLO WORLD\")', () => {\n      assert.deepStrictEqual(_.capitalize(\"HELLO WORLD\"), capitalize(\"HELLO WORLD\"));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"_.capitalize(\"hello world\")","suites":["code snippet example","capitalize"],"updatePoint":{"line":773,"column":35},"line":773,"code":"    it('_.capitalize(\"hello world\")', () => {\n      assert.deepStrictEqual(_.capitalize(\"hello world\"), capitalize(\"hello world\"));\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"sets up default values the same way","suites":["code snippet example","defaults"],"updatePoint":{"line":778,"column":43},"line":778,"code":"    it('sets up default values the same way', () => {\n      const defaultValues = {\n        a: 1,\n        b: 2,\n        c: 3\n      };\n      const givenValues = {\n        b: 4\n      };\n\n      const lodashObject = _.defaults(givenValues, defaultValues);\n\n      const vanillaObject = Object.assign({}, defaultValues, givenValues);\n      assert.deepStrictEqual(vanillaObject, {\n        a: 1,\n        b: 4,\n        c: 3\n      });\n      assert.deepStrictEqual(vanillaObject, lodashObject);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"},{"name":"should handle nested values equally","suites":["code snippet example","defaults"],"updatePoint":{"line":798,"column":43},"line":798,"code":"    it('should handle nested values equally', () => {\n      const defaultValues = {\n        a: 1,\n        b: 2,\n        c: {\n          x: 3,\n          y: 4\n        }\n      };\n      const givenValues = {\n        c: {\n          x: 5\n        }\n      };\n\n      const lodashObject = _.defaults(givenValues, defaultValues);\n\n      const vanillaObject = Object.assign({}, defaultValues, givenValues);\n      assert.deepStrictEqual(vanillaObject, {\n        a: 1,\n        b: 2,\n        c: {\n          x: 5\n        }\n      });\n      assert.deepStrictEqual(vanillaObject, lodashObject);\n    });","file":"unit/all.js","skipped":false,"dir":"tests"}]}