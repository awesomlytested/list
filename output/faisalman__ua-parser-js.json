{"repo":"faisalman/ua-parser-js","url":"https://github.com/faisalman/ua-parser-js","branch":"master","configs":[{"package":"ua-parser-js","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"getResult() should returns JSON","suites":["Returns"],"updatePoint":{"line":70,"column":37,"index":2426},"line":70,"code":"  it('getResult() should returns JSON', function (done) {\n    assert.deepEqual(new UAParser('').getResult(), {\n      ua: '',\n      browser: {\n        name: undefined,\n        version: undefined,\n        major: undefined\n      },\n      cpu: {\n        architecture: undefined\n      },\n      device: {\n        vendor: undefined,\n        model: undefined,\n        type: undefined\n      },\n      engine: {\n        name: undefined,\n        version: undefined\n      },\n      os: {\n        name: undefined,\n        version: undefined\n      }\n    });\n    done();\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"should loaded automatically","suites":["Using Require.js"],"updatePoint":{"line":125,"column":33,"index":12162},"line":125,"code":"  it('should loaded automatically', function (done) {\n    requirejs.config({\n      baseUrl: 'dist',\n      paths: {\n        'ua-parser-js': 'ua-parser.min'\n      }\n    });\n    requirejs(['ua-parser-js'], function (ua) {\n      var parser = new ua('Dillo/1.0');\n      assert.deepStrictEqual(parser.getBrowser().name, 'Dillo');\n      done();\n    });\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"all regexes in main file","suites":["Testing regexes","Begin testing"],"updatePoint":{"line":157,"column":32,"index":13017},"line":157,"code":"    it('all regexes in main file', function () {\n      regexes.forEach(function (regex) {\n        describe('Test against `safe-regex` : ' + regex, function () {\n          it('should be safe from potentially vulnerable regex', function () {\n            assert.strictEqual(safe(regex), true);\n          });\n        });\n      });\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should be safe from potentially vulnerable regex","suites":["Testing regexes","Begin testing"],"updatePoint":{"line":160,"column":62,"index":13208},"line":160,"code":"          it('should be safe from potentially vulnerable regex', function () {\n            assert.strictEqual(safe(regex), true);\n          });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should match full name","suites":["is() utility method"],"updatePoint":{"line":170,"column":28,"index":13637},"line":170,"code":"  it('Should match full name', function () {\n    assert.strictEqual(uap.getBrowser().name, \"IEMobile\");\n    assert.strictEqual(uap.getBrowser().is(\"IEMobile\"), true);\n    assert.strictEqual(uap.getBrowser().is(\"IE\"), false);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should ignore \"Browser\" suffix","suites":["is() utility method"],"updatePoint":{"line":175,"column":36,"index":13876},"line":175,"code":"  it('Should ignore \"Browser\" suffix', function () {\n    assert.strictEqual(uap.getBrowser().is(\"IEMobile Browser\"), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should ignore case","suites":["is() utility method"],"updatePoint":{"line":178,"column":24,"index":13994},"line":178,"code":"  it('Should ignore case', function () {\n    assert.strictEqual(uap.getEngine().name, \"Trident\");\n    assert.strictEqual(uap.getEngine().is(\"tRiDeNt\"), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should get exact name","suites":["is() utility method"],"updatePoint":{"line":182,"column":27,"index":14162},"line":182,"code":"  it('Should get exact name', function () {\n    assert.strictEqual(uap.getOS().name, \"Windows Phone\");\n    assert.strictEqual(uap.getOS().is(\"Windows Phone\"), true);\n    assert.strictEqual(uap.getOS().is(\"Windows Phone OS\"), true);\n    assert.strictEqual(uap.getOS().is(\"Windows Mobile\"), false);\n    assert.strictEqual(uap.getOS().is(\"Android\"), false);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should check all device properties","suites":["is() utility method"],"updatePoint":{"line":189,"column":40,"index":14536},"line":189,"code":"  it('Should check all device properties', function () {\n    assert.deepEqual(uap.getDevice(), {\n      vendor: \"Nokia\",\n      model: \"Lumia 635\",\n      type: \"mobile\"\n    });\n    assert.strictEqual(uap.getDevice().is(\"Nokia\"), true);\n    assert.strictEqual(uap.getDevice().is(\"Lumia 635\"), true);\n    assert.strictEqual(uap.getDevice().is(\"mobile\"), true);\n    assert.strictEqual(uap.getResult().device.is(\"Nokia\"), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should get result after reassignment","suites":["is() utility method"],"updatePoint":{"line":200,"column":42,"index":14967},"line":200,"code":"  it('Should get result after reassignment', function () {\n    uap.setUA(\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\");\n    assert.strictEqual(uap.getOS().name, \"Mac OS\");\n    assert.strictEqual(uap.getOS().is(\"Mac OS\"), true);\n    assert.strictEqual(uap.getOS().is(\"M ac\"), false);\n    assert.strictEqual(uap.getOS().is(\"macOS\"), true);\n    assert.strictEqual(uap.getOS().is(\"mac OS\"), true);\n    assert.strictEqual(uap.getOS().is(\"M      a c   \"), false);\n    assert.strictEqual(uap.getOS().is(\"Mac OS OS\"), false);\n    assert.strictEqual(uap.getOS().is(\"Mac OS X\"), false);\n    assert.strictEqual(uap.getBrowser().is(\"Chrome\"), true);\n    assert.strictEqual(uap.getEngine().is(\"Blink\"), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should refrain from \"undefined\" until all properties are checked","suites":["is() utility method"],"updatePoint":{"line":213,"column":70,"index":15775},"line":213,"code":"  it('Should refrain from \"undefined\" until all properties are checked', function () {\n    assert.strictEqual(uap.getDevice().is(\"undefined\"), false);\n    assert.strictEqual(uap.getDevice().is(\"Apple\"), true);\n    uap.setUA(\"\");\n    assert.strictEqual(uap.getDevice().is(\"undefined\"), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should accept exact arch name","suites":["is() utility method"],"updatePoint":{"line":221,"column":35,"index":16098},"line":221,"code":"  it('Should accept exact arch name', function () {\n    uap.setUA(\"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:19.0) Gecko/20100101 Firefox/19.0\");\n    assert.strictEqual(uap.getCPU().architecture, \"ia32\");\n    assert.strictEqual(uap.getCPU().is(\"ia32\"), true);\n    assert.strictEqual(uap.getCPU().is(\"x86\"), false);\n    uap.setUA(\"Opera/9.80 (X11; Linux x86_64; U; Linux Mint; en) Presto/2.2.15 Version/10.10\");\n    assert.strictEqual(uap.getCPU().architecture, \"amd64\");\n    assert.strictEqual(uap.getCPU().is(\"amd64\"), true);\n    assert.strictEqual(uap.getCPU().is(\"x86-64\"), false);\n    assert.strictEqual(uap.getCPU().is(\"x64\"), false);\n  });","file":"test.js","skipped":false,"dir":"test"}]}