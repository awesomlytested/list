{"repo":"claudiajs/claudia","url":"https://github.com/claudiajs/claudia","branch":"master","configs":[{"package":"claudia","lang":"js","dir":"spec","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"fails when the pool ID is not defined in options","suites":["addCognitoUserPoolTrigger"],"line":39,"updatePoint":{"line":39,"column":54,"index":1286},"code":"  it('fails when the pool ID is not defined in options', done => {\n    config['user-pool-id'] = '';\n    config.events = 'PreSignUp';\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('user pool id not specified. provide with --user-pool-id');\n      done();\n    });\n  });","file":"add-cognito-user-pool-trigger-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the source dir does not contain the project config file","suites":["addCognitoUserPoolTrigger"],"line":47,"updatePoint":{"line":47,"column":72,"index":1604},"code":"  it('fails when the source dir does not contain the project config file', done => {\n    config.events = 'PreSignUp';\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('claudia.json does not exist in the source folder');\n      done();\n    });\n  });","file":"add-cognito-user-pool-trigger-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the events are not specified in the options","suites":["addCognitoUserPoolTrigger"],"line":54,"updatePoint":{"line":54,"column":60,"index":1870},"code":"  it('fails when the events are not specified in the options', done => {\n    config.events = '';\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('events not specified. provide with --events');\n      done();\n    });\n  });","file":"add-cognito-user-pool-trigger-spec.js","skipped":false,"dir":"spec"},{"name":"wires up the unqualified lambda function if no version requested","suites":["addCognitoUserPoolTrigger","when params are valid"],"line":78,"updatePoint":{"line":78,"column":72,"index":2721},"code":"    it('wires up the unqualified lambda function if no version requested', done => {\n      config.events = 'PreAuthentication';\n      createLambda().then(() => lambda.getFunctionConfiguration({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => functionArn = lambdaResult.FunctionArn).then(() => underTest(config)).then(() => cognitoIdentityServiceProvider.describeUserPool({\n        UserPoolId: newObjects.userPoolId\n      }).promise()).then(result => {\n        expect(result.UserPool.LambdaConfig).toEqual({\n          PreAuthentication: functionArn\n        });\n      }).then(done, done.fail);\n    });","file":"add-cognito-user-pool-trigger-spec.js","skipped":false,"dir":"spec"},{"name":"keeps other user pool attributes (aws bug workaround check)","suites":["addCognitoUserPoolTrigger","when params are valid"],"line":90,"updatePoint":{"line":90,"column":67,"index":3343},"code":"    it('keeps other user pool attributes (aws bug workaround check)', done => {\n      config.events = 'PreAuthentication';\n      createLambda().then(() => lambda.getFunctionConfiguration({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => functionArn = lambdaResult.FunctionArn).then(() => cognitoIdentityServiceProvider.updateUserPool({\n        UserPoolId: newObjects.userPoolId,\n        EmailVerificationMessage: 'Hi there token {####}',\n        EmailVerificationSubject: 'email-subject'\n      }).promise()).then(() => underTest(config)).then(() => cognitoIdentityServiceProvider.describeUserPool({\n        UserPoolId: newObjects.userPoolId\n      }).promise()).then(result => {\n        expect(result.UserPool.EmailVerificationSubject).toEqual('email-subject');\n        expect(result.UserPool.EmailVerificationMessage).toEqual('Hi there token {####}');\n        expect(result.UserPool.LambdaConfig).toEqual({\n          PreAuthentication: functionArn\n        });\n      }).then(done, done.fail);\n    });","file":"add-cognito-user-pool-trigger-spec.js","skipped":false,"dir":"spec"},{"name":"adds multiple events if specified","suites":["addCognitoUserPoolTrigger","when params are valid"],"line":108,"updatePoint":{"line":108,"column":41,"index":4344},"code":"    it('adds multiple events if specified', done => {\n      config.events = 'PreAuthentication,PreSignUp';\n      createLambda().then(() => lambda.getFunctionConfiguration({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => functionArn = lambdaResult.FunctionArn).then(() => underTest(config)).then(() => cognitoIdentityServiceProvider.describeUserPool({\n        UserPoolId: newObjects.userPoolId\n      }).promise()).then(result => {\n        expect(result.UserPool.LambdaConfig).toEqual({\n          PreAuthentication: functionArn,\n          PreSignUp: functionArn\n        });\n      }).then(done, done.fail);\n    });","file":"add-cognito-user-pool-trigger-spec.js","skipped":false,"dir":"spec"},{"name":"binds to an alias, if the version is provided","suites":["addCognitoUserPoolTrigger","when params are valid"],"line":121,"updatePoint":{"line":121,"column":53,"index":4996},"code":"    it('binds to an alias, if the version is provided', done => {\n      config.events = 'PreAuthentication';\n      createConfig.version = 'special';\n      config.version = 'special';\n      createLambda().then(() => lambda.getFunctionConfiguration({\n        FunctionName: testRunName,\n        Qualifier: 'special'\n      }).promise()).then(lambdaResult => functionArn = lambdaResult.FunctionArn).then(() => underTest(config)).then(() => cognitoIdentityServiceProvider.describeUserPool({\n        UserPoolId: newObjects.userPoolId\n      }).promise()).then(result => {\n        expect(result.UserPool.LambdaConfig).toEqual({\n          PreAuthentication: functionArn\n        });\n      }).then(done, done.fail);\n    });","file":"add-cognito-user-pool-trigger-spec.js","skipped":false,"dir":"spec"},{"name":"adds permission for the trigger to run","suites":["addCognitoUserPoolTrigger","when params are valid"],"line":136,"updatePoint":{"line":136,"column":46,"index":5701},"code":"    it('adds permission for the trigger to run', done => {\n      config.events = 'PreSignUp';\n      createLambda().then(() => underTest(config)).then(() => cognitoIdentityServiceProvider.createUserPoolClient({\n        ClientName: 'TestClient',\n        UserPoolId: newObjects.userPoolId,\n        GenerateSecret: false,\n        ExplicitAuthFlows: ['ADMIN_NO_SRP_AUTH']\n      }).promise()).then(result => cognitoIdentityServiceProvider.signUp({\n        ClientId: result.UserPoolClient.ClientId,\n        Username: 'Bob-123',\n        Password: 'Password1!'\n      }).promise()).then(done.fail, err => {\n        expect(err.code).toEqual('UserLambdaValidationException');\n        expect(err.message).toEqual(`PreSignUp failed with error rejected by lambda ${testRunName}.`);\n        done();\n      });\n    });","file":"add-cognito-user-pool-trigger-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the topic is not defined in options","suites":["addIOTTopicRuleEventSource"],"line":49,"updatePoint":{"line":49,"column":52,"index":1531},"code":"  it('fails when the topic is not defined in options', done => {\n    config.sql = '';\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('SQL statement not specified. please provide it with --sql');\n      done();\n    });\n  });","file":"add-iot-topic-rule-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the source dir does not contain the project config file","suites":["addIOTTopicRuleEventSource"],"line":56,"updatePoint":{"line":56,"column":72,"index":1806},"code":"  it('fails when the source dir does not contain the project config file', done => {\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('claudia.json does not exist in the source folder');\n      done();\n    });\n  });","file":"add-iot-topic-rule-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda name","suites":["addIOTTopicRuleEventSource"],"line":62,"updatePoint":{"line":62,"column":73,"index":2052},"code":"  it('fails when the project config file does not contain the lambda name', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), '{}', 'utf8');\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.name missing from claudia.json');\n      done();\n    });\n  });","file":"add-iot-topic-rule-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda region","suites":["addIOTTopicRuleEventSource"],"line":69,"updatePoint":{"line":69,"column":75,"index":2389},"code":"  it('fails when the project config file does not contain the lambda region', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify({\n      lambda: {\n        name: 'xxx'\n      }\n    }), 'utf8');\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.region missing from claudia.json');\n      done();\n    });\n  });","file":"add-iot-topic-rule-spec.js","skipped":false,"dir":"spec"},{"name":"sets up privileges and rule notifications if no version given","suites":["addIOTTopicRuleEventSource","when params are valid"],"line":97,"updatePoint":{"line":97,"column":69,"index":3348},"code":"    it('sets up privileges and rule notifications if no version given', done => {\n      let functionArn;\n      createLambda().then(() => lambda.getFunctionConfiguration({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => functionArn = lambdaResult.FunctionArn).then(() => underTest(config)).then(result => newObjects.iotTopicRule = result.ruleName).then(ruleName => iot.getTopicRule({\n        ruleName: ruleName\n      }).promise()).then(topicRule => {\n        expect(topicRule.rule.sql).toEqual('SELECT * FROM \\'iot/+\\'');\n        expect(topicRule.rule.awsIotSqlVersion).toEqual('2015-10-08');\n        expect(topicRule.rule.actions).toEqual([{\n          lambda: {\n            functionArn: functionArn\n          }\n        }]);\n      }).then(done, done.fail);\n    });","file":"add-iot-topic-rule-spec.js","skipped":false,"dir":"spec"},{"name":"invokes lambda from IOT when no version is given","suites":["addIOTTopicRuleEventSource","when params are valid"],"line":113,"updatePoint":{"line":113,"column":56,"index":4126},"code":"    it('invokes lambda from IOT when no version is given', done => {\n      createLambda().then(() => underTest(config)).then(result => newObjects.iotTopicRule = result.ruleName).then(() => postToDefaultEndpoint('iot/987', JSON.stringify({\n        message: 'Hello From ' + testRunName\n      }))).then(() => pollForLogEvents(`/aws/lambda/${testRunName}`, `Hello From ${testRunName}`, awsRegion)).then(events => {\n        expect(events.length).toEqual(1);\n      }).then(done, done.fail);\n    });","file":"add-iot-topic-rule-spec.js","skipped":false,"dir":"spec"},{"name":"sets up the rule name, sql version and description if provided","suites":["addIOTTopicRuleEventSource","when params are valid"],"line":120,"updatePoint":{"line":120,"column":70,"index":4633},"code":"    it('sets up the rule name, sql version and description if provided', done => {\n      let functionArn;\n      config.ruleName = 'test_rule_' + testRunName.replace(/-/g, '');\n      config.description = 'test-rule-description';\n      config.sqlVersion = 'beta';\n      createLambda().then(() => lambda.getFunctionConfiguration({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => functionArn = lambdaResult.FunctionArn).then(() => underTest(config)).then(result => newObjects.iotTopicRule = result.ruleName).then(ruleName => iot.getTopicRule({\n        ruleName: ruleName\n      }).promise()).then(topicRule => {\n        expect(topicRule.rule.ruleName).toEqual('test_rule_' + testRunName.replace(/-/g, ''));\n        expect(topicRule.rule.sql).toEqual('SELECT * FROM \\'iot/+\\'');\n        expect(topicRule.rule.awsIotSqlVersion).toEqual('beta');\n        expect(topicRule.rule.ruleDisabled).toEqual(false);\n        expect(topicRule.rule.actions).toEqual([{\n          lambda: {\n            functionArn: functionArn\n          }\n        }]);\n        expect(topicRule.rule.description).toEqual('test-rule-description');\n      }).then(done, done.fail);\n    });","file":"add-iot-topic-rule-spec.js","skipped":false,"dir":"spec"},{"name":"binds to an alias, if the version is provided","suites":["addIOTTopicRuleEventSource","when params are valid"],"line":142,"updatePoint":{"line":142,"column":53,"index":5790},"code":"    it('binds to an alias, if the version is provided', done => {\n      let functionArn;\n      createConfig.version = 'special';\n      config.version = 'special';\n      createLambda().then(() => lambda.getFunctionConfiguration({\n        FunctionName: testRunName,\n        Qualifier: 'special'\n      }).promise()).then(lambdaResult => functionArn = lambdaResult.FunctionArn).then(() => underTest(config)).then(result => newObjects.iotTopicRule = result.ruleName).then(ruleName => iot.getTopicRule({\n        ruleName: ruleName\n      }).promise()).then(topicRule => {\n        expect(topicRule.rule.sql).toEqual('SELECT * FROM \\'iot/+\\'');\n        expect(topicRule.rule.awsIotSqlVersion).toEqual('2015-10-08');\n        expect(topicRule.rule.actions).toEqual([{\n          lambda: {\n            functionArn: functionArn\n          }\n        }]);\n        expect(topicRule.rule.actions[0].lambda.functionArn).toMatch(/:special$/);\n      }).then(done, done.fail);\n    });","file":"add-iot-topic-rule-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the stream is not defined in options","suites":["addKinesisEventSource"],"line":68,"updatePoint":{"line":68,"column":53,"index":2229},"code":"  it('fails when the stream is not defined in options', done => {\n    config.stream = '';\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('Kinesis stream not specified. please provide it with --stream');\n      done();\n    });\n  });","file":"add-kinesis-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the source dir does not contain the project config file","suites":["addKinesisEventSource"],"line":75,"updatePoint":{"line":75,"column":72,"index":2511},"code":"  it('fails when the source dir does not contain the project config file', done => {\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('claudia.json does not exist in the source folder');\n      done();\n    });\n  });","file":"add-kinesis-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda name","suites":["addKinesisEventSource"],"line":81,"updatePoint":{"line":81,"column":73,"index":2757},"code":"  it('fails when the project config file does not contain the lambda name', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), '{}', 'utf8');\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.name missing from claudia.json');\n      done();\n    });\n  });","file":"add-kinesis-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda region","suites":["addKinesisEventSource"],"line":88,"updatePoint":{"line":88,"column":75,"index":3094},"code":"  it('fails when the project config file does not contain the lambda region', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify({\n      lambda: {\n        name: 'xxx'\n      }\n    }), 'utf8');\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.region missing from claudia.json');\n      done();\n    });\n  });","file":"add-kinesis-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"sets up privileges if role is given with name","suites":["addKinesisEventSource","when params are valid"],"line":123,"updatePoint":{"line":123,"column":53,"index":4252},"code":"    it('sets up privileges if role is given with name', done => {\n      createLambda().then(() => underTest(config)).then(() => lambda.listEventSourceMappings({\n        FunctionName: testRunName\n      }).promise()).then(config => {\n        expect(config.EventSourceMappings.length).toBe(1);\n        expect(config.EventSourceMappings[0].FunctionArn).toMatch(new RegExp(testRunName + '$'));\n        expect(config.EventSourceMappings[0].EventSourceArn).toEqual(streamDescription.StreamARN);\n      }).then(done, done.fail);\n    });","file":"add-kinesis-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"sets up stream using an ARN","suites":["addKinesisEventSource","when params are valid"],"line":132,"updatePoint":{"line":132,"column":35,"index":4762},"code":"    it('sets up stream using an ARN', done => {\n      config.stream = streamDescription.StreamARN;\n      createLambda().then(() => underTest(config)).then(() => lambda.listEventSourceMappings({\n        FunctionName: testRunName\n      }).promise()).then(config => {\n        expect(config.EventSourceMappings[0].EventSourceArn).toEqual(streamDescription.StreamARN);\n      }).then(done, done.fail);\n    });","file":"add-kinesis-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"invokes lambda from Kinesis when no version is given","suites":["addKinesisEventSource","when params are valid"],"line":140,"updatePoint":{"line":140,"column":60,"index":5191},"code":"    it('invokes lambda from Kinesis when no version is given', done => {\n      createLambda().then(() => underTest(config)).then(() => publishToStream(testRunName)).then(() => {\n        return retry(() => {\n          console.log(`trying to get events from /aws/lambda/${testRunName}`);\n          return logs.filterLogEvents({\n            logGroupName: '/aws/lambda/' + testRunName,\n            filterPattern: 'kinesis'\n          }).promise().then(logEvents => {\n            if (logEvents.events.length) {\n              return logEvents.events;\n            } else {\n              return Promise.reject();\n            }\n          });\n        }, 30000, 10, undefined, undefined, Promise);\n      }).then(done, done.fail);\n    });","file":"add-kinesis-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"binds to an alias, if the version is provided","suites":["addKinesisEventSource","when params are valid"],"line":157,"updatePoint":{"line":157,"column":53,"index":5910},"code":"    it('binds to an alias, if the version is provided', done => {\n      createConfig.version = 'special';\n      config.version = 'special';\n      createLambda().then(() => underTest(config)).then(() => lambda.listEventSourceMappings({\n        FunctionName: `${testRunName}:special`\n      }).promise()).then(config => {\n        expect(config.EventSourceMappings.length).toBe(1);\n        expect(config.EventSourceMappings[0].FunctionArn).toMatch(new RegExp(testRunName + ':special$'));\n        expect(config.EventSourceMappings[0].EventSourceArn).toEqual(streamDescription.StreamARN);\n      }).then(done, done.fail);\n    });","file":"add-kinesis-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"sets up batch size","suites":["addKinesisEventSource","when params are valid"],"line":168,"updatePoint":{"line":168,"column":26,"index":6506},"code":"    it('sets up batch size', done => {\n      config['batch-size'] = 50;\n      createLambda().then(() => underTest(config)).then(() => lambda.listEventSourceMappings({\n        FunctionName: testRunName\n      }).promise()).then(config => {\n        expect(config.EventSourceMappings.length).toBe(1);\n        expect(config.EventSourceMappings[0].BatchSize).toEqual(50);\n      }).then(done, done.fail);\n    });","file":"add-kinesis-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"invokes lambda from Kinesis when version is provided","suites":["addKinesisEventSource","when params are valid"],"line":177,"updatePoint":{"line":177,"column":60,"index":6946},"code":"    it('invokes lambda from Kinesis when version is provided', done => {\n      createConfig.version = 'special';\n      config.version = 'special';\n      createLambda().then(() => underTest(config)).then(() => publishToStream(testRunName)).then(() => {\n        return retry(() => {\n          console.log(`trying to get events from /aws/lambda/${testRunName}`);\n          return logs.filterLogEvents({\n            logGroupName: '/aws/lambda/' + testRunName,\n            filterPattern: 'kinesis'\n          }).promise().then(logEvents => {\n            if (logEvents.events.length) {\n              return logEvents.events;\n            } else {\n              return Promise.reject();\n            }\n          });\n        }, 30000, 10, undefined, undefined, Promise);\n      }).then(done, done.fail);\n    });","file":"add-kinesis-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"appends a policy from a file to the role","suites":["addPolicy"],"line":31,"updatePoint":{"line":31,"column":46,"index":1044},"code":"  it('appends a policy from a file to the role', done => {\n    const policyPath = path.join(workingdir, 'policy1.json');\n    fsPromise.writeFileAsync(policyPath, loggingPolicy('aws'), 'utf8').then(() => underTest(iam, 'log-writer', testRunName, policyPath)).then(() => iam.getRolePolicy({\n      PolicyName: 'log-writer',\n      RoleName: testRunName\n    }).promise()).then(policy => {\n      const parsedPolicy = JSON.parse(decodeURIComponent(policy.PolicyDocument)),\n        expectedPolicy = JSON.parse(loggingPolicy('aws'));\n      expect(parsedPolicy).toEqual(expectedPolicy);\n    }).then(done, done.fail);\n  });","file":"add-policy-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the bucket is not defined in options","suites":["addS3EventSource","validation"],"line":28,"updatePoint":{"line":28,"column":55,"index":888},"code":"    it('fails when the bucket is not defined in options', done => {\n      underTest({\n        source: workingdir\n      }).then(done.fail, reason => {\n        expect(reason).toEqual('bucket name not specified. please provide it with --bucket');\n        done();\n      });\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the source dir does not contain the project config file","suites":["addS3EventSource","validation"],"line":36,"updatePoint":{"line":36,"column":74,"index":1185},"code":"    it('fails when the source dir does not contain the project config file', done => {\n      underTest({\n        bucket: 'b',\n        source: workingdir\n      }).then(done.fail, reason => {\n        expect(reason).toEqual('claudia.json does not exist in the source folder');\n        done();\n      });\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda name","suites":["addS3EventSource","validation"],"line":45,"updatePoint":{"line":45,"column":75,"index":1494},"code":"    it('fails when the project config file does not contain the lambda name', done => {\n      fs.writeFileSync(path.join(workingdir, 'claudia.json'), '{}', 'utf8');\n      underTest({\n        bucket: 'b',\n        source: workingdir\n      }).then(done.fail, reason => {\n        expect(reason).toEqual('invalid configuration -- lambda.name missing from claudia.json');\n        done();\n      });\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda region","suites":["addS3EventSource","validation"],"line":55,"updatePoint":{"line":55,"column":77,"index":1896},"code":"    it('fails when the project config file does not contain the lambda region', done => {\n      fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify({\n        lambda: {\n          name: 'xxx'\n        }\n      }), 'utf8');\n      underTest({\n        bucket: 'b',\n        source: workingdir\n      }).then(done.fail, reason => {\n        expect(reason).toEqual('invalid configuration -- lambda.region missing from claudia.json');\n        done();\n      });\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda role","suites":["addS3EventSource","validation"],"line":69,"updatePoint":{"line":69,"column":75,"index":2369},"code":"    it('fails when the project config file does not contain the lambda role', done => {\n      fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify({\n        lambda: {\n          name: 'xxx',\n          region: 'abc'\n        }\n      }), 'utf8');\n      underTest({\n        bucket: 'b',\n        source: workingdir\n      }).then(done.fail, reason => {\n        expect(reason).toEqual('invalid configuration -- lambda.role missing from claudia.json');\n        done();\n      });\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"sets up privileges and s3 notifications for any created files in the s3 bucket","suites":["addS3EventSource","using an autogenerated role"],"line":137,"updatePoint":{"line":137,"column":86,"index":4650},"code":"    it('sets up privileges and s3 notifications for any created files in the s3 bucket', done => {\n      underTest({\n        source: workingdir,\n        bucket: bucketName\n      }).then(() => getBucketNotifications()).then(() => {\n        return s3.putObject({\n          Bucket: bucketName,\n          Key: `${testRunName}.txt`,\n          Body: 'file contents',\n          ACL: 'private'\n        }).promise();\n      }).then(() => {\n        return s3.waitFor('objectNotExists', {\n          Bucket: bucketName,\n          Key: `${testRunName}.txt`\n        }).promise();\n      }).then(done, done.fail);\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"adds a prefix if requested","suites":["addS3EventSource","using an autogenerated role"],"line":155,"updatePoint":{"line":155,"column":34,"index":5203},"code":"    it('adds a prefix if requested', done => {\n      underTest({\n        source: workingdir,\n        bucket: bucketName,\n        prefix: 'in/'\n      }).then(() => getBucketNotifications()).then(config => {\n        expect(config.LambdaFunctionConfigurations[0].Filter.Key.FilterRules[0]).toEqual({\n          Name: 'Prefix',\n          Value: 'in/'\n        });\n      }).then(done, done.fail);\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"adds a suffix if requested","suites":["addS3EventSource","using an autogenerated role"],"line":167,"updatePoint":{"line":167,"column":34,"index":5601},"code":"    it('adds a suffix if requested', done => {\n      underTest({\n        source: workingdir,\n        bucket: bucketName,\n        suffix: '.jpg'\n      }).then(() => getBucketNotifications()).then(config => {\n        expect(config.LambdaFunctionConfigurations[0].Filter.Key.FilterRules[0]).toEqual({\n          Name: 'Suffix',\n          Value: '.jpg'\n        });\n      }).then(done, done.fail);\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"adds both a prefix and suffix if requested","suites":["addS3EventSource","using an autogenerated role"],"line":179,"updatePoint":{"line":179,"column":50,"index":6017},"code":"    it('adds both a prefix and suffix if requested', done => {\n      underTest({\n        source: workingdir,\n        bucket: bucketName,\n        prefix: 'in/',\n        suffix: '.jpg'\n      }).then(() => getBucketNotifications()).then(config => {\n        expect(config.LambdaFunctionConfigurations[0].Filter.Key.FilterRules[0]).toEqual({\n          Name: 'Prefix',\n          Value: 'in/'\n        });\n        expect(config.LambdaFunctionConfigurations[0].Filter.Key.FilterRules[1]).toEqual({\n          Name: 'Suffix',\n          Value: '.jpg'\n        });\n      }).then(done, done.fail);\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"adds default event if no events requested","suites":["addS3EventSource","using an autogenerated role"],"line":196,"updatePoint":{"line":196,"column":49,"index":6607},"code":"    it('adds default event if no events requested', done => {\n      underTest({\n        source: workingdir,\n        bucket: bucketName\n      }).then(() => getBucketNotifications()).then(config => expect(config.LambdaFunctionConfigurations[0].Events).toEqual(['s3:ObjectCreated:*'])).then(done, done.fail);\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"adds events if requested","suites":["addS3EventSource","using an autogenerated role"],"line":202,"updatePoint":{"line":202,"column":32,"index":6904},"code":"    it('adds events if requested', done => {\n      underTest({\n        source: workingdir,\n        bucket: bucketName,\n        events: 's3:ObjectCreated:*,s3:ObjectRemoved:*'\n      }).then(() => getBucketNotifications()).then(config => expect(config.LambdaFunctionConfigurations[0].Events.sort()).toEqual(['s3:ObjectCreated:*', 's3:ObjectRemoved:*'])).then(done, done.fail);\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"allows adding several events for the same bucket","suites":["addS3EventSource","using an autogenerated role"],"line":209,"updatePoint":{"line":209,"column":56,"index":7311},"code":"    it('allows adding several events for the same bucket', done => {\n      underTest({\n        source: workingdir,\n        bucket: bucketName,\n        events: 's3:ObjectCreated:*',\n        prefix: '/in/'\n      }).then(() => underTest({\n        source: workingdir,\n        bucket: bucketName,\n        events: 's3:ObjectRemoved:*',\n        prefix: '/out/'\n      })).then(() => getBucketNotifications(2)).then(config => {\n        expect(config.LambdaFunctionConfigurations[0].Filter.Key.FilterRules[0]).toEqual({\n          Name: 'Prefix',\n          Value: '/in/'\n        });\n        expect(config.LambdaFunctionConfigurations[1].Filter.Key.FilterRules[0]).toEqual({\n          Name: 'Prefix',\n          Value: '/out/'\n        });\n      }).then(done, done.fail);\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"binds to an alias, if the version is provided","suites":["addS3EventSource","using an autogenerated role"],"line":231,"updatePoint":{"line":231,"column":53,"index":8074},"code":"    it('binds to an alias, if the version is provided', done => {\n      underTest({\n        source: workingdir,\n        bucket: bucketName,\n        version: 'special'\n      }).then(() => getBucketNotifications()).then(config => expect(/:special$/.test(config.LambdaFunctionConfigurations[0].LambdaFunctionArn)).toBeTruthy()).then(done, done.fail);\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"can execute aliased functions","suites":["addS3EventSource","using an autogenerated role"],"line":238,"updatePoint":{"line":238,"column":37,"index":8414},"code":"    it('can execute aliased functions', done => {\n      underTest({\n        source: workingdir,\n        bucket: bucketName,\n        version: 'special'\n      }).then(() => getBucketNotifications()).then(() => {\n        return s3.putObject({\n          Bucket: bucketName,\n          Key: `${testRunName}.txt`,\n          Body: 'file contents',\n          ACL: 'private'\n        }).promise();\n      }).then(() => {\n        return s3.waitFor('objectNotExists', {\n          Bucket: bucketName,\n          Key: `${testRunName}.txt`\n        }).promise();\n      }).then(done, done.fail);\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"does not change any existing notification configurations","suites":["addS3EventSource","using an autogenerated role"],"line":257,"updatePoint":{"line":257,"column":64,"index":9025},"code":"    it('does not change any existing notification configurations', done => {\n      underTest({\n        source: workingdir,\n        bucket: bucketName,\n        version: 'special',\n        prefix: '/special/'\n      }).then(() => update({\n        source: workingdir,\n        version: 'crazy'\n      })).then(() => underTest({\n        source: workingdir,\n        bucket: bucketName,\n        version: 'crazy',\n        prefix: '/crazy/'\n      })).then(() => getBucketNotifications()).then(config => {\n        expect(config.LambdaFunctionConfigurations.length).toEqual(2);\n        expect(config.LambdaFunctionConfigurations[0].LambdaFunctionArn).toMatch(/:special$/);\n        expect(config.LambdaFunctionConfigurations[1].LambdaFunctionArn).toMatch(/:crazy$/);\n      }).then(done, done.fail);\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"can use functions created using a role ARN","suites":["addS3EventSource","using an autogenerated role"],"line":277,"updatePoint":{"line":277,"column":50,"index":9804},"code":"    it('can use functions created using a role ARN', done => {\n      const anotherdir = path.join(workingdir, 'subdir');\n      newObjects.workingdir = anotherdir;\n      fs.mkdirSync(anotherdir);\n      fsUtil.copy('spec/test-projects/s3-remover', anotherdir, true);\n      genericRole.create(testRunName + '-exec').then(roleResult => {\n        newObjects.lambdaRole = roleResult.Role.RoleName;\n        return roleResult.Role.Arn;\n      }).then(roleArn => create({\n        role: roleArn,\n        name: testRunName + '-x',\n        region: awsRegion,\n        source: anotherdir,\n        handler: 'main.handler'\n      })).then(result => {\n        newObjects.lambdaFunction = result.lambda && result.lambda.name;\n      }).then(() => underTest({\n        source: anotherdir,\n        bucket: bucketName,\n        prefix: 'in/'\n      })).then(() => getBucketNotifications()).then(config => {\n        expect(config.LambdaFunctionConfigurations[0].Filter.Key.FilterRules[0]).toEqual({\n          Name: 'Prefix',\n          Value: 'in/'\n        });\n      }).then(done, done.fail);\n    });","file":"add-s3-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the event file is not defined in options","suites":["addScheduledEvent"],"line":42,"updatePoint":{"line":42,"column":57,"index":1298},"code":"  it('fails when the event file is not defined in options', done => {\n    config.event = '';\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('event file not specified. please provide it with --event');\n      done();\n    });\n  });","file":"add-scheduled-event-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the event name is not defined in options","suites":["addScheduledEvent"],"line":49,"updatePoint":{"line":49,"column":57,"index":1559},"code":"  it('fails when the event name is not defined in options', done => {\n    config.name = '';\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('event name not specified. please provide it with --name');\n      done();\n    });\n  });","file":"add-scheduled-event-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the event schedule is not defined in options","suites":["addScheduledEvent"],"line":56,"updatePoint":{"line":56,"column":61,"index":1822},"code":"  it('fails when the event schedule is not defined in options', done => {\n    config.schedule = '';\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('event schedule not specified. please provide it with --schedule');\n      done();\n    });\n  });","file":"add-scheduled-event-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the source dir does not contain the project config file","suites":["addScheduledEvent"],"line":63,"updatePoint":{"line":63,"column":72,"index":2108},"code":"  it('fails when the source dir does not contain the project config file', done => {\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('claudia.json does not exist in the source folder');\n      done();\n    });\n  });","file":"add-scheduled-event-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda name","suites":["addScheduledEvent"],"line":69,"updatePoint":{"line":69,"column":73,"index":2354},"code":"  it('fails when the project config file does not contain the lambda name', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), '{}', 'utf8');\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.name missing from claudia.json');\n      done();\n    });\n  });","file":"add-scheduled-event-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda region","suites":["addScheduledEvent"],"line":76,"updatePoint":{"line":76,"column":75,"index":2691},"code":"  it('fails when the project config file does not contain the lambda region', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify({\n      lambda: {\n        name: 'xxx'\n      }\n    }), 'utf8');\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.region missing from claudia.json');\n      done();\n    });\n  });","file":"add-scheduled-event-spec.js","skipped":false,"dir":"spec"},{"name":"uses the schedule expression to configure the rule","suites":["addScheduledEvent","when params are valid"],"line":105,"updatePoint":{"line":105,"column":58,"index":3697},"code":"    it('uses the schedule expression to configure the rule', done => {\n      createLambda().then(() => underTest(config)).then(() => {\n        return events.describeRule({\n          Name: newObjects.eventRule\n        }).promise();\n      }).then(eventConfig => {\n        expect(eventConfig.State).toEqual('ENABLED');\n        expect(eventConfig.ScheduleExpression).toEqual('rate(5 minutes)');\n      }).then(done, done.fail);\n    });","file":"add-scheduled-event-spec.js","skipped":false,"dir":"spec"},{"name":"uses the rate argument as a shorthand for the schedule expression","suites":["addScheduledEvent","when params are valid"],"line":115,"updatePoint":{"line":115,"column":73,"index":4143},"code":"    it('uses the rate argument as a shorthand for the schedule expression', done => {\n      config.schedule = '';\n      config.rate = '10 minutes';\n      createLambda().then(() => underTest(config)).then(() => {\n        return events.describeRule({\n          Name: newObjects.eventRule\n        }).promise();\n      }).then(eventConfig => {\n        expect(eventConfig.State).toEqual('ENABLED');\n        expect(eventConfig.ScheduleExpression).toEqual('rate(10 minutes)');\n      }).then(done, done.fail);\n    });","file":"add-scheduled-event-spec.js","skipped":false,"dir":"spec"},{"name":"uses the cron argument as a shorthand for the schedule expression","suites":["addScheduledEvent","when params are valid"],"line":127,"updatePoint":{"line":127,"column":73,"index":4652},"code":"    it('uses the cron argument as a shorthand for the schedule expression', done => {\n      config.schedule = '';\n      config.cron = '0 8 1 * ? *';\n      createLambda().then(() => underTest(config)).then(() => {\n        return events.describeRule({\n          Name: newObjects.eventRule\n        }).promise();\n      }).then(eventConfig => {\n        expect(eventConfig.State).toEqual('ENABLED');\n        expect(eventConfig.ScheduleExpression).toEqual('cron(0 8 1 * ? *)');\n      }).then(done, done.fail);\n    });","file":"add-scheduled-event-spec.js","skipped":false,"dir":"spec"},{"name":"sets up privileges and rule notifications","suites":["addScheduledEvent","when params are valid"],"line":139,"updatePoint":{"line":139,"column":49,"index":5139},"code":"    it('sets up privileges and rule notifications', done => {\n      let functionArn;\n      createLambda().then(() => {\n        return lambda.getFunctionConfiguration({\n          FunctionName: testRunName\n        }).promise();\n      }).then(lambdaResult => {\n        functionArn = lambdaResult.FunctionArn;\n      }).then(() => underTest(config)).then(() => events.listTargetsByRule({\n        Rule: config.name\n      }).promise()).then(config => {\n        expect(config.Targets.length).toBe(1);\n        expect(config.Targets[0].Arn).toEqual(functionArn);\n        expect(eventConfig).toEqual(JSON.parse(config.Targets[0].Input));\n      }).then(done, done.fail);\n    });","file":"add-scheduled-event-spec.js","skipped":false,"dir":"spec"},{"name":"binds to an alias, if the version is provided","suites":["addScheduledEvent","when params are valid"],"line":155,"updatePoint":{"line":155,"column":53,"index":5810},"code":"    it('binds to an alias, if the version is provided', done => {\n      let functionArn;\n      createConfig.version = 'special';\n      config.version = 'special';\n      createLambda().then(() => {\n        return lambda.getFunctionConfiguration({\n          FunctionName: testRunName,\n          Qualifier: 'special'\n        }).promise();\n      }).then(lambdaResult => {\n        functionArn = lambdaResult.FunctionArn;\n        console.log(functionArn);\n      }).then(() => underTest(config)).then(() => events.listTargetsByRule({\n        Rule: config.name\n      }).promise()).then(config => {\n        expect(config.Targets.length).toBe(1);\n        expect(config.Targets[0].Arn).toEqual(functionArn);\n        expect(eventConfig).toEqual(JSON.parse(config.Targets[0].Input));\n      }).then(done, done.fail);\n    });","file":"add-scheduled-event-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the topic is not defined in options","suites":["addSNSEventSource"],"line":39,"updatePoint":{"line":39,"column":52,"index":1115},"code":"  it('fails when the topic is not defined in options', done => {\n    config.topic = '';\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('SNS topic not specified. please provide it with --topic');\n      done();\n    });\n  });","file":"add-sns-event-spec.js","skipped":false,"dir":"spec"},{"name":"fails when both filter-policy and filter-policy-file are set","suites":["addSNSEventSource"],"line":46,"updatePoint":{"line":46,"column":66,"index":1384},"code":"  it('fails when both filter-policy and filter-policy-file are set', done => {\n    config['filter-policy'] = '{}';\n    config['filter-policy-file'] = 'x.json';\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('Cannot use both filter-policy and filter-policy-file. Specify only one.');\n      done();\n    });\n  });","file":"add-sns-event-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the source dir does not contain the project config file","suites":["addSNSEventSource"],"line":54,"updatePoint":{"line":54,"column":72,"index":1733},"code":"  it('fails when the source dir does not contain the project config file', done => {\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('claudia.json does not exist in the source folder');\n      done();\n    });\n  });","file":"add-sns-event-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda name","suites":["addSNSEventSource"],"line":60,"updatePoint":{"line":60,"column":73,"index":1979},"code":"  it('fails when the project config file does not contain the lambda name', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), '{}', 'utf8');\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.name missing from claudia.json');\n      done();\n    });\n  });","file":"add-sns-event-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda region","suites":["addSNSEventSource"],"line":67,"updatePoint":{"line":67,"column":75,"index":2316},"code":"  it('fails when the project config file does not contain the lambda region', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify({\n      lambda: {\n        name: 'xxx'\n      }\n    }), 'utf8');\n    underTest(config).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.region missing from claudia.json');\n      done();\n    });\n  });","file":"add-sns-event-spec.js","skipped":false,"dir":"spec"},{"name":"sets up privileges and rule notifications if no version given","suites":["addSNSEventSource","when params are valid"],"line":101,"updatePoint":{"line":101,"column":69,"index":3482},"code":"    it('sets up privileges and rule notifications if no version given', done => {\n      let functionArn;\n      createLambda().then(() => {\n        return lambda.getFunctionConfiguration({\n          FunctionName: testRunName\n        }).promise();\n      }).then(lambdaResult => {\n        functionArn = lambdaResult.FunctionArn;\n      }).then(() => underTest(config)).then(() => sns.listSubscriptionsByTopic({\n        TopicArn: config.topic\n      }).promise()).then(config => {\n        expect(config.Subscriptions.length).toBe(1);\n        expect(config.Subscriptions[0].Endpoint).toEqual(functionArn);\n      }).then(done, done.fail);\n    });","file":"add-sns-event-spec.js","skipped":false,"dir":"spec"},{"name":"does not add a filter policy if not requested","suites":["addSNSEventSource","when params are valid"],"line":116,"updatePoint":{"line":116,"column":53,"index":4105},"code":"    it('does not add a filter policy if not requested', done => {\n      createLambda().then(() => underTest(config)).then(() => sns.listSubscriptionsByTopic({\n        TopicArn: config.topic\n      }).promise()).then(result => sns.getSubscriptionAttributes({\n        SubscriptionArn: result.Subscriptions[0].SubscriptionArn\n      }).promise()).then(attr => {\n        expect(attr.Attributes.FilterPolicy).toBeFalsy();\n      }).then(done, done.fail);\n    });","file":"add-sns-event-spec.js","skipped":false,"dir":"spec"},{"name":"adds a filter policy if requested","suites":["addSNSEventSource","when params are valid"],"line":125,"updatePoint":{"line":125,"column":41,"index":4548},"code":"    it('adds a filter policy if requested', done => {\n      const policy = {\n        provider: ['some-provider']\n      };\n      config['filter-policy'] = JSON.stringify(policy);\n      createLambda().then(() => underTest(config)).then(() => sns.listSubscriptionsByTopic({\n        TopicArn: config.topic\n      }).promise()).then(result => sns.getSubscriptionAttributes({\n        SubscriptionArn: result.Subscriptions[0].SubscriptionArn\n      }).promise()).then(attr => {\n        expect(JSON.parse(attr.Attributes.FilterPolicy)).toEqual(policy);\n      }).then(done, done.fail);\n    });","file":"add-sns-event-spec.js","skipped":false,"dir":"spec"},{"name":"adds a filter policy from a file if requested","suites":["addSNSEventSource","when params are valid"],"line":138,"updatePoint":{"line":138,"column":53,"index":5143},"code":"    it('adds a filter policy from a file if requested', done => {\n      const policy = {\n          provider: ['some-provider']\n        },\n        policyFile = path.join(workingdir, 'sns-policy.json');\n      fs.writeFileSync(policyFile, JSON.stringify(policy), 'utf8');\n      config['filter-policy-file'] = policyFile;\n      createLambda().then(() => underTest(config)).then(() => sns.listSubscriptionsByTopic({\n        TopicArn: config.topic\n      }).promise()).then(result => sns.getSubscriptionAttributes({\n        SubscriptionArn: result.Subscriptions[0].SubscriptionArn\n      }).promise()).then(attr => {\n        expect(JSON.parse(attr.Attributes.FilterPolicy)).toEqual(policy);\n      }).then(done, done.fail);\n    });","file":"add-sns-event-spec.js","skipped":false,"dir":"spec"},{"name":"invokes lambda from SNS when no version is given","suites":["addSNSEventSource","when params are valid"],"line":153,"updatePoint":{"line":153,"column":56,"index":5869},"code":"    it('invokes lambda from SNS when no version is given', done => {\n      createLambda().then(() => underTest(config)).then(() => {\n        return sns.publish({\n          Message: JSON.stringify({\n            name: 'Mike'\n          }),\n          TopicArn: config.topic\n        }).promise();\n      }).then(() => {\n        return retry(() => {\n          console.log(`trying to get events from /aws/lambda/${testRunName}`);\n          return logs.filterLogEvents({\n            logGroupName: '/aws/lambda/' + testRunName,\n            filterPattern: 'aws sns EventSubscription'\n          }).promise().then(logEvents => {\n            if (logEvents.events.length) {\n              return logEvents.events;\n            } else {\n              return Promise.reject();\n            }\n          });\n        }, 5000, 5, undefined, undefined, Promise);\n      }).then(done, done.fail);\n    });","file":"add-sns-event-spec.js","skipped":false,"dir":"spec"},{"name":"binds to an alias, if the version is provided","suites":["addSNSEventSource","when params are valid"],"line":177,"updatePoint":{"line":177,"column":53,"index":6744},"code":"    it('binds to an alias, if the version is provided', done => {\n      let functionArn;\n      createConfig.version = 'special';\n      config.version = 'special';\n      createLambda().then(() => {\n        return lambda.getFunctionConfiguration({\n          FunctionName: testRunName,\n          Qualifier: 'special'\n        }).promise();\n      }).then(lambdaResult => {\n        functionArn = lambdaResult.FunctionArn;\n      }).then(() => underTest(config)).then(() => sns.listSubscriptionsByTopic({\n        TopicArn: config.topic\n      }).promise()).then(config => {\n        expect(config.Subscriptions.length).toBe(1);\n        expect(config.Subscriptions[0].Endpoint).toEqual(functionArn);\n      }).then(done, done.fail);\n    });","file":"add-sns-event-spec.js","skipped":false,"dir":"spec"},{"name":"invokes lambda from SNS when version is provided","suites":["addSNSEventSource","when params are valid"],"line":195,"updatePoint":{"line":195,"column":56,"index":7476},"code":"    it('invokes lambda from SNS when version is provided', done => {\n      createConfig.version = 'special';\n      config.version = 'special';\n      createLambda().then(() => underTest(config)).then(() => {\n        return sns.publish({\n          Message: JSON.stringify({\n            name: 'Mike'\n          }),\n          TopicArn: config.topic\n        }).promise();\n      }).then(() => {\n        return retry(() => {\n          console.log('trying to get events from ' + '/aws/lambda/' + testRunName);\n          return logs.filterLogEvents({\n            logGroupName: '/aws/lambda/' + testRunName,\n            filterPattern: 'aws sns EventSubscription'\n          }).promise().then(logEvents => {\n            if (logEvents.events.length) {\n              return logEvents.events;\n            } else {\n              return Promise.reject();\n            }\n          });\n        }, 5000, 5);\n      }).then(done, done.fail);\n    });","file":"add-sns-event-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the queue is not defined in options","suites":["addSQSEventSource","validation"],"line":38,"updatePoint":{"line":38,"column":54,"index":1111},"code":"    it('fails when the queue is not defined in options', done => {\n      config.queue = '';\n      underTest(config).then(done.fail, reason => {\n        expect(reason).toEqual('SQS queue not specified. please provide it with --queue');\n        done();\n      });\n    });","file":"add-sqs-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the source dir does not contain the project config file","suites":["addSQSEventSource","validation"],"line":45,"updatePoint":{"line":45,"column":74,"index":1400},"code":"    it('fails when the source dir does not contain the project config file', done => {\n      underTest(config).then(done.fail, reason => {\n        expect(reason).toEqual('claudia.json does not exist in the source folder');\n        done();\n      });\n    });","file":"add-sqs-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda name","suites":["addSQSEventSource","validation"],"line":51,"updatePoint":{"line":51,"column":75,"index":1658},"code":"    it('fails when the project config file does not contain the lambda name', done => {\n      fs.writeFileSync(path.join(workingdir, 'claudia.json'), '{}', 'utf8');\n      underTest(config).then(done.fail, reason => {\n        expect(reason).toEqual('invalid configuration -- lambda.name missing from claudia.json');\n        done();\n      });\n    });","file":"add-sqs-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda region","suites":["addSQSEventSource","validation"],"line":58,"updatePoint":{"line":58,"column":77,"index":2009},"code":"    it('fails when the project config file does not contain the lambda region', done => {\n      fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify({\n        lambda: {\n          name: 'xxx'\n        }\n      }), 'utf8');\n      underTest(config).then(done.fail, reason => {\n        expect(reason).toEqual('invalid configuration -- lambda.region missing from claudia.json');\n        done();\n      });\n    });","file":"add-sqs-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"sets up privileges if role is given with name","suites":["addSQSEventSource","when params are valid","event source wiring"],"line":108,"updatePoint":{"line":108,"column":55,"index":3694},"code":"      it('sets up privileges if role is given with name', done => {\n        createLambda().then(() => underTest(config)).then(() => lambda.listEventSourceMappings({\n          FunctionName: testRunName\n        }).promise()).then(config => {\n          expect(config.EventSourceMappings.length).toBe(1);\n          expect(config.EventSourceMappings[0].FunctionArn).toMatch(new RegExp(testRunName + '$'));\n          expect(config.EventSourceMappings[0].EventSourceArn).toEqual(queueArn);\n        }).then(done, done.fail);\n      });","file":"add-sqs-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"sets up queue using an ARN","suites":["addSQSEventSource","when params are valid","event source wiring"],"line":117,"updatePoint":{"line":117,"column":36,"index":4202},"code":"      it('sets up queue using an ARN', done => {\n        config.queue = queueArn;\n        createLambda().then(() => underTest(config)).then(() => lambda.listEventSourceMappings({\n          FunctionName: testRunName\n        }).promise()).then(config => {\n          expect(config.EventSourceMappings[0].EventSourceArn).toEqual(queueArn);\n        }).then(done, done.fail);\n      });","file":"add-sqs-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"binds to an alias, if the version is provided","suites":["addSQSEventSource","when params are valid","event source wiring"],"line":125,"updatePoint":{"line":125,"column":55,"index":4601},"code":"      it('binds to an alias, if the version is provided', done => {\n        createConfig.version = 'special';\n        config.version = 'special';\n        createLambda().then(() => underTest(config)).then(() => lambda.listEventSourceMappings({\n          FunctionName: `${testRunName}:special`\n        }).promise()).then(config => {\n          expect(config.EventSourceMappings.length).toBe(1);\n          expect(config.EventSourceMappings[0].FunctionArn).toMatch(new RegExp(testRunName + ':special$'));\n          expect(config.EventSourceMappings[0].EventSourceArn).toEqual(queueArn);\n        }).then(done, done.fail);\n      });","file":"add-sqs-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"sets up batch size","suites":["addSQSEventSource","when params are valid","event source wiring"],"line":136,"updatePoint":{"line":136,"column":28,"index":5200},"code":"      it('sets up batch size', done => {\n        config['batch-size'] = 5;\n        createLambda().then(() => underTest(config)).then(() => lambda.listEventSourceMappings({\n          FunctionName: testRunName\n        }).promise()).then(config => {\n          expect(config.EventSourceMappings.length).toBe(1);\n          expect(config.EventSourceMappings[0].BatchSize).toEqual(5);\n        }).then(done, done.fail);\n      });","file":"add-sqs-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"invokes lambda from SQS when no version is given","suites":["addSQSEventSource","when params are valid","lambda invocation"],"line":162,"updatePoint":{"line":162,"column":58,"index":6246},"code":"      it('invokes lambda from SQS when no version is given', done => {\n        createLambda().then(() => underTest(config)).then(() => sendMessage(testRunName)).then(() => genericQueue.waitForMessage(testRunName)).then(message => {\n          const body = JSON.parse(message.Body);\n          expect(body.invokedFunctionArn).toMatch(new RegExp(testRunName + '$'));\n        }).then(done, done.fail);\n      });","file":"add-sqs-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"invokes lambda from SQS when version is provided","suites":["addSQSEventSource","when params are valid","lambda invocation"],"line":168,"updatePoint":{"line":168,"column":58,"index":6653},"code":"      it('invokes lambda from SQS when version is provided', done => {\n        createConfig.version = 'special';\n        config.version = 'special';\n        createLambda().then(() => underTest(config)).then(() => sendMessage(testRunName + 'special')).then(() => genericQueue.waitForMessage(testRunName + 'special')).then(message => {\n          const body = JSON.parse(message.Body);\n          expect(body.invokedFunctionArn).toMatch(new RegExp(testRunName + ':special$'));\n        }).then(done, done.fail);\n      });","file":"add-sqs-event-source-spec.js","skipped":false,"dir":"spec"},{"name":"allows Alexa Skill to trigger Lambda","suites":["allowAlexaSkillTrigger"],"line":27,"updatePoint":{"line":27,"column":42,"index":835},"code":"  it('allows Alexa Skill to trigger Lambda', done => {\n    const createConfig = {\n        name: testRunName,\n        region: awsRegion,\n        source: workingdir,\n        handler: 'main.handler',\n        version: 'dev'\n      },\n      config = {\n        source: workingdir,\n        version: 'dev'\n      };\n    fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n    create(createConfig).then(result => {\n      newObjects.lambdaRole = result.lambda && result.lambda.role;\n      newObjects.lambdaFunction = result.lambda && result.lambda.name;\n    }).then(() => underTest(config)).then(() => lambda.getPolicy({\n      FunctionName: testRunName,\n      Qualifier: 'dev'\n    }).promise()).then(result => JSON.parse(result.Policy).Statement[0]).then(statement => {\n      expect(statement.Effect).toEqual('Allow');\n      expect(statement.Principal.Service).toEqual('alexa-appkit.amazon.com');\n      expect(statement.Action).toEqual('lambda:InvokeFunction');\n    }).then(done, done.fail);\n  });","file":"allow-alexa-skill-trigger-spec.js","skipped":false,"dir":"spec"},{"name":"adds a service if the statement does not exist","suites":["appendServiceToRole"],"line":5,"updatePoint":{"line":5,"column":52,"index":186},"code":"  it('adds a service if the statement does not exist', () => {\n    expect(appendServiceToRole('{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}', 'edgelambda.amazonaws.com')).toEqual('{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"},{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"edgelambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}', 'edgelambda.amazonaws.com');\n  });","file":"append-service-to-role-spec.js","skipped":false,"dir":"spec"},{"name":"does not add a service if it already exists in the role array","suites":["appendServiceToRole"],"line":8,"updatePoint":{"line":8,"column":67,"index":731},"code":"  it('does not add a service if it already exists in the role array', () => {\n    expect(appendServiceToRole('{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\",\"iam.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]}', 'lambda.amazonaws.com')).toEqual('{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\",\"iam.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]}');\n  });","file":"append-service-to-role-spec.js","skipped":false,"dir":"spec"},{"name":"checks for Allow","suites":["appendServiceToRole"],"line":11,"updatePoint":{"line":11,"column":22,"index":1147},"code":"  it('checks for Allow', () => {\n    expect(appendServiceToRole('{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Deny\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\",\"iam.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]}', 'lambda.amazonaws.com')).toEqual('{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Deny\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\",\"iam.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"},{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}');\n  });","file":"append-service-to-role-spec.js","skipped":false,"dir":"spec"},{"name":"checks for sts:AssumeRole","suites":["appendServiceToRole"],"line":14,"updatePoint":{"line":14,"column":31,"index":1662},"code":"  it('checks for sts:AssumeRole', () => {\n    expect(appendServiceToRole('{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\",\"iam.amazonaws.com\"]},\"Action\":\"sts:SomethingElse\"}]}', 'lambda.amazonaws.com')).toEqual('{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\",\"iam.amazonaws.com\"]},\"Action\":\"sts:SomethingElse\"},{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}');\n  });","file":"append-service-to-role-spec.js","skipped":false,"dir":"spec"},{"name":"has the API methods for logging","suites":["ArrayLogger"],"line":9,"updatePoint":{"line":9,"column":37,"index":223},"code":"  it('has the API methods for logging', () => {\n    expect(typeof underTest.logStage).toEqual('function');\n    expect(typeof underTest.logApiCall).toEqual('function');\n  });","file":"array-logger-spec.js","skipped":false,"dir":"spec"},{"name":"logs calls to stages","suites":["ArrayLogger"],"line":13,"updatePoint":{"line":13,"column":26,"index":386},"code":"  it('logs calls to stages', () => {\n    underTest.logStage('first');\n    underTest.logStage('second');\n    underTest.logStage('first');\n    expect(underTest.getStageLog()).toEqual(['first', 'second', 'first']);\n  });","file":"array-logger-spec.js","skipped":false,"dir":"spec"},{"name":"can return unique stage log calls","suites":["ArrayLogger"],"line":19,"updatePoint":{"line":19,"column":39,"index":617},"code":"  it('can return unique stage log calls', () => {\n    underTest.logStage('first');\n    underTest.logStage('second');\n    underTest.logStage('first');\n    expect(underTest.getStageLog(true)).toEqual(['first', 'second']);\n  });","file":"array-logger-spec.js","skipped":false,"dir":"spec"},{"name":"logs calls to APIs","suites":["ArrayLogger"],"line":25,"updatePoint":{"line":25,"column":24,"index":828},"code":"  it('logs calls to APIs', () => {\n    underTest.logApiCall('method1', 'arg1');\n    underTest.logApiCall('method2', 'arg2');\n    underTest.logApiCall('method1', 'arg1');\n    expect(underTest.getApiCallLog()).toEqual(['method1', 'method2', 'method1']);\n  });","file":"array-logger-spec.js","skipped":false,"dir":"spec"},{"name":"can return unique API log calls","suites":["ArrayLogger"],"line":31,"updatePoint":{"line":31,"column":37,"index":1099},"code":"  it('can return unique API log calls', () => {\n    underTest.logApiCall('method1', 'arg1');\n    underTest.logApiCall('method2', 'arg2');\n    underTest.logApiCall('method1', 'arg2');\n    expect(underTest.getApiCallLog(true)).toEqual(['method1', 'method2']);\n  });","file":"array-logger-spec.js","skipped":false,"dir":"spec"},{"name":"can filter API calls by service","suites":["ArrayLogger"],"line":37,"updatePoint":{"line":37,"column":37,"index":1363},"code":"  it('can filter API calls by service', () => {\n    underTest.logApiCall('Api1.method1', 'arg1');\n    underTest.logApiCall('Api1.method2', 'arg2');\n    underTest.logApiCall('Api2.method3', 'arg2');\n    underTest.logApiCall('Api1.method1', 'arg2');\n    expect(underTest.getApiCallLogForService('Api1')).toEqual(['Api1.method1', 'Api1.method2', 'Api1.method1']);\n  });","file":"array-logger-spec.js","skipped":false,"dir":"spec"},{"name":"can return unique API calls for service","suites":["ArrayLogger"],"line":44,"updatePoint":{"line":44,"column":45,"index":1738},"code":"  it('can return unique API calls for service', () => {\n    underTest.logApiCall('Api1.method1', 'arg1');\n    underTest.logApiCall('Api1.method2', 'arg2');\n    underTest.logApiCall('Api2.method3', 'arg2');\n    underTest.logApiCall('Api1.method1', 'arg2');\n    expect(underTest.getApiCallLogForService('Api1', true)).toEqual(['Api1.method1', 'Api1.method2']);\n  });","file":"array-logger-spec.js","skipped":false,"dir":"spec"},{"name":"can return a combined log","suites":["ArrayLogger"],"line":51,"updatePoint":{"line":51,"column":31,"index":2089},"code":"  it('can return a combined log', () => {\n    underTest.logStage('creating stuff');\n    underTest.logApiCall('Api1.method1', 'arg1');\n    underTest.logStage('creating stuff');\n    underTest.logStage('deleting stuff');\n    underTest.logApiCall('Api1.method1', 'arg1');\n    expect(underTest.getCombinedLog()).toEqual([['stage', 'creating stuff'], ['call', 'Api1.method1', 'arg1'], ['stage', 'creating stuff'], ['stage', 'deleting stuff'], ['call', 'Api1.method1', 'arg1']]);\n  });","file":"array-logger-spec.js","skipped":false,"dir":"spec"},{"name":"returns the directory path","suites":["cleanUpPackage"],"line":40,"updatePoint":{"line":40,"column":32,"index":1189},"code":"  it('returns the directory path', done => {\n    underTest(sourcedir, {}, logger).then(result => {\n      expect(result).toEqual(sourcedir);\n    }).then(done, done.fail);\n  });","file":"clean-up-package-spec.js","skipped":false,"dir":"spec"},{"name":"does not clean up optional dependencies if not requested","suites":["cleanUpPackage"],"line":45,"updatePoint":{"line":45,"column":62,"index":1395},"code":"  it('does not clean up optional dependencies if not requested', done => {\n    underTest(sourcedir, {}, logger).then(result => {\n      expect(result).toEqual(sourcedir);\n      expect(fsUtil.isDir(path.join(sourcedir, 'node_modules', 'uuid'))).toBeTruthy();\n      expect(fsUtil.isDir(path.join(sourcedir, 'node_modules', 'minimist'))).toBeTruthy();\n    }).then(done, done.fail);\n  });","file":"clean-up-package-spec.js","skipped":false,"dir":"spec"},{"name":"cleans up optional dependencies if requested","suites":["cleanUpPackage"],"line":52,"updatePoint":{"line":52,"column":50,"index":1767},"code":"  it('cleans up optional dependencies if requested', done => {\n    underTest(sourcedir, {\n      'optional-dependencies': false\n    }, logger).then(result => {\n      expect(result).toEqual(sourcedir);\n      expect(fsUtil.isDir(path.join(sourcedir, 'node_modules', 'uuid'))).toBeTruthy();\n      expect(fsUtil.isDir(path.join(sourcedir, 'node_modules', 'minimist'))).toBeFalsy();\n    }).then(done, done.fail);\n  });","file":"clean-up-package-spec.js","skipped":false,"dir":"spec"},{"name":"passes additional options to NPM if requested","suites":["cleanUpPackage"],"line":61,"updatePoint":{"line":61,"column":51,"index":2181},"code":"  it('passes additional options to NPM if requested', done => {\n    underTest(sourcedir, {\n      'optional-dependencies': false,\n      'npm-options': '--dry-run'\n    }, logger).then(result => {\n      expect(result).toEqual(sourcedir);\n      expect(fsUtil.isDir(path.join(sourcedir, 'node_modules', 'uuid'))).toBeFalsy();\n      expect(fsUtil.isDir(path.join(sourcedir, 'node_modules', 'minimist'))).toBeFalsy();\n    }).then(done, done.fail);\n  });","file":"clean-up-package-spec.js","skipped":false,"dir":"spec"},{"name":"removes .npmrc if exists","suites":["cleanUpPackage"],"line":71,"updatePoint":{"line":71,"column":30,"index":2607},"code":"  it('removes .npmrc if exists', done => {\n    fs.writeFileSync(path.join(sourcedir, '.npmrc'), 'optional = false', 'utf8');\n    underTest(sourcedir, {}, logger).then(result => {\n      expect(result).toEqual(sourcedir);\n      expect(fsUtil.isFile(path.join(sourcedir, '.npmrc'))).toBeFalsy();\n    }).then(done, done.fail);\n  });","file":"clean-up-package-spec.js","skipped":false,"dir":"spec"},{"name":"removes package-lock.json if exists","suites":["cleanUpPackage"],"line":78,"updatePoint":{"line":78,"column":41,"index":2947},"code":"  it('removes package-lock.json if exists', done => {\n    fs.writeFileSync(path.join(sourcedir, 'package-lock.json'), '{}', 'utf8');\n    underTest(sourcedir, {}, logger).then(result => {\n      expect(result).toEqual(sourcedir);\n      expect(fsUtil.isFile(path.join(sourcedir, 'package-lock.json'))).toBeFalsy();\n    }).then(done, done.fail);\n  });","file":"clean-up-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if npm install fails","suites":["cleanUpPackage"],"line":85,"updatePoint":{"line":85,"column":32,"index":3286},"code":"  it('fails if npm install fails', done => {\n    configurePackage({\n      files: ['root.txt'],\n      dependencies: {\n        'non-existing-package': '2.0.0'\n      }\n    });\n    underTest(sourcedir, {\n      'optional-dependencies': false\n    }, logger).then(done.fail, reason => {\n      expect(reason).toMatch(/npm install -q --no-package-lock --no-audit --production --no-optional failed/);\n      done();\n    });\n  });","file":"clean-up-package-spec.js","skipped":false,"dir":"spec"},{"name":"logs progress","suites":["cleanUpPackage"],"line":99,"updatePoint":{"line":99,"column":19,"index":3692},"code":"  it('logs progress', done => {\n    const logger = new ArrayLogger();\n    underTest(sourcedir, {\n      'optional-dependencies': false,\n      'npm-options': '--dry-run'\n    }, logger).then(() => {\n      expect(logger.getCombinedLog()).toEqual([['call', 'removing optional dependencies'], ['call', 'npm install -q --no-package-lock --no-audit --production --no-optional --dry-run'], ['call', 'npm dedupe -q --no-package-lock --production --no-optional --dry-run']]);\n    }).then(done, done.fail);\n  });","file":"clean-up-package-spec.js","skipped":false,"dir":"spec"},{"name":"only dedupes if optional deps are not turned off","suites":["cleanUpPackage"],"line":108,"updatePoint":{"line":108,"column":54,"index":4228},"code":"  it('only dedupes if optional deps are not turned off', done => {\n    const logger = new ArrayLogger();\n    underTest(sourcedir, {}, logger).then(() => {\n      expect(logger.getCombinedLog()).toEqual([['call', 'npm dedupe -q --no-package-lock']]);\n    }).then(done, done.fail);\n  });","file":"clean-up-package-spec.js","skipped":false,"dir":"spec"},{"name":"executes a post-package script if requested","suites":["cleanUpPackage"],"line":114,"updatePoint":{"line":114,"column":49,"index":4508},"code":"  it('executes a post-package script if requested', done => {\n    const logger = new ArrayLogger();\n    configurePackage({\n      files: ['root.txt'],\n      scripts: {\n        'customPack': 'npm uninstall uuid'\n      }\n    });\n    underTest(sourcedir, {\n      'post-package-script': 'customPack'\n    }, logger).then(() => {\n      expect(fsUtil.isDir(path.join(sourcedir, 'node_modules', 'uuid'))).toBeFalsy();\n      expect(logger.getCombinedLog()).toEqual([['call', 'npm dedupe -q --no-package-lock'], ['call', 'npm run customPack']]);\n    }).then(done, done.fail);\n  });","file":"clean-up-package-spec.js","skipped":false,"dir":"spec"},{"name":"fixes file permissions for non-world readable files in the directory","suites":["cleanUpPackage"],"line":129,"updatePoint":{"line":129,"column":74,"index":5104},"code":"  it('fixes file permissions for non-world readable files in the directory', done => {\n    fs.writeFileSync(path.join(sourcedir, 'owner-readable.txt'), 'owner', 'utf8');\n    fs.chmodSync(path.join(sourcedir, 'owner-readable.txt'), 0o400);\n    fs.writeFileSync(path.join(sourcedir, 'group-readable.txt'), 'group', 'utf8');\n    fs.chmodSync(path.join(sourcedir, 'group-readable.txt'), 0o640);\n    fs.writeFileSync(path.join(sourcedir, 'group-executable.txt'), 'group-exec', 'utf8');\n    fs.chmodSync(path.join(sourcedir, 'group-executable.txt'), 0o650);\n    fs.mkdirSync(path.join(sourcedir, 'subdir'));\n    fs.chmodSync(path.join(sourcedir, 'subdir'), 0o700);\n    fs.writeFileSync(path.join(sourcedir, 'subdir', 'user-exec.txt'), 'user-exec', 'utf8');\n    fs.chmodSync(path.join(sourcedir, 'subdir', 'user-exec.txt'), 0o701);\n    underTest(sourcedir, {}, logger).then(() => {\n      expect(fs.statSync(path.join(sourcedir, 'owner-readable.txt')).mode & 0o777).toEqual(0o644);\n      expect(fs.statSync(path.join(sourcedir, 'group-readable.txt')).mode & 0o777).toEqual(0o644);\n      expect(fs.statSync(path.join(sourcedir, 'group-executable.txt')).mode & 0o777).toEqual(0o654);\n      expect(fs.statSync(path.join(sourcedir, 'subdir')).mode & 0o777).toEqual(0o755);\n      expect(fs.statSync(path.join(sourcedir, 'subdir', 'user-exec.txt')).mode & 0o777).toEqual(0o745);\n    }).then(done, done.fail);\n  });","file":"clean-up-package-spec.js","skipped":false,"dir":"spec"},{"name":"does not block access to methods without a cognito authorizer","suites":["cognitoAuthorizers"],"line":48,"updatePoint":{"line":48,"column":71,"index":1891},"code":"      it('does not block access to methods without a cognito authorizer', done => {\n        invoke(version + '/', {\n          method: 'GET',\n          resolveErrors: false\n        }).then(response => expect(JSON.parse(response.body)).toEqual('OK')).then(done, done.fail);\n      });","file":"cognito-authorizer-integration-spec.js","skipped":false,"dir":"spec"},{"name":"blocks access to methods with a cognito authorizer without authentication headers","suites":["cognitoAuthorizers"],"line":54,"updatePoint":{"line":54,"column":91,"index":2193},"code":"      it('blocks access to methods with a cognito authorizer without authentication headers', done => {\n        invoke(version + '/locked', {\n          method: 'GET',\n          resolveErrors: true\n        }).then(response => {\n          expect(response.statusCode).toEqual(401);\n          expect(response.headers['x-amzn-errortype']).toEqual('UnauthorizedException');\n          expect(JSON.parse(response.body)).toEqual({\n            message: 'Unauthorized'\n          });\n        }).then(done, done.fail);\n      });","file":"cognito-authorizer-integration-spec.js","skipped":false,"dir":"spec"},{"name":"blocks access to methods with a cognito authorizer for users with an invalid token","suites":["cognitoAuthorizers"],"line":66,"updatePoint":{"line":66,"column":92,"index":2710},"code":"      it('blocks access to methods with a cognito authorizer for users with an invalid token', done => {\n        invoke(version + '/locked', {\n          method: 'GET',\n          headers: {\n            'Authorization': 'ThisIsAnInvalidCognitoToken'\n          },\n          resolveErrors: true\n        }).then(response => {\n          expect(response.statusCode).toEqual(401);\n          expect(response.headers['x-amzn-errortype']).toEqual('UnauthorizedException');\n          expect(JSON.parse(response.body)).toEqual({\n            message: 'Unauthorized'\n          });\n        }).then(done, done.fail);\n      });","file":"cognito-authorizer-integration-spec.js","skipped":false,"dir":"spec"},{"name":"allows access to methods with a cognito authorizer for authorized users","suites":["cognitoAuthorizers"],"line":81,"updatePoint":{"line":81,"column":81,"index":3309},"code":"      it('allows access to methods with a cognito authorizer for authorized users', done => {\n        invoke(version + '/unlocked', {\n          method: 'GET',\n          headers: {\n            'Authorization': cognitoUserPool.getUserToken()\n          },\n          resolveErrors: false\n        }).then(response => expect(JSON.parse(response.body)).toEqual('OK for Bob-123')).then(done, done.fail);\n      });","file":"cognito-authorizer-integration-spec.js","skipped":false,"dir":"spec"},{"name":"creates resource methods with authorization scopes","suites":["cognitoOauth2Scopes","create wires up a cognito OAuth2 authorizer"],"line":62,"updatePoint":{"line":62,"column":58,"index":2546},"code":"    it('creates resource methods with authorization scopes', done => {\n      const apiGateway = new AWS.APIGateway({\n        region: awsRegion\n      });\n      apiGateway.getResources({\n        restApiId: apiId\n      }).promise().then(resources => {\n        const {\n            id\n          } = resources.items.find(resource => resource.pathPart === 'locked'),\n          params = {\n            httpMethod: 'GET',\n            resourceId: id,\n            restApiId: apiId\n          };\n        apiGateway.getMethod(params).promise().then(response => expect(response.authorizationScopes).toEqual(['email', 'openid'])).then(done, done.fail);\n      });\n    });","file":"cognito-oauth2-scopes-integration-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the source directory is not provided","suites":["collectFiles"],"line":56,"updatePoint":{"line":56,"column":51,"index":2249},"code":"  it('fails if the source directory is not provided', done => {\n    underTest().then(done.fail, message => {\n      expect(message).toEqual('source directory not provided');\n    }).then(done, done.fail);\n  });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the working directory is not specified","suites":["collectFiles"],"line":61,"updatePoint":{"line":61,"column":53,"index":2460},"code":"  it('fails if the working directory is not specified', done => {\n    underTest(sourcedir).then(done.fail, message => {\n      expect(message).toEqual('working directory not provided');\n    }).then(done, done.fail);\n  });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the source directory does not exist","suites":["collectFiles"],"line":66,"updatePoint":{"line":66,"column":50,"index":2678},"code":"  it('fails if the source directory does not exist', done => {\n    underTest(tmppath(), workingdir).then(done.fail, message => {\n      expect(message).toEqual('source directory does not exist');\n    }).then(done, done.fail);\n  });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the working directory does not exist","suites":["collectFiles"],"line":71,"updatePoint":{"line":71,"column":51,"index":2910},"code":"  it('fails if the working directory does not exist', done => {\n    underTest(sourcedir, tmppath()).then(done.fail, message => {\n      expect(message).toEqual('working directory does not exist');\n    }).then(done, done.fail);\n  });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the source directory is not a directory","suites":["collectFiles"],"line":76,"updatePoint":{"line":76,"column":54,"index":3145},"code":"  it('fails if the source directory is not a directory', done => {\n    const filePath = path.join(sourcedir, 'file.txt');\n    fs.writeFileSync(filePath, '{}', 'utf8');\n    underTest(filePath, workingdir).then(done.fail, message => {\n      expect(message).toEqual('source path must be a directory');\n    }).then(done, done.fail);\n  });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the working directory is not a directory","suites":["collectFiles"],"line":83,"updatePoint":{"line":83,"column":55,"index":3481},"code":"  it('fails if the working directory is not a directory', done => {\n    const filePath = path.join(sourcedir, 'file.txt');\n    fs.writeFileSync(filePath, '{}', 'utf8');\n    underTest(sourcedir, filePath).then(done.fail, message => {\n      expect(message).toEqual('working directory must be a directory');\n    }).then(done, done.fail);\n  });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"fails if package.json does not exist in the source directory","suites":["collectFiles"],"line":90,"updatePoint":{"line":90,"column":66,"index":3833},"code":"  it('fails if package.json does not exist in the source directory', done => {\n    underTest(sourcedir, workingdir).then(done.fail, message => {\n      expect(message).toEqual('source directory does not contain package.json');\n    }).then(done, done.fail);\n  });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"it limits the files copied to the files property","suites":["collectFiles","when the files property is specified"],"line":96,"updatePoint":{"line":96,"column":56,"index":4144},"code":"    it('it limits the files copied to the files property', done => {\n      configurePackage({\n        files: ['roo*']\n      });\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'root.txt'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'excluded.txt'))).toBeFalsy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'subdir'))).toBeFalsy();\n        done();\n      }, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"works when files is a single string","suites":["collectFiles","when the files property is specified"],"line":107,"updatePoint":{"line":107,"column":43,"index":4617},"code":"    it('works when files is a single string', done => {\n      configurePackage({\n        files: ['root.txt']\n      });\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'root.txt'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'excluded.txt'))).toBeFalsy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'subdir'))).toBeFalsy();\n        done();\n      }, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"copies all the listed files/subfolders/with wildcards from the files property to a folder in the working path","suites":["collectFiles","when the files property is specified"],"line":118,"updatePoint":{"line":118,"column":117,"index":5168},"code":"    it('copies all the listed files/subfolders/with wildcards from the files property to a folder in the working path', done => {\n      configurePackage({\n        files: ['roo*', 'subdir']\n      });\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(isSubDir(path.dirname(packagePath), workingdir)).toBeTruthy();\n        expect(fs.readFileSync(path.join(packagePath, 'root.txt'), 'utf8')).toEqual('text1');\n        expect(fs.readFileSync(path.join(packagePath, 'subdir', 'sub.txt'), 'utf8')).toEqual('text2');\n        done();\n      }, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"includes package.json even if it is not in the files property","suites":["collectFiles","when the files property is specified"],"line":129,"updatePoint":{"line":129,"column":69,"index":5700},"code":"    it('includes package.json even if it is not in the files property', done => {\n      configurePackage({\n        files: ['roo*']\n      });\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'package.json'))).toBeTruthy();\n        done();\n      }, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"ignores ","suites":["collectFiles","when the files property is specified"],"line":139,"updatePoint":{"line":139,"column":29,"index":6050},"code":"      it(`ignores ${fileName}`, done => {\n        fs.writeFileSync(path.join(sourcedir, fileName), 'root.txt', 'utf8');\n        configurePackage({\n          files: ['roo*']\n        });\n        underTest(sourcedir, workingdir).then(packagePath => {\n          expect(fsUtil.fileExists(path.join(packagePath, 'root.txt'))).toBeTruthy();\n          expect(fsUtil.fileExists(path.join(packagePath, 'excluded.txt'))).toBeFalsy();\n          expect(fsUtil.fileExists(path.join(packagePath, 'subdir'))).toBeFalsy();\n        }).then(done, done.fail);\n      });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"copies all the project files to a folder in the working path","suites":["collectFiles","when the files property is not specified"],"line":153,"updatePoint":{"line":153,"column":68,"index":6716},"code":"    it('copies all the project files to a folder in the working path', done => {\n      configurePackage({});\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(isSubDir(path.dirname(packagePath), workingdir)).toBeTruthy();\n        expect(fs.readFileSync(path.join(packagePath, 'root.txt'), 'utf8')).toEqual('text1');\n        expect(fs.readFileSync(path.join(packagePath, 'subdir', 'sub.txt'), 'utf8')).toEqual('text2');\n        expect(fs.readFileSync(path.join(packagePath, 'excluded.txt'), 'utf8')).toEqual('excl1');\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"includes package.json even if it is not in the files property","suites":["collectFiles","when the files property is not specified"],"line":162,"updatePoint":{"line":162,"column":69,"index":7300},"code":"    it('includes package.json even if it is not in the files property', done => {\n      configurePackage({});\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'package.json'))).toBeTruthy();\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"excludes  directory from the package","suites":["collectFiles","when the files property is not specified"],"line":169,"updatePoint":{"line":169,"column":56,"index":7658},"code":"      it(`excludes ${dirName} directory from the package`, done => {\n        fs.mkdirSync(path.join(sourcedir, dirName));\n        fs.writeFileSync(path.join(sourcedir, dirName, 'sub.txt'), 'text2', 'utf8');\n        configurePackage({});\n        underTest(sourcedir, workingdir).then(packagePath => {\n          expect(fsUtil.fileExists(path.join(packagePath, dirName, 'sub.txt'))).toBeFalsy();\n        }).then(done, done.fail);\n      });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"excludes  file from the package","suites":["collectFiles","when the files property is not specified"],"line":179,"updatePoint":{"line":179,"column":52,"index":8201},"code":"      it(`excludes ${fileName} file from the package`, done => {\n        fs.writeFileSync(path.join(sourcedir, fileName), 'text2', 'utf8');\n        configurePackage({});\n        underTest(sourcedir, workingdir).then(packagePath => {\n          expect(fsUtil.fileExists(path.join(packagePath, fileName))).toBeFalsy();\n        }).then(done, done.fail);\n      });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"leaves .npmrc if it exists","suites":["collectFiles","when the files property is not specified"],"line":187,"updatePoint":{"line":187,"column":34,"index":8551},"code":"    it('leaves .npmrc if it exists', done => {\n      const fileName = '.npmrc';\n      fs.writeFileSync(path.join(sourcedir, fileName), 'text2', 'utf8');\n      configurePackage({});\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, fileName))).toBeTruthy();\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"ignores the wildcard contents specified in ","suites":["collectFiles","when the files property is not specified"],"line":196,"updatePoint":{"line":196,"column":64,"index":9000},"code":"      it(`ignores the wildcard contents specified in ${fileName}`, done => {\n        fs.writeFileSync(path.join(sourcedir, fileName), 'excl*\\nsubdir', 'utf8');\n        configurePackage({});\n        underTest(sourcedir, workingdir).then(packagePath => {\n          expect(fsUtil.fileExists(path.join(packagePath, 'root.txt'))).toBeTruthy();\n          expect(fsUtil.fileExists(path.join(packagePath, 'excluded.txt'))).toBeFalsy();\n          expect(fsUtil.fileExists(path.join(packagePath, 'subdir'))).toBeFalsy();\n        }).then(done, done.fail);\n      });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"ignores node_modules even when a separate ignore is specified in ","suites":["collectFiles","when the files property is not specified"],"line":205,"updatePoint":{"line":205,"column":86,"index":9577},"code":"      it(`ignores node_modules even when a separate ignore is specified in ${fileName}`, done => {\n        fs.mkdirSync(path.join(sourcedir, 'node_modules'));\n        fs.writeFileSync(path.join(sourcedir, 'node_modules', 'sub.txt'), 'text2', 'utf8');\n        fs.writeFileSync(path.join(sourcedir, fileName), 'excl*\\nsubdir', 'utf8');\n        configurePackage({});\n        underTest(sourcedir, workingdir).then(packagePath => {\n          expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'sub.txt'))).toBeFalsy();\n        }).then(done, done.fail);\n      });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"survives blank and comment lines in ignore file lists for ","suites":["collectFiles","when the files property is not specified"],"line":214,"updatePoint":{"line":214,"column":79,"index":10141},"code":"      it(`survives blank and comment lines in ignore file lists for ${fileName}`, done => {\n        fs.writeFileSync(path.join(sourcedir, fileName), 'excl*\\nsubdir\\n\\n#root.txt', 'utf8');\n        configurePackage({});\n        underTest(sourcedir, workingdir).then(packagePath => {\n          expect(fsUtil.fileExists(path.join(packagePath, 'root.txt'))).toBeTruthy();\n          expect(fsUtil.fileExists(path.join(packagePath, 'excluded.txt'))).toBeFalsy();\n          expect(fsUtil.fileExists(path.join(packagePath, 'subdir'))).toBeFalsy();\n        }).then(done, done.fail);\n      });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"empty .npmignore files do not cause .gitignore to be ignored","suites":["collectFiles","when the files property is not specified"],"line":224,"updatePoint":{"line":224,"column":68,"index":10721},"code":"    it('empty .npmignore files do not cause .gitignore to be ignored', done => {\n      fs.writeFileSync(path.join(sourcedir, '.gitignore'), 'root.txt\\nsubdir', 'utf8');\n      fs.writeFileSync(path.join(sourcedir, '.npmignore'), '', 'utf8');\n      configurePackage({});\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'root.txt'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'subdir'))).toBeTruthy();\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"collects production npm dependencies if package config includes the dependencies object","suites":["collectFiles","collecting dependencies"],"line":240,"updatePoint":{"line":240,"column":95,"index":11601},"code":"    it('collects production npm dependencies if package config includes the dependencies object', done => {\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'uuid': '^2.0.0'\n        },\n        devDependencies: {\n          'minimist': '^1.2.0'\n        }\n      });\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'uuid'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'minimist'))).toBeFalsy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'old-mod'))).toBeFalsy();\n        done();\n      }, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"uses the local .npmrc file if it exists","suites":["collectFiles","collecting dependencies"],"line":257,"updatePoint":{"line":257,"column":47,"index":12254},"code":"    it('uses the local .npmrc file if it exists', done => {\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'uuid': '^2.0.0'\n        },\n        optionalDependencies: {\n          'minimist': '^1.2.0'\n        }\n      });\n      fs.writeFileSync(path.join(sourcedir, '.npmrc'), 'optional = false', 'utf8');\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'uuid'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'minimist'))).toBeFalsy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'old-mod'))).toBeFalsy();\n        done();\n      }, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"passes additional options to NPM if requested","suites":["collectFiles","collecting dependencies"],"line":275,"updatePoint":{"line":275,"column":53,"index":13002},"code":"    it('passes additional options to NPM if requested', done => {\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'uuid': '^2.0.0'\n        },\n        optionalDependencies: {\n          'minimist': '^1.2.0'\n        }\n      });\n      underTest(sourcedir, workingdir, {\n        'npm-options': '--no-optional'\n      }).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'uuid'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'minimist'))).toBeFalsy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'old-mod'))).toBeFalsy();\n        done();\n      }, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"uses local node_modules instead of running npm install if localDependencies is set to true","suites":["collectFiles","collecting dependencies"],"line":294,"updatePoint":{"line":294,"column":98,"index":13761},"code":"    it('uses local node_modules instead of running npm install if localDependencies is set to true', done => {\n      configurePackage({\n        dependencies: {\n          'uuid': '^2.0.0'\n        },\n        devDependencies: {\n          'minimist': '^1.2.0'\n        }\n      });\n      underTest(sourcedir, workingdir, {\n        'use-local-dependencies': true\n      }).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'uuid'))).toBeFalsy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'old-mod'))).toBeTruthy();\n        done();\n      }, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"uses local node_modules when localDependencies is set to true, even when only specific files are requested","suites":["collectFiles","collecting dependencies"],"line":311,"updatePoint":{"line":311,"column":114,"index":14403},"code":"    it('uses local node_modules when localDependencies is set to true, even when only specific files are requested', done => {\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'uuid': '^2.0.0'\n        },\n        devDependencies: {\n          'minimist': '^1.2.0'\n        }\n      });\n      underTest(sourcedir, workingdir, {\n        'use-local-dependencies': true\n      }).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'uuid'))).toBeFalsy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'old-mod'))).toBeTruthy();\n        done();\n      }, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"includes versions from package-lock.json if it exists","suites":["collectFiles","collecting dependencies"],"line":329,"updatePoint":{"line":329,"column":61,"index":15021},"code":"    it('includes versions from package-lock.json if it exists', done => {\n      const lockContents = JSON.stringify({\n        'name': 't',\n        'version': '1.0.0',\n        'lockfileVersion': 1,\n        'requires': true,\n        'dependencies': {\n          'claudia-api-builder': {\n            'version': '3.0.1',\n            'resolved': 'https://registry.npmjs.org/claudia-api-builder/-/claudia-api-builder-3.0.1.tgz',\n            'integrity': 'sha1-is7sm9KWWujA5amqIhZwWnNJ4Z4='\n          }\n        }\n      });\n      fs.writeFileSync(path.join(sourcedir, 'package-lock.json'), lockContents, 'utf8');\n      configurePackage({\n        files: ['roo*'],\n        dependencies: {\n          'claudia-api-builder': '^3'\n        }\n      });\n      underTest(sourcedir, workingdir).then(packagedir => fs.readFileSync(path.join(packagedir, 'package-lock.json'), 'utf8')).then(contents => expect(JSON.parse(contents).dependencies['claudia-api-builder'].version).toEqual('3.0.1')).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"fails if npm install fails","suites":["collectFiles","collecting dependencies"],"line":352,"updatePoint":{"line":352,"column":34,"index":15996},"code":"    it('fails if npm install fails', done => {\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'non-existing-package': '2.0.0'\n        }\n      });\n      underTest(sourcedir, workingdir).then(done.fail, reason => {\n        expect(reason).toMatch(/npm install -q --no-audit --production failed/);\n        done();\n      });\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"does not change the current working dir","suites":["collectFiles","collecting dependencies"],"line":364,"updatePoint":{"line":364,"column":47,"index":16378},"code":"    it('does not change the current working dir', done => {\n      configurePackage({\n        files: ['roo*', 'subdir']\n      });\n      underTest(sourcedir, workingdir).then(() => {\n        expect(process.cwd()).toEqual(pwd);\n        done();\n      }, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"does not change the current working dir even if npm install fails","suites":["collectFiles","collecting dependencies"],"line":373,"updatePoint":{"line":373,"column":73,"index":16674},"code":"    it('does not change the current working dir even if npm install fails', done => {\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'non-existing-package': '2.0.0'\n        }\n      });\n      underTest(sourcedir, workingdir).then(done.fail, () => {\n        expect(process.cwd()).toEqual(pwd);\n        done();\n      });\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"installs relative dir dependencies","suites":["collectFiles","relative file dependencies"],"line":387,"updatePoint":{"line":387,"column":42,"index":17065},"code":"    it('installs relative dir dependencies', done => {\n      setupDep('prod-dep');\n      setupDep('dev-dep');\n      setupDep('opt-dep');\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'prod-dep': 'file:../prod-dep'\n        },\n        devDependencies: {\n          'dev-dep': 'file:../dev-dep'\n        },\n        optionalDependencies: {\n          'opt-dep': 'file:../opt-dep'\n        }\n      });\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'prod-dep', 'prod-dep.js'))).toBeTruthy();\n        expect(fsUtil.isDir(path.join(packagePath, 'node_modules', 'prod-dep'))).toBeTruthy();\n        expect(!fsUtil.isLink(path.join(packagePath, 'node_modules', 'prod-dep'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'opt-dep', 'opt-dep.js'))).toBeTruthy();\n        expect(fsUtil.isDir(path.join(packagePath, 'node_modules', 'opt-dep'))).toBeTruthy();\n        expect(!fsUtil.isLink(path.join(packagePath, 'node_modules', 'opt-dep'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'dev-dep'))).toBeFalsy();\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"supports direct paths without file:","suites":["collectFiles","relative file dependencies"],"line":413,"updatePoint":{"line":413,"column":43,"index":18310},"code":"    it('supports direct paths without file:', done => {\n      setupDep('prod-dep');\n      setupDep('dev-dep');\n      setupDep('opt-dep');\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'prod-dep': '../prod-dep'\n        },\n        devDependencies: {\n          'dev-dep': path.resolve(workingdir, 'dev-dep')\n        },\n        optionalDependencies: {\n          'opt-dep': path.resolve(workingdir, 'opt-dep')\n        }\n      });\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'prod-dep', 'prod-dep.js'))).toBeTruthy();\n        expect(fsUtil.isDir(path.join(packagePath, 'node_modules', 'prod-dep'))).toBeTruthy();\n        expect(fsUtil.isLink(path.join(packagePath, 'node_modules', 'prod-dep'))).toBeFalsy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'opt-dep', 'opt-dep.js'))).toBeTruthy();\n        expect(fsUtil.isDir(path.join(packagePath, 'node_modules', 'opt-dep'))).toBeTruthy();\n        expect(fsUtil.isLink(path.join(packagePath, 'node_modules', 'opt-dep'))).toBeFalsy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'dev-dep'))).toBeFalsy();\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"remaps optional and production relative dependencies in package.json","suites":["collectFiles","relative file dependencies"],"line":439,"updatePoint":{"line":439,"column":76,"index":19615},"code":"    it('remaps optional and production relative dependencies in package.json', done => {\n      setupDep('prod-dep');\n      setupDep('dev-dep');\n      setupDep('opt-dep');\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'prod-dep': 'file:../prod-dep'\n        },\n        devDependencies: {\n          'dev-dep': 'file:../dev-dep'\n        },\n        optionalDependencies: {\n          'opt-dep': 'file:../opt-dep'\n        }\n      });\n      underTest(sourcedir, workingdir).then(packagePath => readjson(path.join(packagePath, 'package.json'))).then(packageConf => {\n        expect(path.basename(packageConf.dependencies['prod-dep'])).toEqual('prod-dep-1.0.0.tgz');\n        expect(path.basename(packageConf.optionalDependencies['opt-dep'])).toEqual('opt-dep-1.0.0.tgz');\n        expect(packageConf.devDependencies).toBeFalsy();\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"remaps file links to absolute paths","suites":["collectFiles","relative file dependencies"],"line":461,"updatePoint":{"line":461,"column":43,"index":20483},"code":"    it('remaps file links to absolute paths', done => {\n      let tgzPath, relativePath;\n      setupDep('prod-dep');\n      packProjectToTar(path.join(workingdir, 'prod-dep'), workingdir, [], nullLogger).then(archivePath => tgzPath = archivePath).then(() => {\n        relativePath = path.relative(sourcedir, tgzPath);\n        configurePackage({\n          files: ['root.txt'],\n          dependencies: {\n            'prod-dep': 'file:' + relativePath\n          }\n        });\n      }).then(() => underTest(sourcedir, workingdir)).then(packagePath => readjson(path.join(packagePath, 'package.json'))).then(packageConf => {\n        expect(packageConf.dependencies['prod-dep']).toEqual('file:' + tgzPath);\n        expect(packageConf.dependencies['prod-dep']).not.toEqual('file:' + relativePath);\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"removes package lock if relative dependencies are used","suites":["collectFiles","relative file dependencies"],"line":477,"updatePoint":{"line":477,"column":62,"index":21331},"code":"    it('removes package lock if relative dependencies are used', done => {\n      const lock = {\n        'name': 'testproj',\n        'version': '1.0.0',\n        'lockfileVersion': 1,\n        'requires': true,\n        'dependencies': {\n          'dev-dep': {\n            'version': 'file:../dev-dep',\n            'dev': true\n          },\n          'opt-dep': {\n            'version': 'file:../opt-dep',\n            'optional': true\n          },\n          'prod-dep': {\n            'version': 'file:../prod-dep'\n          }\n        }\n      };\n      setupDep('prod-dep');\n      setupDep('dev-dep');\n      setupDep('opt-dep');\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'prod-dep': 'file:../prod-dep'\n        },\n        devDependencies: {\n          'dev-dep': 'file:../dev-dep'\n        },\n        optionalDependencies: {\n          'opt-dep': 'file:../opt-dep'\n        }\n      });\n      fsPromise.writeFileAsync(path.join(sourcedir, 'package-lock.json'), JSON.stringify(lock), 'utf8').then(() => underTest(sourcedir, workingdir)).then(() => {\n        expect(fsUtil.isFile(path.join(workingdir, 'package-lock.json'))).toBeFalsy();\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"works with relative file dependencies after installation","suites":["collectFiles","relative file dependencies"],"line":516,"updatePoint":{"line":516,"column":64,"index":22542},"code":"    it('works with relative file dependencies after installation', done => {\n      setupDep('prod-dep');\n      setupDep('dev-dep');\n      setupDep('opt-dep');\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'prod-dep': 'file:../prod-dep'\n        },\n        devDependencies: {\n          'dev-dep': 'file:../dev-dep'\n        },\n        optionalDependencies: {\n          'opt-dep': 'file:../opt-dep'\n        }\n      });\n      runNpm(sourcedir, 'install', nullLogger, true).then(() => underTest(sourcedir, workingdir)).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'prod-dep', 'prod-dep.js'))).toBeTruthy();\n        expect(fsUtil.isDir(path.join(packagePath, 'node_modules', 'prod-dep'))).toBeTruthy();\n        expect(!fsUtil.isLink(path.join(packagePath, 'node_modules', 'prod-dep'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'opt-dep', 'opt-dep.js'))).toBeTruthy();\n        expect(fsUtil.isDir(path.join(packagePath, 'node_modules', 'opt-dep'))).toBeTruthy();\n        expect(!fsUtil.isLink(path.join(packagePath, 'node_modules', 'opt-dep'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'dev-dep'))).toBeFalsy();\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"works with relative file dependencies after shrinkwrapping","suites":["collectFiles","relative file dependencies"],"line":542,"updatePoint":{"line":542,"column":66,"index":23869},"code":"    it('works with relative file dependencies after shrinkwrapping', done => {\n      setupDep('prod-dep');\n      setupDep('dev-dep');\n      setupDep('opt-dep');\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'prod-dep': 'file:../prod-dep'\n        },\n        devDependencies: {\n          'dev-dep': 'file:../dev-dep'\n        },\n        optionalDependencies: {\n          'opt-dep': 'file:../opt-dep'\n        }\n      });\n      runNpm(sourcedir, 'install', nullLogger, true).then(() => runNpm(sourcedir, 'shrinkwrap', nullLogger, true)).then(() => underTest(sourcedir, workingdir)).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'prod-dep', 'prod-dep.js'))).toBeTruthy();\n        expect(fsUtil.isDir(path.join(packagePath, 'node_modules', 'prod-dep'))).toBeTruthy();\n        expect(!fsUtil.isLink(path.join(packagePath, 'node_modules', 'prod-dep'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'opt-dep', 'opt-dep.js'))).toBeTruthy();\n        expect(fsUtil.isDir(path.join(packagePath, 'node_modules', 'opt-dep'))).toBeTruthy();\n        expect(!fsUtil.isLink(path.join(packagePath, 'node_modules', 'opt-dep'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'dev-dep'))).toBeFalsy();\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"works with transitive relative file dependencies","suites":["collectFiles","relative file dependencies"],"line":568,"updatePoint":{"line":568,"column":56,"index":25248},"code":"    it('works with transitive relative file dependencies', done => {\n      setupDep('trans-dep');\n      setupDep('prod-dep', {\n        'trans-dep': 'file:../trans-dep'\n      });\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'prod-dep': 'file:../prod-dep'\n        }\n      });\n      underTest(sourcedir, workingdir).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'prod-dep', 'prod-dep.js'))).toBeTruthy();\n        expect(fsUtil.isDir(path.join(packagePath, 'node_modules', 'prod-dep'))).toBeTruthy();\n        expect(!fsUtil.isLink(path.join(packagePath, 'node_modules', 'prod-dep'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'trans-dep', 'trans-dep.js')) || /* npm3 */\n        fsUtil.fileExists(path.join(packagePath, 'node_modules', 'prod-dep', 'node_modules', 'trans-dep', 'trans-dep.js')) /*npm5+*/).toBeTruthy();\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"resolves the same relative dependency dir to the same file to enable deduping","suites":["collectFiles","relative file dependencies"],"line":587,"updatePoint":{"line":587,"column":85,"index":26266},"code":"    it('resolves the same relative dependency dir to the same file to enable deduping', done => {\n      setupDep('trans-dep');\n      setupDep('prod-dep', {\n        'trans-dep': 'file:../trans-dep'\n      });\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'prod-dep': 'file:../prod-dep',\n          'trans-dep': 'file:../trans-dep'\n        }\n      });\n      underTest(sourcedir, workingdir).then(packagePath => Promise.all([readjson(path.join(packagePath, 'package.json')), readjson(path.join(packagePath, 'node_modules', 'prod-dep', 'package.json'))])).then(packageConfArray => {\n        const mainConf = packageConfArray[0],\n          depConf = packageConfArray[1];\n        expect(mainConf.dependencies['trans-dep']).toEqual(depConf.dependencies['trans-dep']);\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"does not keep devDependencies of relative file dependencies","suites":["collectFiles","relative file dependencies"],"line":605,"updatePoint":{"line":605,"column":67,"index":27089},"code":"    it('does not keep devDependencies of relative file dependencies', done => {\n      setupDep('dev-dep');\n      setupDep('prod-dep', {}, {\n        'dev-dep': 'file:../dev-dep'\n      });\n      configurePackage({\n        files: ['root.txt'],\n        dependencies: {\n          'prod-dep': 'file:../prod-dep'\n        }\n      });\n      runNpm(path.join(workingdir, 'prod-dep'), 'install', nullLogger, true).then(() => underTest(sourcedir, workingdir)).then(packagePath => {\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'prod-dep', 'prod-dep.js'))).toBeTruthy();\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'dev-dep'))).toBeFalsy(); /* npm3 */\n        expect(fsUtil.fileExists(path.join(packagePath, 'node_modules', 'prod-dep', 'node_modules', 'dev-dep'))).toBeFalsy(); /*npm5+*/\n      }).then(done, done.fail);\n    });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"works with scoped packages","suites":["collectFiles","relative file dependencies"],"line":623,"updatePoint":{"line":623,"column":32,"index":27930},"code":"  it('works with scoped packages', done => {\n    configurePackage({\n      name: '@test/packname'\n    });\n    underTest(sourcedir, workingdir).then(packagePath => {\n      expect(isSubDir(path.dirname(packagePath), workingdir)).toBeTruthy();\n      expect(fs.readFileSync(path.join(packagePath, 'root.txt'), 'utf8')).toEqual('text1');\n      expect(fs.readFileSync(path.join(packagePath, 'subdir', 'sub.txt'), 'utf8')).toEqual('text2');\n      expect(fs.readFileSync(path.join(packagePath, 'excluded.txt'), 'utf8')).toEqual('excl1');\n    }).then(done, done.fail);\n  });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"works with folders containing a space","suites":["collectFiles","relative file dependencies"],"line":634,"updatePoint":{"line":634,"column":43,"index":28506},"code":"  it('works with folders containing a space', done => {\n    const oldsource = sourcedir;\n    sourcedir = `${oldsource} with space`;\n    fsUtil.move(oldsource, sourcedir);\n    configurePackage({\n      name: 'test123'\n    });\n    underTest(sourcedir, workingdir).then(packagePath => {\n      expect(isSubDir(path.dirname(packagePath), workingdir)).toBeTruthy();\n      expect(fs.readFileSync(path.join(packagePath, 'root.txt'), 'utf8')).toEqual('text1');\n      expect(fs.readFileSync(path.join(packagePath, 'subdir', 'sub.txt'), 'utf8')).toEqual('text2');\n      expect(fs.readFileSync(path.join(packagePath, 'excluded.txt'), 'utf8')).toEqual('excl1');\n      sourcedir = oldsource;\n    }).then(done, done.fail);\n  });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"logs progress","suites":["collectFiles","relative file dependencies"],"line":649,"updatePoint":{"line":649,"column":19,"index":29195},"code":"  it('logs progress', done => {\n    const logger = new ArrayLogger();\n    configurePackage({\n      files: ['root.txt'],\n      dependencies: {\n        'uuid': '^2.0.0'\n      }\n    });\n    underTest(sourcedir, workingdir, {}, logger).then(() => {\n      expect(logger.getCombinedLog()).toEqual([['stage', 'packaging files'], ['call', `npm pack -q ${sourcedir}`], ['call', 'npm install -q --no-audit --production']]);\n    }).then(done, done.fail);\n  });","file":"collect-files-spec.js","skipped":false,"dir":"spec"},{"name":"has the API methods for logging","suites":["ConsoleLogger"],"line":10,"updatePoint":{"line":10,"column":37,"index":328},"code":"  it('has the API methods for logging', () => {\n    expect(typeof underTest.logStage).toEqual('function');\n    expect(typeof underTest.logApiCall).toEqual('function');\n  });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"logs first message without the start marker","suites":["ConsoleLogger","logStage"],"line":15,"updatePoint":{"line":15,"column":51,"index":547},"code":"    it('logs first message without the start marker', () => {\n      underTest.logStage('stage 1');\n      expect(fakeConsole.error).toHaveBeenCalledWith('stage 1');\n    });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"logs second message with the start marker","suites":["ConsoleLogger","logStage"],"line":19,"updatePoint":{"line":19,"column":49,"index":717},"code":"    it('logs second message with the start marker', () => {\n      underTest.logStage('stage 1');\n      fakeConsole.error.calls.reset();\n      underTest.logStage('stage 2');\n      expect(fakeConsole.error).toHaveBeenCalledWith('[START]stage 2');\n    });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"logs the first call without the start marker","suites":["ConsoleLogger","logApiCall"],"line":27,"updatePoint":{"line":27,"column":52,"index":1012},"code":"    it('logs the first call without the start marker', () => {\n      underTest.logApiCall('svc1.api1');\n      expect(fakeConsole.error).toHaveBeenCalledWith('svc1.api1');\n    });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"logs the second call with the start marker","suites":["ConsoleLogger","logApiCall"],"line":31,"updatePoint":{"line":31,"column":50,"index":1189},"code":"    it('logs the second call with the start marker', () => {\n      underTest.logApiCall('svc1.api1');\n      fakeConsole.error.calls.reset();\n      underTest.logApiCall('svc2.api2');\n      expect(fakeConsole.error).toHaveBeenCalledWith('[START]svc2.api2');\n    });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"logs the stage and the api call if the stage is defined","suites":["ConsoleLogger","logApiCall"],"line":37,"updatePoint":{"line":37,"column":63,"index":1466},"code":"    it('logs the stage and the api call if the stage is defined', () => {\n      underTest.logStage('stage1');\n      fakeConsole.error.calls.reset();\n      underTest.logApiCall('svc1.api1');\n      expect(fakeConsole.error).toHaveBeenCalledWith('[START]stage1\\tsvc1.api1');\n    });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"ignores arguments that are not arrays","suites":["ConsoleLogger","logApiCall"],"line":43,"updatePoint":{"line":43,"column":45,"index":1728},"code":"    it('ignores arguments that are not arrays', () => {\n      underTest.logApiCall('svc1.api1', 12345);\n      expect(fakeConsole.error).toHaveBeenCalledWith('svc1.api1');\n    });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"ignores arguments that are empty arrays","suites":["ConsoleLogger","logApiCall"],"line":47,"updatePoint":{"line":47,"column":47,"index":1909},"code":"    it('ignores arguments that are empty arrays', () => {\n      underTest.logApiCall('svc1.api1', []);\n      expect(fakeConsole.error).toHaveBeenCalledWith('svc1.api1');\n    });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"ignores hash arguments that do not end with ID or Name","suites":["ConsoleLogger","logApiCall"],"line":51,"updatePoint":{"line":51,"column":62,"index":2102},"code":"    it('ignores hash arguments that do not end with ID or Name', () => {\n      underTest.logApiCall('svc1.api1', [{\n        a: 'b'\n      }]);\n      expect(fakeConsole.error).toHaveBeenCalledWith('svc1.api1');\n    });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"logs xxxName arguments","suites":["ConsoleLogger","logApiCall"],"line":57,"updatePoint":{"line":57,"column":30,"index":2287},"code":"    it('logs xxxName arguments', () => {\n      underTest.logApiCall('svc1.api1', [{\n        a: 'b',\n        FunctionName: 'Fun1'\n      }]);\n      expect(fakeConsole.error).toHaveBeenCalledWith('svc1.api1\\tFunctionName=Fun1');\n    });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"logs xxxId arguments","suites":["ConsoleLogger","logApiCall"],"line":64,"updatePoint":{"line":64,"column":28,"index":2519},"code":"    it('logs xxxId arguments', () => {\n      underTest.logApiCall('svc1.api1', [{\n        a: 'b',\n        RestApiId: 'Api1'\n      }]);\n      expect(fakeConsole.error).toHaveBeenCalledWith('svc1.api1\\tRestApiId=Api1');\n    });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"logs pathXXX arguments","suites":["ConsoleLogger","logApiCall"],"line":71,"updatePoint":{"line":71,"column":30,"index":2747},"code":"    it('logs pathXXX arguments', () => {\n      underTest.logApiCall('svc1.api1', [{\n        a: 'b',\n        pathPart: '/XXX'\n      }]);\n      expect(fakeConsole.error).toHaveBeenCalledWith('svc1.api1\\tpathPart=/XXX');\n    });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"logs multiple args matching","suites":["ConsoleLogger","logApiCall"],"line":78,"updatePoint":{"line":78,"column":35,"index":2978},"code":"    it('logs multiple args matching', () => {\n      underTest.logApiCall('svc1.api1', [{\n        a: 'b',\n        FunctionName: 'Fun1',\n        RestApiId: 'YYY'\n      }]);\n      expect(fakeConsole.error).toHaveBeenCalledWith('svc1.api1\\tFunctionName=Fun1\\tRestApiId=YYY');\n    });","file":"console-logger-spec.js","skipped":false,"dir":"spec"},{"name":"counts existing keys in an object matching the supplied array","suites":["countElements"],"line":5,"updatePoint":{"line":5,"column":67,"index":180},"code":"  it('counts existing keys in an object matching the supplied array', () => {\n    expect(countElements({\n      a: 1,\n      b: 2,\n      c: 3\n    }, [])).toEqual(0);\n    expect(countElements({\n      a: 1,\n      b: 2,\n      c: 3\n    }, ['a'])).toEqual(1);\n    expect(countElements({\n      a: 1,\n      b: 2,\n      c: 3\n    }, ['a', 'c'])).toEqual(2);\n    expect(countElements({\n      a: 1,\n      b: 2,\n      c: 3\n    }, ['a', 'c', 'd'])).toEqual(2);\n    expect(countElements({\n      a: 1,\n      b: 2,\n      c: 3\n    }, ['xa', 'xc', 'd'])).toEqual(0);\n    expect(countElements({}, ['xa', 'xc', 'd'])).toEqual(0);\n  });","file":"count-elements-spec.js","skipped":false,"dir":"spec"},{"name":"returns 0 if any of the args not defined","suites":["countElements"],"line":33,"updatePoint":{"line":33,"column":46,"index":773},"code":"  it('returns 0 if any of the args not defined', () => {\n    expect(countElements(undefined, ['a'])).toEqual(0);\n    expect(countElements({\n      a: 1\n    }, undefined)).toEqual(0);\n  });","file":"count-elements-spec.js","skipped":false,"dir":"spec"},{"name":"returns add operations for all requested types if there are no existing types","suites":["createPatchArrayForTypes"],"line":5,"updatePoint":{"line":5,"column":83,"index":232},"code":"  it('returns add operations for all requested types if there are no existing types', () => {\n    expect(createPatchArrayForTypes([], ['image/jpg', 'image/png'])).toEqual([{\n      op: 'add',\n      path: '/binaryMediaTypes/image~1jpg'\n    }, {\n      op: 'add',\n      path: '/binaryMediaTypes/image~1png'\n    }]);\n    expect(createPatchArrayForTypes(false, ['image/jpg', 'image/png'])).toEqual([{\n      op: 'add',\n      path: '/binaryMediaTypes/image~1jpg'\n    }, {\n      op: 'add',\n      path: '/binaryMediaTypes/image~1png'\n    }]);\n  });","file":"create-patch-array-for-types-spec.js","skipped":false,"dir":"spec"},{"name":"returns remove operations for all existing types if there are no requested types","suites":["createPatchArrayForTypes"],"line":21,"updatePoint":{"line":21,"column":86,"index":774},"code":"  it('returns remove operations for all existing types if there are no requested types', () => {\n    expect(createPatchArrayForTypes(['image/jpg', 'image/png'], [])).toEqual([{\n      op: 'remove',\n      path: '/binaryMediaTypes/image~1jpg'\n    }, {\n      op: 'remove',\n      path: '/binaryMediaTypes/image~1png'\n    }]);\n    expect(createPatchArrayForTypes(['image/jpg', 'image/png'], false)).toEqual([{\n      op: 'remove',\n      path: '/binaryMediaTypes/image~1jpg'\n    }, {\n      op: 'remove',\n      path: '/binaryMediaTypes/image~1png'\n    }]);\n  });","file":"create-patch-array-for-types-spec.js","skipped":false,"dir":"spec"},{"name":"returns an empty array if existing and requested are equal","suites":["createPatchArrayForTypes"],"line":37,"updatePoint":{"line":37,"column":64,"index":1306},"code":"  it('returns an empty array if existing and requested are equal', () => {\n    expect(createPatchArrayForTypes(['image/jpg', 'image/png'], ['image/jpg', 'image/png'])).toEqual([]);\n  });","file":"create-patch-array-for-types-spec.js","skipped":false,"dir":"spec"},{"name":"ignores order when comparing for equality","suites":["createPatchArrayForTypes"],"line":40,"updatePoint":{"line":40,"column":47,"index":1476},"code":"  it('ignores order when comparing for equality', () => {\n    expect(createPatchArrayForTypes(['image/png', 'image/jpg'], ['image/jpg', 'image/png'])).toEqual([]);\n  });","file":"create-patch-array-for-types-spec.js","skipped":false,"dir":"spec"},{"name":"returns the difference when both requested and existing are set","suites":["createPatchArrayForTypes"],"line":43,"updatePoint":{"line":43,"column":69,"index":1668},"code":"  it('returns the difference when both requested and existing are set', () => {\n    expect(createPatchArrayForTypes(['image/jpg', 'image/png'], ['image/png', 'image/gif'])).toEqual([{\n      op: 'remove',\n      path: '/binaryMediaTypes/image~1jpg'\n    }, {\n      op: 'add',\n      path: '/binaryMediaTypes/image~1gif'\n    }]);\n  });","file":"create-patch-array-for-types-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the source folder is same as os tmp folder","suites":["create","config validation"],"line":82,"updatePoint":{"line":82,"column":59,"index":2871},"code":"    it('fails if the source folder is same as os tmp folder', done => {\n      config.source = os.tmpdir();\n      underTest(config).then(done.fail, message => expect(message).toEqual('Source directory is the Node temp directory. Cowardly refusing to fill up disk with recursive copy.')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if name is not given either as an option or package.json name","suites":["create","config validation"],"line":86,"updatePoint":{"line":86,"column":75,"index":3193},"code":"    it('fails if name is not given either as an option or package.json name', done => {\n      fs.mkdirSync(workingdir);\n      fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n      fs.writeFileSync(path.join(workingdir, 'package.json'), '{\"name\": \"\"}', 'utf8');\n      config.name = undefined;\n      underTest(config).then(done.fail, message => expect(message).toEqual('project name is missing. please specify with --name or in package.json')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the region is not given","suites":["create","config validation"],"line":93,"updatePoint":{"line":93,"column":40,"index":3637},"code":"    it('fails if the region is not given', done => {\n      config.region = undefined;\n      underTest(config).then(done.fail, message => expect(message).toEqual('AWS region is missing. please specify with --region')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the handler is not given","suites":["create","config validation"],"line":97,"updatePoint":{"line":97,"column":41,"index":3875},"code":"    it('fails if the handler is not given', done => {\n      config.handler = undefined;\n      underTest(config).then(done.fail, message => expect(message).toEqual('Lambda handler is missing. please specify with --handler')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the handler does not contain a dot","suites":["create","config validation"],"line":101,"updatePoint":{"line":101,"column":51,"index":4129},"code":"    it('fails if the handler does not contain a dot', done => {\n      config.handler = 'api';\n      createFromDir('hello-world').then(done.fail, message => expect(message).toEqual('Lambda handler function not specified. Please specify with --handler module.function')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if both handler and api module are provided","suites":["create","config validation"],"line":105,"updatePoint":{"line":105,"column":57,"index":4424},"code":"    it('fails if both handler and api module are provided', done => {\n      config.handler = 'main.handler';\n      config['api-module'] = 'main';\n      createFromDir('hello-world').then(done.fail, message => expect(message).toEqual('incompatible arguments: cannot specify handler and api-module at the same time.')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if deploy-proxy-api is specified but handler is not","suites":["create","config validation"],"line":110,"updatePoint":{"line":110,"column":65,"index":4768},"code":"    it('fails if deploy-proxy-api is specified but handler is not', done => {\n      config['deploy-proxy-api'] = true;\n      config.handler = undefined;\n      config['api-module'] = 'abc';\n      createFromDir('hello-world').then(done.fail, message => expect(message).toEqual('deploy-proxy-api requires a handler. please specify with --handler')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if binary-media-types is specified but deploy-proxy-api is not","suites":["create","config validation"],"line":116,"updatePoint":{"line":116,"column":76,"index":5145},"code":"    it('fails if binary-media-types is specified but deploy-proxy-api is not', done => {\n      config['binary-media-types'] = 'image/jpeg';\n      config.handler = 'main.handler';\n      config['deploy-proxy-api'] = undefined;\n      createFromDir('hello-world').then(done.fail, message => expect(message).toEqual('binary-media-types only works with --deploy-proxy-api')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if subnetIds is specified without securityGroupIds","suites":["create","config validation"],"line":122,"updatePoint":{"line":122,"column":64,"index":5522},"code":"    it('fails if subnetIds is specified without securityGroupIds', done => {\n      config['subnet-ids'] = 'subnet-abcdef12';\n      config['security-group-ids'] = null;\n      createFromDir('hello-world').then(done.fail, message => expect(message).toEqual('VPC access requires at least one security group id *and* one subnet id')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if securityGroupIds is specified without subnetIds","suites":["create","config validation"],"line":127,"updatePoint":{"line":127,"column":64,"index":5871},"code":"    it('fails if securityGroupIds is specified without subnetIds', done => {\n      config['subnet-ids'] = null;\n      config['security-group-ids'] = 'sg-12341234';\n      createFromDir('hello-world').then(done.fail, message => expect(message).toEqual('VPC access requires at least one security group id *and* one subnet id')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the api module contains an extension","suites":["create","config validation"],"line":132,"updatePoint":{"line":132,"column":53,"index":6205},"code":"    it('fails if the api module contains an extension', done => {\n      config.handler = undefined;\n      config['api-module'] = 'api.js';\n      createFromDir('hello-world').then(done.fail, message => expect(message).toEqual('API module must be a module name, without the file extension or function name')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if claudia.json already exists in the source folder","suites":["create","config validation"],"line":137,"updatePoint":{"line":137,"column":65,"index":6544},"code":"    it('fails if claudia.json already exists in the source folder', done => {\n      fs.mkdirSync(workingdir);\n      fs.writeFileSync(path.join(workingdir, 'claudia.json'), '{}', 'utf8');\n      underTest(config).then(done.fail, message => expect(message).toEqual('claudia.json already exists in the source folder')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"works if claudia.json already exists in the source folder but alternative config provided","suites":["create","config validation"],"line":142,"updatePoint":{"line":142,"column":97,"index":6911},"code":"    it('works if claudia.json already exists in the source folder but alternative config provided', done => {\n      fs.mkdirSync(workingdir);\n      fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n      fs.writeFileSync(path.join(workingdir, 'claudia.json'), '{}', 'utf8');\n      process.chdir(workingdir);\n      config.config = 'lambda.json';\n      underTest(config).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the alternative config is provided but the file already exists","suites":["create","config validation"],"line":150,"updatePoint":{"line":150,"column":79,"index":7308},"code":"    it('fails if the alternative config is provided but the file already exists', done => {\n      fs.mkdirSync(workingdir);\n      fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n      fs.writeFileSync(path.join(workingdir, 'lambda.json'), '{}', 'utf8');\n      process.chdir(workingdir);\n      config.config = 'lambda.json';\n      underTest(config).then(done.fail, message => expect(message).toEqual('lambda.json already exists')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the alternative config is requested in a non-existent directory","suites":["create","config validation"],"line":158,"updatePoint":{"line":158,"column":80,"index":7776},"code":"    it('fails if the alternative config is requested in a non-existent directory', done => {\n      fs.mkdirSync(workingdir);\n      fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n      fs.writeFileSync(path.join(workingdir, 'lambda.json'), '{}', 'utf8');\n      process.chdir(workingdir);\n      config.config = path.join('non-existent', 'lambda.json');\n      underTest(config).then(done.fail, message => expect(message).toEqual('cannot write to non-existent/lambda.json')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"checks the current folder if the source parameter is not defined","suites":["create","config validation"],"line":166,"updatePoint":{"line":166,"column":72,"index":8277},"code":"    it('checks the current folder if the source parameter is not defined', done => {\n      fs.mkdirSync(workingdir);\n      process.chdir(workingdir);\n      fs.writeFileSync(path.join('claudia.json'), '{}', 'utf8');\n      underTest(config).then(done.fail, message => expect(message).toEqual('claudia.json already exists in the source folder')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if package.json does not exist in the target folder","suites":["create","config validation"],"line":172,"updatePoint":{"line":172,"column":65,"index":8633},"code":"    it('fails if package.json does not exist in the target folder', done => {\n      fs.mkdirSync(workingdir);\n      fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n      fsUtil.silentRemove(path.join(workingdir, 'package.json'));\n      underTest(config).then(done.fail, message => expect(message).toEqual('package.json does not exist in the source folder')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if local dependencies and optional dependencies are mixed","suites":["create","config validation"],"line":178,"updatePoint":{"line":178,"column":71,"index":9034},"code":"    it('fails if local dependencies and optional dependencies are mixed', done => {\n      config['use-local-dependencies'] = true;\n      config['optional-dependencies'] = false;\n      createFromDir('hello-world').then(done.fail, message => expect(message).toEqual('incompatible arguments --use-local-dependencies and --no-optional-dependencies')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"validates the package before creating the role or the function","suites":["create","config validation"],"line":183,"updatePoint":{"line":183,"column":70,"index":9400},"code":"    it('validates the package before creating the role or the function', done => {\n      createFromDir('echo-dependency-problem').then(() => done.fail('create succeeded'), reason => {\n        expect(reason).toEqual('cannot require ./main after clean installation. Check your dependencies.');\n      }).then(() => iam.getRole({\n        RoleName: `${testRunName}-executor`\n      }).promise()).then(() => done.fail('iam role was created'), () => {}).then(getLambdaConfiguration).then(() => done.fail('function was created'), done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"refuses to allow recursion to IAM ARN roles","suites":["create","config validation"],"line":190,"updatePoint":{"line":190,"column":51,"index":9917},"code":"    it('refuses to allow recursion to IAM ARN roles', done => {\n      config['allow-recursion'] = true;\n      config.role = 'arn:aws:iam::123456789012:role/S3Access';\n      createFromDir('hello-world').then(done.fail, message => expect(message).toMatch(/incompatible arguments allow-recursion and role/)).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if s3-key is specified but use-s3-bucket is not","suites":["create","config validation"],"line":195,"updatePoint":{"line":195,"column":61,"index":10252},"code":"    it('fails if s3-key is specified but use-s3-bucket is not', done => {\n      config['s3-key'] = 'foo';\n      config['use-s3-bucket'] = undefined;\n      createFromDir('hello-world').then(done.fail, message => expect(message).toEqual('--s3-key only works with --use-s3-bucket')).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"creates the IAM role for the lambda","suites":["create","role management"],"line":202,"updatePoint":{"line":202,"column":43,"index":10578},"code":"    it('creates the IAM role for the lambda', done => {\n      createFromDir('hello-world').then(() => iam.getRole({\n        RoleName: `${testRunName}-executor`\n      }).promise()).then(role => expect(role.Role.RoleName).toEqual(`${testRunName}-executor`)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"creates the function using the provided role by name","suites":["create","role management","when a role is provided"],"line":225,"updatePoint":{"line":225,"column":62,"index":11492},"code":"      it('creates the function using the provided role by name', done => {\n        config.role = `${testRunName}-manual`;\n        createFromDir('hello-world', logger).then(createResult => {\n          const savedFile = JSON.parse(fs.readFileSync(path.join(workingdir, 'claudia.json'), 'utf8'));\n          expect(createResult.lambda.role).toEqual(`${testRunName}-manual`);\n          expect(createResult.lambda.sharedRole).toBeTruthy();\n          expect(savedFile.lambda.role).toEqual(`${testRunName}-manual`);\n          expect(savedFile.lambda.sharedRole).toBeTruthy();\n        }).then(getLambdaConfiguration).then(lambdaMetadata => expect(lambdaMetadata.Role).toEqual(createdRole.Arn)).then(invoke).then(result => JSON.parse(result.Payload)).then(payload => expect(payload).toEqual('hello world')).then(() => iam.getRole({\n          RoleName: `${testRunName}-executor`\n        }).promise()).then(() => done.fail('Executor role was created'), done);\n      });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"does not set up any additional cloudwatch policies if --role is provided","suites":["create","role management","when a role is provided"],"line":237,"updatePoint":{"line":237,"column":82,"index":12470},"code":"      it('does not set up any additional cloudwatch policies if --role is provided', done => {\n        config.role = `${testRunName}-manual`;\n        createFromDir('hello-world', logger).then(() => iam.listRolePolicies({\n          RoleName: roleName\n        }).promise()).then(result => expect(result.PolicyNames).toEqual([])).then(done, done.fail);\n      });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"creates the function using the provided role by ARN, without any IAM calls","suites":["create","role management","when a role is provided"],"line":243,"updatePoint":{"line":243,"column":84,"index":12832},"code":"      it('creates the function using the provided role by ARN, without any IAM calls', done => {\n        config.role = createdRole.Arn;\n        createFromDir('hello-world', logger).then(() => {\n          newObjects.lambdaRole = roleName;\n          expect(logger.getApiCallLogForService('iam', true)).toEqual([]);\n        }).then(getLambdaConfiguration).then(lambdaMetadata => expect(lambdaMetadata.Role).toEqual(createdRole.Arn)).then(invoke).then(result => JSON.parse(result.Payload)).then(payload => expect(payload).toEqual('hello world')).then(() => iam.listRolePolicies({\n          RoleName: roleName\n        }).promise()).then(result => expect(result.PolicyNames).toEqual([])).then(done, done.fail);\n      });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"allows the function to log to cloudwatch","suites":["create","role management","when a role is provided"],"line":253,"updatePoint":{"line":253,"column":48,"index":13519},"code":"    it('allows the function to log to cloudwatch', done => {\n      logs.createLogGroup({\n        logGroupName: `${testRunName}-group`\n      }).promise().then(() => {\n        newObjects.logGroup = `${testRunName}-group`;\n        return logs.createLogStream({\n          logGroupName: `${testRunName}-group`,\n          logStreamName: `${testRunName}-stream`\n        }).promise();\n      }).then(() => createFromDir('cloudwatch-log')).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Payload: JSON.stringify({\n            region: awsRegion,\n            stream: `${testRunName}-stream`,\n            group: `${testRunName}-group`,\n            message: `hello ${testRunName}`\n          })\n        }).promise();\n      }).then(() => pollForLogEvents(`${testRunName}-group`, `hello ${testRunName}`, awsRegion)).then(events => {\n        expect(events.length).toEqual(1);\n        expect(events[0].message).toEqual(`hello ${testRunName}`);\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"allows function to call itself if --allow-recursion is specified","suites":["create","role management","when a role is provided"],"line":277,"updatePoint":{"line":277,"column":72,"index":14551},"code":"    it('allows function to call itself if --allow-recursion is specified', done => {\n      config['allow-recursion'] = true;\n      createFromDir('hello-world').then(() => iam.listRolePolicies({\n        RoleName: `${testRunName}-executor`\n      }).promise()).then(result => expect(result.PolicyNames).toEqual(['log-writer', 'recursive-execution'])).then(() => iam.getRolePolicy({\n        PolicyName: 'recursive-execution',\n        RoleName: `${testRunName}-executor`\n      }).promise()).then(policy => {\n        expect(JSON.parse(decodeURIComponent(policy.PolicyDocument))).toEqual({\n          'Version': '2012-10-17',\n          'Statement': [{\n            'Sid': 'InvokePermission',\n            'Effect': 'Allow',\n            'Action': ['lambda:InvokeFunction'],\n            'Resource': `arn:aws:lambda:${awsRegion}:*:function:${testRunName}`\n          }]\n        });\n      }).then(done, e => {\n        console.log(e);\n        done.fail();\n      });\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"adds subnet and security group membership to the function","suites":["create","role management","VPC setup"],"line":348,"updatePoint":{"line":348,"column":67,"index":17273},"code":"      it('adds subnet and security group membership to the function', done => {\n        createFromDir('hello-world').then(getLambdaConfiguration).then(result => {\n          expect(result.VpcConfig.SecurityGroupIds[0]).toEqual(securityGroup.GroupId);\n          expect(result.VpcConfig.SubnetIds[0]).toEqual(subnet.SubnetId);\n        }).then(done, e => {\n          console.log(e);\n          done.fail();\n        });\n      });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"adds VPC Access IAM role","suites":["create","role management","VPC setup"],"line":357,"updatePoint":{"line":357,"column":34,"index":17664},"code":"      it('adds VPC Access IAM role', done => {\n        createFromDir('hello-world').then(() => iam.listRolePolicies({\n          RoleName: `${testRunName}-executor`\n        }).promise()).then(result => expect(result.PolicyNames).toEqual(['log-writer', 'vpc-access-execution'])).then(() => iam.getRolePolicy({\n          PolicyName: 'vpc-access-execution',\n          RoleName: `${testRunName}-executor`\n        }).promise()).then(policy => {\n          expect(JSON.parse(decodeURIComponent(policy.PolicyDocument))).toEqual(vpcPolicy);\n        }).then(done, done.fail);\n      });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"patches IAM policies when the role is specified with a name","suites":["create","role management","VPC setup","when a role is provided"],"line":381,"updatePoint":{"line":381,"column":71,"index":18776},"code":"        it('patches IAM policies when the role is specified with a name', done => {\n          config.role = roleName;\n          createFromDir('hello-world').then(() => iam.listRolePolicies({\n            RoleName: roleName\n          }).promise()).then(result => expect(result.PolicyNames).toEqual(['vpc-access-execution'])).then(() => iam.getRolePolicy({\n            PolicyName: 'vpc-access-execution',\n            RoleName: roleName\n          }).promise()).then(policy => {\n            expect(JSON.parse(decodeURIComponent(policy.PolicyDocument))).toEqual(vpcPolicy);\n          }).then(done, done.fail);\n        });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"does not try to patch IAM policies if the role is specified with an ARN","suites":["create","role management","VPC setup","when a role is provided"],"line":392,"updatePoint":{"line":392,"column":83,"index":19404},"code":"        it('does not try to patch IAM policies if the role is specified with an ARN', done => {\n          config.role = createdRoleArn;\n          return iam.putRolePolicy({\n            RoleName: roleName,\n            PolicyName: 'test-vpc-access',\n            PolicyDocument: JSON.stringify(vpcPolicy)\n          }).promise().then(() => createFromDir('hello-world')).then(() => iam.listRolePolicies({\n            RoleName: roleName\n          }).promise()).then(result => expect(result.PolicyNames).toEqual(['test-vpc-access'])).then(done, done.fail);\n        });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"loads additional policies from a policies directory recursively, if provided","suites":["create","role management","VPC setup","when a role is provided"],"line":404,"updatePoint":{"line":404,"column":84,"index":19985},"code":"    it('loads additional policies from a policies directory recursively, if provided', done => {\n      const sesPolicy = {\n          'Version': '2012-10-17',\n          'Statement': [{\n            'Effect': 'Allow',\n            'Action': ['ses:SendEmail'],\n            'Resource': ['*']\n          }]\n        },\n        policiesDir = path.join(workingdir, 'policies');\n      fs.mkdirSync(workingdir);\n      fs.mkdirSync(policiesDir);\n      fs.mkdirSync(path.join(policiesDir, 'subdir'));\n      fs.writeFileSync(path.join(workingdir, 'policies', 'subdir', 'ses policy.json'), JSON.stringify(sesPolicy), 'utf8');\n      config.policies = policiesDir;\n      createFromDir('hello-world').then(() => iam.listRolePolicies({\n        RoleName: `${testRunName}-executor`\n      }).promise()).then(result => expect(result.PolicyNames).toEqual(['log-writer', 'ses-policy-json'])).then(() => iam.getRolePolicy({\n        PolicyName: 'ses-policy-json',\n        RoleName: `${testRunName}-executor`\n      }).promise()).then(policy => expect(JSON.parse(decodeURIComponent(policy.PolicyDocument))).toEqual(sesPolicy)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"loads additional policies from a file pattern, if provided","suites":["create","role management","VPC setup","when a role is provided"],"line":426,"updatePoint":{"line":426,"column":66,"index":21094},"code":"    it('loads additional policies from a file pattern, if provided', done => {\n      const sesPolicy = {\n          'Version': '2012-10-17',\n          'Statement': [{\n            'Effect': 'Allow',\n            'Action': ['ses:SendEmail'],\n            'Resource': ['*']\n          }]\n        },\n        policiesDir = path.join(workingdir, 'policies');\n      fs.mkdirSync(workingdir);\n      fs.mkdirSync(path.join(policiesDir));\n      fs.writeFileSync(path.join(workingdir, 'policies', 'ses policy.json'), JSON.stringify(sesPolicy), 'utf8');\n      config.policies = path.join(policiesDir, '*.json');\n      createFromDir('hello-world').then(() => iam.listRolePolicies({\n        RoleName: `${testRunName}-executor`\n      }).promise()).then(result => expect(result.PolicyNames).toEqual(['log-writer', 'ses-policy-json'])).then(() => iam.getRolePolicy({\n        PolicyName: 'ses-policy-json',\n        RoleName: `${testRunName}-executor`\n      }).promise()).then(policy => expect(JSON.parse(decodeURIComponent(policy.PolicyDocument))).toEqual(sesPolicy)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the policies argument does not match any files","suites":["create","role management","VPC setup","when a role is provided"],"line":447,"updatePoint":{"line":447,"column":63,"index":22168},"code":"    it('fails if the policies argument does not match any files', done => {\n      config.policies = path.join('*.NOT');\n      createFromDir('hello-world').then(done.fail, error => expect(error).toEqual('no files match additional policies (*.NOT)')).then(() => iam.getRole({\n        RoleName: `${testRunName}-executor`\n      }).promise()).then(() => done.fail('iam role was created'), () => {}).then(getLambdaConfiguration).then(() => done.fail('function was created'), done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"creates  deployments by default","suites":["create","runtime support"],"line":455,"updatePoint":{"line":455,"column":56,"index":22689},"code":"    it(`creates ${defaultRuntime} deployments by default`, done => {\n      createFromDir('hello-world').then(getLambdaConfiguration).then(lambdaResult => expect(lambdaResult.Runtime).toEqual(defaultRuntime)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"can create  when requested","suites":["create","runtime support"],"line":459,"updatePoint":{"line":459,"column":55,"index":22979},"code":"      it(`can create ${supportedRuntime} when requested`, done => {\n        config.runtime = supportedRuntime;\n        createFromDir('hello-world').then(getLambdaConfiguration).then(lambdaResult => expect(lambdaResult.Runtime).toEqual(supportedRuntime)).then(done, done.fail);\n      });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if memory value is < ","suites":["create","memory option support"],"line":466,"updatePoint":{"line":466,"column":62,"index":23331},"code":"    it(`fails if memory value is < ${limits.LAMBDA.MEMORY.MIN}`, done => {\n      config.memory = limits.LAMBDA.MEMORY.MIN - 64;\n      createFromDir('hello-world').then(done.fail, error => expect(error).toEqual(`the memory value provided must be greater than or equal to ${limits.LAMBDA.MEMORY.MIN}`)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if memory value is 0","suites":["create","memory option support"],"line":470,"updatePoint":{"line":470,"column":34,"index":23635},"code":"    it('fails if memory value is 0', done => {\n      config.memory = 0;\n      createFromDir('hello-world').then(done.fail, error => expect(error).toEqual(`the memory value provided must be greater than or equal to ${limits.LAMBDA.MEMORY.MIN}`)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if memory value is > ","suites":["create","memory option support"],"line":474,"updatePoint":{"line":474,"column":62,"index":23939},"code":"    it(`fails if memory value is > ${limits.LAMBDA.MEMORY.MAX}`, done => {\n      config.memory = limits.LAMBDA.MEMORY.MAX + 64;\n      createFromDir('hello-world').then(done.fail, error => expect(error).toEqual(`the memory value provided must be less than or equal to ${limits.LAMBDA.MEMORY.MAX}`)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if memory value is not a multiple of 64","suites":["create","memory option support"],"line":478,"updatePoint":{"line":478,"column":53,"index":24259},"code":"    it('fails if memory value is not a multiple of 64', done => {\n      config.memory = limits.LAMBDA.MEMORY.MIN + 2;\n      createFromDir('hello-world').then(done.fail, error => expect(error).toEqual('the memory value provided must be a multiple of 64')).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"creates memory size of  MB by default","suites":["create","memory option support"],"line":482,"updatePoint":{"line":482,"column":72,"index":24564},"code":"    it(`creates memory size of ${limits.LAMBDA.MEMORY.MIN} MB by default`, done => {\n      createFromDir('hello-world').then(getLambdaConfiguration).then(lambdaResult => expect(lambdaResult.MemorySize).toEqual(limits.LAMBDA.MEMORY.MIN)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"can specify memory size using the --memory argument","suites":["create","memory option support"],"line":485,"updatePoint":{"line":485,"column":59,"index":24819},"code":"    it('can specify memory size using the --memory argument', done => {\n      config.memory = limits.LAMBDA.MEMORY.MAX;\n      createFromDir('hello-world').then(getLambdaConfiguration).then(lambdaResult => expect(lambdaResult.MemorySize).toEqual(limits.LAMBDA.MEMORY.MAX)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if timeout value is < 1","suites":["create","timeout option support"],"line":491,"updatePoint":{"line":491,"column":37,"index":25151},"code":"    it('fails if timeout value is < 1', done => {\n      config.timeout = 0;\n      createFromDir('hello-world').then(done.fail, error => expect(error).toEqual('the timeout value provided must be greater than or equal to 1')).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"fails if timeout value is > 900","suites":["create","timeout option support"],"line":495,"updatePoint":{"line":495,"column":39,"index":25408},"code":"    it('fails if timeout value is > 900', done => {\n      config.timeout = 901;\n      createFromDir('hello-world').then(done.fail, error => expect(error).toEqual('the timeout value provided must be less than or equal to 900')).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"creates timeout of 3 seconds by default","suites":["create","timeout option support"],"line":499,"updatePoint":{"line":499,"column":47,"index":25674},"code":"    it('creates timeout of 3 seconds by default', done => {\n      createFromDir('hello-world').then(getLambdaConfiguration).then(lambdaResult => expect(lambdaResult.Timeout).toEqual(3)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"can specify timeout using the --timeout argument","suites":["create","timeout option support"],"line":502,"updatePoint":{"line":502,"column":56,"index":25900},"code":"    it('can specify timeout using the --timeout argument', done => {\n      config.timeout = 900;\n      createFromDir('hello-world').then(getLambdaConfiguration).then(lambdaResult => expect(lambdaResult.Timeout).toEqual(900)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"wires up the handler so the function is executable","suites":["create","creating the function"],"line":508,"updatePoint":{"line":508,"column":58,"index":26208},"code":"    it('wires up the handler so the function is executable', done => {\n      createFromDir('echo').then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          InvocationType: 'RequestResponse',\n          Payload: JSON.stringify({\n            message: `hello ${testRunName}`\n          })\n        }).promise();\n      }).then(result => expect(JSON.parse(result.Payload)).toEqual({\n        message: `hello ${testRunName}`\n      })).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"wires up handlers from subfolders","suites":["create","creating the function"],"line":521,"updatePoint":{"line":521,"column":41,"index":26681},"code":"    it('wires up handlers from subfolders', done => {\n      fs.mkdirSync(workingdir);\n      fs.mkdirSync(path.join(workingdir, 'subdir'));\n      fsUtil.copy('spec/test-projects/echo', workingdir, true);\n      fsUtil.move(path.join(workingdir, 'main.js'), path.join(workingdir, 'subdir', 'mainfromsub.js'));\n      config.handler = 'subdir/mainfromsub.handler';\n      process.chdir(workingdir);\n      underTest(config).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          InvocationType: 'RequestResponse',\n          Payload: JSON.stringify({\n            message: `hello ${testRunName}`\n          })\n        }).promise();\n      }).then(result => expect(JSON.parse(result.Payload)).toEqual({\n        message: `hello ${testRunName}`\n      })).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"returns an object containing the new claudia configuration","suites":["create","creating the function"],"line":540,"updatePoint":{"line":540,"column":66,"index":27514},"code":"    it('returns an object containing the new claudia configuration', done => {\n      createFromDir('hello-world').then(creationResult => {\n        expect(creationResult.lambda).toEqual({\n          role: `${testRunName}-executor`,\n          region: awsRegion,\n          name: testRunName\n        });\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"uses the name from package.json if --name is not specified","suites":["create","creating the function"],"line":549,"updatePoint":{"line":549,"column":66,"index":27853},"code":"    it('uses the name from package.json if --name is not specified', done => {\n      config.name = undefined;\n      createFromDir('hello-world').then(creationResult => {\n        expect(creationResult.lambda).toEqual({\n          role: 'hello-world2-executor',\n          region: awsRegion,\n          name: 'hello-world2'\n        });\n      }).then(() => lambda.getFunctionConfiguration({\n        FunctionName: 'hello-world2'\n      }).promise()).then(lambdaResult => expect(lambdaResult.Runtime).toEqual(defaultRuntime)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"renames scoped NPM packages to a sanitized Lambda name","suites":["create","creating the function"],"line":561,"updatePoint":{"line":561,"column":62,"index":28397},"code":"    it('renames scoped NPM packages to a sanitized Lambda name', done => {\n      config.name = undefined;\n      createFromDir('hello-world-scoped').then(creationResult => {\n        expect(creationResult.lambda).toEqual({\n          role: 'test_hello-world-executor',\n          region: awsRegion,\n          name: 'test_hello-world'\n        });\n      }).then(() => lambda.getFunctionConfiguration({\n        FunctionName: 'test_hello-world'\n      }).promise()).then(lambdaResult => expect(lambdaResult.Runtime).toEqual(defaultRuntime)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"uses the package.json description field if --description is not provided","suites":["create","creating the function"],"line":573,"updatePoint":{"line":573,"column":80,"index":28978},"code":"    it('uses the package.json description field if --description is not provided', done => {\n      createFromDir('package-description').then(getLambdaConfiguration).then(lambdaResult => expect(lambdaResult.Description).toEqual('This is the package description')).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"uses --description as the lambda description even if the package.json description field is provided","suites":["create","creating the function"],"line":576,"updatePoint":{"line":576,"column":107,"index":29299},"code":"    it('uses --description as the lambda description even if the package.json description field is provided', done => {\n      config.description = 'description from config';\n      createFromDir('package-description').then(getLambdaConfiguration).then(lambdaResult => expect(lambdaResult.Description).toEqual('description from config')).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"saves the configuration into claudia.json","suites":["create","creating the function"],"line":580,"updatePoint":{"line":580,"column":49,"index":29608},"code":"    it('saves the configuration into claudia.json', done => {\n      createFromDir('hello-world').then(creationResult => expect(JSON.parse(fs.readFileSync(path.join(workingdir, 'claudia.json'), 'utf8'))).toEqual(creationResult)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"saves the configuration into an alternative configuration file if provided","suites":["create","creating the function"],"line":583,"updatePoint":{"line":583,"column":82,"index":29900},"code":"    it('saves the configuration into an alternative configuration file if provided', done => {\n      config.config = path.join(workingdir, 'lambda.json');\n      createFromDir('hello-world').then(creationResult => {\n        expect(fs.existsSync(path.join(workingdir, 'claudia.json'))).toBeFalsy();\n        expect(JSON.parse(fs.readFileSync(path.join(workingdir, 'lambda.json'), 'utf8'))).toEqual(creationResult);\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"configures the function in AWS so it can be invoked","suites":["create","creating the function"],"line":590,"updatePoint":{"line":590,"column":59,"index":30329},"code":"    it('configures the function in AWS so it can be invoked', done => {\n      createFromDir('hello-world').then(() => lambda.invoke({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(lambdaResult.Payload).toEqual('\"hello world\"');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"configures the function so it will be versioned","suites":["create","creating the function"],"line":598,"updatePoint":{"line":598,"column":55,"index":30693},"code":"    it('configures the function so it will be versioned', done => {\n      createFromDir('hello-world').then(() => lambda.listVersionsByFunction({\n        FunctionName: testRunName\n      }).promise()).then(result => {\n        expect(result.Versions.length).toEqual(2);\n        expect(result.Versions[0].Version).toEqual('$LATEST');\n        expect(result.Versions[1].Version).toEqual('1');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"adds the latest alias","suites":["create","creating the function"],"line":607,"updatePoint":{"line":607,"column":29,"index":31095},"code":"    it('adds the latest alias', done => {\n      config.version = 'great';\n      createFromDir('hello-world').then(() => lambda.getAlias({\n        FunctionName: testRunName,\n        Name: 'latest'\n      }).promise()).then(result => expect(result.FunctionVersion).toEqual('$LATEST')).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"adds the version alias if supplied","suites":["create","creating the function"],"line":614,"updatePoint":{"line":614,"column":42,"index":31421},"code":"    it('adds the version alias if supplied', done => {\n      config.version = 'great';\n      createFromDir('hello-world').then(() => lambda.getAlias({\n        FunctionName: testRunName,\n        Name: 'great'\n      }).promise()).then(result => expect(result.FunctionVersion).toEqual('1')).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"uses local dependencies if requested","suites":["create","creating the function"],"line":621,"updatePoint":{"line":621,"column":44,"index":31742},"code":"    it('uses local dependencies if requested', done => {\n      const projectDir = path.join(__dirname, 'test-projects', 'local-dependencies');\n      config['use-local-dependencies'] = true;\n      fsUtil.silentRemove(path.join(projectDir, 'node_modules'));\n      fs.mkdirSync(path.join(projectDir, 'node_modules'));\n      fsUtil.copy(path.join(projectDir, 'local_modules'), path.join(projectDir, 'node_modules'), true);\n      createFromDir('local-dependencies').then(() => lambda.invoke({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(lambdaResult.Payload).toEqual('\"hello local\"');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"rewires relative local dependencies to reference original location after copy","suites":["create","creating the function"],"line":634,"updatePoint":{"line":634,"column":85,"index":32505},"code":"    it('rewires relative local dependencies to reference original location after copy', done => {\n      fs.mkdirSync(workingdir);\n      fsUtil.copy(path.join(__dirname, 'test-projects', 'relative-dependencies'), workingdir, true);\n      config.source = path.join(workingdir, 'lambda');\n      underTest(config).then(result => {\n        newObjects.lambdaRole = result.lambda && result.lambda.role;\n        newObjects.lambdaFunction = result.lambda && result.lambda.name;\n        newObjects.restApi = result.api && result.api.id;\n        return result;\n      }).then(() => lambda.invoke({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(lambdaResult.Payload).toEqual('\"hello relative\"');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"removes optional dependencies after validation if requested","suites":["create","creating the function"],"line":650,"updatePoint":{"line":650,"column":67,"index":33310},"code":"    it('removes optional dependencies after validation if requested', done => {\n      config['optional-dependencies'] = false;\n      createFromDir('optional-dependencies').then(() => lambda.invoke({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(JSON.parse(lambdaResult.Payload).modules.filter(t => !t.startsWith('.'))).toEqual(['huh']);\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"removes .npmrc from the package","suites":["create","creating the function"],"line":659,"updatePoint":{"line":659,"column":39,"index":33759},"code":"    it('removes .npmrc from the package', done => {\n      createFromDir('ls-dir').then(() => lambda.invoke({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(JSON.parse(lambdaResult.Payload).files).not.toContain('.npmrc');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"keeps the archive on the disk if --keep is specified","suites":["create","creating the function"],"line":667,"updatePoint":{"line":667,"column":60,"index":34140},"code":"    it('keeps the archive on the disk if --keep is specified', done => {\n      config.keep = true;\n      createFromDir('hello-world').then(result => {\n        expect(result.archive).toBeTruthy();\n        expect(fs.existsSync(result.archive)).toBeTruthy();\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"uses a s3 bucket if provided","suites":["create","creating the function"],"line":674,"updatePoint":{"line":674,"column":36,"index":34412},"code":"    it('uses a s3 bucket if provided', done => {\n      const logger = new ArrayLogger(),\n        bucketName = `${testRunName}-bucket`;\n      let archivePath;\n      config.keep = true;\n      config['use-s3-bucket'] = bucketName;\n      s3.createBucket({\n        Bucket: bucketName\n      }).promise().then(() => {\n        newObjects.s3bucket = bucketName;\n      }).then(() => createFromDir('hello-world', logger)).then(result => {\n        const expectedKey = path.basename(result.archive);\n        archivePath = result.archive;\n        expect(result.s3key).toEqual(expectedKey);\n        return s3.headObject({\n          Bucket: bucketName,\n          Key: expectedKey\n        }).promise();\n      }).then(fileResult => expect(parseInt(fileResult.ContentLength)).toEqual(fs.statSync(archivePath).size)).then(() => expect(logger.getApiCallLogForService('s3', true)).toEqual(['s3.upload', 's3.getSignatureVersion'])).then(() => lambda.invoke({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(lambdaResult.Payload).toEqual('\"hello world\"');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"uses a s3 bucket with server side encryption if provided","suites":["create","creating the function"],"line":699,"updatePoint":{"line":699,"column":64,"index":35610},"code":"    it('uses a s3 bucket with server side encryption if provided', done => {\n      const logger = new ArrayLogger(),\n        bucketName = `${testRunName}-bucket`,\n        serverSideEncryption = 'AES256';\n      let archivePath;\n      config.keep = true;\n      config['use-s3-bucket'] = bucketName;\n      config['s3-sse'] = serverSideEncryption;\n      s3.createBucket({\n        Bucket: bucketName\n      }).promise().then(() => {\n        newObjects.s3bucket = bucketName;\n      }).then(() => {\n        return s3.putBucketEncryption({\n          Bucket: bucketName,\n          ServerSideEncryptionConfiguration: {\n            Rules: [{\n              ApplyServerSideEncryptionByDefault: {\n                SSEAlgorithm: 'AES256'\n              }\n            }]\n          }\n        }).promise();\n      }).then(() => {\n        return s3.putBucketPolicy({\n          Bucket: bucketName,\n          Policy: `{\n\t\t\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\t\t\"Statement\":  [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"Sid\": \"S3Encryption\",\n\t\t\t\t\t\t\t\t\"Action\": [ \"s3:PutObject\" ],\n\t\t\t\t\t\t\t\t\"Effect\": \"Deny\",\n\t\t\t\t\t\t\t\t\"Resource\": \"arn:aws:s3:::${bucketName}/*\",\n\t\t\t\t\t\t\t\t\"Principal\": \"*\",\n\t\t\t\t\t\t\t\t\"Condition\": {\n\t\t\t\t\t\t\t\t\t\"Null\": {\n\t\t\t\t\t\t\t\t\t\t\"s3:x-amz-server-side-encryption\": true\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}`\n        }).promise();\n      }).then(() => createFromDir('hello-world', logger)).then(result => {\n        const expectedKey = path.basename(result.archive);\n        archivePath = result.archive;\n        expect(result.s3key).toEqual(expectedKey);\n        return s3.headObject({\n          Bucket: bucketName,\n          Key: expectedKey\n        }).promise();\n      }).then(fileResult => expect(parseInt(fileResult.ContentLength)).toEqual(fs.statSync(archivePath).size)).then(() => expect(logger.getApiCallLogForService('s3', true)).toEqual(['s3.upload', 's3.getSignatureVersion'])).then(() => lambda.invoke({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(lambdaResult.Payload).toEqual('\"hello world\"');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"uses an s3 key if provided","suites":["create","creating the function"],"line":758,"updatePoint":{"line":758,"column":34,"index":37687},"code":"    it('uses an s3 key if provided', done => {\n      const logger = new ArrayLogger(),\n        bucketName = `${testRunName}-bucket`,\n        keyName = `${testRunName}-key`;\n      let archivePath;\n      config.keep = true;\n      config['use-s3-bucket'] = bucketName;\n      config['s3-key'] = keyName;\n      s3.createBucket({\n        Bucket: bucketName\n      }).promise().then(() => {\n        newObjects.s3Bucket = bucketName;\n        newObjects.s3Key = keyName;\n      }).then(() => createFromDir('hello-world', logger)).then(result => {\n        const expectedKey = keyName;\n        archivePath = result.archive;\n        expect(result.s3key).toEqual(expectedKey);\n        return s3.headObject({\n          Bucket: bucketName,\n          Key: expectedKey\n        }).promise();\n      }).then(fileResult => expect(parseInt(fileResult.ContentLength)).toEqual(fs.statSync(archivePath).size)).then(() => expect(logger.getApiCallLogForService('s3', true)).toEqual(['s3.upload', 's3.getSignatureVersion'])).then(() => lambda.invoke({\n        FunctionName: testRunName\n      }).promise()).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(lambdaResult.Payload).toEqual('\"hello world\"');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"creates a proxy web API","suites":["create","deploying a proxy api"],"line":791,"updatePoint":{"line":791,"column":31,"index":39062},"code":"    it('creates a proxy web API', done => {\n      createFromDir('apigw-proxy-echo').then(creationResult => {\n        const apiId = creationResult.api && creationResult.api.id;\n        expect(apiId).toBeTruthy();\n        expect(creationResult.api.url).toEqual(`https://${apiId}.execute-api.${awsRegion}.amazonaws.com/latest`);\n        return apiId;\n      }).then(apiId => apiGatewayPromise.getRestApiPromise({\n        restApiId: apiId\n      })).then(restApi => expect(restApi.name).toEqual(testRunName)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"creates a proxy web API using a handler from a subfolder","suites":["create","deploying a proxy api"],"line":801,"updatePoint":{"line":801,"column":64,"index":39629},"code":"    it('creates a proxy web API using a handler from a subfolder', done => {\n      fs.mkdirSync(workingdir);\n      fs.mkdirSync(path.join(workingdir, 'subdir'));\n      fsUtil.copy('spec/test-projects/apigw-proxy-echo', workingdir, true);\n      fsUtil.move(path.join(workingdir, 'main.js'), path.join(workingdir, 'subdir', 'mainfromsub.js'));\n      config.handler = 'subdir/mainfromsub.handler';\n      process.chdir(workingdir);\n      underTest(config).then(creationResult => creationResult.api.id).then(apiId => callApi(apiId, awsRegion, 'latest?abc=xkcd&dd=yy')).then(contents => JSON.parse(contents.body)).then(params => {\n        expect(params.queryStringParameters).toEqual({\n          abc: 'xkcd',\n          dd: 'yy'\n        });\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.path).toEqual('/');\n        expect(params.requestContext.stage).toEqual('latest');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"saves the api ID without module into claudia.json","suites":["create","deploying a proxy api"],"line":818,"updatePoint":{"line":818,"column":57,"index":40566},"code":"    it('saves the api ID without module into claudia.json', done => {\n      createFromDir('apigw-proxy-echo').then(creationResult => {\n        const savedContents = JSON.parse(fs.readFileSync(path.join(workingdir, 'claudia.json'), 'utf8'));\n        expect(savedContents.api).toEqual({\n          id: creationResult.api.id\n        });\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"sets up the API to route sub-resource calls to Lambda","suites":["create","deploying a proxy api"],"line":826,"updatePoint":{"line":826,"column":61,"index":40943},"code":"    it('sets up the API to route sub-resource calls to Lambda', done => {\n      createFromDir('apigw-proxy-echo').then(creationResult => creationResult.api.id).then(apiId => callApi(apiId, awsRegion, 'latest/hello/there?abc=xkcd&dd=yy')).then(contents => JSON.parse(contents.body)).then(params => {\n        expect(params.queryStringParameters).toEqual({\n          abc: 'xkcd',\n          dd: 'yy'\n        });\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.path).toEqual('/hello/there');\n        expect(params.requestContext.stage).toEqual('latest');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"sets up the API to route root calls to Lambda","suites":["create","deploying a proxy api"],"line":837,"updatePoint":{"line":837,"column":53,"index":41564},"code":"    it('sets up the API to route root calls to Lambda', done => {\n      createFromDir('apigw-proxy-echo').then(creationResult => creationResult.api.id).then(apiId => callApi(apiId, awsRegion, 'latest?abc=xkcd&dd=yy')).then(contents => JSON.parse(contents.body)).then(params => {\n        expect(params.queryStringParameters).toEqual({\n          abc: 'xkcd',\n          dd: 'yy'\n        });\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.path).toEqual('/');\n        expect(params.requestContext.stage).toEqual('latest');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"sets up a versioned API with the stage name corresponding to the lambda alias","suites":["create","deploying a proxy api"],"line":848,"updatePoint":{"line":848,"column":85,"index":42194},"code":"    it('sets up a versioned API with the stage name corresponding to the lambda alias', done => {\n      config.version = 'development';\n      createFromDir('apigw-proxy-echo').then(creationResult => creationResult.api.id).then(apiId => callApi(apiId, awsRegion, 'development/hello/there?abc=xkcd&dd=yy')).then(contents => JSON.parse(contents.body)).then(params => {\n        expect(params.queryStringParameters).toEqual({\n          abc: 'xkcd',\n          dd: 'yy'\n        });\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.path).toEqual('/hello/there');\n        expect(params.requestContext.stage).toEqual('development');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"sets up binary media types corresponding to the binary-media-types options","suites":["create","deploying a proxy api"],"line":860,"updatePoint":{"line":860,"column":82,"index":42892},"code":"    it('sets up binary media types corresponding to the binary-media-types options', done => {\n      config['binary-media-types'] = 'image/png,image/jpeg';\n      createFromDir('apigw-proxy-echo').then(creationResult => creationResult.api.id).then(apiId => apiGatewayPromise.getRestApiPromise({\n        restApiId: apiId\n      })).then(restApi => expect(restApi.binaryMediaTypes).toEqual(['image/png', 'image/jpeg'])).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"sets up binary media types to */* if binary-media-types option is not provided","suites":["create","deploying a proxy api"],"line":866,"updatePoint":{"line":866,"column":86,"index":43343},"code":"    it('sets up binary media types to */* if binary-media-types option is not provided', done => {\n      createFromDir('apigw-proxy-echo').then(creationResult => creationResult.api.id).then(apiId => apiGatewayPromise.getRestApiPromise({\n        restApiId: apiId\n      })).then(restApi => expect(restApi.binaryMediaTypes).toEqual(['*/*'])).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"sets up binary media types to undefined if binary-media-types option is provided as an empty string","suites":["create","deploying a proxy api"],"line":871,"updatePoint":{"line":871,"column":107,"index":43734},"code":"    it('sets up binary media types to undefined if binary-media-types option is provided as an empty string', done => {\n      config['binary-media-types'] = '';\n      createFromDir('apigw-proxy-echo').then(creationResult => creationResult.api.id).then(apiId => apiGatewayPromise.getRestApiPromise({\n        restApiId: apiId\n      })).then(restApi => expect(restApi.binaryMediaTypes).toBeUndefined([])).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"ignores the handler but creates an API if the api-module is provided","suites":["create","creating the web api"],"line":884,"updatePoint":{"line":884,"column":76,"index":44302},"code":"    it('ignores the handler but creates an API if the api-module is provided', done => {\n      createFromDir('api-gw-hello-world').then(creationResult => {\n        const apiId = creationResult.api && creationResult.api.id;\n        expect(apiId).toBeTruthy();\n        expect(creationResult.api.module).toEqual('main');\n        expect(creationResult.api.url).toEqual(`https://${apiId}.execute-api.${awsRegion}.amazonaws.com/latest`);\n        return apiId;\n      }).then(apiId => apiGatewayPromise.getRestApiPromise({\n        restApiId: apiId\n      })).then(restApi => expect(restApi.name).toEqual(testRunName)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"saves the api name and module only into claudia.json","suites":["create","creating the web api"],"line":895,"updatePoint":{"line":895,"column":60,"index":44926},"code":"    it('saves the api name and module only into claudia.json', done => {\n      createFromDir('api-gw-hello-world').then(creationResult => {\n        const savedContents = JSON.parse(fs.readFileSync(path.join(workingdir, 'claudia.json'), 'utf8'));\n        expect(savedContents.api).toEqual({\n          id: creationResult.api.id,\n          module: creationResult.api.module\n        });\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"works when the source is a relative path","suites":["create","creating the web api"],"line":904,"updatePoint":{"line":904,"column":48,"index":45337},"code":"    it('works when the source is a relative path', done => {\n      const workingParent = path.dirname(workingdir),\n        relativeWorkingDir = './' + path.basename(workingdir);\n      process.chdir(workingParent);\n      config.source = relativeWorkingDir;\n      createFromDir('api-gw-hello-world').then(creationResult => {\n        const savedContents = JSON.parse(fs.readFileSync(path.join(workingdir, 'claudia.json'), 'utf8'));\n        expect(savedContents.api).toEqual({\n          id: creationResult.api.id,\n          module: creationResult.api.module\n        });\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"uses the name from package.json if --name is not provided","suites":["create","creating the web api"],"line":917,"updatePoint":{"line":917,"column":65,"index":45960},"code":"    it('uses the name from package.json if --name is not provided', done => {\n      config.name = undefined;\n      createFromDir('api-gw-hello-world').then(creationResult => {\n        const apiId = creationResult.api && creationResult.api.id;\n        newObjects.restApi = apiId;\n        return apiId;\n      }).then(apiId => apiGatewayPromise.getRestApiPromise({\n        restApiId: apiId\n      })).then(restApi => expect(restApi.name).toEqual('api-gw-hello-world')).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"when no version provided, creates the latest deployment","suites":["create","creating the web api"],"line":927,"updatePoint":{"line":927,"column":63,"index":46454},"code":"    it('when no version provided, creates the latest deployment', done => {\n      createFromDir('api-gw-hello-world').then(creationResult => creationResult.api.id).then(apiId => callApi(apiId, awsRegion, 'latest/hello')).then(contents => expect(contents.body).toEqual('\"hello world\"')).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"wires up the api module from a subfolder","suites":["create","creating the web api"],"line":930,"updatePoint":{"line":930,"column":48,"index":46756},"code":"    it('wires up the api module from a subfolder', done => {\n      fs.mkdirSync(workingdir);\n      fs.mkdirSync(path.join(workingdir, 'subdir'));\n      fsUtil.copy('spec/test-projects/api-gw-hello-world', workingdir, true);\n      fsUtil.move(path.join(workingdir, 'main.js'), path.join(workingdir, 'subdir', 'mainfromsub.js'));\n      config['api-module'] = 'subdir/mainfromsub';\n      process.chdir(workingdir);\n      underTest(config).then(creationResult => creationResult.api.id).then(apiId => callApi(apiId, awsRegion, 'latest/hello')).then(contents => expect(contents.body).toEqual('\"hello world\"')).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"when the version is provided, creates the deployment with that name","suites":["create","creating the web api"],"line":939,"updatePoint":{"line":939,"column":75,"index":47418},"code":"    it('when the version is provided, creates the deployment with that name', done => {\n      config.version = 'development';\n      createFromDir('api-gw-hello-world').then(creationResult => {\n        apiId = creationResult.api && creationResult.api.id;\n        expect(creationResult.api.url).toEqual(`https://${apiId}.execute-api.${awsRegion}.amazonaws.com/development`);\n      }).then(() => callApi(apiId, awsRegion, 'development/hello')).then(contents => expect(contents.body).toEqual('\"hello world\"')).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"adds an api config cache if requested","suites":["create","creating the web api"],"line":946,"updatePoint":{"line":946,"column":45,"index":47925},"code":"    it('adds an api config cache if requested', done => {\n      config['cache-api-config'] = 'claudiaConfig';\n      createFromDir('api-gw-echo').then(creationResult => creationResult.api.id).then(apiId => callApi(apiId, awsRegion, 'latest/echo')).then(contents => JSON.parse(contents.body)).then(params => {\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: 'latest',\n          claudiaConfig: '-EDMbG0OcNlCZzstFc2jH6rlpI1YDlNYc9YGGxUFuXo='\n        });\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"makes it possible to deploy a custom stage, as long as the lambdaVersion is defined","suites":["create","creating the web api"],"line":955,"updatePoint":{"line":955,"column":91,"index":48486},"code":"    it('makes it possible to deploy a custom stage, as long as the lambdaVersion is defined', done => {\n      config.version = 'development';\n      createFromDir('api-gw-hello-world').then(creationResult => {\n        apiId = creationResult.api && creationResult.api.id;\n        return apiGatewayPromise.createDeploymentPromise({\n          restApiId: apiId,\n          stageName: 'fromtest',\n          variables: {\n            lambdaVersion: 'development'\n          }\n        });\n      }).then(() => callApi(apiId, awsRegion, 'fromtest/hello', {\n        retry: 403\n      })).then(contents => expect(contents.body).toEqual('\"hello world\"')).then(done, e => {\n        console.log(JSON.stringify(e));\n        done.fail();\n      });\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"executes post-deploy if provided with the api","suites":["create","creating the web api"],"line":973,"updatePoint":{"line":973,"column":53,"index":49183},"code":"    it('executes post-deploy if provided with the api', done => {\n      config.version = 'development';\n      config.postcheck = 'option-123';\n      config.postresult = 'option-result-post';\n      createFromDir('api-gw-postdeploy').then(creationResult => {\n        apiId = creationResult.api && creationResult.api.id;\n        expect(creationResult.api.deploy).toEqual({\n          result: 'option-result-post',\n          wasApiCacheUsed: false\n        });\n      }).then(() => callApi(apiId, awsRegion, 'postdeploy/hello', {\n        retry: 403\n      })).then(contents => {\n        expect(JSON.parse(contents.body)).toEqual({\n          'postinstallfname': testRunName,\n          'postinstallalias': 'development',\n          'postinstallapiid': apiId,\n          'postinstallregion': awsRegion,\n          'postinstallapiUrl': `https://${apiId}.execute-api.${awsRegion}.amazonaws.com/development`,\n          'hasAWS': 'true',\n          'postinstalloption': 'option-123',\n          'lambdaVersion': 'development'\n        });\n      }).then(done, e => {\n        console.log(JSON.stringify(e));\n        done.fail();\n      });\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"works with non-reentrant modules","suites":["create","creating the web api"],"line":1001,"updatePoint":{"line":1001,"column":40,"index":50294},"code":"    it('works with non-reentrant modules', done => {\n      global.MARKED = false;\n      createFromDir('non-reentrant').then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"logs call execution","suites":["create","creating the web api"],"line":1006,"updatePoint":{"line":1006,"column":25,"index":50435},"code":"  it('logs call execution', done => {\n    const logger = new ArrayLogger();\n    config.handler = undefined;\n    config['api-module'] = 'main';\n    createFromDir('api-gw-hello-world', logger).then(() => {\n      expect(logger.getStageLog(true).filter(entry => entry !== 'waiting for IAM role propagation' && entry !== 'rate-limited by AWS, waiting before retry')).toEqual(['loading package config', 'packaging files', 'validating package', 'zipping package', 'initialising IAM role', 'creating Lambda', 'waiting for lambda resource allocation', 'creating version alias', 'creating REST API', 'saving configuration']);\n      expect(logger.getApiCallLogForService('lambda', true)).toEqual(['lambda.createFunction', 'lambda.setupRequestListeners', 'lambda.getFunctionConfiguration', 'lambda.updateAlias', 'lambda.createAlias']);\n      expect(logger.getApiCallLogForService('iam', true)).toEqual(['iam.createRole', 'iam.putRolePolicy']);\n      expect(logger.getApiCallLogForService('sts', true)).toEqual(['sts.getCallerIdentity', 'sts.setupRequestListeners', 'sts.optInRegionalEndpoint']);\n      expect(logger.getApiCallLogForService('apigateway', true)).toEqual(['apigateway.createRestApi', 'apigateway.setupRequestListeners', 'apigateway.setAcceptHeader', 'apigateway.putRestApi', 'apigateway.getResources', 'apigateway.createResource', 'apigateway.putMethod', 'apigateway.putIntegration', 'apigateway.putMethodResponse', 'apigateway.putIntegrationResponse', 'apigateway.createDeployment']);\n    }).then(done, done.fail);\n  });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"does not add any additional environment variables if set-env not provided","suites":["create","environment variables"],"line":1027,"updatePoint":{"line":1027,"column":81,"index":52313},"code":"    it('does not add any additional environment variables if set-env not provided', done => {\n      createFromDir('env-vars').then(() => {\n        return lambda.getFunctionConfiguration({\n          FunctionName: testRunName\n        }).promise();\n      }).then(configuration => expect(configuration.Environment).toBeUndefined()).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => expect(Object.keys(JSON.parse(result.Payload)).sort()).toEqual(standardEnvKeys)).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"refuses to work when reading environment variables fails","suites":["create","environment variables"],"line":1039,"updatePoint":{"line":1039,"column":64,"index":52907},"code":"    it('refuses to work when reading environment variables fails', done => {\n      config['set-env'] = 'XPATH,YPATH=/var/lib';\n      createFromDir('env-vars', logger).then(done.fail, message => {\n        expect(message).toEqual('Cannot read variables from set-env, Invalid CSV element XPATH');\n        expect(logger.getApiCallLogForService('lambda', true)).toEqual([]);\n        expect(logger.getApiCallLogForService('iam', true)).toEqual([]);\n      }).then(done);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"adds env variables specified in a key-value pair","suites":["create","environment variables"],"line":1047,"updatePoint":{"line":1047,"column":56,"index":53371},"code":"    it('adds env variables specified in a key-value pair', done => {\n      config['set-env'] = 'XPATH=/var/www,YPATH=/var/lib';\n      createFromDir('env-vars').then(() => {\n        return lambda.getFunctionConfiguration({\n          FunctionName: testRunName\n        }).promise();\n      }).then(configuration => {\n        expect(configuration.Environment).toEqual({\n          Variables: {\n            'XPATH': '/var/www',\n            'YPATH': '/var/lib'\n          }\n        });\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => JSON.parse(result.Payload)).then(env => {\n        expect(Object.keys(env).filter(nonStandard).sort()).toEqual(['XPATH', 'YPATH']);\n        expect(env.XPATH).toEqual('/var/www');\n        expect(env.YPATH).toEqual('/var/lib');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"adds env variables specified in a JSON file","suites":["create","environment variables"],"line":1071,"updatePoint":{"line":1071,"column":51,"index":54288},"code":"    it('adds env variables specified in a JSON file', done => {\n      const envpath = path.join(workingdir, 'env.json');\n      fs.mkdirSync(workingdir);\n      fs.writeFileSync(envpath, JSON.stringify({\n        'XPATH': '/var/www',\n        'YPATH': '/var/lib'\n      }), 'utf8');\n      config['set-env-from-json'] = envpath;\n      createFromDir('env-vars').then(() => {\n        return lambda.getFunctionConfiguration({\n          FunctionName: testRunName\n        }).promise();\n      }).then(configuration => {\n        expect(configuration.Environment).toEqual({\n          Variables: {\n            'XPATH': '/var/www',\n            'YPATH': '/var/lib'\n          }\n        });\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => JSON.parse(result.Payload)).then(env => {\n        expect(Object.keys(env).filter(nonStandard).sort()).toEqual(['XPATH', 'YPATH']);\n        expect(env.XPATH).toEqual('/var/www');\n        expect(env.YPATH).toEqual('/var/lib');\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"tries to set the KMS key ARN","suites":["create","environment variables"],"line":1101,"updatePoint":{"line":1101,"column":36,"index":55390},"code":"    it('tries to set the KMS key ARN', done => {\n      // note, creating a KMS key costs $1 each time, so\n      // this is just testing that the code tries to set\n      // the key instead of actually using it\n      config['set-env'] = 'XPATH=/var/www,YPATH=/var/lib';\n      config['env-kms-key-arn'] = 'arn:a:b:c:d';\n      createFromDir('env-vars').then(done.fail, err => {\n        expect(err.code).toEqual('ValidationException');\n        expect(err.message).toMatch(/Value 'arn:a:b:c:d' at 'kMSKeyArn' failed to satisfy constraint/);\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"loads up the environment variables while validating the package to allow any code that expects them to initialize -- fix for https://github.com/claudiajs/claudia/issues/96","suites":["create","environment variables"],"line":1112,"updatePoint":{"line":1112,"column":179,"index":56108},"code":"    it('loads up the environment variables while validating the package to allow any code that expects them to initialize -- fix for https://github.com/claudiajs/claudia/issues/96', done => {\n      config['set-env'] = 'TEST_VAR=abc';\n      config.handler = undefined;\n      config['api-module'] = 'main';\n      process.env.TEST_VAR = '';\n      createFromDir('throw-if-not-env').then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"attaches no layers by default","suites":["create","layer support"],"line":1141,"updatePoint":{"line":1141,"column":37,"index":57291},"code":"    it('attaches no layers by default', done => {\n      createFromDir('hello-world').then(getLambdaConfiguration).then(configuration => {\n        expect(configuration.Layers).toBeFalsy();\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"attaches a single layer if requested","suites":["create","layer support"],"line":1146,"updatePoint":{"line":1146,"column":44,"index":57526},"code":"    it('attaches a single layer if requested', done => {\n      config.layers = layers[0].LayerVersionArn;\n      createFromDir('hello-world').then(getLambdaConfiguration).then(configuration => {\n        expect(configuration.Layers.map(l => l.Arn)).toEqual([layers[0].LayerVersionArn]);\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"attaches multiple layers if requested","suites":["create","layer support"],"line":1152,"updatePoint":{"line":1152,"column":45,"index":57852},"code":"    it('attaches multiple layers if requested', done => {\n      config.layers = layers[0].LayerVersionArn + ',' + layers[1].LayerVersionArn;\n      createFromDir('hello-world').then(getLambdaConfiguration).then(configuration => {\n        expect(configuration.Layers.map(l => l.Arn)).toEqual(layers.map(l => l.LayerVersionArn));\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"does not set up a DLQ configuration if not requested","suites":["create","dead letter queue support"],"line":1172,"updatePoint":{"line":1172,"column":60,"index":58648},"code":"    it('does not set up a DLQ configuration if not requested', done => {\n      createFromDir('hello-world').then(getLambdaConfiguration).then(configuration => {\n        expect(configuration.DeadLetterConfig).toBeFalsy();\n        return configuration.Role;\n      }).then(roleArn => {\n        const roleName = roleArn.split(':')[5].split('/')[1];\n        return iam.listRolePolicies({\n          RoleName: roleName\n        }).promise();\n      }).then(result => {\n        expect(result.PolicyNames.find(t => t === 'dlq-publisher')).toBeFalsy();\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"adds a SNS access policy and DLQ configuration by topic ARN if requested","suites":["create","dead letter queue support"],"line":1185,"updatePoint":{"line":1185,"column":80,"index":59249},"code":"    it('adds a SNS access policy and DLQ configuration by topic ARN if requested', done => {\n      config['dlq-sns'] = snsTopicArn;\n      createFromDir('hello-world').then(getLambdaConfiguration).then(configuration => {\n        expect(configuration.DeadLetterConfig).toEqual({\n          TargetArn: snsTopicArn\n        });\n        return configuration.Role;\n      }).then(roleArn => {\n        const roleName = roleArn.split(':')[5].split('/')[1];\n        return iam.getRolePolicy({\n          PolicyName: 'dlq-publisher',\n          RoleName: roleName\n        }).promise();\n      }).then(policy => {\n        expect(JSON.parse(decodeURIComponent(policy.PolicyDocument)).Statement).toEqual([{\n          Effect: 'Allow',\n          Action: ['sns:Publish'],\n          Resource: [snsTopicArn]\n        }]);\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"adds a SNS access policy and DLQ configuration by topic name if requested","suites":["create","dead letter queue support"],"line":1206,"updatePoint":{"line":1206,"column":81,"index":60087},"code":"    it('adds a SNS access policy and DLQ configuration by topic name if requested', done => {\n      config['dlq-sns'] = snsTopicName;\n      createFromDir('hello-world').then(getLambdaConfiguration).then(configuration => {\n        expect(configuration.DeadLetterConfig).toEqual({\n          TargetArn: snsTopicArn\n        });\n        return configuration.Role;\n      }).then(roleArn => {\n        const roleName = roleArn.split(':')[5].split('/')[1];\n        return iam.getRolePolicy({\n          PolicyName: 'dlq-publisher',\n          RoleName: roleName\n        }).promise();\n      }).then(policy => {\n        expect(JSON.parse(decodeURIComponent(policy.PolicyDocument)).Statement).toEqual([{\n          Effect: 'Allow',\n          Action: ['sns:Publish'],\n          Resource: [snsTopicArn]\n        }]);\n      }).then(done, done.fail);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"does not patch the role","suites":["create","dead letter queue support","when a role is provided"],"line":1245,"updatePoint":{"line":1245,"column":33,"index":61535},"code":"      it('does not patch the role', done => {\n        config['dlq-sns'] = snsTopicArn;\n        config.role = createdRoleArn;\n        createFromDir('hello-world').then(getLambdaConfiguration).then(configuration => {\n          expect(configuration.DeadLetterConfig).toEqual({\n            TargetArn: snsTopicArn\n          });\n          return configuration.Role;\n        }).then(roleArn => {\n          const roleName = roleArn.split(':')[5].split('/')[1];\n          return iam.listRolePolicies({\n            RoleName: roleName\n          }).promise();\n        }).then(result => {\n          expect(result.PolicyNames.find(t => t === 'dlq-publisher')).toBeFalsy();\n        }).then(done, done.fail);\n      });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"creates x86 functions by default","suites":["create","architecture"],"line":1265,"updatePoint":{"line":1265,"column":40,"index":62294},"code":"    it('creates x86 functions by default', async () => {\n      await createFromDir('hello-world');\n      const result = await getLambdaConfiguration();\n      expect(result.Architectures).toEqual(['x86_64']);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"creates x86 functions if specified","suites":["create","architecture"],"line":1270,"updatePoint":{"line":1270,"column":42,"index":62512},"code":"    it('creates x86 functions if specified', async () => {\n      config.arch = 'x86_64';\n      await createFromDir('hello-world');\n      const result = await getLambdaConfiguration();\n      expect(result.Architectures).toEqual(['x86_64']);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"creates arm functions if specified","suites":["create","architecture"],"line":1276,"updatePoint":{"line":1276,"column":42,"index":62760},"code":"    it('creates arm functions if specified', async () => {\n      config.arch = 'arm64';\n      await createFromDir('hello-world');\n      const result = await getLambdaConfiguration();\n      expect(result.Architectures).toEqual(['arm64']);\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"refuses to create with invalid architecture","suites":["create","architecture"],"line":1282,"updatePoint":{"line":1282,"column":51,"index":63015},"code":"    it('refuses to create with invalid architecture', async () => {\n      config.arch = 'arm65';\n      try {\n        await createFromDir('hello-world');\n        fail('did not throw');\n      } catch (e) {\n        expect(e).toEqual(`--arch should specify either 'x86_64' or 'arm64'`);\n      }\n    });","file":"create-spec.js","skipped":false,"dir":"spec"},{"name":"does not block access to methods without an authorizer","suites":["customAuthorizers"],"line":55,"updatePoint":{"line":55,"column":64,"index":2124},"code":"      it('does not block access to methods without an authorizer', done => {\n        invoke(version + '/', {\n          method: 'GET',\n          resolveErrors: false\n        }).then(response => expect(JSON.parse(response.body)).toEqual('OK')).then(done, done.fail);\n      });","file":"custom-authorizer-integration-spec.js","skipped":false,"dir":"spec"},{"name":"blocks access to methods without an authorizer without authentication headers","suites":["customAuthorizers"],"line":61,"updatePoint":{"line":61,"column":87,"index":2422},"code":"      it('blocks access to methods without an authorizer without authentication headers', done => {\n        invoke(version + '/locked', {\n          method: 'GET',\n          resolveErrors: true\n        }).then(response => {\n          expect(response.statusCode).toEqual(401);\n          expect(response.headers['x-amzn-errortype']).toEqual('UnauthorizedException');\n          expect(JSON.parse(response.body)).toEqual({\n            message: 'Unauthorized'\n          });\n        }).then(done, done.fail);\n      });","file":"custom-authorizer-integration-spec.js","skipped":false,"dir":"spec"},{"name":"respects IAM policy for unauthorized users","suites":["customAuthorizers"],"line":73,"updatePoint":{"line":73,"column":52,"index":2899},"code":"      it('respects IAM policy for unauthorized users', done => {\n        invoke(version + '/locked', {\n          method: 'GET',\n          headers: {\n            'Authorization': 'Bob-123'\n          },\n          resolveErrors: true\n        }).then(response => {\n          expect(response.statusCode).toEqual(403);\n          expect(response.headers['x-amzn-errortype']).toEqual('AccessDeniedException');\n          expect(JSON.parse(response.body)).toEqual({\n            Message: 'User is not authorized to access this resource'\n          });\n        }).then(done, done.fail);\n      });","file":"custom-authorizer-integration-spec.js","skipped":false,"dir":"spec"},{"name":"respects IAM policy for authorized users","suites":["customAuthorizers"],"line":88,"updatePoint":{"line":88,"column":50,"index":3481},"code":"      it('respects IAM policy for authorized users', done => {\n        invoke(version + '/unlocked', {\n          method: 'GET',\n          headers: {\n            'Authorization': 'Bob-123'\n          },\n          resolveErrors: false\n        }).then(response => expect(JSON.parse(response.body)).toEqual('OK for Bob')).then(done, done.fail);\n      });","file":"custom-authorizer-integration-spec.js","skipped":false,"dir":"spec"},{"name":"destroys the role","suites":["destroyRole"],"line":24,"updatePoint":{"line":24,"column":23,"index":785},"code":"  it('destroys the role', done => {\n    underTest(iam, testRunName).then(() => iam.getRole({\n      RoleName: testRunName\n    }).promise()).catch(expectedException => expect(expectedException.code).toEqual('NoSuchEntity')).then(done, done.fail);\n  });","file":"destroy-role-spec.js","skipped":false,"dir":"spec"},{"name":"destroys the policies","suites":["destroyRole"],"line":29,"updatePoint":{"line":29,"column":27,"index":1040},"code":"  it('destroys the policies', done => {\n    underTest(iam, testRunName).then(() => iam.listRolePolicies({\n      RoleName: testRunName\n    }).promise()).catch(expectedException => expect(expectedException.message).toContain(testRunName)).then(done, done.fail);\n  });","file":"destroy-role-spec.js","skipped":false,"dir":"spec"},{"name":"destroys a role with attached policies","suites":["destroyRole"],"line":34,"updatePoint":{"line":34,"column":44,"index":1323},"code":"  it('destroys a role with attached policies', done => {\n    iam.attachRolePolicy({\n      RoleName: testRunName,\n      PolicyArn: 'arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole'\n    }).promise().then(() => underTest(iam, testRunName)).then(() => iam.getRole({\n      RoleName: testRunName\n    }).promise()).catch(expectedException => expect(expectedException.code).toEqual('NoSuchEntity')).then(done, done.fail);\n  });","file":"destroy-role-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the source dir does not contain the project config file","suites":["destroy"],"line":27,"updatePoint":{"line":27,"column":72,"index":865},"code":"  it('fails when the source dir does not contain the project config file', done => {\n    underTest({\n      source: workingdir\n    }).then(done.fail, reason => expect(reason).toEqual('claudia.json does not exist in the source folder')).then(done);\n  });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda name","suites":["destroy"],"line":32,"updatePoint":{"line":32,"column":73,"index":1119},"code":"  it('fails when the project config file does not contain the lambda name', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), '{}', 'utf8');\n    underTest({\n      source: workingdir\n    }).then(done.fail, reason => expect(reason).toEqual('invalid configuration -- lambda.name missing from claudia.json')).then(done);\n  });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda region","suites":["destroy"],"line":38,"updatePoint":{"line":38,"column":75,"index":1464},"code":"  it('fails when the project config file does not contain the lambda region', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify({\n      lambda: {\n        name: 'xxx'\n      }\n    }), 'utf8');\n    underTest({\n      source: workingdir\n    }).then(done.fail, reason => expect(reason).toEqual('invalid configuration -- lambda.region missing from claudia.json')).then(done);\n  });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"destroys the lambda function","suites":["destroy","when only a lambda function exists"],"line":61,"updatePoint":{"line":61,"column":36,"index":2325},"code":"    it('destroys the lambda function', done => {\n      underTest({\n        source: workingdir\n      }).then(() => {\n        const lambda = new aws.Lambda({\n          region: awsRegion\n        });\n        return lambda.listVersionsByFunction({\n          FunctionName: testRunName\n        }).promise();\n      }).catch(expectedException => expect(expectedException.message).toContain(newObjects.lambdaFunction)).then(done, done.fail);\n    });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"destroys the roles for the lambda function","suites":["destroy","when only a lambda function exists"],"line":73,"updatePoint":{"line":73,"column":50,"index":2779},"code":"    it('destroys the roles for the lambda function', done => {\n      underTest({\n        source: workingdir\n      }).then(() => iam.getRole({\n        RoleName: newObjects.lambdaRole\n      }).promise()).catch(expectedException => expect(expectedException.code).toEqual('NoSuchEntity')).then(done, done.fail);\n    });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"destroys the policies for the lambda function","suites":["destroy","when only a lambda function exists"],"line":80,"updatePoint":{"line":80,"column":53,"index":3098},"code":"    it('destroys the policies for the lambda function', done => {\n      underTest({\n        source: workingdir\n      }).then(() => iam.listRolePolicies({\n        RoleName: newObjects.lambdaRole\n      }).promise()).catch(expectedException => expect(expectedException.message).toContain(newObjects.lambdaRole)).then(done, done.fail);\n    });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"keeps the role if it was shared","suites":["destroy","when only a lambda function exists"],"line":87,"updatePoint":{"line":87,"column":39,"index":3424},"code":"    it('keeps the role if it was shared', done => {\n      const configPath = path.join(workingdir, 'claudia.json');\n      readjson(configPath).then(json => {\n        json.lambda.sharedRole = true;\n        return fsPromise.writeFileAsync(configPath, JSON.stringify(json), 'utf8');\n      }).then(() => underTest({\n        source: workingdir\n      })).then(() => iam.getRole({\n        RoleName: newObjects.lambdaRole\n      }).promise()).then(done, done.fail);\n    });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"removes claudia.json if --config is not provided","suites":["destroy","removing the config file"],"line":112,"updatePoint":{"line":112,"column":56,"index":4392},"code":"    it('removes claudia.json if --config is not provided', done => {\n      underTest({\n        source: workingdir\n      }).then(() => expect(fs.existsSync(path.join(workingdir, 'claudia.json'))).toBeFalsy()).then(done, done.fail);\n    });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"removes specified config if --config is provided","suites":["destroy","removing the config file"],"line":117,"updatePoint":{"line":117,"column":56,"index":4631},"code":"    it('removes specified config if --config is provided', done => {\n      const otherPath = tmppath();\n      fs.writeFileSync(otherPath, fs.readFileSync(path.join(workingdir, 'claudia.json')));\n      underTest({\n        source: workingdir,\n        config: otherPath\n      }).then(() => {\n        expect(fs.existsSync(path.join(workingdir, 'claudia.json'))).toBeTruthy();\n        expect(fs.existsSync(path.join(workingdir, otherPath))).toBeFalsy();\n      }).then(done, e => {\n        console.log(e.stack || e.message || e);\n        done.fail(e);\n      });\n    });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"destroys the lambda function","suites":["destroy","when the lambda project contains a web api"],"line":146,"updatePoint":{"line":146,"column":36,"index":5741},"code":"    it('destroys the lambda function', done => {\n      underTest({\n        source: workingdir\n      }).then(() => {\n        const lambda = new aws.Lambda({\n          region: awsRegion\n        });\n        return lambda.listVersionsByFunction({\n          FunctionName: testRunName\n        }).promise();\n      }).catch(expectedException => expect(expectedException.message).toContain(newObjects.lambdaFunction)).then(done, done.fail);\n    });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"destroys the web api","suites":["destroy","when the lambda project contains a web api"],"line":158,"updatePoint":{"line":158,"column":28,"index":6173},"code":"    it('destroys the web api', done => {\n      underTest({\n        source: workingdir\n      }).then(() => {\n        const apiGateway = retriableWrap(new aws.APIGateway({\n          region: awsRegion\n        }));\n        return apiGateway.getRestApi({\n          restApiId: newObjects.restApi\n        }).promise();\n      }).catch(expectedException => {\n        expect(expectedException.message).toMatch(/^Invalid API identifier specified/);\n        expect(expectedException.code).toEqual('NotFoundException');\n      }).then(done, done.fail);\n    });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"destroys the roles for the lambda function","suites":["destroy","when the lambda project contains a web api"],"line":173,"updatePoint":{"line":173,"column":50,"index":6742},"code":"    it('destroys the roles for the lambda function', done => {\n      underTest({\n        source: workingdir\n      }).then(() => iam.getRole({\n        RoleName: newObjects.lambdaRole\n      }).promise()).catch(expectedException => expect(expectedException.code).toEqual('NoSuchEntity')).then(done, done.fail);\n    });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"destroys the policies for the lambda function","suites":["destroy","when the lambda project contains a web api"],"line":180,"updatePoint":{"line":180,"column":53,"index":7061},"code":"    it('destroys the policies for the lambda function', done => {\n      underTest({\n        source: workingdir\n      }).then(() => iam.listRolePolicies({\n        RoleName: newObjects.lambdaRole\n      }).promise()).catch(expectedException => expect(expectedException.message).toContain(newObjects.lambdaRole)).then(done, done.fail);\n    });","file":"destroy-spec.js","skipped":false,"dir":"spec"},{"name":"packages name, version and .tgz for non-scoped names","suites":["expectedArchiveName"],"line":5,"updatePoint":{"line":5,"column":58,"index":190},"code":"  it('packages name, version and .tgz for non-scoped names', () => {\n    expect(expectedArchiveName({\n      name: 'hello-world',\n      version: '1.0.0'\n    })).toEqual('hello-world-1.0.0.tgz');\n  });","file":"expected-archive-name-spec.js","skipped":false,"dir":"spec"},{"name":"can set extension","suites":["expectedArchiveName"],"line":11,"updatePoint":{"line":11,"column":23,"index":355},"code":"  it('can set extension', () => {\n    expect(expectedArchiveName({\n      name: 'hello-world',\n      version: '1.0.0'\n    }, '.zip')).toEqual('hello-world-1.0.0.zip');\n  });","file":"expected-archive-name-spec.js","skipped":false,"dir":"spec"},{"name":"works for scoped packages","suites":["expectedArchiveName"],"line":17,"updatePoint":{"line":17,"column":31,"index":536},"code":"  it('works for scoped packages', () => {\n    expect(expectedArchiveName({\n      name: '@company/hello-world',\n      version: '1.0.0'\n    })).toEqual('company-hello-world-1.0.0.tgz');\n    expect(expectedArchiveName({\n      name: '@company/hello-world',\n      version: '1.0.0'\n    }, '.zip')).toEqual('company-hello-world-1.0.0.zip');\n  });","file":"expected-archive-name-spec.js","skipped":false,"dir":"spec"},{"name":"formats AWS Alias list into function:aliases","suites":["extractAliases"],"line":5,"updatePoint":{"line":5,"column":50,"index":167},"code":"  it('formats AWS Alias list into function:aliases', () => {\n    const input = {\n      'Aliases': [{\n        'FunctionVersion': '56',\n        'Name': 'dev'\n      }, {\n        'FunctionVersion': '$LATEST',\n        'Name': 'latest'\n      }, {\n        'FunctionVersion': '55',\n        'Name': 'prd'\n      }, {\n        'FunctionVersion': '55',\n        'Name': 'stg'\n      }]\n    };\n    expect(extractAliases(input)).toEqual({\n      '55': ['prd', 'stg'],\n      '56': ['dev'],\n      '$LATEST': ['latest']\n    });\n  });","file":"extract-aliases-spec.js","skipped":false,"dir":"spec"},{"name":"unpacks an archive into a destination folder","suites":["extractTar"],"line":19,"updatePoint":{"line":19,"column":50,"index":552},"code":"  it('unpacks an archive into a destination folder', done => {\n    extractTar(path.join(__dirname, 'test-projects', 'tar-gz-example.tgz'), workingdir).then(() => {\n      expect(fs.readFileSync(path.join(workingdir, 'root.txt'), 'utf8')).toEqual('root\\n');\n      expect(fs.readFileSync(path.join(workingdir, 'subdir', 'sub.txt'), 'utf8')).toEqual('sub\\n');\n    }).then(done, done.fail);\n  });","file":"extract-tar-spec.js","skipped":false,"dir":"spec"},{"name":"returns the default behavior if path not specified","suites":["findCloudfrontBehavior"],"line":23,"updatePoint":{"line":23,"column":56,"index":573},"code":"  it('returns the default behavior if path not specified', () => {\n    expect(findCloudfrontBehavior(config).TargetOriginId).toEqual('Custom-123');\n  });","file":"find-cloudfront-behavior-spec.js","skipped":false,"dir":"spec"},{"name":"returns the default behavior if * is specified","suites":["findCloudfrontBehavior"],"line":26,"updatePoint":{"line":26,"column":52,"index":723},"code":"  it('returns the default behavior if * is specified', () => {\n    expect(findCloudfrontBehavior(config, '*').TargetOriginId).toEqual('Custom-123');\n  });","file":"find-cloudfront-behavior-spec.js","skipped":false,"dir":"spec"},{"name":"returns a behavior matching the path if specified","suites":["findCloudfrontBehavior"],"line":29,"updatePoint":{"line":29,"column":55,"index":881},"code":"  it('returns a behavior matching the path if specified', () => {\n    expect(findCloudfrontBehavior(config, '/dev').TargetOriginId).toEqual('Custom-345');\n  });","file":"find-cloudfront-behavior-spec.js","skipped":false,"dir":"spec"},{"name":"returns falsy if no matching behavior","suites":["findCloudfrontBehavior"],"line":32,"updatePoint":{"line":32,"column":43,"index":1030},"code":"  it('returns falsy if no matching behavior', () => {\n    expect(findCloudfrontBehavior(config, '/non-existing')).toBeFalsy();\n  });","file":"find-cloudfront-behavior-spec.js","skipped":false,"dir":"spec"},{"name":"returns false for falsy objects","suites":["flattenRequestParameters"],"line":5,"updatePoint":{"line":5,"column":37,"index":170},"code":"  it('returns false for falsy objects', () => {\n    expect(underTest(false)).toEqual(false);\n    expect(underTest(undefined)).toEqual(undefined);\n    expect(underTest({})).toEqual({});\n  });","file":"flatten-request-parameters-spec.js","skipped":false,"dir":"spec"},{"name":"squashes querystring parameters","suites":["flattenRequestParameters"],"line":10,"updatePoint":{"line":10,"column":37,"index":361},"code":"  it('squashes querystring parameters', () => {\n    expect(underTest({\n      querystring: {\n        'tim': true,\n        'tom': false\n      }\n    })).toEqual({\n      'method.request.querystring.tim': true,\n      'method.request.querystring.tom': false\n    });\n  });","file":"flatten-request-parameters-spec.js","skipped":false,"dir":"spec"},{"name":"squashes header parameters","suites":["flattenRequestParameters"],"line":21,"updatePoint":{"line":21,"column":32,"index":622},"code":"  it('squashes header parameters', () => {\n    expect(underTest({\n      header: {\n        'tim': true,\n        'tom': false\n      }\n    })).toEqual({\n      'method.request.header.tim': true,\n      'method.request.header.tom': false\n    });\n  });","file":"flatten-request-parameters-spec.js","skipped":false,"dir":"spec"},{"name":"squashes mixed querystring/header parameters","suites":["flattenRequestParameters"],"line":32,"updatePoint":{"line":32,"column":50,"index":886},"code":"  it('squashes mixed querystring/header parameters', () => {\n    expect(underTest({\n      header: {\n        'tim': true\n      },\n      querystring: {\n        'tom': false\n      }\n    })).toEqual({\n      'method.request.header.tim': true,\n      'method.request.querystring.tom': false\n    });\n  });","file":"flatten-request-parameters-spec.js","skipped":false,"dir":"spec"},{"name":"clones direct string params","suites":["flattenRequestParameters"],"line":45,"updatePoint":{"line":45,"column":33,"index":1167},"code":"  it('clones direct string params', () => {\n    expect(underTest({\n      'method.request.querystring.name': true\n    })).toEqual({\n      'method.request.querystring.name': true\n    });\n  });","file":"flatten-request-parameters-spec.js","skipped":false,"dir":"spec"},{"name":"parses path params","suites":["flattenRequestParameters"],"line":52,"updatePoint":{"line":52,"column":24,"index":1349},"code":"  it('parses path params', () => {\n    expect(underTest(false, '/echo/{name}/{lastName}')).toEqual({\n      'method.request.path.name': true,\n      'method.request.path.lastName': true\n    });\n  });","file":"flatten-request-parameters-spec.js","skipped":false,"dir":"spec"},{"name":"parses path params when ending with slash","suites":["flattenRequestParameters"],"line":58,"updatePoint":{"line":58,"column":47,"index":1570},"code":"  it('parses path params when ending with slash', () => {\n    expect(underTest(undefined, '/echo/{name}/{lastName}/')).toEqual({\n      'method.request.path.name': true,\n      'method.request.path.lastName': true\n    });\n  });","file":"flatten-request-parameters-spec.js","skipped":false,"dir":"spec"},{"name":"parses path params when starting with a dynamic param","suites":["flattenRequestParameters"],"line":64,"updatePoint":{"line":64,"column":59,"index":1808},"code":"  it('parses path params when starting with a dynamic param', () => {\n    expect(underTest(undefined, '/{name}')).toEqual({\n      'method.request.path.name': true\n    });\n  });","file":"flatten-request-parameters-spec.js","skipped":false,"dir":"spec"},{"name":"uses greedy without +","suites":["flattenRequestParameters"],"line":69,"updatePoint":{"line":69,"column":27,"index":1953},"code":"  it('uses greedy without +', () => {\n    expect(underTest(undefined, '/echo/{proxy+}')).toEqual({\n      'method.request.path.proxy': true\n    });\n  });","file":"flatten-request-parameters-spec.js","skipped":false,"dir":"spec"},{"name":"does not include path params for static paths","suites":["flattenRequestParameters"],"line":74,"updatePoint":{"line":74,"column":51,"index":2130},"code":"  it('does not include path params for static paths', () => {\n    expect(underTest(undefined, '/echo/name/lastName')).toBeFalsy();\n  });","file":"flatten-request-parameters-spec.js","skipped":false,"dir":"spec"},{"name":"will mix paths params and explicit params","suites":["flattenRequestParameters"],"line":77,"updatePoint":{"line":77,"column":47,"index":2263},"code":"  it('will mix paths params and explicit params', () => {\n    expect(underTest({\n      header: {\n        'tim': true\n      },\n      querystring: {\n        'tom': false\n      }\n    }, '/echo/{name}/')).toEqual({\n      'method.request.header.tim': true,\n      'method.request.querystring.tom': false,\n      'method.request.path.name': true\n    });\n  });","file":"flatten-request-parameters-spec.js","skipped":false,"dir":"spec"},{"name":"reads file contents","suites":["fsPromise","readFileAsync"],"line":19,"updatePoint":{"line":19,"column":27,"index":537},"code":"    it('reads file contents', done => {\n      fs.writeFileSync(filePath, 'fileContents-123', 'utf8');\n      fsPromise.readFileAsync(filePath, 'utf8').then(contents => expect(contents).toEqual('fileContents-123')).then(done, done.fail);\n    });","file":"fs-promise-spec.js","skipped":false,"dir":"spec"},{"name":"fails if no file","suites":["fsPromise","readFileAsync"],"line":23,"updatePoint":{"line":23,"column":24,"index":778},"code":"    it('fails if no file', done => {\n      fsPromise.readFileAsync(filePath, 'utf8').then(done.fail, () => done());\n    });","file":"fs-promise-spec.js","skipped":false,"dir":"spec"},{"name":"writes file contents","suites":["fsPromise","writeFileAsync"],"line":28,"updatePoint":{"line":28,"column":28,"index":949},"code":"    it('writes file contents', done => {\n      fsPromise.writeFileAsync(filePath, 'fileContents-123', 'utf8').then(() => {\n        const contents = fs.readFileSync(filePath, 'utf8');\n        expect(contents).toEqual('fileContents-123');\n      }).then(done, done.fail);\n    });","file":"fs-promise-spec.js","skipped":false,"dir":"spec"},{"name":"removes a file","suites":["fsPromise","unlinkAsync"],"line":36,"updatePoint":{"line":36,"column":22,"index":1260},"code":"    it('removes a file', done => {\n      fsPromise.writeFileAsync(filePath, 'fileContents-123', 'utf8').then(() => fsPromise.unlinkAsync(filePath)).then(() => fs.accessSync(filePath)).then(done.fail, () => done());\n    });","file":"fs-promise-spec.js","skipped":false,"dir":"spec"},{"name":"renames a file","suites":["fsPromise","renameAsync"],"line":41,"updatePoint":{"line":41,"column":22,"index":1523},"code":"    it('renames a file', done => {\n      const newPath = path.join(workingdir, 'new-file.txt');\n      fsPromise.writeFileAsync(filePath, 'fileContents-123', 'utf8').then(() => fsPromise.renameAsync(filePath, newPath)).then(() => expect(fs.readFileSync(newPath, 'utf8')).toEqual('fileContents-123')).then(() => fs.accessSync(filePath)).then(done.fail, () => done());\n    });","file":"fs-promise-spec.js","skipped":false,"dir":"spec"},{"name":"creates a temporary folder","suites":["fsPromise","mkdtempAsync"],"line":47,"updatePoint":{"line":47,"column":34,"index":1950},"code":"    it('creates a temporary folder', done => {\n      fsPromise.mkdtempAsync(path.join(workingdir, 'test1')).then(result => {\n        expect(fsUtil.isDir(result)).toBeTruthy();\n        expect(path.resolve(path.dirname(result))).toEqual(path.resolve(workingdir));\n        expect(path.basename(result)).toMatch(/^test1/);\n      }).then(done, done.fail);\n    });","file":"fs-promise-spec.js","skipped":false,"dir":"spec"},{"name":"gets stats for a dir","suites":["fsPromise","statAsync"],"line":56,"updatePoint":{"line":56,"column":28,"index":2341},"code":"    it('gets stats for a dir', done => {\n      fsPromise.writeFileAsync(filePath, 'fileContents-123', 'utf8').then(() => fsPromise.statAsync(filePath)).then(stat => {\n        expect(stat.isDirectory()).toBeFalsy();\n        expect(stat.isFile()).toBeTruthy();\n      }).then(done, done.fail);\n    });","file":"fs-promise-spec.js","skipped":false,"dir":"spec"},{"name":"changes the file mode","suites":["fsPromise","chmodAsync"],"line":64,"updatePoint":{"line":64,"column":29,"index":2680},"code":"    it('changes the file mode', done => {\n      fsPromise.writeFileAsync(filePath, 'fileContents-123', 'utf8').then(() => fsPromise.chmodAsync(filePath, 0o755)).then(() => fs.statSync(filePath)).then(stats => expect(stats.mode & 0o777).toEqual(0o755)).then(done, done.fail);\n    });","file":"fs-promise-spec.js","skipped":false,"dir":"spec"},{"name":"silently ignores empty directories","suites":["fsUtil","rmDir"],"line":17,"updatePoint":{"line":17,"column":42,"index":425},"code":"    it('silently ignores empty directories', () => {\n      expect(() => fsUtil.rmDir(pathName)).not.toThrowError();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"removes an existing directory recursively","suites":["fsUtil","rmDir"],"line":20,"updatePoint":{"line":20,"column":49,"index":556},"code":"    it('removes an existing directory recursively', () => {\n      fs.mkdirSync(pathName);\n      fs.mkdirSync(path.join(pathName, 'subdir'));\n      fs.writeFileSync(path.join(pathName, 'file.txt'), '123', 'utf8');\n      fs.writeFileSync(path.join(pathName, 'subdir', 'subfile.txt'), '123', 'utf8');\n      fsUtil.rmDir(pathName);\n      expect(() => fs.accessSync(pathName)).toThrowError(/ENOENT: no such file or directory/);\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"creates an empty dir if it did not exist","suites":["fsUtil","ensureCleanDir"],"line":30,"updatePoint":{"line":30,"column":48,"index":1029},"code":"    it('creates an empty dir if it did not exist', () => {\n      fsUtil.ensureCleanDir(pathName);\n      expect(fs.readdirSync(pathName)).toEqual([]);\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"cleans up an existing directory","suites":["fsUtil","ensureCleanDir"],"line":34,"updatePoint":{"line":34,"column":39,"index":1178},"code":"    it('cleans up an existing directory', () => {\n      fs.mkdirSync(pathName);\n      fs.mkdirSync(path.join(pathName, 'subdir'));\n      fs.writeFileSync(path.join(pathName, 'file.txt'), '123', 'utf8');\n      fs.writeFileSync(path.join(pathName, 'subdir', 'subfile.txt'), '123', 'utf8');\n      fsUtil.ensureCleanDir(pathName);\n      expect(fs.readdirSync(pathName)).toEqual([]);\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"creates the parent hierarchy as well","suites":["fsUtil","ensureCleanDir"],"line":42,"updatePoint":{"line":42,"column":44,"index":1570},"code":"    it('creates the parent hierarchy as well', () => {\n      fsUtil.ensureCleanDir(pathName + '/sub/dir');\n      expect(fs.readdirSync(pathName)).toEqual(['sub']);\n      expect(fs.readdirSync(path.join(pathName, 'sub'))).toEqual(['dir']);\n      expect(fs.readdirSync(path.join(pathName, 'sub', 'dir'))).toEqual([]);\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"moves a directory to a new location","suites":["fsUtil","move"],"line":50,"updatePoint":{"line":50,"column":43,"index":1926},"code":"    it('moves a directory to a new location', () => {\n      const newName = tmppath();\n      fs.mkdirSync(pathName);\n      fs.mkdirSync(path.join(pathName, 'subdir'));\n      fs.writeFileSync(path.join(pathName, 'file.txt'), '123', 'utf8');\n      fs.writeFileSync(path.join(pathName, 'subdir', 'subfile.txt'), '123', 'utf8');\n      fsUtil.move(pathName, newName);\n      expect(() => fs.accessSync(pathName)).toThrowError(/ENOENT: no such file or directory/);\n      expect(fs.readFileSync(path.join(newName, 'subdir', 'subfile.txt'), 'utf8')).toEqual('123');\n      expect(fs.readFileSync(path.join(newName, 'file.txt'), 'utf8')).toEqual('123');\n      fsUtil.rmDir(newName);\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"moves a file to a new location","suites":["fsUtil","move"],"line":62,"updatePoint":{"line":62,"column":38,"index":2601},"code":"    it('moves a file to a new location', () => {\n      const newName = tmppath();\n      fs.writeFileSync(pathName, '123', 'utf8');\n      fsUtil.move(pathName, newName);\n      expect(() => fs.accessSync(pathName)).toThrowError(/ENOENT: no such file or directory/);\n      expect(fs.readFileSync(path.join(newName), 'utf8')).toEqual('123');\n      fsUtil.rmDir(newName);\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"overwrites an existing file during move","suites":["fsUtil","move"],"line":70,"updatePoint":{"line":70,"column":47,"index":2985},"code":"    it('overwrites an existing file during move', () => {\n      const newName = tmppath();\n      fs.writeFileSync(newName, '345', 'utf8');\n      fs.writeFileSync(pathName, '123', 'utf8');\n      fsUtil.move(pathName, newName);\n      expect(() => fs.accessSync(pathName)).toThrowError(/ENOENT: no such file or directory/);\n      expect(fs.readFileSync(path.join(newName), 'utf8')).toEqual('123');\n      fsUtil.rmDir(newName);\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"returns true for an existing file","suites":["fsUtil","fileExists"],"line":81,"updatePoint":{"line":81,"column":41,"index":3450},"code":"    it('returns true for an existing file', () => {\n      fs.writeFileSync(pathName, '123', 'utf8');\n      expect(fsUtil.fileExists(pathName)).toBeTruthy();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"returns false for a non-existing file","suites":["fsUtil","fileExists"],"line":85,"updatePoint":{"line":85,"column":45,"index":3619},"code":"    it('returns false for a non-existing file', () => {\n      expect(fsUtil.fileExists(pathName)).toBeFalsy();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"is false for non-existing paths","suites":["fsUtil","isDir"],"line":90,"updatePoint":{"line":90,"column":39,"index":3766},"code":"    it('is false for non-existing paths', () => {\n      expect(fsUtil.isDir(pathName)).toBeFalsy();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"is false for files","suites":["fsUtil","isDir"],"line":93,"updatePoint":{"line":93,"column":26,"index":3861},"code":"    it('is false for files', () => {\n      fs.writeFileSync(pathName, '123', 'utf8');\n      expect(fsUtil.isDir(pathName)).toBeFalsy();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"is true for directories","suites":["fsUtil","isDir"],"line":97,"updatePoint":{"line":97,"column":31,"index":4010},"code":"    it('is true for directories', () => {\n      fs.mkdirSync(pathName);\n      expect(fsUtil.isDir(pathName)).toBeTruthy();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"is false for non-existing paths","suites":["fsUtil","isLink"],"line":103,"updatePoint":{"line":103,"column":39,"index":4184},"code":"    it('is false for non-existing paths', () => {\n      expect(fsUtil.isLink(pathName)).toBeFalsy();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"is false for files","suites":["fsUtil","isLink"],"line":106,"updatePoint":{"line":106,"column":26,"index":4280},"code":"    it('is false for files', () => {\n      fs.writeFileSync(pathName, '123', 'utf8');\n      expect(fsUtil.isLink(pathName)).toBeFalsy();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"is true for links","suites":["fsUtil","isLink"],"line":110,"updatePoint":{"line":110,"column":25,"index":4424},"code":"    it('is true for links', () => {\n      const linkPath = path.resolve(pathName, 'link.txt'),\n        filePath = path.resolve(pathName, 'file.txt');\n      fs.mkdirSync(pathName);\n      fs.writeFileSync(filePath, '123', 'utf8');\n      fs.symlinkSync(filePath, linkPath);\n      expect(fsUtil.isLink(linkPath)).toBeTruthy();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"recursively copies a directory to another existing dir","suites":["fsUtil","copy"],"line":120,"updatePoint":{"line":120,"column":62,"index":4825},"code":"    it('recursively copies a directory to another existing dir', () => {\n      fs.mkdirSync(pathName);\n      fs.mkdirSync(path.join(pathName, 'content'));\n      fs.mkdirSync(path.join(pathName, 'copy'));\n      fs.mkdirSync(path.join(pathName, 'content', 'subdir'));\n      fs.writeFileSync(path.join(pathName, 'content', 'file.txt'), '123', 'utf8');\n      fs.writeFileSync(path.join(pathName, 'content', 'subdir', 'subfile.txt'), '456', 'utf8');\n      fsUtil.copy(path.join(pathName, 'content'), path.join(pathName, 'copy'));\n      expect(fs.readFileSync(path.join(pathName, 'copy', 'content', 'subdir', 'subfile.txt'), 'utf8')).toEqual('456');\n      expect(fs.readFileSync(path.join(pathName, 'copy', 'content', 'file.txt'), 'utf8')).toEqual('123');\n      expect(fs.readFileSync(path.join(pathName, 'content', 'subdir', 'subfile.txt'), 'utf8')).toEqual('456');\n      expect(fs.readFileSync(path.join(pathName, 'content', 'file.txt'), 'utf8')).toEqual('123');\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"does not prepend source basename path if third arg is truthy","suites":["fsUtil","copy"],"line":133,"updatePoint":{"line":133,"column":68,"index":5798},"code":"    it('does not prepend source basename path if third arg is truthy', () => {\n      fs.mkdirSync(pathName);\n      fs.mkdirSync(path.join(pathName, 'content'));\n      fs.mkdirSync(path.join(pathName, 'copy'));\n      fs.mkdirSync(path.join(pathName, 'content', 'subdir'));\n      fs.writeFileSync(path.join(pathName, 'content', 'file.txt'), '123', 'utf8');\n      fs.writeFileSync(path.join(pathName, 'content', 'subdir', 'subfile.txt'), '456', 'utf8');\n      fsUtil.copy(path.join(pathName, 'content'), path.join(pathName, 'copy'), true);\n      expect(fs.readFileSync(path.join(pathName, 'copy', 'subdir', 'subfile.txt'), 'utf8')).toEqual('456');\n      expect(fs.readFileSync(path.join(pathName, 'copy', 'file.txt'), 'utf8')).toEqual('123');\n      expect(fs.readFileSync(path.join(pathName, 'content', 'subdir', 'subfile.txt'), 'utf8')).toEqual('456');\n      expect(fs.readFileSync(path.join(pathName, 'content', 'file.txt'), 'utf8')).toEqual('123');\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"copies a file to an existing dir","suites":["fsUtil","copy"],"line":146,"updatePoint":{"line":146,"column":40,"index":6727},"code":"    it('copies a file to an existing dir', () => {\n      fs.mkdirSync(pathName);\n      fs.mkdirSync(path.join(pathName, 'copy'));\n      fs.writeFileSync(path.join(pathName, 'file.txt'), '123', 'utf8');\n      fsUtil.copy(path.join(pathName, 'file.txt'), path.join(pathName, 'copy'));\n      expect(fs.readFileSync(path.join(pathName, 'copy', 'file.txt'), 'utf8')).toEqual('123');\n      expect(fs.readFileSync(path.join(pathName, 'file.txt'), 'utf8')).toEqual('123');\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"throws if the target directory does not exist","suites":["fsUtil","copy"],"line":154,"updatePoint":{"line":154,"column":53,"index":7213},"code":"    it('throws if the target directory does not exist', () => {\n      fs.mkdirSync(pathName);\n      fs.writeFileSync(path.join(pathName, 'file.txt'), '123', 'utf8');\n      expect(() => fsUtil.copy(path.join(pathName, 'file.txt'), path.join(pathName, 'copy'))).toThrowError(/copy does not exist/);\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"throws if the target is a file","suites":["fsUtil","copy"],"line":159,"updatePoint":{"line":159,"column":38,"index":7503},"code":"    it('throws if the target is a file', () => {\n      fs.mkdirSync(pathName);\n      fs.writeFileSync(path.join(pathName, 'file.txt'), '123', 'utf8');\n      fs.writeFileSync(path.join(pathName, 'copy'), '123', 'utf8');\n      expect(() => fsUtil.copy(path.join(pathName, 'file.txt'), path.join(pathName, 'copy'))).toThrowError(/copy is not a directory/);\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"lists contents of a directory recursively","suites":["fsUtil","recursiveList","with absolute paths"],"line":177,"updatePoint":{"line":177,"column":51,"index":8454},"code":"      it('lists contents of a directory recursively', () => {\n        expect(fsUtil.recursiveList(path.join(pathName, 'content')).sort()).toEqual(['file.txt', 'numbers.txt', 'subdir', 'subdir/subfile.txt']);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"appends paths at each level of depth","suites":["fsUtil","recursiveList","with absolute paths"],"line":180,"updatePoint":{"line":180,"column":46,"index":8667},"code":"      it('appends paths at each level of depth', () => {\n        fs.mkdirSync(path.join(pathName, 'content', 'subdir', 'subsub'));\n        fs.writeFileSync(path.join(pathName, 'content', 'subdir', 'subsub', 'subsubfile.txt'), '456', 'utf8');\n        expect(fsUtil.recursiveList(path.join(pathName, 'content')).sort()).toEqual(['file.txt', 'numbers.txt', 'subdir', 'subdir/subfile.txt', 'subdir/subsub', 'subdir/subsub/subsubfile.txt']);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"uses globbing patterns","suites":["fsUtil","recursiveList","with absolute paths"],"line":185,"updatePoint":{"line":185,"column":32,"index":9100},"code":"      it('uses globbing patterns', () => {\n        expect(fsUtil.recursiveList(path.join(pathName, 'content', '*.txt')).sort()).toEqual([path.join(pathName, 'content', 'file.txt'), path.join(pathName, 'content', 'numbers.txt')]);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"lists a single file","suites":["fsUtil","recursiveList","with absolute paths"],"line":188,"updatePoint":{"line":188,"column":29,"index":9337},"code":"      it('lists a single file', () => {\n        expect(fsUtil.recursiveList(path.join(pathName, 'content', 'file.txt'))).toEqual([path.join(pathName, 'content', 'file.txt')]);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"lists a single file with globbing patterns","suites":["fsUtil","recursiveList","with absolute paths"],"line":191,"updatePoint":{"line":191,"column":52,"index":9546},"code":"      it('lists a single file with globbing patterns', () => {\n        expect(fsUtil.recursiveList(path.join(pathName, 'content', 'file*'))).toEqual([path.join(pathName, 'content', 'file.txt')]);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"returns an empty array if no matching files","suites":["fsUtil","recursiveList","with absolute paths"],"line":194,"updatePoint":{"line":194,"column":53,"index":9753},"code":"      it('returns an empty array if no matching files', () => {\n        expect(fsUtil.recursiveList(path.join(pathName, 'nx'))).toEqual([]);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"returns an empty array if directory is empty","suites":["fsUtil","recursiveList","with absolute paths"],"line":197,"updatePoint":{"line":197,"column":54,"index":9905},"code":"      it('returns an empty array if directory is empty', () => {\n        expect(fsUtil.recursiveList(path.join(pathName, 'empty'))).toEqual([]);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"lists contents of a directory recursively","suites":["fsUtil","recursiveList","with relative paths"],"line":208,"updatePoint":{"line":208,"column":51,"index":10264},"code":"      it('lists contents of a directory recursively', () => {\n        expect(fsUtil.recursiveList('content').sort()).toEqual(['file.txt', 'numbers.txt', 'subdir', 'subdir/subfile.txt']);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"uses globbing patterns","suites":["fsUtil","recursiveList","with relative paths"],"line":211,"updatePoint":{"line":211,"column":32,"index":10442},"code":"      it('uses globbing patterns', () => {\n        expect(fsUtil.recursiveList('content/*.txt').sort()).toEqual([path.join('content', 'file.txt'), path.join('content', 'numbers.txt')]);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"lists a single file","suites":["fsUtil","recursiveList","with relative paths"],"line":214,"updatePoint":{"line":214,"column":29,"index":10635},"code":"      it('lists a single file', () => {\n        expect(fsUtil.recursiveList(path.join('content', 'file.txt'))).toEqual([path.join('content', 'file.txt')]);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"lists a single file with globbing patterns","suites":["fsUtil","recursiveList","with relative paths"],"line":217,"updatePoint":{"line":217,"column":52,"index":10824},"code":"      it('lists a single file with globbing patterns', () => {\n        expect(fsUtil.recursiveList(path.join('content', 'file*'))).toEqual([path.join('content', 'file.txt')]);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"returns an empty array if no matching files","suites":["fsUtil","recursiveList","with relative paths"],"line":220,"updatePoint":{"line":220,"column":53,"index":11011},"code":"      it('returns an empty array if no matching files', () => {\n        expect(fsUtil.recursiveList('nx')).toEqual([]);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"returns an empty array if directory is empty","suites":["fsUtil","recursiveList","with relative paths"],"line":223,"updatePoint":{"line":223,"column":54,"index":11142},"code":"      it('returns an empty array if directory is empty', () => {\n        expect(fsUtil.recursiveList('empty')).toEqual([]);\n      });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"removes an existing file","suites":["fsUtil","silentRemove"],"line":229,"updatePoint":{"line":229,"column":32,"index":11303},"code":"    it('removes an existing file', () => {\n      fs.writeFileSync(pathName, '123', 'utf8');\n      fsUtil.silentRemove(pathName);\n      expect(fsUtil.isFile(pathName)).toBeFalsy();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"will not complain if the file does not exist","suites":["fsUtil","silentRemove"],"line":234,"updatePoint":{"line":234,"column":52,"index":11511},"code":"    it('will not complain if the file does not exist', () => {\n      expect(() => fsUtil.silentRemove(pathName)).not.toThrow();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"is false for non-existing paths","suites":["fsUtil","isFile"],"line":239,"updatePoint":{"line":239,"column":39,"index":11669},"code":"    it('is false for non-existing paths', () => {\n      expect(fsUtil.isFile(pathName)).toBeFalsy();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"is true for files","suites":["fsUtil","isFile"],"line":242,"updatePoint":{"line":242,"column":25,"index":11764},"code":"    it('is true for files', () => {\n      fs.writeFileSync(pathName, '123', 'utf8');\n      expect(fsUtil.isFile(pathName)).toBeTruthy();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"is false for directories","suites":["fsUtil","isFile"],"line":246,"updatePoint":{"line":246,"column":32,"index":11916},"code":"    it('is false for directories', () => {\n      fs.mkdirSync(pathName);\n      expect(fsUtil.isFile(pathName)).toBeFalsy();\n    });","file":"fs-util-spec.js","skipped":false,"dir":"spec"},{"name":"keeps alphanumeric characters, dash and underscore","suites":["iamNameSanitize"],"line":5,"updatePoint":{"line":5,"column":56,"index":176},"code":"  it('keeps alphanumeric characters, dash and underscore', () => {\n    expect(iamNameSanitize('agaA293B-C_d123')).toEqual('agaA293B-C_d123');\n  });","file":"iam-name-sanitize-spec.js","skipped":false,"dir":"spec"},{"name":"replaces other characters with underscore","suites":["iamNameSanitize"],"line":8,"updatePoint":{"line":8,"column":47,"index":315},"code":"  it('replaces other characters with underscore', () => {\n    expect(iamNameSanitize('ag.aA$29')).toEqual('ag_aA_29');\n  });","file":"iam-name-sanitize-spec.js","skipped":false,"dir":"spec"},{"name":"should resolve with undefined if no options are defined","suites":["initEnvVarsFromOptions"],"line":12,"updatePoint":{"line":12,"column":61,"index":360},"code":"  it('should resolve with undefined if no options are defined', done => {\n    initEnvVarsFromOptions().then(result => {\n      expect(result).toBeUndefined();\n      expect(cloneEnv()).toEqual(oldEnv);\n    }).then(done, done.fail);\n  });","file":"init-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"should resolve with undefined if empty options","suites":["initEnvVarsFromOptions"],"line":18,"updatePoint":{"line":18,"column":52,"index":587},"code":"  it('should resolve with undefined if empty options', done => {\n    initEnvVarsFromOptions({}).then(result => {\n      expect(result).toBeUndefined();\n      expect(cloneEnv()).toEqual(oldEnv);\n    }).then(done, done.fail);\n  });","file":"init-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"should resolve with undefined if options do not contain env","suites":["initEnvVarsFromOptions"],"line":24,"updatePoint":{"line":24,"column":65,"index":829},"code":"  it('should resolve with undefined if options do not contain env', done => {\n    initEnvVarsFromOptions({\n      ignoreMe: 'yes'\n    }).then(result => {\n      expect(result).toBeUndefined();\n      expect(cloneEnv()).toEqual(oldEnv);\n    }).then(done, done.fail);\n  });","file":"init-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"throws an error when loading env vars fails","suites":["initEnvVarsFromOptions"],"line":32,"updatePoint":{"line":32,"column":49,"index":1082},"code":"  it('throws an error when loading env vars fails', done => {\n    initEnvVarsFromOptions({\n      'set-env-from-json': '/non-existing-path'\n    }).then(done.fail, reason => {\n      expect(reason).toMatch(/no such file or directory/);\n      expect(cloneEnv()).toEqual(oldEnv);\n    }).then(done, done.fail);\n  });","file":"init-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"resolves with key-value pairs from set-env and extends the process.env","suites":["initEnvVarsFromOptions"],"line":40,"updatePoint":{"line":40,"column":76,"index":1420},"code":"  it('resolves with key-value pairs from set-env and extends the process.env', done => {\n    initEnvVarsFromOptions({\n      'set-env': 'XPATH=/var/www,YPATH=/var/lib'\n    }).then(result => {\n      const newEnv = cloneEnv();\n      expect(result).toEqual({\n        Variables: {\n          'XPATH': '/var/www',\n          'YPATH': '/var/lib'\n        }\n      });\n      expect(newEnv).toEqual(jasmine.objectContaining(oldEnv));\n      expect(newEnv.XPATH).toEqual('/var/www');\n      expect(newEnv.YPATH).toEqual('/var/lib');\n    }).then(done, done.fail);\n  });","file":"init-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"is truthy for an ARN representing a kinesis stream","suites":["isKinesisArn"],"line":5,"updatePoint":{"line":5,"column":56,"index":167},"code":"  it('is truthy for an ARN representing a kinesis stream', () => {\n    expect(isKinesisArn('arn:aws:kinesis:us-east-1:123456789012:stream/example-stream-name')).toBeTruthy();\n  });","file":"is-kinesis-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is truthy for an partition ARNs","suites":["isKinesisArn"],"line":8,"updatePoint":{"line":8,"column":37,"index":329},"code":"  it('is truthy for an partition ARNs', () => {\n    expect(isKinesisArn('arn:aws-us-gov:kinesis:us-gov-west-1:123456789012:stream/my_stream')).toBeTruthy();\n  });","file":"is-kinesis-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is falsy for different ARN types","suites":["isKinesisArn"],"line":11,"updatePoint":{"line":11,"column":38,"index":493},"code":"  it('is falsy for different ARN types', () => {\n    expect(isKinesisArn('arn:aws:firehose:us-east-1:123456789012:deliverystream/example-stream-name')).toBeFalsy();\n    expect(isKinesisArn('arn:aws:kinesisanalytics:us-east-1:123456789012:application/example-application-name')).toBeFalsy();\n    expect(isKinesisArn('arn:aws:sts::123456789012:assumed-role/Accounting-Role/Mary')).toBeFalsy();\n  });","file":"is-kinesis-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is falsy for non-arn values","suites":["isKinesisArn"],"line":16,"updatePoint":{"line":16,"column":33,"index":886},"code":"  it('is falsy for non-arn values', () => {\n    expect(isKinesisArn('roleName')).toBeFalsy();\n    expect(isKinesisArn('')).toBeFalsy();\n    expect(isKinesisArn(false)).toBeFalsy();\n  });","file":"is-kinesis-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is truthy for an ARN representing an IAM role","suites":["isRoleArn"],"line":5,"updatePoint":{"line":5,"column":51,"index":153},"code":"  it('is truthy for an ARN representing an IAM role', () => {\n    expect(isRoleArn('arn:aws:iam::123456789012:role/S3Access')).toBeTruthy();\n  });","file":"is-role-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is truthy for us-gov partition role ARNs","suites":["isRoleArn"],"line":8,"updatePoint":{"line":8,"column":46,"index":295},"code":"  it('is truthy for us-gov partition role ARNs', () => {\n    expect(isRoleArn('arn:aws-us-gov:iam:us-gov-west-1:123456789012:role/S3Access')).toBeTruthy();\n    expect(isRoleArn('arn:aws-us-gov:iam:us-gov-west-1:123456789012:role/application_abc/component_xyz/S3Access')).toBeTruthy();\n  });","file":"is-role-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is falsy for different ARN types","suites":["isRoleArn"],"line":12,"updatePoint":{"line":12,"column":38,"index":578},"code":"  it('is falsy for different ARN types', () => {\n    expect(isRoleArn('arn:aws:iam::123456789012:policy/ManageCredentialsPermissions')).toBeFalsy();\n    expect(isRoleArn('arn:aws:iam::123456789012:root')).toBeFalsy();\n    expect(isRoleArn('arn:aws:sts::123456789012:assumed-role/Accounting-Role/Mary')).toBeFalsy();\n  });","file":"is-role-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is falsy for non-arn values","suites":["isRoleArn"],"line":17,"updatePoint":{"line":17,"column":33,"index":895},"code":"  it('is falsy for non-arn values', () => {\n    expect(isRoleArn('roleName')).toBeFalsy();\n    expect(isRoleArn('')).toBeFalsy();\n    expect(isRoleArn(false)).toBeFalsy();\n  });","file":"is-role-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is truthy for an ARN representing a sns topic","suites":["isSNSArn"],"line":5,"updatePoint":{"line":5,"column":51,"index":150},"code":"  it('is truthy for an ARN representing a sns topic', () => {\n    expect(isSNSArn('arn:aws:sns:*:123456789012:my_corporate_topic')).toBeTruthy();\n  });","file":"is-sns-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is falsy for a SNS subscription","suites":["isSNSArn"],"line":8,"updatePoint":{"line":8,"column":37,"index":288},"code":"  it('is falsy for a SNS subscription', () => {\n    expect(isSNSArn('arn:aws:sns:us-east-1:123456789012:my_corporate_topic:02034b43-fefa-4e07-a5eb-3be56f8c54ce')).toBeFalsy();\n  });","file":"is-sns-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is truthy for ARNs from the us-gov region","suites":["isSNSArn"],"line":11,"updatePoint":{"line":11,"column":47,"index":480},"code":"  it('is truthy for ARNs from the us-gov region', () => {\n    expect(isSNSArn('arn:aws-us-gov:sns:us-gov-west-1:123456789012:my_corporate_topic')).toBeTruthy();\n  });","file":"is-sns-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is falsy for a SNS subscription from the us-gov region","suites":["isSNSArn"],"line":14,"updatePoint":{"line":14,"column":60,"index":660},"code":"  it('is falsy for a SNS subscription from the us-gov region', () => {\n    expect(isSNSArn('arn:aws-us-gov:sns:us-gov-west-1:123456789012:my_corporate_topic:02034b43-fefa-4e07-a5eb-3be56f8c54ce')).toBeFalsy();\n  });","file":"is-sns-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is falsy for different ARN types","suites":["isSNSArn"],"line":17,"updatePoint":{"line":17,"column":38,"index":854},"code":"  it('is falsy for different ARN types', () => {\n    expect(isSNSArn('arn:aws-us-gov:sqs:us-gov-west-1:123456789012:queue1')).toBeFalsy();\n    expect(isSNSArn('arn:aws:firehose:us-east-1:123456789012:deliverystream/example-stream-name')).toBeFalsy();\n    expect(isSNSArn('arn:aws:kinesisanalytics:us-east-1:123456789012:application/example-application-name')).toBeFalsy();\n    expect(isSNSArn('arn:aws:sts::123456789012:assumed-role/Accounting-Role/Mary')).toBeFalsy();\n  });","file":"is-sns-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is falsy for non-arn values","suites":["isSNSArn"],"line":23,"updatePoint":{"line":23,"column":33,"index":1325},"code":"  it('is falsy for non-arn values', () => {\n    expect(isSNSArn('roleName')).toBeFalsy();\n    expect(isSNSArn('')).toBeFalsy();\n    expect(isSNSArn(false)).toBeFalsy();\n  });","file":"is-sns-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is truthy for an ARN representing a SQS queue","suites":["isSQSArn"],"line":5,"updatePoint":{"line":5,"column":51,"index":150},"code":"  it('is truthy for an ARN representing a SQS queue', () => {\n    expect(isSQSArn('arn:aws:sqs:us-east-1:123456789012:queue1')).toBeTruthy();\n  });","file":"is-sqs-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is truthy for ARNs from the us-gov region","suites":["isSQSArn"],"line":8,"updatePoint":{"line":8,"column":47,"index":294},"code":"  it('is truthy for ARNs from the us-gov region', () => {\n    expect(isSQSArn('arn:aws-us-gov:sqs:us-gov-west-1:123456789012:queue1')).toBeTruthy();\n  });","file":"is-sqs-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is falsy for different ARN types","suites":["isSQSArn"],"line":11,"updatePoint":{"line":11,"column":38,"index":440},"code":"  it('is falsy for different ARN types', () => {\n    expect(isSQSArn('arn:aws:firehose:us-east-1:123456789012:deliverystream/example-stream-name')).toBeFalsy();\n    expect(isSQSArn('arn:aws:kinesisanalytics:us-east-1:123456789012:application/example-application-name')).toBeFalsy();\n    expect(isSQSArn('arn:aws:sts::123456789012:assumed-role/Accounting-Role/Mary')).toBeFalsy();\n  });","file":"is-sqs-arn-spec.js","skipped":false,"dir":"spec"},{"name":"is falsy for non-arn values","suites":["isSQSArn"],"line":16,"updatePoint":{"line":16,"column":33,"index":821},"code":"  it('is falsy for non-arn values', () => {\n    expect(isSQSArn('roleName')).toBeFalsy();\n    expect(isSQSArn('')).toBeFalsy();\n    expect(isSQSArn(false)).toBeFalsy();\n  });","file":"is-sqs-arn-spec.js","skipped":false,"dir":"spec"},{"name":"keeps alphanumeric characters, dash and underscore","suites":["lambdaNameSanitize"],"line":5,"updatePoint":{"line":5,"column":56,"index":185},"code":"  it('keeps alphanumeric characters, dash and underscore', () => {\n    expect(lambdaNameSanitize('agaA293B-C_d123')).toEqual('agaA293B-C_d123');\n  });","file":"lambda-name-sanitize-spec.js","skipped":false,"dir":"spec"},{"name":"replaces other characters with underscore","suites":["lambdaNameSanitize"],"line":8,"updatePoint":{"line":8,"column":47,"index":327},"code":"  it('replaces other characters with underscore', () => {\n    expect(lambdaNameSanitize('ag.aA$29')).toEqual('ag_aA_29');\n  });","file":"lambda-name-sanitize-spec.js","skipped":false,"dir":"spec"},{"name":"trims to 140 chars","suites":["lambdaNameSanitize"],"line":11,"updatePoint":{"line":11,"column":24,"index":432},"code":"  it('trims to 140 chars', () => {\n    expect(lambdaNameSanitize(new Array(200).join('a')).length).toEqual(140);\n  });","file":"lambda-name-sanitize-spec.js","skipped":false,"dir":"spec"},{"name":"creates a sensible name from scoped NPM packages","suites":["lambdaNameSanitize"],"line":14,"updatePoint":{"line":14,"column":54,"index":581},"code":"  it('creates a sensible name from scoped NPM packages', () => {\n    expect(lambdaNameSanitize('@company/xyz')).toEqual('company_xyz');\n  });","file":"lambda-name-sanitize-spec.js","skipped":false,"dir":"spec"},{"name":"trims spaces","suites":["lambdaNameSanitize"],"line":17,"updatePoint":{"line":17,"column":18,"index":687},"code":"  it('trims spaces', () => {\n    expect(lambdaNameSanitize(' bla bla ')).toEqual('bla_bla');\n  });","file":"lambda-name-sanitize-spec.js","skipped":false,"dir":"spec"},{"name":"lists only latest when created without a version","suites":["listVersions"],"line":34,"updatePoint":{"line":34,"column":54,"index":1087},"code":"  it('lists only latest when created without a version', done => {\n    fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n    create({\n      name: testRunName,\n      region: awsRegion,\n      source: workingdir,\n      handler: 'main.handler',\n      role: genericTestRole.get()\n    }).then(result => {\n      newObjects.lambdaFunction = result.lambda && result.lambda.name;\n    }).then(() => listVersions(newObjects.lambdaFunction, lambda)).then(result => {\n      expect(extractVersionsAndAliases(result)).toEqual([{\n        version: '$LATEST',\n        aliases: ['latest']\n      }, {\n        version: '1',\n        aliases: []\n      }]);\n    }).then(done, done.fail);\n  });","file":"list-versions-spec.js","skipped":false,"dir":"spec"},{"name":"includes runtime, size and time of creation","suites":["listVersions"],"line":54,"updatePoint":{"line":54,"column":49,"index":1766},"code":"  it('includes runtime, size and time of creation', done => {\n    fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n    create({\n      name: testRunName,\n      region: awsRegion,\n      source: workingdir,\n      handler: 'main.handler',\n      role: genericTestRole.get()\n    }).then(result => {\n      newObjects.lambdaFunction = result.lambda && result.lambda.name;\n    }).then(() => listVersions(newObjects.lambdaFunction, lambda)).then(result => {\n      const item = result[0];\n      expect(item.time).toBeTruthy();\n      expect(item.runtime).toBeTruthy();\n      expect(item.size).toBeTruthy();\n    }).then(done, done.fail);\n  });","file":"list-versions-spec.js","skipped":false,"dir":"spec"},{"name":"lists latest and specific version when created with a version","suites":["listVersions"],"line":71,"updatePoint":{"line":71,"column":67,"index":2431},"code":"  it('lists latest and specific version when created with a version', done => {\n    fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n    create({\n      name: testRunName,\n      region: awsRegion,\n      version: 'dev',\n      source: workingdir,\n      handler: 'main.handler',\n      role: genericTestRole.get()\n    }).then(result => {\n      newObjects.lambdaFunction = result.lambda && result.lambda.name;\n    }).then(() => listVersions(newObjects.lambdaFunction, lambda)).then(result => {\n      expect(extractVersionsAndAliases(result)).toEqual([{\n        version: '$LATEST',\n        aliases: ['latest']\n      }, {\n        version: '1',\n        aliases: ['dev']\n      }]);\n    }).then(done, done.fail);\n  });","file":"list-versions-spec.js","skipped":false,"dir":"spec"},{"name":"lists multiple aliases assigned to the same version","suites":["listVersions"],"line":92,"updatePoint":{"line":92,"column":57,"index":3145},"code":"  it('lists multiple aliases assigned to the same version', done => {\n    fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n    create({\n      name: testRunName,\n      region: awsRegion,\n      version: 'dev',\n      source: workingdir,\n      handler: 'main.handler',\n      role: genericTestRole.get()\n    }).then(result => {\n      newObjects.lambdaFunction = result.lambda && result.lambda.name;\n    }).then(() => setVersion({\n      source: workingdir,\n      version: 'new'\n    })).then(() => listVersions(newObjects.lambdaFunction, lambda)).then(result => {\n      expect(extractVersionsAndAliases(result)).toEqual([{\n        version: '$LATEST',\n        aliases: ['latest']\n      }, {\n        version: '1',\n        aliases: ['dev', 'new']\n      }]);\n    }).then(done, done.fail);\n  });","file":"list-versions-spec.js","skipped":false,"dir":"spec"},{"name":"lists everything without a filter","suites":["listVersions","filtering"],"line":139,"updatePoint":{"line":139,"column":41,"index":4634},"code":"    it('lists everything without a filter', done => {\n      listVersions(newObjects.lambdaFunction, lambda).then(result => {\n        expect(extractVersionsAndAliases(result)).toEqual([{\n          version: '$LATEST',\n          aliases: ['latest']\n        }, {\n          version: '1',\n          aliases: []\n        }, {\n          version: '2',\n          aliases: ['new', 'test']\n        }, {\n          version: '3',\n          aliases: ['dev']\n        }]);\n      }).then(done, done.fail);\n    });","file":"list-versions-spec.js","skipped":false,"dir":"spec"},{"name":"filters versions by number","suites":["listVersions","filtering"],"line":156,"updatePoint":{"line":156,"column":34,"index":5121},"code":"    it('filters versions by number', done => {\n      listVersions(newObjects.lambdaFunction, lambda, 1).then(result => {\n        expect(extractVersionsAndAliases(result)).toEqual([{\n          version: '1',\n          aliases: []\n        }]);\n      }).then(done, done.fail);\n    });","file":"list-versions-spec.js","skipped":false,"dir":"spec"},{"name":"filters versions by string number","suites":["listVersions","filtering"],"line":164,"updatePoint":{"line":164,"column":41,"index":5409},"code":"    it('filters versions by string number', done => {\n      listVersions(newObjects.lambdaFunction, lambda, '3').then(result => {\n        expect(extractVersionsAndAliases(result)).toEqual([{\n          version: '3',\n          aliases: ['dev']\n        }]);\n      }).then(done, done.fail);\n    });","file":"list-versions-spec.js","skipped":false,"dir":"spec"},{"name":"lists matching single alias","suites":["listVersions","filtering"],"line":172,"updatePoint":{"line":172,"column":35,"index":5698},"code":"    it('lists matching single alias', done => {\n      listVersions(newObjects.lambdaFunction, lambda, 'dev').then(result => {\n        expect(extractVersionsAndAliases(result)).toEqual([{\n          version: '3',\n          aliases: ['dev']\n        }]);\n      }).then(done, done.fail);\n    });","file":"list-versions-spec.js","skipped":false,"dir":"spec"},{"name":"lists matching any alias","suites":["listVersions","filtering"],"line":180,"updatePoint":{"line":180,"column":32,"index":5986},"code":"    it('lists matching any alias', done => {\n      listVersions(newObjects.lambdaFunction, lambda, 'test').then(result => {\n        expect(extractVersionsAndAliases(result)).toEqual([{\n          version: '2',\n          aliases: ['new', 'test']\n        }]);\n      }).then(done, done.fail);\n    });","file":"list-versions-spec.js","skipped":false,"dir":"spec"},{"name":"should identify methods","suites":["listWrappableFunctions"],"line":13,"updatePoint":{"line":13,"column":29,"index":345},"code":"  it('should identify methods', () => {\n    expect(listWrappableFunctions(iam)).toContain('createRole');\n  });","file":"list-wrappable-functions-spec.js","skipped":false,"dir":"spec"},{"name":"should ignore generic methods","suites":["listWrappableFunctions"],"line":16,"updatePoint":{"line":16,"column":35,"index":462},"code":"  it('should ignore generic methods', () => {\n    expect(listWrappableFunctions(iam)).not.toContain('makeRequest');\n  });","file":"list-wrappable-functions-spec.js","skipped":false,"dir":"spec"},{"name":"should ignore constructors","suites":["listWrappableFunctions"],"line":19,"updatePoint":{"line":19,"column":32,"index":581},"code":"  it('should ignore constructors', () => {\n    expect(listWrappableFunctions(iam)).not.toContain('constructor');\n  });","file":"list-wrappable-functions-spec.js","skipped":false,"dir":"spec"},{"name":"should include super-prototype methods","suites":["listWrappableFunctions"],"line":22,"updatePoint":{"line":22,"column":44,"index":712},"code":"  it('should include super-prototype methods', () => {\n    expect(listWrappableFunctions(s3)).toContain('upload');\n  });","file":"list-wrappable-functions-spec.js","skipped":false,"dir":"spec"},{"name":"should not contain any properties","suites":["listWrappableFunctions"],"line":25,"updatePoint":{"line":25,"column":39,"index":828},"code":"  it('should not contain any properties', () => {\n    expect(listWrappableFunctions({\n      a: () => {},\n      b: 5\n    })).toEqual(['a']);\n  });","file":"list-wrappable-functions-spec.js","skipped":false,"dir":"spec"},{"name":"loads config from the current directory if no directory provided","suites":["loadConfig"],"line":22,"updatePoint":{"line":22,"column":70,"index":592},"code":"  it('loads config from the current directory if no directory provided', done => {\n    process.chdir(workingdir);\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify(exampleConfig), 'utf8');\n    underTest().then(config => expect(config).toEqual(exampleConfig)).then(done, done.fail);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"loads config from the source directory if string provided","suites":["loadConfig"],"line":27,"updatePoint":{"line":27,"column":63,"index":898},"code":"  it('loads config from the source directory if string provided', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify(exampleConfig), 'utf8');\n    underTest(workingdir).then(config => expect(config).toEqual(exampleConfig)).then(done, done.fail);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"loads config from the source directory if object provided","suites":["loadConfig"],"line":31,"updatePoint":{"line":31,"column":63,"index":1183},"code":"  it('loads config from the source directory if object provided', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify(exampleConfig), 'utf8');\n    underTest({\n      source: workingdir\n    }).then(config => expect(config).toEqual(exampleConfig)).then(done, done.fail);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"loads config from an alternative file in the current dir, if config is provided","suites":["loadConfig"],"line":37,"updatePoint":{"line":37,"column":85,"index":1512},"code":"  it('loads config from an alternative file in the current dir, if config is provided', done => {\n    process.chdir(workingdir);\n    fs.writeFileSync(path.join(workingdir, 'lambda.json'), JSON.stringify(exampleConfig), 'utf8');\n    underTest({\n      config: 'lambda.json'\n    }).then(config => expect(config).toEqual(exampleConfig)).then(done, done.fail);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"loads config from an alternative file in a different dir, if config is provided","suites":["loadConfig"],"line":44,"updatePoint":{"line":44,"column":85,"index":1874},"code":"  it('loads config from an alternative file in a different dir, if config is provided', done => {\n    fs.writeFileSync(path.join(workingdir, 'lambda.json'), JSON.stringify(exampleConfig), 'utf8');\n    underTest({\n      config: path.join(workingdir, 'lambda.json')\n    }).then(config => expect(config).toEqual(exampleConfig)).then(done, done.fail);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"complains about claudia.json if no config is given and claudia.json does not exist","suites":["loadConfig"],"line":50,"updatePoint":{"line":50,"column":88,"index":2231},"code":"  it('complains about claudia.json if no config is given and claudia.json does not exist', done => {\n    underTest({\n      source: workingdir\n    }).then(done.fail, err => expect(err).toEqual('claudia.json does not exist in the source folder')).then(done);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"complains about the source path if config is given but does not exist","suites":["loadConfig"],"line":55,"updatePoint":{"line":55,"column":75,"index":2481},"code":"  it('complains about the source path if config is given but does not exist', done => {\n    const configPath = path.join(workingdir, 'lambda.json');\n    underTest({\n      config: configPath\n    }).then(done.fail, err => expect(err).toEqual(configPath + ' does not exist')).then(done);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"validates lambda name if required","suites":["loadConfig"],"line":61,"updatePoint":{"line":61,"column":39,"index":2736},"code":"  it('validates lambda name if required', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify(exampleConfig), 'utf8');\n    underTest(workingdir, {\n      lambda: {\n        name: true\n      }\n    }).then(done.fail, err => expect(err).toEqual('invalid configuration -- lambda.name missing from claudia.json')).then(done);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"passes name validation if name is provided","suites":["loadConfig"],"line":69,"updatePoint":{"line":69,"column":48,"index":3103},"code":"  it('passes name validation if name is provided', done => {\n    exampleConfig = {\n      lambda: {\n        name: 'mike'\n      }\n    };\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify(exampleConfig), 'utf8');\n    underTest(workingdir, {\n      lambda: {\n        name: true\n      }\n    }).then(config => expect(config).toEqual(exampleConfig)).then(done, done.fail);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"validates lambda region if required","suites":["loadConfig"],"line":82,"updatePoint":{"line":82,"column":41,"index":3492},"code":"  it('validates lambda region if required', done => {\n    exampleConfig = {\n      lambda: {\n        name: 'mike'\n      }\n    };\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify(exampleConfig), 'utf8');\n    underTest(workingdir, {\n      lambda: {\n        region: true\n      }\n    }).then(done.fail, err => expect(err).toEqual('invalid configuration -- lambda.region missing from claudia.json')).then(done);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"passes region validation if name is provided","suites":["loadConfig"],"line":95,"updatePoint":{"line":95,"column":50,"index":3939},"code":"  it('passes region validation if name is provided', done => {\n    exampleConfig = {\n      lambda: {\n        name: 'mike',\n        region: 'us-east-1'\n      }\n    };\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify(exampleConfig), 'utf8');\n    underTest(workingdir, {\n      lambda: {\n        region: true\n      }\n    }).then(config => expect(config).toEqual(exampleConfig)).then(done, done.fail);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"validates lambda role if required","suites":["loadConfig"],"line":109,"updatePoint":{"line":109,"column":39,"index":4357},"code":"  it('validates lambda role if required', done => {\n    exampleConfig = {\n      lambda: {\n        name: 'mike'\n      }\n    };\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify(exampleConfig), 'utf8');\n    underTest(workingdir, {\n      lambda: {\n        role: true\n      }\n    }).then(done.fail, err => expect(err).toEqual('invalid configuration -- lambda.role missing from claudia.json')).then(done);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"passes role validation if name is provided","suites":["loadConfig"],"line":122,"updatePoint":{"line":122,"column":48,"index":4798},"code":"  it('passes role validation if name is provided', done => {\n    exampleConfig = {\n      lambda: {\n        role: 'function-executor'\n      }\n    };\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify(exampleConfig), 'utf8');\n    underTest(workingdir, {\n      lambda: {\n        role: true\n      }\n    }).then(config => expect(config.lambda.role).toEqual('function-executor')).then(done, done.fail);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"converts a role from an ARN to a name if ARN is specified","suites":["loadConfig"],"line":135,"updatePoint":{"line":135,"column":63,"index":5240},"code":"  it('converts a role from an ARN to a name if ARN is specified', done => {\n    exampleConfig = {\n      lambda: {\n        role: 'arn:aws:iam::333333333333:role/abcde-cli'\n      }\n    };\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify(exampleConfig), 'utf8');\n    underTest(workingdir, {\n      lambda: {\n        role: true\n      }\n    }).then(config => expect(config.lambda.role).toEqual('abcde-cli')).then(done, done.fail);\n  });","file":"loadconfig-spec.js","skipped":false,"dir":"spec"},{"name":"logs the start of each call to a log with a logName prefix","suites":["loggingWrap","call reporting"],"line":16,"updatePoint":{"line":16,"column":66,"index":520},"code":"    it('logs the start of each call to a log with a logName prefix', () => {\n      const result = underTest(target, {\n        log: logger,\n        logName: 'Service1'\n      });\n      result.f1('a', 'b', {\n        c: true\n      });\n      expect(logger).toHaveBeenCalledWith('Service1.f1', ['a', 'b', {\n        c: true\n      }]);\n    });","file":"logging-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"proxies calls to underlying functions","suites":["loggingWrap","call reporting"],"line":28,"updatePoint":{"line":28,"column":45,"index":835},"code":"    it('proxies calls to underlying functions', () => {\n      const result = underTest(target, {\n        log: logger,\n        logName: 'Service1'\n      });\n      result.f1('a', 'b', {\n        c: true\n      });\n      expect(originalMethods.f1).toHaveBeenCalledWith('a', 'b', {\n        c: true\n      });\n    });","file":"logging-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"does not explode when options are not provided","suites":["loggingWrap","call reporting"],"line":40,"updatePoint":{"line":40,"column":54,"index":1154},"code":"    it('does not explode when options are not provided', () => {\n      const result = underTest(target);\n      result.f1('a', 'b', {\n        c: true\n      });\n      expect(originalMethods.f1).toHaveBeenCalled();\n    });","file":"logging-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"does not explode when log is not provided","suites":["loggingWrap","call reporting"],"line":47,"updatePoint":{"line":47,"column":49,"index":1369},"code":"    it('does not explode when log is not provided', () => {\n      const result = underTest(target, {});\n      result.f1('a', 'b', {\n        c: true\n      });\n      expect(originalMethods.f1).toHaveBeenCalled();\n    });","file":"logging-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"uses blank logname if it is not provided","suites":["loggingWrap","call reporting"],"line":54,"updatePoint":{"line":54,"column":48,"index":1587},"code":"    it('uses blank logname if it is not provided', () => {\n      const result = underTest(target, {\n        log: logger\n      });\n      result.f1('a', 'b', {\n        c: true\n      });\n      expect(logger).toHaveBeenCalledWith('f1', ['a', 'b', {\n        c: true\n      }]);\n    });","file":"logging-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"wraps API objects","suites":["loggingWrap","call reporting"],"line":66,"updatePoint":{"line":66,"column":23,"index":1848},"code":"  it('wraps API objects', done => {\n    const sts = underTest(new aws.STS(), {\n      log: logger,\n      logName: 'sts'\n    });\n    sts.getCallerIdentity().promise().then(callerIdentity => {\n      expect(callerIdentity.Account).not.toBeUndefined();\n      expect(logger).toHaveBeenCalledWith('sts.getCallerIdentity', []);\n    }).then(done, done.fail);\n  });","file":"logging-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"creates a new version alias of the lambda function","suites":["markAlias","when the lambda project exists"],"line":41,"updatePoint":{"line":41,"column":58,"index":1352},"code":"    it('creates a new version alias of the lambda function', done => {\n      underTest(testRunName, lambda, '1', 'testver').then(() => lambda.getAlias({\n        FunctionName: testRunName,\n        Name: 'testver'\n      }).promise()).then(result => expect(result.FunctionVersion).toEqual('1')).then(done, done.fail);\n    });","file":"mark-alias-spec.js","skipped":false,"dir":"spec"},{"name":"migrates an alias if it already exists","suites":["markAlias","when the lambda project exists"],"line":47,"updatePoint":{"line":47,"column":46,"index":1663},"code":"    it('migrates an alias if it already exists', done => {\n      fsUtil.copy('spec/test-projects/echo', workingdir, true);\n      lambda.createAlias({\n        FunctionName: testRunName,\n        FunctionVersion: '1',\n        Name: 'dev'\n      }).promise().then(() => update({\n        source: workingdir\n      })).then(() => underTest(testRunName, lambda, '2', 'testver')).then(() => lambda.getAlias({\n        FunctionName: testRunName,\n        Name: 'testver'\n      }).promise()).then(result => expect(result.FunctionVersion).toEqual('2')).then(done, done.fail);\n    });","file":"mark-alias-spec.js","skipped":false,"dir":"spec"},{"name":"overrides target properties","suites":["mergeProperties"],"line":9,"updatePoint":{"line":9,"column":33,"index":245},"code":"  it('overrides target properties', () => {\n    expect(mergeTest({}, {\n      a: 1\n    })).toEqual({\n      a: 1\n    });\n    expect(mergeTest({\n      a: 2\n    }, {\n      a: 1\n    })).toEqual({\n      a: 1\n    });\n    expect(mergeTest({\n      a: 2,\n      b: 3\n    }, {\n      a: 1\n    })).toEqual({\n      a: 1,\n      b: 3\n    });\n    expect(mergeTest({\n      a: 2,\n      b: 3\n    }, {\n      a: 1,\n      b: 22\n    })).toEqual({\n      a: 1,\n      b: 22\n    });\n    expect(mergeTest({\n      a: 2,\n      b: 3\n    }, {\n      a: 1,\n      c: 33\n    })).toEqual({\n      a: 1,\n      b: 3,\n      c: 33\n    });\n  });","file":"merge-properties-spec.js","skipped":false,"dir":"spec"},{"name":"does not modify the source object","suites":["mergeProperties"],"line":53,"updatePoint":{"line":53,"column":39,"index":852},"code":"  it('does not modify the source object', () => {\n    const from = {\n        a: 1\n      },\n      to = {\n        b: 1\n      };\n    mergeProperties(to, from);\n    expect(from).toEqual({\n      a: 1\n    });\n  });","file":"merge-properties-spec.js","skipped":false,"dir":"spec"},{"name":"has the API methods for logging","suites":["NullLogger"],"line":9,"updatePoint":{"line":9,"column":37,"index":219},"code":"  it('has the API methods for logging', () => {\n    expect(typeof underTest.logStage).toEqual('function');\n    expect(typeof underTest.logApiCall).toEqual('function');\n  });","file":"null-logger-spec.js","skipped":false,"dir":"spec"},{"name":"returns a path to a tar archive containing packed project files","suites":["packProjectToTar"],"line":35,"updatePoint":{"line":35,"column":69,"index":1402},"code":"  it('returns a path to a tar archive containing packed project files', done => {\n    packProjectToTar(sourcedir, workingdir, [], logger).then(archive => extractTar(archive, unpackdir)).then(() => {\n      expect(fsUtil.fileExists(path.join(unpackdir, 'package', 'root.txt'))).toBeTruthy();\n      expect(fsUtil.fileExists(path.join(unpackdir, 'package', 'excluded.txt'))).toBeFalsy();\n      expect(fsUtil.isDir(path.join(unpackdir, 'package', 'subdir'))).toBeTruthy();\n      expect(fsUtil.fileExists(path.join(unpackdir, 'package', 'subdir', 'sub.txt'))).toBeTruthy();\n    }).then(done, done.fail);\n  });","file":"pack-project-to-tar-spec.js","skipped":false,"dir":"spec"},{"name":"creates the archive in a subdir of the working dir","suites":["packProjectToTar"],"line":43,"updatePoint":{"line":43,"column":56,"index":1993},"code":"  it('creates the archive in a subdir of the working dir', done => {\n    packProjectToTar(sourcedir, workingdir, [], logger).then(archive => {\n      expect(path.dirname(path.dirname(archive))).toEqual(workingdir);\n    }).then(done, done.fail);\n  });","file":"pack-project-to-tar-spec.js","skipped":false,"dir":"spec"},{"name":"logs NPM commands","suites":["packProjectToTar"],"line":48,"updatePoint":{"line":48,"column":23,"index":2210},"code":"  it('logs NPM commands', done => {\n    packProjectToTar(sourcedir, workingdir, [], logger).then(() => {\n      expect(logger.getCombinedLog()).toEqual([['call', `npm pack -q ${sourcedir}`]]);\n    }).then(done, done.fail);\n  });","file":"pack-project-to-tar-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the source folder is same as os tmp folder","suites":["pack"],"line":28,"updatePoint":{"line":28,"column":57,"index":958},"code":"  it('fails if the source folder is same as os tmp folder', done => {\n    underTest({\n      source: os.tmpdir()\n    }, logger).then(done.fail, message => expect(message).toEqual('Source directory is the Node temp directory. Cowardly refusing to fill up disk with recursive copy.')).then(done);\n  });","file":"pack-spec.js","skipped":false,"dir":"spec"},{"name":"fails if local dependencies and optional dependencies are mixed","suites":["pack"],"line":33,"updatePoint":{"line":33,"column":69,"index":1270},"code":"  it('fails if local dependencies and optional dependencies are mixed', done => {\n    underTest({\n      'use-local-dependencies': true,\n      'optional-dependencies': false\n    }, logger).then(done.fail, message => expect(message).toEqual('incompatible arguments --use-local-dependencies and --no-optional-dependencies')).then(done);\n  });","file":"pack-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the source directory is not a node project","suites":["pack"],"line":39,"updatePoint":{"line":39,"column":57,"index":1598},"code":"  it('fails if the source directory is not a node project', done => {\n    underTest({\n      source: workingdir\n    }, logger).then(done.fail, message => expect(message).toEqual('package.json does not exist in the source folder')).then(done);\n  });","file":"pack-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the default output file already exists","suites":["pack"],"line":44,"updatePoint":{"line":44,"column":53,"index":1842},"code":"  it('fails if the default output file already exists', done => {\n    const archivePath = path.join(workingdir, 'optional-dependencies', 'echo-1.0.0.zip');\n    process.chdir(path.join(workingdir, 'optional-dependencies'));\n    fs.writeFileSync(archivePath, 'exists', 'utf8');\n    underTest({}, logger).then(done.fail, message => expect(message).toMatch(/echo-1\\.0\\.0\\.zip already exists\\. Use --force to overwrite it\\.$/)).then(() => expect(fs.readFileSync(archivePath, 'utf8')).toEqual('exists')).then(done);\n  });","file":"pack-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the specified output file already exists","suites":["pack"],"line":50,"updatePoint":{"line":50,"column":55,"index":2360},"code":"  it('fails if the specified output file already exists', done => {\n    const archivePath = path.join(workingdir, 'echo.zip');\n    fs.writeFileSync(archivePath, 'exists', 'utf8');\n    underTest({\n      source: path.join(workingdir, 'optional-dependencies'),\n      output: archivePath\n    }, logger).then(done.fail, message => expect(message).toMatch(/echo\\.zip already exists. Use --force to overwrite it\\.$/)).then(() => expect(fs.readFileSync(archivePath, 'utf8')).toEqual('exists')).then(done);\n  });","file":"pack-spec.js","skipped":false,"dir":"spec"},{"name":"packs a project with all the production dependencies","suites":["pack"],"line":58,"updatePoint":{"line":58,"column":58,"index":2867},"code":"  it('packs a project with all the production dependencies', done => {\n    process.chdir(path.join(workingdir, 'optional-dependencies'));\n    underTest({}, logger).then(result => decompress(result.output, unpackPath)).then(() => {\n      expect(fsUtil.isFile(path.join(unpackPath, 'package.json'))).toBeTruthy();\n      expect(fsUtil.isFile(path.join(unpackPath, 'main.js'))).toBeTruthy();\n      expect(fsUtil.isDir(path.join(unpackPath, 'node_modules'))).toBeTruthy();\n      expect(fsUtil.isDir(path.join(unpackPath, 'node_modules', 'aws-sdk'))).toBeTruthy();\n      expect(fsUtil.isDir(path.join(unpackPath, 'node_modules', 'huh'))).toBeTruthy();\n    }).then(done, done.fail);\n  });","file":"pack-spec.js","skipped":false,"dir":"spec"},{"name":"packs a project without optional dependencies if requested","suites":["pack"],"line":68,"updatePoint":{"line":68,"column":64,"index":3555},"code":"  it('packs a project without optional dependencies if requested', done => {\n    process.chdir(path.join(workingdir, 'optional-dependencies'));\n    underTest({\n      'optional-dependencies': false\n    }, logger).then(result => decompress(result.output, unpackPath)).then(() => {\n      expect(fsUtil.isFile(path.join(unpackPath, 'package.json'))).toBeTruthy();\n      expect(fsUtil.isFile(path.join(unpackPath, 'main.js'))).toBeTruthy();\n      expect(fsUtil.isDir(path.join(unpackPath, 'node_modules'))).toBeTruthy();\n      expect(fsUtil.isDir(path.join(unpackPath, 'node_modules', 'aws-sdk'))).toBeFalsy();\n      expect(fsUtil.isDir(path.join(unpackPath, 'node_modules', 'huh'))).toBeTruthy();\n    }).then(done, done.fail);\n  });","file":"pack-spec.js","skipped":false,"dir":"spec"},{"name":"packs a project from a source dir","suites":["pack"],"line":80,"updatePoint":{"line":80,"column":39,"index":4259},"code":"  it('packs a project from a source dir', done => {\n    process.chdir(path.join(workingdir));\n    underTest({\n      'source': path.join(workingdir, 'optional-dependencies'),\n      'optional-dependencies': false\n    }, logger).then(result => decompress(result.output, unpackPath)).then(() => {\n      expect(fsUtil.isFile(path.join(unpackPath, 'package.json'))).toBeTruthy();\n      expect(fsUtil.isFile(path.join(unpackPath, 'main.js'))).toBeTruthy();\n      expect(fsUtil.isDir(path.join(unpackPath, 'node_modules'))).toBeTruthy();\n      expect(fsUtil.isDir(path.join(unpackPath, 'node_modules', 'aws-sdk'))).toBeFalsy();\n      expect(fsUtil.isDir(path.join(unpackPath, 'node_modules', 'huh'))).toBeTruthy();\n    }).then(done, done.fail);\n  });","file":"pack-spec.js","skipped":false,"dir":"spec"},{"name":"packs a local project to a default file name","suites":["pack"],"line":93,"updatePoint":{"line":93,"column":50,"index":5013},"code":"  it('packs a local project to a default file name', done => {\n    process.chdir(path.join(workingdir, 'optional-dependencies'));\n    underTest({}, logger).then(result => {\n      expect(path.basename(result.output)).toEqual('echo-1.0.0.zip');\n      expect(fsUtil.isFile(result.output)).toBeTruthy();\n    }).then(done, done.fail);\n  });","file":"pack-spec.js","skipped":false,"dir":"spec"},{"name":"uses the specified file name","suites":["pack"],"line":100,"updatePoint":{"line":100,"column":34,"index":5333},"code":"  it('uses the specified file name', done => {\n    process.chdir(path.join(workingdir, 'optional-dependencies'));\n    underTest({\n      output: 'xx.zip'\n    }, logger).then(result => {\n      expect(path.basename(result.output)).toEqual('xx.zip');\n      expect(path.dirname(result.output)).toEqual(path.resolve(process.cwd()));\n      expect(fsUtil.isFile(result.output)).toBeTruthy();\n    }).then(done, done.fail);\n  });","file":"pack-spec.js","skipped":false,"dir":"spec"},{"name":"overwrites an existing file if force is set","suites":["pack"],"line":110,"updatePoint":{"line":110,"column":49,"index":5768},"code":"  it('overwrites an existing file if force is set', done => {\n    process.chdir(path.join(workingdir, 'optional-dependencies'));\n    fs.writeFileSync('xx.zip', 'exists', 'utf8');\n    underTest({\n      output: 'xx.zip',\n      force: true,\n      'optional-dependencies': false\n    }, logger).then(result => {\n      expect(path.basename(result.output)).toEqual('xx.zip');\n      expect(path.basename(result.output)).toEqual('xx.zip');\n      return decompress(result.output, unpackPath);\n    }).then(() => {\n      expect(fsUtil.isFile(path.join(unpackPath, 'package.json'))).toBeTruthy();\n      expect(fsUtil.isFile(path.join(unpackPath, 'main.js'))).toBeTruthy();\n      expect(fsUtil.isDir(path.join(unpackPath, 'node_modules'))).toBeTruthy();\n      expect(fsUtil.isDir(path.join(unpackPath, 'node_modules', 'aws-sdk'))).toBeFalsy();\n      expect(fsUtil.isDir(path.join(unpackPath, 'node_modules', 'huh'))).toBeTruthy();\n    }).then(done, done.fail);\n  });","file":"pack-spec.js","skipped":false,"dir":"spec"},{"name":"throws error for invalid []","suites":["parseKeyValueCSV"],"line":6,"updatePoint":{"line":6,"column":50,"index":306},"code":"    it(`throws error for invalid [${invalidValue}]`, () => {\n      expect(() => parseKeyValueCSV()).toThrow();\n    });","file":"parse-key-value-csv-spec.js","skipped":false,"dir":"spec"},{"name":"parses a single key-value pair","suites":["parseKeyValueCSV"],"line":10,"updatePoint":{"line":10,"column":36,"index":417},"code":"  it('parses a single key-value pair', () => {\n    expect(parseKeyValueCSV('XPATH=/var/www')).toEqual({\n      'XPATH': '/var/www'\n    });\n    expect(parseKeyValueCSV('XPATH=')).toEqual({\n      'XPATH': ''\n    });\n  });","file":"parse-key-value-csv-spec.js","skipped":false,"dir":"spec"},{"name":"parses multiple comma separated key-value pair","suites":["parseKeyValueCSV"],"line":18,"updatePoint":{"line":18,"column":52,"index":652},"code":"  it('parses multiple comma separated key-value pair', () => {\n    expect(parseKeyValueCSV('XPATH=/var/www,YPATH=/var/lib')).toEqual({\n      'XPATH': '/var/www',\n      'YPATH': '/var/lib'\n    });\n    expect(parseKeyValueCSV('XPATH=,YPATH=/var/lib')).toEqual({\n      'XPATH': '',\n      'YPATH': '/var/lib'\n    });\n    expect(parseKeyValueCSV('XPATH=abc,YPATH=/var/lib,ZPATH=')).toEqual({\n      'XPATH': 'abc',\n      'YPATH': '/var/lib',\n      ZPATH: ''\n    });\n    expect(parseKeyValueCSV('XPATH=abc,YPATH=,ZPATH=def')).toEqual({\n      'XPATH': 'abc',\n      'YPATH': '',\n      'ZPATH': 'def'\n    });\n    expect(parseKeyValueCSV(' XPATH=abc,YPATH=,ZPATH=def ')).toEqual({\n      'XPATH': 'abc',\n      'YPATH': '',\n      'ZPATH': 'def'\n    });\n  });","file":"parse-key-value-csv-spec.js","skipped":false,"dir":"spec"},{"name":"supports = in the value","suites":["parseKeyValueCSV"],"line":43,"updatePoint":{"line":43,"column":29,"index":1375},"code":"  it('supports = in the value', () => {\n    expect(parseKeyValueCSV('XPATH=ab=c,YPATH=cd=e=f')).toEqual({\n      'XPATH': 'ab=c',\n      'YPATH': 'cd=e=f'\n    });\n  });","file":"parse-key-value-csv-spec.js","skipped":false,"dir":"spec"},{"name":"adds new types to a blank API","suites":["patchBinaryTypes"],"line":21,"updatePoint":{"line":21,"column":35,"index":624},"code":"  it('adds new types to a blank API', done => {\n    const newTypes = ['image/png', 'image/jpg'];\n    apiGateway.createRestApiPromise({\n      name: testRunName\n    }).then(result => apiId = result.id).then(() => patchBinaryTypes(apiId, apiGateway, newTypes)).then(() => apiGateway.getRestApiPromise({\n      restApiId: apiId\n    })).then(apiConfig => {\n      expect(apiConfig.binaryMediaTypes).toEqual(newTypes);\n    }).then(done, done.fail);\n  });","file":"patch-binary-types-spec.js","skipped":false,"dir":"spec"},{"name":"modifies types of an existing API","suites":["patchBinaryTypes"],"line":31,"updatePoint":{"line":31,"column":39,"index":1075},"code":"  it('modifies types of an existing API', done => {\n    const newTypes = ['image/png', 'image/gif'];\n    apiGateway.createRestApiPromise({\n      name: testRunName,\n      binaryMediaTypes: ['image/png', 'image/jpg']\n    }).then(result => apiId = result.id).then(() => patchBinaryTypes(apiId, apiGateway, newTypes)).then(() => apiGateway.getRestApiPromise({\n      restApiId: apiId\n    })).then(apiConfig => {\n      expect(apiConfig.binaryMediaTypes).toEqual(newTypes);\n    }).then(done, done.fail);\n  });","file":"patch-binary-types-spec.js","skipped":false,"dir":"spec"},{"name":"removes all types from an existing API","suites":["patchBinaryTypes"],"line":42,"updatePoint":{"line":42,"column":44,"index":1583},"code":"  it('removes all types from an existing API', done => {\n    apiGateway.createRestApiPromise({\n      name: testRunName,\n      binaryMediaTypes: ['image/png', 'image/jpg']\n    }).then(result => apiId = result.id).then(() => patchBinaryTypes(apiId, apiGateway, false)).then(() => apiGateway.getRestApiPromise({\n      restApiId: apiId\n    })).then(apiConfig => {\n      expect(apiConfig.binaryMediaTypes).toBeUndefined();\n    }).then(done, done.fail);\n  });","file":"patch-binary-types-spec.js","skipped":false,"dir":"spec"},{"name":"replaces / with ~1","suites":["patchEscape"],"line":5,"updatePoint":{"line":5,"column":24,"index":131},"code":"  it('replaces / with ~1', () => {\n    expect(patchEscape('abc')).toEqual('abc');\n    expect(patchEscape('')).toEqual('');\n    expect(patchEscape('a/b')).toEqual('a~1b');\n    expect(patchEscape('a/bcd/e/fg')).toEqual('a~1bcd~1e~1fg');\n  });","file":"patch-escape-spec.js","skipped":false,"dir":"spec"},{"name":"adds an initial event to an empty array","suites":["patchLambdaFunctionAssociations"],"line":5,"updatePoint":{"line":5,"column":45,"index":215},"code":"  it('adds an initial event to an empty array', () => {\n    expect(patchLambdaFunctionAssociations({\n      Quantity: 0,\n      Items: []\n    }, ['viewer-request'], 'arn:1:2:3')).toEqual({\n      Quantity: 1,\n      Items: [{\n        EventType: 'viewer-request',\n        LambdaFunctionARN: 'arn:1:2:3'\n      }]\n    });\n  });","file":"patch-lambda-function-associations-spec.js","skipped":false,"dir":"spec"},{"name":"adds an new event to an existing array","suites":["patchLambdaFunctionAssociations"],"line":17,"updatePoint":{"line":17,"column":44,"index":535},"code":"  it('adds an new event to an existing array', () => {\n    expect(patchLambdaFunctionAssociations({\n      Quantity: 1,\n      Items: [{\n        EventType: 'viewer-response',\n        LambdaFunctionARN: 'arn:2:3:4'\n      }]\n    }, ['viewer-request'], 'arn:1:2:3')).toEqual({\n      Quantity: 2,\n      Items: [{\n        EventType: 'viewer-response',\n        LambdaFunctionARN: 'arn:2:3:4'\n      }, {\n        EventType: 'viewer-request',\n        LambdaFunctionARN: 'arn:1:2:3'\n      }]\n    });\n  });","file":"patch-lambda-function-associations-spec.js","skipped":false,"dir":"spec"},{"name":"replaces an existing event","suites":["patchLambdaFunctionAssociations"],"line":35,"updatePoint":{"line":35,"column":32,"index":1017},"code":"  it('replaces an existing event', () => {\n    expect(patchLambdaFunctionAssociations({\n      Quantity: 1,\n      Items: [{\n        EventType: 'viewer-response',\n        LambdaFunctionARN: 'arn:2:3:4'\n      }]\n    }, ['viewer-response'], 'arn:1:2:3')).toEqual({\n      Quantity: 1,\n      Items: [{\n        EventType: 'viewer-response',\n        LambdaFunctionARN: 'arn:1:2:3'\n      }]\n    });\n  });","file":"patch-lambda-function-associations-spec.js","skipped":false,"dir":"spec"},{"name":"works with an array of events","suites":["patchLambdaFunctionAssociations"],"line":50,"updatePoint":{"line":50,"column":35,"index":1416},"code":"  it('works with an array of events', () => {\n    expect(patchLambdaFunctionAssociations({\n      Quantity: 1,\n      Items: [{\n        EventType: 'viewer-response',\n        LambdaFunctionARN: 'arn:2:3:4'\n      }, {\n        EventType: 'origin-request',\n        LambdaFunctionARN: 'arn:2:3:4'\n      }]\n    }, ['viewer-response', 'origin-response'], 'arn:1:2:3')).toEqual({\n      Quantity: 3,\n      Items: [{\n        EventType: 'viewer-response',\n        LambdaFunctionARN: 'arn:1:2:3'\n      }, {\n        EventType: 'origin-request',\n        LambdaFunctionARN: 'arn:2:3:4'\n      }, {\n        EventType: 'origin-response',\n        LambdaFunctionARN: 'arn:1:2:3'\n      }]\n    });\n  });","file":"patch-lambda-function-associations-spec.js","skipped":false,"dir":"spec"},{"name":"breaks paths into parent and path part","suites":["pathSplitter"],"line":5,"updatePoint":{"line":5,"column":44,"index":151},"code":"  it('breaks paths into parent and path part', () => {\n    expect(underTest('')).toEqual({\n      parentPath: '',\n      pathPart: ''\n    });\n    expect(underTest('/')).toEqual({\n      parentPath: '',\n      pathPart: ''\n    });\n    expect(underTest('mike')).toEqual({\n      parentPath: '',\n      pathPart: 'mike'\n    });\n    expect(underTest('/mike')).toEqual({\n      parentPath: '',\n      pathPart: 'mike'\n    });\n    expect(underTest('mike/')).toEqual({\n      parentPath: '',\n      pathPart: 'mike'\n    });\n    expect(underTest('/mike/')).toEqual({\n      parentPath: '',\n      pathPart: 'mike'\n    });\n    expect(underTest('mike/tom')).toEqual({\n      parentPath: 'mike',\n      pathPart: 'tom'\n    });\n    expect(underTest('mike/tom/')).toEqual({\n      parentPath: 'mike',\n      pathPart: 'tom'\n    });\n    expect(underTest('mike/tom/tim')).toEqual({\n      parentPath: 'mike/tom',\n      pathPart: 'tim'\n    });\n    expect(underTest('mike/tom/tim/')).toEqual({\n      parentPath: 'mike/tom',\n      pathPart: 'tim'\n    });\n    expect(underTest('/mike/tom/tim/')).toEqual({\n      parentPath: 'mike/tom',\n      pathPart: 'tim'\n    });\n  });","file":"path-splitter-spec.js","skipped":false,"dir":"spec"},{"name":"should return undefined if no set-env options are defined","suites":["readEnvVarsFromOptions"],"line":7,"updatePoint":{"line":7,"column":63,"index":272},"code":"  it('should return undefined if no set-env options are defined', () => {\n    expect(readEnvVarsFromOptions()).toBeUndefined();\n    expect(readEnvVarsFromOptions({})).toBeUndefined();\n    expect(readEnvVarsFromOptions({\n      ignoreMe: 'yes'\n    })).toBeUndefined();\n  });","file":"read-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"throws an error when set-env-from-json is set but the file does not exist","suites":["readEnvVarsFromOptions"],"line":41,"updatePoint":{"line":41,"column":79,"index":1479},"code":"  it('throws an error when set-env-from-json is set but the file does not exist', () => {\n    expect(() => {\n      readEnvVarsFromOptions({\n        'set-env-from-json': tmppath()\n      });\n    }).toThrowError(/no such file or directory/);\n  });","file":"read-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"throws an error when set-env-from-json is set but not valid json","suites":["readEnvVarsFromOptions"],"line":48,"updatePoint":{"line":48,"column":70,"index":1715},"code":"  it('throws an error when set-env-from-json is set but not valid json', () => {\n    const envpath = tmppath(),\n      vars = {\n        'set-env-from-json': envpath\n      };\n    fs.writeFileSync(envpath, '{{', 'utf8');\n    expect(() => {\n      readEnvVarsFromOptions(vars);\n    }).toThrow(`${envpath} is not a valid JSON file`);\n  });","file":"read-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"throws an error when set-env is set but not valid CSV","suites":["readEnvVarsFromOptions"],"line":58,"updatePoint":{"line":58,"column":59,"index":2038},"code":"  it('throws an error when set-env is set but not valid CSV', () => {\n    const options = {\n      'set-env': 'XPATH,YPATH=/var/lib'\n    };\n    expect(() => readEnvVarsFromOptions(options)).toThrow('Cannot read variables from set-env, Invalid CSV element XPATH');\n  });","file":"read-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"converts csv key-value pairs from set-env into variables","suites":["readEnvVarsFromOptions"],"line":64,"updatePoint":{"line":64,"column":62,"index":2310},"code":"  it('converts csv key-value pairs from set-env into variables', () => {\n    expect(readEnvVarsFromOptions({\n      'set-env': 'XPATH=/var/www,YPATH=/var/lib'\n    })).toEqual({\n      'XPATH': '/var/www',\n      'YPATH': '/var/lib'\n    });\n  });","file":"read-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"converts a valid JSON file into variables from set-env-from-json","suites":["readEnvVarsFromOptions"],"line":72,"updatePoint":{"line":72,"column":70,"index":2561},"code":"  it('converts a valid JSON file into variables from set-env-from-json', () => {\n    const envpath = tmppath();\n    fs.writeFileSync(envpath, JSON.stringify({\n      'XPATH': '/var/www',\n      'YPATH': '/var/lib'\n    }), 'utf8');\n    expect(readEnvVarsFromOptions({\n      'set-env-from-json': envpath\n    })).toEqual({\n      'XPATH': '/var/www',\n      'YPATH': '/var/lib'\n    });\n  });","file":"read-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"throws an error when update-env-from-json is set but the file does not exist","suites":["readEnvVarsFromOptions"],"line":85,"updatePoint":{"line":85,"column":82,"index":2958},"code":"  it('throws an error when update-env-from-json is set but the file does not exist', () => {\n    expect(() => {\n      readEnvVarsFromOptions({\n        'update-env-from-json': tmppath()\n      });\n    }).toThrowError(/no such file or directory/);\n  });","file":"read-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"throws an error when update-env-from-json is set but not valid json","suites":["readEnvVarsFromOptions"],"line":92,"updatePoint":{"line":92,"column":73,"index":3200},"code":"  it('throws an error when update-env-from-json is set but not valid json', () => {\n    const envpath = tmppath(),\n      vars = {\n        'update-env-from-json': envpath\n      };\n    fs.writeFileSync(envpath, '{{', 'utf8');\n    expect(() => {\n      readEnvVarsFromOptions(vars);\n    }).toThrow(`${envpath} is not a valid JSON file`);\n  });","file":"read-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"throws an error when update-env is set but not valid CSV","suites":["readEnvVarsFromOptions"],"line":102,"updatePoint":{"line":102,"column":62,"index":3529},"code":"  it('throws an error when update-env is set but not valid CSV', () => {\n    const options = {\n      'update-env': 'XPATH,YPATH=/var/lib'\n    };\n    expect(() => readEnvVarsFromOptions(options)).toThrow('Cannot read variables from update-env, Invalid CSV element XPATH');\n  });","file":"read-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"converts csv key-value pairs from update-env into variables","suites":["readEnvVarsFromOptions"],"line":108,"updatePoint":{"line":108,"column":65,"index":3810},"code":"  it('converts csv key-value pairs from update-env into variables', () => {\n    expect(readEnvVarsFromOptions({\n      'update-env': 'XPATH=/var/www,YPATH=/var/lib'\n    })).toEqual({\n      'XPATH': '/var/www',\n      'YPATH': '/var/lib'\n    });\n  });","file":"read-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"converts a valid JSON file into variables from update-env-from-json","suites":["readEnvVarsFromOptions"],"line":116,"updatePoint":{"line":116,"column":73,"index":4067},"code":"  it('converts a valid JSON file into variables from update-env-from-json', () => {\n    const envpath = tmppath();\n    fs.writeFileSync(envpath, JSON.stringify({\n      'XPATH': '/var/www',\n      'YPATH': '/var/lib'\n    }), 'utf8');\n    expect(readEnvVarsFromOptions({\n      'update-env-from-json': envpath\n    })).toEqual({\n      'XPATH': '/var/www',\n      'YPATH': '/var/lib'\n    });\n  });","file":"read-env-vars-from-options-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the file is not provided","suites":["readjson"],"line":15,"updatePoint":{"line":15,"column":39,"index":385},"code":"  it('fails if the file is not provided', done => {\n    underTest().then(done.fail, message => expect(message).toEqual('file name not provided')).then(done);\n  });","file":"readjson-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the file is missing","suites":["readjson"],"line":18,"updatePoint":{"line":18,"column":34,"index":544},"code":"  it('fails if the file is missing', done => {\n    underTest(workingfile).then(done.fail, message => expect(message).toEqual(workingfile + ' is missing')).then(done);\n  });","file":"readjson-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the file is not valid json","suites":["readjson"],"line":21,"updatePoint":{"line":21,"column":41,"index":724},"code":"  it('fails if the file is not valid json', done => {\n    fs.writeFileSync(workingfile, 'not-json', 'utf8');\n    underTest(workingfile).then(done.fail, message => expect(message).toEqual('invalid configuration in ' + workingfile)).then(done);\n  });","file":"readjson-spec.js","skipped":false,"dir":"spec"},{"name":"resolves with JSON-parsed contents","suites":["readjson"],"line":25,"updatePoint":{"line":25,"column":40,"index":972},"code":"  it('resolves with JSON-parsed contents', done => {\n    fs.writeFileSync(workingfile, JSON.stringify({\n      pack: 'me'\n    }), 'utf8');\n    underTest(workingfile).then(result => expect(result).toEqual({\n      pack: 'me'\n    })).then(done).catch(done.fail);\n  });","file":"readjson-spec.js","skipped":false,"dir":"spec"},{"name":"creates and links an API to a lambda version","suites":["rebuildWebApi","when working with a blank api"],"line":127,"updatePoint":{"line":127,"column":52,"index":4237},"code":"    it('creates and links an API to a lambda version', done => {\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(`${stageName}/echo`);\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures query string parameters","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":137,"updatePoint":{"line":137,"column":42,"index":4762},"code":"      it('captures query string parameters', done => {\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(`${stageName}/echo?name=mike&` + encodeURIComponent('to=m') + '=' + encodeURIComponent('val,a=b'));\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.queryStringParameters).toEqual({\n            name: 'mike',\n            'to=m': 'val,a=b'\n          });\n        }).then(done, e => {\n          console.log(e);\n          done.fail(e);\n        });\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures quoted query string parameters","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":151,"updatePoint":{"line":151,"column":49,"index":5381},"code":"      it('captures quoted query string parameters', done => {\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(`${stageName}/echo?name=O'Reilly`);\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.queryStringParameters).toEqual({\n            name: 'O\\'Reilly'\n          });\n        }).then(done, e => {\n          console.log(e);\n          done.fail(e);\n        });\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures path parameters","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":164,"updatePoint":{"line":164,"column":34,"index":5895},"code":"      it('captures path parameters', done => {\n        apiRouteConfig.routes['people/{personId}'] = {\n          'GET': {}\n        };\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(`${stageName}/people/Marcus`);\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.pathParameters.personId).toEqual('Marcus');\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures path parameters with quotes","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":175,"updatePoint":{"line":175,"column":46,"index":6412},"code":"      it('captures path parameters with quotes', done => {\n        apiRouteConfig.routes['people/{personId}'] = {\n          'GET': {}\n        };\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(`${stageName}/people/Mar'cus`);\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.pathParameters.personId).toEqual('Mar\\'cus');\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures headers","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":186,"updatePoint":{"line":186,"column":26,"index":6912},"code":"      it('captures headers', done => {\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(`${stageName}/echo`, {\n            headers: {\n              'auth-head': 'auth3-val',\n              'Capital-Head': 'Capital-Val'\n            }\n          });\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.headers['auth-head']).toEqual('auth3-val');\n          expect(params.headers['Capital-Head']).toEqual('Capital-Val');\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures headers with quotes","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":200,"updatePoint":{"line":200,"column":38,"index":7535},"code":"      it('captures headers with quotes', done => {\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(`${stageName}/echo`, {\n            headers: {\n              'auth-head': 'auth3\\'val',\n              'Capital-Head': 'Capital\\'Val'\n            }\n          });\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.headers['auth-head']).toEqual('auth3\\'val');\n          expect(params.headers['Capital-Head']).toEqual('Capital\\'Val');\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures stage variables","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":214,"updatePoint":{"line":214,"column":34,"index":8158},"code":"      it('captures stage variables', done => {\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n          return apiGateway.createDeploymentPromise({\n            restApiId: apiId,\n            stageName: 'fromtest',\n            variables: {\n              lambdaVersion: stageName,\n              authKey: 'abs123',\n              authBucket: 'bucket123'\n            }\n          });\n        }).then(() => {\n          return invoke('fromtest/echo');\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.stageVariables).toEqual({\n            lambdaVersion: stageName,\n            authKey: 'abs123',\n            authBucket: 'bucket123'\n          });\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures form post variables","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":236,"updatePoint":{"line":236,"column":38,"index":8976},"code":"      it('captures form post variables', done => {\n        underTest(genericLambdaName, stageName, apiId, {\n          corsHandlers: false,\n          version: 3,\n          routes: {\n            'echo': {\n              'POST': {}\n            }\n          }\n        }, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(stageName + '/echo', {\n            headers: {\n              'content-type': 'application/x-www-form-urlencoded'\n            },\n            body: querystring.stringify({\n              name: 'tom',\n              surname: 'bond'\n            }),\n            method: 'POST'\n          });\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.body).toEqual(querystring.stringify({\n            name: 'tom',\n            surname: 'bond'\n          }));\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures quoted form POST variables correctly","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":264,"updatePoint":{"line":264,"column":55,"index":9873},"code":"      it('captures quoted form POST variables correctly', done => {\n        const body = 'first_name=Jobin\\'s&receiver_email=xxx@yyy.com&address_country_code=CA&payer_business_name=Jobin\\'s Services&address_state=Quebec';\n        underTest(genericLambdaName, stageName, apiId, {\n          corsHandlers: false,\n          version: 3,\n          routes: {\n            'echo': {\n              'POST': {}\n            }\n          }\n        }, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(stageName + '/echo', {\n            headers: {\n              'content-type': 'application/x-www-form-urlencoded'\n            },\n            body: body,\n            method: 'POST'\n          });\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.body).toEqual(body);\n        }).then(done, result => {\n          console.log(result);\n          done.fail(result);\n        });\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures text/xml request bodies","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":290,"updatePoint":{"line":290,"column":42,"index":10807},"code":"      it('captures text/xml request bodies', done => {\n        const xml = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<test>1234</test>';\n        underTest(genericLambdaName, stageName, apiId, {\n          corsHandlers: false,\n          version: 3,\n          routes: {\n            'echo': {\n              'POST': {}\n            }\n          }\n        }, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(stageName + '/echo', {\n            headers: {\n              'Content-Type': 'text/xml'\n            },\n            body: xml,\n            method: 'POST'\n          });\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.body).toEqual(xml);\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures application/xml request bodies","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":313,"updatePoint":{"line":313,"column":49,"index":11593},"code":"      it('captures application/xml request bodies', done => {\n        const xml = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<test>1234</test>';\n        underTest(genericLambdaName, stageName, apiId, {\n          corsHandlers: false,\n          version: 3,\n          routes: {\n            'echo': {\n              'POST': {}\n            }\n          }\n        }, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(stageName + '/echo', {\n            headers: {\n              'Content-Type': 'application/xml'\n            },\n            body: xml,\n            method: 'POST'\n          });\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.body).toEqual(xml);\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures text/plain request bodies","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":336,"updatePoint":{"line":336,"column":44,"index":12381},"code":"      it('captures text/plain request bodies', done => {\n        const textContent = 'this is just plain text';\n        underTest(genericLambdaName, stageName, apiId, {\n          corsHandlers: false,\n          version: 3,\n          routes: {\n            'echo': {\n              'POST': {}\n            }\n          }\n        }, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(stageName + '/echo', {\n            headers: {\n              'Content-Type': 'text/plain'\n            },\n            body: textContent,\n            method: 'POST'\n          });\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.body).toEqual(textContent);\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures quoted text/plain request bodies","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":359,"updatePoint":{"line":359,"column":51,"index":13144},"code":"      it('captures quoted text/plain request bodies', done => {\n        const textContent = 'this is single \\' quote';\n        underTest(genericLambdaName, stageName, apiId, {\n          corsHandlers: false,\n          version: 3,\n          routes: {\n            'echo': {\n              'POST': {}\n            }\n          }\n        }, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(stageName + '/echo', {\n            headers: {\n              'Content-Type': 'text/plain'\n            },\n            body: textContent,\n            method: 'POST'\n          });\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(params.body).toEqual(textContent);\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"captures quoted application/json request bodies","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":382,"updatePoint":{"line":382,"column":57,"index":13913},"code":"      it('captures quoted application/json request bodies', done => {\n        const jsonContent = {\n            fileKey: 'Jim\\'s map.mup',\n            license: {\n              version: 2,\n              accountType: 'mindmup-gold',\n              account: 'dave',\n              signature: 'signature-1'\n            }\n          },\n          textContent = JSON.stringify(jsonContent);\n        underTest(genericLambdaName, stageName, apiId, {\n          corsHandlers: false,\n          version: 3,\n          routes: {\n            'echo': {\n              'POST': {}\n            }\n          }\n        }, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(stageName + '/echo', {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: textContent,\n            method: 'POST'\n          });\n        }).then(contents => {\n          const params = JSON.parse(contents.body);\n          expect(JSON.parse(params.body)).toEqual(jsonContent);\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"creates multiple methods for the same resource","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":415,"updatePoint":{"line":415,"column":54,"index":14961},"code":"    it('creates multiple methods for the same resource', done => {\n      underTest(genericLambdaName, stageName, apiId, {\n        corsHandlers: false,\n        version: 3,\n        routes: {\n          echo: {\n            GET: {},\n            POST: {},\n            PUT: {}\n          }\n        }\n      }, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/echo');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n      }).then(() => {\n        return invoke(stageName + '/echo', {\n          method: 'POST'\n        });\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('POST');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n      }).then(() => {\n        return invoke(stageName + '/echo', {\n          method: 'PUT'\n        });\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('PUT');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"maps ANY method","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":450,"updatePoint":{"line":450,"column":23,"index":16211},"code":"    it('maps ANY method', done => {\n      underTest(genericLambdaName, stageName, apiId, {\n        corsHandlers: false,\n        version: 3,\n        routes: {\n          echo: {\n            ANY: {}\n          }\n        }\n      }, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/echo');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n      }).then(() => {\n        return invoke(stageName + '/echo', {\n          method: 'POST'\n        });\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('POST');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n      }).then(() => {\n        return invoke(stageName + '/echo', {\n          method: 'PUT'\n        });\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('PUT');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n      }).then(done, e => {\n        console.log(e);\n        done.fail();\n      });\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"maps sub-resources with intermediate paths","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":486,"updatePoint":{"line":486,"column":50,"index":17495},"code":"    it('maps sub-resources with intermediate paths', done => {\n      apiRouteConfig.routes['echo/sub/res'] = {\n        POST: {}\n      };\n      apiRouteConfig.routes['echo/hello'] = {\n        POST: {}\n      };\n      apiRouteConfig.routes['sub/hello'] = {\n        POST: {}\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/echo');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n      }).then(() => {\n        return invoke(stageName + '/echo/sub/res', {\n          method: 'POST'\n        });\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('POST');\n        expect(params.requestContext.resourcePath).toEqual('/echo/sub/res');\n      }).then(() => {\n        return invoke(stageName + '/sub/hello', {\n          method: 'POST'\n        });\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('POST');\n        expect(params.requestContext.resourcePath).toEqual('/sub/hello');\n      }).then(() => {\n        return invoke(stageName + '/echo/hello', {\n          method: 'POST'\n        });\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('POST');\n        expect(params.requestContext.resourcePath).toEqual('/echo/hello');\n      }).then(done, e => {\n        console.log(JSON.stringify(e));\n        done.fail(e);\n      });\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"sets apiKeyRequired if requested","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":531,"updatePoint":{"line":531,"column":40,"index":19238},"code":"    it('sets apiKeyRequired if requested', done => {\n      let echoResourceId;\n      apiRouteConfig.routes.echo.POST = {\n        apiKeyRequired: true\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return apiGateway.getResourcesPromise({\n          restApiId: apiId\n        });\n      }).then(resources => {\n        resources.items.forEach(resource => {\n          if (resource.path === '/echo') {\n            echoResourceId = resource.id;\n          }\n        });\n        return echoResourceId;\n      }).then(() => {\n        return apiGateway.getMethodPromise({\n          httpMethod: 'GET',\n          resourceId: echoResourceId,\n          restApiId: apiId\n        });\n      }).then(methodConfig => {\n        expect(methodConfig.apiKeyRequired).toBeFalsy();\n      }).then(() => {\n        return apiGateway.getMethodPromise({\n          httpMethod: 'POST',\n          resourceId: echoResourceId,\n          restApiId: apiId\n        });\n      }).then(methodConfig => {\n        expect(methodConfig.apiKeyRequired).toBeTruthy();\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"sets authorizationType if requested","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":565,"updatePoint":{"line":565,"column":43,"index":20389},"code":"    it('sets authorizationType if requested', done => {\n      let echoResourceId;\n      apiRouteConfig.routes.echo.POST = {\n        authorizationType: 'AWS_IAM'\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return apiGateway.getResourcesPromise({\n          restApiId: apiId\n        });\n      }).then(resources => {\n        resources.items.forEach(resource => {\n          if (resource.path === '/echo') {\n            echoResourceId = resource.id;\n          }\n        });\n        return echoResourceId;\n      }).then(() => {\n        return apiGateway.getMethodPromise({\n          httpMethod: 'GET',\n          resourceId: echoResourceId,\n          restApiId: apiId\n        });\n      }).then(methodConfig => {\n        expect(methodConfig.authorizationType).toEqual('NONE');\n      }).then(() => {\n        return apiGateway.getMethodPromise({\n          httpMethod: 'POST',\n          resourceId: echoResourceId,\n          restApiId: apiId\n        });\n      }).then(methodConfig => {\n        expect(methodConfig.authorizationType).toEqual('AWS_IAM');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"sets caller credentials when invokeWithCredentials is true","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":599,"updatePoint":{"line":599,"column":66,"index":21587},"code":"    it('sets caller credentials when invokeWithCredentials is true', done => {\n      let echoResourceId;\n      apiRouteConfig.routes.echo.POST = {\n        invokeWithCredentials: true\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return apiGateway.getResourcesPromise({\n          restApiId: apiId\n        });\n      }).then(resources => {\n        resources.items.forEach(resource => {\n          if (resource.path === '/echo') {\n            echoResourceId = resource.id;\n          }\n        });\n        return echoResourceId;\n      }).then(() => {\n        return apiGateway.getIntegrationPromise({\n          httpMethod: 'GET',\n          resourceId: echoResourceId,\n          restApiId: apiId\n        });\n      }).then(integrationConfig => {\n        expect(integrationConfig.credentials).toBeUndefined();\n      }).then(() => {\n        return apiGateway.getIntegrationPromise({\n          httpMethod: 'POST',\n          resourceId: echoResourceId,\n          restApiId: apiId\n        });\n      }).then(integrationConfig => {\n        expect(integrationConfig.credentials).toEqual('arn:aws:iam::*:user/*');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"sets custom credentials when invokeWithCredentials is a string","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":633,"updatePoint":{"line":633,"column":70,"index":22820},"code":"    it('sets custom credentials when invokeWithCredentials is a string', done => {\n      const iam = new aws.IAM({\n        region: awsRegion\n      });\n      let echoResourceId, testCredentials;\n      iam.getUser().promise().then(data => {\n        testCredentials = data.User.Arn;\n        apiRouteConfig.routes.echo.POST = {\n          invokeWithCredentials: testCredentials\n        };\n        return underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion);\n      }).then(() => {\n        return apiGateway.getResourcesPromise({\n          restApiId: apiId\n        });\n      }).then(resources => {\n        resources.items.forEach(resource => {\n          if (resource.path === '/echo') {\n            echoResourceId = resource.id;\n          }\n        });\n        return echoResourceId;\n      }).then(() => {\n        return apiGateway.getIntegrationPromise({\n          httpMethod: 'GET',\n          resourceId: echoResourceId,\n          restApiId: apiId\n        });\n      }).then(integrationConfig => {\n        expect(integrationConfig.credentials).toBeUndefined();\n      }).then(() => {\n        return apiGateway.getIntegrationPromise({\n          httpMethod: 'POST',\n          resourceId: echoResourceId,\n          restApiId: apiId\n        });\n      }).then(integrationConfig => {\n        expect(integrationConfig.credentials).toEqual(testCredentials);\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"does not set credentials or authorizationType if invokeWithCredentials is invalid","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":673,"updatePoint":{"line":673,"column":89,"index":24271},"code":"    it('does not set credentials or authorizationType if invokeWithCredentials is invalid', done => {\n      let echoResourceId;\n      apiRouteConfig.routes.echo.POST = {\n        invokeWithCredentials: 'invalid_credentials'\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return apiGateway.getResourcesPromise({\n          restApiId: apiId\n        });\n      }).then(resources => {\n        resources.items.forEach(resource => {\n          if (resource.path === '/echo') {\n            echoResourceId = resource.id;\n          }\n        });\n        return echoResourceId;\n      }).then(() => {\n        return apiGateway.getIntegrationPromise({\n          httpMethod: 'POST',\n          resourceId: echoResourceId,\n          restApiId: apiId\n        });\n      }).then(integrationConfig => {\n        expect(integrationConfig.credentials).toBeUndefined();\n      }).then(() => {\n        return apiGateway.getMethodPromise({\n          httpMethod: 'POST',\n          resourceId: echoResourceId,\n          restApiId: apiId\n        });\n      }).then(methodConfig => {\n        expect(methodConfig.authorizationType).toEqual('NONE');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"creates multiple resources for the same api","suites":["rebuildWebApi","when working with a blank api","request parameter processing"],"line":707,"updatePoint":{"line":707,"column":51,"index":25477},"code":"    it('creates multiple resources for the same api', done => {\n      apiRouteConfig.routes['hello/res'] = {\n        POST: {}\n      };\n      apiRouteConfig.routes.hello = {\n        POST: {}\n      };\n      apiRouteConfig.routes[''] = {\n        GET: {}\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/echo');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n      }).then(() => {\n        return invoke(stageName + '/hello', {\n          method: 'POST'\n        });\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('POST');\n        expect(params.requestContext.resourcePath).toEqual('/hello');\n      }).then(() => {\n        return invoke(stageName + '/hello/res', {\n          method: 'POST'\n        });\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('POST');\n        expect(params.requestContext.resourcePath).toEqual('/hello/res');\n      }).then(() => {\n        return invoke(stageName + '/');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/');\n      }).then(done, e => {\n        console.log(JSON.stringify(e));\n        done.fail(e);\n      });\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"does not add any custom responses by default","suites":["rebuildWebApi","custom gateway response support"],"line":763,"updatePoint":{"line":763,"column":52,"index":27537},"code":"    it('does not add any custom responses by default', done => {\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => getCustomGatewayResponses()).then(result => expect(result).toEqual([])).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"adds new custom gateway responses if required","suites":["rebuildWebApi","custom gateway response support"],"line":766,"updatePoint":{"line":766,"column":53,"index":27825},"code":"    it('adds new custom gateway responses if required', done => {\n      apiRouteConfig.customResponses = {\n        'DEFAULT_4XX': {\n          statusCode: 411\n        }\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => getCustomGatewayResponses()).then(result => {\n        expect(result.length).toEqual(1);\n        expect(result[0].responseType).toEqual('DEFAULT_4XX');\n        expect(result[0].statusCode).toEqual('411');\n      }).then(() => {\n        return invoke(stageName + '/non-existing', {\n          resolveErrors: true\n        });\n      }).then(response => {\n        expect(response.statusCode).toEqual(411);\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"adds multiple custom gateway responses","suites":["rebuildWebApi","custom gateway response support"],"line":784,"updatePoint":{"line":784,"column":46,"index":28553},"code":"    it('adds multiple custom gateway responses', done => {\n      const sortByResponseType = function (a, b) {\n        if (a.responseType < b.responseType) {\n          return -1;\n        }\n        if (a.responseType > b.responseType) {\n          return 1;\n        }\n        return 0;\n      };\n      apiRouteConfig.customResponses = {\n        'DEFAULT_4XX': {\n          statusCode: 411\n        },\n        'DEFAULT_5XX': {\n          statusCode: 511\n        }\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => getCustomGatewayResponses()).then(result => {\n        result.sort(sortByResponseType);\n        expect(result.length).toEqual(2);\n        expect(result[0].responseType).toEqual('DEFAULT_4XX');\n        expect(result[0].statusCode).toEqual('411');\n        expect(result[1].responseType).toEqual('DEFAULT_5XX');\n        expect(result[1].statusCode).toEqual('511');\n      }).then(() => {\n        return invoke(stageName + '/non-existing', {\n          resolveErrors: true\n        });\n      }).then(response => {\n        expect(response.statusCode).toEqual(411);\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"adds response parameters","suites":["rebuildWebApi","custom gateway response support"],"line":817,"updatePoint":{"line":817,"column":32,"index":29719},"code":"    it('adds response parameters', done => {\n      apiRouteConfig.customResponses = {\n        'DEFAULT_4XX': {\n          responseParameters: {\n            'gatewayresponse.header.x-response-claudia': '\\'yes\\'',\n            'gatewayresponse.header.x-name': 'method.request.header.name',\n            'gatewayresponse.header.Access-Control-Allow-Origin': '\\'a.b.c\\'',\n            'gatewayresponse.header.Content-Type': '\\'application/json\\''\n          },\n          statusCode: 411,\n          responseTemplates: {\n            'application/json': '{\"custom\": true, \"message\":$context.error.messageString}'\n          }\n        }\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => invoke(stageName + '/non-existing?key=tom', {\n        headers: {\n          'name': 'tom'\n        },\n        resolveErrors: true\n      })).then(response => {\n        const bodyJson = JSON.parse(response.body);\n        expect(bodyJson.custom).toEqual(true);\n        expect(bodyJson.message).toEqual('Missing Authentication Token');\n        expect(response.statusCode).toEqual(411);\n        expect(response.headers['content-type']).toEqual('application/json');\n        expect(response.headers['access-control-allow-origin']).toEqual('a.b.c');\n        expect(response.headers['x-response-claudia']).toEqual('yes');\n        expect(response.headers['x-name']).toEqual('tom');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"works with a headers shortcut","suites":["rebuildWebApi","custom gateway response support"],"line":848,"updatePoint":{"line":848,"column":37,"index":31185},"code":"    it('works with a headers shortcut', done => {\n      apiRouteConfig.customResponses = {\n        'DEFAULT_4XX': {\n          headers: {\n            'x-response-claudia': 'yes',\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': 'a.b.c'\n          }\n        }\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => invoke(stageName + '/non-existing', {\n        resolveErrors: true\n      })).then(response => {\n        expect(response.headers['content-type']).toEqual('application/json');\n        expect(response.headers['access-control-allow-origin']).toEqual('a.b.c');\n        expect(response.headers['x-response-claudia']).toEqual('yes');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"can combine responseParameters and headers","suites":["rebuildWebApi","custom gateway response support"],"line":866,"updatePoint":{"line":866,"column":50,"index":31991},"code":"    it('can combine responseParameters and headers', done => {\n      apiRouteConfig.customResponses = {\n        'DEFAULT_4XX': {\n          responseParameters: {\n            'gatewayresponse.header.x-response-claudia': '\\'yes\\'',\n            'gatewayresponse.header.x-name': 'method.request.header.name'\n          },\n          headers: {\n            'x-response-claudia': 'no',\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': 'a.b.c'\n          },\n          statusCode: 411\n        }\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => invoke(stageName + '/non-existing?key=tom', {\n        headers: {\n          'name': 'tom'\n        },\n        resolveErrors: true\n      })).then(response => {\n        expect(response.headers['content-type']).toEqual('application/json');\n        expect(response.headers['access-control-allow-origin']).toEqual('a.b.c');\n        expect(response.headers['x-response-claudia']).toEqual('no');\n        expect(response.headers['x-name']).toEqual('tom');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"does not install any binary media support to an API if no specific types are requested","suites":["rebuildWebApi","binary media type support"],"line":907,"updatePoint":{"line":907,"column":94,"index":33521},"code":"    it('does not install any binary media support to an API if no specific types are requested', done => {\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => apiGateway.getRestApiPromise({\n        restApiId: apiId\n      })).then(restApiConfig => {\n        expect(restApiConfig.binaryMediaTypes).toBeUndefined();\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"installs configured binary media type support if an API contains binaryMediaTypes","suites":["rebuildWebApi","binary media type support"],"line":914,"updatePoint":{"line":914,"column":89,"index":33936},"code":"    it('installs configured binary media type support if an API contains binaryMediaTypes', done => {\n      apiRouteConfig.binaryMediaTypes = ['application/x-markdown', 'image/tiff'];\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => apiGateway.getRestApiPromise({\n        restApiId: apiId\n      })).then(restApiConfig => {\n        expect(restApiConfig.binaryMediaTypes).toEqual(['application/x-markdown', 'image/tiff']);\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"does not add any types if binaryMediaTypes is an empty array","suites":["rebuildWebApi","binary media type support"],"line":922,"updatePoint":{"line":922,"column":68,"index":34446},"code":"    it('does not add any types if binaryMediaTypes is an empty array', done => {\n      apiRouteConfig.binaryMediaTypes = [];\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => apiGateway.getRestApiPromise({\n        restApiId: apiId\n      })).then(restApiConfig => {\n        expect(restApiConfig.binaryMediaTypes).toBeUndefined();\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"does not set up base64 encoding or decoding by default","suites":["rebuildWebApi","binary media type support"],"line":930,"updatePoint":{"line":930,"column":62,"index":34878},"code":"    it('does not set up base64 encoding or decoding by default', done => {\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => apiGateway.getResourcesPromise({\n        restApiId: apiId\n      })).then(resources => resources.items.find(resource => resource.path === '/echo').id).then(resourceId => apiGateway.getMethodPromise({\n        restApiId: apiId,\n        httpMethod: 'POST',\n        resourceId: resourceId\n      })).then(method => {\n        expect(method.methodIntegration.passthroughBehavior).toEqual('WHEN_NO_MATCH');\n        expect(method.methodIntegration.contentHandling).toBeUndefined();\n        expect(method.methodIntegration.integrationResponses['200'].contentHandling).toBeUndefined();\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"allows the api configuration to override set content handling with requestContentHandling","suites":["rebuildWebApi","binary media type support"],"line":943,"updatePoint":{"line":943,"column":97,"index":35721},"code":"    it('allows the api configuration to override set content handling with requestContentHandling', done => {\n      apiRouteConfig.routes.echo.POST.requestContentHandling = 'CONVERT_TO_BINARY';\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => apiGateway.getResourcesPromise({\n        restApiId: apiId\n      })).then(resources => resources.items.find(resource => resource.path === '/echo').id).then(resourceId => apiGateway.getMethodPromise({\n        restApiId: apiId,\n        httpMethod: 'POST',\n        resourceId: resourceId\n      })).then(method => {\n        expect(method.methodIntegration.contentHandling).toEqual('CONVERT_TO_BINARY');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"allows the api configuration to set response content handling with responseContentHandling","suites":["rebuildWebApi","binary media type support"],"line":955,"updatePoint":{"line":955,"column":98,"index":36473},"code":"    it('allows the api configuration to set response content handling with responseContentHandling', done => {\n      apiRouteConfig.routes.echo.POST.success = {\n        contentHandling: 'CONVERT_TO_TEXT'\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => apiGateway.getResourcesPromise({\n        restApiId: apiId\n      })).then(resources => resources.items.find(resource => resource.path === '/echo').id).then(resourceId => apiGateway.getMethodPromise({\n        restApiId: apiId,\n        httpMethod: 'POST',\n        resourceId: resourceId\n      })).then(method => {\n        expect(method.methodIntegration.integrationResponses['200'].contentHandling).toEqual('CONVERT_TO_TEXT');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"converts recognised binary content types into base64 text","suites":["rebuildWebApi","binary media type support"],"line":969,"updatePoint":{"line":969,"column":65,"index":37236},"code":"    it('converts recognised binary content types into base64 text', done => {\n      apiRouteConfig.binaryMediaTypes = ['application/octet-stream', 'image/png'];\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/echo', {\n          headers: {\n            'content-type': 'application/octet-stream',\n            'result-content-type': 'text/plain'\n          },\n          body: 'Hello World',\n          method: 'POST'\n        });\n      }).then(contents => {\n        expect(contents.body).toEqual('SGVsbG8gV29ybGQ=');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"converts recognised binary content types into base64 when requestContentHandling is CONVERT_TO_TEXT","suites":["rebuildWebApi","binary media type support"],"line":984,"updatePoint":{"line":984,"column":107,"index":37938},"code":"    it('converts recognised binary content types into base64 when requestContentHandling is CONVERT_TO_TEXT', done => {\n      apiRouteConfig.binaryMediaTypes = ['application/octet-stream', 'image/png'];\n      apiRouteConfig.routes.echo.POST.requestContentHandling = 'CONVERT_TO_TEXT';\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/echo', {\n          headers: {\n            'content-type': 'application/octet-stream',\n            'result-content-type': 'text/plain'\n          },\n          body: 'Hello World',\n          method: 'POST'\n        });\n      }).then(contents => {\n        expect(contents.body).toEqual('SGVsbG8gV29ybGQ=');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"does not convert if content type is not recognised as binary","suites":["rebuildWebApi","binary media type support"],"line":1000,"updatePoint":{"line":1000,"column":68,"index":38683},"code":"    it('does not convert if content type is not recognised as binary', done => {\n      apiRouteConfig.binaryMediaTypes = ['application/x-markdown', 'image/tiff'];\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/echo', {\n          headers: {\n            'content-type': 'application/octet-stream',\n            'result-content-type': 'text/plain'\n          },\n          body: 'Hello World',\n          method: 'POST'\n        });\n      }).then(contents => {\n        expect(contents.body).toEqual('Hello World');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"does not convert when requestContentHandling is set to CONVERT_TO_BINARY","suites":["rebuildWebApi","binary media type support"],"line":1015,"updatePoint":{"line":1015,"column":80,"index":39352},"code":"    it('does not convert when requestContentHandling is set to CONVERT_TO_BINARY', done => {\n      apiRouteConfig.binaryMediaTypes = ['application/octet-stream', 'image/png'];\n      apiRouteConfig.routes.echo.POST.requestContentHandling = 'CONVERT_TO_BINARY';\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/echo', {\n          headers: {\n            'content-type': 'application/octet-stream',\n            'result-content-type': 'text/plain'\n          },\n          body: 'Hello World',\n          method: 'POST'\n        });\n      }).then(contents => {\n        expect(contents.body).toEqual('SGVsbG8gV29ybGQ=');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"sets up the API to convert base64 results to binary","suites":["rebuildWebApi","binary media type support"],"line":1031,"updatePoint":{"line":1031,"column":59,"index":40090},"code":"    it('sets up the API to convert base64 results to binary', done => {\n      apiRouteConfig.binaryMediaTypes = ['application/octet-stream', 'image/png'];\n      apiRouteConfig.routes.echo.POST.success = {\n        contentHandling: 'CONVERT_TO_BINARY'\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/echo', {\n          headers: {\n            'Content-Type': 'text/plain',\n            'result-encoded': 'true',\n            'accept': 'image/png',\n            'result-content-type': 'image/png'\n          },\n          body: 'SGVsbG8gV29ybGQ=',\n          method: 'POST'\n        });\n      }).then(contents => {\n        expect(contents.body).toEqual('Hello World');\n        expect(contents.headers['content-type']).toEqual('image/png');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"does not convert to binary unless the encoding flag is set","suites":["rebuildWebApi","binary media type support"],"line":1052,"updatePoint":{"line":1052,"column":66,"index":40984},"code":"    it('does not convert to binary unless the encoding flag is set', done => {\n      apiRouteConfig.binaryMediaTypes = ['application/octet-stream', 'image/png'];\n      apiRouteConfig.routes.echo.POST.success = {\n        contentHandling: 'CONVERT_TO_BINARY'\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/echo', {\n          headers: {\n            'Content-Type': 'text/plain',\n            'accept': 'image/png',\n            'result-content-type': 'image/png'\n          },\n          body: 'SGVsbG8gV29ybGQ=',\n          method: 'POST'\n        });\n      }).then(contents => {\n        expect(contents.body).toEqual('SGVsbG8gV29ybGQ=');\n        expect(contents.headers['content-type']).toEqual('image/png');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"assigns authorizers by name","suites":["rebuildWebApi","custom authorizers"],"line":1111,"updatePoint":{"line":1111,"column":35,"index":43115},"code":"    it('assigns authorizers by name', done => {\n      const authorizerIds = {};\n      let echoResourceId;\n      apiRouteConfig.authorizers = {\n        first: {\n          lambdaName: authorizerLambdaName,\n          headerName: 'Authorization'\n        },\n        second: {\n          lambdaName: authorizerLambdaName,\n          headerName: 'UserId'\n        }\n      };\n      apiRouteConfig.routes.echo.POST = {\n        customAuthorizer: 'second'\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return apiGateway.getResourcesPromise({\n          restApiId: apiId\n        });\n      }).then(resources => {\n        resources.items.forEach(resource => {\n          if (resource.path === '/echo') {\n            echoResourceId = resource.id;\n          }\n        });\n        return echoResourceId;\n      }).then(() => {\n        return apiGateway.getAuthorizersPromise({\n          restApiId: apiId\n        });\n      }).then(authorizers => {\n        authorizerIds[authorizers.items[0].name] = authorizers.items[0].id;\n        authorizerIds[authorizers.items[1].name] = authorizers.items[1].id;\n      }).then(() => {\n        return apiGateway.getMethodPromise({\n          httpMethod: 'GET',\n          resourceId: echoResourceId,\n          restApiId: apiId\n        });\n      }).then(methodConfig => {\n        expect(methodConfig.authorizationType).toEqual('NONE');\n        expect(methodConfig.authorizerId).toBeUndefined();\n      }).then(() => {\n        return apiGateway.getMethodPromise({\n          httpMethod: 'POST',\n          resourceId: echoResourceId,\n          restApiId: apiId\n        });\n      }).then(methodConfig => {\n        expect(methodConfig.authorizationType).toEqual('CUSTOM');\n        expect(methodConfig.authorizerId).toEqual(authorizerIds.second);\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"creates OPTIONS handlers for CORS","suites":["rebuildWebApi","CORS handling","without custom CORS options"],"line":1171,"updatePoint":{"line":1171,"column":43,"index":45234},"code":"      it('creates OPTIONS handlers for CORS', done => {\n        apiRouteConfig.routes.hello = {\n          POST: {},\n          GET: {}\n        };\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(stageName + '/echo', {\n            method: 'OPTIONS'\n          });\n        }).then(contents => {\n          expect(contents.headers['access-control-allow-methods']).toEqual('OPTIONS,GET');\n          expect(contents.headers['access-control-allow-headers']).toEqual('Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token');\n          expect(contents.headers['access-control-allow-origin']).toEqual('*');\n          expect(contents.headers['access-control-allow-credentials']).toEqual('true');\n          expect(contents.headers['access-control-max-age']).toBeUndefined();\n        }).then(() => {\n          return invoke(stageName + '/hello', {\n            method: 'OPTIONS'\n          });\n        }).then(contents => {\n          expect(contents.headers['access-control-allow-methods']).toEqual('OPTIONS,GET,POST');\n          expect(contents.headers['access-control-allow-headers']).toEqual('Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token');\n          expect(contents.headers['access-control-allow-origin']).toEqual('*');\n          expect(contents.headers['access-control-allow-credentials']).toEqual('true');\n          expect(contents.headers['access-control-max-age']).toBeUndefined();\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"creates a MOCK integration for performance","suites":["rebuildWebApi","CORS handling","without custom CORS options"],"line":1198,"updatePoint":{"line":1198,"column":52,"index":46797},"code":"      it('creates a MOCK integration for performance', done => {\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => getResourceForPath('/echo')).then(resourceId => {\n          return apiGateway.getIntegrationPromise({\n            httpMethod: 'OPTIONS',\n            resourceId: resourceId,\n            restApiId: apiId\n          });\n        }).then(response => {\n          expect(response.type).toEqual('MOCK');\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"can create CORS handlers for APIs with param paths -- regression check","suites":["rebuildWebApi","CORS handling","without custom CORS options"],"line":1209,"updatePoint":{"line":1209,"column":80,"index":47350},"code":"      it('can create CORS handlers for APIs with param paths -- regression check', done => {\n        apiRouteConfig.routes['{owner}'] = {\n          GET: {}\n        };\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(stageName + '/echo', {\n            method: 'OPTIONS'\n          });\n        }).then(contents => {\n          expect(contents.headers['access-control-allow-methods']).toEqual('OPTIONS,GET');\n          expect(contents.headers['access-control-allow-headers']).toEqual('Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token');\n          expect(contents.headers['access-control-allow-origin']).toEqual('*');\n          expect(contents.headers['access-control-allow-credentials']).toEqual('true');\n          expect(contents.headers['access-control-max-age']).toBeUndefined();\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"allows a custom OPTIONS handler to take over execution completely for CORS","suites":["rebuildWebApi","CORS handling","without custom CORS options"],"line":1225,"updatePoint":{"line":1225,"column":84,"index":48294},"code":"      it('allows a custom OPTIONS handler to take over execution completely for CORS', done => {\n        apiRouteConfig.routes.manual = {\n          POST: {},\n          OPTIONS: {}\n        };\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => getResourceForPath('/manual')).then(resourceId => {\n          return apiGateway.getIntegrationPromise({\n            httpMethod: 'OPTIONS',\n            resourceId: resourceId,\n            restApiId: apiId\n          });\n        }).then(response => {\n          expect(response.type).toEqual('AWS_PROXY');\n        }).then(() => {\n          return invoke(stageName + '/manual', {\n            method: 'OPTIONS',\n            headers: {\n              'content-type': 'text/plain'\n            },\n            body: JSON.stringify({\n              'Access-Control-Allow-Methods': 'GET,OPTIONS',\n              'Access-Control-Allow-Headers': 'X-Custom-Header,X-Api-Key',\n              'Access-Control-Allow-Origin': 'custom-origin',\n              'Access-Control-Allow-credentials': 'c1-false'\n            })\n          });\n        }).then(contents => {\n          expect(contents.headers['access-control-allow-methods']).toEqual('GET,OPTIONS');\n          expect(contents.headers['access-control-allow-headers']).toEqual('X-Custom-Header,X-Api-Key');\n          expect(contents.headers['access-control-allow-origin']).toEqual('custom-origin');\n          expect(contents.headers['access-control-allow-credentials']).toEqual('c1-false');\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"uses the headers for OPTIONS handlers","suites":["rebuildWebApi","CORS handling","when corsHeaders are set"],"line":1260,"updatePoint":{"line":1260,"column":47,"index":49890},"code":"      it('uses the headers for OPTIONS handlers', done => {\n        apiRouteConfig.corsHeaders = 'X-Custom-Header,X-Api-Key';\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(stageName + '/echo', {\n            method: 'OPTIONS'\n          });\n        }).then(contents => {\n          expect(contents.headers['access-control-allow-headers']).toEqual('X-Custom-Header,X-Api-Key');\n          expect(contents.headers['access-control-allow-origin']).toEqual('*');\n          expect(contents.headers['access-control-allow-credentials']).toEqual('true');\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"uses the headers for OPTIONS handlers even when blank string","suites":["rebuildWebApi","CORS handling","when corsHeaders are set"],"line":1272,"updatePoint":{"line":1272,"column":70,"index":50600},"code":"      it('uses the headers for OPTIONS handlers even when blank string', done => {\n        apiRouteConfig.corsHeaders = '';\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(stageName + '/echo', {\n            method: 'OPTIONS'\n          });\n        }).then(contents => {\n          expect(contents.headers['access-control-allow-headers']).toBeUndefined();\n          expect(contents.headers['access-control-allow-origin']).toEqual('*');\n          expect(contents.headers['access-control-allow-credentials']).toEqual('true');\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"does not create any OPTIONS integration by default","suites":["rebuildWebApi","CORS handling","when corsHandlers are set to false"],"line":1289,"updatePoint":{"line":1289,"column":60,"index":51401},"code":"      it('does not create any OPTIONS integration by default', done => {\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => getResourceForPath('/echo')).then(resourceId => {\n          return apiGateway.getIntegrationPromise({\n            httpMethod: 'OPTIONS',\n            resourceId: resourceId,\n            restApiId: apiId\n          }).then(r => {\n            expect(r).toBeUndefined();\n            done.fail('OPTIONS resource created');\n          }).catch(e => {\n            expect(e.code).toEqual('NotFoundException');\n          });\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"allows the API to set up its own OPTIONS for specific resources","suites":["rebuildWebApi","CORS handling","when corsHandlers are set to false"],"line":1303,"updatePoint":{"line":1303,"column":73,"index":52066},"code":"      it('allows the API to set up its own OPTIONS for specific resources', done => {\n        apiRouteConfig.routes.manual = {\n          GET: {},\n          OPTIONS: {}\n        };\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => getResourceForPath('/manual')).then(resourceId => apiGateway.getIntegrationPromise({\n          httpMethod: 'OPTIONS',\n          resourceId: resourceId,\n          restApiId: apiId\n        })).then(response => expect(response.type).toEqual('AWS_PROXY')).then(() => {\n          return invoke(stageName + '/manual', {\n            method: 'OPTIONS',\n            headers: {\n              'content-type': 'text/plain'\n            },\n            body: JSON.stringify({\n              'Access-Control-Allow-Methods': 'GET,OPTIONS',\n              'Access-Control-Allow-Headers': 'X-Custom-Header,X-Api-Key',\n              'Access-Control-Allow-Origin': 'custom-origin',\n              'Access-Control-Allow-credentials': 'c1-false'\n            })\n          });\n        }).then(contents => {\n          expect(contents.headers['access-control-allow-methods']).toEqual('GET,OPTIONS');\n          expect(contents.headers['access-control-allow-headers']).toEqual('X-Custom-Header,X-Api-Key');\n          expect(contents.headers['access-control-allow-origin']).toEqual('custom-origin');\n          expect(contents.headers['access-control-allow-credentials']).toEqual('c1-false');\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"routes the OPTIONS handler to Lambda","suites":["rebuildWebApi","CORS handling","when corsHandlers are set to true"],"line":1337,"updatePoint":{"line":1337,"column":46,"index":53687},"code":"      it('routes the OPTIONS handler to Lambda', done => {\n        apiRouteConfig.routes.hello = {\n          POST: {},\n          GET: {}\n        };\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => getResourceForPath('/echo')).then(resourceId => apiGateway.getIntegrationPromise({\n          httpMethod: 'OPTIONS',\n          resourceId: resourceId,\n          restApiId: apiId\n        })).then(response => expect(response.type).toEqual('AWS_PROXY')).then(() => {\n          return invoke(stageName + '/echo', {\n            method: 'OPTIONS',\n            headers: {\n              'content-type': 'text/plain'\n            },\n            body: JSON.stringify({\n              'Access-Control-Allow-Methods': 'GET,OPTIONS',\n              'Access-Control-Allow-Headers': 'X-Custom-Header,X-Api-Key',\n              'Access-Control-Allow-Origin': 'custom-origin',\n              'Access-Control-Allow-credentials': 'c1-false'\n            })\n          });\n        }).then(contents => {\n          expect(contents.headers['access-control-allow-methods']).toEqual('GET,OPTIONS');\n          expect(contents.headers['access-control-allow-headers']).toEqual('X-Custom-Header,X-Api-Key');\n          expect(contents.headers['access-control-allow-origin']).toEqual('custom-origin');\n          expect(contents.headers['access-control-allow-credentials']).toEqual('c1-false');\n        }).then(done, e => {\n          console.log(e);\n          done.fail();\n        });\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"creates a MOCK integration for the fixed domain","suites":["rebuildWebApi","CORS handling","when corsHandlers are set to a string"],"line":1374,"updatePoint":{"line":1374,"column":57,"index":55381},"code":"      it('creates a MOCK integration for the fixed domain', done => {\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => getResourceForPath('/echo')).then(resourceId => {\n          return apiGateway.getIntegrationPromise({\n            httpMethod: 'OPTIONS',\n            resourceId: resourceId,\n            restApiId: apiId\n          });\n        }).then(response => {\n          expect(response.type).toEqual('MOCK');\n        }).then(() => {\n          return invoke(stageName + '/echo', {\n            method: 'OPTIONS'\n          });\n        }).then(contents => {\n          expect(contents.headers['access-control-allow-methods']).toEqual('OPTIONS,GET');\n          expect(contents.headers['access-control-allow-headers']).toEqual('Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token');\n          expect(contents.headers['access-control-allow-origin']).toEqual('api.test.com');\n          expect(contents.headers['access-control-allow-credentials']).toEqual('true');\n          expect(contents.headers['access-control-max-age']).toBeUndefined();\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"uses the headers for OPTIONS handlers","suites":["rebuildWebApi","CORS handling","when corsMaxAge is set"],"line":1400,"updatePoint":{"line":1400,"column":47,"index":56672},"code":"      it('uses the headers for OPTIONS handlers', done => {\n        underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n          return invoke(stageName + '/echo', {\n            method: 'OPTIONS'\n          });\n        }).then(contents => {\n          expect(contents.headers['access-control-allow-origin']).toEqual('*');\n          expect(contents.headers['access-control-allow-credentials']).toEqual('true');\n          expect(contents.headers['access-control-max-age']).toEqual('10');\n        }).then(done, done.fail);\n      });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"removes all previous custom gateway responses","suites":["rebuildWebApi","when working with an existing api"],"line":1435,"updatePoint":{"line":1435,"column":53,"index":58000},"code":"    it('removes all previous custom gateway responses', done => {\n      apiGateway.putGatewayResponsePromise({\n        restApiId: apiId,\n        responseType: 'DEFAULT_4XX',\n        statusCode: '411'\n      }).then(() => underTest(genericLambdaName, stageName, apiId, {\n        version: 2,\n        routes: {\n          extra: {\n            GET: {}\n          }\n        }\n      }, ownerAccount, awsPartition, awsRegion)).then(() => getCustomGatewayResponses()).then(result => expect(result).toEqual([])).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"adds new custom gateway responses","suites":["rebuildWebApi","when working with an existing api"],"line":1449,"updatePoint":{"line":1449,"column":41,"index":58519},"code":"    it('adds new custom gateway responses', done => {\n      underTest(genericLambdaName, stageName, apiId, {\n        version: 3,\n        routes: {\n          extra: {\n            GET: {}\n          }\n        },\n        customResponses: {\n          'DEFAULT_4XX': {\n            statusCode: 411\n          }\n        }\n      }, ownerAccount, awsPartition, awsRegion).then(() => getCustomGatewayResponses()).then(result => expect(result.map(r => r.responseType)).toEqual(['DEFAULT_4XX'])).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"adds extra paths from the new definition","suites":["rebuildWebApi","when working with an existing api"],"line":1464,"updatePoint":{"line":1464,"column":48,"index":59039},"code":"    it('adds extra paths from the new definition', done => {\n      underTest(genericLambdaName, stageName, apiId, {\n        version: 2,\n        routes: {\n          extra: {\n            GET: {}\n          }\n        }\n      }, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/extra');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/extra');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"adds subresources mapped with intermediate paths","suites":["rebuildWebApi","when working with an existing api"],"line":1480,"updatePoint":{"line":1480,"column":56,"index":59621},"code":"    it('adds subresources mapped with intermediate paths', done => {\n      underTest(genericLambdaName, stageName, apiId, {\n        version: 2,\n        routes: {\n          'sub/map2/map3': {\n            GET: {}\n          }\n        }\n      }, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/sub/map2/map3');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/sub/map2/map3');\n      }).then(done, e => {\n        console.log(JSON.stringify(e));\n        done.fail(e);\n      });\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"adds extra methods to an existing path","suites":["rebuildWebApi","when working with an existing api"],"line":1499,"updatePoint":{"line":1499,"column":46,"index":60286},"code":"    it('adds extra methods to an existing path', done => {\n      apiRouteConfig.routes.echo.POST = {};\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/echo', {\n          method: 'POST'\n        });\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('POST');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"replaces root path handlers","suites":["rebuildWebApi","when working with an existing api"],"line":1511,"updatePoint":{"line":1511,"column":35,"index":60834},"code":"    it('replaces root path handlers', done => {\n      apiRouteConfig.routes[''] = {\n        POST: {},\n        GET: {}\n      };\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion).then(() => {\n        return invoke(stageName + '/', {\n          method: 'POST'\n        });\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('POST');\n        expect(params.requestContext.resourcePath).toEqual('/');\n      }).then(() => {\n        return invoke(stageName + '/', {\n          method: 'GET'\n        });\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"preserves old stage variables","suites":["rebuildWebApi","when working with an existing api"],"line":1534,"updatePoint":{"line":1534,"column":37,"index":61718},"code":"    it('preserves old stage variables', done => {\n      apiGateway.createDeploymentPromise({\n        restApiId: apiId,\n        stageName: stageName,\n        variables: {\n          lambdaVersion: stageName,\n          authKey: 'abs123',\n          authBucket: 'bucket123'\n        }\n      }).then(() => {\n        return underTest(genericLambdaName, stageName, apiId, {\n          corsHandlers: false,\n          version: 2,\n          routes: {\n            extra: {\n              GET: {}\n            }\n          }\n        }, ownerAccount, awsPartition, awsRegion);\n      }).then(() => {\n        return invoke(stageName + '/extra');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: stageName,\n          authKey: 'abs123',\n          authBucket: 'bucket123'\n        });\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"sets no request parameters if path params are not present","suites":["rebuildWebApi","setting request parameters for caching"],"line":1591,"updatePoint":{"line":1591,"column":65,"index":63620},"code":"    it('sets no request parameters if path params are not present', done => {\n      testMethodConfig({\n        '/echo': {\n          GET: {}\n        }\n      }, '/echo', 'GET').then(result => {\n        expect(result.requestParameters).toBeFalsy();\n        expect(result.methodIntegration.cacheKeyParameters).toEqual([]);\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"allows setting request parameters with config","suites":["rebuildWebApi","setting request parameters for caching"],"line":1601,"updatePoint":{"line":1601,"column":53,"index":63967},"code":"    it('allows setting request parameters with config', done => {\n      testMethodConfig({\n        '/echo': {\n          GET: {\n            requestParameters: {\n              querystring: {\n                name: true,\n                title: false\n              },\n              header: {\n                'x-bz': true\n              }\n            }\n          }\n        }\n      }, '/echo', 'GET').then(result => {\n        expect(result.requestParameters).toEqual({\n          'method.request.querystring.name': true,\n          'method.request.querystring.title': false,\n          'method.request.header.x-bz': true\n        });\n        expect(result.methodIntegration.cacheKeyParameters.sort()).toEqual(['method.request.querystring.name', 'method.request.querystring.title', 'method.request.header.x-bz'].sort());\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"sets request parameters for paths automatically","suites":["rebuildWebApi","setting request parameters for caching"],"line":1625,"updatePoint":{"line":1625,"column":55,"index":64817},"code":"    it('sets request parameters for paths automatically', done => {\n      testMethodConfig({\n        '/echo/{name}': {\n          GET: {}\n        }\n      }, '/echo/{name}', 'GET').then(result => {\n        expect(result.requestParameters).toEqual({\n          'method.request.path.name': true\n        });\n        expect(result.methodIntegration.cacheKeyParameters).toEqual(['method.request.path.name']);\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"appends additional parameters to path params","suites":["rebuildWebApi","setting request parameters for caching"],"line":1637,"updatePoint":{"line":1637,"column":52,"index":65255},"code":"    it('appends additional parameters to path params', done => {\n      testMethodConfig({\n        '/echo/{name}': {\n          GET: {\n            requestParameters: {\n              querystring: {\n                title: true\n              }\n            }\n          }\n        }\n      }, '/echo/{name}', 'GET').then(result => {\n        expect(result.requestParameters).toEqual({\n          'method.request.path.name': true,\n          'method.request.querystring.title': true\n        });\n        expect(result.methodIntegration.cacheKeyParameters.sort()).toEqual(['method.request.path.name', 'method.request.querystring.title'].sort());\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"does not sets parameters on options","suites":["rebuildWebApi","setting request parameters for caching"],"line":1656,"updatePoint":{"line":1656,"column":43,"index":65917},"code":"    it('does not sets parameters on options', done => {\n      testMethodConfig({\n        '/echo/{name}': {\n          GET: {\n            querystring: {\n              title: true\n            }\n          }\n        }\n      }, '/echo/{name}', 'OPTIONS').then(result => {\n        expect(result.requestParameters).toBeFalsy();\n        expect(result.methodIntegration.cacheKeyParameters).toEqual([]);\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"logs execution","suites":["rebuildWebApi","logging"],"line":1677,"updatePoint":{"line":1677,"column":22,"index":66535},"code":"    it('logs execution', done => {\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion, logger).then(() => {\n        expect(logger.getApiCallLogForService('apigateway', true)).toEqual(['apigateway.putRestApi', 'apigateway.setupRequestListeners', 'apigateway.setAcceptHeader', 'apigateway.getResources', 'apigateway.createResource', 'apigateway.putMethod', 'apigateway.putIntegration', 'apigateway.putMethodResponse', 'apigateway.putIntegrationResponse', 'apigateway.createDeployment']);\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"stores the configuration hash in a stage variable","suites":["rebuildWebApi","configuration caching"],"line":1689,"updatePoint":{"line":1689,"column":57,"index":67384},"code":"    it('stores the configuration hash in a stage variable', done => {\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion, logger, 'configHash').then(() => {\n        return invoke(stageName + '/echo');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: stageName,\n          configHash: '-EDMbG0OcNlCZzstFc2jH6rlpI1YDlNYc9YGGxUFuXo='\n        });\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"runs through the whole deployment if there was no previous stage by this name","suites":["rebuildWebApi","configuration caching"],"line":1700,"updatePoint":{"line":1700,"column":85,"index":67952},"code":"    it('runs through the whole deployment if there was no previous stage by this name', done => {\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion, undefined, 'configHash').then(() => {\n        return underTest(genericLambdaName, 'latest', apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion, logger, 'configHash');\n      }).then(result => {\n        expect(result.cacheReused).toBeFalsy();\n        expect(logger.getApiCallLogForService('apigateway', true)).toContain('apigateway.createResource');\n        expect(logger.getStageLog(true)).not.toContain('Reusing cached API configuration');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"runs through the whole deployment if there was no config hash in the previous stage with the same name","suites":["rebuildWebApi","configuration caching"],"line":1709,"updatePoint":{"line":1709,"column":110,"index":68673},"code":"    it('runs through the whole deployment if there was no config hash in the previous stage with the same name', done => {\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion, undefined).then(() => {\n        return underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion, logger, 'configHash');\n      }).then(result => {\n        expect(result.cacheReused).toBeFalsy();\n        expect(logger.getApiCallLogForService('apigateway', true)).toContain('apigateway.createResource');\n        expect(logger.getStageLog(true)).not.toContain('Reusing cached API configuration');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"runs through the whole deployment if there was a previous config hash but was different","suites":["rebuildWebApi","configuration caching"],"line":1718,"updatePoint":{"line":1718,"column":95,"index":69366},"code":"    it('runs through the whole deployment if there was a previous config hash but was different', done => {\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion, undefined, 'configHash').then(() => {\n        apiRouteConfig.routes.echo.POST = {};\n        return underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion, logger, 'configHash');\n      }).then(result => {\n        expect(result.cacheReused).toBeFalsy();\n        expect(logger.getApiCallLogForService('apigateway', true)).toContain('apigateway.createResource');\n        expect(logger.getStageLog()).not.toContain('Reusing cached API configuration');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"skips deleting and creating resources if there was a previous stage with the same name and config hash","suites":["rebuildWebApi","configuration caching"],"line":1728,"updatePoint":{"line":1728,"column":110,"index":70130},"code":"    it('skips deleting and creating resources if there was a previous stage with the same name and config hash', done => {\n      underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion, undefined, 'configHash').then(() => {\n        return underTest(genericLambdaName, stageName, apiId, apiRouteConfig, ownerAccount, awsPartition, awsRegion, logger, 'configHash');\n      }).then(result => {\n        expect(result.cacheReused).toBeTruthy();\n        expect(logger.getApiCallLogForService('apigateway', true)).toEqual(['apigateway.getStage', 'apigateway.setupRequestListeners', 'apigateway.setAcceptHeader']);\n        expect(logger.getStageLog(true)).toContain('Reusing cached API configuration');\n      }).then(done, done.fail);\n    });","file":"rebuild-web-api-spec.js","skipped":false,"dir":"spec"},{"name":"does nothing when authorizers are not defined","suites":["registerAuthorizers"],"line":93,"updatePoint":{"line":93,"column":51,"index":3354},"code":"  it('does nothing when authorizers are not defined', done => {\n    underTest(false, apiId, ownerId, awsPartition, awsRegion).then(createResult => expect(createResult).toEqual({})).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => expect(authorizers.items).toEqual([])).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"creates header-based authorizers","suites":["registerAuthorizers"],"line":98,"updatePoint":{"line":98,"column":38,"index":3687},"code":"  it('creates header-based authorizers', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        headerName: 'Authorization'\n      }\n    };\n    let result;\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(createResult => {\n      result = createResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      expect(authorizers.items.length).toEqual(1);\n      expect(result.first).toEqual(authorizers.items[0].id);\n      expect(authorizers.items[0].name).toEqual('first');\n      expect(authorizers.items[0].type).toEqual('TOKEN');\n      expect(authorizers.items[0].authorizerCredentials).toBeFalsy();\n      expect(authorizers.items[0].authorizerResultTtlInSeconds).toBeFalsy();\n      expect(authorizers.items[0].identityValidationExpression).toBeFalsy();\n      expect(authorizers.items[0].identitySource).toEqual('method.request.header.Authorization');\n      checkAuthUri(authorizers.items[0].authorizerUri);\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"creates header-based authorizers with an identity source","suites":["registerAuthorizers"],"line":122,"updatePoint":{"line":122,"column":62,"index":4790},"code":"  it('creates header-based authorizers with an identity source', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        identitySource: 'method.request.header.Auth2'\n      }\n    };\n    let result;\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(createResult => {\n      result = createResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      expect(authorizers.items.length).toEqual(1);\n      expect(result.first).toEqual(authorizers.items[0].id);\n      expect(authorizers.items[0].name).toEqual('first');\n      expect(authorizers.items[0].type).toEqual('TOKEN');\n      expect(authorizers.items[0].authorizerCredentials).toBeFalsy();\n      expect(authorizers.items[0].authorizerResultTtlInSeconds).toBeFalsy();\n      expect(authorizers.items[0].identityValidationExpression).toBeFalsy();\n      expect(authorizers.items[0].identitySource).toEqual('method.request.header.Auth2');\n      checkAuthUri(authorizers.items[0].authorizerUri);\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"creates request-based authorizers with a header","suites":["registerAuthorizers"],"line":146,"updatePoint":{"line":146,"column":53,"index":5894},"code":"  it('creates request-based authorizers with a header', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        type: 'REQUEST',\n        headerName: 'Authorization'\n      }\n    };\n    let result;\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(createResult => {\n      result = createResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      expect(authorizers.items.length).toEqual(1);\n      expect(result.first).toEqual(authorizers.items[0].id);\n      expect(authorizers.items[0].name).toEqual('first');\n      expect(authorizers.items[0].type).toEqual('REQUEST');\n      expect(authorizers.items[0].authorizerCredentials).toBeFalsy();\n      expect(authorizers.items[0].authorizerResultTtlInSeconds).toBeFalsy();\n      expect(authorizers.items[0].identityValidationExpression).toBeFalsy();\n      expect(authorizers.items[0].identitySource).toEqual('method.request.header.Authorization');\n      checkAuthUri(authorizers.items[0].authorizerUri);\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"creates request-based authorizers with an identity source","suites":["registerAuthorizers"],"line":171,"updatePoint":{"line":171,"column":63,"index":7025},"code":"  it('creates request-based authorizers with an identity source', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        type: 'REQUEST',\n        identitySource: 'method.request.header.Auth, method.request.querystring.Name'\n      }\n    };\n    let result;\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(createResult => {\n      result = createResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      expect(authorizers.items.length).toEqual(1);\n      expect(result.first).toEqual(authorizers.items[0].id);\n      expect(authorizers.items[0].name).toEqual('first');\n      expect(authorizers.items[0].type).toEqual('REQUEST');\n      expect(authorizers.items[0].authorizerCredentials).toBeFalsy();\n      expect(authorizers.items[0].authorizerResultTtlInSeconds).toBeFalsy();\n      expect(authorizers.items[0].identityValidationExpression).toBeFalsy();\n      expect(authorizers.items[0].identitySource).toEqual('method.request.header.Auth, method.request.querystring.Name');\n      checkAuthUri(authorizers.items[0].authorizerUri);\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"assigns a token validation regex if supplied","suites":["registerAuthorizers"],"line":196,"updatePoint":{"line":196,"column":50,"index":8217},"code":"  it('assigns a token validation regex if supplied', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        validationExpression: 'A-Z'\n      }\n    };\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => expect(authorizers.items[0].identityValidationExpression).toEqual('A-Z')).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"assigns authorizer credentials if supplied","suites":["registerAuthorizers"],"line":207,"updatePoint":{"line":207,"column":48,"index":8690},"code":"  it('assigns authorizer credentials if supplied', done => {\n    let roleArn;\n    iam.getRole({\n      RoleName: genericTestRole.get()\n    }).promise().then(roleDetails => {\n      roleArn = roleDetails.Role.Arn;\n      expect(roleArn).toBeTruthy();\n    }).then(() => {\n      const authorizerConfig = {\n        first: {\n          lambdaName: authorizerLambdaName,\n          credentials: roleArn\n        }\n      };\n      return underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion);\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => expect(authorizers.items[0].authorizerCredentials).toEqual(roleArn)).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"assigns authorizer ttl in seconds if supplied","suites":["registerAuthorizers"],"line":226,"updatePoint":{"line":226,"column":51,"index":9389},"code":"  it('assigns authorizer ttl in seconds if supplied', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        resultTtl: 5\n      }\n    };\n    let result;\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(createResult => {\n      result = createResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      expect(authorizers.items.length).toEqual(1);\n      expect(result.first).toEqual(authorizers.items[0].id);\n      expect(authorizers.items[0].authorizerResultTtlInSeconds).toEqual(5);\n      checkAuthUri(authorizers.items[0].authorizerUri);\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"assigns authorizer ttl undefined if value not supplied","suites":["registerAuthorizers"],"line":245,"updatePoint":{"line":245,"column":60,"index":10113},"code":"  it('assigns authorizer ttl undefined if value not supplied', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName\n      }\n    };\n    let result;\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(createResult => {\n      result = createResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      expect(authorizers.items.length).toEqual(1);\n      expect(result.first).toEqual(authorizers.items[0].id);\n      expect(authorizers.items[0].authorizerResultTtlInSeconds).toEqual(undefined);\n      checkAuthUri(authorizers.items[0].authorizerUri);\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"assigns authorizer ttl in 0 seconds if 0 supplied as a value","suites":["registerAuthorizers"],"line":263,"updatePoint":{"line":263,"column":66,"index":10829},"code":"  it('assigns authorizer ttl in 0 seconds if 0 supplied as a value', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        resultTtl: 0\n      }\n    };\n    let result;\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(createResult => {\n      result = createResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      expect(authorizers.items.length).toEqual(1);\n      expect(result.first).toEqual(authorizers.items[0].id);\n      expect(authorizers.items[0].authorizerResultTtlInSeconds).toEqual(0);\n      checkAuthUri(authorizers.items[0].authorizerUri);\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"uses the Authorization header by default","suites":["registerAuthorizers"],"line":282,"updatePoint":{"line":282,"column":46,"index":11539},"code":"  it('uses the Authorization header by default', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName\n      }\n    };\n    let result;\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(createResult => {\n      result = createResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      expect(authorizers.items.length).toEqual(1);\n      expect(result.first).toEqual(authorizers.items[0].id);\n      expect(authorizers.items[0].name).toEqual('first');\n      expect(authorizers.items[0].type).toEqual('TOKEN');\n      expect(authorizers.items[0].identitySource).toEqual('method.request.header.Authorization');\n      checkAuthUri(authorizers.items[0].authorizerUri);\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"creates multiple authorizers","suites":["registerAuthorizers"],"line":302,"updatePoint":{"line":302,"column":34,"index":12353},"code":"  it('creates multiple authorizers', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        headerName: 'Authorization'\n      },\n      second: {\n        lambdaName: authorizerLambdaName,\n        headerName: 'UserId'\n      }\n    };\n    let result;\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(creationResult => {\n      result = creationResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      const auths = {};\n      expect(authorizers.items.length).toEqual(2);\n      auths[authorizers.items[0].name] = authorizers.items[0];\n      auths[authorizers.items[1].name] = authorizers.items[1];\n      expect(result.first).toEqual(auths.first.id);\n      expect(auths.first.type).toEqual('TOKEN');\n      expect(auths.first.identitySource).toEqual('method.request.header.Authorization');\n      checkAuthUri(auths.first.authorizerUri);\n      expect(result.second).toEqual(auths.second.id);\n      expect(auths.second.type).toEqual('TOKEN');\n      expect(auths.second.identitySource).toEqual('method.request.header.UserId');\n      checkAuthUri(auths.second.authorizerUri);\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"overrides existing authorizers","suites":["registerAuthorizers"],"line":333,"updatePoint":{"line":333,"column":36,"index":13597},"code":"  it('overrides existing authorizers', done => {\n    let result;\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        headerName: 'NewFirst'\n      },\n      third: {\n        lambdaName: authorizerLambdaName,\n        headerName: 'NewThird'\n      }\n    };\n    apiGateway.createAuthorizerPromise({\n      identitySource: 'method.request.header.OldFirst',\n      name: 'first',\n      restApiId: apiId,\n      type: 'TOKEN',\n      authorizerUri: `arn:aws:apigateway:${awsRegion}:lambda:path/2015-03-31/functions/${authorizerArn}/invocations`\n    }).then(() => {\n      return apiGateway.createAuthorizerPromise({\n        identitySource: 'method.request.header.OldSecond',\n        name: 'second',\n        restApiId: apiId,\n        type: 'TOKEN',\n        authorizerUri: `arn:aws:apigateway:${awsRegion}:lambda:path/2015-03-31/functions/${authorizerArn}/invocations`\n      });\n    }).then(() => underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion)).then(creationResult => {\n      result = creationResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      const auths = {};\n      expect(authorizers.items.length).toEqual(2);\n      auths[authorizers.items[0].name] = authorizers.items[0];\n      auths[authorizers.items[1].name] = authorizers.items[1];\n      expect(auths.first.type).toEqual('TOKEN');\n      expect(result.first).toEqual(auths.first.id);\n      expect(auths.first.identitySource).toEqual('method.request.header.NewFirst');\n      checkAuthUri(auths.first.authorizerUri);\n      expect(auths.third.type).toEqual('TOKEN');\n      expect(result.third).toEqual(auths.third.id);\n      expect(auths.third.identitySource).toEqual('method.request.header.NewThird');\n      checkAuthUri(auths.third.authorizerUri);\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"creates authorizers using an ARN","suites":["registerAuthorizers"],"line":378,"updatePoint":{"line":378,"column":38,"index":15457},"code":"  it('creates authorizers using an ARN', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaArn: authorizerArn\n      }\n    };\n    let result;\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(createResult => {\n      result = createResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      expect(authorizers.items.length).toEqual(1);\n      expect(result.first).toEqual(authorizers.items[0].id);\n      expect(authorizers.items[0].name).toEqual('first');\n      expect(authorizers.items[0].type).toEqual('TOKEN');\n      expect(authorizers.items[0].identitySource).toEqual('method.request.header.Authorization');\n      checkAuthUri(authorizers.items[0].authorizerUri);\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"creates authorizers qualified by lambda name and current stage","suites":["registerAuthorizers"],"line":398,"updatePoint":{"line":398,"column":68,"index":16297},"code":"  it('creates authorizers qualified by lambda name and current stage', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        lambdaVersion: true\n      }\n    };\n    let result;\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(createResult => {\n      result = createResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      expect(authorizers.items.length).toEqual(1);\n      expect(result.first).toEqual(authorizers.items[0].id);\n      expect(authorizers.items[0].name).toEqual('first');\n      expect(authorizers.items[0].type).toEqual('TOKEN');\n      expect(authorizers.items[0].identitySource).toEqual('method.request.header.Authorization');\n      checkAuthUriWithVersion(authorizers.items[0].authorizerUri, '${stageVariables.lambdaVersion}');\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"configures an authorizer using providerArns","suites":["registerAuthorizers","creates cognito authorizers"],"line":426,"updatePoint":{"line":426,"column":51,"index":17427},"code":"    it('configures an authorizer using providerArns', done => {\n      const authorizerConfig = {\n        first: {\n          providerARNs: [cognitoUserPool.getArn()]\n        }\n      };\n      let result;\n      underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(createResult => {\n        result = createResult;\n      }).then(() => apiGateway.getAuthorizersPromise({\n        restApiId: apiId\n      })).then(authorizers => {\n        expect(authorizers.items.length).toEqual(1);\n        expect(authorizers.items[0]).toEqual({\n          id: result.first,\n          name: 'first',\n          type: 'COGNITO_USER_POOLS',\n          providerARNs: [cognitoUserPool.getArn()],\n          authType: 'cognito_user_pools',\n          identitySource: 'method.request.header.Authorization'\n        });\n      }).then(done, done.fail);\n    });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"creates authorizers qualified by a specific value","suites":["registerAuthorizers","creates cognito authorizers"],"line":450,"updatePoint":{"line":450,"column":55,"index":18281},"code":"  it('creates authorizers qualified by a specific value', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        lambdaVersion: 'original'\n      }\n    };\n    let result;\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(createResult => {\n      result = createResult;\n    }).then(() => apiGateway.getAuthorizersPromise({\n      restApiId: apiId\n    })).then(authorizers => {\n      expect(authorizers.items.length).toEqual(1);\n      expect(result.first).toEqual(authorizers.items[0].id);\n      expect(authorizers.items[0].name).toEqual('first');\n      expect(authorizers.items[0].type).toEqual('TOKEN');\n      expect(authorizers.items[0].identitySource).toEqual('method.request.header.Authorization');\n      checkAuthUriWithVersion(authorizers.items[0].authorizerUri, 'original');\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"allows api gateway to invoke the authorizer lambda without qualifier","suites":["registerAuthorizers","creates cognito authorizers"],"line":471,"updatePoint":{"line":471,"column":74,"index":19193},"code":"  it('allows api gateway to invoke the authorizer lambda without qualifier', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName\n      }\n    };\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion).then(() => {\n      return lambda.getPolicy({\n        FunctionName: authorizerLambdaName\n      }).promise();\n    }).then(policyResponse => policyResponse && policyResponse.Policy && JSON.parse(policyResponse.Policy)).then(currentPolicy => {\n      expect(currentPolicy.Statement[0].Condition.ArnLike['AWS:SourceArn']).toMatch(`arn:aws:execute-api:${awsRegion}:${ownerId}:${apiId}/authorizers/*`);\n      expect(currentPolicy.Statement[0].Effect).toEqual('Allow');\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"allows api gateway to invoke the authorizer lambda with a hard-coded qualifier","suites":["registerAuthorizers","creates cognito authorizers"],"line":486,"updatePoint":{"line":486,"column":84,"index":19962},"code":"  it('allows api gateway to invoke the authorizer lambda with a hard-coded qualifier', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        lambdaVersion: 'original'\n      }\n    };\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion, 'development').then(() => {\n      return lambda.getPolicy({\n        FunctionName: authorizerLambdaName,\n        Qualifier: 'original'\n      }).promise();\n    }).then(policyResponse => policyResponse && policyResponse.Policy && JSON.parse(policyResponse.Policy)).then(currentPolicy => {\n      expect(currentPolicy.Statement[0].Condition.ArnLike['AWS:SourceArn']).toMatch('arn:aws:execute-api:' + awsRegion + ':' + ownerId + ':' + apiId + '/authorizers/*');\n      expect(currentPolicy.Statement[0].Effect).toEqual('Allow');\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"allows api gateway to invoke the authorizer lambda with a current version qualifier","suites":["registerAuthorizers","creates cognito authorizers"],"line":503,"updatePoint":{"line":503,"column":89,"index":20832},"code":"  it('allows api gateway to invoke the authorizer lambda with a current version qualifier', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaName: authorizerLambdaName,\n        lambdaVersion: true\n      }\n    };\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion, 'original').then(() => {\n      return lambda.getPolicy({\n        FunctionName: authorizerLambdaName,\n        Qualifier: 'original'\n      }).promise();\n    }).then(policyResponse => policyResponse && policyResponse.Policy && JSON.parse(policyResponse.Policy)).then(currentPolicy => {\n      expect(currentPolicy.Statement[0].Condition.ArnLike['AWS:SourceArn']).toMatch('arn:aws:execute-api:' + awsRegion + ':' + ownerId + ':' + apiId + '/authorizers/*');\n      expect(currentPolicy.Statement[0].Effect).toEqual('Allow');\n    }).then(done, done.fail);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"does not assign policies when the authorizer is specified with an ARN","suites":["registerAuthorizers","creates cognito authorizers"],"line":520,"updatePoint":{"line":520,"column":75,"index":21679},"code":"  it('does not assign policies when the authorizer is specified with an ARN', done => {\n    const authorizerConfig = {\n      first: {\n        lambdaArn: authorizerArn\n      }\n    };\n    underTest(authorizerConfig, apiId, ownerId, awsPartition, awsRegion, 'original').then(() => {\n      return lambda.getPolicy({\n        FunctionName: authorizerLambdaName\n      }).promise();\n    }).then(done.fail, err => expect(err.message).toEqual('The resource you requested does not exist.')).then(done);\n  });","file":"register-authorizers-spec.js","skipped":false,"dir":"spec"},{"name":"keeps the same object if no keys match","suites":["removeKeysWithPrefix"],"line":5,"updatePoint":{"line":5,"column":44,"index":180},"code":"  it('keeps the same object if no keys match', () => {\n    expect(removeKeysWithPrefix({\n      aloha: '123',\n      hawaii: '345'\n    }, 'xx')).toEqual({\n      aloha: '123',\n      hawaii: '345'\n    });\n  });","file":"remove-keys-with-prefix-spec.js","skipped":false,"dir":"spec"},{"name":"returns an empty object if all keys match","suites":["removeKeysWithPrefix"],"line":14,"updatePoint":{"line":14,"column":47,"index":390},"code":"  it('returns an empty object if all keys match', () => {\n    expect(removeKeysWithPrefix({\n      aloha: '123',\n      ahwaii: '345'\n    }, 'a')).toEqual({});\n  });","file":"remove-keys-with-prefix-spec.js","skipped":false,"dir":"spec"},{"name":"removes only keys with a given prefix","suites":["removeKeysWithPrefix"],"line":20,"updatePoint":{"line":20,"column":43,"index":550},"code":"  it('removes only keys with a given prefix', () => {\n    expect(removeKeysWithPrefix({\n      aloha: '123',\n      absolute: 'vodka',\n      islands: true,\n      hawaii: '345'\n    }, 'a')).toEqual({\n      hawaii: '345',\n      islands: true\n    });\n  });","file":"remove-keys-with-prefix-spec.js","skipped":false,"dir":"spec"},{"name":"returns a clone of the original object","suites":["removeKeysWithPrefix"],"line":31,"updatePoint":{"line":31,"column":44,"index":803},"code":"  it('returns a clone of the original object', () => {\n    const original = {\n        aloha: '123',\n        absolute: 'vodka',\n        islands: true,\n        hawaii: '345'\n      },\n      result = removeKeysWithPrefix(original, 'a');\n    result.modified = true;\n    expect(original).toEqual({\n      aloha: '123',\n      absolute: 'vodka',\n      islands: true,\n      hawaii: '345'\n    });\n    original.modified = false;\n    expect(result.modified).toBeTruthy();\n  });","file":"remove-keys-with-prefix-spec.js","skipped":false,"dir":"spec"},{"name":"returns the original value for non-objects","suites":["removeKeysWithPrefix"],"line":49,"updatePoint":{"line":49,"column":48,"index":1272},"code":"  it('returns the original value for non-objects', () => {\n    expect(removeKeysWithPrefix('abc', 'a')).toEqual('abc');\n  });","file":"remove-keys-with-prefix-spec.js","skipped":false,"dir":"spec"},{"name":"wraps all methods matching the pattern","suites":["retriableWrap"],"line":31,"updatePoint":{"line":31,"column":44,"index":1139},"code":"  it('wraps all methods matching the pattern', () => {\n    expect(typeof wrapped.firstMethodPromise).toBe('function');\n    expect(typeof wrapped.secondMethodPromise).toBe('function');\n    expect(wrapped.firstMethodPromise).not.toEqual(requestSpy);\n    expect(wrapped.secondMethodPromise).not.toEqual(promiseSpy);\n  });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"skips matching properties that are not functions","suites":["retriableWrap"],"line":37,"updatePoint":{"line":37,"column":54,"index":1468},"code":"  it('skips matching properties that are not functions', () => {\n    expect(wrapped.thirdField).toEqual(5);\n    expect(wrapped.thirdFieldPromise).toBeUndefined();\n  });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"proxies calls to request methods","suites":["retriableWrap"],"line":41,"updatePoint":{"line":41,"column":38,"index":1621},"code":"  it('proxies calls to request methods', done => {\n    requestSpy.and.callFake((number, object) => {\n      expect(number).toEqual(124);\n      expect(object).toEqual({\n        a: 123\n      });\n      done();\n    });\n    wrapped.firstMethodPromise(124, {\n      a: 123\n    });\n  });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"proxies calls to promise methods","suites":["retriableWrap"],"line":53,"updatePoint":{"line":53,"column":38,"index":1900},"code":"  it('proxies calls to promise methods', done => {\n    promiseSpy.and.callFake((number, object) => {\n      expect(number).toEqual(124);\n      expect(object).toEqual({\n        a: 123\n      });\n      expect(functionSpy).not.toHaveBeenCalled();\n      expect(requestSpy).not.toHaveBeenCalled();\n      done();\n    });\n    wrapped.secondMethodPromise(124, {\n      a: 123\n    });\n  });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"proxies calls to functions","suites":["retriableWrap"],"line":67,"updatePoint":{"line":67,"column":32,"index":2273},"code":"  it('proxies calls to functions', done => {\n    functionSpy.and.callFake((number, object) => {\n      expect(number).toEqual(124);\n      expect(object).toEqual({\n        a: 123\n      });\n      expect(promiseSpy).not.toHaveBeenCalled();\n      expect(requestSpy).not.toHaveBeenCalled();\n      done();\n    });\n    wrapped.fourthFunctionPromise(124, {\n      a: 123\n    });\n  });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"does not resolve or reject until the underlying promise resolves","suites":["retriableWrap","when the underlying method returns something with .promise"],"line":82,"updatePoint":{"line":82,"column":72,"index":2769},"code":"    it('does not resolve or reject until the underlying promise resolves', done => {\n      const resolve = jasmine.createSpy('resolve'),\n        reject = jasmine.createSpy('reject');\n      wrapped.firstMethodPromise('124').then(resolve, reject);\n      Promise.resolve().then(() => {\n        expect(resolve).not.toHaveBeenCalled();\n        expect(reject).not.toHaveBeenCalled();\n      }).then(done, done.fail);\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"resolves as soon as the underlying promise resolves","suites":["retriableWrap","when the underlying method returns something with .promise"],"line":91,"updatePoint":{"line":91,"column":59,"index":3174},"code":"    it('resolves as soon as the underlying promise resolves', done => {\n      wrapped.firstMethodPromise('124').then(res => {\n        expect(res).toEqual('result');\n        expect(onRetry).not.toHaveBeenCalled();\n      }).then(done, done.fail);\n      promises.first.resolve('result');\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"rejects as soon as the underlying promise resolves with a non retriable error","suites":["retriableWrap","when the underlying method returns something with .promise"],"line":98,"updatePoint":{"line":98,"column":85,"index":3493},"code":"    it('rejects as soon as the underlying promise resolves with a non retriable error', done => {\n      wrapped.firstMethodPromise('124').then(done.fail, err => {\n        expect(err).toEqual('result');\n        expect(onRetry).not.toHaveBeenCalled();\n      }).then(done);\n      promises.first.reject('result');\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"retries TooManyRequestsException","suites":["retriableWrap","when the underlying method returns something with .promise"],"line":105,"updatePoint":{"line":105,"column":40,"index":3766},"code":"    it('retries TooManyRequestsException', done => {\n      const sequence = [buildPromise('a'), buildPromise('b')],\n        source = {\n          retryAsync: () => {\n            return sequence.shift();\n          }\n        },\n        wrapped = underTest(source, onRetry, 10, 5);\n      wrapped.retryAsyncPromise().then(result => {\n        expect(onRetry).toHaveBeenCalled();\n        expect(result).toEqual('good');\n      }).then(done, done.fail);\n      promises.a.reject({\n        code: 'TooManyRequestsException'\n      });\n      promises.b.resolve('good');\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"fails TooManyRequestsException if over the retry limit","suites":["retriableWrap","when the underlying method returns something with .promise"],"line":122,"updatePoint":{"line":122,"column":62,"index":4352},"code":"    it('fails TooManyRequestsException if over the retry limit', done => {\n      const sequence = [buildPromise('a'), buildPromise('b'), buildPromise('c')],\n        source = {\n          retryAsync: () => {\n            return sequence.shift();\n          }\n        },\n        wrapped = underTest(source, onRetry, 10, 1);\n      wrapped.retryAsyncPromise().then(done.fail, err => {\n        expect(onRetry).not.toHaveBeenCalled();\n        expect(err).toEqual({\n          code: 'TooManyRequestsException'\n        });\n      }).then(done);\n      promises.a.reject({\n        code: 'TooManyRequestsException'\n      });\n      promises.b.resolve('good');\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"does not resolve or reject until the underlying promise resolves","suites":["retriableWrap","when the underlying method returns a thenable value without .promise"],"line":143,"updatePoint":{"line":143,"column":72,"index":5110},"code":"    it('does not resolve or reject until the underlying promise resolves', done => {\n      const resolve = jasmine.createSpy('resolve'),\n        reject = jasmine.createSpy('reject');\n      wrapped.secondMethodPromise('124').then(resolve, reject);\n      Promise.resolve().then(() => {\n        expect(resolve).not.toHaveBeenCalled();\n        expect(reject).not.toHaveBeenCalled();\n      }).then(done, done.fail);\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"resolves as soon as the underlying promise resolves","suites":["retriableWrap","when the underlying method returns a thenable value without .promise"],"line":152,"updatePoint":{"line":152,"column":59,"index":5516},"code":"    it('resolves as soon as the underlying promise resolves', done => {\n      wrapped.secondMethodPromise('124').then(res => {\n        expect(res).toEqual('result');\n        expect(onRetry).not.toHaveBeenCalled();\n      }).then(done, done.fail);\n      promises.second.resolve('result');\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"rejects as soon as the underlying promise resolves with a non retriable error","suites":["retriableWrap","when the underlying method returns a thenable value without .promise"],"line":159,"updatePoint":{"line":159,"column":85,"index":5837},"code":"    it('rejects as soon as the underlying promise resolves with a non retriable error', done => {\n      wrapped.secondMethodPromise('124').then(done.fail, err => {\n        expect(err).toEqual('result');\n        expect(onRetry).not.toHaveBeenCalled();\n      }).then(done);\n      promises.second.reject('result');\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"retries TooManyRequestsException","suites":["retriableWrap","when the underlying method returns a thenable value without .promise"],"line":166,"updatePoint":{"line":166,"column":40,"index":6112},"code":"    it('retries TooManyRequestsException', done => {\n      const sequence = [buildPromise('a'), buildPromise('b')],\n        source = {\n          retryAsync: () => {\n            return sequence.shift();\n          }\n        },\n        wrapped = underTest(source, onRetry, 10, 5);\n      wrapped.retryAsyncPromise().then(result => {\n        expect(onRetry).toHaveBeenCalled();\n        expect(result).toEqual('good');\n      }).then(done, done.fail);\n      promises.a.reject({\n        code: 'TooManyRequestsException'\n      });\n      promises.b.resolve('good');\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"fails TooManyRequestsException if over the retry limit","suites":["retriableWrap","when the underlying method returns a thenable value without .promise"],"line":183,"updatePoint":{"line":183,"column":62,"index":6698},"code":"    it('fails TooManyRequestsException if over the retry limit', done => {\n      const sequence = [buildPromise('a'), buildPromise('b'), buildPromise('c')],\n        source = {\n          retryAsync: () => {\n            return sequence.shift();\n          }\n        },\n        wrapped = underTest(source, onRetry, 10, 1);\n      wrapped.retryAsyncPromise().then(done.fail, err => {\n        expect(onRetry).not.toHaveBeenCalled();\n        expect(err).toEqual({\n          code: 'TooManyRequestsException'\n        });\n      }).then(done);\n      promises.a.reject({\n        code: 'TooManyRequestsException'\n      });\n      promises.b.resolve('good');\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"resolves immediately with the function result","suites":["retriableWrap","when the underlying method returns a primitive"],"line":204,"updatePoint":{"line":204,"column":53,"index":7415},"code":"    it('resolves immediately with the function result', done => {\n      functionSpy.and.returnValue('result');\n      wrapped.fourthFunctionPromise('124').then(res => {\n        expect(res).toEqual('result');\n        expect(onRetry).not.toHaveBeenCalled();\n      }).then(done, done.fail);\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"rejects with the function exception","suites":["retriableWrap","when the underlying method returns a primitive"],"line":211,"updatePoint":{"line":211,"column":43,"index":7700},"code":"    it('rejects with the function exception', done => {\n      functionSpy.and.throwError('boom');\n      wrapped.fourthFunctionPromise('124').then(done.fail, err => {\n        expect(err.message).toEqual('boom');\n        expect(onRetry).not.toHaveBeenCalled();\n      }).then(done);\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"retries TooManyRequestsException","suites":["retriableWrap","when the underlying method returns a primitive","retrying"],"line":236,"updatePoint":{"line":236,"column":42,"index":8426},"code":"      it('retries TooManyRequestsException', done => {\n        wrapped = underTest(source, onRetry, 10, 5);\n        wrapped.fourthFunctionPromise('A').then(result => {\n          expect(onRetry).toHaveBeenCalled();\n          expect(result).toEqual('good');\n        }).then(done, done.fail);\n      });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"does not retry other exceptions","suites":["retriableWrap","when the underlying method returns a primitive","retrying"],"line":243,"updatePoint":{"line":243,"column":41,"index":8725},"code":"      it('does not retry other exceptions', done => {\n        sequence.push('TooFewRequestsException');\n        wrapped = underTest(source, onRetry, 10, 5);\n        wrapped.fourthFunctionPromise('A').then(done.fail, err => {\n          expect(onRetry).toHaveBeenCalled();\n          expect(err).toEqual({\n            code: 'TooFewRequestsException'\n          });\n        }).then(done, done.fail);\n      });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"fails TooManyRequestsException if over the retry limit","suites":["retriableWrap","when the underlying method returns a primitive","retrying"],"line":253,"updatePoint":{"line":253,"column":64,"index":9153},"code":"      it('fails TooManyRequestsException if over the retry limit', done => {\n        wrapped = underTest(source, onRetry, 10, 1);\n        wrapped.fourthFunctionPromise('A').then(done.fail, err => {\n          expect(onRetry).not.toHaveBeenCalled();\n          expect(err).toEqual({\n            code: 'TooManyRequestsException'\n          });\n        }).then(done, done.fail);\n      });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"wraps API objects","suites":["retriableWrap","working with AWS-SDK objects"],"line":265,"updatePoint":{"line":265,"column":25,"index":9562},"code":"    it('wraps API objects', done => {\n      const sts = underTest(new aws.STS());\n      expect(typeof sts.getCallerIdentityPromise).toBe('function');\n      sts.getCallerIdentityPromise().then(callerIdentity => {\n        expect(callerIdentity.Account).not.toBeUndefined();\n      }).then(done, done.fail);\n    });","file":"retriable-wrap-spec.js","skipped":false,"dir":"spec"},{"name":"executes NPM in a folder with arguments as a string","suites":["runNpm"],"line":26,"updatePoint":{"line":26,"column":57,"index":779},"code":"  it('executes NPM in a folder with arguments as a string', done => {\n    configurePackage({\n      dependencies: {\n        'uuid': '^2.0.0'\n      },\n      devDependencies: {\n        'minimist': '^1.2.0'\n      }\n    });\n    underTest(sourcedir, 'install -s --production', logger, true).then(packagePath => {\n      expect(packagePath).toEqual(sourcedir);\n      expect(process.cwd()).toEqual(pwd);\n      expect(fs.existsSync(path.join(sourcedir, 'node_modules', 'uuid'))).toBeTruthy();\n      expect(fs.existsSync(path.join(sourcedir, 'node_modules', 'minimist'))).toBeFalsy();\n      done();\n    }, done.fail);\n  });","file":"run-npm-spec.js","skipped":false,"dir":"spec"},{"name":"executes NPM in a folder with arguments as an array","suites":["runNpm"],"line":43,"updatePoint":{"line":43,"column":57,"index":1392},"code":"  it('executes NPM in a folder with arguments as an array', done => {\n    configurePackage({\n      dependencies: {\n        'uuid': '^2.0.0'\n      },\n      devDependencies: {\n        'minimist': '^1.2.0'\n      }\n    });\n    underTest(sourcedir, ['install', '-s', '--production'], logger, true).then(packagePath => {\n      expect(packagePath).toEqual(sourcedir);\n      expect(process.cwd()).toEqual(pwd);\n      expect(fs.existsSync(path.join(sourcedir, 'node_modules', 'uuid'))).toBeTruthy();\n      expect(fs.existsSync(path.join(sourcedir, 'node_modules', 'minimist'))).toBeFalsy();\n      done();\n    }, done.fail);\n  });","file":"run-npm-spec.js","skipped":false,"dir":"spec"},{"name":"uses local .npmrc if exists","suites":["runNpm"],"line":60,"updatePoint":{"line":60,"column":33,"index":1989},"code":"  it('uses local .npmrc if exists', done => {\n    configurePackage({\n      dependencies: {\n        'uuid': '^2.0.0'\n      },\n      optionalDependencies: {\n        'minimist': '^1.2.0'\n      }\n    });\n    fs.writeFileSync(path.join(sourcedir, '.npmrc'), 'optional = false', 'utf8');\n    underTest(sourcedir, 'install -s --production', logger, true).then(packagePath => {\n      expect(packagePath).toEqual(sourcedir);\n      expect(process.cwd()).toEqual(pwd);\n      expect(fs.existsSync(path.join(sourcedir, 'node_modules', 'uuid'))).toBeTruthy();\n      expect(fs.existsSync(path.join(sourcedir, 'node_modules', 'minimist'))).toBeFalsy();\n      done();\n    }, done.fail);\n  });","file":"run-npm-spec.js","skipped":false,"dir":"spec"},{"name":"fails if npm install fails","suites":["runNpm"],"line":78,"updatePoint":{"line":78,"column":32,"index":2664},"code":"  it('fails if npm install fails', done => {\n    configurePackage({\n      files: ['root.txt'],\n      dependencies: {\n        'non-existing-package': '2.0.0'\n      }\n    });\n    underTest(sourcedir, 'install -s --production', logger, true).then(done.fail, reason => {\n      expect(reason).toMatch(/npm install -s --production failed/);\n      done();\n    });\n  });","file":"run-npm-spec.js","skipped":false,"dir":"spec"},{"name":"returns a base64 hash value of an object hash","suites":["safeHash"],"line":5,"updatePoint":{"line":5,"column":51,"index":149},"code":"  it('returns a base64 hash value of an object hash', () => {\n    expect(safeHash({\n      a: 'b',\n      c: 'd'\n    })).toEqual('uFx9qT6HkFGImMKA4V4/GvXUa/SqpEB2kPDwo7AxZHg=');\n  });","file":"safe-hash-spec.js","skipped":false,"dir":"spec"},{"name":"uses the hash on the whole JSON of an object","suites":["safeHash"],"line":11,"updatePoint":{"line":11,"column":50,"index":330},"code":"  it('uses the hash on the whole JSON of an object', () => {\n    const ob = {\n        version: 2,\n        routes: {\n          echo: {\n            'GET': {}\n          }\n        }\n      },\n      objectHash = safeHash(ob);\n    expect(objectHash).toEqual(safeHash(JSON.stringify(ob)));\n    ob.version = 3;\n    expect(objectHash).not.toEqual(safeHash(JSON.stringify(ob)));\n  });","file":"safe-hash-spec.js","skipped":false,"dir":"spec"},{"name":"replaces + with - to make it base64 safe","suites":["safeHash"],"line":25,"updatePoint":{"line":25,"column":46,"index":700},"code":"  it('replaces + with - to make it base64 safe', () => {\n    expect(safeHash({\n      a: 'b'\n    })).toEqual('20p-yxFLxmxiOgbE/2/o2qL0nMJw6796H4HiKrBhyDc=');\n  });","file":"safe-hash-spec.js","skipped":false,"dir":"spec"},{"name":"hashes strings without JSON conversion","suites":["safeHash"],"line":30,"updatePoint":{"line":30,"column":44,"index":861},"code":"  it('hashes strings without JSON conversion', () => {\n    expect(safeHash('wuehfwefh')).toEqual('uf0LsP/8koDqsSj5zmmfSt5fbUK-rjQq4xpnNPg-7kc=');\n  });","file":"safe-hash-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the options do not contain a version name","suites":["setVersion"],"line":43,"updatePoint":{"line":43,"column":58,"index":1385},"code":"  it('fails when the options do not contain a version name', done => {\n    underTest({\n      source: workingdir\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('version misssing. please provide using --version');\n      done();\n    });\n  });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the source dir does not contain the project config file","suites":["setVersion"],"line":51,"updatePoint":{"line":51,"column":72,"index":1656},"code":"  it('fails when the source dir does not contain the project config file', done => {\n    underTest({\n      source: workingdir,\n      version: 'dev'\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('claudia.json does not exist in the source folder');\n      done();\n    });\n  });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda name","suites":["setVersion"],"line":60,"updatePoint":{"line":60,"column":73,"index":1950},"code":"  it('fails when the project config file does not contain the lambda name', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), '{}', 'utf8');\n    underTest({\n      source: workingdir,\n      version: 'dev'\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.name missing from claudia.json');\n      done();\n    });\n  });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda region","suites":["setVersion"],"line":70,"updatePoint":{"line":70,"column":75,"index":2335},"code":"  it('fails when the project config file does not contain the lambda region', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify({\n      lambda: {\n        name: 'xxx'\n      }\n    }), 'utf8');\n    underTest({\n      source: workingdir,\n      version: 'dev'\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.region missing from claudia.json');\n      done();\n    });\n  });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"creates a new version alias of the lambda function","suites":["setVersion","when the lambda project does not contain a web api"],"line":97,"updatePoint":{"line":97,"column":58,"index":3242},"code":"    it('creates a new version alias of the lambda function', done => {\n      underTest({\n        source: workingdir,\n        version: 'dev'\n      }).then(() => {\n        return lambda.getAlias({\n          FunctionName: testRunName,\n          Name: 'dev'\n        }).promise();\n      }).then(result => {\n        expect(result.FunctionVersion).toEqual('1');\n      }).then(done, done.fail);\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"uses the latest numeric version","suites":["setVersion","when the lambda project does not contain a web api"],"line":110,"updatePoint":{"line":110,"column":39,"index":3618},"code":"    it('uses the latest numeric version', done => {\n      fsUtil.copy('spec/test-projects/echo', workingdir, true);\n      update({\n        source: workingdir\n      }).then(() => {\n        return underTest({\n          source: workingdir,\n          version: 'dev'\n        });\n      }).then(() => {\n        return lambda.getAlias({\n          FunctionName: testRunName,\n          Name: 'dev'\n        }).promise();\n      }).then(result => {\n        expect(result.FunctionVersion).toEqual('2');\n      }).then(done, done.fail);\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"migrates an alias if it already exists","suites":["setVersion","when the lambda project does not contain a web api"],"line":128,"updatePoint":{"line":128,"column":46,"index":4154},"code":"    it('migrates an alias if it already exists', done => {\n      fsUtil.copy('spec/test-projects/echo', workingdir, true);\n      lambda.createAlias({\n        FunctionName: testRunName,\n        FunctionVersion: '1',\n        Name: 'dev'\n      }).promise().then(() => {\n        return update({\n          source: workingdir\n        });\n      }).then(() => {\n        return underTest({\n          source: workingdir,\n          version: 'dev'\n        });\n      }).then(() => {\n        return lambda.getAlias({\n          FunctionName: testRunName,\n          Name: 'dev'\n        }).promise();\n      }).then(result => {\n        expect(result.FunctionVersion).toEqual('2');\n      }).then(done, done.fail);\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"creates a new api deployment","suites":["setVersion","when the lambda project contains a web api"],"line":167,"updatePoint":{"line":167,"column":36,"index":5374},"code":"    it('creates a new api deployment', done => {\n      underTest({\n        source: workingdir,\n        version: 'dev'\n      }).then(result => {\n        expect(result.url).toEqual('https://' + newObjects.restApi + '.execute-api.' + awsRegion + '.amazonaws.com/dev');\n      }).then(() => {\n        return invoke('dev/echo');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: 'dev'\n        });\n      }).then(done, done.fail);\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"keeps the old stage variables if they exist","suites":["setVersion","when the lambda project contains a web api"],"line":183,"updatePoint":{"line":183,"column":51,"index":5990},"code":"    it('keeps the old stage variables if they exist', done => {\n      apiGateway.createDeploymentPromise({\n        restApiId: newObjects.restApi,\n        stageName: 'fromtest',\n        variables: {\n          authKey: 'abs123',\n          authBucket: 'bucket123',\n          lambdaVersion: 'fromtest'\n        }\n      }).then(() => {\n        return underTest({\n          source: workingdir,\n          version: 'fromtest'\n        });\n      }).then(() => {\n        return invoke('fromtest/echo');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: 'fromtest',\n          authKey: 'abs123',\n          authBucket: 'bucket123'\n        });\n      }).then(done, e => {\n        console.log(JSON.stringify(e));\n        done.fail(e);\n      });\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"creates a new api deployment","suites":["setVersion","when the lambda project contains a proxy api"],"line":228,"updatePoint":{"line":228,"column":36,"index":7451},"code":"    it('creates a new api deployment', done => {\n      underTest({\n        source: workingdir,\n        version: 'dev'\n      }).then(result => {\n        expect(result.url).toEqual('https://' + newObjects.restApi + '.execute-api.' + awsRegion + '.amazonaws.com/dev');\n      }).then(() => {\n        return invoke('dev/echo');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.resourcePath).toEqual('/{proxy+}');\n        expect(params.path).toEqual('/echo');\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: 'dev'\n        });\n      }).then(done, done.fail);\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"keeps the old stage variables if they exist","suites":["setVersion","when the lambda project contains a proxy api"],"line":245,"updatePoint":{"line":245,"column":51,"index":8117},"code":"    it('keeps the old stage variables if they exist', done => {\n      apiGateway.createDeploymentPromise({\n        restApiId: newObjects.restApi,\n        stageName: 'fromtest',\n        variables: {\n          authKey: 'abs123',\n          authBucket: 'bucket123',\n          lambdaVersion: 'fromtest'\n        }\n      }).then(() => {\n        return underTest({\n          source: workingdir,\n          version: 'fromtest'\n        });\n      }).then(() => {\n        return invoke('fromtest/echo');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.requestContext.resourcePath).toEqual('/{proxy+}');\n        expect(params.path).toEqual('/echo');\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: 'fromtest',\n          authKey: 'abs123',\n          authBucket: 'bucket123'\n        });\n      }).then(done, e => {\n        console.log(JSON.stringify(e));\n        done.fail(e);\n      });\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"logs progress","suites":["setVersion","when the lambda project contains a proxy api"],"line":276,"updatePoint":{"line":276,"column":19,"index":9046},"code":"  it('logs progress', done => {\n    const logger = new ArrayLogger();\n    fsUtil.copy('spec/test-projects/api-gw-echo', workingdir, true);\n    create({\n      name: testRunName,\n      region: awsRegion,\n      source: workingdir,\n      'api-module': 'main',\n      role: genericTestRole.get()\n    }).then(result => {\n      newObjects.lambdaFunction = result.lambda && result.lambda.name;\n      newObjects.restApi = result.api && result.api.id;\n    }).then(() => {\n      return underTest({\n        source: workingdir,\n        version: 'dev'\n      }, logger);\n    }).then(() => {\n      expect(logger.getStageLog(true).filter(entry => {\n        return entry !== 'rate-limited by AWS, waiting before retry';\n      })).toEqual(['loading config', 'updating configuration', 'updating versions']);\n      expect(logger.getApiCallLogForService('lambda', true)).toEqual(['lambda.getFunctionConfiguration', 'lambda.setupRequestListeners', 'lambda.publishVersion', 'lambda.updateAlias', 'lambda.createAlias']);\n      expect(logger.getApiCallLogForService('sts', true)).toEqual(['sts.getCallerIdentity', 'sts.setupRequestListeners', 'sts.optInRegionalEndpoint']);\n      expect(logger.getApiCallLogForService('apigateway', true)).toEqual(['apigateway.createDeployment', 'apigateway.setupRequestListeners', 'apigateway.setAcceptHeader']);\n    }).then(done, done.fail);\n  });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"does not change environment variables if set-env not provided","suites":["setVersion","environment variables"],"line":323,"updatePoint":{"line":323,"column":69,"index":11232},"code":"    it('does not change environment variables if set-env not provided', done => {\n      return underTest({\n        source: workingdir,\n        version: 'new'\n      }, logger).then(() => {\n        return lambda.getFunctionConfiguration({\n          FunctionName: testRunName,\n          Qualifier: 'new'\n        }).promise();\n      }).then(configuration => {\n        expect(configuration.Environment).toEqual({\n          Variables: {\n            'XPATH': '/var/www',\n            'YPATH': '/var/lib'\n          }\n        });\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Qualifier: 'new',\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => {\n        const env = JSON.parse(result.Payload);\n        expect(Object.keys(env).filter(nonStandard).sort()).toEqual(['XPATH', 'YPATH']);\n        expect(env.XPATH).toEqual('/var/www');\n        expect(env.YPATH).toEqual('/var/lib');\n      }).then(done, done.fail);\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"changes environment variables if set-env is provided","suites":["setVersion","environment variables"],"line":352,"updatePoint":{"line":352,"column":60,"index":12224},"code":"    it('changes environment variables if set-env is provided', done => {\n      return underTest({\n        source: workingdir,\n        version: 'new',\n        'set-env': 'XPATH=/opt,ZPATH=/usr'\n      }, logger).then(() => {\n        return lambda.getFunctionConfiguration({\n          FunctionName: testRunName,\n          Qualifier: 'new'\n        }).promise();\n      }).then(configuration => {\n        expect(configuration.Environment).toEqual({\n          Variables: {\n            'XPATH': '/opt',\n            'ZPATH': '/usr'\n          }\n        });\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Qualifier: 'new',\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => {\n        const env = JSON.parse(result.Payload);\n        expect(Object.keys(env).filter(nonStandard).sort()).toEqual(['XPATH', 'ZPATH']);\n        expect(env.XPATH).toEqual('/opt');\n        expect(env.YPATH).toBeFalsy();\n        expect(env.ZPATH).toEqual('/usr');\n      }).then(done, done.fail);\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"updates environment variables if update-env is provided","suites":["setVersion","environment variables"],"line":383,"updatePoint":{"line":383,"column":63,"index":13286},"code":"    it('updates environment variables if update-env is provided', done => {\n      return underTest({\n        source: workingdir,\n        version: 'new',\n        'update-env': 'XPATH=/opt,ZPATH=/usr'\n      }, logger).then(() => {\n        return lambda.getFunctionConfiguration({\n          FunctionName: testRunName,\n          Qualifier: 'new'\n        }).promise();\n      }).then(configuration => {\n        expect(configuration.Environment).toEqual({\n          Variables: {\n            'XPATH': '/opt',\n            'YPATH': '/var/lib',\n            'ZPATH': '/usr'\n          }\n        });\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Qualifier: 'new',\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => {\n        const env = JSON.parse(result.Payload);\n        expect(Object.keys(env).filter(nonStandard).sort()).toEqual(['XPATH', 'YPATH', 'ZPATH']);\n        expect(env.XPATH).toEqual('/opt');\n        expect(env.YPATH).toEqual('/var/lib');\n        expect(env.ZPATH).toEqual('/usr');\n      }).then(done, done.fail);\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"changes env variables specified in a JSON file","suites":["setVersion","environment variables"],"line":415,"updatePoint":{"line":415,"column":54,"index":14392},"code":"    it('changes env variables specified in a JSON file', done => {\n      const envpath = path.join(workingdir, 'env.json');\n      fs.writeFileSync(envpath, JSON.stringify({\n        'XPATH': '/opt',\n        'ZPATH': '/usr'\n      }), 'utf8');\n      return underTest({\n        source: workingdir,\n        version: 'new',\n        'set-env-from-json': envpath\n      }, logger).then(() => {\n        return lambda.getFunctionConfiguration({\n          FunctionName: testRunName,\n          Qualifier: 'new'\n        }).promise();\n      }).then(configuration => {\n        expect(configuration.Environment).toEqual({\n          Variables: {\n            'XPATH': '/opt',\n            'ZPATH': '/usr'\n          }\n        });\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Qualifier: 'new',\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => {\n        const env = JSON.parse(result.Payload);\n        expect(Object.keys(env).filter(nonStandard).sort()).toEqual(['XPATH', 'ZPATH']);\n        expect(env.XPATH).toEqual('/opt');\n        expect(env.YPATH).toBeFalsy();\n        expect(env.ZPATH).toEqual('/usr');\n      }).then(done, done.fail);\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"updates env variables specified in a JSON file","suites":["setVersion","environment variables"],"line":451,"updatePoint":{"line":451,"column":54,"index":15613},"code":"    it('updates env variables specified in a JSON file', done => {\n      const envpath = path.join(workingdir, 'env.json');\n      fs.writeFileSync(envpath, JSON.stringify({\n        'XPATH': '/opt',\n        'ZPATH': '/usr'\n      }), 'utf8');\n      return underTest({\n        source: workingdir,\n        version: 'new',\n        'update-env-from-json': envpath\n      }, logger).then(() => {\n        return lambda.getFunctionConfiguration({\n          FunctionName: testRunName,\n          Qualifier: 'new'\n        }).promise();\n      }).then(configuration => {\n        expect(configuration.Environment).toEqual({\n          Variables: {\n            'XPATH': '/opt',\n            'YPATH': '/var/lib',\n            'ZPATH': '/usr'\n          }\n        });\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Qualifier: 'new',\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => {\n        const env = JSON.parse(result.Payload);\n        expect(Object.keys(env).filter(nonStandard).sort()).toEqual(['XPATH', 'YPATH', 'ZPATH']);\n        expect(env.XPATH).toEqual('/opt');\n        expect(env.YPATH).toEqual('/var/lib');\n        expect(env.ZPATH).toEqual('/usr');\n      }).then(done, done.fail);\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"refuses to work if reading the variables fails","suites":["setVersion","environment variables"],"line":488,"updatePoint":{"line":488,"column":54,"index":16887},"code":"    it('refuses to work if reading the variables fails', done => {\n      return underTest({\n        source: workingdir,\n        version: 'new',\n        'set-env': 'XPATH,ZPATH=/usr'\n      }, logger).then(done.fail, message => {\n        expect(message).toEqual('Cannot read variables from set-env, Invalid CSV element XPATH');\n        expect(logger.getApiCallLogForService('lambda', true)).toEqual([]);\n        expect(logger.getApiCallLogForService('iam', true)).toEqual([]);\n        done();\n      });\n    });","file":"set-version-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the source dir does not contain the project config file","suites":["tag"],"line":31,"updatePoint":{"line":31,"column":72,"index":961},"code":"  it('fails when the source dir does not contain the project config file', done => {\n    underTest({\n      tags: 'Team=onboarding'\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('claudia.json does not exist in the source folder');\n      done();\n    });\n  });","file":"tag-spec.js","skipped":false,"dir":"spec"},{"name":"appends tags from csv to lambda with no associated web api","suites":["tag"],"line":39,"updatePoint":{"line":39,"column":64,"index":1229},"code":"  it('appends tags from csv to lambda with no associated web api', done => {\n    create({\n      name: testRunName,\n      region: awsRegion,\n      source: workingdir,\n      handler: 'main.handler'\n    }).then(result => {\n      newObjects.lambdaRole = result.lambda && result.lambda.role;\n      newObjects.lambdaFunction = result.lambda && result.lambda.name;\n    }).then(() => underTest({\n      tags: 'Team=onboarding',\n      source: workingdir\n    })).then(() => {\n      return lambda.getFunctionConfiguration({\n        FunctionName: testRunName\n      }).promise();\n    }).then(lambdaResult => {\n      return lambda.listTags({\n        Resource: lambdaResult.FunctionArn\n      }).promise();\n    }).then(data => expect(data.Tags).toEqual({\n      Team: 'onboarding'\n    })).then(done, done.fail);\n  });","file":"tag-spec.js","skipped":false,"dir":"spec"},{"name":"appends tags from csv to lambda and associated web api","suites":["tag"],"line":63,"updatePoint":{"line":63,"column":60,"index":2025},"code":"  it('appends tags from csv to lambda and associated web api', done => {\n    fsUtil.copy('spec/test-projects/api-gw-hello-world', workingdir, true);\n    create({\n      name: testRunName,\n      region: awsRegion,\n      source: workingdir,\n      'api-module': 'main'\n    }).then(result => {\n      newObjects.lambdaRole = result.lambda && result.lambda.role;\n      newObjects.lambdaFunction = result.lambda && result.lambda.name;\n      newObjects.restApi = result.api && result.api.id;\n    }).then(() => underTest({\n      tags: 'Team=onboarding',\n      source: workingdir\n    })).then(() => {\n      return lambda.getFunctionConfiguration({\n        FunctionName: testRunName\n      }).promise();\n    }).then(lambdaResult => {\n      return lambda.listTags({\n        Resource: lambdaResult.FunctionArn\n      }).promise();\n    }).then(data => expect(data.Tags).toEqual({\n      Team: 'onboarding'\n    })).then(() => {\n      return api.getTags({\n        resourceArn: `arn:aws:apigateway:${awsRegion}::/restapis/${newObjects.restApi}`\n      }).promise();\n    }).then(data => expect(data.tags).toEqual({\n      Team: 'onboarding'\n    })).then(done, done.fail);\n  });","file":"tag-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the source dir does not contain the project config file","suites":["testLambda"],"line":25,"updatePoint":{"line":25,"column":72,"index":813},"code":"  it('fails when the source dir does not contain the project config file', done => {\n    underTest({\n      source: workingdir\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('claudia.json does not exist in the source folder');\n      done();\n    });\n  });","file":"test-lambda-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda name","suites":["testLambda"],"line":33,"updatePoint":{"line":33,"column":73,"index":1085},"code":"  it('fails when the project config file does not contain the lambda name', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), '{}', 'utf8');\n    underTest({\n      source: workingdir\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.name missing from claudia.json');\n      done();\n    });\n  });","file":"test-lambda-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda region","suites":["testLambda"],"line":42,"updatePoint":{"line":42,"column":75,"index":1448},"code":"  it('fails when the project config file does not contain the lambda region', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify({\n      lambda: {\n        name: 'xxx'\n      }\n    }), 'utf8');\n    underTest({\n      source: workingdir\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.region missing from claudia.json');\n      done();\n    });\n  });","file":"test-lambda-spec.js","skipped":false,"dir":"spec"},{"name":"invokes a lambda function and returns the result","suites":["testLambda"],"line":55,"updatePoint":{"line":55,"column":54,"index":1855},"code":"  it('invokes a lambda function and returns the result', done => {\n    fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n    create({\n      name: testRunName,\n      region: awsRegion,\n      source: workingdir,\n      handler: 'main.handler'\n    }).then(result => {\n      newObjects.lambdaRole = result.lambda && result.lambda.role;\n      newObjects.lambdaFunction = result.lambda && result.lambda.name;\n      return underTest({\n        source: workingdir\n      });\n    }).then(result => {\n      expect(result.StatusCode).toEqual(200);\n      expect(result.Payload).toEqual('\"hello world\"');\n      done();\n    }, done.fail);\n  });","file":"test-lambda-spec.js","skipped":false,"dir":"spec"},{"name":"tests a specific version of the lambda function and returns the result","suites":["testLambda"],"line":74,"updatePoint":{"line":74,"column":76,"index":2520},"code":"  it('tests a specific version of the lambda function and returns the result', done => {\n    fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n    create({\n      name: testRunName,\n      region: awsRegion,\n      source: workingdir,\n      handler: 'main.handler',\n      version: 'original'\n    }).then(result => {\n      newObjects.lambdaRole = result.lambda && result.lambda.role;\n      newObjects.lambdaFunction = result.lambda && result.lambda.name;\n    }).then(() => {\n      fsUtil.copy('spec/test-projects/echo', workingdir, true);\n      return update({\n        source: workingdir,\n        version: 'updated'\n      });\n    }).then(() => {\n      return underTest({\n        source: workingdir,\n        version: 'original'\n      });\n    }).then(result => {\n      expect(result.StatusCode).toEqual(200);\n      expect(result.Payload).toEqual('\"hello world\"');\n      done();\n    }, done.fail);\n  });","file":"test-lambda-spec.js","skipped":false,"dir":"spec"},{"name":"invokes a lambda function with a payload","suites":["testLambda"],"line":102,"updatePoint":{"line":102,"column":46,"index":3402},"code":"  it('invokes a lambda function with a payload', done => {\n    const eventData = {\n      who: 'me',\n      sub: {\n        name: 'good',\n        val: 2\n      }\n    };\n    fsUtil.copy('spec/test-projects/echo', workingdir, true);\n    create({\n      name: testRunName,\n      region: awsRegion,\n      source: workingdir,\n      handler: 'main.handler'\n    }).then(result => {\n      newObjects.lambdaRole = result.lambda && result.lambda.role;\n      newObjects.lambdaFunction = result.lambda && result.lambda.name;\n    }).then(() => {\n      const eventFile = path.join(workingdir, 'event.json');\n      fs.writeFileSync(eventFile, JSON.stringify(eventData), 'utf8');\n      return underTest({\n        source: workingdir,\n        event: eventFile\n      });\n    }).then(result => {\n      expect(result.StatusCode).toEqual(200);\n      expect(JSON.parse(result.Payload)).toEqual(eventData);\n      done();\n    }, done.fail);\n  });","file":"test-lambda-spec.js","skipped":false,"dir":"spec"},{"name":"returns an uuid v4 subpath of tmpdir without any arguments","suites":["tmppath"],"line":9,"updatePoint":{"line":9,"column":64,"index":278},"code":"  it('returns an uuid v4 subpath of tmpdir without any arguments', () => {\n    const result = underTest();\n    expect(trimSlash(path.dirname(result))).toEqual(trimSlash(os.tmpdir()));\n    expect(/^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$/.test(path.basename(result))).toBeTruthy();\n  });","file":"tmppath-spec.js","skipped":false,"dir":"spec"},{"name":"appends the extension if provided as an argument","suites":["tmppath"],"line":14,"updatePoint":{"line":14,"column":54,"index":577},"code":"  it('appends the extension if provided as an argument', () => {\n    const result = underTest('.txt');\n    expect(trimSlash(path.dirname(result))).toEqual(trimSlash(os.tmpdir()));\n    expect(/^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\\.txt$/.test(path.basename(result))).toBeTruthy();\n  });","file":"tmppath-spec.js","skipped":false,"dir":"spec"},{"name":"uses the provided string generator if supplied","suites":["tmppath"],"line":19,"updatePoint":{"line":19,"column":52,"index":885},"code":"  it('uses the provided string generator if supplied', () => {\n    const generator = () => {\n        return 'generated';\n      },\n      result = underTest('.txt', generator);\n    expect(trimSlash(path.dirname(result))).toEqual(trimSlash(os.tmpdir()));\n    expect(path.basename(result)).toEqual('generated.txt');\n  });","file":"tmppath-spec.js","skipped":false,"dir":"spec"},{"name":"keeps generating until if it generates an existing file path","suites":["tmppath"],"line":27,"updatePoint":{"line":27,"column":66,"index":1217},"code":"  it('keeps generating until if it generates an existing file path', () => {\n    const names = ['not-needed', 'new', 'existing'],\n      generator = () => {\n        return names.pop();\n      };\n    fs.writeFileSync(path.join(os.tmpdir(), 'existing.txt'), 'Hello', 'utf8');\n    expect(path.basename(underTest('.txt', generator))).toEqual('new.txt');\n  });","file":"tmppath-spec.js","skipped":false,"dir":"spec"},{"name":"does not modify strings not ending with a slash","suites":["trimSlash"],"line":5,"updatePoint":{"line":5,"column":53,"index":153},"code":"  it('does not modify strings not ending with a slash', () => {\n    expect(underTest('skufh')).toEqual('skufh');\n    expect(underTest('')).toEqual('');\n    expect(underTest('wukfe/a')).toEqual('wukfe/a');\n    expect(underTest('/aa')).toEqual('/aa');\n  });","file":"trimslash-spec.js","skipped":false,"dir":"spec"},{"name":"cuts of exactly one slash from the end","suites":["trimSlash"],"line":11,"updatePoint":{"line":11,"column":44,"index":400},"code":"  it('cuts of exactly one slash from the end', () => {\n    expect(underTest('blah/')).toEqual('blah');\n    expect(underTest('blah//')).toEqual('blah/');\n    expect(underTest('/bl/ah/')).toEqual('/bl/ah');\n    expect(underTest('/')).toEqual('');\n  });","file":"trimslash-spec.js","skipped":false,"dir":"spec"},{"name":"does not invoke the lambda method if no env options are provided","suites":["updateEnvVars"],"line":16,"updatePoint":{"line":16,"column":70,"index":521},"code":"  it('does not invoke the lambda method if no env options are provided', done => {\n    updateEnvVars({\n      a: 'b'\n    }, fakeLambdaAPI, 'MyFunc').then(() => {\n      expect(fakeLambdaAPI.updateFunctionConfiguration).not.toHaveBeenCalled();\n    }).then(done, done.fail);\n  });","file":"update-env-vars-spec.js","skipped":false,"dir":"spec"},{"name":"sets only the KMS key if it is the only option","suites":["updateEnvVars"],"line":23,"updatePoint":{"line":23,"column":52,"index":780},"code":"  it('sets only the KMS key if it is the only option', done => {\n    updateEnvVars({\n      a: 'b',\n      'env-kms-key-arn': 'A:B:C'\n    }, fakeLambdaAPI, 'MyFunc').then(() => {\n      expect(fakeLambdaAPI.updateFunctionConfiguration).toHaveBeenCalledWith({\n        FunctionName: 'MyFunc',\n        KMSKeyArn: 'A:B:C'\n      });\n    }).then(done, done.fail);\n  });","file":"update-env-vars-spec.js","skipped":false,"dir":"spec"},{"name":"sets the variables","suites":["updateEnvVars","set-env"],"line":35,"updatePoint":{"line":35,"column":26,"index":1145},"code":"    it('sets the variables', done => {\n      updateEnvVars({\n        a: 'b',\n        'set-env': 'A=B,C=D'\n      }, fakeLambdaAPI, 'MyFunc').then(() => {\n        expect(fakeLambdaAPI.updateFunctionConfiguration).toHaveBeenCalledWith({\n          FunctionName: 'MyFunc',\n          Environment: {\n            Variables: {\n              A: 'B',\n              C: 'D'\n            }\n          }\n        });\n      }).then(done, done.fail);\n    });","file":"update-env-vars-spec.js","skipped":false,"dir":"spec"},{"name":"ignores existing variables","suites":["updateEnvVars","set-env"],"line":51,"updatePoint":{"line":51,"column":34,"index":1592},"code":"    it('ignores existing variables', done => {\n      updateEnvVars({\n        a: 'b',\n        'set-env': 'A=B,C=D'\n      }, fakeLambdaAPI, 'MyFunc', {\n        old: 'D'\n      }).then(() => {\n        expect(fakeLambdaAPI.updateFunctionConfiguration).toHaveBeenCalledWith({\n          FunctionName: 'MyFunc',\n          Environment: {\n            Variables: {\n              A: 'B',\n              C: 'D'\n            }\n          }\n        });\n      }).then(done, done.fail);\n    });","file":"update-env-vars-spec.js","skipped":false,"dir":"spec"},{"name":"merges with old variables","suites":["updateEnvVars","update-env"],"line":71,"updatePoint":{"line":71,"column":33,"index":2105},"code":"    it('merges with old variables', done => {\n      updateEnvVars({\n        a: 'b',\n        'update-env': 'A=B,C=D'\n      }, fakeLambdaAPI, 'MyFunc', {\n        A: 'OLD1',\n        old: 'D2'\n      }).then(() => {\n        expect(fakeLambdaAPI.updateFunctionConfiguration).toHaveBeenCalledWith({\n          FunctionName: 'MyFunc',\n          Environment: {\n            Variables: {\n              A: 'B',\n              C: 'D',\n              old: 'D2'\n            }\n          }\n        });\n      }).then(done, done.fail);\n    });","file":"update-env-vars-spec.js","skipped":false,"dir":"spec"},{"name":"updates if no old variables","suites":["updateEnvVars","update-env"],"line":91,"updatePoint":{"line":91,"column":35,"index":2629},"code":"    it('updates if no old variables', done => {\n      updateEnvVars({\n        a: 'b',\n        'update-env': 'A=B,C=D'\n      }, fakeLambdaAPI, 'MyFunc').then(() => {\n        expect(fakeLambdaAPI.updateFunctionConfiguration).toHaveBeenCalledWith({\n          FunctionName: 'MyFunc',\n          Environment: {\n            Variables: {\n              A: 'B',\n              C: 'D'\n            }\n          }\n        });\n      }).then(done, done.fail);\n    });","file":"update-env-vars-spec.js","skipped":false,"dir":"spec"},{"name":"sets the new variables","suites":["updateEnvVars","set-env-from-json"],"line":109,"updatePoint":{"line":109,"column":30,"index":3121},"code":"    it('sets the new variables', done => {\n      const envpath = tmppath();\n      fs.writeFileSync(envpath, JSON.stringify({\n        'XPATH': '/opt',\n        'ZPATH': '/usr'\n      }), 'utf8');\n      updateEnvVars({\n        a: 'b',\n        'set-env-from-json': envpath\n      }, fakeLambdaAPI, 'MyFunc').then(() => {\n        expect(fakeLambdaAPI.updateFunctionConfiguration).toHaveBeenCalledWith({\n          FunctionName: 'MyFunc',\n          Environment: {\n            Variables: {\n              XPATH: '/opt',\n              ZPATH: '/usr'\n            }\n          }\n        });\n      }).then(done, done.fail);\n    });","file":"update-env-vars-spec.js","skipped":false,"dir":"spec"},{"name":"ignores any existing variables","suites":["updateEnvVars","set-env-from-json"],"line":130,"updatePoint":{"line":130,"column":38,"index":3744},"code":"    it('ignores any existing variables', done => {\n      const envpath = tmppath();\n      fs.writeFileSync(envpath, JSON.stringify({\n        'XPATH': '/opt',\n        'ZPATH': '/usr'\n      }, {\n        'YPATH': '/xxx'\n      }), 'utf8');\n      updateEnvVars({\n        a: 'b',\n        'set-env-from-json': envpath\n      }, fakeLambdaAPI, 'MyFunc').then(() => {\n        expect(fakeLambdaAPI.updateFunctionConfiguration).toHaveBeenCalledWith({\n          FunctionName: 'MyFunc',\n          Environment: {\n            Variables: {\n              XPATH: '/opt',\n              ZPATH: '/usr'\n            }\n          }\n        });\n      }).then(done, done.fail);\n    });","file":"update-env-vars-spec.js","skipped":false,"dir":"spec"},{"name":"works if no old variables","suites":["updateEnvVars","update-env-from-json"],"line":155,"updatePoint":{"line":155,"column":33,"index":4446},"code":"    it('works if no old variables', done => {\n      const envpath = tmppath();\n      fs.writeFileSync(envpath, JSON.stringify({\n        'XPATH': '/opt',\n        'ZPATH': '/usr'\n      }), 'utf8');\n      updateEnvVars({\n        a: 'b',\n        'update-env-from-json': envpath\n      }, fakeLambdaAPI, 'MyFunc').then(() => {\n        expect(fakeLambdaAPI.updateFunctionConfiguration).toHaveBeenCalledWith({\n          FunctionName: 'MyFunc',\n          Environment: {\n            Variables: {\n              XPATH: '/opt',\n              ZPATH: '/usr'\n            }\n          }\n        });\n      }).then(done, done.fail);\n    });","file":"update-env-vars-spec.js","skipped":false,"dir":"spec"},{"name":"merges with old variables","suites":["updateEnvVars","update-env-from-json"],"line":176,"updatePoint":{"line":176,"column":33,"index":5067},"code":"    it('merges with old variables', done => {\n      const envpath = tmppath();\n      fs.writeFileSync(envpath, JSON.stringify({\n        'XPATH': '/opt',\n        'ZPATH': '/usr'\n      }), 'utf8');\n      updateEnvVars({\n        a: 'b',\n        'update-env-from-json': envpath\n      }, fakeLambdaAPI, 'MyFunc', {\n        'XPATH': '/old',\n        'YPATH': '/xxx'\n      }).then(() => {\n        expect(fakeLambdaAPI.updateFunctionConfiguration).toHaveBeenCalledWith({\n          FunctionName: 'MyFunc',\n          Environment: {\n            Variables: {\n              XPATH: '/opt',\n              ZPATH: '/usr',\n              YPATH: '/xxx'\n            }\n          }\n        });\n      }).then(done, done.fail);\n    });","file":"update-env-vars-spec.js","skipped":false,"dir":"spec"},{"name":"sets both KMS key and environment variables if provided together","suites":["updateEnvVars","update-env-from-json"],"line":202,"updatePoint":{"line":202,"column":70,"index":5820},"code":"  it('sets both KMS key and environment variables if provided together', done => {\n    updateEnvVars({\n      a: 'b',\n      'env-kms-key-arn': 'A:B:C',\n      'set-env': 'A=B,C=D'\n    }, fakeLambdaAPI, 'MyFunc').then(() => {\n      expect(fakeLambdaAPI.updateFunctionConfiguration).toHaveBeenCalledWith({\n        FunctionName: 'MyFunc',\n        KMSKeyArn: 'A:B:C',\n        Environment: {\n          Variables: {\n            A: 'B',\n            C: 'D'\n          }\n        }\n      });\n    }).then(done, done.fail);\n  });","file":"update-env-vars-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the source dir does not contain the project config file","suites":["update"],"line":61,"updatePoint":{"line":61,"column":72,"index":1884},"code":"  it('fails when the source dir does not contain the project config file', done => {\n    underTest({\n      source: workingdir\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('claudia.json does not exist in the source folder');\n      done();\n    });\n  });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the source folder is same as os tmp folder","suites":["update"],"line":69,"updatePoint":{"line":69,"column":57,"index":2140},"code":"  it('fails if the source folder is same as os tmp folder', done => {\n    fsUtil.copy('spec/test-projects/hello-world', os.tmpdir(), true);\n    fs.writeFileSync(path.join(os.tmpdir(), 'claudia.json'), JSON.stringify({\n      lambda: {\n        name: 'xxx',\n        region: 'us-east-1'\n      }\n    }), 'utf8');\n    underTest({\n      source: os.tmpdir()\n    }).then(done.fail, message => {\n      expect(message).toEqual('Source directory is the Node temp directory. Cowardly refusing to fill up disk with recursive copy.');\n      done();\n    });\n  });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda name","suites":["update"],"line":84,"updatePoint":{"line":84,"column":73,"index":2704},"code":"  it('fails when the project config file does not contain the lambda name', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), '{}', 'utf8');\n    underTest({\n      source: workingdir\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.name missing from claudia.json');\n      done();\n    });\n  });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails when the project config file does not contain the lambda region","suites":["update"],"line":93,"updatePoint":{"line":93,"column":75,"index":3067},"code":"  it('fails when the project config file does not contain the lambda region', done => {\n    fs.writeFileSync(path.join(workingdir, 'claudia.json'), JSON.stringify({\n      lambda: {\n        name: 'xxx'\n      }\n    }), 'utf8');\n    underTest({\n      source: workingdir\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('invalid configuration -- lambda.region missing from claudia.json');\n      done();\n    });\n  });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if local dependencies and optional dependencies are mixed","suites":["update"],"line":106,"updatePoint":{"line":106,"column":69,"index":3489},"code":"  it('fails if local dependencies and optional dependencies are mixed', done => {\n    fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n    underTest({\n      source: workingdir,\n      'use-local-dependencies': true,\n      'optional-dependencies': false\n    }).then(done.fail, message => {\n      expect(message).toEqual('incompatible arguments --use-local-dependencies and --no-optional-dependencies');\n      done();\n    });\n  });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails when --layers and --remove-layers are mixed","suites":["update"],"line":117,"updatePoint":{"line":117,"column":55,"index":3920},"code":"  it('fails when --layers and --remove-layers are mixed', done => {\n    fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n    underTest({\n      source: workingdir,\n      'layers': 'a1',\n      'remove-layers': 'a2'\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('incompatible arguments --layers and --remove-layers');\n      done();\n    });\n  });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails when --layers and --add-layers are mixed","suites":["update"],"line":128,"updatePoint":{"line":128,"column":52,"index":4294},"code":"  it('fails when --layers and --add-layers are mixed', done => {\n    fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n    underTest({\n      source: workingdir,\n      'layers': 'a1',\n      'add-layers': 'a2'\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('incompatible arguments --layers and --add-layers');\n      done();\n    });\n  });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if s3-key is specified but use-s3-bucket is not","suites":["update"],"line":139,"updatePoint":{"line":139,"column":59,"index":4669},"code":"  it('fails if s3-key is specified but use-s3-bucket is not', done => {\n    fsUtil.copy('spec/test-projects/hello-world', workingdir, true);\n    underTest({\n      source: workingdir,\n      's3-key': 'foo'\n    }).then(done.fail, reason => {\n      expect(reason).toEqual('--s3-key only works with --use-s3-bucket');\n      done();\n    });\n  });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the lambda no longer exists","suites":["update","when the config exists"],"line":163,"updatePoint":{"line":163,"column":44,"index":5540},"code":"    it('fails if the lambda no longer exists', done => {\n      fsPromise.readFileAsync(path.join(workingdir, 'claudia.json'), 'utf8').then(JSON.parse).then(contents => {\n        contents.lambda.name = contents.lambda.name + '-xxx';\n        return contents;\n      }).then(JSON.stringify).then(contents => {\n        return fsPromise.writeFileAsync(path.join(workingdir, 'claudia.json'), contents, 'utf8');\n      }).then(() => {\n        return underTest({\n          source: workingdir\n        });\n      }).then(done.fail, reason => {\n        expect(reason.code).toEqual('ResourceNotFoundException');\n      }).then(done);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"validates the package before updating the lambda","suites":["update","when the config exists"],"line":177,"updatePoint":{"line":177,"column":56,"index":6178},"code":"    it('validates the package before updating the lambda', done => {\n      fsUtil.copy('spec/test-projects/echo-dependency-problem', workingdir, true);\n      underTest({\n        source: workingdir\n      }).then(done.fail, reason => {\n        expect(reason).toEqual('cannot require ./main after clean installation. Check your dependencies.');\n      }).then(() => {\n        return lambda.listVersionsByFunction({\n          FunctionName: testRunName\n        }).promise();\n      }).then(result => {\n        expect(result.Versions.length).toEqual(2);\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"creates a new version of the lambda function","suites":["update","when the config exists"],"line":191,"updatePoint":{"line":191,"column":52,"index":6760},"code":"    it('creates a new version of the lambda function', done => {\n      underTest({\n        source: workingdir\n      }).then(lambdaFunc => {\n        expect(new RegExp('^arn:aws:lambda:' + awsRegion + ':[0-9]+:function:' + testRunName + ':2$').test(lambdaFunc.FunctionArn)).toBeTruthy();\n      }).then(() => {\n        return lambda.listVersionsByFunction({\n          FunctionName: testRunName\n        }).promise();\n      }).then(result => {\n        expect(result.Versions.length).toEqual(3);\n        expect(result.Versions[0].Version).toEqual('$LATEST');\n        expect(result.Versions[1].Version).toEqual('1');\n        expect(result.Versions[2].Version).toEqual('2');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"updates the lambda with a new version","suites":["update","when the config exists"],"line":207,"updatePoint":{"line":207,"column":45,"index":7460},"code":"    it('updates the lambda with a new version', done => {\n      underTest({\n        source: workingdir\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Payload: JSON.stringify({\n            message: 'aloha'\n          })\n        }).promise();\n      }).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(lambdaResult.Payload).toEqual('{\"message\":\"aloha\"}');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"keeps the archive on the disk if --keep is specified","suites":["update","when the config exists"],"line":222,"updatePoint":{"line":222,"column":60,"index":7963},"code":"    it('keeps the archive on the disk if --keep is specified', done => {\n      underTest({\n        source: workingdir,\n        keep: true\n      }).then(result => {\n        expect(result.archive).toBeTruthy();\n        expect(fsUtil.isFile(result.archive)).toBeTruthy();\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"uses local dependencies if requested","suites":["update","when the config exists"],"line":231,"updatePoint":{"line":231,"column":44,"index":8256},"code":"    it('uses local dependencies if requested', done => {\n      fsUtil.copy(path.join(__dirname, 'test-projects', 'local-dependencies'), workingdir, true);\n      fsUtil.silentRemove(path.join(workingdir, 'node_modules'));\n      fs.mkdirSync(path.join(workingdir, 'node_modules'));\n      fsUtil.copy(path.join(workingdir, 'local_modules'), path.join(workingdir, 'node_modules'), true);\n      underTest({\n        source: workingdir,\n        'use-local-dependencies': true\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Payload: JSON.stringify({\n            message: 'aloha'\n          })\n        }).promise();\n      }).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(lambdaResult.Payload).toEqual('\"hello local\"');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"removes optional dependencies after validation if requested","suites":["update","when the config exists"],"line":251,"updatePoint":{"line":251,"column":67,"index":9127},"code":"    it('removes optional dependencies after validation if requested', done => {\n      fsUtil.copy(path.join(__dirname, '/test-projects/optional-dependencies'), workingdir, true);\n      underTest({\n        source: workingdir,\n        'optional-dependencies': false\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName\n        }).promise();\n      }).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(JSON.parse(lambdaResult.Payload).modules.filter(t => !t.startsWith('.'))).toEqual(['huh']);\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"rewires relative dependencies to reference original location after copy","suites":["update","when the config exists"],"line":265,"updatePoint":{"line":265,"column":79,"index":9747},"code":"    it('rewires relative dependencies to reference original location after copy', done => {\n      fsUtil.copy(path.join(__dirname, 'test-projects/relative-dependencies'), workingdir, true);\n      fsUtil.copy(path.join(workingdir, 'claudia.json'), path.join(workingdir, 'lambda'));\n      underTest({\n        source: path.join(workingdir, 'lambda')\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName\n        }).promise();\n      }).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(lambdaResult.Payload).toEqual('\"hello relative\"');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"uses a s3 bucket if provided","suites":["update","when the config exists"],"line":279,"updatePoint":{"line":279,"column":36,"index":10354},"code":"    it('uses a s3 bucket if provided', done => {\n      const logger = new ArrayLogger(),\n        bucketName = testRunName + '-bucket';\n      let archivePath;\n      s3.createBucket({\n        Bucket: bucketName\n      }).promise().then(() => {\n        newObjects.s3bucket = bucketName;\n      }).then(() => {\n        return underTest({\n          keep: true,\n          'use-s3-bucket': bucketName,\n          source: workingdir\n        }, logger);\n      }).then(result => {\n        const expectedKey = path.basename(result.archive);\n        archivePath = result.archive;\n        expect(result.s3key).toEqual(expectedKey);\n        return s3.headObject({\n          Bucket: bucketName,\n          Key: expectedKey\n        }).promise();\n      }).then(fileResult => {\n        expect(parseInt(fileResult.ContentLength)).toEqual(fs.statSync(archivePath).size);\n      }).then(() => {\n        expect(logger.getApiCallLogForService('s3', true)).toEqual(['s3.upload', 's3.getSignatureVersion']);\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Payload: JSON.stringify({\n            message: 'aloha'\n          })\n        }).promise();\n      }).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(lambdaResult.Payload).toEqual('{\"message\":\"aloha\"}');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"uses a s3 bucket with server side encryption if provided","suites":["update","when the config exists"],"line":317,"updatePoint":{"line":317,"column":64,"index":11745},"code":"    it('uses a s3 bucket with server side encryption if provided', done => {\n      const logger = new ArrayLogger(),\n        bucketName = testRunName + '-bucket',\n        serverSideEncryption = 'AES256';\n      let archivePath;\n      s3.createBucket({\n        Bucket: bucketName\n      }).promise().then(() => {\n        newObjects.s3bucket = bucketName;\n      }).then(() => {\n        return s3.putBucketEncryption({\n          Bucket: bucketName,\n          ServerSideEncryptionConfiguration: {\n            Rules: [{\n              ApplyServerSideEncryptionByDefault: {\n                SSEAlgorithm: 'AES256'\n              }\n            }]\n          }\n        }).promise();\n      }).then(() => {\n        return s3.putBucketPolicy({\n          Bucket: bucketName,\n          Policy: `{\n\t\t\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\t\t\"Statement\":  [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"Sid\": \"S3Encryption\",\n\t\t\t\t\t\t\t\t\"Action\": [ \"s3:PutObject\" ],\n\t\t\t\t\t\t\t\t\"Effect\": \"Deny\",\n\t\t\t\t\t\t\t\t\"Resource\": \"arn:aws:s3:::${bucketName}/*\",\n\t\t\t\t\t\t\t\t\"Principal\": \"*\",\n\t\t\t\t\t\t\t\t\"Condition\": {\n\t\t\t\t\t\t\t\t\t\"Null\": {\n\t\t\t\t\t\t\t\t\t\t\"s3:x-amz-server-side-encryption\": true\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}`\n        }).promise();\n      }).then(() => {\n        return underTest({\n          keep: true,\n          'use-s3-bucket': bucketName,\n          's3-sse': serverSideEncryption,\n          source: workingdir\n        }, logger);\n      }).then(result => {\n        const expectedKey = path.basename(result.archive);\n        archivePath = result.archive;\n        expect(result.s3key).toEqual(expectedKey);\n        return s3.headObject({\n          Bucket: bucketName,\n          Key: expectedKey\n        }).promise();\n      }).then(fileResult => {\n        expect(parseInt(fileResult.ContentLength)).toEqual(fs.statSync(archivePath).size);\n      }).then(() => {\n        expect(logger.getApiCallLogForService('s3', true)).toEqual(['s3.upload', 's3.getSignatureVersion']);\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Payload: JSON.stringify({\n            message: 'aloha'\n          })\n        }).promise();\n      }).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(lambdaResult.Payload).toEqual('{\"message\":\"aloha\"}');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"uses an s3 key if provided","suites":["update","when the config exists"],"line":389,"updatePoint":{"line":389,"column":34,"index":14010},"code":"    it('uses an s3 key if provided', done => {\n      const logger = new ArrayLogger(),\n        bucketName = `${testRunName}-bucket`,\n        keyName = `${testRunName}-key`;\n      let archivePath;\n      s3.createBucket({\n        Bucket: bucketName\n      }).promise().then(() => {\n        newObjects.s3Bucket = bucketName;\n        newObjects.s3Key = keyName;\n      }).then(() => {\n        return underTest({\n          keep: true,\n          'use-s3-bucket': bucketName,\n          's3-key': keyName,\n          source: workingdir\n        }, logger);\n      }).then(result => {\n        const expectedKey = keyName;\n        archivePath = result.archive;\n        expect(result.s3key).toEqual(expectedKey);\n        return s3.headObject({\n          Bucket: bucketName,\n          Key: expectedKey\n        }).promise();\n      }).then(fileResult => {\n        expect(parseInt(fileResult.ContentLength)).toEqual(fs.statSync(archivePath).size);\n      }).then(() => {\n        expect(logger.getApiCallLogForService('s3', true)).toEqual(['s3.upload', 's3.getSignatureVersion']);\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Payload: JSON.stringify({\n            message: 'aloha'\n          })\n        }).promise();\n      }).then(lambdaResult => {\n        expect(lambdaResult.StatusCode).toEqual(200);\n        expect(lambdaResult.Payload).toEqual('{\"message\":\"aloha\"}');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"adds the version alias if supplied","suites":["update","when the config exists"],"line":430,"updatePoint":{"line":430,"column":42,"index":15462},"code":"    it('adds the version alias if supplied', done => {\n      underTest({\n        source: workingdir,\n        version: 'great'\n      }).then(() => {\n        return lambda.getAlias({\n          FunctionName: testRunName,\n          Name: 'great'\n        }).promise();\n      }).then(result => {\n        expect(result.FunctionVersion).toEqual('2');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"checks the current dir if the source is not provided","suites":["update","when the config exists"],"line":443,"updatePoint":{"line":443,"column":60,"index":15863},"code":"    it('checks the current dir if the source is not provided', done => {\n      process.chdir(workingdir);\n      underTest().then(lambdaFunc => {\n        expect(new RegExp('^arn:aws:lambda:' + awsRegion + ':[0-9]+:function:' + testRunName + ':2$').test(lambdaFunc.FunctionArn)).toBeTruthy();\n        expect(lambdaFunc.FunctionName).toEqual(testRunName);\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Payload: JSON.stringify({\n            message: 'aloha'\n          })\n        }).promise();\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"if using a different version, deploys a new stage","suites":["update","when the lambda project contains a proxy api"],"line":473,"updatePoint":{"line":473,"column":57,"index":17053},"code":"    it('if using a different version, deploys a new stage', done => {\n      underTest({\n        source: workingdir,\n        version: 'development'\n      }).then(result => {\n        expect(result.url).toEqual('https://' + newObjects.restApi + '.execute-api.' + awsRegion + '.amazonaws.com/development');\n      }).then(() => {\n        return invoke('development/hello?abc=def');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.queryStringParameters).toEqual({\n          abc: 'def'\n        });\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.path).toEqual('/hello');\n        expect(params.requestContext.stage).toEqual('development');\n      }).then(done, e => {\n        console.log(e);\n        done.fail();\n      });\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the api no longer exists","suites":["update","when the lambda project contains a web api"],"line":517,"updatePoint":{"line":517,"column":41,"index":18797},"code":"    it('fails if the api no longer exists', done => {\n      fsPromise.readFileAsync(path.join(updateddir, 'claudia.json'), 'utf8').then(JSON.parse).then(contents => {\n        contents.api.id = contents.api.id + '-xxx';\n        return contents;\n      }).then(JSON.stringify).then(contents => {\n        return fsPromise.writeFileAsync(path.join(updateddir, 'claudia.json'), contents, 'utf8');\n      }).then(() => {\n        return underTest({\n          source: updateddir\n        });\n      }).then(done.fail, reason => {\n        expect(reason.code).toEqual('NotFoundException');\n      }).then(() => {\n        return lambda.listVersionsByFunction({\n          FunctionName: testRunName\n        }).promise();\n      }).then(result => {\n        expect(result.Versions.length).toEqual(2);\n        expect(result.Versions[0].Version).toEqual('$LATEST');\n        expect(result.Versions[1].Version).toEqual('1');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"validates the package before creating a new lambda version","suites":["update","when the lambda project contains a web api"],"line":539,"updatePoint":{"line":539,"column":66,"index":19762},"code":"    it('validates the package before creating a new lambda version', done => {\n      fsUtil.copy('spec/test-projects/echo-dependency-problem', updateddir, true);\n      underTest({\n        source: updateddir\n      }).then(done.fail, reason => {\n        expect(reason).toEqual('cannot require ./main after clean installation. Check your dependencies.');\n      }).then(() => {\n        return lambda.listVersionsByFunction({\n          FunctionName: testRunName\n        }).promise();\n      }).then(result => {\n        expect(result.Versions.length).toEqual(2);\n        expect(result.Versions[0].Version).toEqual('$LATEST');\n        expect(result.Versions[1].Version).toEqual('1');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"updates the api using the configuration from the api module","suites":["update","when the lambda project contains a web api"],"line":555,"updatePoint":{"line":555,"column":67,"index":20479},"code":"    it('updates the api using the configuration from the api module', done => {\n      return underTest({\n        source: updateddir\n      }).then(result => {\n        expect(result.url).toEqual('https://' + newObjects.restApi + '.execute-api.' + awsRegion + '.amazonaws.com/latest');\n      }).then(() => {\n        return invoke('latest/echo?name=mike');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.queryStringParameters).toEqual({\n          name: 'mike'\n        });\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: 'latest'\n        });\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"upgrades the function handler from 1.x","suites":["update","when the lambda project contains a web api"],"line":574,"updatePoint":{"line":574,"column":46,"index":21247},"code":"    it('upgrades the function handler from 1.x', done => {\n      lambda.updateFunctionConfiguration({\n        FunctionName: testRunName,\n        Handler: 'main.router'\n      }).promise().then(() => {\n        return underTest({\n          source: updateddir\n        });\n      }).then(result => {\n        expect(result.url).toEqual('https://' + newObjects.restApi + '.execute-api.' + awsRegion + '.amazonaws.com/latest');\n      }).then(() => {\n        return invoke('latest/echo?name=mike');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.queryStringParameters).toEqual({\n          name: 'mike'\n        });\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: 'latest'\n        });\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"works when the source is a relative path","suites":["update","when the lambda project contains a web api"],"line":598,"updatePoint":{"line":598,"column":48,"index":22174},"code":"    it('works when the source is a relative path', done => {\n      process.chdir(path.dirname(updateddir));\n      updateddir = './' + path.basename(updateddir);\n      return underTest({\n        source: updateddir\n      }).then(result => {\n        expect(result.url).toEqual('https://' + newObjects.restApi + '.execute-api.' + awsRegion + '.amazonaws.com/latest');\n      }).then(() => {\n        return invoke('latest/echo?name=mike');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.queryStringParameters).toEqual({\n          name: 'mike'\n        });\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: 'latest'\n        });\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"works with non-reentrant modules","suites":["update","when the lambda project contains a web api"],"line":619,"updatePoint":{"line":619,"column":40,"index":23036},"code":"    it('works with non-reentrant modules', done => {\n      global.MARKED = false;\n      fsUtil.copy('spec/test-projects/non-reentrant', updateddir, true);\n      underTest({\n        source: updateddir\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"when the version is provided, creates the deployment with that name","suites":["update","when the lambda project contains a web api"],"line":626,"updatePoint":{"line":626,"column":75,"index":23311},"code":"    it('when the version is provided, creates the deployment with that name', done => {\n      underTest({\n        source: updateddir,\n        version: 'development'\n      }).then(result => {\n        expect(result.url).toEqual('https://' + newObjects.restApi + '.execute-api.' + awsRegion + '.amazonaws.com/development');\n      }).then(() => {\n        return invoke('development/echo?name=mike');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.queryStringParameters).toEqual({\n          name: 'mike'\n        });\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: 'development'\n        });\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"adds an api config cache if requested","suites":["update","when the lambda project contains a web api"],"line":646,"updatePoint":{"line":646,"column":45,"index":24118},"code":"    it('adds an api config cache if requested', done => {\n      underTest({\n        source: updateddir,\n        version: 'development',\n        'cache-api-config': 'claudiaConfig'\n      }).then(result => {\n        expect(result.url).toEqual('https://' + newObjects.restApi + '.execute-api.' + awsRegion + '.amazonaws.com/development');\n      }).then(() => {\n        return invoke('development/echo?name=mike');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.queryStringParameters).toEqual({\n          name: 'mike'\n        });\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: 'development',\n          claudiaConfig: '-EDMbG0OcNlCZzstFc2jH6rlpI1YDlNYc9YGGxUFuXo='\n        });\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"if using a different version, leaves the old one intact","suites":["update","when the lambda project contains a web api"],"line":668,"updatePoint":{"line":668,"column":63,"index":25061},"code":"    it('if using a different version, leaves the old one intact', done => {\n      underTest({\n        source: updateddir,\n        version: 'development'\n      }).then(() => {\n        return invoke('original/hello');\n      }).then(contents => {\n        expect(contents.body).toEqual('\"hello world\"');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"if using the same version, rewrites the old one","suites":["update","when the lambda project contains a web api"],"line":678,"updatePoint":{"line":678,"column":55,"index":25393},"code":"    it('if using the same version, rewrites the old one', done => {\n      underTest({\n        source: updateddir,\n        version: 'original'\n      }).then(() => {\n        return invoke('original/echo?name=mike');\n      }).then(contents => {\n        const params = JSON.parse(contents.body);\n        expect(params.queryStringParameters).toEqual({\n          name: 'mike'\n        });\n        expect(params.requestContext.httpMethod).toEqual('GET');\n        expect(params.requestContext.resourcePath).toEqual('/echo');\n        expect(params.stageVariables).toEqual({\n          lambdaVersion: 'original'\n        });\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"executes post-deploy if provided with the api","suites":["update","when the lambda project contains a web api"],"line":696,"updatePoint":{"line":696,"column":53,"index":26043},"code":"    it('executes post-deploy if provided with the api', done => {\n      fsUtil.copy('spec/test-projects/api-gw-postdeploy', updateddir, true);\n      underTest({\n        source: updateddir,\n        version: 'development',\n        postcheck: 'option-123',\n        postresult: 'option-result-post'\n      }).then(updateResult => {\n        expect(updateResult.deploy).toEqual({\n          result: 'option-result-post',\n          wasApiCacheUsed: false\n        });\n      }).then(() => {\n        return invoke('postdeploy/hello');\n      }).then(contents => {\n        expect(JSON.parse(contents.body)).toEqual({\n          'postinstallfname': testRunName,\n          'postinstallalias': 'development',\n          'postinstallapiid': newObjects.restApi,\n          'postinstallapiUrl': 'https://' + newObjects.restApi + '.execute-api.' + awsRegion + '.amazonaws.com/development',\n          'hasAWS': 'true',\n          'postinstallregion': awsRegion,\n          'postinstalloption': 'option-123',\n          'lambdaVersion': 'development'\n        });\n      }).then(done, e => {\n        console.log(JSON.stringify(e));\n        done.fail();\n      });\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"passes cache check results to the post-deploy step","suites":["update","when the lambda project contains a web api"],"line":726,"updatePoint":{"line":726,"column":58,"index":27188},"code":"    it('passes cache check results to the post-deploy step', done => {\n      fsUtil.copy('spec/test-projects/api-gw-postdeploy', updateddir, true);\n      underTest({\n        source: updateddir,\n        version: 'development',\n        postcheck: 'option-123',\n        'cache-api-config': 'claudiaConfig',\n        postresult: 'option-result-post'\n      }).then(updateResult => {\n        expect(updateResult.deploy.wasApiCacheUsed).toBeFalsy();\n        return underTest({\n          source: updateddir,\n          version: 'development',\n          postcheck: 'option-123',\n          'cache-api-config': 'claudiaConfig',\n          postresult: 'option-result-post'\n        });\n      }).then(updateResult => {\n        expect(updateResult.deploy.wasApiCacheUsed).toBeTruthy();\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"logs call execution","suites":["update","when the lambda project contains a web api"],"line":748,"updatePoint":{"line":748,"column":25,"index":27969},"code":"  it('logs call execution', done => {\n    const logger = new ArrayLogger();\n    fsUtil.copy('spec/test-projects/api-gw-hello-world', workingdir, true);\n    create({\n      name: testRunName,\n      region: awsRegion,\n      source: workingdir,\n      'api-module': 'main'\n    }).then(result => {\n      newObjects.lambdaRole = result.lambda && result.lambda.role;\n      newObjects.restApi = result.api && result.api.id;\n      newObjects.lambdaFunction = result.lambda && result.lambda.name;\n    }).then(() => {\n      return underTest({\n        source: workingdir,\n        version: 'new'\n      }, logger);\n    }).then(() => {\n      expect(logger.getStageLog(true).filter(entry => {\n        return entry !== 'rate-limited by AWS, waiting before retry';\n      })).toEqual(['loading Lambda config', 'packaging files', 'validating package', 'updating configuration', 'zipping package', 'updating Lambda', 'waiting for lambda resource allocation', 'setting version alias', 'updating REST API']);\n      expect(logger.getApiCallLogForService('lambda', true)).toEqual(['lambda.getFunctionConfiguration', 'lambda.setupRequestListeners', 'lambda.updateFunctionCode', 'lambda.updateAlias', 'lambda.createAlias']);\n      expect(logger.getApiCallLogForService('iam', true)).toEqual([]);\n      expect(logger.getApiCallLogForService('sts', true)).toEqual(['sts.getCallerIdentity', 'sts.setupRequestListeners', 'sts.optInRegionalEndpoint']);\n      expect(logger.getApiCallLogForService('apigateway', true)).toEqual(['apigateway.getRestApi', 'apigateway.setupRequestListeners', 'apigateway.setAcceptHeader', 'apigateway.putRestApi', 'apigateway.getResources', 'apigateway.createResource', 'apigateway.putMethod', 'apigateway.putIntegration', 'apigateway.putMethodResponse', 'apigateway.putIntegrationResponse', 'apigateway.createDeployment']);\n    }).then(done, done.fail);\n  });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"does not change the handler if not provided","suites":["update","handler option support"],"line":789,"updatePoint":{"line":789,"column":51,"index":30351},"code":"    it('does not change the handler if not provided', done => {\n      underTest({\n        source: workingdir,\n        version: 'new'\n      }).then(() => getLambdaConfiguration('new')).then(configuration => expect(configuration.Handler).toEqual('main.handler')).then(() => getLambdaConfiguration()).then(configuration => expect(configuration.Handler).toEqual('main.handler')).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can specify the new handler --handler argument","suites":["update","handler option support"],"line":795,"updatePoint":{"line":795,"column":54,"index":30760},"code":"    it('can specify the new handler --handler argument', done => {\n      fsUtil.copy('spec/test-projects/api-gw-echo', workingdir, true);\n      underTest({\n        source: workingdir,\n        version: 'new',\n        handler: 'main.proxyRouter'\n      }).then(() => getLambdaConfiguration()).then(configuration => expect(configuration.Handler).toEqual('main.proxyRouter')).then(() => getLambdaConfiguration('new')).then(configuration => expect(configuration.Handler).toEqual('main.proxyRouter')).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the lambda code does not export the handler","suites":["update","handler option support"],"line":803,"updatePoint":{"line":803,"column":60,"index":31291},"code":"    it('fails if the lambda code does not export the handler', done => {\n      underTest({\n        source: workingdir,\n        version: 'new',\n        handler: 'main.proxyRouter'\n      }).then(() => done.fail('update succeeded'), error => expect(error).toEqual('main.js does not export method proxyRouter')).then(() => getLambdaConfiguration()).then(configuration => expect(configuration.Handler).toEqual('main.handler')).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"does not change the timeout if not provided","suites":["update","timeout option support"],"line":825,"updatePoint":{"line":825,"column":51,"index":32240},"code":"    it('does not change the timeout if not provided', done => {\n      underTest({\n        source: workingdir,\n        version: 'new'\n      }).then(() => getLambdaConfiguration('new')).then(configuration => expect(configuration.Timeout).toEqual(10)).then(() => getLambdaConfiguration()).then(configuration => expect(configuration.Timeout).toEqual(10)).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if timeout value is < 1","suites":["update","timeout option support"],"line":831,"updatePoint":{"line":831,"column":37,"index":32608},"code":"    it('fails if timeout value is < 1', done => {\n      underTest({\n        source: workingdir,\n        timeout: 0\n      }).then(() => done.fail('update succeeded'), error => expect(error).toEqual('the timeout value provided must be greater than or equal to 1')).then(() => getLambdaConfiguration()).then(configuration => expect(configuration.Timeout).toEqual(10)).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if timeout value is > 900","suites":["update","timeout option support"],"line":837,"updatePoint":{"line":837,"column":39,"index":33006},"code":"    it('fails if timeout value is > 900', done => {\n      underTest({\n        source: workingdir,\n        version: 'new',\n        timeout: 901\n      }).then(() => done.fail('update succeeded'), error => expect(error).toEqual('the timeout value provided must be less than or equal to 900')).then(() => getLambdaConfiguration()).then(configuration => expect(configuration.Timeout).toEqual(10)).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can specify timeout using the --timeout argument","suites":["update","timeout option support"],"line":844,"updatePoint":{"line":844,"column":56,"index":33446},"code":"    it('can specify timeout using the --timeout argument', done => {\n      underTest({\n        source: workingdir,\n        version: 'new',\n        timeout: 40\n      }).then(() => getLambdaConfiguration()).then(lambdaResult => expect(lambdaResult.Timeout).toEqual(40)).then(() => getLambdaConfiguration('new')).then(lambdaResult => expect(lambdaResult.Timeout).toEqual(40)).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"does not change the runtime if not provided","suites":["update","runtime"],"line":868,"updatePoint":{"line":868,"column":51,"index":34421},"code":"    it('does not change the runtime if not provided', done => {\n      underTest({\n        source: workingdir,\n        version: 'new'\n      }).then(() => getLambdaConfiguration('new')).then(lambdaResult => expect(lambdaResult.Runtime).toEqual(initialRuntime)).then(() => getLambdaConfiguration()).then(lambdaResult => expect(lambdaResult.Runtime).toEqual(initialRuntime)).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can update the runtime when requested","suites":["update","runtime"],"line":874,"updatePoint":{"line":874,"column":45,"index":34817},"code":"    it('can update the runtime when requested', done => {\n      underTest({\n        source: workingdir,\n        version: 'new',\n        runtime: newRuntime\n      }).then(() => getLambdaConfiguration('new')).then(lambdaResult => expect(lambdaResult.Runtime).toEqual(newRuntime)).then(() => getLambdaConfiguration()).then(lambdaResult => expect(lambdaResult.Runtime).toEqual(newRuntime)).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"does not change the memory if not provided","suites":["update","memory"],"line":896,"updatePoint":{"line":896,"column":50,"index":35728},"code":"    it('does not change the memory if not provided', done => {\n      underTest({\n        source: workingdir,\n        version: 'new'\n      }).then(() => getLambdaConfiguration('new')).then(configuration => expect(configuration.MemorySize).toEqual(256)).then(() => getLambdaConfiguration()).then(configuration => expect(configuration.MemorySize).toEqual(256)).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if memory value is < ","suites":["update","memory"],"line":902,"updatePoint":{"line":902,"column":62,"index":36129},"code":"    it(`fails if memory value is < ${limits.LAMBDA.MEMORY.MIN}`, done => {\n      underTest({\n        source: workingdir,\n        version: 'new',\n        memory: 64\n      }).then(() => done.fail(`update succeeded`), error => expect(error).toEqual(`the memory value provided must be greater than or equal to ${limits.LAMBDA.MEMORY.MIN}`)).then(() => getLambdaConfiguration()).then(configuration => expect(configuration.MemorySize).toEqual(256)).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if memory value is 0","suites":["update","memory"],"line":909,"updatePoint":{"line":909,"column":34,"index":36575},"code":"    it('fails if memory value is 0', done => {\n      underTest({\n        source: workingdir,\n        version: 'new',\n        memory: 0\n      }).then(() => done.fail(`update succeeded`), error => expect(error).toEqual(`the memory value provided must be greater than or equal to ${limits.LAMBDA.MEMORY.MIN}`)).then(() => getLambdaConfiguration()).then(configuration => expect(configuration.MemorySize).toEqual(256)).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if memory value is > ","suites":["update","memory"],"line":916,"updatePoint":{"line":916,"column":62,"index":37048},"code":"    it(`fails if memory value is > ${limits.LAMBDA.MEMORY.MAX}`, done => {\n      underTest({\n        source: workingdir,\n        version: 'new',\n        memory: limits.LAMBDA.MEMORY.MAX + 64\n      }).then(() => done.fail(`update succeeded`), error => expect(error).toEqual(`the memory value provided must be less than or equal to ${limits.LAMBDA.MEMORY.MAX}`)).then(() => getLambdaConfiguration()).then(configuration => expect(configuration.MemorySize).toEqual(256)).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if memory value is not a multiple of 64","suites":["update","memory"],"line":923,"updatePoint":{"line":923,"column":53,"index":37537},"code":"    it('fails if memory value is not a multiple of 64', done => {\n      underTest({\n        source: workingdir,\n        version: 'new',\n        memory: 130\n      }).then(() => done.fail('update succeeded'), error => expect(error).toEqual('the memory value provided must be a multiple of 64')).then(() => getLambdaConfiguration()).then(configuration => expect(configuration.MemorySize).toEqual(256)).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can specify memory size using the --memory argument","suites":["update","memory"],"line":930,"updatePoint":{"line":930,"column":59,"index":37973},"code":"    it('can specify memory size using the --memory argument', done => {\n      underTest({\n        source: workingdir,\n        version: 'new',\n        memory: limits.LAMBDA.MEMORY.MAX\n      }).then(() => getLambdaConfiguration('new')).then(configuration => expect(configuration.MemorySize).toEqual(limits.LAMBDA.MEMORY.MAX)).then(() => getLambdaConfiguration()).then(configuration => expect(configuration.MemorySize).toEqual(limits.LAMBDA.MEMORY.MAX)).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"does not change environment variables if set-env not provided","suites":["update","environment variables"],"line":959,"updatePoint":{"line":959,"column":69,"index":39251},"code":"    it('does not change environment variables if set-env not provided', done => {\n      return underTest({\n        source: workingdir,\n        version: 'new'\n      }, logger).then(() => getLambdaConfiguration('new')).then(configuration => {\n        expect(configuration.Environment).toEqual({\n          Variables: {\n            'XPATH': '/var/www',\n            'YPATH': '/var/lib'\n          }\n        });\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Qualifier: 'new',\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => {\n        const env = JSON.parse(result.Payload);\n        expect(Object.keys(env).filter(nonStandard).sort()).toEqual(['XPATH', 'YPATH']);\n        expect(env.XPATH).toEqual('/var/www');\n        expect(env.YPATH).toEqual('/var/lib');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"changes environment variables if set-env is provided","suites":["update","environment variables"],"line":983,"updatePoint":{"line":983,"column":60,"index":40128},"code":"    it('changes environment variables if set-env is provided', done => {\n      return underTest({\n        source: workingdir,\n        version: 'new',\n        'set-env': 'XPATH=/opt,ZPATH=/usr'\n      }, logger).then(() => getLambdaConfiguration('new')).then(configuration => {\n        expect(configuration.Environment).toEqual({\n          Variables: {\n            'XPATH': '/opt',\n            'ZPATH': '/usr'\n          }\n        });\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Qualifier: 'new',\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => {\n        const env = JSON.parse(result.Payload);\n        expect(Object.keys(env).filter(nonStandard).sort()).toEqual(['XPATH', 'ZPATH']);\n        expect(env.XPATH).toEqual('/opt');\n        expect(env.YPATH).toBeFalsy();\n        expect(env.ZPATH).toEqual('/usr');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"merges env variables if update-env is provided","suites":["update","environment variables"],"line":1009,"updatePoint":{"line":1009,"column":54,"index":41066},"code":"    it('merges env variables if update-env is provided', done => {\n      return underTest({\n        source: workingdir,\n        version: 'new',\n        'update-env': 'XPATH=/opt,ZPATH=/usr'\n      }).then(() => getLambdaConfiguration('new')).then(configuration => {\n        expect(configuration.Environment).toEqual({\n          Variables: {\n            'XPATH': '/opt',\n            'YPATH': '/var/lib',\n            'ZPATH': '/usr'\n          }\n        });\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Qualifier: 'new',\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => {\n        const env = JSON.parse(result.Payload);\n        expect(Object.keys(env).filter(nonStandard).sort()).toEqual(['XPATH', 'YPATH', 'ZPATH']);\n        expect(env.XPATH).toEqual('/opt');\n        expect(env.YPATH).toEqual('/var/lib');\n        expect(env.ZPATH).toEqual('/usr');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"changes env variables specified in a JSON file","suites":["update","environment variables"],"line":1036,"updatePoint":{"line":1036,"column":54,"index":42049},"code":"    it('changes env variables specified in a JSON file', done => {\n      const envpath = path.join(workingdir, 'env.json');\n      fs.writeFileSync(envpath, JSON.stringify({\n        'XPATH': '/opt',\n        'ZPATH': '/usr'\n      }), 'utf8');\n      return underTest({\n        source: workingdir,\n        version: 'new',\n        'set-env-from-json': envpath\n      }, logger).then(() => getLambdaConfiguration('new')).then(configuration => {\n        expect(configuration.Environment).toEqual({\n          Variables: {\n            'XPATH': '/opt',\n            'ZPATH': '/usr'\n          }\n        });\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Qualifier: 'new',\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => {\n        const env = JSON.parse(result.Payload);\n        expect(Object.keys(env).filter(nonStandard).sort()).toEqual(['XPATH', 'ZPATH']);\n        expect(env.XPATH).toEqual('/opt');\n        expect(env.YPATH).toBeFalsy();\n        expect(env.ZPATH).toEqual('/usr');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"updates env variables specified in a JSON file if update-env-from-json is provided","suites":["update","environment variables"],"line":1067,"updatePoint":{"line":1067,"column":90,"index":43191},"code":"    it('updates env variables specified in a JSON file if update-env-from-json is provided', done => {\n      const envpath = path.join(workingdir, 'env.json');\n      fs.writeFileSync(envpath, JSON.stringify({\n        'XPATH': '/opt',\n        'ZPATH': '/usr'\n      }), 'utf8');\n      return underTest({\n        source: workingdir,\n        version: 'new',\n        'update-env-from-json': envpath\n      }, logger).then(() => getLambdaConfiguration('new')).then(configuration => {\n        expect(configuration.Environment).toEqual({\n          Variables: {\n            'XPATH': '/opt',\n            'YPATH': '/var/lib',\n            'ZPATH': '/usr'\n          }\n        });\n      }).then(() => {\n        return lambda.invoke({\n          FunctionName: testRunName,\n          Qualifier: 'new',\n          InvocationType: 'RequestResponse'\n        }).promise();\n      }).then(result => {\n        const env = JSON.parse(result.Payload);\n        expect(Object.keys(env).filter(nonStandard).sort()).toEqual(['XPATH', 'YPATH', 'ZPATH']);\n        expect(env.XPATH).toEqual('/opt');\n        expect(env.YPATH).toEqual('/var/lib');\n        expect(env.ZPATH).toEqual('/usr');\n      }).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"refuses to work if reading the variables fails","suites":["update","environment variables"],"line":1099,"updatePoint":{"line":1099,"column":54,"index":44350},"code":"    it('refuses to work if reading the variables fails', done => {\n      return underTest({\n        source: workingdir,\n        version: 'new',\n        'set-env': 'XPATH,ZPATH=/usr'\n      }, logger).then(done.fail, message => {\n        expect(message).toEqual('Cannot read variables from set-env, Invalid CSV element XPATH');\n        expect(logger.getApiCallLogForService('lambda', true)).toEqual([]);\n        expect(logger.getApiCallLogForService('iam', true)).toEqual([]);\n        done();\n      });\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"loads up the environment variables while validating the package to allow any code that expects them to initialize -- fix for https://github.com/claudiajs/claudia/issues/96","suites":["update","environment variables"],"line":1111,"updatePoint":{"line":1111,"column":179,"index":44984},"code":"    it('loads up the environment variables while validating the package to allow any code that expects them to initialize -- fix for https://github.com/claudiajs/claudia/issues/96', done => {\n      fsUtil.copy('spec/test-projects/throw-if-not-env', workingdir, true);\n      process.env.TEST_VAR = '';\n      underTest({\n        source: workingdir,\n        version: 'new',\n        'set-env': 'TEST_VAR=abc'\n      }, logger).then(done, done.fail);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"attaches no layers by default","suites":["update","layer support","when updating a function without layers"],"line":1156,"updatePoint":{"line":1156,"column":39,"index":46943},"code":"      it('attaches no layers by default', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new'\n        }).then(() => getLambdaConfiguration('new')).then(configuration => expect(configuration.Layers).toBeFalsy()).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can replace layer with --layers","suites":["update","layer support","when updating a function without layers"],"line":1162,"updatePoint":{"line":1162,"column":41,"index":47229},"code":"      it('can replace layer with --layers', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new',\n          'layers': layers[0].LayerVersionArn\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.Layers.map(l => l.Arn)).toEqual([layers[0].LayerVersionArn]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can replace multple layers with --layers","suites":["update","layer support","when updating a function without layers"],"line":1171,"updatePoint":{"line":1171,"column":50,"index":47635},"code":"      it('can replace multple layers with --layers', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new',\n          'layers': layers[0].LayerVersionArn + ',' + layers[1].LayerVersionArn\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.Layers.map(l => l.Arn)).toEqual([layers[0].LayerVersionArn, layers[1].LayerVersionArn]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can add a single layer with --add-layers","suites":["update","layer support","when updating a function without layers"],"line":1180,"updatePoint":{"line":1180,"column":50,"index":48102},"code":"      it('can add a single layer with --add-layers', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new',\n          'add-layers': layers[0].LayerVersionArn\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.Layers.map(l => l.Arn)).toEqual([layers[0].LayerVersionArn]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can add multiple layers with --add-layers","suites":["update","layer support","when updating a function without layers"],"line":1189,"updatePoint":{"line":1189,"column":51,"index":48513},"code":"      it('can add multiple layers with --add-layers', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new',\n          'add-layers': layers[0].LayerVersionArn + ',' + layers[1].LayerVersionArn\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.Layers.map(l => l.Arn)).toEqual([layers[0].LayerVersionArn, layers[1].LayerVersionArn]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"retains old layers if no layer options specified","suites":["update","layer support","when updating a function with a layers"],"line":1214,"updatePoint":{"line":1214,"column":58,"index":49622},"code":"      it('retains old layers if no layer options specified', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new'\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.Layers.map(l => l.Arn)).toEqual([layers[0].LayerVersionArn, layers[1].LayerVersionArn]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"replaces all layers with --layers","suites":["update","layer support","when updating a function with a layers"],"line":1222,"updatePoint":{"line":1222,"column":43,"index":50001},"code":"      it('replaces all layers with --layers', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new',\n          'layers': layers[2].LayerVersionArn\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.Layers.map(l => l.Arn)).toEqual([layers[2].LayerVersionArn]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can replace multple layers with --layers","suites":["update","layer support","when updating a function with a layers"],"line":1231,"updatePoint":{"line":1231,"column":50,"index":50407},"code":"      it('can replace multple layers with --layers', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new',\n          'layers': layers[2].LayerVersionArn + ',' + layers[3].LayerVersionArn\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.Layers.map(l => l.Arn)).toEqual([layers[2].LayerVersionArn, layers[3].LayerVersionArn]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can add a single layer with --add-layers","suites":["update","layer support","when updating a function with a layers"],"line":1240,"updatePoint":{"line":1240,"column":50,"index":50874},"code":"      it('can add a single layer with --add-layers', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new',\n          'add-layers': layers[2].LayerVersionArn\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.Layers.map(l => l.Arn)).toEqual([layers[0].LayerVersionArn, layers[1].LayerVersionArn, layers[2].LayerVersionArn]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can add multiple layers with --add-layers","suites":["update","layer support","when updating a function with a layers"],"line":1249,"updatePoint":{"line":1249,"column":51,"index":51339},"code":"      it('can add multiple layers with --add-layers', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new',\n          'add-layers': layers[2].LayerVersionArn + ',' + layers[3].LayerVersionArn\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.Layers.map(l => l.Arn)).toEqual([layers[0].LayerVersionArn, layers[1].LayerVersionArn, layers[2].LayerVersionArn, layers[3].LayerVersionArn]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can remove a layer with --remove-layers","suites":["update","layer support","when updating a function with a layers"],"line":1258,"updatePoint":{"line":1258,"column":49,"index":51863},"code":"      it('can remove a layer with --remove-layers', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new',\n          'remove-layers': layers[1].LayerVersionArn\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.Layers.map(l => l.Arn)).toEqual([layers[0].LayerVersionArn]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can remove multiple layers with --remove-layers","suites":["update","layer support","when updating a function with a layers"],"line":1267,"updatePoint":{"line":1267,"column":57,"index":52283},"code":"      it('can remove multiple layers with --remove-layers', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new',\n          'remove-layers': layers[1].LayerVersionArn + ',' + layers[0].LayerVersionArn\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.Layers).toBeFalsy();\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can mix adding and removing layers","suites":["update","layer support","when updating a function with a layers"],"line":1276,"updatePoint":{"line":1276,"column":44,"index":52683},"code":"      it('can mix adding and removing layers', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new',\n          'remove-layers': layers[1].LayerVersionArn,\n          'add-layers': layers[2].LayerVersionArn\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.Layers.map(l => l.Arn)).toEqual([layers[0].LayerVersionArn, layers[2].LayerVersionArn]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"does not remove the DLQ configuration if not repeated","suites":["update","dead letter queue support","when the original function had a dlq"],"line":1318,"updatePoint":{"line":1318,"column":63,"index":54390},"code":"      it('does not remove the DLQ configuration if not repeated', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new'\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.DeadLetterConfig).toEqual({\n            TargetArn: snsTopicArn\n          });\n          return configuration.Role;\n        }).then(roleArn => {\n          const roleName = roleArn.split(':')[5].split('/')[1];\n          return iam.getRolePolicy({\n            PolicyName: 'dlq-publisher',\n            RoleName: roleName\n          }).promise();\n        }).then(policy => {\n          expect(JSON.parse(decodeURIComponent(policy.PolicyDocument)).Statement).toEqual([{\n            Effect: 'Allow',\n            Action: ['sns:Publish'],\n            Resource: [snsTopicArn]\n          }]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"updates the dlq topic and policy if requested by ARN","suites":["update","dead letter queue support","when the original function had a dlq"],"line":1341,"updatePoint":{"line":1341,"column":62,"index":55277},"code":"      it('updates the dlq topic and policy if requested by ARN', done => {\n        return underTest({\n          source: workingdir,\n          'dlq-sns': secondSnsTopicArn,\n          version: 'new'\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.DeadLetterConfig).toEqual({\n            TargetArn: secondSnsTopicArn\n          });\n          return configuration.Role;\n        }).then(roleArn => {\n          const roleName = roleArn.split(':')[5].split('/')[1];\n          return iam.getRolePolicy({\n            PolicyName: 'dlq-publisher',\n            RoleName: roleName\n          }).promise();\n        }).then(policy => {\n          expect(JSON.parse(decodeURIComponent(policy.PolicyDocument)).Statement).toEqual([{\n            Effect: 'Allow',\n            Action: ['sns:Publish'],\n            Resource: [secondSnsTopicArn]\n          }]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"updates the dlq topic and policy if requested by name","suites":["update","dead letter queue support","when the original function had a dlq"],"line":1365,"updatePoint":{"line":1365,"column":63,"index":56217},"code":"      it('updates the dlq topic and policy if requested by name', done => {\n        return underTest({\n          source: workingdir,\n          'dlq-sns': secondSnsTopicName,\n          version: 'new'\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.DeadLetterConfig).toEqual({\n            TargetArn: secondSnsTopicArn\n          });\n          return configuration.Role;\n        }).then(roleArn => {\n          const roleName = roleArn.split(':')[5].split('/')[1];\n          return iam.getRolePolicy({\n            PolicyName: 'dlq-publisher',\n            RoleName: roleName\n          }).promise();\n        }).then(policy => {\n          expect(JSON.parse(decodeURIComponent(policy.PolicyDocument)).Statement).toEqual([{\n            Effect: 'Allow',\n            Action: ['sns:Publish'],\n            Resource: [secondSnsTopicArn]\n          }]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"does not add the DLQ configuration if not requested","suites":["update","dead letter queue support","when the original function did not have a dlq"],"line":1403,"updatePoint":{"line":1403,"column":61,"index":57691},"code":"      it('does not add the DLQ configuration if not requested', done => {\n        return underTest({\n          source: workingdir,\n          version: 'new'\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.DeadLetterConfig).toBeFalsy();\n          return configuration.Role;\n        }).then(roleArn => {\n          const roleName = roleArn.split(':')[5].split('/')[1];\n          return iam.listRolePolicies({\n            RoleName: roleName\n          }).promise();\n        }).then(result => {\n          expect(result.PolicyNames.find(t => t === 'dlq-publisher')).toBeFalsy();\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"updates the dlq topic and policy if requested by ARN","suites":["update","dead letter queue support","when the original function did not have a dlq"],"line":1419,"updatePoint":{"line":1419,"column":62,"index":58367},"code":"      it('updates the dlq topic and policy if requested by ARN', done => {\n        return underTest({\n          source: workingdir,\n          'dlq-sns': secondSnsTopicArn,\n          version: 'new'\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.DeadLetterConfig).toEqual({\n            TargetArn: secondSnsTopicArn\n          });\n          return configuration.Role;\n        }).then(roleArn => {\n          const roleName = roleArn.split(':')[5].split('/')[1];\n          return iam.getRolePolicy({\n            PolicyName: 'dlq-publisher',\n            RoleName: roleName\n          }).promise();\n        }).then(policy => {\n          expect(JSON.parse(decodeURIComponent(policy.PolicyDocument)).Statement).toEqual([{\n            Effect: 'Allow',\n            Action: ['sns:Publish'],\n            Resource: [secondSnsTopicArn]\n          }]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"updates the dlq topic and policy if requested by name","suites":["update","dead letter queue support","when the original function did not have a dlq"],"line":1443,"updatePoint":{"line":1443,"column":63,"index":59307},"code":"      it('updates the dlq topic and policy if requested by name', done => {\n        return underTest({\n          source: workingdir,\n          'dlq-sns': secondSnsTopicName,\n          version: 'new'\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.DeadLetterConfig).toEqual({\n            TargetArn: secondSnsTopicArn\n          });\n          return configuration.Role;\n        }).then(roleArn => {\n          const roleName = roleArn.split(':')[5].split('/')[1];\n          return iam.getRolePolicy({\n            PolicyName: 'dlq-publisher',\n            RoleName: roleName\n          }).promise();\n        }).then(policy => {\n          expect(JSON.parse(decodeURIComponent(policy.PolicyDocument)).Statement).toEqual([{\n            Effect: 'Allow',\n            Action: ['sns:Publish'],\n            Resource: [secondSnsTopicArn]\n          }]);\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"does not patch the role while adding the dlq if skip-iam is set","suites":["update","dead letter queue support","when a role is provided during create"],"line":1492,"updatePoint":{"line":1492,"column":73,"index":61197},"code":"      it('does not patch the role while adding the dlq if skip-iam is set', done => {\n        return underTest({\n          source: workingdir,\n          'dlq-sns': snsTopicArn,\n          version: 'new',\n          'skip-iam': true\n        }).then(() => getLambdaConfiguration('new')).then(configuration => {\n          expect(configuration.DeadLetterConfig).toEqual({\n            TargetArn: snsTopicArn\n          });\n          return configuration.Role;\n        }).then(roleArn => {\n          const roleName = roleArn.split(':')[5].split('/')[1];\n          return iam.listRolePolicies({\n            RoleName: roleName\n          }).promise();\n        }).then(result => {\n          expect(result.PolicyNames.find(t => t === 'dlq-publisher')).toBeFalsy();\n        }).then(done, done.fail);\n      });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"does not change the architecture if not provided","suites":["update","architectures"],"line":1526,"updatePoint":{"line":1526,"column":56,"index":62431},"code":"    it('does not change the architecture if not provided', async () => {\n      await underTest({\n        source: workingdir,\n        version: 'new'\n      });\n      const configuration = await getLambdaConfiguration('new');\n      expect(configuration.Architectures).toEqual(['x86_64']);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"fails if arch are specified but invalid","suites":["update","architectures"],"line":1534,"updatePoint":{"line":1534,"column":47,"index":62716},"code":"    it(`fails if arch are specified but invalid`, async () => {\n      try {\n        await underTest({\n          source: workingdir,\n          version: 'new',\n          arch: 'arm65'\n        });\n        fail('did not throw');\n      } catch (e) {\n        expect(e).toEqual(`--arch should specify either 'x86_64' or 'arm64'`);\n      }\n      const configuration = await getLambdaConfiguration();\n      expect(configuration.Architectures).toEqual(['x86_64']);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"can specify architecture size using the --arch argument","suites":["update","architectures"],"line":1548,"updatePoint":{"line":1548,"column":63,"index":63195},"code":"    it('can specify architecture size using the --arch argument', async () => {\n      await underTest({\n        source: workingdir,\n        version: 'new',\n        arch: 'arm64'\n      });\n      const result = await getLambdaConfiguration('new');\n      expect(result.Architectures).toEqual(['arm64']);\n    });","file":"update-spec.js","skipped":false,"dir":"spec"},{"name":"invokes the question without resolving the promise","suites":["ask"],"line":11,"updatePoint":{"line":11,"column":56,"index":368},"code":"  it('invokes the question without resolving the promise', done => {\n    fakeReadline.question.and.callFake(prompt => {\n      expect(readline.createInterface).toHaveBeenCalledWith({\n        input: process.stdin,\n        output: process.stdout\n      });\n      expect(prompt).toEqual('Hi there ');\n      done();\n    });\n    ask('Hi there').then(done.fail, done.fail);\n  });","file":"util/ask-spec.js","skipped":false,"dir":"spec"},{"name":"rejects when the question throws error","suites":["ask"],"line":22,"updatePoint":{"line":22,"column":44,"index":728},"code":"  it('rejects when the question throws error', done => {\n    fakeReadline.question.and.throwError('BOOM');\n    ask('Hi').then(done.fail, err => expect(err.message).toEqual('BOOM')).then(done);\n  });","file":"util/ask-spec.js","skipped":false,"dir":"spec"},{"name":"rejects when the value is blank","suites":["ask"],"line":26,"updatePoint":{"line":26,"column":37,"index":920},"code":"  it('rejects when the value is blank', done => {\n    fakeReadline.question.and.callFake((prompt, callback) => callback(''));\n    ask('Number').then(done.fail, err => expect(err).toEqual('Number must be provided')).then(done);\n  });","file":"util/ask-spec.js","skipped":false,"dir":"spec"},{"name":"resolves with the value","suites":["ask"],"line":30,"updatePoint":{"line":30,"column":29,"index":1145},"code":"  it('resolves with the value', done => {\n    fakeReadline.question.and.callFake((prompt, callback) => callback('838'));\n    ask('Number').then(val => expect(val).toEqual('838')).then(done, done.fail);\n  });","file":"util/ask-spec.js","skipped":false,"dir":"spec"},{"name":"merges an array with first and removes elements from second csv list","suites":["combineLists"],"line":5,"updatePoint":{"line":5,"column":74,"index":187},"code":"  it('merges an array with first and removes elements from second csv list', () => {\n    expect(combineLists(['1a', '1b', '1c'], '2a,2b', '1c,1a')).toEqual(['1b', '2a', '2b']);\n  });","file":"util/combine-lists-spec.js","skipped":false,"dir":"spec"},{"name":"works without the initial list being set","suites":["combineLists"],"line":8,"updatePoint":{"line":8,"column":46,"index":342},"code":"  it('works without the initial list being set', () => {\n    expect(combineLists([], '2a,2b', '')).toEqual(['2a', '2b']);\n    expect(combineLists(undefined, '2a,2b', false)).toEqual(['2a', '2b']);\n  });","file":"util/combine-lists-spec.js","skipped":false,"dir":"spec"},{"name":"works without the additional list being set","suites":["combineLists"],"line":12,"updatePoint":{"line":12,"column":49,"index":548},"code":"  it('works without the additional list being set', () => {\n    expect(combineLists(['1a', '1b', '1c'], '', '1c,1a')).toEqual(['1b']);\n    expect(combineLists(['1a', '1b', '1c'], false, '')).toEqual(['1a', '1b', '1c']);\n  });","file":"util/combine-lists-spec.js","skipped":false,"dir":"spec"},{"name":"works without the removal list being set","suites":["combineLists"],"line":16,"updatePoint":{"line":16,"column":46,"index":771},"code":"  it('works without the removal list being set', () => {\n    expect(combineLists(['1a', '1b', '1c'], '2a,2b', '')).toEqual(['1a', '1b', '1c', '2a', '2b']);\n    expect(combineLists(['1a', '1b', '1c'], '2a,2b', false)).toEqual(['1a', '1b', '1c', '2a', '2b']);\n    expect(combineLists([], '2a,2b', false)).toEqual(['2a', '2b']);\n  });","file":"util/combine-lists-spec.js","skipped":false,"dir":"spec"},{"name":"works without any arguments","suites":["combineLists"],"line":21,"updatePoint":{"line":21,"column":33,"index":1090},"code":"  it('works without any arguments', () => {\n    expect(combineLists()).toEqual([]);\n  });","file":"util/combine-lists-spec.js","skipped":false,"dir":"spec"},{"name":"returns falsy if neither mfa-serial or sts-role-arn are passed","suites":["stsParams"],"line":5,"updatePoint":{"line":5,"column":68,"index":172},"code":"  it('returns falsy if neither mfa-serial or sts-role-arn are passed', () => {\n    expect(stsParams({\n      'mfa-token': 'xxxx'\n    })).toBeFalsy();\n  });","file":"util/sts-params-spec.js","skipped":false,"dir":"spec"},{"name":"returns only the role arn if sts-role-arn is passed but no mfa-serial","suites":["stsParams"],"line":10,"updatePoint":{"line":10,"column":75,"index":334},"code":"  it('returns only the role arn if sts-role-arn is passed but no mfa-serial', () => {\n    expect(stsParams({\n      'sts-role-arn': 'rolearn'\n    })).toEqual({\n      params: {\n        RoleArn: 'rolearn'\n      }\n    });\n    expect(stsParams({\n      'sts-role-arn': 'rolearn',\n      'mfa-token': 'xxxx'\n    })).toEqual({\n      params: {\n        RoleArn: 'rolearn'\n      }\n    });\n  });","file":"util/sts-params-spec.js","skipped":false,"dir":"spec"},{"name":"returns a fixed token function with serial if mfa-serial and mfa-token are provided","suites":["stsParams"],"line":27,"updatePoint":{"line":27,"column":89,"index":731},"code":"  it('returns a fixed token function with serial if mfa-serial and mfa-token are provided', () => {\n    const result = stsParams({\n        'mfa-serial': 'serialnumber',\n        'mfa-token': 'xxxx'\n      }),\n      callback = jasmine.createSpy('callback');\n    expect(result.params).toEqual({\n      SerialNumber: 'serialnumber'\n    });\n    result.tokenCodeFn('serial', callback);\n    expect(callback).toHaveBeenCalledWith(null, 'xxxx');\n  });","file":"util/sts-params-spec.js","skipped":false,"dir":"spec"},{"name":"includes mfa-duration as DurationSeconds","suites":["stsParams"],"line":39,"updatePoint":{"line":39,"column":46,"index":1129},"code":"  it('includes mfa-duration as DurationSeconds', () => {\n    const result = stsParams({\n      'mfa-serial': 'serialnumber',\n      'mfa-duration': 600\n    });\n    expect(result.params.DurationSeconds).toEqual(600);\n  });","file":"util/sts-params-spec.js","skipped":false,"dir":"spec"},{"name":"returns a role with serial and mfa-token if both sts-role-arn and mfa-serial are defined","suites":["stsParams"],"line":46,"updatePoint":{"line":46,"column":94,"index":1397},"code":"  it('returns a role with serial and mfa-token if both sts-role-arn and mfa-serial are defined', () => {\n    const result = stsParams({\n        'sts-role-arn': 'rolearn',\n        'mfa-serial': 'serialnumber',\n        'mfa-token': 'xxxx'\n      }),\n      callback = jasmine.createSpy('callback');\n    expect(result.params).toEqual({\n      RoleArn: 'rolearn',\n      SerialNumber: 'serialnumber'\n    });\n    result.tokenCodeFn('serial', callback);\n    expect(callback).toHaveBeenCalledWith(null, 'xxxx');\n  });","file":"util/sts-params-spec.js","skipped":false,"dir":"spec"},{"name":"asks the user for the token","suites":["stsParams","if mfa-serial is set but no mfa-token"],"line":73,"updatePoint":{"line":73,"column":35,"index":2246},"code":"    it('asks the user for the token', done => {\n      const callback = jasmine.createSpy('callback').and.callFake(() => {\n        expect(ask).toHaveBeenCalledWith('Please enter the code for MFA device XXX-YYY:');\n        done();\n      });\n      result.tokenCodeFn('XXX-YYY', callback);\n      askResolve('x');\n    });","file":"util/sts-params-spec.js","skipped":false,"dir":"spec"},{"name":"returns the token when ask resolves","suites":["stsParams","if mfa-serial is set but no mfa-token"],"line":81,"updatePoint":{"line":81,"column":43,"index":2571},"code":"    it('returns the token when ask resolves', done => {\n      const callback = jasmine.createSpy('callback').and.callFake((err, token) => {\n        expect(err).toBeFalsy();\n        expect(token).toEqual('0123456');\n        done();\n      });\n      result.tokenCodeFn('serial number', callback);\n      askResolve('0123456');\n    });","file":"util/sts-params-spec.js","skipped":false,"dir":"spec"},{"name":"returns error when ask rejects","suites":["stsParams","if mfa-serial is set but no mfa-token"],"line":90,"updatePoint":{"line":90,"column":38,"index":2897},"code":"    it('returns error when ask rejects', done => {\n      const callback = jasmine.createSpy('callback').and.callFake((err, token) => {\n        expect(err).toEqual('boom!');\n        expect(token).toBeFalsy();\n        done();\n      });\n      result.tokenCodeFn('serial number', callback);\n      askReject('boom!');\n    });","file":"util/sts-params-spec.js","skipped":false,"dir":"spec"},{"name":"recognises ARN masks","suites":["validCredentials"],"line":48,"updatePoint":{"line":48,"column":26,"index":3542},"code":"  it('recognises ARN masks', () => {\n    expect(validCredentials('arn:aws:iam::*:role/apigAwsProxyRole')).toBeTruthy();\n    expect(validCredentials('arn:aws:iam::*:user/*')).toBeTruthy();\n    expect(validCredentials('arn:aws:iam::*:role/*')).toBeTruthy();\n  });","file":"valid-credentials-spec.js","skipped":false,"dir":"spec"},{"name":"recognises true","suites":["validCredentials"],"line":53,"updatePoint":{"line":53,"column":21,"index":3799},"code":"  it('recognises true', () => {\n    expect(validCredentials(true)).toBeTruthy();\n  });","file":"valid-credentials-spec.js","skipped":false,"dir":"spec"},{"name":"does not recognise invalid format","suites":["validCredentials"],"line":56,"updatePoint":{"line":56,"column":39,"index":3904},"code":"  it('does not recognise invalid format', () => {\n    expect(validCredentials('xxx:aws:iam::*:role/apigAwsProxyRole')).toBeFalsy();\n    expect(validCredentials('arn:aws:iam::*')).toBeFalsy();\n    expect(validCredentials('arn:aws:iam:*:role/*')).toBeFalsy();\n  });","file":"valid-credentials-spec.js","skipped":false,"dir":"spec"},{"name":"does not recognise non string truthy values","suites":["validCredentials"],"line":61,"updatePoint":{"line":61,"column":49,"index":4178},"code":"  it('does not recognise non string truthy values', () => {\n    expect(validCredentials([])).toBeFalsy();\n    expect(validCredentials({\n      a: 1\n    })).toBeFalsy();\n  });","file":"valid-credentials-spec.js","skipped":false,"dir":"spec"},{"name":"fails if router require fails","suites":["validatePackage","when the handler is set without api module"],"line":7,"updatePoint":{"line":7,"column":37,"index":242},"code":"    it('fails if router require fails', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/echo-dependency-problem'), 'main.handler');\n      }).toThrow('cannot require ./main after clean installation. Check your dependencies.');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the main module does not export the handler method","suites":["validatePackage","when the handler is set without api module"],"line":12,"updatePoint":{"line":12,"column":67,"index":541},"code":"    it('fails if the main module does not export the handler method', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/echo'), 'main.nonhandler');\n      }).toThrow('main.js does not export method nonhandler');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"returns package dir if the handler corresponds to the exported method","suites":["validatePackage","when the handler is set without api module"],"line":17,"updatePoint":{"line":17,"column":77,"index":803},"code":"    it('returns package dir if the handler corresponds to the exported method', () => {\n      const dir = path.join(__dirname, 'test-projects/echo');\n      expect(underTest(dir, 'main.handler')).toEqual(dir);\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if router require fails","suites":["validatePackage","when the rest api module is set"],"line":23,"updatePoint":{"line":23,"column":37,"index":1040},"code":"    it('fails if router require fails', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/echo-dependency-problem'), 'main.handler', 'main');\n      }).toThrow('cannot require ./main after clean installation. Check your dependencies.');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the main module does not export the router method","suites":["validatePackage","when the rest api module is set"],"line":28,"updatePoint":{"line":28,"column":66,"index":1346},"code":"    it('fails if the main module does not export the router method', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/echo'), 'main.proxyRouter', 'main');\n      }).toThrow('main.js does not export a Claudia API Builder instance');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the main module does not configure any API methods","suites":["validatePackage","when the rest api module is set"],"line":33,"updatePoint":{"line":33,"column":67,"index":1620},"code":"    it('fails if the main module does not configure any API methods', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/empty-api'), 'main.proxyRouter', 'main');\n      }).toThrow('main.js does not configure any API methods');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the api version is too old","suites":["validatePackage","when the rest api module is set"],"line":38,"updatePoint":{"line":38,"column":43,"index":1863},"code":"    it('fails if the api version is too old', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/old-api'), 'main.proxyRouter', 'main');\n      }).toThrow('main.js uses an unsupported API version. Upgrade your claudia-api-builder or claudia-bot-builder dependency');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the api version is more recent than claudia","suites":["validatePackage","when the rest api module is set"],"line":43,"updatePoint":{"line":43,"column":60,"index":2186},"code":"    it('fails if the api version is more recent than claudia', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/future-api'), 'main.proxyRouter', 'main');\n      }).toThrow('main.js requires a newer version of claudia. Upgrade your claudia installation');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"returns package dir if the handler corresponds to the exported method","suites":["validatePackage","when the rest api module is set"],"line":48,"updatePoint":{"line":48,"column":77,"index":2500},"code":"    it('returns package dir if the handler corresponds to the exported method', () => {\n      const dir = path.join(__dirname, 'test-projects/api-gw-echo');\n      expect(underTest(dir, 'main.proxyRouter', 'main')).toEqual(dir);\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the headers are specified with defaults as an empty object","suites":["validatePackage","when the rest api module is set"],"line":52,"updatePoint":{"line":52,"column":75,"index":2734},"code":"    it('fails if the headers are specified with defaults as an empty object', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-success-headers-empty'), 'main.proxyRouter', 'main');\n      }).toThrow('main.js GET /echo requests custom headers but does not enumerate any headers');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the headers are specified with defaults as an empty object","suites":["validatePackage","when the rest api module is set"],"line":57,"updatePoint":{"line":57,"column":75,"index":3062},"code":"    it('fails if the headers are specified with defaults as an empty object', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-headers-empty'), 'main.proxyRouter', 'main');\n      }).toThrow('main.js GET /echo error template requests custom headers but does not enumerate any headers');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if the headers are specified with defaults as an empty object","suites":["validatePackage","when the rest api module is set"],"line":62,"updatePoint":{"line":62,"column":75,"index":3403},"code":"    it('fails if the headers are specified with defaults as an empty object', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-headers-no-defaults'), 'main.proxyRouter', 'main');\n      }).toThrow('main.js GET /echo error template requests custom headers but does not provide defaults');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if a method requests an undefined authorizer","suites":["validatePackage","when the rest api module is set"],"line":67,"updatePoint":{"line":67,"column":58,"index":3728},"code":"    it('fails if a method requests an undefined authorizer', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-authorizer-validation'), 'undefined_authorizer.proxyRouter', 'undefined_authorizer');\n      }).toThrow('undefined_authorizer.js GET /echo requests an undefined custom authorizer customA');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if a method requests an authorizer but no authorizers defined","suites":["validatePackage","when the rest api module is set"],"line":72,"updatePoint":{"line":72,"column":75,"index":4099},"code":"    it('fails if a method requests an authorizer but no authorizers defined', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-authorizer-validation'), 'no_authorizers.proxyRouter', 'no_authorizers');\n      }).toThrow('no_authorizers.js GET /echo requests an undefined custom authorizer customA');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if an authorizer is not configured with either lambda name or arn or providerArn","suites":["validatePackage","when the rest api module is set"],"line":77,"updatePoint":{"line":77,"column":94,"index":4471},"code":"    it('fails if an authorizer is not configured with either lambda name or arn or providerArn', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-authorizer-validation'), 'misconfigured_authorizer.proxyRouter', 'misconfigured_authorizer');\n      }).toThrow('misconfigured_authorizer.js authorizer first requires either lambdaName or lambdaArn or providerARNs');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if an authorizer is configured with both lambda name and arn","suites":["validatePackage","when the rest api module is set"],"line":82,"updatePoint":{"line":82,"column":74,"index":4868},"code":"    it('fails if an authorizer is configured with both lambda name and arn', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-authorizer-validation'), 'overconfigured_authorizer.proxyRouter', 'overconfigured_authorizer');\n      }).toThrow('overconfigured_authorizer.js authorizer first is ambiguous - both lambdaName or lambdaArn are defined');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if an authorizer is configured with version and arn","suites":["validatePackage","when the rest api module is set"],"line":87,"updatePoint":{"line":87,"column":65,"index":5259},"code":"    it('fails if an authorizer is configured with version and arn', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-authorizer-validation'), 'overconfigured_version.proxyRouter', 'overconfigured_version');\n      }).toThrow('overconfigured_version.js authorizer first is ambiguous - cannot use lambdaVersion with lambdaArn');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails if an authorizer version is invalid format","suites":["validatePackage","when the rest api module is set"],"line":92,"updatePoint":{"line":92,"column":56,"index":5631},"code":"    it('fails if an authorizer version is invalid format', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-authorizer-validation'), 'misconfigured_version.proxyRouter', 'misconfigured_version');\n      }).toThrow('misconfigured_version.js authorizer first lambdaVersion must be either string or true');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails when an invalid authorization type is specified","suites":["validatePackage","when the rest api module is set"],"line":97,"updatePoint":{"line":97,"column":61,"index":5994},"code":"    it('fails when an invalid authorization type is specified', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-authorization'), 'invalid_authorization.proxyRouter', 'invalid_authorization');\n      }).toThrow('invalid_authorization.js GET /echo authorization type BOOM is invalid');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails when authorizer is specified with IAM","suites":["validatePackage","when the rest api module is set"],"line":102,"updatePoint":{"line":102,"column":51,"index":6323},"code":"    it('fails when authorizer is specified with IAM', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-authorization'), 'overconfigured_authorization.proxyRouter', 'overconfigured_authorization');\n      }).toThrow('overconfigured_authorization.js GET /echo authorization type AWS_IAM is incompatible with custom authorizers');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails when credentials are specified with CUSTOM","suites":["validatePackage","when the rest api module is set"],"line":107,"updatePoint":{"line":107,"column":56,"index":6710},"code":"    it('fails when credentials are specified with CUSTOM', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-authorization'), 'overconfigured_credentials.proxyRouter', 'overconfigured_credentials');\n      }).toThrow('overconfigured_credentials.js GET /echo authorization type CUSTOM is incompatible with invokeWithCredentials');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails when credentials are invalid","suites":["validatePackage","when the rest api module is set"],"line":112,"updatePoint":{"line":112,"column":42,"index":7079},"code":"    it('fails when credentials are invalid', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-authorization'), 'invalid_credentials.proxyRouter', 'invalid_credentials');\n      }).toThrow('invalid_credentials.js GET /echo credentials have to be either an ARN or a boolean');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails when OAuth2 scopes are not used with Cognito user pools","suites":["validatePackage","when the rest api module is set"],"line":117,"updatePoint":{"line":117,"column":69,"index":7435},"code":"    it('fails when OAuth2 scopes are not used with Cognito user pools', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-authorization'), 'invalid_authorizer_with_oauth2_scopes.proxyRouter', 'invalid_authorizer_with_oauth2_scopes');\n      }).toThrow('invalid_authorizer_with_oauth2_scopes.js GET /echo authorizer is incompatible with authorizationScopes');\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"fails when OAuth2 scopes are not specified with an array","suites":["validatePackage","when the rest api module is set"],"line":122,"updatePoint":{"line":122,"column":64,"index":7842},"code":"    it('fails when OAuth2 scopes are not specified with an array', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-error-authorization'), 'invalid_oauth2_scopes.proxyRouter', 'invalid_oauth2_scopes');\n      }).toThrow(\"invalid_oauth2_scopes.js GET /echo method parameter 'authorizationScopes' must be an array\");\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"does not fail when the api is well configured","suites":["validatePackage","when the rest api module is set"],"line":127,"updatePoint":{"line":127,"column":53,"index":8194},"code":"    it('does not fail when the api is well configured', () => {\n      expect(() => {\n        underTest(path.join(__dirname, 'test-projects/api-gw-validation-kitchen-sink'), 'main.proxyRouter', 'main');\n      }).not.toThrow();\n    });","file":"validate-package-spec.js","skipped":false,"dir":"spec"},{"name":"rejects if the path does not exist","suites":["zipdir"],"line":26,"updatePoint":{"line":26,"column":40,"index":694},"code":"  it('rejects if the path does not exist', done => {\n    const argpath = tmppath();\n    underTest(argpath).then(done.fail, reason => {\n      expect(reason).toEqual(argpath + ' does not exist');\n      done();\n    });\n  });","file":"zipdir-spec.js","skipped":false,"dir":"spec"},{"name":"rejects if the path is not a dir","suites":["zipdir"],"line":33,"updatePoint":{"line":33,"column":38,"index":914},"code":"  it('rejects if the path is not a dir', done => {\n    const filePath = path.join(workingdir, 'root.txt');\n    fs.writeFileSync(filePath, 'text1', 'utf8');\n    underTest(filePath).then(done.fail, reason => {\n      expect(reason).toEqual(filePath + ' is not a directory');\n      done();\n    });\n  });","file":"zipdir-spec.js","skipped":false,"dir":"spec"},{"name":"zips up files and subfolders into a temporary path","suites":["zipdir"],"line":41,"updatePoint":{"line":41,"column":56,"index":1232},"code":"  it('zips up files and subfolders into a temporary path', done => {\n    const original = path.join(workingdir, 'original'),\n      unpacked = path.join(workingdir, 'unpacked');\n    fs.mkdirSync(original);\n    fs.writeFileSync(path.join(original, 'root.txt'), 'text1', 'utf8');\n    fs.mkdirSync(path.join(original, 'subdir'));\n    fs.writeFileSync(path.join(original, 'subdir', 'sub.txt'), 'text2', 'utf8');\n    underTest(original).then(argpath => {\n      zipfile = argpath;\n      fs.mkdirSync(unpacked);\n      return new Promise((resolve, reject) => {\n        childProcess.execFile('unzip', [argpath], {\n          cwd: unpacked,\n          env: process.env\n        }, error => {\n          if (error) {\n            return reject(error);\n          }\n          resolve();\n        });\n      });\n    }).then(() => {\n      expect(trimSlash(path.dirname(zipfile))).toEqual(trimSlash(os.tmpdir()));\n      expect(fs.readFileSync(path.join(unpacked, 'root.txt'), 'utf8')).toEqual('text1');\n      expect(fs.readFileSync(path.join(unpacked, 'subdir', 'sub.txt'), 'utf8')).toEqual('text2');\n    }).then(done, done.fail);\n  });","file":"zipdir-spec.js","skipped":false,"dir":"spec"},{"name":"removes the original dir if successful","suites":["zipdir"],"line":68,"updatePoint":{"line":68,"column":44,"index":2333},"code":"  it('removes the original dir if successful', done => {\n    const original = path.join(workingdir, 'original');\n    fs.mkdirSync(original);\n    fs.writeFileSync(path.join(original, 'root.txt'), 'text1', 'utf8');\n    underTest(original).then(() => {\n      expect(fs.existsSync(original)).toBeFalsy();\n    }).then(done, done.fail);\n  });","file":"zipdir-spec.js","skipped":false,"dir":"spec"}]}