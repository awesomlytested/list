{"repo":"react-hook-form/react-hook-form","url":"https://github.com/react-hook-form/react-hook-form","branch":"master","configs":[{"package":"react-hook-form","lang":"js","dir":"cypress","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should keep all inputs data when inputs get unmounted","suites":["autoUnregister"],"updatePoint":{"line":2,"column":59,"index":95},"line":2,"code":"  it('should keep all inputs data when inputs get unmounted', () => {\n    cy.visit('http://localhost:3000/autoUnregister');\n    cy.get('input[name=\"test\"]').type('test');\n    cy.get('input[name=\"test1\"]').type('test1');\n    cy.get('input[name=\"test2\"]').check();\n    cy.get('input[name=\"test3\"]').check();\n    cy.get('select[name=\"test4\"]').select('Bill');\n    cy.get('#input-ReactSelect > div').click();\n    cy.get('#input-ReactSelect > div > div').eq(1).click();\n    cy.get('button').click();\n    cy.get('button').click();\n    cy.get('input[name=\"test\"]').should('has.value', 'test');\n    cy.get('input[name=\"test1\"]').should('has.value', 'test1');\n    cy.get('input[name=\"test2\"]').should('be.checked');\n    cy.get('input[name=\"test3\"]').should('be.checked');\n    cy.get('select[name=\"test4\"]').should('has.value', 'bill');\n    cy.get('#input-ReactSelect > div > div > div > div').contains('Strawberry');\n  });","file":"integration/autoUnregister.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form and reset the form","suites":["basic form validation"],"updatePoint":{"line":2,"column":49,"index":92},"line":2,"code":"  it('should validate the form and reset the form', () => {\n    cy.visit('http://localhost:3000/basic/onSubmit');\n    cy.get('button#submit').click();\n    cy.focused().should('have.attr', 'name', 'nestItem.nest1');\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"nestItem.nest1\"] + p').contains('nest 1 error');\n    cy.get('input[name=\"arrayItem.0.test1\"] + p').contains('array item 1 error');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"] + p').contains('selectNumber error');\n    cy.get('select[name=\"multiple\"] + p').contains('multiple error');\n    cy.get('input[name=\"minRequiredLength\"] + p').contains('minRequiredLength error');\n    cy.get('input[name=\"radio\"] + p').contains('radio error');\n    cy.get('input[name=\"checkbox\"] + p').contains('checkbox error');\n    cy.get('input[name=\"checkboxArray\"] + p').contains('checkboxArray error');\n    cy.get('input[name=\"validate\"] + p').contains('validate error');\n    cy.get('input[name=\"firstName\"]').type('bill');\n    cy.get('input[name=\"firstName\"]').type('a');\n    cy.get('input[name=\"arrayItem.0.test1\"]').type('ab');\n    cy.get('input[name=\"nestItem.nest1\"]').type('ab');\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"pattern\"]').type('luo');\n    cy.get('input[name=\"min\"]').type('1');\n    cy.get('input[name=\"max\"]').type('21');\n    cy.get('input[name=\"minDate\"]').type('2019-07-30');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-02');\n    cy.get('input[name=\"lastName\"]').clear().type('luo');\n    cy.get('input[name=\"minLength\"]').type('b');\n    cy.get('input[name=\"validate\"]').type('test');\n    cy.get('input[name=\"pattern\"] + p').contains('pattern error');\n    cy.get('input[name=\"minLength\"] + p').contains('minLength error');\n    cy.get('input[name=\"min\"] + p').contains('min error');\n    cy.get('input[name=\"max\"] + p').contains('max error');\n    cy.get('input[name=\"minDate\"] + p').contains('minDate error');\n    cy.get('input[name=\"maxDate\"] + p').contains('maxDate error');\n    cy.get('input[name=\"pattern\"]').type('23');\n    cy.get('input[name=\"minLength\"]').type('bi');\n    cy.get('input[name=\"minRequiredLength\"]').type('bi');\n    cy.get('select[name=\"multiple\"]').select(['optionA']);\n    cy.get('input[name=\"radio\"]').check('1');\n    cy.get('input[name=\"min\"]').clear().type('11');\n    cy.get('input[name=\"max\"]').clear().type('19');\n    cy.get('input[name=\"minDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-01');\n    cy.get('input[name=\"checkbox\"]').check();\n    cy.get('input[name=\"checkboxArray\"]').check('3');\n    cy.get('select[name=\"multiple\"]').select(['optionA', 'optionB']);\n    cy.get('p').should('have.length', 0);\n    cy.get('#submit').click();\n    cy.get('pre').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      nestItem: {\n        nest1: 'ab'\n      },\n      arrayItem: [{\n        test1: 'ab'\n      }],\n      firstName: 'billa',\n      lastName: 'luo',\n      min: '11',\n      max: '19',\n      minDate: '2019-08-01',\n      maxDate: '2019-08-01',\n      minLength: 'bbi',\n      minRequiredLength: 'bi',\n      selectNumber: '1',\n      pattern: 'luo23',\n      radio: '1',\n      checkbox: true,\n      checkboxArray: ['3'],\n      multiple: ['optionA', 'optionB'],\n      validate: 'test'\n    }));\n    cy.get('#submit').click();\n    cy.get('#resetForm').click();\n    cy.get('input[name=\"firstName\"]').should('not.have.value');\n    cy.get('input[name=\"lastName\"]').should('not.have.value');\n    cy.get('select[name=\"selectNumber\"]').should('have.value', '');\n    cy.get('input[name=\"minRequiredLength\"]').should('not.have.value');\n    cy.get('input[name=\"radio\"]').should('not.have.value');\n    cy.get('input[name=\"max\"]').should('not.have.value');\n    cy.get('input[name=\"min\"]').should('not.have.value');\n    cy.get('input[name=\"minLength\"]').should('not.have.value');\n    cy.get('input[name=\"checkbox\"]').should('not.have.value');\n    cy.get('input[name=\"pattern\"]').should('not.have.value');\n    cy.get('input[name=\"minDate\"]').should('not.have.value');\n    cy.get('input[name=\"maxDate\"]').should('not.have.value');\n    cy.get('#renderCount').contains('39');\n    cy.get('#on-invalid-called-times').contains('1');\n  });","file":"integration/basic.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form with onTouched mode","suites":["basic form validation"],"updatePoint":{"line":92,"column":50,"index":4522},"line":92,"code":"  it('should validate the form with onTouched mode', () => {\n    cy.visit('http://localhost:3000/basic/onTouched');\n    cy.get('input[name=\"nestItem.nest1\"]').focus();\n    cy.get('input[name=\"nestItem.nest1\"]').type('test');\n    cy.get('input[name=\"nestItem.nest1\"]').clear();\n    cy.get('p').should('have.length', 0);\n    cy.get('input[name=\"nestItem.nest1\"]').blur();\n    cy.get('input[name=\"nestItem.nest1\"] + p').contains('nest 1 error');\n    cy.get('input[name=\"arrayItem.0.test1\"]').focus();\n    cy.get('input[name=\"arrayItem.0.test1\"]').blur();\n    cy.get('input[name=\"arrayItem.0.test1\"] + p').contains('array item 1 error');\n    cy.get('select[name=\"selectNumber\"]').focus();\n    cy.get('select[name=\"selectNumber\"]').blur();\n    cy.get('select[name=\"selectNumber\"] + p').contains('selectNumber error');\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"radio\"]').first().focus();\n    cy.get('input[name=\"radio\"]').first().blur();\n    cy.get('input[name=\"radio\"] + p').contains('radio error');\n    cy.get('input[name=\"radio\"]').check('1');\n    cy.get('input[name=\"checkbox\"]').focus();\n    cy.get('input[name=\"checkbox\"]').blur();\n    cy.get('input[name=\"checkbox\"] + p').contains('checkbox error');\n    cy.get('input[name=\"checkbox\"]').check();\n    cy.get('input[name=\"checkbox\"]').blur();\n    cy.get('input[name=\"nestItem.nest1\"]').type('test');\n    cy.get('input[name=\"arrayItem.0.test1\"]').type('test');\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('11');\n  });","file":"integration/basic.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form with onBlur mode and reset the form","suites":["basic form validation"],"updatePoint":{"line":121,"column":66,"index":6075},"line":121,"code":"  it('should validate the form with onBlur mode and reset the form', () => {\n    cy.visit('http://localhost:3000/basic/onBlur');\n    cy.get('input[name=\"nestItem.nest1\"]').focus();\n    cy.get('input[name=\"nestItem.nest1\"]').blur();\n    cy.get('input[name=\"nestItem.nest1\"] + p').contains('nest 1 error');\n    cy.get('input[name=\"nestItem.nest1\"]').type('a');\n    cy.get('input[name=\"arrayItem.0.test1\"]').focus();\n    cy.get('input[name=\"arrayItem.0.test1\"]').blur();\n    cy.get('input[name=\"arrayItem.0.test1\"] + p').contains('array item 1 error');\n    cy.get('input[name=\"arrayItem.0.test1\"]').type('a');\n    cy.get('input[name=\"firstName\"]').focus();\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"firstName\"]').type('bill');\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"]').focus();\n    cy.get('select[name=\"selectNumber\"]').blur();\n    cy.get('select[name=\"selectNumber\"] + p').contains('selectNumber error');\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"pattern\"]').type('luo');\n    cy.get('input[name=\"min\"]').type('1');\n    cy.get('input[name=\"max\"]').type('21');\n    cy.get('input[name=\"minDate\"]').type('2019-07-30');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-02');\n    cy.get('input[name=\"lastName\"]').clear().type('luo');\n    cy.get('input[name=\"minLength\"]').type('b');\n    cy.get('input[name=\"minLength\"]').blur();\n    cy.get('input[name=\"minLength\"] + p').contains('minLength error');\n    cy.get('input[name=\"min\"] + p').contains('min error');\n    cy.get('input[name=\"max\"] + p').contains('max error');\n    cy.get('input[name=\"minDate\"] + p').contains('minDate error');\n    cy.get('input[name=\"maxDate\"] + p').contains('maxDate error');\n    cy.get('input[name=\"pattern\"]').type('23');\n    cy.get('input[name=\"minLength\"]').type('bi');\n    cy.get('input[name=\"minRequiredLength\"]').type('bi');\n    cy.get('select[name=\"multiple\"]').select(['optionA']);\n    cy.get('input[name=\"radio\"]').first().focus();\n    cy.get('input[name=\"radio\"]').first().blur();\n    cy.get('input[name=\"radio\"] + p').contains('radio error');\n    cy.get('input[name=\"radio\"]').check('1');\n    cy.get('input[name=\"min\"]').clear().type('11');\n    cy.get('input[name=\"max\"]').clear().type('19');\n    cy.get('input[name=\"minDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-01');\n    cy.get('input[name=\"checkbox\"]').focus();\n    cy.get('input[name=\"checkbox\"]').blur();\n    cy.get('input[name=\"checkbox\"] + p').contains('checkbox error');\n    cy.get('input[name=\"checkbox\"]').check();\n    cy.get('input[name=\"checkbox\"]').blur();\n    cy.get('p').should('have.length', 0);\n    cy.get('#resetForm').click();\n    cy.get('input[name=\"firstName\"]').should('not.have.value');\n    cy.get('input[name=\"lastName\"]').should('not.have.value');\n    cy.get('select[name=\"selectNumber\"]').should('have.value', '');\n    cy.get('input[name=\"minRequiredLength\"]').should('not.have.value');\n    cy.get('input[name=\"radio\"]').should('not.have.value');\n    cy.get('input[name=\"max\"]').should('not.have.value');\n    cy.get('input[name=\"min\"]').should('not.have.value');\n    cy.get('input[name=\"minLength\"]').should('not.have.value');\n    cy.get('input[name=\"checkbox\"]').should('not.have.value');\n    cy.get('input[name=\"pattern\"]').should('not.have.value');\n    cy.get('input[name=\"minDate\"]').should('not.have.value');\n    cy.get('input[name=\"maxDate\"]').should('not.have.value');\n    cy.get('#renderCount').contains('28');\n  });","file":"integration/basic.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form with onChange mode and reset the form","suites":["basic form validation"],"updatePoint":{"line":188,"column":68,"index":9801},"line":188,"code":"  it('should validate the form with onChange mode and reset the form', () => {\n    cy.visit('http://localhost:3000/basic/onChange');\n    cy.get('input[name=\"firstName\"]').type('bill');\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"pattern\"]').type('luo');\n    cy.get('input[name=\"min\"]').type('1');\n    cy.get('input[name=\"max\"]').type('21');\n    cy.get('input[name=\"minDate\"]').type('2019-07-30');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-02');\n    cy.get('input[name=\"lastName\"]').clear().type('luo');\n    cy.get('input[name=\"minLength\"]').type('b');\n    cy.get('input[name=\"pattern\"] + p').contains('pattern error');\n    cy.get('input[name=\"minLength\"] + p').contains('minLength error');\n    cy.get('input[name=\"min\"] + p').contains('min error');\n    cy.get('input[name=\"max\"] + p').contains('max error');\n    cy.get('input[name=\"minDate\"] + p').contains('minDate error');\n    cy.get('input[name=\"maxDate\"] + p').contains('maxDate error');\n    cy.get('input[name=\"pattern\"]').type('23');\n    cy.get('input[name=\"minLength\"]').type('bi');\n    cy.get('input[name=\"minRequiredLength\"]').type('bi');\n    cy.get('select[name=\"multiple\"]').select(['optionA']);\n    cy.get('input[name=\"radio\"]').check('1');\n    cy.get('input[name=\"min\"]').clear().type('11');\n    cy.get('input[name=\"max\"]').clear().type('19');\n    cy.get('input[name=\"minDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-01');\n    cy.get('input[name=\"checkbox\"]').check();\n    cy.get('p').should('have.length', 0);\n    cy.get('#resetForm').click();\n    cy.get('input[name=\"firstName\"]').should('not.have.value');\n    cy.get('input[name=\"lastName\"]').should('not.have.value');\n    cy.get('select[name=\"selectNumber\"]').should('have.value', '');\n    cy.get('input[name=\"minRequiredLength\"]').should('not.have.value');\n    cy.get('input[name=\"radio\"]').should('not.have.value');\n    cy.get('input[name=\"max\"]').should('not.have.value');\n    cy.get('input[name=\"min\"]').should('not.have.value');\n    cy.get('input[name=\"minLength\"]').should('not.have.value');\n    cy.get('input[name=\"checkbox\"]').should('not.have.value');\n    cy.get('input[name=\"pattern\"]').should('not.have.value');\n    cy.get('input[name=\"minDate\"]').should('not.have.value');\n    cy.get('input[name=\"maxDate\"]').should('not.have.value');\n    cy.get('#renderCount').contains('21');\n  });","file":"integration/basic.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form with onSubmit mode","suites":["basicSchemaValidation form validation"],"updatePoint":{"line":2,"column":49,"index":108},"line":2,"code":"  it('should validate the form with onSubmit mode', () => {\n    cy.visit('http://localhost:3000/basic-schema-validation/onSubmit');\n    cy.get('button').click();\n    cy.focused().should('have.attr', 'name', 'firstName');\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"] + p').contains('selectNumber error');\n    cy.get('input[name=\"minRequiredLength\"] + p').contains('minRequiredLength error');\n    cy.get('input[name=\"radio\"] + p').contains('radio error');\n    cy.get('input[name=\"firstName\"]').type('bill');\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"pattern\"]').type('luo');\n    cy.get('input[name=\"min\"]').type('1');\n    cy.get('input[name=\"max\"]').type('21');\n    cy.get('input[name=\"minDate\"]').type('2019-07-30');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-02');\n    cy.get('input[name=\"lastName\"]').clear().type('luo');\n    cy.get('input[name=\"minLength\"]').type('b');\n    cy.get('input[name=\"minLength\"] + p').contains('minLength error');\n    cy.get('input[name=\"pattern\"] + p').contains('pattern error');\n    cy.get('input[name=\"min\"] + p').contains('min error');\n    cy.get('input[name=\"max\"] + p').contains('max error');\n    cy.get('input[name=\"minDate\"] + p').contains('minDate error');\n    cy.get('input[name=\"maxDate\"] + p').contains('maxDate error');\n    cy.get('input[name=\"pattern\"]').type('23');\n    cy.get('input[name=\"minLength\"]').type('bi');\n    cy.get('input[name=\"minRequiredLength\"]').type('bi');\n    cy.get('input[name=\"radio\"]').check('1');\n    cy.get('input[name=\"min\"]').clear().type('11');\n    cy.get('input[name=\"max\"]').clear().type('19');\n    cy.get('input[name=\"minDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"]').blur();\n    cy.get('input[name=\"checkbox\"]').check();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('24');\n  });","file":"integration/basicSchemaValidation.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form with onBlur mode","suites":["basicSchemaValidation form validation"],"updatePoint":{"line":40,"column":47,"index":2202},"line":40,"code":"  it('should validate the form with onBlur mode', () => {\n    cy.visit('http://localhost:3000/basic-schema-validation/onBlur');\n    cy.get('input[name=\"firstName\"]').focus();\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"firstName\"]').type('bill');\n    cy.get('input[name=\"lastName\"]').focus();\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"]').focus();\n    cy.get('select[name=\"selectNumber\"]').blur();\n    cy.get('select[name=\"selectNumber\"] + p').contains('selectNumber error');\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"pattern\"]').type('luo');\n    cy.get('input[name=\"min\"]').type('1');\n    cy.get('input[name=\"max\"]').type('21');\n    cy.get('input[name=\"minDate\"]').type('2019-07-30');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-02');\n    cy.get('input[name=\"lastName\"]').clear().type('luo');\n    cy.get('input[name=\"minLength\"]').type('b');\n    cy.get('input[name=\"minLength\"]').blur();\n    cy.get('input[name=\"pattern\"] + p').contains('pattern error');\n    cy.get('input[name=\"minLength\"] + p').contains('minLength error');\n    cy.get('input[name=\"min\"] + p').contains('min error');\n    cy.get('input[name=\"max\"] + p').contains('max error');\n    cy.get('input[name=\"minDate\"] + p').contains('minDate error');\n    cy.get('input[name=\"maxDate\"] + p').contains('maxDate error');\n    cy.get('input[name=\"pattern\"]').type('23');\n    cy.get('input[name=\"minLength\"]').type('bi');\n    cy.get('input[name=\"minRequiredLength\"]').type('bi');\n    cy.get('input[name=\"radio\"]').first().focus();\n    cy.get('input[name=\"radio\"]').first().blur();\n    cy.get('input[name=\"radio\"] + p').contains('radio error');\n    cy.get('input[name=\"radio\"]').check('1');\n    cy.get('input[name=\"min\"]').clear().type('11');\n    cy.get('input[name=\"max\"]').clear().type('19');\n    cy.get('input[name=\"minDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-01');\n    cy.get('input[name=\"checkbox\"]').check();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('22');\n  });","file":"integration/basicSchemaValidation.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form with onChange mode","suites":["basicSchemaValidation form validation"],"updatePoint":{"line":85,"column":49,"index":4622},"line":85,"code":"  it('should validate the form with onChange mode', () => {\n    cy.visit('http://localhost:3000/basic-schema-validation/onChange');\n    cy.get('input[name=\"firstName\"]').type('bill');\n    cy.get('input[name=\"lastName\"]').focus();\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"]').select('');\n    cy.get('select[name=\"selectNumber\"] + p').contains('selectNumber error');\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"pattern\"]').type('luo');\n    cy.get('input[name=\"min\"]').type('1');\n    cy.get('input[name=\"max\"]').type('21');\n    cy.get('input[name=\"minDate\"]').type('2019-07-30');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-02');\n    cy.get('input[name=\"lastName\"]').clear().type('luo');\n    cy.get('input[name=\"minLength\"]').type('b');\n    cy.get('input[name=\"pattern\"] + p').contains('pattern error');\n    cy.get('input[name=\"minLength\"] + p').contains('minLength error');\n    cy.get('input[name=\"min\"] + p').contains('min error');\n    cy.get('input[name=\"max\"] + p').contains('max error');\n    cy.get('input[name=\"minDate\"] + p').contains('minDate error');\n    cy.get('input[name=\"maxDate\"] + p').contains('maxDate error');\n    cy.get('input[name=\"pattern\"]').type('23');\n    cy.get('input[name=\"minLength\"]').type('bi');\n    cy.get('input[name=\"minRequiredLength\"]').type('bi');\n    cy.get('input[name=\"radio\"]').first().focus();\n    cy.get('input[name=\"radio\"]').check('1');\n    cy.get('input[name=\"min\"]').clear().type('11');\n    cy.get('input[name=\"max\"]').clear().type('19');\n    cy.get('input[name=\"minDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-01');\n    cy.get('input[name=\"checkbox\"]').check();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('26');\n  });","file":"integration/basicSchemaValidation.ts","skipped":false,"dir":"cypress"},{"name":"should reflect correct form state and data collection","suites":["ConditionalField"],"updatePoint":{"line":2,"column":59,"index":97},"line":2,"code":"  it('should reflect correct form state and data collection', () => {\n    cy.visit('http://localhost:3000/conditionalField');\n    cy.get('#state').should($state => {\n      expect(JSON.parse($state.text())).to.be.deep.equal({\n        dirty: [],\n        isSubmitted: false,\n        submitCount: 0,\n        touched: [],\n        isDirty: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false\n      });\n    });\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"firstName\"]').type('bill');\n    cy.get('input[name=\"lastName\"]').type('luo');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['selectNumber', 'firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['selectNumber', 'firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('button#submit').click();\n    cy.get('#result').contains('{\"selectNumber\":\"1\",\"firstName\":\"bill\",\"lastName\":\"luo\"}');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['selectNumber', 'firstName', 'lastName'],\n      isSubmitted: true,\n      submitCount: 1,\n      touched: ['selectNumber', 'firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      selectNumber: '1',\n      firstName: 'bill',\n      lastName: 'luo'\n    }));\n    cy.get('select[name=\"selectNumber\"]').select('2');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['selectNumber', 'firstName', 'lastName'],\n      isSubmitted: true,\n      submitCount: 1,\n      touched: ['selectNumber', 'firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: false\n    }));\n    cy.get('input[name=\"min\"]').type('10');\n    cy.get('input[name=\"max\"]').type('2');\n    cy.get('input[name=\"max\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['selectNumber', 'firstName', 'lastName', 'min', 'max'],\n      isSubmitted: true,\n      submitCount: 1,\n      touched: ['selectNumber', 'firstName', 'lastName', 'min', 'max'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('button#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['selectNumber', 'firstName', 'lastName', 'min', 'max'],\n      isSubmitted: true,\n      submitCount: 2,\n      touched: ['selectNumber', 'firstName', 'lastName', 'min', 'max'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      selectNumber: '2',\n      firstName: 'bill',\n      lastName: 'luo',\n      min: '10',\n      max: '2'\n    }));\n    cy.get('select[name=\"selectNumber\"]').select('3');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['selectNumber', 'firstName', 'lastName', 'min', 'max'],\n      isSubmitted: true,\n      submitCount: 2,\n      touched: ['selectNumber', 'firstName', 'lastName', 'min', 'max'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('input[name=\"notRequired\"]').type('test');\n    cy.get('input[name=\"notRequired\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['selectNumber', 'firstName', 'lastName', 'min', 'max', 'notRequired'],\n      isSubmitted: true,\n      submitCount: 2,\n      touched: ['selectNumber', 'firstName', 'lastName', 'min', 'max', 'notRequired'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('button#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      selectNumber: '3',\n      firstName: 'bill',\n      lastName: 'luo',\n      min: '10',\n      max: '2',\n      notRequired: 'test'\n    }));\n    cy.get('#renderCount').contains('30');\n  });","file":"integration/conditionalField.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form and reset the form","suites":["controller basic form validation"],"updatePoint":{"line":2,"column":49,"index":103},"line":2,"code":"  it('should validate the form and reset the form', () => {\n    cy.visit('http://localhost:3000/controller/onSubmit');\n    cy.get('#submit').click();\n    cy.get('#TextField').contains('TextField Error');\n    cy.get('#RadioGroup').contains('RadioGroup Error');\n    cy.get('#Checkbox').contains('Checkbox Error');\n    cy.get('#RadioGroup').contains('RadioGroup Error');\n    cy.get('#Select').contains('Select Error');\n    cy.get('#switch').contains('switch Error');\n    cy.get('#input-checkbox input').click();\n    cy.get('input[name=\"gender1\"]').first().click();\n    cy.get('#input-textField input').type('test');\n    cy.get('#input-select > div > div').click();\n    cy.get('.MuiPopover-root ul > li:first-child').click();\n    cy.get('#input-switch input').click();\n    cy.get('#input-ReactSelect > div').click();\n    cy.get('#input-ReactSelect > div > div').eq(1).click();\n    cy.get('.container > p').should('have.length', 0);\n    cy.get('#renderCount').contains('8');\n  });","file":"integration/controller.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form with onBlur mode and reset the form","suites":["controller basic form validation"],"updatePoint":{"line":22,"column":66,"index":1096},"line":22,"code":"  it('should validate the form with onBlur mode and reset the form', () => {\n    cy.visit('http://localhost:3000/controller/onBlur');\n    cy.get('p').should('have.length', 0);\n    cy.get('#input-checkbox input').focus();\n    cy.get('#input-checkbox input').blur();\n    cy.get('#Checkbox').contains('Checkbox Error');\n    cy.get('#input-textField input').focus();\n    cy.get('#input-textField input').blur();\n    cy.get('#TextField').contains('TextField Error');\n    cy.get('#input-select > div > div').focus();\n    cy.get('#input-select > div > div').blur();\n    cy.get('#Select').contains('Select Error');\n    cy.get('#input-switch input').focus();\n    cy.get('#input-switch input').blur();\n    cy.get('#switch').contains('switch Error');\n    cy.get('#input-checkbox input').click();\n    cy.get('#input-textField input').type('test');\n    cy.get('#input-select > div > div').click();\n    cy.get('.MuiPopover-root ul > li:first-child').click();\n    cy.get('#input-switch input').click();\n    cy.get('#input-switch input').blur();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('9');\n  });","file":"integration/controller.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form with onChange mode and reset the form","suites":["controller basic form validation"],"updatePoint":{"line":46,"column":68,"index":2218},"line":46,"code":"  it('should validate the form with onChange mode and reset the form', () => {\n    cy.visit('http://localhost:3000/controller/onChange');\n    cy.get('#input-checkbox input').click();\n    cy.get('#input-checkbox input').click();\n    cy.get('#Checkbox').contains('Checkbox Error');\n    cy.get('#input-textField input').type('test');\n    cy.get('#input-textField input').clear();\n    cy.get('#TextField').contains('TextField Error');\n    cy.get('#input-switch input').click();\n    cy.get('#input-switch input').click();\n    cy.get('#switch').contains('switch Error');\n    cy.get('#input-checkbox input').click();\n    cy.get('#input-textField input').type('test');\n    cy.get('#input-switch input').click();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('7');\n  });","file":"integration/controller.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form with onSubmit mode","suites":["customSchemaValidation form validation"],"updatePoint":{"line":2,"column":49,"index":109},"line":2,"code":"  it('should validate the form with onSubmit mode', () => {\n    cy.visit('http://localhost:3000/customSchemaValidation/onSubmit');\n    cy.get('button').click();\n    cy.focused().should('have.attr', 'name', 'firstName');\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"] + p').contains('selectNumber error');\n    cy.get('input[name=\"minRequiredLength\"] + p').contains('minRequiredLength error');\n    cy.get('input[name=\"radio\"] + p').contains('radio error');\n    cy.get('input[name=\"firstName\"]').type('bill');\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"pattern\"]').type('luo');\n    cy.get('input[name=\"min\"]').type('1');\n    cy.get('input[name=\"max\"]').type('21');\n    cy.get('input[name=\"minDate\"]').type('2019-07-30');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-02');\n    cy.get('input[name=\"lastName\"]').clear().type('luo');\n    cy.get('input[name=\"minLength\"]').type('2');\n    cy.get('input[name=\"minLength\"] + p').contains('minLength error');\n    cy.get('input[name=\"min\"] + p').contains('min error');\n    cy.get('input[name=\"max\"] + p').contains('max error');\n    cy.get('input[name=\"minDate\"] + p').contains('minDate error');\n    cy.get('input[name=\"maxDate\"] + p').contains('maxDate error');\n    cy.get('input[name=\"pattern\"]').type('23');\n    cy.get('input[name=\"minLength\"]').type('bi');\n    cy.get('input[name=\"minRequiredLength\"]').type('bi');\n    cy.get('input[name=\"radio\"]').check('1');\n    cy.get('input[name=\"min\"]').clear().type('11');\n    cy.get('input[name=\"max\"]').clear().type('19');\n    cy.get('input[name=\"minDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-01');\n    cy.get('input[name=\"checkbox\"]').check();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('25');\n  });","file":"integration/customSchemaValidation.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form with onBlur mode","suites":["customSchemaValidation form validation"],"updatePoint":{"line":39,"column":47,"index":2160},"line":39,"code":"  it('should validate the form with onBlur mode', () => {\n    cy.visit('http://localhost:3000/customSchemaValidation/onBlur');\n    cy.get('input[name=\"firstName\"]').focus();\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"firstName\"]').type('bill');\n    cy.get('input[name=\"lastName\"]').focus();\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"]').focus();\n    cy.get('select[name=\"selectNumber\"]').blur();\n    cy.get('select[name=\"selectNumber\"] + p').contains('selectNumber error');\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"pattern\"]').type('luo');\n    cy.get('input[name=\"min\"]').type('1');\n    cy.get('input[name=\"max\"]').type('21');\n    cy.get('input[name=\"minDate\"]').type('2019-07-30');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-02');\n    cy.get('input[name=\"lastName\"]').clear().type('luo');\n    cy.get('input[name=\"minLength\"]').type('2');\n    cy.get('input[name=\"minLength\"]').blur();\n    cy.get('input[name=\"minLength\"] + p').contains('minLength error');\n    cy.get('input[name=\"min\"] + p').contains('min error');\n    cy.get('input[name=\"max\"] + p').contains('max error');\n    cy.get('input[name=\"minDate\"] + p').contains('minDate error');\n    cy.get('input[name=\"maxDate\"] + p').contains('maxDate error');\n    cy.get('input[name=\"pattern\"]').type('23');\n    cy.get('input[name=\"minLength\"]').type('bi');\n    cy.get('input[name=\"minRequiredLength\"]').type('bi');\n    cy.get('input[name=\"radio\"]').first().focus();\n    cy.get('input[name=\"radio\"]').first().blur();\n    cy.get('input[name=\"radio\"] + p').contains('radio error');\n    cy.get('input[name=\"radio\"]').check('1');\n    cy.get('input[name=\"min\"]').clear().type('11');\n    cy.get('input[name=\"max\"]').clear().type('19');\n    cy.get('input[name=\"minDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-01');\n    cy.get('input[name=\"checkbox\"]').check();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('20');\n  });","file":"integration/customSchemaValidation.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form with onChange mode","suites":["customSchemaValidation form validation"],"updatePoint":{"line":83,"column":49,"index":4512},"line":83,"code":"  it('should validate the form with onChange mode', () => {\n    cy.visit('http://localhost:3000/customSchemaValidation/onChange');\n    cy.get('input[name=\"firstName\"]').type('bill');\n    cy.get('input[name=\"lastName\"]').focus();\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"]').select('');\n    cy.get('select[name=\"selectNumber\"] + p').contains('selectNumber error');\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"pattern\"]').type('luo');\n    cy.get('input[name=\"min\"]').type('1');\n    cy.get('input[name=\"max\"]').type('21');\n    cy.get('input[name=\"minDate\"]').type('2019-07-30');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-02');\n    cy.get('input[name=\"lastName\"]').clear().type('luo');\n    cy.get('input[name=\"minLength\"]').type('2');\n    cy.get('input[name=\"minLength\"] + p').contains('minLength error');\n    cy.get('input[name=\"min\"] + p').contains('min error');\n    cy.get('input[name=\"max\"] + p').contains('max error');\n    cy.get('input[name=\"minDate\"] + p').contains('minDate error');\n    cy.get('input[name=\"maxDate\"] + p').contains('maxDate error');\n    cy.get('input[name=\"pattern\"]').type('23');\n    cy.get('input[name=\"minLength\"]').type('bi');\n    cy.get('input[name=\"minRequiredLength\"]').type('bi');\n    cy.get('input[name=\"radio\"]').first().focus();\n    cy.get('input[name=\"radio\"]').check('1');\n    cy.get('input[name=\"min\"]').clear().type('11');\n    cy.get('input[name=\"max\"]').clear().type('19');\n    cy.get('input[name=\"minDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-01');\n    cy.get('input[name=\"checkbox\"]').check();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('22');\n  });","file":"integration/customSchemaValidation.ts","skipped":false,"dir":"cypress"},{"name":"should populate defaultValue for inputs","suites":["defaultValues"],"updatePoint":{"line":2,"column":45,"index":80},"line":2,"code":"  it('should populate defaultValue for inputs', () => {\n    cy.visit('http://localhost:3000/default-values');\n    cy.get('input[name=\"test\"]').should('have.value', 'test');\n    cy.get('input[name=\"test1.firstName\"]').should('have.value', 'firstName');\n    cy.get('input[name=\"test1.lastName.0\"]').should('have.value', 'lastName0');\n    cy.get('input[name=\"test1.lastName.1\"]').should('have.value', 'lastName1');\n    cy.get('input[name=\"checkbox\"]').eq(0).should('have.checked');\n    cy.get('input[name=\"checkbox\"]').eq(1).should('have.checked');\n    cy.get('input[name=\"checkbox\"]').eq(0).click();\n    cy.get('#toggle').click();\n    cy.get('#toggle').click();\n    cy.get('input[name=\"checkbox\"]').eq(0).should('not.have.checked');\n    cy.get('input[name=\"checkbox\"]').eq(1).should('have.checked');\n    cy.get('input[name=\"checkbox\"]').eq(1).click();\n    cy.get('#toggle').click();\n    cy.get('#toggle').click();\n    cy.get('input[name=\"checkbox\"]').eq(0).should('not.have.checked');\n    cy.get('input[name=\"checkbox\"]').eq(1).should('not.have.checked');\n  });","file":"integration/defaultValues.ts","skipped":false,"dir":"cypress"},{"name":"should return correct form state with onSubmit mode","suites":["form state"],"updatePoint":{"line":2,"column":57,"index":89},"line":2,"code":"  it('should return correct form state with onSubmit mode', () => {\n    cy.visit('http://localhost:3000/formState/onSubmit');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: [],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName'],\n      isSubmitted: true,\n      submitCount: 1,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: true,\n      submitCount: 2,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('#renderCount').contains('14');\n  });","file":"integration/formState.ts","skipped":false,"dir":"cypress"},{"name":"should return correct form state with onChange mode","suites":["form state"],"updatePoint":{"line":76,"column":57,"index":2589},"line":76,"code":"  it('should return correct form state with onChange mode', () => {\n    cy.visit('http://localhost:3000/formState/onChange');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: [],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName'],\n      isSubmitted: true,\n      submitCount: 1,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: true,\n      submitCount: 2,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('#renderCount').contains('14');\n  });","file":"integration/formState.ts","skipped":false,"dir":"cypress"},{"name":"should return correct form state with onBlur mode","suites":["form state"],"updatePoint":{"line":150,"column":55,"index":5086},"line":150,"code":"  it('should return correct form state with onBlur mode', () => {\n    cy.visit('http://localhost:3000/formState/onBlur');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: [],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName'],\n      isSubmitted: true,\n      submitCount: 1,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: true,\n      submitCount: 2,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('#renderCount').contains('15');\n  });","file":"integration/formState.ts","skipped":false,"dir":"cypress"},{"name":"should reset dirty value when inputs reset back to default with onSubmit mode","suites":["form state"],"updatePoint":{"line":224,"column":83,"index":7609},"line":224,"code":"  it('should reset dirty value when inputs reset back to default with onSubmit mode', () => {\n    cy.visit('http://localhost:3000/formState/onSubmit');\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('select[name=\"select\"]').select('test1');\n    cy.get('select[name=\"select\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['select'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('select[name=\"select\"]').select('');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"checkbox\"]').click();\n    cy.get('input[name=\"checkbox\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['checkbox'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select', 'checkbox'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"checkbox\"]').uncheck();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select', 'checkbox'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"checkbox-checked\"]').uncheck();\n    cy.get('input[name=\"checkbox-checked\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['checkbox-checked'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select', 'checkbox', 'checkbox-checked'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"checkbox-checked\"]').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select', 'checkbox', 'checkbox-checked'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"radio\"]').click();\n    cy.get('input[name=\"radio\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['radio'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select', 'checkbox', 'checkbox-checked', 'radio'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('select[name=\"select\"]').select('');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['radio'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select', 'checkbox', 'checkbox-checked', 'radio'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('#renderCount').contains('18');\n  });","file":"integration/formState.ts","skipped":false,"dir":"cypress"},{"name":"should reset dirty value when inputs reset back to default with onBlur mode","suites":["form state"],"updatePoint":{"line":346,"column":81,"index":12092},"line":346,"code":"  it('should reset dirty value when inputs reset back to default with onBlur mode', () => {\n    cy.visit('http://localhost:3000/formState/onBlur');\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('#renderCount').contains('8');\n  });","file":"integration/formState.ts","skipped":false,"dir":"cypress"},{"name":"should reset dirty value when inputs reset back to default with onChange mode","suites":["form state"],"updatePoint":{"line":377,"column":83,"index":13263},"line":377,"code":"  it('should reset dirty value when inputs reset back to default with onChange mode', () => {\n    cy.visit('http://localhost:3000/formState/onChange');\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('#resetForm').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: [],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('#renderCount').contains('13');\n  });","file":"integration/formState.ts","skipped":false,"dir":"cypress"},{"name":"should return correct form state with onSubmit mode","suites":["form state with nested fields"],"updatePoint":{"line":2,"column":57,"index":108},"line":2,"code":"  it('should return correct form state with onSubmit mode', () => {\n    cy.visit('http://localhost:3000/formStateWithNestedFields/onSubmit');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: false,\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: [],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test1\"]').type('test');\n    cy.get('input[name=\"left.test1\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test1\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: false,\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test1\"]').type('test');\n    cy.get('input[name=\"left.test2\"]').type('test');\n    cy.get('input[name=\"left.test2\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1', 'left.test2'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test2\"]').clear();\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1'],\n      isSubmitted: true,\n      submitCount: 1,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test2\"]').type('test');\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1', 'left.test2'],\n      isSubmitted: true,\n      submitCount: 2,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('#renderCount').contains('14');\n  });","file":"integration/formStateWithNestedFields.ts","skipped":false,"dir":"cypress"},{"name":"should return correct form state with onChange mode","suites":["form state with nested fields"],"updatePoint":{"line":76,"column":57,"index":2655},"line":76,"code":"  it('should return correct form state with onChange mode', () => {\n    cy.visit('http://localhost:3000/formStateWithNestedFields/onChange');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: false,\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: [],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test1\"]').type('test');\n    cy.get('input[name=\"left.test1\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test1\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: false,\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test1\"]').type('test');\n    cy.get('input[name=\"left.test2\"]').type('test');\n    cy.get('input[name=\"left.test2\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1', 'left.test2'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('input[name=\"left.test2\"]').clear();\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1'],\n      isSubmitted: true,\n      submitCount: 1,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test2\"]').type('test');\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1', 'left.test2'],\n      isSubmitted: true,\n      submitCount: 2,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('#renderCount').contains('14');\n  });","file":"integration/formStateWithNestedFields.ts","skipped":false,"dir":"cypress"},{"name":"should return correct form state with onBlur mode","suites":["form state with nested fields"],"updatePoint":{"line":150,"column":55,"index":5199},"line":150,"code":"  it('should return correct form state with onBlur mode', () => {\n    cy.visit('http://localhost:3000/formStateWithNestedFields/onBlur');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: false,\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: [],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test1\"]').type('test');\n    cy.get('input[name=\"left.test1\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test1\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: false,\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test1\"]').type('test');\n    cy.get('input[name=\"left.test2\"]').type('test');\n    cy.get('input[name=\"left.test2\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1', 'left.test2'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('input[name=\"left.test2\"]').clear();\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1'],\n      isSubmitted: true,\n      submitCount: 1,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test2\"]').type('test');\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1', 'left.test2'],\n      isSubmitted: true,\n      submitCount: 2,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('#renderCount').contains('15');\n  });","file":"integration/formStateWithNestedFields.ts","skipped":false,"dir":"cypress"},{"name":"should reset dirty value when inputs reset back to default with onSubmit mode","suites":["form state with nested fields"],"updatePoint":{"line":224,"column":83,"index":7769},"line":224,"code":"  it('should reset dirty value when inputs reset back to default with onSubmit mode', () => {\n    cy.visit('http://localhost:3000/formStateWithNestedFields/onSubmit');\n    cy.get('input[name=\"left.test1\"]').type('test');\n    cy.get('input[name=\"left.test1\"]').blur();\n    cy.get('input[name=\"left.test2\"]').type('test');\n    cy.get('input[name=\"left.test2\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1', 'left.test2'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test1\"]').clear();\n    cy.get('input[name=\"left.test2\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: false,\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('#renderCount').contains('7');\n  });","file":"integration/formStateWithNestedFields.ts","skipped":false,"dir":"cypress"},{"name":"should reset dirty value when inputs reset back to default with onBlur mode","suites":["form state with nested fields"],"updatePoint":{"line":254,"column":81,"index":8930},"line":254,"code":"  it('should reset dirty value when inputs reset back to default with onBlur mode', () => {\n    cy.visit('http://localhost:3000/formStateWithNestedFields/onBlur');\n    cy.get('input[name=\"left.test1\"]').type('test');\n    cy.get('input[name=\"left.test1\"]').blur();\n    cy.get('input[name=\"left.test2\"]').type('test');\n    cy.get('input[name=\"left.test2\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1', 'left.test2'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('input[name=\"left.test1\"]').clear();\n    cy.get('input[name=\"left.test2\"]').clear();\n    cy.get('input[name=\"left.test2\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: false,\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('#renderCount').contains('8');\n  });","file":"integration/formStateWithNestedFields.ts","skipped":false,"dir":"cypress"},{"name":"should reset dirty value when inputs reset back to default with onChange mode","suites":["form state with nested fields"],"updatePoint":{"line":285,"column":83,"index":10137},"line":285,"code":"  it('should reset dirty value when inputs reset back to default with onChange mode', () => {\n    cy.visit('http://localhost:3000/formStateWithNestedFields/onChange');\n    cy.get('input[name=\"left.test1\"]').type('test');\n    cy.get('input[name=\"left.test1\"]').blur();\n    cy.get('input[name=\"left.test2\"]').type('test');\n    cy.get('input[name=\"left.test2\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      dirty: ['left.test1', 'left.test2'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('#resetForm').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: false,\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: [],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"left.test1\"]').type('test');\n    cy.get('input[name=\"left.test1\"]').blur();\n    cy.get('input[name=\"left.test2\"]').type('test');\n    cy.get('input[name=\"left.test2\"]').blur();\n    cy.get('input[name=\"left.test1\"]').clear();\n    cy.get('input[name=\"left.test2\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: false,\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['left.test1', 'left.test2'],\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('#renderCount').contains('13');\n  });","file":"integration/formStateWithNestedFields.ts","skipped":false,"dir":"cypress"},{"name":"should return correct form state with onSubmit mode","suites":["form state with schema validation"],"updatePoint":{"line":2,"column":57,"index":112},"line":2,"code":"  it('should return correct form state with onSubmit mode', () => {\n    cy.visit('http://localhost:3000/formStateWithSchema/onSubmit');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: [],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName'],\n      isSubmitted: true,\n      submitCount: 1,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: true,\n      submitCount: 2,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('select[name=\"select\"]').select('1');\n    cy.get('#renderCount').contains('14');\n  });","file":"integration/formStateWithSchema.ts","skipped":false,"dir":"cypress"},{"name":"should return correct form state with onChange mode","suites":["form state with schema validation"],"updatePoint":{"line":77,"column":57,"index":2673},"line":77,"code":"  it('should return correct form state with onChange mode', () => {\n    cy.visit('http://localhost:3000/formState/onChange');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: [],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName'],\n      isSubmitted: true,\n      submitCount: 1,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: true,\n      submitCount: 2,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('#renderCount').contains('14');\n  });","file":"integration/formStateWithSchema.ts","skipped":false,"dir":"cypress"},{"name":"should return correct form state with onBlur mode","suites":["form state with schema validation"],"updatePoint":{"line":151,"column":55,"index":5170},"line":151,"code":"  it('should return correct form state with onBlur mode', () => {\n    cy.visit('http://localhost:3000/formState/onBlur');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: [],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName'],\n      isSubmitted: true,\n      submitCount: 1,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: true,\n      submitCount: 2,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: true,\n      isValid: true\n    }));\n    cy.get('#renderCount').contains('15');\n  });","file":"integration/formStateWithSchema.ts","skipped":false,"dir":"cypress"},{"name":"should reset dirty value when inputs reset back to default with onSubmit mode","suites":["form state with schema validation"],"updatePoint":{"line":225,"column":83,"index":7693},"line":225,"code":"  it('should reset dirty value when inputs reset back to default with onSubmit mode', () => {\n    cy.visit('http://localhost:3000/formState/onSubmit');\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('select[name=\"select\"]').select('test1');\n    cy.get('select[name=\"select\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['select'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('select[name=\"select\"]').select('');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"checkbox\"]').click();\n    cy.get('input[name=\"checkbox\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['checkbox'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select', 'checkbox'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"checkbox\"]').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select', 'checkbox'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"checkbox-checked\"]').click();\n    cy.get('input[name=\"checkbox-checked\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['checkbox-checked'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select', 'checkbox', 'checkbox-checked'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"checkbox-checked\"]').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select', 'checkbox', 'checkbox-checked'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"radio\"]').click();\n    cy.get('input[name=\"radio\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['radio'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select', 'checkbox', 'checkbox-checked', 'radio'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('select[name=\"select\"]').select('');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['radio'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName', 'select', 'checkbox', 'checkbox-checked', 'radio'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('#renderCount').contains('18');\n  });","file":"integration/formStateWithSchema.ts","skipped":false,"dir":"cypress"},{"name":"should reset dirty value when inputs reset back to default with onBlur mode","suites":["form state with schema validation"],"updatePoint":{"line":347,"column":81,"index":12172},"line":347,"code":"  it('should reset dirty value when inputs reset back to default with onBlur mode', () => {\n    cy.visit('http://localhost:3000/formState/onBlur');\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('#renderCount').contains('8');\n  });","file":"integration/formStateWithSchema.ts","skipped":false,"dir":"cypress"},{"name":"should reset dirty value when inputs reset back to default with onChange mode","suites":["form state with schema validation"],"updatePoint":{"line":378,"column":83,"index":13343},"line":378,"code":"  it('should reset dirty value when inputs reset back to default with onChange mode', () => {\n    cy.visit('http://localhost:3000/formState/onChange');\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: ['firstName', 'lastName'],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: true,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: true\n    }));\n    cy.get('#resetForm').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: [],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      dirty: [],\n      isSubmitted: false,\n      submitCount: 0,\n      touched: ['firstName', 'lastName'],\n      isDirty: false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false\n    }));\n    cy.get('#renderCount').contains('13');\n  });","file":"integration/formStateWithSchema.ts","skipped":false,"dir":"cypress"},{"name":"should showing valid correctly with build in validation","suites":["isValid"],"updatePoint":{"line":2,"column":61,"index":90},"line":2,"code":"  it('should showing valid correctly with build in validation', () => {\n    cy.visit('http://localhost:3000/isValid/build-in/defaultValue');\n    cy.get('#isValid').contains('false');\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('#isValid').contains('false');\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('#isValid').contains('true');\n    cy.get('#renderCount').contains('3');\n    cy.get('#toggle').click();\n    cy.get('#isValid').contains('false');\n    cy.get('#toggle').click();\n    cy.get('#isValid').contains('true');\n  });","file":"integration/isValid.ts","skipped":false,"dir":"cypress"},{"name":"should showing valid correctly with build in validation and default values supplied","suites":["isValid"],"updatePoint":{"line":15,"column":89,"index":680},"line":15,"code":"  it('should showing valid correctly with build in validation and default values supplied', () => {\n    cy.visit('http://localhost:3000/isValid/build-in/defaultValues');\n    cy.get('#isValid').contains('true');\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('#isValid').contains('false');\n    cy.get('#renderCount').contains('4');\n    cy.get('#toggle').click();\n    cy.get('#isValid').contains('false');\n  });","file":"integration/isValid.ts","skipped":false,"dir":"cypress"},{"name":"should showing valid correctly with schema validation","suites":["isValid"],"updatePoint":{"line":24,"column":59,"index":1071},"line":24,"code":"  it('should showing valid correctly with schema validation', () => {\n    cy.visit('http://localhost:3000/isValid/schema/defaultValue');\n    cy.get('#isValid').contains('false');\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('#isValid').contains('false');\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('#isValid').contains('true');\n    cy.get('#renderCount').contains('2');\n    cy.get('#toggle').click();\n    cy.get('#isValid').contains('false');\n    cy.get('#toggle').click();\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('#isValid').contains('true');\n    cy.get('#renderCount').contains('7');\n  });","file":"integration/isValid.ts","skipped":false,"dir":"cypress"},{"name":"should showing valid correctly with schema validation and default value supplied","suites":["isValid"],"updatePoint":{"line":39,"column":86,"index":1750},"line":39,"code":"  it('should showing valid correctly with schema validation and default value supplied', () => {\n    cy.visit('http://localhost:3000/isValid/schema/defaultValues');\n    cy.get('#isValid').contains('true');\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('#isValid').contains('false');\n    cy.get('#renderCount').contains('3');\n    cy.get('input[name=\"firstName\"]').type('test');\n    cy.get('#isValid').contains('true');\n    cy.get('#toggle').click();\n    cy.get('#isValid').contains('false');\n    cy.get('#toggle').click();\n    cy.get('input[name=\"firstName\"]').type('t');\n    cy.get('#isValid').contains('true');\n  });","file":"integration/isValid.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form","suites":["manual register form validation"],"updatePoint":{"line":2,"column":30,"index":83},"line":2,"code":"  it('should validate the form', () => {\n    cy.visit('http://localhost:3000/manual-register-form');\n    cy.get('#submit').click();\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"] + p').contains('selectNumber error');\n    cy.get('input[name=\"minRequiredLength\"] + p').contains('minRequiredLength error');\n    cy.get('input[name=\"radio\"] + p').contains('radio error');\n    cy.get('input[name=\"firstName\"]').type('bill');\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"pattern\"]').type('luo');\n    cy.get('input[name=\"min\"]').type('1');\n    cy.get('input[name=\"max\"]').type('21');\n    cy.get('input[name=\"minDate\"]').type('2019-07-30');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-02');\n    cy.get('input[name=\"lastName\"]').clear().type('luo');\n    cy.get('input[name=\"minLength\"]').type('b');\n    cy.get('input[name=\"pattern\"] + p').contains('pattern error');\n    cy.get('input[name=\"minLength\"] + p').contains('minLength error');\n    cy.get('input[name=\"min\"] + p').contains('min error');\n    cy.get('input[name=\"max\"] + p').contains('max error');\n    cy.get('input[name=\"minDate\"] + p').contains('minDate error');\n    cy.get('input[name=\"maxDate\"] + p').contains('maxDate error');\n    cy.get('input[name=\"pattern\"]').type('23');\n    cy.get('input[name=\"minLength\"]').type('bi');\n    cy.get('input[name=\"minRequiredLength\"]').type('bi');\n    cy.get('input[name=\"radio\"]').check('1');\n    cy.get('input[name=\"min\"]').clear().type('11');\n    cy.get('input[name=\"max\"]').clear().type('19');\n    cy.get('input[name=\"minDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-01');\n    cy.get('input[name=\"checkbox\"]').check();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('45');\n  });","file":"integration/manualRegisterForm.ts","skipped":false,"dir":"cypress"},{"name":"should be able to re-populate the form while reset","suites":["form reset"],"updatePoint":{"line":2,"column":56,"index":88},"line":2,"code":"  it('should be able to re-populate the form while reset', () => {\n    cy.visit('http://localhost:3000/reset');\n    cy.get('input[name=\"firstName\"]').type('0 wrong');\n    cy.get('input[name=\"array.1\"]').type('1 wrong');\n    cy.get('input[name=\"objectData.test\"]').type('2 wrong');\n    cy.get('input[name=\"lastName\"]').type('lastName');\n    cy.get('input[name=\"deepNest.level1.level2.data\"]').type('whatever');\n    cy.get('button').click();\n    cy.get('input[name=\"firstName\"]').should('have.value', 'bill');\n    cy.get('input[name=\"lastName\"]').should('have.value', 'luo');\n    cy.get('input[name=\"array.1\"]').should('have.value', 'test');\n    cy.get('input[name=\"objectData.test\"]').should('have.value', 'data');\n    cy.get('input[name=\"deepNest.level1.level2.data\"]').should('have.value', 'hey');\n  });","file":"integration/reset.ts","skipped":false,"dir":"cypress"},{"name":"should re-validate the form only onSubmit with mode onSubmit and reValidateMode onSubmit","suites":["re-validate mode"],"updatePoint":{"line":2,"column":94,"index":132},"line":2,"code":"  it('should re-validate the form only onSubmit with mode onSubmit and reValidateMode onSubmit', () => {\n    cy.visit('http://localhost:3000/re-validate-mode/onSubmit/onSubmit');\n    cy.get('button#submit').click();\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"firstName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"]').type('luo12');\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('button#submit').click();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('4');\n  });","file":"integration/reValidateMode.ts","skipped":false,"dir":"cypress"},{"name":"should re-validate the form only onBlur with mode onSubmit and reValidateMode onBlur","suites":["re-validate mode"],"updatePoint":{"line":15,"column":90,"index":860},"line":15,"code":"  it('should re-validate the form only onBlur with mode onSubmit and reValidateMode onBlur', () => {\n    cy.visit('http://localhost:3000/re-validate-mode/onSubmit/onBlur');\n    cy.get('input[name=\"firstName\"]').focus();\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"lastName\"]').focus();\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('p').should('have.length', 0);\n    cy.get('button#submit').click();\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"firstName\"]').type('luo123456');\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"lastName\"]').type('luo12');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('4');\n  });","file":"integration/reValidateMode.ts","skipped":false,"dir":"cypress"},{"name":"should re-validate the form only onSubmit with mode onBlur and reValidateMode onSubmit","suites":["re-validate mode"],"updatePoint":{"line":34,"column":92,"index":1868},"line":34,"code":"  it('should re-validate the form only onSubmit with mode onBlur and reValidateMode onSubmit', () => {\n    cy.visit('http://localhost:3000/re-validate-mode/onBlur/onSubmit');\n    cy.get('button#submit').click();\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"firstName\"]').type('luo123456');\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"lastName\"]').type('luo12');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('button#submit').click();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('4');\n  });","file":"integration/reValidateMode.ts","skipped":false,"dir":"cypress"},{"name":"should re-validate the form only onSubmit with mode onChange and reValidateMode onSubmit","suites":["re-validate mode"],"updatePoint":{"line":51,"column":94,"index":2829},"line":51,"code":"  it('should re-validate the form only onSubmit with mode onChange and reValidateMode onSubmit', () => {\n    cy.visit('http://localhost:3000/re-validate-mode/onChange/onSubmit');\n    cy.get('button#submit').click();\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"firstName\"]').type('luo123456');\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"]').type('luo12');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('button#submit').click();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('4');\n  });","file":"integration/reValidateMode.ts","skipped":false,"dir":"cypress"},{"name":"should re-validate the form onBlur only with mode onBlur and reValidateMode onBlur","suites":["re-validate mode"],"updatePoint":{"line":66,"column":88,"index":3695},"line":66,"code":"  it('should re-validate the form onBlur only with mode onBlur and reValidateMode onBlur', () => {\n    cy.visit('http://localhost:3000/re-validate-mode/onBlur/onBlur');\n    cy.get('input[name=\"firstName\"]').focus();\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"]').focus();\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"firstName\"]').type('luo123456');\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"lastName\"]').type('luo12');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('5');\n  });","file":"integration/reValidateMode.ts","skipped":false,"dir":"cypress"},{"name":"should re-validate the form onChange with mode onBlur and reValidateMode onChange","suites":["re-validate mode"],"updatePoint":{"line":83,"column":87,"index":4617},"line":83,"code":"  it('should re-validate the form onChange with mode onBlur and reValidateMode onChange', () => {\n    cy.visit('http://localhost:3000/re-validate-mode/onBlur/onChange');\n    cy.get('input[name=\"firstName\"]').focus();\n    cy.get('input[name=\"firstName\"]').blur();\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('input[name=\"lastName\"]').focus();\n    cy.get('input[name=\"lastName\"]').blur();\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('button#submit').click();\n    cy.get('input[name=\"firstName\"]').type('luo123456');\n    cy.get('input[name=\"lastName\"]').type('luo12');\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('6');\n  });","file":"integration/reValidateMode.ts","skipped":false,"dir":"cypress"},{"name":"should contain 3 errors when page land","suites":["form setError"],"updatePoint":{"line":2,"column":44,"index":79},"line":2,"code":"  it('should contain 3 errors when page land', () => {\n    cy.visit('http://localhost:3000/setError');\n    cy.get('#error0').contains('0 wrong');\n    cy.get('#error1').contains('1 wrong');\n    cy.get('#error2').contains('2 wrong');\n    cy.get('#error3').contains('3 test');\n    cy.get('#error4').contains('4 required');\n    cy.get('#error5').contains('5 minLength');\n    cy.get('#error').contains('testMessageThis is required.Minlength is 10This is requiredThis is minLength');\n  });","file":"integration/setError.ts","skipped":false,"dir":"cypress"},{"name":"should clear individual error","suites":["form setError"],"updatePoint":{"line":12,"column":35,"index":554},"line":12,"code":"  it('should clear individual error', () => {\n    cy.visit('http://localhost:3000/setError');\n    cy.get('#clear1').click();\n    cy.get('#clear2').click();\n    cy.get('#error0').contains('0 wrong');\n  });","file":"integration/setError.ts","skipped":false,"dir":"cypress"},{"name":"should clear an array of errors","suites":["form setError"],"updatePoint":{"line":18,"column":37,"index":761},"line":18,"code":"  it('should clear an array of errors', () => {\n    cy.visit('http://localhost:3000/setError');\n    cy.get('#clearArray').click();\n    cy.get('#error0').contains('0 wrong');\n  });","file":"integration/setError.ts","skipped":false,"dir":"cypress"},{"name":"should clear every errors","suites":["form setError"],"updatePoint":{"line":23,"column":31,"index":935},"line":23,"code":"  it('should clear every errors', () => {\n    cy.visit('http://localhost:3000/setError');\n    cy.get('#clear').click();\n    cy.get('#errorContainer').should('not.value');\n  });","file":"integration/setError.ts","skipped":false,"dir":"cypress"},{"name":"should focus input","suites":["form setFocus"],"updatePoint":{"line":2,"column":24,"index":59},"line":2,"code":"  it('should focus input', () => {\n    cy.visit('http://localhost:3000/setFocus');\n    cy.get('button:contains(\"Focus Input\")').click();\n    cy.get('input[name=\"focusInput\"]').should('be.focused');\n  });","file":"integration/setFocus.ts","skipped":false,"dir":"cypress"},{"name":"should select input content","suites":["form setFocus"],"updatePoint":{"line":7,"column":33,"index":272},"line":7,"code":"  it('should select input content', () => {\n    cy.visit('http://localhost:3000/setFocus');\n    cy.get('button:contains(\"Select Input Content\")').click();\n    cy.get('input[name=\"selectInputContent\"]').type('New Value').should('have.value', 'New Value');\n  });","file":"integration/setFocus.ts","skipped":false,"dir":"cypress"},{"name":"should focus textarea","suites":["form setFocus"],"updatePoint":{"line":12,"column":27,"index":527},"line":12,"code":"  it('should focus textarea', () => {\n    cy.visit('http://localhost:3000/setFocus');\n    cy.get('button:contains(\"Focus Textarea\")').click();\n    cy.get('textarea[name=\"focusTextarea\"]').should('be.focused');\n  });","file":"integration/setFocus.ts","skipped":false,"dir":"cypress"},{"name":"should select input content","suites":["form setFocus"],"updatePoint":{"line":17,"column":33,"index":749},"line":17,"code":"  it('should select input content', () => {\n    cy.visit('http://localhost:3000/setFocus');\n    cy.get('button:contains(\"Select Textarea Content\")').click();\n    cy.get('textarea[name=\"selectTextareaContent\"]').type('New Value').should('have.value', 'New Value');\n  });","file":"integration/setFocus.ts","skipped":false,"dir":"cypress"},{"name":"should set input value, trigger validation and clear all errors","suites":["form setValue"],"updatePoint":{"line":2,"column":69,"index":104},"line":2,"code":"  it('should set input value, trigger validation and clear all errors', () => {\n    cy.visit('http://localhost:3000/setValue');\n    cy.get('input[name=\"firstName\"]').should('have.value', 'wrong');\n    cy.get('input[name=\"age\"]').should('have.value', '2');\n    cy.get('input[name=\"array.0\"]').should('have.value', 'array.0');\n    cy.get('input[name=\"array.1\"]').should('have.value', 'array.1');\n    cy.get('input[name=\"array.2\"]').should('have.value', 'array.2');\n    cy.get('input[name=\"object.firstName').should('have.value', 'firstName');\n    cy.get('input[name=\"object.lastName').should('have.value', 'lastName');\n    cy.get('input[name=\"object.middleName').should('have.value', 'middleName');\n    cy.get('input[name=\"radio\"]').should('have.checked', true);\n    cy.get('input[name=\"checkboxArray\"][value=\"2\"]').should('have.checked', true);\n    cy.get('input[name=\"checkboxArray\"][value=\"3\"]').should('have.checked', true);\n    cy.get('select[name=\"select\"]').should('have.value', 'a');\n    cy.get('select[name=\"multiple\"]').invoke('val').should('deep.equal', ['a', 'b']);\n    cy.get('#trigger').contains('Trigger error');\n    cy.get('#lastName').should('not.exist');\n    cy.get('#nestedValue').contains('required');\n    cy.get('#submit').click();\n    cy.get('#lastName').contains('Last name error');\n    cy.get('input[name=\"lastName\"]').type('test');\n    cy.get('input[name=\"trigger\"]').type('trigger');\n    cy.get('input[name=\"nestedValue\"]').type('test');\n    cy.get('#submit').click();\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('9');\n    cy.get('#setMultipleValues').click();\n    cy.get('input[name=\"array.0\"]').should('have.value', 'array[0]1');\n    cy.get('input[name=\"array.1\"]').should('have.value', 'array[1]1');\n    cy.get('input[name=\"array.2\"]').should('have.value', 'array[2]1');\n    cy.get('input[name=\"object.firstName').should('have.value', 'firstName1');\n    cy.get('input[name=\"object.lastName').should('have.value', 'lastName1');\n    cy.get('input[name=\"object.middleName').should('have.value', 'middleName1');\n    cy.get('input[name=\"nestedValue\"]').should('have.value', 'a,b');\n    cy.get('#renderCount').contains('9');\n  });","file":"integration/setValue.ts","skipped":false,"dir":"cypress"},{"name":"should set async input value correctly","suites":["form setValueAsyncStrictMode"],"updatePoint":{"line":2,"column":44,"index":94},"line":2,"code":"  it('should set async input value correctly', () => {\n    cy.visit('http://localhost:3000/setValueAsyncStrictMode');\n    cy.wait(10);\n    cy.get('#submit').click();\n    cy.get('p').contains('[\"test\",\"A\",\"B\",\"C\",\"D\"]');\n  });","file":"integration/setValueAsyncStrictMode.ts","skipped":false,"dir":"cypress"},{"name":"should only trigger re-render when form state changed or error triggered","suites":["setValue with react native or web"],"updatePoint":{"line":2,"column":78,"index":133},"line":2,"code":"  it('should only trigger re-render when form state changed or error triggered', () => {\n    cy.visit('http://localhost:3000/setValueCustomRegister');\n    cy.get('#dirty').contains('false');\n    cy.get('#TriggerDirty').click();\n    cy.get('#dirty').contains('true');\n    cy.get('#TriggerNothing').click();\n    cy.get('#TriggerNothing').click();\n    cy.get('#TriggerNothing').click();\n    cy.get('#TriggerNothing').click();\n    cy.get('#renderCount').contains('2');\n    cy.get('#WithError').click();\n    cy.get('#renderCount').contains('3');\n    cy.get('#WithError').click();\n    cy.get('#renderCount').contains('4');\n    cy.get('#WithoutError').click();\n    cy.get('#renderCount').contains('5');\n    cy.get('#WithoutError').click();\n    cy.get('#renderCount').contains('6');\n    cy.get('#WithError').click();\n    cy.get('#renderCount').contains('7');\n    cy.get('#TriggerNothing').click();\n    cy.get('#renderCount').contains('7');\n  });","file":"integration/setValueCustomRegister.ts","skipped":false,"dir":"cypress"},{"name":"should set input value, trigger validation and clear all errors","suites":["form setValue with schema"],"updatePoint":{"line":2,"column":69,"index":116},"line":2,"code":"  it('should set input value, trigger validation and clear all errors', () => {\n    cy.visit('http://localhost:3000/setValueWithSchema');\n    cy.get('input[name=\"firstName\"]').type('a');\n    cy.get('input[name=\"firstName\"] + p').contains('firstName error');\n    cy.get('p').should('have.length', 1);\n    cy.get('input[name=\"firstName\"]').type('asdasdasdasd');\n    cy.get('input[name=\"lastName\"]').type('a');\n    cy.get('input[name=\"lastName\"] + p').contains('lastName error');\n    cy.get('p').should('have.length', 1);\n    cy.get('input[name=\"lastName\"]').type('asdasdasdasd');\n    cy.get('input[name=\"age\"]').type('a2323');\n    cy.get('#submit').click();\n    cy.get('p').should('have.length', 1);\n    cy.get('input[name=\"requiredField\"] + p').contains('RequiredField error');\n    cy.get('#setValue').click();\n    cy.get('input[name=\"requiredField\"]').should('have.value', 'test123456789');\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('34');\n  });","file":"integration/setValueWithSchema.ts","skipped":false,"dir":"cypress"},{"name":"should set input value and trigger validation","suites":["form setValue with trigger"],"updatePoint":{"line":2,"column":51,"index":99},"line":2,"code":"  it('should set input value and trigger validation', () => {\n    cy.visit('http://localhost:3000/setValueWithTrigger');\n    cy.get('input[name=\"firstName\"]').type('a');\n    cy.get('input[name=\"firstName\"] + p').contains('minLength 10');\n    cy.get('input[name=\"firstName\"]').clear();\n    cy.get('input[name=\"firstName\"] + p').contains('required');\n    cy.get('input[name=\"firstName\"]').type('clear1234567');\n    cy.get('input[name=\"lastName\"]').type('a');\n    cy.get('input[name=\"lastName\"] + p').contains('too short');\n    cy.get('input[name=\"lastName\"]').type('fsdfsdfsd');\n    cy.get('input[name=\"lastName\"] + p').contains('error message');\n    cy.get('input[name=\"lastName\"]').clear();\n    cy.get('input[name=\"lastName\"]').type('bill');\n    cy.get('p').should('have.length', 0);\n    cy.get('#renderCount').contains('30');\n  });","file":"integration/setValueWithTrigger.ts","skipped":false,"dir":"cypress"},{"name":"should trigger input validation","suites":["form trigger"],"updatePoint":{"line":2,"column":37,"index":71},"line":2,"code":"  it('should trigger input validation', () => {\n    cy.visit('http://localhost:3000/trigger-validation');\n    cy.get('#testError').should('be.empty');\n    cy.get('#test1Error').should('be.empty');\n    cy.get('#test2Error').should('be.empty');\n    cy.get('#single').click();\n    cy.get('#testError').contains('required');\n    cy.get('#single').click();\n    cy.get('#multiple').click();\n    cy.get('#test1Error').contains('required');\n    cy.get('#test2Error').contains('required');\n    cy.get('#renderCount').contains('4');\n    cy.get('#multiple').click();\n    cy.get('#renderCount').contains('5');\n  });","file":"integration/triggerValidation.ts","skipped":false,"dir":"cypress"},{"name":"should behaviour correctly without defaultValues","suites":["useFieldArray"],"updatePoint":{"line":2,"column":54,"index":89},"line":2,"code":"  it('should behaviour correctly without defaultValues', () => {\n    cy.visit('http://localhost:3000/useFieldArray/normal');\n    cy.get('#append').click();\n    cy.get('ul > li').its('length').should('equal', 1);\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '2'\n      }]\n    }));\n    cy.get('#prepend').click();\n    cy.get('ul > li').its('length').should('equal', 2);\n    cy.get('ul > li').eq(0).get('input').should('have.value', '7');\n    cy.get('#append').click();\n    cy.get('ul > li').its('length').should('equal', 3);\n    cy.get('ul > li').eq(2).find('input').should('have.value', '9');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '7'\n      }, {\n        name: '2'\n      }, {\n        name: '9'\n      }]\n    }));\n    cy.get('#swap').click();\n    cy.get('ul > li').eq(1).find('input').should('have.value', '9');\n    cy.get('ul > li').eq(2).find('input').should('have.value', '2');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '7'\n      }, {\n        name: '9'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#move').click();\n    cy.get('ul > li').eq(0).find('input').should('have.value', '2');\n    cy.get('ul > li').eq(1).find('input').should('have.value', '7');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '2'\n      }, {\n        name: '7'\n      }, {\n        name: '9'\n      }]\n    }));\n    cy.get('#insert').click();\n    cy.get('ul > li').eq(1).find('input').should('have.value', '22');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '2'\n      }, {\n        name: '22'\n      }, {\n        name: '7'\n      }, {\n        name: '9'\n      }]\n    }));\n    cy.get('#remove').click();\n    cy.get('ul > li').eq(0).find('input').should('have.value', '2');\n    cy.get('ul > li').eq(1).find('input').should('have.value', '7');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '2'\n      }, {\n        name: '7'\n      }, {\n        name: '9'\n      }]\n    }));\n    cy.get('#delete1').click();\n    cy.get('ul > li').its('length').should('equal', 2);\n    cy.get('ul > li').eq(0).find('input').should('have.value', '2');\n    cy.get('ul > li').eq(1).find('input').should('have.value', '9');\n    cy.get('#delete1').click();\n    cy.get('ul > li').its('length').should('equal', 1);\n    cy.get('ul > li').eq(0).find('input').should('have.value', '2');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '2'\n      }]\n    }));\n    cy.get('#update').click();\n    cy.get('ul > li').eq(0).find('input').should('have.value', 'changed');\n    cy.get('#removeAll').click();\n    cy.get('ul > li').should('have.length', 0);\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: []\n    }));\n    cy.get('#append').click();\n    cy.get('#append').click();\n    cy.get('#append').click();\n    cy.get('#removeAsync').click();\n    cy.get('#removeAsync').click();\n    cy.get('input').should('have.length', 1);\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '41'\n      }]\n    }));\n    cy.get('#renderCount').contains('54');\n  });","file":"integration/useFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should behaviour correctly with defaultValue","suites":["useFieldArray"],"updatePoint":{"line":116,"column":50,"index":3904},"line":116,"code":"  it('should behaviour correctly with defaultValue', () => {\n    cy.visit('http://localhost:3000/useFieldArray/default');\n    cy.get('ul > li').its('length').should('equal', 3);\n    cy.get('ul > li').eq(0).find('input').should('have.value', 'test');\n    cy.get('ul > li').eq(1).find('input').should('have.value', 'test1');\n    cy.get('ul > li').eq(2).find('input').should('have.value', 'test2');\n    cy.get('#append').click();\n    cy.get('ul > li').eq(3).find('input').should('have.value', '2');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: 'test'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test2'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#prepend').click();\n    cy.get('ul > li').its('length').should('equal', 5);\n    cy.get('ul > li').eq(0).get('input').should('have.value', '7');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '7'\n      }, {\n        name: 'test'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test2'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#swap').click();\n    cy.get('ul > li').eq(1).find('input').should('have.value', 'test1');\n    cy.get('ul > li').eq(2).find('input').should('have.value', 'test');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '7'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test'\n      }, {\n        name: 'test2'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#move').click();\n    cy.get('ul > li').eq(0).find('input').should('have.value', 'test');\n    cy.get('ul > li').eq(1).find('input').should('have.value', '7');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: 'test'\n      }, {\n        name: '7'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test2'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#insert').click();\n    cy.get('ul > li').eq(1).find('input').should('have.value', '20');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: 'test'\n      }, {\n        name: '20'\n      }, {\n        name: '7'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test2'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#remove').click();\n    cy.get('ul > li').eq(0).find('input').should('have.value', 'test');\n    cy.get('ul > li').eq(1).find('input').should('have.value', '7');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: 'test'\n      }, {\n        name: '7'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test2'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#delete2').click();\n    cy.get('ul > li').its('length').should('equal', 4);\n    cy.get('ul > li').eq(0).find('input').should('have.value', 'test');\n    cy.get('ul > li').eq(1).find('input').should('have.value', '7');\n    cy.get('ul > li').eq(2).find('input').should('have.value', 'test2');\n    cy.get('ul > li').eq(3).find('input').should('have.value', '2');\n    cy.get('#delete3').click();\n    cy.get('ul > li').its('length').should('equal', 3);\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: 'test'\n      }, {\n        name: '7'\n      }, {\n        name: 'test2'\n      }]\n    }));\n    cy.get('#removeAll').click();\n    cy.get('ul > li').should('have.length', 0);\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: []\n    }));\n    cy.get('#append').click();\n    cy.get('ul > li').eq(0).find('input').should('have.value', '38');\n    cy.get('#prepend').click();\n    cy.get('ul > li').eq(0).find('input').should('have.value', '40');\n    cy.get('#renderCount').contains('41');\n  });","file":"integration/useFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should behaviour correctly with defaultValue and without auto focus","suites":["useFieldArray"],"updatePoint":{"line":252,"column":73,"index":8182},"line":252,"code":"  it('should behaviour correctly with defaultValue and without auto focus', () => {\n    cy.visit('http://localhost:3000/useFieldArray/defaultAndWithoutFocus');\n    cy.get('ul > li').its('length').should('equal', 3);\n    cy.get('ul > li').eq(0).find('input').should('have.value', 'test');\n    cy.get('ul > li').eq(1).find('input').should('have.value', 'test1');\n    cy.get('ul > li').eq(2).find('input').should('have.value', 'test2');\n    cy.get('#append').click();\n    cy.get('ul > li').eq(3).find('input').should('have.value', '2');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: 'test'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test2'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#prepend').click();\n    cy.get('ul > li').its('length').should('equal', 5);\n    cy.get('ul > li').eq(0).get('input').should('have.value', '6');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '6'\n      }, {\n        name: 'test'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test2'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#swap').click();\n    cy.get('ul > li').eq(1).find('input').should('have.value', 'test1');\n    cy.get('ul > li').eq(2).find('input').should('have.value', 'test');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '6'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test'\n      }, {\n        name: 'test2'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#move').click();\n    cy.get('ul > li').eq(0).find('input').should('have.value', 'test');\n    cy.get('ul > li').eq(1).find('input').should('have.value', '6');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: 'test'\n      }, {\n        name: '6'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test2'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#insert').click();\n    cy.get('ul > li').eq(1).find('input').should('have.value', '18');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: 'test'\n      }, {\n        name: '18'\n      }, {\n        name: '6'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test2'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#remove').click();\n    cy.get('ul > li').eq(0).find('input').should('have.value', 'test');\n    cy.get('ul > li').eq(1).find('input').should('have.value', '6');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: 'test'\n      }, {\n        name: '6'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test2'\n      }, {\n        name: '2'\n      }]\n    }));\n    cy.get('#delete2').click();\n    cy.get('ul > li').its('length').should('equal', 4);\n    cy.get('ul > li').eq(0).find('input').should('have.value', 'test');\n    cy.get('ul > li').eq(1).find('input').should('have.value', '6');\n    cy.get('ul > li').eq(2).find('input').should('have.value', 'test2');\n    cy.get('ul > li').eq(3).find('input').should('have.value', '2');\n    cy.get('#delete3').click();\n    cy.get('ul > li').its('length').should('equal', 3);\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: 'test'\n      }, {\n        name: '6'\n      }, {\n        name: 'test2'\n      }]\n    }));\n    cy.get('#removeAll').click();\n    cy.get('ul > li').should('have.length', 0);\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: []\n    }));\n    cy.get('#append').click();\n    cy.get('ul > li').eq(0).find('input').should('have.value', '35');\n    cy.get('#prepend').click();\n    cy.get('ul > li').eq(0).find('input').should('have.value', '36');\n    cy.get('#renderCount').contains('37');\n  });","file":"integration/useFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should replace fields with new values","suites":["useFieldArray"],"updatePoint":{"line":388,"column":43,"index":12445},"line":388,"code":"  it('should replace fields with new values', () => {\n    cy.get('#replace').click();\n    cy.get('ul > li').eq(0).find('input').should('have.value', '37. lorem');\n    cy.get('ul > li').eq(1).find('input').should('have.value', '37. ipsum');\n    cy.get('ul > li').eq(2).find('input').should('have.value', '37. dolor');\n    cy.get('ul > li').eq(3).find('input').should('have.value', '37. sit amet');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '37. lorem'\n      }, {\n        name: '37. ipsum'\n      }, {\n        name: '37. dolor'\n      }, {\n        name: '37. sit amet'\n      }]\n    }));\n  });","file":"integration/useFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should display the correct dirty value with default value","suites":["useFieldArray"],"updatePoint":{"line":407,"column":63,"index":13164},"line":407,"code":"  it('should display the correct dirty value with default value', () => {\n    cy.visit('http://localhost:3000/useFieldArray/default');\n    cy.get('#dirty').contains('no');\n    cy.get('#update').click();\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }, {\n        name: false\n      }, {\n        name: false\n      }]\n    }));\n    cy.get('#dirty').contains('yes');\n    cy.get('#updateRevert').click();\n    cy.get('#dirty').contains('no');\n    cy.get('#append').click();\n    cy.get('#field1').type('test');\n    cy.get('#prepend').click();\n    cy.get('#delete2').click();\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }, {\n        name: true\n      }, {\n        name: false\n      }, {\n        name: true\n      }]\n    }));\n    cy.get('#delete2').click();\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }, {\n        name: true\n      }, {\n        name: true\n      }]\n    }));\n    cy.get('#delete1').click();\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }, {\n        name: true\n      }, {\n        name: true\n      }]\n    }));\n    cy.get('#delete1').click();\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }, {\n        name: true\n      }, {\n        name: true\n      }]\n    }));\n    cy.get('#delete0').click();\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }, {\n        name: true\n      }, {\n        name: true\n      }]\n    }));\n    cy.get('#dirty').contains('yes');\n    cy.get('#renderCount').contains('15');\n  });","file":"integration/useFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should display the correct dirty value without default value","suites":["useFieldArray"],"updatePoint":{"line":481,"column":66,"index":15115},"line":481,"code":"  it('should display the correct dirty value without default value', () => {\n    cy.visit('http://localhost:3000/useFieldArray/normal');\n    cy.get('#dirty').contains('no');\n    cy.get('#append').click();\n    cy.get('#dirty').contains('yes');\n    cy.get('#field0').focus();\n    cy.get('#field0').blur();\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }]\n    }));\n    cy.get('#dirty').contains('yes');\n    cy.get('#field0').type('test');\n    cy.get('#field0').blur();\n    cy.get('#dirty').contains('yes');\n    cy.get('#prepend').click();\n    cy.get('#prepend').click();\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }, {\n        name: true\n      }, {\n        name: true\n      }]\n    }));\n    cy.get('#delete0').click();\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }, {\n        name: true\n      }]\n    }));\n    cy.get('#delete1').click();\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }]\n    }));\n    cy.get('#delete0').click();\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: []\n    }));\n    cy.get('#dirty').contains('yes');\n  });","file":"integration/useFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should display the correct dirty value with default value","suites":["useFieldArray"],"updatePoint":{"line":528,"column":63,"index":16569},"line":528,"code":"  it('should display the correct dirty value with default value', () => {\n    cy.visit('http://localhost:3000/useFieldArray/default');\n    cy.get('#dirty').contains('no');\n    cy.get('#field0').focus();\n    cy.get('#field0').blur();\n    cy.get('#dirty').contains('no');\n    cy.get('#field0').type('test');\n    cy.get('#dirty').contains('yes');\n    cy.get('#field0').blur();\n    cy.get('#dirty').contains('yes');\n    cy.get('#field0').focus();\n    cy.get('#field0').blur();\n    cy.get('#dirty').contains('yes');\n    cy.get('#field0').clear();\n    cy.get('#field0').type('test');\n    cy.get('#dirty').contains('no');\n    cy.get('#delete1').click();\n    cy.get('#dirty').contains('yes');\n    cy.get('#append').click();\n    cy.get('#field0').clear().type('test');\n    cy.get('#field1').clear().type('test1');\n    cy.get('#field2').clear().type('test2');\n    cy.get('#dirty').contains('no');\n  });","file":"integration/useFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should display the correct dirty value with async default value","suites":["useFieldArray"],"updatePoint":{"line":552,"column":69,"index":17468},"line":552,"code":"  it('should display the correct dirty value with async default value', () => {\n    cy.visit('http://localhost:3000/useFieldArray/asyncReset');\n    cy.get('#dirty').contains('no');\n    cy.get('#field0').focus();\n    cy.get('#field0').blur();\n    cy.get('#dirty').contains('no');\n    cy.get('#field0').type('test');\n    cy.get('#dirty').contains('yes');\n    cy.get('#field0').blur();\n    cy.get('#dirty').contains('yes');\n    cy.get('#field0').focus();\n    cy.get('#field0').blur();\n    cy.get('#dirty').contains('yes');\n    cy.get('#field0').clear();\n    cy.get('#field0').type('test');\n    cy.get('#dirty').contains('no');\n    cy.get('#delete1').click();\n    cy.get('#dirty').contains('yes');\n    cy.get('#append').click();\n    cy.get('#field0').clear().type('test');\n    cy.get('#field1').clear().type('test1');\n    cy.get('#field2').clear().type('test2');\n    cy.get('#dirty').contains('no');\n  });","file":"integration/useFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should display correct error with the inputs","suites":["useFieldArray"],"updatePoint":{"line":576,"column":50,"index":18351},"line":576,"code":"  it('should display correct error with the inputs', () => {\n    cy.visit('http://localhost:3000/useFieldArray/default');\n    cy.get('#prepend').click();\n    cy.get('#field1').clear();\n    cy.get('#field2').clear();\n    cy.get('#field3').clear();\n    cy.get('#append').click();\n    cy.get('#submit').click();\n    cy.get('#error1').contains('This is required');\n    cy.get('#error2').contains('This is required');\n    cy.get('#error3').contains('This is required');\n    cy.get('#field1').type('test');\n    cy.get('#error1').should('not.exist');\n    cy.get('#error2').contains('This is required');\n    cy.get('#error3').contains('This is required');\n    cy.get('#move').click();\n    cy.get('#error0').contains('This is required');\n    cy.get('#error2').should('not.exist');\n    cy.get('#prepend').click();\n    cy.get('#error0').should('not.exist');\n    cy.get('#error1').contains('This is required');\n  });","file":"integration/useFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should return correct touched values","suites":["useFieldArray"],"updatePoint":{"line":598,"column":42,"index":19248},"line":598,"code":"  it('should return correct touched values', () => {\n    cy.visit('http://localhost:3000/useFieldArray/default');\n    cy.get('#field0').type('1');\n    cy.get('#field1').type('1');\n    cy.get('#field2').type('1');\n    cy.get('#touched').contains('[{\"name\":true},{\"name\":true}]');\n    cy.get('#append').click();\n    cy.get('#prepend').click();\n    cy.get('#touched').contains('[null,{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true}]');\n    cy.get('#insert').click();\n    cy.get('#touched').contains('[{\"name\":true},null,{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true}]');\n    cy.get('#swap').click();\n    cy.get('#touched').contains('[{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true}]');\n    cy.get('#move').click();\n    cy.get('#touched').contains('[{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true}]');\n    cy.get('#insert').click();\n    cy.get('#touched').contains('[{\"name\":true},null,{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true}]');\n    cy.get('#delete4').click();\n    cy.get('#touched').contains('[{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true},{\"name\":true}]');\n  });","file":"integration/useFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should return correct touched values without autoFocus","suites":["useFieldArray"],"updatePoint":{"line":618,"column":60,"index":20471},"line":618,"code":"  it('should return correct touched values without autoFocus', () => {\n    cy.visit('http://localhost:3000/useFieldArray/defaultAndWithoutFocus');\n    cy.get('#field0').type('1');\n    cy.get('#field1').type('1');\n    cy.get('#field2').type('1');\n    cy.get('#touched').contains('[{\"name\":true},{\"name\":true}]');\n    cy.get('#append').click();\n    cy.get('#prepend').click();\n    cy.get('#touched').contains('[null,{\"name\":true},{\"name\":true},{\"name\":true},null]');\n    cy.get('#insert').click();\n    cy.get('#touched').contains('[null,null,{\"name\":true},{\"name\":true},{\"name\":true},null]');\n    cy.get('#swap').click();\n    cy.get('#touched').contains('[null,{\"name\":true},null,{\"name\":true},{\"name\":true},null]');\n    cy.get('#move').click();\n    cy.get('#touched').contains('[null,null,{\"name\":true},{\"name\":true},{\"name\":true},null]');\n    cy.get('#insert').click();\n    cy.get('#touched').contains('[null,null,null,{\"name\":true},{\"name\":true},{\"name\":true},null]');\n    cy.get('#delete4').click();\n    cy.get('#touched').contains('[null,null,null,{\"name\":true},{\"name\":true},null]');\n  });","file":"integration/useFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should return correct isValid formState","suites":["useFieldArray"],"updatePoint":{"line":638,"column":45,"index":21550},"line":638,"code":"  it('should return correct isValid formState', () => {\n    cy.visit('http://localhost:3000/useFieldArray/formState');\n    cy.get('#isValid').get('#isValid').contains('yes');\n    cy.get('#append').click();\n    cy.get('#append').click();\n    cy.get('#append').click();\n    cy.get('#isValid').get('#isValid').contains('yes');\n    cy.get('#field0').clear();\n    cy.get('#isValid').get('#isValid').contains('no');\n    cy.get('#delete0').click();\n    cy.get('#field1').type('1');\n    cy.get('#isValid').get('#isValid').contains('yes');\n    cy.get('#field0').clear();\n    cy.get('#isValid').get('#isValid').contains('no');\n    cy.get('#delete0').click();\n    cy.get('#isValid').get('#isValid').contains('yes');\n    cy.get('#append').click();\n    cy.get('#field0').clear();\n    cy.get('#isValid').get('#isValid').contains('no');\n    cy.get('#delete0').click();\n    cy.get('#isValid').get('#isValid').contains('yes');\n    cy.get('#append').click();\n    cy.get('#append').click();\n    cy.get('#field1').clear();\n    cy.get('#field2').clear();\n    cy.get('#isValid').get('#isValid').contains('no');\n    cy.get('#delete1').click();\n    cy.get('#delete1').click();\n    cy.get('#isValid').get('#isValid').contains('yes');\n  });","file":"integration/useFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should behaviour correctly without defaultValues","suites":["useFieldArray"],"updatePoint":{"line":2,"column":54,"index":89},"line":2,"code":"  it('should behaviour correctly without defaultValues', () => {\n    cy.visit('http://localhost:3000/useFieldArray/normal');\n    cy.get('#appendAsync').click();\n    cy.focused().should('have.attr', 'id', 'field0');\n    cy.get('ul > li').eq(0).get('input').should('have.value', 'appendAsync');\n    cy.focused().should('have.attr', 'id', 'field0');\n    cy.get('#prependAsync').click();\n    cy.get('ul > li').eq(0).get('input').should('have.value', 'prependAsync');\n    cy.get('#insertAsync').click();\n    cy.focused().should('have.attr', 'id', 'field1');\n    cy.get('#field1').should('have.value', 'insertAsync');\n    cy.get('#swapAsync').click();\n    cy.get('#field0').should('have.value', 'insertAsync');\n    cy.get('#field1').should('have.value', 'prependAsync');\n    cy.get('#moveAsync').click();\n    cy.get('#field1').should('have.value', 'insertAsync');\n    cy.get('#field0').should('have.value', 'prependAsync');\n    cy.get('#updateAsync').click();\n    cy.get('#field0').should('have.value', 'updateAsync');\n    cy.get('#replaceAsync').click();\n    cy.get('#field0').should('have.value', '16. lorem');\n    cy.get('#field1').should('have.value', '16. ipsum');\n    cy.get('#field2').should('have.value', '16. dolor');\n    cy.get('#field3').should('have.value', '16. sit amet');\n    cy.get('#removeAsync').click();\n    cy.get('#resetAsync').click();\n    cy.get('ul > li').should('not.exist');\n  });","file":"integration/useFieldArrayAsync.ts","skipped":false,"dir":"cypress"},{"name":"should work correctly with nested field array","suites":["useFieldArrayNested"],"updatePoint":{"line":2,"column":51,"index":92},"line":2,"code":"  it('should work correctly with nested field array', () => {\n    cy.visit('http://localhost:3000/useFieldArrayNested');\n    cy.get(`#nest-append-0`).click();\n    cy.get(`#nest-prepend-0`).click();\n    cy.get(`#nest-insert-0`).click();\n    cy.get(`#nest-swap-0`).click();\n    cy.get(`#nest-move-0`).click();\n    cy.get('input[name=\"test.0.keyValue.0.name\"]').should('have.value', 'insert');\n    cy.get('input[name=\"test.0.keyValue.1.name\"]').should('have.value', 'prepend');\n    cy.get('input[name=\"test.0.keyValue.2.name\"]').should('have.value', '1a');\n    cy.get('input[name=\"test.0.keyValue.3.name\"]').should('have.value', '1c');\n    cy.get('input[name=\"test.0.keyValue.4.name\"]').should('have.value', 'append');\n    cy.get(`#nest-remove-0`).click();\n    cy.get('input[name=\"test.0.keyValue.2.name\"]').should('have.value', '1c');\n    cy.get('input[name=\"test.0.keyValue.3.name\"]').should('have.value', 'append');\n    cy.get('#dirty-nested-0').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [{\n        firstName: false,\n        lastName: false,\n        keyValue: [{\n          name: true\n        }, {\n          name: true\n        }, {\n          name: true\n        }, {\n          name: true\n        }]\n      }]\n    }));\n    cy.get('#touched-nested-0').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [{\n        keyValue: [{\n          name: true\n        }, null, null, {\n          name: true\n        }]\n      }]\n    }));\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [{\n        firstName: 'Bill',\n        lastName: 'Luo',\n        keyValue: [{\n          name: 'insert'\n        }, {\n          name: '1a'\n        }, {\n          name: '1c'\n        }, {\n          name: 'append'\n        }]\n      }]\n    }));\n    cy.get('#prepend').click();\n    cy.get('#dirty-nested-0').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [{\n        keyValue: [{\n          name: true\n        }, {\n          name: true\n        }],\n        firstName: true,\n        lastName: true\n      }, {\n        firstName: true,\n        lastName: true,\n        keyValue: [{\n          name: true\n        }, {\n          name: true\n        }, {\n          name: true\n        }, {\n          name: true\n        }]\n      }]\n    }));\n    cy.get('#touched-nested-0').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [null, {\n        keyValue: [{\n          name: true\n        }, null, null, {\n          name: true\n        }]\n      }]\n    }));\n    cy.get('#append').click();\n    cy.get('#swap').click();\n    cy.get('#insert').click();\n    cy.get('#touched-nested-0').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [{\n        firstName: true\n      }, null, {\n        firstName: true\n      }, {\n        keyValue: [{\n          name: true\n        }, null, null, {\n          name: true\n        }]\n      }]\n    }));\n    cy.get('#dirty-nested-0').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [{\n        firstName: true,\n        keyValue: [{\n          name: true\n        }, {\n          name: true\n        }],\n        lastName: true\n      }, {\n        firstName: true\n      }, {\n        firstName: true,\n        keyValue: []\n      }, {\n        firstName: true,\n        lastName: true,\n        keyValue: [{\n          name: true\n        }, {\n          name: true\n        }, {\n          name: true\n        }, {\n          name: true\n        }]\n      }]\n    }));\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [{\n        firstName: 'prepend',\n        keyValue: []\n      }, {\n        firstName: 'insert',\n        keyValue: []\n      }, {\n        firstName: 'append',\n        keyValue: []\n      }, {\n        firstName: 'Bill',\n        keyValue: [{\n          name: 'insert'\n        }, {\n          name: '1a'\n        }, {\n          name: '1c'\n        }, {\n          name: 'append'\n        }],\n        lastName: 'Luo'\n      }]\n    }));\n    cy.get(`#nest-append-0`).click();\n    cy.get(`#nest-prepend-0`).click();\n    cy.get(`#nest-insert-0`).click();\n    cy.get(`#nest-swap-0`).click();\n    cy.get(`#nest-move-0`).click();\n    cy.get('input').its('length').should('eq', 11);\n    cy.get('#nest-remove-3').click();\n    cy.get('#nest-remove-3').click();\n    cy.get('input[name=\"test.3.keyValue.0.name\"]').should('has.value', 'insert');\n    cy.get('input[name=\"test.3.keyValue.1.name\"]').should('has.value', 'append');\n    cy.get('#dirty-nested-0').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [{\n        firstName: true,\n        keyValue: [{\n          name: true\n        }, {\n          name: true\n        }, {\n          name: true\n        }],\n        lastName: true\n      }, {\n        firstName: true,\n        keyValue: []\n      }, {\n        firstName: true,\n        keyValue: []\n      }, {\n        firstName: true,\n        lastName: true,\n        keyValue: [{\n          name: true\n        }, {\n          name: true\n        }]\n      }]\n    }));\n    cy.get('#nest-update-0').click();\n    cy.get('input[name=\"test.0.keyValue.0.name\"]').should('have.value', 'update');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [{\n        firstName: 'prepend',\n        keyValue: [{\n          name: 'update'\n        }, {\n          name: 'prepend'\n        }, {\n          name: 'append'\n        }]\n      }, {\n        firstName: 'insert',\n        keyValue: []\n      }, {\n        firstName: 'append',\n        keyValue: []\n      }, {\n        firstName: 'Bill',\n        keyValue: [{\n          name: 'insert'\n        }, {\n          name: 'append'\n        }],\n        lastName: 'Luo'\n      }]\n    }));\n    cy.get('#nest-remove-all-3').click();\n    cy.get('#nest-remove-all-2').click();\n    cy.get('#nest-remove-all-1').click();\n    cy.get('#nest-remove-all-0').click();\n    cy.get('#touched-nested-2').contains('{\"test\":[{\"firstName\":true,\"keyValue\":[]},{\"firstName\":true},{\"firstName\":true},{\"keyValue\":[]}]}');\n    cy.get('#dirty-nested-2').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [{\n        firstName: true,\n        keyValue: [{\n          name: true\n        }, {\n          name: true\n        }],\n        lastName: true\n      }, {\n        firstName: true,\n        keyValue: []\n      }, {\n        firstName: true,\n        keyValue: []\n      }, {\n        firstName: true,\n        lastName: true,\n        keyValue: []\n      }]\n    }));\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [{\n        firstName: 'prepend',\n        keyValue: []\n      }, {\n        firstName: 'insert',\n        keyValue: []\n      }, {\n        firstName: 'append',\n        keyValue: []\n      }, {\n        firstName: 'Bill',\n        keyValue: [],\n        lastName: 'Luo'\n      }]\n    }));\n    cy.get('#remove').click();\n    cy.get('#remove').click();\n    cy.get('#remove').click();\n    cy.get('#dirty-nested-0').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      test: [{\n        firstName: true,\n        keyValue: [{\n          name: true\n        }, {\n          name: true\n        }],\n        lastName: true\n      }]\n    }));\n    cy.get('#submit').click();\n    cy.get('#result').contains('{\"test\":[{\"firstName\":\"prepend\",\"keyValue\":[]}]}');\n    cy.get('#update').click();\n    cy.get('input[name=\"test.0.firstName\"]').should('have.value', 'updateFirstName');\n    cy.get('input[name=\"test.0.keyValue.0.name\"]').should('have.value', 'updateFirstName1');\n    cy.get('input[name=\"test.0.keyValue.1.name\"]').should('have.value', 'updateFirstName2');\n    cy.get('#removeAll').click();\n    cy.get('#dirty-nested-0').should('not.exist');\n    cy.get('#touched-nested-0').should('not.exist');\n    cy.get('#submit').click();\n    cy.get('#result').contains('{\"test\":[]}');\n    cy.get('#count').contains('16');\n  });","file":"integration/useFieldArrayNested.ts","skipped":false,"dir":"cypress"},{"name":"should behaviour correctly","suites":["useFieldArrayUnregister"],"updatePoint":{"line":2,"column":32,"index":77},"line":2,"code":"  it('should behaviour correctly', () => {\n    cy.visit('http://localhost:3000/UseFieldArrayUnregister');\n    cy.get('#field0').clear().type('bill');\n    cy.get('input[name=\"data.0.conditional\"]').type('test');\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true,\n        conditional: true\n      }]\n    }));\n    cy.get('input[name=\"data.0.conditional\"]').blur();\n    cy.get('#touched').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      name: true,\n      conditional: true\n    }]));\n    cy.get('#prepend').click();\n    cy.get('input[name=\"data.0.conditional\"]').should('not.exist');\n    cy.get('input[name=\"data.1.conditional\"]').should('has.value', '');\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }, {\n        name: true,\n        conditional: true\n      }, {\n        name: true\n      }, {\n        name: true\n      }]\n    }));\n    cy.get('#touched').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([null, {\n      name: true,\n      conditional: true\n    }]));\n    cy.get('input[name=\"data.0.name\"]').blur();\n    cy.get('#swap').click();\n    cy.get('input[name=\"data.1.conditional\"]').should('not.exist');\n    cy.get('input[name=\"data.2.conditional\"]').should('has.value', '');\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }, {\n        name: false\n      }, {\n        name: true,\n        conditional: true\n      }, {\n        name: true\n      }]\n    }));\n    cy.get('#touched').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      name: true\n    }, null, {\n      name: true,\n      conditional: true\n    }]));\n    cy.get('#insert').click();\n    cy.get('#insert').click();\n    cy.get('input[name=\"data.4.name\"]').type('test');\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }, {\n        name: true\n      }, {\n        name: true\n      }, {\n        name: true\n      }, {\n        name: true,\n        conditional: true\n      }, {\n        name: true\n      }]\n    }));\n    cy.get('#touched').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      name: true\n    }, {\n      name: true\n    }, {\n      name: true\n    }, null, {\n      name: true,\n      conditional: true\n    }]));\n    cy.get('#move').click();\n    cy.get('input[name=\"data.2.name\"]').clear().type('bill');\n    cy.get('input[name=\"data.2.conditional\"]').should('has.value', '');\n    cy.get('#dirtyFields').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: true\n      }, {\n        name: true\n      }, {\n        name: true,\n        conditional: true\n      }, {\n        name: true\n      }, {\n        name: true\n      }, {\n        name: true\n      }]\n    }));\n    cy.get('#touched').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      name: true\n    }, {\n      name: true\n    }, {\n      name: true,\n      conditional: true\n    }, {\n      name: true\n    }, null]));\n    cy.get('#delete1').click();\n    cy.get('input[name=\"data.1.conditional\"]').should('has.value', '');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '5'\n      }, {\n        name: 'bill',\n        conditional: ''\n      }, {\n        name: '10'\n      }, {\n        name: 'test1'\n      }, {\n        name: 'test2'\n      }]\n    }));\n    cy.get('input[name=\"data.3.name\"]').type('test');\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '5'\n      }, {\n        name: 'bill',\n        conditional: ''\n      }, {\n        name: '10'\n      }, {\n        name: 'test1test'\n      }, {\n        name: 'test2'\n      }]\n    }));\n    cy.get('#delete3').click();\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      data: [{\n        name: '5'\n      }, {\n        name: 'bill',\n        conditional: ''\n      }, {\n        name: '10'\n      }, {\n        name: 'test2'\n      }]\n    }));\n    cy.get('#renderCount').contains('32');\n  });","file":"integration/useFieldArrayUnregister.ts","skipped":false,"dir":"cypress"},{"name":"should subscribed to the form state without re-render the root","suites":["useFormState"],"updatePoint":{"line":2,"column":68,"index":102},"line":2,"code":"  it('should subscribed to the form state without re-render the root', () => {\n    cy.visit('http://localhost:3000/useFormState');\n    cy.get('button#submit').click();\n    cy.get('input[name=\"firstName\"]').type('bill');\n    cy.get('input[name=\"firstName\"]').type('a');\n    cy.get('input[name=\"arrayItem.0.test1\"]').type('ab');\n    cy.get('input[name=\"nestItem.nest1\"]').type('ab');\n    cy.get('input[name=\"lastName\"]').type('luo123456');\n    cy.get('select[name=\"selectNumber\"]').select('1');\n    cy.get('input[name=\"pattern\"]').type('luo');\n    cy.get('input[name=\"min\"]').type('1');\n    cy.get('input[name=\"max\"]').type('21');\n    cy.get('input[name=\"minDate\"]').type('2019-07-30');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-02');\n    cy.get('input[name=\"lastName\"]').clear().type('luo');\n    cy.get('input[name=\"minLength\"]').type('b');\n    cy.get('input[name=\"minLength\"]').blur();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      touched: ['nestItem', 'firstName', 'arrayItem', 'lastName', 'selectNumber', 'pattern', 'min', 'max', 'minDate', 'maxDate', 'minLength'],\n      dirty: ['firstName', 'arrayItem', 'nestItem', 'lastName', 'selectNumber', 'pattern', 'min', 'max', 'minDate', 'maxDate', 'minLength'],\n      isSubmitted: true,\n      isSubmitSuccessful: false,\n      submitCount: 0,\n      isValid: false\n    }));\n    cy.get('input[name=\"pattern\"]').type('23');\n    cy.get('input[name=\"minLength\"]').type('bi');\n    cy.get('input[name=\"minRequiredLength\"]').type('bi');\n    cy.get('input[name=\"min\"]').clear().type('11');\n    cy.get('input[name=\"max\"]').clear().type('19');\n    cy.get('input[name=\"minDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-01');\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      touched: ['nestItem', 'firstName', 'arrayItem', 'lastName', 'selectNumber', 'pattern', 'min', 'max', 'minDate', 'maxDate', 'minLength', 'minRequiredLength'],\n      dirty: ['firstName', 'arrayItem', 'nestItem', 'lastName', 'selectNumber', 'pattern', 'min', 'max', 'minDate', 'maxDate', 'minLength', 'minRequiredLength'],\n      isSubmitted: true,\n      isSubmitSuccessful: false,\n      submitCount: 0,\n      isValid: true\n    }));\n    cy.get('#submit').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: true,\n      touched: ['nestItem', 'firstName', 'arrayItem', 'lastName', 'selectNumber', 'pattern', 'min', 'max', 'minDate', 'maxDate', 'minLength', 'minRequiredLength'],\n      dirty: ['firstName', 'arrayItem', 'nestItem', 'lastName', 'selectNumber', 'pattern', 'min', 'max', 'minDate', 'maxDate', 'minLength', 'minRequiredLength'],\n      isSubmitted: true,\n      isSubmitSuccessful: true,\n      submitCount: 1,\n      isValid: true\n    }));\n    cy.get('#resetForm').click();\n    cy.get('#state').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      isDirty: false,\n      touched: [],\n      dirty: [],\n      isSubmitted: false,\n      isSubmitSuccessful: false,\n      submitCount: 0,\n      isValid: true\n    }));\n    cy.get('#renderCount').contains('1');\n  });","file":"integration/useFormState.ts","skipped":false,"dir":"cypress"},{"name":"should only trigger render when interact with input 1","suites":["useWatch"],"updatePoint":{"line":2,"column":59,"index":89},"line":2,"code":"  it('should only trigger render when interact with input 1', () => {\n    cy.visit('http://localhost:3000/useWatch');\n    cy.get('input[name=\"test\"]').type('t');\n    cy.get('#parentCounter').contains('1');\n    cy.get('#childCounter').contains('1');\n    cy.get('#grandChildCounter').contains('2');\n    cy.get('#grandChild1Counter').contains('2');\n    cy.get('#grandChild2Counter').contains('2');\n    cy.get('#grandchild01').contains('t');\n    cy.get('#grandchild00').contains('t');\n    cy.get('input[name=\"test\"]').type('h');\n    cy.get('#grandchild00').contains('th');\n    cy.get('#grandchild01').contains('th');\n    cy.get('#grandchild2').contains('t');\n  });","file":"integration/useWatch.ts","skipped":false,"dir":"cypress"},{"name":"should only trigger render when interact with input 2","suites":["useWatch"],"updatePoint":{"line":17,"column":59,"index":750},"line":17,"code":"  it('should only trigger render when interact with input 2', () => {\n    cy.visit('http://localhost:3000/useWatch');\n    cy.get('input[name=\"test1\"]').type('h');\n    cy.get('#parentCounter').contains('1');\n    cy.get('#childCounter').contains('1');\n    cy.get('#grandChildCounter').contains('2');\n    cy.get('#grandChild1Counter').contains('2');\n    cy.get('#grandChild2Counter').contains('2');\n    cy.get('input[name=\"test1\"]').type('h');\n    cy.get('input[name=\"test\"]').type('h');\n    cy.get('#grandchild00').contains('h');\n    cy.get('#grandchild01').contains('h');\n    cy.get('#grandchild1').contains('hh');\n    cy.get('#grandchild2').contains('hhh');\n  });","file":"integration/useWatch.ts","skipped":false,"dir":"cypress"},{"name":"should only trigger render when interact with input 3","suites":["useWatch"],"updatePoint":{"line":32,"column":59,"index":1414},"line":32,"code":"  it('should only trigger render when interact with input 3', () => {\n    cy.visit('http://localhost:3000/useWatch');\n    cy.get('input[name=\"test2\"]').type('e');\n    cy.get('#parentCounter').contains('1');\n    cy.get('#childCounter').contains('1');\n    cy.get('#grandChildCounter').contains('2');\n    cy.get('#grandChild1Counter').contains('2');\n    cy.get('#grandChild2Counter').contains('2');\n    cy.get('input[name=\"test2\"]').type('eh');\n    cy.get('input[name=\"test1\"]').type('eh');\n    cy.get('input[name=\"test\"]').type('eh');\n    cy.get('#grandchild00').contains('eh');\n    cy.get('#grandchild01').contains('eh');\n    cy.get('#grandchild1').contains('eh');\n    cy.get('#grandchild2').contains('eheheeh');\n  });","file":"integration/useWatch.ts","skipped":false,"dir":"cypress"},{"name":"should watch the correct nested field array","suites":["useWatchUseFieldArrayNested"],"updatePoint":{"line":2,"column":49,"index":98},"line":2,"code":"  it('should watch the correct nested field array', () => {\n    cy.visit('http://localhost:3000/useWatchUseFieldArrayNested');\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'Bill',\n      keyValue: [{\n        name: '1a'\n      }, {\n        name: '1c'\n      }],\n      lastName: 'Luo'\n    }]));\n    cy.get(`#nest-append-0`).click();\n    cy.get(`#nest-prepend-0`).click();\n    cy.get(`#nest-insert-0`).click();\n    cy.get(`#nest-swap-0`).click();\n    cy.get(`#nest-move-0`).click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'Bill',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: 'prepend'\n      }, {\n        name: '1a'\n      }, {\n        name: '1c'\n      }, {\n        name: 'append'\n      }],\n      lastName: 'Luo'\n    }]));\n    cy.get(`#nest-remove-0`).click();\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'Bill',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: '1a'\n      }, {\n        name: '1c'\n      }, {\n        name: 'append'\n      }],\n      lastName: 'Luo'\n    }]));\n    cy.get('#prepend').click();\n    cy.get('#append').click();\n    cy.get('#swap').click();\n    cy.get('#insert').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'prepend',\n      keyValue: []\n    }, {\n      firstName: 'insert',\n      keyValue: []\n    }, {\n      firstName: 'append',\n      keyValue: []\n    }, {\n      firstName: 'Bill',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: '1a'\n      }, {\n        name: '1c'\n      }, {\n        name: 'append'\n      }],\n      lastName: 'Luo'\n    }]));\n    cy.get(`#nest-append-0`).click();\n    cy.get(`#nest-prepend-0`).click();\n    cy.get(`#nest-insert-0`).click();\n    cy.get(`#nest-swap-0`).click();\n    cy.get(`#nest-move-0`).click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'prepend',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: 'prepend'\n      }, {\n        name: 'append'\n      }]\n    }, {\n      firstName: 'insert',\n      keyValue: []\n    }, {\n      firstName: 'append',\n      keyValue: []\n    }, {\n      firstName: 'Bill',\n      lastName: 'Luo',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: '1a'\n      }, {\n        name: '1c'\n      }, {\n        name: 'append'\n      }]\n    }]));\n    cy.get('#nest-update-3').click();\n    cy.get('input[name=\"test.3.keyValue.2.name\"]').should('have.value', 'update');\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'prepend',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: 'prepend'\n      }, {\n        name: 'append'\n      }]\n    }, {\n      firstName: 'insert',\n      keyValue: []\n    }, {\n      firstName: 'append',\n      keyValue: []\n    }, {\n      firstName: 'Bill',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: '1a'\n      }, {\n        name: 'update'\n      }, {\n        name: 'append'\n      }],\n      lastName: 'Luo'\n    }]));\n    cy.get('#nest-update-0').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'prepend',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: 'prepend'\n      }, {\n        name: 'update'\n      }]\n    }, {\n      firstName: 'insert',\n      keyValue: []\n    }, {\n      firstName: 'append',\n      keyValue: []\n    }, {\n      firstName: 'Bill',\n      lastName: 'Luo',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: '1a'\n      }, {\n        name: 'update'\n      }, {\n        name: 'append'\n      }]\n    }]));\n    cy.get('#nest-remove-3').click();\n    cy.get('#nest-remove-3').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'prepend',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: 'prepend'\n      }, {\n        name: 'update'\n      }]\n    }, {\n      firstName: 'insert',\n      keyValue: []\n    }, {\n      firstName: 'append',\n      keyValue: []\n    }, {\n      firstName: 'Bill',\n      lastName: 'Luo',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: 'append'\n      }]\n    }]));\n    cy.get('#nest-remove-all-3').click();\n    cy.get('#nest-remove-all-2').click();\n    cy.get('#nest-remove-all-1').click();\n    cy.get('#nest-remove-all-0').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'prepend',\n      keyValue: []\n    }, {\n      firstName: 'insert',\n      keyValue: []\n    }, {\n      firstName: 'append',\n      keyValue: []\n    }, {\n      firstName: 'Bill',\n      lastName: 'Luo',\n      keyValue: []\n    }]));\n    cy.get('#remove').click();\n    cy.get('#remove').click();\n    cy.get('#remove').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'prepend',\n      keyValue: []\n    }]));\n    cy.get('#count').contains('8');\n  });","file":"integration/useWatchUseFieldArrayNested.ts","skipped":false,"dir":"cypress"},{"name":"should validate the form, show all errors and clear all","suites":["validate field criteria"],"updatePoint":{"line":2,"column":61,"index":106},"line":2,"code":"  it('should validate the form, show all errors and clear all', () => {\n    cy.visit('http://localhost:3000/validate-field-criteria');\n    cy.get('button#submit').click();\n    cy.get('input[name=\"firstName\"] + p').contains('firstName required');\n    cy.get('input[name=\"firstName\"]').type('te');\n    cy.get('input[name=\"firstName\"] + p').contains('firstName minLength');\n    cy.get('input[name=\"firstName\"]').type('testtesttest');\n    cy.get('input[name=\"min\"] + p').contains('min required');\n    cy.get('input[name=\"min\"]').type('2');\n    cy.get('input[name=\"min\"] + p').contains('min min');\n    cy.get('input[name=\"min\"]').type('32');\n    cy.get('input[name=\"min\"] + p').contains('min max');\n    cy.get('input[name=\"min\"]').clear();\n    cy.get('input[name=\"min\"]').type('10');\n    cy.get('input[name=\"minDate\"] + p').contains('minDate required');\n    cy.get('input[name=\"minDate\"]').type('2019-07-01');\n    cy.get('input[name=\"minDate\"] + p').contains('minDate min');\n    cy.get('input[name=\"minDate\"]').type('2019-08-01');\n    cy.get('input[name=\"maxDate\"] + p').contains('maxDate required');\n    cy.get('input[name=\"maxDate\"]').type('2019-09-01');\n    cy.get('input[name=\"maxDate\"] + p').contains('maxDate max');\n    cy.get('input[name=\"maxDate\"]').type('2019-08-01');\n    cy.get('input[name=\"minLength\"] + p').contains('minLength required');\n    cy.get('input[name=\"minLength\"]').type('1');\n    cy.get('input[name=\"minLength\"] + p').contains('minLength minLength');\n    cy.get('input[name=\"minLength\"]').type('12');\n    cy.get('select[name=\"selectNumber\"] + p').contains('selectNumber required');\n    cy.get('select[name=\"selectNumber\"]').select('12');\n    cy.get('input[name=\"pattern\"] + p').contains('pattern required');\n    cy.get('input[name=\"pattern\"]').type('t');\n    cy.get('input[name=\"pattern\"] + p').contains('pattern pattern');\n    cy.get('input[name=\"pattern\"] + p + p').contains('pattern minLength');\n    cy.get('input[name=\"pattern\"]').clear();\n    cy.get('input[name=\"pattern\"]').type('12345');\n    cy.get('select[name=\"multiple\"] + p').contains('multiple required');\n    cy.get('select[name=\"multiple\"] + p + p').contains('multiple validate');\n    cy.get('select[name=\"multiple\"]').select('optionA');\n    cy.get('select[name=\"multiple\"]').select('optionB');\n    cy.get('input[name=\"validate\"] + p').contains('validate test');\n    cy.get('input[name=\"validate\"] + p + p').contains('validate test1');\n    cy.get('input[name=\"validate\"] + p + p + p').contains('validate test2');\n    cy.get('input[name=\"validate\"]').type('test');\n    cy.get('p').should('have.length', 0);\n    cy.get('#trigger').click();\n    cy.get('p').should('have.length', 2);\n    cy.get('b').should('have.length', 2);\n    cy.get('#clear').click();\n    cy.get('p').should('have.length', 0);\n    cy.get('b').should('have.length', 0);\n    cy.get('#renderCount').contains('27');\n  });","file":"integration/validateFieldCriteria.ts","skipped":false,"dir":"cypress"},{"name":"should watch all inputs","suites":["watch form validation"],"updatePoint":{"line":2,"column":29,"index":72},"line":2,"code":"  it('should watch all inputs', () => {\n    cy.visit('http://localhost:3000/watch');\n    cy.get('#watchAll').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({}));\n    cy.get('#HideTestSingle').should('not.exist');\n    cy.get('input[name=\"testSingle\"]').type('testSingle');\n    cy.get('#HideTestSingle').contains('Hide Content TestSingle');\n    cy.get('#watchAll').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      testSingle: 'testSingle',\n      test: ['', ''],\n      testObject: {\n        firstName: '',\n        lastName: ''\n      },\n      toggle: false\n    }));\n    cy.get('input[name=\"test.0\"]').type('bill');\n    cy.get('input[name=\"test.1\"]').type('luo');\n    cy.get('#testData').contains('[\"bill\",\"luo\"]');\n    cy.get('#testArray').should($state => expect(JSON.parse($state.text())).to.be.deep.equal(['bill', 'luo']));\n    cy.get('#watchAll').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      testSingle: 'testSingle',\n      test: ['bill', 'luo'],\n      testObject: {\n        firstName: '',\n        lastName: ''\n      },\n      toggle: false\n    }));\n    cy.get('input[name=\"testObject.firstName\"').type('bill');\n    cy.get('input[name=\"testObject.lastName\"').type('luo');\n    cy.get('#testObject').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      firstName: 'bill',\n      lastName: 'luo'\n    }));\n    cy.get('#testArray').should($state => expect(JSON.parse($state.text())).to.be.deep.equal(['bill', 'luo']));\n    cy.get('#watchAll').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      testSingle: 'testSingle',\n      test: ['bill', 'luo'],\n      testObject: {\n        firstName: 'bill',\n        lastName: 'luo'\n      },\n      toggle: false\n    }));\n    cy.get('#hideContent').should('not.exist');\n    cy.get('input[name=\"toggle\"').check();\n    cy.get('#hideContent').contains('Hide Content');\n    cy.get('#watchAll').should($state => expect(JSON.parse($state.text())).to.be.deep.equal({\n      testSingle: 'testSingle',\n      test: ['bill', 'luo'],\n      testObject: {\n        firstName: 'bill',\n        lastName: 'luo'\n      },\n      toggle: true\n    }));\n  });","file":"integration/watch.ts","skipped":false,"dir":"cypress"},{"name":"should return default value with watch","suites":["watchDefaultValues"],"updatePoint":{"line":2,"column":44,"index":84},"line":2,"code":"  it('should return default value with watch', () => {\n    cy.visit('http://localhost:3000/watch-default-values');\n    cy.get('#watchAll').should('have.text', '{\"test\":\"test\",\"test1\":{\"firstName\":\"firstName\",\"lastName\":[\"lastName0\",\"lastName1\"],\"deep\":{\"nest\":\"nest\"}},\"flatName[1]\":{\"whatever\":\"flat\"}}');\n    cy.get('#array').should('have.text', '[\"test\",{\"whatever\":\"flat\"}]');\n    cy.get('#getArray').should('have.text', '[\"lastName0\",\"lastName1\"]');\n    cy.get('#object').should('have.text', '[\"test\",\"firstName\"]');\n    cy.get('#single').should('have.text', '\"firstName\"');\n    cy.get('#singleDeepArray').should('have.text', '\"lastName0\"');\n  });","file":"integration/watchDefaultValues.ts","skipped":false,"dir":"cypress"},{"name":"should behaviour correctly when watching the field array","suites":["watchUseFieldArray"],"updatePoint":{"line":2,"column":62,"index":102},"line":2,"code":"  it('should behaviour correctly when watching the field array', () => {\n    cy.visit('http://localhost:3000/watch-field-array/normal');\n    cy.get('#append').click();\n    cy.get('#result').contains('[{\"name\":\"2\"}]');\n    cy.get('#field0').type('test');\n    cy.get('#result').contains('[{\"name\":\"2test\"}]');\n    cy.get('#prepend').click();\n    cy.get('#result').contains('[{\"name\":\"8\"},{\"name\":\"2test\"}]');\n    cy.get('#append').click();\n    cy.get('#append').click();\n    cy.get('#append').click();\n    cy.get('#update').click();\n    cy.get('#result').contains('[{\"name\":\"8\"},{\"name\":\"2test\"},{\"name\":\"10\"},{\"name\":\"updated value\"},{\"name\":\"14\"}]');\n    cy.get('#swap').click();\n    cy.get('#result').contains('[{\"name\":\"8\"},{\"name\":\"10\"},{\"name\":\"2test\"},{\"name\":\"updated value\"},{\"name\":\"14\"}]');\n    cy.get('#move').click();\n    cy.get('#result').contains('[{\"name\":\"2test\"},{\"name\":\"8\"},{\"name\":\"10\"},{\"name\":\"updated value\"},{\"name\":\"14\"}]');\n    cy.get('#insert').click();\n    cy.get('#result').contains('[{\"name\":\"2test\"},{\"name\":\"22\"},{\"name\":\"8\"},{\"name\":\"10\"},{\"name\":\"updated value\"},{\"name\":\"14\"}]');\n    cy.get('#remove').click();\n    cy.get('#result').contains('[{\"name\":\"2test\"},{\"name\":\"8\"},{\"name\":\"10\"},{\"name\":\"updated value\"},{\"name\":\"14\"}]');\n    cy.get('#removeAll').click();\n    cy.get('#result').contains('[]');\n    cy.get('#renderCount').contains('28');\n  });","file":"integration/watchUseFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should return empty when items been removed and defaultValues are supplied","suites":["watchUseFieldArray"],"updatePoint":{"line":27,"column":80,"index":1506},"line":27,"code":"  it('should return empty when items been removed and defaultValues are supplied', () => {\n    cy.visit('http://localhost:3000/watch-field-array/default');\n    cy.get('#delete0').click();\n    cy.get('#delete0').click();\n    cy.get('#delete0').click();\n    cy.get('#result').contains('[]');\n  });","file":"integration/watchUseFieldArray.ts","skipped":false,"dir":"cypress"},{"name":"should watch the correct nested field array","suites":["watchUseFieldArrayNested"],"updatePoint":{"line":2,"column":49,"index":95},"line":2,"code":"  it('should watch the correct nested field array', () => {\n    cy.visit('http://localhost:3000/watchUseFieldArrayNested');\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'Bill',\n      keyValue: [{\n        name: '1a'\n      }, {\n        name: '1c'\n      }],\n      lastName: 'Luo'\n    }]));\n    cy.get(`#nest-append-0`).click();\n    cy.get(`#nest-prepend-0`).click();\n    cy.get(`#nest-insert-0`).click();\n    cy.get(`#nest-swap-0`).click();\n    cy.get(`#nest-move-0`).click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'Bill',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: 'prepend'\n      }, {\n        name: '1a'\n      }, {\n        name: '1c'\n      }, {\n        name: 'append'\n      }],\n      lastName: 'Luo'\n    }]));\n    cy.get('#nest-update-0').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'Bill',\n      keyValue: [{\n        name: 'billUpdate'\n      }, {\n        name: 'prepend'\n      }, {\n        name: '1a'\n      }, {\n        name: '1c'\n      }, {\n        name: 'append'\n      }],\n      lastName: 'Luo'\n    }]));\n    cy.get(`#nest-remove-0`).click();\n    cy.get('#submit').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'Bill',\n      keyValue: [{\n        name: 'billUpdate'\n      }, {\n        name: '1a'\n      }, {\n        name: '1c'\n      }, {\n        name: 'append'\n      }],\n      lastName: 'Luo'\n    }]));\n    cy.get('#prepend').click();\n    cy.get('#append').click();\n    cy.get('#swap').click();\n    cy.get('#insert').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'prepend',\n      keyValue: []\n    }, {\n      firstName: 'insert',\n      keyValue: []\n    }, {\n      firstName: 'append',\n      keyValue: []\n    }, {\n      firstName: 'Bill',\n      lastName: 'Luo',\n      keyValue: [{\n        name: 'billUpdate'\n      }, {\n        name: '1a'\n      }, {\n        name: '1c'\n      }, {\n        name: 'append'\n      }]\n    }]));\n    cy.get(`#nest-append-0`).click();\n    cy.get(`#nest-prepend-0`).click();\n    cy.get(`#nest-insert-0`).click();\n    cy.get(`#nest-swap-0`).click();\n    cy.get(`#nest-move-0`).click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'prepend',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: 'prepend'\n      }, {\n        name: 'append'\n      }]\n    }, {\n      firstName: 'insert',\n      keyValue: []\n    }, {\n      firstName: 'append',\n      keyValue: []\n    }, {\n      firstName: 'Bill',\n      lastName: 'Luo',\n      keyValue: [{\n        name: 'billUpdate'\n      }, {\n        name: '1a'\n      }, {\n        name: '1c'\n      }, {\n        name: 'append'\n      }]\n    }]));\n    cy.get('#nest-remove-3').click();\n    cy.get('#nest-remove-3').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'prepend',\n      keyValue: [{\n        name: 'insert'\n      }, {\n        name: 'prepend'\n      }, {\n        name: 'append'\n      }]\n    }, {\n      firstName: 'insert',\n      keyValue: []\n    }, {\n      firstName: 'append',\n      keyValue: []\n    }, {\n      firstName: 'Bill',\n      lastName: 'Luo',\n      keyValue: [{\n        name: 'billUpdate'\n      }, {\n        name: 'append'\n      }]\n    }]));\n    cy.get('#nest-remove-all-3').click();\n    cy.get('#nest-remove-all-2').click();\n    cy.get('#nest-remove-all-1').click();\n    cy.get('#nest-remove-all-0').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'prepend',\n      keyValue: []\n    }, {\n      firstName: 'insert',\n      keyValue: []\n    }, {\n      firstName: 'append',\n      keyValue: []\n    }, {\n      firstName: 'Bill',\n      lastName: 'Luo',\n      keyValue: []\n    }]));\n    cy.get('#update').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'BillUpdate',\n      keyValue: []\n    }, {\n      firstName: 'insert',\n      keyValue: []\n    }, {\n      firstName: 'append',\n      keyValue: []\n    }, {\n      firstName: 'Bill',\n      lastName: 'Luo',\n      keyValue: []\n    }]));\n    cy.get('#remove').click();\n    cy.get('#remove').click();\n    cy.get('#remove').click();\n    cy.get('#result').should($state => expect(JSON.parse($state.text())).to.be.deep.equal([{\n      firstName: 'BillUpdate',\n      keyValue: []\n    }]));\n    cy.get('#count').contains('36');\n    cy.get('#removeAll').click();\n    cy.get('#result').should('have.value', '');\n  });","file":"integration/watchUseFieldArrayNested.ts","skipped":false,"dir":"cypress"}]}