{"repo":"postcss/autoprefixer","url":"https://github.com/postcss/autoprefixer","branch":"main","configs":[{"package":"autoprefixer","lang":"ts","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"adds prefixes","suites":[],"updatePoint":{"line":7,"column":19},"line":7,"code":"test('adds prefixes', () => {\n  let keyframes = new AtRule('@keyframes', ['-moz-', '-ms-'])\n\n  let css = parse(\n    '@-moz-keyframes b {} ' + '@-ms-keyframes a {} ' + '@keyframes a {}'\n  )\n  keyframes.process(css.last)\n  equal(\n    css.toString(),\n    '@-moz-keyframes b {} ' +\n      '@-ms-keyframes a {} ' +\n      '@-moz-keyframes a {} ' +\n      '@keyframes a {}'\n  )\n})","file":"at-rule.test.js","skipped":false,"dir":"test"},{"name":"throws on wrong options","suites":[],"updatePoint":{"line":258,"column":29},"line":258,"code":"test('throws on wrong options', () => {\n  throws(() => {\n    autoprefixer({ browser: ['chrome 25', 'opera 12'] })\n  }, /overrideBrowserslist/)\n  throws(() => {\n    autoprefixer({\n      browserslist: ['chrome 25', 'opera 12']\n    })\n  }, /overrideBrowserslist/)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"sets options via options object","suites":[],"updatePoint":{"line":276,"column":37},"line":276,"code":"test('sets options via options object', () => {\n  let allOptions = Object.assign(options, { overrideBrowserslist: browsers })\n  let instance = autoprefixer(allOptions)\n  equal(instance.options, allOptions)\n  equal(instance.browsers, browsers)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"sets options via array of browsers as first argument and object","suites":[],"updatePoint":{"line":283,"column":69},"line":283,"code":"test('sets options via array of browsers as first argument and object', () => {\n  let instance = autoprefixer(browsers, options)\n  equal(instance.options, options)\n  equal(instance.browsers, browsers)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"sets options via browsers as arguments and options object","suites":[],"updatePoint":{"line":289,"column":63},"line":289,"code":"test('sets options via browsers as arguments and options object', () => {\n  let instance = autoprefixer(...browsers, options)\n  equal(instance.options, options)\n  equal(instance.browsers, browsers)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"has default browsers","suites":[],"updatePoint":{"line":295,"column":26},"line":295,"code":"test('has default browsers', () => {\n  type(autoprefixer.defaults.length, 'number')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"shows warning on browsers option","suites":[],"updatePoint":{"line":299,"column":38},"line":299,"code":"test('shows warning on browsers option', () => {\n  let consoleWarn = spyOn(console, 'warn', () => {})\n  let instance = autoprefixer({\n    browsers: ['last 1 version']\n  })\n  equal(instance.browsers, ['last 1 version'])\n  equal(consoleWarn.callCount, 1)\n  match(consoleWarn.calls[0][0], 'overrideBrowserslist')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"passes statistics to Browserslist","suites":[],"updatePoint":{"line":309,"column":39},"line":309,"code":"test('passes statistics to Browserslist', () => {\n  let stats = {\n    chrome: {\n      10: 10,\n      11: 40\n    },\n    ie: {\n      10: 10,\n      11: 40\n    }\n  }\n  match(\n    autoprefixer({\n      overrideBrowserslist: '> 20% in my stats',\n      stats\n    }).info(),\n    /Browsers:\\n\\s\\sChrome: 11\\n\\s\\sIE: 11\\n/\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"prefixes values","suites":[],"updatePoint":{"line":329,"column":21},"line":329,"code":"test('prefixes values', () => {\n  check('values')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"prefixes @keyframes","suites":[],"updatePoint":{"line":333,"column":25},"line":333,"code":"test('prefixes @keyframes', () => {\n  check('keyframes')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"prefixes @viewport","suites":[],"updatePoint":{"line":337,"column":24},"line":337,"code":"test('prefixes @viewport', () => {\n  check('viewport')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"prefixes selectors","suites":[],"updatePoint":{"line":341,"column":24},"line":341,"code":"test('prefixes selectors', () => {\n  check('selectors')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"prefixes resolution query","suites":[],"updatePoint":{"line":345,"column":31},"line":345,"code":"test('prefixes resolution query', () => {\n  check('resolution')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"removes common mistakes","suites":[],"updatePoint":{"line":349,"column":29},"line":349,"code":"test('removes common mistakes', () => {\n  check('mistakes')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"reads notes for prefixes","suites":[],"updatePoint":{"line":353,"column":30},"line":353,"code":"test('reads notes for prefixes', () => {\n  check('notes')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"keeps vendor-specific hacks","suites":[],"updatePoint":{"line":357,"column":33},"line":357,"code":"test('keeps vendor-specific hacks', () => {\n  check('vendor-hack')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"keeps values with vendor hacks","suites":[],"updatePoint":{"line":361,"column":36},"line":361,"code":"test('keeps values with vendor hacks', () => {\n  check('value-hack')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"works with comments","suites":[],"updatePoint":{"line":365,"column":25},"line":365,"code":"test('works with comments', () => {\n  check('comments')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"uses visual cascade","suites":[],"updatePoint":{"line":369,"column":25},"line":369,"code":"test('uses visual cascade', () => {\n  check('cascade')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"works with properties near","suites":[],"updatePoint":{"line":373,"column":32},"line":373,"code":"test('works with properties near', () => {\n  check('double')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"checks prefixed in hacks","suites":[],"updatePoint":{"line":377,"column":30},"line":377,"code":"test('checks prefixed in hacks', () => {\n  check('check-down')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"normalize cascade after remove","suites":[],"updatePoint":{"line":381,"column":36},"line":381,"code":"test('normalize cascade after remove', () => {\n  check('uncascade')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"prefix decls in @supports","suites":[],"updatePoint":{"line":385,"column":31},"line":385,"code":"test('prefix decls in @supports', () => {\n  check('supports')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"saves declaration style","suites":[],"updatePoint":{"line":389,"column":29},"line":389,"code":"test('saves declaration style', () => {\n  check('style')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"uses ignore next control comments","suites":[],"updatePoint":{"line":393,"column":39},"line":393,"code":"test('uses ignore next control comments', () => {\n  check('ignore-next')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"uses block control comments","suites":[],"updatePoint":{"line":397,"column":33},"line":397,"code":"test('uses block control comments', () => {\n  check('disabled')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"has actual example in docs","suites":[],"updatePoint":{"line":401,"column":32},"line":401,"code":"test('has actual example in docs', () => {\n  check('example')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"process grouping rules correctly","suites":[],"updatePoint":{"line":405,"column":38},"line":405,"code":"test('process grouping rules correctly', () => {\n  check('grouping-rule')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"transition on vendor specific rule","suites":[],"updatePoint":{"line":409,"column":40},"line":409,"code":"test('transition on vendor specific rule', () => {\n  check('transition-spec')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"ignore prefix in vendor at rules","suites":[],"updatePoint":{"line":413,"column":38},"line":413,"code":"test('ignore prefix in vendor at rules', () => {\n  check('at-rules')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"ignore content property","suites":[],"updatePoint":{"line":417,"column":29},"line":417,"code":"test('ignore content property', () => {\n  let input = read('content')\n  let result = postcss([prefixer('scope')]).process(input)\n  equal(result.css, input)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"uses control comments to whole scope","suites":[],"updatePoint":{"line":423,"column":42},"line":423,"code":"test('uses control comments to whole scope', () => {\n  let input = read('scope')\n  let output = read('scope.out')\n  let result = postcss([prefixer('scope')]).process(input)\n\n  equal(result.css, output)\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:5:3: Second Autoprefixer control comment ' +\n        'was ignored. Autoprefixer applies control comment to whole block, ' +\n        'not to next rules.'\n    ]\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"sets grid option via comment","suites":[],"updatePoint":{"line":439,"column":34},"line":439,"code":"test('sets grid option via comment', () => {\n  let input = read('grid-status')\n  let output = read('grid-status.out')\n  let ap = autoprefixer({ overrideBrowserslist: ['last 2 versions', 'IE 11'] })\n  let result = postcss([ap]).process(input)\n\n  equal(result.css, output)\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:2:1: Second Autoprefixer grid control ' +\n        'comment was ignored. Autoprefixer applies control comments ' +\n        'to the whole block, not to the next rules.',\n      'autoprefixer: <css input>:20:3: Second Autoprefixer grid control ' +\n        'comment was ignored. Autoprefixer applies control comments ' +\n        'to the whole block, not to the next rules.',\n      'autoprefixer: <css input>:47:3: Second Autoprefixer grid control ' +\n        'comment was ignored. Autoprefixer applies control comments ' +\n        'to the whole block, not to the next rules.'\n    ]\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"prefixes transition","suites":[],"updatePoint":{"line":462,"column":25},"line":462,"code":"test('prefixes transition', () => {\n  let input = read('transition')\n  let output = read('transition.out')\n  let result = postcss([prefixer('transition')]).process(input)\n\n  equal(result.css, output)\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:23:3: Replace transition-property ' +\n        'to transition, because Autoprefixer could not support any cases ' +\n        'of transition-property and other transition-*'\n    ]\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"does not raise unnecessary warnings when prefixing transition","suites":[],"updatePoint":{"line":478,"column":67},"line":478,"code":"test('does not raise unnecessary warnings when prefixing transition', () => {\n  check('transition-no-warning')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"works with broken transition","suites":[],"updatePoint":{"line":482,"column":34},"line":482,"code":"test('works with broken transition', () => {\n  let input = 'a{transition:,,}'\n  let output = 'a{-webkit-transition:;-o-transition:;transition:}'\n  let result = postcss([prefixer('transition')]).process(input)\n  equal(result.css, output)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"should ignore spaces inside values","suites":[],"updatePoint":{"line":489,"column":40},"line":489,"code":"test('should ignore spaces inside values', () => {\n  let css = read('trim')\n  equal(postcss([flexboxer]).process(css).css, css)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"removes unnecessary prefixes","suites":[],"updatePoint":{"line":494,"column":34},"line":494,"code":"test('removes unnecessary prefixes', () => {\n  let processor = postcss([cleaner])\n  for (let i of COMMONS) {\n    if (i === 'gradient-fix') continue\n    if (i === 'cascade') continue\n    if (i === 'mistakes') continue\n    if (i === 'flex-rewrite') continue\n    if (i === 'grid') continue\n    if (i === 'grid-gap') continue\n    if (i === 'grid-area') continue\n    if (i === 'grid-template') continue\n    if (i === 'grid-template-areas') continue\n    let input = read(i + '.out')\n    let output = read(i)\n    equal(processor.process(input).css, output)\n  }\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"media does not should nested","suites":[],"updatePoint":{"line":512,"column":34},"line":512,"code":"test('media does not should nested', () => {\n  let processor = postcss([grider])\n  let input = read('grid-media-rules')\n  let output = read('grid-media-rules.out')\n  equal(processor.process(input).css, output)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"does not remove unnecessary prefixes on request","suites":[],"updatePoint":{"line":519,"column":53},"line":519,"code":"test('does not remove unnecessary prefixes on request', () => {\n  for (let i of ['transition', 'values', 'fullscreen']) {\n    let keeper = autoprefixer({ overrideBrowserslist: [], remove: false })\n    let css = read(i + '.out')\n    equal(postcss([keeper]).process(css).css, css)\n  }\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"does not add prefixes on request","suites":[],"updatePoint":{"line":527,"column":38},"line":527,"code":"test('does not add prefixes on request', () => {\n  for (let i of ['transition', 'values', 'fullscreen']) {\n    let remover = autoprefixer({\n      overrideBrowserslist: ['Opera 12'],\n      add: false\n    })\n    let unprefixed = read(i)\n    equal(postcss([remover]).process(unprefixed).css, unprefixed)\n  }\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"prevents doubling prefixes","suites":[],"updatePoint":{"line":538,"column":32},"line":538,"code":"test('prevents doubling prefixes', () => {\n  for (let i of COMMONS) {\n    let processor = postcss([prefixer(i)])\n    let input = read(i)\n    let output = read(i + '.out')\n    let result = processor.process(processor.process(input)).css\n    equal(universalizer(result), universalizer(output))\n  }\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"does not broke AST","suites":[],"updatePoint":{"line":552,"column":24},"line":552,"code":"test('does not broke AST', () => {\n  function checkParent(node) {\n    node.walk(child => {\n      type(child.parent, 'object')\n      if (isContainerNode(child)) checkParent(child)\n    })\n  }\n  for (let i of COMMONS) {\n    let processor = postcss([prefixer(i)])\n    let input = read(i)\n    checkParent(processor.process(input).root)\n  }\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"parses difficult files","suites":[],"updatePoint":{"line":566,"column":28},"line":566,"code":"test('parses difficult files', () => {\n  let input = read('syntax')\n  let result = postcss([cleaner]).process(input)\n  equal(result.css, input)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"marks parsing errors","suites":[],"updatePoint":{"line":572,"column":26},"line":572,"code":"test('marks parsing errors', () => {\n  throws(() => {\n    postcss([cleaner]).process('a {').css\n  }, '<css input>:1:1: Unclosed block')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"shows file name in parse error","suites":[],"updatePoint":{"line":578,"column":36},"line":578,"code":"test('shows file name in parse error', () => {\n  throws(() => {\n    postcss([cleaner]).process('a {', { from: 'a.css' }).css\n  }, /a.css:1:1: /)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"uses browserslist config","suites":[],"updatePoint":{"line":584,"column":30},"line":584,"code":"test('uses browserslist config', () => {\n  let from = join(__dirname, 'cases/config/test.css')\n  let input = read('config/test')\n  let output = read('config/test.out')\n  let processor = postcss([autoprefixer])\n  equal(processor.process(input, { from }).css, output)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"sets browserslist environment","suites":[],"updatePoint":{"line":592,"column":35},"line":592,"code":"test('sets browserslist environment', () => {\n  let from = join(__dirname, 'cases/config/test.css')\n  let input = read('config/test')\n  let output = read('config/test.production')\n  let processor = postcss([autoprefixer({ env: 'development' })])\n  equal(processor.process(input, { from }).css, output)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"takes values from other PostCSS plugins","suites":[],"updatePoint":{"line":600,"column":45},"line":600,"code":"test('takes values from other PostCSS plugins', () => {\n  function plugin(root) {\n    root.walkDecls(i => {\n      i.value = 'calc(0)'\n    })\n  }\n  let result = postcss([plugin, compiler]).process('a{width:0/**/0}')\n  equal(result.css, 'a{width:-webkit-calc(0);width:calc(0)}')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"has option to disable @supports support","suites":[],"updatePoint":{"line":610,"column":45},"line":610,"code":"test('has option to disable @supports support', () => {\n  let css = '@supports (cursor: grab) {}'\n  let instance = autoprefixer({\n    overrideBrowserslist: ['Chrome 28'],\n    supports: false\n  })\n  let result = postcss([instance]).process(css)\n  equal(result.css, css)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"has disabled grid options by default","suites":[],"updatePoint":{"line":620,"column":42},"line":620,"code":"test('has disabled grid options by default', () => {\n  let ap = autoprefixer({ overrideBrowserslist: ['Edge 12', 'IE 10'] })\n  let input = read('grid')\n  let output = read('grid.disabled')\n  let result = postcss([ap]).process(input)\n  equal(result.css, output)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"has different outputs for different grid options","suites":[],"updatePoint":{"line":628,"column":54},"line":628,"code":"test('has different outputs for different grid options', () => {\n  function ap(gridValue) {\n    return autoprefixer({\n      overrideBrowserslist: ['Edge 12', 'IE 10'],\n      grid: gridValue\n    })\n  }\n  let input = read('grid-options')\n  let outputAutoplace = read('grid-options.autoplace.out')\n  let outputNoAutoplace = read('grid-options.no-autoplace.out')\n  let outputDisabled = read('grid-options.disabled.out')\n\n  let resultAutoplace = postcss([ap('autoplace')]).process(input).css\n  let resultNoAutoplace = postcss([ap('no-autoplace')]).process(input).css\n  let resultEnabled = postcss([ap(true)]).process(input).css\n  let resultDisabled = postcss([ap(false)]).process(input).css\n\n  // output for grid: 'autoplace'\n  equal(resultAutoplace, outputAutoplace)\n  // output for grid: 'no-autoplace'\n  equal(resultNoAutoplace, outputNoAutoplace)\n  // output for grid: true is the same as for 'no-autoplace'\n  equal(resultEnabled, outputNoAutoplace)\n  // output for grid: false\n  equal(resultDisabled, outputDisabled)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"has different outputs for different grid environment variables","suites":[],"updatePoint":{"line":655,"column":68},"line":655,"code":"test('has different outputs for different grid environment variables', () => {\n  function ap(gridValue) {\n    process.env.AUTOPREFIXER_GRID = gridValue\n    return autoprefixer({ overrideBrowserslist: ['Edge 12', 'IE 10'] })\n  }\n  let input = read('grid-options')\n  let outputAutoplace = read('grid-options.autoplace.out')\n  let outputNoAutoplace = read('grid-options.no-autoplace.out')\n\n  let resultAutoplace = postcss([ap('autoplace')]).process(input).css\n  equal(resultAutoplace, outputAutoplace)\n\n  let resultNoAutoplace = postcss([ap('no-autoplace')]).process(input).css\n  equal(resultNoAutoplace, outputNoAutoplace)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"has option to disable flexbox support","suites":[],"updatePoint":{"line":671,"column":43},"line":671,"code":"test('has option to disable flexbox support', () => {\n  let css = read('flexbox')\n  let instance = autoprefixer({\n    overrideBrowserslist: ['IE 10'],\n    flexbox: false\n  })\n  let result = postcss([instance]).process(css)\n  equal(result.css, css)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"has option to disable 2009 flexbox support","suites":[],"updatePoint":{"line":681,"column":48},"line":681,"code":"test('has option to disable 2009 flexbox support', () => {\n  let ap = autoprefixer({\n    overrideBrowserslist: ['Chrome > 19'],\n    flexbox: 'no-2009'\n  })\n  let css = 'a{flex:1;transition:flex}'\n  let result = postcss([ap]).process(css)\n  equal(\n    result.css,\n    'a{' +\n      '-webkit-flex:1;flex:1;' +\n      '-webkit-transition:-webkit-flex;transition:-webkit-flex;' +\n      'transition:flex;transition:flex, -webkit-flex' +\n      '}'\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"returns inspect string","suites":[],"updatePoint":{"line":698,"column":28},"line":698,"code":"test('returns inspect string', () => {\n  match(\n    autoprefixer({ overrideBrowserslist: ['chrome 25'] }).info(),\n    /Browsers:\\s+Chrome: 25/\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"uses browserslist config in inspect","suites":[],"updatePoint":{"line":705,"column":41},"line":705,"code":"test('uses browserslist config in inspect', () => {\n  let from = join(__dirname, 'cases/config')\n  match(autoprefixer().info({ from }), /Browsers:\\s+IE: 10/)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"ignores unknown versions on request","suites":[],"updatePoint":{"line":710,"column":41},"line":710,"code":"test('ignores unknown versions on request', () => {\n  throws(() => {\n    autoprefixer({ overrideBrowserslist: ['ie 100'] }).info()\n  }, /Unknown version 100 of ie/)\n  not.throws(() => {\n    autoprefixer({\n      overrideBrowserslist: ['ie 100'],\n      ignoreUnknownVersions: true\n    }).info()\n  })\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"works with CSS Modules","suites":[],"updatePoint":{"line":722,"column":28},"line":722,"code":"test('works with CSS Modules', () => {\n  postcss([autoprefixer()]).process(':export { selectors: _1q6ho_2 }').css\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"ignores prefix IE filter","suites":[],"updatePoint":{"line":726,"column":30},"line":726,"code":"test('ignores prefix IE filter', () => {\n  check('filter')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports webkit filters","suites":[],"updatePoint":{"line":730,"column":29},"line":730,"code":"test('supports webkit filters', () => {\n  check('advanced-filter')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"changes border image syntax","suites":[],"updatePoint":{"line":734,"column":33},"line":734,"code":"test('changes border image syntax', () => {\n  check('border-image')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports old Mozilla prefixes","suites":[],"updatePoint":{"line":738,"column":35},"line":738,"code":"test('supports old Mozilla prefixes', () => {\n  check('border-radius')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports all flexbox syntaxes","suites":[],"updatePoint":{"line":742,"column":35},"line":742,"code":"test('supports all flexbox syntaxes', () => {\n  check('flexbox')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports map flexbox props","suites":[],"updatePoint":{"line":746,"column":32},"line":746,"code":"test('supports map flexbox props', () => {\n  check('flex-rewrite')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports all fullscreens","suites":[],"updatePoint":{"line":750,"column":30},"line":750,"code":"test('supports all fullscreens', () => {\n  check('fullscreen')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports file-selector-button","suites":[],"updatePoint":{"line":754,"column":35},"line":754,"code":"test('supports file-selector-button', () => {\n  check('file-selector-button')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports custom prefixes","suites":[],"updatePoint":{"line":758,"column":30},"line":758,"code":"test('supports custom prefixes', () => {\n  check('custom-prefix')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"fixes break properties","suites":[],"updatePoint":{"line":762,"column":28},"line":762,"code":"test('fixes break properties', () => {\n  check('multicolumn')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"ignores some 3D transforms","suites":[],"updatePoint":{"line":766,"column":32},"line":766,"code":"test('ignores some 3D transforms', () => {\n  check('3d-transform')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports background-size","suites":[],"updatePoint":{"line":770,"column":30},"line":770,"code":"test('supports background-size', () => {\n  check('background-size')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports background-clip","suites":[],"updatePoint":{"line":774,"column":30},"line":774,"code":"test('supports background-clip', () => {\n  check('background-clip')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports logical properties","suites":[],"updatePoint":{"line":778,"column":33},"line":778,"code":"test('supports logical properties', () => {\n  check('logical')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports appearance","suites":[],"updatePoint":{"line":782,"column":25},"line":782,"code":"test('supports appearance', () => {\n  check('appearance')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports all placeholders","suites":[],"updatePoint":{"line":786,"column":31},"line":786,"code":"test('supports all placeholders', () => {\n  check('placeholder')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports placeholder-shown","suites":[],"updatePoint":{"line":790,"column":32},"line":790,"code":"test('supports placeholder-shown', () => {\n  check('placeholder-shown')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports image-rendering","suites":[],"updatePoint":{"line":794,"column":30},"line":794,"code":"test('supports image-rendering', () => {\n  check('image-rendering')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports border-box mask","suites":[],"updatePoint":{"line":798,"column":30},"line":798,"code":"test('supports border-box mask', () => {\n  check('mask-border')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports mask-composite","suites":[],"updatePoint":{"line":802,"column":29},"line":802,"code":"test('supports mask-composite', () => {\n  check('mask-composite')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports image-set()","suites":[],"updatePoint":{"line":806,"column":26},"line":806,"code":"test('supports image-set()', () => {\n  check('image-set')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports writing-mode","suites":[],"updatePoint":{"line":810,"column":27},"line":810,"code":"test('supports writing-mode', () => {\n  check('writing-mode')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports cross-fade()","suites":[],"updatePoint":{"line":814,"column":27},"line":814,"code":"test('supports cross-fade()', () => {\n  check('cross-fade')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"ignores modern direction","suites":[],"updatePoint":{"line":818,"column":30},"line":818,"code":"test('ignores modern direction', () => {\n  check('animation')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports overscroll-behavior","suites":[],"updatePoint":{"line":822,"column":34},"line":822,"code":"test('supports overscroll-behavior', () => {\n  check('overscroll-behavior')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports print-color-adjust","suites":[],"updatePoint":{"line":826,"column":33},"line":826,"code":"test('supports print-color-adjust', () => {\n  let input = read('print-color-adjust')\n  let output = read('print-color-adjust.out')\n  let result = postcss([prefixer('print-color-adjust')]).process(input)\n\n  equal(result.css, output)\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:2:3: Replace color-adjust ' +\n        'to print-color-adjust. The color-adjust shorthand ' +\n        'is currently deprecated.'\n    ]\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports backdrop-filter","suites":[],"updatePoint":{"line":842,"column":30},"line":842,"code":"test('supports backdrop-filter', () => {\n  check('backdrop-filter')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports user-select hack for IE","suites":[],"updatePoint":{"line":846,"column":38},"line":846,"code":"test('supports user-select hack for IE', () => {\n  check('user-select')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports appearance for IE","suites":[],"updatePoint":{"line":850,"column":32},"line":850,"code":"test('supports appearance for IE', () => {\n  let instance = autoprefixer({ overrideBrowserslist: 'Edge 15' })\n  let result = postcss([instance]).process('a { appearance: none }')\n  equal(result.css, 'a { -webkit-appearance: none; appearance: none }')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"changes angle in gradient","suites":[],"updatePoint":{"line":856,"column":31},"line":856,"code":"test('changes angle in gradient', () => {\n  let input = read('gradient')\n  let output = read('gradient.out')\n  let result = postcss([prefixer('gradient')]).process(input)\n\n  equal(result.css, output)\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:18:3: Gradient has outdated direction ' +\n        'syntax. New syntax is like `closest-side at 0 0` instead of ' +\n        '`0 0, closest-side`.',\n      'autoprefixer: <css input>:38:3: Gradient has outdated direction ' +\n        'syntax. New syntax is like `to left` instead of `right`.',\n      'autoprefixer: <css input>:100:3: Gradient has outdated ' +\n        'direction syntax. Replace `cover` to `farthest-corner`.',\n      'autoprefixer: <css input>:104:3: Gradient has outdated ' +\n        'direction syntax. Replace `contain` to `closest-side`.'\n    ]\n  )\n\n  check('gradient-fix')\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"warns on old flexbox display","suites":[],"updatePoint":{"line":880,"column":34},"line":880,"code":"test('warns on old flexbox display', () => {\n  let result = postcss([flexboxer]).process('a{ display: box; }')\n  equal(result.css, 'a{ display: box; }')\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:1:4: You should write display: flex ' +\n        'by final spec instead of display: box'\n    ]\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"warns on mixed support usage","suites":[],"updatePoint":{"line":892,"column":34},"line":892,"code":"test('warns on mixed support usage', () => {\n  let css = 'a { display: flex; align-content: start; justify-content: end; }'\n  let result = postcss([\n    autoprefixer({\n      overrideBrowserslist: ['IE 11']\n    })\n  ]).process(css)\n  equal(result.css, css)\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:1:20: start value has mixed support, ' +\n        'consider using flex-start instead',\n      'autoprefixer: <css input>:1:42: end value has mixed support, ' +\n        'consider using flex-end instead'\n    ]\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports intrinsic sizing","suites":[],"updatePoint":{"line":911,"column":31},"line":911,"code":"test('supports intrinsic sizing', () => {\n  let input = read('intrinsic')\n  let output = read('intrinsic.out')\n  let result = postcss([prefixer('intrinsic')]).process(input)\n\n  equal(result.css, output)\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:15:3: Replace fill to stretch, ' +\n        'because spec had been changed',\n      'autoprefixer: <css input>:19:3: Replace fill-available ' +\n        'to stretch, because spec had been changed'\n    ]\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports text-emphasis","suites":[],"updatePoint":{"line":928,"column":28},"line":928,"code":"test('supports text-emphasis', () => {\n  let input = read('text-emphasis-position')\n  let output = read('text-emphasis-position.out')\n  let instance = prefixer('text-emphasis-position')\n  let result = postcss([instance]).process(input)\n\n  equal(result.css, output)\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:14:3: You should use 2 values ' +\n        'for text-emphasis-position For example, `under left` ' +\n        'instead of just `under`.'\n    ]\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports grid layout","suites":[],"updatePoint":{"line":945,"column":26},"line":945,"code":"test('supports grid layout', () => {\n  let input = read('grid')\n  let output = read('grid.out')\n  let instance = prefixer('grid')\n  let result = postcss([instance]).process(input)\n\n  equal(result.css, output)\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:3:3: Autoplacement does not work ' +\n        'without grid-template-rows property',\n      'autoprefixer: <css input>:12:3: Autoplacement does not work ' +\n        'without grid-template-columns property',\n      'autoprefixer: <css input>:36:3: Can not prefix grid-column-end ' +\n        '(grid-column-start is not found)',\n      'autoprefixer: <css input>:37:3: IE does not support subgrid',\n      'autoprefixer: <css input>:39:3: Can not implement grid-gap ' +\n        'without grid-template-columns',\n      'autoprefixer: <css input>:39:3: Can not find grid areas: ' +\n        'head, nav, main, foot',\n      'autoprefixer: <css input>:57:3: Can not implement grid-gap ' +\n        'without grid-template-columns',\n      'autoprefixer: <css input>:57:3: Can not find grid areas: a',\n      'autoprefixer: <css input>:65:3: Can not implement grid-gap ' +\n        'without grid-template-columns',\n      'autoprefixer: <css input>:65:3: Can not find grid areas: b',\n      'autoprefixer: <css input>:73:3: Can not find grid areas: c',\n      'autoprefixer: <css input>:81:3: Can not find grid areas: d',\n      'autoprefixer: <css input>:116:3: grid-column-span is not part ' +\n        'of final Grid Layout. Use grid-column.',\n      'autoprefixer: <css input>:117:3: grid-row-span is not part ' +\n        'of final Grid Layout. Use grid-row.',\n      'autoprefixer: <css input>:118:3: grid-auto-columns is not ' +\n        'supported by IE',\n      'autoprefixer: <css input>:119:3: grid-auto-rows is not ' +\n        'supported by IE',\n      'autoprefixer: <css input>:121:33: auto-fill value is not ' +\n        'supported by IE',\n      'autoprefixer: <css input>:122:30: auto-fit value is not ' +\n        'supported by IE',\n      'autoprefixer: <css input>:138:3: Please do not use ' +\n        'display: contents; if you have grid setting enabled',\n      'autoprefixer: <css input>:142:3: IE does not support align-items ' +\n        'on grid containers. Try using align-self on child elements instead: ' +\n        '.warn_ie_align > * { align-self: center }',\n      'autoprefixer: <css input>:147:3: IE does not support justify-items ' +\n        'on grid containers. Try using justify-self on child elements ' +\n        'instead: .warn_ie_justify > * { justify-self: center }',\n      'autoprefixer: <css input>:152:3: IE does not support justify-content ' +\n        'on grid containers',\n      'autoprefixer: <css input>:157:3: IE does not support place-items ' +\n        'on grid containers. Try using place-self on child elements ' +\n        'instead: .warn_place_items > * { place-self: start end }',\n      'autoprefixer: <css input>:181:3: grid-auto-flow is not supported by IE',\n      'autoprefixer: <css input>:203:26: Autoprefixer currently does not ' +\n        'support line names. Try using grid-template-areas instead.'\n    ]\n  )\n\n  let input2 = read('grid-template')\n  let output2 = read('grid-template.out')\n  let instance2 = prefixer('grid-template')\n  let result2 = postcss([instance2]).process(input2)\n  equal(result2.css, output2)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports grid autoplacement","suites":[],"updatePoint":{"line":1012,"column":33},"line":1012,"code":"test('supports grid autoplacement', () => {\n  let input = read('grid-autoplacement')\n  let output = read('grid-autoplacement.out')\n  let instance = prefixer('grid')\n  let result = postcss([instance]).process(input)\n  equal(result.css, output)\n\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:47:3: grid-auto-flow: dense ' +\n        'is not supported by IE',\n      'autoprefixer: <css input>:48:3: Autoplacement does not work ' +\n        'without grid-template-rows property',\n      'autoprefixer: <css input>:53:3: grid-auto-flow works only if grid-temp' +\n        'late-rows and grid-template-columns are present in the same rule',\n      'autoprefixer: <css input>:60:3: grid-gap only works if grid-temp' +\n        'late(-areas) is being used',\n      'autoprefixer: <css input>:64:3: Autoplacement does not work ' +\n        'without grid-template-rows property',\n      'autoprefixer: <css input>:65:3: grid-gap only works if grid-temp' +\n        'late(-areas) is being used or both rows and columns have been ' +\n        'declared and cells have not been ' +\n        'manually placed inside the explicit grid'\n    ]\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"shows Grid warnings only for IE","suites":[],"updatePoint":{"line":1040,"column":37},"line":1040,"code":"test('shows Grid warnings only for IE', () => {\n  let input = 'a { grid-template-rows: repeat(auto-fit, 1px) }'\n  let instance = autoprefixer({\n    overrideBrowserslist: 'chrome 27',\n    grid: true\n  })\n  let result = postcss([instance]).process(input)\n  equal(result.warnings().length, 0)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"warns if rule has both grid-area and grid-(row|column) decls","suites":[],"updatePoint":{"line":1050,"column":66},"line":1050,"code":"test('warns if rule has both grid-area and grid-(row|column) decls', () => {\n  let input = read('grid-area')\n  let instance = prefixer('grid-area')\n  let result = postcss([instance]).process(input)\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:28:3: You already have a grid-area ' +\n        'declaration present in the rule. You should use either ' +\n        'grid-area or grid-row, not both',\n      'autoprefixer: <css input>:29:3: You already have a grid-area ' +\n        'declaration present in the rule. You should use either ' +\n        'grid-area or grid-column, not both',\n      'autoprefixer: <css input>:34:3: You already have a grid-area ' +\n        'declaration present in the rule. You should use either ' +\n        'grid-area or grid-column, not both'\n    ]\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"warns if rule with grid-area has no parent with grid-template","suites":[],"updatePoint":{"line":1070,"column":67},"line":1070,"code":"test('warns if rule with grid-area has no parent with grid-template', () => {\n  let input = read('grid-template-areas')\n  let instance = prefixer('grid-area')\n  let result = postcss([instance]).process(input)\n\n  equal(\n    result\n      .warnings()\n      .map(i => i.toString())\n      .filter(str => str.includes('grid-template')),\n    [\n      'autoprefixer: <css input>:144:3: Autoprefixer cannot find ' +\n        'a grid-template containing the duplicate grid-area ' +\n        '\"child\" with full selector matching: .uncle',\n      'autoprefixer: <css input>:149:3: Autoprefixer cannot find ' +\n        'a grid-template containing the duplicate grid-area ' +\n        '\"child\" with full selector matching: .uncle',\n      'autoprefixer: <css input>:154:3: Autoprefixer cannot find ' +\n        'a grid-template containing the duplicate grid-area ' +\n        '\"child\" with full selector matching: .grand-parent .uncle-second',\n      'autoprefixer: <css input>:159:3: Autoprefixer cannot find ' +\n        'a grid-template containing the duplicate grid-area ' +\n        '\"child\" with full selector matching: .grand-parent .uncle-second',\n      'autoprefixer: <css input>:164:3: Autoprefixer cannot find ' +\n        'a grid-template containing the duplicate grid-area ' +\n        '\"child\" with full selector matching: .grand-parent .father.uncle',\n      'autoprefixer: <css input>:169:3: Autoprefixer cannot find ' +\n        'a grid-template containing the duplicate grid-area ' +\n        '\"child\" with full selector matching: .grand-parent.uncle .father'\n    ]\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"should preserve @media rules with grid-area","suites":[],"updatePoint":{"line":1103,"column":49},"line":1103,"code":"test('should preserve @media rules with grid-area', () => {\n  let input = read('grid-area-media-sequence')\n  let output = read('grid-area-media-sequence.out')\n  let instance = prefixer('grid-area')\n  let result = postcss([instance]).process(input)\n  equal(result.css, output)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"should merge complex duplicate grid-area rules successfully","suites":[],"updatePoint":{"line":1111,"column":65},"line":1111,"code":"test('should merge complex duplicate grid-area rules successfully', () => {\n  let input = read('grid-areas-duplicate-complex')\n  let output = read('grid-areas-duplicate-complex.out')\n  let instance = prefixer('grid-area')\n  let result = postcss([instance]).process(input)\n  equal(result.css, output)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"ignores values for CSS3PIE props","suites":[],"updatePoint":{"line":1119,"column":38},"line":1119,"code":"test('ignores values for CSS3PIE props', () => {\n  let css = read('pie')\n  equal(postcss([compiler]).process(css).css, css)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"add prefix for backface-visibility for Safari 9","suites":[],"updatePoint":{"line":1124,"column":53},"line":1124,"code":"test('add prefix for backface-visibility for Safari 9', () => {\n  let input =\n    'a{ ' + 'backface-visibility: hidden; ' + 'transform-style: preserve-3d }'\n  let ap = autoprefixer({\n    overrideBrowserslist: ['Safari 9'],\n    flexbox: false\n  })\n  equal(\n    postcss([ap]).process(input).css,\n    'a{ ' +\n      '-webkit-backface-visibility: hidden; ' +\n      'backface-visibility: hidden; ' +\n      'transform-style: preserve-3d }'\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports text-decoration","suites":[],"updatePoint":{"line":1140,"column":30},"line":1140,"code":"test('supports text-decoration', () => {\n  let input = read('text-decoration')\n  let instance = prefixer('text-decoration')\n  let result = postcss([instance]).process(input)\n  equal(\n    result.warnings().map(i => i.toString()),\n    [\n      'autoprefixer: <css input>:26:3: Replace text-decoration-skip: ink ' +\n        'to text-decoration-skip-ink: auto, because spec had been changed'\n    ]\n  )\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports -webkit-line-clamp","suites":[],"updatePoint":{"line":1153,"column":33},"line":1153,"code":"test('supports -webkit-line-clamp', () => {\n  let input = read('webkit-line-clamp')\n  let result = postcss([cleaner]).process(input)\n  equal(result.css, input)\n  equal(result.warnings().length, 0)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"supports latest Firefox stretch","suites":[],"updatePoint":{"line":1160,"column":37},"line":1160,"code":"test('supports latest Firefox stretch', () => {\n  let input = read('intrinsic')\n  let output = read('intrinsic.ff')\n  let result = postcss([\n    autoprefixer({ overrideBrowserslist: 'firefox 90' })\n  ]).process(input)\n  equal(result.css, output)\n  equal(result.warnings().length, 2)\n})","file":"autoprefixer.test.js","skipped":false,"dir":"test"},{"name":"parses simple string","suites":[],"updatePoint":{"line":6,"column":26},"line":6,"code":"test('parses simple string', () => {\n  equal(brackets.parse('test'), ['test'])\n})","file":"brackets.test.js","skipped":false,"dir":"test"},{"name":"parses brackets","suites":[],"updatePoint":{"line":10,"column":21},"line":10,"code":"test('parses brackets', () => {\n  equal(brackets.parse('a (b) a'), ['a ', ['b'], ' a'])\n})","file":"brackets.test.js","skipped":false,"dir":"test"},{"name":"parses many brackets","suites":[],"updatePoint":{"line":14,"column":26},"line":14,"code":"test('parses many brackets', () => {\n  equal(brackets.parse('a (b ()) a'), ['a ', ['b ', [''], ''], ' a'])\n})","file":"brackets.test.js","skipped":false,"dir":"test"},{"name":"parses errors","suites":[],"updatePoint":{"line":18,"column":19},"line":18,"code":"test('parses errors', () => {\n  equal(brackets.parse('a (b ('), ['a ', ['b ', ['']]])\n})","file":"brackets.test.js","skipped":false,"dir":"test"},{"name":"stringifies simple string","suites":[],"updatePoint":{"line":22,"column":31},"line":22,"code":"test('stringifies simple string', () => {\n  equal(brackets.stringify(['test']), 'test')\n})","file":"brackets.test.js","skipped":false,"dir":"test"},{"name":"stringifies brackets","suites":[],"updatePoint":{"line":26,"column":26},"line":26,"code":"test('stringifies brackets', () => {\n  equal(brackets.stringify(['a ', ['b'], ' a']), 'a (b) a')\n})","file":"brackets.test.js","skipped":false,"dir":"test"},{"name":"stringifies many brackets","suites":[],"updatePoint":{"line":30,"column":31},"line":30,"code":"test('stringifies many brackets', () => {\n  equal(brackets.stringify(['a ', ['b ', [''], ''], ' a']), 'a (b ()) a')\n})","file":"brackets.test.js","skipped":false,"dir":"test"},{"name":"returns prefixes by default data","suites":[],"updatePoint":{"line":8,"column":38},"line":8,"code":"test('returns prefixes by default data', () => {\n  equal(Browsers.prefixes(), ['-webkit-', '-moz-', '-ms-', '-o-'])\n})","file":"browsers.test.js","skipped":false,"dir":"test"},{"name":"finds possible prefix","suites":[],"updatePoint":{"line":12,"column":27},"line":12,"code":"test('finds possible prefix', () => {\n  is(Browsers.withPrefix('1 -o-calc(1)'), true)\n  is(Browsers.withPrefix('1 calc(1)'), false)\n})","file":"browsers.test.js","skipped":false,"dir":"test"},{"name":"allows to select no browsers","suites":[],"updatePoint":{"line":17,"column":34},"line":17,"code":"test('allows to select no browsers', () => {\n  let browsers = new Browsers(agents, [])\n  equal(browsers.selected.length, 0)\n})","file":"browsers.test.js","skipped":false,"dir":"test"},{"name":"selects by older version","suites":[],"updatePoint":{"line":22,"column":30},"line":22,"code":"test('selects by older version', () => {\n  let browsers = new Browsers(agents, ['ie < 7'])\n  equal(browsers.selected, ['ie 6', 'ie 5.5'])\n})","file":"browsers.test.js","skipped":false,"dir":"test"},{"name":"combines requirements","suites":[],"updatePoint":{"line":27,"column":27},"line":27,"code":"test('combines requirements', () => {\n  let browsers = new Browsers(agents, ['ie 10', 'ie < 6'])\n  equal(browsers.selected, ['ie 10', 'ie 5.5'])\n})","file":"browsers.test.js","skipped":false,"dir":"test"},{"name":"has aliases","suites":[],"updatePoint":{"line":32,"column":17},"line":32,"code":"test('has aliases', () => {\n  equal(new Browsers(agents, ['fx 10']).selected, ['firefox 10'])\n  equal(new Browsers(agents, ['ff 10']).selected, ['firefox 10'])\n})","file":"browsers.test.js","skipped":false,"dir":"test"},{"name":"ignores case","suites":[],"updatePoint":{"line":37,"column":18},"line":37,"code":"test('ignores case', () => {\n  equal(new Browsers(agents, ['Firefox 10']).selected, ['firefox 10'])\n})","file":"browsers.test.js","skipped":false,"dir":"test"},{"name":"uses browserslist config","suites":[],"updatePoint":{"line":41,"column":30},"line":41,"code":"test('uses browserslist config', () => {\n  let from = join(__dirname, 'cases/config/test.css')\n  equal(new Browsers(agents, undefined, { from }).selected, ['ie 10'])\n})","file":"browsers.test.js","skipped":false,"dir":"test"},{"name":"returns browser prefix","suites":[],"updatePoint":{"line":46,"column":28},"line":46,"code":"test('returns browser prefix', () => {\n  let browsers = new Browsers(agents, ['chrome 30'])\n  equal(browsers.prefix('chrome 30'), '-webkit-')\n})","file":"browsers.test.js","skipped":false,"dir":"test"},{"name":"returns right prefix for Operas","suites":[],"updatePoint":{"line":51,"column":37},"line":51,"code":"test('returns right prefix for Operas', () => {\n  let browsers = new Browsers(agents, ['last 1 opera version'])\n  equal(browsers.prefix('opera 12'), '-o-')\n  equal(browsers.prefix(browsers.selected[0]), '-webkit-')\n  equal(browsers.prefix('op_mob 12'), '-o-')\n  equal(browsers.prefix(browsers.selected[0]), '-webkit-')\n})","file":"browsers.test.js","skipped":false,"dir":"test"},{"name":"return true for selected browsers","suites":[],"updatePoint":{"line":59,"column":39},"line":59,"code":"test('return true for selected browsers', () => {\n  let browsers = new Browsers(agents, ['chrome 30', 'chrome 31'])\n  is(browsers.isSelected('chrome 30'), true)\n  is(browsers.isSelected('ie 6'), false)\n})","file":"browsers.test.js","skipped":false,"dir":"test"},{"name":"checks values for other prefixes","suites":[],"updatePoint":{"line":18,"column":38},"line":18,"code":"test('checks values for other prefixes', () => {\n  is(tabsize.otherPrefixes('black', '-moz-'), false)\n  is(tabsize.otherPrefixes('-moz-black', '-moz-'), false)\n  is(tabsize.otherPrefixes('-dev-black', '-moz-'), false)\n  is(tabsize.otherPrefixes('-ms-black', '-moz-'), true)\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"returns true by default","suites":[],"updatePoint":{"line":25,"column":29},"line":25,"code":"test('returns true by default', () => {\n  let css = parse('a {\\n  tab-size: 4 }')\n  is(tabsize.needCascade(css.first.first), true)\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"return false is disabled","suites":[],"updatePoint":{"line":30,"column":30},"line":30,"code":"test('return false is disabled', () => {\n  prefixes.options.cascade = false\n  let css = parse('a {\\n  tab-size: 4 }')\n  is(tabsize.needCascade(css.first.first), false)\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"returns false on declarations in one line","suites":[],"updatePoint":{"line":36,"column":47},"line":36,"code":"test('returns false on declarations in one line', () => {\n  let css = parse('a { tab-size: 4 } a {\\n  tab-size: 4 }')\n  is(tabsize.needCascade(css.first.first), false)\n  is(tabsize.needCascade(css.last.first), true)\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"returns max prefix length","suites":[],"updatePoint":{"line":42,"column":31},"line":42,"code":"test('returns max prefix length', () => {\n  let decl = parse('a { tab-size: 4 }').first.first\n  let list = ['-webkit-', '-webkit- old', '-moz-']\n  equal(tabsize.maxPrefixed(list, decl), 8)\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"returns before with cascade","suites":[],"updatePoint":{"line":48,"column":33},"line":48,"code":"test('returns before with cascade', () => {\n  let decl = parse('a { tab-size: 4 }').first.first\n  let list = ['-webkit-', '-moz- old', '-moz-']\n  equal(tabsize.calcBefore(list, decl, '-moz- old'), '    ')\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"removes cascade","suites":[],"updatePoint":{"line":54,"column":21},"line":54,"code":"test('removes cascade', () => {\n  let css = parse('a {\\n' + '  -moz-tab-size: 4;\\n' + '       tab-size: 4 }')\n  let decl = css.first.nodes[1]\n  tabsize.restoreBefore(decl)\n  equal(decl.raws.before, '\\n  ')\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"returns prefixed property","suites":[],"updatePoint":{"line":61,"column":31},"line":61,"code":"test('returns prefixed property', () => {\n  let css = parse('a { tab-size: 2 }')\n  let decl = css.first.first\n  equal(tabsize.prefixed(decl.prop, '-moz-'), '-moz-tab-size')\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"returns property name by specification","suites":[],"updatePoint":{"line":67,"column":44},"line":67,"code":"test('returns property name by specification', () => {\n  equal(tabsize.normalize('tab-size'), 'tab-size')\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"adds prefixes","suites":[],"updatePoint":{"line":71,"column":19},"line":71,"code":"test('adds prefixes', () => {\n  let css = parse('a { -moz-tab-size: 2; tab-size: 2 }')\n  tabsize.process(css.first.nodes[1])\n  equal(css.toString(), 'a { -moz-tab-size: 2; -ms-tab-size: 2; tab-size: 2 }')\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"checks parents prefix","suites":[],"updatePoint":{"line":77,"column":27},"line":77,"code":"test('checks parents prefix', () => {\n  let css = parse('::-moz-selection a { tab-size: 2 }')\n  tabsize.process(css.first.first)\n  equal(css.toString(), '::-moz-selection a { -moz-tab-size: 2; tab-size: 2 }')\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"checks value for prefixes","suites":[],"updatePoint":{"line":83,"column":31},"line":83,"code":"test('checks value for prefixes', () => {\n  let css = parse('a { tab-size: -ms-calc(2) }')\n  tabsize.process(css.first.first)\n  equal(\n    css.toString(),\n    'a { -ms-tab-size: -ms-calc(2); tab-size: -ms-calc(2) }'\n  )\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"returns list of prefixeds","suites":[],"updatePoint":{"line":92,"column":31},"line":92,"code":"test('returns list of prefixeds', () => {\n  equal(tabsize.old('tab-size', '-moz-'), ['-moz-tab-size'])\n})","file":"declaration.test.js","skipped":false,"dir":"test"},{"name":"returns selected browsers and prefixes","suites":[],"updatePoint":{"line":45,"column":44},"line":45,"code":"test('returns selected browsers and prefixes', () => {\n  let browsers = new Browsers(data.browsers, [\n    'chrome 30',\n    'firefox 21',\n    'firefox 20',\n    'ie 6'\n  ])\n  let prefixes = new Prefixes(data.prefixes, browsers)\n\n  let coverage = browserslist.coverage([\n    'chrome 30',\n    'firefox 21',\n    'firefox 20',\n    'ie 6'\n  ])\n  let round = Math.round(coverage * 100) / 100.0\n\n  equal(\n    info(prefixes),\n    'Browsers:\\n' +\n      '  Chrome: 30\\n' +\n      '  Firefox: 21, 20\\n' +\n      '  IE: 6\\n' +\n      '\\n' +\n      `These browsers account for ${round}% ` +\n      'of all users globally\\n' +\n      '\\n' +\n      'At-Rules:\\n' +\n      '  @keyframes: moz\\n' +\n      '\\n' +\n      'Selectors:\\n' +\n      '  d: moz\\n' +\n      '\\n' +\n      'Properties:\\n' +\n      '  a: webkit, moz\\n' +\n      '  grid-row *: ms\\n' +\n      '  transition: moz\\n' +\n      '\\n' +\n      'Values:\\n' +\n      '  b: moz, ms\\n' +\n      '  c: moz\\n' +\n      '  grid *: ms\\n' +\n      '\\n' +\n      '* - Prefixes will be added only on grid: true option.\\n'\n  )\n})","file":"info.test.js","skipped":false,"dir":"test"},{"name":"does not show transitions unless they are necessary","suites":[],"updatePoint":{"line":92,"column":57},"line":92,"code":"test('does not show transitions unless they are necessary', () => {\n  let browsers = new Browsers(data.browsers, ['chrome 30', 'firefox 20'])\n  let prefixes = new Prefixes(data.prefixes, browsers)\n\n  let coverage = browserslist.coverage(['chrome 30', 'firefox 20'])\n  let round = Math.round(coverage * 100) / 100.0\n\n  equal(\n    info(prefixes),\n    'Browsers:\\n' +\n      '  Chrome: 30\\n' +\n      '  Firefox: 20\\n' +\n      '\\n' +\n      `These browsers account for ${round}% ` +\n      'of all users globally\\n' +\n      '\\n' +\n      'Properties:\\n' +\n      '  a: webkit, moz\\n' +\n      '\\n' +\n      'Values:\\n' +\n      '  b: moz\\n'\n  )\n})","file":"info.test.js","skipped":false,"dir":"test"},{"name":"returns string for empty prefixes","suites":[],"updatePoint":{"line":116,"column":39},"line":116,"code":"test('returns string for empty prefixes', () => {\n  let browsers = new Browsers(data.browsers, ['ie 7'])\n  let prefixes = new Prefixes(data.prefixes, browsers)\n  match(info(prefixes), /remove Autoprefixer/)\n})","file":"info.test.js","skipped":false,"dir":"test"},{"name":"returns string for empty browsers","suites":[],"updatePoint":{"line":122,"column":39},"line":122,"code":"test('returns string for empty browsers', () => {\n  let browsers = new Browsers(data.browsers, [])\n  let prefixes = new Prefixes(data.prefixes, browsers)\n  equal(info(prefixes), 'No browsers selected')\n})","file":"info.test.js","skipped":false,"dir":"test"},{"name":"returns true on last rule","suites":[],"updatePoint":{"line":10,"column":31},"line":10,"code":"test('returns true on last rule', () => {\n  let css = parse('::selection {} ::-moz-selection {}')\n  is(old.isHack(css.last), true)\n})","file":"old-selector.test.js","skipped":false,"dir":"test"},{"name":"stops on another type","suites":[],"updatePoint":{"line":15,"column":27},"line":15,"code":"test('stops on another type', () => {\n  let css = parse('::-moz-selection {} ' + '@keyframes anim {} ::selection {}')\n  is(old.isHack(css.first), true)\n})","file":"old-selector.test.js","skipped":false,"dir":"test"},{"name":"stops on another selector","suites":[],"updatePoint":{"line":20,"column":31},"line":20,"code":"test('stops on another selector', () => {\n  let css = parse('::-moz-selection {} a {} ::selection {}')\n  is(old.isHack(css.first), true)\n})","file":"old-selector.test.js","skipped":false,"dir":"test"},{"name":"finds unprefixed selector","suites":[],"updatePoint":{"line":25,"column":31},"line":25,"code":"test('finds unprefixed selector', () => {\n  let css = parse('::-moz-selection {} ' + '::-o-selection {} ::selection {}')\n  is(old.isHack(css.first), false)\n})","file":"old-selector.test.js","skipped":false,"dir":"test"},{"name":"finds old selector","suites":[],"updatePoint":{"line":30,"column":24},"line":30,"code":"test('finds old selector', () => {\n  let css = parse('body::-moz-selection {} body::selection {}')\n  is(old.check(css.first), true)\n})","file":"old-selector.test.js","skipped":false,"dir":"test"},{"name":"finds right","suites":[],"updatePoint":{"line":35,"column":17},"line":35,"code":"test('finds right', () => {\n  let css = parse('body:::-moz-selection {}')\n  is(old.check(css.first), false)\n})","file":"old-selector.test.js","skipped":false,"dir":"test"},{"name":"checks value in string","suites":[],"updatePoint":{"line":6,"column":28},"line":6,"code":"test('checks value in string', () => {\n  let old = new OldValue('calc', '-o-calc')\n  is(old.check('1px -o-calc(1px)'), true)\n  is(old.check('1px calc(1px)'), false)\n})","file":"old-value.test.js","skipped":false,"dir":"test"},{"name":"allows custom checks","suites":[],"updatePoint":{"line":12,"column":26},"line":12,"code":"test('allows custom checks', () => {\n  let old = new OldValue('calc', '-o-calc', 'calc', /calc/)\n  is(old.check('1px calc(1px)'), true)\n})","file":"old-value.test.js","skipped":false,"dir":"test"},{"name":"works with other PostCSS plugins","suites":[],"updatePoint":{"line":7,"column":38},"line":7,"code":"test('works with other PostCSS plugins', () => {\n  let plugin = () => {\n    return {\n      postcssPlugin: 'test',\n      Rule(rule) {\n        rule.selector = 'b'\n      },\n      AtRule: {\n        mixin: (atRule, { Declaration }) => {\n          atRule.replaceWith(\n            new Declaration({ prop: 'user-select', value: 'none' })\n          )\n        }\n      }\n    }\n  }\n  plugin.postcss = true\n\n  let result = postcss([\n    plugin(),\n    autoprefixer({ overrideBrowserslist: 'chrome 40' })\n  ]).process('a{ @mixin; }', {\n    from: 'a.css'\n  })\n\n  equal(result.css, 'b{ -webkit-user-select: none; user-select: none; }')\n})","file":"postcss.test.js","skipped":false,"dir":"test"},{"name":"registers hacks for subclasses","suites":[],"updatePoint":{"line":17,"column":36},"line":17,"code":"test('registers hacks for subclasses', () => {\n  class A extends Prefixer {}\n  class Hack extends A {}\n  Hack.names = ['a', 'b']\n\n  A.hack(Hack)\n\n  equal(A.hacks, { a: Hack, b: Hack })\n  type(Prefixer.hacks, 'undefined')\n})","file":"prefixer.test.js","skipped":false,"dir":"test"},{"name":"loads hacks","suites":[],"updatePoint":{"line":28,"column":17},"line":28,"code":"test('loads hacks', () => {\n  class A extends Prefixer {\n    constructor() {\n      super()\n      this.klass = 'a'\n    }\n  }\n  class Hack extends A {\n    constructor() {\n      super()\n      this.klass = 'hack'\n    }\n  }\n  A.hacks = { hacked: Hack }\n\n  equal(A.load('hacked').klass, 'hack')\n  equal(A.load('a').klass, 'a')\n})","file":"prefixer.test.js","skipped":false,"dir":"test"},{"name":"cleans custom properties","suites":[],"updatePoint":{"line":47,"column":30},"line":47,"code":"test('cleans custom properties', () => {\n  let rule = css.first.first\n  rule._autoprefixerPrefix = '-ms-'\n  rule._autoprefixerValues = { '-ms-': 1 }\n\n  let cloned = Prefixer.clone(rule, { selector: 'from' })\n  equal(cloned.selector, 'from')\n\n  type(cloned._autoprefixerPrefix, 'undefined')\n  type(cloned._autoprefixerValues, 'undefined')\n})","file":"prefixer.test.js","skipped":false,"dir":"test"},{"name":"fixed declaration between","suites":[],"updatePoint":{"line":59,"column":31},"line":59,"code":"test('fixed declaration between', () => {\n  let parsed = parse('a { color : black }')\n  let cloned = Prefixer.clone(parsed.first.first)\n  equal(cloned.raws.between, ' : ')\n})","file":"prefixer.test.js","skipped":false,"dir":"test"},{"name":"works with root node","suites":[],"updatePoint":{"line":65,"column":26},"line":65,"code":"test('works with root node', () => {\n  is(prefix.parentPrefix(css), false)\n})","file":"prefixer.test.js","skipped":false,"dir":"test"},{"name":"finds in at-rules","suites":[],"updatePoint":{"line":69,"column":23},"line":69,"code":"test('finds in at-rules', () => {\n  equal(prefix.parentPrefix(css.first), '-ms-')\n})","file":"prefixer.test.js","skipped":false,"dir":"test"},{"name":"finds in selectors","suites":[],"updatePoint":{"line":73,"column":24},"line":73,"code":"test('finds in selectors', () => {\n  equal(prefix.parentPrefix(css.nodes[1]), '-moz-')\n})","file":"prefixer.test.js","skipped":false,"dir":"test"},{"name":"finds in parents","suites":[],"updatePoint":{"line":77,"column":22},"line":77,"code":"test('finds in parents', () => {\n  let decl = css.first.first\n  equal(prefix.parentPrefix(decl), '-ms-')\n  is(prefix.parentPrefix(css.nodes[2]), false)\n})","file":"prefixer.test.js","skipped":false,"dir":"test"},{"name":"caches prefix","suites":[],"updatePoint":{"line":83,"column":19},"line":83,"code":"test('caches prefix', () => {\n  prefix.parentPrefix(css.first)\n  equal(css.first._autoprefixerPrefix, '-ms-')\n\n  css.first._autoprefixerPrefix = false\n  is(prefix.parentPrefix(css.first), false)\n})","file":"prefixer.test.js","skipped":false,"dir":"test"},{"name":"finds only browsers prefixes","suites":[],"updatePoint":{"line":91,"column":34},"line":91,"code":"test('finds only browsers prefixes', () => {\n  is(prefix.parentPrefix(css.nodes[2]), false)\n})","file":"prefixer.test.js","skipped":false,"dir":"test"},{"name":"works with selector contained --","suites":[],"updatePoint":{"line":95,"column":38},"line":95,"code":"test('works with selector contained --', () => {\n  let parsed = parse(':--a { color: black }')\n  is(prefix.parentPrefix(parsed.first.first), false)\n})","file":"prefixer.test.js","skipped":false,"dir":"test"},{"name":"selects necessary prefixes","suites":[],"updatePoint":{"line":48,"column":32},"line":48,"code":"test('selects necessary prefixes', () => {\n  equal(fill.select(data.prefixes), {\n    add: {\n      a: ['-moz-'],\n      b: ['-ms- new'],\n      c: ['-ms-']\n    },\n    remove: {\n      a: ['-webkit-', '-ms-', '-moz- old'],\n      b: ['-ms-', '-moz-', '-webkit-'],\n      c: ['-moz-']\n    }\n  })\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"preprocesses prefixes add data","suites":[],"updatePoint":{"line":63,"column":36},"line":63,"code":"test('preprocesses prefixes add data', () => {\n  equal(fill.add, {\n    'selectors': [cSel],\n    'a': aProp,\n    '*': {\n      values: [bVal]\n    },\n    '@supports': new Supports(Prefixes, fill)\n  })\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"preprocesses prefixes remove data","suites":[],"updatePoint":{"line":74,"column":39},"line":74,"code":"test('preprocesses prefixes remove data', () => {\n  equal(\n    JSON.stringify(fill.remove),\n    JSON.stringify({\n      'selectors': [cSel.old('-moz-')],\n      '-webkit-a': {\n        remove: true\n      },\n      '-ms-a': {\n        remove: true\n      },\n      '-moz- olda': {\n        remove: true\n      },\n      'a': {\n        values: [old('-ms-b'), old('-moz-b'), old('-webkit-b')]\n      },\n      '*': {\n        values: [old('-ms-b'), old('-moz-b'), old('-webkit-b')]\n      }\n    })\n  )\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"returns itself is no browsers are selected","suites":[],"updatePoint":{"line":98,"column":48},"line":98,"code":"test('returns itself is no browsers are selected', () => {\n  equal(empty.cleaner(), empty)\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"returns Prefixes with empty browsers","suites":[],"updatePoint":{"line":102,"column":42},"line":102,"code":"test('returns Prefixes with empty browsers', () => {\n  let cleaner = new Prefixes(data.prefixes, new Browsers(data.browsers, []))\n  equal(Object.keys(fill.cleaner().add).length, 2)\n  equal(fill.cleaner().remove, cleaner.remove)\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"loads declarations by property","suites":[],"updatePoint":{"line":108,"column":36},"line":108,"code":"test('loads declarations by property', () => {\n  equal(empty.decl('a'), new Declaration('a'))\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"caches values","suites":[],"updatePoint":{"line":112,"column":19},"line":112,"code":"test('caches values', () => {\n  equal(empty.decl('a'), empty.decl('a'))\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"returns unprefixed version","suites":[],"updatePoint":{"line":116,"column":32},"line":116,"code":"test('returns unprefixed version', () => {\n  equal(empty.unprefixed('-moz-a'), 'a')\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"adds prefix","suites":[],"updatePoint":{"line":120,"column":17},"line":120,"code":"test('adds prefix', () => {\n  equal(empty.prefixed('a', '-ms-'), '-ms-a')\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"changes prefix","suites":[],"updatePoint":{"line":124,"column":20},"line":124,"code":"test('changes prefix', () => {\n  equal(empty.prefixed('a', '-ms-'), '-ms-a')\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"returns values for this and all properties","suites":[],"updatePoint":{"line":128,"column":48},"line":128,"code":"test('returns values for this and all properties', () => {\n  equal(fill.values('add', 'a'), [bVal])\n  equal(fill.values('remove', 'a'), [\n    old('-ms-b'),\n    old('-moz-b'),\n    old('-webkit-b')\n  ])\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"checks prefix group","suites":[],"updatePoint":{"line":137,"column":25},"line":137,"code":"test('checks prefix group', () => {\n  let css = parse('a { -ms-a: 1; -o-a: 1; a: 1; b: 2 }')\n  let props = []\n\n  empty.group(css.first.first).down(i => props.push(i.prop))\n  equal(props, ['-o-a', 'a'])\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"checks prefix groups","suites":[],"updatePoint":{"line":145,"column":26},"line":145,"code":"test('checks prefix groups', () => {\n  let css = parse('a { -ms-a: 1; -o-a: 1; ' + 'a: -o-calc(1); a: 1; a: 2 }')\n  let props = []\n\n  empty.group(css.first.first).down(i => props.push(i.prop))\n  equal(props, ['-o-a', 'a', 'a'])\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"returns check decls inside group","suites":[],"updatePoint":{"line":153,"column":38},"line":153,"code":"test('returns check decls inside group', () => {\n  let css = parse('a { -moz-a: 1; -ms-a: 1; -o-a: 1; a: 1 }')\n  let decl = css.first.first\n\n  is(\n    empty.group(decl).down(i => i.prop === '-o-a'),\n    true\n  )\n  is(\n    empty.group(decl).down(i => i.prop === '-o-b'),\n    false\n  )\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"checks prefix group","suites":[],"updatePoint":{"line":167,"column":25},"line":167,"code":"test('checks prefix group', () => {\n  let css = parse('a { b: 2; -ms-a: 1; -o-a: 1; a: 1 }')\n  let props = []\n\n  empty.group(css.first.nodes[3]).up(i => props.push(i.prop))\n  equal(props, ['-o-a', '-ms-a'])\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"checks prefix groups","suites":[],"updatePoint":{"line":175,"column":26},"line":175,"code":"test('checks prefix groups', () => {\n  let css = parse('a { a: 2; -ms-a: 1; ' + '-o-a: 1; a: -o-calc(1); a: 1  }')\n  let props = []\n\n  empty.group(css.first.nodes[4]).up(i => props.push(i.prop))\n  equal(props, ['a', '-o-a', '-ms-a'])\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"returns check decls inside group","suites":[],"updatePoint":{"line":183,"column":38},"line":183,"code":"test('returns check decls inside group', () => {\n  let css = parse('a { -moz-a: 1; -ms-a: 1; -o-a: 1; a: 1 }')\n  let decl = css.first.nodes[3]\n\n  is(\n    empty.group(decl).up(i => i.prop === '-ms-a'),\n    true\n  )\n  is(\n    empty.group(decl).up(i => i.prop === '-ms-b'),\n    false\n  )\n})","file":"prefixes.test.js","skipped":false,"dir":"test"},{"name":"adds prefix after non-letters symbols","suites":[],"updatePoint":{"line":13,"column":43},"line":13,"code":"test('adds prefix after non-letters symbols', () => {\n  equal(selector.prefixed('-moz-'), '::-moz-selection')\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"creates regexp for prefix","suites":[],"updatePoint":{"line":17,"column":31},"line":17,"code":"test('creates regexp for prefix', () => {\n  let regexp = selector.regexp('-moz-')\n  is(regexp.test('::-moz-selection'), true)\n  is(regexp.test('::selection'), false)\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"creates regexp without prefix","suites":[],"updatePoint":{"line":23,"column":35},"line":23,"code":"test('creates regexp without prefix', () => {\n  let regexp = selector.regexp()\n  is(regexp.test('::-moz-selection'), false)\n  is(regexp.test('::selection'), true)\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"checks rule selectors","suites":[],"updatePoint":{"line":29,"column":27},"line":29,"code":"test('checks rule selectors', () => {\n  let css = parse(\n    'body .selection {}, ' + ':::selection {}, body ::selection {}'\n  )\n  is(selector.check(css.nodes[0]), false)\n  is(selector.check(css.nodes[1]), false)\n  is(selector.check(css.nodes[2]), true)\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"grouping rule gets correct _autoprefixerPrefixeds property","suites":[],"updatePoint":{"line":38,"column":64},"line":38,"code":"test('grouping rule gets correct _autoprefixerPrefixeds property', () => {\n  let css = parse('.c::selection, .d:read-only {}')\n  let rSel = new Selector(':read-only', ['-moz-'])\n  selector.prefixeds(css.first)\n  rSel.prefixeds(css.first)\n  equal(css.first._autoprefixerPrefixeds, {\n    '::selection': {\n      '-webkit-': '.c::-webkit-selection',\n      '-moz-': '.c::-moz-selection',\n      '-ms-': '.c::-ms-selection',\n      '-o-': '.c::-o-selection'\n    },\n    ':read-only': {\n      '-webkit-': '.d:-webkit-read-only',\n      '-moz-': '.d:-moz-read-only',\n      '-ms-': '.d:-ms-read-only',\n      '-o-': '.d:-o-read-only'\n    }\n  })\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"returns all available prefixed selectors","suites":[],"updatePoint":{"line":59,"column":46},"line":59,"code":"test('returns all available prefixed selectors', () => {\n  let css = parse('::selection {}')\n  equal(selector.prefixeds(css.first), {\n    '::selection': {\n      '-webkit-': '::-webkit-selection',\n      '-moz-': '::-moz-selection',\n      '-ms-': '::-ms-selection',\n      '-o-': '::-o-selection'\n    }\n  })\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"returns false on first element","suites":[],"updatePoint":{"line":71,"column":36},"line":71,"code":"test('returns false on first element', () => {\n  let css = parse('::selection {}')\n  is(selector.already(css.first, prefixeds, '-moz-'), false)\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"stops on another type","suites":[],"updatePoint":{"line":76,"column":27},"line":76,"code":"test('stops on another type', () => {\n  let css = parse('::-moz-selection {} ' + '@keyframes anim {} ::selection {}')\n  is(selector.already(css.nodes[2], prefixeds, '-moz-'), false)\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"stops on another selector","suites":[],"updatePoint":{"line":81,"column":31},"line":81,"code":"test('stops on another selector', () => {\n  let css = parse('::-moz-selection {} a {} ::selection {}')\n  is(selector.already(css.nodes[2], prefixeds, '-moz-'), false)\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"finds prefixed even if unknown prefix is between","suites":[],"updatePoint":{"line":86,"column":54},"line":86,"code":"test('finds prefixed even if unknown prefix is between', () => {\n  let css = parse('::-moz-selection {} ' + '::-o-selection {} ::selection {}')\n  is(selector.already(css.nodes[2], prefixeds, '-moz-'), true)\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"adds prefix to selectors","suites":[],"updatePoint":{"line":91,"column":30},"line":91,"code":"test('adds prefix to selectors', () => {\n  equal(\n    selector.replace('body ::selection, input::selection, a', '-ms-'),\n    'body ::-ms-selection, input::-ms-selection, a'\n  )\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"adds prefixes","suites":[],"updatePoint":{"line":98,"column":19},"line":98,"code":"test('adds prefixes', () => {\n  let css = parse('b ::-moz-selection{} b ::selection{}')\n  selector.process(css.nodes[1])\n  equal(\n    css.toString(),\n    'b ::-moz-selection{} b ::-ms-selection{} b ::selection{}'\n  )\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"checks parents prefix","suites":[],"updatePoint":{"line":107,"column":27},"line":107,"code":"test('checks parents prefix', () => {\n  let css = parse('@-moz-page{ ::selection{} }')\n  selector.process(css.first.first)\n  equal(css.toString(), '@-moz-page{ ::-moz-selection{} ::selection{} }')\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"returns object to find old selector","suites":[],"updatePoint":{"line":113,"column":41},"line":113,"code":"test('returns object to find old selector', () => {\n  let old = selector.old('-moz-')\n  equal(old.unprefixed, '::selection')\n  equal(old.prefix, '-moz-')\n})","file":"selector.test.js","skipped":false,"dir":"test"},{"name":"splits property name and value","suites":[],"updatePoint":{"line":42,"column":36},"line":42,"code":"test('splits property name and value', () => {\n  equal(supports.parse('color:black'), ['color', 'black'])\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"cleans spaces","suites":[],"updatePoint":{"line":46,"column":19},"line":46,"code":"test('cleans spaces', () => {\n  equal(supports.parse(' color : black '), ['color', 'black'])\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"parses everything","suites":[],"updatePoint":{"line":50,"column":23},"line":50,"code":"test('parses everything', () => {\n  equal(supports.parse('color'), ['color', ''])\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"returns virtual rule","suites":[],"updatePoint":{"line":54,"column":26},"line":54,"code":"test('returns virtual rule', () => {\n  let decl = supports.virtual('color: black')\n  equal(decl.type, 'rule')\n  equal(decl.toString(), 'a{color: black}')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"works with broken CSS","suites":[],"updatePoint":{"line":60,"column":27},"line":60,"code":"test('works with broken CSS', () => {\n  let decl = supports.virtual('color black')\n  equal(decl.type, 'rule')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"returns decls with prefixed property","suites":[],"updatePoint":{"line":65,"column":42},"line":65,"code":"test('returns decls with prefixed property', () => {\n  let decls = supports.prefixed('a: one')\n\n  equal(decls.length, 2)\n  equal(decls[0].toString(), '-moz-a: one')\n  equal(decls[1].toString(), 'a: one')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"returns decls with prefixed value","suites":[],"updatePoint":{"line":73,"column":39},"line":73,"code":"test('returns decls with prefixed value', () => {\n  let decls = supports.prefixed('c: b')\n\n  equal(decls.length, 2)\n  equal(decls[0].toString(), 'c: -moz-b')\n  equal(decls[1].toString(), 'c: b')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"reduces empty string","suites":[],"updatePoint":{"line":81,"column":26},"line":81,"code":"test('reduces empty string', () => {\n  equal(supports.normalize([['', ['a'], '']]), [[['a']]])\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"reduces declaration to string","suites":[],"updatePoint":{"line":85,"column":35},"line":85,"code":"test('reduces declaration to string', () => {\n  equal(supports.normalize(['a: b', ['1']]), ['a: b(1)'])\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"reduces wrapped declaration to string","suites":[],"updatePoint":{"line":89,"column":43},"line":89,"code":"test('reduces wrapped declaration to string', () => {\n  equal(supports.normalize(['', ['a: b', ['1']], '']), [['a: b(1)']])\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"remove prefixed properties","suites":[],"updatePoint":{"line":93,"column":32},"line":93,"code":"test('remove prefixed properties', () => {\n  equal(rm('(-moz-a: 1) or (a: 1)'), '(a: 1)')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"remove prefixed properties inside","suites":[],"updatePoint":{"line":97,"column":39},"line":97,"code":"test('remove prefixed properties inside', () => {\n  equal(rm('(((-moz-a: 1) or (a: 1)))'), '(((a: 1)))')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"remove prefixed values","suites":[],"updatePoint":{"line":101,"column":28},"line":101,"code":"test('remove prefixed values', () => {\n  equal(rm('(c: -moz-b) or (c: -b-)'), '(c: -b-)')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"keeps and-conditions","suites":[],"updatePoint":{"line":105,"column":26},"line":105,"code":"test('keeps and-conditions', () => {\n  equal(rm('(-moz-a: 1) and (a: 1)'), '(-moz-a: 1) and (a: 1)')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"keeps not-conditions","suites":[],"updatePoint":{"line":109,"column":26},"line":109,"code":"test('keeps not-conditions', () => {\n  equal(rm('not (-moz-a: 1) or (a: 1)'), 'not (-moz-a: 1) or (a: 1)')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"keeps hacks","suites":[],"updatePoint":{"line":113,"column":17},"line":113,"code":"test('keeps hacks', () => {\n  equal(rm('(-moz-a: 1) or (b: 2)'), '(-moz-a: 1) or (b: 2)')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"uses only browsers with @supports support","suites":[],"updatePoint":{"line":117,"column":47},"line":117,"code":"test('uses only browsers with @supports support', () => {\n  equal(supports.prefixer().browsers.selected, ['firefox 22'])\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"normalize brackets","suites":[],"updatePoint":{"line":121,"column":24},"line":121,"code":"test('normalize brackets', () => {\n  equal(clean('((a: 1))'), '(a: 1)')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"normalize brackets recursively","suites":[],"updatePoint":{"line":125,"column":36},"line":125,"code":"test('normalize brackets recursively', () => {\n  equal(clean('(((a: 1) or ((b: 2))))'), '((a: 1) or (b: 2))')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"adds params with prefixed value","suites":[],"updatePoint":{"line":129,"column":37},"line":129,"code":"test('adds params with prefixed value', () => {\n  let rule = { params: '(c: b)' }\n  supports.process(rule)\n  equal(rule.params, '((c: -moz-b) or (c: b))')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"adds params with prefixed function","suites":[],"updatePoint":{"line":135,"column":40},"line":135,"code":"test('adds params with prefixed function', () => {\n  let rule = { params: '(c: b(1))' }\n  supports.process(rule)\n  equal(rule.params, '((c: -moz-b(1)) or (c: b(1)))')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"replaces params with prefixed property","suites":[],"updatePoint":{"line":141,"column":44},"line":141,"code":"test('replaces params with prefixed property', () => {\n  let rule = { params: '(color black) and not (a: 1)' }\n  supports.process(rule)\n  equal(rule.params, '(color black) and not ((-moz-a: 1) or (a: 1))')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"shouldn't throw errors","suites":[],"updatePoint":{"line":147,"column":28},"line":147,"code":"test(\"shouldn't throw errors\", () => {\n  let rule = { params: 'not selector(:is(a, b))' }\n  supports.process(rule)\n  equal(rule.params, 'not selector(:is(a, b))')\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"shouldn't throw errors (2)","suites":[],"updatePoint":{"line":153,"column":32},"line":153,"code":"test(\"shouldn't throw errors (2)\", () => {\n  let rule = { params: ' (selector( :nth-child(1n of a, b) )) or (c: b(1)) ' }\n  supports.process(rule)\n  equal(\n    rule.params,\n    ' (selector( :nth-child(1n of a, b) )) or ((c: -moz-b(1)) or (c: b(1))) '\n  )\n})","file":"supports.test.js","skipped":false,"dir":"test"},{"name":"raises an error","suites":[],"updatePoint":{"line":6,"column":21},"line":6,"code":"test('raises an error', () => {\n  throws(() => {\n    utils.error('A')\n  }, 'A')\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"marks an error","suites":[],"updatePoint":{"line":12,"column":20},"line":12,"code":"test('marks an error', () => {\n  let error = null\n  try {\n    utils.error('A')\n  } catch (e) {\n    error = e\n  }\n\n  is(error.autoprefixer, true)\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"filters doubles in array","suites":[],"updatePoint":{"line":23,"column":30},"line":23,"code":"test('filters doubles in array', () => {\n  equal(utils.uniq(['1', '1', '2', '3', '3']), ['1', '2', '3'])\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"removes note","suites":[],"updatePoint":{"line":27,"column":18},"line":27,"code":"test('removes note', () => {\n  equal(utils.removeNote('-webkit- note'), '-webkit-')\n  equal(utils.removeNote('-webkit-'), '-webkit-')\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"escapes RegExp symbols","suites":[],"updatePoint":{"line":32,"column":28},"line":32,"code":"test('escapes RegExp symbols', () => {\n  equal(utils.escapeRegexp('^[()\\\\]'), '\\\\^\\\\[\\\\(\\\\)\\\\\\\\\\\\]')\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"generates RegExp that finds tokens in CSS values","suites":[],"updatePoint":{"line":36,"column":54},"line":36,"code":"test('generates RegExp that finds tokens in CSS values', () => {\n  let regexp = utils.regexp('foo')\n  function check(string) {\n    return string.match(regexp) !== null\n  }\n\n  is(check('foo'), true)\n  is(check('Foo'), true)\n  is(check('one, foo, two'), true)\n  is(check('one(),foo(),two()'), true)\n\n  equal('foo(), a, foo'.replace(regexp, '$1b$2'), 'bfoo(), a, bfoo')\n\n  is(check('foob'), false)\n  is(check('(foo)'), false)\n  is(check('-a-foo'), false)\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"escapes string if needed","suites":[],"updatePoint":{"line":54,"column":30},"line":54,"code":"test('escapes string if needed', () => {\n  let regexp = utils.regexp('(a|b)')\n  function check(string) {\n    return string.match(regexp) !== null\n  }\n\n  is(check('a'), false)\n  is(check('(a|b)'), true)\n\n  regexp = utils.regexp('(a|b)', false)\n  is(check('a'), true)\n  is(check('b'), true)\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"does save without changes","suites":[],"updatePoint":{"line":68,"column":31},"line":68,"code":"test('does save without changes', () => {\n  let list = utils.editList('a,\\nb, c', parsed => parsed)\n  equal(list, 'a,\\nb, c')\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"changes list","suites":[],"updatePoint":{"line":73,"column":18},"line":73,"code":"test('changes list', () => {\n  let list = utils.editList('a, b', (parsed, edit) => {\n    equal(parsed, ['a', 'b'])\n    equal(edit, [])\n    return ['1', '2']\n  })\n  equal(list, '1, 2')\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"saves comma","suites":[],"updatePoint":{"line":82,"column":17},"line":82,"code":"test('saves comma', () => {\n  let list = utils.editList('a,\\nb', () => ['1', '2'])\n  equal(list, '1,\\n2')\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"parse one value","suites":[],"updatePoint":{"line":87,"column":21},"line":87,"code":"test('parse one value', () => {\n  let list = utils.editList('1', parsed => [parsed[0], '2'])\n  equal(list, '1, 2')\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"splits simple selectors into an array","suites":[],"updatePoint":{"line":92,"column":43},"line":92,"code":"test('splits simple selectors into an array', () => {\n  let arr1 = utils.splitSelector('#foo.bar')\n  let arr2 = utils.splitSelector('.foo, .bar')\n  equal(arr1, [[['#foo', '.bar']]])\n  equal(arr2, [[['.foo']], [['.bar']]])\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"splits complex selectors into an array","suites":[],"updatePoint":{"line":99,"column":44},"line":99,"code":"test('splits complex selectors into an array', () => {\n  let arr = utils.splitSelector(\n    '#foo.bar .child-one.mod .child-two.mod, .baz, .hello'\n  )\n  equal(arr, [\n    [\n      ['#foo', '.bar'],\n      ['.child-one', '.mod'],\n      ['.child-two', '.mod']\n    ],\n    [['.baz']],\n    [['.hello']]\n  ])\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"detects numbers","suites":[],"updatePoint":{"line":114,"column":21},"line":114,"code":"test('detects numbers', () => {\n  equal(utils.isPureNumber(42), true)\n  equal(utils.isPureNumber('42'), true)\n  equal(utils.isPureNumber('autoprefixer'), false)\n  equal(utils.isPureNumber(''), false)\n  equal(utils.isPureNumber({}), false)\n  equal(utils.isPureNumber(undefined), false)\n  equal(utils.isPureNumber(true), false)\n})","file":"utils.test.js","skipped":false,"dir":"test"},{"name":"clones declaration","suites":[],"updatePoint":{"line":16,"column":24},"line":16,"code":"test('clones declaration', () => {\n  let css = parse('a { prop: v }')\n  let width = css.first.first\n\n  width._autoprefixerValues = { '-ms-': '-ms-v' }\n  Value.save(prefixes, width)\n\n  equal(css.toString(), 'a { prop: -ms-v; prop: v }')\n})","file":"value.test.js","skipped":false,"dir":"test"},{"name":"updates declaration with prefix","suites":[],"updatePoint":{"line":26,"column":37},"line":26,"code":"test('updates declaration with prefix', () => {\n  let css = parse('a { -ms-prop: v }')\n  let width = css.first.first\n\n  width._autoprefixerValues = { '-ms-': '-ms-v' }\n  Value.save(prefixes, width)\n\n  equal(css.toString(), 'a { -ms-prop: -ms-v }')\n})","file":"value.test.js","skipped":false,"dir":"test"},{"name":"ignores on another prefix property","suites":[],"updatePoint":{"line":36,"column":40},"line":36,"code":"test('ignores on another prefix property', () => {\n  let css = parse('a { -ms-prop: v; prop: v }')\n  let width = css.first.last\n\n  width._autoprefixerValues = { '-ms-': '-ms-v' }\n  Value.save(prefixes, width)\n\n  equal(css.toString(), 'a { -ms-prop: v; prop: v }')\n})","file":"value.test.js","skipped":false,"dir":"test"},{"name":"ignores prefixes without changes","suites":[],"updatePoint":{"line":46,"column":38},"line":46,"code":"test('ignores prefixes without changes', () => {\n  let css = parse('a { prop: v }')\n  let width = css.first.first\n\n  width._autoprefixerValues = { '-ms-': 'v' }\n  Value.save(prefixes, width)\n\n  equal(css.toString(), 'a { prop: v }')\n})","file":"value.test.js","skipped":false,"dir":"test"},{"name":"checks value in string","suites":[],"updatePoint":{"line":56,"column":28},"line":56,"code":"test('checks value in string', () => {\n  let css = parse(\n    'a { 0: calc(1px + 1em); ' +\n      '1: 1px calc(1px + 1em); ' +\n      '2: (calc(1px + 1em)); ' +\n      '3: -ms-calc; ' +\n      '4: calced; }'\n  )\n\n  is(calc.check(css.first.nodes[0]), true)\n  is(calc.check(css.first.nodes[1]), true)\n  is(calc.check(css.first.nodes[2]), true)\n\n  is(calc.check(css.first.nodes[3]), false)\n  is(calc.check(css.first.nodes[4]), false)\n})","file":"value.test.js","skipped":false,"dir":"test"},{"name":"check prefixed value","suites":[],"updatePoint":{"line":73,"column":26},"line":73,"code":"test('check prefixed value', () => {\n  equal(calc.old('-ms-'), new OldValue('calc', '-ms-calc'))\n})","file":"value.test.js","skipped":false,"dir":"test"},{"name":"adds prefix to value","suites":[],"updatePoint":{"line":77,"column":26},"line":77,"code":"test('adds prefix to value', () => {\n  equal(calc.replace('1px calc(1em)', '-ms-'), '1px -ms-calc(1em)')\n  equal(calc.replace('1px,calc(1em)', '-ms-'), '1px,-ms-calc(1em)')\n})","file":"value.test.js","skipped":false,"dir":"test"},{"name":"adds prefixes","suites":[],"updatePoint":{"line":82,"column":19},"line":82,"code":"test('adds prefixes', () => {\n  let css = parse('a { width: calc(1em) calc(1%) }')\n  let width = css.first.first\n\n  calc.process(width)\n  equal(width._autoprefixerValues, {\n    '-moz-': '-moz-calc(1em) -moz-calc(1%)',\n    '-ms-': '-ms-calc(1em) -ms-calc(1%)'\n  })\n})","file":"value.test.js","skipped":false,"dir":"test"},{"name":"checks parents prefix","suites":[],"updatePoint":{"line":93,"column":27},"line":93,"code":"test('checks parents prefix', () => {\n  let css = parse('::-moz-fullscreen a { width: calc(1%) }')\n  let width = css.first.first\n\n  calc.process(width)\n  equal(width._autoprefixerValues, { '-moz-': '-moz-calc(1%)' })\n})","file":"value.test.js","skipped":false,"dir":"test"},{"name":"checks property prefix","suites":[],"updatePoint":{"line":101,"column":28},"line":101,"code":"test('checks property prefix', () => {\n  let css = parse('a { -moz-width: calc(1%); -o-width: calc(1%) }')\n  let decls = css.first.nodes\n\n  calc.process(decls[0])\n  equal(decls[0]._autoprefixerValues, {\n    '-moz-': '-moz-calc(1%)'\n  })\n\n  calc.process(decls[1])\n  type(decls[1]._autoprefixerValues, 'undefined')\n})","file":"value.test.js","skipped":false,"dir":"test"}]}