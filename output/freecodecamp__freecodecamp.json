{
    "repo": "freeCodeCamp/freeCodeCamp",
    "url": "https://github.com/freeCodeCamp/freeCodeCamp",
    "branch": "main",
    "configs": [
        {
            "package": "@freecodecamp/curriculum",
            "lang": "js",
            "dir": "curriculum/test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@freecodecamp/freecodecamp",
            "lang": "js",
            "dir": "cypress",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "should return an object with comment keys and count values",
            "suites": [
                "extractCSSComments"
            ],
            "updatePoint": {
                "line": 54,
                "column": 64,
                "index": 760
            },
            "line": 54,
            "code": "  it('should return an object with comment keys and count values', () => {\n    const commentCounts = {\n      'comment 1': 2,\n      'comment 2': 1\n    };\n    expect(extractCSSComments(someHTMLWithCSS)).toEqual(commentCounts);\n  });",
            "file": "utils/extract-css-comments.test.js",
            "skipped": false,
            "dir": "curriculum/test"
        },
        {
            "name": "should catch comments outside of declarations",
            "suites": [
                "extractCSSComments"
            ],
            "updatePoint": {
                "line": 61,
                "column": 51,
                "index": 978
            },
            "line": 61,
            "code": "  it('should catch comments outside of declarations', () => {\n    const commentCounts = {\n      'comment 1': 2,\n      'comment 2': 1\n    };\n    expect(extractCSSComments(outsideDeclarations)).toEqual(commentCounts);\n  });",
            "file": "utils/extract-css-comments.test.js",
            "skipped": false,
            "dir": "curriculum/test"
        },
        {
            "name": "should catch comments inside of media queries",
            "suites": [
                "extractCSSComments"
            ],
            "updatePoint": {
                "line": 68,
                "column": 51,
                "index": 1200
            },
            "line": 68,
            "code": "  it('should catch comments inside of media queries', () => {\n    const commentCounts = {\n      'comment 1': 1,\n      'comment 2': 2\n    };\n    expect(extractCSSComments(mediaQuery)).toEqual(commentCounts);\n  });",
            "file": "utils/extract-css-comments.test.js",
            "skipped": false,
            "dir": "curriculum/test"
        },
        {
            "name": "should return an object with comment keys and count values",
            "suites": [
                "extractHTMLComments"
            ],
            "updatePoint": {
                "line": 13,
                "column": 64,
                "index": 281
            },
            "line": 13,
            "code": "  it('should return an object with comment keys and count values', () => {\n    const commentCounts = {\n      'a comment': 2,\n      'another comment': 1\n    };\n    expect(extractHTMLComments(someHTML)).toEqual(commentCounts);\n  });",
            "file": "utils/extract-html-comments.test.js",
            "skipped": false,
            "dir": "curriculum/test"
        },
        {
            "name": "should return an object with comment keys and count values",
            "suites": [
                "extractJSComments"
            ],
            "updatePoint": {
                "line": 17,
                "column": 64,
                "index": 348
            },
            "line": 17,
            "code": "  it('should return an object with comment keys and count values', () => {\n    const commentCounts = {\n      'single line comment': 2,\n      'a multiline comment': 1\n    };\n    expect(extractJSComments(someJS)).toEqual(commentCounts);\n  });",
            "file": "utils/extract-js-comments.test.js",
            "skipped": false,
            "dir": "curriculum/test"
        },
        {
            "name": "should throw an informative error if the JS is invalid",
            "suites": [
                "extractJSComments"
            ],
            "updatePoint": {
                "line": 24,
                "column": 60,
                "index": 585
            },
            "line": 24,
            "code": "  it('should throw an informative error if the JS is invalid', () => {\n    expect(() => extractJSComments(someInvalidJS)).toThrow(`extract-js-comments could not parse the code below, this challenge has invalid syntax:\n\n${someInvalidJS}\n`);\n  });",
            "file": "utils/extract-js-comments.test.js",
            "skipped": false,
            "dir": "curriculum/test"
        },
        {
            "name": "should return an object with comment keys and count values",
            "suites": [
                "extractJSXComments"
            ],
            "updatePoint": {
                "line": 19,
                "column": 64,
                "index": 360
            },
            "line": 19,
            "code": "  it('should return an object with comment keys and count values', () => {\n    const commentCounts = {\n      'JSX comment': 2,\n      'single line comment': 1,\n      'a multiline comment': 1\n    };\n    expect(extractJSXComments(someJSX)).toEqual(commentCounts);\n  });",
            "file": "utils/extract-jsx-comments.test.js",
            "skipped": false,
            "dir": "curriculum/test"
        },
        {
            "name": "should catch inline comments",
            "suites": [
                "extractScriptJSComments"
            ],
            "updatePoint": {
                "line": 52,
                "column": 34,
                "index": 561
            },
            "line": 52,
            "code": "  it('should catch inline comments', () => {\n    const commentCounts = {\n      'comment 1': 2,\n      'comment 2': 1\n    };\n    expect(extractScriptJSComments(inlineComments)).toEqual(commentCounts);\n  });",
            "file": "utils/extract-script-js-comments.test.js",
            "skipped": false,
            "dir": "curriculum/test"
        },
        {
            "name": "should catch multiline comments",
            "suites": [
                "extractScriptJSComments"
            ],
            "updatePoint": {
                "line": 59,
                "column": 37,
                "index": 769
            },
            "line": 59,
            "code": "  it('should catch multiline comments', () => {\n    const commentCounts = {\n      'comment 1': 2,\n      'comment 2': 1\n    };\n    expect(extractScriptJSComments(multilineComments)).toEqual(commentCounts);\n  });",
            "file": "utils/extract-script-js-comments.test.js",
            "skipped": false,
            "dir": "curriculum/test"
        },
        {
            "name": "should ignore comments outside script tags",
            "suites": [
                "extractScriptJSComments"
            ],
            "updatePoint": {
                "line": 66,
                "column": 48,
                "index": 991
            },
            "line": 66,
            "code": "  it('should ignore comments outside script tags', () => {\n    const commentCounts = {\n      'comment 1': 2,\n      'comment 2': 1\n    };\n    expect(extractScriptJSComments(outsideScript)).toEqual(commentCounts);\n  });",
            "file": "utils/extract-script-js-comments.test.js",
            "skipped": false,
            "dir": "curriculum/test"
        },
        {
            "name": "sorts challenges by superblock, block and challenge order",
            "suites": [
                "sortChallenges"
            ],
            "updatePoint": {
                "line": 187,
                "column": 63,
                "index": 3420
            },
            "line": 187,
            "code": "  it('sorts challenges by superblock, block and challenge order', () => {\n    const copyOfChallenges = [...challenges];\n    shuffle(copyOfChallenges);\n    const actualChallenges = sortChallenges(copyOfChallenges);\n    expect(actualChallenges).toEqual(challenges);\n  });",
            "file": "utils/sort-challenges.test.js",
            "skipped": false,
            "dir": "curriculum/test"
        },
        {
            "name": "does not change the original array",
            "suites": [
                "sortChallenges"
            ],
            "updatePoint": {
                "line": 193,
                "column": 40,
                "index": 3667
            },
            "line": 193,
            "code": "  it('does not change the original array', () => {\n    const copyOfChallenges = [...challenges];\n    copyOfChallenges[0] = {\n      name: 'JS - project 3 - step 4',\n      superOrder: 3,\n      order: 3,\n      challengeOrder: 4\n    };\n    const actualChallenges = sortChallenges(copyOfChallenges);\n    expect(actualChallenges[0]).not.toEqual(copyOfChallenges[0]);\n  });",
            "file": "utils/sort-challenges.test.js",
            "skipped": false,
            "dir": "curriculum/test"
        }
    ],
    "error": "Exclusive tests detected. `.only` call found in integration/learn/challenges/multifile.js:14\nRemove `.only` to restore test checks"
}