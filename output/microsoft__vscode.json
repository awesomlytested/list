{"repo":"microsoft/vscode","url":"https://github.com/microsoft/vscode","branch":"main","configs":[{"package":"code-oss-dev","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"code-oss-dev-smoke-test","lang":"js","dir":"test/smoke/test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"verifies opened editors are restored","suites":["Data Loss (insiders -> insiders)"],"updatePoint":{"line":25,"column":44,"index":1396},"line":25,"code":"    it('verifies opened editors are restored', async function () {\n      app = createApp({ ...this.defaultOptions,\n        logsPath: suiteLogsPath(this.defaultOptions, 'test_verifies_opened_editors_are_restored'),\n        crashesPath: suiteCrashPath(this.defaultOptions, 'test_verifies_opened_editors_are_restored')\n      });\n      await app.start(); // Open 3 editors\n\n      await app.workbench.quickaccess.openFile(join(app.workspacePathOrFolder, 'bin', 'www'));\n      await app.workbench.quickaccess.runCommand('View: Keep Editor');\n      await app.workbench.quickaccess.openFile(join(app.workspacePathOrFolder, 'app.js'));\n      await app.workbench.quickaccess.runCommand('View: Keep Editor');\n      await app.workbench.editors.newUntitledFile();\n      await app.restart(); // Verify 3 editors are open\n\n      await app.workbench.editors.selectTab('Untitled-1');\n      await app.workbench.editors.selectTab('app.js');\n      await app.workbench.editors.selectTab('www');\n      await app.stop();\n      app = undefined;\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"},{"name":"verifies editors can save and restore","suites":["Data Loss (insiders -> insiders)"],"updatePoint":{"line":45,"column":45,"index":2426},"line":45,"code":"    it('verifies editors can save and restore', async function () {\n      app = createApp({ ...this.defaultOptions,\n        logsPath: suiteLogsPath(this.defaultOptions, 'test_verifies_editors_can_save_and_restore'),\n        crashesPath: suiteCrashPath(this.defaultOptions, 'test_verifies_editors_can_save_and_restore')\n      });\n      await app.start();\n      const textToType = 'Hello, Code'; // open editor and type\n\n      await app.workbench.quickaccess.openFile(join(app.workspacePathOrFolder, 'app.js'));\n      await app.workbench.editor.waitForTypeInEditor('app.js', textToType);\n      await app.workbench.editors.waitForTab('app.js', true); // save\n\n      await app.workbench.editors.saveOpenedFile();\n      await app.workbench.editors.waitForTab('app.js', false); // restart\n\n      await app.restart(); // verify contents\n\n      await app.workbench.editor.waitForEditorContents('app.js', contents => contents.indexOf(textToType) > -1);\n      await app.stop();\n      app = undefined;\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"},{"name":"verifies that \"hot exit\" works for dirty files (without delay)","suites":["Data Loss (insiders -> insiders)"],"updatePoint":{"line":66,"column":70,"index":3450},"line":66,"code":"    it('verifies that \"hot exit\" works for dirty files (without delay)', function () {\n      return testHotExit.call(this, 'test_verifies_that_hot_exit_works_for_dirty_files_without_delay', undefined);\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"},{"name":"verifies that \"hot exit\" works for dirty files (with delay)","suites":["Data Loss (insiders -> insiders)"],"updatePoint":{"line":69,"column":67,"index":3657},"line":69,"code":"    it('verifies that \"hot exit\" works for dirty files (with delay)', function () {\n      return testHotExit.call(this, 'test_verifies_that_hot_exit_works_for_dirty_files_with_delay', 2000);\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"},{"name":"verifies that auto save triggers on shutdown","suites":["Data Loss (insiders -> insiders)"],"updatePoint":{"line":72,"column":52,"index":3841},"line":72,"code":"    it('verifies that auto save triggers on shutdown', function () {\n      return testHotExit.call(this, 'test_verifies_that_auto_save_triggers_on_shutdown', undefined, true);\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"},{"name":"verifies opened editors are restored","suites":["Data Loss (stable -> insiders)"],"updatePoint":{"line":132,"column":44,"index":6617},"line":132,"code":"    it('verifies opened editors are restored', async function () {\n      const stableCodePath = ensureStableCode();\n\n      if (!stableCodePath) {\n        this.skip();\n      } // macOS: the first launch of stable Code will trigger\n      // additional checks in the OS (notarization validation)\n      // so it can take a very long time. as such we install\n      // a retry handler to make sure we do not fail as a\n      // consequence.\n\n\n      if (process.platform === 'darwin') {\n        this.retries(2);\n      }\n\n      const userDataDir = getRandomUserDataDir(this.defaultOptions);\n      const logsPath = suiteLogsPath(this.defaultOptions, 'test_verifies_opened_editors_are_restored_from_stable');\n      const crashesPath = suiteCrashPath(this.defaultOptions, 'test_verifies_opened_editors_are_restored_from_stable');\n      const stableOptions = Object.assign({}, this.defaultOptions);\n      stableOptions.codePath = stableCodePath;\n      stableOptions.userDataDir = userDataDir;\n      stableOptions.quality = Quality.Stable;\n      stableOptions.logsPath = logsPath;\n      stableOptions.crashesPath = crashesPath;\n      stableApp = new Application(stableOptions);\n      await stableApp.start(); // Open 3 editors\n\n      await stableApp.workbench.quickaccess.openFile(join(stableApp.workspacePathOrFolder, 'bin', 'www'));\n      await stableApp.workbench.quickaccess.runCommand('View: Keep Editor');\n      await stableApp.workbench.quickaccess.openFile(join(stableApp.workspacePathOrFolder, 'app.js'));\n      await stableApp.workbench.quickaccess.runCommand('View: Keep Editor');\n      await stableApp.workbench.editors.newUntitledFile();\n      await stableApp.stop();\n      stableApp = undefined;\n      const insiderOptions = Object.assign({}, this.defaultOptions);\n      insiderOptions.userDataDir = userDataDir;\n      insiderOptions.logsPath = logsPath;\n      insiderOptions.crashesPath = crashesPath;\n      insidersApp = new Application(insiderOptions);\n      await insidersApp.start(); // Verify 3 editors are open\n\n      await insidersApp.workbench.editors.selectTab('Untitled-1');\n      await insidersApp.workbench.editors.selectTab('app.js');\n      await insidersApp.workbench.editors.selectTab('www');\n      await insidersApp.stop();\n      insidersApp = undefined;\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"},{"name":"verifies that \"hot exit\" works for dirty files (without delay)","suites":["Data Loss (stable -> insiders)"],"updatePoint":{"line":180,"column":70,"index":8923},"line":180,"code":"    it('verifies that \"hot exit\" works for dirty files (without delay)', async function () {\n      return testHotExit.call(this, `test_verifies_that_hot_exit_works_for_dirty_files_without_delay_from_stable`, undefined);\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"},{"name":"verifies that \"hot exit\" works for dirty files (with delay)","suites":["Data Loss (stable -> insiders)"],"updatePoint":{"line":183,"column":67,"index":9148},"line":183,"code":"    it('verifies that \"hot exit\" works for dirty files (with delay)', async function () {\n      return testHotExit.call(this, `test_verifies_that_hot_exit_works_for_dirty_files_with_delay_from_stable`, 2000);\n    });","file":"smoke/src/areas/workbench/data-loss.test.ts","skipped":false,"dir":"test"}]}