{"repo":"SBoudrias/Inquirer.js","url":"https://github.com/SBoudrias/Inquirer.js","branch":"master","configs":[{"package":"inquirer","lang":"js","dir":"packages/inquirer/test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should filter the user input","suites":["filter API"],"updatePoint":{"line":45,"column":38,"index":1032},"line":45,"code":"      it('should filter the user input', function (done) {\n        this.fixture.filter = function () {\n          return 'pass';\n        };\n\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        prompt.run().then(answer => {\n          expect(answer).to.equal('pass');\n          done();\n        });\n        this.rl.emit('line', '');\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow filter function to be asynchronous","suites":["filter API"],"updatePoint":{"line":57,"column":57,"index":1409},"line":57,"code":"      it('should allow filter function to be asynchronous', function (done) {\n        this.fixture.filter = function () {\n          const done = this.async();\n          setTimeout(() => {\n            done(null, 'pass');\n          }, 0);\n        };\n\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        prompt.run().then(answer => {\n          expect(answer).to.equal('pass');\n          done();\n        });\n        this.rl.emit('line', '');\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should handle errors produced in async filters","suites":["filter API"],"updatePoint":{"line":72,"column":56,"index":1875},"line":72,"code":"      it('should handle errors produced in async filters', function () {\n        let called = 0;\n        const {\n          rl\n        } = this;\n\n        this.fixture.filter = function () {\n          called++;\n          const cb = this.async();\n\n          if (called === 2) {\n            return cb(null, 'pass');\n          }\n\n          rl.emit('line');\n          return cb(new Error('fail'));\n        };\n\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        const promise = prompt.run();\n        this.rl.emit('line');\n        return promise;\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should pass previous answers to the prompt filter function","suites":["filter API"],"updatePoint":{"line":95,"column":68,"index":2456},"line":95,"code":"      it('should pass previous answers to the prompt filter function', () => {\n        const prompt = inquirer.createPromptModule();\n        const questions = [{\n          type: 'confirm',\n          name: 'q1',\n          message: 'message'\n        }, {\n          type: 'confirm',\n          name: 'q2',\n          message: 'message',\n\n          filter(input, answers) {\n            expect(answers.q1).to.equal(true);\n            return input;\n          },\n\n          default: false\n        }];\n        const promise = prompt(questions);\n        autosubmit(promise.ui);\n        return promise.then(answers => {\n          expect(answers.q1).to.equal(true);\n          expect(answers.q2).to.equal(false);\n        });\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should reject input if boolean false is returned","suites":["validate API"],"updatePoint":{"line":125,"column":58,"index":3233},"line":125,"code":"      it('should reject input if boolean false is returned', function () {\n        let called = 0;\n\n        this.fixture.validate = () => {\n          called++; // Make sure returning false won't continue\n\n          if (called === 2) {\n            return true;\n          }\n\n          this.rl.emit('line');\n          return false;\n        };\n\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        const promise = prompt.run();\n        this.rl.emit('line');\n        return promise;\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should reject input if a string is returned","suites":["validate API"],"updatePoint":{"line":144,"column":53,"index":3734},"line":144,"code":"      it('should reject input if a string is returned', function (done) {\n        const self = this;\n        let called = 0;\n        const errorMessage = 'uh oh, error!';\n\n        this.fixture.validate = function () {\n          called++; // Make sure returning false won't continue\n\n          if (called === 2) {\n            done();\n            return;\n          }\n\n          self.rl.emit('line');\n          return errorMessage;\n        };\n\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        prompt.run();\n        this.rl.emit('line');\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should reject input if a Promise is returned which rejects","suites":["validate API"],"updatePoint":{"line":165,"column":68,"index":4315},"line":165,"code":"      it('should reject input if a Promise is returned which rejects', function (done) {\n        const self = this;\n        let called = 0;\n        const errorMessage = 'uh oh, error!';\n\n        this.fixture.validate = function () {\n          called++; // Make sure returning false won't continue\n\n          if (called === 2) {\n            done();\n            return;\n          }\n\n          self.rl.emit('line');\n          return Promise.reject(errorMessage);\n        };\n\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        prompt.run();\n        this.rl.emit('line');\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should accept input if boolean true is returned","suites":["validate API"],"updatePoint":{"line":186,"column":57,"index":4901},"line":186,"code":"      it('should accept input if boolean true is returned', function () {\n        let called = 0;\n\n        this.fixture.validate = function () {\n          called++;\n          return true;\n        };\n\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        const promise = prompt.run().then(() => {\n          expect(called).to.equal(1);\n        });\n        this.rl.emit('line');\n        return promise;\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow validate function to be asynchronous","suites":["validate API"],"updatePoint":{"line":201,"column":59,"index":5330},"line":201,"code":"      it('should allow validate function to be asynchronous', function () {\n        const self = this;\n        let called = 0;\n\n        this.fixture.validate = function () {\n          const done = this.async();\n          setTimeout(() => {\n            called++; // Make sure returning false won't continue\n\n            if (called === 2) {\n              done(null, true);\n            } else {\n              self.rl.emit('line');\n            }\n\n            done(false);\n          }, 0);\n        };\n\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        const promise = prompt.run();\n        this.rl.emit('line');\n        return promise;\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow validate function to return a Promise","suites":["validate API"],"updatePoint":{"line":225,"column":60,"index":5993},"line":225,"code":"      it('should allow validate function to return a Promise', function () {\n        this.fixture.validate = function () {\n          return Promise.resolve(true);\n        };\n\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        const promise = prompt.run();\n        this.rl.emit('line');\n        return promise;\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should pass previous answers to the prompt validation function","suites":["validate API"],"updatePoint":{"line":235,"column":72,"index":6345},"line":235,"code":"      it('should pass previous answers to the prompt validation function', () => {\n        const prompt = inquirer.createPromptModule();\n        const questions = [{\n          type: 'confirm',\n          name: 'q1',\n          message: 'message'\n        }, {\n          type: 'confirm',\n          name: 'q2',\n          message: 'message',\n\n          validate(input, answers) {\n            expect(answers.q1).to.equal(true);\n            return true;\n          },\n\n          default: false\n        }];\n        const promise = prompt(questions);\n        autosubmit(promise.ui);\n        return promise.then(answers => {\n          expect(answers.q1).to.equal(true);\n          expect(answers.q2).to.equal(false);\n        });\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a default value","suites":["default API"],"updatePoint":{"line":265,"column":38,"index":7101},"line":265,"code":"      it('should allow a default value', function (done) {\n        this.fixture.default = 'pass';\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        prompt.run().then(answer => {\n          expect(this.rl.output.__raw__).to.contain('(pass)');\n          expect(answer).to.equal('pass');\n          done();\n        });\n        this.rl.emit('line', '');\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a falsy default value","suites":["default API"],"updatePoint":{"line":275,"column":44,"index":7486},"line":275,"code":"      it('should allow a falsy default value', function (done) {\n        this.fixture.default = 0;\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        prompt.run().then(answer => {\n          expect(this.rl.output.__raw__).to.contain('(0)');\n          expect(answer).to.equal(0);\n          done();\n        });\n        this.rl.emit('line', '');\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should print message on screen","suites":["message API"],"updatePoint":{"line":290,"column":40,"index":7918},"line":290,"code":"      it('should print message on screen', function () {\n        this.fixture.message = 'Foo bar bar foo bar';\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        prompt.run();\n        expect(this.rl.output.__raw__).to.contain(this.fixture.message);\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should default to name for message","suites":["message API"],"updatePoint":{"line":296,"column":44,"index":8201},"line":296,"code":"      it('should default to name for message', function () {\n        this.fixture.name = 'testfoobarbarfoobar';\n        delete this.fixture.message;\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        prompt.run();\n        expect(this.rl.output.__raw__).to.contain(this.fixture.name + ':');\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should print choices to screen","suites":["choices API"],"updatePoint":{"line":308,"column":40,"index":8581},"line":308,"code":"      it('should print choices to screen', function () {\n        const prompt = new this.Prompt(this.fixture, this.rl);\n        const {\n          choices\n        } = prompt.opt;\n        prompt.run();\n        choices.filter(inquirer.Separator.exclude).forEach(choice => {\n          expect(this.rl.output.__raw__).to.contain(choice.name);\n        });\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"`name` should throw","suites":["Missing value"],"updatePoint":{"line":323,"column":29,"index":9002},"line":323,"code":"      it('`name` should throw', function () {\n        expect(() => {\n          delete this.fixture.name;\n          return new this.Prompt(this.fixture, this.rl);\n        }).to.throw(/name/);\n      });","file":"specs/api.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should close and create a new readline instances each time it's called","suites":["inquirer.prompt"],"updatePoint":{"line":37,"column":76,"index":655},"line":37,"code":"  it(\"should close and create a new readline instances each time it's called\", function () {\n    const ctx = this;\n    const promise = this.prompt({\n      type: 'confirm',\n      name: 'q1',\n      message: 'message'\n    });\n    const rl1 = promise.ui.rl;\n    rl1.emit('line');\n    return promise.then(() => {\n      expect(rl1.close.called).to.equal(true);\n      expect(rl1.output.end.called).to.equal(true);\n      const promise2 = ctx.prompt({\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      });\n      const rl2 = promise2.ui.rl;\n      rl2.emit('line');\n      return promise2.then(() => {\n        expect(rl2.close.called).to.equal(true);\n        expect(rl2.output.end.called).to.equal(true);\n        expect(rl1).to.not.equal(rl2);\n      });\n    });\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should close readline instance on rejected promise","suites":["inquirer.prompt"],"updatePoint":{"line":63,"column":56,"index":1419},"line":63,"code":"  it('should close readline instance on rejected promise', function (done) {\n    this.prompt.registerPrompt('stub', function () {\n      this.run = () => Promise.reject(new Error('test error'));\n    });\n    const promise = this.prompt({\n      type: 'stub',\n      name: 'q1'\n    });\n    const rl1 = promise.ui.rl;\n    promise.catch(() => {\n      expect(rl1.close.called).to.equal(true);\n      expect(rl1.output.end.called).to.equal(true);\n      done();\n    });\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should take a prompts array and return answers","suites":["inquirer.prompt"],"updatePoint":{"line":78,"column":52,"index":1880},"line":78,"code":"  it('should take a prompts array and return answers', function () {\n    const prompts = [{\n      type: 'confirm',\n      name: 'q1',\n      message: 'message'\n    }, {\n      type: 'confirm',\n      name: 'q2',\n      message: 'message',\n      default: false\n    }];\n    const promise = this.prompt(prompts);\n    autosubmit(promise.ui);\n    return promise.then(answers => {\n      expect(answers.q1).to.equal(true);\n      expect(answers.q2).to.equal(false);\n    });\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should take a prompts nested object and return answers","suites":["inquirer.prompt"],"updatePoint":{"line":96,"column":60,"index":2355},"line":96,"code":"  it('should take a prompts nested object and return answers', async function () {\n    const prompts = {\n      q1: {\n        type: 'confirm',\n        message: 'message'\n      },\n      q2: {\n        type: 'input',\n        message: 'message',\n        default: 'Foo'\n      }\n    };\n    const promise = this.prompt(prompts);\n    autosubmit(promise.ui);\n    const {\n      q1,\n      q2\n    } = await promise;\n    expect(q1).to.equal(true);\n    expect(q2).to.equal('Foo');\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should take a prompts array with nested names","suites":["inquirer.prompt"],"updatePoint":{"line":117,"column":51,"index":2818},"line":117,"code":"  it('should take a prompts array with nested names', function () {\n    const prompts = [{\n      type: 'confirm',\n      name: 'foo.bar.q1',\n      message: 'message'\n    }, {\n      type: 'confirm',\n      name: 'foo.q2',\n      message: 'message',\n      default: false\n    }];\n    const promise = this.prompt(prompts);\n    autosubmit(promise.ui);\n    return promise.then(answers => {\n      expect(answers).to.deep.equal({\n        foo: {\n          bar: {\n            q1: true\n          },\n          q2: false\n        }\n      });\n    });\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should take a single prompt and return answer","suites":["inquirer.prompt"],"updatePoint":{"line":141,"column":51,"index":3357},"line":141,"code":"  it('should take a single prompt and return answer', function () {\n    const prompt = {\n      type: 'input',\n      name: 'q1',\n      message: 'message',\n      default: 'bar'\n    };\n    const promise = this.prompt(prompt);\n    promise.ui.rl.emit('line');\n    return promise.then(answers => {\n      expect(answers.q1).to.equal('bar');\n    });\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse `message` if passed as a function","suites":["inquirer.prompt"],"updatePoint":{"line":154,"column":52,"index":3706},"line":154,"code":"  it('should parse `message` if passed as a function', function () {\n    const stubMessage = 'foo';\n    this.prompt.registerPrompt('stub', function (params) {\n      this.opt = {\n        when() {\n          return true;\n        }\n\n      };\n      this.run = sinon.stub().returns(Promise.resolve());\n      expect(params.message).to.equal(stubMessage);\n    });\n\n    const msgFunc = function (answers) {\n      expect(answers.name1).to.equal('bar');\n      return stubMessage;\n    };\n\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'stub',\n      name: 'name',\n      message: msgFunc\n    }];\n    const promise = this.prompt(prompts);\n    promise.ui.rl.emit('line');\n    promise.ui.rl.emit('line');\n    return promise.then(() => {\n      // Ensure we're not overwriting original prompt values.\n      expect(prompts[1].message).to.equal(msgFunc);\n    });\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run asynchronous `message`","suites":["inquirer.prompt"],"updatePoint":{"line":190,"column":39,"index":4628},"line":190,"code":"  it('should run asynchronous `message`', function (done) {\n    const stubMessage = 'foo';\n    this.prompt.registerPrompt('stub', function (params) {\n      this.opt = {\n        when() {\n          return true;\n        }\n\n      };\n      this.run = sinon.stub().returns(Promise.resolve());\n      expect(params.message).to.equal(stubMessage);\n      done();\n    });\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'stub',\n      name: 'name',\n\n      message(answers) {\n        expect(answers.name1).to.equal('bar');\n        const goOn = this.async();\n        setTimeout(() => {\n          goOn(null, stubMessage);\n        }, 0);\n      }\n\n    }];\n    const promise = this.prompt(prompts);\n    promise.ui.rl.emit('line');\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse `default` if passed as a function","suites":["inquirer.prompt"],"updatePoint":{"line":224,"column":52,"index":5445},"line":224,"code":"  it('should parse `default` if passed as a function', function (done) {\n    const stubDefault = 'foo';\n    this.prompt.registerPrompt('stub', function (params) {\n      this.opt = {\n        when() {\n          return true;\n        }\n\n      };\n      this.run = sinon.stub().returns(Promise.resolve());\n      expect(params.default).to.equal(stubDefault);\n      done();\n    });\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'stub',\n      name: 'name',\n      message: 'message',\n\n      default(answers) {\n        expect(answers.name1).to.equal('bar');\n        return stubDefault;\n      }\n\n    }];\n    const promise = this.prompt(prompts);\n    promise.ui.rl.emit('line');\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run asynchronous `default`","suites":["inquirer.prompt"],"updatePoint":{"line":256,"column":39,"index":6191},"line":256,"code":"  it('should run asynchronous `default`', function () {\n    let goesInDefault = false;\n    const input2Default = 'foo';\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'input2',\n      name: 'q2',\n      message: 'message',\n\n      default(answers) {\n        goesInDefault = true;\n        expect(answers.name1).to.equal('bar');\n        const goOn = this.async();\n        setTimeout(() => {\n          goOn(null, input2Default);\n        }, 0);\n        setTimeout(() => {\n          promise.ui.rl.emit('line');\n        }, 10);\n      }\n\n    }];\n    const promise = this.prompt(prompts);\n    promise.ui.rl.emit('line');\n    return promise.then(answers => {\n      expect(goesInDefault).to.equal(true);\n      expect(answers.q2).to.equal(input2Default);\n    });\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should pass previous answers to the prompt constructor","suites":["inquirer.prompt"],"updatePoint":{"line":289,"column":60,"index":7053},"line":289,"code":"  it('should pass previous answers to the prompt constructor', function (done) {\n    this.prompt.registerPrompt('stub', function (params, rl, answers) {\n      this.run = sinon.stub().returns(Promise.resolve());\n      expect(answers.name1).to.equal('bar');\n      done();\n    });\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'stub',\n      name: 'name',\n      message: 'message'\n    }];\n    const promise = this.prompt(prompts);\n    promise.ui.rl.emit('line');\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse `choices` if passed as a function","suites":["inquirer.prompt"],"updatePoint":{"line":308,"column":52,"index":7597},"line":308,"code":"  it('should parse `choices` if passed as a function', function (done) {\n    const stubChoices = ['foo', 'bar'];\n    this.prompt.registerPrompt('stub', function (params) {\n      this.run = sinon.stub().returns(Promise.resolve());\n      this.opt = {\n        when() {\n          return true;\n        }\n\n      };\n      expect(params.choices).to.equal(stubChoices);\n      done();\n    });\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'stub',\n      name: 'name',\n      message: 'message',\n\n      choices(answers) {\n        expect(answers.name1).to.equal('bar');\n        return stubChoices;\n      }\n\n    }];\n    const promise = this.prompt(prompts);\n    promise.ui.rl.emit('line');\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should returns a promise","suites":["inquirer.prompt"],"updatePoint":{"line":340,"column":30,"index":8343},"line":340,"code":"  it('should returns a promise', function (done) {\n    const prompt = {\n      type: 'input',\n      name: 'q1',\n      message: 'message',\n      default: 'bar'\n    };\n    const promise = this.prompt(prompt);\n    promise.then(answers => {\n      expect(answers.q1).to.equal('bar');\n      done();\n    });\n    promise.ui.rl.emit('line');\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should expose the Reactive interface","suites":["inquirer.prompt"],"updatePoint":{"line":354,"column":42,"index":8693},"line":354,"code":"  it('should expose the Reactive interface', function (done) {\n    const prompts = [{\n      type: 'input',\n      name: 'name1',\n      message: 'message',\n      default: 'bar'\n    }, {\n      type: 'input',\n      name: 'name',\n      message: 'message',\n      default: 'doe'\n    }];\n    const promise = this.prompt(prompts);\n    const spy = sinon.spy();\n    promise.ui.process.subscribe(spy, () => {}, () => {\n      sinon.assert.calledWith(spy, {\n        name: 'name1',\n        answer: 'bar'\n      });\n      sinon.assert.calledWith(spy, {\n        name: 'name',\n        answer: 'doe'\n      });\n      done();\n    });\n    autosubmit(promise.ui);\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should expose the UI","suites":["inquirer.prompt"],"updatePoint":{"line":381,"column":26,"index":9323},"line":381,"code":"  it('should expose the UI', function (done) {\n    const promise = this.prompt([]);\n    expect(promise.ui.answers).to.be.an('object');\n    done();\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"takes an Observable as question","suites":["inquirer.prompt"],"updatePoint":{"line":386,"column":37,"index":9487},"line":386,"code":"  it('takes an Observable as question', function () {\n    const prompts = Observable.create(obs => {\n      obs.next({\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      });\n      setTimeout(() => {\n        obs.next({\n          type: 'confirm',\n          name: 'q2',\n          message: 'message',\n          default: false\n        });\n        obs.complete();\n        promise.ui.rl.emit('line');\n      }, 30);\n    });\n    const promise = this.prompt(prompts);\n    promise.ui.rl.emit('line');\n    return promise.then(answers => {\n      expect(answers.q1).to.equal(true);\n      expect(answers.q2).to.equal(false);\n    });\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should take a prompts array and answers and return answers","suites":["inquirer.prompt"],"updatePoint":{"line":411,"column":64,"index":10164},"line":411,"code":"  it('should take a prompts array and answers and return answers', function () {\n    const prompts = [{\n      type: 'confirm',\n      name: 'q1',\n      message: 'message'\n    }];\n    const answers = {\n      prefiled: true\n    };\n    const promise = this.prompt(prompts, answers);\n    autosubmit(promise.ui);\n    return promise.then(answers => {\n      expect(answers.prefiled).to.equal(true);\n      expect(answers.q1).to.equal(true);\n    });\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should provide answers in filter callback for lists","suites":["inquirer.prompt"],"updatePoint":{"line":427,"column":57,"index":10603},"line":427,"code":"  it('should provide answers in filter callback for lists', function (done) {\n    const filter = sinon.stub();\n    filter.returns('foo');\n    const prompts = [{\n      type: 'list',\n      name: 'q1',\n      default: 'foo',\n      choices: ['foo', 'bar'],\n      message: 'message',\n      filter\n    }];\n    const promise = this.prompt(prompts);\n    promise.ui.rl.emit('line');\n    promise.then(() => {\n      const spyCall = filter.getCall(0);\n      expect(spyCall.args[0]).to.equal('foo');\n      expect(spyCall.args[1]).to.be.an('object');\n      done();\n    });\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should pass current answers to `when`","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":448,"column":45,"index":11204},"line":448,"code":"    it('should pass current answers to `when`', function () {\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        name: 'q2',\n        message: 'message',\n\n        when(answers) {\n          expect(answers).to.be.an('object');\n          expect(answers.q1).to.equal(true);\n        }\n\n      }];\n      const promise = this.prompt(prompts);\n      autosubmit(promise.ui);\n      return promise;\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run prompt if `when` returns true","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":467,"column":48,"index":11666},"line":467,"code":"    it('should run prompt if `when` returns true', function () {\n      let goesInWhen = false;\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'input',\n        name: 'q2',\n        message: 'message',\n        default: 'bar-var',\n\n        when() {\n          goesInWhen = true;\n          return true;\n        }\n\n      }];\n      const promise = this.prompt(prompts);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(goesInWhen).to.equal(true);\n        expect(answers.q2).to.equal('bar-var');\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run prompt if `when` is true","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":492,"column":43,"index":12276},"line":492,"code":"    it('should run prompt if `when` is true', function () {\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'input',\n        name: 'q2',\n        message: 'message',\n        default: 'bar-var',\n        when: true\n      }];\n      const promise = this.prompt(prompts);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.q2).to.equal('bar-var');\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not run prompt if `when` returns false","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":510,"column":53,"index":12761},"line":510,"code":"    it('should not run prompt if `when` returns false', function () {\n      let goesInWhen = false;\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'confirm',\n        name: 'q2',\n        message: 'message',\n\n        when() {\n          goesInWhen = true;\n          return false;\n        }\n\n      }, {\n        type: 'input',\n        name: 'q3',\n        message: 'message',\n        default: 'foo'\n      }];\n      const promise = this.prompt(prompts);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(goesInWhen).to.equal(true);\n        expect(answers.q2).to.equal(undefined);\n        expect(answers.q3).to.equal('foo');\n        expect(answers.q1).to.equal(true);\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not run prompt if `when` is false","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":541,"column":48,"index":13543},"line":541,"code":"    it('should not run prompt if `when` is false', function () {\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'confirm',\n        name: 'q2',\n        message: 'message',\n        when: false\n      }, {\n        type: 'input',\n        name: 'q3',\n        message: 'message',\n        default: 'foo'\n      }];\n      const promise = this.prompt(prompts);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.q2).to.equal(undefined);\n        expect(answers.q3).to.equal('foo');\n        expect(answers.q1).to.equal(true);\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run asynchronous `when`","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":565,"column":38,"index":14180},"line":565,"code":"    it('should run asynchronous `when`', function () {\n      let goesInWhen = false;\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'input',\n        name: 'q2',\n        message: 'message',\n        default: 'foo-bar',\n\n        when() {\n          goesInWhen = true;\n          const goOn = this.async();\n          setTimeout(() => {\n            goOn(null, true);\n          }, 0);\n          setTimeout(() => {\n            promise.ui.rl.emit('line');\n          }, 10);\n        }\n\n      }];\n      const promise = this.prompt(prompts);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(goesInWhen).to.equal(true);\n        expect(answers.q2).to.equal('foo-bar');\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should get the value which set in `when` on returns false","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":596,"column":65,"index":14989},"line":596,"code":"    it('should get the value which set in `when` on returns false', function () {\n      const prompts = [{\n        name: 'q',\n        message: 'message',\n\n        when(answers) {\n          answers.q = 'foo';\n          return false;\n        }\n\n      }];\n      const promise = this.prompt(prompts);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.q).to.equal('foo');\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not run prompt if answer exists for question","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":613,"column":59,"index":15410},"line":613,"code":"    it('should not run prompt if answer exists for question', function () {\n      const throwFunc = function (step) {\n        throw new Error(`askAnswered Error ${step}`);\n      };\n\n      const prompts = [{\n        type: 'input',\n        name: 'prefiled',\n        when: throwFunc.bind(undefined, 'when'),\n        validate: throwFunc.bind(undefined, 'validate'),\n        transformer: throwFunc.bind(undefined, 'transformer'),\n        filter: throwFunc.bind(undefined, 'filter'),\n        message: 'message',\n        default: 'newValue'\n      }];\n      const answers = {\n        prefiled: 'prefiled'\n      };\n      const promise = this.prompt(prompts, answers);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.prefiled).to.equal('prefiled');\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not run prompt if nested answer exists for question","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":637,"column":66,"index":16218},"line":637,"code":"    it('should not run prompt if nested answer exists for question', function () {\n      const throwFunc = function (step) {\n        throw new Error(`askAnswered Error ${step}`);\n      };\n\n      const prompts = [{\n        type: 'input',\n        name: 'prefiled.nested',\n        when: throwFunc.bind(undefined, 'when'),\n        validate: throwFunc.bind(undefined, 'validate'),\n        transformer: throwFunc.bind(undefined, 'transformer'),\n        filter: throwFunc.bind(undefined, 'filter'),\n        message: 'message',\n        default: 'newValue'\n      }];\n      const answers = {\n        prefiled: {\n          nested: 'prefiled'\n        }\n      };\n      const promise = this.prompt(prompts, answers);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.prefiled.nested).to.equal('prefiled');\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run prompt if answer exists for question and askAnswered is set","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":663,"column":78,"index":17082},"line":663,"code":"    it('should run prompt if answer exists for question and askAnswered is set', function () {\n      const prompts = [{\n        askAnswered: true,\n        type: 'input',\n        name: 'prefiled',\n        message: 'message',\n        default: 'newValue'\n      }];\n      const answers = {\n        prefiled: 'prefiled'\n      };\n      const promise = this.prompt(prompts, answers);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.prefiled).to.equal('newValue');\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should run prompt if nested answer exists for question and askAnswered is set","suites":["inquirer.prompt","hierarchical mode (`when`)"],"updatePoint":{"line":680,"column":85,"index":17608},"line":680,"code":"    it('should run prompt if nested answer exists for question and askAnswered is set', function () {\n      const prompts = [{\n        askAnswered: true,\n        type: 'input',\n        name: 'prefiled.nested',\n        message: 'message',\n        default: 'newValue'\n      }];\n      const answers = {\n        prefiled: {\n          nested: 'prefiled'\n        }\n      };\n      const promise = this.prompt(prompts, answers);\n      autosubmit(promise.ui);\n      return promise.then(answers => {\n        expect(answers.prefiled.nested).to.equal('newValue');\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"register new prompt types","suites":["inquirer.prompt","#registerPrompt()"],"updatePoint":{"line":701,"column":33,"index":18172},"line":701,"code":"    it('register new prompt types', done => {\n      const questions = [{\n        type: 'foo',\n        message: 'something'\n      }];\n      inquirer.registerPrompt('foo', function (question, rl, answers) {\n        expect(question).to.eql(questions[0]);\n        expect(answers).to.eql({});\n        this.run = sinon.stub().returns(Promise.resolve());\n        done();\n      });\n      inquirer.prompt(questions);\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"overwrite default prompt types","suites":["inquirer.prompt","#registerPrompt()"],"updatePoint":{"line":714,"column":38,"index":18593},"line":714,"code":"    it('overwrite default prompt types', done => {\n      const questions = [{\n        type: 'confirm',\n        message: 'something'\n      }];\n      inquirer.registerPrompt('confirm', function () {\n        this.run = sinon.stub().returns(Promise.resolve());\n        done();\n      });\n      inquirer.prompt(questions);\n      inquirer.restoreDefaultPrompts();\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"restore default prompts","suites":["inquirer.prompt","#restoreDefaultPrompts()"],"updatePoint":{"line":728,"column":31,"index":19004},"line":728,"code":"    it('restore default prompts', () => {\n      const ConfirmPrompt = inquirer.prompt.prompts.confirm;\n      inquirer.registerPrompt('confirm', () => {});\n      inquirer.restoreDefaultPrompts();\n      expect(ConfirmPrompt).to.equal(inquirer.prompt.prompts.confirm);\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"does not throw exception if cli-width reports width of 0","suites":["inquirer.prompt","#restoreDefaultPrompts()"],"updatePoint":{"line":736,"column":62,"index":19374},"line":736,"code":"  it('does not throw exception if cli-width reports width of 0', () => {\n    const original = process.stdout.getWindowSize;\n\n    process.stdout.getWindowSize = function () {\n      return [0];\n    };\n\n    const prompt = inquirer.createPromptModule();\n    const prompts = [{\n      type: 'confirm',\n      name: 'q1',\n      message: 'message'\n    }];\n    const promise = prompt(prompts);\n    promise.ui.rl.emit('line');\n    return promise.then(answers => {\n      process.stdout.getWindowSize = original;\n      expect(answers.q1).to.equal(true);\n    });\n  });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Throw an exception when run in non-tty","suites":["inquirer.prompt","Non-TTY checks"],"updatePoint":{"line":765,"column":46,"index":20131},"line":765,"code":"    it('Throw an exception when run in non-tty', () => {\n      const prompt = inquirer.createPromptModule({\n        skipTTYChecks: false\n      });\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }];\n      const promise = prompt(prompts);\n      return promise.then(() => {\n        // Failure\n        expect(true).to.equal(false);\n      }).catch(error => {\n        expect(error.isTtyError).to.equal(true);\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Don't throw an exception when run in non-tty by default","suites":["inquirer.prompt","Non-TTY checks"],"updatePoint":{"line":782,"column":63,"index":20625},"line":782,"code":"    it(\"Don't throw an exception when run in non-tty by default\", done => {\n      const prompt = inquirer.createPromptModule();\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'confirm',\n        name: 'q2',\n        message: 'message'\n      }];\n      const promise = prompt(prompts);\n      autosubmit(promise.ui);\n      promise.then(() => {\n        done();\n      }).catch(error => {\n        console.log(error);\n        expect(error.isTtyError).to.equal(false);\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Don't throw an exception when run in non-tty and skipTTYChecks is true","suites":["inquirer.prompt","Non-TTY checks"],"updatePoint":{"line":802,"column":78,"index":21192},"line":802,"code":"    it(\"Don't throw an exception when run in non-tty and skipTTYChecks is true\", done => {\n      const prompt = inquirer.createPromptModule({\n        skipTTYChecks: true\n      });\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'confirm',\n        name: 'q2',\n        message: 'message'\n      }];\n      const promise = prompt(prompts);\n      autosubmit(promise.ui);\n      promise.then(() => {\n        done();\n      }).catch(error => {\n        console.log(error);\n        expect(error.isTtyError).to.equal(false);\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Don't throw an exception when run in non-tty and custom input is provided","suites":["inquirer.prompt","Non-TTY checks"],"updatePoint":{"line":824,"column":81,"index":21799},"line":824,"code":"    it(\"Don't throw an exception when run in non-tty and custom input is provided\", done => {\n      const prompt = inquirer.createPromptModule({\n        input: new stream.Readable()\n      });\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }, {\n        type: 'confirm',\n        name: 'q2',\n        message: 'message'\n      }];\n      const promise = prompt(prompts);\n      autosubmit(promise.ui);\n      promise.then(() => {\n        done();\n      }).catch(error => {\n        console.log(error);\n        expect(error.isTtyError).to.equal(false);\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Throw an exception when run in non-tty and custom input is provided with skipTTYChecks: false","suites":["inquirer.prompt","Non-TTY checks"],"updatePoint":{"line":846,"column":101,"index":22435},"line":846,"code":"    it('Throw an exception when run in non-tty and custom input is provided with skipTTYChecks: false', () => {\n      const prompt = inquirer.createPromptModule({\n        input: new stream.Readable(),\n        skipTTYChecks: false\n      });\n      const prompts = [{\n        type: 'confirm',\n        name: 'q1',\n        message: 'message'\n      }];\n      const promise = prompt(prompts);\n      return promise.then(() => {\n        // Failure\n        expect(true).to.equal(false);\n      }).catch(error => {\n        expect(error.isTtyError).to.equal(true);\n      });\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"No exception when using tty other than process.stdin","suites":["inquirer.prompt","Non-TTY checks"],"updatePoint":{"line":864,"column":60,"index":22964},"line":864,"code":"    it('No exception when using tty other than process.stdin', () => {\n      // Manually opens a new tty\n      if (ostype === 'Windows_NT' || process.env.GITHUB_ACTIONS) {\n        mocha.skip();\n      } else {\n        const input = new tty.ReadStream(fs.openSync('/dev/tty', 'r+')); // Uses manually opened tty as input instead of process.stdin\n\n        const prompt = inquirer.createPromptModule({\n          input,\n          skipTTYChecks: false\n        });\n        const prompts = [{\n          type: 'input',\n          name: 'q1',\n          default: 'foo',\n          message: 'message'\n        }];\n        const promise = prompt(prompts);\n        promise.ui.rl.emit('line'); // Release the input tty socket\n\n        input.unref();\n        return promise.then(answers => {\n          expect(answers).to.deep.equal({\n            q1: 'foo'\n          });\n        });\n      }\n    });","file":"specs/inquirer.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should normalize accept String as value","suites":["Choice object"],"updatePoint":{"line":10,"column":45,"index":237},"line":10,"code":"  it('should normalize accept String as value', () => {\n    const choice = new Choice('foo');\n    expect(choice.name).to.equal('foo');\n    expect(choice.value).to.equal('foo');\n  });","file":"specs/objects/choice.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use value|name as default if default property is missing","suites":["Choice object"],"updatePoint":{"line":15,"column":69,"index":444},"line":15,"code":"  it('should use value|name as default if default property is missing', () => {\n    const onlyName = new Choice({\n      name: 'foo'\n    });\n    const onlyVal = new Choice({\n      value: 'bar'\n    });\n    expect(onlyName.name).to.equal('foo');\n    expect(onlyName.value).to.equal('foo');\n    expect(onlyName.short).to.equal('foo');\n    expect(onlyVal.name).to.equal('bar');\n    expect(onlyVal.value).to.equal('bar');\n    expect(onlyVal.short).to.equal('bar');\n  });","file":"specs/objects/choice.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should keep extra keys","suites":["Choice object"],"updatePoint":{"line":29,"column":28,"index":868},"line":29,"code":"  it('should keep extra keys', () => {\n    const choice = new Choice({\n      name: 'foo',\n      extra: '1'\n    });\n    expect(choice.extra).to.equal('1');\n    expect(choice.name).to.equal('foo');\n    expect(choice.value).to.equal('foo');\n  });","file":"specs/objects/choice.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shouldn't process Separator object","suites":["Choice object"],"updatePoint":{"line":38,"column":40,"index":1124},"line":38,"code":"  it(\"shouldn't process Separator object\", () => {\n    const sep = new Choice(new Separator());\n    expect(sep).to.be.instanceOf(Separator);\n  });","file":"specs/objects/choice.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shouldn't process object with property type=separator","suites":["Choice object"],"updatePoint":{"line":42,"column":59,"index":1290},"line":42,"code":"  it(\"shouldn't process object with property type=separator\", () => {\n    const obj = {\n      type: 'separator'\n    };\n    const sep = new Choice(obj);\n    expect(sep).to.equal(obj);\n  });","file":"specs/objects/choice.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should create Choice object from array member","suites":["Choices collection"],"updatePoint":{"line":12,"column":51,"index":296},"line":12,"code":"  it('should create Choice object from array member', () => {\n    const choices = new Choices(['bar', {\n      name: 'foo'\n    }]);\n    expect(choices.getChoice(0)).to.be.instanceOf(Choice);\n    expect(choices.getChoice(1)).to.be.instanceOf(Choice);\n  });","file":"specs/objects/choices.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should support for number","suites":["Choices collection"],"updatePoint":{"line":19,"column":31,"index":531},"line":19,"code":"  it('should support for number', () => {\n    const choices = new Choices([1, 2, 3, 4]);\n    expect(choices.getChoice(0).value).to.equal(1);\n  });","file":"specs/objects/choices.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not process Separator object","suites":["Choices collection"],"updatePoint":{"line":23,"column":41,"index":688},"line":23,"code":"  it('should not process Separator object', () => {\n    const sep = new inquirer.Separator();\n    const choices = new Choices(['Bar', sep]);\n    expect(choices.get(0).name).to.equal('Bar');\n    expect(choices.get(1)).to.equal(sep);\n  });","file":"specs/objects/choices.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should provide access to length information","suites":["Choices collection"],"updatePoint":{"line":29,"column":49,"index":934},"line":29,"code":"  it('should provide access to length information', () => {\n    const choices = new Choices(['Bar', new inquirer.Separator(), 'foo']);\n    expect(choices.length).to.equal(3);\n    expect(choices.realLength).to.equal(2);\n    choices.length = 1;\n    expect(choices.length).to.equal(1);\n    expect(choices.get(1)).to.equal(undefined);\n    expect(() => {\n      choices.realLength = 0;\n    }).to.throw();\n  });","file":"specs/objects/choices.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow plucking choice content","suites":["Choices collection"],"updatePoint":{"line":40,"column":42,"index":1332},"line":40,"code":"  it('should allow plucking choice content', () => {\n    const choices = new Choices([{\n      name: 'n',\n      key: 'foo'\n    }, {\n      name: 'a',\n      key: 'lab'\n    }]);\n    expect(choices.pluck('key')).to.eql(['foo', 'lab']);\n  });","file":"specs/objects/choices.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow filtering value with where","suites":["Choices collection"],"updatePoint":{"line":50,"column":45,"index":1572},"line":50,"code":"  it('should allow filtering value with where', () => {\n    const choices = new Choices([{\n      name: 'n',\n      key: 'foo'\n    }, {\n      name: 'a',\n      key: 'lab'\n    }]);\n    expect(choices.where({\n      key: 'lab'\n    })).to.eql([{\n      name: 'a',\n      value: 'a',\n      short: 'a',\n      key: 'lab',\n      disabled: undefined\n    }]);\n  });","file":"specs/objects/choices.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should façade forEach","suites":["Choices collection"],"updatePoint":{"line":68,"column":27,"index":1905},"line":68,"code":"  it('should façade forEach', () => {\n    const raw = ['a', 'b', 'c'];\n    const choices = new Choices(raw);\n    choices.forEach((val, i) => {\n      expect(val.name).to.equal(raw[i]);\n    });\n  });","file":"specs/objects/choices.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should façade filter","suites":["Choices collection"],"updatePoint":{"line":75,"column":26,"index":2102},"line":75,"code":"  it('should façade filter', () => {\n    const choices = new Choices(['a', 'b', 'c']);\n    const filtered = choices.filter(val => val.name === 'a');\n    expect(filtered.length).to.equal(1);\n    expect(filtered[0].name).to.equal('a');\n  });","file":"specs/objects/choices.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should façade push and update the realChoices internally","suites":["Choices collection"],"updatePoint":{"line":81,"column":62,"index":2378},"line":81,"code":"  it('should façade push and update the realChoices internally', () => {\n    const choices = new Choices(['a', {\n      name: 'b',\n      disabled: true\n    }]);\n    choices.push('b', new inquirer.Separator());\n    expect(choices.length).to.equal(4);\n    expect(choices.realLength).to.equal(2);\n    expect(choices.getChoice(0)).to.be.instanceOf(Choice).and.have.property('name', 'a');\n    expect(choices.getChoice(1)).to.be.instanceOf(Choice).and.have.property('name', 'b');\n    expect(choices.get(1)).to.be.instanceOf(Choice).and.have.property('disabled', true);\n    expect(choices.get(3)).to.be.instanceOf(inquirer.Separator);\n  });","file":"specs/objects/choices.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should set a default","suites":["Separator constructor"],"updatePoint":{"line":12,"column":26,"index":264},"line":12,"code":"  it('should set a default', () => {\n    const sep = new Separator();\n    expect(stripAnsi(sep.toString())).to.equal('──────────────');\n  });","file":"specs/objects/separator.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should set user input as separator","suites":["Separator constructor"],"updatePoint":{"line":16,"column":40,"index":420},"line":16,"code":"  it('should set user input as separator', () => {\n    const sep = new Separator('foo bar');\n    expect(stripAnsi(sep.toString())).to.equal('foo bar');\n  });","file":"specs/objects/separator.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"instances should be stringified when appended to a string","suites":["Separator constructor"],"updatePoint":{"line":20,"column":63,"index":601},"line":20,"code":"  it('instances should be stringified when appended to a string', () => {\n    const sep = new Separator('foo bar');\n    expect(stripAnsi(String(sep))).to.equal('foo bar');\n  });","file":"specs/objects/separator.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should be exposed on Inquirer object","suites":["Separator constructor"],"updatePoint":{"line":24,"column":42,"index":758},"line":24,"code":"  it('should be exposed on Inquirer object', () => {\n    expect(Inquirer.Separator).to.equal(Separator);\n  });","file":"specs/objects/separator.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should expose a helper function to check for separator","suites":["Separator constructor"],"updatePoint":{"line":27,"column":60,"index":887},"line":27,"code":"  it('should expose a helper function to check for separator', () => {\n    expect(Separator.exclude({})).to.equal(true);\n    expect(Separator.exclude(new Separator())).to.equal(false);\n  });","file":"specs/objects/separator.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"give the type 'separator' to its object","suites":["Separator constructor"],"updatePoint":{"line":31,"column":45,"index":1063},"line":31,"code":"  it(\"give the type 'separator' to its object\", () => {\n    const sep = new Separator();\n    expect(sep.type).to.equal('separator');\n  });","file":"specs/objects/separator.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not point by reference to the entry `question` object","suites":["`base` prompt (e.g. prompt helpers)"],"updatePoint":{"line":17,"column":66,"index":427},"line":17,"code":"  it('should not point by reference to the entry `question` object', function () {\n    const question = {\n      message: 'foo bar',\n      name: 'name'\n    };\n    const base = new Base(question, this.rl);\n    expect(question).to.not.equal(base.opt);\n    expect(question.name).to.equal(base.opt.name);\n    expect(question.message).to.equal(base.opt.message);\n  });","file":"specs/prompts/base.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should return a single selected choice in an array","suites":["`checkbox` prompt"],"updatePoint":{"line":20,"column":56,"index":510},"line":20,"code":"  it('should return a single selected choice in an array', function (done) {\n    this.checkbox.run().then(answer => {\n      expect(answer).to.be.an('array');\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('choice 1');\n      done();\n    });\n    this.rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should return multiples selected choices in an array","suites":["`checkbox` prompt"],"updatePoint":{"line":32,"column":58,"index":881},"line":32,"code":"  it('should return multiples selected choices in an array', function (done) {\n    this.checkbox.run().then(answer => {\n      expect(answer).to.be.an('array');\n      expect(answer.length).to.equal(2);\n      expect(answer[0]).to.equal('choice 1');\n      expect(answer[1]).to.equal('choice 2');\n      done();\n    });\n    this.rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    this.rl.input.emit('keypress', null, {\n      name: 'down'\n    });\n    this.rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should check defaults choices","suites":["`checkbox` prompt"],"updatePoint":{"line":51,"column":35,"index":1415},"line":51,"code":"  it('should check defaults choices', function (done) {\n    this.fixture.choices = [{\n      name: '1',\n      checked: true\n    }, {\n      name: '2',\n      checked: false\n    }, {\n      name: '3',\n      checked: false\n    }];\n    this.checkbox = new Checkbox(this.fixture, this.rl);\n    this.checkbox.run().then(answer => {\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('1');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"provide an array of checked choice to validate","suites":["`checkbox` prompt"],"updatePoint":{"line":70,"column":52,"index":1889},"line":70,"code":"  it('provide an array of checked choice to validate', function () {\n    this.fixture.choices = [{\n      name: '1',\n      checked: true\n    }, {\n      name: '2',\n      checked: 1\n    }, {\n      name: '3',\n      checked: false\n    }];\n\n    this.fixture.validate = function (answer) {\n      expect(answer).to.eql(['1', '2']);\n      return true;\n    };\n\n    this.checkbox = new Checkbox(this.fixture, this.rl);\n    const promise = this.checkbox.run();\n    this.rl.emit('line');\n    return promise;\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should check defaults choices if given as array of values","suites":["`checkbox` prompt"],"updatePoint":{"line":92,"column":63,"index":2401},"line":92,"code":"  it('should check defaults choices if given as array of values', function (done) {\n    this.fixture.choices = [{\n      name: '1'\n    }, {\n      name: '2'\n    }, {\n      name: '3'\n    }];\n    this.fixture.default = ['1', '3'];\n    this.checkbox = new Checkbox(this.fixture, this.rl);\n    this.checkbox.run().then(answer => {\n      expect(answer.length).to.equal(2);\n      expect(answer[0]).to.equal('1');\n      expect(answer[1]).to.equal('3');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should toggle choice when hitting space","suites":["`checkbox` prompt"],"updatePoint":{"line":110,"column":45,"index":2881},"line":110,"code":"  it('should toggle choice when hitting space', function (done) {\n    this.checkbox.run().then(answer => {\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('choice 1');\n      done();\n    });\n    this.rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    this.rl.input.emit('keypress', null, {\n      name: 'down'\n    });\n    this.rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    this.rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for arrow navigation","suites":["`checkbox` prompt"],"updatePoint":{"line":130,"column":39,"index":3403},"line":130,"code":"  it('should allow for arrow navigation', function (done) {\n    this.checkbox.run().then(answer => {\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('choice 2');\n      done();\n    });\n    this.rl.input.emit('keypress', null, {\n      name: 'down'\n    });\n    this.rl.input.emit('keypress', null, {\n      name: 'down'\n    });\n    this.rl.input.emit('keypress', null, {\n      name: 'up'\n    });\n    this.rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for vi-style navigation","suites":["`checkbox` prompt"],"updatePoint":{"line":150,"column":42,"index":3926},"line":150,"code":"  it('should allow for vi-style navigation', function (done) {\n    this.checkbox.run().then(answer => {\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('choice 2');\n      done();\n    });\n    this.rl.input.emit('keypress', 'j', {\n      name: 'j'\n    });\n    this.rl.input.emit('keypress', 'j', {\n      name: 'j'\n    });\n    this.rl.input.emit('keypress', 'k', {\n      name: 'k'\n    });\n    this.rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for emacs-style navigation","suites":["`checkbox` prompt"],"updatePoint":{"line":170,"column":45,"index":4442},"line":170,"code":"  it('should allow for emacs-style navigation', function (done) {\n    this.checkbox.run().then(answer => {\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('choice 2');\n      done();\n    });\n    this.rl.input.emit('keypress', 'n', {\n      name: 'n',\n      ctrl: true\n    });\n    this.rl.input.emit('keypress', 'n', {\n      name: 'n',\n      ctrl: true\n    });\n    this.rl.input.emit('keypress', 'p', {\n      name: 'p',\n      ctrl: true\n    });\n    this.rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow 1-9 shortcut key","suites":["`checkbox` prompt"],"updatePoint":{"line":193,"column":35,"index":5002},"line":193,"code":"  it('should allow 1-9 shortcut key', function (done) {\n    this.checkbox.run().then(answer => {\n      expect(answer.length).to.equal(1);\n      expect(answer[0]).to.equal('choice 2');\n      done();\n    });\n    this.rl.input.emit('keypress', '2');\n    this.rl.emit('line');\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should select all answers if <a> is pressed","suites":["`checkbox` prompt"],"updatePoint":{"line":202,"column":49,"index":5295},"line":202,"code":"  it('should select all answers if <a> is pressed', function () {\n    const promise = this.checkbox.run();\n    this.rl.input.emit('keypress', 'a', {\n      name: 'a'\n    });\n    this.rl.emit('line');\n    return promise.then(answer => {\n      expect(answer.length).to.equal(3);\n    });\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should select no answers if <a> is pressed a second time","suites":["`checkbox` prompt"],"updatePoint":{"line":212,"column":62,"index":5598},"line":212,"code":"  it('should select no answers if <a> is pressed a second time', function () {\n    const promise = this.checkbox.run();\n    this.rl.input.emit('keypress', 'a', {\n      name: 'a'\n    });\n    this.rl.input.emit('keypress', 'a', {\n      name: 'a'\n    });\n    this.rl.emit('line');\n    return promise.then(answer => {\n      expect(answer.length).to.equal(0);\n    });\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should select the inverse of the current selection when <i> is pressed","suites":["`checkbox` prompt"],"updatePoint":{"line":225,"column":76,"index":5981},"line":225,"code":"  it('should select the inverse of the current selection when <i> is pressed', function () {\n    const promise = this.checkbox.run();\n    this.rl.input.emit('keypress', 'i', {\n      name: 'i'\n    });\n    this.rl.emit('line');\n    return promise.then(answer => {\n      expect(answer.length).to.equal(3);\n    });\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"pagination works with multiline choices","suites":["`checkbox` prompt"],"updatePoint":{"line":235,"column":45,"index":6267},"line":235,"code":"  it('pagination works with multiline choices', function (done) {\n    const multilineFixture = {\n      message: 'message',\n      name: 'name',\n      choices: ['a\\n\\n', 'b\\n\\n']\n    };\n    const list = new Checkbox(multilineFixture, this.rl);\n    const spy = sinon.spy(list.paginator, 'paginate');\n    list.run().then(answer => {\n      const realIndexPosition1 = spy.firstCall.args[1];\n      const realIndexPosition2 = spy.secondCall.args[1]; // 'a\\n\\n': 0th index, but pagination at 2nd index position due to 2 extra newlines\n\n      expect(realIndexPosition1).to.equal(2); // 'b\\n\\n': 1st index, but pagination at 5th index position due to 4 extra newlines\n\n      expect(realIndexPosition2).to.equal(5);\n      expect(answer[0]).to.equal('b\\n\\n');\n      done();\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    this.rl.input.emit('keypress', ' ', {\n      name: 'space'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"output disabled choices and custom messages","suites":["`checkbox` prompt","with disabled choices"],"updatePoint":{"line":273,"column":51,"index":7533},"line":273,"code":"    it('output disabled choices and custom messages', function () {\n      const promise = this.checkbox.run();\n      this.rl.emit('line');\n      return promise.then(() => {\n        expect(this.rl.output.__raw__).to.contain('- dis1 (Disabled)');\n        expect(this.rl.output.__raw__).to.contain('- dis2 (uh oh)');\n      });\n    });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"skip disabled choices","suites":["`checkbox` prompt","with disabled choices"],"updatePoint":{"line":281,"column":29,"index":7843},"line":281,"code":"    it('skip disabled choices', function (done) {\n      this.checkbox.run().then(answer => {\n        expect(answer[0]).to.equal('choice 1');\n        done();\n      });\n      this.rl.input.emit('keypress', null, {\n        name: 'down'\n      });\n      this.rl.input.emit('keypress', null, {\n        name: 'down'\n      });\n      this.rl.input.emit('keypress', null, {\n        name: 'down'\n      });\n      this.rl.input.emit('keypress', ' ', {\n        name: 'space'\n      });\n      this.rl.emit('line');\n    });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"uncheck defaults choices who're disabled","suites":["`checkbox` prompt","with disabled choices"],"updatePoint":{"line":300,"column":48,"index":8369},"line":300,"code":"    it(\"uncheck defaults choices who're disabled\", function (done) {\n      this.fixture.choices = [{\n        name: '1',\n        checked: true,\n        disabled: true\n      }, {\n        name: '2'\n      }];\n      this.checkbox = new Checkbox(this.fixture, this.rl);\n      this.checkbox.run().then(answer => {\n        expect(answer.length).to.equal(0);\n        done();\n      });\n      this.rl.emit('line');\n    });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"disabled can be a function","suites":["`checkbox` prompt","with disabled choices"],"updatePoint":{"line":315,"column":34,"index":8767},"line":315,"code":"    it('disabled can be a function', function () {\n      this.fixture.choices = [{\n        name: 'dis1',\n\n        disabled(answers) {\n          expect(answers.foo).to.equal('foo');\n          return true;\n        }\n\n      }];\n      this.checkbox = new Checkbox(this.fixture, this.rl, {\n        foo: 'foo'\n      });\n      const promise = this.checkbox.run();\n      this.rl.emit('line');\n      promise.then(() => {\n        expect(this.rl.output.__raw__).to.contain('- dis1 (Disabled)');\n      });\n    });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"loops to bottom when too far up","suites":["`checkbox` prompt","going out of boundaries","when loop undefined / true"],"updatePoint":{"line":337,"column":41,"index":9379},"line":337,"code":"      it('loops to bottom when too far up', async function () {\n        const promise = this.checkbox.run();\n        this.rl.input.emit('keypress', null, {\n          name: 'up'\n        });\n        this.rl.input.emit('keypress', null, {\n          name: 'up'\n        });\n        this.rl.input.emit('keypress', ' ', {\n          name: 'space'\n        });\n        this.rl.emit('line');\n        const answer = await promise;\n        expect(answer.length).to.equal(1);\n        expect(answer[0]).to.equal('choice 2');\n      });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"loops to top when too far down","suites":["`checkbox` prompt","going out of boundaries","when loop undefined / true"],"updatePoint":{"line":353,"column":40,"index":9898},"line":353,"code":"      it('loops to top when too far down', async function () {\n        const promise = this.checkbox.run();\n        this.rl.input.emit('keypress', null, {\n          name: 'down'\n        });\n        this.rl.input.emit('keypress', null, {\n          name: 'down'\n        });\n        this.rl.input.emit('keypress', null, {\n          name: 'down'\n        });\n        this.rl.input.emit('keypress', ' ', {\n          name: 'space'\n        });\n        this.rl.emit('line');\n        const answer = await promise;\n        expect(answer.length).to.equal(1);\n        expect(answer[0]).to.equal('choice 1');\n      });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"stays at top when too far up","suites":["`checkbox` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":379,"column":38,"index":10702},"line":379,"code":"      it('stays at top when too far up', async function () {\n        const promise = this.checkbox.run();\n        this.rl.input.emit('keypress', null, {\n          name: 'up'\n        });\n        this.rl.input.emit('keypress', null, {\n          name: 'up'\n        });\n        this.rl.input.emit('keypress', ' ', {\n          name: 'space'\n        });\n        this.rl.emit('line');\n        const answer = await promise;\n        expect(answer.length).to.equal(1);\n        expect(answer[0]).to.equal('choice 1');\n      });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"stays at bottom when too far down","suites":["`checkbox` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":395,"column":43,"index":11224},"line":395,"code":"      it('stays at bottom when too far down', async function () {\n        const promise = this.checkbox.run();\n        this.rl.input.emit('keypress', null, {\n          name: 'down'\n        });\n        this.rl.input.emit('keypress', null, {\n          name: 'down'\n        });\n        this.rl.input.emit('keypress', null, {\n          name: 'down'\n        });\n        this.rl.input.emit('keypress', ' ', {\n          name: 'space'\n        });\n        this.rl.emit('line');\n        const answer = await promise;\n        expect(answer.length).to.equal(1);\n        expect(answer[0]).to.equal('choice 3');\n      });","file":"specs/prompts/checkbox.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should default to true","suites":["`confirm` prompt"],"updatePoint":{"line":21,"column":28,"index":518},"line":21,"code":"  it('should default to true', function (done) {\n    this.confirm.run().then(answer => {\n      expect(this.rl.output.__raw__).to.contain('Y/n');\n      expect(answer).to.equal(true);\n      done();\n    });\n    this.rl.emit('line', '');\n  });","file":"specs/prompts/confirm.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a default `false` value","suites":["`confirm` prompt"],"updatePoint":{"line":29,"column":42,"index":772},"line":29,"code":"  it('should allow a default `false` value', function (done) {\n    this.fixture.default = false;\n    const falseConfirm = new Confirm(this.fixture, this.rl);\n    falseConfirm.run().then(answer => {\n      expect(this.rl.output.__raw__).to.contain('y/N');\n      expect(answer).to.equal(false);\n      done();\n    });\n    this.rl.emit('line', '');\n  });","file":"specs/prompts/confirm.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a default `true` value","suites":["`confirm` prompt"],"updatePoint":{"line":39,"column":41,"index":1121},"line":39,"code":"  it('should allow a default `true` value', function (done) {\n    this.fixture.default = true;\n    const falseConfirm = new Confirm(this.fixture, this.rl);\n    falseConfirm.run().then(answer => {\n      expect(this.rl.output.__raw__).to.contain('Y/n');\n      expect(answer).to.equal(true);\n      done();\n    });\n    this.rl.emit('line', '');\n  });","file":"specs/prompts/confirm.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse 'Y' value to boolean true","suites":["`confirm` prompt"],"updatePoint":{"line":49,"column":44,"index":1471},"line":49,"code":"  it(\"should parse 'Y' value to boolean true\", function (done) {\n    this.confirm.run().then(answer => {\n      expect(answer).to.equal(true);\n      done();\n    });\n    this.rl.emit('line', 'Y');\n  });","file":"specs/prompts/confirm.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse 'Yes' value to boolean true","suites":["`confirm` prompt"],"updatePoint":{"line":56,"column":46,"index":1674},"line":56,"code":"  it(\"should parse 'Yes' value to boolean true\", function (done) {\n    this.confirm.run().then(answer => {\n      expect(answer).to.equal(true);\n      done();\n    });\n    this.rl.emit('line', 'Yes');\n  });","file":"specs/prompts/confirm.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse 'No' value to boolean false","suites":["`confirm` prompt"],"updatePoint":{"line":63,"column":46,"index":1879},"line":63,"code":"  it(\"should parse 'No' value to boolean false\", function (done) {\n    this.confirm.run().then(answer => {\n      expect(answer).to.equal(false);\n      done();\n    });\n    this.rl.emit('line', 'No');\n  });","file":"specs/prompts/confirm.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse every other string value to boolean false","suites":["`confirm` prompt"],"updatePoint":{"line":70,"column":60,"index":2098},"line":70,"code":"  it('should parse every other string value to boolean false', function (done) {\n    this.confirm.run().then(answer => {\n      expect(answer).to.equal(false);\n      done();\n    });\n    this.rl.emit('line', 'bla bla foo');\n  });","file":"specs/prompts/confirm.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should retrieve temporary files contents","suites":["`editor` prompt"],"updatePoint":{"line":23,"column":46,"index":629},"line":23,"code":"  it('should retrieve temporary files contents', function () {\n    const prompt = new Editor(this.fixture, this.rl);\n    const promise = prompt.run();\n    this.rl.emit('line', '');\n    return promise.then(answer => expect(answer).to.equal('testing'));\n  });","file":"specs/prompts/editor.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should throw if `key` is missing","suites":["`expand` prompt"],"updatePoint":{"line":18,"column":38,"index":447},"line":18,"code":"  it('should throw if `key` is missing', function () {\n    expect(() => {\n      this.fixture.choices = ['a', 'a'];\n      return new Expand(this.fixture, this.rl);\n    }).to.throw(/Format error/);\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should throw if `key` is duplicate","suites":["`expand` prompt"],"updatePoint":{"line":24,"column":40,"index":651},"line":24,"code":"  it('should throw if `key` is duplicate', function () {\n    expect(() => {\n      this.fixture.choices = [{\n        key: 'a',\n        name: 'foo'\n      }, {\n        key: 'a',\n        name: 'foo'\n      }];\n      return new Expand(this.fixture, this.rl);\n    }).to.throw(/Duplicate key error/);\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should throw if `key` is duplicate case insensitive","suites":["`expand` prompt"],"updatePoint":{"line":36,"column":57,"index":967},"line":36,"code":"  it('should throw if `key` is duplicate case insensitive', function () {\n    expect(() => {\n      this.fixture.choices = [{\n        key: 'a',\n        name: 'foo'\n      }, {\n        key: 'A',\n        name: 'foo'\n      }];\n      return new Expand(this.fixture, this.rl);\n    }).to.throw(/Duplicate key error/);\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should throw if `key` is `h`","suites":["`expand` prompt"],"updatePoint":{"line":48,"column":34,"index":1260},"line":48,"code":"  it('should throw if `key` is `h`', function () {\n    expect(() => {\n      this.fixture.choices = [{\n        key: 'h',\n        name: 'foo'\n      }];\n      return new Expand(this.fixture, this.rl);\n    }).to.throw(/Reserved key error/);\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow false as a value","suites":["`expand` prompt"],"updatePoint":{"line":57,"column":35,"index":1504},"line":57,"code":"  it('should allow false as a value', function () {\n    const promise = this.expand.run();\n    this.rl.emit('line', 'd');\n    return promise.then(answer => {\n      expect(answer).to.equal(false);\n    });\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"pass the value as answer, and display short on the prompt","suites":["`expand` prompt"],"updatePoint":{"line":64,"column":63,"index":1742},"line":64,"code":"  it('pass the value as answer, and display short on the prompt', function () {\n    this.fixture.choices = [{\n      key: 'a',\n      name: 'A Name',\n      value: 'a value',\n      short: 'ShortA'\n    }, {\n      key: 'b',\n      name: 'B Name',\n      value: 'b value',\n      short: 'ShortB'\n    }];\n    const prompt = new Expand(this.fixture, this.rl);\n    const promise = prompt.run();\n    this.rl.emit('line', 'b');\n    return promise.then(answer => {\n      expect(answer).to.equal('b value');\n      expect(this.rl.output.__raw__).to.match(/ShortB/);\n    });\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use a string the `default` value","suites":["`expand` prompt"],"updatePoint":{"line":84,"column":45,"index":2287},"line":84,"code":"  it('should use a string the `default` value', function (done) {\n    this.fixture.default = 'chile';\n    this.expand = new Expand(this.fixture, this.rl);\n    this.expand.run().then(answer => {\n      expect(answer).to.equal('chile');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use the `default` argument value","suites":["`expand` prompt"],"updatePoint":{"line":93,"column":45,"index":2575},"line":93,"code":"  it('should use the `default` argument value', function (done) {\n    this.fixture.default = 1;\n    this.expand = new Expand(this.fixture, this.rl);\n    this.expand.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should return the user input","suites":["`expand` prompt"],"updatePoint":{"line":102,"column":34,"index":2844},"line":102,"code":"  it('should return the user input', function (done) {\n    this.expand.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.emit('line', 'b');\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should strip the user input","suites":["`expand` prompt"],"updatePoint":{"line":109,"column":33,"index":3034},"line":109,"code":"  it('should strip the user input', function (done) {\n    this.expand.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.emit('line', ' b ');\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should have help option","suites":["`expand` prompt"],"updatePoint":{"line":116,"column":29,"index":3222},"line":116,"code":"  it('should have help option', function (done) {\n    this.expand.run().then(answer => {\n      expect(this.rl.output.__raw__).to.match(/a\\) acab/);\n      expect(this.rl.output.__raw__).to.match(/b\\) bar/);\n      expect(answer).to.equal('chile');\n      done();\n    });\n    this.rl.emit('line', 'h');\n    this.rl.emit('line', 'c');\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not allow invalid command","suites":["`expand` prompt"],"updatePoint":{"line":126,"column":38,"index":3567},"line":126,"code":"  it('should not allow invalid command', function () {\n    const self = this;\n    const promise = this.expand.run();\n    this.rl.emit('line', 'blah');\n    setTimeout(() => {\n      self.rl.emit('line', 'a');\n    }, 10);\n    return promise;\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should display and capitalize the default choice `key`","suites":["`expand` prompt"],"updatePoint":{"line":135,"column":60,"index":3834},"line":135,"code":"  it('should display and capitalize the default choice `key`', function () {\n    this.fixture.default = 1;\n    this.expand = new Expand(this.fixture, this.rl);\n    this.expand.run();\n    expect(this.rl.output.__raw__).to.contain('(aBcdh)');\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should display and capitalize the default choice by name value","suites":["`expand` prompt"],"updatePoint":{"line":141,"column":68,"index":4089},"line":141,"code":"  it('should display and capitalize the default choice by name value', function () {\n    this.fixture.default = 'chile';\n    this.expand = new Expand(this.fixture, this.rl);\n    this.expand.run();\n    expect(this.rl.output.__raw__).to.contain('(abCdh)');\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should display and capitalize the default choice H (Help) `key` if no string default matched","suites":["`expand` prompt"],"updatePoint":{"line":147,"column":98,"index":4380},"line":147,"code":"  it('should display and capitalize the default choice H (Help) `key` if no string default matched', function () {\n    this.fixture.default = 'chile!';\n    this.expand = new Expand(this.fixture, this.rl);\n    this.expand.run();\n    expect(this.rl.output.__raw__).to.contain('(abcdH)');\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should display and capitalize the default choice H (Help) `key` if none provided","suites":["`expand` prompt"],"updatePoint":{"line":153,"column":86,"index":4660},"line":153,"code":"  it('should display and capitalize the default choice H (Help) `key` if none provided', function () {\n    delete this.fixture.default;\n    this.expand = new Expand(this.fixture, this.rl);\n    this.expand.run();\n    expect(this.rl.output.__raw__).to.contain('(abcdH)');\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should 'autocomplete' the user input","suites":["`expand` prompt"],"updatePoint":{"line":159,"column":42,"index":4892},"line":159,"code":"  it(\"should 'autocomplete' the user input\", function (done) {\n    this.expand = new Expand(this.fixture, this.rl);\n    this.expand.run();\n    this.rl.line = 'a';\n    this.rl.emit('keypress');\n    setTimeout(() => {\n      expect(this.rl.output.__raw__).to.contain('acab');\n      done();\n    }, 10);\n  });","file":"specs/prompts/expand.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use raw value from the user","suites":["`input` prompt"],"updatePoint":{"line":17,"column":40,"index":392},"line":17,"code":"  it('should use raw value from the user', function (done) {\n    const input = new Input(this.fixture, this.rl);\n    input.run().then(answer => {\n      expect(answer).to.equal('Inquirer');\n      done();\n    });\n    this.rl.emit('line', 'Inquirer');\n  });","file":"specs/prompts/input.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should output filtered value","suites":["`input` prompt"],"updatePoint":{"line":25,"column":34,"index":641},"line":25,"code":"  it('should output filtered value', function () {\n    this.fixture.filter = function () {\n      return 'pass';\n    };\n\n    const prompt = new Input(this.fixture, this.rl);\n    const promise = prompt.run();\n    this.rl.emit('line', '');\n    return promise.then(() => {\n      expect(this.rl.output.__raw__).to.contain('pass');\n    });\n  });","file":"specs/prompts/input.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should apply the provided transform to the value","suites":["`input` prompt"],"updatePoint":{"line":37,"column":54,"index":1001},"line":37,"code":"  it('should apply the provided transform to the value', function (done) {\n    this.fixture.transformer = function (value) {\n      return value.split('').reverse().join('');\n    };\n\n    const prompt = new Input(this.fixture, this.rl);\n    prompt.run();\n    this.rl.line = 'Inquirer';\n    this.rl.input.emit('keypress');\n    setTimeout(() => {\n      expect(this.rl.output.__raw__).to.contain('reriuqnI');\n      done();\n    }, 10);\n  });","file":"specs/prompts/input.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use the answers object in the provided transformer","suites":["`input` prompt"],"updatePoint":{"line":51,"column":63,"index":1446},"line":51,"code":"  it('should use the answers object in the provided transformer', function (done) {\n    this.fixture.transformer = function (value, answers) {\n      return answers.capitalize ? value.toUpperCase() : value;\n    };\n\n    const answers = {\n      capitalize: true\n    };\n    const prompt = new Input(this.fixture, this.rl, answers);\n    prompt.run();\n    this.rl.line = 'inquirer';\n    this.rl.input.emit('keypress');\n    setTimeout(() => {\n      expect(this.rl.output.__raw__).to.contain('INQUIRER');\n      done();\n    }, 200);\n  });","file":"specs/prompts/input.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use the flags object in the provided transformer","suites":["`input` prompt"],"updatePoint":{"line":68,"column":61,"index":1974},"line":68,"code":"  it('should use the flags object in the provided transformer', function (done) {\n    this.fixture.transformer = function (value, answers, flags) {\n      const text = answers.capitalize ? value.toUpperCase() : value;\n      if (flags.isFinal) return text + '!';\n      return text;\n    };\n\n    const answers = {\n      capitalize: true\n    };\n    const prompt = new Input(this.fixture, this.rl, answers);\n    prompt.run();\n    this.rl.line = 'inquirer';\n    this.rl.input.emit('keypress');\n    setTimeout(() => {\n      expect(this.rl.output.__raw__).to.contain('INQUIRER');\n      done();\n    }, 200);\n  });","file":"specs/prompts/input.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should default to first choice","suites":["`list` prompt"],"updatePoint":{"line":20,"column":36,"index":466},"line":20,"code":"  it('should default to first choice', function (done) {\n    this.list.run().then(answer => {\n      expect(answer).to.equal('foo');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should move selected cursor on keypress","suites":["`list` prompt"],"updatePoint":{"line":27,"column":45,"index":661},"line":27,"code":"  it('should move selected cursor on keypress', function (done) {\n    this.list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for arrow navigation","suites":["`list` prompt"],"updatePoint":{"line":37,"column":39,"index":918},"line":37,"code":"  it('should allow for arrow navigation', function (done) {\n    this.list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'up'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for vi-style navigation","suites":["`list` prompt"],"updatePoint":{"line":53,"column":42,"index":1312},"line":53,"code":"  it('should allow for vi-style navigation', function (done) {\n    this.list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.input.emit('keypress', 'j', {\n      name: 'j'\n    });\n    this.rl.input.emit('keypress', 'j', {\n      name: 'j'\n    });\n    this.rl.input.emit('keypress', 'k', {\n      name: 'k'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for emacs-style navigation","suites":["`list` prompt"],"updatePoint":{"line":69,"column":45,"index":1705},"line":69,"code":"  it('should allow for emacs-style navigation', function (done) {\n    this.list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.input.emit('keypress', 'n', {\n      name: 'n',\n      ctrl: true\n    });\n    this.rl.input.emit('keypress', 'n', {\n      name: 'n',\n      ctrl: true\n    });\n    this.rl.input.emit('keypress', 'p', {\n      name: 'p',\n      ctrl: true\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"loops to bottom when too far up","suites":["`list` prompt","going out of boundaries","when loop undefined / true"],"updatePoint":{"line":101,"column":41,"index":2503},"line":101,"code":"      it('loops to bottom when too far up', async function () {\n        const promise = this.list.run();\n        this.pressKey('up', 2);\n        const answer = await promise;\n        expect(answer).to.equal('bar');\n      });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"loops to top when too far down","suites":["`list` prompt","going out of boundaries","when loop undefined / true"],"updatePoint":{"line":107,"column":40,"index":2727},"line":107,"code":"      it('loops to top when too far down', async function () {\n        const promise = this.list.run();\n        this.pressKey('down', 3);\n        const answer = await promise;\n        expect(answer).to.equal('foo');\n      });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"stays at top when too far up","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":120,"column":38,"index":3144},"line":120,"code":"      it('stays at top when too far up', async function () {\n        const promise = this.list.run();\n        this.pressKey('up', 2);\n        const answer = await promise;\n        expect(answer).to.equal('foo');\n      });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"stays at bottom when too far down","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":126,"column":43,"index":3371},"line":126,"code":"      it('stays at bottom when too far down', async function () {\n        const promise = this.list.run();\n        this.pressKey('down', 3);\n        const answer = await promise;\n        expect(answer).to.equal('bum');\n      });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should require a choices array","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":134,"column":36,"index":3607},"line":134,"code":"  it('should require a choices array', () => {\n    expect(() => new List({\n      name: 'foo',\n      message: 'bar'\n    })).to.throw(/choices/);\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a numeric default","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":140,"column":36,"index":3757},"line":140,"code":"  it('should allow a numeric default', function (done) {\n    this.fixture.default = 1;\n    const list = new List(this.fixture, this.rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should work from a numeric default being the index","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":149,"column":56,"index":4038},"line":149,"code":"  it('should work from a numeric default being the index', function (done) {\n    this.fixture.default = 1;\n    const list = new List(this.fixture, this.rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('bum');\n      done();\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a string default being the value","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":161,"column":51,"index":4382},"line":161,"code":"  it('should allow a string default being the value', function (done) {\n    this.fixture.default = 'bar';\n    const list = new List(this.fixture, this.rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should work from a string default","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":170,"column":39,"index":4650},"line":170,"code":"  it('should work from a string default', function (done) {\n    this.fixture.default = 'bar';\n    const list = new List(this.fixture, this.rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('bum');\n      done();\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shouldn't allow an invalid string default to change position","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":182,"column":66,"index":5013},"line":182,"code":"  it(\"shouldn't allow an invalid string default to change position\", function (done) {\n    this.fixture.default = 'babar';\n    const list = new List(this.fixture, this.rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('foo');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shouldn't allow an invalid index as default","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":191,"column":49,"index":5293},"line":191,"code":"  it(\"shouldn't allow an invalid index as default\", function (done) {\n    this.fixture.default = 4;\n    const list = new List(this.fixture, this.rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('foo');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow 1-9 shortcut key","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":200,"column":35,"index":5553},"line":200,"code":"  it('should allow 1-9 shortcut key', function (done) {\n    this.list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.input.emit('keypress', '2');\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"pagination works with multiline choices","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":208,"column":45,"index":5789},"line":208,"code":"  it('pagination works with multiline choices', function (done) {\n    const multilineFixture = {\n      message: 'message',\n      name: 'name',\n      choices: ['a\\n\\n', 'b\\n\\n']\n    };\n    const list = new List(multilineFixture, this.rl);\n    const spy = sinon.spy(list.paginator, 'paginate');\n    list.run().then(answer => {\n      const realIndexPosition1 = spy.firstCall.args[1];\n      const realIndexPosition2 = spy.secondCall.args[1]; // 'a\\n\\n': 0th index, but pagination at 2nd index position due to 2 extra newlines\n\n      expect(realIndexPosition1).to.equal(2); // 'b\\n\\n': 1st index, but pagination at 5th index position due to 4 extra newlines\n\n      expect(realIndexPosition2).to.equal(5);\n      expect(answer).to.equal('b\\n\\n');\n      done();\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"paginator uses non infinite version with loop:false","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":231,"column":57,"index":6663},"line":231,"code":"  it('paginator uses non infinite version with loop:false', function () {\n    const list = new List({\n      name: 'numbers',\n      choices: [1, 2, 3],\n      loop: false\n    }, this.rl);\n    expect(list.paginator.isInfinite).equal(false);\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should provide answers in the \"filter\" callback option","suites":["`list` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":239,"column":60,"index":6910},"line":239,"code":"  it('should provide answers in the \"filter\" callback option', function (done) {\n    const answers = {};\n\n    this.fixture.filter = function () {\n      return true;\n    };\n\n    sinon.spy(this.fixture, 'filter');\n    const list = new List(this.fixture, this.rl, answers);\n    list.run().then(() => {\n      const spyCall = this.fixture.filter.getCall(0);\n      expect(spyCall.args[1]).to.equal(answers);\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/list.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse the largest number","suites":["`number` prompt"],"updatePoint":{"line":19,"column":37,"index":490},"line":19,"code":"  it('should parse the largest number', function (done) {\n    this.number.run().then(answer => {\n      expect(answer).to.equal(Number.MAX_SAFE_INTEGER);\n      done();\n    });\n    this.rl.emit('line', String(Number.MAX_SAFE_INTEGER));\n  });","file":"specs/prompts/number.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse the smallest number","suites":["`number` prompt"],"updatePoint":{"line":26,"column":38,"index":731},"line":26,"code":"  it('should parse the smallest number', function (done) {\n    this.number.run().then(answer => {\n      expect(answer).to.equal(Number.MIN_SAFE_INTEGER);\n      done();\n    });\n    this.rl.emit('line', String(Number.MIN_SAFE_INTEGER));\n  });","file":"specs/prompts/number.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse an integer","suites":["`number` prompt"],"updatePoint":{"line":33,"column":29,"index":963},"line":33,"code":"  it('should parse an integer', function (done) {\n    this.number.run().then(answer => {\n      expect(answer).to.equal(42);\n      done();\n    });\n    this.rl.emit('line', '42');\n  });","file":"specs/prompts/number.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse a negative integer","suites":["`number` prompt"],"updatePoint":{"line":40,"column":37,"index":1155},"line":40,"code":"  it('should parse a negative integer', function (done) {\n    this.number.run().then(answer => {\n      expect(answer).to.equal(-363);\n      done();\n    });\n    this.rl.emit('line', '-363');\n  });","file":"specs/prompts/number.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse a positive float","suites":["`number` prompt"],"updatePoint":{"line":47,"column":35,"index":1349},"line":47,"code":"  it('should parse a positive float', function (done) {\n    this.number.run().then(answer => {\n      expect(answer).to.be.closeTo(4353.43, ACCEPTABLE_ERROR);\n      done();\n    });\n    this.rl.emit('line', '4353.43');\n  });","file":"specs/prompts/number.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse a negative float","suites":["`number` prompt"],"updatePoint":{"line":54,"column":35,"index":1572},"line":54,"code":"  it('should parse a negative float', function (done) {\n    this.number.run().then(answer => {\n      expect(answer).to.be.closeTo(-4353.43, ACCEPTABLE_ERROR);\n      done();\n    });\n    this.rl.emit('line', '-4353.43');\n  });","file":"specs/prompts/number.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse a float with no digits before the decimal","suites":["`number` prompt"],"updatePoint":{"line":61,"column":60,"index":1822},"line":61,"code":"  it('should parse a float with no digits before the decimal', function (done) {\n    this.number.run().then(answer => {\n      expect(answer).to.be.closeTo(0.01264, ACCEPTABLE_ERROR);\n      done();\n    });\n    this.rl.emit('line', '.01264');\n  });","file":"specs/prompts/number.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse a float with no digits after the decimal","suites":["`number` prompt"],"updatePoint":{"line":68,"column":59,"index":2068},"line":68,"code":"  it('should parse a float with no digits after the decimal', function (done) {\n    this.number.run().then(answer => {\n      expect(answer).to.be.closeTo(1234.0, ACCEPTABLE_ERROR);\n      done();\n    });\n    this.rl.emit('line', '1234.');\n  });","file":"specs/prompts/number.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse a float with exponents","suites":["`number` prompt"],"updatePoint":{"line":75,"column":41,"index":2294},"line":75,"code":"  it('should parse a float with exponents', function (done) {\n    this.number.run().then(answer => {\n      expect(answer).to.be.closeTo(534e12, ACCEPTABLE_ERROR);\n      done();\n    });\n    this.rl.emit('line', '534e12');\n  });","file":"specs/prompts/number.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse any other string as NaN","suites":["`number` prompt"],"updatePoint":{"line":82,"column":42,"index":2522},"line":82,"code":"  it('should parse any other string as NaN', function (done) {\n    this.number.run().then(answer => {\n      expect(answer).to.be.NaN; // eslint-disable-line no-unused-expressions\n\n      done();\n    });\n    this.rl.emit('line', 'The cat');\n  });","file":"specs/prompts/number.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should parse the empty string as NaN","suites":["`number` prompt"],"updatePoint":{"line":90,"column":42,"index":2767},"line":90,"code":"  it('should parse the empty string as NaN', function (done) {\n    this.number.run().then(answer => {\n      expect(answer).to.be.NaN; // eslint-disable-line no-unused-expressions\n\n      done();\n    });\n    this.rl.emit('line', '');\n  });","file":"specs/prompts/number.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should return default value if it is set on a bad input","suites":["`number` prompt"],"updatePoint":{"line":98,"column":61,"index":3024},"line":98,"code":"  it('should return default value if it is set on a bad input', function (done) {\n    this.number.opt.default = 11;\n    this.number.run().then(answer => {\n      expect(answer).to.equal(11);\n      done();\n    });\n    this.rl.input.emit('keypress', 'a', {\n      name: 'a'\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/number.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should use raw value from the user without masking","suites":["`password` prompt"],"updatePoint":{"line":32,"column":56,"index":756},"line":32,"code":"  it('should use raw value from the user without masking', function () {\n    const password = new Password(this.fixture, this.rl);\n    const promise = password.run().then(testMasking(this.rl, false));\n    this.rl.emit('line', 'Inquirer');\n    return promise;\n  });","file":"specs/prompts/password.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should mask the input with \"*\" if the `mask` option was provided by the user was `true`","suites":["`password` prompt"],"updatePoint":{"line":38,"column":93,"index":1058},"line":38,"code":"  it('should mask the input with \"*\" if the `mask` option was provided by the user was `true`', function () {\n    this.fixture.mask = true;\n    const password = new Password(this.fixture, this.rl);\n    const promise = password.run().then(testMasking(this.rl, '********'));\n    this.rl.emit('line', 'Inquirer');\n    return promise;\n  });","file":"specs/prompts/password.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should mask the input if a `mask` string was provided by the user","suites":["`password` prompt"],"updatePoint":{"line":45,"column":71,"index":1373},"line":45,"code":"  it('should mask the input if a `mask` string was provided by the user', function () {\n    this.fixture.mask = '#';\n    const password = new Password(this.fixture, this.rl);\n    const promise = password.run().then(testMasking(this.rl, '########'));\n    this.rl.emit('line', 'Inquirer');\n    return promise;\n  });","file":"specs/prompts/password.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Preserves default","suites":["`password` prompt"],"updatePoint":{"line":52,"column":23,"index":1639},"line":52,"code":"  it('Preserves default', function () {\n    this.fixture.default = 'Inquirer';\n    const password = new Password(this.fixture, this.rl);\n    const promise = password.run().then(answer => expect(answer).to.equal('Inquirer'));\n    this.rl.emit('line', '');\n    return promise;\n  });","file":"specs/prompts/password.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"Clears default on keypress","suites":["`password` prompt"],"updatePoint":{"line":59,"column":32,"index":1929},"line":59,"code":"  it('Clears default on keypress', function () {\n    this.fixture.default = 'Inquirer';\n    const password = new Password(this.fixture, this.rl);\n    const promise = password.run().then(answer => expect(answer).to.equal(''));\n    password.onKeypress({\n      name: 'backspace'\n    });\n    this.rl.emit('line', '');\n    return promise;\n  }); // See: https://github.com/SBoudrias/Inquirer.js/issues/1022","file":"specs/prompts/password.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not display input during async validation","suites":["`password` prompt"],"updatePoint":{"line":70,"column":54,"index":2353},"line":70,"code":"  it('should not display input during async validation', function () {\n    let output = '';\n    let renderCount = 0;\n\n    this.fixture.validate = () => new Promise(resolve => {\n      const id = setInterval(() => {\n        // Make sure we render at least once.\n        if (renderCount > 1) {\n          clearInterval(id);\n          resolve(true);\n        }\n      }, 10);\n    });\n\n    const password = new Password(this.fixture, this.rl);\n    const input = 'wvAq82yVujm5S9pf'; // Override screen.render to capture all output\n\n    const {\n      screen\n    } = password;\n    const {\n      render\n    } = screen;\n\n    screen.render = (...args) => {\n      output += stripAnsi(args.join(''));\n      renderCount += 1;\n      return render.call(screen, ...args);\n    };\n    /* This test should fail if you uncomment this line: */\n    // password.getSpinningValue = (value) => value;\n\n\n    const promise = password.run().then(answer => {\n      expect(output).to.not.contain(input);\n      expect(answer).to.equal(input);\n    });\n    this.rl.emit('line', input);\n    return promise;\n  });","file":"specs/prompts/password.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should default to first choice","suites":["`rawlist` prompt"],"updatePoint":{"line":18,"column":36,"index":451},"line":18,"code":"  it('should default to first choice', function (done) {\n    this.rawlist.run().then(answer => {\n      expect(answer).to.equal('foo');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should select given index","suites":["`rawlist` prompt"],"updatePoint":{"line":25,"column":31,"index":635},"line":25,"code":"  it('should select given index', function (done) {\n    this.rawlist.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.emit('line', '2');\n  });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should not allow invalid index","suites":["`rawlist` prompt"],"updatePoint":{"line":32,"column":36,"index":829},"line":32,"code":"  it('should not allow invalid index', function () {\n    const self = this;\n    const promise = this.rawlist.run();\n    this.rl.emit('line', 'blah');\n    setTimeout(() => {\n      self.rl.emit('line', '1');\n    }, 10);\n    return promise;\n  });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should require a choices array","suites":["`rawlist` prompt"],"updatePoint":{"line":41,"column":36,"index":1073},"line":41,"code":"  it('should require a choices array', () => {\n    const mkPrompt = function () {\n      return new Rawlist({\n        name: 'foo',\n        message: 'bar'\n      });\n    };\n\n    expect(mkPrompt).to.throw(/choices/);\n  });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow a default index","suites":["`rawlist` prompt"],"updatePoint":{"line":51,"column":34,"index":1290},"line":51,"code":"  it('should allow a default index', function (done) {\n    this.fixture.default = 1;\n    const list = new Rawlist(this.fixture, this.rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shouldn't allow an invalid index as default","suites":["`rawlist` prompt"],"updatePoint":{"line":60,"column":49,"index":1567},"line":60,"code":"  it(\"shouldn't allow an invalid index as default\", function (done) {\n    this.fixture.default = 4;\n    const list = new Rawlist(this.fixture, this.rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('foo');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow string default being the value","suites":["`rawlist` prompt"],"updatePoint":{"line":69,"column":49,"index":1844},"line":69,"code":"  it('should allow string default being the value', function (done) {\n    this.fixture.default = 'bum';\n    const list = new Rawlist(this.fixture, this.rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('bum');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shouldn't allow an invalid string default to change position","suites":["`rawlist` prompt"],"updatePoint":{"line":78,"column":66,"index":2142},"line":78,"code":"  it(\"shouldn't allow an invalid string default to change position\", function (done) {\n    this.fixture.default = 'bumby';\n    const list = new Rawlist(this.fixture, this.rl);\n    list.run().then(answer => {\n      expect(answer).to.equal('foo');\n      done();\n    });\n    this.rl.emit('line');\n  });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for arrow navigation","suites":["`rawlist` prompt"],"updatePoint":{"line":87,"column":39,"index":2415},"line":87,"code":"  it('should allow for arrow navigation', function (done) {\n    this.rawlist.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'up'\n    });\n    this.rl.emit('line', this.rl.line);\n  });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"should allow for arrow navigation after invalid input","suites":["`rawlist` prompt"],"updatePoint":{"line":103,"column":59,"index":2843},"line":103,"code":"  it('should allow for arrow navigation after invalid input', function (done) {\n    this.rawlist.run().then(answer => {\n      expect(answer).to.equal('bar');\n      done();\n    }).catch(done);\n    this.rl.emit('line', 'blah');\n    this.rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'down'\n    });\n    this.rl.input.emit('keypress', '', {\n      name: 'up'\n    });\n    this.rl.emit('line', this.rl.line);\n  });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"loops to bottom when too far up","suites":["`rawlist` prompt","going out of boundaries","when loop undefined / true"],"updatePoint":{"line":133,"column":41,"index":3668},"line":133,"code":"      it('loops to bottom when too far up', async function () {\n        const promise = this.rawlist.run();\n        this.pressKey('up', 2);\n        const answer = await promise;\n        expect(answer).to.equal('bar');\n      });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"loops to top when too far down","suites":["`rawlist` prompt","going out of boundaries","when loop undefined / true"],"updatePoint":{"line":139,"column":40,"index":3895},"line":139,"code":"      it('loops to top when too far down', async function () {\n        const promise = this.rawlist.run();\n        this.pressKey('down', 3);\n        const answer = await promise;\n        expect(answer).to.equal('foo');\n      });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"stays at top when too far up","suites":["`rawlist` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":152,"column":38,"index":4321},"line":152,"code":"      it('stays at top when too far up', async function () {\n        const promise = this.rawlist.run();\n        this.pressKey('up', 2);\n        const answer = await promise;\n        expect(answer).to.equal('foo');\n      });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"stays at bottom when too far down","suites":["`rawlist` prompt","going out of boundaries","when loop: false"],"updatePoint":{"line":158,"column":43,"index":4551},"line":158,"code":"      it('stays at bottom when too far down', async function () {\n        const promise = this.rawlist.run();\n        this.pressKey('down', 3);\n        const answer = await promise;\n        expect(answer).to.equal('bum');\n      });","file":"specs/prompts/rawlist.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"does nothing if output is smaller than page size","suites":["paginator"],"updatePoint":{"line":55,"column":54,"index":740},"line":55,"code":"  it('does nothing if output is smaller than page size', function () {\n    expect(this.paginator.paginate(output, 0, endIndex + 1)).equal(output);\n  });","file":"specs/utils/paginator.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"paginate returns slice of lines","suites":["paginator"],"updatePoint":{"line":58,"column":37,"index":876},"line":58,"code":"  it('paginate returns slice of lines', function () {\n    expect(getPage(this.paginator, 0)).equal(`\\\na\nb\nc`);\n  });","file":"specs/utils/paginator.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"slice has offset after later pages are rendered","suites":["paginator"],"updatePoint":{"line":64,"column":53,"index":1009},"line":64,"code":"  it('slice has offset after later pages are rendered', function () {\n    expect(getPage(this.paginator, 0)).equal(`\\\na\nb\nc`);\n    expect(getPage(this.paginator, 1)).equal(`\\\na\nb\nc`);\n    expect(getPage(this.paginator, 2)).equal(`\\\nb\nc\nd`);\n  });","file":"specs/utils/paginator.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"slice offset does not reset","suites":["paginator"],"updatePoint":{"line":78,"column":33,"index":1236},"line":78,"code":"  it('slice offset does not reset', function () {\n    expect(getPage(this.paginator, 2));\n    expect(getPage(this.paginator, 0)).equal(`\\\nz\na\nb`);\n  });","file":"specs/utils/paginator.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"shows start for as long as possible","suites":["paginator","non infinite mode"],"updatePoint":{"line":91,"column":43,"index":1562},"line":91,"code":"    it('shows start for as long as possible', function () {\n      expect(getPage(this.paginator, 0)).equal(`\\\na\nb\nc`);\n      expect(getPage(this.paginator, 1)).equal(`\\\na\nb\nc`);\n      expect(getPage(this.paginator, 2)).equal(`\\\na\nb\nc`);\n      expect(getPage(this.paginator, 3)).equal(`\\\nb\nc\nd`);\n    });","file":"specs/utils/paginator.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"slice offset does reset","suites":["paginator","non infinite mode"],"updatePoint":{"line":109,"column":31,"index":1854},"line":109,"code":"    it('slice offset does reset', function () {\n      getPage(this.paginator, 3);\n      expect(getPage(this.paginator, 0)).equal(`\\\na\nb\nc`);\n    });","file":"specs/utils/paginator.js","skipped":false,"dir":"packages/inquirer/test"},{"name":"aligns end to bottom","suites":["paginator","non infinite mode"],"updatePoint":{"line":116,"column":28,"index":2000},"line":116,"code":"    it('aligns end to bottom', function () {\n      expect(getPage(this.paginator, endIndex - 3)).equal(`\\\nu\nv\nw`);\n      expect(getPage(this.paginator, endIndex - 2)).equal(`\\\nv\nw\nx`);\n      expect(getPage(this.paginator, endIndex - 1)).equal(`\\\nw\nx\ny`);\n      expect(getPage(this.paginator, endIndex)).equal(`\\\nx\ny\nz`);\n    });","file":"specs/utils/paginator.js","skipped":false,"dir":"packages/inquirer/test"}]}