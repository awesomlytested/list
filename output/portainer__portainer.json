{
    "repo": "portainer/portainer",
    "url": "https://github.com/portainer/portainer",
    "branch": "develop",
    "configs": [
        {
            "package": "portainer",
            "lang": "js",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "Create admin user and verify success",
            "suites": [
                "Initialise admin user and endpoint"
            ],
            "updatePoint": {
                "line": 6,
                "column": 44
            },
            "line": 6,
            "code": "    it('Create admin user and verify success', function () {\n      cy.initAdmin('admin', 'portainer');\n      cy.url().should('include', 'init/endpoint');\n      cy.saveLocalStorage();\n    });",
            "file": "e2e/cypress/integration/ci_basic_tests/init.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Select local docker environment and init",
            "suites": [
                "Initialise admin user and endpoint"
            ],
            "updatePoint": {
                "line": 11,
                "column": 48
            },
            "line": 11,
            "code": "    it('Select local docker environment and init', function () {\n      cy.initEndpoint();\n      cy.url().should('include', 'home');\n    });",
            "file": "e2e/cypress/integration/ci_basic_tests/init.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Add docker swarm endpoint",
            "suites": [
                "Initialise admin user and endpoint"
            ],
            "updatePoint": {
                "line": 15,
                "column": 33
            },
            "line": 15,
            "code": "    it('Add docker swarm endpoint', function () {\n      cy.addNewEndpoint('swarm', 'Agent', 'e2e-portainer:9001');\n    });",
            "file": "e2e/cypress/integration/ci_basic_tests/init.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Login and create resources as admin",
            "suites": [
                "Manipulating resources as admin"
            ],
            "updatePoint": {
                "line": 15,
                "column": 43
            },
            "line": 15,
            "code": "    it('Login and create resources as admin', function () {\n      cy.visit('/');\n      cy.selectEndpoint('local');\n      cy.modifyResources('frontend', 'create');\n    });",
            "file": "e2e/cypress/integration/ci_basic_tests/standalone.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Login and delete resources as admin",
            "suites": [
                "Manipulating resources as admin"
            ],
            "updatePoint": {
                "line": 20,
                "column": 43
            },
            "line": 20,
            "code": "    it('Login and delete resources as admin', function () {\n      cy.visit('/');\n      cy.selectEndpoint('local');\n      cy.modifyResources('frontend', 'delete');\n    });",
            "file": "e2e/cypress/integration/ci_basic_tests/standalone.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Login and create resources as admin",
            "suites": [
                "Manipulating resources as admin"
            ],
            "updatePoint": {
                "line": 15,
                "column": 43
            },
            "line": 15,
            "code": "    it('Login and create resources as admin', function () {\n      cy.visit('/');\n      cy.selectEndpoint('swarm');\n      cy.modifyResources('frontend', 'create');\n    });",
            "file": "e2e/cypress/integration/ci_basic_tests/swarm.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Login and delete resources as admin",
            "suites": [
                "Manipulating resources as admin"
            ],
            "updatePoint": {
                "line": 20,
                "column": 43
            },
            "line": 20,
            "code": "    it('Login and delete resources as admin', function () {\n      cy.visit('/');\n      cy.selectEndpoint('swarm');\n      cy.modifyResources('frontend', 'delete');\n    });",
            "file": "e2e/cypress/integration/ci_basic_tests/swarm.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Create admin user and verify success",
            "suites": [
                "Initialise admin user and endpoint"
            ],
            "updatePoint": {
                "line": 6,
                "column": 44
            },
            "line": 6,
            "code": "    it('Create admin user and verify success', function () {\n      cy.initAdmin('admin', 'portainer');\n      cy.url().should('include', 'init/endpoint');\n      cy.saveLocalStorage();\n    });",
            "file": "e2e/cypress/integration/init.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Select local docker environment and init",
            "suites": [
                "Initialise admin user and endpoint"
            ],
            "updatePoint": {
                "line": 11,
                "column": 48
            },
            "line": 11,
            "code": "    it('Select local docker environment and init', function () {\n      cy.initEndpoint();\n      cy.url().should('include', 'home');\n    });",
            "file": "e2e/cypress/integration/init.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "a correct rename request to the Docker remote API",
            "suites": [
                "ContainerController"
            ],
            "updatePoint": {
                "line": 25,
                "column": 55
            },
            "line": 25,
            "code": "  it('a correct rename request to the Docker remote API', function () {\n    $routeParams.id = 'b17882378cee8ec0136f482681b764cca430befd52a9bfd1bde031f49b8bba9f';\n    $scope.container = {\n      Created: 1421817232,\n      id: 'b17882378cee8ec0136f482681b764cca430befd52a9bfd1bde031f49b8bba9f',\n      Image: 'portainer:latest',\n      Name: '/portainer'\n    };\n    $scope.container.newContainerName = 'newName';\n    var newContainerName = 'newName';\n    expectGetContainer();\n    $httpBackend.expectGET('dockerapi/containers/changes').respond([{\n      Kind: 1,\n      Path: '/docker.sock'\n    }]);\n    $httpBackend.expectPOST('dockerapi/containers/' + $routeParams.id + '/rename?name=newName').respond({\n      name: newContainerName\n    });\n    $scope.renameContainer();\n    $httpBackend.flush();\n    expect($scope.container.Name).toBe(newContainerName);\n    expect($scope.container.edit).toBeFalsy();\n  });",
            "file": "unit/app/components/containerController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should test controller initialize",
            "suites": [
                "ContainerTopController"
            ],
            "updatePoint": {
                "line": 14,
                "column": 39
            },
            "line": 14,
            "code": "  it('should test controller initialize', function () {\n    $httpBackend.expectGET('dockerapi/containers/b17882378cee8ec0136f482681b764cca430befd52a9bfd1bde031f49b8bba9f/json').respond(200, {\n      Name: '/foo'\n    });\n    $httpBackend.expectGET('dockerapi/containers/b17882378cee8ec0136f482681b764cca430befd52a9bfd1bde031f49b8bba9f/top?ps_args=').respond(200);\n    expect($scope.ps_args).toBeDefined();\n    $httpBackend.flush();\n  });",
            "file": "unit/app/components/containerTopController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "a correct top request to the Docker remote API",
            "suites": [
                "ContainerTopController"
            ],
            "updatePoint": {
                "line": 22,
                "column": 52
            },
            "line": 22,
            "code": "  it('a correct top request to the Docker remote API', function () {\n    $httpBackend.expectGET('dockerapi/containers/b17882378cee8ec0136f482681b764cca430befd52a9bfd1bde031f49b8bba9f/json').respond(200, {\n      Name: '/foo'\n    });\n    $httpBackend.expectGET('dockerapi/containers/' + $routeParams.id + '/top?ps_args=').respond(200);\n    $routeParams.id = '123456789123456789123456789';\n    $scope.ps_args = 'aux';\n    $httpBackend.expectGET('dockerapi/containers/' + $routeParams.id + '/top?ps_args=' + $scope.ps_args).respond(200);\n    $scope.getTop();\n    $httpBackend.flush();\n  });",
            "file": "unit/app/components/containerTopController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "initializes correctly",
            "suites": [
                "NetworkController"
            ],
            "updatePoint": {
                "line": 14,
                "column": 27
            },
            "line": 14,
            "code": "  it('initializes correctly', function () {\n    expectGetNetwork();\n    $httpBackend.flush();\n  });",
            "file": "unit/app/components/networkController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "issues a correct connect call to the remote API",
            "suites": [
                "NetworkController"
            ],
            "updatePoint": {
                "line": 18,
                "column": 53
            },
            "line": 18,
            "code": "  it('issues a correct connect call to the remote API', function () {\n    expectGetNetwork();\n    $httpBackend.expectPOST('dockerapi/networks/f1e1ce1613ccd374a75caf5e2c3ab35520d1944f91498c1974ec86fb4019c79b/connect', {\n      Container: 'containerId'\n    }).respond(200);\n    $scope.connect($routeParams.id, 'containerId');\n    $httpBackend.flush();\n  });",
            "file": "unit/app/components/networkController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "issues a correct disconnect call to the remote API",
            "suites": [
                "NetworkController"
            ],
            "updatePoint": {
                "line": 26,
                "column": 56
            },
            "line": 26,
            "code": "  it('issues a correct disconnect call to the remote API', function () {\n    expectGetNetwork();\n    $httpBackend.expectPOST('dockerapi/networks/f1e1ce1613ccd374a75caf5e2c3ab35520d1944f91498c1974ec86fb4019c79b/disconnect', {\n      Container: 'containerId'\n    }).respond(200);\n    $scope.disconnect($routeParams.id, 'containerId');\n    $httpBackend.flush();\n  });",
            "file": "unit/app/components/networkController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "issues a correct remove call to the remote API",
            "suites": [
                "NetworkController"
            ],
            "updatePoint": {
                "line": 34,
                "column": 52
            },
            "line": 34,
            "code": "  it('issues a correct remove call to the remote API', function () {\n    expectGetNetwork();\n    $httpBackend.expectDELETE('dockerapi/networks/f1e1ce1613ccd374a75caf5e2c3ab35520d1944f91498c1974ec86fb4019c79b').respond(204);\n    $scope.remove($routeParams.id);\n    $httpBackend.flush();\n  });",
            "file": "unit/app/components/networkController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "initializes correctly",
            "suites": [
                "NetworksController"
            ],
            "updatePoint": {
                "line": 13,
                "column": 27
            },
            "line": 13,
            "code": "  it('initializes correctly', function () {\n    expectGetNetwork();\n    $httpBackend.flush();\n  });",
            "file": "unit/app/components/networksController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "issues correct remove calls to the remote API",
            "suites": [
                "NetworksController"
            ],
            "updatePoint": {
                "line": 17,
                "column": 51
            },
            "line": 17,
            "code": "  it('issues correct remove calls to the remote API', function () {\n    expectGetNetwork();\n    $httpBackend.flush();\n    $scope.networks[0].Checked = true;\n    $scope.networks[2].Checked = true;\n    $httpBackend.expectDELETE('dockerapi/networks/f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566').respond(204);\n    $httpBackend.expectDELETE('dockerapi/networks/13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e').respond(204);\n    $scope.removeAction();\n    $httpBackend.flush();\n  });",
            "file": "unit/app/components/networksController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "issues a correct network creation call to the remote API",
            "suites": [
                "NetworksController"
            ],
            "updatePoint": {
                "line": 27,
                "column": 62
            },
            "line": 27,
            "code": "  it('issues a correct network creation call to the remote API', function () {\n    expectGetNetwork();\n    var createBody = {\n      Name: 'isolated_nw',\n      Driver: 'bridge',\n      IPAM: {\n        Config: [{\n          Subnet: '172.20.0.0/16',\n          IPRange: '172.20.10.0/24',\n          Gateway: '172.20.10.11'\n        }]\n      }\n    };\n    $httpBackend.expectPOST('dockerapi/networks/create', createBody).respond(201);\n    expectGetNetwork();\n    $scope.addNetwork(createBody);\n    $httpBackend.flush();\n  });",
            "file": "unit/app/components/networksController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should issue a correct create request to the Docker remote API",
            "suites": [
                "startContainerController",
                "Create and start a container with port bindings"
            ],
            "updatePoint": {
                "line": 38,
                "column": 70
            },
            "line": 38,
            "code": "    it('should issue a correct create request to the Docker remote API', function () {\n      var controller = createController();\n      var id = '6abd8bfba81cf8a05a76a4bdefcb36c4b66cd02265f4bfcd0e236468696ebc6c';\n      var expectedBody = {\n        name: 'container-name',\n        ExposedPorts: {\n          '9443/tcp': {}\n        },\n        HostConfig: {\n          PortBindings: {\n            '9443/tcp': [{\n              HostPort: '9999',\n              HostIp: '10.20.10.15'\n            }]\n          }\n        }\n      };\n      expectGetContainers();\n      $httpBackend.expectPOST('dockerapi/containers/create?name=container-name', expectedBody).respond({\n        Id: id,\n        Warnings: null\n      });\n      $httpBackend.expectPOST('dockerapi/containers/' + id + '/start').respond({\n        id: id,\n        Warnings: null\n      });\n      scope.config.name = 'container-name';\n      scope.config.HostConfig.PortBindings = [{\n        ip: '10.20.10.15',\n        extPort: '9999',\n        intPort: '9443'\n      }];\n      scope.create();\n      $httpBackend.flush();\n    });",
            "file": "unit/app/components/startContainerController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should issue a correct create request to the Docker remote API",
            "suites": [
                "startContainerController",
                "Create and start a container with environment variables"
            ],
            "updatePoint": {
                "line": 75,
                "column": 70
            },
            "line": 75,
            "code": "    it('should issue a correct create request to the Docker remote API', function () {\n      var controller = createController();\n      var id = '6abd8bfba81cf8a05a76a4bdefcb36c4b66cd02265f4bfcd0e236468696ebc6c';\n      var expectedBody = {\n        name: 'container-name',\n        Env: ['SHELL=/bin/bash', 'TERM=xterm-256color']\n      };\n      expectGetContainers();\n      $httpBackend.expectPOST('dockerapi/containers/create?name=container-name', expectedBody).respond({\n        Id: id,\n        Warnings: null\n      });\n      $httpBackend.expectPOST('dockerapi/containers/' + id + '/start').respond({\n        id: id,\n        Warnings: null\n      });\n      scope.config.name = 'container-name';\n      scope.config.Env = [{\n        name: 'SHELL',\n        value: '/bin/bash'\n      }, {\n        name: 'TERM',\n        value: 'xterm-256color'\n      }];\n      scope.create();\n      $httpBackend.flush();\n    });",
            "file": "unit/app/components/startContainerController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should issue a correct create request to the Docker remote API",
            "suites": [
                "startContainerController",
                "Create and start a container with labels"
            ],
            "updatePoint": {
                "line": 104,
                "column": 70
            },
            "line": 104,
            "code": "    it('should issue a correct create request to the Docker remote API', function () {\n      var controller = createController();\n      var id = '6abd8bfba81cf8a05a76a4bdefcb36c4b66cd02265f4bfcd0e236468696ebc6c';\n      var expectedBody = {\n        name: 'container-name',\n        Labels: {\n          'org.foo.bar': 'Baz',\n          'com.biz.baz': 'Boo'\n        }\n      };\n      expectGetContainers();\n      $httpBackend.expectPOST('dockerapi/containers/create?name=container-name', expectedBody).respond({\n        Id: id,\n        Warnings: null\n      });\n      $httpBackend.expectPOST('dockerapi/containers/' + id + '/start').respond({\n        id: id,\n        Warnings: null\n      });\n      scope.config.name = 'container-name';\n      scope.config.Labels = [{\n        key: 'org.foo.bar',\n        value: 'Baz'\n      }, {\n        key: 'com.biz.baz',\n        value: 'Boo'\n      }];\n      scope.create();\n      $httpBackend.flush();\n    });",
            "file": "unit/app/components/startContainerController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should issue a correct create request to the Docker remote API",
            "suites": [
                "startContainerController",
                "Create and start a container with volumesFrom"
            ],
            "updatePoint": {
                "line": 136,
                "column": 70
            },
            "line": 136,
            "code": "    it('should issue a correct create request to the Docker remote API', function () {\n      var controller = createController();\n      var id = '6abd8bfba81cf8a05a76a4bdefcb36c4b66cd02265f4bfcd0e236468696ebc6c';\n      var expectedBody = {\n        HostConfig: {\n          VolumesFrom: ['parent', 'other:ro']\n        },\n        name: 'container-name'\n      };\n      expectGetContainers();\n      $httpBackend.expectPOST('dockerapi/containers/create?name=container-name', expectedBody).respond({\n        Id: id,\n        Warnings: null\n      });\n      $httpBackend.expectPOST('dockerapi/containers/' + id + '/start').respond({\n        id: id,\n        Warnings: null\n      });\n      scope.config.name = 'container-name';\n      scope.config.HostConfig.VolumesFrom = [{\n        name: 'parent'\n      }, {\n        name: 'other:ro'\n      }];\n      scope.create();\n      $httpBackend.flush();\n    });",
            "file": "unit/app/components/startContainerController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should issue a correct create request to the Docker remote API",
            "suites": [
                "startContainerController",
                "Create and start a container with multiple options"
            ],
            "updatePoint": {
                "line": 165,
                "column": 70
            },
            "line": 165,
            "code": "    it('should issue a correct create request to the Docker remote API', function () {\n      var controller = createController();\n      var id = '6abd8bfba81cf8a05a76a4bdefcb36c4b66cd02265f4bfcd0e236468696ebc6c';\n      var expectedBody = {\n        Volumes: ['/var/www'],\n        SecurityOpts: ['label:type:svirt_apache'],\n        HostConfig: {\n          Binds: ['/app:/app'],\n          Links: ['web:db'],\n          Dns: ['8.8.8.8'],\n          DnsSearch: ['example.com'],\n          CapAdd: ['cap_sys_admin'],\n          CapDrop: ['cap_foo_bar'],\n          Devices: [{\n            PathOnHost: '/dev/deviceName',\n            PathInContainer: '/dev/deviceName',\n            CgroupPermissions: 'mrw'\n          }],\n          Sysctls: {\n            'net.ipv6.conf.all.disable_ipv6': '0'\n          },\n          LxcConf: {\n            'lxc.utsname': 'docker'\n          },\n          ExtraHosts: ['hostname:127.0.0.1'],\n          RestartPolicy: {\n            name: 'always',\n            MaximumRetryCount: 5\n          }\n        },\n        name: 'container-name'\n      };\n      expectGetContainers();\n      $httpBackend.expectPOST('dockerapi/containers/create?name=container-name', expectedBody).respond({\n        Id: id,\n        Warnings: null\n      });\n      $httpBackend.expectPOST('dockerapi/containers/' + id + '/start').respond({\n        id: id,\n        Warnings: null\n      });\n      scope.config.name = 'container-name';\n      scope.config.Volumes = [{\n        name: '/var/www'\n      }];\n      scope.config.SecurityOpts = [{\n        name: 'label:type:svirt_apache'\n      }];\n      scope.config.NetworkDisabled = true;\n      scope.config.Tty = true;\n      scope.config.OpenStdin = true;\n      scope.config.StdinOnce = true;\n      scope.config.HostConfig.Binds = [{\n        name: '/app:/app'\n      }];\n      scope.config.HostConfig.Links = [{\n        name: 'web:db'\n      }];\n      scope.config.HostConfig.Dns = [{\n        name: '8.8.8.8'\n      }];\n      scope.config.HostConfig.DnsSearch = [{\n        name: 'example.com'\n      }];\n      scope.config.HostConfig.CapAdd = [{\n        name: 'cap_sys_admin'\n      }];\n      scope.config.HostConfig.CapDrop = [{\n        name: 'cap_foo_bar'\n      }];\n      scope.config.HostConfig.PublishAllPorts = true;\n      scope.config.HostConfig.Privileged = true;\n      scope.config.HostConfig.RestartPolicy = {\n        name: 'always',\n        MaximumRetryCount: 5\n      };\n      scope.config.HostConfig.Devices = [{\n        PathOnHost: '/dev/deviceName',\n        PathInContainer: '/dev/deviceName',\n        CgroupPermissions: 'mrw'\n      }];\n      scope.config.HostConfig.Sysctls = [{\n        name: 'net.ipv6.conf.all.disable_ipv6',\n        value: '0'\n      }];\n      scope.config.HostConfig.LxcConf = [{\n        name: 'lxc.utsname',\n        value: 'docker'\n      }];\n      scope.config.HostConfig.ExtraHosts = [{\n        host: 'hostname',\n        ip: '127.0.0.1'\n      }];\n      scope.create();\n      $httpBackend.flush();\n    });",
            "file": "unit/app/components/startContainerController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "initializes correctly",
            "suites": [
                "VolumesController"
            ],
            "updatePoint": {
                "line": 13,
                "column": 27
            },
            "line": 13,
            "code": "  it('initializes correctly', function () {\n    expectGetVolumes();\n    $httpBackend.flush();\n  });",
            "file": "unit/app/components/volumesController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "issues correct remove calls to the remote API",
            "suites": [
                "VolumesController"
            ],
            "updatePoint": {
                "line": 17,
                "column": 51
            },
            "line": 17,
            "code": "  it('issues correct remove calls to the remote API', function () {\n    expectGetVolumes();\n    $httpBackend.flush();\n    $scope.volumes[0].Checked = true;\n    $scope.volumes[2].Checked = true;\n    $httpBackend.expectDELETE('dockerapi/volumes/tardis').respond(200);\n    $httpBackend.expectDELETE('dockerapi/volumes/bar').respond(200);\n    $scope.removeAction();\n    $httpBackend.flush();\n  });",
            "file": "unit/app/components/volumesController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "issues a correct volume creation call to the remote API",
            "suites": [
                "VolumesController"
            ],
            "updatePoint": {
                "line": 27,
                "column": 61
            },
            "line": 27,
            "code": "  it('issues a correct volume creation call to the remote API', function () {\n    expectGetVolumes();\n    var createBody = {\n      Name: 'tardis',\n      Driver: 'local'\n    };\n    $httpBackend.expectPOST('dockerapi/volumes/create', createBody).respond(201);\n    expectGetVolumes();\n    $scope.addVolume(createBody);\n    $httpBackend.flush();\n  });",
            "file": "unit/app/components/volumesController.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should truncate the string to 10 characters ending in \"...\" by default",
            "suites": [
                "filters",
                "truncate"
            ],
            "updatePoint": {
                "line": 4,
                "column": 78
            },
            "line": 4,
            "code": "    it('should truncate the string to 10 characters ending in \"...\" by default', inject(function (truncateFilter) {\n      expect(truncateFilter('this is 20 chars long')).toBe('this is...');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should truncate the string to 7 characters ending in \"...\"",
            "suites": [
                "filters",
                "truncate"
            ],
            "updatePoint": {
                "line": 7,
                "column": 66
            },
            "line": 7,
            "code": "    it('should truncate the string to 7 characters ending in \"...\"', inject(function (truncateFilter) {\n      expect(truncateFilter('this is 20 chars long', 7)).toBe('this...');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should truncate the string to 10 characters ending in \"???\"",
            "suites": [
                "filters",
                "truncate"
            ],
            "updatePoint": {
                "line": 10,
                "column": 67
            },
            "line": 10,
            "code": "    it('should truncate the string to 10 characters ending in \"???\"', inject(function (truncateFilter) {\n      expect(truncateFilter('this is 20 chars long', 10, '???')).toBe('this is???');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return an empty string when state is undefined",
            "suites": [
                "filters",
                "getstatetext"
            ],
            "updatePoint": {
                "line": 15,
                "column": 61
            },
            "line": 15,
            "code": "    it('should return an empty string when state is undefined', inject(function (getstatetextFilter) {\n      expect(getstatetextFilter(undefined)).toBe('');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should detect a Ghost state",
            "suites": [
                "filters",
                "getstatetext"
            ],
            "updatePoint": {
                "line": 18,
                "column": 35
            },
            "line": 18,
            "code": "    it('should detect a Ghost state', inject(function (getstatetextFilter) {\n      var state = {\n        Ghost: true,\n        Running: true,\n        Paused: false\n      };\n      expect(getstatetextFilter(state)).toBe('Ghost');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should detect a Paused state",
            "suites": [
                "filters",
                "getstatetext"
            ],
            "updatePoint": {
                "line": 26,
                "column": 36
            },
            "line": 26,
            "code": "    it('should detect a Paused state', inject(function (getstatetextFilter) {\n      var state = {\n        Ghost: false,\n        Running: true,\n        Paused: true\n      };\n      expect(getstatetextFilter(state)).toBe('Running (Paused)');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should detect a Running state",
            "suites": [
                "filters",
                "getstatetext"
            ],
            "updatePoint": {
                "line": 34,
                "column": 37
            },
            "line": 34,
            "code": "    it('should detect a Running state', inject(function (getstatetextFilter) {\n      var state = {\n        Ghost: false,\n        Running: true,\n        Paused: false\n      };\n      expect(getstatetextFilter(state)).toBe('Running');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should detect a Stopped state",
            "suites": [
                "filters",
                "getstatetext"
            ],
            "updatePoint": {
                "line": 42,
                "column": 37
            },
            "line": 42,
            "code": "    it('should detect a Stopped state', inject(function (getstatetextFilter) {\n      var state = {\n        Ghost: false,\n        Running: false,\n        Paused: false\n      };\n      expect(getstatetextFilter(state)).toBe('Stopped');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return default when state is undefined",
            "suites": [
                "filters",
                "getstatelabel"
            ],
            "updatePoint": {
                "line": 52,
                "column": 53
            },
            "line": 52,
            "code": "    it('should return default when state is undefined', inject(function (getstatelabelFilter) {\n      expect(getstatelabelFilter(undefined)).toBe('label-default');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return label-important when a ghost state is detected",
            "suites": [
                "filters",
                "getstatelabel"
            ],
            "updatePoint": {
                "line": 55,
                "column": 68
            },
            "line": 55,
            "code": "    it('should return label-important when a ghost state is detected', inject(function (getstatelabelFilter) {\n      var state = {\n        Ghost: true,\n        Running: true,\n        Paused: false\n      };\n      expect(getstatelabelFilter(state)).toBe('label-important');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return label-success when a running state is detected",
            "suites": [
                "filters",
                "getstatelabel"
            ],
            "updatePoint": {
                "line": 63,
                "column": 68
            },
            "line": 63,
            "code": "    it('should return label-success when a running state is detected', inject(function (getstatelabelFilter) {\n      var state = {\n        Ghost: false,\n        Running: true,\n        Paused: false\n      };\n      expect(getstatelabelFilter(state)).toBe('label-success');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should strip the leading slash from container name",
            "suites": [
                "filters",
                "containername"
            ],
            "updatePoint": {
                "line": 73,
                "column": 58
            },
            "line": 73,
            "code": "    it('should strip the leading slash from container name', inject(function (containernameFilter) {\n      var container = {\n        Names: ['/elegant_ardinghelli']\n      };\n      expect(containernameFilter(container)).toBe('elegant_ardinghelli');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not display empty repo tag",
            "suites": [
                "filters",
                "repotag"
            ],
            "updatePoint": {
                "line": 81,
                "column": 41
            },
            "line": 81,
            "code": "    it('should not display empty repo tag', inject(function (repotagFilter) {\n      var image = {\n        RepoTags: ['<none>:<none>']\n      };\n      expect(repotagFilter(image)).toBe('');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should display a normal repo tag",
            "suites": [
                "filters",
                "repotag"
            ],
            "updatePoint": {
                "line": 87,
                "column": 40
            },
            "line": 87,
            "code": "    it('should display a normal repo tag', inject(function (repotagFilter) {\n      var image = {\n        RepoTags: ['ubuntu:latest']\n      };\n      expect(repotagFilter(image)).toBe('ubuntu:latest');\n    }));",
            "file": "unit/app/shared/filters.spec.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "portainer__portainer.svg"
}