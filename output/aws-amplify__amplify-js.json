{
    "repo": "aws-amplify/amplify-js",
    "url": "https://github.com/aws-amplify/amplify-js",
    "branch": "main",
    "configs": [
        {
            "package": "amazon-cognito-identity-js",
            "lang": "js",
            "dir": "packages/amazon-cognito-identity-js/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/ui-react",
            "lang": "js",
            "dir": "packages/amplify-ui-react/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@aws-amplify/analytics",
            "lang": "ts",
            "dir": "packages/analytics/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/api-graphql",
            "lang": "ts",
            "dir": "packages/api-graphql/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/api-rest",
            "lang": "ts",
            "dir": "packages/api-rest/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/api",
            "lang": "ts",
            "dir": "packages/api/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/auth",
            "lang": "ts",
            "dir": "packages/auth/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "aws-amplify-angular",
            "lang": "js",
            "dir": "packages/aws-amplify-angular/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "aws-amplify-react",
            "lang": "js",
            "dir": "packages/aws-amplify-react/__tests__",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "aws-amplify-vue",
            "lang": "js",
            "dir": "packages/aws-amplify-vue/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "aws-amplify",
            "lang": "ts",
            "dir": "packages/aws-amplify/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/cache",
            "lang": "ts",
            "dir": "packages/cache/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/core",
            "lang": "ts",
            "dir": "packages/core/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/datastore-storage-adapter",
            "lang": "ts",
            "dir": "packages/datastore-storage-adapter/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/datastore",
            "lang": "ts",
            "dir": "packages/datastore/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/geo",
            "lang": "ts",
            "dir": "packages/geo/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/interactions",
            "lang": "ts",
            "dir": "packages/interactions/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/predictions",
            "lang": "ts",
            "dir": "packages/predictions/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/pubsub",
            "lang": "ts",
            "dir": "packages/pubsub/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/pushnotification",
            "lang": "ts",
            "dir": "packages/pushnotification/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/storage",
            "lang": "ts",
            "dir": "packages/storage/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@aws-amplify/xr",
            "lang": "ts",
            "dir": "packages/xr/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "getUsername() should return the instance username",
            "suites": [
                "AuthenticationDetails getter methods"
            ],
            "updatePoint": {
                "line": 5,
                "column": 57,
                "index": 292
            },
            "line": 5,
            "code": "  test('getUsername() should return the instance username', () => {\n    expect(authDetails.getUsername()).toEqual(authDetailData.Username);\n  });",
            "file": "AuthenticationDetails.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getPassword()",
            "suites": [
                "AuthenticationDetails getter methods"
            ],
            "updatePoint": {
                "line": 8,
                "column": 21,
                "index": 402
            },
            "line": 8,
            "code": "  test('getPassword()', () => {\n    expect(authDetails.getPassword()).toEqual(authDetailData.Password);\n  });",
            "file": "AuthenticationDetails.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getValidationData()",
            "suites": [
                "AuthenticationDetails getter methods"
            ],
            "updatePoint": {
                "line": 11,
                "column": 27,
                "index": 518
            },
            "line": 11,
            "code": "  test('getValidationData()', () => {\n    expect(authDetails.getValidationData()).toEqual(authDetailData.ValidationData);\n  });",
            "file": "AuthenticationDetails.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getAuthParameters()",
            "suites": [
                "AuthenticationDetails getter methods"
            ],
            "updatePoint": {
                "line": 14,
                "column": 27,
                "index": 646
            },
            "line": 14,
            "code": "  test('getAuthParameters()', () => {\n    expect(authDetails.getAuthParameters()).toEqual(authDetailData.AuthParameters);\n  });",
            "file": "AuthenticationDetails.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getClientMetadata()",
            "suites": [
                "AuthenticationDetails getter methods"
            ],
            "updatePoint": {
                "line": 17,
                "column": 27,
                "index": 774
            },
            "line": 17,
            "code": "  test('getClientMetadata()', () => {\n    expect(authDetails.getClientMetadata()).toEqual(authDetailData.ClientMetadata);\n  });",
            "file": "AuthenticationDetails.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "padHex(bigInteger.fromInt(%p))\t=== %p",
            "suites": [
                "AuthenticatorHelper for padHex "
            ],
            "line": 31,
            "code": "  test.each([[-256, 'FF00'], [-255, 'FF01'], [-254, 'FF02'], [-253, 'FF03'], [-252, 'FF04'], [-251, 'FF05'], [-250, 'FF06'], [-249, 'FF07'], [-248, 'FF08'], [-247, 'FF09'], [-246, 'FF0A'], [-245, 'FF0B'], [-244, 'FF0C'], [-243, 'FF0D'], [-242, 'FF0E'], [-241, 'FF0F'], [-240, 'FF10'], [-239, 'FF11'], [-238, 'FF12'], [-237, 'FF13'], [-236, 'FF14'], [-235, 'FF15'], [-234, 'FF16'], [-233, 'FF17'], [-232, 'FF18'], [-231, 'FF19'], [-230, 'FF1A'], [-229, 'FF1B'], [-228, 'FF1C'], [-227, 'FF1D'], [-226, 'FF1E'], [-225, 'FF1F'], [-224, 'FF20'], [-223, 'FF21'], [-222, 'FF22'], [-221, 'FF23'], [-220, 'FF24'], [-219, 'FF25'], [-218, 'FF26'], [-217, 'FF27'], [-216, 'FF28'], [-215, 'FF29'], [-214, 'FF2A'], [-213, 'FF2B'], [-212, 'FF2C'], [-211, 'FF2D'], [-210, 'FF2E'], [-209, 'FF2F'], [-208, 'FF30'], [-207, 'FF31'], [-206, 'FF32'], [-205, 'FF33'], [-204, 'FF34'], [-203, 'FF35'], [-202, 'FF36'], [-201, 'FF37'], [-200, 'FF38'], [-199, 'FF39'], [-198, 'FF3A'], [-197, 'FF3B'], [-196, 'FF3C'], [-195, 'FF3D'], [-194, 'FF3E'], [-193, 'FF3F'], [-192, 'FF40'], [-191, 'FF41'], [-190, 'FF42'], [-189, 'FF43'], [-188, 'FF44'], [-187, 'FF45'], [-186, 'FF46'], [-185, 'FF47'], [-184, 'FF48'], [-183, 'FF49'], [-182, 'FF4A'], [-181, 'FF4B'], [-180, 'FF4C'], [-179, 'FF4D'], [-178, 'FF4E'], [-177, 'FF4F'], [-176, 'FF50'], [-175, 'FF51'], [-174, 'FF52'], [-173, 'FF53'], [-172, 'FF54'], [-171, 'FF55'], [-170, 'FF56'], [-169, 'FF57'], [-168, 'FF58'], [-167, 'FF59'], [-166, 'FF5A'], [-165, 'FF5B'], [-164, 'FF5C'], [-163, 'FF5D'], [-162, 'FF5E'], [-161, 'FF5F'], [-160, 'FF60'], [-159, 'FF61'], [-158, 'FF62'], [-157, 'FF63'], [-156, 'FF64'], [-155, 'FF65'], [-154, 'FF66'], [-153, 'FF67'], [-152, 'FF68'], [-151, 'FF69'], [-150, 'FF6A'], [-149, 'FF6B'], [-148, 'FF6C'], [-147, 'FF6D'], [-146, 'FF6E'], [-145, 'FF6F'], [-144, 'FF70'], [-143, 'FF71'], [-142, 'FF72'], [-141, 'FF73'], [-140, 'FF74'], [-139, 'FF75'], [-138, 'FF76'], [-137, 'FF77'], [-136, 'FF78'], [-135, 'FF79'], [-134, 'FF7A'], [-133, 'FF7B'], [-132, 'FF7C'], [-131, 'FF7D'], [-130, 'FF7E'], [-129, 'FF7F'], [-128, '80'], [-127, '81'], [-126, '82'], [-125, '83'], [-124, '84'], [-123, '85'], [-122, '86'], [-121, '87'], [-120, '88'], [-119, '89'], [-118, '8A'], [-117, '8B'], [-116, '8C'], [-115, '8D'], [-114, '8E'], [-113, '8F'], [-112, '90'], [-111, '91'], [-110, '92'], [-109, '93'], [-108, '94'], [-107, '95'], [-106, '96'], [-105, '97'], [-104, '98'], [-103, '99'], [-102, '9A'], [-101, '9B'], [-100, '9C'], [-99, '9D'], [-98, '9E'], [-97, '9F'], [-96, 'A0'], [-95, 'A1'], [-94, 'A2'], [-93, 'A3'], [-92, 'A4'], [-91, 'A5'], [-90, 'A6'], [-89, 'A7'], [-88, 'A8'], [-87, 'A9'], [-86, 'AA'], [-85, 'AB'], [-84, 'AC'], [-83, 'AD'], [-82, 'AE'], [-81, 'AF'], [-80, 'B0'], [-79, 'B1'], [-78, 'B2'], [-77, 'B3'], [-76, 'B4'], [-75, 'B5'], [-74, 'B6'], [-73, 'B7'], [-72, 'B8'], [-71, 'B9'], [-70, 'BA'], [-69, 'BB'], [-68, 'BC'], [-67, 'BD'], [-66, 'BE'], [-65, 'BF'], [-64, 'C0'], [-63, 'C1'], [-62, 'C2'], [-61, 'C3'], [-60, 'C4'], [-59, 'C5'], [-58, 'C6'], [-57, 'C7'], [-56, 'C8'], [-55, 'C9'], [-54, 'CA'], [-53, 'CB'], [-52, 'CC'], [-51, 'CD'], [-50, 'CE'], [-49, 'CF'], [-48, 'D0'], [-47, 'D1'], [-46, 'D2'], [-45, 'D3'], [-44, 'D4'], [-43, 'D5'], [-42, 'D6'], [-41, 'D7'], [-40, 'D8'], [-39, 'D9'], [-38, 'DA'], [-37, 'DB'], [-36, 'DC'], [-35, 'DD'], [-34, 'DE'], [-33, 'DF'], [-32, 'E0'], [-31, 'E1'], [-30, 'E2'], [-29, 'E3'], [-28, 'E4'], [-27, 'E5'], [-26, 'E6'], [-25, 'E7'], [-24, 'E8'], [-23, 'E9'], [-22, 'EA'], [-21, 'EB'], [-20, 'EC'], [-19, 'ED'], [-18, 'EE'], [-17, 'EF'], [-16, 'F0'], [-15, 'F1'], [-14, 'F2'], [-13, 'F3'], [-12, 'F4'], [-11, 'F5'], [-10, 'F6'], [-9, 'F7'], [-8, 'F8'], [-7, 'F9'], [-6, 'FA'], [-5, 'FB'], [-4, 'FC'], [-3, 'FD'], [-2, 'FE'], [-1, 'FF'], [0, '00'], [1, '01'], [2, '02'], [3, '03'], [4, '04'], [5, '05'], [6, '06'], [7, '07'], [8, '08'], [9, '09'], [10, '0A'], [11, '0B'], [12, '0C'], [13, '0D'], [14, '0E'], [15, '0F'], [16, '10'], [17, '11'], [18, '12'], [19, '13'], [20, '14'], [21, '15'], [22, '16'], [23, '17'], [24, '18'], [25, '19'], [26, '1A'], [27, '1B'], [28, '1C'], [29, '1D'], [30, '1E'], [31, '1F'], [32, '20'], [33, '21'], [34, '22'], [35, '23'], [36, '24'], [37, '25'], [38, '26'], [39, '27'], [40, '28'], [41, '29'], [42, '2A'], [43, '2B'], [44, '2C'], [45, '2D'], [46, '2E'], [47, '2F'], [48, '30'], [49, '31'], [50, '32'], [51, '33'], [52, '34'], [53, '35'], [54, '36'], [55, '37'], [56, '38'], [57, '39'], [58, '3A'], [59, '3B'], [60, '3C'], [61, '3D'], [62, '3E'], [63, '3F'], [64, '40'], [65, '41'], [66, '42'], [67, '43'], [68, '44'], [69, '45'], [70, '46'], [71, '47'], [72, '48'], [73, '49'], [74, '4A'], [75, '4B'], [76, '4C'], [77, '4D'], [78, '4E'], [79, '4F'], [80, '50'], [81, '51'], [82, '52'], [83, '53'], [84, '54'], [85, '55'], [86, '56'], [87, '57'], [88, '58'], [89, '59'], [90, '5A'], [91, '5B'], [92, '5C'], [93, '5D'], [94, '5E'], [95, '5F'], [96, '60'], [97, '61'], [98, '62'], [99, '63'], [100, '64'], [101, '65'], [102, '66'], [103, '67'], [104, '68'], [105, '69'], [106, '6A'], [107, '6B'], [108, '6C'], [109, '6D'], [110, '6E'], [111, '6F'], [112, '70'], [113, '71'], [114, '72'], [115, '73'], [116, '74'], [117, '75'], [118, '76'], [119, '77'], [120, '78'], [121, '79'], [122, '7A'], [123, '7B'], [124, '7C'], [125, '7D'], [126, '7E'], [127, '7F'], [128, '0080'], [129, '0081'], [130, '0082'], [131, '0083'], [132, '0084'], [133, '0085'], [134, '0086'], [135, '0087'], [136, '0088'], [137, '0089'], [138, '008A'], [139, '008B'], [140, '008C'], [141, '008D'], [142, '008E'], [143, '008F'], [144, '0090'], [145, '0091'], [146, '0092'], [147, '0093'], [148, '0094'], [149, '0095'], [150, '0096'], [151, '0097'], [152, '0098'], [153, '0099'], [154, '009A'], [155, '009B'], [156, '009C'], [157, '009D'], [158, '009E'], [159, '009F'], [160, '00A0'], [161, '00A1'], [162, '00A2'], [163, '00A3'], [164, '00A4'], [165, '00A5'], [166, '00A6'], [167, '00A7'], [168, '00A8'], [169, '00A9'], [170, '00AA'], [171, '00AB'], [172, '00AC'], [173, '00AD'], [174, '00AE'], [175, '00AF'], [176, '00B0'], [177, '00B1'], [178, '00B2'], [179, '00B3'], [180, '00B4'], [181, '00B5'], [182, '00B6'], [183, '00B7'], [184, '00B8'], [185, '00B9'], [186, '00BA'], [187, '00BB'], [188, '00BC'], [189, '00BD'], [190, '00BE'], [191, '00BF'], [192, '00C0'], [193, '00C1'], [194, '00C2'], [195, '00C3'], [196, '00C4'], [197, '00C5'], [198, '00C6'], [199, '00C7'], [200, '00C8'], [201, '00C9'], [202, '00CA'], [203, '00CB'], [204, '00CC'], [205, '00CD'], [206, '00CE'], [207, '00CF'], [208, '00D0'], [209, '00D1'], [210, '00D2'], [211, '00D3'], [212, '00D4'], [213, '00D5'], [214, '00D6'], [215, '00D7'], [216, '00D8'], [217, '00D9'], [218, '00DA'], [219, '00DB'], [220, '00DC'], [221, '00DD'], [222, '00DE'], [223, '00DF'], [224, '00E0'], [225, '00E1'], [226, '00E2'], [227, '00E3'], [228, '00E4'], [229, '00E5'], [230, '00E6'], [231, '00E7'], [232, '00E8'], [233, '00E9'], [234, '00EA'], [235, '00EB'], [236, '00EC'], [237, '00ED'], [238, '00EE'], [239, '00EF'], [240, '00F0'], [241, '00F1'], [242, '00F2'], [243, '00F3'], [244, '00F4'], [245, '00F5'], [246, '00F6'], [247, '00F7'], [248, '00F8'], [249, '00F9'], [250, '00FA'], [251, '00FB'], [252, '00FC'], [253, '00FD'], [254, '00FE'], [255, '00FF'], [256, '0100']])('padHex(bigInteger.fromInt(%p))\\t=== %p', (i, expected) => {\n    const bigInt = new BigInteger();\n    bigInt.fromInt(i);\n    const x = instance.padHex(bigInt);\n    expect(x.toLowerCase()).toBe(expected.toLowerCase());\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getSmallA() should match the instance variable",
            "suites": [
                "Getters for AuthHelper class"
            ],
            "updatePoint": {
                "line": 39,
                "column": 54,
                "index": 8631
            },
            "line": 39,
            "code": "  test('getSmallA() should match the instance variable', () => {\n    expect(instance.getSmallAValue()).toBe(instance.smallAValue);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getRandomPassword() should match instance variable",
            "suites": [
                "Getters for AuthHelper class"
            ],
            "updatePoint": {
                "line": 42,
                "column": 58,
                "index": 8772
            },
            "line": 42,
            "code": "  test('getRandomPassword() should match instance variable', () => {\n    expect(instance.getRandomPassword()).toBe(instance.randomPassword);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getSaltDevices() should match instance variable SaltDevices",
            "suites": [
                "Getters for AuthHelper class"
            ],
            "updatePoint": {
                "line": 45,
                "column": 67,
                "index": 8928
            },
            "line": 45,
            "code": "  test('getSaltDevices() should match instance variable SaltDevices', () => {\n    expect(instance.getSaltDevices()).toBe(instance.SaltToHashDevices);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getVerifierDevices() should match instance variable verifierDevices",
            "suites": [
                "Getters for AuthHelper class"
            ],
            "updatePoint": {
                "line": 48,
                "column": 75,
                "index": 9092
            },
            "line": 48,
            "code": "  test('getVerifierDevices() should match instance variable verifierDevices', () => {\n    expect(instance.getVerifierDevices()).toBe(instance.verifierDevices);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Constant prefix for new password challenge",
            "suites": [
                "Getters for AuthHelper class"
            ],
            "updatePoint": {
                "line": 51,
                "column": 50,
                "index": 9233
            },
            "line": 51,
            "code": "  test('Constant prefix for new password challenge', () => {\n    expect(instance.getNewPasswordRequiredChallengeUserAttributePrefix()).toEqual('userAttributes.');\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path should callback with a calculateA bigInt",
            "suites": [
                "getLargeAValue()"
            ],
            "updatePoint": {
                "line": 61,
                "column": 59,
                "index": 9562
            },
            "line": 61,
            "code": "  test('happy path should callback with a calculateA bigInt', async () => {\n    const result = await promisifyCallback(instance, 'getLargeAValue');\n    expect(result).toEqual(instance.largeAValue);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "when largeAValue exists, getLargeA should return it",
            "suites": [
                "getLargeAValue()"
            ],
            "updatePoint": {
                "line": 65,
                "column": 59,
                "index": 9766
            },
            "line": 65,
            "code": "  test('when largeAValue exists, getLargeA should return it', async () => {\n    expect(instance.largeAValue).not.toBe(null);\n    await promisifyCallback(instance, 'getLargeAValue').then(res => {\n      expect(res).toEqual(instance.largeAValue);\n    });\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "mock an error from calculate A",
            "suites": [
                "getLargeAValue()"
            ],
            "updatePoint": {
                "line": 71,
                "column": 38,
                "index": 10003
            },
            "line": 71,
            "code": "  test('mock an error from calculate A', async () => {\n    instance.largeAValue = null;\n    jest.spyOn(AuthenticationHelper.prototype, 'calculateA').mockImplementationOnce((...[, callback]) => {\n      callback(bigIntError, null);\n    });\n    await promisifyCallback(instance, 'getLargeAValue').catch(e => {\n      expect(e).toEqual(bigIntError);\n    });\n\n    //preserving invariant of largeAValue\n    const cb = jest.fn();\n    instance.getLargeAValue(cb);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Generate Random Small A is generating a BigInteger",
            "suites": [
                "generateRandomSmallA(), generateRandomString()"
            ],
            "updatePoint": {
                "line": 86,
                "column": 58,
                "index": 10555
            },
            "line": 86,
            "code": "  test('Generate Random Small A is generating a BigInteger', () => {\n    expect(instance.generateRandomSmallA()).toBeInstanceOf(BigInteger);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Ensure that generateRandomSmallA is non deterministic",
            "suites": [
                "generateRandomSmallA(), generateRandomString()"
            ],
            "updatePoint": {
                "line": 89,
                "column": 61,
                "index": 10705
            },
            "line": 89,
            "code": "  test('Ensure that generateRandomSmallA is non deterministic', () => {\n    const firstSmallA = instance.generateRandomSmallA();\n    const secondSmallA = instance.generateRandomSmallA();\n    expect(firstSmallA).not.toEqual(secondSmallA);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Generate random strings",
            "suites": [
                "generateRandomSmallA(), generateRandomString()"
            ],
            "updatePoint": {
                "line": 94,
                "column": 31,
                "index": 10919
            },
            "line": 94,
            "code": "  test('Generate random strings', () => {\n    //AuthHelper generates 40 randomBytes and convert it to a base64 string\n    expect(instance.generateRandomString().length).toEqual(56);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Generate random strings is non-deterministic",
            "suites": [
                "generateRandomSmallA(), generateRandomString()"
            ],
            "updatePoint": {
                "line": 98,
                "column": 52,
                "index": 11128
            },
            "line": 98,
            "code": "  test('Generate random strings is non-deterministic', () => {\n    expect(instance.generateRandomString()).not.toEqual(instance.generateRandomString());\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path for generate hash devices should instantiate the verifierDevices of the instance",
            "suites": [
                "generateHashDevice()"
            ],
            "updatePoint": {
                "line": 103,
                "column": 99,
                "index": 11379
            },
            "line": 103,
            "code": "  test('happy path for generate hash devices should instantiate the verifierDevices of the instance', async () => {\n    const deviceGroupKey = instance.generateRandomString();\n    const username = instance.generateRandomString();\n    expect(instance.getVerifierDevices()).toEqual(undefined);\n    await promisifyCallback(instance, 'generateHashDevice', deviceGroupKey, username);\n    expect(instance.getVerifierDevices()).toEqual(instance.verifierDevices);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "modPow throws an error",
            "suites": [
                "generateHashDevice()"
            ],
            "updatePoint": {
                "line": 110,
                "column": 30,
                "index": 11772
            },
            "line": 110,
            "code": "  test('modPow throws an error', async () => {\n    const deviceGroupKey = instance.generateRandomString();\n    const username = instance.generateRandomString();\n    jest.spyOn(BigInteger.prototype, 'modPow').mockImplementationOnce((...args) => {\n      args[2](bigIntError, null);\n    });\n    await promisifyCallback(instance, 'generateHashDevice', deviceGroupKey, username).catch(e => {\n      expect(e).toEqual(bigIntError);\n    });\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Calculate A happy path",
            "suites": [
                "calculateA()"
            ],
            "updatePoint": {
                "line": 129,
                "column": 30,
                "index": 12383
            },
            "line": 129,
            "code": "  test('Calculate A happy path', async () => {\n    const result = await promisifyCallback(instance, 'calculateA', instance.smallAValue);\n    //length of the big integer\n    expect(Object.keys(result).length).toEqual(223);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "calculateA gets an error from g.modPow",
            "suites": [
                "calculateA()"
            ],
            "updatePoint": {
                "line": 134,
                "column": 46,
                "index": 12627
            },
            "line": 134,
            "code": "  test('calculateA gets an error from g.modPow', async () => {\n    jest.spyOn(BigInteger.prototype, 'modPow').mockImplementationOnce((...[,, callback]) => {\n      callback(bigIntError, null);\n    });\n    await promisifyCallback(instance, 'calculateA', instance.smallAValue).catch(e => {\n      expect(e).toEqual(bigIntError);\n    });\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "A mod N equals BigInt 0 should throw an illegal parameter error",
            "suites": [
                "calculateA()"
            ],
            "updatePoint": {
                "line": 142,
                "column": 71,
                "index": 12991
            },
            "line": 142,
            "code": "  test('A mod N equals BigInt 0 should throw an illegal parameter error', async () => {\n    jest.spyOn(BigInteger.prototype, 'modPow').mockImplementationOnce((...[,, callback]) => {\n      callback(null, BigInteger.ZERO);\n    });\n    await promisifyCallback(instance, 'calculateA', instance.smallAValue).catch(e => {\n      expect(e).toEqual(new Error('Illegal paramater. A mod N cannot be 0.'));\n    });\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Calculate the client's value U",
            "suites": [
                "calculateU()"
            ],
            "updatePoint": {
                "line": 152,
                "column": 38,
                "index": 13404
            },
            "line": 152,
            "code": "  test(\"Calculate the client's value U\", () => {\n    const hexA = new BigInteger('abcd1234', 16);\n    const hexB = new BigInteger('deadbeef', 16);\n    const hashed = instance.hexHash(instance.padHex(hexA) + instance.padHex(hexB));\n    const expected = new BigInteger(hashed, 16);\n    const result = instance.calculateU(hexA, hexB);\n    expect(expected).toEqual(result);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Test hexHash function produces a valid hex string with regex",
            "suites": [
                "hexhash() and hash()"
            ],
            "updatePoint": {
                "line": 162,
                "column": 68,
                "index": 13855
            },
            "line": 162,
            "code": "  test('Test hexHash function produces a valid hex string with regex', () => {\n    const regEx = /[0-9a-f]/g;\n    const awsCryptoHash = new Sha256();\n    awsCryptoHash.update('testString');\n    const resultFromAWSCrypto = awsCryptoHash.digestSync();\n    const hashHex = Buffer.from(resultFromAWSCrypto).toString('hex');\n    expect(regEx.test(instance.hexHash(hashHex))).toBe(true);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Hashing a buffer returns a string",
            "suites": [
                "hexhash() and hash()"
            ],
            "updatePoint": {
                "line": 170,
                "column": 41,
                "index": 14216
            },
            "line": 170,
            "code": "  test('Hashing a buffer returns a string', () => {\n    const buf = Buffer.from('7468697320697320612074c3a97374', 'binary');\n    expect(typeof instance.hash(buf)).toBe('string');\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path hkdf algorithm returns a length 16 hex string",
            "suites": [
                "computehkdf()"
            ],
            "updatePoint": {
                "line": 176,
                "column": 64,
                "index": 14462
            },
            "line": 176,
            "code": "  test('happy path hkdf algorithm returns a length 16 hex string', () => {\n    const inputKey = Buffer.from('secretInputKey', 'ascii');\n    const salt = Buffer.from('7468697320697320612074c3a97374', 'hex');\n    const key = instance.computehkdf(inputKey, salt);\n    expect(Object.keys(key).length).toEqual(16);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy path should computeHKDF",
            "suites": [
                "getPasswordAuthKey()"
            ],
            "updatePoint": {
                "line": 195,
                "column": 37,
                "index": 15120
            },
            "line": 195,
            "code": "  test('Happy path should computeHKDF', async () => {\n    const result = await promisifyCallback(instance, 'getPasswordAuthenticationKey', username, password, realServerValue, salt);\n    expect(Object.keys(result).length).toEqual(16);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "failing within calculateS callback",
            "suites": [
                "getPasswordAuthKey()"
            ],
            "updatePoint": {
                "line": 199,
                "column": 42,
                "index": 15366
            },
            "line": 199,
            "code": "  test('failing within calculateS callback', async () => {\n    jest.spyOn(AuthenticationHelper.prototype, 'calculateS').mockImplementationOnce((...[,, callback]) => {\n      callback(bigIntError, null);\n    });\n    await promisifyCallback(instance, 'getPasswordAuthenticationKey', username, password, realServerValue, salt).catch(e => {\n      expect(e).toEqual(bigIntError);\n    });\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Getting a bad server value",
            "suites": [
                "getPasswordAuthKey()"
            ],
            "updatePoint": {
                "line": 207,
                "column": 34,
                "index": 15746
            },
            "line": 207,
            "code": "  test('Getting a bad server value', async () => {\n    await promisifyCallback(instance, 'getPasswordAuthenticationKey', username, password, badServerValue, salt).catch(e => {\n      expect(e).toEqual(new Error('B cannot be zero.'));\n    });\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Getting a U Value of zero",
            "suites": [
                "getPasswordAuthKey()"
            ],
            "updatePoint": {
                "line": 212,
                "column": 33,
                "index": 15992
            },
            "line": 212,
            "code": "  test('Getting a U Value of zero', async () => {\n    jest.spyOn(AuthenticationHelper.prototype, 'calculateU').mockImplementationOnce(() => {\n      return BigInteger.ZERO;\n    });\n    const realServerValue = new BigInteger('deadbeef', 16);\n    await promisifyCallback(instance, 'getPasswordAuthenticationKey', username, password, realServerValue, salt).catch(e => {\n      expect(e).toEqual(new Error('U cannot be zero.'));\n    });\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path should callback with null, and a bigInteger",
            "suites": [
                "calculateS()"
            ],
            "updatePoint": {
                "line": 228,
                "column": 62,
                "index": 16652
            },
            "line": 228,
            "code": "  test('happy path should callback with null, and a bigInteger', async () => {\n    instance.k = new BigInteger('deadbeef', 16);\n    instance.UValue = instance.calculateU(instance.largeAValue, xValue);\n    const result = await promisifyCallback(instance, 'calculateS', xValue, serverValue);\n    //length of the big integer\n    expect(Object.keys(result).length).toEqual(113);\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "modPow throws an error ",
            "suites": [
                "calculateS()"
            ],
            "updatePoint": {
                "line": 235,
                "column": 31,
                "index": 17002
            },
            "line": 235,
            "code": "  test('modPow throws an error ', async () => {\n    jest.spyOn(BigInteger.prototype, 'modPow').mockImplementationOnce((...args) => {\n      args[2](bigIntError, null);\n    });\n    await promisifyCallback(instance, 'calculateS', xValue, serverValue).catch(e => {\n      expect(e).toEqual(bigIntError);\n    });\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "second modPow throws an error ",
            "suites": [
                "calculateS()"
            ],
            "updatePoint": {
                "line": 243,
                "column": 38,
                "index": 17322
            },
            "line": 243,
            "code": "  test('second modPow throws an error ', async () => {\n    // need to mock a working modPow to then fail in the second mock\n    jest.spyOn(BigInteger.prototype, 'modPow').mockImplementationOnce((...args) => {\n      args[2](null, new BigInteger('deadbeef', 16));\n    });\n    jest.spyOn(BigInteger.prototype, 'modPow').mockImplementationOnce((...args) => {\n      args[2](bigIntError, null);\n    });\n    await promisifyCallback(instance, 'calculateS', xValue, serverValue).catch(e => {\n      expect(e).toEqual(bigIntError);\n    });\n  });",
            "file": "AuthenticationHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "should support positive numbers",
            "suites": [
                "BigInteger",
                ".toString(radix)"
            ],
            "updatePoint": {
                "line": 4,
                "column": 39,
                "index": 154
            },
            "line": 4,
            "code": "    it('should support positive numbers', () => {\n      expect(new BigInteger('abcd1234', 16).toString(4)).toBe('2223303101020310');\n    });",
            "file": "BigInteger.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "should support negative numbers",
            "suites": [
                "BigInteger",
                ".toString(radix)"
            ],
            "updatePoint": {
                "line": 7,
                "column": 39,
                "index": 295
            },
            "line": 7,
            "code": "    it('should support negative numbers', () => {\n      expect(new BigInteger('-abcd1234', 16).toString(4)).toBe('-2223303101020310');\n    });",
            "file": "BigInteger.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Promisify request happy case",
            "suites": [
                "Client unit test suite",
                "Promisify Request tests"
            ],
            "updatePoint": {
                "line": 16,
                "column": 38,
                "index": 646
            },
            "line": 16,
            "code": "    test('Promisify request happy case', () => {\n      netRequestMockSuccess(true);\n      const data = client.promisifyRequest({}, {});\n      Promise.resolve(data).then(res => {\n        expect(res).toEqual({});\n      });\n    });",
            "file": "Client.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Promisify request throws an error",
            "suites": [
                "Client unit test suite",
                "Promisify Request tests"
            ],
            "updatePoint": {
                "line": 23,
                "column": 43,
                "index": 880
            },
            "line": 23,
            "code": "    test('Promisify request throws an error', () => {\n      netRequestMockSuccess(false);\n      const error = client.promisifyRequest({}, {});\n      Promise.resolve(error).catch(err => {\n        expect(err).toMatchObject(networkError);\n      });\n    });",
            "file": "Client.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy case for request",
            "suites": [
                "Client unit test suite",
                "Request unit tests"
            ],
            "updatePoint": {
                "line": 36,
                "column": 32,
                "index": 1283
            },
            "line": 36,
            "code": "    test('Happy case for request', async () => {\n      const fetchSpy = jest.spyOn(window, 'fetch');\n      addAuthCategoryToCognitoUserAgent();\n      addFrameworkToCognitoUserAgent('0');\n      window.fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          endpoint: endpoint\n        })\n      });\n      await promisifyCallback(client, 'request', '', {}).then(res => {\n        expect(res).toMatchObject({\n          endpoint: endpoint\n        });\n      });\n      expect(fetchSpy).toHaveBeenCalledWith(expect.anything(), expect.objectContaining({\n        headers: expect.objectContaining({\n          'X-Amz-User-Agent': `${getUserAgent()} auth framework/0`\n        })\n      }));\n    });",
            "file": "Client.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Network Error case for request",
            "suites": [
                "Client unit test suite",
                "Request unit tests"
            ],
            "updatePoint": {
                "line": 57,
                "column": 40,
                "index": 2005
            },
            "line": 57,
            "code": "    test('Network Error case for request', async () => {\n      jest.spyOn(window, 'fetch');\n      const networkError = new TypeError('Network Error');\n      fetch.mockRejectedValue(networkError);\n      await promisifyCallback(client, 'request', '', {}).catch(err => {\n        expect(err).toMatchObject({\n          message: 'Network error'\n        });\n      });\n    });",
            "file": "Client.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Network success but downstream error",
            "suites": [
                "Client unit test suite",
                "Request unit tests"
            ],
            "updatePoint": {
                "line": 67,
                "column": 46,
                "index": 2380
            },
            "line": 67,
            "code": "    test('Network success but downstream error', async () => {\n      jest.spyOn(window, 'fetch');\n      window.fetch.mockResolvedValueOnce({\n        ok: false,\n        json: async () => ({\n          __type: 'test'\n        })\n      });\n      await promisifyCallback(client, 'request', '', {}).catch(err => {\n        expect(err).toMatchObject({\n          code: 'test'\n        });\n      });\n    });",
            "file": "Client.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "uses default endpoint when none is provided",
            "suites": [
                "Client unit test suite",
                "Request unit tests"
            ],
            "updatePoint": {
                "line": 81,
                "column": 53,
                "index": 2783
            },
            "line": 81,
            "code": "    test('uses default endpoint when none is provided', async () => {\n      const clientWithEndpoint = new Client(region, null, {});\n      jest.spyOn(window, 'fetch');\n      window.fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({})\n      });\n      jest.fn(window, 'fetch');\n      await clientWithEndpoint.promisifyRequest('', {});\n      expect(fetch).toHaveBeenCalledWith(`https://cognito-idp.${region}.amazonaws.com/`, expect.any(Object));\n    });",
            "file": "Client.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "uses a provided endpoint for requests",
            "suites": [
                "Client unit test suite",
                "Request unit tests"
            ],
            "updatePoint": {
                "line": 92,
                "column": 47,
                "index": 3254
            },
            "line": 92,
            "code": "    test('uses a provided endpoint for requests', async () => {\n      const MOCK_ENDPOINT = 'MOCK_ENDPOINT';\n      const clientWithEndpoint = new Client(region, MOCK_ENDPOINT, {});\n      jest.spyOn(window, 'fetch');\n      window.fetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({})\n      });\n      await clientWithEndpoint.promisifyRequest('', {});\n      expect(fetch).toHaveBeenCalledWith(MOCK_ENDPOINT, expect.any(Object));\n    });",
            "file": "Client.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Constructor works given a token as a string",
            "suites": [
                "Constructor methods"
            ],
            "updatePoint": {
                "line": 4,
                "column": 51,
                "index": 214
            },
            "line": 4,
            "code": "  test('Constructor works given a token as a string', () => {\n    const cognitoAccess = new CognitoAccessToken({\n      AccessToken: sampleEncodedToken\n    });\n    expect(cognitoAccess.decodePayload().exp).toBe(expDecoded);\n  });",
            "file": "CognitoAccessToken.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Constructor works with no token",
            "suites": [
                "Constructor methods"
            ],
            "updatePoint": {
                "line": 10,
                "column": 39,
                "index": 431
            },
            "line": 10,
            "code": "  test('Constructor works with no token', () => {\n    const cognitoAccess = new CognitoAccessToken();\n    expect(cognitoAccess.decodePayload()).toEqual({});\n  });",
            "file": "CognitoAccessToken.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Constructing a CognitoID Token",
            "suites": [
                "Constructor for CognitoId Token"
            ],
            "updatePoint": {
                "line": 3,
                "column": 38,
                "index": 143
            },
            "line": 3,
            "code": "  test('Constructing a CognitoID Token', () => {\n    const cognitoToken = new CognitoIdToken('testToken');\n    expect(cognitoToken.jwtToken).toBe('');\n  });",
            "file": "CognitoIdToken.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Getting JWT Token",
            "suites": [
                "Accessor methods"
            ],
            "updatePoint": {
                "line": 5,
                "column": 25,
                "index": 271
            },
            "line": 5,
            "code": "  test('Getting JWT Token', () => {\n    expect(cognitoJwtToken.getJwtToken()).toBe(sampleEncodedToken);\n  });",
            "file": "CognitoJwtToken.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Getting expiration for JWT",
            "suites": [
                "Accessor methods"
            ],
            "updatePoint": {
                "line": 8,
                "column": 34,
                "index": 390
            },
            "line": 8,
            "code": "  test('Getting expiration for JWT', () => {\n    expect(cognitoJwtToken.getExpiration()).toBe(cognitoJwtToken.payload.exp);\n  });",
            "file": "CognitoJwtToken.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Get time issued at for JWT",
            "suites": [
                "Accessor methods"
            ],
            "updatePoint": {
                "line": 11,
                "column": 34,
                "index": 520
            },
            "line": 11,
            "code": "  test('Get time issued at for JWT', () => {\n    expect(cognitoJwtToken.getIssuedAt()).toBe(cognitoJwtToken.payload.iat);\n  });",
            "file": "CognitoJwtToken.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Testing decode payload method returns an object",
            "suites": [
                "Accessor methods"
            ],
            "updatePoint": {
                "line": 14,
                "column": 55,
                "index": 669
            },
            "line": 14,
            "code": "  test('Testing decode payload method returns an object', () => {\n    const decodedPayload = cognitoJwtToken.decodePayload();\n    expect(decodedPayload.exp).toBe(expDecoded);\n    expect(decodedPayload.name).toBe(nameDecoded);\n    expect(decodedPayload.iat).toBe(iatDecoded);\n  });",
            "file": "CognitoJwtToken.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Decoding error",
            "suites": [
                "Accessor methods"
            ],
            "updatePoint": {
                "line": 20,
                "column": 22,
                "index": 917
            },
            "line": 20,
            "code": "  test('Decoding error', () => {\n    const badJWT = new CognitoJwtToken('incorrect Encoding');\n    expect(badJWT.decodePayload()).toEqual({});\n  });",
            "file": "CognitoJwtToken.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Bad parameters",
            "suites": [
                "Accessor methods"
            ],
            "updatePoint": {
                "line": 24,
                "column": 22,
                "index": 1066
            },
            "line": 24,
            "code": "  test('Bad parameters', () => {\n    const noPayloadToken = new CognitoJwtToken();\n    expect(noPayloadToken.getJwtToken()).toBe('');\n  });",
            "file": "CognitoJwtToken.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Testing getter method for a proper token",
            "suites": [
                "Cognito Refresh Token "
            ],
            "updatePoint": {
                "line": 4,
                "column": 48,
                "index": 204
            },
            "line": 4,
            "code": "  test('Testing getter method for a proper token', () => {\n    const cognitoRefToken = new CognitoRefreshToken(sampleEncodedToken);\n    expect(cognitoRefToken.getToken()).toBe(cognitoRefToken.token);\n  });",
            "file": "CognitoRefreshToken.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Testing getter method for a refresh token with no value",
            "suites": [
                "Cognito Refresh Token "
            ],
            "updatePoint": {
                "line": 8,
                "column": 63,
                "index": 425
            },
            "line": 8,
            "code": "  test('Testing getter method for a refresh token with no value', () => {\n    const cognitoRefToken = new CognitoRefreshToken();\n    expect(cognitoRefToken.getToken()).toBe('');\n  });",
            "file": "CognitoRefreshToken.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "constructor throws error when bad (or no) data is passed",
            "suites": [
                "CognitoUser constructor"
            ],
            "updatePoint": {
                "line": 22,
                "column": 64,
                "index": 1134
            },
            "line": 22,
            "code": "  test('constructor throws error when bad (or no) data is passed', () => {\n    const errorMsg = 'Username and Pool information are required.';\n\n    // no data at all\n    expect(() => {\n      new CognitoUser({});\n    }).toThrow(errorMsg);\n\n    // missing Pool\n    expect(() => {\n      new CognitoUser({\n        Username: 'username',\n        Pool: null\n      });\n    }).toThrow(errorMsg);\n\n    // missing Username\n    expect(() => {\n      new CognitoUser({\n        Username: null,\n        Pool: userPoolId\n      });\n    }).toThrow(errorMsg);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy case constructor",
            "suites": [
                "CognitoUser constructor"
            ],
            "updatePoint": {
                "line": 46,
                "column": 30,
                "index": 1646
            },
            "line": 46,
            "code": "  test('happy case constructor', () => {\n    const spyon = jest.spyOn(cognitoUserPool, 'getClientId');\n    expect(() => {\n      new CognitoUser({\n        ...userDefaults\n      });\n    }).not.toThrowError();\n    expect(spyon).toBeCalled();\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path should have an empty cache, after user session is set, cache tokens",
            "suites": [
                "getters and setters",
                "setSignInUserSession()"
            ],
            "updatePoint": {
                "line": 64,
                "column": 88,
                "index": 2361
            },
            "line": 64,
            "code": "    test('happy path should have an empty cache, after user session is set, cache tokens', () => {\n      // precondition\n      expect(user.getSignInUserSession()).toEqual(null);\n      expect(user.storage.getItem('')).toEqual(null);\n      user.setSignInUserSession(vCognitoUserSession);\n      expect(cacheSpy).toBeCalled();\n      expect(cacheTokenSpy).toBeCalled();\n\n      // post-condition\n      expect(user.getSignInUserSession()).toEqual(vCognitoUserSession);\n      expect(user.storage.getItem(refreshTokenKey)).toEqual(vRefreshToken.token);\n    });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "checking that tokens are cleared properly",
            "suites": [
                "getters and setters",
                "setSignInUserSession()"
            ],
            "updatePoint": {
                "line": 76,
                "column": 51,
                "index": 2876
            },
            "line": 76,
            "code": "    test('checking that tokens are cleared properly', () => {\n      // precondition\n      expect(user.getSignInUserSession()).toEqual(vCognitoUserSession);\n      user.setSignInUserSession(ivCognitoUserSession);\n      expect(cacheSpy).toBeCalled();\n      expect(cacheTokenSpy).toBeCalled();\n\n      // post-condition\n      expect(user.getSignInUserSession()).toEqual(ivCognitoUserSession);\n      expect(user.storage.getItem(refreshTokenKey)).toEqual(ivRefreshToken.token);\n    });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getUsername()",
            "suites": [
                "getters and setters",
                "setSignInUserSession()"
            ],
            "updatePoint": {
                "line": 88,
                "column": 21,
                "index": 3331
            },
            "line": 88,
            "code": "  test('getUsername()', () => {\n    expect(user.getUsername()).toEqual(user.username);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "get and set authenticationFlowType",
            "suites": [
                "getters and setters",
                "setSignInUserSession()"
            ],
            "updatePoint": {
                "line": 91,
                "column": 42,
                "index": 3445
            },
            "line": 91,
            "code": "  test('get and set authenticationFlowType', () => {\n    // initial state\n    expect(user.getAuthenticationFlowType()).toEqual('USER_SRP_AUTH');\n\n    // setting explicitly\n    user.setAuthenticationFlowType('TEST_FLOW_TYPE');\n\n    // getter after set explicitly\n    expect(user.getAuthenticationFlowType()).toEqual('TEST_FLOW_TYPE');\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request called once and throws an error",
            "suites": [
                "initiateAuth()"
            ],
            "updatePoint": {
                "line": 117,
                "column": 54,
                "index": 4127
            },
            "line": 117,
            "code": "  test('Client request called once and throws an error', async () => {\n    netRequestMockSuccess(false);\n    const authDetails = new AuthenticationDetails(authDetailData);\n    user.initiateAuth(authDetails, callback);\n    expect(callback.onFailure.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request called once with challenge name and params",
            "suites": [
                "initiateAuth()"
            ],
            "updatePoint": {
                "line": 123,
                "column": 65,
                "index": 4420
            },
            "line": 123,
            "code": "  test('Client request called once with challenge name and params', async () => {\n    netRequestMockSuccess(true, {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      Session: vCognitoUserSession,\n      ChallengeParameters: 'Custom challenge params'\n    });\n    const authDetails = new AuthenticationDetails(authDetailData);\n    user.initiateAuth(authDetails, callback);\n    expect(user.Session).toMatchObject(vCognitoUserSession);\n    expect(callback.customChallenge.mock.calls.length).toBe(1);\n    expect(callback.customChallenge).toBeCalledWith('Custom challenge params');\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request sets signInUserSession and is successful",
            "suites": [
                "initiateAuth()"
            ],
            "updatePoint": {
                "line": 135,
                "column": 63,
                "index": 4996
            },
            "line": 135,
            "code": "  test('Client request sets signInUserSession and is successful', async () => {\n    netRequestMockSuccess(true, {\n      AuthenticationResult: 'great success'\n    });\n    const getCognitoUserSessionSpy = jest.spyOn(user, 'getCognitoUserSession');\n    const cacheTokensSpy = jest.spyOn(user, 'cacheTokens');\n    const authDetails = new AuthenticationDetails(authDetailData);\n    user.initiateAuth(authDetails, callback);\n    expect(getCognitoUserSessionSpy).toBeCalledWith('great success');\n    expect(cacheTokensSpy).toBeCalled();\n    expect(callback.onSuccess.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "USER_PASSWORD_AUTH flow type",
            "suites": [
                "authenticateUser()"
            ],
            "updatePoint": {
                "line": 159,
                "column": 36,
                "index": 5898
            },
            "line": 159,
            "code": "  test('USER_PASSWORD_AUTH flow type', () => {\n    const spyon = jest.spyOn(user, 'authenticateUserPlainUsernamePassword');\n    user.setAuthenticationFlowType('USER_PASSWORD_AUTH');\n    user.authenticateUser(authDetails, callback);\n    expect(spyon).toHaveBeenCalledWith(authDetails, callback, undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "USER_SRP_AUTH and CUSTOM_AUTH flow types",
            "suites": [
                "authenticateUser()"
            ],
            "updatePoint": {
                "line": 165,
                "column": 48,
                "index": 6222
            },
            "line": 165,
            "code": "  test('USER_SRP_AUTH and CUSTOM_AUTH flow types', () => {\n    const spyon = jest.spyOn(user, 'authenticateUserDefaultAuth');\n    user.setAuthenticationFlowType('USER_SRP_AUTH');\n    user.authenticateUser(authDetails, callback);\n    expect(spyon).toHaveBeenCalledWith(authDetails, callback, undefined);\n    user.setAuthenticationFlowType('CUSTOM_AUTH');\n    user.authenticateUser(authDetails, callback);\n    expect(spyon).toHaveBeenCalledWith(authDetails, callback, undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "throws error for invalid Authentication flow type",
            "suites": [
                "authenticateUser()"
            ],
            "updatePoint": {
                "line": 174,
                "column": 57,
                "index": 6715
            },
            "line": 174,
            "code": "  test('throws error for invalid Authentication flow type', () => {\n    user.setAuthenticationFlowType('WRONG_AUTH_FLOW_TYPE');\n    user.authenticateUser(authDetails, callback);\n    expect(callback.onFailure.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy case default initialization process",
            "suites": [
                "authenticateUserDefaultAuth()"
            ],
            "updatePoint": {
                "line": 193,
                "column": 49,
                "index": 7310
            },
            "line": 193,
            "code": "  test('Happy case default initialization process', () => {\n    expect(() => {\n      user.authenticateUserDefaultAuth(authDetails, callback);\n    }).not.toThrowError();\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "errOnAValue fails gracefully",
            "suites": [
                "authenticateUserDefaultAuth()"
            ],
            "updatePoint": {
                "line": 198,
                "column": 36,
                "index": 7472
            },
            "line": 198,
            "code": "  test('errOnAValue fails gracefully', () => {\n    jest.spyOn(AuthenticationHelper.prototype, 'getLargeAValue').mockImplementation(cb => cb('test error', 12345));\n    user.authenticateUserDefaultAuth(authDetails, callback);\n    expect(callback.onFailure.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request fails gracefully",
            "suites": [
                "authenticateUserDefaultAuth()"
            ],
            "updatePoint": {
                "line": 203,
                "column": 39,
                "index": 7763
            },
            "line": 203,
            "code": "  test('Client request fails gracefully', () => {\n    netRequestMockSuccess(false);\n    user.authenticateUserDefaultAuth(authDetails, callback);\n    expect(callback.onFailure.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Missing password throws an error",
            "suites": [
                "authenticateUserPlainUsernamePassword()"
            ],
            "updatePoint": {
                "line": 217,
                "column": 40,
                "index": 8186
            },
            "line": 217,
            "code": "  test('Missing password throws an error', () => {\n    const authDetails = new AuthenticationDetails({\n      Username: 'user@amzn.com',\n      Password: undefined\n    });\n    user.authenticateUserPlainUsernamePassword(authDetails, callback);\n    expect(callback.onFailure).toBeCalledWith(new Error('PASSWORD parameter is required'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request fails gracefully",
            "suites": [
                "authenticateUserPlainUsernamePassword()"
            ],
            "updatePoint": {
                "line": 225,
                "column": 39,
                "index": 8524
            },
            "line": 225,
            "code": "  test('Client request fails gracefully', () => {\n    netRequestMockSuccess(false);\n    const authDetails = new AuthenticationDetails(authDetailData);\n    user.authenticateUserPlainUsernamePassword(authDetails, callback);\n    expect(callback.onFailure.mock.calls.length).toBe(1);\n    expect(callback.onFailure).toBeCalledWith(networkError);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Authenticate user happy case",
            "suites": [
                "authenticateUserPlainUsernamePassword()"
            ],
            "updatePoint": {
                "line": 232,
                "column": 36,
                "index": 8868
            },
            "line": 232,
            "code": "  test('Authenticate user happy case', () => {\n    const userSpy = jest.spyOn(user, 'getCachedDeviceKeyAndPassword');\n    const userSpy2 = jest.spyOn(user, 'getUserContextData');\n    userSpy2.mockReturnValue(true);\n    const userSpy3 = jest.spyOn(user, 'authenticateUserInternal');\n    userSpy3.mockReturnValue('test return value');\n    netRequestMockSuccess(true, 'test auth result');\n    const authDetails = new AuthenticationDetails(authDetailData);\n    user.authenticateUserPlainUsernamePassword(authDetails, callback);\n    expect(userSpy).toBeCalled();\n    expect(userSpy3).toBeCalledWith('test auth result', userSpy3.mock.calls[0][1], callback, undefined);\n    expect(userSpy3.mock.results[0].value).toBe('test return value');\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "%s challenge sets user session and calls the corresponding cb",
            "suites": [
                "authenticateUserInternal()"
            ],
            "line": 270,
            "code": "  test.each([['SMS_MFA', callback.mfaRequired], ['SELECT_MFA_TYPE', callback.selectMFAType], ['MFA_SETUP', callback.mfaSetup], ['SOFTWARE_TOKEN_MFA', callback.totpRequired], ['CUSTOM_CHALLENGE', callback.customChallenge]])('%s challenge sets user session and calls the corresponding cb', (challengeName, cbMethod) => {\n    Object.assign(authData, {\n      ChallengeName: challengeName\n    });\n    user.authenticateUserInternal(authData, authHelper, callback);\n    expect(user.Session).toMatchObject(vCognitoUserSession);\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      // this cb signature only expects one arg\n      expect(cbMethod).toHaveBeenCalledWith(authData.ChallengeParameters);\n    } else {\n      // the rest expect two args\n      expect(cbMethod).toHaveBeenCalledWith(challengeName, authData.ChallengeParameters);\n    }\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "user and required attributes get parsed and call newPasswordRequired",
            "suites": [
                "authenticateUserInternal()"
            ],
            "updatePoint": {
                "line": 284,
                "column": 76,
                "index": 11119
            },
            "line": 284,
            "code": "  test('user and required attributes get parsed and call newPasswordRequired', () => {\n    Object.assign(authData, {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED'\n    });\n    expect(user.Session).toMatchObject(vCognitoUserSession);\n    const spyon = jest.spyOn(authHelper, 'getNewPasswordRequiredChallengeUserAttributePrefix');\n    user.authenticateUserInternal(authData, authHelper, callback);\n    expect(spyon).toHaveBeenCalledTimes(1);\n    expect(callback.newPasswordRequired).toHaveBeenCalledTimes(1);\n    callback.newPasswordRequired.mockClear();\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "DEVICE_SRP_AUTH calls getDeviceResponse and sends session",
            "suites": [
                "authenticateUserInternal()"
            ],
            "updatePoint": {
                "line": 295,
                "column": 65,
                "index": 11665
            },
            "line": 295,
            "code": "  test('DEVICE_SRP_AUTH calls getDeviceResponse and sends session', () => {\n    const clientSpy = jest.spyOn(Client.prototype, 'request').mockImplementation((...args) => {});\n    const authDataGetDeviceResponse = {\n      ...authData,\n      ChallengeName: 'DEVICE_SRP_AUTH',\n      Session: 'abcd'\n    };\n    const spyon = jest.spyOn(user, 'getDeviceResponse');\n    user.authenticateUserInternal(authDataGetDeviceResponse, authHelper, callback);\n    expect(clientSpy.mock.calls[0][1]).toMatchObject({\n      Session: 'abcd'\n    });\n    expect(spyon).toHaveBeenCalledTimes(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "All other challenge names trigger method calls and success cb",
            "suites": [
                "authenticateUserInternal()"
            ],
            "updatePoint": {
                "line": 309,
                "column": 69,
                "index": 12248
            },
            "line": 309,
            "code": "  test('All other challenge names trigger method calls and success cb', () => {\n    Object.assign(authData, {\n      AuthenticationResult: {\n        NewDeviceMetadata: null\n      },\n      ChallengeName: 'random challenge'\n    });\n    const spyon = jest.spyOn(user, 'getCognitoUserSession');\n    const spyon2 = jest.spyOn(user, 'cacheTokens');\n    user.authenticateUserInternal(authData, authHelper, callback);\n    expect(user.challengeName).toBe(authData.ChallengeName);\n    expect(spyon).toHaveBeenCalledWith(authData.AuthenticationResult);\n    expect(spyon2).toBeCalledTimes(1);\n    const signInUserSession = user.getCognitoUserSession(authData.AuthenticationResult);\n    expect(callback.onSuccess).toBeCalledWith(signInUserSession);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "AuthHelper generateHashDevice is called and can log errors properly",
            "suites": [
                "authenticateUserInternal()"
            ],
            "updatePoint": {
                "line": 325,
                "column": 75,
                "index": 12995
            },
            "line": 325,
            "code": "  test('AuthHelper generateHashDevice is called and can log errors properly', () => {\n    Object.assign(authData, {\n      AuthenticationResult: {\n        NewDeviceMetadata: {\n          DeviceGroupKey: 'abc123',\n          DeviceKey: '123abc'\n        }\n      },\n      ChallengeName: 'random challenge'\n    });\n    netRequestMockSuccess(false);\n    user.authenticateUserInternal(authData, authHelper, callback);\n    expect(callback.onFailure).toBeCalledWith(networkError);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "AuthHelper generateHashDevice with no error calls auth methods",
            "suites": [
                "authenticateUserInternal()"
            ],
            "updatePoint": {
                "line": 339,
                "column": 70,
                "index": 13466
            },
            "line": 339,
            "code": "  test('AuthHelper generateHashDevice with no error calls auth methods', () => {\n    const randomPasswordSpy = jest.spyOn(AuthenticationHelper.prototype, 'getRandomPassword');\n    const getVerifierDevicesSpy = jest.spyOn(AuthenticationHelper.prototype, 'getVerifierDevices');\n    const hashDeviceSpy = jest.spyOn(AuthenticationHelper.prototype, 'generateHashDevice');\n    user.authenticateUserInternal(authData, authHelper, callback);\n    expect(randomPasswordSpy).toBeCalledTimes(1);\n    expect(getVerifierDevicesSpy).toBeCalledTimes(1);\n    expect(hashDeviceSpy).toBeCalledTimes(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request fails gracefully",
            "suites": [
                "authenticateUserInternal()"
            ],
            "updatePoint": {
                "line": 348,
                "column": 39,
                "index": 14026
            },
            "line": 348,
            "code": "  test('Client request fails gracefully', () => {\n    netRequestMockSuccess(false);\n    user.authenticateUserInternal(authData, authHelper, callback);\n    expect(callback.onFailure).toBeCalledWith(networkError);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Successful client request passes data properly to cb",
            "suites": [
                "authenticateUserInternal()"
            ],
            "updatePoint": {
                "line": 353,
                "column": 60,
                "index": 14265
            },
            "line": 353,
            "code": "  test('Successful client request passes data properly to cb', () => {\n    netRequestMockSuccess(true, {\n      UserConfirmationNecessary: true\n    });\n    user.authenticateUserInternal(authData, authHelper, callback);\n    expect(callback.onSuccess).toBeCalledWith(user.signInUserSession, true);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Successful client request passing empty object to cb",
            "suites": [
                "authenticateUserInternal()"
            ],
            "updatePoint": {
                "line": 360,
                "column": 60,
                "index": 14566
            },
            "line": 360,
            "code": "  test('Successful client request passing empty object to cb', () => {\n    netRequestMockSuccess(true, {\n      UserConfirmationNecessary: true\n    });\n    user.authenticateUserInternal(authData, authHelper, callback);\n    expect(callback.onSuccess).toBeCalledWith(user.signInUserSession, true);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "No newPassword triggers an error",
            "suites": [
                "completeNewPasswordChallenge()"
            ],
            "updatePoint": {
                "line": 386,
                "column": 40,
                "index": 15265
            },
            "line": 386,
            "code": "  test('No newPassword triggers an error', () => {\n    user.completeNewPasswordChallenge(null, null, callback, null);\n    expect(callback.onFailure).toBeCalledWith(passwordErr);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "completeNewPasswordChallenge calls expected helper methods",
            "suites": [
                "completeNewPasswordChallenge()"
            ],
            "updatePoint": {
                "line": 390,
                "column": 66,
                "index": 15475
            },
            "line": 390,
            "code": "  test('completeNewPasswordChallenge calls expected helper methods', () => {\n    const spyon = jest.spyOn(AuthenticationHelper.prototype, 'getNewPasswordRequiredChallengeUserAttributePrefix');\n    const spyon2 = jest.spyOn(user, 'getUserContextData');\n    user.completeNewPasswordChallenge('NEWp@ssw0rd', requiredAttributeData, callback, clientMetadata);\n    expect(spyon).toBeCalledTimes(1);\n    expect(spyon2).toHaveBeenCalled();\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request fails gracefully",
            "suites": [
                "completeNewPasswordChallenge()"
            ],
            "updatePoint": {
                "line": 397,
                "column": 39,
                "index": 15886
            },
            "line": 397,
            "code": "  test('Client request fails gracefully', () => {\n    const err = new Error('Respond to auth challenge error.');\n    jest.spyOn(Client.prototype, 'request').mockImplementationOnce((...args) => {\n      args[2](err, {});\n    });\n    user.completeNewPasswordChallenge('NEWp@ssw0rd', requiredAttributeData, callback, clientMetadata);\n    expect(callback.onFailure).toBeCalledWith(err);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request happy path",
            "suites": [
                "completeNewPasswordChallenge()"
            ],
            "updatePoint": {
                "line": 405,
                "column": 33,
                "index": 16268
            },
            "line": 405,
            "code": "  test('Client request happy path', () => {\n    jest.spyOn(Client.prototype, 'request').mockImplementationOnce((...args) => {\n      args[2](null, vCognitoUserSession);\n    });\n    const spyon2 = jest.spyOn(user, 'authenticateUserInternal');\n    user.completeNewPasswordChallenge('NEWp@ssw0rd', requiredAttributeData, callback, clientMetadata);\n    expect(spyon2).toBeCalledTimes(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "incorrect value for getLargeAValue fails gracefully",
            "suites": [
                "getDeviceResponse()"
            ],
            "updatePoint": {
                "line": 426,
                "column": 59,
                "index": 16955
            },
            "line": 426,
            "code": "  test('incorrect value for getLargeAValue fails gracefully', () => {\n    const err = new Error('Cannot get large A value for some reason.');\n    jest.spyOn(AuthenticationHelper.prototype, 'getLargeAValue').mockImplementation(cb => cb(err, 12345));\n    user.getDeviceResponse(callback, {});\n    expect(callback.onFailure).toBeCalledWith(err);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Auth helper getLargeAValue happy path",
            "suites": [
                "getDeviceResponse()"
            ],
            "updatePoint": {
                "line": 432,
                "column": 45,
                "index": 17290
            },
            "line": 432,
            "code": "  test('Auth helper getLargeAValue happy path', () => {\n    jest.spyOn(AuthenticationHelper.prototype, 'getLargeAValue').mockImplementation(cb => cb(null, 12345));\n    const spyon2 = jest.spyOn(user, 'getUserContextData');\n    user.getDeviceResponse(callback, {});\n    expect(callback.onFailure).not.toBeCalled();\n    expect(spyon2).toBeCalled();\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request RespondToAuthChallenge fails gracefully",
            "suites": [
                "getDeviceResponse()"
            ],
            "updatePoint": {
                "line": 439,
                "column": 62,
                "index": 17660
            },
            "line": 439,
            "code": "  test('Client request RespondToAuthChallenge fails gracefully', () => {\n    netRequestMockSuccess(false);\n    user.getDeviceResponse(callback, {});\n    expect(callback.onFailure).toBeCalledWith(networkError);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request RespondToAuthChallenge - getPasswordAuthenticationKey cb fails gracefully",
            "suites": [
                "getDeviceResponse()",
                "RespondToAuthChallenge nested Client method suite"
            ],
            "updatePoint": {
                "line": 468,
                "column": 98,
                "index": 18626
            },
            "line": 468,
            "code": "    test('Client request RespondToAuthChallenge - getPasswordAuthenticationKey cb fails gracefully', () => {\n      const err = new Error('errHkdf Error');\n      jest.spyOn(AuthenticationHelper.prototype, 'getPasswordAuthenticationKey').mockImplementation((...args) => {\n        args[4](err, null);\n      });\n      user.getDeviceResponse(callback, {});\n      expect(callback.onFailure).toBeCalledWith(err);\n    });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request RespondToAuthChallenge - getPasswordAuthenticationKey CryptoJS code runs smoothly",
            "suites": [
                "getDeviceResponse()",
                "RespondToAuthChallenge nested Client method suite"
            ],
            "updatePoint": {
                "line": 476,
                "column": 106,
                "index": 19048
            },
            "line": 476,
            "code": "    test('Client request RespondToAuthChallenge - getPasswordAuthenticationKey CryptoJS code runs smoothly', () => {\n      jest.spyOn(AuthenticationHelper.prototype, 'getPasswordAuthenticationKey').mockImplementation((...args) => {\n        args[4](null, 'hkdf value');\n      });\n      const spyon2 = jest.spyOn(user, 'getUserContextData');\n      user.getDeviceResponse(callback, {});\n      expect(spyon2).toBeCalled();\n    });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request RespondToAuthChallenge nested client fails gracefully",
            "suites": [
                "getDeviceResponse()",
                "RespondToAuthChallenge nested Client method suite"
            ],
            "updatePoint": {
                "line": 484,
                "column": 78,
                "index": 19447
            },
            "line": 484,
            "code": "    test('Client request RespondToAuthChallenge nested client fails gracefully', () => {\n      netRequestMockSuccess(false);\n      user.getDeviceResponse(callback, {});\n      expect(callback.onFailure).toBeCalledWith(networkError);\n    });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request RespondToAuthChallenge nested client calls success callbacks",
            "suites": [
                "getDeviceResponse()",
                "RespondToAuthChallenge nested Client method suite"
            ],
            "updatePoint": {
                "line": 489,
                "column": 85,
                "index": 19694
            },
            "line": 489,
            "code": "    test('Client request RespondToAuthChallenge nested client calls success callbacks', () => {\n      const spyon = jest.spyOn(user, 'getCognitoUserSession');\n      const spyon2 = jest.spyOn(user, 'cacheTokens');\n      user.getDeviceResponse(callback, {});\n      expect(spyon).toBeCalledTimes(1);\n      expect(spyon2).toBeCalledTimes(1);\n      expect(callback.onSuccess).toBeCalledWith(user.signInUserSession);\n    });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "ConfirmSignUp fails gracefully",
            "suites": [
                "confirmRegistration()"
            ],
            "updatePoint": {
                "line": 512,
                "column": 38,
                "index": 20399
            },
            "line": 512,
            "code": "  test('ConfirmSignUp fails gracefully', () => {\n    netRequestMockSuccess(false);\n    const spyon2 = jest.spyOn(user, 'getUserContextData');\n    user.confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata);\n    expect(spyon2).toBeCalled();\n    expect(callback).toBeCalledWith(networkError, null);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "ConfirmSignUp returns SUCCESS",
            "suites": [
                "confirmRegistration()"
            ],
            "updatePoint": {
                "line": 519,
                "column": 37,
                "index": 20730
            },
            "line": 519,
            "code": "  test('ConfirmSignUp returns SUCCESS', () => {\n    jest.spyOn(Client.prototype, 'request').mockImplementation((...args) => {\n      args[2](null);\n    });\n    const spyon2 = jest.spyOn(user, 'getUserContextData');\n    user.confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata);\n    expect(spyon2).toBeCalled();\n    expect(callback).toBeCalledWith(null, 'SUCCESS');\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "send custom challenge happy path",
            "suites": [
                "sendCustomChallengeAnswer()"
            ],
            "updatePoint": {
                "line": 551,
                "column": 40,
                "index": 21660
            },
            "line": 551,
            "code": "  test('send custom challenge happy path', () => {\n    jest.spyOn(Client.prototype, 'request').mockImplementation((...args) => {\n      args[2](null, vCognitoUserSession);\n    });\n    const spyon2 = jest.spyOn(user, 'getCachedDeviceKeyAndPassword');\n    const spyon3 = jest.spyOn(user, 'authenticateUserInternal');\n    user.sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata);\n    expect(spyon2).toBeCalledTimes(1);\n    expect(spyon3).toBeCalledWith(vCognitoUserSession, expect.any(AuthenticationHelper), callback, undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "send custom challenge fails gracefully",
            "suites": [
                "sendCustomChallengeAnswer()"
            ],
            "updatePoint": {
                "line": 561,
                "column": 46,
                "index": 22215
            },
            "line": 561,
            "code": "  test('send custom challenge fails gracefully', () => {\n    const err = new Error('RespondToAuthChallenge error.');\n    jest.spyOn(Client.prototype, 'request').mockImplementation((...args) => {\n      args[2](err, vCognitoUserSession);\n    });\n    user.sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata);\n    expect(callback.onFailure).toBeCalledWith(err);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy case should callback onSuccess with the token",
            "suites": [
                "verifySoftwareToken()"
            ],
            "updatePoint": {
                "line": 581,
                "column": 59,
                "index": 22872
            },
            "line": 581,
            "code": "  test('happy case should callback onSuccess with the token', () => {\n    netRequestMockSuccess(true);\n    netRequestMockSuccess(true);\n    cognitoUser.verifySoftwareToken(totpCode, deviceName, callback);\n    expect(callback.onSuccess.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Verify software token first callback fails",
            "suites": [
                "verifySoftwareToken()"
            ],
            "updatePoint": {
                "line": 587,
                "column": 50,
                "index": 23132
            },
            "line": 587,
            "code": "  test('Verify software token first callback fails', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.verifySoftwareToken(totpCode, deviceName, callback);\n    expect(callback.onFailure.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Verify Software Token second callback fails",
            "suites": [
                "verifySoftwareToken()"
            ],
            "updatePoint": {
                "line": 592,
                "column": 51,
                "index": 23361
            },
            "line": 592,
            "code": "  test('Verify Software Token second callback fails', () => {\n    netRequestMockSuccess(true);\n    netRequestMockSuccess(false);\n    cognitoUser.verifySoftwareToken(totpCode, deviceName, callback);\n    expect(callback.onFailure.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy case for signed in user session",
            "suites": [
                "verifySoftwareToken()"
            ],
            "updatePoint": {
                "line": 598,
                "column": 45,
                "index": 23617
            },
            "line": 598,
            "code": "  test('Happy case for signed in user session', () => {\n    cognitoUser.setSignInUserSession(vCognitoUserSession);\n    netRequestMockSuccess(true);\n    cognitoUser.verifySoftwareToken(totpCode, deviceName, callback);\n    expect(callback.onSuccess.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Error case for signed in user session",
            "suites": [
                "verifySoftwareToken()"
            ],
            "updatePoint": {
                "line": 604,
                "column": 45,
                "index": 23898
            },
            "line": 604,
            "code": "  test('Error case for signed in user session', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.verifySoftwareToken(totpCode, deviceName, callback);\n    expect(callback.onFailure.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy path for associate software token without a userSession ",
            "suites": [
                "associateSoftwareToken()"
            ],
            "updatePoint": {
                "line": 621,
                "column": 70,
                "index": 24422
            },
            "line": 621,
            "code": "  test('Happy path for associate software token without a userSession ', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.associateSoftwareToken(callback);\n    expect(callback.associateSecretCode.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Failing in the first requeset to client",
            "suites": [
                "associateSoftwareToken()"
            ],
            "updatePoint": {
                "line": 626,
                "column": 47,
                "index": 24637
            },
            "line": 626,
            "code": "  test('Failing in the first requeset to client', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.associateSoftwareToken(callback);\n    expect(callback.onFailure.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy path for a user with a validUserSession ",
            "suites": [
                "associateSoftwareToken()"
            ],
            "updatePoint": {
                "line": 631,
                "column": 54,
                "index": 24850
            },
            "line": 631,
            "code": "  test('Happy path for a user with a validUserSession ', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.setSignInUserSession(vCognitoUserSession);\n    cognitoUser.associateSoftwareToken(callback);\n    expect(callback.associateSecretCode.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Error path for a user with a validUserSession ",
            "suites": [
                "associateSoftwareToken()"
            ],
            "updatePoint": {
                "line": 637,
                "column": 54,
                "index": 25131
            },
            "line": 637,
            "code": "  test('Error path for a user with a validUserSession ', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.associateSoftwareToken(callback);\n    expect(callback.onFailure.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy case with SMS_MFA",
            "suites": [
                "sendMFASelectionAnswer()"
            ],
            "updatePoint": {
                "line": 650,
                "column": 31,
                "index": 25489
            },
            "line": 650,
            "code": "  test('happy case with SMS_MFA', () => {\n    netRequestMockSuccess(true, {\n      Session: 'sessionData'\n    });\n    cognitoUser.sendMFASelectionAnswer('SMS_MFA', callback);\n    expect(callback.mfaRequired.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy case with software token MFA",
            "suites": [
                "sendMFASelectionAnswer()"
            ],
            "updatePoint": {
                "line": 657,
                "column": 42,
                "index": 25743
            },
            "line": 657,
            "code": "  test('happy case with software token MFA', () => {\n    netRequestMockSuccess(true, {\n      Session: 'sessionData'\n    });\n    cognitoUser.sendMFASelectionAnswer('SOFTWARE_TOKEN_MFA', callback);\n    expect(callback.totpRequired.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "error case with software token MFA",
            "suites": [
                "sendMFASelectionAnswer()"
            ],
            "updatePoint": {
                "line": 664,
                "column": 42,
                "index": 26009
            },
            "line": 664,
            "code": "  test('error case with software token MFA', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.sendMFASelectionAnswer('SOFTWARE_TOKEN_MFA', callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "error case with undefined answer challenge",
            "suites": [
                "sendMFASelectionAnswer()"
            ],
            "updatePoint": {
                "line": 669,
                "column": 50,
                "index": 26243
            },
            "line": 669,
            "code": "  test('error case with undefined answer challenge', () => {\n    netRequestMockSuccess(true, {\n      Session: 'sessionData'\n    });\n    const res = cognitoUser.sendMFASelectionAnswer('WRONG_CHALLENGE', callback);\n    expect(res).toEqual(undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "signOut expected to set signinUserSession to equal null",
            "suites": [
                "signOut() and globalSignOut"
            ],
            "updatePoint": {
                "line": 688,
                "column": 63,
                "index": 26780
            },
            "line": 688,
            "code": "  test('signOut expected to set signinUserSession to equal null', () => {\n    cognitoUser.signOut();\n    expect(cognitoUser.storage.getItem('')).toEqual(null);\n    expect(cognitoUser.signInUserSession).toEqual(null);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "global signOut Happy Path",
            "suites": [
                "signOut() and globalSignOut"
            ],
            "updatePoint": {
                "line": 693,
                "column": 33,
                "index": 26973
            },
            "line": 693,
            "code": "  test('global signOut Happy Path', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.setSignInUserSession(vCognitoUserSession);\n    cognitoUser.globalSignOut(callback);\n    expect(callback.onSuccess.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "global signOut catching an error",
            "suites": [
                "signOut() and globalSignOut"
            ],
            "updatePoint": {
                "line": 699,
                "column": 40,
                "index": 27224
            },
            "line": 699,
            "code": "  test('global signOut catching an error', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.globalSignOut(callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Global signout when user session is null",
            "suites": [
                "signOut() and globalSignOut"
            ],
            "updatePoint": {
                "line": 704,
                "column": 48,
                "index": 27425
            },
            "line": 704,
            "code": "  test('Global signout when user session is null', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.globalSignOut(callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy path for device list",
            "suites": [
                "listDevices"
            ],
            "updatePoint": {
                "line": 722,
                "column": 34,
                "index": 27948
            },
            "line": 722,
            "code": "  test('Happy path for device list', () => {\n    netRequestMockSuccess(true, ['deviceName', 'device2Name']);\n    cognitoUser.listDevices(1, 'paginationToken', callback);\n    expect(callback.onSuccess.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request throws an error",
            "suites": [
                "listDevices"
            ],
            "updatePoint": {
                "line": 727,
                "column": 38,
                "index": 28189
            },
            "line": 727,
            "code": "  test('Client request throws an error', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.listDevices(1, null, callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Invalid userSession throws an error",
            "suites": [
                "listDevices"
            ],
            "updatePoint": {
                "line": 732,
                "column": 43,
                "index": 28392
            },
            "line": 732,
            "code": "  test('Invalid userSession throws an error', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.listDevices(1, null, callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy path should callback success",
            "suites": [
                "setDeviceStatus[remembered,notRemembered]()"
            ],
            "updatePoint": {
                "line": 750,
                "column": 42,
                "index": 28962
            },
            "line": 750,
            "code": "  test('Happy path should callback success', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.setDeviceStatusNotRemembered(callback);\n    expect(callback.onSuccess.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Callback catches an error from client request",
            "suites": [
                "setDeviceStatus[remembered,notRemembered]()"
            ],
            "updatePoint": {
                "line": 755,
                "column": 53,
                "index": 29182
            },
            "line": 755,
            "code": "  test('Callback catches an error from client request', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.setDeviceStatusNotRemembered(callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request does not work and method returns undefined",
            "suites": [
                "setDeviceStatus[remembered,notRemembered]()"
            ],
            "updatePoint": {
                "line": 760,
                "column": 65,
                "index": 29415
            },
            "line": 760,
            "code": "  test('Client request does not work and method returns undefined', () => {\n    cognitoUser.setSignInUserSession(vCognitoUserSession);\n    expect(cognitoUser.setDeviceStatusNotRemembered(callback)).toEqual(undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy path for setDeviceStatusRemembered should callback with onSuccess ",
            "suites": [
                "setDeviceStatus[remembered,notRemembered]()"
            ],
            "updatePoint": {
                "line": 764,
                "column": 80,
                "index": 29654
            },
            "line": 764,
            "code": "  test('Happy path for setDeviceStatusRemembered should callback with onSuccess ', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.setDeviceStatusRemembered(callback);\n    expect(callback.onSuccess.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client throws and error should callback onFailure",
            "suites": [
                "setDeviceStatus[remembered,notRemembered]()"
            ],
            "updatePoint": {
                "line": 769,
                "column": 57,
                "index": 29875
            },
            "line": 769,
            "code": "  test('Client throws and error should callback onFailure', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.setDeviceStatusRemembered(callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request does not work and method returns undefined",
            "suites": [
                "setDeviceStatus[remembered,notRemembered]()"
            ],
            "updatePoint": {
                "line": 774,
                "column": 65,
                "index": 30105
            },
            "line": 774,
            "code": "  test('Client request does not work and method returns undefined', () => {\n    expect(cognitoUser.setDeviceStatusRemembered(callback)).toEqual(undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Invalid user session throws an error",
            "suites": [
                "setDeviceStatus[remembered,notRemembered]()"
            ],
            "updatePoint": {
                "line": 777,
                "column": 44,
                "index": 30246
            },
            "line": 777,
            "code": "  test('Invalid user session throws an error', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.setDeviceStatusNotRemembered(callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Invalid user session throws an error",
            "suites": [
                "setDeviceStatus[remembered,notRemembered]()"
            ],
            "updatePoint": {
                "line": 782,
                "column": 44,
                "index": 30484
            },
            "line": 782,
            "code": "  test('Invalid user session throws an error', () => {\n    cognitoUser.setDeviceStatusRemembered(callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Forget specific device happy path should callback onSuccess",
            "suites": [
                "forgetDevices()"
            ],
            "updatePoint": {
                "line": 799,
                "column": 67,
                "index": 30996
            },
            "line": 799,
            "code": "  test('Forget specific device happy path should callback onSuccess', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.forgetSpecificDevice('deviceKey', callback);\n    expect(callback.onSuccess.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Client request throws an error for forget specific device",
            "suites": [
                "forgetDevices()"
            ],
            "updatePoint": {
                "line": 804,
                "column": 65,
                "index": 31233
            },
            "line": 804,
            "code": "  test('Client request throws an error for forget specific device', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.forgetSpecificDevice('deviceKey', callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Returns undefined when client request does not work properly",
            "suites": [
                "forgetDevices()"
            ],
            "updatePoint": {
                "line": 809,
                "column": 68,
                "index": 31474
            },
            "line": 809,
            "code": "  test('Returns undefined when client request does not work properly', () => {\n    expect(cognitoUser.forgetSpecificDevice('deviceKey', callback)).toEqual(undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "forgetSpecificDevice happy path should callback onSuccess",
            "suites": [
                "forgetDevices()"
            ],
            "updatePoint": {
                "line": 812,
                "column": 65,
                "index": 31644
            },
            "line": 812,
            "code": "  test('forgetSpecificDevice happy path should callback onSuccess', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.forgetDevice(callback);\n    expect(callback.onSuccess.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Invalid user session throws and error for forget specific device",
            "suites": [
                "forgetDevices()"
            ],
            "updatePoint": {
                "line": 817,
                "column": 72,
                "index": 31867
            },
            "line": 817,
            "code": "  test('Invalid user session throws and error for forget specific device', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.forgetSpecificDevice('deviceKey', callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy path for getDevice should callback onSuccess",
            "suites": [
                "getDevice()"
            ],
            "updatePoint": {
                "line": 835,
                "column": 58,
                "index": 32434
            },
            "line": 835,
            "code": "  test('Happy path for getDevice should callback onSuccess', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.getDevice(callback);\n    expect(callback.onSuccess.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "client request returns an error and onFailure is called",
            "suites": [
                "getDevice()"
            ],
            "updatePoint": {
                "line": 840,
                "column": 63,
                "index": 32645
            },
            "line": 840,
            "code": "  test('client request returns an error and onFailure is called', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.getDevice(callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "No client request method implementations, return undefined",
            "suites": [
                "getDevice()"
            ],
            "updatePoint": {
                "line": 845,
                "column": 66,
                "index": 32860
            },
            "line": 845,
            "code": "  test('No client request method implementations, return undefined', () => {\n    expect(cognitoUser.getDevice(callback)).toEqual(undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "invalid user session should callback onFailure",
            "suites": [
                "getDevice()"
            ],
            "updatePoint": {
                "line": 848,
                "column": 54,
                "index": 32995
            },
            "line": 848,
            "code": "  test('invalid user session should callback onFailure', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.getDevice(callback);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy path for verifyAttribute should callback onSuccess",
            "suites": [
                "verifyAttribute(), getAttributeVerificationCode"
            ],
            "updatePoint": {
                "line": 866,
                "column": 64,
                "index": 33602
            },
            "line": 866,
            "code": "  test('Happy path for verifyAttribute should callback onSuccess', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.verifyAttribute(...verifyAttributeDefaults);\n    expect(callback.onSuccess.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "client request returns an error and onFailure is called",
            "suites": [
                "verifyAttribute(), getAttributeVerificationCode"
            ],
            "updatePoint": {
                "line": 871,
                "column": 63,
                "index": 33837
            },
            "line": 871,
            "code": "  test('client request returns an error and onFailure is called', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.verifyAttribute(...verifyAttributeDefaults);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "No client request method implementations, return undefined",
            "suites": [
                "verifyAttribute(), getAttributeVerificationCode"
            ],
            "updatePoint": {
                "line": 876,
                "column": 66,
                "index": 34076
            },
            "line": 876,
            "code": "  test('No client request method implementations, return undefined', () => {\n    expect(cognitoUser.verifyAttribute(...verifyAttributeDefaults)).toEqual(undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path for getAttributeVerificationCode",
            "suites": [
                "verifyAttribute(), getAttributeVerificationCode"
            ],
            "updatePoint": {
                "line": 880,
                "column": 51,
                "index": 34296
            },
            "line": 880,
            "code": "  test('happy path for getAttributeVerificationCode', () => {\n    //callback.inputVerification needs to be set to null before the call to avoid the conditional in the method.\n    callback.inputVerificationCode = null;\n    netRequestMockSuccess(true);\n    cognitoUser.getAttributeVerificationCode(...getAttrsVerifCodeDefaults);\n    callback.inputVerificationCode = jest.fn();\n    expect(callback.onSuccess).toHaveBeenCalledWith('SUCCESS');\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "when inputVerificationCode exists in the callback, call inputVerifier with the data",
            "suites": [
                "verifyAttribute(), getAttributeVerificationCode"
            ],
            "updatePoint": {
                "line": 888,
                "column": 91,
                "index": 34781
            },
            "line": 888,
            "code": "  test('when inputVerificationCode exists in the callback, call inputVerifier with the data', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.getAttributeVerificationCode(...getAttrsVerifCodeDefaults);\n    expect(callback.inputVerificationCode.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "when inputVerificationCode with a failed network request",
            "suites": [
                "verifyAttribute(), getAttributeVerificationCode"
            ],
            "updatePoint": {
                "line": 893,
                "column": 64,
                "index": 35044
            },
            "line": 893,
            "code": "  test('when inputVerificationCode with a failed network request', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.getAttributeVerificationCode(...getAttrsVerifCodeDefaults);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "invalid user session should callback onFailure for verifyAttributes",
            "suites": [
                "verifyAttribute(), getAttributeVerificationCode"
            ],
            "updatePoint": {
                "line": 898,
                "column": 75,
                "index": 35307
            },
            "line": 898,
            "code": "  test('invalid user session should callback onFailure for verifyAttributes', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.verifyAttribute(...verifyAttributeDefaults);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "invalid user session should callback onFailure for getAttrsVerifCodeDefaults",
            "suites": [
                "verifyAttribute(), getAttributeVerificationCode"
            ],
            "updatePoint": {
                "line": 903,
                "column": 84,
                "index": 35590
            },
            "line": 903,
            "code": "  test('invalid user session should callback onFailure for getAttrsVerifCodeDefaults', () => {\n    cognitoUser.getAttributeVerificationCode(...getAttrsVerifCodeDefaults);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "confirmPassword happy path should callback onSuccess",
            "suites": [
                "confirmPassword() and forgotPassword()"
            ],
            "updatePoint": {
                "line": 921,
                "column": 60,
                "index": 36230
            },
            "line": 921,
            "code": "  test('confirmPassword happy path should callback onSuccess', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.confirmPassword(...confirmPasswordDefaults);\n    expect(callback.onSuccess).toHaveBeenCalledWith('SUCCESS');\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "confirmPassword client request throws an error",
            "suites": [
                "confirmPassword() and forgotPassword()"
            ],
            "updatePoint": {
                "line": 926,
                "column": 54,
                "index": 36459
            },
            "line": 926,
            "code": "  test('confirmPassword client request throws an error', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.confirmPassword(...confirmPasswordDefaults);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "forgotPassword happy path should callback onSuccess",
            "suites": [
                "confirmPassword() and forgotPassword()"
            ],
            "updatePoint": {
                "line": 931,
                "column": 59,
                "index": 36691
            },
            "line": 931,
            "code": "  test('forgotPassword happy path should callback onSuccess', () => {\n    callback.inputVerificationCode = null;\n    netRequestMockSuccess(true);\n    cognitoUser.forgotPassword(...forgotPasswordDefaults);\n    expect(callback.onSuccess.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "forgotPassword inputVerification code is a function should callback inputVerificationCode",
            "suites": [
                "confirmPassword() and forgotPassword()"
            ],
            "updatePoint": {
                "line": 937,
                "column": 97,
                "index": 37001
            },
            "line": 937,
            "code": "  test('forgotPassword inputVerification code is a function should callback inputVerificationCode', () => {\n    callback.inputVerificationCode = jest.fn();\n    netRequestMockSuccess(true);\n    cognitoUser.forgotPassword(...forgotPasswordDefaults);\n    expect(callback.inputVerificationCode.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "forgotPassword client returning an error should call onFailure",
            "suites": [
                "confirmPassword() and forgotPassword()"
            ],
            "updatePoint": {
                "line": 943,
                "column": 70,
                "index": 37301
            },
            "line": 943,
            "code": "  test('forgotPassword client returning an error should call onFailure', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.forgotPassword(...forgotPasswordDefaults);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy path for sendMFACode should call onSuccess",
            "suites": [
                "MFA test suite"
            ],
            "updatePoint": {
                "line": 969,
                "column": 56,
                "index": 38010
            },
            "line": 969,
            "code": "  test('Happy path for sendMFACode should call onSuccess', () => {\n    netRequestMockSuccess(true, payload);\n    authHelperMock(genHashDevices);\n    authHelperMock(getSalt);\n    authHelperMock(getVerifiers);\n    netRequestMockSuccess(true, {\n      UserConfirmationNecessary: false\n    });\n    cognitoUser.sendMFACode(...sendMfaDefaults);\n    expect(callback.onSuccess.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "when userConfirmation is true, should callback onSuccess",
            "suites": [
                "MFA test suite"
            ],
            "updatePoint": {
                "line": 980,
                "column": 64,
                "index": 38423
            },
            "line": 980,
            "code": "  test('when userConfirmation is true, should callback onSuccess', () => {\n    netRequestMockSuccess(true, payload);\n    authHelperMock(genHashDevices);\n    authHelperMock(getSalt);\n    authHelperMock(getVerifiers);\n    netRequestMockSuccess(true, {\n      UserConfirmationNecessary: true\n    });\n    cognitoUser.sendMFACode(...sendMfaDefaults);\n    expect(callback.onSuccess.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "second client request fails so sendMFACode should call onFailure",
            "suites": [
                "MFA test suite"
            ],
            "updatePoint": {
                "line": 991,
                "column": 72,
                "index": 38843
            },
            "line": 991,
            "code": "  test('second client request fails so sendMFACode should call onFailure', () => {\n    netRequestMockSuccess(true, payload);\n    authHelperMock(genHashDevices);\n    authHelperMock(getSalt);\n    authHelperMock(getVerifiers);\n    netRequestMockSuccess(false);\n    cognitoUser.sendMFACode(...sendMfaDefaults);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "when generateHashDevice fails, sendMFACode should call onFailure",
            "suites": [
                "MFA test suite"
            ],
            "updatePoint": {
                "line": 1000,
                "column": 72,
                "index": 39217
            },
            "line": 1000,
            "code": "  test('when generateHashDevice fails, sendMFACode should call onFailure', () => {\n    netRequestMockSuccess(true, payload);\n    jest.spyOn(AuthenticationHelper.prototype, 'generateHashDevice').mockImplementationOnce((...args) => {\n      args[2](new Error('Network Error'), null);\n    });\n    cognitoUser.sendMFACode(...sendMfaDefaults);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "when AuthenticationResult.NewDeviceMetadata == null, callback onSuccess",
            "suites": [
                "MFA test suite"
            ],
            "updatePoint": {
                "line": 1008,
                "column": 79,
                "index": 39629
            },
            "line": 1008,
            "code": "  test('when AuthenticationResult.NewDeviceMetadata == null, callback onSuccess', () => {\n    jest.spyOn(Client.prototype, 'request').mockImplementationOnce((...args) => {\n      args[2](null, {\n        ChallengeName: 'SMS_MFA',\n        AuthenticationResult: {\n          NewDeviceMetadata: null\n        }\n      });\n    });\n    cognitoUser.sendMFACode(...sendMfaDefaults);\n    expect(callback.onSuccess.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "first network request throws an error calls onFailure",
            "suites": [
                "MFA test suite"
            ],
            "updatePoint": {
                "line": 1020,
                "column": 61,
                "index": 40049
            },
            "line": 1020,
            "code": "  test('first network request throws an error calls onFailure', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.sendMFACode(...sendMfaDefaults);\n    expect(callback.onFailure.mock.calls.length).toEqual(1);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "first client request does not exist so sendMFACode should return undefined",
            "suites": [
                "MFA test suite"
            ],
            "updatePoint": {
                "line": 1025,
                "column": 82,
                "index": 40292
            },
            "line": 1025,
            "code": "  test('first client request does not exist so sendMFACode should return undefined', () => {\n    expect(cognitoUser.sendMFACode(...sendMfaDefaults)).toEqual(undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "enableMFA happy path should callback on success  ",
            "suites": [
                "enableMFA()"
            ],
            "updatePoint": {
                "line": 1041,
                "column": 57,
                "index": 40736
            },
            "line": 1041,
            "code": "  test('enableMFA happy path should callback on success  ', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.enableMFA(callback);\n    expect(callback.mock.calls[0][1]).toEqual('SUCCESS');\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "enableMFA should have an error when client request fails",
            "suites": [
                "enableMFA()"
            ],
            "updatePoint": {
                "line": 1046,
                "column": 64,
                "index": 40945
            },
            "line": 1046,
            "code": "  test('enableMFA should have an error when client request fails', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.enableMFA(callback);\n    expect(callback.mock.calls[0][0]).toMatchObject(networkError);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "enableMFA should return undefined when no client request is defined",
            "suites": [
                "enableMFA()"
            ],
            "updatePoint": {
                "line": 1051,
                "column": 75,
                "index": 41175
            },
            "line": 1051,
            "code": "  test('enableMFA should return undefined when no client request is defined', () => {\n    expect(cognitoUser.enableMFA(callback)).toEqual(undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "enableMFA should callback with an error when userSession is invalid",
            "suites": [
                "enableMFA()"
            ],
            "updatePoint": {
                "line": 1054,
                "column": 75,
                "index": 41331
            },
            "line": 1054,
            "code": "  test('enableMFA should callback with an error when userSession is invalid', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.enableMFA(callback);\n    expect(callback.mock.calls[0][0]).toMatchObject(Error('User is not authenticated'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path for setUserMfaPreferences should callback(null,SUCCESS)",
            "suites": [
                "setUserMfaPreference"
            ],
            "updatePoint": {
                "line": 1073,
                "column": 74,
                "index": 42000
            },
            "line": 1073,
            "code": "  test('happy path for setUserMfaPreferences should callback(null,SUCCESS)', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.setUserMfaPreference(...setUserMfaPreferenceDefaults);\n    expect(callback.mock.calls[0][1]).toEqual('SUCCESS');\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "client request throws an error path for setUserMfaPreferences should callback(null,SUCCESS)",
            "suites": [
                "setUserMfaPreference"
            ],
            "updatePoint": {
                "line": 1078,
                "column": 99,
                "index": 42278
            },
            "line": 1078,
            "code": "  test('client request throws an error path for setUserMfaPreferences should callback(null,SUCCESS)', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.setUserMfaPreference(...setUserMfaPreferenceDefaults);\n    expect(callback.mock.calls[0][0]).toMatchObject(Error('Network Error'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path for setUserMfaPreferences should callback(null,SUCCESS)",
            "suites": [
                "setUserMfaPreference"
            ],
            "updatePoint": {
                "line": 1083,
                "column": 74,
                "index": 42551
            },
            "line": 1083,
            "code": "  test('happy path for setUserMfaPreferences should callback(null,SUCCESS)', () => {\n    expect(cognitoUser.setUserMfaPreference(...setUserMfaPreferenceDefaults)).toEqual(undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "should callback error when cognito user session is invalid",
            "suites": [
                "setUserMfaPreference"
            ],
            "updatePoint": {
                "line": 1086,
                "column": 66,
                "index": 42732
            },
            "line": 1086,
            "code": "  test('should callback error when cognito user session is invalid', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.setUserMfaPreference(...setUserMfaPreferenceDefaults);\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('User is not authenticated'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path should callback with (null, SUCCESS)",
            "suites": [
                "disableMFA()"
            ],
            "updatePoint": {
                "line": 1104,
                "column": 55,
                "index": 43323
            },
            "line": 1104,
            "code": "  test('happy path should callback with (null, SUCCESS)', () => {\n    netRequestMockSuccess(true);\n    cognitoUser.disableMFA(callback);\n    expect(callback.mock.calls[0][1]).toEqual('SUCCESS');\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "client request throws an error and should callback with (err, null)",
            "suites": [
                "disableMFA()"
            ],
            "updatePoint": {
                "line": 1109,
                "column": 75,
                "index": 43544
            },
            "line": 1109,
            "code": "  test('client request throws an error and should callback with (err, null)', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.disableMFA(callback);\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('Network Error'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "client request does not exist and disableMFA should callback with (err, null)",
            "suites": [
                "disableMFA()"
            ],
            "updatePoint": {
                "line": 1114,
                "column": 85,
                "index": 43799
            },
            "line": 1114,
            "code": "  test('client request does not exist and disableMFA should callback with (err, null)', () => {\n    expect(cognitoUser.disableMFA(callback)).toEqual(undefined);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "when user is invalid, return callback with error",
            "suites": [
                "disableMFA()"
            ],
            "updatePoint": {
                "line": 1117,
                "column": 56,
                "index": 43937
            },
            "line": 1117,
            "code": "  test('when user is invalid, return callback with error', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.disableMFA(callback);\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('User is not authenticated'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path for getMFAOptions should callback onSuccess",
            "suites": [
                "getMFAOptions()"
            ],
            "updatePoint": {
                "line": 1135,
                "column": 62,
                "index": 44505
            },
            "line": 1135,
            "code": "  test('happy path for getMFAOptions should callback onSuccess', () => {\n    netRequestMockSuccess(true, {\n      MFAOptions: 'SMS_MFA'\n    });\n    cognitoUser.getMFAOptions(callback);\n    expect(callback.mock.calls[0][1]).toEqual('SMS_MFA');\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "client request throws an error and should callback with (err, null)",
            "suites": [
                "getMFAOptions()"
            ],
            "updatePoint": {
                "line": 1142,
                "column": 75,
                "index": 44766
            },
            "line": 1142,
            "code": "  test('client request throws an error and should callback with (err, null)', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.getMFAOptions(callback);\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('Network Error'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "when user is invalid, return callback with error",
            "suites": [
                "getMFAOptions()"
            ],
            "updatePoint": {
                "line": 1147,
                "column": 56,
                "index": 44995
            },
            "line": 1147,
            "code": "  test('when user is invalid, return callback with error', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.getMFAOptions(callback);\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('User is not authenticated'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path should callback SUCCESS",
            "suites": [
                "deleteUser()"
            ],
            "updatePoint": {
                "line": 1165,
                "column": 42,
                "index": 45543
            },
            "line": 1165,
            "code": "  test('happy path should callback SUCCESS', () => {\n    netRequestMockSuccess(true, null);\n    cognitoUser.deleteUser(callback, {});\n    expect(callback.mock.calls[0][1]).toEqual('SUCCESS');\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "client request throws an error",
            "suites": [
                "deleteUser()"
            ],
            "updatePoint": {
                "line": 1170,
                "column": 38,
                "index": 45737
            },
            "line": 1170,
            "code": "  test('client request throws an error', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.deleteUser(callback, {});\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('Network Error'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "having an invalid user session should callback with a new error",
            "suites": [
                "deleteUser()"
            ],
            "updatePoint": {
                "line": 1175,
                "column": 71,
                "index": 45982
            },
            "line": 1175,
            "code": "  test('having an invalid user session should callback with a new error', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.deleteUser(callback, {});\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('User is not authenticated'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path for getUserAttributes",
            "suites": [
                "getUserAttributes()"
            ],
            "updatePoint": {
                "line": 1193,
                "column": 40,
                "index": 46536
            },
            "line": 1193,
            "code": "  test('happy path for getUserAttributes', () => {\n    const userAttributesObject = {\n      UserAttributes: [{\n        Name: 'name1',\n        Value: 'value1'\n      }]\n    };\n    netRequestMockSuccess(true, userAttributesObject);\n    cognitoUser.getUserAttributes(callback);\n    expect(callback.mock.calls[0][1]).toMatchObject(userAttributesObject.UserAttributes);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "client request throws an error",
            "suites": [
                "getUserAttributes()"
            ],
            "updatePoint": {
                "line": 1204,
                "column": 38,
                "index": 46904
            },
            "line": 1204,
            "code": "  test('client request throws an error', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.getUserAttributes(callback);\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('Network Error'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "having an invalid user session should callback with a new error",
            "suites": [
                "getUserAttributes()"
            ],
            "updatePoint": {
                "line": 1209,
                "column": 71,
                "index": 47152
            },
            "line": 1209,
            "code": "  test('having an invalid user session should callback with a new error', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.getUserAttributes(callback);\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('User is not authenticated'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path for deleteAttrbutes should call getUserData to update cache",
            "suites": [
                "deleteAttributes()"
            ],
            "updatePoint": {
                "line": 1227,
                "column": 78,
                "index": 47746
            },
            "line": 1227,
            "code": "  test('happy path for deleteAttrbutes should call getUserData to update cache', () => {\n    netRequestMockSuccess(true);\n    const getUserDataSpy = jest.spyOn(cognitoUser, 'getUserData').mockImplementationOnce(cb => cb());\n    cognitoUser.deleteAttributes([], callback);\n    expect(getUserDataSpy).toBeCalled();\n    expect(callback.mock.calls[0][1]).toEqual('SUCCESS');\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "client request throws an error",
            "suites": [
                "deleteAttributes()"
            ],
            "updatePoint": {
                "line": 1234,
                "column": 38,
                "index": 48083
            },
            "line": 1234,
            "code": "  test('client request throws an error', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.deleteAttributes([], callback);\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('Network Error'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "having an invalid user session should callback with a new error",
            "suites": [
                "deleteAttributes()"
            ],
            "updatePoint": {
                "line": 1239,
                "column": 71,
                "index": 48334
            },
            "line": 1239,
            "code": "  test('having an invalid user session should callback with a new error', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.deleteAttributes([], callback);\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('User is not authenticated'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path should return a new CognitoUserSession",
            "suites": [
                "getCognitoUserSession()"
            ],
            "updatePoint": {
                "line": 1257,
                "column": 57,
                "index": 48973
            },
            "line": 1257,
            "code": "  test('happy path should return a new CognitoUserSession', () => {\n    expect(cognitoUser.getCognitoUserSession({\n      sessionData\n    })).toMatchObject(new CognitoUserSession(sessionData));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path for refresh session ",
            "suites": [
                "refreshSession()"
            ],
            "updatePoint": {
                "line": 1288,
                "column": 39,
                "index": 50038
            },
            "line": 1288,
            "code": "  test('happy path for refresh session ', () => {\n    netRequestMockSuccess(true, {\n      AuthenticationResult: {\n        RefreshToken: null\n      }\n    });\n    cognitoUser.refreshSession(...refreshSessionDefaults);\n    expect(callback.mock.calls[0][1]).toMatchObject(new CognitoUserSession(sessionData));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "client throws an error ",
            "suites": [
                "refreshSession()"
            ],
            "updatePoint": {
                "line": 1297,
                "column": 31,
                "index": 50342
            },
            "line": 1297,
            "code": "  test('client throws an error ', () => {\n    netRequestMockSuccess(false);\n    cognitoUser.refreshSession(...refreshSessionDefaults);\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('Network Error'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getSession()",
            "suites": [
                "refreshSession()"
            ],
            "updatePoint": {
                "line": 1302,
                "column": 20,
                "index": 50553
            },
            "line": 1302,
            "code": "  test('getSession()', () => {\n    cognitoUser.setSignInUserSession(ivCognitoUserSession);\n    cognitoUser.storage.setItem(idTokenKey, vCognitoUserSession.getIdToken().getJwtToken());\n    cognitoUser.storage.setItem(accessTokenKey, vCognitoUserSession.getAccessToken().getJwtToken());\n    cognitoUser.storage.setItem(refreshTokenKey, vCognitoUserSession.getRefreshToken().getToken());\n    cognitoUser.storage.setItem(clockDriftKey, vCognitoUserSession.getClockDrift());\n    cognitoUser.getSession(callback);\n    expect(callback.mock.calls[0][0]).toEqual(null);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "when a valid userSession exists, return callback(null, signInUserSession) from instance vars",
            "suites": [
                "refreshSession()"
            ],
            "updatePoint": {
                "line": 1311,
                "column": 100,
                "index": 51200
            },
            "line": 1311,
            "code": "  test('when a valid userSession exists, return callback(null, signInUserSession) from instance vars', () => {\n    cognitoUser.setSignInUserSession(vCognitoUserSession);\n    cognitoUser.getSession(callback);\n    expect(callback.mock.calls[0][1]).toMatchObject(cognitoUser.signInUserSession);\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "when a username is null, callback with an error",
            "suites": [
                "refreshSession()"
            ],
            "updatePoint": {
                "line": 1316,
                "column": 55,
                "index": 51453
            },
            "line": 1316,
            "code": "  test('when a username is null, callback with an error', () => {\n    cognitoUser.username = null;\n    cognitoUser.getSession(callback);\n    expect(callback.mock.calls[0][0]).toMatchObject(new Error('Username is null. Cannot retrieve a new session'));\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "update attributes usage of three out of three parameters in callback",
            "suites": [
                "refreshSession()"
            ],
            "updatePoint": {
                "line": 1321,
                "column": 76,
                "index": 51732
            },
            "line": 1321,
            "code": "  test('update attributes usage of three out of three parameters in callback', () => {\n    const codeDeliverDetailsResult = {\n      CodeDeliveryDetailsList: [{\n        AttributeName: 'email',\n        DeliveryMedium: 'EMAIL',\n        Destination: 'e***@e***'\n      }]\n    };\n    const spyon = jest.spyOn(CognitoUser.prototype, 'updateAttributes').mockImplementationOnce((attrs, callback) => {\n      callback(null, 'SUCCESS', codeDeliverDetailsResult);\n    });\n    const attrs = [{\n      Name: 'email',\n      Value: 'email@email.com'\n    }, {\n      Name: 'family_name',\n      Value: 'familyName'\n    }];\n    cognitoUser.updateAttributes(attrs, (err, result, details) => {\n      expect(err).toBe(null);\n      expect(result).toBe('SUCCESS');\n      expect(details).toBe(codeDeliverDetailsResult);\n    });\n    spyon.mockClear();\n  });",
            "file": "CognitoUser.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Get value",
            "suites": [
                "Getters and Setters"
            ],
            "updatePoint": {
                "line": 8,
                "column": 17,
                "index": 270
            },
            "line": 8,
            "code": "  test('Get value', () => {\n    expect(cognitoUserAttribute.getValue()).toBe(testValue);\n  });",
            "file": "CognitoUserAttribute.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Get name",
            "suites": [
                "Getters and Setters"
            ],
            "updatePoint": {
                "line": 11,
                "column": 16,
                "index": 364
            },
            "line": 11,
            "code": "  test('Get name', () => {\n    expect(cognitoUserAttribute.getName()).toBe(testName);\n  });",
            "file": "CognitoUserAttribute.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Set value",
            "suites": [
                "Getters and Setters"
            ],
            "updatePoint": {
                "line": 14,
                "column": 17,
                "index": 457
            },
            "line": 14,
            "code": "  test('Set value', () => {\n    expect(cognitoUserAttribute.setValue('newValue').Value).toBe('newValue');\n    cognitoUserAttribute.setValue(testValue);\n  });",
            "file": "CognitoUserAttribute.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Set name",
            "suites": [
                "Getters and Setters"
            ],
            "updatePoint": {
                "line": 18,
                "column": 16,
                "index": 614
            },
            "line": 18,
            "code": "  test('Set name', () => {\n    expect(cognitoUserAttribute.setName('newName').Name).toBe('newName');\n    cognitoUserAttribute.setName(testName);\n  });",
            "file": "CognitoUserAttribute.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "toString method",
            "suites": [
                "Testing different representation of CognitoUserAttrs"
            ],
            "updatePoint": {
                "line": 24,
                "column": 23,
                "index": 849
            },
            "line": 24,
            "code": "  test('toString method', () => {\n    expect(cognitoUserAttribute.toString()).toEqual('{\"Name\":\"testName\",\"Value\":\"testValue\"}');\n  });",
            "file": "CognitoUserAttribute.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "toJSON method",
            "suites": [
                "Testing different representation of CognitoUserAttrs"
            ],
            "updatePoint": {
                "line": 27,
                "column": 21,
                "index": 983
            },
            "line": 27,
            "code": "  test('toJSON method', () => {\n    expect(cognitoUserAttribute.toJSON()).toEqual({\n      Name: testName,\n      Value: testValue\n    });\n  });",
            "file": "CognitoUserAttribute.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Undefined Name",
            "suites": [
                "Testing constructor"
            ],
            "updatePoint": {
                "line": 35,
                "column": 22,
                "index": 1171
            },
            "line": 35,
            "code": "  test('Undefined Name', () => {\n    const undefinedCognitoName = new CognitoUserAttribute({\n      Value: testValue\n    });\n    expect(undefinedCognitoName.getName()).toBe('');\n  });",
            "file": "CognitoUserAttribute.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Undefined Value",
            "suites": [
                "Testing constructor"
            ],
            "updatePoint": {
                "line": 41,
                "column": 23,
                "index": 1355
            },
            "line": 41,
            "code": "  test('Undefined Value', () => {\n    const undefinedCognitoValue = new CognitoUserAttribute({\n      Name: testName\n    });\n    expect(undefinedCognitoValue.getValue()).toBe('');\n  });",
            "file": "CognitoUserAttribute.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Undefined cognito attributes",
            "suites": [
                "Testing constructor"
            ],
            "updatePoint": {
                "line": 47,
                "column": 36,
                "index": 1553
            },
            "line": 47,
            "code": "  test('Undefined cognito attributes', () => {\n    const undefinedCognitoAttr = new CognitoUserAttribute();\n    expect(undefinedCognitoAttr.getValue()).toBe('');\n    expect(undefinedCognitoAttr.getName()).toBe('');\n  });",
            "file": "CognitoUserAttribute.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "when either userPoolId or clientId is null throw a requirement error",
            "suites": [
                "Constructor and accessor methods"
            ],
            "updatePoint": {
                "line": 13,
                "column": 76,
                "index": 499
            },
            "line": 13,
            "code": "  test('when either userPoolId or clientId is null throw a requirement error', () => {\n    const data = {\n      UserPoolId: null,\n      ClientId: clientId\n    };\n    expect(() => {\n      new CognitoUserPool(data);\n    }).toThrowError('Both UserPoolId and ClientId are required.');\n  });",
            "file": "CognitoUserPool.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Getting clientId from CognitoUserPool",
            "suites": [
                "Constructor and accessor methods"
            ],
            "updatePoint": {
                "line": 22,
                "column": 45,
                "index": 755
            },
            "line": 22,
            "code": "  test('Getting clientId from CognitoUserPool', () => {\n    expect(cognitoUserPool.getClientId()).toBe(clientId);\n  });",
            "file": "CognitoUserPool.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Getting userPoolId from CognitoUserPool",
            "suites": [
                "Constructor and accessor methods"
            ],
            "updatePoint": {
                "line": 25,
                "column": 47,
                "index": 877
            },
            "line": 25,
            "code": "  test('Getting userPoolId from CognitoUserPool', () => {\n    expect(cognitoUserPool.getUserPoolId()).toBe(userPoolId);\n  });",
            "file": "CognitoUserPool.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Getting userPoolName from CognitoUserPool",
            "suites": [
                "Constructor and accessor methods"
            ],
            "updatePoint": {
                "line": 28,
                "column": 49,
                "index": 1005
            },
            "line": 28,
            "code": "  test('Getting userPoolName from CognitoUserPool', () => {\n    expect(cognitoUserPool.getUserPoolName()).toBe(userPoolName);\n  });",
            "file": "CognitoUserPool.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Getting user context data without advancedSecurityData",
            "suites": [
                "Constructor and accessor methods"
            ],
            "updatePoint": {
                "line": 31,
                "column": 62,
                "index": 1150
            },
            "line": 31,
            "code": "  test('Getting user context data without advancedSecurityData', () => {\n    const cognitoUserPool = new CognitoUserPool(minimalData);\n    expect(cognitoUserPool.getUserContextData(userName)).toBe(undefined);\n  });",
            "file": "CognitoUserPool.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "When a user has not been logged in, return null from getting the current user",
            "suites": [
                "Constructor and accessor methods"
            ],
            "updatePoint": {
                "line": 35,
                "column": 85,
                "index": 1388
            },
            "line": 35,
            "code": "  test('When a user has not been logged in, return null from getting the current user', () => {\n    expect(cognitoUserPool.getCurrentUser()).toBe(null);\n  });",
            "file": "CognitoUserPool.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "When a user has been logged in, return the CognitoUser getting the current user",
            "suites": [
                "Constructor and accessor methods"
            ],
            "updatePoint": {
                "line": 38,
                "column": 87,
                "index": 1549
            },
            "line": 38,
            "code": "  test('When a user has been logged in, return the CognitoUser getting the current user', async () => {\n    jest.spyOn(Storage.prototype, 'getItem').mockImplementation(() => {\n      return 'username';\n    });\n\n    //returns a function that records everything being done to it\n    expect(cognitoUserPool.getCurrentUser()).toMatchObject({\n      username: 'username'\n    });\n  });",
            "file": "CognitoUserPool.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "signUp()",
            "suites": [
                "Testing signUp of a user into a user pool"
            ],
            "updatePoint": {
                "line": 58,
                "column": 16,
                "index": 2116
            },
            "line": 58,
            "code": "  test('signUp()', async () => {\n    jest.spyOn(Client.prototype, 'request').mockImplementation((...args) => {\n      args[2](null, {});\n    });\n    const callback = jest.fn();\n    cognitoUserPool.signUp(userName, password, [], [], callback, []);\n    expect(callback.mock.calls[0][1]).toMatchObject({\n      user: {\n        username: userName\n      }\n    });\n    expect(callback.mock.calls[0][0]).toBe(null);\n  });",
            "file": "CognitoUserPool.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Signing up a user has some kind of error",
            "suites": [
                "Testing signUp of a user into a user pool"
            ],
            "updatePoint": {
                "line": 71,
                "column": 48,
                "index": 2561
            },
            "line": 71,
            "code": "  test('Signing up a user has some kind of error', async () => {\n    jest.spyOn(Client.prototype, 'request').mockImplementation((...args) => {\n      const err = new Error('Network Error');\n      args[2](null, {});\n    });\n\n    //returns a function that records everything being done to it\n    const callback = jest.fn();\n    cognitoUserPool.signUp(userName, password, [], [], callback, []);\n    expect(callback.mock.calls.length).toBe(1);\n  });",
            "file": "CognitoUserPool.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Domain not supplied",
            "suites": [
                "Cookie Storage Unit Tests",
                "Constructor methods"
            ],
            "updatePoint": {
                "line": 14,
                "column": 29,
                "index": 368
            },
            "line": 14,
            "code": "    test('Domain not supplied', () => {\n      const storage = new CookieStorage();\n      expect(storage.setItem('key', 'value')).toBe('value');\n      expect(storage.getItem('key')).toBe('value');\n    });",
            "file": "CookieStorage.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Samesite value is undefined",
            "suites": [
                "Cookie Storage Unit Tests",
                "Constructor methods"
            ],
            "updatePoint": {
                "line": 19,
                "column": 37,
                "index": 580
            },
            "line": 19,
            "code": "    test('Samesite value is undefined', () => {\n      expect(() => {\n        new CookieStorage({\n          domain: cookieStorageDomain,\n          sameSite: undefined\n        });\n      }).toThrowError('The sameSite value of cookieStorage must be \"lax\", \"strict\" or \"none\"');\n    });",
            "file": "CookieStorage.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Samesite value is none while secure = false",
            "suites": [
                "Cookie Storage Unit Tests",
                "Constructor methods"
            ],
            "updatePoint": {
                "line": 27,
                "column": 53,
                "index": 878
            },
            "line": 27,
            "code": "    test('Samesite value is none while secure = false', () => {\n      expect(() => {\n        new CookieStorage({\n          domain: cookieStorageDomain,\n          secure: false,\n          sameSite: 'none'\n        });\n      }).toThrowError('sameSite = None requires the Secure attribute in latest browser versions.');\n    });",
            "file": "CookieStorage.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Has an expiration value",
            "suites": [
                "Cookie Storage Unit Tests",
                "Constructor methods"
            ],
            "updatePoint": {
                "line": 36,
                "column": 33,
                "index": 1182
            },
            "line": 36,
            "code": "    test('Has an expiration value', () => {\n      const cookieExpires = new CookieStorage({\n        domain: cookieStorageDomain,\n        secure: false,\n        expires: 200\n      });\n      expect(cookieExpires.expires).toBe(200);\n    });",
            "file": "CookieStorage.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getting an item",
            "suites": [
                "Cookie Storage Unit Tests",
                "Constructor methods",
                "Setters and getters"
            ],
            "updatePoint": {
                "line": 50,
                "column": 27,
                "index": 1616
            },
            "line": 50,
            "code": "      test('getting an item', () => {\n        cookieStore.setItem('testKey', 'testValue');\n        expect(cookieStore.getItem('testKey')).toBe('testValue');\n      });",
            "file": "CookieStorage.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "setting an item",
            "suites": [
                "Cookie Storage Unit Tests",
                "Constructor methods",
                "Setters and getters"
            ],
            "updatePoint": {
                "line": 54,
                "column": 27,
                "index": 1783
            },
            "line": 54,
            "code": "      test('setting an item', () => {\n        expect(cookieStore.setItem('domain', 'newdomain.com')).toBe('newdomain.com');\n      });",
            "file": "CookieStorage.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Clearing cookies should remove all items within the storage",
            "suites": [
                "Cookie Storage Unit Tests",
                "Constructor methods",
                "Setters and getters"
            ],
            "updatePoint": {
                "line": 57,
                "column": 71,
                "index": 1961
            },
            "line": 57,
            "code": "      test('Clearing cookies should remove all items within the storage', () => {\n        const cookieStore = new CookieStorage(cookieStoreData);\n        cookieStore.setItem('testKey2', 'testValue');\n        const tempReference = cookieStore.getItem();\n        cookieStore.clear();\n        expect(cookieStore.getItem()).not.toEqual(tempReference);\n      });",
            "file": "CookieStorage.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "crypto is set for window (browser)",
            "suites": [
                "cryptoSecureRandomInt test"
            ],
            "updatePoint": {
                "line": 11,
                "column": 42,
                "index": 301
            },
            "line": 11,
            "code": "  test('crypto is set for window (browser)', () => {\n    windowSpy.mockImplementation(() => ({\n      crypto: {\n        getRandomValues: () => [12345]\n      }\n    }));\n    const cryptoSecureRandomInt = require('../src/utils/cryptoSecureRandomInt').default;\n    expect(window.crypto).toBeTruthy();\n    expect(cryptoSecureRandomInt()).toBe(12345);\n  });",
            "file": "cryptoSecureRandomInt.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "crypto is set for window (IE 11)",
            "suites": [
                "cryptoSecureRandomInt test"
            ],
            "updatePoint": {
                "line": 21,
                "column": 40,
                "index": 650
            },
            "line": 21,
            "code": "  test('crypto is set for window (IE 11)', () => {\n    windowSpy.mockImplementation(() => ({\n      crypto: undefined,\n      msCrypto: {\n        getRandomValues: () => [67890]\n      }\n    }));\n    const cryptoSecureRandomInt = require('../src/utils/cryptoSecureRandomInt').default;\n    expect(window.msCrypto).toBeTruthy();\n    expect(cryptoSecureRandomInt()).toBe(67890);\n  });",
            "file": "cryptoSecureRandomInt.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "crypto is set for Node",
            "suites": [
                "cryptoSecureRandomInt test"
            ],
            "updatePoint": {
                "line": 32,
                "column": 30,
                "index": 1018
            },
            "line": 32,
            "code": "  test('crypto is set for Node', () => {\n    windowSpy.mockImplementation(() => ({\n      crypto: null\n    }));\n    const randomBytesMock = jest.spyOn(crypto, 'randomBytes').mockImplementationOnce(() => ({\n      readInt32LE: jest.fn().mockReturnValueOnce(54321)\n    }));\n    const cryptoSecureRandomInt = require('../src/utils/cryptoSecureRandomInt').default;\n    expect(cryptoSecureRandomInt()).toBe(54321);\n    randomBytesMock.mockRestore();\n  });",
            "file": "cryptoSecureRandomInt.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy path should return the date \"Tue Jan 1 06:06:09 UTC 2019\" format",
            "suites": [
                "getNowString()"
            ],
            "updatePoint": {
                "line": 5,
                "column": 78,
                "index": 256
            },
            "line": 5,
            "code": "  test('happy path should return the date \"Tue Jan 1 06:06:09 UTC 2019\" format', () => {\n    const mockDate = new Date(1546322769000);\n    jest.spyOn(global, 'Date').mockImplementation(() => mockDate);\n    const dateHelper = new DateHelper();\n    expect(dateHelper.getNowString()).toEqual('Tue Jan 1 06:06:09 UTC 2019');\n    jest.restoreAllMocks();\n  });",
            "file": "DateHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "should match snapshot",
            "suites": [
                "import * keys"
            ],
            "updatePoint": {
                "line": 3,
                "column": 27,
                "index": 104
            },
            "line": 3,
            "code": "  it('should match snapshot', () => {\n    expect(Object.keys(exported)).toMatchInlineSnapshot(`\n\t\tArray [\n\t\t  \"AuthenticationDetails\",\n\t\t  \"AuthenticationHelper\",\n\t\t  \"CognitoAccessToken\",\n\t\t  \"CognitoIdToken\",\n\t\t  \"CognitoRefreshToken\",\n\t\t  \"CognitoUser\",\n\t\t  \"CognitoUserAttribute\",\n\t\t  \"CognitoUserPool\",\n\t\t  \"CognitoUserSession\",\n\t\t  \"CookieStorage\",\n\t\t  \"DateHelper\",\n\t\t  \"appendToCognitoUserAgent\",\n\t\t  \"WordArray\",\n\t\t]\n\t`);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Constructor with local storage and operations defined",
            "suites": [
                "StorageHelper unit test"
            ],
            "updatePoint": {
                "line": 4,
                "column": 61,
                "index": 210
            },
            "line": 4,
            "code": "  test('Constructor with local storage and operations defined', () => {\n    var localStorageMock = function () {\n      var store = {};\n      return {\n        getItem: function (key) {\n          return store[key];\n        },\n        setItem: function (key, value) {\n          store[key] = value.toString();\n        },\n        clear: function () {\n          store = {};\n        },\n        removeItem: function (key) {\n          delete store[key];\n        }\n      };\n    }();\n    Object.defineProperty(window, 'localStorage', {\n      value: localStorageMock,\n      writable: true\n    });\n    const storageHelper = new StorageHelper();\n    expect(storageHelper.getStorage()).toBe(localStorageMock);\n  });",
            "file": "StorageHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Checking the constructor catches the exception",
            "suites": [
                "StorageHelper unit test",
                "operations when local storage is undefined"
            ],
            "updatePoint": {
                "line": 30,
                "column": 56,
                "index": 971
            },
            "line": 30,
            "code": "    test('Checking the constructor catches the exception', () => {\n      window.localStorage = undefined;\n      const storageHelper = new StorageHelper();\n      expect(storageHelper.getStorage()).toBe(MemoryStorage);\n    });",
            "file": "StorageHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Setting items in the MemoryStorage implementation",
            "suites": [
                "StorageHelper unit test",
                "operations when local storage is undefined"
            ],
            "updatePoint": {
                "line": 35,
                "column": 59,
                "index": 1199
            },
            "line": 35,
            "code": "    test('Setting items in the MemoryStorage implementation', () => {\n      const storageHelper = new StorageHelper();\n      expect(storageHelper.getStorage().setItem('testKey', 'testValue')).toBe('testValue');\n    });",
            "file": "StorageHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Getting items in the MemoryStorage implementation happy path",
            "suites": [
                "StorageHelper unit test",
                "operations when local storage is undefined"
            ],
            "updatePoint": {
                "line": 39,
                "column": 70,
                "index": 1429
            },
            "line": 39,
            "code": "    test('Getting items in the MemoryStorage implementation happy path', () => {\n      const storageHelper = new StorageHelper();\n      expect(storageHelper.getStorage().getItem('testKey')).toBe('testValue');\n    });",
            "file": "StorageHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Getting items in the MemoryStorage implementation does not have key in MemoryStorage",
            "suites": [
                "StorageHelper unit test",
                "operations when local storage is undefined"
            ],
            "updatePoint": {
                "line": 43,
                "column": 94,
                "index": 1670
            },
            "line": 43,
            "code": "    test('Getting items in the MemoryStorage implementation does not have key in MemoryStorage', () => {\n      const storageHelper = new StorageHelper();\n      expect(storageHelper.getStorage().getItem('newKey')).toBe(undefined);\n    });",
            "file": "StorageHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Removing an item in the MemoryStorage implementation",
            "suites": [
                "StorageHelper unit test",
                "operations when local storage is undefined"
            ],
            "updatePoint": {
                "line": 47,
                "column": 62,
                "index": 1876
            },
            "line": 47,
            "code": "    test('Removing an item in the MemoryStorage implementation', () => {\n      const storageHelper = new StorageHelper();\n      expect(storageHelper.getStorage().removeItem('testKey')).toBe(true);\n    });",
            "file": "StorageHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Clearing storage",
            "suites": [
                "StorageHelper unit test",
                "operations when local storage is undefined"
            ],
            "updatePoint": {
                "line": 51,
                "column": 26,
                "index": 2045
            },
            "line": 51,
            "code": "    test('Clearing storage', () => {\n      const storageHelper = new StorageHelper();\n      expect(storageHelper.getStorage().clear()).toEqual({});\n    });",
            "file": "StorageHelper.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "setting an item",
            "suites": [
                "React native storage helper unit tests",
                "Accessor methods"
            ],
            "updatePoint": {
                "line": 27,
                "column": 25,
                "index": 862
            },
            "line": 27,
            "code": "    test('setting an item', () => {\n      expect(storageHelper.getStorage().setItem('testKey', 'testValue')).toEqual('testValue');\n    });",
            "file": "StorageHelperRN.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getting an item",
            "suites": [
                "React native storage helper unit tests",
                "Accessor methods"
            ],
            "updatePoint": {
                "line": 30,
                "column": 25,
                "index": 1001
            },
            "line": 30,
            "code": "    test('getting an item', () => {\n      expect(storageHelper.getStorage().getItem('testKey')).toEqual('testValue');\n    });",
            "file": "StorageHelperRN.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "removing an item",
            "suites": [
                "React native storage helper unit tests",
                "Accessor methods"
            ],
            "updatePoint": {
                "line": 33,
                "column": 26,
                "index": 1128
            },
            "line": 33,
            "code": "    test('removing an item', () => {\n      expect(storageHelper.getStorage().removeItem('testKey')).toEqual(true);\n    });",
            "file": "StorageHelperRN.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "clearing the storage",
            "suites": [
                "React native storage helper unit tests",
                "Accessor methods"
            ],
            "updatePoint": {
                "line": 36,
                "column": 30,
                "index": 1255
            },
            "line": 36,
            "code": "    test('clearing the storage', () => {\n      storageHelper.getStorage().setItem('item1', 'value1');\n      expect(storageHelper.getStorage().clear()).toEqual({});\n    });",
            "file": "StorageHelperRN.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Happy case for syncing",
            "suites": [
                "React native storage helper unit tests",
                "Testing StorageHelper sync"
            ],
            "updatePoint": {
                "line": 45,
                "column": 32,
                "index": 1542
            },
            "line": 45,
            "code": "    test('Happy case for syncing', () => {\n      const items = {\n        '@MemoryStorage:key': 'value1'\n      };\n      jest.mock('@react-native-async-storage/async-storage', () => ({\n        setItem: jest.fn((item, value) => {\n          return new Promise((resolve, reject) => {\n            items[item] = value;\n            resolve(value);\n          });\n        }),\n        getAllKeys: jest.fn(callback => {\n          callback(null, Object.keys(items));\n        }),\n        multiGet: jest.fn((keys, callback) => {\n          const values = keys.map(key => [key, items[key] || null]);\n          callback && callback(null, values);\n          return values;\n        })\n      }));\n      const StorageHelper = require('../src/StorageHelper-rn.js').default;\n      const storageHelper = new StorageHelper();\n      const callback = jest.fn();\n      expect(storageHelper.getStorage().getItem('key')).toBeUndefined();\n      storageHelper.getStorage().sync(callback);\n      expect(callback.mock.calls[0][1]).toEqual('SUCCESS');\n      expect(storageHelper.getStorage().getItem('key')).toEqual('value1');\n    });",
            "file": "StorageHelperRN.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Get all keys throws errors",
            "suites": [
                "React native storage helper unit tests",
                "Testing StorageHelper sync"
            ],
            "updatePoint": {
                "line": 73,
                "column": 36,
                "index": 2645
            },
            "line": 73,
            "code": "    test('Get all keys throws errors', () => {\n      jest.mock('@react-native-async-storage/async-storage', () => ({\n        getAllKeys: jest.fn(callback => {\n          const err = ['errKey'];\n          callback(err, null);\n        })\n      }));\n      const StorageHelper = require('../src/StorageHelper-rn.js').default;\n      const storageHelper = new StorageHelper();\n      const callback = jest.fn();\n      storageHelper.getStorage().sync(callback);\n      expect(callback.mock.calls[0][0]).toEqual(['errKey']);\n    });",
            "file": "StorageHelperRN.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "Multiget throws errors",
            "suites": [
                "React native storage helper unit tests",
                "Testing StorageHelper sync"
            ],
            "updatePoint": {
                "line": 86,
                "column": 32,
                "index": 3163
            },
            "line": 86,
            "code": "    test('Multiget throws errors', () => {\n      var items = {};\n      jest.mock('@react-native-async-storage/async-storage', () => ({\n        getAllKeys: jest.fn(callback => {\n          callback(null, Object.keys(items));\n        }),\n        multiGet: jest.fn((keys, callback) => {\n          const values = keys.map(key => [key, items[key] || null]);\n          const err = new Error('Storage Error');\n          callback && callback(err, null);\n          return values;\n        })\n      }));\n      const StorageHelper = require('../src/StorageHelper-rn.js').default;\n      const storageHelper = new StorageHelper();\n      const callback = jest.fn();\n      storageHelper.getStorage().sync(callback);\n      expect(callback.mock.calls[0][0]).toMatchObject(Error('Storage Error'));\n    });",
            "file": "StorageHelperRN.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "userAgent is set by default",
            "suites": [
                "UserAgent test"
            ],
            "updatePoint": {
                "line": 12,
                "column": 35,
                "index": 571
            },
            "line": 12,
            "code": "  test('userAgent is set by default', () => {\n    expect(UserAgent.prototype.userAgent).toBe(DEFAULT_USER_AGENT);\n  });",
            "file": "UserAgent.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "appendToCognitoUserAgent does nothing to the userAgent if nothing is passed into it",
            "suites": [
                "UserAgent test"
            ],
            "updatePoint": {
                "line": 15,
                "column": 91,
                "index": 747
            },
            "line": 15,
            "code": "  test('appendToCognitoUserAgent does nothing to the userAgent if nothing is passed into it', () => {\n    appendToCognitoUserAgent();\n    expect(UserAgent.prototype.userAgent).toBe(DEFAULT_USER_AGENT);\n  });",
            "file": "UserAgent.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "appendToCognitoUserAgent appends content to userAgent",
            "suites": [
                "UserAgent test"
            ],
            "updatePoint": {
                "line": 19,
                "column": 61,
                "index": 925
            },
            "line": 19,
            "code": "  test('appendToCognitoUserAgent appends content to userAgent', () => {\n    appendToCognitoUserAgent('test');\n    expect(UserAgent.prototype.userAgent).toBe(`${DEFAULT_USER_AGENT} test`);\n    expect(getAmplifyUserAgent()).toBe(`${DEFAULT_USER_AGENT} test`);\n  });",
            "file": "UserAgent.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "appendToCognitoUserAgent does not append duplicate content",
            "suites": [
                "UserAgent test"
            ],
            "updatePoint": {
                "line": 24,
                "column": 66,
                "index": 1194
            },
            "line": 24,
            "code": "  test('appendToCognitoUserAgent does not append duplicate content', () => {\n    appendToCognitoUserAgent('test');\n    appendToCognitoUserAgent('test');\n    expect(UserAgent.prototype.userAgent).not.toBe(`${DEFAULT_USER_AGENT} test test`);\n    expect(UserAgent.prototype.userAgent).toBe(`${DEFAULT_USER_AGENT} test`);\n    expect(getAmplifyUserAgent()).toBe(`${DEFAULT_USER_AGENT} test`);\n  });",
            "file": "UserAgent.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "appendToCognitoUserAgent sets userAgent if userAgent has no content",
            "suites": [
                "UserAgent test"
            ],
            "updatePoint": {
                "line": 31,
                "column": 75,
                "index": 1597
            },
            "line": 31,
            "code": "  test('appendToCognitoUserAgent sets userAgent if userAgent has no content', () => {\n    UserAgent.prototype.userAgent = '';\n    appendToCognitoUserAgent('test');\n    expect(UserAgent.prototype.userAgent).toBe('test');\n    UserAgent.prototype.userAgent = undefined;\n    appendToCognitoUserAgent('test');\n    expect(UserAgent.prototype.userAgent).toBe('test');\n  });",
            "file": "UserAgent.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "addAuthCategoryToCognitoUserAgent sets category and shows category/action in user agent",
            "suites": [
                "UserAgent test"
            ],
            "updatePoint": {
                "line": 39,
                "column": 95,
                "index": 1984
            },
            "line": 39,
            "code": "  test('addAuthCategoryToCognitoUserAgent sets category and shows category/action in user agent', () => {\n    addAuthCategoryToCognitoUserAgent();\n    expect(UserAgent.category).toBe(AUTH_CATEGORY);\n    expect(getAmplifyUserAgent()).toBe(`${DEFAULT_USER_AGENT} ${USER_AGENT_AUTH}`);\n  });",
            "file": "UserAgent.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "addFrameworkToCognitoUserAgent sets framework and shows framework in user agent",
            "suites": [
                "UserAgent test"
            ],
            "updatePoint": {
                "line": 44,
                "column": 87,
                "index": 2265
            },
            "line": 44,
            "code": "  test('addFrameworkToCognitoUserAgent sets framework and shows framework in user agent', () => {\n    addFrameworkToCognitoUserAgent('0');\n    expect(UserAgent.framework).toBe('0');\n    expect(getAmplifyUserAgent()).toBe(`${DEFAULT_USER_AGENT} ${USER_AGENT_FRAMEWORK0}`);\n  });",
            "file": "UserAgent.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "getUserAgent version match",
            "suites": [
                "User agent version"
            ],
            "updatePoint": {
                "line": 4,
                "column": 34,
                "index": 167
            },
            "line": 4,
            "code": "  test('getUserAgent version match', () => {\n    const userAgent = new UserAgent();\n    expect(userAgent.userAgent).toEqual(`aws-amplify/${version}`);\n  });",
            "file": "UserAgentDefault.test.js",
            "skipped": false,
            "dir": "packages/amazon-cognito-identity-js/__tests__"
        },
        {
            "name": "happy case with default parser",
            "suites": [
                "Analytics test",
                "configure test"
            ],
            "updatePoint": {
                "line": 66,
                "column": 38
            },
            "line": 66,
            "code": "\t\ttest('happy case with default parser', () => {\n\t\t\tconst analytics = new Analytics();\n\t\t\tClientDevice.clientInfo = jest.fn().mockReturnValueOnce('clientInfo');\n\n\t\t\tconst mockAWSAnalyticsProviderConfigure = jest\n\t\t\t\t.spyOn(AWSAnalyticsProvider.prototype, 'configure')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn;\n\t\t\t\t});\n\n\t\t\texpect(analytics.configure({ attr: 'attr' })).toEqual({\n\t\t\t\tAWSPinpoint: { appId: 'appId' },\n\t\t\t\tattr: 'attr',\n\t\t\t\tautoSessionRecord: true,\n\t\t\t});\n\n\t\t\tmockAWSAnalyticsProviderConfigure.mockClear();\n\t\t});",
            "file": "Analytics.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Analytics test",
                "startSession test"
            ],
            "updatePoint": {
                "line": 87,
                "column": 18
            },
            "line": 87,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst analytics = new Analytics();\n\t\t\tconst provider = new AWSAnalyticsProvider();\n\t\t\tanalytics.addPluggable(provider);\n\t\t\tanalytics.configure({ mock: 'value' });\n\n\t\t\tawait analytics.startSession();\n\t\t\texpect(mockHubDispatch).toBeCalledWith(\n\t\t\t\t'analytics',\n\t\t\t\t{\n\t\t\t\t\tevent: 'record',\n\t\t\t\t\tdata: { name: '_session.start' },\n\t\t\t\t\tmessage: 'Recording Analytics session start event',\n\t\t\t\t},\n\t\t\t\t'Analytics',\n\t\t\t\texpect.anything()\n\t\t\t);\n\t\t\texpect(record_spyon).toBeCalled();\n\t\t});",
            "file": "Analytics.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Analytics test",
                "stopSession test"
            ],
            "updatePoint": {
                "line": 109,
                "column": 18
            },
            "line": 109,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst analytics = new Analytics();\n\t\t\tconst provider = new AWSAnalyticsProvider();\n\t\t\tanalytics.addPluggable(provider);\n\t\t\tanalytics.configure({ mock: 'value' });\n\n\t\t\tawait analytics.stopSession();\n\t\t\texpect(mockHubDispatch).toBeCalledWith(\n\t\t\t\t'analytics',\n\t\t\t\t{\n\t\t\t\t\tevent: 'record',\n\t\t\t\t\tdata: { name: '_session.stop' },\n\t\t\t\t\tmessage: 'Recording Analytics session stop event',\n\t\t\t\t},\n\t\t\t\t'Analytics',\n\t\t\t\texpect.anything()\n\t\t\t);\n\t\t\texpect(record_spyon).toBeCalled();\n\t\t});",
            "file": "Analytics.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Analytics test",
                "record test"
            ],
            "updatePoint": {
                "line": 131,
                "column": 18
            },
            "line": 131,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst analytics = new Analytics();\n\t\t\tconst provider = new AWSAnalyticsProvider();\n\t\t\tanalytics.addPluggable(provider);\n\t\t\tanalytics.configure({ mock: 'value' });\n\t\t\tconst event = {\n\t\t\t\tname: 'event',\n\t\t\t\tattributes: { key: 'value' },\n\t\t\t\tmetrics: { metric: 123 },\n\t\t\t};\n\n\t\t\tawait analytics.record(event);\n\t\t\texpect(mockHubDispatch).toBeCalledWith(\n\t\t\t\t'analytics',\n\t\t\t\t{\n\t\t\t\t\tevent: 'record',\n\t\t\t\t\tdata: event,\n\t\t\t\t\tmessage: 'Recording Analytics event',\n\t\t\t\t},\n\t\t\t\t'Analytics',\n\t\t\t\texpect.anything()\n\t\t\t);\n\t\t\texpect(record_spyon).toBeCalled();\n\t\t});",
            "file": "Analytics.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record with custom provider",
            "suites": [
                "Analytics test",
                "record test"
            ],
            "updatePoint": {
                "line": 160,
                "column": 35
            },
            "line": 160,
            "code": "\t\ttest('record with custom provider', async () => {\n\t\t\tconst analytics = new Analytics();\n\t\t\tconst customProvider = new TestCustomProvider();\n\t\t\tconst customProviderRecordSpy = jest.spyOn(customProvider, 'record');\n\n\t\t\tanalytics.addPluggable(customProvider);\n\n\t\t\tconst recordResponse = await analytics.record(\n\t\t\t\t{ name: 'testEvent' },\n\t\t\t\t'CustomProvider'\n\t\t\t);\n\n\t\t\texpect(customProviderRecordSpy).toBeCalled();\n\t\t\texpect(recordResponse).toBe(true);\n\t\t});",
            "file": "Analytics.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Analytics test",
                "updateEndpoint test"
            ],
            "updatePoint": {
                "line": 178,
                "column": 18
            },
            "line": 178,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst analytics = new Analytics();\n\t\t\tconst provider = new AWSAnalyticsProvider();\n\t\t\tanalytics.addPluggable(provider);\n\t\t\tanalytics.configure({ mock: 'value' });\n\n\t\t\tawait analytics.updateEndpoint({\n\t\t\t\tUserId: 'id',\n\t\t\t});\n\t\t\texpect(record_spyon).toBeCalled();\n\t\t});",
            "file": "Analytics.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "disable test",
            "suites": [
                "Analytics test",
                "analytics turn on/off test"
            ],
            "updatePoint": {
                "line": 192,
                "column": 20
            },
            "line": 192,
            "code": "\t\ttest('disable test', () => {\n\t\t\tconst analytics = new Analytics();\n\t\t\tanalytics.disable();\n\t\t});",
            "file": "Analytics.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "enable test",
            "suites": [
                "Analytics test",
                "analytics turn on/off test"
            ],
            "updatePoint": {
                "line": 197,
                "column": 19
            },
            "line": 197,
            "code": "\t\ttest('enable test', () => {\n\t\t\tconst analytics = new Analytics();\n\t\t\tanalytics.enable();\n\t\t});",
            "file": "Analytics.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Analytics test",
                "getPluggable test"
            ],
            "updatePoint": {
                "line": 204,
                "column": 18
            },
            "line": 204,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new Analytics();\n\n\t\t\tconst provider = new AWSAnalyticsProvider();\n\t\t\tanalytics.addPluggable(provider);\n\n\t\t\texpect(analytics.getPluggable(provider.getProviderName())).toBeInstanceOf(\n\t\t\t\tAWSAnalyticsProvider\n\t\t\t);\n\t\t});",
            "file": "Analytics.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Analytics test",
                "removePluggable test"
            ],
            "updatePoint": {
                "line": 217,
                "column": 18
            },
            "line": 217,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new Analytics();\n\n\t\t\t// this provider is added by default in the configure method\n\t\t\t// of analytics when initialized. No need to add it again here.\n\t\t\tconst provider = new AWSAnalyticsProvider();\n\n\t\t\tanalytics.removePluggable(provider.getProviderName());\n\n\t\t\texpect(analytics.getPluggable(provider.getProviderName())).toBeNull();\n\t\t});",
            "file": "Analytics.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Personalize provider test",
                "getProviderName test"
            ],
            "updatePoint": {
                "line": 38,
                "column": 18
            },
            "line": 38,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new AmazonPersonalizeProvider();\n\n\t\t\texpect(analytics.getProviderName()).toBe('AmazonPersonalize');\n\t\t});",
            "file": "Providers/AmazonPersonalizeProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Personalize provider test",
                "configure test"
            ],
            "updatePoint": {
                "line": 46,
                "column": 18
            },
            "line": 46,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new AmazonPersonalizeProvider();\n\t\t\tanalytics.configure({ trackingId: TRACKING_ID });\n\t\t\texpect(analytics.configure({ region: 'region1' })).toEqual({\n\t\t\t\tflushInterval: 5000,\n\t\t\t\tflushSize: 5,\n\t\t\t\tregion: 'region1',\n\t\t\t\ttrackingId: 'trackingId',\n\t\t\t});\n\t\t});",
            "file": "Providers/AmazonPersonalizeProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record without credentials",
            "suites": [
                "Personalize provider test",
                "record test"
            ],
            "updatePoint": {
                "line": 59,
                "column": 34
            },
            "line": 59,
            "code": "\t\ttest('record without credentials', async () => {\n\t\t\tconst analytics = new AmazonPersonalizeProvider();\n\t\t\tanalytics.configure({ trackingId: TRACKING_ID });\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.reject('err');\n\t\t\t\t});\n\n\t\t\texpect(await analytics.record('params')).toBe(false);\n\t\t\texpect(spyon).toHaveBeenCalledTimes(1);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "Providers/AmazonPersonalizeProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record happy case with identify event",
            "suites": [
                "Personalize provider test",
                "record test"
            ],
            "updatePoint": {
                "line": 73,
                "column": 45
            },
            "line": 73,
            "code": "\t\ttest('record happy case with identify event', async () => {\n\t\t\tconst analytics = new AmazonPersonalizeProvider();\n\t\t\tanalytics.configure({ trackingId: TRACKING_ID });\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\tawait analytics.record({\n\t\t\t\tevent: {\n\t\t\t\t\teventType: 'Identify',\n\t\t\t\t\tproperties: { userId: 'user1' },\n\t\t\t\t},\n\t\t\t\tconfig: {},\n\t\t\t});\n\n\t\t\tjest.advanceTimersByTime(6000);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "Providers/AmazonPersonalizeProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record happy case with Click event",
            "suites": [
                "Personalize provider test",
                "record test"
            ],
            "updatePoint": {
                "line": 95,
                "column": 42
            },
            "line": 95,
            "code": "\t\ttest('record happy case with Click event', async () => {\n\t\t\tconst analytics = new AmazonPersonalizeProvider();\n\t\t\tanalytics.configure({ trackingId: TRACKING_ID });\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\tawait analytics.record({\n\t\t\t\tevent: {\n\t\t\t\t\teventType: 'Click',\n\t\t\t\t\tproperties: { itemId: 'item1', eventValue: 'value1' },\n\t\t\t\t},\n\t\t\t\tconfig: {},\n\t\t\t});\n\n\t\t\tjest.advanceTimersByTime(6000);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "Providers/AmazonPersonalizeProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "kinesis firehose provider test",
                "getCategory test"
            ],
            "updatePoint": {
                "line": 34,
                "column": 18
            },
            "line": 34,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new KinesisFirehoseProvider();\n\n\t\t\texpect(analytics.getCategory()).toBe('Analytics');\n\t\t});",
            "file": "Providers/AWSKinesisFirehoseProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "kinesis firehose provider test",
                "getProviderName test"
            ],
            "updatePoint": {
                "line": 42,
                "column": 18
            },
            "line": 42,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new KinesisFirehoseProvider();\n\n\t\t\texpect(analytics.getProviderName()).toBe('AWSKinesisFirehose');\n\t\t});",
            "file": "Providers/AWSKinesisFirehoseProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "kinesis firehose provider test",
                "configure test"
            ],
            "updatePoint": {
                "line": 50,
                "column": 18
            },
            "line": 50,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new KinesisFirehoseProvider();\n\n\t\t\texpect(analytics.configure({ region: 'region1' })).toEqual({\n\t\t\t\tbufferSize: 1000,\n\t\t\t\tflushInterval: 5000,\n\t\t\t\tflushSize: 100,\n\t\t\t\tregion: 'region1',\n\t\t\t\tresendLimit: 5,\n\t\t\t});\n\t\t});",
            "file": "Providers/AWSKinesisFirehoseProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record without credentials",
            "suites": [
                "kinesis firehose provider test",
                "record test"
            ],
            "updatePoint": {
                "line": 64,
                "column": 34
            },
            "line": 64,
            "code": "\t\ttest('record without credentials', async () => {\n\t\t\tconst analytics = new KinesisFirehoseProvider();\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.reject('err');\n\t\t\t\t});\n\n\t\t\texpect(await analytics.record('params')).toBe(false);\n\t\t\tspyon.mockRestore();\n\t\t});",
            "file": "Providers/AWSKinesisFirehoseProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record with immediate transmission",
            "suites": [
                "kinesis firehose provider test",
                "record test"
            ],
            "updatePoint": {
                "line": 77,
                "column": 42
            },
            "line": 77,
            "code": "\t\ttest('record with immediate transmission', async () => {\n\t\t\tconst kinesisProvider = new KinesisFirehoseProvider();\n\t\t\tconst putRecordBatchCommandSpy = jest.spyOn(\n\t\t\t\tPutRecordBatchCommand.prototype,\n\t\t\t\t'constructor'\n\t\t\t);\n\n\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t});\n\n\t\t\tawait expect(\n\t\t\t\tkinesisProvider.record({\n\t\t\t\t\tevent: {\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\td: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tstreamName: 'testStream',\n\t\t\t\t\t\timmediate: true,\n\t\t\t\t\t},\n\t\t\t\t\tconfig: {},\n\t\t\t\t})\n\t\t\t).resolves.toBe(true);\n\n\t\t\t// Ensure PutRecord was constructed as expected\n\t\t\texpect(putRecordBatchCommandSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(putRecordBatchCommandSpy).toHaveBeenCalledWith({\n\t\t\t\tDeliveryStreamName: 'testStream',\n\t\t\t\tRecords: [\n\t\t\t\t\t{\n\t\t\t\t\t\tData: new Uint8Array([123, 34, 100, 34, 58, 49, 125]), // Encoded data payload\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n\t\t\texpect(FirehoseClient.prototype.send).toHaveBeenCalledTimes(1);\n\t\t});",
            "file": "Providers/AWSKinesisFirehoseProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record happy case",
            "suites": [
                "kinesis firehose provider test",
                "record test"
            ],
            "updatePoint": {
                "line": 115,
                "column": 25
            },
            "line": 115,
            "code": "\t\ttest('record happy case', async () => {\n\t\t\tconst analytics = new KinesisFirehoseProvider();\n\t\t\tanalytics.configure({ region: 'region1' });\n\n\t\t\tconst spyon = jest.spyOn(FirehoseClient.prototype, 'send');\n\n\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t});\n\n\t\t\tawait analytics.record({\n\t\t\t\tevent: {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tdata: 'data',\n\t\t\t\t\t},\n\t\t\t\t\tstreamName: 'stream',\n\t\t\t\t},\n\t\t\t\tconfig: {},\n\t\t\t});\n\n\t\t\tjest.advanceTimersByTime(6000);\n\n\t\t\texpect(spyon).toBeCalled();\n\n\t\t\tspyon.mockRestore();\n\t\t});",
            "file": "Providers/AWSKinesisFirehoseProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "kinesis provider test",
                "getCategory test"
            ],
            "updatePoint": {
                "line": 31,
                "column": 18
            },
            "line": 31,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new KinesisProvider();\n\n\t\t\texpect(analytics.getCategory()).toBe('Analytics');\n\t\t});",
            "file": "Providers/AWSKinesisProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "kinesis provider test",
                "getProviderName test"
            ],
            "updatePoint": {
                "line": 39,
                "column": 18
            },
            "line": 39,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new KinesisProvider();\n\n\t\t\texpect(analytics.getProviderName()).toBe('AWSKinesis');\n\t\t});",
            "file": "Providers/AWSKinesisProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "kinesis provider test",
                "configure test"
            ],
            "updatePoint": {
                "line": 47,
                "column": 18
            },
            "line": 47,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new KinesisProvider();\n\n\t\t\texpect(analytics.configure({ region: 'region1' })).toEqual({\n\t\t\t\tbufferSize: 1000,\n\t\t\t\tflushInterval: 5000,\n\t\t\t\tflushSize: 100,\n\t\t\t\tregion: 'region1',\n\t\t\t\tresendLimit: 5,\n\t\t\t});\n\t\t});",
            "file": "Providers/AWSKinesisProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record without credentials",
            "suites": [
                "kinesis provider test",
                "record test"
            ],
            "updatePoint": {
                "line": 61,
                "column": 34
            },
            "line": 61,
            "code": "\t\ttest('record without credentials', async () => {\n\t\t\tconst analytics = new KinesisProvider();\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.reject('err');\n\t\t\t\t});\n\n\t\t\texpect(await analytics.record('params')).toBe(false);\n\t\t});",
            "file": "Providers/AWSKinesisProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record with immediate transmission",
            "suites": [
                "kinesis provider test",
                "record test"
            ],
            "updatePoint": {
                "line": 73,
                "column": 42
            },
            "line": 73,
            "code": "\t\ttest('record with immediate transmission', async () => {\n\t\t\tconst kinesisProvider = new KinesisProvider();\n\t\t\tconst putRecordCommandSpy = jest.spyOn(\n\t\t\t\tPutRecordsCommand.prototype,\n\t\t\t\t'constructor'\n\t\t\t);\n\n\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t});\n\n\t\t\tawait expect(\n\t\t\t\tkinesisProvider.record({\n\t\t\t\t\tevent: {\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\td: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tstreamName: 'testStream',\n\t\t\t\t\t\timmediate: true,\n\t\t\t\t\t},\n\t\t\t\t\tconfig: {},\n\t\t\t\t})\n\t\t\t).resolves.toBe(true);\n\n\t\t\t// Ensure PutRecord was constructed as expected\n\t\t\texpect(putRecordCommandSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(putRecordCommandSpy).toHaveBeenCalledWith({\n\t\t\t\tRecords: [\n\t\t\t\t\t{\n\t\t\t\t\t\tData: new Uint8Array([123, 34, 100, 34, 58, 49, 125]), // Encoded data payload\n\t\t\t\t\t\tPartitionKey: 'partition-identityId',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tStreamName: 'testStream',\n\t\t\t});\n\n\t\t\texpect(KinesisClient.prototype.send).toHaveBeenCalledTimes(1);\n\t\t});",
            "file": "Providers/AWSKinesisProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record happy case",
            "suites": [
                "kinesis provider test",
                "record test"
            ],
            "updatePoint": {
                "line": 112,
                "column": 25
            },
            "line": 112,
            "code": "\t\ttest('record happy case', async () => {\n\t\t\tconst analytics = new KinesisProvider();\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\tawait analytics.record({\n\t\t\t\tevent: {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tdata: 'data',\n\t\t\t\t\t},\n\t\t\t\t\tstreamName: 'stream',\n\t\t\t\t},\n\t\t\t\tconfig: {},\n\t\t\t});\n\n\t\t\tjest.advanceTimersByTime(6000);\n\t\t});",
            "file": "Providers/AWSKinesisProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "kinesis provider test",
                "passing parameters to KinesisClient"
            ],
            "updatePoint": {
                "line": 136,
                "column": 18
            },
            "line": 136,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst config = {\n\t\t\t\tregion: 'region1',\n\t\t\t\tendpoint: 'endpoint1',\n\t\t\t};\n\n\t\t\tconst analytics = new KinesisProvider({ ...config });\n\n\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t});\n\n\t\t\tawait analytics.record({\n\t\t\t\tevent: {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tdata: 'data',\n\t\t\t\t\t},\n\t\t\t\t\tstreamName: 'stream',\n\t\t\t\t},\n\t\t\t\tconfig: {},\n\t\t\t});\n\n\t\t\tjest.advanceTimersByTime(6000);\n\n\t\t\texpect(KinesisClient).toHaveBeenCalledWith(\n\t\t\t\texpect.objectContaining(config)\n\t\t\t);\n\t\t});",
            "file": "Providers/AWSKinesisProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "AnalyticsProvider test",
                "getCategory test"
            ],
            "updatePoint": {
                "line": 210,
                "column": 18
            },
            "line": 210,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new AnalyticsProvider();\n\n\t\t\texpect(analytics.getCategory()).toBe('Analytics');\n\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "AnalyticsProvider test",
                "getProviderName test"
            ],
            "updatePoint": {
                "line": 218,
                "column": 18
            },
            "line": 218,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new AnalyticsProvider();\n\n\t\t\texpect(analytics.getProviderName()).toBe('AWSPinpoint');\n\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "AnalyticsProvider test",
                "configure test"
            ],
            "updatePoint": {
                "line": 226,
                "column": 18
            },
            "line": 226,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst analytics = new AnalyticsProvider();\n\n\t\t\texpect(analytics.configure({ appId: 'appId' })).toEqual({\n\t\t\t\tappId: 'appId',\n\t\t\t\tbufferSize: 1000,\n\t\t\t\tflushInterval: 5000,\n\t\t\t\tflushSize: 100,\n\t\t\t\tresendLimit: 5,\n\t\t\t});\n\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record without credentials",
            "suites": [
                "AnalyticsProvider test",
                "record test"
            ],
            "updatePoint": {
                "line": 240,
                "column": 34
            },
            "line": 240,
            "code": "\t\ttest('record without credentials', async () => {\n\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\tanalytics.configure(options);\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.reject('err');\n\t\t\t\t});\n\n\t\t\tawait analytics.record('params', { resolve, reject });\n\t\t\texpect(reject).toBeCalled();\n\t\t\tspyon.mockRestore();\n\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record without appId",
            "suites": [
                "AnalyticsProvider test",
                "record test"
            ],
            "updatePoint": {
                "line": 254,
                "column": 28
            },
            "line": 254,
            "code": "\t\ttest('record without appId', async () => {\n\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\tconst { appId, ...rest } = options;\n\t\t\tanalytics.configure(rest);\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\tawait analytics.record('params', { resolve, reject });\n\t\t\texpect(reject).toBeCalled();\n\t\t\tspyon.mockRestore();\n\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "record without region",
            "suites": [
                "AnalyticsProvider test",
                "record test"
            ],
            "updatePoint": {
                "line": 269,
                "column": 29
            },
            "line": 269,
            "code": "\t\ttest('record without region', async () => {\n\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\tconst { region, ...rest } = options;\n\t\t\tanalytics.configure(rest);\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\tawait analytics.record('params', { resolve, reject });\n\t\t\texpect(reject).toBeCalled();\n\t\t\tspyon.mockRestore();\n\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "custom events",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "record test"
            ],
            "updatePoint": {
                "line": 285,
                "column": 22
            },
            "line": 285,
            "code": "\t\t\ttest('custom events', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tanalytics.configure(options);\n\n\t\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\t\t\t\tconst params = { event: { name: 'custom event', immediate: true } };\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\t\t\t\texpect(mockPutEvents).toBeCalledWith(\n\t\t\t\t\texpect.objectContaining({\n\t\t\t\t\t\tcredentials,\n\t\t\t\t\t\tregion: 'region',\n\t\t\t\t\t\tuserAgentValue: expect.stringMatching(expectedRecordUserAgentRegex),\n\t\t\t\t\t}),\n\t\t\t\t\t{\n\t\t\t\t\t\tApplicationId: 'appId',\n\t\t\t\t\t\tEventsRequest: {\n\t\t\t\t\t\t\tBatchItem: {\n\t\t\t\t\t\t\t\tendpointId: {\n\t\t\t\t\t\t\t\t\tEndpoint: {},\n\t\t\t\t\t\t\t\t\tEvents: {\n\t\t\t\t\t\t\t\t\t\tuuid: {\n\t\t\t\t\t\t\t\t\t\t\tAttributes: undefined,\n\t\t\t\t\t\t\t\t\t\t\tEventType: 'custom event',\n\t\t\t\t\t\t\t\t\t\t\tMetrics: undefined,\n\t\t\t\t\t\t\t\t\t\t\tSession: {\n\t\t\t\t\t\t\t\t\t\t\t\tId: 'uuid',\n\t\t\t\t\t\t\t\t\t\t\t\tStartTimestamp: 'isoString',\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tTimestamp: 'isoString',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\texpect(resolve).toBeCalled();\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "custom event error",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "record test"
            ],
            "updatePoint": {
                "line": 326,
                "column": 27
            },
            "line": 326,
            "code": "\t\t\ttest('custom event error', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tanalytics.configure(options);\n\n\t\t\t\tmockPutEvents.mockImplementation(async () => {\n\t\t\t\t\tthrow 'data';\n\t\t\t\t});\n\n\t\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\t\tconst params = { event: { name: 'custom event', immediate: true } };\n\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\t\t\t\texpect(reject).toBeCalled();\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "startsession test"
            ],
            "updatePoint": {
                "line": 346,
                "column": 19
            },
            "line": 346,
            "code": "\t\t\ttest('happy case', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tanalytics.configure(options);\n\n\t\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\t\tconst params = { event: { name: '_session.start', immediate: true } };\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\n\t\t\t\texpect(mockPutEvents).toBeCalledWith(\n\t\t\t\t\texpect.objectContaining({\n\t\t\t\t\t\tcredentials,\n\t\t\t\t\t\tregion: 'region',\n\t\t\t\t\t\tuserAgentValue: expect.stringMatching(expectedRecordUserAgentRegex),\n\t\t\t\t\t}),\n\t\t\t\t\t{\n\t\t\t\t\t\tApplicationId: 'appId',\n\t\t\t\t\t\tEventsRequest: {\n\t\t\t\t\t\t\tBatchItem: {\n\t\t\t\t\t\t\t\tendpointId: {\n\t\t\t\t\t\t\t\t\tEndpoint: {},\n\t\t\t\t\t\t\t\t\tEvents: {\n\t\t\t\t\t\t\t\t\t\tuuid: {\n\t\t\t\t\t\t\t\t\t\t\tAttributes: undefined,\n\t\t\t\t\t\t\t\t\t\t\tEventType: '_session.start',\n\t\t\t\t\t\t\t\t\t\t\tMetrics: undefined,\n\t\t\t\t\t\t\t\t\t\t\tSession: {\n\t\t\t\t\t\t\t\t\t\t\t\tId: 'uuid',\n\t\t\t\t\t\t\t\t\t\t\t\tStartTimestamp: 'isoString',\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tTimestamp: 'isoString',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\texpect(resolve).toBeCalled();\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "session start error",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "startsession test"
            ],
            "updatePoint": {
                "line": 389,
                "column": 28
            },
            "line": 389,
            "code": "\t\t\ttest('session start error', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tanalytics.configure(options);\n\t\t\t\tmockPutEvents.mockImplementation(() => {\n\t\t\t\t\tthrow 'data';\n\t\t\t\t});\n\n\t\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\t\tconst params = { event: { name: '_session.start', immediate: true } };\n\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\t\t\t\texpect(resolve).not.toBeCalled();\n\t\t\t\texpect(reject).toBeCalled();\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "stopSession test"
            ],
            "updatePoint": {
                "line": 409,
                "column": 19
            },
            "line": 409,
            "code": "\t\t\ttest('happy case', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tanalytics.configure(options);\n\n\t\t\t\tconst spyon = jest\n\t\t\t\t\t.spyOn(navigator, 'sendBeacon')\n\t\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t});\n\n\t\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\t\tconst params = { event: { name: '_session.stop', immediate: true } };\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\n\t\t\t\tconst expectedUrl =\n\t\t\t\t\t'https://pinpoint.region.amazonaws.com/v1/apps/appId/events/legacy?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=accessKeyId%2FisoStrin%2Fregion%2Fmobiletargeting%2Faws4_request&X-Amz-Date=isoString&X-Amz-SignedHeaders=host&X-Amz-Security-Token=sessionToken&X-Amz-Signature=9dfa2a29782d344c56a9ab99fe58db6d1748e097ae418c398b26ab372a23f22f';\n\n\t\t\t\tconst expectedData = JSON.stringify({\n\t\t\t\t\tBatchItem: {\n\t\t\t\t\t\tendpointId: {\n\t\t\t\t\t\t\tEndpoint: {},\n\t\t\t\t\t\t\tEvents: {\n\t\t\t\t\t\t\t\tuuid: {\n\t\t\t\t\t\t\t\t\tEventType: '_session.stop',\n\t\t\t\t\t\t\t\t\tTimestamp: 'isoString',\n\t\t\t\t\t\t\t\t\tSession: {\n\t\t\t\t\t\t\t\t\t\tId: 'uuid',\n\t\t\t\t\t\t\t\t\t\tDuration: 0,\n\t\t\t\t\t\t\t\t\t\tStartTimestamp: 'isoString',\n\t\t\t\t\t\t\t\t\t\tStopTimestamp: 'isoString',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\texpect(spyon).toBeCalledWith(expectedUrl, expectedData);\n\t\t\t\texpect(resolve).toBeCalled();\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "session stop error",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "stopSession test"
            ],
            "updatePoint": {
                "line": 453,
                "column": 27
            },
            "line": 453,
            "code": "\t\t\ttest('session stop error', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tanalytics.configure(options);\n\t\t\t\tmockPutEvents.mockImplementation(async () => {\n\t\t\t\t\tthrow 'data';\n\t\t\t\t});\n\n\t\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\t\tconst params = { event: { name: '_session.stop', immediate: true } };\n\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\t\t\t\texpect(reject).toBeCalled();\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case with default client info",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "updateEndpoint test"
            ],
            "updatePoint": {
                "line": 472,
                "column": 44
            },
            "line": 472,
            "code": "\t\t\ttest('happy case with default client info', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tanalytics.configure(options);\n\n\t\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\t\tconst params = { event: { name: '_update_endpoint', immediate: true } };\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\t\t\t\texpect(mockUpdateEndpoint).toBeCalledWith(\n\t\t\t\t\texpect.objectContaining({\n\t\t\t\t\t\tcredentials,\n\t\t\t\t\t\tregion: 'region',\n\t\t\t\t\t\tuserAgentValue: expect.stringMatching(\n\t\t\t\t\t\t\texpectedUpdateEndpointUserAgentRegex\n\t\t\t\t\t\t),\n\t\t\t\t\t}),\n\t\t\t\t\t{\n\t\t\t\t\t\tApplicationId: 'appId',\n\t\t\t\t\t\tEndpointId: 'endpointId',\n\t\t\t\t\t\tEndpointRequest: {\n\t\t\t\t\t\t\tAttributes: {},\n\t\t\t\t\t\t\tChannelType: undefined,\n\t\t\t\t\t\t\tDemographic: {\n\t\t\t\t\t\t\t\tAppVersion: 'clientInfoAppVersion',\n\t\t\t\t\t\t\t\tMake: 'clientInfoMake',\n\t\t\t\t\t\t\t\tModel: 'clientInfoModel',\n\t\t\t\t\t\t\t\tModelVersion: 'clientInfoVersion',\n\t\t\t\t\t\t\t\tPlatform: 'clientInfoPlatform',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tEffectiveDate: 'isoString',\n\t\t\t\t\t\t\tLocation: {},\n\t\t\t\t\t\t\tMetrics: {},\n\t\t\t\t\t\t\tRequestId: 'uuid',\n\t\t\t\t\t\t\tUser: {\n\t\t\t\t\t\t\t\tUserAttributes: {},\n\t\t\t\t\t\t\t\tUserId: 'identityId',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\texpect(resolve).toBeCalled();\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case with client context provided",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "updateEndpoint test"
            ],
            "updatePoint": {
                "line": 517,
                "column": 48
            },
            "line": 517,
            "code": "\t\t\ttest('happy case with client context provided', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tanalytics.configure(optionsWithClientContext);\n\n\t\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\t\tconst params = { event: { name: '_update_endpoint', immediate: true } };\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\t\t\t\texpect(mockUpdateEndpoint).toBeCalledWith(\n\t\t\t\t\texpect.objectContaining({\n\t\t\t\t\t\tcredentials,\n\t\t\t\t\t\tregion: 'region',\n\t\t\t\t\t\tuserAgentValue: expect.stringMatching(\n\t\t\t\t\t\t\texpectedUpdateEndpointUserAgentRegex\n\t\t\t\t\t\t),\n\t\t\t\t\t}),\n\t\t\t\t\t{\n\t\t\t\t\t\tApplicationId: 'appId',\n\t\t\t\t\t\tEndpointId: 'endpointId',\n\t\t\t\t\t\tEndpointRequest: {\n\t\t\t\t\t\t\tAttributes: {},\n\t\t\t\t\t\t\tChannelType: undefined,\n\t\t\t\t\t\t\tDemographic: {\n\t\t\t\t\t\t\t\tAppVersion: 'clientInfoAppVersion',\n\t\t\t\t\t\t\t\tLocale: 'locale',\n\t\t\t\t\t\t\t\tMake: 'make',\n\t\t\t\t\t\t\t\tModel: 'model',\n\t\t\t\t\t\t\t\tModelVersion: 'clientInfoVersion',\n\t\t\t\t\t\t\t\tPlatform: 'platform',\n\t\t\t\t\t\t\t\tPlatformVersion: 'platformVersion',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tEffectiveDate: 'isoString',\n\t\t\t\t\t\t\tLocation: {},\n\t\t\t\t\t\t\tMetrics: {},\n\t\t\t\t\t\t\tRequestId: 'uuid',\n\t\t\t\t\t\t\tUser: {\n\t\t\t\t\t\t\t\tUserAttributes: {},\n\t\t\t\t\t\t\t\tUserId: 'identityId',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case with default enpoint configure provided",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "updateEndpoint test"
            ],
            "updatePoint": {
                "line": 563,
                "column": 59
            },
            "line": 563,
            "code": "\t\t\ttest('happy case with default enpoint configure provided', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tanalytics.configure(optionsWithDefaultEndpointConfigure);\n\n\t\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\t\tconst params = { event: { name: '_update_endpoint', immediate: true } };\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\n\t\t\t\texpect(mockUpdateEndpoint).toBeCalledWith(\n\t\t\t\t\texpect.objectContaining({\n\t\t\t\t\t\tcredentials,\n\t\t\t\t\t\tregion: 'region',\n\t\t\t\t\t\tuserAgentValue: expect.stringMatching(\n\t\t\t\t\t\t\texpectedUpdateEndpointUserAgentRegex\n\t\t\t\t\t\t),\n\t\t\t\t\t}),\n\t\t\t\t\t{\n\t\t\t\t\t\tApplicationId: 'appId',\n\t\t\t\t\t\tEndpointId: 'endpointId',\n\t\t\t\t\t\tEndpointRequest: {\n\t\t\t\t\t\t\tAddress: 'default',\n\t\t\t\t\t\t\tAttributes: {\n\t\t\t\t\t\t\t\thobbies: ['default'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tChannelType: 'default',\n\t\t\t\t\t\t\tDemographic: {\n\t\t\t\t\t\t\t\tAppVersion: 'default',\n\t\t\t\t\t\t\t\tLocale: 'default',\n\t\t\t\t\t\t\t\tMake: 'default',\n\t\t\t\t\t\t\t\tModel: 'default',\n\t\t\t\t\t\t\t\tModelVersion: 'default',\n\t\t\t\t\t\t\t\tPlatform: 'default',\n\t\t\t\t\t\t\t\tPlatformVersion: 'default',\n\t\t\t\t\t\t\t\tTimezone: 'default',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tEffectiveDate: 'isoString',\n\t\t\t\t\t\t\tLocation: {\n\t\t\t\t\t\t\t\tCity: 'default',\n\t\t\t\t\t\t\t\tCountry: 'default',\n\t\t\t\t\t\t\t\tLatitude: 0,\n\t\t\t\t\t\t\t\tLongitude: 0,\n\t\t\t\t\t\t\t\tPostalCode: 'default',\n\t\t\t\t\t\t\t\tRegion: 'default',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tMetrics: {},\n\t\t\t\t\t\t\tOptOut: 'default',\n\t\t\t\t\t\t\tRequestId: 'uuid',\n\t\t\t\t\t\t\tUser: {\n\t\t\t\t\t\t\t\tUserAttributes: {\n\t\t\t\t\t\t\t\t\tinterests: ['default'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tUserId: 'default',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case with specified enpoint configure provided",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "updateEndpoint test"
            ],
            "updatePoint": {
                "line": 624,
                "column": 61
            },
            "line": 624,
            "code": "\t\t\ttest('happy case with specified enpoint configure provided', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tanalytics.configure(optionsWithDefaultEndpointConfigure);\n\n\t\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\t\tconst params = {\n\t\t\t\t\tevent: {\n\t\t\t\t\t\tname: '_update_endpoint',\n\t\t\t\t\t\timmediate: true,\n\t\t\t\t\t\t...endpointConfigure,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\n\t\t\t\texpect(mockUpdateEndpoint).toBeCalledWith(\n\t\t\t\t\texpect.objectContaining({\n\t\t\t\t\t\tcredentials,\n\t\t\t\t\t\tregion: 'region',\n\t\t\t\t\t\tuserAgentValue: expect.stringMatching(\n\t\t\t\t\t\t\texpectedUpdateEndpointUserAgentRegex\n\t\t\t\t\t\t),\n\t\t\t\t\t}),\n\t\t\t\t\t{\n\t\t\t\t\t\tApplicationId: 'appId',\n\t\t\t\t\t\tEndpointId: 'endpointId',\n\t\t\t\t\t\tEndpointRequest: {\n\t\t\t\t\t\t\tAddress: 'configured',\n\t\t\t\t\t\t\tAttributes: {\n\t\t\t\t\t\t\t\thobbies: ['configured'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tChannelType: 'configured',\n\t\t\t\t\t\t\tDemographic: {\n\t\t\t\t\t\t\t\tAppVersion: 'configured',\n\t\t\t\t\t\t\t\tLocale: 'configured',\n\t\t\t\t\t\t\t\tMake: 'configured',\n\t\t\t\t\t\t\t\tModel: 'configured',\n\t\t\t\t\t\t\t\tModelVersion: 'configured',\n\t\t\t\t\t\t\t\tPlatform: 'configured',\n\t\t\t\t\t\t\t\tPlatformVersion: 'configured',\n\t\t\t\t\t\t\t\tTimezone: 'configured',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tEffectiveDate: 'isoString',\n\t\t\t\t\t\t\tLocation: {\n\t\t\t\t\t\t\t\tCity: 'configured',\n\t\t\t\t\t\t\t\tCountry: 'configured',\n\t\t\t\t\t\t\t\tLatitude: 0,\n\t\t\t\t\t\t\t\tLongitude: 0,\n\t\t\t\t\t\t\t\tPostalCode: 'configured',\n\t\t\t\t\t\t\t\tRegion: 'configured',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tMetrics: {},\n\t\t\t\t\t\t\tOptOut: 'configured',\n\t\t\t\t\t\t\tRequestId: 'uuid',\n\t\t\t\t\t\t\tUser: {\n\t\t\t\t\t\t\t\tUserAttributes: {\n\t\t\t\t\t\t\t\t\tinterests: ['configured'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tUserId: 'configured',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "error case",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "updateEndpoint test"
            ],
            "updatePoint": {
                "line": 691,
                "column": 19
            },
            "line": 691,
            "code": "\t\t\ttest('error case', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tconst mockError = { message: 'error' };\n\n\t\t\t\tanalytics.configure(options);\n\t\t\t\tmockUpdateEndpoint.mockImplementation(async params => {\n\t\t\t\t\tthrow { message: 'error' };\n\t\t\t\t});\n\n\t\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\t\tconst params = { event: { name: '_update_endpoint', immediate: true } };\n\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\t\t\t\texpect(reject).toBeCalledWith(mockError);\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "BAD_REQUEST_CODE without message rejects error",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "updateEndpoint test"
            ],
            "updatePoint": {
                "line": 710,
                "column": 55
            },
            "line": 710,
            "code": "\t\t\ttest('BAD_REQUEST_CODE without message rejects error', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tconst mockError = { debug: 'error', statusCode: 400 };\n\n\t\t\t\tanalytics.configure(options);\n\t\t\t\tmockUpdateEndpoint.mockImplementation(async params => {\n\t\t\t\t\tthrow mockError;\n\t\t\t\t});\n\n\t\t\t\tjest.spyOn(Credentials, 'get').mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(credentials);\n\t\t\t\t});\n\n\t\t\t\tconst params = { event: { name: '_update_endpoint', immediate: true } };\n\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\t\t\t\texpect(reject).toBeCalledWith(mockError);\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "Exceeded maximum endpoint per user count",
            "suites": [
                "AnalyticsProvider test",
                "record test",
                "updateEndpoint test"
            ],
            "updatePoint": {
                "line": 729,
                "column": 49
            },
            "line": 729,
            "code": "\t\t\ttest('Exceeded maximum endpoint per user count', async () => {\n\t\t\t\tconst analytics = new AnalyticsProvider();\n\t\t\t\tconst mockExceededMaxError = {\n\t\t\t\t\t$metadata: {\n\t\t\t\t\t\thttpStatusCode: 400,\n\t\t\t\t\t},\n\t\t\t\t\tmessage: 'Exceeded maximum endpoint per user count 10',\n\t\t\t\t};\n\n\t\t\t\tanalytics.configure(options);\n\n\t\t\t\tmockUpdateEndpoint.mockImplementation(async params => {\n\t\t\t\t\tthrow mockExceededMaxError;\n\t\t\t\t});\n\n\t\t\t\tjest\n\t\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t\t.mockImplementationOnce(() => Promise.resolve(credentials));\n\n\t\t\t\tconst params = { event: { name: '_update_endpoint', immediate: true } };\n\n\t\t\t\tawait analytics.record(params, { resolve, reject });\n\n\t\t\t\texpect(mockUpdateEndpoint).toHaveBeenCalledTimes(1);\n\t\t\t});",
            "file": "Providers/AWSPinpointProvider.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "received the custom user client",
            "suites": [
                "Each provider client is configured with the custom user client",
                "AmazonPersonalizeProvider"
            ],
            "updatePoint": {
                "line": 9,
                "column": 39
            },
            "line": 9,
            "code": "\t\ttest('received the custom user client', () => {\n\t\t\tconst provider = new AmazonPersonalizeProvider();\n\t\t\t// Run init to setup the client\n\t\t\tprovider['_init']({ region: 'us-east-1' }, {});\n\n\t\t\texpect(\n\t\t\t\tprovider['_personalize']['config']['customUserAgent']\n\t\t\t).toMatchObject([\n\t\t\t\t['aws-amplify', expect.any(String)],\n\t\t\t\t['analytics', '1'],\n\t\t\t\t['framework', '0'],\n\t\t\t]);\n\t\t});",
            "file": "Providers/CustomUserAgent.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "received the custom user client",
            "suites": [
                "Each provider client is configured with the custom user client",
                "AWSKinesisFirehoseProvider"
            ],
            "updatePoint": {
                "line": 25,
                "column": 39
            },
            "line": 25,
            "code": "\t\ttest('received the custom user client', () => {\n\t\t\tconst provider = new AWSKinesisFirehoseProvider();\n\t\t\t// Run init to setup the client\n\t\t\tprovider['_init']({ region: 'us-east-1' }, {});\n\n\t\t\texpect(\n\t\t\t\tprovider['_kinesisFirehose']['config']['customUserAgent']\n\t\t\t).toMatchObject([\n\t\t\t\t['aws-amplify', expect.any(String)],\n\t\t\t\t['analytics', '1'],\n\t\t\t\t['framework', '0'],\n\t\t\t]);\n\t\t});",
            "file": "Providers/CustomUserAgent.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "received the custom user client",
            "suites": [
                "Each provider client is configured with the custom user client",
                "AWSKinesisProvider"
            ],
            "updatePoint": {
                "line": 41,
                "column": 39
            },
            "line": 41,
            "code": "\t\ttest('received the custom user client', () => {\n\t\t\tconst provider = new AWSKinesisProvider();\n\t\t\t// Run init to setup the client\n\t\t\tprovider['_init']({ region: 'us-east-1' }, {});\n\n\t\t\texpect(provider['_kinesis']['config']['customUserAgent']).toMatchObject([\n\t\t\t\t['aws-amplify', expect.any(String)],\n\t\t\t\t['analytics', '1'],\n\t\t\t\t['framework', '0'],\n\t\t\t]);\n\t\t});",
            "file": "Providers/CustomUserAgent.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "can be constructed",
            "suites": [
                "EventBuffer"
            ],
            "updatePoint": {
                "line": 43,
                "column": 25
            },
            "line": 43,
            "code": "\ttest('can be constructed', () => {\n\t\tconst buffer = new EventBuffer(DEFAULT_CONFIG);\n\t\texpect(buffer).toBeDefined();\n\t});",
            "file": "Providers/EventBuffer.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "does not allow buffer size to be exceeded",
            "suites": [
                "EventBuffer"
            ],
            "updatePoint": {
                "line": 48,
                "column": 48
            },
            "line": 48,
            "code": "\ttest('does not allow buffer size to be exceeded', () => {\n\t\tconst config = { ...DEFAULT_CONFIG, bufferSize: 1 };\n\t\tconst buffer = new EventBuffer(config);\n\t\tbuffer.push(EVENT_OBJECT);\n\t\tbuffer.push(EVENT_OBJECT);\n\t\texpect(EVENT_OBJECT.handlers.reject).toBeCalledWith(\n\t\t\tError('Exceeded the size of analytics events buffer')\n\t\t);\n\t});",
            "file": "Providers/EventBuffer.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "not in the web env",
            "suites": [
                "EventTracer test",
                "environment test"
            ],
            "updatePoint": {
                "line": 16,
                "column": 26
            },
            "line": 16,
            "code": "\t\ttest('not in the web env', () => {\n\t\t\tlet eventListener = window.addEventListener;\n\t\t\twindow.addEventListener = null;\n\t\t\tconst eventTracker = new EventTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(eventTracker, 'configure')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn;\n\t\t\t\t});\n\n\t\t\texpect(spyon).not.toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t\twindow.addEventListener = eventListener;\n\t\t});",
            "file": "trackers/EventTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "in the web env",
            "suites": [
                "EventTracer test",
                "environment test"
            ],
            "updatePoint": {
                "line": 35,
                "column": 22
            },
            "line": 35,
            "code": "\t\ttest('in the web env', () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(EventTracker.prototype, 'configure')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn;\n\t\t\t\t});\n\n\t\t\tconst eventTracker = new EventTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\n\t\t\texpect(spyon).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "trackers/EventTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "EventTracer test",
                "configure test"
            ],
            "updatePoint": {
                "line": 53,
                "column": 18
            },
            "line": 53,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst eventTracker = new EventTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\n\t\t\texpect(\n\t\t\t\teventTracker.configure({\n\t\t\t\t\tenable: true,\n\t\t\t\t\tselectorPrefix: 'prefix',\n\t\t\t\t\tevents: ['click', 'mouseover'],\n\t\t\t\t\tprovider: 'myProvider',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tattr: 'attr',\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t).toEqual({\n\t\t\t\tenable: true,\n\t\t\t\tselectorPrefix: 'prefix',\n\t\t\t\tevents: ['click', 'mouseover'],\n\t\t\t\tprovider: 'myProvider',\n\t\t\t\tattributes: {\n\t\t\t\t\tattr: 'attr',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\texpect(mockDelegate).toBeCalled();\n\n\t\t\tmockDelegate.mockClear();\n\t\t});",
            "file": "trackers/EventTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "EventTracer test",
                "track function test"
            ],
            "updatePoint": {
                "line": 85,
                "column": 18
            },
            "line": 85,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst ele = {\n\t\t\t\tgetAttribute(params) {\n\t\t\t\t\tif (params.indexOf('on') >= 0) return 'click';\n\t\t\t\t\tif (params.indexOf('name') >= 0) return 'name';\n\t\t\t\t\tif (params.indexOf('attrs') >= 0) return 'attrs:val';\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst eventTracker = new EventTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t\tattributes: {\n\t\t\t\t\tbrowser: 'chrome',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst event = {\n\t\t\t\ttype: 'click',\n\t\t\t\ttarget: {\n\t\t\t\t\tlocalName: 'localName',\n\t\t\t\t\tid: 'xxxxx',\n\t\t\t\t},\n\t\t\t};\n\t\t\teventTracker._trackFunc(event, ele);\n\n\t\t\texpect(tracker).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tattrs: 'val',\n\t\t\t\t\t\ttarget: 'localName with id xxxxx',\n\t\t\t\t\t\ttype: 'click',\n\t\t\t\t\t\tbrowser: 'chrome',\n\t\t\t\t\t},\n\t\t\t\t\tname: 'name',\n\t\t\t\t},\n\t\t\t\t'AWSPinpoint'\n\t\t\t);\n\t\t});",
            "file": "trackers/EventTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case with type SPA",
            "suites": [
                "PageViewTracker test",
                "constructor test"
            ],
            "updatePoint": {
                "line": 94,
                "column": 32
            },
            "line": 94,
            "code": "\t\ttest('happy case with type SPA', () => {\n\t\t\tconst spyon = jest.spyOn(MethodEmbed, 'add').mockImplementation(() => {\n\t\t\t\treturn;\n\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(window, 'addEventListener')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\tconst pageViewTracer = new PageViewTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t\ttype: 'SPA',\n\t\t\t});\n\n\t\t\texpect(spyon).toBeCalled();\n\t\t\texpect(spyon2).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "trackers/PageViewTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "type SPA, in unsupported env",
            "suites": [
                "PageViewTracker test",
                "constructor test"
            ],
            "updatePoint": {
                "line": 115,
                "column": 36
            },
            "line": 115,
            "code": "\t\ttest('type SPA, in unsupported env', () => {\n\t\t\tlet tmp = window.addEventListener;\n\t\t\twindow.addEventListener = undefined;\n\n\t\t\tconst spyon = jest.spyOn(MethodEmbed, 'add').mockImplementation(() => {\n\t\t\t\treturn;\n\t\t\t});\n\n\t\t\tconst pageViewTracer = new PageViewTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t\ttype: 'SPA',\n\t\t\t});\n\n\t\t\texpect(spyon).not.toBeCalled();\n\n\t\t\tspyon.mockClear();\n\n\t\t\twindow.addEventListener = tmp;\n\t\t});",
            "file": "trackers/PageViewTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case with type default",
            "suites": [
                "PageViewTracker test",
                "constructor test"
            ],
            "line": 135,
            "code": "\t\ttest.skip('happy case with type default', () => {",
            "file": "trackers/PageViewTracker.test.ts",
            "skipped": true,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "type default, in unsupported env",
            "suites": [
                "PageViewTracker test",
                "constructor test"
            ],
            "updatePoint": {
                "line": 159,
                "column": 40
            },
            "line": 159,
            "code": "\t\ttest('type default, in unsupported env', () => {\n\t\t\ttracker.mockClear();\n\n\t\t\tlet tmp = window.addEventListener;\n\t\t\twindow.addEventListener = undefined;\n\n\t\t\tconst pageViewTracer = new PageViewTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\n\t\t\texpect(tracker).not.toBeCalled();\n\t\t\twindow.addEventListener = tmp;\n\t\t});",
            "file": "trackers/PageViewTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "PageViewTracker test",
                "configure test"
            ],
            "updatePoint": {
                "line": 175,
                "column": 18
            },
            "line": 175,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst pageViewTracer = new PageViewTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\n\t\t\tconst getUrlMock = jest.fn();\n\t\t\texpect(\n\t\t\t\tpageViewTracer.configure({\n\t\t\t\t\tenable: true,\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tattr: 'attr',\n\t\t\t\t\t},\n\t\t\t\t\tprovider: 'myProvider',\n\t\t\t\t\tgetUrl: getUrlMock,\n\t\t\t\t})\n\t\t\t).toEqual({\n\t\t\t\tenable: true,\n\t\t\t\tattributes: {\n\t\t\t\t\tattr: 'attr',\n\t\t\t\t},\n\t\t\t\tprovider: 'myProvider',\n\t\t\t\tgetUrl: getUrlMock,\n\t\t\t});\n\t\t});",
            "file": "trackers/PageViewTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "turn off autoTrack",
            "suites": [
                "PageViewTracker test",
                "configure test"
            ],
            "updatePoint": {
                "line": 200,
                "column": 26
            },
            "line": 200,
            "code": "\t\ttest('turn off autoTrack', () => {\n\t\t\tconst spyon = jest.spyOn(MethodEmbed, 'remove').mockImplementation(() => {\n\t\t\t\treturn;\n\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(window, 'removeEventListener')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\tconst pageViewTracer = new PageViewTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t\ttype: 'SPA',\n\t\t\t});\n\n\t\t\tpageViewTracer.configure({\n\t\t\t\tenable: false,\n\t\t\t});\n\n\t\t\texpect(spyon).toBeCalled();\n\t\t\texpect(spyon2).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "trackers/PageViewTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "SessionTracker test",
                "constructor test"
            ],
            "updatePoint": {
                "line": 23,
                "column": 18
            },
            "line": 23,
            "code": "\t\ttest('happy case', () => {\n\t\t\ttracker.mockClear();\n\n\t\t\tconst sessionTracker = new SessionTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\n\t\t\texpect(tracker).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tname: '_session.start',\n\t\t\t\t\tattributes: {},\n\t\t\t\t\timmediate: false,\n\t\t\t\t},\n\t\t\t\t'AWSPinpoint'\n\t\t\t);\n\t\t\texpect(mockAddEventListener).toBeCalled();\n\n\t\t\tmockAddEventListener.mockClear();\n\t\t});",
            "file": "trackers/SessionTracker-rn.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "SessionTracker test",
                "configure test"
            ],
            "updatePoint": {
                "line": 45,
                "column": 18
            },
            "line": 45,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst sessionTracker = new SessionTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\n\t\t\texpect(\n\t\t\t\tsessionTracker.configure({\n\t\t\t\t\tenable: true,\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tattr1: 'val1',\n\t\t\t\t\t},\n\t\t\t\t\tprovider: 'myProvider',\n\t\t\t\t})\n\t\t\t).toEqual({\n\t\t\t\tenable: true,\n\t\t\t\tattributes: {\n\t\t\t\t\tattr1: 'val1',\n\t\t\t\t},\n\t\t\t\tprovider: 'myProvider',\n\t\t\t});\n\t\t});",
            "file": "trackers/SessionTracker-rn.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "autoTrack disabled",
            "suites": [
                "SessionTracker test",
                "configure test"
            ],
            "updatePoint": {
                "line": 67,
                "column": 26
            },
            "line": 67,
            "code": "\t\ttest('autoTrack disabled', () => {\n\t\t\tconst sessionTracker = new SessionTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\n\t\t\tmockRemoveEventListener.mockClear();\n\n\t\t\tsessionTracker.configure({\n\t\t\t\tenable: false,\n\t\t\t});\n\n\t\t\texpect(mockRemoveEventListener).toBeCalled();\n\t\t\tmockRemoveEventListener.mockClear();\n\t\t});",
            "file": "trackers/SessionTracker-rn.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "if the app turns to be active",
            "suites": [
                "SessionTracker test",
                "track function test"
            ],
            "updatePoint": {
                "line": 84,
                "column": 37
            },
            "line": 84,
            "code": "\t\ttest('if the app turns to be active', () => {\n\t\t\tconst sessionTracker = new SessionTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\t\t\ttracker.mockClear();\n\n\t\t\t// mock to be inactive\n\t\t\tsessionTracker._currentState = 'inactive';\n\t\t\tsessionTracker._trackFunc('active');\n\n\t\t\texpect(tracker).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tname: '_session.start',\n\t\t\t\t\tattributes: {},\n\t\t\t\t\timmediate: false,\n\t\t\t\t},\n\t\t\t\t'AWSPinpoint'\n\t\t\t);\n\t\t});",
            "file": "trackers/SessionTracker-rn.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "if app turns into background",
            "suites": [
                "SessionTracker test",
                "track function test"
            ],
            "updatePoint": {
                "line": 104,
                "column": 36
            },
            "line": 104,
            "code": "\t\ttest('if app turns into background', () => {\n\t\t\tconst sessionTracker = new SessionTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\t\t\ttracker.mockClear();\n\n\t\t\tsessionTracker._trackFunc('inactive');\n\n\t\t\texpect(tracker).toBeCalledWith(\n\t\t\t\t{ attributes: {}, immediate: false, name: '_session.stop' },\n\t\t\t\t'AWSPinpoint'\n\t\t\t);\n\t\t});",
            "file": "trackers/SessionTracker-rn.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "SessionTracker test",
                "constructor test"
            ],
            "updatePoint": {
                "line": 9,
                "column": 18
            },
            "line": 9,
            "code": "\t\ttest('happy case', () => {\n\t\t\ttracker.mockClear();\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(document, 'addEventListener')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn;\n\t\t\t\t});\n\n\t\t\tconst sessionTracker = new SessionTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\n\t\t\texpect(tracker).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tname: '_session.start',\n\t\t\t\t\tattributes: {},\n\t\t\t\t},\n\t\t\t\t'AWSPinpoint'\n\t\t\t);\n\t\t\texpect(spyon).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "trackers/SessionTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "not in the supported env",
            "suites": [
                "SessionTracker test",
                "constructor test"
            ],
            "updatePoint": {
                "line": 34,
                "column": 32
            },
            "line": 34,
            "code": "\t\ttest('not in the supported env', () => {\n\t\t\ttracker.mockClear();\n\t\t\tlet tmp = document;\n\t\t\tObject.defineProperty(window.document, 'hidden', {\n\t\t\t\twritable: true,\n\t\t\t\tvalue: undefined,\n\t\t\t});\n\n\t\t\tconst sessionTracker = new SessionTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\n\t\t\texpect(tracker).not.toBeCalled();\n\t\t\tObject.defineProperty(window.document, 'hidden', {\n\t\t\t\twritable: true,\n\t\t\t\tvalue: false,\n\t\t\t});\n\t\t});",
            "file": "trackers/SessionTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "SessionTracker test",
                "configure test"
            ],
            "updatePoint": {
                "line": 55,
                "column": 18
            },
            "line": 55,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst sessionTracker = new SessionTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\n\t\t\texpect(\n\t\t\t\tsessionTracker.configure({\n\t\t\t\t\tenable: true,\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tattr1: 'val1',\n\t\t\t\t\t},\n\t\t\t\t\tprovider: 'myProvider',\n\t\t\t\t})\n\t\t\t).toEqual({\n\t\t\t\tenable: true,\n\t\t\t\tattributes: {\n\t\t\t\t\tattr1: 'val1',\n\t\t\t\t},\n\t\t\t\tprovider: 'myProvider',\n\t\t\t});\n\t\t});",
            "file": "trackers/SessionTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "autoTrack disabled",
            "suites": [
                "SessionTracker test",
                "configure test"
            ],
            "updatePoint": {
                "line": 77,
                "column": 26
            },
            "line": 77,
            "code": "\t\ttest('autoTrack disabled', () => {\n\t\t\tconst sessionTracker = new SessionTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(document, 'removeEventListener')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\tsessionTracker.configure({\n\t\t\t\tenable: false,\n\t\t\t});\n\n\t\t\texpect(spyon).toBeCalled();\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "trackers/SessionTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "if the page is hidden",
            "suites": [
                "SessionTracker test",
                "track function test"
            ],
            "updatePoint": {
                "line": 97,
                "column": 29
            },
            "line": 97,
            "code": "\t\ttest('if the page is hidden', async () => {\n\t\t\tconst sessionTracker = new SessionTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\t\t\ttracker.mockClear();\n\n\t\t\tObject.defineProperty(window.document, 'hidden', {\n\t\t\t\twritable: true,\n\t\t\t\tvalue: true,\n\t\t\t});\n\n\t\t\tObject.defineProperty(window.document, 'visibilityState', {\n\t\t\t\twritable: true,\n\t\t\t\tvalue: 'hidden',\n\t\t\t});\n\n\t\t\tawait sessionTracker._trackFunc();\n\n\t\t\texpect(tracker).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tname: '_session.stop',\n\t\t\t\t\tattributes: {},\n\t\t\t\t},\n\t\t\t\t'AWSPinpoint'\n\t\t\t);\n\t\t});",
            "file": "trackers/SessionTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "if the page is not hidden",
            "suites": [
                "SessionTracker test",
                "track function test"
            ],
            "updatePoint": {
                "line": 124,
                "column": 33
            },
            "line": 124,
            "code": "\t\ttest('if the page is not hidden', async () => {\n\t\t\tconst sessionTracker = new SessionTracker(tracker, {\n\t\t\t\tenable: true,\n\t\t\t});\n\t\t\ttracker.mockClear();\n\n\t\t\tObject.defineProperty(window.document, 'hidden', {\n\t\t\t\twritable: true,\n\t\t\t\tvalue: false,\n\t\t\t});\n\n\t\t\tObject.defineProperty(window.document, 'visibilityState', {\n\t\t\t\twritable: true,\n\t\t\t\tvalue: 'visible',\n\t\t\t});\n\n\t\t\tawait sessionTracker._trackFunc();\n\n\t\t\texpect(tracker).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tname: '_session.start',\n\t\t\t\t\tattributes: {},\n\t\t\t\t},\n\t\t\t\t'AWSPinpoint'\n\t\t\t);\n\t\t});",
            "file": "trackers/SessionTracker.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "inAppInForeground",
            "suites": [
                "Utils"
            ],
            "updatePoint": {
                "line": 11,
                "column": 24
            },
            "line": 11,
            "code": "\ttest('inAppInForeground', () => {\n\t\texpect(isAppInForeground()).toBe(true);\n\t});",
            "file": "utils.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "MethodEmbed",
            "suites": [
                "Utils"
            ],
            "updatePoint": {
                "line": 15,
                "column": 18
            },
            "line": 15,
            "code": "\ttest('MethodEmbed', () => {\n\t\tconst set = new Set();\n\t\tconst methodEmbed = new MethodEmbed(set, 'add');\n\t\texpect(methodEmbed instanceof MethodEmbed).toBe(true);\n\t\tmethodEmbed.set(() => {\n\t\t\treturn 'override';\n\t\t});\n\t\tmethodEmbed.remove();\n\t\tMethodEmbed.add(set, 'add', () => {\n\t\t\treturn 'override';\n\t\t});\n\t\tMethodEmbed.remove(set, 'add');\n\t\texpect(methodEmbed.context).toBe(set);\n\t\texpect(methodEmbed.methodName).toBe('add');\n\t});",
            "file": "utils.test.ts",
            "skipped": false,
            "dir": "packages/analytics/__tests__"
        },
        {
            "name": "happy-case-query",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 88,
                "column": 24
            },
            "line": 88,
            "code": "\t\ttest('happy-case-query', async () => {\n\t\t\tconst spyonAuth = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementationOnce((url, init) => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres({});\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tapiKey = 'secret_api_key',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\tAuthorization: null,\n\t\t\t\t'X-Api-Key': apiKey,\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait api.graphql(graphqlOperation(GetEvent, variables));\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "cancel-graphql-query",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 143,
                "column": 28
            },
            "line": 143,
            "code": "\t\ttest('cancel-graphql-query', async () => {\n\t\t\tconst spyonAuth = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementationOnce((url, init) => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\trej('error cancelled');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tapiKey = 'secret_api_key',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\tAuthorization: null,\n\t\t\t\t'X-Api-Key': apiKey,\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tconst promiseResponse = api.graphql(\n\t\t\t\tgraphqlOperation(GetEvent, variables)\n\t\t\t);\n\t\t\tapi.cancel(promiseResponse as Promise<any>, 'testmessage');\n\n\t\t\texpect.assertions(5);\n\n\t\t\texpect(cancelTokenSpy).toBeCalledTimes(1);\n\t\t\texpect(cancelMock).toBeCalledWith('testmessage');\n\t\t\ttry {\n\t\t\t\tawait promiseResponse;\n\t\t\t} catch (err) {\n\t\t\t\texpect(err).toEqual('error cancelled');\n\t\t\t\texpect(api.isCancel(err)).toBeTruthy();\n\t\t\t}\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "happy-case-query-ast",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 211,
                "column": 28
            },
            "line": 211,
            "code": "\t\ttest('happy-case-query-ast', async () => {\n\t\t\tconst spyonAuth = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementationOnce((url, init) => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres({});\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tapiKey = 'secret_api_key',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\tAuthorization: null,\n\t\t\t\t'X-Api-Key': apiKey,\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait api.graphql(graphqlOperation(getEventDoc, variables));\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "happy-case-query-oidc with Cache token",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 266,
                "column": 46
            },
            "line": 266,
            "code": "\t\ttest('happy-case-query-oidc with Cache token', async () => {\n\t\t\tconst spyonAuth = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst cache_config = {\n\t\t\t\tcapacityInBytes: 3000,\n\t\t\t\titemMaxSize: 800,\n\t\t\t\tdefaultTTL: 3000000,\n\t\t\t\tdefaultPriority: 5,\n\t\t\t\twarningThreshold: 0.8,\n\t\t\t\tstorage: window.localStorage,\n\t\t\t};\n\n\t\t\tCache.configure(cache_config);\n\n\t\t\tconst spyonCache = jest\n\t\t\t\t.spyOn(Cache, 'getItem')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttoken: 'id_token',\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementationOnce((url, init) => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres({});\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'OPENID_CONNECT',\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\tAuthorization: 'id_token',\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait api.graphql(graphqlOperation(GetEvent, variables));\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\n\t\t\tspyonCache.mockClear();\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "happy-case-query-oidc with auth storage federated token",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 339,
                "column": 63
            },
            "line": 339,
            "code": "\t\ttest('happy-case-query-oidc with auth storage federated token', async () => {\n\t\t\tconst spyonCredentials = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst cache_config = {\n\t\t\t\tcapacityInBytes: 3000,\n\t\t\t\titemMaxSize: 800,\n\t\t\t\tdefaultTTL: 3000000,\n\t\t\t\tdefaultPriority: 5,\n\t\t\t\twarningThreshold: 0.8,\n\t\t\t\tstorage: window.localStorage,\n\t\t\t};\n\n\t\t\tCache.configure(cache_config);\n\n\t\t\tconst spyonCache = jest\n\t\t\t\t.spyOn(Cache, 'getItem')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\n\t\t\tconst spyonAuth = jest\n\t\t\t\t.spyOn(Auth, 'currentAuthenticatedUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres({\n\t\t\t\t\t\t\tname: 'federated user',\n\t\t\t\t\t\t\ttoken: 'federated_token_from_storage',\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementationOnce((url, init) => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres({});\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'OPENID_CONNECT',\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\tAuthorization: 'federated_token_from_storage',\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait api.graphql(graphqlOperation(GetEvent, variables));\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\n\t\t\tspyonCredentials.mockClear();\n\t\t\tspyonCache.mockClear();\n\t\t\tspyonAuth.mockClear();\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "happy case query with AWS_LAMBDA",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 423,
                "column": 40
            },
            "line": 423,
            "code": "\t\ttest('happy case query with AWS_LAMBDA', async () => {\n\t\t\texpect.assertions(1);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockReturnValue(Promise.resolve({}));\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com';\n\t\t\tconst region = 'us-east-2';\n\t\t\tconst variables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'AWS_LAMBDA',\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t\tAuthorization: 'myAuthToken',\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait api.graphql({\n\t\t\t\tquery: GetEvent,\n\t\t\t\tvariables,\n\t\t\t\tauthToken: 'myAuthToken',\n\t\t\t});\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "additional headers with AWS_LAMBDA",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 470,
                "column": 42
            },
            "line": 470,
            "code": "\t\ttest('additional headers with AWS_LAMBDA', async () => {\n\t\t\texpect.assertions(1);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockReturnValue(Promise.resolve({}));\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com';\n\t\t\tconst region = 'us-east-2';\n\t\t\tconst variables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'AWS_LAMBDA',\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t\tAuthorization: 'myAuthToken',\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait api.graphql(\n\t\t\t\t{\n\t\t\t\t\tquery: GetEvent,\n\t\t\t\t\tvariables,\n\t\t\t\t\tauthToken: 'myAuthToken',\n\t\t\t\t},\n\t\t\t\t{ Authorization: 'anotherAuthToken' }\n\t\t\t);\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "multi-auth default case AWS_IAM, using API_KEY as auth mode",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 520,
                "column": 67
            },
            "line": 520,
            "code": "\t\ttest('multi-auth default case AWS_IAM, using API_KEY as auth mode', async () => {\n\t\t\texpect.assertions(1);\n\n\t\t\tconst cache_config = {\n\t\t\t\tcapacityInBytes: 3000,\n\t\t\t\titemMaxSize: 800,\n\t\t\t\tdefaultTTL: 3000000,\n\t\t\t\tdefaultPriority: 5,\n\t\t\t\twarningThreshold: 0.8,\n\t\t\t\tstorage: window.localStorage,\n\t\t\t};\n\n\t\t\tCache.configure(cache_config);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockReturnValue(Promise.resolve({}));\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' },\n\t\t\t\tapiKey = 'secret-api-key';\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'AWS_IAM',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\tAuthorization: null,\n\t\t\t\t'X-Api-Key': 'secret-api-key',\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait api.graphql({\n\t\t\t\tquery: GetEvent,\n\t\t\t\tvariables,\n\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.API_KEY,\n\t\t\t});\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "multi-auth default case api-key, using AWS_IAM as auth mode",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 580,
                "column": 67
            },
            "line": 580,
            "code": "\t\ttest('multi-auth default case api-key, using AWS_IAM as auth mode', async () => {\n\t\t\texpect.assertions(1);\n\t\t\tjest.spyOn(Credentials, 'get').mockReturnValue(Promise.resolve('cred'));\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockReturnValue(Promise.resolve({}));\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' },\n\t\t\t\tapiKey = 'secret-api-key';\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait api.graphql({\n\t\t\t\tquery: GetEvent,\n\t\t\t\tvariables,\n\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.AWS_IAM,\n\t\t\t});\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "multi-auth default case api-key, using AWS_LAMBDA as auth mode",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 628,
                "column": 70
            },
            "line": 628,
            "code": "\t\ttest('multi-auth default case api-key, using AWS_LAMBDA as auth mode', async () => {\n\t\t\texpect.assertions(1);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockReturnValue(Promise.resolve({}));\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' },\n\t\t\t\tapiKey = 'secret-api-key';\n\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t\tAuthorization: 'myAuthToken',\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait api.graphql({\n\t\t\t\tquery: GetEvent,\n\t\t\t\tvariables,\n\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.AWS_LAMBDA,\n\t\t\t\tauthToken: 'myAuthToken',\n\t\t\t});\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "multi-auth default case api-key, using OIDC as auth mode",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 678,
                "column": 64
            },
            "line": 678,
            "code": "\t\ttest('multi-auth default case api-key, using OIDC as auth mode', async () => {\n\t\t\texpect.assertions(1);\n\t\t\tconst cache_config = {\n\t\t\t\tcapacityInBytes: 3000,\n\t\t\t\titemMaxSize: 800,\n\t\t\t\tdefaultTTL: 3000000,\n\t\t\t\tdefaultPriority: 5,\n\t\t\t\twarningThreshold: 0.8,\n\t\t\t\tstorage: window.localStorage,\n\t\t\t};\n\n\t\t\tCache.configure(cache_config);\n\n\t\t\tjest.spyOn(Cache, 'getItem').mockReturnValue({ token: 'oidc_token' });\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockReturnValue(Promise.resolve({}));\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' },\n\t\t\t\tapiKey = 'secret-api-key';\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\tAuthorization: 'oidc_token',\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait api.graphql({\n\t\t\t\tquery: GetEvent,\n\t\t\t\tvariables,\n\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n\t\t\t});\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "multi-auth using OIDC as auth mode, but no federatedSign",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 738,
                "column": 64
            },
            "line": 738,
            "code": "\t\ttest('multi-auth using OIDC as auth mode, but no federatedSign', async () => {\n\t\t\texpect.assertions(1);\n\n\t\t\tconst cache_config = {\n\t\t\t\tcapacityInBytes: 3000,\n\t\t\t\titemMaxSize: 800,\n\t\t\t\tdefaultTTL: 3000000,\n\t\t\t\tdefaultPriority: 5,\n\t\t\t\twarningThreshold: 0.8,\n\t\t\t\tstorage: window.localStorage,\n\t\t\t};\n\n\t\t\tCache.configure(cache_config);\n\n\t\t\tjest.spyOn(Cache, 'getItem').mockReturnValue(null);\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' },\n\t\t\t\tapiKey = 'secret-api-key';\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tawait expect(\n\t\t\t\tapi.graphql({\n\t\t\t\t\tquery: GetEvent,\n\t\t\t\t\tvariables,\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n\t\t\t\t})\n\t\t\t).rejects.toThrowError('No current user');\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "multi-auth using CUP as auth mode, but no userpool",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 775,
                "column": 58
            },
            "line": 775,
            "code": "\t\ttest('multi-auth using CUP as auth mode, but no userpool', async () => {\n\t\t\texpect.assertions(1);\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' },\n\t\t\t\tapiKey = 'secret-api-key';\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tawait expect(\n\t\t\t\tapi.graphql({\n\t\t\t\t\tquery: GetEvent,\n\t\t\t\t\tvariables,\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n\t\t\t\t})\n\t\t\t).rejects.toThrow();\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "multi-auth using AWS_LAMBDA as auth mode, but no auth token specified",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 799,
                "column": 77
            },
            "line": 799,
            "code": "\t\ttest('multi-auth using AWS_LAMBDA as auth mode, but no auth token specified', async () => {\n\t\t\texpect.assertions(1);\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'AWS_IAM',\n\t\t\t});\n\n\t\t\tawait expect(\n\t\t\t\tapi.graphql({\n\t\t\t\t\tquery: GetEvent,\n\t\t\t\t\tvariables,\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.AWS_LAMBDA,\n\t\t\t\t})\n\t\t\t).rejects.toThrowError(GraphQLAuthError.NO_AUTH_TOKEN);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "multi-auth using API_KEY as auth mode, but no api-key configured",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 822,
                "column": 72
            },
            "line": 822,
            "code": "\t\ttest('multi-auth using API_KEY as auth mode, but no api-key configured', async () => {\n\t\t\texpect.assertions(1);\n\n\t\t\tconst cache_config = {\n\t\t\t\tcapacityInBytes: 3000,\n\t\t\t\titemMaxSize: 800,\n\t\t\t\tdefaultTTL: 3000000,\n\t\t\t\tdefaultPriority: 5,\n\t\t\t\twarningThreshold: 0.8,\n\t\t\t\tstorage: window.localStorage,\n\t\t\t};\n\n\t\t\tCache.configure(cache_config);\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'AWS_IAM',\n\t\t\t});\n\n\t\t\tawait expect(\n\t\t\t\tapi.graphql({\n\t\t\t\t\tquery: GetEvent,\n\t\t\t\t\tvariables,\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.API_KEY,\n\t\t\t\t})\n\t\t\t).rejects.toThrowError('No api-key configured');\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "multi-auth using AWS_IAM as auth mode, but no credentials",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 855,
                "column": 65
            },
            "line": 855,
            "code": "\t\ttest('multi-auth using AWS_IAM as auth mode, but no credentials', async () => {\n\t\t\texpect.assertions(1);\n\n\t\t\tjest.spyOn(Credentials, 'get').mockReturnValue(Promise.reject());\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' },\n\t\t\t\tapiKey = 'secret-api-key';\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tawait expect(\n\t\t\t\tapi.graphql({\n\t\t\t\t\tquery: GetEvent,\n\t\t\t\t\tvariables,\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.AWS_IAM,\n\t\t\t\t})\n\t\t\t).rejects.toThrowError('No credentials');\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "multi-auth default case api-key, using CUP as auth mode",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 881,
                "column": 63
            },
            "line": 881,
            "code": "\t\ttest('multi-auth default case api-key, using CUP as auth mode', async () => {\n\t\t\texpect.assertions(1);\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockReturnValue(Promise.resolve({}));\n\n\t\t\tjest.spyOn(Auth, 'currentSession').mockReturnValue({\n\t\t\t\tgetAccessToken: () => ({\n\t\t\t\t\tgetJwtToken: () => 'Secret-Token',\n\t\t\t\t}),\n\t\t\t} as any);\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' },\n\t\t\t\tapiKey = 'secret-api-key';\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\tAuthorization: 'Secret-Token',\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait api.graphql({\n\t\t\t\tquery: GetEvent,\n\t\t\t\tvariables,\n\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n\t\t\t});\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "authMode on subscription",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 934,
                "column": 32
            },
            "line": 934,
            "code": "\t\ttest('authMode on subscription', async () => {\n\t\t\texpect.assertions(1);\n\n\t\t\tjest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementation(async (url, init) => ({\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tsubscription: {\n\t\t\t\t\t\t\tnewSubscriptions: {},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}));\n\n\t\t\tconst cache_config = {\n\t\t\t\tcapacityInBytes: 3000,\n\t\t\t\titemMaxSize: 800,\n\t\t\t\tdefaultTTL: 3000000,\n\t\t\t\tdefaultPriority: 5,\n\t\t\t\twarningThreshold: 0.8,\n\t\t\t\tstorage: window.localStorage,\n\t\t\t};\n\n\t\t\tCache.configure(cache_config);\n\n\t\t\tjest.spyOn(Cache, 'getItem').mockReturnValue({ token: 'id_token' });\n\n\t\t\tconst spyon_pubsub = jest\n\t\t\t\t.spyOn(InternalPubSub, 'subscribe')\n\t\t\t\t.mockImplementation(jest.fn(() => Observable.of({})));\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tapiKey = 'secret_api_key',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tconst SubscribeToEventComments = `subscription SubscribeToEventComments($eventId: String!) {\n\t\t\t\tsubscribeToEventComments(eventId: $eventId) {\n\t\t\t\t\teventId\n\t\t\t\t\tcommentId\n\t\t\t\t\tcontent\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst doc = parse(SubscribeToEventComments);\n\t\t\tconst query = print(doc);\n\n\t\t\t(\n\t\t\t\tapi.graphql({\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n\t\t\t\t}) as any\n\t\t\t).subscribe();\n\n\t\t\texpect(spyon_pubsub).toBeCalledWith(\n\t\t\t\t'',\n\t\t\t\texpect.objectContaining({\n\t\t\t\t\tauthenticationType: 'OPENID_CONNECT',\n\t\t\t\t}),\n\t\t\t\tundefined\n\t\t\t);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "happy-case-subscription",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 1005,
                "column": 31
            },
            "line": 1005,
            "code": "\t\ttest('happy-case-subscription', async done => {\n\t\t\tjest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementation(async (url, init) => ({\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tsubscription: {\n\t\t\t\t\t\t\tnewSubscriptions: {},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}));\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tapiKey = 'secret_api_key',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tInternalPubSub.subscribe = jest.fn(() => Observable.of({}));\n\n\t\t\tconst SubscribeToEventComments = `subscription SubscribeToEventComments($eventId: String!) {\n\t\t\t\tsubscribeToEventComments(eventId: $eventId) {\n\t\t\t\t\teventId\n\t\t\t\t\tcommentId\n\t\t\t\t\tcontent\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst doc = parse(SubscribeToEventComments);\n\t\t\tconst query = print(doc);\n\n\t\t\tconst observable = (\n\t\t\t\tapi.graphql(graphqlOperation(query, variables)) as Observable<object>\n\t\t\t).subscribe({\n\t\t\t\tnext: () => {\n\t\t\t\t\texpect(InternalPubSub.subscribe).toHaveBeenCalledTimes(1);\n\t\t\t\t\tconst subscribeOptions = (InternalPubSub.subscribe as any).mock\n\t\t\t\t\t\t.calls[0][1];\n\t\t\t\t\texpect(subscribeOptions.provider).toBe(\n\t\t\t\t\t\tINTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER\n\t\t\t\t\t);\n\t\t\t\t\tdone();\n\t\t\t\t},\n\t\t\t});\n\n\t\t\texpect(observable).not.toBe(undefined);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "happy case subscription with additionalHeaders",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 1059,
                "column": 54
            },
            "line": 1059,
            "code": "\t\ttest('happy case subscription with additionalHeaders', async done => {\n\t\t\tjest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementation(async (url, init) => ({\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tsubscription: {\n\t\t\t\t\t\t\tnewSubscriptions: {},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}));\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tapiKey = 'secret_api_key',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tInternalPubSub.subscribe = jest.fn(() => Observable.of({}));\n\n\t\t\tconst SubscribeToEventComments = `subscription SubscribeToEventComments($eventId: String!) {\n\t\t\t\tsubscribeToEventComments(eventId: $eventId) {\n\t\t\t\t\teventId\n\t\t\t\t\tcommentId\n\t\t\t\t\tcontent\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst doc = parse(SubscribeToEventComments);\n\t\t\tconst query = print(doc);\n\n\t\t\tconst additionalHeaders = {\n\t\t\t\t'x-custom-header': 'value',\n\t\t\t};\n\n\t\t\tconst observable = (\n\t\t\t\tapi.graphql(\n\t\t\t\t\tgraphqlOperation(query, variables),\n\t\t\t\t\tadditionalHeaders\n\t\t\t\t) as Observable<object>\n\t\t\t).subscribe({\n\t\t\t\tnext: () => {\n\t\t\t\t\texpect(InternalPubSub.subscribe).toHaveBeenCalledTimes(1);\n\t\t\t\t\tconst subscribeOptions = (InternalPubSub.subscribe as any).mock\n\t\t\t\t\t\t.calls[0][1];\n\t\t\t\t\texpect(subscribeOptions.additionalHeaders).toBe(additionalHeaders);\n\t\t\t\t\tdone();\n\t\t\t\t},\n\t\t\t});\n\n\t\t\texpect(observable).not.toBe(undefined);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "happy case mutation",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 1118,
                "column": 27
            },
            "line": 1118,
            "code": "\t\ttest('happy case mutation', async () => {\n\t\t\tconst spyonAuth = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementationOnce((url, init) => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres({});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tapiKey = 'secret_api_key',\n\t\t\t\tvariables = {\n\t\t\t\t\tid: '809392da-ec91-4ef0-b219-5238a8f942b2',\n\t\t\t\t\tcontent: 'lalala',\n\t\t\t\t\tcreatedAt: new Date().toISOString(),\n\t\t\t\t};\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\t\t\tconst AddComment = `mutation AddComment($eventId: ID!, $content: String!, $createdAt: String!) {\n\t\t\t\tcommentOnEvent(eventId: $eventId, content: $content, createdAt: $createdAt) {\n\t\t\t\t\teventId\n\t\t\t\t\tcontent\n\t\t\t\t\tcreatedAt\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst doc = parse(AddComment);\n\t\t\tconst query = print(doc);\n\n\t\t\tconst headers = {\n\t\t\t\tAuthorization: null,\n\t\t\t\t'X-Api-Key': apiKey,\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait api.graphql(graphqlOperation(AddComment, variables));\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "happy case query with additionalHeaders",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 1186,
                "column": 47
            },
            "line": 1186,
            "code": "\t\ttest('happy case query with additionalHeaders', async () => {\n\t\t\tconst spyonAuth = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementationOnce((url, init) => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres({});\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tapiKey = 'secret_api_key',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t\tgraphql_headers: async () =>\n\t\t\t\t\tPromise.resolve({\n\t\t\t\t\t\tsomeHeaderSetAtConfigThatWillBeOverridden: 'initialValue',\n\t\t\t\t\t\tsomeOtherHeaderSetAtConfig: 'expectedValue',\n\t\t\t\t\t}),\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\tAuthorization: null,\n\t\t\t\t'X-Api-Key': apiKey,\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tconst additionalHeaders = {\n\t\t\t\tsomeAddtionalHeader: 'foo',\n\t\t\t\tsomeHeaderSetAtConfigThatWillBeOverridden: 'expectedValue',\n\t\t\t};\n\n\t\t\tawait api.graphql(\n\t\t\t\tgraphqlOperation(GetEvent, variables),\n\t\t\t\tadditionalHeaders\n\t\t\t);\n\n\t\t\texpect(spyon).toBeCalledWith(url, {\n\t\t\t\t...init,\n\t\t\t\theaders: {\n\t\t\t\t\tsomeAddtionalHeader: 'foo',\n\t\t\t\t\tsomeHeaderSetAtConfigThatWillBeOverridden: 'expectedValue',\n\t\t\t\t\t...init.headers,\n\t\t\t\t\tsomeOtherHeaderSetAtConfig: 'expectedValue',\n\t\t\t\t},\n\t\t\t});\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "call isInstanceCreated",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 1262,
                "column": 30
            },
            "line": 1262,
            "code": "\t\ttest('call isInstanceCreated', () => {\n\t\t\tconst createInstanceMock = spyOn(API.prototype, 'createInstance');\n\t\t\tconst api = new API(config);\n\t\t\tapi.createInstanceIfNotCreated();\n\t\t\texpect(createInstanceMock).toHaveBeenCalled();\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "should not call createInstance when there is already an instance",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 1269,
                "column": 72
            },
            "line": 1269,
            "code": "\t\ttest('should not call createInstance when there is already an instance', () => {\n\t\t\tconst api = new API(config);\n\t\t\tapi.createInstance();\n\t\t\tconst createInstanceMock = spyOn(API.prototype, 'createInstance');\n\t\t\tapi.createInstanceIfNotCreated();\n\t\t\texpect(createInstanceMock).not.toHaveBeenCalled();\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "sends cookies with request",
            "suites": [
                "API test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 1277,
                "column": 34
            },
            "line": 1277,
            "code": "\t\ttest('sends cookies with request', async () => {\n\t\t\tconst spyonAuth = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementationOnce((url, init) => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres({});\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst api = new API(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tapiKey = 'secret_api_key',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\t\t\tapi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t\twithCredentials: true,\n\t\t\t});\n\n\t\t\tconst headers = {\n\t\t\t\tAuthorization: null,\n\t\t\t\t'X-Api-Key': apiKey,\n\t\t\t\t'x-amz-user-agent': expectedUserAgentFrameworkOnly,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery: getEventQuery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t\twithCredentials: true,\n\t\t\t};\n\t\t\tlet authToken: undefined;\n\n\t\t\tawait api.graphql(graphqlOperation(GetEvent, variables, authToken));\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "without aws_project_region",
            "suites": [
                "API test",
                "configure test"
            ],
            "updatePoint": {
                "line": 1337,
                "column": 34
            },
            "line": 1337,
            "code": "\t\ttest('without aws_project_region', () => {\n\t\t\tconst api = new API({});\n\n\t\t\tconst options = {\n\t\t\t\tmyoption: 'myoption',\n\t\t\t};\n\n\t\t\texpect(api.configure(options)).toEqual({\n\t\t\t\tmyoption: 'myoption',\n\t\t\t});\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "with aws_project_region",
            "suites": [
                "API test",
                "configure test"
            ],
            "updatePoint": {
                "line": 1349,
                "column": 31
            },
            "line": 1349,
            "code": "\t\ttest('with aws_project_region', () => {\n\t\t\tconst api = new API({});\n\n\t\t\tconst options = {\n\t\t\t\taws_project_region: 'region',\n\t\t\t};\n\n\t\t\texpect(api.configure(options)).toEqual({\n\t\t\t\taws_project_region: 'region',\n\t\t\t\theader: {},\n\t\t\t\tregion: 'region',\n\t\t\t});\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "with API options",
            "suites": [
                "API test",
                "configure test"
            ],
            "updatePoint": {
                "line": 1363,
                "column": 24
            },
            "line": 1363,
            "code": "\t\ttest('with API options', () => {\n\t\t\tconst api = new API({});\n\n\t\t\tconst options = {\n\t\t\t\tAPI: {\n\t\t\t\t\taws_project_region: 'api-region',\n\t\t\t\t},\n\t\t\t\taws_project_region: 'region',\n\t\t\t\taws_appsync_region: 'appsync-region',\n\t\t\t};\n\n\t\t\texpect(api.configure(options)).toEqual({\n\t\t\t\taws_project_region: 'api-region',\n\t\t\t\taws_appsync_region: 'appsync-region',\n\t\t\t\theader: {},\n\t\t\t\tregion: 'api-region',\n\t\t\t});\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "happy case mutation",
            "suites": [
                "Internal API customUserAgent test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 1397,
                "column": 27
            },
            "line": 1397,
            "code": "\t\ttest('happy case mutation', async () => {\n\t\t\tconst spyonAuth = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementationOnce((url, init) => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres({});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst internalApi = new InternalAPI(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tapiKey = 'secret_api_key',\n\t\t\t\tvariables = {\n\t\t\t\t\tid: '809392da-ec91-4ef0-b219-5238a8f942b2',\n\t\t\t\t\tcontent: 'lalala',\n\t\t\t\t\tcreatedAt: new Date().toISOString(),\n\t\t\t\t};\n\t\t\tinternalApi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\t\t\tconst AddComment = `mutation AddComment($eventId: ID!, $content: String!, $createdAt: String!) {\n\t\t\t\tcommentOnEvent(eventId: $eventId, content: $content, createdAt: $createdAt) {\n\t\t\t\t\teventId\n\t\t\t\t\tcontent\n\t\t\t\t\tcreatedAt\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst doc = parse(AddComment);\n\t\t\tconst query = print(doc);\n\n\t\t\tconst headers = {\n\t\t\t\tAuthorization: null,\n\t\t\t\t'X-Api-Key': apiKey,\n\t\t\t\t'x-amz-user-agent': expectedUserAgentAPI,\n\t\t\t};\n\n\t\t\tconst body = {\n\t\t\t\tquery,\n\t\t\t\tvariables,\n\t\t\t};\n\n\t\t\tconst init = {\n\t\t\t\theaders,\n\t\t\t\tbody,\n\t\t\t\tsignerServiceInfo: {\n\t\t\t\t\tservice: 'appsync',\n\t\t\t\t\tregion,\n\t\t\t\t},\n\t\t\t\tcancellableToken: mockCancellableToken,\n\t\t\t};\n\n\t\t\tawait internalApi.graphql(\n\t\t\t\tgraphqlOperation(AddComment, variables),\n\t\t\t\tundefined,\n\t\t\t\tcustomUserAgentDetailsAPI\n\t\t\t);\n\n\t\t\texpect(spyon).toBeCalledWith(url, init);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "happy case subscription",
            "suites": [
                "Internal API customUserAgent test",
                "graphql test"
            ],
            "updatePoint": {
                "line": 1469,
                "column": 31
            },
            "line": 1469,
            "code": "\t\ttest('happy case subscription', async done => {\n\t\t\tjest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementation(async (url, init) => ({\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tsubscription: {\n\t\t\t\t\t\t\tnewSubscriptions: {},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}));\n\n\t\t\tconst internalApi = new InternalAPI(config);\n\t\t\tconst url = 'https://appsync.amazonaws.com',\n\t\t\t\tregion = 'us-east-2',\n\t\t\t\tapiKey = 'secret_api_key',\n\t\t\t\tvariables = { id: '809392da-ec91-4ef0-b219-5238a8f942b2' };\n\n\t\t\tinternalApi.configure({\n\t\t\t\taws_appsync_graphqlEndpoint: url,\n\t\t\t\taws_appsync_region: region,\n\t\t\t\taws_appsync_authenticationType: 'API_KEY',\n\t\t\t\taws_appsync_apiKey: apiKey,\n\t\t\t});\n\n\t\t\tInternalPubSub.subscribe = jest.fn(() => Observable.of({}));\n\n\t\t\tconst SubscribeToEventComments = `subscription SubscribeToEventComments($eventId: String!) {\n\t\t\t\tsubscribeToEventComments(eventId: $eventId) {\n\t\t\t\t\teventId\n\t\t\t\t\tcommentId\n\t\t\t\t\tcontent\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst doc = parse(SubscribeToEventComments);\n\t\t\tconst query = print(doc);\n\n\t\t\tconst observable = (\n\t\t\t\tinternalApi.graphql(\n\t\t\t\t\tgraphqlOperation(query, variables),\n\t\t\t\t\tundefined,\n\t\t\t\t\tcustomUserAgentDetailsAPI\n\t\t\t\t) as Observable<object>\n\t\t\t).subscribe({\n\t\t\t\tnext: () => {\n\t\t\t\t\texpect(InternalPubSub.subscribe).toHaveBeenCalledTimes(1);\n\t\t\t\t\texpect(InternalPubSub.subscribe).toHaveBeenCalledWith(\n\t\t\t\t\t\texpect.anything(),\n\t\t\t\t\t\texpect.anything(),\n\t\t\t\t\t\tcustomUserAgentDetailsAPI\n\t\t\t\t\t);\n\t\t\t\t\tconst subscribeOptions = (InternalPubSub.subscribe as any).mock\n\t\t\t\t\t\t.calls[0][1];\n\t\t\t\t\texpect(subscribeOptions.provider).toBe(\n\t\t\t\t\t\tINTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER\n\t\t\t\t\t);\n\t\t\t\t\tdone();\n\t\t\t\t},\n\t\t\t});\n\n\t\t\texpect(observable).not.toBe(undefined);\n\t\t});",
            "file": "GraphQLAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-graphql/__tests__"
        },
        {
            "name": "without aws_project_region",
            "suites": [
                "Rest API test",
                "configure test"
            ],
            "updatePoint": {
                "line": 67,
                "column": 34
            },
            "line": 67,
            "code": "\t\ttest('without aws_project_region', () => {\n\t\t\tconst api = new API({});\n\n\t\t\tconst options = {\n\t\t\t\tmyoption: 'myoption',\n\t\t\t};\n\n\t\t\texpect(api.configure(options)).toEqual({\n\t\t\t\tendpoints: [],\n\t\t\t\tmyoption: 'myoption',\n\t\t\t});\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "with aws_project_region",
            "suites": [
                "Rest API test",
                "configure test"
            ],
            "updatePoint": {
                "line": 80,
                "column": 31
            },
            "line": 80,
            "code": "\t\ttest('with aws_project_region', () => {\n\t\t\tconst api = new API({});\n\n\t\t\tconst options = {\n\t\t\t\taws_project_region: 'region',\n\t\t\t\taws_cloud_logic_custom,\n\t\t\t};\n\n\t\t\texpect(api.configure(options)).toEqual({\n\t\t\t\taws_cloud_logic_custom,\n\t\t\t\taws_project_region: 'region',\n\t\t\t\tendpoints: aws_cloud_logic_custom,\n\t\t\t\theader: {},\n\t\t\t\tregion: 'region',\n\t\t\t});\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "with API options",
            "suites": [
                "Rest API test",
                "configure test"
            ],
            "updatePoint": {
                "line": 97,
                "column": 24
            },
            "line": 97,
            "code": "\t\ttest('with API options', () => {\n\t\t\tconst api = new API({});\n\n\t\t\tconst options = {\n\t\t\t\tAPI: {\n\t\t\t\t\taws_project_region: 'api-region',\n\t\t\t\t},\n\t\t\t\taws_project_region: 'region',\n\t\t\t\taws_appsync_region: 'appsync-region',\n\t\t\t\taws_cloud_logic_custom,\n\t\t\t};\n\n\t\t\texpect(api.configure(options)).toEqual({\n\t\t\t\taws_cloud_logic_custom,\n\t\t\t\taws_project_region: 'api-region',\n\t\t\t\taws_appsync_region: 'appsync-region',\n\t\t\t\tendpoints: aws_cloud_logic_custom,\n\t\t\t\theader: {},\n\t\t\t\tregion: 'api-region',\n\t\t\t});\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Rest API test",
                "get test"
            ],
            "updatePoint": {
                "line": 121,
                "column": 18
            },
            "line": 121,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\n\t\t\tawait api.get('apiName', 'path', { init: 'init' });\n\n\t\t\texpect(spyon2).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tcustom_header: undefined,\n\t\t\t\t\tendpoint: 'endpointpath',\n\t\t\t\t\tregion: 'region',\n\t\t\t\t\tservice: 'execute-api',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tinit: 'init',\n\t\t\t\t\tcancellableToken: { cancel: cancelMock, token: tokenMock },\n\t\t\t\t}\n\t\t\t);\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "custom_header",
            "suites": [
                "Rest API test",
                "get test"
            ],
            "updatePoint": {
                "line": 154,
                "column": 21
            },
            "line": 154,
            "code": "\t\ttest('custom_header', async () => {\n\t\t\tconst custom_config = {\n\t\t\t\tAPI: {\n\t\t\t\t\tendpoints: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'apiName',\n\t\t\t\t\t\t\tendpoint: 'https://www.amazonaws.com',\n\t\t\t\t\t\t\tcustom_header: () => {\n\t\t\t\t\t\t\t\treturn { Authorization: 'mytoken' };\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(custom_config);\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockResolvedValueOnce('cred');\n\n\t\t\tconst spyonRequest = jest\n\t\t\t\t.spyOn(RestClient.prototype as any, '_request')\n\t\t\t\t.mockResolvedValueOnce({});\n\t\t\tawait api.get('apiName', 'path', {});\n\n\t\t\texpect(spyonRequest).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tdata: null,\n\t\t\t\t\theaders: { Authorization: 'mytoken' },\n\t\t\t\t\thost: 'www.amazonaws.compath',\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\tpath: '/',\n\t\t\t\t\tresponseType: 'json',\n\t\t\t\t\tsignerServiceInfo: undefined,\n\t\t\t\t\turl: 'https://www.amazonaws.compath/',\n\t\t\t\t\ttimeout: 0,\n\t\t\t\t\tcancelToken: tokenMock,\n\t\t\t\t},\n\t\t\t\tundefined\n\t\t\t);\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "non-default timeout",
            "suites": [
                "Rest API test",
                "get test"
            ],
            "updatePoint": {
                "line": 196,
                "column": 27
            },
            "line": 196,
            "code": "\t\ttest('non-default timeout', async () => {\n\t\t\tconst resp = { data: [{ name: 'Bob' }] };\n\n\t\t\tconst options = {\n\t\t\t\taws_project_region: 'region',\n\t\t\t\taws_cloud_logic_custom,\n\t\t\t};\n\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(options);\n\n\t\t\tconst creds = {\n\t\t\t\tsecretAccessKey: 'secret',\n\t\t\t\taccessKeyId: 'access',\n\t\t\t\tsessionToken: 'token',\n\t\t\t};\n\n\t\t\tconst creds2 = {\n\t\t\t\tsecret_key: 'secret',\n\t\t\t\taccess_key: 'access',\n\t\t\t\tsession_token: 'token',\n\t\t\t};\n\n\t\t\tconst spyon = jest.spyOn(Credentials, 'get').mockResolvedValue(creds);\n\n\t\t\tconst spyonSigner = jest\n\t\t\t\t.spyOn(Signer, 'sign')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn { headers: {} };\n\t\t\t\t});\n\n\t\t\tmockAxios.mockResolvedValue(resp);\n\n\t\t\tconst init = {\n\t\t\t\ttimeout: 2500,\n\t\t\t};\n\t\t\tawait api.get('apiName', '/items', init);\n\t\t\tconst expectedParams = {\n\t\t\t\tdata: null,\n\t\t\t\theaders: {},\n\t\t\t\thost: undefined,\n\t\t\t\tmethod: 'GET',\n\t\t\t\tpath: '/',\n\t\t\t\tresponseType: 'json',\n\t\t\t\turl: 'endpoint/items',\n\t\t\t\ttimeout: 2500,\n\t\t\t\tcancelToken: tokenMock,\n\t\t\t};\n\t\t\texpect(spyonSigner).toBeCalledWith(expectedParams, creds2, {\n\t\t\t\tregion: 'us-east-1',\n\t\t\t\tservice: 'execute-api',\n\t\t\t});\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "query-string on init",
            "suites": [
                "Rest API test",
                "get test"
            ],
            "updatePoint": {
                "line": 250,
                "column": 28
            },
            "line": 250,
            "code": "\t\ttest('query-string on init', async () => {\n\t\t\tconst resp = { data: [{ name: 'Bob' }] };\n\n\t\t\tconst options = {\n\t\t\t\taws_project_region: 'region',\n\t\t\t\taws_cloud_logic_custom,\n\t\t\t};\n\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(options);\n\n\t\t\tconst creds = {\n\t\t\t\tsecretAccessKey: 'secret',\n\t\t\t\taccessKeyId: 'access',\n\t\t\t\tsessionToken: 'token',\n\t\t\t};\n\n\t\t\tconst creds2 = {\n\t\t\t\tsecret_key: 'secret',\n\t\t\t\taccess_key: 'access',\n\t\t\t\tsession_token: 'token',\n\t\t\t};\n\n\t\t\tconst spyon = jest.spyOn(Credentials, 'get').mockImplementation(() => {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tres(creds);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst spyonSigner = jest\n\t\t\t\t.spyOn(Signer, 'sign')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn { headers: {} };\n\t\t\t\t});\n\n\t\t\tmockAxios.mockResolvedValue(resp);\n\n\t\t\tconst init = {\n\t\t\t\tqueryStringParameters: {\n\t\t\t\t\t'ke:y3': 'val:ue 3',\n\t\t\t\t},\n\t\t\t};\n\t\t\tawait api.get('apiName', '/items', init);\n\t\t\tconst expectedParams = {\n\t\t\t\tdata: null,\n\t\t\t\theaders: {},\n\t\t\t\thost: undefined,\n\t\t\t\tmethod: 'GET',\n\t\t\t\tpath: '/',\n\t\t\t\tresponseType: 'json',\n\t\t\t\turl: 'endpoint/items?ke%3Ay3=val%3Aue%203',\n\t\t\t\ttimeout: 0,\n\t\t\t\tcancelToken: tokenMock,\n\t\t\t};\n\t\t\texpect(spyonSigner).toBeCalledWith(expectedParams, creds2, {\n\t\t\t\tregion: 'us-east-1',\n\t\t\t\tservice: 'execute-api',\n\t\t\t});\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "query-string on init-custom-auth",
            "suites": [
                "Rest API test",
                "get test"
            ],
            "updatePoint": {
                "line": 310,
                "column": 40
            },
            "line": 310,
            "code": "\t\ttest('query-string on init-custom-auth', async () => {\n\t\t\tconst resp = { data: [{ name: 'Bob' }] };\n\n\t\t\tconst options = {\n\t\t\t\taws_project_region: 'region',\n\t\t\t\taws_cloud_logic_custom,\n\t\t\t};\n\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(options);\n\n\t\t\tconst creds = {\n\t\t\t\tsecretAccessKey: 'secret',\n\t\t\t\taccessKeyId: 'access',\n\t\t\t\tsessionToken: 'token',\n\t\t\t};\n\n\t\t\tconst creds2 = {\n\t\t\t\tsecret_key: 'secret',\n\t\t\t\taccess_key: 'access',\n\t\t\t\tsession_token: 'token',\n\t\t\t};\n\n\t\t\tconst spyon = jest.spyOn(Credentials, 'get').mockImplementation(() => {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tres(creds);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst spyonRequest = jest\n\t\t\t\t.spyOn(RestClient.prototype as any, '_request')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn { headers: {} };\n\t\t\t\t});\n\n\t\t\tmockAxios.mockResolvedValue(resp);\n\n\t\t\tconst init = {\n\t\t\t\tqueryStringParameters: {\n\t\t\t\t\t'ke:y3': 'val:ue 3',\n\t\t\t\t},\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: 'apikey',\n\t\t\t\t},\n\t\t\t};\n\t\t\tawait api.get('apiName', '/items', init);\n\t\t\tconst expectedParams = {\n\t\t\t\tdata: null,\n\t\t\t\theaders: { Authorization: 'apikey' },\n\t\t\t\thost: undefined,\n\t\t\t\tmethod: 'GET',\n\t\t\t\tpath: '/',\n\t\t\t\tresponseType: 'json',\n\t\t\t\tsignerServiceInfo: undefined,\n\t\t\t\turl: 'endpoint/items?ke%3Ay3=val%3Aue%203',\n\t\t\t\ttimeout: 0,\n\t\t\t\tcancelToken: tokenMock,\n\t\t\t};\n\t\t\texpect(spyonRequest).toBeCalledWith(expectedParams, undefined);\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "query-string on init and url",
            "suites": [
                "Rest API test",
                "get test"
            ],
            "updatePoint": {
                "line": 370,
                "column": 36
            },
            "line": 370,
            "code": "\t\ttest('query-string on init and url', async () => {\n\t\t\tconst resp = { data: [{ name: 'Bob' }] };\n\n\t\t\tconst options = {\n\t\t\t\taws_project_region: 'region',\n\t\t\t\taws_cloud_logic_custom,\n\t\t\t};\n\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(options);\n\n\t\t\tconst creds = {\n\t\t\t\tsecretAccessKey: 'secret',\n\t\t\t\taccessKeyId: 'access',\n\t\t\t\tsessionToken: 'token',\n\t\t\t};\n\n\t\t\tconst creds2 = {\n\t\t\t\tsecret_key: 'secret',\n\t\t\t\taccess_key: 'access',\n\t\t\t\tsession_token: 'token',\n\t\t\t};\n\n\t\t\tconst spyon = jest.spyOn(Credentials, 'get').mockImplementation(() => {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tres(creds);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst spyonSigner = jest\n\t\t\t\t.spyOn(Signer, 'sign')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn { headers: {} };\n\t\t\t\t});\n\n\t\t\tmockAxios.mockResolvedValue(resp);\n\n\t\t\tconst init = {\n\t\t\t\tqueryStringParameters: {\n\t\t\t\t\tkey2: 'value2_real',\n\t\t\t\t},\n\t\t\t};\n\t\t\tawait api.get('apiName', '/items?key1=value1&key2=value', init);\n\t\t\tconst expectedParams = {\n\t\t\t\tdata: null,\n\t\t\t\theaders: {},\n\t\t\t\thost: undefined,\n\t\t\t\tmethod: 'GET',\n\t\t\t\tpath: '/',\n\t\t\t\tresponseType: 'json',\n\t\t\t\turl: 'endpoint/items?key1=value1&key2=value2_real',\n\t\t\t\ttimeout: 0,\n\t\t\t\tcancelToken: tokenMock,\n\t\t\t};\n\t\t\texpect(spyonSigner).toBeCalledWith(expectedParams, creds2, {\n\t\t\t\tregion: 'us-east-1',\n\t\t\t\tservice: 'execute-api',\n\t\t\t});\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "endpoint length 0",
            "suites": [
                "Rest API test",
                "get test"
            ],
            "updatePoint": {
                "line": 430,
                "column": 25
            },
            "line": 430,
            "code": "\t\ttest('endpoint length 0', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure({});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait api.get('apiNameDoesntExist', 'path', { init: 'init' });\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('API apiNameDoesntExist does not exist');\n\t\t\t}\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "cred not ready",
            "suites": [
                "Rest API test",
                "get test"
            ],
            "updatePoint": {
                "line": 455,
                "column": 22
            },
            "line": 455,
            "code": "\t\ttest('cred not ready', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\trej('err no current credentials');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon4 = jest\n\t\t\t\t.spyOn(RestClient.prototype as any, '_request')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn 'endpoint';\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\tawait api.get('apiName', 'path', { init: 'init' });\n\t\t\texpect(spyon4).toBeCalled();\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "clock skew",
            "suites": [
                "Rest API test",
                "get test"
            ],
            "updatePoint": {
                "line": 478,
                "column": 18
            },
            "line": 478,
            "code": "\t\ttest('clock skew', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure({\n\t\t\t\tendpoints: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'url',\n\t\t\t\t\t\tendpoint: 'https://domain.fakeurl/',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n\t\t\tconst normalError = new Error('Response Error');\n\n\t\t\t// Server is always \"correct\"\n\t\t\tconst serverDate = new Date();\n\t\t\tconst requestDate = new Date();\n\n\t\t\t// Local machine is behind by 1 hour\n\t\t\t// It's important to change the _server_ time in this test,\n\t\t\t// because the local time \"looks correct\" to the user & DateUtils\n\t\t\t// compares the server response to local time.\n\t\t\tserverDate.setHours(serverDate.getHours() + 1);\n\n\t\t\tconst clockSkewError: any = new Error('BadRequestException');\n\t\t\tconst init = {\n\t\t\t\theaders: {\n\t\t\t\t\t'x-amz-date': DateUtils.getHeaderStringFromDate(requestDate),\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tclockSkewError.response = {\n\t\t\t\theaders: {\n\t\t\t\t\t'x-amzn-errortype': 'BadRequestException',\n\t\t\t\t\tdate: serverDate.toString(),\n\t\t\t\t},\n\t\t\t};\n\n\t\t\t// Clock should not be skewed yet\n\t\t\texpect(DateUtils.getClockOffset()).toBe(0);\n\t\t\t// Ensure the errors are the correct type for gating\n\t\t\texpect(DateUtils.isClockSkewError(normalError)).toBe(false);\n\t\t\texpect(DateUtils.isClockSkewError(clockSkewError)).toBe(true);\n\t\t\texpect(DateUtils.isClockSkewed(serverDate)).toBe(true);\n\n\t\t\tjest\n\t\t\t\t.spyOn(RestClient.prototype as any, 'endpoint')\n\t\t\t\t.mockImplementation(() => 'endpoint');\n\n\t\t\tjest.spyOn(Credentials, 'get').mockResolvedValue('creds');\n\t\t\tjest.spyOn(RestClient.prototype as any, '_sign').mockReturnValue({\n\t\t\t\t...init,\n\t\t\t\theaders: { ...init.headers, Authorization: 'signed' },\n\t\t\t});\n\t\t\tmockAxios.mockImplementationOnce(() => {\n\t\t\t\treturn new Promise((_, rej) => {\n\t\t\t\t\trej(normalError);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait expect(api.post('url', 'path', init)).rejects.toThrow(normalError);\n\n\t\t\t// Clock should not be skewed from normal errors\n\t\t\texpect(DateUtils.getClockOffset()).toBe(0);\n\n\t\t\t// mock clock skew error response and successful response after retry\n\t\t\tmockAxios\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((_, rej) => {\n\t\t\t\t\t\trej(clockSkewError);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.mockResolvedValue({\n\t\t\t\t\tdata: [{ name: 'Bob' }],\n\t\t\t\t});\n\n\t\t\tawait expect(api.post('url', 'path', init)).resolves.toEqual([\n\t\t\t\t{ name: 'Bob' },\n\t\t\t]);\n\n\t\t\t// With a clock skew error, the clock will get offset with the difference\n\t\t\texpect(DateUtils.getClockOffset()).toBe(\n\t\t\t\tserverDate.getTime() - requestDate.getTime()\n\t\t\t);\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "cancel request",
            "suites": [
                "Rest API test",
                "get test"
            ],
            "updatePoint": {
                "line": 563,
                "column": 22
            },
            "line": 563,
            "code": "\t\ttest('cancel request', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.reject('error cancelled');\n\t\t\t\t});\n\t\t\tconst spyon4 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'isCancel')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\n\t\t\tconst promiseResponse = api.get('apiName', 'path', { init: 'init' });\n\t\t\tapi.cancel(promiseResponse, 'testmessage');\n\n\t\t\texpect.assertions(5);\n\n\t\t\texpect(spyon2).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tcustom_header: undefined,\n\t\t\t\t\tendpoint: 'endpointpath',\n\t\t\t\t\tregion: 'region',\n\t\t\t\t\tservice: 'execute-api',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tinit: 'init',\n\t\t\t\t\tcancellableToken: { cancel: cancelMock, token: tokenMock },\n\t\t\t\t}\n\t\t\t);\n\t\t\texpect(cancelTokenSpy).toBeCalledTimes(1);\n\t\t\texpect(cancelMock).toBeCalledWith('testmessage');\n\t\t\ttry {\n\t\t\t\tawait promiseResponse;\n\t\t\t} catch (err) {\n\t\t\t\texpect(err).toEqual('error cancelled');\n\t\t\t\texpect(api.isCancel(err)).toBeTruthy();\n\t\t\t}\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Rest API test",
                "post test"
            ],
            "updatePoint": {
                "line": 614,
                "column": 18
            },
            "line": 614,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst api = new API({\n\t\t\t\tregion: 'region-2',\n\t\t\t});\n\t\t\tconst options = {\n\t\t\t\taws_project_region: 'region',\n\t\t\t\taws_cloud_logic_custom,\n\t\t\t};\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\n\t\t\tapi.configure(options);\n\t\t\tawait api.post('apiName', 'path', { init: 'init' });\n\n\t\t\texpect(spyon2).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tcustom_header: undefined,\n\t\t\t\t\tendpoint: 'endpointpath',\n\t\t\t\t\tregion: 'us-east-1',\n\t\t\t\t\tservice: 'execute-api',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tinit: 'init',\n\t\t\t\t\tcancellableToken: { cancel: cancelMock, token: tokenMock },\n\t\t\t\t}\n\t\t\t);\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "endpoint length 0",
            "suites": [
                "Rest API test",
                "post test"
            ],
            "updatePoint": {
                "line": 653,
                "column": 25
            },
            "line": 653,
            "code": "\t\ttest('endpoint length 0', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'post')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait api.post('apiNameDoesNotExists', 'path', { init: 'init' });\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('API apiNameDoesNotExists does not exist');\n\t\t\t}\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "cred not ready",
            "suites": [
                "Rest API test",
                "post test"
            ],
            "updatePoint": {
                "line": 678,
                "column": 22
            },
            "line": 678,
            "code": "\t\ttest('cred not ready', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\trej('err');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst spyon4 = jest\n\t\t\t\t.spyOn(RestClient.prototype as any, '_request')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn 'endpoint';\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\tawait api.post('apiName', 'path', { init: 'init' });\n\t\t\texpect(spyon4).toBeCalled();\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Rest API test",
                "put test"
            ],
            "updatePoint": {
                "line": 703,
                "column": 18
            },
            "line": 703,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'put')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\n\t\t\tawait api.put('apiName', 'path', { init: 'init' });\n\n\t\t\texpect(spyon2).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tcustom_header: undefined,\n\t\t\t\t\tendpoint: 'endpointpath',\n\t\t\t\t\tregion: 'region',\n\t\t\t\t\tservice: 'execute-api',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tinit: 'init',\n\t\t\t\t\tcancellableToken: { cancel: cancelMock, token: tokenMock },\n\t\t\t\t}\n\t\t\t);\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "endpoint length 0",
            "suites": [
                "Rest API test",
                "put test"
            ],
            "updatePoint": {
                "line": 736,
                "column": 25
            },
            "line": 736,
            "code": "\t\ttest('endpoint length 0', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure({\n\t\t\t\tendpoints: [],\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'put')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait api.put('apiName', 'path', { init: 'init' });\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('API apiName does not exist');\n\t\t\t}\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "cred not ready",
            "suites": [
                "Rest API test",
                "put test"
            ],
            "updatePoint": {
                "line": 763,
                "column": 22
            },
            "line": 763,
            "code": "\t\ttest('cred not ready', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\trej('err');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon4 = jest\n\t\t\t\t.spyOn(RestClient.prototype as any, '_request')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn 'endpoint';\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\tawait api.put('apiName', 'path', { init: 'init' });\n\t\t\texpect(spyon4).toBeCalled();\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Rest API test",
                "patch test"
            ],
            "updatePoint": {
                "line": 788,
                "column": 18
            },
            "line": 788,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'patch')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\n\t\t\tawait api.patch('apiName', 'path', { init: 'init' });\n\n\t\t\texpect(spyon2).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tcustom_header: undefined,\n\t\t\t\t\tendpoint: 'endpointpath',\n\t\t\t\t\tregion: 'region',\n\t\t\t\t\tservice: 'execute-api',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tinit: 'init',\n\t\t\t\t\tcancellableToken: { cancel: cancelMock, token: tokenMock },\n\t\t\t\t}\n\t\t\t);\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "endpoint length 0",
            "suites": [
                "Rest API test",
                "patch test"
            ],
            "updatePoint": {
                "line": 821,
                "column": 25
            },
            "line": 821,
            "code": "\t\ttest('endpoint length 0', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure({\n\t\t\t\tendpoints: [],\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'patch')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait api.patch('apiName', 'path', { init: 'init' });\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('API apiName does not exist');\n\t\t\t}\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "cred not ready",
            "suites": [
                "Rest API test",
                "patch test"
            ],
            "updatePoint": {
                "line": 848,
                "column": 22
            },
            "line": 848,
            "code": "\t\ttest('cred not ready', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\trej('err');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon4 = jest\n\t\t\t\t.spyOn(RestClient.prototype as any, '_request')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn 'endpoint';\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\tawait api.patch('apiName', 'path', { init: 'init' });\n\t\t\texpect(spyon4).toBeCalled();\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Rest API test",
                "del test"
            ],
            "updatePoint": {
                "line": 873,
                "column": 18
            },
            "line": 873,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'del')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\n\t\t\tawait api.del('apiName', 'path', { init: 'init' });\n\n\t\t\texpect(spyon2).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tcustom_header: undefined,\n\t\t\t\t\tendpoint: 'endpointpath',\n\t\t\t\t\tregion: 'region',\n\t\t\t\t\tservice: 'execute-api',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tinit: 'init',\n\t\t\t\t\tcancellableToken: { cancel: cancelMock, token: tokenMock },\n\t\t\t\t}\n\t\t\t);\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "endpoint length 0",
            "suites": [
                "Rest API test",
                "del test"
            ],
            "updatePoint": {
                "line": 906,
                "column": 25
            },
            "line": 906,
            "code": "\t\ttest('endpoint length 0', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure({});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'del')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait api.del('apiName', 'path', { init: 'init' });\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('API apiName does not exist');\n\t\t\t}\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "cred not ready",
            "suites": [
                "Rest API test",
                "del test"
            ],
            "updatePoint": {
                "line": 931,
                "column": 22
            },
            "line": 931,
            "code": "\t\ttest('cred not ready', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\trej('err');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon4 = jest\n\t\t\t\t.spyOn(RestClient.prototype as any, '_request')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn 'endpoint';\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\tawait api.del('apiName', 'path', { init: 'init' });\n\t\t\texpect(spyon4).toBeCalled();\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Rest API test",
                "head test"
            ],
            "updatePoint": {
                "line": 956,
                "column": 18
            },
            "line": 956,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'head')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\n\t\t\tawait api.head('apiName', 'path', { init: 'init' });\n\n\t\t\texpect(spyon2).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tcustom_header: undefined,\n\t\t\t\t\tendpoint: 'endpointpath',\n\t\t\t\t\tregion: 'region',\n\t\t\t\t\tservice: 'execute-api',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tinit: 'init',\n\t\t\t\t\tcancellableToken: { cancel: cancelMock, token: tokenMock },\n\t\t\t\t}\n\t\t\t);\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "endpoint length 0",
            "suites": [
                "Rest API test",
                "head test"
            ],
            "updatePoint": {
                "line": 989,
                "column": 25
            },
            "line": 989,
            "code": "\t\ttest('endpoint length 0', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure({});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres('cred');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(RestClient.prototype, 'head')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait api.head('apiName', 'path', { init: 'init' });\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('API apiName does not exist');\n\t\t\t}\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "cred not ready",
            "suites": [
                "Rest API test",
                "head test"
            ],
            "updatePoint": {
                "line": 1014,
                "column": 22
            },
            "line": 1014,
            "code": "\t\ttest('cred not ready', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'get')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\trej('err');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon4 = jest\n\t\t\t\t.spyOn(RestClient.prototype as any, '_request')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn 'endpoint';\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\tawait api.head('apiName', 'path', { init: 'init' });\n\t\t\texpect(spyon4).toBeCalled();\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "Rest API test",
                "endpoint test"
            ],
            "updatePoint": {
                "line": 1039,
                "column": 18
            },
            "line": 1039,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst api = new API({});\n\t\t\tapi.configure(config);\n\n\t\t\tconst endpoint = await api.endpoint('apiName');\n\n\t\t\texpect(endpoint).toBe('endpoint');\n\t\t});",
            "file": "RestAPI-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "fetch with signed request",
            "suites": [
                "RestClient test",
                "ajax"
            ],
            "updatePoint": {
                "line": 71,
                "column": 33
            },
            "line": 71,
            "code": "\t\ttest('fetch with signed request', async () => {\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect(await restClient.ajax('url', 'method', {})).toEqual('data');\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "fetch with signed failing request",
            "suites": [
                "RestClient test",
                "ajax"
            ],
            "updatePoint": {
                "line": 87,
                "column": 41
            },
            "line": 87,
            "code": "\t\ttest('fetch with signed failing request', async () => {\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect.assertions(1);\n\n\t\t\ttry {\n\t\t\t\tawait restClient.ajax('url', 'method', { headers: { reject: 'true' } });\n\t\t\t} catch (error) {\n\t\t\t\texpect(error).toEqual({ data: 'error' });\n\t\t\t}\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "fetch with signed request",
            "suites": [
                "RestClient test",
                "ajax"
            ],
            "updatePoint": {
                "line": 109,
                "column": 33
            },
            "line": 109,
            "code": "\t\ttest('fetch with signed request', async () => {\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect(await restClient.ajax('url', 'method', {})).toEqual('data');\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "ajax with no credentials",
            "suites": [
                "RestClient test",
                "ajax"
            ],
            "updatePoint": {
                "line": 125,
                "column": 32
            },
            "line": 125,
            "code": "\t\ttest('ajax with no credentials', async () => {\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\ttry {\n\t\t\t\tawait restClient.ajax('url', 'method', {});\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('credentials not set for API rest client ');\n\t\t\t}\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "ajax with extraParams",
            "suites": [
                "RestClient test",
                "ajax"
            ],
            "updatePoint": {
                "line": 140,
                "column": 29
            },
            "line": 140,
            "code": "\t\ttest('ajax with extraParams', async () => {\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect(await restClient.ajax('url', 'method', { body: 'body' })).toEqual(\n\t\t\t\t'data'\n\t\t\t);\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "ajax with formData",
            "suites": [
                "RestClient test",
                "ajax"
            ],
            "updatePoint": {
                "line": 158,
                "column": 26
            },
            "line": 158,
            "code": "\t\ttest('ajax with formData', async () => {\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\tconst formData = new FormData();\n\t\t\tformData.append('key', 'contents');\n\n\t\t\texpect(\n\t\t\t\tawait restClient.ajax('url', 'method', { body: formData })\n\t\t\t).toEqual('contents');\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "ajax with custom responseType",
            "suites": [
                "RestClient test",
                "ajax"
            ],
            "updatePoint": {
                "line": 179,
                "column": 37
            },
            "line": 179,
            "code": "\t\ttest('ajax with custom responseType', async () => {\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect(\n\t\t\t\tawait restClient.ajax('url', 'method', {\n\t\t\t\t\tbody: 'body',\n\t\t\t\t\tresponseType: 'blob',\n\t\t\t\t})\n\t\t\t).toEqual('blob');\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "ajax with Authorization header",
            "suites": [
                "RestClient test",
                "ajax"
            ],
            "updatePoint": {
                "line": 200,
                "column": 38
            },
            "line": 200,
            "code": "\t\ttest('ajax with Authorization header', async () => {\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect(\n\t\t\t\tawait restClient.ajax('url', 'method', {\n\t\t\t\t\theaders: { Authorization: 'authorization' },\n\t\t\t\t})\n\t\t\t).toEqual('data');\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "ajax with withCredentials set to true",
            "suites": [
                "RestClient test",
                "ajax"
            ],
            "updatePoint": {
                "line": 220,
                "column": 45
            },
            "line": 220,
            "code": "\t\ttest('ajax with withCredentials set to true', async () => {\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect(\n\t\t\t\tawait restClient.ajax('url', 'method', { withCredentials: true })\n\t\t\t).toEqual('data-withCredentials');\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "RestClient test",
                "get test"
            ],
            "updatePoint": {
                "line": 240,
                "column": 18
            },
            "line": 240,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(RestClient.prototype, 'ajax');\n\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect.assertions(5);\n\t\t\tawait restClient.get('url', {});\n\n\t\t\texpect(spyon.mock.calls[0][0]).toBe('url');\n\t\t\texpect(spyon.mock.calls[0][1]).toBe('GET');\n\n\t\t\tawait restClient.get('url', { withCredentials: true });\n\n\t\t\texpect(spyon.mock.calls[1][0]).toBe('url');\n\t\t\texpect(spyon.mock.calls[1][1]).toBe('GET');\n\t\t\texpect(spyon.mock.calls[1][2]).toEqual({ withCredentials: true });\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "RestClient test",
                "put test"
            ],
            "updatePoint": {
                "line": 272,
                "column": 18
            },
            "line": 272,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(RestClient.prototype, 'ajax');\n\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect.assertions(3);\n\t\t\tawait restClient.put('url', 'data');\n\n\t\t\texpect(spyon.mock.calls[0][0]).toBe('url');\n\t\t\texpect(spyon.mock.calls[0][1]).toBe('PUT');\n\t\t\texpect(spyon.mock.calls[0][2]).toBe('data');\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "RestClient test",
                "patch test"
            ],
            "updatePoint": {
                "line": 298,
                "column": 18
            },
            "line": 298,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(RestClient.prototype, 'ajax');\n\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect.assertions(3);\n\t\t\tawait restClient.patch('url', 'data');\n\n\t\t\texpect(spyon.mock.calls[0][0]).toBe('url');\n\t\t\texpect(spyon.mock.calls[0][1]).toBe('PATCH');\n\t\t\texpect(spyon.mock.calls[0][2]).toBe('data');\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "RestClient test",
                "post test"
            ],
            "updatePoint": {
                "line": 324,
                "column": 18
            },
            "line": 324,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(RestClient.prototype, 'ajax');\n\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect.assertions(3);\n\t\t\tawait restClient.post('url', 'data');\n\n\t\t\texpect(spyon.mock.calls[0][0]).toBe('url');\n\t\t\texpect(spyon.mock.calls[0][1]).toBe('POST');\n\t\t\texpect(spyon.mock.calls[0][2]).toBe('data');\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "RestClient test",
                "del test"
            ],
            "updatePoint": {
                "line": 350,
                "column": 18
            },
            "line": 350,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(RestClient.prototype, 'ajax');\n\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect.assertions(2);\n\t\t\tawait restClient.del('url', {});\n\n\t\t\texpect(spyon.mock.calls[0][0]).toBe('url');\n\t\t\texpect(spyon.mock.calls[0][1]).toBe('DELETE');\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "RestClient test",
                "head test"
            ],
            "updatePoint": {
                "line": 375,
                "column": 18
            },
            "line": 375,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(RestClient.prototype, 'ajax');\n\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: {},\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect.assertions(2);\n\t\t\tawait restClient.head('url', {});\n\n\t\t\texpect(spyon.mock.calls[0][0]).toBe('url');\n\t\t\texpect(spyon.mock.calls[0][1]).toBe('HEAD');\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "RestClient test",
                "endpoint test"
            ],
            "updatePoint": {
                "line": 400,
                "column": 18
            },
            "line": 400,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'myApi',\n\t\t\t\t\t\tendpoint: 'endpoint of myApi',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'otherApi',\n\t\t\t\t\t\tendpoint: 'endpoint of otherApi',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t\tregion: 'myregion',\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect(restClient.endpoint('myApi')).toBe('endpoint of myApi');\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "custom endpoint",
            "suites": [
                "RestClient test",
                "endpoint test"
            ],
            "updatePoint": {
                "line": 426,
                "column": 23
            },
            "line": 426,
            "code": "\t\ttest('custom endpoint', () => {\n\t\t\tconst apiOptions = {\n\t\t\t\theaders: {},\n\t\t\t\tendpoints: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'myApi',\n\t\t\t\t\t\tendpoint: 'endpoint of myApi',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'otherApi',\n\t\t\t\t\t\tendpoint: 'endpoint of otherApi',\n\t\t\t\t\t\tregion: 'myregion',\n\t\t\t\t\t\tservice: 'myservice',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tcredentials: {\n\t\t\t\t\taccessKeyId: 'accessKeyId',\n\t\t\t\t\tsecretAccessKey: 'secretAccessKey',\n\t\t\t\t\tsessionToken: 'sessionToken',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst restClient = new RestClient(apiOptions);\n\n\t\t\texpect(restClient.endpoint('otherApi')).toBe('endpoint of otherApi');\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "request non existent",
            "suites": [
                "RestClient test",
                "Cancel Token"
            ],
            "updatePoint": {
                "line": 480,
                "column": 28
            },
            "line": 480,
            "code": "\t\ttest('request non existent', () => {\n\t\t\tconst restClient = new RestClient(apiOptions);\n\t\t\texpect(restClient.cancel(new Promise<any>((req, res) => {}))).toBe(false);\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "request exist",
            "suites": [
                "RestClient test",
                "Cancel Token"
            ],
            "updatePoint": {
                "line": 485,
                "column": 21
            },
            "line": 485,
            "code": "\t\ttest('request exist', () => {\n\t\t\tconst restClient = new RestClient(apiOptions);\n\t\t\tconst request = Promise.resolve();\n\t\t\trestClient.updateRequestToBeCancellable(\n\t\t\t\trequest,\n\t\t\t\trestClient.getCancellableToken()\n\t\t\t);\n\t\t\texpect(restClient.cancel(request)).toBe(true);\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "RestClient test",
                "Cancel Token"
            ],
            "updatePoint": {
                "line": 495,
                "column": 18
            },
            "line": 495,
            "code": "\t\ttest('happy case', () => {\n\t\t\tconst restClient = new RestClient(apiOptions);\n\t\t\tjest\n\t\t\t\t.spyOn(RestClient.prototype, 'ajax')\n\t\t\t\t.mockImplementationOnce(() => Promise.resolve());\n\n\t\t\tconst cancellableToken = restClient.getCancellableToken();\n\t\t\tconst request = restClient.ajax('url', 'method', { cancellableToken });\n\t\t\trestClient.updateRequestToBeCancellable(request, cancellableToken);\n\n\t\t\t// cancel the request\n\t\t\tconst cancelSuccess = restClient.cancel(request, 'message');\n\n\t\t\texpect(cancelSuccess).toBeTruthy();\n\t\t\texpect(cancelTokenSpy).toBeCalledTimes(1);\n\t\t\texpect(cancelMock).toBeCalledWith('message');\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "iscancel called",
            "suites": [
                "RestClient test",
                "Cancel Token"
            ],
            "updatePoint": {
                "line": 513,
                "column": 23
            },
            "line": 513,
            "code": "\t\ttest('iscancel called', () => {\n\t\t\tconst restClient = new RestClient(apiOptions);\n\t\t\trestClient.isCancel({});\n\t\t\texpect(isCancelSpy).toHaveBeenCalledTimes(1);\n\t\t});",
            "file": "RestClient-unit-test.ts",
            "skipped": false,
            "dir": "packages/api-rest/__tests__"
        },
        {
            "name": "configure",
            "suites": [
                "API test"
            ],
            "updatePoint": {
                "line": 7,
                "column": 16
            },
            "line": 7,
            "code": "\ttest('configure', () => {\n\t\tjest\n\t\t\t.spyOn(RestAPIClass.prototype, 'configure')\n\t\t\t.mockReturnValue({ restapi: 'configured' });\n\t\tjest\n\t\t\t.spyOn(InternalGraphQLAPIClass.prototype, 'configure')\n\t\t\t.mockReturnValue({ graphqlapi: 'configured' });\n\t\tconst api = new API(null);\n\t\texpect(api.configure(null)).toStrictEqual({\n\t\t\tgraphqlapi: 'configured',\n\t\t\trestapi: 'configured',\n\t\t});\n\t});",
            "file": "API-test.ts",
            "skipped": false,
            "dir": "packages/api/__tests__"
        },
        {
            "name": "get",
            "suites": [
                "API test"
            ],
            "updatePoint": {
                "line": 21,
                "column": 10
            },
            "line": 21,
            "code": "\ttest('get', async () => {\n\t\tconst spy = jest\n\t\t\t.spyOn(RestAPIClass.prototype, 'get')\n\t\t\t.mockResolvedValue('getResponse');\n\t\tconst api = new API(null);\n\t\texpect(await api.get(null, null, null)).toBe('getResponse');\n\n\t\texpect(spy).toBeCalledWith(null, null, {\n\t\t\tcustomUserAgentDetails: {\n\t\t\t\tcategory: Category.API,\n\t\t\t\taction: ApiAction.Get,\n\t\t\t},\n\t\t});\n\t});",
            "file": "API-test.ts",
            "skipped": false,
            "dir": "packages/api/__tests__"
        },
        {
            "name": "post",
            "suites": [
                "API test"
            ],
            "updatePoint": {
                "line": 36,
                "column": 11
            },
            "line": 36,
            "code": "\ttest('post', async () => {\n\t\tconst spy = jest\n\t\t\t.spyOn(RestAPIClass.prototype, 'post')\n\t\t\t.mockResolvedValue('postResponse');\n\t\tconst api = new API(null);\n\t\texpect(await api.post(null, null, null)).toBe('postResponse');\n\n\t\texpect(spy).toBeCalledWith(null, null, {\n\t\t\tcustomUserAgentDetails: {\n\t\t\t\tcategory: Category.API,\n\t\t\t\taction: ApiAction.Post,\n\t\t\t},\n\t\t});\n\t});",
            "file": "API-test.ts",
            "skipped": false,
            "dir": "packages/api/__tests__"
        },
        {
            "name": "put",
            "suites": [
                "API test"
            ],
            "updatePoint": {
                "line": 51,
                "column": 10
            },
            "line": 51,
            "code": "\ttest('put', async () => {\n\t\tconst spy = jest\n\t\t\t.spyOn(RestAPIClass.prototype, 'put')\n\t\t\t.mockResolvedValue('putResponse');\n\t\tconst api = new API(null);\n\t\texpect(await api.put(null, null, null)).toBe('putResponse');\n\n\t\texpect(spy).toBeCalledWith(null, null, {\n\t\t\tcustomUserAgentDetails: {\n\t\t\t\tcategory: Category.API,\n\t\t\t\taction: ApiAction.Put,\n\t\t\t},\n\t\t});\n\t});",
            "file": "API-test.ts",
            "skipped": false,
            "dir": "packages/api/__tests__"
        },
        {
            "name": "patch",
            "suites": [
                "API test"
            ],
            "updatePoint": {
                "line": 66,
                "column": 12
            },
            "line": 66,
            "code": "\ttest('patch', async () => {\n\t\tconst spy = jest\n\t\t\t.spyOn(RestAPIClass.prototype, 'patch')\n\t\t\t.mockResolvedValue('patchResponse');\n\t\tconst api = new API(null);\n\t\texpect(await api.patch(null, null, null)).toBe('patchResponse');\n\n\t\texpect(spy).toBeCalledWith(null, null, {\n\t\t\tcustomUserAgentDetails: {\n\t\t\t\tcategory: Category.API,\n\t\t\t\taction: ApiAction.Patch,\n\t\t\t},\n\t\t});\n\t});",
            "file": "API-test.ts",
            "skipped": false,
            "dir": "packages/api/__tests__"
        },
        {
            "name": "del",
            "suites": [
                "API test"
            ],
            "updatePoint": {
                "line": 81,
                "column": 10
            },
            "line": 81,
            "code": "\ttest('del', async () => {\n\t\tjest.spyOn(RestAPIClass.prototype, 'del').mockResolvedValue('delResponse');\n\t\tconst api = new API(null);\n\t\texpect(await api.del(null, null, null)).toBe('delResponse');\n\t});",
            "file": "API-test.ts",
            "skipped": false,
            "dir": "packages/api/__tests__"
        },
        {
            "name": "head",
            "suites": [
                "API test"
            ],
            "updatePoint": {
                "line": 87,
                "column": 11
            },
            "line": 87,
            "code": "\ttest('head', async () => {\n\t\tconst spy = jest\n\t\t\t.spyOn(RestAPIClass.prototype, 'head')\n\t\t\t.mockResolvedValue('headResponse');\n\t\tconst api = new API(null);\n\t\texpect(await api.head(null, null, null)).toBe('headResponse');\n\n\t\texpect(spy).toBeCalledWith(null, null, {\n\t\t\tcustomUserAgentDetails: {\n\t\t\t\tcategory: Category.API,\n\t\t\t\taction: ApiAction.Head,\n\t\t\t},\n\t\t});\n\t});",
            "file": "API-test.ts",
            "skipped": false,
            "dir": "packages/api/__tests__"
        },
        {
            "name": "endpoint",
            "suites": [
                "API test"
            ],
            "updatePoint": {
                "line": 102,
                "column": 15
            },
            "line": 102,
            "code": "\ttest('endpoint', async () => {\n\t\tjest\n\t\t\t.spyOn(RestAPIClass.prototype, 'endpoint')\n\t\t\t.mockResolvedValue('endpointResponse');\n\t\tconst api = new API(null);\n\t\texpect(await api.endpoint(null)).toBe('endpointResponse');\n\t});",
            "file": "API-test.ts",
            "skipped": false,
            "dir": "packages/api/__tests__"
        },
        {
            "name": "getGraphqlOperationType",
            "suites": [
                "API test"
            ],
            "updatePoint": {
                "line": 110,
                "column": 30
            },
            "line": 110,
            "code": "\ttest('getGraphqlOperationType', () => {\n\t\tjest\n\t\t\t.spyOn(InternalGraphQLAPIClass.prototype, 'getGraphqlOperationType')\n\t\t\t.mockReturnValueOnce('getGraphqlOperationTypeResponse' as any);\n\t\tconst api = new API(null);\n\t\texpect(api.getGraphqlOperationType(null)).toBe(\n\t\t\t'getGraphqlOperationTypeResponse'\n\t\t);\n\t});",
            "file": "API-test.ts",
            "skipped": false,
            "dir": "packages/api/__tests__"
        },
        {
            "name": "graphql",
            "suites": [
                "API test"
            ],
            "updatePoint": {
                "line": 120,
                "column": 14
            },
            "line": 120,
            "code": "\ttest('graphql', async () => {\n\t\tconst spy = jest\n\t\t\t.spyOn(InternalGraphQLAPIClass.prototype, 'graphql')\n\t\t\t.mockResolvedValue('grapqhqlResponse' as any);\n\t\tconst api = new API(null);\n\t\texpect(await api.graphql({ query: 'query' })).toBe('grapqhqlResponse');\n\n\t\texpect(spy).toBeCalledWith(expect.anything(), undefined, {\n\t\t\tcategory: Category.API,\n\t\t\taction: ApiAction.GraphQl,\n\t\t});\n\t});",
            "file": "API-test.ts",
            "skipped": false,
            "dir": "packages/api/__tests__"
        },
        {
            "name": "cancel RestAPI request",
            "suites": [
                "API test",
                "cancel"
            ],
            "updatePoint": {
                "line": 134,
                "column": 30
            },
            "line": 134,
            "code": "\t\ttest('cancel RestAPI request', async () => {\n\t\t\tjest\n\t\t\t\t.spyOn(InternalGraphQLAPIClass.prototype, 'hasCancelToken')\n\t\t\t\t.mockImplementation(() => false);\n\t\t\tconst restAPICancelSpy = jest\n\t\t\t\t.spyOn(RestAPIClass.prototype, 'cancel')\n\t\t\t\t.mockImplementation(() => true);\n\t\t\tjest\n\t\t\t\t.spyOn(RestAPIClass.prototype, 'hasCancelToken')\n\t\t\t\t.mockImplementation(() => true);\n\t\t\tconst api = new API(null);\n\t\t\tconst request = Promise.resolve();\n\t\t\texpect(api.cancel(request)).toBe(true);\n\t\t\texpect(restAPICancelSpy).toHaveBeenCalled();\n\t\t});",
            "file": "API-test.ts",
            "skipped": false,
            "dir": "packages/api/__tests__"
        },
        {
            "name": "cancel GraphQLAPI request",
            "suites": [
                "API test",
                "cancel"
            ],
            "updatePoint": {
                "line": 150,
                "column": 33
            },
            "line": 150,
            "code": "\t\ttest('cancel GraphQLAPI request', async () => {\n\t\t\tjest\n\t\t\t\t.spyOn(InternalGraphQLAPIClass.prototype, 'hasCancelToken')\n\t\t\t\t.mockImplementation(() => true);\n\t\t\tconst graphQLAPICancelSpy = jest\n\t\t\t\t.spyOn(InternalGraphQLAPIClass.prototype, 'cancel')\n\t\t\t\t.mockImplementation(() => true);\n\t\t\tjest\n\t\t\t\t.spyOn(RestAPIClass.prototype, 'hasCancelToken')\n\t\t\t\t.mockImplementation(() => false);\n\t\t\tconst api = new API(null);\n\t\t\tconst request = Promise.resolve();\n\t\t\texpect(api.cancel(request)).toBe(true);\n\t\t\texpect(graphQLAPICancelSpy).toHaveBeenCalled();\n\t\t});",
            "file": "API-test.ts",
            "skipped": false,
            "dir": "packages/api/__tests__"
        },
        {
            "name": "Check-non-verified-attributes",
            "suites": [
                "User-Attribute-validation"
            ],
            "updatePoint": {
                "line": 24,
                "column": 34
            },
            "line": 24,
            "code": "\tit('Check-non-verified-attributes', async () => {\n\t\tconst spyonAuthUserAttributes = jest\n\t\t\t.spyOn(InternalAuthClass.prototype, 'userAttributes')\n\t\t\t.mockImplementation((user: CognitoUser) => {\n\t\t\t\tconst emailAttribute = new CognitoUserAttribute({\n\t\t\t\t\tName: 'email',\n\t\t\t\t\tValue: 'hello@amzn.com',\n\t\t\t\t});\n\t\t\t\tconst emailVerified = new CognitoUserAttribute({\n\t\t\t\t\tName: 'email_verified',\n\t\t\t\t\tValue: 'true',\n\t\t\t\t});\n\t\t\t\tconst phoneAttribute = new CognitoUserAttribute({\n\t\t\t\t\tName: 'phone_number',\n\t\t\t\t\tValue: '+12345678901',\n\t\t\t\t});\n\t\t\t\tconst phoneVerified = new CognitoUserAttribute({\n\t\t\t\t\tName: 'phone_number_verified',\n\t\t\t\t\tValue: 'false',\n\t\t\t\t});\n\n\t\t\t\treturn new Promise(res => {\n\t\t\t\t\tres([emailAttribute, emailVerified, phoneAttribute, phoneVerified]);\n\t\t\t\t});\n\t\t\t});\n\n\t\tconst auth = new Auth(authOptions);\n\n\t\tconst verified = await auth.verifiedContact(\n\t\t\tnew CognitoUser({\n\t\t\t\tPool: new CognitoUserPool({\n\t\t\t\t\tClientId: authOptions.userPoolWebClientId,\n\t\t\t\t\tUserPoolId: authOptions.userPoolId,\n\t\t\t\t}),\n\t\t\t\tUsername: 'test',\n\t\t\t})\n\t\t);\n\n\t\texpect(spyonAuthUserAttributes).toBeCalled();\n\n\t\texpect(verified).toEqual({\n\t\t\tunverified: {\n\t\t\t\tphone_number: '+12345678901',\n\t\t\t},\n\t\t\tverified: {\n\t\t\t\temail: 'hello@amzn.com',\n\t\t\t},\n\t\t});\n\t});",
            "file": "auth-attribute-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "Checking not coerced values after sign in",
            "suites": [
                "User-Attribute-validation"
            ],
            "updatePoint": {
                "line": 74,
                "column": 46
            },
            "line": 74,
            "code": "\tit('Checking not coerced values after sign in', async () => {\n\t\tconst auth = new Auth(authOptions);\n\n\t\tconst spyUserPoolCurrentUser = jest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementation(() => {\n\t\t\t\treturn new CognitoUser({\n\t\t\t\t\tPool: new CognitoUserPool({\n\t\t\t\t\t\tUserPoolId: authOptions.userPoolId,\n\t\t\t\t\t\tClientId: authOptions.userPoolWebClientId,\n\t\t\t\t\t}),\n\t\t\t\t\tUsername: 'test',\n\t\t\t\t});\n\t\t\t});\n\n\t\tconst spyUserGetSession = jest\n\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\tconst session = new CognitoUserSession({\n\t\t\t\t\tAccessToken: new CognitoAccessToken({ AccessToken: 'accesstoken' }),\n\t\t\t\t\tIdToken: new CognitoIdToken({ IdToken: 'Idtoken' }),\n\t\t\t\t});\n\t\t\t\tcallback(null, session);\n\t\t\t});\n\n\t\tconst spyDecodePayload = jest\n\t\t\t.spyOn(CognitoAccessToken.prototype, 'decodePayload')\n\t\t\t.mockImplementation(() => {\n\t\t\t\treturn { scope: 'aws.cognito.signin.user.admin' };\n\t\t\t});\n\n\t\tconst spyGetUserData = jest\n\t\t\t.spyOn(CognitoUser.prototype, 'getUserData')\n\t\t\t.mockImplementation(callback => {\n\t\t\t\tconst emailAttribute = {\n\t\t\t\t\tName: 'email',\n\t\t\t\t\tValue: 'hello@amzn.com',\n\t\t\t\t};\n\t\t\t\tconst emailVerified = {\n\t\t\t\t\tName: 'email_verified',\n\t\t\t\t\tValue: 'true',\n\t\t\t\t};\n\t\t\t\tconst phoneAttribute = {\n\t\t\t\t\tName: 'phone_number',\n\t\t\t\t\tValue: '+12345678901',\n\t\t\t\t};\n\t\t\t\tconst phoneVerified = {\n\t\t\t\t\tName: 'phone_number_verified',\n\t\t\t\t\tValue: 'false',\n\t\t\t\t};\n\n\t\t\t\tconst customAttribute1 = {\n\t\t\t\t\tName: 'custom:attribute1',\n\t\t\t\t\tValue: 'false',\n\t\t\t\t};\n\n\t\t\t\tconst customAttribute2 = {\n\t\t\t\t\tName: 'custom:attribute2',\n\t\t\t\t\tValue: 'true',\n\t\t\t\t};\n\n\t\t\t\tcallback(null, {\n\t\t\t\t\tUsername: 'test',\n\t\t\t\t\tUserMFASettingList: ['SMS'],\n\t\t\t\t\tPreferredMfaSetting: 'SMS',\n\t\t\t\t\tUserAttributes: [\n\t\t\t\t\t\temailAttribute,\n\t\t\t\t\t\temailVerified,\n\t\t\t\t\t\tphoneAttribute,\n\t\t\t\t\t\tphoneVerified,\n\t\t\t\t\t\tcustomAttribute1,\n\t\t\t\t\t\tcustomAttribute2,\n\t\t\t\t\t],\n\t\t\t\t\tMFAOptions: [],\n\t\t\t\t});\n\t\t\t});\n\n\t\tconst user = await auth.currentUserPoolUser();\n\n\t\texpect(spyDecodePayload).toBeCalled();\n\t\texpect(spyGetUserData).toBeCalled();\n\t\texpect(spyUserGetSession).toBeCalled();\n\t\texpect(spyUserPoolCurrentUser).toBeCalled();\n\n\t\texpect(user).toMatchObject({\n\t\t\tattributes: {\n\t\t\t\temail: 'hello@amzn.com',\n\t\t\t\temail_verified: true,\n\t\t\t\tphone_number: '+12345678901',\n\t\t\t\tphone_number_verified: false,\n\t\t\t\t'custom:attribute1': 'false',\n\t\t\t\t'custom:attribute2': 'true',\n\t\t\t},\n\t\t});\n\t});",
            "file": "auth-attribute-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "throw error when storage is empty",
            "suites": [
                "configure test"
            ],
            "updatePoint": {
                "line": 5,
                "column": 40
            },
            "line": 5,
            "code": "\ttest('throw error when storage is empty', () => {\n\t\tconst opts = {\n\t\t\tuserPoolId: 'awsUserPoolsId',\n\t\t\tuserPoolWebClientId: 'awsUserPoolsWebClientId',\n\t\t\tregion: 'region',\n\t\t\tidentityPoolId: 'awsCognitoIdentityPoolId',\n\t\t\tmandatorySignIn: false,\n\t\t\tstorage: {},\n\t\t};\n\t\tconst auth = new Auth(null);\n\t\texpect.assertions(1);\n\t\ttry {\n\t\t\tauth.configure(opts);\n\t\t} catch (e) {\n\t\t\texpect(e).not.toBeNull();\n\t\t}\n\t});",
            "file": "auth-configure-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "configure Credentials correctly when using different region",
            "suites": [
                "configure test"
            ],
            "updatePoint": {
                "line": 23,
                "column": 66
            },
            "line": 23,
            "code": "\ttest('configure Credentials correctly when using different region', () => {\n\t\tconst opts = {\n\t\t\tuserPoolId: 'us-east-1_awdasd',\n\t\t\tuserPoolWebClientId: 'awsUserPoolsWebClientId',\n\t\t\tregion: 'us-east-1',\n\t\t\tidentityPoolId: 'awsCognitoIdentityPoolId',\n\t\t\tidentityPoolRegion: 'us-east-2',\n\t\t};\n\n\t\tconst spyOn = jest.spyOn(Credentials, 'configure');\n\n\t\tconst auth = new Auth(null);\n\t\texpect.assertions(1);\n\n\t\tauth.configure(opts);\n\t\texpect(spyOn).toBeCalledWith(\n\t\t\texpect.objectContaining({\n\t\t\t\tregion: 'us-east-1',\n\t\t\t\tidentityPoolRegion: 'us-east-2',\n\t\t\t\tidentityPoolId: 'awsCognitoIdentityPoolId',\n\t\t\t\tuserPoolId: 'us-east-1_awdasd',\n\t\t\t})\n\t\t);\n\t});",
            "file": "auth-configure-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "BypassCache clear credentials",
            "suites": [
                "credentials syncing tests"
            ],
            "updatePoint": {
                "line": 20,
                "column": 34
            },
            "line": 20,
            "code": "\tit('BypassCache clear credentials', async () => {\n\t\tconst auth = new Auth(authOptions);\n\n\t\tjest\n\t\t\t.spyOn(CognitoUser.prototype, 'authenticateUser')\n\t\t\t.mockImplementation((authenticationDetails, callback) => {\n\t\t\t\tconst session = new CognitoUserSession({\n\t\t\t\t\tAccessToken: new CognitoAccessToken({ AccessToken: 'accesstoken' }),\n\t\t\t\t\tIdToken: new CognitoIdToken({ IdToken: 'Idtoken' }),\n\t\t\t\t});\n\n\t\t\t\tcallback.onSuccess(session, false);\n\t\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementation(() => {\n\t\t\t\treturn new CognitoUser({\n\t\t\t\t\tPool: new CognitoUserPool({\n\t\t\t\t\t\tUserPoolId: authOptions.userPoolId,\n\t\t\t\t\t\tClientId: authOptions.userPoolWebClientId,\n\t\t\t\t\t}),\n\t\t\t\t\tUsername: 'test',\n\t\t\t\t});\n\t\t\t});\n\n\t\tconst session = new CognitoUserSession({\n\t\t\tAccessToken: new CognitoAccessToken({ AccessToken: 'accesstoken' }),\n\t\t\tIdToken: new CognitoIdToken({ IdToken: 'Idtoken' }),\n\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\tcallback(null, session);\n\t\t\t});\n\n\t\tconst spyCredentials = jest\n\t\t\t.spyOn(Credentials, 'set')\n\t\t\t.mockImplementationOnce(c => c);\n\n\t\tconst username = 'test';\n\t\tawait auth.signIn({ username, password: 'test' });\n\n\t\tconst clearCredentialsSpy = jest.spyOn(Credentials, 'clear');\n\t\tawait auth.currentAuthenticatedUser({ bypassCache: true });\n\n\t\texpect(clearCredentialsSpy).toHaveBeenCalled();\n\n\t\tjest.clearAllMocks();\n\t});",
            "file": "auth-creds-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "currentUserPoolUser  user.getSession using ClientMetadata from config",
            "suites": [
                "Refresh token"
            ],
            "updatePoint": {
                "line": 28,
                "column": 74
            },
            "line": 28,
            "code": "\tit('currentUserPoolUser  user.getSession using ClientMetadata from config', async () => {\n\t\t// configure with client metadata\n\t\tconst auth = new Auth(authOptions);\n\n\t\texpect.assertions(1);\n\n\t\tconst getSessionSpy = jest\n\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t.mockImplementation(\n\t\t\t\t// @ts-ignore\n\t\t\t\t(\n\t\t\t\t\tcallback: (error: Error, session: CognitoUserSession) => void,\n\t\t\t\t\toptions: any\n\t\t\t\t) => {\n\t\t\t\t\texpect(options.clientMetadata).toEqual({\n\t\t\t\t\t\t...clientMetadata,\n\t\t\t\t\t});\n\t\t\t\t\tconst session = new CognitoUserSession({\n\t\t\t\t\t\tAccessToken: new CognitoAccessToken({ AccessToken: 'accesstoken' }),\n\t\t\t\t\t\tIdToken: new CognitoIdToken({ IdToken: 'Idtoken' }),\n\t\t\t\t\t});\n\t\t\t\t\tcallback(null, session);\n\t\t\t\t}\n\t\t\t);\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementation(() => {\n\t\t\t\treturn new CognitoUser({\n\t\t\t\t\tPool: new CognitoUserPool({\n\t\t\t\t\t\tClientId: authOptions.userPoolWebClientId,\n\t\t\t\t\t\tUserPoolId: authOptions.userPoolId,\n\t\t\t\t\t}),\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t});\n\t\t\t});\n\t\tawait auth.currentUserPoolUser();\n\t});",
            "file": "auth-refresh-token-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "userSession  user.getSession using ClientMetadata from config",
            "suites": [
                "Refresh token"
            ],
            "updatePoint": {
                "line": 67,
                "column": 66
            },
            "line": 67,
            "code": "\tit('userSession  user.getSession using ClientMetadata from config', async () => {\n\t\t// configure with client metadata\n\t\tconst auth = new Auth(authOptions);\n\n\t\texpect.assertions(2);\n\n\t\tconst getSessionSpy = jest\n\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t.mockImplementation(\n\t\t\t\t// @ts-ignore\n\t\t\t\t(\n\t\t\t\t\tcallback: (error: Error, session: CognitoUserSession) => void,\n\t\t\t\t\toptions: any\n\t\t\t\t) => {\n\t\t\t\t\texpect(options.clientMetadata).toEqual({\n\t\t\t\t\t\t...clientMetadata,\n\t\t\t\t\t});\n\t\t\t\t\tconst session = new CognitoUserSession({\n\t\t\t\t\t\tAccessToken: new CognitoAccessToken({ AccessToken: 'accesstoken' }),\n\t\t\t\t\t\tIdToken: new CognitoIdToken({ IdToken: 'Idtoken' }),\n\t\t\t\t\t});\n\t\t\t\t\tcallback(null, session);\n\t\t\t\t}\n\t\t\t);\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementation(() => {\n\t\t\t\treturn new CognitoUser({\n\t\t\t\t\tPool: new CognitoUserPool({\n\t\t\t\t\t\tClientId: authOptions.userPoolWebClientId,\n\t\t\t\t\t\tUserPoolId: authOptions.userPoolId,\n\t\t\t\t\t}),\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t});\n\t\t\t});\n\t\tconst user = await auth.currentUserPoolUser();\n\n\t\tawait auth.userSession(user);\n\t});",
            "file": "auth-refresh-token-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "cognitoIdentitySignOut user.getSession using ClientMetadata from config",
            "suites": [
                "Refresh token"
            ],
            "updatePoint": {
                "line": 108,
                "column": 76
            },
            "line": 108,
            "code": "\tit('cognitoIdentitySignOut user.getSession using ClientMetadata from config', async () => {\n\t\t// configure with client metadata\n\t\tconst auth = new Auth(authOptions);\n\n\t\texpect.assertions(2);\n\n\t\tjest.spyOn(CognitoUser.prototype, 'getSession').mockImplementation(\n\t\t\t// @ts-ignore\n\t\t\t(\n\t\t\t\tcallback: (error: Error, session: CognitoUserSession) => void,\n\t\t\t\toptions: any\n\t\t\t) => {\n\t\t\t\texpect(options.clientMetadata).toEqual({\n\t\t\t\t\t...clientMetadata,\n\t\t\t\t});\n\t\t\t\tconst session = new CognitoUserSession({\n\t\t\t\t\tAccessToken: new CognitoAccessToken({ AccessToken: 'accesstoken' }),\n\t\t\t\t\tIdToken: new CognitoIdToken({ IdToken: 'Idtoken' }),\n\t\t\t\t});\n\t\t\t\tcallback(null, session);\n\t\t\t}\n\t\t);\n\n\t\tjest\n\t\t\t.spyOn(CognitoUser.prototype, 'globalSignOut')\n\t\t\t.mockImplementation(({ onSuccess, onFailure }) => {\n\t\t\t\tonSuccess('');\n\t\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementation(() => {\n\t\t\t\treturn new CognitoUser({\n\t\t\t\t\tPool: new CognitoUserPool({\n\t\t\t\t\t\tClientId: authOptions.userPoolWebClientId,\n\t\t\t\t\t\tUserPoolId: authOptions.userPoolId,\n\t\t\t\t\t}),\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t});\n\t\t\t});\n\t\tconst user = await auth.currentUserPoolUser();\n\n\t\t// @ts-ignore\n\t\tawait auth.cognitoIdentitySignOut({ global: true }, user);\n\t});",
            "file": "auth-refresh-token-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "currentUserPoolUser user.getUserData using ClientMetadata from config",
            "suites": [
                "Refresh token"
            ],
            "updatePoint": {
                "line": 154,
                "column": 74
            },
            "line": 154,
            "code": "\tit('currentUserPoolUser user.getUserData using ClientMetadata from config', async () => {\n\t\t// configure with client metadata\n\t\tconst auth = new Auth(authOptions);\n\n\t\texpect.assertions(1);\n\n\t\tjest.spyOn(CognitoUser.prototype, 'getSession').mockImplementation(\n\t\t\t// @ts-ignore\n\t\t\t(\n\t\t\t\tcallback: (error: Error, session: CognitoUserSession) => void,\n\t\t\t\toptions: any\n\t\t\t) => {\n\t\t\t\tconst session = new CognitoUserSession({\n\t\t\t\t\tAccessToken: new CognitoAccessToken({\n\t\t\t\t\t\tAccessToken:\n\t\t\t\t\t\t\t'a.ewogICJzdWIiOiAic3ViIiwKICAiZXZlbnRfaWQiOiAieHh4eHgiLAogICJ0b2tlbl91c2UiOiAiYWNjZXNzIiwKICAic2NvcGUiOiAiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLAogICJhdXRoX3RpbWUiOiAxNjExNzc2ODA3LAogICJpc3MiOiAiaHR0cHM6Ly9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS91cy1lYXN0LTFfenp6enp6enp6IiwKICAiZXhwIjogMTYxMTc4MDQwNywKICAiaWF0IjogMTYxMTc3NjgwNywKICAianRpIjogImFhYWFhIiwKICAiY2xpZW50X2lkIjogInh4eHh4eHh4IiwKICAidXNlcm5hbWUiOiAidXNlcm5hbWUiCn0.a',\n\t\t\t\t\t}),\n\t\t\t\t\tIdToken: new CognitoIdToken({ IdToken: 'Idtoken' }),\n\t\t\t\t});\n\t\t\t\tcallback(null, session);\n\t\t\t}\n\t\t);\n\n\t\tjest\n\t\t\t.spyOn(CognitoUser.prototype, 'getUserData')\n\t\t\t.mockImplementation((callback, params) => {\n\t\t\t\texpect(params.clientMetadata).toEqual(clientMetadata);\n\n\t\t\t\tcallback(null, {\n\t\t\t\t\tMFAOptions: [],\n\t\t\t\t\tPreferredMfaSetting: 'NOMFA',\n\t\t\t\t\tUserAttributes: [],\n\t\t\t\t\tUserMFASettingList: [],\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t});\n\t\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementation(() => {\n\t\t\t\treturn new CognitoUser({\n\t\t\t\t\tPool: new CognitoUserPool({\n\t\t\t\t\t\tClientId: authOptions.userPoolWebClientId,\n\t\t\t\t\t\tUserPoolId: authOptions.userPoolId,\n\t\t\t\t\t}),\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t});\n\t\t\t});\n\n\t\tconst user = await auth.currentUserPoolUser();\n\t});",
            "file": "auth-refresh-token-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "getPreferredMFA user.getUserData using ClientMetadata from config",
            "suites": [
                "Refresh token"
            ],
            "updatePoint": {
                "line": 206,
                "column": 70
            },
            "line": 206,
            "code": "\tit('getPreferredMFA user.getUserData using ClientMetadata from config', async () => {\n\t\t// configure with client metadata\n\t\tconst auth = new Auth(authOptions);\n\n\t\texpect.assertions(2);\n\n\t\tjest.spyOn(CognitoUser.prototype, 'getSession').mockImplementation(\n\t\t\t// @ts-ignore\n\t\t\t(\n\t\t\t\tcallback: (error: Error, session: CognitoUserSession) => void,\n\t\t\t\toptions: any\n\t\t\t) => {\n\t\t\t\tconst session = new CognitoUserSession({\n\t\t\t\t\tAccessToken: new CognitoAccessToken({\n\t\t\t\t\t\tAccessToken:\n\t\t\t\t\t\t\t'a.ewogICJzdWIiOiAic3ViIiwKICAiZXZlbnRfaWQiOiAieHh4eHgiLAogICJ0b2tlbl91c2UiOiAiYWNjZXNzIiwKICAic2NvcGUiOiAiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLAogICJhdXRoX3RpbWUiOiAxNjExNzc2ODA3LAogICJpc3MiOiAiaHR0cHM6Ly9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS91cy1lYXN0LTFfenp6enp6enp6IiwKICAiZXhwIjogMTYxMTc4MDQwNywKICAiaWF0IjogMTYxMTc3NjgwNywKICAianRpIjogImFhYWFhIiwKICAiY2xpZW50X2lkIjogInh4eHh4eHh4IiwKICAidXNlcm5hbWUiOiAidXNlcm5hbWUiCn0.a',\n\t\t\t\t\t}),\n\t\t\t\t\tIdToken: new CognitoIdToken({ IdToken: 'Idtoken' }),\n\t\t\t\t});\n\t\t\t\tcallback(null, session);\n\t\t\t}\n\t\t);\n\n\t\tjest\n\t\t\t.spyOn(CognitoUser.prototype, 'getUserData')\n\t\t\t.mockImplementation((callback, params) => {\n\t\t\t\texpect(params.clientMetadata).toEqual(clientMetadata);\n\n\t\t\t\tcallback(null, {\n\t\t\t\t\tMFAOptions: [],\n\t\t\t\t\tPreferredMfaSetting: 'NOMFA',\n\t\t\t\t\tUserAttributes: [],\n\t\t\t\t\tUserMFASettingList: [],\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t});\n\t\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementation(() => {\n\t\t\t\treturn new CognitoUser({\n\t\t\t\t\tPool: new CognitoUserPool({\n\t\t\t\t\t\tClientId: authOptions.userPoolWebClientId,\n\t\t\t\t\t\tUserPoolId: authOptions.userPoolId,\n\t\t\t\t\t}),\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t});\n\t\t\t});\n\n\t\tconst user = await auth.currentUserPoolUser();\n\n\t\tawait auth.getPreferredMFA(user);\n\t});",
            "file": "auth-refresh-token-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "setPreferredMFA user.getUserData using ClientMetadata from config",
            "suites": [
                "Refresh token"
            ],
            "updatePoint": {
                "line": 260,
                "column": 70
            },
            "line": 260,
            "code": "\tit('setPreferredMFA user.getUserData using ClientMetadata from config', async () => {\n\t\t// configure with client metadata\n\t\tconst auth = new Auth(authOptions);\n\n\t\texpect.assertions(3);\n\n\t\tjest.spyOn(CognitoUser.prototype, 'getSession').mockImplementation(\n\t\t\t// @ts-ignore\n\t\t\t(\n\t\t\t\tcallback: (error: Error, session: CognitoUserSession) => void,\n\t\t\t\toptions: any\n\t\t\t) => {\n\t\t\t\tconst session = new CognitoUserSession({\n\t\t\t\t\tAccessToken: new CognitoAccessToken({\n\t\t\t\t\t\tAccessToken:\n\t\t\t\t\t\t\t'a.ewogICJzdWIiOiAic3ViIiwKICAiZXZlbnRfaWQiOiAieHh4eHgiLAogICJ0b2tlbl91c2UiOiAiYWNjZXNzIiwKICAic2NvcGUiOiAiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLAogICJhdXRoX3RpbWUiOiAxNjExNzc2ODA3LAogICJpc3MiOiAiaHR0cHM6Ly9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS91cy1lYXN0LTFfenp6enp6enp6IiwKICAiZXhwIjogMTYxMTc4MDQwNywKICAiaWF0IjogMTYxMTc3NjgwNywKICAianRpIjogImFhYWFhIiwKICAiY2xpZW50X2lkIjogInh4eHh4eHh4IiwKICAidXNlcm5hbWUiOiAidXNlcm5hbWUiCn0.a',\n\t\t\t\t\t}),\n\t\t\t\t\tIdToken: new CognitoIdToken({ IdToken: 'Idtoken' }),\n\t\t\t\t});\n\t\t\t\tcallback(null, session);\n\t\t\t}\n\t\t);\n\n\t\tjest\n\t\t\t.spyOn(CognitoUser.prototype, 'getUserData')\n\t\t\t.mockImplementation((callback, params) => {\n\t\t\t\texpect(params.clientMetadata).toEqual(clientMetadata);\n\n\t\t\t\tcallback(null, {\n\t\t\t\t\tMFAOptions: [],\n\t\t\t\t\tPreferredMfaSetting: 'NOMFA',\n\t\t\t\t\tUserAttributes: [],\n\t\t\t\t\tUserMFASettingList: [],\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t});\n\t\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementation(() => {\n\t\t\t\treturn new CognitoUser({\n\t\t\t\t\tPool: new CognitoUserPool({\n\t\t\t\t\t\tClientId: authOptions.userPoolWebClientId,\n\t\t\t\t\t\tUserPoolId: authOptions.userPoolId,\n\t\t\t\t\t}),\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t});\n\t\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUser.prototype, 'setUserMfaPreference')\n\t\t\t.mockImplementation(\n\t\t\t\t(smsMfaSettings, softwareTokenMfaSettings, callback) => {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t);\n\n\t\tconst user = await auth.currentUserPoolUser();\n\n\t\tawait auth.setPreferredMFA(user, 'SMS');\n\t});",
            "file": "auth-refresh-token-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case with object attr",
            "suites": [
                "auth unit test",
                "signUp"
            ],
            "updatePoint": {
                "line": 380,
                "column": 35
            },
            "line": 380,
            "code": "\t\ttest('happy case with object attr', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUserPool.prototype, 'signUp');\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst attrs = {\n\t\t\t\tusername: 'username',\n\t\t\t\tpassword: 'password',\n\t\t\t\tattributes: {\n\t\t\t\t\temail: 'email',\n\t\t\t\t\tphone_number: 'phone_number',\n\t\t\t\t\totherAttrs: 'otherAttrs',\n\t\t\t\t},\n\t\t\t};\n\t\t\texpect(await auth.signUp(attrs)).toBe('signUpResult');\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata default",
            "suites": [
                "auth unit test",
                "signUp"
            ],
            "updatePoint": {
                "line": 398,
                "column": 41
            },
            "line": 398,
            "code": "\t\ttest('happy case clientMetadata default', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUserPool.prototype, 'signUp');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\n\t\t\tconst attrs = {\n\t\t\t\tusername: 'username',\n\t\t\t\tpassword: 'password',\n\t\t\t\tattributes: {\n\t\t\t\t\temail: 'email',\n\t\t\t\t\tphone_number: 'phone_number',\n\t\t\t\t\totherAttrs: 'otherAttrs',\n\t\t\t\t},\n\t\t\t};\n\t\t\tawait auth.signUp(attrs);\n\n\t\t\texpect(await CognitoUserPool.prototype.signUp).toBeCalledWith(\n\t\t\t\tattrs.username,\n\t\t\t\tattrs.password,\n\t\t\t\t[\n\t\t\t\t\t{ Name: 'email', Value: 'email' },\n\t\t\t\t\t{ Name: 'phone_number', Value: 'phone_number' },\n\t\t\t\t\t{ Name: 'otherAttrs', Value: 'otherAttrs' },\n\t\t\t\t],\n\t\t\t\tnull,\n\t\t\t\tjasmine.any(Function),\n\t\t\t\t{ foo: 'bar' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata parameter",
            "suites": [
                "auth unit test",
                "signUp"
            ],
            "updatePoint": {
                "line": 428,
                "column": 43
            },
            "line": 428,
            "code": "\t\ttest('happy case clientMetadata parameter', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUserPool.prototype, 'signUp');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\n\t\t\tconst attrs = {\n\t\t\t\tusername: 'username',\n\t\t\t\tpassword: 'password',\n\t\t\t\tattributes: {\n\t\t\t\t\temail: 'email',\n\t\t\t\t\tphone_number: 'phone_number',\n\t\t\t\t\totherAttrs: 'otherAttrs',\n\t\t\t\t},\n\t\t\t\tclientMetadata: {\n\t\t\t\t\tcustom: 'value',\n\t\t\t\t},\n\t\t\t};\n\t\t\tawait auth.signUp(attrs);\n\n\t\t\texpect(await CognitoUserPool.prototype.signUp).toBeCalledWith(\n\t\t\t\tattrs.username,\n\t\t\t\tattrs.password,\n\t\t\t\t[\n\t\t\t\t\t{ Name: 'email', Value: 'email' },\n\t\t\t\t\t{ Name: 'phone_number', Value: 'phone_number' },\n\t\t\t\t\t{ Name: 'otherAttrs', Value: 'otherAttrs' },\n\t\t\t\t],\n\t\t\t\tnull,\n\t\t\t\tjasmine.any(Function),\n\t\t\t\t{ custom: 'value' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "object attr with null username",
            "suites": [
                "auth unit test",
                "signUp"
            ],
            "updatePoint": {
                "line": 461,
                "column": 38
            },
            "line": 461,
            "code": "\t\ttest('object attr with null username', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst attrs = {\n\t\t\t\tusername: null,\n\t\t\t\tpassword: 'password',\n\t\t\t\tattributes: {\n\t\t\t\t\temail: 'email',\n\t\t\t\t\tphone_number: 'phone_number',\n\t\t\t\t\totherAttrs: 'otherAttrs',\n\t\t\t\t},\n\t\t\t};\n\t\t\texpect.assertions(1);\n\t\t\texpect(auth.signUp(attrs).then()).rejects.toThrow(AuthError);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "callback error",
            "suites": [
                "auth unit test",
                "signUp"
            ],
            "updatePoint": {
                "line": 477,
                "column": 22
            },
            "line": 477,
            "code": "\t\ttest('callback error', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'signUp')\n\t\t\t\t.mockImplementationOnce(\n\t\t\t\t\t(\n\t\t\t\t\t\tusername,\n\t\t\t\t\t\tpassword,\n\t\t\t\t\t\tsignUpAttributeList,\n\t\t\t\t\t\tvalidationData,\n\t\t\t\t\t\tcallback\n\t\t\t\t\t) => {\n\t\t\t\t\t\tcallback(new Error('err'), null);\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tconst attrs = {\n\t\t\t\t\tusername: 'username',\n\t\t\t\t\tpassword: 'password',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\temail: 'email',\n\t\t\t\t\t\tphone_number: 'phone_number',\n\t\t\t\t\t\totherAttrs: 'otherAttrs',\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tawait auth.signUp(attrs);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toEqual(new Error('err'));\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no config",
            "suites": [
                "auth unit test",
                "signUp"
            ],
            "updatePoint": {
                "line": 513,
                "column": 17
            },
            "line": 513,
            "code": "\t\ttest('no config', async () => {\n\t\t\tconst auth = new Auth(undefined);\n\t\t\tconst errorMessage = new NoUserPoolError(AuthErrorTypes.NoConfig);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(\n\t\t\t\tauth.signUp('username', 'password', 'email', 'phone').then()\n\t\t\t).rejects.toThrow(NoUserPoolError);\n\t\t\texpect(\n\t\t\t\tauth.signUp('username', 'password', 'email', 'phone').then()\n\t\t\t).rejects.toEqual(errorMessage);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no user pool in config",
            "suites": [
                "auth unit test",
                "signUp"
            ],
            "updatePoint": {
                "line": 526,
                "column": 30
            },
            "line": 526,
            "code": "\t\ttest('no user pool in config', async () => {\n\t\t\tconst auth = new Auth(authOptionsWithNoUserPoolId);\n\t\t\tconst errorMessage = new NoUserPoolError(\n\t\t\t\tAuthErrorTypes.MissingAuthConfig\n\t\t\t);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(\n\t\t\t\tauth.signUp('username', 'password', 'email', 'phone').then()\n\t\t\t).rejects.toThrow(NoUserPoolError);\n\t\t\texpect(\n\t\t\t\tauth.signUp('username', 'password', 'email', 'phone').then()\n\t\t\t).rejects.toEqual(errorMessage);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no username",
            "suites": [
                "auth unit test",
                "signUp"
            ],
            "updatePoint": {
                "line": 541,
                "column": 19
            },
            "line": 541,
            "code": "\t\ttest('no username', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\texpect.assertions(1);\n\t\t\texpect(\n\t\t\t\tauth.signUp(null, 'password', 'email', 'phone').then()\n\t\t\t).rejects.toThrow(AuthError);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no password",
            "suites": [
                "auth unit test",
                "signUp"
            ],
            "updatePoint": {
                "line": 549,
                "column": 19
            },
            "line": 549,
            "code": "\t\ttest('no password', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst errorMessage = new AuthError(AuthErrorTypes.EmptyPassword);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(\n\t\t\t\tauth.signUp('username', null, 'email', 'phone').then()\n\t\t\t).rejects.toThrow(AuthError);\n\t\t\texpect(\n\t\t\t\tauth.signUp('username', null, 'email', 'phone').then()\n\t\t\t).rejects.toEqual(errorMessage);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "only username",
            "suites": [
                "auth unit test",
                "signUp"
            ],
            "updatePoint": {
                "line": 562,
                "column": 21
            },
            "line": 562,
            "code": "\t\ttest('only username', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst errorMessage = new AuthError(AuthErrorTypes.EmptyPassword);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(auth.signUp('username').then()).rejects.toThrow(AuthError);\n\t\t\texpect(auth.signUp('username').then()).rejects.toEqual(errorMessage);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case auto confirm",
            "suites": [
                "auth unit test",
                "autoSignInAfterSignUp"
            ],
            "updatePoint": {
                "line": 573,
                "column": 31
            },
            "line": 573,
            "code": "\t\ttest('happy case auto confirm', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'signUp')\n\t\t\t\t.mockImplementationOnce(\n\t\t\t\t\t(\n\t\t\t\t\t\tusername,\n\t\t\t\t\t\tpassword,\n\t\t\t\t\t\tsignUpAttributeList,\n\t\t\t\t\t\tvalidationData,\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t\tclientMetadata\n\t\t\t\t\t) => {\n\t\t\t\t\t\tcallback(null, signUpResult);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\tconst signInSpyon = jest.spyOn(CognitoUser.prototype, 'authenticateUser');\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst attrs = {\n\t\t\t\tusername: 'username',\n\t\t\t\tpassword: 'password',\n\t\t\t\tattributes: {\n\t\t\t\t\temail: 'email',\n\t\t\t\t\tphone_number: 'phone_number',\n\t\t\t\t\totherAttrs: 'otherAttrs',\n\t\t\t\t},\n\t\t\t\tautoSignIn: { enabled: true },\n\t\t\t};\n\t\t\texpect(await auth.signUp(attrs)).toBe(signUpResult);\n\t\t\texpect(signInSpyon).toHaveBeenCalledTimes(1);\n\t\t\tspyon.mockClear();\n\t\t\tsignInSpyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case confirmation code",
            "suites": [
                "auth unit test",
                "autoSignInAfterSignUp"
            ],
            "updatePoint": {
                "line": 606,
                "column": 36
            },
            "line": 606,
            "code": "\t\ttest('happy case confirmation code', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUserPool.prototype, 'signUp');\n\t\t\tconst confirmSpyon = jest.spyOn(\n\t\t\t\tCognitoUser.prototype,\n\t\t\t\t'confirmRegistration'\n\t\t\t);\n\t\t\tconst signInSpyon = jest.spyOn(CognitoUser.prototype, 'authenticateUser');\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst attrs = {\n\t\t\t\tusername: 'username',\n\t\t\t\tpassword: 'password',\n\t\t\t\tattributes: {\n\t\t\t\t\temail: 'email',\n\t\t\t\t\tphone_number: 'phone_number',\n\t\t\t\t\totherAttrs: 'otherAttrs',\n\t\t\t\t},\n\t\t\t\tautoSignIn: { enabled: true },\n\t\t\t};\n\t\t\texpect(await auth.signUp(attrs)).toBe('signUpResult');\n\t\t\texpect(await auth.confirmSignUp('username', 'code')).toBe('Success');\n\t\t\texpect(signInSpyon).toHaveBeenCalledTimes(1);\n\t\t\tspyon.mockClear();\n\t\t\tconfirmSpyon.mockClear();\n\t\t\tsignInSpyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case confirmation link",
            "suites": [
                "auth unit test",
                "autoSignInAfterSignUp"
            ],
            "updatePoint": {
                "line": 632,
                "column": 36
            },
            "line": 632,
            "code": "\t\ttest('happy case confirmation link', async () => {\n\t\t\tjest.useFakeTimers();\n\t\t\tconst spyon = jest.spyOn(CognitoUserPool.prototype, 'signUp');\n\t\t\tconst signInSpyon = jest.spyOn(CognitoUser.prototype, 'authenticateUser');\n\t\t\tconst auth = new Auth(authOptionConfirmationLink);\n\t\t\tconst attrs = {\n\t\t\t\tusername: 'username',\n\t\t\t\tpassword: 'password',\n\t\t\t\tattributes: {\n\t\t\t\t\temail: 'email',\n\t\t\t\t\tphone_number: 'phone_number',\n\t\t\t\t\totherAttrs: 'otherAttrs',\n\t\t\t\t},\n\t\t\t\tautoSignIn: { enabled: true },\n\t\t\t};\n\t\t\texpect(await auth.signUp(attrs)).toBe('signUpResult');\n\t\t\tjest.advanceTimersByTime(11000);\n\t\t\texpect(signInSpyon).toHaveBeenCalledTimes(2);\n\t\t\tspyon.mockClear();\n\t\t\tsignInSpyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "fail confirmation code",
            "suites": [
                "auth unit test",
                "autoSignInAfterSignUp"
            ],
            "updatePoint": {
                "line": 654,
                "column": 30
            },
            "line": 654,
            "code": "\t\ttest('fail confirmation code', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUserPool.prototype, 'signUp');\n\t\t\tconst confirmSpyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'confirmRegistration')\n\t\t\t\t.mockImplementationOnce(\n\t\t\t\t\t(confirmationCode, forceAliasCreation, callback) => {\n\t\t\t\t\t\tcallback('err', null);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\tconst signInSpyon = jest.spyOn(CognitoUser.prototype, 'authenticateUser');\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst attrs = {\n\t\t\t\tusername: 'username',\n\t\t\t\tpassword: 'password',\n\t\t\t\tattributes: {\n\t\t\t\t\temail: 'email',\n\t\t\t\t\tphone_number: 'phone_number',\n\t\t\t\t\totherAttrs: 'otherAttrs',\n\t\t\t\t},\n\t\t\t\tautoSignIn: { enabled: true },\n\t\t\t};\n\t\t\texpect(await auth.signUp(attrs)).toBe('signUpResult');\n\t\t\ttry {\n\t\t\t\tawait auth.confirmSignUp('username', 'code');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('err');\n\t\t\t}\n\t\t\texpect(signInSpyon).toHaveBeenCalledTimes(0);\n\t\t\tspyon.mockClear();\n\t\t\tconfirmSpyon.mockClear();\n\t\t\tsignInSpyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "confirmSignUp"
            ],
            "updatePoint": {
                "line": 689,
                "column": 18
            },
            "line": 689,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'confirmRegistration');\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.confirmSignUp('username', 'code')).toBe('Success');\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "with options",
            "suites": [
                "auth unit test",
                "confirmSignUp"
            ],
            "updatePoint": {
                "line": 699,
                "column": 20
            },
            "line": 699,
            "code": "\t\ttest('with options', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'confirmRegistration');\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(\n\t\t\t\tawait auth.confirmSignUp('username', 'code', {\n\t\t\t\t\tforceAliasCreation: false,\n\t\t\t\t})\n\t\t\t).toBe('Success');\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata default",
            "suites": [
                "auth unit test",
                "confirmSignUp"
            ],
            "updatePoint": {
                "line": 713,
                "column": 41
            },
            "line": 713,
            "code": "\t\ttest('happy case clientMetadata default', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'confirmRegistration');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst code = 'code';\n\n\t\t\tawait auth.confirmSignUp('username', code);\n\n\t\t\texpect(await CognitoUser.prototype.confirmRegistration).toBeCalledWith(\n\t\t\t\tcode,\n\t\t\t\tjasmine.any(Boolean),\n\t\t\t\tjasmine.any(Function),\n\t\t\t\t{\n\t\t\t\t\tfoo: 'bar',\n\t\t\t\t}\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata parameter",
            "suites": [
                "auth unit test",
                "confirmSignUp"
            ],
            "updatePoint": {
                "line": 731,
                "column": 43
            },
            "line": 731,
            "code": "\t\ttest('happy case clientMetadata parameter', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'confirmRegistration');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst code = 'code';\n\n\t\t\tawait auth.confirmSignUp('username', code, {\n\t\t\t\tclientMetadata: { custom: 'value' },\n\t\t\t});\n\n\t\t\texpect(await CognitoUser.prototype.confirmRegistration).toBeCalledWith(\n\t\t\t\tcode,\n\t\t\t\tjasmine.any(Boolean),\n\t\t\t\tjasmine.any(Function),\n\t\t\t\t{\n\t\t\t\t\tcustom: 'value',\n\t\t\t\t}\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "callback err",
            "suites": [
                "auth unit test",
                "confirmSignUp"
            ],
            "updatePoint": {
                "line": 751,
                "column": 20
            },
            "line": 751,
            "code": "\t\ttest('callback err', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'confirmRegistration')\n\t\t\t\t.mockImplementationOnce(\n\t\t\t\t\t(confirmationCode, forceAliasCreation, callback) => {\n\t\t\t\t\t\tcallback('err', null);\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.confirmSignUp('username', 'code');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('err');\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no user pool in config",
            "suites": [
                "auth unit test",
                "confirmSignUp"
            ],
            "updatePoint": {
                "line": 772,
                "column": 30
            },
            "line": 772,
            "code": "\t\ttest('no user pool in config', async () => {\n\t\t\tconst auth = new Auth(authOptionsWithNoUserPoolId);\n\t\t\tconst errorMessage = new NoUserPoolError(\n\t\t\t\tAuthErrorTypes.MissingAuthConfig\n\t\t\t);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(auth.confirmSignUp('username', 'code').then()).rejects.toThrow(\n\t\t\t\tNoUserPoolError\n\t\t\t);\n\t\t\texpect(auth.confirmSignUp('username', 'code').then()).rejects.toEqual(\n\t\t\t\terrorMessage\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no user name",
            "suites": [
                "auth unit test",
                "confirmSignUp"
            ],
            "updatePoint": {
                "line": 787,
                "column": 20
            },
            "line": 787,
            "code": "\t\ttest('no user name', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst errorMessage = new AuthError(AuthErrorTypes.EmptyUsername);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(auth.confirmSignUp(null, 'code').then()).rejects.toThrow(\n\t\t\t\tAuthError\n\t\t\t);\n\t\t\texpect(auth.confirmSignUp(null, 'code').then()).rejects.toEqual(\n\t\t\t\terrorMessage\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no code",
            "suites": [
                "auth unit test",
                "confirmSignUp"
            ],
            "updatePoint": {
                "line": 800,
                "column": 15
            },
            "line": 800,
            "code": "\t\ttest('no code', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst errorMessage = new AuthError(AuthErrorTypes.EmptyCode);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(auth.confirmSignUp('username', null).then()).rejects.toThrow(\n\t\t\t\tAuthError\n\t\t\t);\n\t\t\texpect(auth.confirmSignUp('username', null).then()).rejects.toEqual(\n\t\t\t\terrorMessage\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "resendSignUp"
            ],
            "updatePoint": {
                "line": 815,
                "column": 18
            },
            "line": 815,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'resendConfirmationCode');\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.resendSignUp('username')).toMatchObject({\n\t\t\t\tCodeDeliveryDetails: {\n\t\t\t\t\tAttributeName: 'email',\n\t\t\t\t\tDeliveryMedium: 'EMAIL',\n\t\t\t\t\tDestination: 'amplify@*****.com',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata default",
            "suites": [
                "auth unit test",
                "resendSignUp"
            ],
            "updatePoint": {
                "line": 831,
                "column": 41
            },
            "line": 831,
            "code": "\t\ttest('happy case clientMetadata default', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'resendConfirmationCode');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\n\t\t\tawait auth.resendSignUp('username');\n\n\t\t\texpect(await CognitoUser.prototype.resendConfirmationCode).toBeCalledWith(\n\t\t\t\tjasmine.any(Function),\n\t\t\t\t{ foo: 'bar' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata parameter",
            "suites": [
                "auth unit test",
                "resendSignUp"
            ],
            "updatePoint": {
                "line": 844,
                "column": 43
            },
            "line": 844,
            "code": "\t\ttest('happy case clientMetadata parameter', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'resendConfirmationCode');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\n\t\t\tawait auth.resendSignUp('username', { custom: 'value' });\n\n\t\t\texpect(await CognitoUser.prototype.resendConfirmationCode).toBeCalledWith(\n\t\t\t\tjasmine.any(Function),\n\t\t\t\t{ custom: 'value' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "callback err",
            "suites": [
                "auth unit test",
                "resendSignUp"
            ],
            "updatePoint": {
                "line": 857,
                "column": 20
            },
            "line": 857,
            "code": "\t\ttest('callback err', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'resendConfirmationCode')\n\t\t\t\t.mockImplementationOnce(callback => {\n\t\t\t\t\tcallback(new Error('err'), null);\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.resendSignUp('username');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toEqual(new Error('err'));\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no user pool in config",
            "suites": [
                "auth unit test",
                "resendSignUp"
            ],
            "updatePoint": {
                "line": 876,
                "column": 30
            },
            "line": 876,
            "code": "\t\ttest('no user pool in config', async () => {\n\t\t\tconst auth = new Auth(authOptionsWithNoUserPoolId);\n\t\t\tconst errorMessage = new NoUserPoolError(\n\t\t\t\tAuthErrorTypes.MissingAuthConfig\n\t\t\t);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(auth.resendSignUp('username').then()).rejects.toThrow(\n\t\t\t\tNoUserPoolError\n\t\t\t);\n\t\t\texpect(auth.resendSignUp('username').then()).rejects.toEqual(\n\t\t\t\terrorMessage\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no username",
            "suites": [
                "auth unit test",
                "resendSignUp"
            ],
            "updatePoint": {
                "line": 891,
                "column": 19
            },
            "line": 891,
            "code": "\t\ttest('no username', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst errorMessage = new AuthError(AuthErrorTypes.EmptyUsername);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(auth.resendSignUp(null).then()).rejects.toThrow(AuthError);\n\t\t\texpect(auth.resendSignUp(null).then()).rejects.toEqual(errorMessage);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "token events",
            "suites": [
                "auth unit test",
                "events"
            ],
            "updatePoint": {
                "line": 902,
                "column": 20
            },
            "line": 902,
            "code": "\t\ttest('token events', async () => {\n\t\t\texpect.assertions(2);\n\n\t\t\t// calling the `wrappedCallback` (a node callback) manually lets us trigger hub events\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst callback: NodeCallback.Any = (error, result) => {};\n\t\t\tconst wrappedCallback = auth.wrapRefreshSessionCallback(callback);\n\n\t\t\t// saving a reference to this fn's return before triggering `wrappedCallback` lets us capture the payload\n\t\t\tconst captureEvent = () => {\n\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\tHub.listen('auth', capsule => {\n\t\t\t\t\t\tswitch (capsule.payload.event) {\n\t\t\t\t\t\t\tcase 'tokenRefresh': {\n\t\t\t\t\t\t\t\treturn resolve(true);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcase 'tokenRefresh_failure': {\n\t\t\t\t\t\t\t\treturn resolve(capsule.payload.data);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\n\t\t\t// for successful token refresh\n\t\t\tconst successEventPending = captureEvent();\n\t\t\twrappedCallback(undefined, true);\n\n\t\t\t// for failed token refresh\n\t\t\tconst syntheticError = new Error();\n\t\t\tconst failureEventPending = captureEvent();\n\t\t\twrappedCallback(syntheticError, undefined);\n\n\t\t\t// gather the payloads\n\t\t\tconst [successEvent, failureEvent] = await Promise.all([\n\t\t\t\tsuccessEventPending,\n\t\t\t\tfailureEventPending,\n\t\t\t]);\n\n\t\t\t// make assertions\n\t\t\texpect(successEvent).toBeTruthy();\n\t\t\texpect(failureEvent).toBe(syntheticError);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case with password",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 953,
                "column": 32
            },
            "line": 953,
            "code": "\t\ttest('happy case with password', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'authenticateUser')\n\t\t\t\t.mockImplementationOnce((authenticationDetails, callback) => {\n\t\t\t\t\tcallback.onSuccess(session);\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(auth, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(user);\n\t\t\t\t});\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(await auth.signIn('username', 'password')).toEqual(user);\n\t\t\texpect(spyon2).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata default",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 980,
                "column": 41
            },
            "line": 980,
            "code": "\t\ttest('happy case clientMetadata default', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'authenticateUser');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\n\t\t\tawait auth.signIn('username', 'password');\n\n\t\t\texpect(await CognitoUser.prototype.authenticateUser).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tusername: 'username',\n\t\t\t\t\tpassword: 'password',\n\t\t\t\t\tvalidationData: {},\n\t\t\t\t\tclientMetadata: { foo: 'bar' },\n\t\t\t\t\tauthParameters: {},\n\t\t\t\t},\n\t\t\t\tauthCallbacks\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata parameter",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 999,
                "column": 43
            },
            "line": 999,
            "code": "\t\ttest('happy case clientMetadata parameter', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'authenticateUser');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\n\t\t\tawait auth.signIn('username', 'password', { custom: 'value' });\n\n\t\t\texpect(await CognitoUser.prototype.authenticateUser).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tusername: 'username',\n\t\t\t\t\tpassword: 'password',\n\t\t\t\t\tvalidationData: {},\n\t\t\t\t\tclientMetadata: { custom: 'value' },\n\t\t\t\t\tauthParameters: {},\n\t\t\t\t},\n\t\t\t\tauthCallbacks\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case validationData parameter",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 1018,
                "column": 43
            },
            "line": 1018,
            "code": "\t\ttest('happy case validationData parameter', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUserPool.prototype, 'signUp');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\n\t\t\tconst attrs: SignUpParams = {\n\t\t\t\tusername: 'username',\n\t\t\t\tpassword: 'password',\n\t\t\t\tattributes: {\n\t\t\t\t\temail: 'email',\n\t\t\t\t\tphone_number: 'phone_number',\n\t\t\t\t\totherAttrs: 'otherAttrs',\n\t\t\t\t},\n\t\t\t\tclientMetadata: {\n\t\t\t\t\tcustom: 'value',\n\t\t\t\t},\n\t\t\t\tvalidationData: {\n\t\t\t\t\tfoo: 'bar',\n\t\t\t\t\ttest: '123',\n\t\t\t\t},\n\t\t\t};\n\t\t\tawait auth.signUp(attrs);\n\n\t\t\texpect(await spyon).toBeCalledWith(\n\t\t\t\tattrs.username,\n\t\t\t\tattrs.password,\n\t\t\t\t[\n\t\t\t\t\t{ Name: 'email', Value: 'email' },\n\t\t\t\t\t{ Name: 'phone_number', Value: 'phone_number' },\n\t\t\t\t\t{ Name: 'otherAttrs', Value: 'otherAttrs' },\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ Name: 'foo', Value: 'bar' },\n\t\t\t\t\t{ Name: 'test', Value: '123' },\n\t\t\t\t],\n\t\t\t\tjasmine.any(Function),\n\t\t\t\t{ custom: 'value' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "throw error if failed to call currentUserPoolUser after signing in",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 1058,
                "column": 74
            },
            "line": 1058,
            "code": "\t\ttest('throw error if failed to call currentUserPoolUser after signing in', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'authenticateUser')\n\t\t\t\t.mockImplementationOnce((authenticationDetails, callback) => {\n\t\t\t\t\tcallback.onSuccess(session);\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(auth, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.reject('User is disabled.');\n\t\t\t\t});\n\t\t\texpect.assertions(2);\n\t\t\ttry {\n\t\t\t\tawait auth.signIn('username', 'password');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('User is disabled.');\n\t\t\t\texpect(spyon2).toBeCalled();\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case using cookie storage",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 1088,
                "column": 39
            },
            "line": 1088,
            "code": "\t\ttest('happy case using cookie storage', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'authenticateUser')\n\t\t\t\t.mockImplementationOnce((_authenticationDetails, callback) => {\n\t\t\t\t\tcallback.onSuccess(session);\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth({\n\t\t\t\t...authOptions,\n\t\t\t\tcookieStorage: { domain: '.example.com' },\n\t\t\t});\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t\tStorage: new CookieStorage({ domain: '.yourdomain.com' }),\n\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(auth, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(user);\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.signIn('username', 'password')).toEqual(user);\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "onFailure",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 1118,
                "column": 17
            },
            "line": 1118,
            "code": "\t\ttest('onFailure', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'authenticateUser')\n\t\t\t\t.mockImplementationOnce((authenticationDetails, callback) => {\n\t\t\t\t\tcallback.onFailure('err');\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.signIn('username', 'password');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('err');\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "mfaRequired",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 1137,
                "column": 19
            },
            "line": 1137,
            "code": "\t\ttest('mfaRequired', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'authenticateUser')\n\t\t\t\t.mockImplementationOnce((authenticationDetails, callback) => {\n\t\t\t\t\tcallback.mfaRequired('SELECT_MFA_TYPE', 'challengeParam');\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst userAfterSignedIn = Object.assign({}, user, {\n\t\t\t\tchallengeName: 'SELECT_MFA_TYPE',\n\t\t\t\tchallengeParam: 'challengeParam',\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.signIn('username', 'password')).toEqual(\n\t\t\t\tuserAfterSignedIn\n\t\t\t);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "mfaSetup",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 1161,
                "column": 16
            },
            "line": 1161,
            "code": "\t\ttest('mfaSetup', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'authenticateUser')\n\t\t\t\t.mockImplementationOnce((authenticationDetails, callback) => {\n\t\t\t\t\tcallback.mfaSetup('MFA_SETUP', 'challengeParam');\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst userAfterSignedIn = Object.assign({}, user, {\n\t\t\t\tchallengeName: 'MFA_SETUP',\n\t\t\t\tchallengeParam: 'challengeParam',\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.signIn('username', 'password')).toEqual(\n\t\t\t\tuserAfterSignedIn\n\t\t\t);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "totpRequired",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 1185,
                "column": 20
            },
            "line": 1185,
            "code": "\t\ttest('totpRequired', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'authenticateUser')\n\t\t\t\t.mockImplementationOnce((authenticationDetails, callback) => {\n\t\t\t\t\tcallback.totpRequired('SOFTWARE_TOKEN_MFA', 'challengeParam');\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst userAfterSignedIn = Object.assign({}, user, {\n\t\t\t\tchallengeName: 'SOFTWARE_TOKEN_MFA',\n\t\t\t\tchallengeParam: 'challengeParam',\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.signIn('username', 'password')).toEqual(\n\t\t\t\tuserAfterSignedIn\n\t\t\t);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "selectMFAType",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 1209,
                "column": 21
            },
            "line": 1209,
            "code": "\t\ttest('selectMFAType', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'authenticateUser')\n\t\t\t\t.mockImplementationOnce((authenticationDetails, callback) => {\n\t\t\t\t\tcallback.selectMFAType('SELECT_MFA_TYPE', 'challengeParam');\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst userAfterSignedIn = Object.assign({}, user, {\n\t\t\t\tchallengeName: 'SELECT_MFA_TYPE',\n\t\t\t\tchallengeParam: 'challengeParam',\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.signIn('username', 'password')).toEqual(\n\t\t\t\tuserAfterSignedIn\n\t\t\t);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "newPasswordRequired",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 1233,
                "column": 27
            },
            "line": 1233,
            "code": "\t\ttest('newPasswordRequired', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'authenticateUser')\n\t\t\t\t.mockImplementationOnce((authenticationDetails, callback) => {\n\t\t\t\t\tcallback.newPasswordRequired('userAttributes', 'requiredAttributes');\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst userAfterSignedIn = Object.assign({}, user, {\n\t\t\t\tchallengeName: 'NEW_PASSWORD_REQUIRED',\n\t\t\t\tchallengeParam: {\n\t\t\t\t\trequiredAttributes: 'requiredAttributes',\n\t\t\t\t\tuserAttributes: 'userAttributes',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.signIn('username', 'password')).toEqual(\n\t\t\t\tuserAfterSignedIn\n\t\t\t);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "customChallenge",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 1260,
                "column": 23
            },
            "line": 1260,
            "code": "\t\ttest('customChallenge', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'authenticateUser')\n\t\t\t\t.mockImplementationOnce((authenticationDetails, callback) => {\n\t\t\t\t\tcallback.customChallenge('challengeParam');\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype as any, 'setAuthenticationFlowType')\n\t\t\t\t.mockImplementationOnce(type => {});\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst userAfterSignedIn = Object.assign({}, user, {\n\t\t\t\tchallengeName: 'CUSTOM_CHALLENGE',\n\t\t\t\tchallengeParam: 'challengeParam',\n\t\t\t});\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(await auth.signIn('username')).toEqual(userAfterSignedIn);\n\t\t\texpect(spyon2).toBeCalledWith('CUSTOM_AUTH');\n\n\t\t\tspyon2.mockClear();\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no userPool",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 1287,
                "column": 19
            },
            "line": 1287,
            "code": "\t\ttest('no userPool', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'authenticateUser');\n\n\t\t\t// @ts-ignore\n\t\t\tconst auth = new Auth(authOptionsWithNoUserPoolId);\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.signIn('username', 'password');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).not.toBeNull();\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no username",
            "suites": [
                "auth unit test",
                "signIn"
            ],
            "updatePoint": {
                "line": 1303,
                "column": 19
            },
            "line": 1303,
            "code": "\t\ttest('no username', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'authenticateUser');\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.signIn(null, 'password');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).not.toBeNull();\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "confirmSignIn"
            ],
            "updatePoint": {
                "line": 1319,
                "column": 18
            },
            "line": 1319,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'sendMFACode')\n\t\t\t\t.mockImplementationOnce((code, callback) => {\n\t\t\t\t\tcallback.onSuccess(session);\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.confirmSignIn(user, 'code', null)).toEqual(user);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case attributes are appended",
            "suites": [
                "auth unit test",
                "confirmSignIn"
            ],
            "updatePoint": {
                "line": 1337,
                "column": 42
            },
            "line": 1337,
            "code": "\t\ttest('happy case attributes are appended', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'sendMFACode')\n\t\t\t\t.mockImplementationOnce((code, callback) => {\n\t\t\t\t\tcallback.onSuccess(session);\n\t\t\t\t});\n\t\t\tconst hubSpy = jest.spyOn(Hub, 'dispatch');\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst expectedUser = Object.assign(user, { email: 'test@test.com' });\n\t\t\tconst result = await auth.confirmSignIn(user, 'code', null);\n\t\t\texpect(result.attributes.email).toEqual('test@test.com');\n\t\t\texpect(hubSpy).toHaveBeenCalledWith(\n\t\t\t\t'auth',\n\t\t\t\t{\n\t\t\t\t\tdata: expectedUser,\n\t\t\t\t\tevent: 'signIn',\n\t\t\t\t\tmessage: 'A user username has been signed in',\n\t\t\t\t},\n\t\t\t\t'Auth',\n\t\t\t\tSymbol.for('amplify_default')\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata default",
            "suites": [
                "auth unit test",
                "confirmSignIn"
            ],
            "updatePoint": {
                "line": 1365,
                "column": 41
            },
            "line": 1365,
            "code": "\t\ttest('happy case clientMetadata default', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'sendMFACode');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst code = 'code';\n\n\t\t\tawait auth.confirmSignIn(user, code);\n\n\t\t\texpect(await CognitoUser.prototype.sendMFACode).toBeCalledWith(\n\t\t\t\tcode,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: jasmine.any(Function),\n\t\t\t\t\tonFailure: jasmine.any(Function),\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t{ foo: 'bar' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata parameter",
            "suites": [
                "auth unit test",
                "confirmSignIn"
            ],
            "updatePoint": {
                "line": 1388,
                "column": 43
            },
            "line": 1388,
            "code": "\t\ttest('happy case clientMetadata parameter', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'sendMFACode');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst code = 'code';\n\n\t\t\tawait auth.confirmSignIn(user, code, 'SMS_MFA', { custom: 'value' });\n\n\t\t\texpect(await CognitoUser.prototype.sendMFACode).toBeCalledWith(\n\t\t\t\tcode,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: jasmine.any(Function),\n\t\t\t\t\tonFailure: jasmine.any(Function),\n\t\t\t\t},\n\t\t\t\t'SMS_MFA',\n\t\t\t\t{ custom: 'value' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "currentUserPoolUser fails but hub event still dispatches",
            "suites": [
                "auth unit test",
                "confirmSignIn"
            ],
            "updatePoint": {
                "line": 1411,
                "column": 64
            },
            "line": 1411,
            "code": "\t\ttest('currentUserPoolUser fails but hub event still dispatches', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'sendMFACode')\n\t\t\t\t.mockImplementationOnce((code, callback) => {\n\t\t\t\t\tcallback.onSuccess(session);\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(auth, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.reject('Could not get current user.');\n\t\t\t\t});\n\t\t\tconst hubSpy = jest.spyOn(Hub, 'dispatch');\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst result = await auth.confirmSignIn(user, 'code', null);\n\t\t\texpect(result).toEqual(user);\n\t\t\texpect(hubSpy).toHaveBeenCalledWith(\n\t\t\t\t'auth',\n\t\t\t\t{\n\t\t\t\t\tdata: user,\n\t\t\t\t\tevent: 'signIn',\n\t\t\t\t\tmessage: 'A user username has been signed in',\n\t\t\t\t},\n\t\t\t\t'Auth',\n\t\t\t\tSymbol.for('amplify_default')\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "onFailure",
            "suites": [
                "auth unit test",
                "confirmSignIn"
            ],
            "updatePoint": {
                "line": 1444,
                "column": 17
            },
            "line": 1444,
            "code": "\t\ttest('onFailure', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'sendMFACode')\n\t\t\t\t.mockImplementationOnce((code, callback) => {\n\t\t\t\t\tcallback.onFailure('err');\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tawait auth.confirmSignIn(user, 'code', null);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('err');\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no code",
            "suites": [
                "auth unit test",
                "confirmSignIn"
            ],
            "updatePoint": {
                "line": 1465,
                "column": 15
            },
            "line": 1465,
            "code": "\t\ttest('no code', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'sendMFACode');\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.confirmSignIn(user, null, null);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).not.toBeNull();\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "completeNewPassword"
            ],
            "updatePoint": {
                "line": 1486,
                "column": 18
            },
            "line": 1486,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'completeNewPasswordChallenge')\n\t\t\t\t.mockImplementationOnce((password, requiredAttributes, callback) => {\n\t\t\t\t\tcallback.onSuccess(session);\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.completeNewPassword(user, 'password', {})).toEqual(\n\t\t\t\tuser\n\t\t\t);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata default",
            "suites": [
                "auth unit test",
                "completeNewPassword"
            ],
            "updatePoint": {
                "line": 1507,
                "column": 41
            },
            "line": 1507,
            "code": "\t\ttest('happy case clientMetadata default', async () => {\n\t\t\tconst spyon = jest.spyOn(\n\t\t\t\tCognitoUser.prototype,\n\t\t\t\t'completeNewPasswordChallenge'\n\t\t\t);\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tawait auth.completeNewPassword(user, 'password', {});\n\n\t\t\texpect(\n\t\t\t\tawait CognitoUser.prototype.completeNewPasswordChallenge\n\t\t\t).toBeCalledWith(\n\t\t\t\t'password',\n\t\t\t\t{},\n\t\t\t\t{\n\t\t\t\t\tonSuccess: jasmine.any(Function),\n\t\t\t\t\tonFailure: jasmine.any(Function),\n\t\t\t\t\tmfaRequired: jasmine.any(Function),\n\t\t\t\t\tmfaSetup: jasmine.any(Function),\n\t\t\t\t\ttotpRequired: jasmine.any(Function),\n\t\t\t\t},\n\t\t\t\t{ foo: 'bar' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata default",
            "suites": [
                "auth unit test",
                "completeNewPassword"
            ],
            "updatePoint": {
                "line": 1537,
                "column": 41
            },
            "line": 1537,
            "code": "\t\ttest('happy case clientMetadata default', async () => {\n\t\t\tconst spyon = jest.spyOn(\n\t\t\t\tCognitoUser.prototype,\n\t\t\t\t'completeNewPasswordChallenge'\n\t\t\t);\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tawait auth.completeNewPassword(user, 'password', {}, { custom: 'value' });\n\n\t\t\texpect(\n\t\t\t\tawait CognitoUser.prototype.completeNewPasswordChallenge\n\t\t\t).toBeCalledWith(\n\t\t\t\t'password',\n\t\t\t\t{},\n\t\t\t\t{\n\t\t\t\t\tonSuccess: jasmine.any(Function),\n\t\t\t\t\tonFailure: jasmine.any(Function),\n\t\t\t\t\tmfaRequired: jasmine.any(Function),\n\t\t\t\t\tmfaSetup: jasmine.any(Function),\n\t\t\t\t\ttotpRequired: jasmine.any(Function),\n\t\t\t\t},\n\t\t\t\t{ custom: 'value' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "on Failure",
            "suites": [
                "auth unit test",
                "completeNewPassword"
            ],
            "updatePoint": {
                "line": 1567,
                "column": 18
            },
            "line": 1567,
            "code": "\t\ttest('on Failure', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'completeNewPasswordChallenge')\n\t\t\t\t.mockImplementationOnce((password, requiredAttributes, callback) => {\n\t\t\t\t\tcallback.onFailure('err');\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.completeNewPassword(user, 'password', {});\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('err');\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "mfaRequired",
            "suites": [
                "auth unit test",
                "completeNewPassword"
            ],
            "updatePoint": {
                "line": 1590,
                "column": 19
            },
            "line": 1590,
            "code": "\t\ttest('mfaRequired', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'completeNewPasswordChallenge')\n\t\t\t\t.mockImplementationOnce((password, requiredAttributes, callback) => {\n\t\t\t\t\tcallback.mfaRequired('SMS_MFA', 'challengeParam');\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.completeNewPassword(user, 'password', {})).toBe(user);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "mfaSetup",
            "suites": [
                "auth unit test",
                "completeNewPassword"
            ],
            "updatePoint": {
                "line": 1609,
                "column": 16
            },
            "line": 1609,
            "code": "\t\ttest('mfaSetup', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'completeNewPasswordChallenge')\n\t\t\t\t.mockImplementationOnce((password, requiredAttributes, callback) => {\n\t\t\t\t\tcallback.mfaSetup('MFA_SETUP', 'challengeParam');\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.completeNewPassword(user, 'password', {})).toBe(user);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no password",
            "suites": [
                "auth unit test",
                "completeNewPassword"
            ],
            "updatePoint": {
                "line": 1628,
                "column": 19
            },
            "line": 1628,
            "code": "\t\ttest('no password', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst errorMessage = new AuthError(AuthErrorTypes.EmptyPassword);\n\n\t\t\texpect.assertions(2);\n\t\t\tawait expect(\n\t\t\t\tauth.completeNewPassword(user, null, {}).then()\n\t\t\t).rejects.toThrow(AuthError);\n\t\t\tawait expect(\n\t\t\t\tauth.completeNewPassword(user, null, {}).then()\n\t\t\t).rejects.toEqual(errorMessage);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "userAttributes"
            ],
            "updatePoint": {
                "line": 1648,
                "column": 18
            },
            "line": 1648,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'userSession')\n\t\t\t\t.mockImplementationOnce(user => {\n\t\t\t\t\treturn new Promise((res: any, rej) => {\n\t\t\t\t\t\tres('session');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest.spyOn(CognitoUser.prototype, 'getUserAttributes');\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.userAttributes(user)).toBe('attributes');\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "get userattributes failed",
            "suites": [
                "auth unit test",
                "userAttributes"
            ],
            "updatePoint": {
                "line": 1672,
                "column": 33
            },
            "line": 1672,
            "code": "\t\ttest('get userattributes failed', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'userSession')\n\t\t\t\t.mockImplementationOnce(user => {\n\t\t\t\t\treturn new Promise((res: any, rej) => {\n\t\t\t\t\t\tres('session');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getUserAttributes')\n\t\t\t\t.mockImplementationOnce(callback => {\n\t\t\t\t\tcallback(new Error('err'));\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.userAttributes(user);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toEqual(new Error('err'));\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "currentSession"
            ],
            "updatePoint": {
                "line": 1710,
                "column": 18
            },
            "line": 1710,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(auth, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(user);\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'userSession')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres(session);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.currentSession()).toEqual(session);\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no current session",
            "suites": [
                "auth unit test",
                "currentSession"
            ],
            "updatePoint": {
                "line": 1737,
                "column": 26
            },
            "line": 1737,
            "code": "\t\ttest('no current session', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(auth, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(user);\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(auth, 'userSession')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.reject('cannot get the session');\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.currentSession();\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('cannot get the session');\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no current user",
            "suites": [
                "auth unit test",
                "currentSession"
            ],
            "updatePoint": {
                "line": 1768,
                "column": 23
            },
            "line": 1768,
            "code": "\t\ttest('no current user', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(auth, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.reject('no current user');\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.currentSession();\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('no current user');\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no UserPool",
            "suites": [
                "auth unit test",
                "currentSession"
            ],
            "updatePoint": {
                "line": 1787,
                "column": 19
            },
            "line": 1787,
            "code": "\t\ttest('no UserPool', async () => {\n\t\t\tconst auth = new Auth({\n\t\t\t\tuserPoolId: undefined,\n\t\t\t\tuserPoolWebClientId: 'awsUserPoolsWebClientId',\n\t\t\t\tregion: 'region',\n\t\t\t\tidentityPoolId: 'awsCognitoIdentityPoolId',\n\t\t\t\tmandatorySignIn: false,\n\t\t\t});\n\n\t\t\tconst noUserPoolError = Error('No User Pool in the configuration.');\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(auth.currentSession().then()).rejects.toThrow(Error);\n\t\t\texpect(auth.currentSession().then()).rejects.toEqual(noUserPoolError);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case with source userpool",
            "suites": [
                "auth unit test",
                "currentAuthenticatedUser"
            ],
            "updatePoint": {
                "line": 1805,
                "column": 39
            },
            "line": 1805,
            "code": "\t\ttest('happy case with source userpool', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres(user);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.currentAuthenticatedUser()).toEqual(user);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case with source federation",
            "suites": [
                "auth unit test",
                "currentAuthenticatedUser"
            ],
            "updatePoint": {
                "line": 1825,
                "column": 41
            },
            "line": 1825,
            "code": "\t\ttest('happy case with source federation', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(StorageHelper.prototype, 'getStorage')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsetItem() {},\n\t\t\t\t\t\tgetItem() {\n\t\t\t\t\t\t\treturn JSON.stringify({\n\t\t\t\t\t\t\t\tuser: {\n\t\t\t\t\t\t\t\t\tname: 'federated user',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ttoken: '12345',\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tremoveItem() {},\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.currentAuthenticatedUser()).toStrictEqual({\n\t\t\t\tname: 'federated user',\n\t\t\t\ttoken: '12345',\n\t\t\t});\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "userSession test"
            ],
            "updatePoint": {
                "line": 1860,
                "column": 18
            },
            "line": 1860,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tcallback(null, session);\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.userSession(user)).toEqual(session);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "debouncer happy case",
            "suites": [
                "auth unit test",
                "userSession test"
            ],
            "updatePoint": {
                "line": 1879,
                "column": 28
            },
            "line": 1879,
            "code": "\t\ttest('debouncer happy case', async () => {\n\t\t\tconst concurrency = 10;\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementationOnce(function(callback: any) {\n\t\t\t\t\tthis.signInUserSession = session;\n\t\t\t\t\tcallback(null, session);\n\t\t\t\t});\n\t\t\texpect.assertions(2 * concurrency + 1);\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst promiseArr = Array.from({ length: concurrency }, async () => {\n\t\t\t\tconst user = new CognitoUser({\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t\tPool: userPool,\n\t\t\t\t});\n\t\t\t\tconst signInUserSession = await auth.userSession(user);\n\t\t\t\treturn [signInUserSession, user] as const;\n\t\t\t});\n\t\t\tconst results = await Promise.all(promiseArr);\n\t\t\tfor (const [signInUserSession, user] of results) {\n\t\t\t\texpect(signInUserSession).toBeInstanceOf(CognitoUserSession);\n\t\t\t\texpect(user.getSignInUserSession()).toBe(signInUserSession);\n\t\t\t}\n\t\t\texpect(spyon).toHaveBeenCalledTimes(1);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "callback error",
            "suites": [
                "auth unit test",
                "userSession test"
            ],
            "updatePoint": {
                "line": 1908,
                "column": 22
            },
            "line": 1908,
            "code": "\t\ttest('callback error', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tcallback('err', null);\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.userSession(user);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('err');\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "debounce callback error",
            "suites": [
                "auth unit test",
                "userSession test"
            ],
            "updatePoint": {
                "line": 1931,
                "column": 31
            },
            "line": 1931,
            "code": "\t\ttest('debounce callback error', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tcallback('err', null);\n\t\t\t\t});\n\t\t\texpect.assertions(2);\n\t\t\ttry {\n\t\t\t\tconst promiseArr = Array.from({ length: 10 }, async () => {\n\t\t\t\t\tconst user = new CognitoUser({\n\t\t\t\t\t\tUsername: 'username',\n\t\t\t\t\t\tPool: userPool,\n\t\t\t\t\t});\n\t\t\t\t\treturn await auth.userSession(user);\n\t\t\t\t});\n\t\t\t\tawait Promise.all(promiseArr);\n\t\t\t\tfail('expect promise to reject');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('err');\n\t\t\t}\n\t\t\texpect(spyon).toHaveBeenCalledTimes(1);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no user",
            "suites": [
                "auth unit test",
                "userSession test"
            ],
            "updatePoint": {
                "line": 1957,
                "column": 15
            },
            "line": 1957,
            "code": "\t\ttest('no user', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = null;\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.userSession(user);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).not.toBeNull();\n\t\t\t}\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "refresh token revoked case",
            "suites": [
                "auth unit test",
                "userSession test"
            ],
            "updatePoint": {
                "line": 1969,
                "column": 34
            },
            "line": 1969,
            "code": "\t\ttest('refresh token revoked case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementationOnce(() => user);\n\t\t\tconst getSessionSpy = jest\n\t\t\t\t.spyOn(user, 'getSession')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tcallback(new Error('Refresh Token has been revoked'), null);\n\t\t\t\t});\n\t\t\tconst userSignoutSpy = jest\n\t\t\t\t.spyOn(user, 'signOut')\n\t\t\t\t.mockImplementationOnce(() => {});\n\t\t\tconst credentialsClearSpy = jest.spyOn(Credentials, 'clear');\n\t\t\tconst hubSpy = jest.spyOn(Hub, 'dispatch');\n\t\t\tawait expect(auth.userSession(user)).rejects.toThrowError(\n\t\t\t\t'Refresh Token has been revoked'\n\t\t\t);\n\t\t\texpect(getSessionSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(userSignoutSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(credentialsClearSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(hubSpy).toHaveBeenCalledWith(\n\t\t\t\t'auth',\n\t\t\t\t{ data: null, event: 'signOut', message: 'A user has been signed out' },\n\t\t\t\t'Auth',\n\t\t\t\tSymbol.for('amplify_default')\n\t\t\t);\n\t\t\tjest.clearAllMocks();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "debounce refresh token revoked case",
            "suites": [
                "auth unit test",
                "userSession test"
            ],
            "updatePoint": {
                "line": 2003,
                "column": 43
            },
            "line": 2003,
            "code": "\t\ttest('debounce refresh token revoked case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst credentialsClearSpy = jest.spyOn(Credentials, 'clear');\n\t\t\tconst hubSpy = jest.spyOn(Hub, 'dispatch');\n\t\t\tlet user: CognitoUser | null = null;\n\t\t\tconst getSessionSpy = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tcallback(new Error('Refresh Token has been revoked'), null);\n\t\t\t\t});\n\t\t\tconst userSignoutSpy = jest.fn();\n\t\t\texpect.assertions(5);\n\t\t\tconst promiseArr = Array.from({ length: 10 }, async () => {\n\t\t\t\tuser = new CognitoUser({\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t\tPool: userPool,\n\t\t\t\t});\n\t\t\t\tjest.spyOn(user, 'signOut').mockImplementationOnce(() => {\n\t\t\t\t\tuserSignoutSpy();\n\t\t\t\t});\n\t\t\t\treturn await auth.userSession(user);\n\t\t\t});\n\t\t\ttry {\n\t\t\t\tawait Promise.all(promiseArr);\n\t\t\t\tfail('expect promise to reject');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e.message).toBe('Refresh Token has been revoked');\n\t\t\t}\n\t\t\texpect(getSessionSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(userSignoutSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(credentialsClearSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(hubSpy).toHaveBeenCalledWith(\n\t\t\t\t'auth',\n\t\t\t\t{ data: null, event: 'signOut', message: 'A user has been signed out' },\n\t\t\t\t'Auth',\n\t\t\t\tSymbol.for('amplify_default')\n\t\t\t);\n\t\t\tjest.clearAllMocks();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "with federated info",
            "suites": [
                "auth unit test",
                "currentUserCredentials test"
            ],
            "updatePoint": {
                "line": 2045,
                "column": 27
            },
            "line": 2045,
            "code": "\t\ttest('with federated info', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(StorageHelper.prototype, 'getStorage')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsetItem() {},\n\t\t\t\t\t\tgetItem() {\n\t\t\t\t\t\t\treturn JSON.stringify({\n\t\t\t\t\t\t\t\tprovider: 'google',\n\t\t\t\t\t\t\t\ttoken: 'token',\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tremoveItem() {},\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(Credentials, 'refreshFederatedToken')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve('cred' as any);\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.currentUserCredentials()).toBe('cred');\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "with cognito session",
            "suites": [
                "auth unit test",
                "currentUserCredentials test"
            ],
            "updatePoint": {
                "line": 2076,
                "column": 28
            },
            "line": 2076,
            "code": "\t\ttest('with cognito session', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(StorageHelper.prototype, 'getStorage')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsetItem() {},\n\t\t\t\t\t\tgetItem() {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tremoveItem() {},\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(auth, 'currentSession')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve('session' as any);\n\t\t\t\t});\n\n\t\t\tconst spyon3 = jest\n\t\t\t\t.spyOn(Credentials, 'set')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve('cred' as any);\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.currentUserCredentials()).toBe('cred');\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t\tspyon3.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "with guest",
            "suites": [
                "auth unit test",
                "currentUserCredentials test"
            ],
            "updatePoint": {
                "line": 2110,
                "column": 18
            },
            "line": 2110,
            "code": "\t\ttest('with guest', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(StorageHelper.prototype, 'getStorage')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsetItem() {},\n\t\t\t\t\t\tgetItem() {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tremoveItem() {},\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(auth, 'currentSession')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.reject('err' as any);\n\t\t\t\t});\n\n\t\t\tconst spyon3 = jest\n\t\t\t\t.spyOn(Credentials, 'set')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve('cred' as any);\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.currentUserCredentials()).toBe('cred');\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t\tspyon3.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "json parse error",
            "suites": [
                "auth unit test",
                "currentUserCredentials test"
            ],
            "updatePoint": {
                "line": 2144,
                "column": 24
            },
            "line": 2144,
            "code": "\t\ttest('json parse error', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(StorageHelper.prototype, 'getStorage')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsetItem() {},\n\t\t\t\t\t\tgetItem() {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tremoveItem() {},\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(auth, 'currentSession')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve('session') as any;\n\t\t\t\t});\n\n\t\t\tconst spyon3 = jest\n\t\t\t\t.spyOn(Credentials, 'set')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve('cred' as any);\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.currentUserCredentials()).toBe('cred');\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t\tspyon3.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "verifyUserAttribute test"
            ],
            "updatePoint": {
                "line": 2192,
                "column": 18
            },
            "line": 2192,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(\n\t\t\t\tCognitoUser.prototype,\n\t\t\t\t'getAttributeVerificationCode'\n\t\t\t);\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\tawait auth.verifyUserAttribute(user, 'email');\n\t\t\texpect(spyon).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "onFailure",
            "suites": [
                "auth unit test",
                "verifyUserAttribute test"
            ],
            "updatePoint": {
                "line": 2211,
                "column": 17
            },
            "line": 2211,
            "code": "\t\ttest('onFailure', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getAttributeVerificationCode')\n\t\t\t\t.mockImplementationOnce((attr, callback) => {\n\t\t\t\t\tcallback.onFailure('err' as any);\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.verifyUserAttribute(user, 'email');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('err');\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "verifyUserAttributeSubmit"
            ],
            "updatePoint": {
                "line": 2236,
                "column": 18
            },
            "line": 2236,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'verifyAttribute');\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(\n\t\t\t\tawait auth.verifyUserAttributeSubmit(user, 'attribute', 'code')\n\t\t\t).toBe('success');\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "onFailure",
            "suites": [
                "auth unit test",
                "verifyUserAttributeSubmit"
            ],
            "updatePoint": {
                "line": 2253,
                "column": 17
            },
            "line": 2253,
            "code": "\t\ttest('onFailure', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'verifyAttribute')\n\t\t\t\t.mockImplementationOnce((attr, code, callback) => {\n\t\t\t\t\tcallback.onFailure('err' as any);\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.verifyUserAttributeSubmit(user, 'email', 'code');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('err');\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "code empty",
            "suites": [
                "auth unit test",
                "verifyUserAttributeSubmit"
            ],
            "updatePoint": {
                "line": 2276,
                "column": 18
            },
            "line": 2276,
            "code": "\t\ttest('code empty', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst errorMessage = new AuthError(AuthErrorTypes.EmptyCode);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(\n\t\t\t\tauth.verifyUserAttributeSubmit(user, 'email', null).then()\n\t\t\t).rejects.toThrow(AuthError);\n\t\t\texpect(\n\t\t\t\tauth.verifyUserAttributeSubmit(user, 'email', null).then()\n\t\t\t).rejects.toEqual(errorMessage);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "verifyCurrentUserAttribute test"
            ],
            "updatePoint": {
                "line": 2295,
                "column": 18
            },
            "line": 2295,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres(user);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'verifyUserAttribute')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres();\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tawait auth.verifyCurrentUserAttribute('attr');\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(spyon).toBeCalled();\n\t\t\texpect(spyon2).toBeCalledWith(user, 'attr', undefined);\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "verifyCurrentUserAttributeSubmit test"
            ],
            "updatePoint": {
                "line": 2330,
                "column": 18
            },
            "line": 2330,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres(user);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'verifyUserAttributeSubmit')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres();\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tawait auth.verifyCurrentUserAttributeSubmit('attr', 'code');\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(spyon).toBeCalled();\n\t\t\texpect(spyon2).toBeCalledWith(user, 'attr', 'code');\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "signOut test"
            ],
            "updatePoint": {
                "line": 2377,
                "column": 18
            },
            "line": 2377,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'clear')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\n\t\t\tawait auth.signOut();\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(spyon).toBeCalled();\n\t\t\texpect(spyon2).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case for source userpool",
            "suites": [
                "auth unit test",
                "signOut test"
            ],
            "updatePoint": {
                "line": 2406,
                "column": 38
            },
            "line": 2406,
            "code": "\t\ttest('happy case for source userpool', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tauth['credentials_source'] = 'aws';\n\t\t\tauth['credentials'] = {\n\t\t\t\tIdentityPoolId: 'identityPoolId',\n\t\t\t};\n\n\t\t\tconst spyonAuth = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'currentUserCredentials')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tconst spyon2 = jest.spyOn(CognitoUser.prototype, 'signOut');\n\t\t\t// @ts-ignore\n\n\t\t\tawait auth.signOut();\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(spyon2).toBeCalled();\n\n\t\t\tspyonAuth.mockClear();\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case for globalSignOut",
            "suites": [
                "auth unit test",
                "signOut test"
            ],
            "updatePoint": {
                "line": 2442,
                "column": 36
            },
            "line": 2442,
            "code": "\t\ttest('happy case for globalSignOut', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyonAuth = jest\n\t\t\t\t.spyOn(Credentials, 'clear')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t});\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tconst spyon2 = jest.spyOn(CognitoUser.prototype, 'globalSignOut');\n\n\t\t\tawait auth.signOut({ global: true });\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(spyon2).toBeCalled();\n\n\t\t\tspyonAuth.mockClear();\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case for no userpool",
            "suites": [
                "auth unit test",
                "signOut test"
            ],
            "updatePoint": {
                "line": 2471,
                "column": 34
            },
            "line": 2471,
            "code": "\t\ttest('happy case for no userpool', async () => {\n\t\t\t// @ts-ignore\n\t\t\tconst auth = new Auth(authOptionsWithNoUserPoolId);\n\n\t\t\texpect(await auth.signOut()).toBeUndefined();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no User in userpool",
            "suites": [
                "auth unit test",
                "signOut test"
            ],
            "updatePoint": {
                "line": 2478,
                "column": 27
            },
            "line": 2478,
            "code": "\t\ttest('no User in userpool', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t\t\texpect(await auth.signOut()).toBeUndefined();\n\n\t\t\tspyon.mockReset();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "get guest credentials failed",
            "suites": [
                "auth unit test",
                "signOut test"
            ],
            "updatePoint": {
                "line": 2491,
                "column": 36
            },
            "line": 2491,
            "code": "\t\ttest('get guest credentials failed', async () => {\n\t\t\tconst auth = new Auth(authOptionsWithNoUserPoolId);\n\n\t\t\texpect(await auth.signOut()).toBeUndefined();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "changePassword"
            ],
            "updatePoint": {
                "line": 2499,
                "column": 18
            },
            "line": 2499,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst oldPassword = 'oldPassword1';\n\t\t\tconst newPassword = 'newPassword1.';\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'userSession')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres(session);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.changePassword(user, oldPassword, newPassword)).toBe(\n\t\t\t\t'SUCCESS'\n\t\t\t);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata default",
            "suites": [
                "auth unit test",
                "changePassword"
            ],
            "updatePoint": {
                "line": 2524,
                "column": 41
            },
            "line": 2524,
            "code": "\t\ttest('happy case clientMetadata default', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'changePassword');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst oldPassword = 'oldPassword1';\n\t\t\tconst newPassword = 'newPassword1.';\n\n\t\t\tawait auth.changePassword(user, oldPassword, newPassword);\n\n\t\t\texpect(await CognitoUser.prototype.changePassword).toBeCalledWith(\n\t\t\t\toldPassword,\n\t\t\t\tnewPassword,\n\t\t\t\tjasmine.any(Function),\n\t\t\t\t{\n\t\t\t\t\tfoo: 'bar',\n\t\t\t\t}\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata parameter",
            "suites": [
                "auth unit test",
                "changePassword"
            ],
            "updatePoint": {
                "line": 2547,
                "column": 43
            },
            "line": 2547,
            "code": "\t\ttest('happy case clientMetadata parameter', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'changePassword');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst oldPassword = 'oldPassword1';\n\t\t\tconst newPassword = 'newPassword1.';\n\n\t\t\tawait auth.changePassword(user, oldPassword, newPassword, {\n\t\t\t\tcustom: 'value',\n\t\t\t});\n\n\t\t\texpect(await CognitoUser.prototype.changePassword).toBeCalledWith(\n\t\t\t\toldPassword,\n\t\t\t\tnewPassword,\n\t\t\t\tjasmine.any(Function),\n\t\t\t\t{\n\t\t\t\t\tcustom: 'value',\n\t\t\t\t}\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "forgotPassword"
            ],
            "updatePoint": {
                "line": 2574,
                "column": 18
            },
            "line": 2574,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'forgotPassword');\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.forgotPassword('username')).toBeUndefined();\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata default",
            "suites": [
                "auth unit test",
                "forgotPassword"
            ],
            "updatePoint": {
                "line": 2585,
                "column": 41
            },
            "line": 2585,
            "code": "\t\ttest('happy case clientMetadata default', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'forgotPassword');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\n\t\t\tawait auth.forgotPassword('username');\n\n\t\t\texpect(await CognitoUser.prototype.forgotPassword).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tinputVerificationCode: jasmine.any(Function),\n\t\t\t\t\tonFailure: jasmine.any(Function),\n\t\t\t\t\tonSuccess: jasmine.any(Function),\n\t\t\t\t},\n\t\t\t\t{ foo: 'bar' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata parameter",
            "suites": [
                "auth unit test",
                "forgotPassword"
            ],
            "updatePoint": {
                "line": 2602,
                "column": 43
            },
            "line": 2602,
            "code": "\t\ttest('happy case clientMetadata parameter', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'forgotPassword');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\n\t\t\tawait auth.forgotPassword('username', { custom: 'value' });\n\n\t\t\texpect(await CognitoUser.prototype.forgotPassword).toBeCalledWith(\n\t\t\t\t{\n\t\t\t\t\tinputVerificationCode: jasmine.any(Function),\n\t\t\t\t\tonFailure: jasmine.any(Function),\n\t\t\t\t\tonSuccess: jasmine.any(Function),\n\t\t\t\t},\n\t\t\t\t{ custom: 'value' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "onFailure",
            "suites": [
                "auth unit test",
                "forgotPassword"
            ],
            "updatePoint": {
                "line": 2619,
                "column": 17
            },
            "line": 2619,
            "code": "\t\ttest('onFailure', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'forgotPassword')\n\t\t\t\t.mockImplementationOnce(callback => {\n\t\t\t\t\tcallback.onFailure(new Error('err'));\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.forgotPassword('username');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toEqual(new Error('err'));\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "inputVerificationCode",
            "suites": [
                "auth unit test",
                "forgotPassword"
            ],
            "updatePoint": {
                "line": 2638,
                "column": 29
            },
            "line": 2638,
            "code": "\t\ttest('inputVerificationCode', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'forgotPassword')\n\t\t\t\t.mockImplementationOnce(callback => {\n\t\t\t\t\tcallback.inputVerificationCode('data');\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.forgotPassword('username')).toBe('data');\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no user pool id",
            "suites": [
                "auth unit test",
                "forgotPassword"
            ],
            "updatePoint": {
                "line": 2653,
                "column": 23
            },
            "line": 2653,
            "code": "\t\ttest('no user pool id', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'forgotPassword');\n\n\t\t\tconst auth = new Auth(authOptionsWithNoUserPoolId);\n\t\t\tconst errorMessage = new NoUserPoolError(\n\t\t\t\tAuthErrorTypes.MissingAuthConfig\n\t\t\t);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(auth.forgotPassword('username').then()).rejects.toThrow(\n\t\t\t\tNoUserPoolError\n\t\t\t);\n\t\t\texpect(auth.forgotPassword('username').then()).rejects.toEqual(\n\t\t\t\terrorMessage\n\t\t\t);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no username",
            "suites": [
                "auth unit test",
                "forgotPassword"
            ],
            "updatePoint": {
                "line": 2672,
                "column": 19
            },
            "line": 2672,
            "code": "\t\ttest('no username', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'forgotPassword');\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.forgotPassword(null);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).not.toBeNull();\n\t\t\t}\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "forgotPasswordSubmit"
            ],
            "updatePoint": {
                "line": 2688,
                "column": 18
            },
            "line": 2688,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'confirmPassword');\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(\n\t\t\t\tawait auth.forgotPasswordSubmit('username', 'code', 'password')\n\t\t\t).toBeUndefined();\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "forgotPasswordSubmit"
            ],
            "updatePoint": {
                "line": 2701,
                "column": 18
            },
            "line": 2701,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'confirmPassword');\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.forgotPassword('username')).toBeUndefined();\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata default",
            "suites": [
                "auth unit test",
                "forgotPasswordSubmit"
            ],
            "updatePoint": {
                "line": 2712,
                "column": 41
            },
            "line": 2712,
            "code": "\t\ttest('happy case clientMetadata default', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'forgotPassword');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst username = 'username';\n\t\t\tconst code = 'code';\n\t\t\tconst password = 'password';\n\n\t\t\tawait auth.forgotPasswordSubmit(username, code, password);\n\n\t\t\texpect(await CognitoUser.prototype.confirmPassword).toBeCalledWith(\n\t\t\t\tcode,\n\t\t\t\tpassword,\n\t\t\t\t{\n\t\t\t\t\tonFailure: jasmine.any(Function),\n\t\t\t\t\tonSuccess: jasmine.any(Function),\n\t\t\t\t},\n\t\t\t\t{ foo: 'bar' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata parameter",
            "suites": [
                "auth unit test",
                "forgotPasswordSubmit"
            ],
            "updatePoint": {
                "line": 2733,
                "column": 43
            },
            "line": 2733,
            "code": "\t\ttest('happy case clientMetadata parameter', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'forgotPassword');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst username = 'username';\n\t\t\tconst code = 'code';\n\t\t\tconst password = 'password';\n\n\t\t\tawait auth.forgotPasswordSubmit(username, code, password, {\n\t\t\t\tcustom: 'value',\n\t\t\t});\n\n\t\t\texpect(await CognitoUser.prototype.confirmPassword).toBeCalledWith(\n\t\t\t\tcode,\n\t\t\t\tpassword,\n\t\t\t\t{\n\t\t\t\t\tonFailure: jasmine.any(Function),\n\t\t\t\t\tonSuccess: jasmine.any(Function),\n\t\t\t\t},\n\t\t\t\t{ custom: 'value' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "confirmPassword failed",
            "suites": [
                "auth unit test",
                "forgotPasswordSubmit"
            ],
            "updatePoint": {
                "line": 2756,
                "column": 30
            },
            "line": 2756,
            "code": "\t\ttest('confirmPassword failed', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'confirmPassword')\n\t\t\t\t.mockImplementationOnce((code, password, callback) => {\n\t\t\t\t\tcallback.onFailure(new Error('err'));\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.forgotPasswordSubmit('username', 'code', 'password');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toEqual(new Error('err'));\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no user pool in config",
            "suites": [
                "auth unit test",
                "forgotPasswordSubmit"
            ],
            "updatePoint": {
                "line": 2775,
                "column": 30
            },
            "line": 2775,
            "code": "\t\ttest('no user pool in config', async () => {\n\t\t\tconst auth = new Auth(authOptionsWithNoUserPoolId);\n\t\t\tconst errorMessage = new NoUserPoolError(\n\t\t\t\tAuthErrorTypes.MissingAuthConfig\n\t\t\t);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(\n\t\t\t\tauth.forgotPasswordSubmit('username', 'code', 'password').then()\n\t\t\t).rejects.toThrow(NoUserPoolError);\n\t\t\texpect(\n\t\t\t\tauth.forgotPasswordSubmit('username', 'code', 'password').then()\n\t\t\t).rejects.toEqual(errorMessage);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no username",
            "suites": [
                "auth unit test",
                "forgotPasswordSubmit"
            ],
            "updatePoint": {
                "line": 2790,
                "column": 19
            },
            "line": 2790,
            "code": "\t\ttest('no username', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst errorMessage = new AuthError(AuthErrorTypes.EmptyUsername);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(\n\t\t\t\tauth.forgotPasswordSubmit(null, 'code', 'password').then()\n\t\t\t).rejects.toThrow(AuthError);\n\t\t\texpect(\n\t\t\t\tauth.forgotPasswordSubmit(null, 'code', 'password').then()\n\t\t\t).rejects.toEqual(errorMessage);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no code",
            "suites": [
                "auth unit test",
                "forgotPasswordSubmit"
            ],
            "updatePoint": {
                "line": 2803,
                "column": 15
            },
            "line": 2803,
            "code": "\t\ttest('no code', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst errorMessage = new AuthError(AuthErrorTypes.EmptyCode);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(\n\t\t\t\tauth.forgotPasswordSubmit('username', null, 'password').then()\n\t\t\t).rejects.toThrow(AuthError);\n\t\t\texpect(\n\t\t\t\tauth.forgotPasswordSubmit('username', null, 'password').then()\n\t\t\t).rejects.toEqual(errorMessage);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no password",
            "suites": [
                "auth unit test",
                "forgotPasswordSubmit"
            ],
            "updatePoint": {
                "line": 2816,
                "column": 19
            },
            "line": 2816,
            "code": "\t\ttest('no password', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst errorMessage = new AuthError(AuthErrorTypes.EmptyPassword);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(\n\t\t\t\tauth.forgotPasswordSubmit('username', 'code', null).then()\n\t\t\t).rejects.toThrow(AuthError);\n\t\t\texpect(\n\t\t\t\tauth.forgotPasswordSubmit('username', 'code', null).then()\n\t\t\t).rejects.toEqual(errorMessage);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case with aws or userpool source",
            "suites": [
                "auth unit test",
                "currentUserInfo test"
            ],
            "updatePoint": {
                "line": 2831,
                "column": 46
            },
            "line": 2831,
            "code": "\t\ttest('happy case with aws or userpool source', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres(user);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'userAttributes')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\tauth['credentials'] = {\n\t\t\t\t\t\tIdentityPoolId: 'identityPoolId',\n\t\t\t\t\t\tIdentityId: 'identityId',\n\t\t\t\t\t};\n\t\t\t\t\tauth['credentials']['identityId'] = 'identityId';\n\t\t\t\t\treturn new Promise((res: any, rej) => {\n\t\t\t\t\t\tres([\n\t\t\t\t\t\t\t{ Name: 'email', Value: 'email' },\n\t\t\t\t\t\t\t{ Name: 'phone_number', Value: 'phone_number' },\n\t\t\t\t\t\t\t{ Name: 'email_verified', Value: 'false' },\n\t\t\t\t\t\t\t{ Name: 'phone_number_verified', Value: 'true' },\n\t\t\t\t\t\t\t{ Name: 'sub', Value: '123-456789' },\n\t\t\t\t\t\t]);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon3 = jest\n\t\t\t\t.spyOn(auth, 'currentCredentials')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\tidentityId: 'identityId',\n\t\t\t\t\t} as any);\n\t\t\t\t});\n\n\t\t\tconst spyon4 = jest\n\t\t\t\t.spyOn(Credentials, 'getCredSource')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn 'aws';\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.currentUserInfo()).toEqual({\n\t\t\t\tusername: 'username',\n\t\t\t\tid: 'identityId',\n\t\t\t\tattributes: {\n\t\t\t\t\temail: 'email',\n\t\t\t\t\tphone_number: 'phone_number',\n\t\t\t\t\temail_verified: false,\n\t\t\t\t\tphone_number_verified: true,\n\t\t\t\t\tsub: '123-456789',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t\tspyon3.mockClear();\n\t\t\tspyon4.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "return empty object if error happens",
            "suites": [
                "auth unit test",
                "currentUserInfo test"
            ],
            "updatePoint": {
                "line": 2898,
                "column": 44
            },
            "line": 2898,
            "code": "\t\ttest('return empty object if error happens', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres({\n\t\t\t\t\t\t\tusername: 'username',\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'userAttributes')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\trej('err');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon3 = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'currentCredentials')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\tIdentityPoolId: 'identityPoolId',\n\t\t\t\t\t\tidentityId: 'identityId',\n\t\t\t\t\t} as any);\n\t\t\t\t});\n\n\t\t\tconst spyon4 = jest\n\t\t\t\t.spyOn(Credentials, 'getCredSource')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn 'aws';\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.currentUserInfo()).toEqual({});\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t\tspyon3.mockClear();\n\t\t\tspyon4.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no current userpool user",
            "suites": [
                "auth unit test",
                "currentUserInfo test"
            ],
            "updatePoint": {
                "line": 2947,
                "column": 32
            },
            "line": 2947,
            "code": "\t\ttest('no current userpool user', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tauth['credentials_source'] = 'aws';\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres(null);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(Credentials, 'getCredSource')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn 'aws';\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.currentUserInfo()).toBeNull();\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "federated user",
            "suites": [
                "auth unit test",
                "currentUserInfo test"
            ],
            "updatePoint": {
                "line": 2976,
                "column": 22
            },
            "line": 2976,
            "code": "\t\ttest('federated user', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tauth['user'] = 'federated_user';\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'getCredSource')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn 'federated';\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.currentUserInfo()).toBe('federated_user');\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "updateUserAttributes test"
            ],
            "updatePoint": {
                "line": 2998,
                "column": 18
            },
            "line": 2998,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst attributes = {\n\t\t\t\temail: 'email',\n\t\t\t\tphone_number: 'phone_number',\n\t\t\t\tsub: 'sub',\n\t\t\t};\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'userSession')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\t\tres(session);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.updateUserAttributes(user, attributes)).toBe('SUCCESS');\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata default",
            "suites": [
                "auth unit test",
                "updateUserAttributes test"
            ],
            "updatePoint": {
                "line": 3026,
                "column": 41
            },
            "line": 3026,
            "code": "\t\ttest('happy case clientMetadata default', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'updateAttributes');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tawait auth.updateUserAttributes(user, {});\n\n\t\t\texpect(await CognitoUser.prototype.updateAttributes).toBeCalledWith(\n\t\t\t\t[],\n\t\t\t\tjasmine.any(Function),\n\t\t\t\t{ foo: 'bar' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata parameter",
            "suites": [
                "auth unit test",
                "updateUserAttributes test"
            ],
            "updatePoint": {
                "line": 3044,
                "column": 43
            },
            "line": 3044,
            "code": "\t\ttest('happy case clientMetadata parameter', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'updateAttributes');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tawait auth.updateUserAttributes(user, {}, { custom: 'value' });\n\n\t\t\texpect(await CognitoUser.prototype.updateAttributes).toBeCalledWith(\n\t\t\t\t[],\n\t\t\t\tjasmine.any(Function),\n\t\t\t\t{ custom: 'value' }\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "error hub event",
            "suites": [
                "auth unit test",
                "updateUserAttributes test"
            ],
            "updatePoint": {
                "line": 3062,
                "column": 23
            },
            "line": 3062,
            "code": "\t\ttest('error hub event', async done => {\n\t\t\texpect.assertions(3);\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'updateAttributes')\n\t\t\t\t.mockImplementationOnce((attrs, callback: any) => {\n\t\t\t\t\tcallback(new Error('Error'), null, null);\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst attributes = {\n\t\t\t\temail: 'email',\n\t\t\t\tphone_number: 'phone_number',\n\t\t\t\tsub: 'sub',\n\t\t\t};\n\n\t\t\tconst listenToHub = Hub.listen('auth', ({ payload }) => {\n\t\t\t\tconst { event } = payload;\n\t\t\t\tif (event === 'updateUserAttributes_failure') {\n\t\t\t\t\texpect(payload.data.message).toBe('Error');\n\t\t\t\t\texpect(payload.message).toBe('Failed to update attributes');\n\t\t\t\t\tlistenToHub();\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tawait auth.updateUserAttributes(user, attributes);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toEqual(new Error('Error'));\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case code delivery details hub event",
            "suites": [
                "auth unit test",
                "updateUserAttributes test"
            ],
            "updatePoint": {
                "line": 3102,
                "column": 50
            },
            "line": 3102,
            "code": "\t\ttest('happy case code delivery details hub event', async done => {\n\t\t\texpect.assertions(2);\n\n\t\t\tconst codeDeliverDetailsResult: any = {\n\t\t\t\tCodeDeliveryDetailsList: [\n\t\t\t\t\t{\n\t\t\t\t\t\tAttributeName: 'email',\n\t\t\t\t\t\tDeliveryMedium: 'EMAIL',\n\t\t\t\t\t\tDestination: 'e***@e***',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'updateAttributes')\n\t\t\t\t.mockImplementationOnce((attrs, callback: any) => {\n\t\t\t\t\tcallback(null, 'SUCCESS', codeDeliverDetailsResult);\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst attributes = {\n\t\t\t\temail: 'email',\n\t\t\t\tphone_number: 'phone_number',\n\t\t\t\tsub: 'sub',\n\t\t\t};\n\t\t\tconst payloadData = {\n\t\t\t\temail: {\n\t\t\t\t\tisUpdated: false,\n\t\t\t\t\tcodeDeliveryDetails: {\n\t\t\t\t\t\tAttributeName: 'email',\n\t\t\t\t\t\tDeliveryMedium: 'EMAIL',\n\t\t\t\t\t\tDestination: 'e***@e***',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tphone_number: {\n\t\t\t\t\tisUpdated: true,\n\t\t\t\t},\n\t\t\t\tsub: {\n\t\t\t\t\tisUpdated: true,\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst listenToHub = Hub.listen('auth', ({ payload }) => {\n\t\t\t\tconst { event } = payload;\n\t\t\t\tif (event === 'updateUserAttributes') {\n\t\t\t\t\texpect(payload.data).toEqual(payloadData);\n\t\t\t\t\tlistenToHub();\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\texpect(await auth.updateUserAttributes(user, attributes)).toBe('SUCCESS');\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "deleteUserAttributes test"
            ],
            "updatePoint": {
                "line": 3162,
                "column": 18
            },
            "line": 3162,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst attributeNames = ['email', 'phone_number'];\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'userSession')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise(res => {\n\t\t\t\t\t\tres(session);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.deleteUserAttributes(user, attributeNames)).toBe(\n\t\t\t\t'SUCCESS'\n\t\t\t);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case to call with expected attributes",
            "suites": [
                "auth unit test",
                "deleteUserAttributes test"
            ],
            "updatePoint": {
                "line": 3188,
                "column": 51
            },
            "line": 3188,
            "code": "\t\ttest('happy case to call with expected attributes', async () => {\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'deleteAttributes');\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tawait auth.deleteUserAttributes(user, ['email', 'phone_number']);\n\n\t\t\texpect(await CognitoUser.prototype.deleteAttributes).toBeCalledWith(\n\t\t\t\t['email', 'phone_number'],\n\t\t\t\tjasmine.any(Function)\n\t\t\t);\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "Happy path should delete a user",
            "suites": [
                "auth unit test",
                "delete user test suite"
            ],
            "updatePoint": {
                "line": 3222,
                "column": 39
            },
            "line": 3222,
            "code": "\t\ttest('Happy path should delete a user', async () => {\n\t\t\tconst spy1 = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tconst spy2 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\t\treturn callback(null, session);\n\t\t\t\t});\n\t\t\tconst userSignoutSpy = jest\n\t\t\t\t.spyOn(user, 'signOut')\n\t\t\t\t.mockImplementationOnce(() => {});\n\n\t\t\texpect(await auth.deleteUser()).toBe('SUCCESS');\n\t\t\texpect(userSignoutSpy).toHaveBeenCalledTimes(1);\n\t\t\t// TODO: test session cleared properly\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no user pool should throw error",
            "suites": [
                "auth unit test",
                "delete user test suite"
            ],
            "updatePoint": {
                "line": 3242,
                "column": 39
            },
            "line": 3242,
            "code": "\t\ttest('no user pool should throw error', async () => {\n\t\t\tconst noUserPoolAuth = new Auth(authOptionsWithNoUserPoolId);\n\t\t\ttry {\n\t\t\t\tawait noUserPoolAuth.deleteUser();\n\t\t\t} catch (error) {\n\t\t\t\texpect(error).toEqual(new Error('Cognito User pool does not exist'));\n\t\t\t}\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no user should throw error",
            "suites": [
                "auth unit test",
                "delete user test suite"
            ],
            "updatePoint": {
                "line": 3251,
                "column": 34
            },
            "line": 3251,
            "code": "\t\ttest('no user should throw error', async () => {\n\t\t\tconst spy1 = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tawait auth.deleteUser();\n\t\t\t} catch (error) {\n\t\t\t\texpect(error).toEqual(new Error('No current user.'));\n\t\t\t}\n\t\t\tspy1.mockReset();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no session should throw error",
            "suites": [
                "auth unit test",
                "delete user test suite"
            ],
            "updatePoint": {
                "line": 3266,
                "column": 37
            },
            "line": 3266,
            "code": "\t\ttest('no session should throw error', async () => {\n\t\t\tconst spy1 = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tconst spy2 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\t\treturn callback(new Error('no session'), null);\n\t\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tawait auth.deleteUser();\n\t\t\t} catch (error) {\n\t\t\t\texpect(error).toEqual(Error('no session'));\n\t\t\t}\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "getSession call fail should signout user",
            "suites": [
                "auth unit test",
                "delete user test suite"
            ],
            "updatePoint": {
                "line": 3285,
                "column": 48
            },
            "line": 3285,
            "code": "\t\ttest('getSession call fail should signout user', async () => {\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tconst getSessionSpy = jest\n\t\t\t\t.spyOn(user, 'getSession')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tcallback(new Error('Refresh Token has been revoked'), null);\n\t\t\t\t});\n\t\t\tconst userSignoutSpy = jest\n\t\t\t\t.spyOn(user, 'signOut')\n\t\t\t\t.mockImplementationOnce(() => {});\n\t\t\tconst credentialsClearSpy = jest.spyOn(Credentials, 'clear');\n\t\t\tconst hubSpy = jest.spyOn(Hub, 'dispatch');\n\t\t\tawait expect(auth.deleteUser()).rejects.toThrowError(\n\t\t\t\t'Refresh Token has been revoked'\n\t\t\t);\n\t\t\texpect(getSessionSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(userSignoutSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(credentialsClearSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(hubSpy).toHaveBeenCalledWith(\n\t\t\t\t'auth',\n\t\t\t\t{ data: null, event: 'signOut', message: 'A user has been signed out' },\n\t\t\t\t'Auth',\n\t\t\t\tSymbol.for('amplify_default')\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "cognito deleteUser call fails...",
            "suites": [
                "auth unit test",
                "delete user test suite"
            ],
            "updatePoint": {
                "line": 3315,
                "column": 40
            },
            "line": 3315,
            "code": "\t\ttest('cognito deleteUser call fails...', async () => {\n\t\t\tconst spy1 = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tconst spy2 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\t\treturn callback(null, session);\n\t\t\t\t});\n\t\t\tconst spy3 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'deleteUser')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\treturn callback(new Error('Cognito deleteUser error'), null);\n\t\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tawait auth.deleteUser();\n\t\t\t} catch (error) {\n\t\t\t\texpect(error).toEqual(Error('Cognito deleteUser error'));\n\t\t\t}\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "No Identity Pool and No User Pool",
            "suites": [
                "auth unit test",
                "federatedSignIn test"
            ],
            "updatePoint": {
                "line": 3341,
                "column": 41
            },
            "line": 3341,
            "code": "\t\ttest('No Identity Pool and No User Pool', async () => {\n\t\t\tconst options: AuthOptions = {};\n\n\t\t\tconst auth = new Auth(options);\n\n\t\t\tlet error;\n\t\t\ttry {\n\t\t\t\tawait auth.federatedSignIn(\n\t\t\t\t\t'google',\n\t\t\t\t\t{ token: 'token', expires_at: 1234 },\n\t\t\t\t\t{ name: 'username' }\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\n\t\t\texpect(error).toEqual(\n\t\t\t\tnew Error(\n\t\t\t\t\t'Federation requires either a User Pool or Identity Pool in config'\n\t\t\t\t)\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "No User Pool",
            "suites": [
                "auth unit test",
                "federatedSignIn test"
            ],
            "updatePoint": {
                "line": 3364,
                "column": 20
            },
            "line": 3364,
            "code": "\t\ttest('No User Pool', async () => {\n\t\t\tconst options: AuthOptions = {};\n\n\t\t\tconst auth = new Auth(options);\n\n\t\t\tlet error;\n\t\t\ttry {\n\t\t\t\tawait auth.federatedSignIn();\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\n\t\t\texpect(error).toEqual(\n\t\t\t\tnew Error(\n\t\t\t\t\t'Federation requires either a User Pool or Identity Pool in config'\n\t\t\t\t)\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "Identity Pool Missing Tokens",
            "suites": [
                "auth unit test",
                "federatedSignIn test"
            ],
            "updatePoint": {
                "line": 3383,
                "column": 36
            },
            "line": 3383,
            "code": "\t\ttest('Identity Pool Missing Tokens', async () => {\n\t\t\tconst options: AuthOptions = {\n\t\t\t\tregion: 'region',\n\t\t\t\tidentityPoolId: 'awsCognitoIdentityPoolId',\n\t\t\t};\n\n\t\t\tconst auth = new Auth(options);\n\n\t\t\tlet error;\n\t\t\ttry {\n\t\t\t\tawait auth.federatedSignIn();\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\n\t\t\texpect(error).toEqual(\n\t\t\t\tnew Error(\n\t\t\t\t\t'Federation with Identity Pools requires tokens passed as arguments'\n\t\t\t\t)\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "Identity Pools Only",
            "suites": [
                "auth unit test",
                "federatedSignIn test"
            ],
            "updatePoint": {
                "line": 3405,
                "column": 27
            },
            "line": 3405,
            "code": "\t\ttest('Identity Pools Only', async () => {\n\t\t\tconst options: AuthOptions = {\n\t\t\t\tregion: 'region',\n\t\t\t\tidentityPoolId: 'awsCognitoIdentityPoolId',\n\t\t\t};\n\n\t\t\tconst auth = new Auth(options);\n\t\t\tlet user = null;\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'set')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\tuser = { name: 'username', email: 'xxx@email.com' };\n\t\t\t\t\treturn Promise.resolve('cred' as any);\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'currentAuthenticatedUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\tif (!user) return Promise.reject('error');\n\t\t\t\t\telse return Promise.resolve(user);\n\t\t\t\t});\n\n\t\t\tawait auth.federatedSignIn(\n\t\t\t\t'google',\n\t\t\t\t{ token: 'token', expires_at: 1234 },\n\t\t\t\t{ name: 'username' }\n\t\t\t);\n\n\t\t\texpect(spyon).toBeCalled();\n\t\t\texpect(spyon2).toBeCalled();\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "User Pools Only",
            "suites": [
                "auth unit test",
                "federatedSignIn test"
            ],
            "updatePoint": {
                "line": 3438,
                "column": 23
            },
            "line": 3438,
            "code": "\t\ttest('User Pools Only', async () => {\n\t\t\tconst urlOpener = jest.fn();\n\n\t\t\tconst options: AuthOptions = {\n\t\t\t\tregion: 'region',\n\t\t\t\tuserPoolId: 'userPoolId',\n\t\t\t\toauth: {\n\t\t\t\t\tdomain: 'mydomain.auth.us-east-1.amazoncognito.com',\n\t\t\t\t\tscope: ['aws.cognito.signin.user.admin'],\n\t\t\t\t\tredirectSignIn: 'http://localhost:3000/',\n\t\t\t\t\tredirectSignOut: 'http://localhost:3000/',\n\t\t\t\t\tresponseType: 'code',\n\t\t\t\t\turlOpener,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst auth = new Auth(options);\n\n\t\t\tconst spyon3 = jest.spyOn(OAuth.prototype, 'oauthSignIn');\n\n\t\t\tawait auth.federatedSignIn();\n\n\t\t\texpect(spyon3).toBeCalled();\n\t\t\tspyon3.mockClear();\n\t\t\texpect(urlOpener).toBeCalled();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "User Pools and Identity Pools",
            "suites": [
                "auth unit test",
                "federatedSignIn test"
            ],
            "updatePoint": {
                "line": 3465,
                "column": 37
            },
            "line": 3465,
            "code": "\t\ttest('User Pools and Identity Pools', async () => {\n\t\t\tconst urlOpener = jest.fn();\n\n\t\t\tconst options: AuthOptions = {\n\t\t\t\tregion: 'region',\n\t\t\t\tidentityPoolId: 'awsCognitoIdentityPoolId',\n\t\t\t\tuserPoolId: 'userPoolId',\n\t\t\t\toauth: {\n\t\t\t\t\tdomain: 'mydomain.auth.us-east-1.amazoncognito.com',\n\t\t\t\t\tscope: ['aws.cognito.signin.user.admin'],\n\t\t\t\t\tredirectSignIn: 'http://localhost:3000/',\n\t\t\t\t\tredirectSignOut: 'http://localhost:3000/',\n\t\t\t\t\tresponseType: 'code',\n\t\t\t\t\turlOpener,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst auth = new Auth(options);\n\n\t\t\tconst spyon3 = jest.spyOn(OAuth.prototype, 'oauthSignIn');\n\n\t\t\tlet user = null;\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(Credentials, 'set')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\tuser = { name: 'username', email: 'xxx@email.com' };\n\t\t\t\t\treturn Promise.resolve('cred' as any);\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'currentAuthenticatedUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\tif (!user) return Promise.reject('error');\n\t\t\t\t\telse return Promise.resolve(user);\n\t\t\t\t});\n\n\t\t\tawait auth.federatedSignIn(\n\t\t\t\t'google',\n\t\t\t\t{ token: 'token', expires_at: 1234 },\n\t\t\t\t{ name: 'username' }\n\t\t\t);\n\n\t\t\texpect(spyon).toBeCalled();\n\t\t\texpect(spyon2).toBeCalled();\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\n\t\t\texpect(spyon3).not.toBeCalled();\n\t\t\tspyon3.mockClear();\n\t\t\texpect(urlOpener).not.toBeCalled();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "User Pools Code Flow",
            "suites": [
                "auth unit test",
                "handleAuthResponse test"
            ],
            "updatePoint": {
                "line": 3536,
                "column": 28
            },
            "line": 3536,
            "code": "\t\ttest('User Pools Code Flow', async () => {\n\t\t\tconst options: AuthOptions = {\n\t\t\t\tregion: 'region',\n\t\t\t\tuserPoolId: 'userPoolId',\n\t\t\t\toauth: {\n\t\t\t\t\tdomain: 'mydomain.auth.us-east-1.amazoncognito.com',\n\t\t\t\t\tscope: ['aws.cognito.signin.user.admin'],\n\t\t\t\t\tredirectSignIn: 'http://localhost:3000/',\n\t\t\t\t\tredirectSignOut: 'http://localhost:3000/',\n\t\t\t\t\tresponseType: 'code',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst auth = new Auth(options);\n\n\t\t\tconst handleAuthResponseSpy = jest\n\t\t\t\t.spyOn(OAuth.prototype, 'handleAuthResponse')\n\t\t\t\t.mockReturnValueOnce({ idToken: '' } as any);\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUserSession.prototype, 'getIdToken')\n\t\t\t\t.mockReturnValueOnce({ decodePayload: () => ({}) } as any);\n\t\t\tjest.spyOn(Credentials, 'set').mockImplementationOnce(c => c);\n\t\t\t(auth as any).createCognitoUser = jest.fn(() => ({\n\t\t\t\tgetUsername: jest.fn(),\n\t\t\t\tsetSignInUserSession: jest.fn(),\n\t\t\t}));\n\t\t\t// Mock to help assert invocation order of other spies\n\t\t\tconst trackSpies = jest.fn();\n\t\t\tconst replaceStateSpy = jest\n\t\t\t\t.spyOn(window.history, 'replaceState')\n\t\t\t\t.mockImplementation((stateObj, title, url) => {\n\t\t\t\t\ttrackSpies(\n\t\t\t\t\t\t`window.history.replaceState(${JSON.stringify(\n\t\t\t\t\t\t\tstateObj\n\t\t\t\t\t\t)}, ${JSON.stringify(title)}, '${url}')`\n\t\t\t\t\t);\n\t\t\t\t\treturn this;\n\t\t\t\t});\n\t\t\tconst hubSpy = jest\n\t\t\t\t.spyOn(Hub, 'dispatch')\n\t\t\t\t.mockImplementation((channel, { event }) =>\n\t\t\t\t\t// payload.data isn't necessary for tracking order of dispatch events\n\t\t\t\t\ttrackSpies(\n\t\t\t\t\t\t`Hub.dispatch('${channel}', { data: ..., event: '${event}' })`\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\tconst code = 'XXXX-YYY-ZZZ';\n\t\t\tconst state = 'STATEABC';\n\t\t\tconst url = `${\n\t\t\t\t(options.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t}?code=${code}&state=${state}`;\n\n\t\t\t(oauthStorage.getState as jest.Mock<any>).mockReturnValueOnce(state);\n\t\t\tawait (auth as any)._handleAuthResponse(url);\n\n\t\t\texpect(handleAuthResponseSpy).toHaveBeenCalledWith(url);\n\t\t\texpect(replaceStateSpy).toHaveBeenCalledWith(\n\t\t\t\t{},\n\t\t\t\tnull,\n\t\t\t\t(options.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t);\n\n\t\t\t// replaceState should be called *prior* to `signIn` dispatch,\n\t\t\t// so that customers can override with a new value\n\t\t\texpect(trackSpies.mock.calls).toMatchInlineSnapshot(`\n\t\t\tArray [\n\t\t\t  Array [\n\t\t\t    \"Hub.dispatch('auth', { data: ..., event: 'parsingCallbackUrl' })\",\n\t\t\t  ],\n\t\t\t  Array [\n\t\t\t    \"window.history.replaceState({}, null, 'http://localhost:3000/')\",\n\t\t\t  ],\n\t\t\t  Array [\n\t\t\t    \"Hub.dispatch('auth', { data: ..., event: 'signIn' })\",\n\t\t\t  ],\n\t\t\t  Array [\n\t\t\t    \"Hub.dispatch('auth', { data: ..., event: 'cognitoHostedUI' })\",\n\t\t\t  ],\n\t\t\t]\n\t\t`);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "User Pools Implicit Flow",
            "suites": [
                "auth unit test",
                "handleAuthResponse test"
            ],
            "updatePoint": {
                "line": 3619,
                "column": 32
            },
            "line": 3619,
            "code": "\t\ttest('User Pools Implicit Flow', async () => {\n\t\t\tconst options: AuthOptions = {\n\t\t\t\tregion: 'region',\n\t\t\t\tuserPoolId: 'userPoolId',\n\t\t\t\toauth: {\n\t\t\t\t\tdomain: 'mydomain.auth.us-east-1.amazoncognito.com',\n\t\t\t\t\tscope: ['aws.cognito.signin.user.admin'],\n\t\t\t\t\tredirectSignIn: 'http://localhost:3000/',\n\t\t\t\t\tredirectSignOut: 'http://localhost:3000/',\n\t\t\t\t\tresponseType: 'token',\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst auth = new Auth(options);\n\n\t\t\tconst handleAuthResponseSpy = jest\n\t\t\t\t.spyOn(OAuth.prototype, 'handleAuthResponse')\n\t\t\t\t.mockReturnValueOnce({ idToken: '' } as any);\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUserSession.prototype, 'getIdToken')\n\t\t\t\t.mockReturnValueOnce({ decodePayload: () => ({}) } as any);\n\t\t\tjest.spyOn(Credentials, 'set').mockImplementationOnce(c => c);\n\t\t\t(auth as any).createCognitoUser = jest.fn(() => ({\n\t\t\t\tgetUsername: jest.fn(),\n\t\t\t\tsetSignInUserSession: jest.fn(),\n\t\t\t}));\n\t\t\tconst replaceStateSpy = jest\n\t\t\t\t.spyOn(window.history, 'replaceState')\n\t\t\t\t.mockReturnThis();\n\n\t\t\tconst token = 'XXXX.YYY.ZZZ';\n\t\t\tconst state = 'STATEABC';\n\t\t\tconst url = `${\n\t\t\t\t(options.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t}#access_token=${token}&state=${state}`;\n\n\t\t\tawait (auth as any)._handleAuthResponse(url);\n\n\t\t\texpect(handleAuthResponseSpy).toHaveBeenCalledWith(url);\n\t\t\texpect(replaceStateSpy).toHaveBeenCalledWith(\n\t\t\t\t{},\n\t\t\t\tnull,\n\t\t\t\t(options.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "No User Pools",
            "suites": [
                "auth unit test",
                "handleAuthResponse test"
            ],
            "updatePoint": {
                "line": 3665,
                "column": 21
            },
            "line": 3665,
            "code": "\t\ttest('No User Pools', async () => {\n\t\t\tconst urlOpener = jest.fn();\n\n\t\t\tconst options: AuthOptions = {};\n\n\t\t\tconst auth = new Auth(options);\n\n\t\t\tlet error;\n\t\t\ttry {\n\t\t\t\tawait (auth as any)._handleAuthResponse(' ');\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\n\t\t\texpect(error).toEqual(\n\t\t\t\tnew Error('OAuth responses require a User Pool defined in config')\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "User Pools and Identity Pools",
            "suites": [
                "auth unit test",
                "handleAuthResponse test"
            ],
            "updatePoint": {
                "line": 3684,
                "column": 37
            },
            "line": 3684,
            "code": "\t\ttest('User Pools and Identity Pools', async () => {\n\t\t\tconst options: AuthOptions = {\n\t\t\t\tregion: 'region',\n\t\t\t\tuserPoolId: 'userPoolId',\n\t\t\t\toauth: {\n\t\t\t\t\tdomain: 'mydomain.auth.us-east-1.amazoncognito.com',\n\t\t\t\t\tscope: ['aws.cognito.signin.user.admin'],\n\t\t\t\t\tredirectSignIn: 'http://localhost:3000/',\n\t\t\t\t\tredirectSignOut: 'http://localhost:3000/',\n\t\t\t\t\tresponseType: 'code',\n\t\t\t\t},\n\t\t\t\tidentityPoolId: 'awsCognitoIdentityPoolId',\n\t\t\t};\n\n\t\t\tconst auth = new Auth(options);\n\n\t\t\tconst handleAuthResponseSpy = jest\n\t\t\t\t.spyOn(OAuth.prototype, 'handleAuthResponse')\n\t\t\t\t.mockReturnValueOnce({ idToken: '' } as any);\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUserSession.prototype, 'getIdToken')\n\t\t\t\t.mockReturnValueOnce({ decodePayload: () => ({}) } as any);\n\t\t\tjest.spyOn(Credentials, 'set').mockImplementationOnce(c => c);\n\t\t\t(auth as any).createCognitoUser = jest.fn(() => ({\n\t\t\t\tgetUsername: jest.fn(),\n\t\t\t\tsetSignInUserSession: jest.fn(),\n\t\t\t}));\n\t\t\tconst replaceStateSpy = jest\n\t\t\t\t.spyOn(window.history, 'replaceState')\n\t\t\t\t.mockReturnThis();\n\n\t\t\tconst code = 'XXXX-YYY-ZZZ';\n\t\t\tconst url = `${\n\t\t\t\t(options.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t}?code=${code}`;\n\t\t\tawait (auth as any)._handleAuthResponse(url);\n\n\t\t\texpect(handleAuthResponseSpy).toHaveBeenCalledWith(url);\n\t\t\texpect(replaceStateSpy).toHaveBeenCalledWith(\n\t\t\t\t{},\n\t\t\t\tnull,\n\t\t\t\t(options.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case with unverified",
            "suites": [
                "auth unit test",
                "verifiedContact test"
            ],
            "updatePoint": {
                "line": 3731,
                "column": 34
            },
            "line": 3731,
            "code": "\t\ttest('happy case with unverified', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'userAttributes')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res: any, rej) => {\n\t\t\t\t\t\tres([\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: 'email',\n\t\t\t\t\t\t\t\tValue: 'email@amazon.com',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: 'phone_number',\n\t\t\t\t\t\t\t\tValue: '+12345678901',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect(await auth.verifiedContact(user)).toEqual({\n\t\t\t\tunverified: { email: 'email@amazon.com', phone_number: '+12345678901' },\n\t\t\t\tverified: {},\n\t\t\t});\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case with verified",
            "suites": [
                "auth unit test",
                "verifiedContact test"
            ],
            "updatePoint": {
                "line": 3763,
                "column": 32
            },
            "line": 3763,
            "code": "\t\ttest('happy case with verified', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'userAttributes')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res: any, rej) => {\n\t\t\t\t\t\tres([\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: 'email',\n\t\t\t\t\t\t\t\tValue: 'email@amazon.com',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: 'phone_number',\n\t\t\t\t\t\t\t\tValue: '+12345678901',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: 'email_verified',\n\t\t\t\t\t\t\t\tValue: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: 'phone_number_verified',\n\t\t\t\t\t\t\t\tValue: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect(await auth.verifiedContact(user)).toEqual({\n\t\t\t\tunverified: {},\n\t\t\t\tverified: { email: 'email@amazon.com', phone_number: '+12345678901' },\n\t\t\t});\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case with verified as strings",
            "suites": [
                "auth unit test",
                "verifiedContact test"
            ],
            "updatePoint": {
                "line": 3803,
                "column": 43
            },
            "line": 3803,
            "code": "\t\ttest('happy case with verified as strings', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'userAttributes')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new Promise((res: any, rej) => {\n\t\t\t\t\t\tres([\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: 'email',\n\t\t\t\t\t\t\t\tValue: 'email@amazon.com',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: 'phone_number',\n\t\t\t\t\t\t\t\tValue: '+12345678901',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: 'email_verified',\n\t\t\t\t\t\t\t\tValue: 'true',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: 'phone_number_verified',\n\t\t\t\t\t\t\t\tValue: 'True',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\texpect(await auth.verifiedContact(user)).toEqual({\n\t\t\t\tunverified: {},\n\t\t\t\tverified: { email: 'email@amazon.com', phone_number: '+12345678901' },\n\t\t\t});\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "currentUserPoolUser test"
            ],
            "updatePoint": {
                "line": 3849,
                "column": 18
            },
            "line": 3849,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\t\treturn callback(null, session);\n\t\t\t\t});\n\n\t\t\tconst spyon3 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getUserData')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tconst data = {\n\t\t\t\t\t\tPreferredMfaSetting: 'SMS',\n\t\t\t\t\t\tUserAttributes: [{ Name: 'address', Value: 'xxxx' }],\n\t\t\t\t\t};\n\t\t\t\t\tcallback(null, data);\n\t\t\t\t});\n\n\t\t\tconst spyon4 = jest\n\t\t\t\t.spyOn(CognitoUserSession.prototype, 'getAccessToken')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new CognitoAccessToken({ AccessToken: 'accessToken' });\n\t\t\t\t});\n\n\t\t\tconst spyon5 = jest\n\t\t\t\t.spyOn(CognitoAccessToken.prototype, 'decodePayload')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn { scope: USER_ADMIN_SCOPE };\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(await auth.currentUserPoolUser()).toBe(\n\t\t\t\tObject.assign(user, {\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\taddress: 'xxxx',\n\t\t\t\t\t},\n\t\t\t\t\tpreferredMFA: 'SMS',\n\t\t\t\t})\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no current user",
            "suites": [
                "auth unit test",
                "currentUserPoolUser test"
            ],
            "updatePoint": {
                "line": 3900,
                "column": 23
            },
            "line": 3900,
            "code": "\t\ttest('no current user', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.currentUserPoolUser();\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('No current user');\n\t\t\t}\n\t\t\tspyon.mockReset();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "No userPool in config",
            "suites": [
                "auth unit test",
                "currentUserPoolUser test"
            ],
            "updatePoint": {
                "line": 3922,
                "column": 29
            },
            "line": 3922,
            "code": "\t\ttest('No userPool in config', async () => {\n\t\t\tconst auth = new Auth(authOptionsWithNoUserPoolId);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst errorMessage = new NoUserPoolError(\n\t\t\t\tAuthErrorTypes.MissingAuthConfig\n\t\t\t);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(auth.currentUserPoolUser().then()).rejects.toThrow(\n\t\t\t\tNoUserPoolError\n\t\t\t);\n\t\t\texpect(auth.currentUserPoolUser().then()).rejects.toEqual(errorMessage);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "get session error",
            "suites": [
                "auth unit test",
                "currentUserPoolUser test"
            ],
            "updatePoint": {
                "line": 3939,
                "column": 25
            },
            "line": 3939,
            "code": "\t\ttest('get session error', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\t\treturn callback('err', null);\n\t\t\t\t});\n\n\t\t\tconst spyon3 = jest.spyOn(CognitoUser.prototype, 'getUserData');\n\n\t\t\texpect.assertions(2);\n\t\t\ttry {\n\t\t\t\tawait auth.currentUserPoolUser();\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('err');\n\t\t\t\texpect(spyon3).not.toBeCalled();\n\t\t\t}\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "get session error - refresh token revoked should signout user",
            "suites": [
                "auth unit test",
                "currentUserPoolUser test"
            ],
            "updatePoint": {
                "line": 3968,
                "column": 69
            },
            "line": 3968,
            "code": "\t\ttest('get session error - refresh token revoked should signout user', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tconst getSessionSpy = jest\n\t\t\t\t.spyOn(user, 'getSession')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tcallback(new Error('Refresh Token has been revoked'), null);\n\t\t\t\t});\n\t\t\tconst userSignoutSpy = jest\n\t\t\t\t.spyOn(user, 'signOut')\n\t\t\t\t.mockImplementationOnce(() => {});\n\t\t\tconst credentialsClearSpy = jest.spyOn(Credentials, 'clear');\n\t\t\tconst hubSpy = jest.spyOn(Hub, 'dispatch');\n\t\t\tawait expect(auth.currentUserPoolUser()).rejects.toThrowError(\n\t\t\t\t'Refresh Token has been revoked'\n\t\t\t);\n\t\t\texpect(getSessionSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(userSignoutSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(credentialsClearSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(hubSpy).toHaveBeenCalledWith(\n\t\t\t\t'auth',\n\t\t\t\t{ data: null, event: 'signOut', message: 'A user has been signed out' },\n\t\t\t\t'Auth',\n\t\t\t\tSymbol.for('amplify_default')\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "get user data error because of user is deleted, disabled or token has been revoked",
            "suites": [
                "auth unit test",
                "currentUserPoolUser test"
            ],
            "updatePoint": {
                "line": 4003,
                "column": 90
            },
            "line": 4003,
            "code": "\t\ttest('get user data error because of user is deleted, disabled or token has been revoked', async () => {\n\t\t\tjest\n\t\t\t\t.spyOn(StorageHelper.prototype, 'getStorage')\n\t\t\t\t.mockImplementation(createMockLocalStorage);\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\t\treturn callback(null, session);\n\t\t\t\t});\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getUserData')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tcallback(new Error('User is disabled.'), null);\n\t\t\t\t});\n\t\t\tconst userSignoutSpy = jest.spyOn(CognitoUser.prototype, 'signOut');\n\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUserSession.prototype, 'getAccessToken')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new CognitoAccessToken({ AccessToken: 'accessToken' });\n\t\t\t\t});\n\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoAccessToken.prototype, 'decodePayload')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn { scope: USER_ADMIN_SCOPE };\n\t\t\t\t});\n\t\t\tconst hubSpy = jest.spyOn(Hub, 'dispatch');\n\t\t\tawait expect(auth.currentUserPoolUser()).rejects.toThrow(\n\t\t\t\t'User is disabled.'\n\t\t\t);\n\t\t\texpect(hubSpy).toHaveBeenCalledWith(\n\t\t\t\t'auth',\n\t\t\t\t{ data: null, event: 'signOut', message: 'A user has been signed out' },\n\t\t\t\t'Auth',\n\t\t\t\tSymbol.for('amplify_default')\n\t\t\t);\n\t\t\texpect(userSignoutSpy).toHaveBeenCalledTimes(1);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "get user data error because of user is deleted, disabled or token has been revoked - oAuth case",
            "suites": [
                "auth unit test",
                "currentUserPoolUser test"
            ],
            "updatePoint": {
                "line": 4055,
                "column": 103
            },
            "line": 4055,
            "code": "\t\ttest('get user data error because of user is deleted, disabled or token has been revoked - oAuth case', async () => {\n\t\t\tconst mockLocalStorage = createMockLocalStorage();\n\t\t\tjest\n\t\t\t\t.spyOn(StorageHelper.prototype, 'getStorage')\n\t\t\t\t.mockImplementation(() => mockLocalStorage);\n\t\t\tmockLocalStorage.setItem('amplify-signin-with-hostedUI', 'true');\n\n\t\t\t// need window.open defined as oAuthHandler will invoke window.open\n\t\t\tjest.spyOn(window, 'open').mockImplementationOnce(() => {\n\t\t\t\treturn {} as Window;\n\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptionsWithHostedUIConfig);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\t\treturn callback(null, session);\n\t\t\t\t});\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getUserData')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tcallback(new Error('User is disabled.'), null);\n\t\t\t\t});\n\t\t\tconst userSignoutSpy = jest.spyOn(CognitoUser.prototype, 'signOut');\n\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUserSession.prototype, 'getAccessToken')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new CognitoAccessToken({ AccessToken: 'accessToken' });\n\t\t\t\t});\n\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoAccessToken.prototype, 'decodePayload')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn { scope: USER_ADMIN_SCOPE };\n\t\t\t\t});\n\t\t\tawait expect(auth.currentUserPoolUser()).rejects.toThrow(\n\t\t\t\t'Session is invalid due to: User is disabled. and failed to clean up invalid session: Signout timeout fail'\n\t\t\t);\n\t\t\texpect(userSignoutSpy).toHaveBeenCalledTimes(1);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "bypass the error if the user is not deleted or disabled",
            "suites": [
                "auth unit test",
                "currentUserPoolUser test"
            ],
            "updatePoint": {
                "line": 4107,
                "column": 63
            },
            "line": 4107,
            "code": "\t\ttest('bypass the error if the user is not deleted or disabled', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\t\treturn callback(null, session);\n\t\t\t\t});\n\t\t\tconst spyon3 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getUserData')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tcallback(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmessage: 'other error',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnull\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\tconst spyon4 = jest\n\t\t\t\t.spyOn(CognitoUserSession.prototype, 'getAccessToken')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new CognitoAccessToken({ AccessToken: 'accessToken' });\n\t\t\t\t});\n\n\t\t\tconst spyon5 = jest\n\t\t\t\t.spyOn(CognitoAccessToken.prototype, 'decodePayload')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn { scope: USER_ADMIN_SCOPE };\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\n\t\t\texpect(await auth.currentUserPoolUser()).toEqual(user);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "directly return the user if no permission(scope) to get the user data",
            "suites": [
                "auth unit test",
                "currentUserPoolUser test"
            ],
            "updatePoint": {
                "line": 4152,
                "column": 77
            },
            "line": 4152,
            "code": "\t\ttest('directly return the user if no permission(scope) to get the user data', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn user;\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\t\treturn callback(null, session);\n\t\t\t\t});\n\n\t\t\tconst spyon3 = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getUserData')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tconst data = {\n\t\t\t\t\t\tPreferredMfaSetting: 'SMS',\n\t\t\t\t\t\tUserAttributes: [{ Name: 'address', Value: 'xxxx' }],\n\t\t\t\t\t};\n\t\t\t\t\tcallback(null, data);\n\t\t\t\t});\n\n\t\t\tconst spyon4 = jest\n\t\t\t\t.spyOn(CognitoUserSession.prototype, 'getAccessToken')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new CognitoAccessToken({ AccessToken: 'accessToken' });\n\t\t\t\t});\n\n\t\t\tconst spyon5 = jest\n\t\t\t\t.spyOn(CognitoAccessToken.prototype, 'decodePayload')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn { scope: '' };\n\t\t\t\t});\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(spyon3).not.toBeCalled();\n\t\t\texpect(await auth.currentUserPoolUser()).toBe(user);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "sendCustomChallengeAnswer"
            ],
            "updatePoint": {
                "line": 4199,
                "column": 18
            },
            "line": 4199,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'sendCustomChallengeAnswer')\n\t\t\t\t.mockImplementationOnce((challengeResponses, callback) => {\n\t\t\t\t\tcallback.onSuccess(session);\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst userAfterCustomChallengeAnswer = Object.assign(\n\t\t\t\tnew CognitoUser({\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t\tPool: userPool,\n\t\t\t\t}),\n\t\t\t\t{\n\t\t\t\t\tchallengeName: 'CUSTOM_CHALLENGE',\n\t\t\t\t\tchallengeParam: 'challengeParam',\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(auth, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(user);\n\t\t\t\t});\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(\n\t\t\t\tawait auth.sendCustomChallengeAnswer(\n\t\t\t\t\tuserAfterCustomChallengeAnswer,\n\t\t\t\t\t'challengeResponse'\n\t\t\t\t)\n\t\t\t).toEqual(user);\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata default",
            "suites": [
                "auth unit test",
                "sendCustomChallengeAnswer"
            ],
            "updatePoint": {
                "line": 4239,
                "column": 41
            },
            "line": 4239,
            "code": "\t\ttest('happy case clientMetadata default', async () => {\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\n\t\t\tconst spyon = jest.spyOn(\n\t\t\t\tCognitoUser.prototype,\n\t\t\t\t'sendCustomChallengeAnswer'\n\t\t\t);\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(auth, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(user);\n\t\t\t\t});\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tawait auth.sendCustomChallengeAnswer(user, 'answer');\n\n\t\t\texpect(\n\t\t\t\tawait CognitoUser.prototype.sendCustomChallengeAnswer\n\t\t\t).toBeCalledWith('answer', authCallbacks, { foo: 'bar' });\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case clientMetadata parameter",
            "suites": [
                "auth unit test",
                "sendCustomChallengeAnswer"
            ],
            "updatePoint": {
                "line": 4264,
                "column": 43
            },
            "line": 4264,
            "code": "\t\ttest('happy case clientMetadata parameter', async () => {\n\t\t\tconst auth = new Auth(authOptionsWithClientMetadata);\n\n\t\t\tconst spyon = jest.spyOn(\n\t\t\t\tCognitoUser.prototype,\n\t\t\t\t'sendCustomChallengeAnswer'\n\t\t\t);\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(auth, 'currentUserPoolUser')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve(user);\n\t\t\t\t});\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\n\t\t\tawait auth.sendCustomChallengeAnswer(user, 'answer', { custom: 'value' });\n\n\t\t\texpect(\n\t\t\t\tawait CognitoUser.prototype.sendCustomChallengeAnswer\n\t\t\t).toBeCalledWith('answer', authCallbacks, { custom: 'value' });\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "customChallenge",
            "suites": [
                "auth unit test",
                "sendCustomChallengeAnswer"
            ],
            "updatePoint": {
                "line": 4289,
                "column": 23
            },
            "line": 4289,
            "code": "\t\ttest('customChallenge', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'sendCustomChallengeAnswer')\n\t\t\t\t.mockImplementationOnce((challengeResponses, callback) => {\n\t\t\t\t\tcallback.customChallenge('challengeParam');\n\t\t\t\t});\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst userAfterCustomChallengeAnswer = Object.assign(\n\t\t\t\tnew CognitoUser({\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t\tPool: userPool,\n\t\t\t\t}),\n\t\t\t\t{\n\t\t\t\t\tchallengeName: 'CUSTOM_CHALLENGE',\n\t\t\t\t\tchallengeParam: 'challengeParam',\n\t\t\t\t}\n\t\t\t);\n\n\t\t\texpect.assertions(1);\n\t\t\texpect(\n\t\t\t\tawait auth.sendCustomChallengeAnswer(\n\t\t\t\t\tuserAfterCustomChallengeAnswer,\n\t\t\t\t\t'challengeResponse'\n\t\t\t\t)\n\t\t\t).toEqual(userAfterCustomChallengeAnswer);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "onFailure",
            "suites": [
                "auth unit test",
                "sendCustomChallengeAnswer"
            ],
            "updatePoint": {
                "line": 4322,
                "column": 17
            },
            "line": 4322,
            "code": "\t\ttest('onFailure', async () => {\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'sendCustomChallengeAnswer')\n\t\t\t\t.mockImplementationOnce((challengeResponses, callback) => {\n\t\t\t\t\tcallback.onFailure('err');\n\t\t\t\t});\n\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst userAfterCustomChallengeAnswer = Object.assign(\n\t\t\t\tnew CognitoUser({\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t\tPool: userPool,\n\t\t\t\t}),\n\t\t\t\t{\n\t\t\t\t\tchallengeName: 'CUSTOM_CHALLENGE',\n\t\t\t\t\tchallengeParam: 'challengeParam',\n\t\t\t\t}\n\t\t\t);\n\n\t\t\texpect.assertions(1);\n\t\t\ttry {\n\t\t\t\tawait auth.sendCustomChallengeAnswer(\n\t\t\t\t\tuserAfterCustomChallengeAnswer,\n\t\t\t\t\t'challengeResponse'\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('err');\n\t\t\t}\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "no userPool",
            "suites": [
                "auth unit test",
                "sendCustomChallengeAnswer"
            ],
            "updatePoint": {
                "line": 4354,
                "column": 19
            },
            "line": 4354,
            "code": "\t\ttest('no userPool', async () => {\n\t\t\tconst spyon = jest.spyOn(\n\t\t\t\tCognitoUser.prototype,\n\t\t\t\t'sendCustomChallengeAnswer'\n\t\t\t);\n\n\t\t\tconst auth = new Auth(authOptionsWithNoUserPoolId);\n\t\t\tconst userAfterCustomChallengeAnswer = Object.assign(\n\t\t\t\tnew CognitoUser({\n\t\t\t\t\tUsername: 'username',\n\t\t\t\t\tPool: userPool,\n\t\t\t\t}),\n\t\t\t\t{\n\t\t\t\t\tchallengeName: 'CUSTOM_CHALLENGE',\n\t\t\t\t\tchallengeParam: 'challengeParam',\n\t\t\t\t}\n\t\t\t);\n\t\t\tconst errorMessage = new NoUserPoolError(\n\t\t\t\tAuthErrorTypes.MissingAuthConfig\n\t\t\t);\n\n\t\t\texpect.assertions(2);\n\t\t\texpect(\n\t\t\t\tauth\n\t\t\t\t\t.sendCustomChallengeAnswer(\n\t\t\t\t\t\tuserAfterCustomChallengeAnswer,\n\t\t\t\t\t\t'challengeResponse'\n\t\t\t\t\t)\n\t\t\t\t\t.then()\n\t\t\t).rejects.toThrow(AuthError);\n\n\t\t\texpect(\n\t\t\t\tauth\n\t\t\t\t\t.sendCustomChallengeAnswer(\n\t\t\t\t\t\tuserAfterCustomChallengeAnswer,\n\t\t\t\t\t\t'challengeResponse'\n\t\t\t\t\t)\n\t\t\t\t\t.then()\n\t\t\t).rejects.toEqual(errorMessage);\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "remember device happy path",
            "suites": [
                "auth unit test",
                "Device Tracking"
            ],
            "updatePoint": {
                "line": 4399,
                "column": 34
            },
            "line": 4399,
            "code": "\t\ttest('remember device happy path', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserSession.prototype, 'getAccessToken')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new CognitoAccessToken({ AccessToken: 'accessToken' });\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(CognitoAccessToken.prototype, 'decodePayload')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn { scope: '' };\n\t\t\t\t});\n\n\t\t\tconst spyOnCognito = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'setDeviceStatusRemembered')\n\t\t\t\t.mockImplementationOnce(\n\t\t\t\t\t(obj: {\n\t\t\t\t\t\tonSuccess: (success: string) => void;\n\t\t\t\t\t\tonFailure: (err: any) => void;\n\t\t\t\t\t}) => {\n\t\t\t\t\t\tobj.onSuccess('SUCCESS');\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\tawait auth.rememberDevice().then(res => {\n\t\t\t\texpect(spyOnCognito).toBeCalled();\n\t\t\t});\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t\tspyOnCognito.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "forget device happy path",
            "suites": [
                "auth unit test",
                "Device Tracking"
            ],
            "updatePoint": {
                "line": 4432,
                "column": 32
            },
            "line": 4432,
            "code": "\t\ttest('forget device happy path', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserSession.prototype, 'getAccessToken')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new CognitoAccessToken({ AccessToken: 'accessToken' });\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(CognitoAccessToken.prototype, 'decodePayload')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn { scope: '' };\n\t\t\t\t});\n\n\t\t\tconst spyOnCognito = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'forgetDevice')\n\t\t\t\t.mockImplementationOnce(\n\t\t\t\t\t(obj: {\n\t\t\t\t\t\tonSuccess: (success: string) => void;\n\t\t\t\t\t\tonFailure: (err: any) => void;\n\t\t\t\t\t}) => {\n\t\t\t\t\t\tobj.onSuccess('SUCCESS');\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\tawait auth.forgetDevice().then(res => {\n\t\t\t\texpect(spyOnCognito).toBeCalled();\n\t\t\t});\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t\tspyOnCognito.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "list devices with no devices from Cognito happy path",
            "suites": [
                "auth unit test",
                "Device Tracking"
            ],
            "updatePoint": {
                "line": 4467,
                "column": 60
            },
            "line": 4467,
            "code": "\t\ttest('list devices with no devices from Cognito happy path', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserSession.prototype, 'getAccessToken')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new CognitoAccessToken({ AccessToken: 'accessToken' });\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(CognitoAccessToken.prototype, 'decodePayload')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn { scope: '' };\n\t\t\t\t});\n\n\t\t\tconst spyOnCognito = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'listDevices')\n\t\t\t\t.mockImplementationOnce(\n\t\t\t\t\t(\n\t\t\t\t\t\tMAX_DEVICES,\n\t\t\t\t\t\tnone: string,\n\t\t\t\t\t\tobj: {\n\t\t\t\t\t\t\tonSuccess: (success: Object) => void;\n\t\t\t\t\t\t\tonFailure: (err: any) => void;\n\t\t\t\t\t\t}\n\t\t\t\t\t) => {\n\t\t\t\t\t\tobj.onSuccess({ Devices: [] });\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\tawait auth.fetchDevices().then(res => {\n\t\t\t\texpect(spyOnCognito).toBeCalled();\n\t\t\t});\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t\tspyOnCognito.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "list devices with mock devices from Cognito happy path",
            "suites": [
                "auth unit test",
                "Device Tracking"
            ],
            "updatePoint": {
                "line": 4506,
                "column": 62
            },
            "line": 4506,
            "code": "\t\ttest('list devices with mock devices from Cognito happy path', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUserSession.prototype, 'getAccessToken')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn new CognitoAccessToken({ AccessToken: 'accessToken' });\n\t\t\t\t});\n\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(CognitoAccessToken.prototype, 'decodePayload')\n\t\t\t\t.mockImplementation(() => {\n\t\t\t\t\treturn { scope: '' };\n\t\t\t\t});\n\n\t\t\tconst spyOnCognito = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'listDevices')\n\t\t\t\t.mockImplementationOnce(\n\t\t\t\t\t(\n\t\t\t\t\t\tMAX_DEVICES,\n\t\t\t\t\t\tnone: string,\n\t\t\t\t\t\tobj: {\n\t\t\t\t\t\t\tonSuccess: (success: Object) => void;\n\t\t\t\t\t\t\tonFailure: (err: any) => void;\n\t\t\t\t\t\t}\n\t\t\t\t\t) => {\n\t\t\t\t\t\tobj.onSuccess({\n\t\t\t\t\t\t\tDevices: mockDeviceArray,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\tawait auth.fetchDevices().then(res => {\n\t\t\t\texpect(res).toMatchObject(transformedMockData);\n\t\t\t\texpect(spyOnCognito).toBeCalled();\n\t\t\t});\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t\tspyOnCognito.mockClear();\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy path",
            "suites": [
                "auth unit test",
                "getPreferredMFA test"
            ],
            "updatePoint": {
                "line": 4561,
                "column": 18
            },
            "line": 4561,
            "code": "\t\ttest('happy path', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst getUserDataSpy = jest\n\t\t\t\t.spyOn(user, 'getUserData')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tconst data = {\n\t\t\t\t\t\tPreferredMfaSetting: 'SMS',\n\t\t\t\t\t};\n\t\t\t\t\tcallback(null, data);\n\t\t\t\t});\n\t\t\tconst res = await auth.getPreferredMFA(user);\n\t\t\texpect(res).toEqual('SMS');\n\t\t\texpect(getUserDataSpy).toHaveBeenCalledTimes(1);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "should allow bypassCache",
            "suites": [
                "auth unit test",
                "getPreferredMFA test"
            ],
            "updatePoint": {
                "line": 4580,
                "column": 32
            },
            "line": 4580,
            "code": "\t\ttest('should allow bypassCache', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst getUserDataSpy = jest\n\t\t\t\t.spyOn(user, 'getUserData')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tconst data = {\n\t\t\t\t\t\tPreferredMfaSetting: 'SMS',\n\t\t\t\t\t};\n\t\t\t\t\tcallback(null, data);\n\t\t\t\t});\n\t\t\tconst res = await auth.getPreferredMFA(user, { bypassCache: true });\n\t\t\texpect(res).toEqual('SMS');\n\t\t\texpect(getUserDataSpy).toHaveBeenCalledWith(expect.any(Function), {\n\t\t\t\tbypassCache: true,\n\t\t\t});\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "get user data error because user is deleted, disabled or token has been revoked",
            "suites": [
                "auth unit test",
                "getPreferredMFA test"
            ],
            "updatePoint": {
                "line": 4601,
                "column": 87
            },
            "line": 4601,
            "code": "\t\ttest('get user data error because user is deleted, disabled or token has been revoked', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementation(() => user);\n\t\t\tconst getUserDataSpy = jest\n\t\t\t\t.spyOn(user, 'getUserData')\n\t\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\t\tcallback(new Error('Access Token has been revoked'), null);\n\t\t\t\t});\n\t\t\tconst userSignoutSpy = jest\n\t\t\t\t.spyOn(user, 'signOut')\n\t\t\t\t.mockImplementationOnce(() => {});\n\t\t\tconst credentialsClearSpy = jest.spyOn(Credentials, 'clear');\n\t\t\tconst hubSpy = jest.spyOn(Hub, 'dispatch');\n\n\t\t\tawait expect(\n\t\t\t\tauth.getPreferredMFA(user, { bypassCache: true })\n\t\t\t).rejects.toThrow('Access Token has been revoked');\n\t\t\texpect(getUserDataSpy).toHaveBeenCalledWith(expect.any(Function), {\n\t\t\t\tbypassCache: true,\n\t\t\t});\n\t\t\texpect(userSignoutSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(credentialsClearSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(hubSpy).toHaveBeenCalledWith(\n\t\t\t\t'auth',\n\t\t\t\t{ data: null, event: 'signOut', message: 'A user has been signed out' },\n\t\t\t\t'Auth',\n\t\t\t\tSymbol.for('amplify_default')\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy path",
            "suites": [
                "auth unit test",
                "setPreferredMFA test"
            ],
            "updatePoint": {
                "line": 4650,
                "column": 16
            },
            "line": 4650,
            "code": "\t\tit('happy path', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst getUserDataSpy = jest\n\t\t\t\t.spyOn(user, 'getUserData')\n\t\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\t\tconst data = {\n\t\t\t\t\t\tPreferredMfaSetting: 'SMS',\n\t\t\t\t\t};\n\t\t\t\t\tcallback(null, data);\n\t\t\t\t});\n\t\t\tconst setUserMfaPreferenceSpy = jest.spyOn(user, 'setUserMfaPreference');\n\t\t\tconst res = await auth.setPreferredMFA(user, 'SOFTWARE_TOKEN_MFA');\n\t\t\texpect(setUserMfaPreferenceSpy).toHaveBeenCalledWith(\n\t\t\t\tnull,\n\t\t\t\t{ Enabled: true, PreferredMfa: true },\n\t\t\t\texpect.any(Function)\n\t\t\t);\n\t\t\texpect(getUserDataSpy).toHaveBeenCalledWith(expect.any(Function), {\n\t\t\t\tbypassCache: true,\n\t\t\t});\n\t\t\t// once at the beginning, once after calling setUserMfaPreference\n\t\t\texpect(getUserDataSpy).toHaveBeenCalledTimes(2);\n\t\t\texpect(res).toStrictEqual('success');\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "get user data error because user is deleted, disabled or token has been revoked",
            "suites": [
                "auth unit test",
                "setPreferredMFA test"
            ],
            "updatePoint": {
                "line": 4679,
                "column": 87
            },
            "line": 4679,
            "code": "\t\ttest('get user data error because user is deleted, disabled or token has been revoked', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst user = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tjest\n\t\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t\t.mockImplementationOnce(() => user);\n\t\t\tconst getUserDataSpy = jest\n\t\t\t\t.spyOn(user, 'getUserData')\n\t\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\t\tcallback(new Error('Access Token has been revoked'), null);\n\t\t\t\t});\n\t\t\tconst userSignoutSpy = jest\n\t\t\t\t.spyOn(user, 'signOut')\n\t\t\t\t.mockImplementationOnce(() => {});\n\t\t\tconst credentialsClearSpy = jest.spyOn(Credentials, 'clear');\n\t\t\tconst hubSpy = jest.spyOn(Hub, 'dispatch');\n\t\t\tawait expect(\n\t\t\t\tauth.setPreferredMFA(user, 'SOFTWARE_TOKEN_MFA')\n\t\t\t).rejects.toThrow('Access Token has been revoked');\n\t\t\texpect(getUserDataSpy).toHaveBeenCalledWith(expect.any(Function), {\n\t\t\t\tbypassCache: true,\n\t\t\t});\n\t\t\texpect(userSignoutSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(credentialsClearSpy).toHaveBeenCalledTimes(1);\n\t\t\texpect(hubSpy).toHaveBeenCalledWith(\n\t\t\t\t'auth',\n\t\t\t\t{ data: null, event: 'signOut', message: 'A user has been signed out' },\n\t\t\t\t'Auth',\n\t\t\t\tSymbol.for('amplify_default')\n\t\t\t);\n\t\t});",
            "file": "auth-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "hosted UI in progress, signIn success",
            "suites": [
                "Hosted UI tests"
            ],
            "updatePoint": {
                "line": 205,
                "column": 44
            },
            "line": 205,
            "code": "\ttest('hosted UI in progress, signIn success', done => {\n\t\tconst auth = new Auth(authOptionsWithOAuth);\n\t\tconst user = new CognitoUser({\n\t\t\tUsername: 'username',\n\t\t\tPool: userPool,\n\t\t});\n\t\tconst spyonGetCurrentUser = jest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementationOnce(() => {\n\t\t\t\treturn user;\n\t\t\t});\n\t\tjest\n\t\t\t.spyOn(CognitoUser.prototype, 'getSession')\n\t\t\t.mockImplementation((callback: any) => {\n\t\t\t\treturn callback(null, session);\n\t\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUser.prototype, 'getUserData')\n\t\t\t.mockImplementationOnce((callback: any) => {\n\t\t\t\tconst data = {\n\t\t\t\t\tPreferredMfaSetting: 'SMS',\n\t\t\t\t\tUserAttributes: [{ Name: 'address', Value: 'xxxx' }],\n\t\t\t\t};\n\t\t\t\tcallback(null, data);\n\t\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserSession.prototype, 'getAccessToken')\n\t\t\t.mockImplementationOnce(() => {\n\t\t\t\treturn new CognitoAccessToken({ AccessToken: 'accessToken' });\n\t\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoAccessToken.prototype, 'decodePayload')\n\t\t\t.mockImplementation(() => {\n\t\t\t\treturn { scope: '' };\n\t\t\t});\n\n\t\texpect.assertions(2);\n\n\t\t(auth as any).oAuthFlowInProgress = true;\n\n\t\tauth.currentUserPoolUser().then(resUser => {\n\t\t\texpect(resUser).toEqual(user);\n\t\t\texpect(spyonGetCurrentUser).toBeCalledTimes(1);\n\t\t\tdone();\n\t\t});\n\n\t\tsetTimeout(() => {\n\t\t\tHub.dispatch('auth', {\n\t\t\t\tevent: 'cognitoHostedUI',\n\t\t\t});\n\t\t}, 0);\n\t});",
            "file": "hosted-ui.test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "globalSignOut hosted ui on browser, timeout reject",
            "suites": [
                "Hosted UI tests"
            ],
            "updatePoint": {
                "line": 261,
                "column": 57
            },
            "line": 261,
            "code": "\ttest('globalSignOut hosted ui on browser, timeout reject', async () => {\n\t\tjest.spyOn(StorageHelper.prototype, 'getStorage').mockImplementation(() => {\n\t\t\treturn {\n\t\t\t\tsetItem() {},\n\t\t\t\tgetItem() {\n\t\t\t\t\treturn 'true';\n\t\t\t\t},\n\t\t\t\tremoveItem() {},\n\t\t\t};\n\t\t});\n\n\t\tjest.spyOn(AmplifyCore, 'browserOrNode').mockImplementation(() => ({\n\t\t\tisBrowser: true,\n\t\t\tisNode: false,\n\t\t}));\n\n\t\tconst auth = new Auth(authOptionsWithOAuth);\n\n\t\tconst user = new CognitoUser({\n\t\t\tUsername: 'username',\n\t\t\tPool: userPool,\n\t\t});\n\n\t\tjest.spyOn(Credentials, 'clear').mockImplementationOnce(() => {\n\t\t\treturn Promise.resolve();\n\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementationOnce(() => {\n\t\t\t\treturn user;\n\t\t\t});\n\n\t\tconst spyGlobalSignOut = jest\n\t\t\t.spyOn(CognitoUser.prototype, 'globalSignOut')\n\t\t\t.mockImplementation(({ onSuccess }) => {\n\t\t\t\tonSuccess('success');\n\t\t\t});\n\n\t\t(auth as any)._oAuthHandler = {\n\t\t\tsignOut: () => {\n\t\t\t\t// testing timeout\n\t\t\t\treturn new Promise(() => {});\n\t\t\t},\n\t\t};\n\n\t\texpect.assertions(2);\n\n\t\tawait expect(auth.signOut({ global: true })).rejects.toThrowError(\n\t\t\t'Signout timeout fail'\n\t\t);\n\n\t\texpect(spyGlobalSignOut).toBeCalled();\n\t});",
            "file": "hosted-ui.test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "globalSignOut hosted ui on node, resolve undefined",
            "suites": [
                "Hosted UI tests"
            ],
            "updatePoint": {
                "line": 315,
                "column": 57
            },
            "line": 315,
            "code": "\ttest('globalSignOut hosted ui on node, resolve undefined', async () => {\n\t\tjest.spyOn(StorageHelper.prototype, 'getStorage').mockImplementation(() => {\n\t\t\treturn {\n\t\t\t\tsetItem() {},\n\t\t\t\tgetItem() {\n\t\t\t\t\treturn 'true';\n\t\t\t\t},\n\t\t\t\tremoveItem() {},\n\t\t\t};\n\t\t});\n\n\t\tjest.spyOn(AmplifyCore, 'browserOrNode').mockImplementation(() => ({\n\t\t\tisBrowser: false,\n\t\t\tisNode: true,\n\t\t}));\n\n\t\tconst auth = new Auth(authOptionsWithOAuth);\n\n\t\tconst user = new CognitoUser({\n\t\t\tUsername: 'username',\n\t\t\tPool: userPool,\n\t\t});\n\n\t\tjest.spyOn(Credentials, 'clear').mockImplementationOnce(() => {\n\t\t\treturn Promise.resolve();\n\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementationOnce(() => {\n\t\t\t\treturn user;\n\t\t\t});\n\n\t\tconst spyGlobalSignOut = jest\n\t\t\t.spyOn(CognitoUser.prototype, 'globalSignOut')\n\t\t\t.mockImplementation(({ onSuccess }) => {\n\t\t\t\tonSuccess('success');\n\t\t\t});\n\n\t\t(auth as any)._oAuthHandler = {\n\t\t\tsignOut: () => {\n\t\t\t\t// testing timeout\n\t\t\t\treturn new Promise(() => {});\n\t\t\t},\n\t\t};\n\n\t\texpect.assertions(2);\n\n\t\tconst result = await auth.signOut({ global: true });\n\t\texpect(result).toBe(undefined);\n\n\t\texpect(spyGlobalSignOut).toBeCalled();\n\t});",
            "file": "hosted-ui.test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "SignOut hosted ui on node, resolve undefined",
            "suites": [
                "Hosted UI tests"
            ],
            "updatePoint": {
                "line": 369,
                "column": 51
            },
            "line": 369,
            "code": "\ttest('SignOut hosted ui on node, resolve undefined', async () => {\n\t\tjest.spyOn(StorageHelper.prototype, 'getStorage').mockImplementation(() => {\n\t\t\treturn {\n\t\t\t\tsetItem() {},\n\t\t\t\tgetItem() {\n\t\t\t\t\treturn 'true';\n\t\t\t\t},\n\t\t\t\tremoveItem() {},\n\t\t\t};\n\t\t});\n\n\t\tjest.spyOn(AmplifyCore, 'browserOrNode').mockImplementation(() => ({\n\t\t\tisBrowser: false,\n\t\t\tisNode: true,\n\t\t}));\n\n\t\tconst auth = new Auth(authOptionsWithOAuth);\n\n\t\tconst user = new CognitoUser({\n\t\t\tUsername: 'username',\n\t\t\tPool: userPool,\n\t\t});\n\n\t\tjest.spyOn(Credentials, 'clear').mockImplementationOnce(() => {\n\t\t\treturn Promise.resolve();\n\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementationOnce(() => {\n\t\t\t\treturn user;\n\t\t\t});\n\n\t\t(auth as any)._oAuthHandler = {\n\t\t\tsignOut: () => {\n\t\t\t\t// testing timeout\n\t\t\t\treturn new Promise(() => {});\n\t\t\t},\n\t\t};\n\n\t\texpect.assertions(1);\n\n\t\tconst signoutResult = await auth.signOut({ global: false }); // return undefined on node\n\t\texpect(signoutResult).toBe(undefined);\n\t});",
            "file": "hosted-ui.test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "SignOut hosted ui on WebBrowser, timeout reject",
            "suites": [
                "Hosted UI tests"
            ],
            "updatePoint": {
                "line": 415,
                "column": 54
            },
            "line": 415,
            "code": "\ttest('SignOut hosted ui on WebBrowser, timeout reject', async () => {\n\t\tjest.spyOn(StorageHelper.prototype, 'getStorage').mockImplementation(() => {\n\t\t\treturn {\n\t\t\t\tsetItem() {},\n\t\t\t\tgetItem() {\n\t\t\t\t\treturn 'true';\n\t\t\t\t},\n\t\t\t\tremoveItem() {},\n\t\t\t};\n\t\t});\n\n\t\tjest.spyOn(AmplifyCore, 'browserOrNode').mockImplementation(() => ({\n\t\t\tisBrowser: true,\n\t\t\tisNode: false,\n\t\t}));\n\n\t\tconst auth = new Auth(authOptionsWithOAuth);\n\n\t\tconst user = new CognitoUser({\n\t\t\tUsername: 'username',\n\t\t\tPool: userPool,\n\t\t});\n\n\t\tjest.spyOn(Credentials, 'clear').mockImplementationOnce(() => {\n\t\t\treturn Promise.resolve();\n\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementationOnce(() => {\n\t\t\t\treturn user;\n\t\t\t});\n\n\t\t(auth as any)._oAuthHandler = {\n\t\t\tsignOut: () => {\n\t\t\t\t// testing timeout\n\t\t\t\treturn new Promise(() => {});\n\t\t\t},\n\t\t};\n\n\t\texpect.assertions(1);\n\n\t\tawait expect(auth.signOut({ global: false })).rejects.toThrowError(\n\t\t\t'Signout timeout fail'\n\t\t);\n\t});",
            "file": "hosted-ui.test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "globalSignOut hosted ui, url opener",
            "suites": [
                "Hosted UI tests"
            ],
            "updatePoint": {
                "line": 462,
                "column": 42
            },
            "line": 462,
            "code": "\ttest('globalSignOut hosted ui, url opener', done => {\n\t\tjest.spyOn(StorageHelper.prototype, 'getStorage').mockImplementation(() => {\n\t\t\treturn {\n\t\t\t\tsetItem() {},\n\t\t\t\tgetItem() {\n\t\t\t\t\treturn 'true';\n\t\t\t\t},\n\t\t\t\tremoveItem() {},\n\t\t\t};\n\t\t});\n\n\t\tconst urlOpener = jest.fn(\n\t\t\t(url: string, redirectUrl: string): Promise<any> => {\n\t\t\t\treturn new Promise(() => {\n\t\t\t\t\treturn new Promise(() => {\n\t\t\t\t\t\texpect(url).toEqual(\n\t\t\t\t\t\t\t'https://xxxxxxxxxxxx-xxxxxx-xxx.auth.us-west-2.amazoncognito.com/logout?client_id=awsUserPoolsWebClientId&logout_uri=http%3A%2F%2Flocalhost%3A4200%2F'\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t\tconst options = {\n\t\t\t...authOptionsWithOAuth,\n\t\t};\n\t\toptions.oauth.urlOpener = urlOpener;\n\n\t\tconst auth = new Auth(options);\n\n\t\tconst user = new CognitoUser({\n\t\t\tUsername: 'username',\n\t\t\tPool: userPool,\n\t\t});\n\n\t\tjest.spyOn(Credentials, 'clear').mockImplementationOnce(() => {\n\t\t\treturn Promise.resolve();\n\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementationOnce(() => {\n\t\t\t\treturn user;\n\t\t\t});\n\n\t\texpect.assertions(1);\n\n\t\tauth.signOut({ global: true });\n\t});",
            "file": "hosted-ui.test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "SignOut hosted ui, urlOpener",
            "suites": [
                "Hosted UI tests"
            ],
            "updatePoint": {
                "line": 513,
                "column": 35
            },
            "line": 513,
            "code": "\ttest('SignOut hosted ui, urlOpener', done => {\n\t\tjest.spyOn(StorageHelper.prototype, 'getStorage').mockImplementation(() => {\n\t\t\treturn {\n\t\t\t\tsetItem() {},\n\t\t\t\tgetItem() {\n\t\t\t\t\treturn 'true';\n\t\t\t\t},\n\t\t\t\tremoveItem() {},\n\t\t\t};\n\t\t});\n\n\t\tconst urlOpener = jest.fn((url: string): Promise<any> => {\n\t\t\treturn new Promise(() => {\n\t\t\t\texpect(url).toEqual(\n\t\t\t\t\t'https://xxxxxxxxxxxx-xxxxxx-xxx.auth.us-west-2.amazoncognito.com/logout?client_id=awsUserPoolsWebClientId&logout_uri=http%3A%2F%2Flocalhost%3A4200%2F'\n\t\t\t\t);\n\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t\tconst options = {\n\t\t\t...authOptionsWithOAuth,\n\t\t};\n\t\toptions.oauth.urlOpener = urlOpener;\n\n\t\tconst auth = new Auth(options);\n\n\t\tconst user = new CognitoUser({\n\t\t\tUsername: 'username',\n\t\t\tPool: userPool,\n\t\t});\n\n\t\tjest.spyOn(Credentials, 'clear').mockImplementationOnce(() => {\n\t\t\treturn Promise.resolve();\n\t\t});\n\n\t\tjest\n\t\t\t.spyOn(CognitoUserPool.prototype, 'getCurrentUser')\n\t\t\t.mockImplementationOnce(() => {\n\t\t\t\treturn user;\n\t\t\t});\n\n\t\texpect.assertions(1);\n\n\t\tauth.signOut({ global: true });\n\t});",
            "file": "hosted-ui.test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "nothing happens for the code flow when the code query parameter is not specified",
            "suites": [
                "OAuth",
                "handleAuthResponse"
            ],
            "updatePoint": {
                "line": 42,
                "column": 88
            },
            "line": 42,
            "code": "\t\ttest('nothing happens for the code flow when the code query parameter is not specified', async () => {\n\t\t\tconst currentUrl = 'https://test.com';\n\t\t\tconst config = {\n\t\t\t\tdomain: '',\n\t\t\t\tclientID: '',\n\t\t\t\tscope: '',\n\t\t\t\tredirectUri: '',\n\t\t\t\taudience: '',\n\t\t\t\tresponseType: 'code',\n\t\t\t\treturnTo: '',\n\t\t\t\tredirectSignIn: currentUrl,\n\t\t\t};\n\t\t\tconst oAuth = new OAuth({\n\t\t\t\tscopes: [],\n\t\t\t\tconfig,\n\t\t\t\tcognitoClientId: '',\n\t\t\t});\n\n\t\t\tconst handleResponse = await oAuth.handleAuthResponse(currentUrl);\n\t\t\texpect(handleResponse).toEqual({ state: undefined });\n\t\t});",
            "file": "oauth-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "accessToken, refreshToken, and idToken for the code flow are returned when the code query parameter is specified",
            "suites": [
                "OAuth",
                "handleAuthResponse"
            ],
            "updatePoint": {
                "line": 63,
                "column": 120
            },
            "line": 63,
            "code": "\t\ttest('accessToken, refreshToken, and idToken for the code flow are returned when the code query parameter is specified', async () => {\n\t\t\tconst currentUrl = 'https://test.com';\n\t\t\tconst config = {\n\t\t\t\tdomain: '',\n\t\t\t\tclientID: '',\n\t\t\t\tscope: '',\n\t\t\t\tredirectUri: '',\n\t\t\t\taudience: '',\n\t\t\t\tresponseType: 'code',\n\t\t\t\treturnTo: '',\n\t\t\t\tredirectSignIn: currentUrl,\n\t\t\t};\n\t\t\tconst oAuth = new OAuth({\n\t\t\t\tscopes: [],\n\t\t\t\tconfig,\n\t\t\t\tcognitoClientId: '',\n\t\t\t});\n\t\t\tconst mockAccessToken = 'mockAccessToken';\n\t\t\tconst mockRefreshToken = 'mockRefreshToken';\n\t\t\tconst mockIdToken = 'mockIdToken';\n\n\t\t\tfetchMockReturn({\n\t\t\t\taccess_token: mockAccessToken,\n\t\t\t\trefresh_token: mockRefreshToken,\n\t\t\t\tid_token: mockIdToken,\n\t\t\t});\n\n\t\t\tconst handleResponse = await oAuth.handleAuthResponse(\n\t\t\t\t`${currentUrl}?code=12345`\n\t\t\t);\n\t\t\texpect(handleResponse).toEqual({\n\t\t\t\tstate: undefined,\n\t\t\t\taccessToken: mockAccessToken,\n\t\t\t\trefreshToken: mockRefreshToken,\n\t\t\t\tidToken: mockIdToken,\n\t\t\t});\n\t\t});",
            "file": "oauth-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "nothing happens for the code flow when the current URL is different than the redirect URL",
            "suites": [
                "OAuth",
                "handleAuthResponse"
            ],
            "updatePoint": {
                "line": 100,
                "column": 97
            },
            "line": 100,
            "code": "\t\ttest('nothing happens for the code flow when the current URL is different than the redirect URL', async () => {\n\t\t\tconst config = {\n\t\t\t\tdomain: '',\n\t\t\t\tclientID: '',\n\t\t\t\tscope: '',\n\t\t\t\tredirectUri: '',\n\t\t\t\taudience: '',\n\t\t\t\tresponseType: 'code',\n\t\t\t\treturnTo: '',\n\t\t\t\tredirectSignIn: 'https://test.com',\n\t\t\t};\n\t\t\tconst oAuth = new OAuth({\n\t\t\t\tscopes: [],\n\t\t\t\tconfig,\n\t\t\t\tcognitoClientId: '',\n\t\t\t});\n\n\t\t\tconst handleResponse = await oAuth.handleAuthResponse(\n\t\t\t\t'https://test2.com'\n\t\t\t);\n\t\t\texpect(handleResponse).toEqual({ state: undefined });\n\t\t});",
            "file": "oauth-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "an error is thrown for the code flow when there is an error calling the token endpoint",
            "suites": [
                "OAuth",
                "handleAuthResponse"
            ],
            "updatePoint": {
                "line": 122,
                "column": 94
            },
            "line": 122,
            "code": "\t\ttest('an error is thrown for the code flow when there is an error calling the token endpoint', async () => {\n\t\t\tconst currentUrl = 'https://test.com';\n\t\t\tconst config = {\n\t\t\t\tdomain: '',\n\t\t\t\tclientID: '',\n\t\t\t\tscope: '',\n\t\t\t\tredirectUri: '',\n\t\t\t\taudience: '',\n\t\t\t\tresponseType: 'code',\n\t\t\t\treturnTo: '',\n\t\t\t\tredirectSignIn: currentUrl,\n\t\t\t};\n\t\t\tconst oAuth = new OAuth({\n\t\t\t\tscopes: [],\n\t\t\t\tconfig,\n\t\t\t\tcognitoClientId: '',\n\t\t\t});\n\t\t\tconst mockError = 'mock error';\n\t\t\tfetchMockReturn({\n\t\t\t\terror: mockError,\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tawait oAuth.handleAuthResponse(`${currentUrl}?code=12345`);\n\t\t\t\tfail('error not thrown');\n\t\t\t} catch (err) {\n\t\t\t\texpect(err.message).toBe(mockError);\n\t\t\t}\n\t\t});",
            "file": "oauth-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "Tokens are returned when the currentUrl has three slashes",
            "suites": [
                "OAuth",
                "handleAuthResponse"
            ],
            "updatePoint": {
                "line": 151,
                "column": 65
            },
            "line": 151,
            "code": "\t\ttest('Tokens are returned when the currentUrl has three slashes', async () => {\n\t\t\tconst redirectSignIn = 'myapp://';\n\t\t\tconst currentUrl = 'myapp:///';\n\n\t\t\tconst config = {\n\t\t\t\tdomain: '',\n\t\t\t\tclientID: '',\n\t\t\t\tscope: '',\n\t\t\t\tredirectUri: '',\n\t\t\t\taudience: '',\n\t\t\t\tresponseType: 'code',\n\t\t\t\treturnTo: '',\n\t\t\t\tredirectSignIn,\n\t\t\t};\n\t\t\tconst oAuth = new OAuth({\n\t\t\t\tscopes: [],\n\t\t\t\tconfig,\n\t\t\t\tcognitoClientId: '',\n\t\t\t});\n\t\t\tconst mockAccessToken = 'mockAccessToken';\n\t\t\tconst mockRefreshToken = 'mockRefreshToken';\n\t\t\tconst mockIdToken = 'mockIdToken';\n\n\t\t\tfetchMockReturn({\n\t\t\t\taccess_token: mockAccessToken,\n\t\t\t\trefresh_token: mockRefreshToken,\n\t\t\t\tid_token: mockIdToken,\n\t\t\t});\n\n\t\t\tconst handleResponse = await oAuth.handleAuthResponse(\n\t\t\t\t`${currentUrl}?code=12345`\n\t\t\t);\n\t\t\texpect(handleResponse).toEqual({\n\t\t\t\tstate: undefined,\n\t\t\t\taccessToken: mockAccessToken,\n\t\t\t\trefreshToken: mockRefreshToken,\n\t\t\t\tidToken: mockIdToken,\n\t\t\t});\n\t\t});",
            "file": "oauth-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "getMFAOptions test"
            ],
            "updatePoint": {
                "line": 238,
                "column": 18
            },
            "line": 238,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'getMFAOptions');\n\t\t\texpect(await auth.getMFAOptions(user)).toBe('mfaOptions');\n\t\t\texpect(spyon).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "err case",
            "suites": [
                "auth unit test",
                "getMFAOptions test"
            ],
            "updatePoint": {
                "line": 248,
                "column": 16
            },
            "line": 248,
            "code": "\t\ttest('err case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getMFAOptions')\n\t\t\t\t.mockImplementationOnce(callback => {\n\t\t\t\t\tcallback(new Error('err'), null);\n\t\t\t\t});\n\t\t\ttry {\n\t\t\t\tawait auth.getMFAOptions(user);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toEqual(new Error('err'));\n\t\t\t}\n\t\t\texpect(spyon).toBeCalled();\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "disableMFA test"
            ],
            "updatePoint": {
                "line": 267,
                "column": 18
            },
            "line": 267,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'disableMFA');\n\t\t\texpect(await auth.disableSMS(user)).toBe('Success');\n\t\t\texpect(spyon).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "err case",
            "suites": [
                "auth unit test",
                "disableMFA test"
            ],
            "updatePoint": {
                "line": 276,
                "column": 16
            },
            "line": 276,
            "code": "\t\ttest('err case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'disableMFA')\n\t\t\t\t.mockImplementationOnce(callback => {\n\t\t\t\t\tcallback(new Error('err'), null);\n\t\t\t\t});\n\t\t\ttry {\n\t\t\t\tawait auth.disableSMS(user);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toEqual(new Error('err'));\n\t\t\t}\n\t\t\texpect(spyon).toBeCalled();\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "enableMFA test"
            ],
            "updatePoint": {
                "line": 295,
                "column": 18
            },
            "line": 295,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'enableMFA');\n\t\t\texpect(await auth.enableSMS(user)).toBe('Success');\n\t\t\texpect(spyon).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "err case",
            "suites": [
                "auth unit test",
                "enableMFA test"
            ],
            "updatePoint": {
                "line": 305,
                "column": 16
            },
            "line": 305,
            "code": "\t\ttest('err case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'enableMFA')\n\t\t\t\t.mockImplementationOnce(callback => {\n\t\t\t\t\tcallback(new Error('err'), null);\n\t\t\t\t});\n\t\t\ttry {\n\t\t\t\tawait auth.enableSMS(user);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toEqual(new Error('err'));\n\t\t\t}\n\t\t\texpect(spyon).toBeCalled();\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "setupTOTP test"
            ],
            "updatePoint": {
                "line": 324,
                "column": 18
            },
            "line": 324,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'associateSoftwareToken');\n\t\t\texpect(await auth.setupTOTP(user)).toBe('secretCode');\n\t\t\texpect(spyon).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "err case",
            "suites": [
                "auth unit test",
                "setupTOTP test"
            ],
            "updatePoint": {
                "line": 334,
                "column": 16
            },
            "line": 334,
            "code": "\t\ttest('err case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'associateSoftwareToken')\n\t\t\t\t.mockImplementationOnce(callback => {\n\t\t\t\t\tcallback.onFailure('err');\n\t\t\t\t});\n\t\t\ttry {\n\t\t\t\tawait auth.setupTOTP(user);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe('err');\n\t\t\t}\n\t\t\texpect(spyon).toBeCalled();\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case during sign-in",
            "suites": [
                "auth unit test",
                "verifyTotpToken test"
            ],
            "updatePoint": {
                "line": 353,
                "column": 33
            },
            "line": 353,
            "code": "\t\ttest('happy case during sign-in', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tjest.clearAllMocks(); // clear hub calls\n\n\t\t\tconst happyCaseUser = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\thappyCaseUser.getSignInUserSession = () => null;\n\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'verifySoftwareToken');\n\t\t\tconst spyon2 = jest.spyOn(CognitoUser.prototype, 'getUsername');\n\t\t\tconst hubSpy = jest.spyOn(Hub, 'dispatch');\n\n\t\t\texpect(await auth.verifyTotpToken(happyCaseUser, 'challengeAnswer')).toBe(\n\t\t\t\t'Success'\n\t\t\t);\n\n\t\t\texpect(spyon).toBeCalled();\n\t\t\texpect(spyon2).toBeCalled();\n\t\t\texpect(hubSpy).toBeCalledTimes(2);\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case signedin user",
            "suites": [
                "auth unit test",
                "verifyTotpToken test"
            ],
            "updatePoint": {
                "line": 379,
                "column": 32
            },
            "line": 379,
            "code": "\t\ttest('happy case signedin user', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\tjest.clearAllMocks(); // clear hub calls\n\n\t\t\tconst happyCaseUser = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'verifySoftwareToken');\n\t\t\tconst spyon2 = jest.spyOn(CognitoUser.prototype, 'getUsername');\n\t\t\tconst hubSpy = jest.spyOn(Hub, 'dispatch');\n\n\t\t\texpect(await auth.verifyTotpToken(happyCaseUser, 'challengeAnswer')).toBe(\n\t\t\t\t'Success'\n\t\t\t);\n\n\t\t\texpect(spyon).toBeCalled();\n\t\t\texpect(spyon2).toBeCalled();\n\t\t\texpect(hubSpy).toBeCalledTimes(1);\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "err case user during sign in",
            "suites": [
                "auth unit test",
                "verifyTotpToken test"
            ],
            "updatePoint": {
                "line": 403,
                "column": 36
            },
            "line": 403,
            "code": "\t\ttest('err case user during sign in', async () => {\n\t\t\tconst errCaseUser = new CognitoUser({\n\t\t\t\tUsername: 'username',\n\t\t\t\tPool: userPool,\n\t\t\t});\n\t\t\terrCaseUser.getSignInUserSession = () => null;\n\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'verifySoftwareToken')\n\t\t\t\t.mockImplementationOnce((challengeAnswer, device, callback) => {\n\t\t\t\t\tcallback.onFailure(new Error('err'));\n\t\t\t\t});\n\t\t\ttry {\n\t\t\t\tawait auth.verifyTotpToken(errCaseUser, 'challengeAnswer');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toEqual(new Error('err'));\n\t\t\t}\n\t\t\texpect(spyon).toBeCalled();\n\t\t\tspyon.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "setPreferredMFA test"
            ],
            "updatePoint": {
                "line": 428,
                "column": 18
            },
            "line": 428,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest.spyOn(CognitoUser.prototype, 'setUserMfaPreference');\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'getPreferredMFA')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve('SMS_MFA');\n\t\t\t\t});\n\t\t\texpect(await auth.setPreferredMFA(user, 'TOTP')).toBe('Success');\n\t\t\texpect(spyon).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "totp not setup but TOTP chosed",
            "suites": [
                "auth unit test",
                "setPreferredMFA test"
            ],
            "updatePoint": {
                "line": 446,
                "column": 38
            },
            "line": 446,
            "code": "\t\ttest('totp not setup but TOTP chosed', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'setUserMfaPreference')\n\t\t\t\t.mockImplementationOnce((smsMfaSettings, totpMfaSettings, callback) => {\n\t\t\t\t\tconst err = {\n\t\t\t\t\t\tmessage: 'User has not verified software token mfa',\n\t\t\t\t\t};\n\t\t\t\t\tcallback(new Error('err'), null);\n\t\t\t\t});\n\t\t\tconst spyon2 = jest\n\t\t\t\t.spyOn(InternalAuthClass.prototype, 'getPreferredMFA')\n\t\t\t\t.mockImplementationOnce(() => {\n\t\t\t\t\treturn Promise.resolve('SMS_MFA');\n\t\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tawait auth.setPreferredMFA(user, 'TOTP');\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).not.toBeNull();\n\t\t\t}\n\t\t\texpect(spyon).toBeCalled();\n\n\t\t\tspyon.mockClear();\n\t\t\tspyon2.mockClear();\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "incorrect mfa type",
            "suites": [
                "auth unit test",
                "setPreferredMFA test"
            ],
            "updatePoint": {
                "line": 474,
                "column": 26
            },
            "line": 474,
            "code": "\t\ttest('incorrect mfa type', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\t\t\ttry {\n\t\t\t\t// using <any> to allow us to pass an incorrect value\n\t\t\t\tawait auth.setPreferredMFA(user, 'incorrect mfa type' as any);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).not.toBeNull();\n\t\t\t}\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "happy case",
            "suites": [
                "auth unit test",
                "getPreferredMFA test"
            ],
            "updatePoint": {
                "line": 486,
                "column": 18
            },
            "line": 486,
            "code": "\t\ttest('happy case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\texpect(await auth.getPreferredMFA(user)).toBe('SMS_MFA');\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "error case",
            "suites": [
                "auth unit test",
                "getPreferredMFA test"
            ],
            "updatePoint": {
                "line": 492,
                "column": 18
            },
            "line": 492,
            "code": "\t\ttest('error case', async () => {\n\t\t\tconst auth = new Auth(authOptions);\n\n\t\t\tconst spyon = jest\n\t\t\t\t.spyOn(CognitoUser.prototype, 'getUserData')\n\t\t\t\t.mockImplementationOnce(callback => {\n\t\t\t\t\tcallback(new Error('err'), null);\n\t\t\t\t});\n\t\t\ttry {\n\t\t\t\tawait auth.getPreferredMFA(user);\n\t\t\t} catch (e) {\n\t\t\t\texpect(e).toBe(new Error('err'));\n\t\t\t}\n\t\t});",
            "file": "totp-unit-test.ts",
            "skipped": false,
            "dir": "packages/auth/__tests__"
        },
        {
            "name": "should match snapshot",
            "suites": [
                "aws-amplify",
                "import * keys"
            ],
            "updatePoint": {
                "line": 5,
                "column": 27
            },
            "line": 5,
            "code": "\t\tit('should match snapshot', () => {\n\t\t\texpect(Object.keys(exported)).toMatchInlineSnapshot(`\n\t\t\tArray [\n\t\t\t  \"Amplify\",\n\t\t\t  \"Analytics\",\n\t\t\t  \"AWSPinpointProvider\",\n\t\t\t  \"AWSKinesisProvider\",\n\t\t\t  \"AWSKinesisFirehoseProvider\",\n\t\t\t  \"AmazonPersonalizeProvider\",\n\t\t\t  \"Auth\",\n\t\t\t  \"Storage\",\n\t\t\t  \"StorageClass\",\n\t\t\t  \"API\",\n\t\t\t  \"APIClass\",\n\t\t\t  \"graphqlOperation\",\n\t\t\t  \"AuthModeStrategyType\",\n\t\t\t  \"DataStore\",\n\t\t\t  \"Predicates\",\n\t\t\t  \"SortDirection\",\n\t\t\t  \"syncExpression\",\n\t\t\t  \"PubSub\",\n\t\t\t  \"Cache\",\n\t\t\t  \"Interactions\",\n\t\t\t  \"Notifications\",\n\t\t\t  \"Predictions\",\n\t\t\t  \"Logger\",\n\t\t\t  \"Hub\",\n\t\t\t  \"ClientDevice\",\n\t\t\t  \"Signer\",\n\t\t\t  \"I18n\",\n\t\t\t  \"ServiceWorker\",\n\t\t\t  \"AWSCloudWatchProvider\",\n\t\t\t  \"withSSRContext\",\n\t\t\t  \"Geo\",\n\t\t\t]\n\t\t`);\n\t\t});",
            "file": "exports-test.ts",
            "skipped": false,
            "dir": "packages/aws-amplify/__tests__"
        },
        {
            "name": "should not require context (for client-side requests)",
            "suites": [
                "withSSRContext"
            ],
            "updatePoint": {
                "line": 6,
                "column": 58
            },
            "line": 6,
            "code": "\tit('should not require context (for client-side requests)', () => {\n\t\texpect(() => withSSRContext()).not.toThrow();\n\t});",
            "file": "withSSRContext-test.ts",
            "skipped": false,
            "dir": "packages/aws-amplify/__tests__"
        },
        {
            "name": "should create a new instance of Amplify",
            "suites": [
                "withSSRContext"
            ],
            "updatePoint": {
                "line": 10,
                "column": 44
            },
            "line": 10,
            "code": "\tit('should create a new instance of Amplify', () => {\n\t\tconst amplify = withSSRContext();\n\n\t\texpect(amplify).not.toBe(Amplify);\n\t});",
            "file": "withSSRContext-test.ts",
            "skipped": false,
            "dir": "packages/aws-amplify/__tests__"
        },
        {
            "name": "should extend the global Amplify config",
            "suites": [
                "withSSRContext"
            ],
            "updatePoint": {
                "line": 16,
                "column": 44
            },
            "line": 16,
            "code": "\tit('should extend the global Amplify config', () => {\n\t\t// ! Amplify is global across all tests, so we use a value that won't negatively affect others\n\t\tAmplify.configure({ TEST_VALUE: true });\n\t\texpect(Amplify.configure()).toEqual({ TEST_VALUE: true });\n\n\t\tconst amplify = withSSRContext();\n\t\texpect(amplify.configure({ TEST_VALUE2: true })).toEqual(\n\t\t\texpect.objectContaining({\n\t\t\t\tstorage: expect.any(UniversalStorage),\n\t\t\t\tTEST_VALUE: true,\n\t\t\t\tTEST_VALUE2: true,\n\t\t\t})\n\t\t);\n\t});",
            "file": "withSSRContext-test.ts",
            "skipped": false,
            "dir": "packages/aws-amplify/__tests__"
        },
        {
            "name": "should be a different instance than Amplify.Auth",
            "suites": [
                "withSSRContext",
                "API"
            ],
            "updatePoint": {
                "line": 32,
                "column": 54
            },
            "line": 32,
            "code": "\t\tit('should be a different instance than Amplify.Auth', () => {\n\t\t\texpect(withSSRContext().API).not.toBe(Amplify.API);\n\t\t});",
            "file": "withSSRContext-test.ts",
            "skipped": false,
            "dir": "packages/aws-amplify/__tests__"
        },
        {
            "name": "should use different Credentials than Amplify",
            "suites": [
                "withSSRContext",
                "API"
            ],
            "updatePoint": {
                "line": 36,
                "column": 51
            },
            "line": 36,
            "code": "\t\tit('should use different Credentials than Amplify', () => {\n\t\t\tconst amplify = withSSRContext();\n\t\t\tconst config = amplify.configure();\n\n\t\t\t// GraphQLAPI uses Credentials internally\n\t\t\texpect(Amplify.API._graphqlApi.Credentials).not.toBe(\n\t\t\t\tamplify.API._graphqlApi.Credentials\n\t\t\t);\n\n\t\t\t// RestAPI._api is a RestClient with Credentials\n\t\t\texpect(Amplify.API._restApi._api.Credentials).not.toBe(\n\t\t\t\tamplify.API._restApi._api.Credentials\n\t\t\t);\n\t\t});",
            "file": "withSSRContext-test.ts",
            "skipped": false,
            "dir": "packages/aws-amplify/__tests__"
        },
        {
            "name": "should be a different instance than Amplify.Auth",
            "suites": [
                "withSSRContext",
                "Auth"
            ],
            "updatePoint": {
                "line": 53,
                "column": 54
            },
            "line": 53,
            "code": "\t\tit('should be a different instance than Amplify.Auth', () => {\n\t\t\texpect(withSSRContext().Auth).not.toBe(Amplify.Auth);\n\t\t});",
            "file": "withSSRContext-test.ts",
            "skipped": false,
            "dir": "packages/aws-amplify/__tests__"
        },
        {
            "name": "should be created with UniversalStorage",
            "suites": [
                "withSSRContext",
                "Auth"
            ],
            "updatePoint": {
                "line": 57,
                "column": 45
            },
            "line": 57,
            "code": "\t\tit('should be created with UniversalStorage', () => {\n\t\t\texpect(withSSRContext().Auth._storage).toBeInstanceOf(UniversalStorage);\n\t\t});",
            "file": "withSSRContext-test.ts",
            "skipped": false,
            "dir": "packages/aws-amplify/__tests__"
        },
        {
            "name": "should use different Credentials than Amplify",
            "suites": [
                "withSSRContext",
                "Auth"
            ],
            "updatePoint": {
                "line": 61,
                "column": 51
            },
            "line": 61,
            "code": "\t\tit('should use different Credentials than Amplify', () => {\n\t\t\tconst amplify = withSSRContext();\n\n\t\t\texpect(Amplify.Auth.Credentials).not.toBe(amplify.Auth.Credentials);\n\t\t});",
            "file": "withSSRContext-test.ts",
            "skipped": false,
            "dir": "packages/aws-amplify/__tests__"
        },
        {
            "name": "should be a different instance than Amplify.DataStore",
            "suites": [
                "withSSRContext",
                "DataStore"
            ],
            "updatePoint": {
                "line": 69,
                "column": 59
            },
            "line": 69,
            "code": "\t\tit('should be a different instance than Amplify.DataStore', () => {\n\t\t\texpect(withSSRContext().DataStore).not.toBe(Amplify.DataStore);\n\t\t});",
            "file": "withSSRContext-test.ts",
            "skipped": false,
            "dir": "packages/aws-amplify/__tests__"
        },
        {
            "name": "should use Amplify components from the ssr context",
            "suites": [
                "withSSRContext",
                "DataStore"
            ],
            "updatePoint": {
                "line": 73,
                "column": 56
            },
            "line": 73,
            "code": "\t\tit('should use Amplify components from the ssr context', () => {\n\t\t\tconst { Auth, DataStore, InternalAPI } = withSSRContext();\n\n\t\t\texpect(DataStore.Auth).toBe(Auth);\n\t\t\texpect(DataStore.Auth).not.toBe(Amplify.Auth);\n\n\t\t\texpect(DataStore.InternalAPI).toBe(InternalAPI);\n\t\t});",
            "file": "withSSRContext-test.ts",
            "skipped": false,
            "dir": "packages/aws-amplify/__tests__"
        },
        {
            "name": "should be the same instance as Amplify.I18n",
            "suites": [
                "withSSRContext",
                "I18n"
            ],
            "line": 85,
            "code": "\t\tit.skip('should be the same instance as Amplify.I18n', () => {",
            "file": "withSSRContext-test.ts",
            "skipped": true,
            "dir": "packages/aws-amplify/__tests__"
        }
    ],
    "error": "Cannot read properties of undefined (reading 'file')"
}