{"repo":"expressjs/session","url":"https://github.com/expressjs/session","branch":"master","configs":[{"package":"express-session","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should create a new cookie object","suites":["new Cookie()"],"updatePoint":{"line":4,"column":39,"index":154},"line":4,"code":"  it('should create a new cookie object', function () {\n    assert.strictEqual(typeof new Cookie(), 'object');\n  });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should default expires to null","suites":["new Cookie()"],"updatePoint":{"line":7,"column":36,"index":268},"line":7,"code":"  it('should default expires to null', function () {\n    var cookie = new Cookie();\n    assert.strictEqual(cookie.expires, null);\n  });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should default httpOnly to true","suites":["new Cookie()"],"updatePoint":{"line":11,"column":37,"index":405},"line":11,"code":"  it('should default httpOnly to true', function () {\n    var cookie = new Cookie();\n    assert.strictEqual(cookie.httpOnly, true);\n  });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should default path to \"/\"","suites":["new Cookie()"],"updatePoint":{"line":15,"column":32,"index":538},"line":15,"code":"  it('should default path to \"/\"', function () {\n    var cookie = new Cookie();\n    assert.strictEqual(cookie.path, '/');\n  });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should default maxAge to null","suites":["new Cookie()"],"updatePoint":{"line":19,"column":35,"index":669},"line":19,"code":"  it('should default maxAge to null', function () {\n    var cookie = new Cookie();\n    assert.strictEqual(cookie.maxAge, null);\n  });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should create a new cookie object","suites":["new Cookie()","with options"],"updatePoint":{"line":24,"column":41,"index":850},"line":24,"code":"    it('should create a new cookie object', function () {\n      assert.strictEqual(typeof new Cookie({}), 'object');\n    });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should reject non-objects","suites":["new Cookie()","with options"],"updatePoint":{"line":27,"column":33,"index":967},"line":27,"code":"    it('should reject non-objects', function () {\n      assert.throws(function () {\n        new Cookie(42);\n      }, /argument options/);\n      assert.throws(function () {\n        new Cookie('foo');\n      }, /argument options/);\n      assert.throws(function () {\n        new Cookie(true);\n      }, /argument options/);\n      assert.throws(function () {\n        new Cookie(function () {});\n      }, /argument options/);\n    });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should ignore \"data\" option","suites":["new Cookie()","with options"],"updatePoint":{"line":41,"column":35,"index":1396},"line":41,"code":"    it('should ignore \"data\" option', function () {\n      var cookie = new Cookie({\n        data: {\n          foo: 'bar'\n        },\n        path: '/foo'\n      });\n      assert.strictEqual(typeof cookie, 'object');\n      assert.strictEqual(typeof cookie.data, 'object');\n      assert.strictEqual(cookie.data.path, '/foo');\n      assert.notStrictEqual(cookie.data.foo, 'bar');\n    });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should set expires","suites":["new Cookie()","with options","expires"],"updatePoint":{"line":54,"column":28,"index":1810},"line":54,"code":"      it('should set expires', function () {\n        var expires = new Date(Date.now() + 60000);\n        var cookie = new Cookie({\n          expires: expires\n        });\n        assert.strictEqual(cookie.expires, expires);\n      });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should set maxAge","suites":["new Cookie()","with options","expires"],"updatePoint":{"line":61,"column":27,"index":2042},"line":61,"code":"      it('should set maxAge', function () {\n        var expires = new Date(Date.now() + 60000);\n        var cookie = new Cookie({\n          expires: expires\n        });\n        assert.ok(expires.getTime() - Date.now() - 1000 <= cookie.maxAge);\n        assert.ok(expires.getTime() - Date.now() + 1000 >= cookie.maxAge);\n      });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should set httpOnly","suites":["new Cookie()","with options","httpOnly"],"updatePoint":{"line":71,"column":29,"index":2420},"line":71,"code":"      it('should set httpOnly', function () {\n        var cookie = new Cookie({\n          httpOnly: false\n        });\n        assert.strictEqual(cookie.httpOnly, false);\n      });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should set expires","suites":["new Cookie()","with options","maxAge"],"updatePoint":{"line":79,"column":28,"index":2644},"line":79,"code":"      it('should set expires', function () {\n        var maxAge = 60000;\n        var cookie = new Cookie({\n          maxAge: maxAge\n        });\n        assert.ok(cookie.expires.getTime() - Date.now() - 1000 <= maxAge);\n        assert.ok(cookie.expires.getTime() - Date.now() + 1000 >= maxAge);\n      });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should set maxAge","suites":["new Cookie()","with options","maxAge"],"updatePoint":{"line":87,"column":27,"index":2947},"line":87,"code":"      it('should set maxAge', function () {\n        var maxAge = 60000;\n        var cookie = new Cookie({\n          maxAge: maxAge\n        });\n        assert.strictEqual(typeof cookie.maxAge, 'number');\n        assert.ok(cookie.maxAge - 1000 <= maxAge);\n        assert.ok(cookie.maxAge + 1000 >= maxAge);\n      });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should accept Date object","suites":["new Cookie()","with options","maxAge"],"updatePoint":{"line":96,"column":35,"index":3270},"line":96,"code":"      it('should accept Date object', function () {\n        var maxAge = new Date(Date.now() + 60000);\n        var cookie = new Cookie({\n          maxAge: maxAge\n        });\n        assert.strictEqual(cookie.expires.getTime(), maxAge.getTime());\n        assert.ok(maxAge.getTime() - Date.now() - 1000 <= cookie.maxAge);\n        assert.ok(maxAge.getTime() - Date.now() + 1000 >= cookie.maxAge);\n      });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should reject invalid types","suites":["new Cookie()","with options","maxAge"],"updatePoint":{"line":105,"column":37,"index":3676},"line":105,"code":"      it('should reject invalid types', function () {\n        assert.throws(function () {\n          new Cookie({\n            maxAge: '42'\n          });\n        }, /maxAge/);\n        assert.throws(function () {\n          new Cookie({\n            maxAge: true\n          });\n        }, /maxAge/);\n        assert.throws(function () {\n          new Cookie({\n            maxAge: function () {}\n          });\n        }, /maxAge/);\n      });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should set path","suites":["new Cookie()","with options","path"],"updatePoint":{"line":124,"column":25,"index":4141},"line":124,"code":"      it('should set path', function () {\n        var cookie = new Cookie({\n          path: '/foo'\n        });\n        assert.strictEqual(cookie.path, '/foo');\n      });","file":"cookie.js","skipped":false,"dir":"test"},{"name":"should export constructors","suites":["session()"],"updatePoint":{"line":16,"column":32,"index":562},"line":16,"code":"  it('should export constructors', function () {\n    assert.strictEqual(typeof session.Session, 'function');\n    assert.strictEqual(typeof session.Store, 'function');\n    assert.strictEqual(typeof session.MemoryStore, 'function');\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should do nothing if req.session exists","suites":["session()"],"updatePoint":{"line":21,"column":45,"index":812},"line":21,"code":"  it('should do nothing if req.session exists', function (done) {\n    function setup(req) {\n      req.session = {};\n    }\n    request(createServer(setup)).get('/').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should error without secret","suites":["session()"],"updatePoint":{"line":27,"column":33,"index":1031},"line":27,"code":"  it('should error without secret', function (done) {\n    request(createServer({\n      secret: undefined\n    })).get('/').expect(500, /secret.*required/, done);\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should get secret from req.secret","suites":["session()"],"updatePoint":{"line":32,"column":39,"index":1204},"line":32,"code":"  it('should get secret from req.secret', function (done) {\n    function setup(req) {\n      req.secret = 'keyboard cat';\n    }\n    request(createServer(setup, {\n      secret: undefined\n    })).get('/').expect(200, '', done);\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should create a new session","suites":["session()"],"updatePoint":{"line":40,"column":33,"index":1429},"line":40,"code":"  it('should create a new session', function (done) {\n    var store = new session.MemoryStore();\n    var server = createServer({\n      store: store\n    }, function (req, res) {\n      req.session.active = true;\n      res.end('session active');\n    });\n    request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'session active', function (err, res) {\n      if (err) return done(err);\n      store.length(function (err, len) {\n        if (err) return done(err);\n        assert.strictEqual(len, 1);\n        done();\n      });\n    });\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should load session from cookie sid","suites":["session()"],"updatePoint":{"line":57,"column":41,"index":1993},"line":57,"code":"  it('should load session from cookie sid', function (done) {\n    var count = 0;\n    var server = createServer(null, function (req, res) {\n      req.session.num = req.session.num || ++count;\n      res.end('session ' + req.session.num);\n    });\n    request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'session 1', function (err, res) {\n      if (err) return done(err);\n      request(server).get('/').set('Cookie', cookie(res)).expect(200, 'session 1', done);\n    });\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should pass session fetch error","suites":["session()"],"updatePoint":{"line":68,"column":37,"index":2485},"line":68,"code":"  it('should pass session fetch error', function (done) {\n    var store = new session.MemoryStore();\n    var server = createServer({\n      store: store\n    }, function (req, res) {\n      res.end('hello, world');\n    });\n    store.get = function destroy(sid, callback) {\n      callback(new Error('boom!'));\n    };\n    request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'hello, world', function (err, res) {\n      if (err) return done(err);\n      request(server).get('/').set('Cookie', cookie(res)).expect(500, 'boom!', done);\n    });\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should treat ENOENT session fetch error as not found","suites":["session()"],"updatePoint":{"line":83,"column":58,"index":3070},"line":83,"code":"  it('should treat ENOENT session fetch error as not found', function (done) {\n    var count = 0;\n    var store = new session.MemoryStore();\n    var server = createServer({\n      store: store\n    }, function (req, res) {\n      req.session.num = req.session.num || ++count;\n      res.end('session ' + req.session.num);\n    });\n    store.get = function destroy(sid, callback) {\n      var err = new Error('boom!');\n      err.code = 'ENOENT';\n      callback(err);\n    };\n    request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'session 1', function (err, res) {\n      if (err) return done(err);\n      request(server).get('/').set('Cookie', cookie(res)).expect(200, 'session 2', done);\n    });\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should create multiple sessions","suites":["session()"],"updatePoint":{"line":102,"column":37,"index":3768},"line":102,"code":"  it('should create multiple sessions', function (done) {\n    var cb = after(2, check);\n    var count = 0;\n    var store = new session.MemoryStore();\n    var server = createServer({\n      store: store\n    }, function (req, res) {\n      var isnew = req.session.num === undefined;\n      req.session.num = req.session.num || ++count;\n      res.end('session ' + (isnew ? 'created' : 'updated'));\n    });\n    function check(err) {\n      if (err) return done(err);\n      store.all(function (err, sess) {\n        if (err) return done(err);\n        assert.strictEqual(Object.keys(sess).length, 2);\n        done();\n      });\n    }\n    request(server).get('/').expect(200, 'session created', cb);\n    request(server).get('/').expect(200, 'session created', cb);\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should handle empty req.url","suites":["session()"],"updatePoint":{"line":124,"column":33,"index":4522},"line":124,"code":"  it('should handle empty req.url', function (done) {\n    function setup(req) {\n      req.url = '';\n    }\n    request(createServer(setup)).get('/').expect(shouldSetCookie('connect.sid')).expect(200, done);\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should handle multiple res.end calls","suites":["session()"],"updatePoint":{"line":130,"column":42,"index":4743},"line":130,"code":"  it('should handle multiple res.end calls', function (done) {\n    var server = createServer(null, function (req, res) {\n      res.setHeader('Content-Type', 'text/plain');\n      res.end('Hello, world!');\n      res.end();\n    });\n    request(server).get('/').expect('Content-Type', 'text/plain').expect(200, 'Hello, world!', done);\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should handle res.end(null) calls","suites":["session()"],"updatePoint":{"line":138,"column":39,"index":5077},"line":138,"code":"  it('should handle res.end(null) calls', function (done) {\n    var server = createServer(null, function (req, res) {\n      res.end(null);\n    });\n    request(server).get('/').expect(200, '', done);\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should handle reserved properties in storage","suites":["session()"],"updatePoint":{"line":144,"column":50,"index":5293},"line":144,"code":"  it('should handle reserved properties in storage', function (done) {\n    var count = 0;\n    var sid;\n    var store = new session.MemoryStore();\n    var server = createServer({\n      store: store\n    }, function (req, res) {\n      sid = req.session.id;\n      req.session.num = req.session.num || ++count;\n      res.end('session saved');\n    });\n    request(server).get('/').expect(200, 'session saved', function (err, res) {\n      if (err) return done(err);\n      store.get(sid, function (err, sess) {\n        if (err) return done(err);\n        // save is reserved\n        sess.save = 'nope';\n        store.set(sid, sess, function (err) {\n          if (err) return done(err);\n          request(server).get('/').set('Cookie', cookie(res)).expect(200, 'session saved', done);\n        });\n      });\n    });\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should only have session data enumerable (and cookie)","suites":["session()"],"updatePoint":{"line":168,"column":59,"index":6113},"line":168,"code":"  it('should only have session data enumerable (and cookie)', function (done) {\n    var server = createServer(null, function (req, res) {\n      req.session.test1 = 1;\n      req.session.test2 = 'b';\n      res.end(Object.keys(req.session).sort().join(','));\n    });\n    request(server).get('/').expect(200, 'cookie,test1,test2', done);\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not save with bogus req.sessionID","suites":["session()"],"updatePoint":{"line":176,"column":46,"index":6440},"line":176,"code":"  it('should not save with bogus req.sessionID', function (done) {\n    var store = new session.MemoryStore();\n    var server = createServer({\n      store: store\n    }, function (req, res) {\n      req.sessionID = function () {};\n      req.session.test1 = 1;\n      req.session.test2 = 'b';\n      res.end();\n    });\n    request(server).get('/').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, function (err) {\n      if (err) return done(err);\n      store.length(function (err, length) {\n        if (err) return done(err);\n        assert.strictEqual(length, 0);\n        done();\n      });\n    });\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should update cookie expiration when slow write","suites":["session()"],"updatePoint":{"line":195,"column":53,"index":7051},"line":195,"code":"  it('should update cookie expiration when slow write', function (done) {\n    var server = createServer({\n      rolling: true\n    }, function (req, res) {\n      req.session.user = 'bob';\n      res.write('hello, ');\n      setTimeout(function () {\n        res.end('world!');\n      }, 200);\n    });\n    request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, function (err, res) {\n      if (err) return done(err);\n      var originalExpires = expires(res);\n      setTimeout(function () {\n        request(server).get('/').set('Cookie', cookie(res)).expect(shouldSetCookie('connect.sid')).expect(function (res) {\n          assert.notStrictEqual(originalExpires, expires(res));\n        }).expect(200, done);\n      }, 1000 - Date.now() % 1000 + 200);\n    });\n  });","file":"session.js","skipped":false,"dir":"test"},{"name":"should have saved session","suites":["session()","when response ended"],"updatePoint":{"line":216,"column":33,"index":7856},"line":216,"code":"    it('should have saved session', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        req.session.hit = true;\n        res.end('session saved');\n      });\n      request(server).get('/').expect(200).expect(shouldSetSessionInStore(store, 200)).expect('session saved').end(done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should have saved session even with empty response","suites":["session()","when response ended"],"updatePoint":{"line":226,"column":58,"index":8272},"line":226,"code":"    it('should have saved session even with empty response', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        req.session.hit = true;\n        res.setHeader('Content-Length', '0');\n        res.end();\n      });\n      request(server).get('/').expect(200).expect(shouldSetSessionInStore(store, 200)).end(done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should have saved session even with multi-write","suites":["session()","when response ended"],"updatePoint":{"line":237,"column":55,"index":8692},"line":237,"code":"    it('should have saved session even with multi-write', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        req.session.hit = true;\n        res.setHeader('Content-Length', '12');\n        res.write('hello, ');\n        res.end('world');\n      });\n      request(server).get('/').expect(200).expect(shouldSetSessionInStore(store, 200)).expect('hello, world').end(done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should have saved session even with non-chunked response","suites":["session()","when response ended"],"updatePoint":{"line":249,"column":64,"index":9182},"line":249,"code":"    it('should have saved session even with non-chunked response', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        req.session.hit = true;\n        res.setHeader('Content-Length', '13');\n        res.end('session saved');\n      });\n      request(server).get('/').expect(200).expect(shouldSetSessionInStore(store, 200)).expect('session saved').end(done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should have saved session with updated cookie expiration","suites":["session()","when response ended"],"updatePoint":{"line":260,"column":64,"index":9651},"line":260,"code":"    it('should have saved session with updated cookie expiration', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        cookie: {\n          maxAge: min\n        },\n        store: store\n      }, function (req, res) {\n        req.session.user = 'bob';\n        res.end(req.session.id);\n      });\n      request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, function (err, res) {\n        if (err) return done(err);\n        var id = res.text;\n        store.get(id, function (err, sess) {\n          if (err) return done(err);\n          assert.ok(sess, 'session saved to store');\n          var exp = new Date(sess.cookie.expires);\n          assert.strictEqual(exp.toUTCString(), expires(res));\n          setTimeout(function () {\n            request(server).get('/').set('Cookie', cookie(res)).expect(200, function (err, res) {\n              if (err) return done(err);\n              store.get(id, function (err, sess) {\n                if (err) return done(err);\n                assert.strictEqual(res.text, id);\n                assert.ok(sess, 'session still in store');\n                assert.notStrictEqual(new Date(sess.cookie.expires).toUTCString(), exp.toUTCString(), 'session cookie expiration updated');\n                done();\n              });\n            });\n          }, 1000 - Date.now() % 1000 + 200);\n        });\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should create a new session","suites":["session()","when sid not in store"],"updatePoint":{"line":296,"column":35,"index":11088},"line":296,"code":"    it('should create a new session', function (done) {\n      var count = 0;\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        req.session.num = req.session.num || ++count;\n        res.end('session ' + req.session.num);\n      });\n      request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'session 1', function (err, res) {\n        if (err) return done(err);\n        store.clear(function (err) {\n          if (err) return done(err);\n          request(server).get('/').set('Cookie', cookie(res)).expect(200, 'session 2', done);\n        });\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should have a new sid","suites":["session()","when sid not in store"],"updatePoint":{"line":313,"column":29,"index":11751},"line":313,"code":"    it('should have a new sid', function (done) {\n      var count = 0;\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        req.session.num = req.session.num || ++count;\n        res.end('session ' + req.session.num);\n      });\n      request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'session 1', function (err, res) {\n        if (err) return done(err);\n        store.clear(function (err) {\n          if (err) return done(err);\n          request(server).get('/').set('Cookie', cookie(res)).expect(shouldSetCookie('connect.sid')).expect(shouldSetCookieToDifferentSessionId(sid(res))).expect(200, 'session 2', done);\n        });\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should generate new session","suites":["session()","when sid not properly signed"],"updatePoint":{"line":332,"column":35,"index":12576},"line":332,"code":"    it('should generate new session', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        key: 'sessid'\n      }, function (req, res) {\n        var isnew = req.session.active === undefined;\n        req.session.active = true;\n        res.end('session ' + (isnew ? 'created' : 'read'));\n      });\n      request(server).get('/').expect(shouldSetCookie('sessid')).expect(200, 'session created', function (err, res) {\n        if (err) return done(err);\n        var val = sid(res);\n        assert.ok(val);\n        request(server).get('/').set('Cookie', 'sessid=' + val).expect(shouldSetCookie('sessid')).expect(shouldSetCookieToDifferentSessionId(val)).expect(200, 'session created', done);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not attempt fetch from store","suites":["session()","when sid not properly signed"],"updatePoint":{"line":349,"column":43,"index":13361},"line":349,"code":"    it('should not attempt fetch from store', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        key: 'sessid'\n      }, function (req, res) {\n        var isnew = req.session.active === undefined;\n        req.session.active = true;\n        res.end('session ' + (isnew ? 'created' : 'read'));\n      });\n      request(server).get('/').expect(shouldSetCookie('sessid')).expect(200, 'session created', function (err, res) {\n        if (err) return done(err);\n        var val = cookie(res).replace(/...\\./, '.');\n        assert.ok(val);\n        request(server).get('/').set('Cookie', val).expect(shouldSetCookie('sessid')).expect(200, 'session created', done);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should create a new session","suites":["session()","when session expired in store"],"updatePoint":{"line":368,"column":35,"index":14166},"line":368,"code":"    it('should create a new session', function (done) {\n      var count = 0;\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        cookie: {\n          maxAge: 5\n        }\n      }, function (req, res) {\n        req.session.num = req.session.num || ++count;\n        res.end('session ' + req.session.num);\n      });\n      request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'session 1', function (err, res) {\n        if (err) return done(err);\n        setTimeout(function () {\n          request(server).get('/').set('Cookie', cookie(res)).expect(shouldSetCookie('connect.sid')).expect(200, 'session 2', done);\n        }, 20);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should have a new sid","suites":["session()","when session expired in store"],"updatePoint":{"line":387,"column":29,"index":14880},"line":387,"code":"    it('should have a new sid', function (done) {\n      var count = 0;\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        cookie: {\n          maxAge: 5\n        }\n      }, function (req, res) {\n        req.session.num = req.session.num || ++count;\n        res.end('session ' + req.session.num);\n      });\n      request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'session 1', function (err, res) {\n        if (err) return done(err);\n        setTimeout(function () {\n          request(server).get('/').set('Cookie', cookie(res)).expect(shouldSetCookie('connect.sid')).expect(shouldSetCookieToDifferentSessionId(sid(res))).expect(200, 'session 2', done);\n        }, 15);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not exist in store","suites":["session()","when session expired in store"],"updatePoint":{"line":406,"column":33,"index":15652},"line":406,"code":"    it('should not exist in store', function (done) {\n      var count = 0;\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        cookie: {\n          maxAge: 5\n        }\n      }, function (req, res) {\n        req.session.num = req.session.num || ++count;\n        res.end('session ' + req.session.num);\n      });\n      request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'session 1', function (err, res) {\n        if (err) return done(err);\n        setTimeout(function () {\n          store.all(function (err, sess) {\n            if (err) return done(err);\n            assert.strictEqual(Object.keys(sess).length, 0);\n            done();\n          });\n        }, 10);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should pass error from inflate","suites":["session()","when session without cookie property in store"],"updatePoint":{"line":431,"column":38,"index":16499},"line":431,"code":"    it('should pass error from inflate', function (done) {\n      var count = 0;\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        req.session.num = req.session.num || ++count;\n        res.end('session ' + req.session.num);\n      });\n      request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'session 1', function (err, res) {\n        if (err) return done(err);\n        store.set(sid(res), {\n          foo: 'bar'\n        }, function (err) {\n          if (err) return done(err);\n          request(server).get('/').set('Cookie', cookie(res)).expect(500, /Cannot read prop/, done);\n        });\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should trust X-Forwarded-Proto when string","suites":["session()","proxy option","when enabled"],"updatePoint":{"line":463,"column":52,"index":17526},"line":463,"code":"      it('should trust X-Forwarded-Proto when string', function (done) {\n        request(server).get('/').set('X-Forwarded-Proto', 'https').expect(shouldSetCookie('connect.sid')).expect(200, done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should trust X-Forwarded-Proto when comma-separated list","suites":["session()","proxy option","when enabled"],"updatePoint":{"line":466,"column":66,"index":17748},"line":466,"code":"      it('should trust X-Forwarded-Proto when comma-separated list', function (done) {\n        request(server).get('/').set('X-Forwarded-Proto', 'https,http').expect(shouldSetCookie('connect.sid')).expect(200, done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should work when no header","suites":["session()","proxy option","when enabled"],"updatePoint":{"line":469,"column":36,"index":17945},"line":469,"code":"      it('should work when no header', function (done) {\n        request(server).get('/').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not trust X-Forwarded-Proto","suites":["session()","proxy option","when disabled"],"updatePoint":{"line":488,"column":44,"index":18573},"line":488,"code":"      it('should not trust X-Forwarded-Proto', function (done) {\n        request(this.server).get('/').set('X-Forwarded-Proto', 'https').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should ignore req.secure","suites":["session()","proxy option","when disabled"],"updatePoint":{"line":491,"column":34,"index":18771},"line":491,"code":"      it('should ignore req.secure', function (done) {\n        request(this.server).get('/').set('X-Forwarded-Proto', 'https').set('X-Secure', 'true').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, 'true', done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not trust X-Forwarded-Proto","suites":["session()","proxy option","when unspecified"],"updatePoint":{"line":509,"column":44,"index":19449},"line":509,"code":"      it('should not trust X-Forwarded-Proto', function (done) {\n        request(this.server).get('/').set('X-Forwarded-Proto', 'https').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should use req.secure","suites":["session()","proxy option","when unspecified"],"updatePoint":{"line":512,"column":31,"index":19644},"line":512,"code":"      it('should use req.secure', function (done) {\n        request(this.server).get('/').set('X-Forwarded-Proto', 'https').set('X-Secure', 'true').expect(shouldSetCookie('connect.sid')).expect(200, 'true', done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not set cookie for \"/\" request","suites":["session()","cookie option","when \"path\" set to \"/foo/bar\""],"updatePoint":{"line":526,"column":47,"index":20147},"line":526,"code":"      it('should not set cookie for \"/\" request', function (done) {\n        request(this.server).get('/').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not set cookie for \"http://foo/bar\" request","suites":["session()","cookie option","when \"path\" set to \"/foo/bar\""],"updatePoint":{"line":529,"column":60,"index":20337},"line":529,"code":"      it('should not set cookie for \"http://foo/bar\" request', function (done) {\n        request(this.server).get('/').set('host', 'http://foo/bar').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should set cookie for \"/foo/bar\" request","suites":["session()","cookie option","when \"path\" set to \"/foo/bar\""],"updatePoint":{"line":532,"column":50,"index":20547},"line":532,"code":"      it('should set cookie for \"/foo/bar\" request', function (done) {\n        request(this.server).get('/foo/bar/baz').expect(shouldSetCookie('connect.sid')).expect(200, done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should set cookie for \"/foo/bar/baz\" request","suites":["session()","cookie option","when \"path\" set to \"/foo/bar\""],"updatePoint":{"line":535,"column":54,"index":20739},"line":535,"code":"      it('should set cookie for \"/foo/bar/baz\" request', function (done) {\n        request(this.server).get('/foo/bar/baz').expect(shouldSetCookie('connect.sid')).expect(200, done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should set cookie for \"/foo/bar\" request","suites":["session()","cookie option","when \"path\" set to \"/foo/bar\"","when mounted at \"/foo\""],"updatePoint":{"line":546,"column":52,"index":21162},"line":546,"code":"        it('should set cookie for \"/foo/bar\" request', function (done) {\n          request(this.server).get('/foo/bar').expect(shouldSetCookie('connect.sid')).expect(200, done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not set cookie for \"/foo/foo/bar\" request","suites":["session()","cookie option","when \"path\" set to \"/foo/bar\"","when mounted at \"/foo\""],"updatePoint":{"line":549,"column":60,"index":21360},"line":549,"code":"        it('should not set cookie for \"/foo/foo/bar\" request', function (done) {\n          request(this.server).get('/foo/foo/bar').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should set secure when X-Forwarded-Proto is https","suites":["session()","cookie option","when \"secure\" set to \"auto\"","when \"proxy\" is \"true\""],"updatePoint":{"line":565,"column":61,"index":21906},"line":565,"code":"        it('should set secure when X-Forwarded-Proto is https', function (done) {\n          request(this.server).get('/').set('X-Forwarded-Proto', 'https').expect(shouldSetCookieWithAttribute('connect.sid', 'Secure')).expect(200, done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not set secure when X-Forwarded-Proto is https","suites":["session()","cookie option","when \"secure\" set to \"auto\"","when \"proxy\" is \"false\""],"updatePoint":{"line":579,"column":65,"index":22435},"line":579,"code":"        it('should not set secure when X-Forwarded-Proto is https', function (done) {\n          request(this.server).get('/').set('X-Forwarded-Proto', 'https').expect(shouldSetCookieWithoutAttribute('connect.sid', 'Secure')).expect(200, done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should set secure if req.secure = true","suites":["session()","cookie option","when \"secure\" set to \"auto\"","when \"proxy\" is undefined"],"updatePoint":{"line":597,"column":50,"index":23117},"line":597,"code":"        it('should set secure if req.secure = true', function (done) {\n          request(this.server).get('/').set('X-Secure', 'true').expect(shouldSetCookieWithAttribute('connect.sid', 'Secure')).expect(200, 'true', done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not set secure if req.secure = false","suites":["session()","cookie option","when \"secure\" set to \"auto\"","when \"proxy\" is undefined"],"updatePoint":{"line":600,"column":55,"index":23358},"line":600,"code":"        it('should not set secure if req.secure = false', function (done) {\n          request(this.server).get('/').set('X-Secure', 'false').expect(shouldSetCookieWithoutAttribute('connect.sid', 'Secure')).expect(200, 'false', done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should reject non-function values","suites":["session()","genid option"],"updatePoint":{"line":607,"column":41,"index":23655},"line":607,"code":"    it('should reject non-function values', function () {\n      assert.throws(session.bind(null, {\n        genid: 'bogus!'\n      }), /genid.*must/);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should provide default generator","suites":["session()","genid option"],"updatePoint":{"line":612,"column":40,"index":23811},"line":612,"code":"    it('should provide default generator', function (done) {\n      request(createServer()).get('/').expect(shouldSetCookie('connect.sid')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should allow custom function","suites":["session()","genid option"],"updatePoint":{"line":615,"column":36,"index":23973},"line":615,"code":"    it('should allow custom function', function (done) {\n      function genid() {\n        return 'apple';\n      }\n      request(createServer({\n        genid: genid\n      })).get('/').expect(shouldSetCookieToValue('connect.sid', 's%3Aapple.D8Y%2BpkTAmeR0PobOhY4G97PRW%2Bj7bUnP%2F5m6%2FOn1MCU')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should encode unsafe chars","suites":["session()","genid option"],"updatePoint":{"line":623,"column":34,"index":24292},"line":623,"code":"    it('should encode unsafe chars', function (done) {\n      function genid() {\n        return '%';\n      }\n      request(createServer({\n        genid: genid\n      })).get('/').expect(shouldSetCookieToValue('connect.sid', 's%3A%25.kzQ6x52kKVdF35Qh62AWk4ZekS28K5XYCXKa%2FOTZ01g')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should provide req argument","suites":["session()","genid option"],"updatePoint":{"line":631,"column":35,"index":24600},"line":631,"code":"    it('should provide req argument', function (done) {\n      function genid(req) {\n        return req.url;\n      }\n      request(createServer({\n        genid: genid\n      })).get('/foo').expect(shouldSetCookieToValue('connect.sid', 's%3A%2Ffoo.paEKBtAHbV5s1IB8B2zPnzAgYmmnRPIqObW4VRYj%2FMQ')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should default to \"connect.sid\"","suites":["session()","key option"],"updatePoint":{"line":641,"column":39,"index":24970},"line":641,"code":"    it('should default to \"connect.sid\"', function (done) {\n      request(createServer()).get('/').expect(shouldSetCookie('connect.sid')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should allow overriding","suites":["session()","key option"],"updatePoint":{"line":644,"column":31,"index":25127},"line":644,"code":"    it('should allow overriding', function (done) {\n      request(createServer({\n        key: 'session_id'\n      })).get('/').expect(shouldSetCookie('session_id')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should default to \"connect.sid\"","suites":["session()","name option"],"updatePoint":{"line":651,"column":39,"index":25372},"line":651,"code":"    it('should default to \"connect.sid\"', function (done) {\n      request(createServer()).get('/').expect(shouldSetCookie('connect.sid')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should set the cookie name","suites":["session()","name option"],"updatePoint":{"line":654,"column":34,"index":25532},"line":654,"code":"    it('should set the cookie name', function (done) {\n      request(createServer({\n        name: 'session_id'\n      })).get('/').expect(shouldSetCookie('session_id')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should default to false","suites":["session()","rolling option"],"updatePoint":{"line":661,"column":31,"index":25773},"line":661,"code":"    it('should default to false', function (done) {\n      var server = createServer(null, function (req, res) {\n        req.session.user = 'bob';\n        res.end();\n      });\n      request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, function (err, res) {\n        if (err) return done(err);\n        request(server).get('/').set('Cookie', cookie(res)).expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should force cookie on unmodified session","suites":["session()","rolling option"],"updatePoint":{"line":671,"column":49,"index":26244},"line":671,"code":"    it('should force cookie on unmodified session', function (done) {\n      var server = createServer({\n        rolling: true\n      }, function (req, res) {\n        req.session.user = 'bob';\n        res.end();\n      });\n      request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, function (err, res) {\n        if (err) return done(err);\n        request(server).get('/').set('Cookie', cookie(res)).expect(shouldSetCookie('connect.sid')).expect(200, done);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not force cookie on uninitialized session if saveUninitialized option is set to false","suites":["session()","rolling option"],"updatePoint":{"line":683,"column":100,"index":26790},"line":683,"code":"    it('should not force cookie on uninitialized session if saveUninitialized option is set to false', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        rolling: true,\n        saveUninitialized: false\n      });\n      request(server).get('/').expect(shouldNotSetSessionInStore(store)).expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should force cookie and save uninitialized session if saveUninitialized option is set to true","suites":["session()","rolling option"],"updatePoint":{"line":692,"column":101,"index":27221},"line":692,"code":"    it('should force cookie and save uninitialized session if saveUninitialized option is set to true', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        rolling: true,\n        saveUninitialized: true\n      });\n      request(server).get('/').expect(shouldSetSessionInStore(store)).expect(shouldSetCookie('connect.sid')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should force cookie and save modified session even if saveUninitialized option is set to false","suites":["session()","rolling option"],"updatePoint":{"line":701,"column":102,"index":27646},"line":701,"code":"    it('should force cookie and save modified session even if saveUninitialized option is set to false', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        rolling: true,\n        saveUninitialized: false\n      }, function (req, res) {\n        req.session.user = 'bob';\n        res.end();\n      });\n      request(server).get('/').expect(shouldSetSessionInStore(store)).expect(shouldSetCookie('connect.sid')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should default to true","suites":["session()","resave option"],"updatePoint":{"line":715,"column":30,"index":28132},"line":715,"code":"    it('should default to true', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        req.session.user = 'bob';\n        res.end();\n      });\n      request(server).get('/').expect(shouldSetSessionInStore(store)).expect(200, function (err, res) {\n        if (err) return done(err);\n        request(server).get('/').set('Cookie', cookie(res)).expect(shouldSetSessionInStore(store)).expect(200, done);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should force save on unmodified session","suites":["session()","resave option","when true"],"updatePoint":{"line":729,"column":49,"index":28711},"line":729,"code":"      it('should force save on unmodified session', function (done) {\n        var store = new session.MemoryStore();\n        var server = createServer({\n          store: store,\n          resave: true\n        }, function (req, res) {\n          req.session.user = 'bob';\n          res.end();\n        });\n        request(server).get('/').expect(shouldSetSessionInStore(store)).expect(200, function (err, res) {\n          if (err) return done(err);\n          request(server).get('/').set('Cookie', cookie(res)).expect(shouldSetSessionInStore(store)).expect(200, done);\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should prevent save on unmodified session","suites":["session()","resave option","when false"],"updatePoint":{"line":745,"column":51,"index":29349},"line":745,"code":"      it('should prevent save on unmodified session', function (done) {\n        var store = new session.MemoryStore();\n        var server = createServer({\n          store: store,\n          resave: false\n        }, function (req, res) {\n          req.session.user = 'bob';\n          res.end();\n        });\n        request(server).get('/').expect(shouldSetSessionInStore(store)).expect(200, function (err, res) {\n          if (err) return done(err);\n          request(server).get('/').set('Cookie', cookie(res)).expect(shouldNotSetSessionInStore(store)).expect(200, done);\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should still save modified session","suites":["session()","resave option","when false"],"updatePoint":{"line":759,"column":44,"index":29935},"line":759,"code":"      it('should still save modified session', function (done) {\n        var store = new session.MemoryStore();\n        var server = createServer({\n          resave: false,\n          store: store\n        }, function (req, res) {\n          if (req.method === 'PUT') {\n            req.session.token = req.url.substr(1);\n          }\n          res.end('token=' + (req.session.token || ''));\n        });\n        request(server).put('/w6RHhwaA').expect(200).expect(shouldSetSessionInStore(store)).expect('token=w6RHhwaA').end(function (err, res) {\n          if (err) return done(err);\n          var sess = cookie(res);\n          request(server).get('/').set('Cookie', sess).expect(200).expect(shouldNotSetSessionInStore(store)).expect('token=w6RHhwaA').end(function (err) {\n            if (err) return done(err);\n            request(server).put('/zfQ3rzM3').set('Cookie', sess).expect(200).expect(shouldSetSessionInStore(store)).expect('token=zfQ3rzM3').end(done);\n          });\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should detect a \"cookie\" property as modified","suites":["session()","resave option","when false"],"updatePoint":{"line":779,"column":55,"index":30941},"line":779,"code":"      it('should detect a \"cookie\" property as modified', function (done) {\n        var store = new session.MemoryStore();\n        var server = createServer({\n          store: store,\n          resave: false\n        }, function (req, res) {\n          req.session.user = req.session.user || {};\n          req.session.user.name = 'bob';\n          req.session.user.cookie = req.session.user.cookie || 0;\n          req.session.user.cookie++;\n          res.end();\n        });\n        request(server).get('/').expect(shouldSetSessionInStore(store)).expect(200, function (err, res) {\n          if (err) return done(err);\n          request(server).get('/').set('Cookie', cookie(res)).expect(shouldSetSessionInStore(store)).expect(200, done);\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should pass session touch error","suites":["session()","resave option","when false"],"updatePoint":{"line":796,"column":41,"index":31682},"line":796,"code":"      it('should pass session touch error', function (done) {\n        var cb = after(2, done);\n        var store = new session.MemoryStore();\n        var server = createServer({\n          store: store,\n          resave: false\n        }, function (req, res) {\n          req.session.hit = true;\n          res.end('session saved');\n        });\n        store.touch = function touch(sid, sess, callback) {\n          callback(new Error('boom!'));\n        };\n        server.on('error', function onerror(err) {\n          assert.ok(err);\n          assert.strictEqual(err.message, 'boom!');\n          cb();\n        });\n        request(server).get('/').expect(200, 'session saved', function (err, res) {\n          if (err) return cb(err);\n          request(server).get('/').set('Cookie', cookie(res)).end(cb);\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should default to true","suites":["session()","saveUninitialized option"],"updatePoint":{"line":822,"column":30,"index":32559},"line":822,"code":"    it('should default to true', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      });\n      request(server).get('/').expect(shouldSetSessionInStore(store)).expect(shouldSetCookie('connect.sid')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should force save of uninitialized session","suites":["session()","saveUninitialized option"],"updatePoint":{"line":829,"column":50,"index":32876},"line":829,"code":"    it('should force save of uninitialized session', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        saveUninitialized: true\n      });\n      request(server).get('/').expect(shouldSetSessionInStore(store)).expect(shouldSetCookie('connect.sid')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should prevent save of uninitialized session","suites":["session()","saveUninitialized option"],"updatePoint":{"line":837,"column":52,"index":33228},"line":837,"code":"    it('should prevent save of uninitialized session', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        saveUninitialized: false\n      });\n      request(server).get('/').expect(shouldNotSetSessionInStore(store)).expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should still save modified session","suites":["session()","saveUninitialized option"],"updatePoint":{"line":845,"column":42,"index":33577},"line":845,"code":"    it('should still save modified session', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        saveUninitialized: false\n      }, function (req, res) {\n        req.session.count = req.session.count || 0;\n        req.session.count++;\n        res.end();\n      });\n      request(server).get('/').expect(shouldSetSessionInStore(store)).expect(shouldSetCookie('connect.sid')).expect(200, done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should pass session save error","suites":["session()","saveUninitialized option"],"updatePoint":{"line":857,"column":38,"index":34047},"line":857,"code":"    it('should pass session save error', function (done) {\n      var cb = after(2, done);\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        saveUninitialized: true\n      }, function (req, res) {\n        res.end('session saved');\n      });\n      store.set = function destroy(sid, sess, callback) {\n        callback(new Error('boom!'));\n      };\n      server.on('error', function onerror(err) {\n        assert.ok(err);\n        assert.strictEqual(err.message, 'boom!');\n        cb();\n      });\n      request(server).get('/').expect(200, 'session saved', cb);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should prevent uninitialized session from being touched","suites":["session()","saveUninitialized option"],"updatePoint":{"line":876,"column":63,"index":34695},"line":876,"code":"    it('should prevent uninitialized session from being touched', function (done) {\n      var cb = after(1, done);\n      var store = new session.MemoryStore();\n      var server = createServer({\n        saveUninitialized: false,\n        store: store,\n        cookie: {\n          maxAge: min\n        }\n      }, function (req, res) {\n        res.end();\n      });\n      store.touch = function () {\n        cb(new Error('should not be called'));\n      };\n      request(server).get('/').expect(200, cb);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should reject empty arrays","suites":["session()","secret option"],"updatePoint":{"line":895,"column":34,"index":35220},"line":895,"code":"    it('should reject empty arrays', function () {\n      assert.throws(createServer.bind(null, {\n        secret: []\n      }), /secret option array/);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should sign cookies","suites":["session()","secret option","when an array"],"updatePoint":{"line":901,"column":29,"index":35417},"line":901,"code":"      it('should sign cookies', function (done) {\n        var server = createServer({\n          secret: ['keyboard cat', 'nyan cat']\n        }, function (req, res) {\n          req.session.user = 'bob';\n          res.end(req.session.user);\n        });\n        request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'bob', done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should sign cookies with first element","suites":["session()","secret option","when an array"],"updatePoint":{"line":910,"column":48,"index":35795},"line":910,"code":"      it('should sign cookies with first element', function (done) {\n        var store = new session.MemoryStore();\n        var server1 = createServer({\n          secret: ['keyboard cat', 'nyan cat'],\n          store: store\n        }, function (req, res) {\n          req.session.user = 'bob';\n          res.end(req.session.user);\n        });\n        var server2 = createServer({\n          secret: 'nyan cat',\n          store: store\n        }, function (req, res) {\n          res.end(String(req.session.user));\n        });\n        request(server1).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'bob', function (err, res) {\n          if (err) return done(err);\n          request(server2).get('/').set('Cookie', cookie(res)).expect(200, 'undefined', done);\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should read cookies using all elements","suites":["session()","secret option","when an array"],"updatePoint":{"line":930,"column":48,"index":36585},"line":930,"code":"      it('should read cookies using all elements', function (done) {\n        var store = new session.MemoryStore();\n        var server1 = createServer({\n          secret: 'nyan cat',\n          store: store\n        }, function (req, res) {\n          req.session.user = 'bob';\n          res.end(req.session.user);\n        });\n        var server2 = createServer({\n          secret: ['keyboard cat', 'nyan cat'],\n          store: store\n        }, function (req, res) {\n          res.end(String(req.session.user));\n        });\n        request(server1).get('/').expect(shouldSetCookie('connect.sid')).expect(200, 'bob', function (err, res) {\n          if (err) return done(err);\n          request(server2).get('/').set('Cookie', cookie(res)).expect(200, 'bob', done);\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should reject unknown values","suites":["session()","unset option"],"updatePoint":{"line":953,"column":36,"index":37412},"line":953,"code":"    it('should reject unknown values', function () {\n      assert.throws(session.bind(null, {\n        unset: 'bogus!'\n      }), /unset.*must/);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should default to keep","suites":["session()","unset option"],"updatePoint":{"line":958,"column":30,"index":37558},"line":958,"code":"    it('should default to keep', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        req.session.count = req.session.count || 0;\n        req.session.count++;\n        if (req.session.count === 2) req.session = null;\n        res.end();\n      });\n      request(server).get('/').expect(200, function (err, res) {\n        if (err) return done(err);\n        store.length(function (err, len) {\n          if (err) return done(err);\n          assert.strictEqual(len, 1);\n          request(server).get('/').set('Cookie', cookie(res)).expect(200, function (err, res) {\n            if (err) return done(err);\n            store.length(function (err, len) {\n              if (err) return done(err);\n              assert.strictEqual(len, 1);\n              done();\n            });\n          });\n        });\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should allow destroy on req.session = null","suites":["session()","unset option"],"updatePoint":{"line":984,"column":50,"index":38492},"line":984,"code":"    it('should allow destroy on req.session = null', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        unset: 'destroy'\n      }, function (req, res) {\n        req.session.count = req.session.count || 0;\n        req.session.count++;\n        if (req.session.count === 2) req.session = null;\n        res.end();\n      });\n      request(server).get('/').expect(200, function (err, res) {\n        if (err) return done(err);\n        store.length(function (err, len) {\n          if (err) return done(err);\n          assert.strictEqual(len, 1);\n          request(server).get('/').set('Cookie', cookie(res)).expect(200, function (err, res) {\n            if (err) return done(err);\n            store.length(function (err, len) {\n              if (err) return done(err);\n              assert.strictEqual(len, 0);\n              done();\n            });\n          });\n        });\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not set cookie if initial session destroyed","suites":["session()","unset option"],"updatePoint":{"line":1011,"column":58,"index":39460},"line":1011,"code":"    it('should not set cookie if initial session destroyed', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        unset: 'destroy'\n      }, function (req, res) {\n        req.session = null;\n        res.end();\n      });\n      request(server).get('/').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, function (err, res) {\n        if (err) return done(err);\n        store.length(function (err, len) {\n          if (err) return done(err);\n          assert.strictEqual(len, 0);\n          done();\n        });\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should pass session destroy error","suites":["session()","unset option"],"updatePoint":{"line":1029,"column":41,"index":40044},"line":1029,"code":"    it('should pass session destroy error', function (done) {\n      var cb = after(2, done);\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store,\n        unset: 'destroy'\n      }, function (req, res) {\n        req.session = null;\n        res.end('session destroyed');\n      });\n      store.destroy = function destroy(sid, callback) {\n        callback(new Error('boom!'));\n      };\n      server.on('error', function onerror(err) {\n        assert.ok(err);\n        assert.strictEqual(err.message, 'boom!');\n        cb();\n      });\n      request(server).get('/').expect(200, 'session destroyed', cb);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should correctly handle res.end/res.write patched prior","suites":["session()","res.end patch"],"updatePoint":{"line":1051,"column":63,"index":40767},"line":1051,"code":"    it('should correctly handle res.end/res.write patched prior', function (done) {\n      function setup(req, res) {\n        utils.writePatch(res);\n      }\n      function respond(req, res) {\n        req.session.hit = true;\n        res.write('hello, ');\n        res.end('world');\n      }\n      request(createServer(setup, null, respond)).get('/').expect(200, 'hello, world', done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should correctly handle res.end/res.write patched after","suites":["session()","res.end patch"],"updatePoint":{"line":1062,"column":63,"index":41156},"line":1062,"code":"    it('should correctly handle res.end/res.write patched after', function (done) {\n      function respond(req, res) {\n        utils.writePatch(res);\n        req.session.hit = true;\n        res.write('hello, ');\n        res.end('world');\n      }\n      request(createServer(null, respond)).get('/').expect(200, 'hello, world', done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should error when res.end is called twice","suites":["session()","res.end patch"],"updatePoint":{"line":1071,"column":49,"index":41483},"line":1071,"code":"    it('should error when res.end is called twice', function (done) {\n      var error1 = null;\n      var error2 = null;\n      var server = http.createServer(function (req, res) {\n        res.end();\n        try {\n          res.setHeader('Content-Length', '3');\n          res.end('foo');\n        } catch (e) {\n          error1 = e;\n        }\n      });\n      function respond(req, res) {\n        res.end();\n        try {\n          res.setHeader('Content-Length', '3');\n          res.end('foo');\n        } catch (e) {\n          error2 = e;\n        }\n      }\n      request(server).get('/').end(function (err, res) {\n        if (err) return done(err);\n        request(createServer(null, respond)).get('/').expect(function () {\n          assert.strictEqual(error1 && error1.message, error2 && error2.message);\n        }).expect(res.statusCode, res.text, done);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should persist","suites":["session()","req.session"],"updatePoint":{"line":1101,"column":22,"index":42374},"line":1101,"code":"    it('should persist', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        req.session.count = req.session.count || 0;\n        req.session.count++;\n        res.end('hits: ' + req.session.count);\n      });\n      request(server).get('/').expect(200, 'hits: 1', function (err, res) {\n        if (err) return done(err);\n        store.load(sid(res), function (err, sess) {\n          if (err) return done(err);\n          assert.ok(sess);\n          request(server).get('/').set('Cookie', cookie(res)).expect(200, 'hits: 2', done);\n        });\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should only set-cookie when modified","suites":["session()","req.session"],"updatePoint":{"line":1119,"column":44,"index":43057},"line":1119,"code":"    it('should only set-cookie when modified', function (done) {\n      var modify = true;\n      var server = createServer(null, function (req, res) {\n        if (modify) {\n          req.session.count = req.session.count || 0;\n          req.session.count++;\n        }\n        res.end(req.session.count.toString());\n      });\n      request(server).get('/').expect(200, '1', function (err, res) {\n        if (err) return done(err);\n        request(server).get('/').set('Cookie', cookie(res)).expect(200, '2', function (err, res) {\n          if (err) return done(err);\n          var val = cookie(res);\n          modify = false;\n          request(server).get('/').set('Cookie', val).expect(shouldNotHaveHeader('Set-Cookie')).expect(200, '2', function (err, res) {\n            if (err) return done(err);\n            modify = true;\n            request(server).get('/').set('Cookie', val).expect(shouldSetCookie('connect.sid')).expect(200, '3', done);\n          });\n        });\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not have enumerable methods","suites":["session()","req.session"],"updatePoint":{"line":1142,"column":42,"index":44043},"line":1142,"code":"    it('should not have enumerable methods', function (done) {\n      var server = createServer(null, function (req, res) {\n        req.session.foo = 'foo';\n        req.session.bar = 'bar';\n        var keys = [];\n        for (var key in req.session) {\n          keys.push(key);\n        }\n        res.end(keys.sort().join(','));\n      });\n      request(server).get('/').expect(200, 'bar,cookie,foo', done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not be set if store is disconnected","suites":["session()","req.session"],"updatePoint":{"line":1154,"column":50,"index":44464},"line":1154,"code":"    it('should not be set if store is disconnected', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        res.end(typeof req.session);\n      });\n      store.emit('disconnect');\n      request(server).get('/').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, 'undefined', done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should be set when store reconnects","suites":["session()","req.session"],"updatePoint":{"line":1164,"column":43,"index":44851},"line":1164,"code":"    it('should be set when store reconnects', function (done) {\n      var store = new session.MemoryStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        res.end(typeof req.session);\n      });\n      store.emit('disconnect');\n      request(server).get('/').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, 'undefined', function (err) {\n        if (err) return done(err);\n        store.emit('connect');\n        request(server).get('/').expect(200, 'object', done);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should destroy the previous session","suites":["session()","req.session",".destroy()"],"updatePoint":{"line":1179,"column":45,"index":45429},"line":1179,"code":"      it('should destroy the previous session', function (done) {\n        var server = createServer(null, function (req, res) {\n          req.session.destroy(function (err) {\n            if (err) res.statusCode = 500;\n            res.end(String(req.session));\n          });\n        });\n        request(server).get('/').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, 'undefined', done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should destroy/replace the previous session","suites":["session()","req.session",".regenerate()"],"updatePoint":{"line":1190,"column":53,"index":45892},"line":1190,"code":"      it('should destroy/replace the previous session', function (done) {\n        var server = createServer(null, function (req, res) {\n          var id = req.session.id;\n          req.session.regenerate(function (err) {\n            if (err) res.statusCode = 500;\n            res.end(String(req.session.id === id));\n          });\n        });\n        request(server).get('/').expect(shouldSetCookie('connect.sid')).expect(200, function (err, res) {\n          if (err) return done(err);\n          request(server).get('/').set('Cookie', cookie(res)).expect(shouldSetCookie('connect.sid')).expect(shouldSetCookieToDifferentSessionId(sid(res))).expect(200, 'false', done);\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should reload session from store","suites":["session()","req.session",".reload()"],"updatePoint":{"line":1205,"column":42,"index":46619},"line":1205,"code":"      it('should reload session from store', function (done) {\n        var server = createServer(null, function (req, res) {\n          if (req.url === '/') {\n            req.session.active = true;\n            res.end('session created');\n            return;\n          }\n          req.session.url = req.url;\n          if (req.url === '/bar') {\n            res.end('saw ' + req.session.url);\n            return;\n          }\n          request(server).get('/bar').set('Cookie', val).expect(200, 'saw /bar', function (err, resp) {\n            if (err) return done(err);\n            req.session.reload(function (err) {\n              if (err) return done(err);\n              res.end('saw ' + req.session.url);\n            });\n          });\n        });\n        var val;\n        request(server).get('/').expect(200, 'session created', function (err, res) {\n          if (err) return done(err);\n          val = cookie(res);\n          request(server).get('/foo').set('Cookie', val).expect(200, 'saw /bar', done);\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should error is session missing","suites":["session()","req.session",".reload()"],"updatePoint":{"line":1232,"column":41,"index":47641},"line":1232,"code":"      it('should error is session missing', function (done) {\n        var store = new session.MemoryStore();\n        var server = createServer({\n          store: store\n        }, function (req, res) {\n          if (req.url === '/') {\n            req.session.active = true;\n            res.end('session created');\n            return;\n          }\n          store.clear(function (err) {\n            if (err) return done(err);\n            req.session.reload(function (err) {\n              res.statusCode = err ? 500 : 200;\n              res.end(err ? err.message : '');\n            });\n          });\n        });\n        request(server).get('/').expect(200, 'session created', function (err, res) {\n          if (err) return done(err);\n          request(server).get('/foo').set('Cookie', cookie(res)).expect(500, 'failed to load session', done);\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not override an overriden `reload` in case of errors","suites":["session()","req.session",".reload()"],"updatePoint":{"line":1255,"column":69,"index":48532},"line":1255,"code":"      it('should not override an overriden `reload` in case of errors', function (done) {\n        var store = new session.MemoryStore();\n        var server = createServer({\n          store: store,\n          resave: false\n        }, function (req, res) {\n          if (req.url === '/') {\n            req.session.active = true;\n            res.end('session created');\n            return;\n          }\n          store.clear(function (err) {\n            if (err) return done(err);\n\n            // reload way too many times on top of each other,\n            // attempting to overflow the call stack\n            var iters = 20;\n            reload();\n            function reload() {\n              if (! --iters) {\n                res.end('ok');\n                return;\n              }\n              try {\n                req.session.reload(reload);\n              } catch (e) {\n                res.statusCode = 500;\n                res.end(e.message);\n              }\n            }\n          });\n        });\n        request(server).get('/').expect(200, 'session created', function (err, res) {\n          if (err) return done(err);\n          request(server).get('/foo').set('Cookie', cookie(res)).expect(200, 'ok', done);\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should save session to store","suites":["session()","req.session",".save()"],"updatePoint":{"line":1294,"column":38,"index":49781},"line":1294,"code":"      it('should save session to store', function (done) {\n        var store = new session.MemoryStore();\n        var server = createServer({\n          store: store\n        }, function (req, res) {\n          req.session.hit = true;\n          req.session.save(function (err) {\n            if (err) return res.end(err.message);\n            store.get(req.session.id, function (err, sess) {\n              if (err) return res.end(err.message);\n              res.end(sess ? 'stored' : 'empty');\n            });\n          });\n        });\n        request(server).get('/').expect(200, 'stored', done);\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should prevent end-of-request save","suites":["session()","req.session",".save()"],"updatePoint":{"line":1310,"column":44,"index":50390},"line":1310,"code":"      it('should prevent end-of-request save', function (done) {\n        var store = new session.MemoryStore();\n        var server = createServer({\n          store: store\n        }, function (req, res) {\n          req.session.hit = true;\n          req.session.save(function (err) {\n            if (err) return res.end(err.message);\n            res.end('saved');\n          });\n        });\n        request(server).get('/').expect(shouldSetSessionInStore(store)).expect(200, 'saved', function (err, res) {\n          if (err) return done(err);\n          request(server).get('/').set('Cookie', cookie(res)).expect(shouldSetSessionInStore(store)).expect(200, 'saved', done);\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should prevent end-of-request save on reloaded session","suites":["session()","req.session",".save()"],"updatePoint":{"line":1326,"column":64,"index":51101},"line":1326,"code":"      it('should prevent end-of-request save on reloaded session', function (done) {\n        var store = new session.MemoryStore();\n        var server = createServer({\n          store: store\n        }, function (req, res) {\n          req.session.hit = true;\n          req.session.reload(function () {\n            req.session.save(function (err) {\n              if (err) return res.end(err.message);\n              res.end('saved');\n            });\n          });\n        });\n        request(server).get('/').expect(shouldSetSessionInStore(store)).expect(200, 'saved', function (err, res) {\n          if (err) return done(err);\n          request(server).get('/').set('Cookie', cookie(res)).expect(shouldSetSessionInStore(store)).expect(200, 'saved', done);\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should prevent end-of-request save","suites":["session()","req.session",".save()","when saveUninitialized is false"],"updatePoint":{"line":1345,"column":46,"index":51923},"line":1345,"code":"        it('should prevent end-of-request save', function (done) {\n          var store = new session.MemoryStore();\n          var server = createServer({\n            saveUninitialized: false,\n            store: store\n          }, function (req, res) {\n            req.session.hit = true;\n            req.session.save(function (err) {\n              if (err) return res.end(err.message);\n              res.end('saved');\n            });\n          });\n          request(server).get('/').expect(shouldSetSessionInStore(store)).expect(200, 'saved', function (err, res) {\n            if (err) return done(err);\n            request(server).get('/').set('Cookie', cookie(res)).expect(shouldSetSessionInStore(store)).expect(200, 'saved', done);\n          });\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should reset session expiration","suites":["session()","req.session",".touch()"],"updatePoint":{"line":1365,"column":41,"index":52736},"line":1365,"code":"      it('should reset session expiration', function (done) {\n        var store = new session.MemoryStore();\n        var server = createServer({\n          resave: false,\n          store: store,\n          cookie: {\n            maxAge: min\n          }\n        }, function (req, res) {\n          req.session.hit = true;\n          req.session.touch();\n          res.end();\n        });\n        request(server).get('/').expect(200, function (err, res) {\n          if (err) return done(err);\n          var id = sid(res);\n          store.get(id, function (err, sess) {\n            if (err) return done(err);\n            var exp = new Date(sess.cookie.expires);\n            setTimeout(function () {\n              request(server).get('/').set('Cookie', cookie(res)).expect(200, function (err, res) {\n                if (err) return done(err);\n                store.get(id, function (err, sess) {\n                  if (err) return done(err);\n                  assert.notStrictEqual(new Date(sess.cookie.expires).getTime(), exp.getTime());\n                  done();\n                });\n              });\n            }, 100);\n          });\n        });\n      });","file":"session.js","skipped":false,"dir":"test"},{"name":"should serialize as parameters","suites":["session()","req.session",".cookie",".*"],"updatePoint":{"line":1400,"column":42,"index":53967},"line":1400,"code":"        it('should serialize as parameters', function (done) {\n          var server = createServer({\n            proxy: true\n          }, function (req, res) {\n            req.session.cookie.httpOnly = false;\n            req.session.cookie.secure = true;\n            res.end();\n          });\n          request(server).get('/').set('X-Forwarded-Proto', 'https').expect(shouldSetCookieWithoutAttribute('connect.sid', 'HttpOnly')).expect(shouldSetCookieWithAttribute('connect.sid', 'Secure')).expect(200, done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should default to a browser-session length cookie","suites":["session()","req.session",".cookie",".*"],"updatePoint":{"line":1410,"column":61,"index":54507},"line":1410,"code":"        it('should default to a browser-session length cookie', function (done) {\n          request(createServer({\n            cookie: {\n              path: '/admin'\n            }\n          })).get('/admin').expect(shouldSetCookieWithoutAttribute('connect.sid', 'Expires')).expect(200, done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should Set-Cookie only once for browser-session cookies","suites":["session()","req.session",".cookie",".*"],"updatePoint":{"line":1417,"column":67,"index":54818},"line":1417,"code":"        it('should Set-Cookie only once for browser-session cookies', function (done) {\n          var server = createServer({\n            cookie: {\n              path: '/admin'\n            }\n          });\n          request(server).get('/admin/foo').expect(shouldSetCookie('connect.sid')).expect(200, function (err, res) {\n            if (err) return done(err);\n            request(server).get('/admin').set('Cookie', cookie(res)).expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n          });\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should override defaults","suites":["session()","req.session",".cookie",".*"],"updatePoint":{"line":1428,"column":36,"index":55304},"line":1428,"code":"        it('should override defaults', function (done) {\n          var server = createServer({\n            cookie: {\n              path: '/admin',\n              httpOnly: false,\n              secure: true,\n              maxAge: 5000\n            }\n          }, function (req, res) {\n            req.session.cookie.secure = false;\n            res.end();\n          });\n          request(server).get('/admin').expect(shouldSetCookieWithAttribute('connect.sid', 'Expires')).expect(shouldSetCookieWithoutAttribute('connect.sid', 'HttpOnly')).expect(shouldSetCookieWithAttributeAndValue('connect.sid', 'Path', '/admin')).expect(shouldSetCookieWithoutAttribute('connect.sid', 'Secure')).expect(200, done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should preserve cookies set before writeHead is called","suites":["session()","req.session",".cookie",".*"],"updatePoint":{"line":1442,"column":66,"index":56044},"line":1442,"code":"        it('should preserve cookies set before writeHead is called', function (done) {\n          var server = createServer(null, function (req, res) {\n            var cookie = new Cookie();\n            res.setHeader('Set-Cookie', cookie.serialize('previous', 'cookieValue'));\n            res.end();\n          });\n          request(server).get('/').expect(shouldSetCookieToValue('previous', 'cookieValue')).expect(200, done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should preserve cookies set in writeHead","suites":["session()","req.session",".cookie",".*"],"updatePoint":{"line":1450,"column":52,"index":56467},"line":1450,"code":"        it('should preserve cookies set in writeHead', function (done) {\n          var server = createServer(null, function (req, res) {\n            var cookie = new Cookie();\n            res.writeHead(200, {\n              'Set-Cookie': cookie.serialize('previous', 'cookieValue')\n            });\n            res.end();\n          });\n          request(server).get('/').expect(shouldSetCookieToValue('previous', 'cookieValue')).expect(200, done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should equal original maxAge","suites":["session()","req.session",".cookie",".originalMaxAge"],"updatePoint":{"line":1462,"column":40,"index":56971},"line":1462,"code":"        it('should equal original maxAge', function (done) {\n          var server = createServer({\n            cookie: {\n              maxAge: 2000\n            }\n          }, function (req, res) {\n            res.end(JSON.stringify(req.session.cookie.originalMaxAge));\n          });\n          request(server).get('/').expect(200).expect(function (res) {\n            // account for 1ms latency\n            assert.ok(res.text === '2000' || res.text === '1999', 'expected 2000, got ' + res.text);\n          }).end(done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should equal original maxAge for all requests","suites":["session()","req.session",".cookie",".originalMaxAge"],"updatePoint":{"line":1475,"column":57,"index":57518},"line":1475,"code":"        it('should equal original maxAge for all requests', function (done) {\n          var server = createServer({\n            cookie: {\n              maxAge: 2000\n            }\n          }, function (req, res) {\n            res.end(JSON.stringify(req.session.cookie.originalMaxAge));\n          });\n          request(server).get('/').expect(200).expect(function (res) {\n            // account for 1ms latency\n            assert.ok(res.text === '2000' || res.text === '1999', 'expected 2000, got ' + res.text);\n          }).end(function (err, res) {\n            if (err) return done(err);\n            setTimeout(function () {\n              request(server).get('/').set('Cookie', cookie(res)).expect(200).expect(function (res) {\n                // account for 1ms latency\n                assert.ok(res.text === '2000' || res.text === '1999', 'expected 2000, got ' + res.text);\n              }).end(done);\n            }, 100);\n          });\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should equal original maxAge for all requests","suites":["session()","req.session",".cookie",".originalMaxAge"],"updatePoint":{"line":1496,"column":57,"index":58469},"line":1496,"code":"        it('should equal original maxAge for all requests', function (done) {\n          var store = new SmartStore();\n          var server = createServer({\n            cookie: {\n              maxAge: 2000\n            },\n            store: store\n          }, function (req, res) {\n            res.end(JSON.stringify(req.session.cookie.originalMaxAge));\n          });\n          request(server).get('/').expect(200).expect(function (res) {\n            // account for 1ms latency\n            assert.ok(res.text === '2000' || res.text === '1999', 'expected 2000, got ' + res.text);\n          }).end(function (err, res) {\n            if (err) return done(err);\n            setTimeout(function () {\n              request(server).get('/').set('Cookie', cookie(res)).expect(200).expect(function (res) {\n                // account for 1ms latency\n                assert.ok(res.text === '2000' || res.text === '1999', 'expected 2000, got ' + res.text);\n              }).end(done);\n            }, 100);\n          });\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should set cookie when secure","suites":["session()","req.session",".cookie",".secure"],"updatePoint":{"line":1530,"column":41,"index":59731},"line":1530,"code":"        it('should set cookie when secure', function (done) {\n          var cert = fs.readFileSync(__dirname + '/fixtures/server.crt', 'ascii');\n          var server = https.createServer({\n            key: fs.readFileSync(__dirname + '/fixtures/server.key', 'ascii'),\n            cert: cert\n          });\n          server.on('request', app);\n          var agent = new https.Agent({\n            ca: cert\n          });\n          var createConnection = agent.createConnection;\n          agent.createConnection = function (options) {\n            options.servername = 'express-session.local';\n            return createConnection.call(this, options);\n          };\n          var req = request(server).get('/');\n          req.agent(agent);\n          req.expect(shouldSetCookie('connect.sid'));\n          req.expect(200, done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not set-cookie when insecure","suites":["session()","req.session",".cookie",".secure"],"updatePoint":{"line":1550,"column":47,"index":60568},"line":1550,"code":"        it('should not set-cookie when insecure', function (done) {\n          var server = http.createServer(app);\n          request(server).get('/').expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should set cookie expires relative to maxAge","suites":["session()","req.session",".cookie",".maxAge"],"updatePoint":{"line":1584,"column":56,"index":61679},"line":1584,"code":"        it('should set cookie expires relative to maxAge', function (done) {\n          request(this.server).get('/').set('Cookie', this.cookie).expect(shouldSetCookieToExpireIn('connect.sid', 2000)).expect(200, '1', done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should modify cookie expires when changed","suites":["session()","req.session",".cookie",".maxAge"],"updatePoint":{"line":1587,"column":53,"index":61911},"line":1587,"code":"        it('should modify cookie expires when changed', function (done) {\n          request(this.server).get('/').set('Cookie', this.cookie).expect(shouldSetCookieToExpireIn('connect.sid', 5000)).expect(200, '2', done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should modify cookie expires when changed to large value","suites":["session()","req.session",".cookie",".maxAge"],"updatePoint":{"line":1590,"column":68,"index":62158},"line":1590,"code":"        it('should modify cookie expires when changed to large value', function (done) {\n          request(this.server).get('/').set('Cookie', this.cookie).expect(shouldSetCookieToExpireIn('connect.sid', 3000000000)).expect(200, '3', done);\n        });","file":"session.js","skipped":false,"dir":"test"},{"name":"should set absolute","suites":["session()","req.session",".cookie",".expires","when given a Date"],"updatePoint":{"line":1596,"column":33,"index":62479},"line":1596,"code":"          it('should set absolute', function (done) {\n            var server = createServer(null, function (req, res) {\n              req.session.cookie.expires = new Date(0);\n              res.end();\n            });\n            request(server).get('/').expect(shouldSetCookieWithAttributeAndValue('connect.sid', 'Expires', 'Thu, 01 Jan 1970 00:00:00 GMT')).expect(200, done);\n          });","file":"session.js","skipped":false,"dir":"test"},{"name":"should be a browser-session cookie","suites":["session()","req.session",".cookie",".expires","when null"],"updatePoint":{"line":1605,"column":48,"index":62941},"line":1605,"code":"          it('should be a browser-session cookie', function (done) {\n            var server = createServer(null, function (req, res) {\n              req.session.cookie.expires = null;\n              res.end();\n            });\n            request(server).get('/').expect(shouldSetCookieWithoutAttribute('connect.sid', 'Expires')).expect(200, done);\n          });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not reset cookie","suites":["session()","req.session",".cookie",".expires","when null"],"updatePoint":{"line":1612,"column":37,"index":63291},"line":1612,"code":"          it('should not reset cookie', function (done) {\n            var server = createServer(null, function (req, res) {\n              req.session.cookie.expires = null;\n              res.end();\n            });\n            request(server).get('/').expect(shouldSetCookieWithoutAttribute('connect.sid', 'Expires')).expect(200, function (err, res) {\n              if (err) return done(err);\n              request(server).get('/').set('Cookie', cookie(res)).expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n            });\n          });","file":"session.js","skipped":false,"dir":"test"},{"name":"should not reset cookie when modified","suites":["session()","req.session",".cookie",".expires","when null"],"updatePoint":{"line":1622,"column":51,"index":63854},"line":1622,"code":"          it('should not reset cookie when modified', function (done) {\n            var server = createServer(null, function (req, res) {\n              req.session.cookie.expires = null;\n              req.session.hit = (req.session.hit || 0) + 1;\n              res.end();\n            });\n            request(server).get('/').expect(shouldSetCookieWithoutAttribute('connect.sid', 'Expires')).expect(200, function (err, res) {\n              if (err) return done(err);\n              request(server).get('/').set('Cookie', cookie(res)).expect(shouldNotHaveHeader('Set-Cookie')).expect(200, done);\n            });\n          });","file":"session.js","skipped":false,"dir":"test"},{"name":"should respond correctly on save","suites":["session()","synchronous store"],"updatePoint":{"line":1638,"column":40,"index":64548},"line":1638,"code":"    it('should respond correctly on save', function (done) {\n      var store = new SyncStore();\n      var server = createServer({\n        store: store\n      }, function (req, res) {\n        req.session.count = req.session.count || 0;\n        req.session.count++;\n        res.end('hits: ' + req.session.count);\n      });\n      request(server).get('/').expect(200, 'hits: 1', done);\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should respond correctly on destroy","suites":["session()","synchronous store"],"updatePoint":{"line":1649,"column":43,"index":64940},"line":1649,"code":"    it('should respond correctly on destroy', function (done) {\n      var store = new SyncStore();\n      var server = createServer({\n        store: store,\n        unset: 'destroy'\n      }, function (req, res) {\n        req.session.count = req.session.count || 0;\n        var count = ++req.session.count;\n        if (req.session.count > 1) {\n          req.session = null;\n          res.write('destroyed\\n');\n        }\n        res.end('hits: ' + count);\n      });\n      request(server).get('/').expect(200, 'hits: 1', function (err, res) {\n        if (err) return done(err);\n        request(server).get('/').set('Cookie', cookie(res)).expect(200, 'destroyed\\nhits: 2', done);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should read from req.cookies","suites":["session()","cookieParser()"],"updatePoint":{"line":1670,"column":36,"index":65674},"line":1670,"code":"    it('should read from req.cookies', function (done) {\n      var app = express().use(cookieParser()).use(function (req, res, next) {\n        req.headers.cookie = 'foo=bar';\n        next();\n      }).use(createSession()).use(function (req, res, next) {\n        req.session.count = req.session.count || 0;\n        req.session.count++;\n        res.end(req.session.count.toString());\n      });\n      request(app).get('/').expect(200, '1', function (err, res) {\n        if (err) return done(err);\n        request(app).get('/').set('Cookie', cookie(res)).expect(200, '2', done);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should reject unsigned from req.cookies","suites":["session()","cookieParser()"],"updatePoint":{"line":1684,"column":47,"index":66277},"line":1684,"code":"    it('should reject unsigned from req.cookies', function (done) {\n      var app = express().use(cookieParser()).use(function (req, res, next) {\n        req.headers.cookie = 'foo=bar';\n        next();\n      }).use(createSession({\n        key: 'sessid'\n      })).use(function (req, res, next) {\n        req.session.count = req.session.count || 0;\n        req.session.count++;\n        res.end(req.session.count.toString());\n      });\n      request(app).get('/').expect(200, '1', function (err, res) {\n        if (err) return done(err);\n        request(app).get('/').set('Cookie', 'sessid=' + sid(res)).expect(200, '1', done);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should reject invalid signature from req.cookies","suites":["session()","cookieParser()"],"updatePoint":{"line":1700,"column":56,"index":66929},"line":1700,"code":"    it('should reject invalid signature from req.cookies', function (done) {\n      var app = express().use(cookieParser()).use(function (req, res, next) {\n        req.headers.cookie = 'foo=bar';\n        next();\n      }).use(createSession({\n        key: 'sessid'\n      })).use(function (req, res, next) {\n        req.session.count = req.session.count || 0;\n        req.session.count++;\n        res.end(req.session.count.toString());\n      });\n      request(app).get('/').expect(200, '1', function (err, res) {\n        if (err) return done(err);\n        var val = cookie(res).replace(/...\\./, '.');\n        request(app).get('/').set('Cookie', val).expect(200, '1', done);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"},{"name":"should read from req.signedCookies","suites":["session()","cookieParser()"],"updatePoint":{"line":1717,"column":42,"index":67603},"line":1717,"code":"    it('should read from req.signedCookies', function (done) {\n      var app = express().use(cookieParser('keyboard cat')).use(function (req, res, next) {\n        delete req.headers.cookie;\n        next();\n      }).use(createSession()).use(function (req, res, next) {\n        req.session.count = req.session.count || 0;\n        req.session.count++;\n        res.end(req.session.count.toString());\n      });\n      request(app).get('/').expect(200, '1', function (err, res) {\n        if (err) return done(err);\n        request(app).get('/').set('Cookie', cookie(res)).expect(200, '2', done);\n      });\n    });","file":"session.js","skipped":false,"dir":"test"}]}