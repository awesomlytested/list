{"repo":"selectize/selectize.js","url":"https://github.com/selectize/selectize.js","branch":"master","configs":[{"package":"selectize","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should set \"tabindex\" prop to -1","suites":["API","disable()"],"updatePoint":{"line":10,"column":42},"line":10,"code":"      it('should set \"tabindex\" prop to -1', function () {\n        expect(String(test.selectize.$control_input.attr('tabindex'))).to.be.equal('-1');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set \"disabled\" class","suites":["API","disable()"],"updatePoint":{"line":13,"column":37},"line":13,"code":"      it('should set \"disabled\" class', function () {\n        expect(test.selectize.$control.hasClass('disabled')).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set isDisabled property to true","suites":["API","disable()"],"updatePoint":{"line":16,"column":48},"line":16,"code":"      it('should set isDisabled property to true', function () {\n        expect(test.selectize.isDisabled).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should add \"disabled\" attribute on inputs","suites":["API","disable()"],"updatePoint":{"line":19,"column":51},"line":19,"code":"      it('should add \"disabled\" attribute on inputs', function () {\n        expect(test.selectize.$input.is(':disabled')).to.be.equal(true);\n        expect(test.selectize.$control_input.is(':disabled')).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set maxItems setting to 2","suites":["API","setMaxItems(2)"],"updatePoint":{"line":33,"column":42},"line":33,"code":"      it('should set maxItems setting to 2', function () {\n        expect(test.selectize.settings.maxItems).to.be.equal(2);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set maxItems setting to null","suites":["API","setMaxItems(0)"],"updatePoint":{"line":46,"column":45},"line":46,"code":"      it('should set maxItems setting to null', function () {\n        expect(test.selectize.settings.maxItems).to.be.equal(null);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should restore original \"tabindex\" prop","suites":["API","enable()"],"updatePoint":{"line":57,"column":49},"line":57,"code":"      it('should restore original \"tabindex\" prop', function () {\n        expect(String(test.selectize.$control_input.attr('tabindex'))).to.be.equal('2');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should remove \"disabled\" class","suites":["API","enable()"],"updatePoint":{"line":60,"column":40},"line":60,"code":"      it('should remove \"disabled\" class', function () {\n        expect(test.selectize.$control.hasClass('disabled')).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set isDisabled property to false","suites":["API","enable()"],"updatePoint":{"line":63,"column":49},"line":63,"code":"      it('should set isDisabled property to false', function () {\n        expect(test.selectize.isDisabled).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should remove \"disabled\" attribute on inputs","suites":["API","enable()"],"updatePoint":{"line":66,"column":54},"line":66,"code":"      it('should remove \"disabled\" attribute on inputs', function () {\n        expect(test.selectize.$input.is(':disabled')).to.be.equal(false);\n        expect(test.selectize.$control_input.is(':disabled')).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set isFocused property to true","suites":["API","focus()"],"updatePoint":{"line":80,"column":47},"line":80,"code":"      it('should set isFocused property to true', function () {\n        expect(test.selectize.isFocused).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should give the control focus","suites":["API","focus()"],"updatePoint":{"line":83,"column":39},"line":83,"code":"      it('should give the control focus', function () {\n        expect(has_focus(test.selectize.$control_input[0])).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should return self to support chaining","suites":["API","focus()"],"updatePoint":{"line":86,"column":48},"line":86,"code":"      it('should return self to support chaining', function () {\n        expect(self.getValue()).to.be.equal('');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should set isFocused property to false","suites":["API","blur()"],"updatePoint":{"line":100,"column":48},"line":100,"code":"      it('should set isFocused property to false', function () {\n        expect(test.selectize.isFocused).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should remove focus from the control","suites":["API","blur()"],"updatePoint":{"line":103,"column":46},"line":103,"code":"      it('should remove focus from the control', function () {\n        expect(has_focus(test.selectize.$control_input[0])).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should return self to support chaining","suites":["API","blur()"],"updatePoint":{"line":106,"column":48},"line":106,"code":"      it('should return self to support chaining', function () {\n        expect(self.getValue()).to.be.equal('');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should fail if non-object returned by \"create\" callback","suites":["API","createItem()"],"updatePoint":{"line":111,"column":65},"line":111,"code":"      it('should fail if non-object returned by \"create\" callback', function () {\n        var test = setup_test('<select>', {\n          valueField: 'value',\n          labelField: 'value',\n          create: function (input) {\n            return false;\n          }\n        });\n        test.selectize.$control_input.val('test');\n        test.selectize.createItem();\n        expect(test.selectize.items.length).to.be.equal(0);\n        test = setup_test('<select>', {\n          valueField: 'value',\n          labelField: 'value',\n          create: function (input) {\n            return 'hello';\n          }\n        });\n        test.selectize.$control_input.val('test');\n        test.selectize.createItem();\n        expect(test.selectize.items.length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should add option upon completion (synchronous)","suites":["API","createItem()"],"updatePoint":{"line":133,"column":57},"line":133,"code":"      it('should add option upon completion (synchronous)', function () {\n        var test = setup_test('<select>', {\n          valueField: 'value',\n          labelField: 'value',\n          create: function (input) {\n            return {\n              value: input\n            };\n          }\n        });\n        test.selectize.$control_input.val('test');\n        test.selectize.createItem();\n        expect(test.selectize.options).to.have.property('test');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should add option upon completion (asynchronous)","suites":["API","createItem()"],"updatePoint":{"line":147,"column":58},"line":147,"code":"      it('should add option upon completion (asynchronous)', function (done) {\n        var test = setup_test('<select>', {\n          valueField: 'value',\n          labelField: 'value',\n          create: function (input, callback) {\n            window.setTimeout(function () {\n              callback({\n                value: input\n              });\n              expect(test.selectize.options).to.have.property('test');\n              done();\n            }, 0);\n          }\n        });\n        test.selectize.$control_input.val('test');\n        test.selectize.createItem();\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should register group","suites":["API","addOptionGroup()"],"updatePoint":{"line":174,"column":31},"line":174,"code":"      it('should register group', function () {\n        var data = {\n          label: 'Group Label'\n        };\n        test.selectize.addOptionGroup('group_id', data);\n        expect(test.selectize.optgroups).to.have.property('group_id');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should add implicit $order property","suites":["API","addOptionGroup()"],"updatePoint":{"line":181,"column":45},"line":181,"code":"      it('should add implicit $order property', function () {\n        test.selectize.addOptionGroup('group1', {});\n        test.selectize.addOptionGroup('group2', {});\n        assert.equal(test.selectize.optgroups['group1'].$order, 2);\n        assert.equal(test.selectize.optgroups['group2'].$order, 3);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should remove group","suites":["API","removeOptionGroup()"],"updatePoint":{"line":196,"column":29},"line":196,"code":"      it('should remove group', function () {\n        var data = {\n          label: 'Group Label'\n        };\n        test.selectize.addOptionGroup('group_id', data);\n        test.selectize.removeOptionGroup('group_id');\n        expect(test.selectize.optgroups).to.not.have.property('group_id');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should clear all groups","suites":["API","clearOptionGroups()"],"updatePoint":{"line":213,"column":33},"line":213,"code":"      it('should clear all groups', function () {\n        var data = {\n          label: 'Group Label'\n        };\n        test.selectize.addOptionGroup('group_id', data);\n        test.selectize.addOptionGroup('group_id2', data);\n        test.selectize.clearOptionGroups();\n        expect(test.selectize.optgroups).to.deep.equal({});\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should add implicit $order property","suites":["API","addOption()"],"updatePoint":{"line":231,"column":45},"line":231,"code":"      it('should add implicit $order property', function () {\n        var opt1 = {\n          value: 'hello'\n        };\n        var opt2 = {\n          value: 'world'\n        };\n        test.selectize.addOption(opt1);\n        test.selectize.addOption(opt2);\n        assert.deepEqual(test.selectize.options, {\n          'hello': {\n            value: 'hello',\n            $order: 1\n          },\n          'world': {\n            value: 'world',\n            $order: 2\n          }\n        });\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow string values","suites":["API","addOption()"],"updatePoint":{"line":251,"column":36},"line":251,"code":"      it('should allow string values', function () {\n        test.selectize.addOption({\n          value: 'stringtest'\n        });\n        expect(test.selectize.options).to.have.property('stringtest');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not allow null / undefined values","suites":["API","addOption()"],"updatePoint":{"line":257,"column":50},"line":257,"code":"      it('should not allow null / undefined values', function () {\n        test.selectize.addOption({\n          value: undefined\n        });\n        test.selectize.addOption({\n          value: null\n        });\n        expect(test.selectize.options).to.not.have.property('undefined');\n        expect(test.selectize.options).to.not.have.property('null');\n        expect(test.selectize.options).to.not.have.property('');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow integer values","suites":["API","addOption()"],"updatePoint":{"line":268,"column":37},"line":268,"code":"      it('should allow integer values', function () {\n        test.selectize.addOption({\n          value: 0\n        });\n        test.selectize.addOption({\n          value: 1\n        });\n        expect(test.selectize.options).to.have.property('0');\n        expect(test.selectize.options).to.have.property('1');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow arrays of options","suites":["API","addOption()"],"updatePoint":{"line":278,"column":40},"line":278,"code":"      it('should allow arrays of options', function () {\n        test.selectize.addOption([{\n          value: 'a'\n        }, {\n          value: 'b'\n        }]);\n        expect(test.selectize.options).to.have.property('a');\n        expect(test.selectize.options).to.have.property('b');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not override existing options","suites":["API","addOption()"],"updatePoint":{"line":287,"column":46},"line":287,"code":"      it('should not override existing options', function () {\n        test.selectize.addOption([{\n          value: 'a'\n        }, {\n          value: 'b'\n        }]);\n        test.selectize.addOption({\n          value: 'a',\n          test: 'hello'\n        });\n        expect(test.selectize.options.a).to.not.have.property('test');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should update \"items\" array","suites":["API","addItem()"],"updatePoint":{"line":335,"column":37},"line":335,"code":"      it('should update \"items\" array', function () {\n        test.selectize.addItem('b');\n        expect(test.selectize.items.indexOf('b')).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not give control focus","suites":["API","addItem()"],"updatePoint":{"line":339,"column":39},"line":339,"code":"      it('should not give control focus', function (done) {\n        test.selectize.addItem(0);\n        window.setTimeout(function () {\n          expect(test.selectize.isFocused).to.be.equal(false);\n          done();\n        }, 0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not allow duplicate entries","suites":["API","addItem()"],"updatePoint":{"line":346,"column":44},"line":346,"code":"      it('should not allow duplicate entries', function () {\n        test.selectize.addItem('a');\n        test.selectize.addItem('a');\n        expect(test.selectize.items.indexOf('a')).to.be.equal(test.selectize.items.lastIndexOf('a'));\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not allow undefined / null values","suites":["API","addItem()"],"updatePoint":{"line":351,"column":50},"line":351,"code":"      it('should not allow undefined / null values', function () {\n        test.selectize.addItem(undefined);\n        test.selectize.addItem(null);\n        expect(test.selectize.items.indexOf('undefined')).to.be.equal(-1);\n        expect(test.selectize.items.indexOf('null')).to.be.equal(-1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow integer values","suites":["API","addItem()"],"updatePoint":{"line":357,"column":37},"line":357,"code":"      it('should allow integer values', function () {\n        test.selectize.addItem(0);\n        expect(test.selectize.items.indexOf('0')).to.not.be.equal(-1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not fire \"change\" if silent is truthy","suites":["API","addItem()"],"updatePoint":{"line":361,"column":54},"line":361,"code":"      it('should not fire \"change\" if silent is truthy', function (done) {\n        var watcher = function (e) {\n          throw new Error('Change fired');\n        };\n\n        test.$select.on('change', watcher);\n        test.selectize.addItem('x', true);\n        expect(test.selectize.items.indexOf('x')).to.not.be.equal(-1);\n        window.setTimeout(function () {\n          test.$select.off('change', watcher);\n          done();\n        }, 0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should update DOM","suites":["API","addItem()"],"updatePoint":{"line":374,"column":27},"line":374,"code":"      it('should update DOM', function () {\n        test.selectize.addItem('c');\n        expect(test.selectize.$control.find('[data-value=c]').length).to.be.equal(1);\n        test.selectize.addItem('$1');\n        var found = false;\n        test.selectize.$control.children().each(function () {\n          if (this.getAttribute('data-value') === '$1') {\n            found = true;\n            return false;\n          }\n        });\n        expect(found).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should update option data","suites":["API","updateOption()"],"updatePoint":{"line":428,"column":35},"line":428,"code":"      it('should update option data', function () {\n        test.selectize.updateOption('a', {\n          value: 'a',\n          test: 'test'\n        });\n        expect(test.selectize.options).to.have.property('a');\n        expect(test.selectize.options['a'].test).to.equal('test');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should update indexes","suites":["API","updateOption()"],"updatePoint":{"line":436,"column":31},"line":436,"code":"      it('should update indexes', function () {\n        test.selectize.updateOption('e', {\n          value: 'e_updated'\n        });\n        expect(test.selectize.options).to.not.have.property('e');\n        expect(test.selectize.options).to.have.property('e_updated');\n        expect(test.selectize.items.indexOf('e')).to.be.equal(-1);\n        expect(test.selectize.items.indexOf('e_updated')).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should maintain implicit $order property","suites":["API","updateOption()"],"updatePoint":{"line":445,"column":50},"line":445,"code":"      it('should maintain implicit $order property', function () {\n        var order_orig = test.selectize.options['x'].$order;\n        assert.isNumber(order_orig);\n        test.selectize.updateOption('x', {\n          value: 'x',\n          something: 'x'\n        });\n        assert.equal(test.selectize.options['x'].$order, order_orig);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow integer values","suites":["API","updateOption()"],"updatePoint":{"line":454,"column":37},"line":454,"code":"      it('should allow integer values', function () {\n        test.selectize.updateOption(0, {\n          value: '0_updated'\n        });\n        test.selectize.updateOption(1, {\n          value: '1_updated'\n        });\n        expect(test.selectize.options).to.not.have.property('0');\n        expect(test.selectize.options).to.not.have.property('1');\n        expect(test.selectize.options).to.have.property('0_updated');\n        expect(test.selectize.options).to.have.property('1_updated');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should throw error if value not set in data","suites":["API","updateOption()"],"updatePoint":{"line":466,"column":53},"line":466,"code":"      it('should throw error if value not set in data', function () {\n        expect(function () {\n          test.selectize.updateOption('c', {\n            value: undefined,\n            test: 'test'\n          });\n          test.selectize.updateOption('d', {\n            value: null,\n            test: 'test'\n          });\n        }).to.throw(Error);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should ignore undefined / null value references","suites":["API","updateOption()"],"updatePoint":{"line":478,"column":57},"line":478,"code":"      it('should ignore undefined / null value references', function () {\n        test.selectize.updateOption(undefined, {\n          value: 'undefined',\n          test: 'test'\n        });\n        test.selectize.updateOption(null, {\n          value: 'null',\n          test: 'test'\n        });\n        expect(test.selectize.options['undefined']).to.not.have.property('test');\n        expect(test.selectize.options['null']).to.not.have.property('test');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should update DOM","suites":["API","updateOption()"],"updatePoint":{"line":490,"column":27},"line":490,"code":"      it('should update DOM', function () {\n        test.selectize.updateOption('f', {\n          value: 'f_updated'\n        });\n        expect(test.selectize.$control.find('[data-value=f]').length).to.be.equal(0);\n        expect(test.selectize.$control.find('[data-value=f_updated]').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow string values","suites":["API","getOption()"],"updatePoint":{"line":526,"column":36},"line":526,"code":"      it('should allow string values', function () {\n        expect(test.selectize.getOption('a')).to.be.ok;\n        expect(test.selectize.getOption('a').length).to.be.equal(1);\n        expect(test.selectize.getOption('b')).to.be.ok;\n        expect(test.selectize.getOption('b').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow integer values","suites":["API","getOption()"],"updatePoint":{"line":532,"column":37},"line":532,"code":"      it('should allow integer values', function () {\n        expect(test.selectize.getOption(0)).to.be.ok;\n        expect(test.selectize.getOption(0).length).to.be.equal(1);\n        expect(test.selectize.getOption(1)).to.be.ok;\n        expect(test.selectize.getOption(1).length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow values with quotation marks","suites":["API","getOption()"],"updatePoint":{"line":538,"column":50},"line":538,"code":"      it('should allow values with quotation marks', function () {\n        expect(test.selectize.getOption('\\'')).to.be.ok;\n        expect(test.selectize.getOption('\\'').length).to.be.equal(1);\n        expect(test.selectize.getOption('\"')).to.be.ok;\n        expect(test.selectize.getOption('\"').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow values with backslashes","suites":["API","getOption()"],"updatePoint":{"line":544,"column":46},"line":544,"code":"      it('should allow values with backslashes', function () {\n        expect(test.selectize.getOption('\\\\')).to.be.ok;\n        expect(test.selectize.getOption('\\\\').length).to.be.equal(1);\n        expect(test.selectize.getOption('\\\\\\'')).to.be.ok;\n        expect(test.selectize.getOption('\\\\\\'').length).to.be.equal(1);\n        expect(test.selectize.getOption('\\\\\"')).to.be.ok;\n        expect(test.selectize.getOption('\\\\\"').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not allow undefined / null values","suites":["API","getOption()"],"updatePoint":{"line":552,"column":50},"line":552,"code":"      it('should not allow undefined / null values', function () {\n        expect(test.selectize.getOption(null)).to.be.ok;\n        expect(test.selectize.getOption(null).length).to.be.equal(0);\n        expect(test.selectize.getOption(undefined)).to.be.ok;\n        expect(test.selectize.getOption(undefined).length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow string values","suites":["API","getItem()"],"updatePoint":{"line":585,"column":36},"line":585,"code":"      it('should allow string values', function () {\n        expect(test.selectize.getItem('a')).to.be.ok;\n        expect(test.selectize.getItem('a').length).to.be.equal(1);\n        expect(test.selectize.getItem('b')).to.be.ok;\n        expect(test.selectize.getItem('b').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow integer values","suites":["API","getItem()"],"updatePoint":{"line":591,"column":37},"line":591,"code":"      it('should allow integer values', function () {\n        expect(test.selectize.getItem(0)).to.be.ok;\n        expect(test.selectize.getItem(0).length).to.be.equal(1);\n        expect(test.selectize.getItem(1)).to.be.ok;\n        expect(test.selectize.getItem(1).length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow values with quotation marks","suites":["API","getItem()"],"updatePoint":{"line":597,"column":50},"line":597,"code":"      it('should allow values with quotation marks', function () {\n        expect(test.selectize.getItem('\\'')).to.be.ok;\n        expect(test.selectize.getItem('\\'').length).to.be.equal(1);\n        expect(test.selectize.getItem('\"')).to.be.ok;\n        expect(test.selectize.getItem('\"').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow values with backslashes","suites":["API","getItem()"],"updatePoint":{"line":603,"column":46},"line":603,"code":"      it('should allow values with backslashes', function () {\n        expect(test.selectize.getItem('\\\\\\'')).to.be.ok;\n        expect(test.selectize.getItem('\\\\\\'').length).to.be.equal(1);\n        expect(test.selectize.getItem('\\\\\"')).to.be.ok;\n        expect(test.selectize.getItem('\\\\\"').length).to.be.equal(1);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not allow undefined / null values","suites":["API","getItem()"],"updatePoint":{"line":609,"column":50},"line":609,"code":"      it('should not allow undefined / null values', function () {\n        expect(test.selectize.getItem(null)).to.be.ok;\n        expect(test.selectize.getItem(null).length).to.be.equal(0);\n        expect(test.selectize.getItem(undefined)).to.be.ok;\n        expect(test.selectize.getItem(undefined).length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should empty \"$activeItems\" array","suites":["API","clear()"],"updatePoint":{"line":634,"column":43},"line":634,"code":"      it('should empty \"$activeItems\" array', function () {\n        test.selectize.setActiveItem(test.selectize.getItem('1'));\n        expect(test.selectize.$activeItems.length).to.be.equal(1);\n        test.selectize.clear();\n        expect(test.selectize.$activeItems.length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should refresh option list (dropdown)","suites":["API","clear()"],"updatePoint":{"line":640,"column":47},"line":640,"code":"      it('should refresh option list (dropdown)', function (done) {\n        // test = setup_test('<select multiple>', {\n        // \tvalueField: 'value',\n        // \tlabelField: 'value',\n        // \toptions: [\n        // \t\t{value: 0},\n        // \t\t{value: 1},\n        // \t\t{value: 2},\n        // \t\t{value: 3},\n        // \t],\n        // \titems: ['1','2','3']\n        // });\n        test.selectize.focus();\n        window.setTimeout(function () {\n          test.selectize.clear();\n          test.selectize.focus();\n          window.setTimeout(function () {\n            expect(test.selectize.$dropdown_content.find('[data-value=1]').length).to.be.equal(1);\n            expect(test.selectize.$dropdown_content.find('[data-value=2]').length).to.be.equal(1);\n            expect(test.selectize.$dropdown_content.find('[data-value=3]').length).to.be.equal(1);\n            done();\n          }, 0);\n        }, 0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should empty \"items\" array","suites":["API","clear()"],"updatePoint":{"line":664,"column":36},"line":664,"code":"      it('should empty \"items\" array', function () {\n        test.selectize.clear();\n        expect(test.selectize.items.length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should update DOM","suites":["API","clear()"],"updatePoint":{"line":668,"column":27},"line":668,"code":"      it('should update DOM', function () {\n        test.selectize.clear();\n        expect(test.selectize.$control.find('[data-value=1]').length).to.be.equal(0);\n        expect(test.selectize.$control.find('[data-value=2]').length).to.be.equal(0);\n        expect(test.selectize.$control.find('[data-value=3]').length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not fire \"change\" if silent is truthy","suites":["API","clear()"],"updatePoint":{"line":674,"column":54},"line":674,"code":"      it('should not fire \"change\" if silent is truthy', function (done) {\n        var watcher = function (e) {\n          throw new Error('Change fired');\n        };\n\n        test.$select.on('change', watcher);\n        test.selectize.clear(true);\n        window.setTimeout(function () {\n          test.$select.off('change', watcher);\n          done();\n        }, 0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not give control focus","suites":["API","clear()"],"updatePoint":{"line":686,"column":39},"line":686,"code":"      it('should not give control focus', function (done) {\n        test.selectize.clear();\n        window.setTimeout(function () {\n          expect(test.selectize.isFocused).to.be.equal(false);\n          done();\n        }, 0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should empty \"items\" array","suites":["API","clear()"],"updatePoint":{"line":693,"column":36},"line":693,"code":"      it('should empty \"items\" array', function () {\n        test.selectize.clear();\n        expect(test.selectize.items.length).to.be.equal(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should throw error if \"score\" setting does not return a function","suites":["API","search()"],"updatePoint":{"line":699,"column":74},"line":699,"code":"      it('should throw error if \"score\" setting does not return a function', function () {\n        var test;\n        expect(function () {\n          test = setup_test('<select multiple>', {\n            valueField: 'value',\n            labelField: 'value',\n            options: [{\n              value: 0\n            }, {\n              value: 1\n            }],\n            score: function () {}\n          });\n          test.selectize.search('hello');\n        }).to.throw(Error);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should not throw error if \"score\" setting does return a function","suites":["API","search()"],"updatePoint":{"line":715,"column":74},"line":715,"code":"      it('should not throw error if \"score\" setting does return a function', function () {\n        var test;\n        expect(function () {\n          test = setup_test('<select multiple>', {\n            valueField: 'value',\n            labelField: 'value',\n            options: [{\n              value: 0\n            }, {\n              value: 1\n            }],\n            score: function (query) {\n              return function (item) {\n                return 0;\n              };\n            }\n          });\n          test.selectize.search('hello');\n        }).to.not.throw(Error);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should return an function that returns a number","suites":["API","getScoreFunction()"],"updatePoint":{"line":737,"column":57},"line":737,"code":"      it('should return an function that returns a number', function () {\n        var test = setup_test('<select multiple>', {\n          valueField: 'value',\n          labelField: 'value',\n          searchField: 'value',\n          options: []\n        });\n        var fn = test.selectize.getScoreFunction('test');\n        expect(typeof fn).to.be.equal('function');\n        expect(typeof fn({\n          value: 'test'\n        })).to.be.equal('number');\n        expect(fn({\n          value: 'test'\n        })).to.be.above(0);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should remove control from DOM","suites":["API","destroy()"],"updatePoint":{"line":773,"column":40},"line":773,"code":"      it('should remove control from DOM', function () {\n        var test = setup_test('<select>', {});\n        test.selectize.destroy();\n        expect($.contains(document.documentElement, test.selectize.$wrapper[0])).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should delete \"selectize\" reference on original input element","suites":["API","destroy()"],"updatePoint":{"line":778,"column":71},"line":778,"code":"      it('should delete \"selectize\" reference on original input element', function () {\n        var test = setup_test('<select>', {});\n        test.selectize.destroy();\n        expect(test.selectize.$input[0].selectize).to.be.equal(undefined);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should unbind events on window","suites":["API","destroy()"],"updatePoint":{"line":783,"column":40},"line":783,"code":"      it('should unbind events on window', function () {\n        var test = setup_test('<select>', {});\n        test.selectize.destroy();\n        expect(has_namespaced_event($(window), test.selectize.eventNS)).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should unbind events on document","suites":["API","destroy()"],"updatePoint":{"line":788,"column":42},"line":788,"code":"      it('should unbind events on document', function () {\n        var test = setup_test('<select>', {});\n        test.selectize.destroy();\n        expect(has_namespaced_event($(document), test.selectize.eventNS)).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should unbind events on <body>","suites":["API","destroy()"],"updatePoint":{"line":793,"column":40},"line":793,"code":"      it('should unbind events on <body>', function () {\n        var test = setup_test('<select>', {});\n        test.selectize.destroy();\n        expect(has_namespaced_event($('body'), test.selectize.eventNS)).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should restore original options and tabindex","suites":["API","destroy()"],"updatePoint":{"line":798,"column":54},"line":798,"code":"      it('should restore original options and tabindex', function () {\n        var children = '<optgroup label=\"Swedish Cars\">' + '<option value=\"volvo\">Volvo</option>' + '<option value=\"saab\">Saab</option>' + '</optgroup>' + '<optgroup label=\"German Cars\">' + '<option value=\"mercedes\">Mercedes</option>' + '<option value=\"audi\">Audi</option>' + '</optgroup>';\n        var test = setup_test('<select tabindex=\"9999\">' + children + '</select>', {});\n        test.selectize.destroy();\n        expect(test.$select.html()).to.be.equal(children);\n        expect(test.$select.attr('tabindex')).to.be.equal('9999');\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should remove tabindex if it was originally undefined","suites":["API","destroy()"],"updatePoint":{"line":805,"column":63},"line":805,"code":"      it('should remove tabindex if it was originally undefined', function () {\n        var test = setup_test('<select>', {});\n        test.selectize.destroy();\n        expect(test.$select.attr('tabindex')).to.be.equal(undefined);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should clear the whole renderCache","suites":["API","clearCache()"],"updatePoint":{"line":832,"column":44},"line":832,"code":"      it('should clear the whole renderCache', function () {\n        expect($.isEmptyObject(test.selectize.renderCache)).to.be.equal(false);\n        test.selectize.clearCache();\n        expect($.isEmptyObject(test.selectize.renderCache)).to.be.equal(true);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should allow clearing just one template type from the renderCache","suites":["API","clearCache()"],"updatePoint":{"line":837,"column":75},"line":837,"code":"      it('should allow clearing just one template type from the renderCache', function () {\n        test.selectize.render('item', test.selectize.options[0]);\n        test.selectize.refreshOptions();\n        expect($.isEmptyObject(test.selectize.renderCache['option'])).to.be.equal(false);\n        expect($.isEmptyObject(test.selectize.renderCache['item'])).to.be.equal(false);\n        test.selectize.clearCache('option');\n        expect($.isEmptyObject(test.selectize.renderCache['option'])).to.be.equal(true);\n        expect($.isEmptyObject(test.selectize.renderCache['item'])).to.be.equal(false);\n      });","file":"api.js","skipped":false,"dir":"test"},{"name":"should be triggered once by addItem()","suites":["DOM Events","\"change\""],"updatePoint":{"line":3,"column":45},"line":3,"code":"    it('should be triggered once by addItem()', function (done) {\n      var test = setup_test('<select>', {\n        valueField: 'value',\n        labelField: 'value',\n        options: [{\n          value: 'a'\n        }, {\n          value: 'b'\n        }],\n        items: ['a']\n      });\n      var counter = 0;\n      test.$select.on('change', function () {\n        counter++;\n      });\n      test.selectize.addItem('b');\n      window.setTimeout(function () {\n        expect(counter).to.be.equal(1);\n        done();\n      }, 0);\n    });","file":"events_dom.js","skipped":false,"dir":"test"},{"name":"should be triggered once by removeItem()","suites":["DOM Events","\"change\""],"updatePoint":{"line":24,"column":48},"line":24,"code":"    it('should be triggered once by removeItem()', function (done) {\n      var test = setup_test('<select multiple>', {\n        valueField: 'value',\n        labelField: 'value',\n        options: [{\n          value: 'a'\n        }, {\n          value: 'b'\n        }],\n        items: ['a', 'b']\n      });\n      var counter = 0;\n      test.$select.on('change', function () {\n        counter++;\n      });\n      test.selectize.removeItem('b');\n      window.setTimeout(function () {\n        expect(counter).to.be.equal(1);\n        done();\n      }, 0);\n    });","file":"events_dom.js","skipped":false,"dir":"test"},{"name":"should be triggered once by clear()","suites":["DOM Events","\"change\""],"updatePoint":{"line":45,"column":43},"line":45,"code":"    it('should be triggered once by clear()', function (done) {\n      var test = setup_test('<select multiple>', {\n        valueField: 'value',\n        labelField: 'value',\n        options: [{\n          value: 'a'\n        }, {\n          value: 'b'\n        }],\n        items: ['a', 'b']\n      });\n      var counter = 0;\n      test.$select.on('change', function () {\n        counter++;\n      });\n      test.selectize.clear();\n      window.setTimeout(function () {\n        expect(counter).to.be.equal(1);\n        done();\n      }, 0);\n    });","file":"events_dom.js","skipped":false,"dir":"test"},{"name":"should work as expected","suites":["Events","focus"],"updatePoint":{"line":3,"column":31},"line":3,"code":"    it('should work as expected', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      var counter = 0;\n      test.selectize.on('focus', function () {\n        counter++;\n      });\n      test.selectize.focus();\n      syn.click(test.selectize.$control).delay(0, function () {\n        window.setTimeout(function () {\n          expect(counter).to.be.equal(1);\n          done();\n        }, 0);\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should work as expected","suites":["Events","blur"],"updatePoint":{"line":19,"column":31},"line":19,"code":"    it('should work as expected', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      var counter = 0;\n      test.selectize.on('blur', function () {\n        counter++;\n      });\n      test.selectize.focus();\n      syn.click(test.selectize.$control).delay(0, function () {\n        syn.click($('body')).delay(0, function () {\n          window.setTimeout(function () {\n            expect(counter).to.be.equal(1);\n            done();\n          }, 0);\n        });\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered once","suites":["Events","change"],"updatePoint":{"line":37,"column":32},"line":37,"code":"    it('should be triggered once', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      var counter = 0;\n      test.selectize.on('change', function () {\n        counter++;\n      });\n      test.selectize.setValue('b');\n      window.setTimeout(function () {\n        expect(counter).to.be.equal(1);\n        done();\n      }, 0);\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain current value","suites":["Events","change"],"updatePoint":{"line":49,"column":36},"line":49,"code":"    it('should contain current value', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('change', function (value) {\n        expect(value).to.be.equal('c');\n        done();\n      });\n      test.selectize.setValue('c');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should not be triggered when the selected item has not changed","suites":["Events","change"],"updatePoint":{"line":57,"column":70},"line":57,"code":"    it('should not be triggered when the selected item has not changed', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected=\"selected\">a</option></select>');\n      var counter = 0;\n      test.$select.on('change', function () {\n        counter++;\n      });\n      syn.click(test.selectize.$control).delay(0, function () {\n        syn.click($('[data-value=\"a\"]', test.selectize.$dropdown)).delay(0, function () {\n          expect(counter).to.be.equal(0);\n          done();\n        });\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should not be possible to trigger a disabled option","suites":["Events","change"],"updatePoint":{"line":70,"column":59},"line":70,"code":"    it('should not be possible to trigger a disabled option', function (done) {\n      var test = setup_test(['<select>', '<option value=\"a\" disabled>Item A</option>', '<option value=\"b\">Item B</option>', '</select>'].join(''), {});\n      var counter = 0;\n      test.$select.on('change', function () {\n        counter++;\n      });\n      syn.click(test.selectize.$control).delay(0, function () {\n        syn.click($('[data-value=\"a\"]', test.selectize.$dropdown)).delay(0, function () {\n          expect(counter).to.be.equal(0);\n          done();\n        });\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should not be possible to trigger a option under a disabled optgroup","suites":["Events","change"],"updatePoint":{"line":83,"column":76},"line":83,"code":"    it('should not be possible to trigger a option under a disabled optgroup', function (done) {\n      var test = setup_test(['<select>', '<optgroup label=\"Group 1\">', '<option value=\"a\">Item A</option>', '</optgroup>', '<optgroup label=\"Group 2\" disabled>', '<option value=\"b\">Item B</option>', '<option value=\"c\">Item C</option>', '</optgroup>', '</select>'].join(''), {});\n      var counter = 0;\n      test.$select.on('change', function () {\n        counter++;\n      });\n      syn.click(test.selectize.$control).delay(0, function () {\n        syn.click($('[data-value=\"c\"]', test.selectize.$dropdown)).delay(0, function () {\n          expect(counter).to.be.equal(0);\n          done();\n        });\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered once before change","suites":["Events","input"],"updatePoint":{"line":98,"column":46},"line":98,"code":"    it('should be triggered once before change', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      var evt = '';\n      test.$select.on('change', function () {\n        evt = evt + 'change';\n      });\n      test.$select.on('input', function () {\n        evt = evt + 'input';\n      });\n      test.selectize.setValue('b');\n      window.setTimeout(function () {\n        expect(evt).to.be.equal('inputchange');\n        done();\n      }, 0);\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should not be triggered when the selected item has not changed","suites":["Events","input"],"updatePoint":{"line":113,"column":70},"line":113,"code":"    it('should not be triggered when the selected item has not changed', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected=\"selected\">a</option></select>');\n      var counter = 0;\n      test.$select.on('input', function () {\n        counter++;\n      });\n      syn.click(test.selectize.$control).delay(0, function () {\n        syn.click($('[data-value=\"a\"]', test.selectize.$dropdown)).delay(0, function () {\n          expect(counter).to.be.equal(0);\n          done();\n        });\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","item_add"],"updatePoint":{"line":128,"column":27},"line":128,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\"></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('item_add', function () {\n        done();\n      });\n      test.selectize.addItem('b');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain item's value and element","suites":["Events","item_add"],"updatePoint":{"line":135,"column":48},"line":135,"code":"    it('should contain item\\'s value and element', function (done) {\n      var test = setup_test('<select><option value=\"a\"></option><option value=\"b\"></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('item_add', function (value, $item) {\n        expect(value).to.be.equal('b');\n        assert.equal($item.length, 1);\n        done();\n      });\n      test.selectize.addItem('b');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","item_before_remove"],"updatePoint":{"line":146,"column":27},"line":146,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select multiple><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('item_before_remove', function () {\n        done();\n      });\n      test.selectize.removeItem('a');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain item's value and element","suites":["Events","item_before_remove"],"updatePoint":{"line":153,"column":48},"line":153,"code":"    it('should contain item\\'s value and element', function (done) {\n      var test = setup_test('<select multiple><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('item_before_remove', function (value, $item) {\n        expect(value).to.be.equal('b');\n        assert.equal($item.length, 1);\n        done();\n      });\n      test.selectize.removeItem('b');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","item_remove"],"updatePoint":{"line":164,"column":27},"line":164,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select multiple><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('item_remove', function () {\n        done();\n      });\n      test.selectize.removeItem('a');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain item's value and element","suites":["Events","item_remove"],"updatePoint":{"line":171,"column":48},"line":171,"code":"    it('should contain item\\'s value and element', function (done) {\n      var test = setup_test('<select multiple><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('item_remove', function (value, $item) {\n        expect(value).to.be.equal('b');\n        assert.equal($item.length, 1);\n        done();\n      });\n      test.selectize.removeItem('b');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","clear"],"updatePoint":{"line":182,"column":27},"line":182,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('clear', function () {\n        done();\n      });\n      test.selectize.clear();\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","optgroup_add"],"updatePoint":{"line":191,"column":27},"line":191,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('optgroup_add', function () {\n        done();\n      });\n      test.selectize.addOptionGroup('id', {\n        label: 'Group'\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain optgroup id","suites":["Events","optgroup_add"],"updatePoint":{"line":200,"column":34},"line":200,"code":"    it('should contain optgroup id', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('optgroup_add', function (id, data) {\n        expect(id).to.be.equal('id');\n        done();\n      });\n      test.selectize.addOptionGroup('id', {\n        label: 'Group'\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain outgroup data","suites":["Events","optgroup_add"],"updatePoint":{"line":210,"column":36},"line":210,"code":"    it('should contain outgroup data', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      var optgroup = {\n        label: 'Group'\n      };\n      test.selectize.on('optgroup_add', function (id, data) {\n        expect(data).to.eql(optgroup);\n        done();\n      });\n      test.selectize.addOptionGroup('id', optgroup);\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","optgroup_remove"],"updatePoint":{"line":223,"column":27},"line":223,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('optgroup_remove', function (id) {\n        expect(id).to.be.equal('id');\n        done();\n      });\n      test.selectize.addOptionGroup('id', {\n        label: 'Group'\n      });\n      test.selectize.removeOptionGroup('id');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","optgroup_clear"],"updatePoint":{"line":236,"column":27},"line":236,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('optgroup_clear', function () {\n        done();\n      });\n      test.selectize.addOptionGroup('id', {\n        label: 'Group'\n      });\n      test.selectize.clearOptionGroups();\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","option_add"],"updatePoint":{"line":248,"column":27},"line":248,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('option_add', function () {\n        done();\n      });\n      test.selectize.addOption({\n        value: 'e'\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain option value","suites":["Events","option_add"],"updatePoint":{"line":257,"column":35},"line":257,"code":"    it('should contain option value', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('option_add', function (value, data) {\n        expect(value).to.be.equal('e');\n        done();\n      });\n      test.selectize.addOption({\n        value: 'e'\n      });\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain option data","suites":["Events","option_add"],"updatePoint":{"line":267,"column":34},"line":267,"code":"    it('should contain option data', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      var option = {\n        value: 'e'\n      };\n      test.selectize.on('option_add', function (value, data) {\n        expect(option).to.eql(data);\n        done();\n      });\n      test.selectize.addOption(option);\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","option_remove"],"updatePoint":{"line":280,"column":27},"line":280,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('option_remove', function () {\n        done();\n      });\n      test.selectize.removeOption('a');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain option value","suites":["Events","option_remove"],"updatePoint":{"line":287,"column":35},"line":287,"code":"    it('should contain option value', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('option_remove', function (value) {\n        expect(value).to.be.equal('a');\n        done();\n      });\n      test.selectize.removeOption('a');\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","option_clear"],"updatePoint":{"line":297,"column":27},"line":297,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('option_clear', function () {\n        done();\n      });\n      test.selectize.clearOptions();\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","dropdown_open"],"updatePoint":{"line":306,"column":27},"line":306,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('dropdown_open', function () {\n        done();\n      });\n      test.selectize.open();\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","dropdown_close"],"updatePoint":{"line":315,"column":27},"line":315,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('dropdown_close', function () {\n        done();\n      });\n      test.selectize.open();\n      test.selectize.close();\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","destroy"],"updatePoint":{"line":325,"column":27},"line":325,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select><option value=\"a\" selected></option><option value=\"b\" selected></option><option value=\"c\"></option></select>', {});\n      test.selectize.on('destroy', function () {\n        done();\n      });\n      test.selectize.destroy();\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should be triggered","suites":["Events","type"],"updatePoint":{"line":334,"column":27},"line":334,"code":"    it('should be triggered', function (done) {\n      var test = setup_test('<select></select>', {\n        create: true\n      });\n      test.selectize.on('type', function () {\n        done();\n      });\n      syn.click(test.selectize.$control).type('a', test.selectize.$control_input);\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should contain current value","suites":["Events","type"],"updatePoint":{"line":343,"column":36},"line":343,"code":"    it('should contain current value', function (done) {\n      var test = setup_test('<select></select>', {\n        create: true\n      });\n      test.selectize.on('type', function (value) {\n        expect(value).to.be.equal('a');\n        done();\n      });\n      syn.click(test.selectize.$control).type('a', test.selectize.$control_input);\n    });","file":"events.js","skipped":false,"dir":"test"},{"name":"should keep dropdown open after selection made if closeAfterSelect: false","suites":["Interaction"],"updatePoint":{"line":12,"column":81},"line":12,"code":"    it('should keep dropdown open after selection made if closeAfterSelect: false', function (done) {\n      var test = setup_test('<select multiple>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n      click(test.selectize.$control, function () {\n        click($('[data-value=a]', test.selectize.$dropdown_content), function () {\n          expect(test.selectize.isOpen).to.be.equal(true);\n          expect(test.selectize.isFocused).to.be.equal(true);\n          done();\n        });\n      });\n    });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should close dropdown after selection made if closeAfterSelect: true","suites":["Interaction"],"updatePoint":{"line":22,"column":76},"line":22,"code":"    it('should close dropdown after selection made if closeAfterSelect: true', function (done) {\n      var test = setup_test('<select multiple>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {\n        closeAfterSelect: true\n      });\n      click(test.selectize.$control, function () {\n        click($('[data-value=a]', test.selectize.$dropdown_content), function () {\n          expect(test.selectize.isOpen).to.be.equal(false);\n          expect(test.selectize.isFocused).to.be.equal(true);\n          done();\n        });\n      });\n    });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should reopen dropdown if clicked after being closed by closeAfterSelect: true","suites":["Interaction"],"updatePoint":{"line":34,"column":86},"line":34,"code":"    it('should reopen dropdown if clicked after being closed by closeAfterSelect: true', function (done) {\n      var test = setup_test('<select multiple>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {\n        closeAfterSelect: true\n      });\n      click(test.selectize.$control, function () {\n        click($('[data-value=a]', test.selectize.$dropdown_content), function () {\n          click(test.selectize.$control, function () {\n            expect(test.selectize.isOpen).to.be.equal(true);\n            expect(test.selectize.isFocused).to.be.equal(true);\n            done();\n          });\n        });\n      });\n    });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should give it focus","suites":["Interaction","clicking control"],"updatePoint":{"line":49,"column":30},"line":49,"code":"      it('should give it focus', function (done) {\n        var test = setup_test('<select>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          expect(test.selectize.isFocused).to.be.equal(true);\n          done();\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should start loading results if preload:\"focus\"","suites":["Interaction","clicking control"],"updatePoint":{"line":56,"column":57},"line":56,"code":"      it('should start loading results if preload:\"focus\"', function (done) {\n        var calls_focus = 0;\n        var calls_load = 0;\n        var test = setup_test('<select>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {\n          preload: 'focus',\n          load: function (query, done) {\n            calls_load++;\n            assert.equal(query, '');\n            setTimeout(function () {\n              done([{\n                value: 'c',\n                text: 'C'\n              }]);\n            });\n          }\n        });\n        test.selectize.on('focus', function () {\n          calls_focus++;\n        });\n        click(test.selectize.$control, function () {\n          setTimeout(function () {\n            assert.equal(calls_focus, 1);\n            assert.equal(calls_load, 1);\n            done();\n          }, 300);\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should open dropdown menu","suites":["Interaction","clicking control"],"updatePoint":{"line":83,"column":35},"line":83,"code":"      it('should open dropdown menu', function (done) {\n        var test = setup_test('<select>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          expect(test.selectize.isOpen).to.be.equal(true);\n          expect(test.selectize.$dropdown.is(':visible')).to.be.equal(true);\n          done();\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should give it focus to select","suites":["Interaction","clicking label"],"updatePoint":{"line":93,"column":40},"line":93,"code":"      it('should give it focus to select', function (done) {\n        var inputId = \"labeledSelect\";\n        var label = $('<label for=\"' + inputId + '\">select</label>').appendTo('form');\n        var test = setup_test('<select id=\"' + inputId + '\">' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        syn.click(label).delay(0, function () {\n          label.remove();\n          expect(test.selectize.isFocused).to.be.equal(true);\n          done();\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should give it focus to input","suites":["Interaction","clicking label"],"updatePoint":{"line":103,"column":39},"line":103,"code":"      it('should give it focus to input', function (done) {\n        var inputId = \"labeledInput\";\n        var label = $('<label for=\"' + inputId + '\">input</label>').appendTo('form');\n        var test = setup_test('<input id=\"' + inputId + '\" type=\"text\" value=\"a,b,c,d\">', {});\n        syn.click(label).delay(0, function () {\n          label.remove();\n          expect(test.selectize.isFocused).to.be.equal(true);\n          done();\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should select it","suites":["Interaction","clicking option"],"updatePoint":{"line":115,"column":26},"line":115,"code":"      it('should select it', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          click($('[data-value=\"b\"]', test.selectize.$dropdown), function () {\n            expect(test.selectize.$input.val()).to.be.equal('b');\n            expect(test.selectize.$input.text()).to.be.equal('B');\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should close dropdown","suites":["Interaction","clicking option"],"updatePoint":{"line":125,"column":31},"line":125,"code":"      it('should close dropdown', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          click($('[data-value=\"b\"]', test.selectize.$dropdown), function () {\n            expect(test.selectize.isOpen).to.be.equal(false);\n            expect(test.selectize.$dropdown.is(':visible')).to.be.equal(false);\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should filter results","suites":["Interaction","typing in input"],"updatePoint":{"line":137,"column":31},"line":137,"code":"      it('should filter results', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          syn.type('a', test.selectize.$control_input).delay(0, function () {\n            expect($('[data-value=\"a\"]', test.selectize.$dropdown).length).to.be.equal(1);\n            expect($('[data-value=\"b\"]', test.selectize.$dropdown).length).to.be.equal(0);\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should hide dropdown if no results present","suites":["Interaction","typing in input"],"updatePoint":{"line":147,"column":52},"line":147,"code":"      it('should hide dropdown if no results present', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          syn.type('awaw', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.isOpen).to.be.equal(false);\n            expect(test.selectize.$dropdown.is(':visible')).to.be.equal(false);\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should not hide dropdown if \"create\" option enabled and no results present","suites":["Interaction","typing in input"],"updatePoint":{"line":157,"column":84},"line":157,"code":"      it('should not hide dropdown if \"create\" option enabled and no results present', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {\n          create: true\n        });\n        click(test.selectize.$control, function () {\n          syn.type('awaw', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.isOpen).to.be.equal(true);\n            expect(test.selectize.$dropdown.is(':visible')).to.be.equal(true);\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should restore dropdown visibility when backing out of a query without results (backspace)","suites":["Interaction","typing in input"],"updatePoint":{"line":169,"column":100},"line":169,"code":"      it('should restore dropdown visibility when backing out of a query without results (backspace)', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          syn.type('awf', test.selectize.$control_input).type('\\b\\b\\b', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.isOpen).to.be.equal(true);\n            expect(test.selectize.$dropdown.is(':visible')).to.be.equal(true);\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should move caret when [left] or [right] pressed","suites":["Interaction","typing in input"],"updatePoint":{"line":179,"column":58},"line":179,"code":"      it('should move caret when [left] or [right] pressed', function (done) {\n        var test = setup_test('<input type=\"text\" value=\"a,b,c,d\">', {\n          create: true\n        });\n        click(test.selectize.$control, function () {\n          syn.type('[left][left]whatt', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.caretPos).to.be.equal(2);\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should not create input if comma entered in single select mode","suites":["Interaction","typing in input"],"updatePoint":{"line":190,"column":72},"line":190,"code":"      it('should not create input if comma entered in single select mode', function (done) {\n        var test = setup_test('<select>' + '<option value=\"\">Select an option...</option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {\n          create: true\n        });\n        click(test.selectize.$control, function () {\n          syn.type('asdf,asdf', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.isOpen).to.be.equal(true);\n            expect(test.selectize.options).to.not.have.property('asdf');\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should not delete any dropdown option text if duplicate match occurs","suites":["Interaction","typing in input"],"updatePoint":{"line":202,"column":78},"line":202,"code":"      it('should not delete any dropdown option text if duplicate match occurs', function (done) {\n        var test = setup_test('<select>' + '<option></option>' + '<option value=\"a\"></option>' + '<option value=\"b\">Isabel Street</option>' + '</select>', {});\n        click(test.selectize.$control, function () {\n          // Here, the 'S' in St will also match the 's' in Isabel (a duplicate match)\n          syn.type('Isabel St', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.$dropdown_content.find('.option[data-value=b]').text()).to.be.equal('Isabel Street');\n            done();\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should close dropdown when createOnBlur is true","suites":["Interaction","blurring the input"],"updatePoint":{"line":214,"column":57},"line":214,"code":"      it('should close dropdown when createOnBlur is true', function (done) {\n        var test = setup_test('<select multiple=\"multiple\">' + '<option></option>' + '<option value=\"a\">A</option>' + '<option value=\"b\">B</option>' + '</select>', {\n          createOnBlur: true,\n          create: function (value) {\n            return {\n              value: value,\n              text: value\n            };\n          }\n        });\n        click(test.selectize.$control, function () {\n          syn.type('fooo', test.selectize.$control_input).delay(0, function () {\n            expect(test.selectize.isOpen).to.be.equal(true);\n            expect(test.selectize.$dropdown.is(':visible')).to.be.equal(true);\n            syn.click($(\"body\")).delay(5, function () {\n              expect(test.selectize.isOpen).to.be.equal(false);\n              expect(test.selectize.$dropdown.is(':visible')).to.be.equal(false);\n              done();\n            });\n          });\n        });\n      });","file":"interaction.js","skipped":false,"dir":"test"},{"name":"should not allow duplicate initialization","suites":["Setup"],"updatePoint":{"line":3,"column":49},"line":3,"code":"    it('should not allow duplicate initialization', function () {\n      var instance_before, instance_after, test;\n      test = setup_test('<input type=\"text\">', {});\n      instance_before = test.$select[0].selectize;\n      test.$select.selectize();\n      instance_after = test.$select[0].selectize;\n      expect(instance_before).to.be.equal(instance_after);\n    });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should complete without exceptions","suites":["Setup","<input type=\"text\">"],"updatePoint":{"line":12,"column":44},"line":12,"code":"      it('should complete without exceptions', function () {\n        var test = setup_test('<input type=\"text\">', {});\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should populate items,options from \"dataAttr\" if available","suites":["Setup","<input type=\"text\">"],"updatePoint":{"line":15,"column":68},"line":15,"code":"      it('should populate items,options from \"dataAttr\" if available', function () {\n        var data = [{\n          val: 'a',\n          lbl: 'Hello'\n        }, {\n          val: 'b',\n          lbl: 'World'\n        }];\n        var test = setup_test('<input type=\"text\" value=\"c,d,e\" data-hydrate=\"' + JSON.stringify(data).replace(/\"/g, '&quot;') + '\">', {\n          dataAttr: 'data-hydrate',\n          valueField: 'val',\n          labelField: 'lbl'\n        });\n        expect(test.selectize.getValue()).to.be.equal('a,b');\n        assert.deepEqual(test.selectize.items, ['a', 'b']);\n        assert.deepEqual(test.selectize.options, {\n          'a': {\n            val: 'a',\n            lbl: 'Hello',\n            $order: 1\n          },\n          'b': {\n            val: 'b',\n            lbl: 'World',\n            $order: 2\n          }\n        });\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return value as a string","suites":["Setup","<input type=\"text\">","getValue()"],"updatePoint":{"line":44,"column":43},"line":44,"code":"        it('should return value as a string', function () {\n          var test = setup_test('<input type=\"text\" value=\"a,b\">', {\n            delimiter: ','\n          });\n          expect(test.selectize.getValue()).to.be.a('string');\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return \"\" when empty","suites":["Setup","<input type=\"text\">","getValue()"],"updatePoint":{"line":50,"column":39},"line":50,"code":"        it('should return \"\" when empty', function () {\n          var test = setup_test('<input type=\"text\" value=\"\">', {\n            delimiter: ','\n          });\n          expect(test.selectize.getValue()).to.be.equal('');\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return proper value when not empty","suites":["Setup","<input type=\"text\">","getValue()"],"updatePoint":{"line":56,"column":53},"line":56,"code":"        it('should return proper value when not empty', function () {\n          var test = setup_test('<input type=\"text\" value=\"a,b\">', {\n            delimiter: ','\n          });\n          expect(test.selectize.getValue()).to.be.equal('a,b');\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should propagate original input attributes to the generated input","suites":["Setup","<input type=\"text\">","<input type=\"text\" attributes>"],"updatePoint":{"line":64,"column":77},"line":64,"code":"        it('should propagate original input attributes to the generated input', function () {\n          var test = setup_test('<input type=\"text\" autocorrect=\"off\" autocapitalize=\"none\">', {});\n          expect(test.selectize.$control_input.attr('autocorrect')).to.be.equal('off');\n          expect(test.selectize.$control_input.attr('autocapitalize')).to.be.equal('none');\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should not add attributes if not present in the original","suites":["Setup","<input type=\"text\">","<input type=\"text\" attributes>"],"updatePoint":{"line":69,"column":68},"line":69,"code":"        it('should not add attributes if not present in the original', function () {\n          var test = setup_test('<input type=\"text\">', {});\n          expect(test.selectize.$control_input.attr('autocorrect')).to.be.equal(undefined);\n          expect(test.selectize.$control_input.attr('autocapitalize')).to.be.equal(undefined);\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should complete without exceptions","suites":["Setup","<input type=\"number\">"],"updatePoint":{"line":77,"column":44},"line":77,"code":"      it('should complete without exceptions', function (done) {\n        var test = setup_test('<input type=\"number\">', {});\n        window.setTimeout(function () {\n          assert.equal(test.selectize.$control_input.attr('type'), 'number');\n          done();\n        }, 0);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should complete without exceptions","suites":["Setup","<select>"],"updatePoint":{"line":86,"column":44},"line":86,"code":"      it('should complete without exceptions', function () {\n        var test = setup_test('<select></select>', {});\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should allow for values optgroups with duplicated options","suites":["Setup","<select>"],"updatePoint":{"line":89,"column":67},"line":89,"code":"      it('should allow for values optgroups with duplicated options', function () {\n        var test = setup_test(['<select>', '<optgroup label=\"Group 1\">', '<option value=\"a\">Item A</option>', '<option value=\"b\">Item B</option>', '</optgroup>', '<optgroup label=\"Group 2\">', '<option value=\"a\">Item A</option>', '<option value=\"b\">Item B</option>', '</optgroup>', '</select>'].join(''), {\n          optgroupValueField: 'val',\n          optgroupField: 'grp',\n          disabledField: 'dis'\n        });\n        assert.deepEqual(test.selectize.options, {\n          'a': {\n            text: 'Item A',\n            value: 'a',\n            grp: ['Group 1', 'Group 2'],\n            $order: 1,\n            dis: false\n          },\n          'b': {\n            text: 'Item B',\n            value: 'b',\n            grp: ['Group 1', 'Group 2'],\n            $order: 2,\n            dis: false\n          }\n        });\n        assert.deepEqual(test.selectize.optgroups, {\n          'Group 1': {\n            label: 'Group 1',\n            val: 'Group 1',\n            $order: 3,\n            dis: false\n          },\n          'Group 2': {\n            label: 'Group 2',\n            val: 'Group 2',\n            $order: 4,\n            dis: false\n          }\n        }, '2');\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should allow respect disabled flags of option and optgroup","suites":["Setup","<select>"],"updatePoint":{"line":126,"column":68},"line":126,"code":"      it('should allow respect disabled flags of option and optgroup', function () {\n        var test = setup_test(['<select>', '<optgroup label=\"Group 1\">', '<option value=\"a\" disabled>Item A</option>', '<option value=\"b\">Item B</option>', '</optgroup>', '<optgroup label=\"Group 2\" disabled>', '<option value=\"a\">Item A</option>', '<option value=\"b\">Item B</option>', '</optgroup>', '</select>'].join(''), {\n          optgroupValueField: 'val',\n          optgroupField: 'grp',\n          disabledField: 'dis'\n        });\n        assert.deepEqual(test.selectize.options, {\n          'a': {\n            text: 'Item A',\n            value: 'a',\n            grp: ['Group 1', 'Group 2'],\n            $order: 1,\n            dis: true\n          },\n          'b': {\n            text: 'Item B',\n            value: 'b',\n            grp: ['Group 1', 'Group 2'],\n            $order: 2,\n            dis: false\n          }\n        });\n        assert.deepEqual(test.selectize.optgroups, {\n          'Group 1': {\n            label: 'Group 1',\n            val: 'Group 1',\n            $order: 3,\n            dis: false\n          },\n          'Group 2': {\n            label: 'Group 2',\n            val: 'Group 2',\n            $order: 4,\n            dis: true\n          }\n        }, '2');\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should add options in text form (no html entities)","suites":["Setup","<select>"],"updatePoint":{"line":163,"column":60},"line":163,"code":"      it('should add options in text form (no html entities)', function () {\n        var test = setup_test('<select><option selected value=\"a\">&lt;hi&gt;</option></select>', {});\n        expect(test.selectize.options['a'].text).to.be.equal('<hi>');\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should keep options in original order if no sort given","suites":["Setup","<select>"],"updatePoint":{"line":167,"column":64},"line":167,"code":"      it('should keep options in original order if no sort given', function (done) {\n        var test = setup_test(['<select multiple>', '<option value=\"\">Select a state...</option>', '<option value=\"AL\">Alabama</option>', '<option value=\"AK\">Alaska</option>', '<option value=\"AZ\">Arizona</option>', '<option value=\"AR\">Arkansas</option>', '<option value=\"CA\" selected>California</option>', '<option value=\"CO\">Colorado</option>', '<option value=\"CT\">Connecticut</option>', '<option value=\"DE\">Delaware</option>', '<option value=\"DC\">District of Columbia</option>', '<option value=\"FL\">Florida</option>', '<option value=\"GA\">Georgia</option>', '<option value=\"HI\">Hawaii</option>', '<option value=\"ID\">Idaho</option>', '<option value=\"IL\">Illinois</option>', '<option value=\"IN\">Indiana</option>', '<option value=\"IA\">Iowa</option>', '<option value=\"KS\">Kansas</option>', '<option value=\"KY\">Kentucky</option>', '<option value=\"LA\">Louisiana</option>', '<option value=\"ME\">Maine</option>', '<option value=\"MD\">Maryland</option>', '<option value=\"MA\">Massachusetts</option>', '<option value=\"MI\">Michigan</option>', '<option value=\"MN\">Minnesota</option>', '<option value=\"MS\">Mississippi</option>', '<option value=\"MO\">Missouri</option>', '<option value=\"MT\">Montana</option>', '<option value=\"NE\">Nebraska</option>', '<option value=\"NV\">Nevada</option>', '<option value=\"NH\">New Hampshire</option>', '<option value=\"NJ\">New Jersey</option>', '<option value=\"NM\">New Mexico</option>', '<option value=\"NY\">New York</option>', '<option value=\"NC\">North Carolina</option>', '<option value=\"ND\">North Dakota</option>', '<option value=\"OH\">Ohio</option>', '<option value=\"OK\">Oklahoma</option>', '<option value=\"OR\">Oregon</option>', '<option value=\"PA\">Pennsylvania</option>', '<option value=\"RI\">Rhode Island</option>', '<option value=\"SC\">South Carolina</option>', '<option value=\"SD\">South Dakota</option>', '<option value=\"TN\">Tennessee</option>', '<option value=\"TX\">Texas</option>', '<option value=\"UT\">Utah</option>', '<option value=\"VT\">Vermont</option>', '<option value=\"VA\">Virginia</option>', '<option value=\"WA\">Washington</option>', '<option value=\"WV\">West Virginia</option>', '<option value=\"WI\">Wisconsin</option>', '<option value=\"01\">01</option>', '<option value=\"10\">10</option>', '<option value=\"WY\" selected>Wyoming</option>', '</select>'].join(), {});\n        var order_expected = ['AL', 'AK', 'AZ', 'AR', 'CO', 'CT', 'DE', 'DC', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', '01', '10'];\n        var order_actual = [];\n        test.selectize.refreshOptions(true);\n        window.setTimeout(function () {\n          test.selectize.$dropdown.find('[data-value]').each(function (i, el) {\n            order_actual.push($(el).attr('data-value'));\n          });\n          expect(order_actual).to.eql(order_expected);\n          done();\n        }, 0);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should respect option disabled flag","suites":["Setup","<select>"],"updatePoint":{"line":180,"column":45},"line":180,"code":"      it('should respect option disabled flag', function (done) {\n        var test = setup_test(['<select>', '<option value=\"a\">Item A</option>', '<option value=\"b\" disabled>Item B</option>', '</select>'].join(''), {});\n        test.selectize.refreshOptions(true);\n        window.setTimeout(function () {\n          expect(test.selectize.$dropdown.find('.option')).to.has.length(2);\n          expect(test.selectize.$dropdown.find('[data-selectable]')).to.has.length(1);\n          done();\n        }, 0);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return \"\" when empty","suites":["Setup","<select>","getValue()"],"updatePoint":{"line":190,"column":39},"line":190,"code":"        it('should return \"\" when empty', function () {\n          var test = setup_test('<select>', {});\n          expect(test.selectize.getValue()).to.be.equal('');\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return proper value when not empty","suites":["Setup","<select>","getValue()"],"updatePoint":{"line":194,"column":53},"line":194,"code":"        it('should return proper value when not empty', function () {\n          var test = setup_test('<select><option selected value=\"a\">A</option></select>', {});\n          expect(test.selectize.getValue()).to.be.equal('a');\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should complete without exceptions","suites":["Setup","<select multiple>"],"updatePoint":{"line":201,"column":44},"line":201,"code":"      it('should complete without exceptions', function () {\n        var test = setup_test('<select>', {});\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return [] when empty","suites":["Setup","<select multiple>","getValue()"],"updatePoint":{"line":205,"column":39},"line":205,"code":"        it('should return [] when empty', function () {\n          var test = setup_test('<select multiple>', {});\n          expect(test.selectize.getValue()).to.deep.equal([]);\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should return proper value as array when not empty","suites":["Setup","<select multiple>","getValue()"],"updatePoint":{"line":209,"column":62},"line":209,"code":"        it('should return proper value as array when not empty', function () {\n          var test = setup_test('<select multiple><option selected value=\"a\">A</option></select>', {});\n          expect(test.selectize.getValue()).to.deep.equal(['a']);\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should have \"disabled\" class","suites":["Setup","<select disabled>"],"updatePoint":{"line":220,"column":38},"line":220,"code":"      it('should have \"disabled\" class', function () {\n        expect(test.selectize.$control.hasClass('disabled')).to.be.equal(true);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should have isDisabled property set to true","suites":["Setup","<select disabled>"],"updatePoint":{"line":223,"column":53},"line":223,"code":"      it('should have isDisabled property set to true', function () {\n        expect(test.selectize.isDisabled).to.be.equal(true);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should have isRequired property set to true","suites":["Setup","<select required>"],"updatePoint":{"line":238,"column":53},"line":238,"code":"      it('should have isRequired property set to true', function () {\n        expect(test.selectize.isRequired).to.be.equal(true);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should have the required class","suites":["Setup","<select required>"],"updatePoint":{"line":241,"column":40},"line":241,"code":"      it('should have the required class', function () {\n        expect(test.selectize.$control.hasClass('required')).to.be.equal(true);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should pass validation if an element is selected","suites":["Setup","<select required>"],"updatePoint":{"line":244,"column":58},"line":244,"code":"      it('should pass validation if an element is selected', function (done) {\n        test.selectize.addItem('a');\n        $form.one('submit.test_required', function (e) {\n          done();\n        });\n        syn.click($button);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should not pass validation if no element is selected","suites":["Setup","<select required>"],"updatePoint":{"line":253,"column":64},"line":253,"code":"        it('should not pass validation if no element is selected', function (done) {\n          $form.one('submit.test_required', function (e) {\n            expect(e.isDefaultPrevented()).to.be.true;\n            done();\n          });\n          syn.click($button);\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should have \"invalid\" class when validation fails","suites":["Setup","<select required>"],"updatePoint":{"line":260,"column":61},"line":260,"code":"        it('should have \"invalid\" class when validation fails', function (done) {\n          test.$select[0].checkValidity();\n          window.setTimeout(function () {\n            expect(test.selectize.$control.hasClass('invalid')).to.be.true;\n            done();\n          }, 250);\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should clear the invalid class after an item is selected","suites":["Setup","<select required>"],"updatePoint":{"line":267,"column":68},"line":267,"code":"        it('should clear the invalid class after an item is selected', function (done) {\n          syn.click($button).delay(0, function () {\n            test.selectize.addItem('a');\n            expect(test.selectize.$control.hasClass('invalid')).to.be.false;\n            done();\n          });\n        });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should have isRequired property set to false","suites":["Setup","<select> (not required)"],"updatePoint":{"line":287,"column":54},"line":287,"code":"      it('should have isRequired property set to false', function () {\n        expect(test.selectize.isRequired).to.be.equal(false);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should not have the required class","suites":["Setup","<select> (not required)"],"updatePoint":{"line":290,"column":44},"line":290,"code":"      it('should not have the required class', function () {\n        expect(test.selectize.$control.hasClass('required')).to.be.equal(false);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should render the custom option element","suites":["Setup","<select> (custom string render)"],"updatePoint":{"line":305,"column":49},"line":305,"code":"      it('should render the custom option element', function (done) {\n        test.selectize.focus();\n        window.setTimeout(function () {\n          expect(test.selectize.$dropdown.find('.custom-option').length).to.be.equal(1);\n          done();\n        }, 5);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should render the custom option element","suites":["Setup","<select> (custom dom render)"],"updatePoint":{"line":327,"column":49},"line":327,"code":"      it('should render the custom option element', function (done) {\n        test.selectize.focus();\n        window.setTimeout(function () {\n          expect(test.selectize.$dropdown_content.find('.custom-option').length).to.be.equal(1);\n          done();\n        }, 0);\n      });","file":"setup.js","skipped":false,"dir":"test"},{"name":"should not trigger exploit","suites":["XSS","Raw HTML in original input value"],"updatePoint":{"line":22,"column":36},"line":22,"code":"      it('should not trigger exploit', function (done) {\n        setup_xss_test('<input type=\"text\" value=\"&lt;img src=&quot;x&quot; onerror=&quot;xss()&quot;&gt;\">', {}, done);\n      });","file":"xss.js","skipped":false,"dir":"test"},{"name":"should not trigger exploit","suites":["XSS","Raw HTML in optgroup label"],"updatePoint":{"line":27,"column":36},"line":27,"code":"      it('should not trigger exploit', function (done) {\n        var test = setup_xss_test('<select><optgroup label=\"&lt;img src=&quot;x&quot; onerror=&quot;xss()&quot;&gt;\"><option>Test</option></optgroup></select>', {}, done);\n        test.selectize.refreshOptions();\n        test.selectize.open();\n      });","file":"xss.js","skipped":false,"dir":"test"},{"name":"should not trigger exploit","suites":["XSS","Raw HTML in option label should not trigger exploit"],"updatePoint":{"line":34,"column":36},"line":34,"code":"      it('should not trigger exploit', function (done) {\n        setup_xss_test('<input type=\"text\" value=\"\">', {\n          options: [{\n            value: '1',\n            label: '<img src=\"x\" onerror=\"xss()\">'\n          }],\n          items: ['1'],\n          labelField: 'label',\n          valueField: 'value'\n        }, done);\n      });","file":"xss.js","skipped":false,"dir":"test"},{"name":"should not trigger exploit","suites":["XSS","Raw HTML in option value should not trigger exploit"],"updatePoint":{"line":47,"column":36},"line":47,"code":"      it('should not trigger exploit', function (done) {\n        setup_xss_test('<input type=\"text\" value=\"\">', {\n          options: [{\n            value: '<img src=\"x\" onerror=\"xss()\">',\n            label: '1'\n          }],\n          items: ['<img src=\"x\" onerror=\"xss()\">'],\n          labelField: 'label',\n          valueField: 'value'\n        }, done);\n      });","file":"xss.js","skipped":false,"dir":"test"}]}