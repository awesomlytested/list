{"repo":"withastro/astro","url":"https://github.com/withastro/astro","branch":"main","configs":[{"package":"astro","lang":"js","dir":"packages/astro/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"create-astro","lang":"js","dir":"packages/create-astro/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"HTML and CSS scoped correctly","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":32,"column":39,"index":1209},"line":32,"code":"      it('HTML and CSS scoped correctly', async () => {\n        const el1 = $('#dynamic-class');\n        const el2 = $('#dynamic-vis');\n        const classes = $('#class').attr('class').split(' ');\n        const scopedClass = classes.find(name => /^astro-[A-Za-z0-9-]+/.test(name)); // 1. check HTML\n\n        expect(el1.attr('class')).to.equal(`blue ${scopedClass}`);\n        expect(el2.attr('class')).to.equal(`visible ${scopedClass}`); // 2. check CSS\n\n        expect(bundledCSS).to.include(`.blue.${scopedClass}{color:#b0e0e6}.color\\\\:blue.${scopedClass}{color:#b0e0e6}.visible.${scopedClass}{display:block}`);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"No <style> skips scoping","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":43,"column":34,"index":1828},"line":43,"code":"      it('No <style> skips scoping', async () => {\n        // Astro component without <style> should not include scoped class\n        expect($('#no-scope').attr('class')).to.equal(undefined);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Child inheritance","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":47,"column":27,"index":2023},"line":47,"code":"      it('Child inheritance', async () => {\n        expect($('#passed-in').attr('class')).to.match(/outer astro-[A-Z0-9]+ astro-[A-Z0-9]+/);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Using hydrated components adds astro-root styles","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":50,"column":58,"index":2205},"line":50,"code":"      it('Using hydrated components adds astro-root styles', async () => {\n        expect(bundledCSS).to.include('display:contents');\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"sass\">","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":53,"column":29,"index":2320},"line":53,"code":"      it('<style lang=\"sass\">', async () => {\n        expect(bundledCSS).to.match(new RegExp('h1.astro-[^{]*{color:#90ee90}'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"scss\">","suites":["CSS","build","Astro Styles"],"updatePoint":{"line":56,"column":29,"index":2458},"line":56,"code":"      it('<style lang=\"scss\">', async () => {\n        expect(bundledCSS).to.match(new RegExp('h1.astro-[^{]*{color:#ff69b4}'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".css","suites":["CSS","build","Styles in src/"],"updatePoint":{"line":61,"column":14,"index":2628},"line":61,"code":"      it('.css', async () => {\n        expect(bundledCSS).to.match(new RegExp('.linked-css[^{]*{color:gold'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".sass","suites":["CSS","build","Styles in src/"],"updatePoint":{"line":64,"column":15,"index":2750},"line":64,"code":"      it('.sass', async () => {\n        expect(bundledCSS).to.match(new RegExp('.linked-sass[^{]*{color:#789'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".scss","suites":["CSS","build","Styles in src/"],"updatePoint":{"line":67,"column":15,"index":2873},"line":67,"code":"      it('.scss', async () => {\n        expect(bundledCSS).to.match(new RegExp('.linked-scss[^{]*{color:#6b8e23'));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".css","suites":["CSS","build","JSX"],"updatePoint":{"line":72,"column":14,"index":3034},"line":72,"code":"      it('.css', async () => {\n        const el = $('#react-css'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('react-title'); // 2. check CSS\n\n        expect(bundledCSS).to.include('.react-title{');\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".module.css","suites":["CSS","build","JSX"],"updatePoint":{"line":79,"column":21,"index":3269},"line":79,"code":"      it('.module.css', async () => {\n        const el = $('#react-module-css');\n        const classes = el.attr('class').split(' ');\n        const moduleClass = classes.find(name => /^_title_[A-Za-z0-9-_]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include(moduleClass); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.${moduleClass}[^{]*{font-family:fantasy}`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".sass","suites":["CSS","build","JSX"],"updatePoint":{"line":88,"column":15,"index":3681},"line":88,"code":"      it('.sass', async () => {\n        const el = $('#react-sass'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('react-sass-title'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.react-sass-title[^{]*{font-family:fantasy}`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".scss","suites":["CSS","build","JSX"],"updatePoint":{"line":95,"column":15,"index":3956},"line":95,"code":"      it('.scss', async () => {\n        const el = $('#react-scss'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('react-scss-title'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.react-scss-title[^{]*{font-family:fantasy}`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".module.sass","suites":["CSS","build","JSX"],"updatePoint":{"line":102,"column":22,"index":4238},"line":102,"code":"      it('.module.sass', async () => {\n        const el = $('#react-module-sass');\n        const classes = el.attr('class').split(' ');\n        const moduleClass = classes.find(name => /^_title_[A-Za-z0-9-_]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include(moduleClass); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.${moduleClass}[^{]*{font-family:fantasy}`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":".module.scss","suites":["CSS","build","JSX"],"updatePoint":{"line":111,"column":22,"index":4658},"line":111,"code":"      it('.module.scss', async () => {\n        const el = $('#react-module-scss');\n        const classes = el.attr('class').split(' ');\n        const moduleClass = classes.find(name => /^_title_[A-Za-z0-9-_]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include(moduleClass); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.${moduleClass}[^{]*{font-family:fantasy}`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style>","suites":["CSS","build","Vue"],"updatePoint":{"line":122,"column":17,"index":5109},"line":122,"code":"      it('<style>', async () => {\n        const el = $('#vue-css'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('vue-css'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.vue-css[^{]*{font-family:cursive`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style scoped>","suites":["CSS","build","Vue"],"updatePoint":{"line":129,"column":24,"index":5371},"line":129,"code":"      it('<style scoped>', async () => {\n        const el = $('#vue-scoped'); // find data-v-* attribute (how Vue CSS scoping works)\n\n        const {\n          attribs\n        } = el.get(0);\n        const scopeId = Object.keys(attribs).find(k => k.startsWith('data-v-'));\n        expect(scopeId).to.be.ok; // 1. check HTML\n\n        expect(el.attr('class')).to.include('vue-scoped'); // 2. check CSS\n\n        expect(bundledCSS).to.include(`.vue-scoped[${scopeId}]`);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style module>","suites":["CSS","build","Vue"],"updatePoint":{"line":142,"column":24,"index":5847},"line":142,"code":"      it('<style module>', async () => {\n        const el = $('#vue-modules');\n        const classes = el.attr('class').split(' ');\n        const moduleClass = classes.find(name => /^_title_[A-Za-z0-9-_]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include(moduleClass); // 2. check CSS\n\n        expect(bundledCSS).to.include(`${moduleClass}{`);\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"sass\">","suites":["CSS","build","Vue"],"updatePoint":{"line":151,"column":29,"index":6232},"line":151,"code":"      it('<style lang=\"sass\">', async () => {\n        const el = $('#vue-sass'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('vue-sass'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.vue-sass[^{]*{font-family:cursive`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"scss\">","suites":["CSS","build","Vue"],"updatePoint":{"line":158,"column":29,"index":6502},"line":158,"code":"      it('<style lang=\"scss\">', async () => {\n        const el = $('#vue-scss'); // 1. check HTML\n\n        expect(el.attr('class')).to.include('vue-scss'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.vue-scss[^{]*{font-family:cursive`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style>","suites":["CSS","build","Svelte"],"updatePoint":{"line":167,"column":17,"index":6799},"line":167,"code":"      it('<style>', async () => {\n        const el = $('#svelte-css');\n        const classes = el.attr('class').split(' ');\n        const scopedClass = classes.find(name => /^s-[A-Za-z0-9-]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include('svelte-css'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.svelte-css.${scopedClass}[^{]*{font-family:\"Comic Sans MS\"`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"sass\">","suites":["CSS","build","Svelte"],"updatePoint":{"line":176,"column":29,"index":7232},"line":176,"code":"      it('<style lang=\"sass\">', async () => {\n        const el = $('#svelte-sass');\n        const classes = el.attr('class').split(' ');\n        const scopedClass = classes.find(name => /^s-[A-Za-z0-9-]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include('svelte-sass'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.svelte-sass.${scopedClass}[^{]*{font-family:\"Comic Sans MS\"`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<style lang=\"scss\">","suites":["CSS","build","Svelte"],"updatePoint":{"line":185,"column":29,"index":7668},"line":185,"code":"      it('<style lang=\"scss\">', async () => {\n        const el = $('#svelte-scss');\n        const classes = el.attr('class').split(' ');\n        const scopedClass = classes.find(name => /^s-[A-Za-z0-9-]+/.test(name)); // 1. check HTML\n\n        expect(el.attr('class')).to.include('svelte-scss'); // 2. check CSS\n\n        expect(bundledCSS).to.match(new RegExp(`.svelte-scss.${scopedClass}[^{]*{font-family:\"Comic Sans MS\"`));\n      });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS in public/","suites":["CSS","dev"],"updatePoint":{"line":208,"column":31,"index":8533},"line":208,"code":"    it('resolves CSS in public/', async () => {\n      const href = $('link[href=\"/global.css\"]').attr('href');\n      expect((await fixture.fetch(href)).status).to.equal(200);\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS in src/","suites":["CSS","dev"],"updatePoint":{"line":212,"column":28,"index":8713},"line":212,"code":"    it('resolves CSS in src/', async () => {\n      const href = $('link[href$=\"linked.css\"]').attr('href');\n      expect((await fixture.fetch(href)).status).to.equal(200);\n    }); // Skipped until upstream fix lands","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolved imported CSS with ?url","suites":["CSS","dev"],"line":220,"code":"    it.skip('resolved imported CSS with ?url', async () => {","file":"0-css.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"resolves Astro styles","suites":["CSS","dev"],"updatePoint":{"line":225,"column":29,"index":9345},"line":225,"code":"    it('resolves Astro styles', async () => {\n      const style = $('style[astro-style]');\n      expect(style.length).to.not.equal(0);\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves Styles from React","suites":["CSS","dev"],"updatePoint":{"line":229,"column":34,"index":9493},"line":229,"code":"    it('resolves Styles from React', async () => {\n      const styles = ['ReactCSS.css', 'ReactModules.module.css', 'ReactModules.module.scss', 'ReactModules.module.sass', 'ReactSass.sass', 'ReactScss.scss'];\n\n      for (const style of styles) {\n        const href = $(`link[href$=\"${style}\"]`).attr('href');\n        expect((await fixture.fetch(href)).status, style).to.equal(200);\n      }\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS from Svelte","suites":["CSS","dev"],"updatePoint":{"line":237,"column":32,"index":9889},"line":237,"code":"    it('resolves CSS from Svelte', async () => {\n      const scripts = ['SvelteCSS.svelte?svelte&type=style&lang.css', 'SvelteSass.svelte?svelte&type=style&lang.css', 'SvelteScss.svelte?svelte&type=style&lang.css'];\n\n      for (const script of scripts) {\n        const src = $(`script[src$=\"${script}\"]`).attr('src');\n        expect((await fixture.fetch(src)).status, script).to.equal(200);\n      }\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"resolves CSS from Vue","suites":["CSS","dev"],"updatePoint":{"line":245,"column":29,"index":10293},"line":245,"code":"    it('resolves CSS from Vue', async () => {\n      const styles = ['VueCSS.vue?vue&type=style&index=0&lang.css', 'VueModules.vue?vue&type=style&index=0&lang.module.scss', 'VueSass.vue?vue&type=style&index=0&lang.sass', 'VueScoped.vue?vue&type=style&index=0&scoped=true&lang.css', 'VueScss.vue?vue&type=style&index=0&lang.scss'];\n\n      for (const style of styles) {\n        const href = $(`link[href$=\"${style}\"]`).attr('href');\n        expect((await fixture.fetch(href)).status, style).to.equal(200);\n      }\n    });","file":"0-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built the base image","suites":["Assets"],"updatePoint":{"line":16,"column":26,"index":476},"line":16,"code":"  it('built the base image', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const imgPath = $('img').attr('src');\n    const data = await fixture.readFile('/' + imgPath);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built the 2x image","suites":["Assets"],"updatePoint":{"line":23,"column":24,"index":746},"line":23,"code":"  it('built the 2x image', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const srcset = $('img').attr('srcset');\n    const candidates = matchSrcset(srcset);\n    const match = candidates.find(a => a.density === 2);\n    const data = await fixture.readFile('/' + match.url);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built the 3x image","suites":["Assets"],"updatePoint":{"line":32,"column":24,"index":1121},"line":32,"code":"  it('built the 3x image', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const srcset = $('img').attr('srcset');\n    const candidates = matchSrcset(srcset);\n    const match = candidates.find(a => a.density === 3);\n    const data = await fixture.readFile('/' + match.url);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built image from an import specifier","suites":["Assets"],"updatePoint":{"line":41,"column":42,"index":1514},"line":41,"code":"  it('built image from an import specifier', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const src = '/' + $('#import-no-url').attr('src');\n    const data = await fixture.readFile(src);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"built image from an import specifier using ?url","suites":["Assets"],"updatePoint":{"line":48,"column":53,"index":1816},"line":48,"code":"  it('built image from an import specifier using ?url', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const src = '/' + $('#import-url').attr('src');\n    const data = await fixture.readFile(src);\n    expect(!!data).to.equal(true);\n  });","file":"astro-assets.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes attributes to elements as expected","suites":["Attributes"],"updatePoint":{"line":12,"column":47,"index":352},"line":12,"code":"  it('Passes attributes to elements as expected', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const attrs = {\n      'false-str': {\n        attribute: 'attr',\n        value: 'false'\n      },\n      'true-str': {\n        attribute: 'attr',\n        value: 'true'\n      },\n      false: {\n        attribute: 'attr',\n        value: undefined\n      },\n      true: {\n        attribute: 'attr',\n        value: 'true'\n      },\n      empty: {\n        attribute: 'attr',\n        value: ''\n      },\n      null: {\n        attribute: 'attr',\n        value: undefined\n      },\n      undefined: {\n        attribute: 'attr',\n        value: undefined\n      },\n      'html-boolean': {\n        attribute: 'async',\n        value: 'async'\n      },\n      'html-boolean-true': {\n        attribute: 'async',\n        value: 'async'\n      },\n      'html-boolean-false': {\n        attribute: 'async',\n        value: undefined\n      },\n      'html-enum': {\n        attribute: 'draggable',\n        value: 'true'\n      },\n      'html-enum-true': {\n        attribute: 'draggable',\n        value: 'true'\n      },\n      'html-enum-false': {\n        attribute: 'draggable',\n        value: 'false'\n      }\n    };\n\n    for (const id of Object.keys(attrs)) {\n      const {\n        attribute,\n        value\n      } = attrs[id];\n      const attr = $(`#${id}`).attr(attribute);\n      expect(attr).to.equal(value);\n    }\n  });","file":"astro-attrs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes boolean attributes to components as expected","suites":["Attributes"],"updatePoint":{"line":79,"column":57,"index":1809},"line":79,"code":"  it('Passes boolean attributes to components as expected', async () => {\n    const html = await fixture.readFile('/component/index.html');\n    const $ = cheerio.load(html);\n    expect($('#true').attr('attr')).to.equal('attr-true');\n    expect($('#true').attr('type')).to.equal('boolean');\n    expect($('#false').attr('attr')).to.equal('attr-false');\n    expect($('#false').attr('type')).to.equal('boolean');\n  });","file":"astro-attrs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes namespaced attributes as expected","suites":["Attributes"],"updatePoint":{"line":87,"column":46,"index":2213},"line":87,"code":"  it('Passes namespaced attributes as expected', async () => {\n    const html = await fixture.readFile('/namespaced/index.html');\n    const $ = cheerio.load(html);\n    expect($('div').attr('xmlns:happy')).to.equal('https://example.com/schemas/happy');\n    expect($('img').attr('happy:smile')).to.equal('sweet');\n  });","file":"astro-attrs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes namespaced attributes to components as expected","suites":["Attributes"],"updatePoint":{"line":93,"column":60,"index":2545},"line":93,"code":"  it('Passes namespaced attributes to components as expected', async () => {\n    const html = await fixture.readFile('/namespaced-component/index.html');\n    const $ = cheerio.load(html);\n    expect($('span').attr('on:click')).to.deep.equal('(event) => console.log(event)');\n  });","file":"astro-attrs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load page","suites":["Astro basics","build"],"updatePoint":{"line":19,"column":21,"index":561},"line":19,"code":"    it('Can load page', async () => {\n      const html = await fixture.readFile(`/index.html`);\n      const $ = cheerio.load(html);\n      expect($('h1').text()).to.equal('Hello world!');\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Correctly serializes boolean attributes","suites":["Astro basics","build"],"updatePoint":{"line":24,"column":47,"index":782},"line":24,"code":"    it('Correctly serializes boolean attributes', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('h1').attr('data-something')).to.equal('');\n      expect($('h2').attr('not-data-ok')).to.equal('');\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Selector with an empty body","suites":["Astro basics","build"],"updatePoint":{"line":30,"column":35,"index":1051},"line":30,"code":"    it('Selector with an empty body', async () => {\n      const html = await fixture.readFile('/empty-class/index.html');\n      const $ = cheerio.load(html);\n      expect($('.author')).to.have.lengthOf(1);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows forward-slashes in mustache tags (#407)","suites":["Astro basics","build"],"updatePoint":{"line":35,"column":54,"index":1284},"line":35,"code":"    it('Allows forward-slashes in mustache tags (#407)', async () => {\n      const html = await fixture.readFile('/forward-slash/index.html');\n      const $ = cheerio.load(html);\n      expect($('a[href=\"/post/one\"]')).to.have.lengthOf(1);\n      expect($('a[href=\"/post/two\"]')).to.have.lengthOf(1);\n      expect($('a[href=\"/post/three\"]')).to.have.lengthOf(1);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows spread attributes (#521)","suites":["Astro basics","build"],"updatePoint":{"line":42,"column":39,"index":1638},"line":42,"code":"    it('Allows spread attributes (#521)', async () => {\n      const html = await fixture.readFile('/spread/index.html');\n      const $ = cheerio.load(html);\n      expect($('#spread-leading')).to.have.lengthOf(1);\n      expect($('#spread-leading').attr('a')).to.equal('0');\n      expect($('#spread-leading').attr('b')).to.equal('1');\n      expect($('#spread-leading').attr('c')).to.equal('2');\n      expect($('#spread-trailing')).to.have.lengthOf(1);\n      expect($('#spread-trailing').attr('a')).to.equal('0');\n      expect($('#spread-trailing').attr('b')).to.equal('1');\n      expect($('#spread-trailing').attr('c')).to.equal('2');\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows spread attributes with TypeScript (#521)","suites":["Astro basics","build"],"updatePoint":{"line":54,"column":55,"index":2295},"line":54,"code":"    it('Allows spread attributes with TypeScript (#521)', async () => {\n      const html = await fixture.readFile('/spread/index.html');\n      const $ = cheerio.load(html);\n      expect($('#spread-ts')).to.have.lengthOf(1);\n      expect($('#spread-ts').attr('a')).to.equal('0');\n      expect($('#spread-ts').attr('b')).to.equal('1');\n      expect($('#spread-ts').attr('c')).to.equal('2');\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows using the Fragment element to be used","suites":["Astro basics","build"],"updatePoint":{"line":62,"column":52,"index":2689},"line":62,"code":"    it('Allows using the Fragment element to be used', async () => {\n      const html = await fixture.readFile('/fragment/index.html');\n      const $ = cheerio.load(html); // will be 1 if element rendered correctly\n\n      expect($('#one')).to.have.lengthOf(1);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"supports special chars in filename","suites":["Astro basics","build"],"updatePoint":{"line":68,"column":42,"index":2948},"line":68,"code":"    it('supports special chars in filename', async () => {\n      // will have already erred by now, but add test anyway\n      expect(await fixture.readFile('/special-“characters” -in-file/index.html')).to.be.ok;\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Supports void elements whose name is a string (#2062)","suites":["Astro basics","build"],"updatePoint":{"line":73,"column":59,"index":3191},"line":73,"code":"  it('Supports void elements whose name is a string (#2062)', async () => {\n    const html = await fixture.readFile('/input/index.html');\n    const $ = cheerio.load(html); // <Input />\n\n    expect($('body > :nth-child(1)').prop('outerHTML')).to.equal('<input>'); // <Input type=\"password\" />\n\n    expect($('body > :nth-child(2)').prop('outerHTML')).to.equal('<input type=\"password\">'); // <Input type=\"text\" />\n\n    expect($('body > :nth-child(3)').prop('outerHTML')).to.equal('<input type=\"text\">'); // <Input type=\"select\"><option>option</option></Input>\n\n    expect($('body > :nth-child(4)').prop('outerHTML')).to.equal('<select><option>option</option></select>'); // <Input type=\"textarea\">textarea</Input>\n\n    expect($('body > :nth-child(5)').prop('outerHTML')).to.equal('<textarea>textarea</textarea>');\n  });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"returns 200 for valid URLs","suites":["Astro basics","preview"],"updatePoint":{"line":88,"column":34,"index":4013},"line":88,"code":"    it('returns 200 for valid URLs', async () => {\n      const result = await fixture.fetch('/');\n      expect(result.status).to.equal(200);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"returns 404 for invalid URLs","suites":["Astro basics","preview"],"updatePoint":{"line":92,"column":36,"index":4164},"line":92,"code":"    it('returns 404 for invalid URLs', async () => {\n      const result = await fixture.fetch('/bad-url');\n      expect(result.status).to.equal(404);\n    });","file":"astro-basic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes string children to framework components","suites":["Component children"],"updatePoint":{"line":13,"column":52,"index":462},"line":13,"code":"  it('Passes string children to framework components', async () => {\n    const html = await fixture.readFile('/strings/index.html');\n    const $ = cheerio.load(html); // test 1: Can pass text to Preact components\n\n    const $preact = $('#preact');\n    expect($preact.text().trim()).to.equal('Hello world'); // test 2: Can pass text to Vue components\n\n    const $vue = $('#vue');\n    expect($vue.text().trim()).to.equal('Hello world'); // test 3: Can pass text to Svelte components\n\n    const $svelte = $('#svelte');\n    expect($svelte.text().trim()).to.equal('Hello world');\n  });","file":"astro-children.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes markup children to framework components","suites":["Component children"],"updatePoint":{"line":26,"column":52,"index":1043},"line":26,"code":"  it('Passes markup children to framework components', async () => {\n    const html = await fixture.readFile('/markup/index.html');\n    const $ = cheerio.load(html); // test 1: Can pass markup to Preact components\n\n    const $preact = $('#preact h1');\n    expect($preact.text().trim()).to.equal('Hello world'); // test 2: Can pass markup to Vue components\n\n    const $vue = $('#vue h1');\n    expect($vue.text().trim()).to.equal('Hello world'); // test 3: Can pass markup to Svelte components\n\n    const $svelte = $('#svelte h1');\n    expect($svelte.text().trim()).to.equal('Hello world');\n  });","file":"astro-children.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes multiple children to framework components","suites":["Component children"],"updatePoint":{"line":39,"column":54,"index":1640},"line":39,"code":"  it('Passes multiple children to framework components', async () => {\n    const html = await fixture.readFile('/multiple/index.html');\n    const $ = cheerio.load(html); // test 1: Can pass multiple children to Preact components\n\n    const $preact = $('#preact');\n    expect($preact.children()).to.have.lengthOf(2);\n    expect($preact.children(':first-child').text().trim()).to.equal('Hello world');\n    expect($preact.children(':last-child').text().trim()).to.equal('Goodbye world'); // test 2: Can pass multiple children to Vue components\n\n    const $vue = $('#vue');\n    expect($vue.children()).to.have.lengthOf(2);\n    expect($vue.children(':first-child').text().trim()).to.equal('Hello world');\n    expect($vue.children(':last-child').text().trim()).to.equal('Goodbye world'); // test 3: Can pass multiple children to Svelte components\n\n    const $svelte = $('#svelte');\n    expect($svelte.children()).to.have.lengthOf(2);\n    expect($svelte.children(':first-child').text().trim()).to.equal('Hello world');\n    expect($svelte.children(':last-child').text().trim()).to.equal('Goodbye world');\n  });","file":"astro-children.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders a template when children are not rendered for client components","suites":["Component children"],"updatePoint":{"line":58,"column":77,"index":2766},"line":58,"code":"  it('Renders a template when children are not rendered for client components', async () => {\n    const html = await fixture.readFile('/no-render/index.html');\n    const $ = cheerio.load(html); // test 1: If SSR only, no children are rendered.\n\n    expect($('#ssr-only').children()).to.have.lengthOf(0); // test 2: If client, and no children are rendered, a template is.\n\n    expect($('#client').parent().children()).to.have.lengthOf(2, 'rendered the client component and a template');\n    expect($('#client').parent().find('template[data-astro-template]')).to.have.lengthOf(1, 'Found 1 template'); // test 3: If client, and children are rendered, no template is.\n\n    expect($('#client-render').parent().children()).to.have.lengthOf(1);\n    expect($('#client-render').parent().find('template')).to.have.lengthOf(0); // test 4: If client and no children are provided, no template is.\n\n    expect($('#client-no-children').parent().children()).to.have.lengthOf(1);\n    expect($('#client-no-children').parent().find('template')).to.have.lengthOf(0);\n  });","file":"astro-children.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes class:list attributes as expected to elements","suites":["Class List"],"updatePoint":{"line":12,"column":58,"index":368},"line":12,"code":"  it('Passes class:list attributes as expected to elements', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('[class=\"test control\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test expression\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test true\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test truthy\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test set\"]')).to.have.lengthOf(1);\n    expect($('[class=\"hello goodbye world friend\"]')).to.have.lengthOf(1);\n    expect($('.false, .noshow1, .noshow2, .noshow3, .noshow4')).to.have.lengthOf(0);\n  });","file":"astro-class-list.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Passes class:list attributes as expected to components","suites":["Class List"],"updatePoint":{"line":23,"column":60,"index":1001},"line":23,"code":"  it('Passes class:list attributes as expected to components', async () => {\n    const html = await fixture.readFile('/component/index.html');\n    const $ = cheerio.load(html);\n    expect($('[class=\"test control\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test expression\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test true\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test truthy\"]')).to.have.lengthOf(1);\n    expect($('[class=\"test set\"]')).to.have.lengthOf(1);\n    expect($('[class=\"hello goodbye world friend\"]')).to.have.lengthOf(1);\n  });","file":"astro-class-list.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads pages using client:only hydrator","suites":["Client only components"],"updatePoint":{"line":12,"column":44,"index":361},"line":12,"code":"  it('Loads pages using client:only hydrator', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html); // test 1: <astro-root> is empty\n\n    expect($('astro-root').html()).to.equal('');\n    const src = $('script').attr('src');\n    const script = await fixture.readFile(src); // test 2: svelte renderer is on the page\n\n    const exp = /import\\(\"(.\\/client.*)\"\\)/g;\n    let match, svelteRenderer;\n\n    while (match = exp.exec(script)) {\n      svelteRenderer = match[1].replace(/^\\./, '/assets/');\n    }\n\n    expect(svelteRenderer).to.be.ok; // test 3: can load svelte renderer\n\n    const svelteClient = await fixture.readFile(svelteRenderer);\n    expect(svelteClient).to.be.ok;\n  });","file":"astro-client-only.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code> without lang or theme","suites":["<Code>"],"updatePoint":{"line":12,"column":34,"index":338},"line":12,"code":"  it('<Code> without lang or theme', async () => {\n    let html = await fixture.readFile('/no-lang/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(1);\n    expect($('pre').attr('style')).to.equal('background-color: #0d1117; overflow-x: auto;', 'applies default and overflow');\n    expect($('pre > code')).to.have.lengthOf(1); // test: contains some generated spans\n\n    expect($('pre > code span').length).to.be.greaterThan(1);\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code lang=\"...\">","suites":["<Code>"],"updatePoint":{"line":21,"column":23,"index":798},"line":21,"code":"  it('<Code lang=\"...\">', async () => {\n    let html = await fixture.readFile('/basic/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(1);\n    expect($('pre').attr('class'), 'astro-code');\n    expect($('pre > code')).to.have.lengthOf(1); // test: contains many generated spans\n\n    expect($('pre > code span').length).to.be.greaterThanOrEqual(6);\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code theme=\"...\">","suites":["<Code>"],"updatePoint":{"line":30,"column":24,"index":1189},"line":30,"code":"  it('<Code theme=\"...\">', async () => {\n    let html = await fixture.readFile('/custom-theme/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(1);\n    expect($('pre').attr('class')).to.equal('astro-code');\n    expect($('pre').attr('style')).to.equal('background-color: #2e3440ff; overflow-x: auto;', 'applies custom theme');\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code wrap>","suites":["<Code>"],"updatePoint":{"line":37,"column":17,"index":1550},"line":37,"code":"  it('<Code wrap>', async () => {\n    {\n      let html = await fixture.readFile('/wrap-true/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1); // test: applies wrap overflow\n\n      expect($('pre').attr('style')).to.equal('background-color: #0d1117; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;');\n    }\n    {\n      let html = await fixture.readFile('/wrap-false/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1); // test: applies wrap overflow\n\n      expect($('pre').attr('style')).to.equal('background-color: #0d1117; overflow-x: auto;');\n    }\n    {\n      let html = await fixture.readFile('/wrap-null/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1); // test: applies wrap overflow\n\n      expect($('pre').attr('style')).to.equal('background-color: #0d1117');\n    }\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code lang=\"...\" theme=\"css-variables\">","suites":["<Code>"],"updatePoint":{"line":60,"column":45,"index":2501},"line":60,"code":"  it('<Code lang=\"...\" theme=\"css-variables\">', async () => {\n    let html = await fixture.readFile('/css-theme/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(1);\n    expect($('pre').attr('class')).to.equal('astro-code');\n    expect($('pre, pre span').map((i, f) => f.attribs ? f.attribs.style : 'no style found').toArray()).to.deep.equal(['background-color: var(--astro-code-color-background); overflow-x: auto;', 'color: var(--astro-code-token-constant)', 'color: var(--astro-code-token-function)', 'color: var(--astro-code-color-text)', 'color: var(--astro-code-token-string-expression)', 'color: var(--astro-code-color-text)']);\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Code> with custom theme and lang","suites":["<Code>"],"updatePoint":{"line":67,"column":39,"index":3173},"line":67,"code":"  it('<Code> with custom theme and lang', async () => {\n    let html = await fixture.readFile('/imported/index.html');\n    const $ = cheerio.load(html);\n    expect($('#theme > pre')).to.have.lengthOf(1);\n    expect($('#theme > pre').attr('style'), 'background-color: #FDFDFE; overflow-x: auto;');\n    expect($('#lang > pre')).to.have.lengthOf(1);\n    expect($('#lang > pre > code span').length).to.equal(3);\n  });","file":"astro-component-code.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"is skipped","suites":[],"line":55,"code":"it.skip('is skipped', () => {});","file":"astro-components.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"CSS output in import order","suites":["CSS Bundling (ESM import)"],"updatePoint":{"line":12,"column":32,"index":360},"line":12,"code":"  it('CSS output in import order', async () => {\n    // note: this test is a little confusing, but the main idea is that\n    // page-2.astro contains all of page-1.astro, plus some unique styles.\n    // we only test page-2 to ensure the proper order is observed.\n    const html = await fixture.readFile('/page-2/index.html');\n    const $ = cheerio.load(html);\n    let css = '';\n\n    for (const style of $('link[rel=stylesheet]')) {\n      const href = style.attribs.href.replace(/^\\.\\./, '');\n      if (!href) continue;\n      css += await fixture.readFile(href);\n    } // test 1: insure green comes after red (site.css)\n\n\n    expect(css.indexOf('p{color:green}')).to.be.greaterThan(css.indexOf('p{color:red}')); // test 2: insure green comes after blue (page-1.css)\n\n    expect(css.indexOf('p{color:green}')).to.be.greaterThan(css.indexOf('p{color:#00f}'));\n  }); // TODO: re-enable this","file":"astro-css-bundling-import.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"no empty CSS files","suites":["CSS Bundling (ESM import)"],"line":32,"code":"  it.skip('no empty CSS files', async () => {","file":"astro-css-bundling-import.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"page-1 has all CSS","suites":["nested layouts"],"updatePoint":{"line":12,"column":24,"index":349},"line":12,"code":"  it('page-1 has all CSS', async () => {\n    const html = await fixture.readFile('/page-1/index.html');\n    const $ = cheerio.load(html);\n    const stylesheets = $('link[rel=stylesheet]').toArray().map(el => el.attribs.href); // page-one.[hash].css exists\n\n    expect(stylesheets.some(href => /page-one\\.\\w+\\.css/.test(href))).to.be.true;\n  });","file":"astro-css-bundling-nested-layouts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"page-2 has all CSS","suites":["nested layouts"],"updatePoint":{"line":19,"column":24,"index":694},"line":19,"code":"  it('page-2 has all CSS', async () => {\n    const html = await fixture.readFile('/page-2/index.html');\n    const $ = cheerio.load(html);\n    const stylesheets = $('link[rel=stylesheet]').toArray().map(el => el.attribs.href); // page-one.[hash].css exists\n\n    expect(stylesheets.some(href => /page-one\\.\\w+\\.css/.test(href))).to.be.true; // page-2.[hash].css exists\n\n    expect(stylesheets.some(href => /page-2\\.\\w+\\.css/.test(href))).to.be.true;\n  });","file":"astro-css-bundling-nested-layouts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Bundles CSS","suites":["CSS Bundling"],"updatePoint":{"line":25,"column":17,"index":1110},"line":25,"code":"  it('Bundles CSS', async () => {\n    const builtCSS = new Set(); // for all HTML files…\n\n    for (const [filepath, css] of Object.entries(EXPECTED_CSS)) {\n      const html = await fixture.readFile(filepath);\n      const $ = cheerio.load(html); // test 1: assert new bundled CSS is present\n\n      for (const href of css) {\n        const link = $(`link[rel=\"stylesheet\"][href^=\"${href}\"]`);\n        expect(link).to.have.lengthOf(1);\n        const outHref = link.attr('href');\n        builtCSS.add(outHref.startsWith('../') ? outHref.substr(2) : outHref);\n      } // test 2: assert old CSS was removed\n\n\n      for (const href of UNEXPECTED_CSS) {\n        const link = $(`link[rel=\"stylesheet\"][href=\"${href}\"]`);\n        expect(link).to.have.lengthOf(0);\n      } // test 3: preload tags was not removed and attributes was preserved\n\n\n      if (filepath === '/preload/index.html') {\n        const stylesheet = $('link[rel=\"stylesheet\"][href^=\"../assets/preload\"]');\n        const preload = $('link[rel=\"preload\"][href^=\"../assets/preload\"]');\n        expect(stylesheet[0].attribs.media).to.equal('print');\n        expect(preload).to.have.lengthOf(1); // Preload tag was removed\n      } // test 4: preload tags was not removed and attributes was preserved\n\n\n      if (filepath === '/preload-merge/index.html') {\n        const preload = $('link[rel=\"preload\"]');\n        expect(preload).to.have.lengthOf(1);\n      } // test 5: assert all bundled CSS was built and contains CSS\n\n\n      for (const url of builtCSS.keys()) {\n        const css = await fixture.readFile(url);\n        expect(css).to.be.ok;\n      }\n    }\n  });","file":"astro-css-bundling.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Automatically prepends the standards mode doctype","suites":["Doctype"],"updatePoint":{"line":12,"column":55,"index":353},"line":12,"code":"  it('Automatically prepends the standards mode doctype', async () => {\n    const html = await fixture.readFile('/prepend/index.html'); // test that Doctype always included\n\n    expect(html).to.match(/^<!DOCTYPE html>/i);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"No attributes added when doctype is provided by user","suites":["Doctype"],"updatePoint":{"line":17,"column":58,"index":584},"line":17,"code":"  it('No attributes added when doctype is provided by user', async () => {\n    const html = await fixture.readFile('/provided/index.html'); // test that Doctype always included\n\n    expect(html).to.match(/^<!DOCTYPE html>/i);\n  }); // Note: parse5 converts this to <!DOCTYPE html> (HTML5). Uncomment if we want to support legacy doctypes.","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"User provided doctype is case insensitive","suites":["Doctype"],"updatePoint":{"line":29,"column":47,"index":1257},"line":29,"code":"  it('User provided doctype is case insensitive', async () => {\n    const html = await fixture.readFile('/capital/index.html'); // test 1: Doctype left alone\n\n    expect(html).to.match(/^<!DOCTYPE html>/i); // test 2: no closing tag\n\n    expect(html).not.to.match(/<\\/!DOCTYPE>/i);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Doctype can be provided in a layout","suites":["Doctype"],"updatePoint":{"line":36,"column":41,"index":1539},"line":36,"code":"  it('Doctype can be provided in a layout', async () => {\n    const html = await fixture.readFile('/in-layout/index.html'); // test 1: doctype is at the front\n\n    expect(html).to.match(/^<!DOCTYPE html>/i); // test 2: A link inside of the head\n\n    const $ = cheerio.load(html);\n    expect($('head link')).to.have.lengthOf(1);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Doctype is added in a layout without one","suites":["Doctype"],"updatePoint":{"line":44,"column":46,"index":1878},"line":44,"code":"  it('Doctype is added in a layout without one', async () => {\n    const html = await fixture.readFile('/in-layout-no-doctype/index.html'); // test that doctype is at the front\n\n    expect(html).to.match(/^<!DOCTYPE html>/i);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Doctype is added in a layout used with markdown pages","suites":["Doctype"],"updatePoint":{"line":49,"column":59,"index":2123},"line":49,"code":"  it('Doctype is added in a layout used with markdown pages', async () => {\n    const html = await fixture.readFile('/in-layout-article/index.html'); // test 1: doctype is at the front\n\n    expect(html).to.match(/^<!DOCTYPE html>/i); // test 2: A link inside of the head\n\n    const $ = cheerio.load(html);\n    expect($('head link')).to.have.lengthOf(1);\n  });","file":"astro-doctype.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads packages that only run code in client","suites":["Dynamic components"],"updatePoint":{"line":12,"column":49,"index":358},"line":12,"code":"  it('Loads packages that only run code in client', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('script').length).to.eq(1);\n  });","file":"astro-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads pages using client:media hydrator","suites":["Dynamic components"],"updatePoint":{"line":17,"column":45,"index":557},"line":17,"code":"  it('Loads pages using client:media hydrator', async () => {\n    const root = new URL('http://example.com/media/index.html');\n    const html = await fixture.readFile('/media/index.html');\n    const $ = cheerio.load(html); // test 1: static value rendered\n\n    let js = await fixture.readFile(new URL($('script').attr('src'), root).pathname);\n    expect(js).to.include(`value:\"(max-width: 700px)\"`); // test 2: dynamic value rendered\n\n    expect(js).to.include(`value:\"(max-width: 600px)\"`);\n  });","file":"astro-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Loads pages using client:only hydrator","suites":["Dynamic components"],"updatePoint":{"line":27,"column":44,"index":1054},"line":27,"code":"  it('Loads pages using client:only hydrator', async () => {\n    const html = await fixture.readFile('/client-only/index.html');\n    const $ = cheerio.load(html); // test 1: <astro-root> is empty\n\n    expect($('<astro-root>').html()).to.equal('');\n    const script = $('script').text(); // Grab the svelte import\n    // const exp = /import\\(\"(.+?)\"\\)/g;\n    // let match, svelteRenderer;\n    // while ((match = exp.exec(result.contents))) {\n    //   if (match[1].includes('renderers/renderer-svelte/client.js')) {\n    //     svelteRenderer = match[1];\n    //   }\n    // }\n    // test 2: Svelte renderer is on the page\n    // expect(svelteRenderer).to.be.ok;\n    // test 3: Can load svelte renderer\n    // const result = await fixture.fetch(svelteRenderer);\n    // expect(result.status).to.equal(200);\n  });","file":"astro-dynamic.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"builds without throwing","suites":["Environment Variables"],"updatePoint":{"line":11,"column":29,"index":307},"line":11,"code":"  it('builds without throwing', async () => {\n    expect(true).to.equal(true);\n  });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does render public env and private env","suites":["Environment Variables"],"updatePoint":{"line":14,"column":44,"index":407},"line":14,"code":"  it('does render public env and private env', async () => {\n    let indexHtml = await fixture.readFile('/index.html');\n    expect(indexHtml).to.include('CLUB_33');\n    expect(indexHtml).to.include('BLUE_BAYOU');\n  });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"includes public env in client-side JS","suites":["Environment Variables"],"updatePoint":{"line":19,"column":43,"index":625},"line":19,"code":"  it('includes public env in client-side JS', async () => {\n    let dirs = await fixture.readdir('/assets');\n    let found = false; // Look in all of the .js files to see if the public env is inlined.\n    // Testing this way prevents hardcoding expected js files.\n    // If we find it in any of them that's good enough to know its working.\n\n    await Promise.all(dirs.map(async path => {\n      if (path.endsWith('.js')) {\n        let js = await fixture.readFile(`/assets/${path}`);\n\n        if (js.includes('BLUE_BAYOU')) {\n          found = true;\n        }\n      }\n    }));\n    expect(found).to.equal(true, 'found the public env variable in the JS build');\n  });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"does not include private env in client-side JS","suites":["Environment Variables"],"updatePoint":{"line":36,"column":52,"index":1298},"line":36,"code":"  it('does not include private env in client-side JS', async () => {\n    let dirs = await fixture.readdir('/assets');\n    let found = false; // Look in all of the .js files to see if the public env is inlined.\n    // Testing this way prevents hardcoding expected js files.\n    // If we find it in any of them that's good enough to know its NOT working.\n\n    await Promise.all(dirs.map(async path => {\n      if (path.endsWith('.js')) {\n        let js = await fixture.readFile(`/assets/${path}`);\n\n        if (js.includes('CLUB_33')) {\n          found = true;\n        }\n      }\n    }));\n    expect(found).to.equal(false, 'found the private env variable in the JS build');\n  });","file":"astro-envs.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load page","suites":["Expressions"],"updatePoint":{"line":13,"column":19,"index":365},"line":13,"code":"  it('Can load page', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n\n    for (let col of ['red', 'yellow', 'blue']) {\n      expect($('#' + col)).to.have.lengthOf(1);\n    }\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Ignores characters inside of strings","suites":["Expressions"],"updatePoint":{"line":21,"column":42,"index":624},"line":21,"code":"  it('Ignores characters inside of strings', async () => {\n    const html = await fixture.readFile('/strings/index.html');\n    const $ = cheerio.load(html);\n\n    for (let col of ['red', 'yellow', 'blue']) {\n      expect($('#' + col)).to.have.lengthOf(1);\n    }\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Ignores characters inside of line comments","suites":["Expressions"],"updatePoint":{"line":29,"column":48,"index":897},"line":29,"code":"  it('Ignores characters inside of line comments', async () => {\n    const html = await fixture.readFile('/line-comments/index.html');\n    const $ = cheerio.load(html);\n\n    for (let col of ['red', 'yellow', 'blue']) {\n      expect($('#' + col)).to.have.lengthOf(1);\n    }\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Ignores characters inside of multiline comments","suites":["Expressions"],"updatePoint":{"line":37,"column":53,"index":1181},"line":37,"code":"  it('Ignores characters inside of multiline comments', async () => {\n    const html = await fixture.readFile('/multiline-comments/index.html');\n    const $ = cheerio.load(html);\n\n    for (let col of ['red', 'yellow', 'blue']) {\n      expect($('#' + col)).to.have.lengthOf(1);\n    }\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows multiple JSX children in mustache","suites":["Expressions"],"updatePoint":{"line":45,"column":46,"index":1463},"line":45,"code":"  it('Allows multiple JSX children in mustache', async () => {\n    const html = await fixture.readFile('/multiple-children/index.html');\n    expect(html).to.include('#f');\n    expect(html).not.to.include('#t');\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Allows <> Fragments in expressions","suites":["Expressions"],"updatePoint":{"line":50,"column":40,"index":1674},"line":50,"code":"  it('Allows <> Fragments in expressions', async () => {\n    const html = await fixture.readFile('/multiple-children/index.html');\n    const $ = cheerio.load(html);\n    expect($('#fragment').children()).to.have.lengthOf(3);\n    expect($('#fragment').children('#a')).to.have.lengthOf(1);\n    expect($('#fragment').children('#b')).to.have.lengthOf(1);\n    expect($('#fragment').children('#c')).to.have.lengthOf(1);\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Does not render falsy values using &&","suites":["Expressions"],"updatePoint":{"line":58,"column":43,"index":2096},"line":58,"code":"  it('Does not render falsy values using &&', async () => {\n    const html = await fixture.readFile('/falsy/index.html');\n    const $ = cheerio.load(html); // test 1: Expected {true && <span id=\"true\" />} to render\n\n    expect($('#true')).to.have.lengthOf(1); // test 2: Expected {0 && \"VALUE\"} to render \"0\"\n\n    expect($('#zero').text()).to.equal('0'); // test 3: Expected {false && <span id=\"false\" />} not to render\n\n    expect($('#false')).to.have.lengthOf(0); // test 4: Expected {null && <span id=\"null\" />} not to render\n\n    expect($('#null')).to.have.lengthOf(0); // test 5: Expected {undefined && <span id=\"undefined\" />} not to render\n\n    expect($('#undefined')).to.have.lengthOf(0); // Inside of a component\n    // test 6: Expected {true && <span id=\"true\" />} to render\n\n    expect($('#frag-true')).to.have.lengthOf(1); // test 7: Expected {false && <span id=\"false\" />} not to render\n\n    expect($('#frag-false')).to.have.lengthOf(0); // test 8: Expected {null && <span id=\"null\" />} not to render\n\n    expect($('#frag-null')).to.have.lengthOf(0); // test 9: Expected {undefined && <span id=\"undefined\" />} not to render\n\n    expect($('#frag-undefined')).to.have.lengthOf(0);\n  });","file":"astro-expr.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"is skipped","suites":[],"line":21,"code":"it.skip('is skipped', () => {});","file":"astro-external-files.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Shows static content","suites":["Dynamic component fallback"],"updatePoint":{"line":13,"column":26,"index":390},"line":13,"code":"  it('Shows static content', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#fallback').text()).to.equal('static');\n  });","file":"astro-fallback.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"is only called once during build","suites":["getStaticPaths()"],"updatePoint":{"line":15,"column":38,"index":419},"line":15,"code":"  it('is only called once during build', () => {\n    // useless expect; if build() throws in setup then this test fails\n    expect(true).to.equal(true);\n  });","file":"astro-get-static-paths.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.request.url","suites":["Astro.*"],"updatePoint":{"line":16,"column":23,"index":416},"line":16,"code":"  it('Astro.request.url', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#pathname').text()).to.equal('/');\n    expect($('#child-pathname').text()).to.equal('/');\n    expect($('#nested-child-pathname').text()).to.equal('/');\n  });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.request.canonicalURL","suites":["Astro.*"],"updatePoint":{"line":23,"column":32,"index":727},"line":23,"code":"  it('Astro.request.canonicalURL', async () => {\n    // given a URL, expect the following canonical URL\n    const canonicalURLs = {\n      '/index.html': 'https://mysite.dev/blog/',\n      '/post/post/index.html': 'https://mysite.dev/blog/post/post/',\n      '/posts/1/index.html': 'https://mysite.dev/blog/posts/',\n      '/posts/2/index.html': 'https://mysite.dev/blog/posts/2/'\n    };\n\n    for (const [url, canonicalURL] of Object.entries(canonicalURLs)) {\n      const html = await fixture.readFile(url);\n      const $ = cheerio.load(html);\n      expect($('link[rel=\"canonical\"]').attr('href')).to.equal(canonicalURL);\n    }\n  });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.site","suites":["Astro.*"],"updatePoint":{"line":38,"column":16,"index":1341},"line":38,"code":"  it('Astro.site', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#site').attr('href')).to.equal('https://mysite.dev/blog/');\n  });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.resolve built","suites":["Astro.*"],"updatePoint":{"line":43,"column":25,"index":1553},"line":43,"code":"  it('Astro.resolve built', async () => {\n    const html = await fixture.readFile('/resolve/index.html');\n    const $ = cheerio.load(html);\n    expect($('img').attr('src')).to.include('assets/penguin.ccd44411.png'); // Main src/images\n\n    expect($('#inner-child img').attr('src')).to.include('assets/penguin.b9ab122a.png');\n  });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Astro.fetchContent() returns the correct \"url\" property, including buildOptions.site subpath","suites":["Astro.*"],"updatePoint":{"line":50,"column":98,"index":1957},"line":50,"code":"  it('Astro.fetchContent() returns the correct \"url\" property, including buildOptions.site subpath', async () => {\n    const html = await fixture.readFile('/posts/1/index.html');\n    const $ = cheerio.load(html);\n    expect($('.post-url').attr('href')).to.equal('/blog/post/post-2');\n  });","file":"astro-global.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renderer order","suites":["JSX"],"updatePoint":{"line":17,"column":20,"index":735},"line":17,"code":"  it('Renderer order', () => {\n    it('JSX renderers can be defined in any order', async () => {\n      if (!Object.values(fixtures).length) {\n        throw new Error(`JSX renderers didn’t build properly`);\n      }\n\n      for (const [name, fixture] of Object.entries(fixtures)) {\n        const html = await fixture.readFile('/index.html');\n        expect(html, name).to.be.ok;\n      }\n    });\n  });","file":"astro-jsx.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"JSX renderers can be defined in any order","suites":["JSX"],"updatePoint":{"line":18,"column":49,"index":795},"line":18,"code":"    it('JSX renderers can be defined in any order', async () => {\n      if (!Object.values(fixtures).length) {\n        throw new Error(`JSX renderers didn’t build properly`);\n      }\n\n      for (const [name, fixture] of Object.entries(fixtures)) {\n        const html = await fixture.readFile('/index.html');\n        expect(html, name).to.be.ok;\n      }\n    });","file":"astro-jsx.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Does not render the draft post","suites":["Astro Markdown with draft posts disabled"],"updatePoint":{"line":17,"column":36,"index":517},"line":17,"code":"  it('Does not render the draft post', async () => {\n    try {\n      await fixture.readFile('/wip/index.html');\n    } catch (err) {\n      expect(err.code).to.equal('ENOENT');\n    }\n  });","file":"astro-markdown-drafts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders the draft post","suites":["Astro Markdown with draft posts enabled"],"updatePoint":{"line":37,"column":28,"index":1004},"line":37,"code":"  it('Renders the draft post', async () => {\n    const html = await fixture.readFile('/wip/index.html');\n    const $ = cheerio.load(html);\n    expect($('h1').length).to.be.ok;\n    expect($('h1').text()).to.equal('WIP');\n  });","file":"astro-markdown-drafts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render markdown with plugins","suites":["Astro Markdown plugins"],"updatePoint":{"line":30,"column":38,"index":966},"line":30,"code":"  it('Can render markdown with plugins', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html); // test 1: Added a TOC\n\n    expect($('.toc')).to.have.lengthOf(1); // teste 2: Added .title to h1\n\n    expect($('#hello-world').hasClass('title')).to.equal(true);\n  });","file":"astro-markdown-plugins.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render Astro <Markdown> with plugins","suites":["Astro Markdown plugins"],"updatePoint":{"line":38,"column":46,"index":1288},"line":38,"code":"  it('Can render Astro <Markdown> with plugins', async () => {\n    const html = await fixture.readFile('/astro/index.html');\n    const $ = cheerio.load(html); // test 1: Added a TOC\n\n    expect($('.toc')).to.have.lengthOf(1); // teste 2: Added .title to h1\n\n    expect($('#hello-world').hasClass('title')).to.equal(true);\n  });","file":"astro-markdown-plugins.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render markdown with shiki","suites":["Astro Markdown Shiki","Render shiki"],"updatePoint":{"line":13,"column":38,"index":412},"line":13,"code":"    it('Can render markdown with shiki', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html); // There should be no HTML from Prism\n\n      expect($('.token')).to.have.lengthOf(0);\n      expect($('pre')).to.have.lengthOf(1);\n      expect($('pre').hasClass('astro-code')).to.equal(true);\n      expect($('pre').attr().style).to.equal('background-color: #0d1117; overflow-x: auto;');\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render Astro <Markdown> with shiki","suites":["Astro Markdown Shiki","Render shiki"],"updatePoint":{"line":22,"column":46,"index":863},"line":22,"code":"    it('Can render Astro <Markdown> with shiki', async () => {\n      const html = await fixture.readFile('/astro/index.html');\n      const $ = cheerio.load(html); // There should be no HTML from Prism\n\n      expect($('.token')).to.have.lengthOf(0);\n      expect($('pre')).to.have.lengthOf(2);\n      expect($('span.line')).to.have.lengthOf(2);\n      expect($('span.line').get(0).children).to.have.lengthOf(1);\n      expect($('span.line').get(1).children).to.have.lengthOf(5);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","Themes","Integrated theme"],"updatePoint":{"line":42,"column":23,"index":1618},"line":42,"code":"      it('Markdown file', async () => {\n        const html = await fixture.readFile('/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').hasClass('astro-code')).to.equal(true);\n        expect($('pre').attr().style).to.equal('background-color: #ffffff; overflow-x: auto;');\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Markdown /> component","suites":["Astro Markdown Shiki","Themes","Integrated theme"],"updatePoint":{"line":49,"column":32,"index":1981},"line":49,"code":"      it('<Markdown /> component', async () => {\n        const html = await fixture.readFile('/astro/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').hasClass('astro-code')).to.equal(true);\n        expect($('pre').attr().style).to.equal('background-color: #ffffff; overflow-x: auto;');\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","Themes","Custom theme"],"updatePoint":{"line":65,"column":23,"index":2601},"line":65,"code":"      it('Markdown file', async () => {\n        const html = await fixture.readFile('/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').hasClass('astro-code')).to.equal(true);\n        expect($('pre').attr().style).to.equal('background-color: #FDFDFE; overflow-x: auto;');\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Markdown /> component","suites":["Astro Markdown Shiki","Themes","Custom theme"],"updatePoint":{"line":72,"column":32,"index":2964},"line":72,"code":"      it('<Markdown /> component', async () => {\n        const html = await fixture.readFile('/astro/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').hasClass('astro-code')).to.equal(true);\n        expect($('pre').attr().style).to.equal('background-color: #FDFDFE; overflow-x: auto;');\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","Custom langs"],"updatePoint":{"line":89,"column":21,"index":3558},"line":89,"code":"    it('Markdown file', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      const segments = $('.line').get(6).children;\n      expect(segments).to.have.lengthOf(3);\n      expect(segments[0].attribs.style).to.be.equal('color: #C9D1D9');\n      expect(segments[1].attribs.style).to.be.equal('color: #79C0FF');\n      expect(segments[2].attribs.style).to.be.equal('color: #C9D1D9');\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Markdown /> component","suites":["Astro Markdown Shiki","Custom langs"],"updatePoint":{"line":98,"column":30,"index":4015},"line":98,"code":"    it('<Markdown /> component', async () => {\n      const html = await fixture.readFile('/astro/index.html');\n      const $ = cheerio.load(html);\n      const segments = $('.line').get(6).children;\n      expect(segments).to.have.lengthOf(3);\n      expect(segments[0].attribs.style).to.be.equal('color: #C9D1D9');\n      expect(segments[1].attribs.style).to.be.equal('color: #79C0FF');\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","Wrap","wrap = true"],"updatePoint":{"line":117,"column":23,"index":4788},"line":117,"code":"      it('Markdown file', async () => {\n        const html = await fixture.readFile('/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre')).to.have.lengthOf(1);\n        expect($('pre').attr('style')).to.equal(style);\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Markdown /> component","suites":["Astro Markdown Shiki","Wrap","wrap = true"],"updatePoint":{"line":123,"column":32,"index":5047},"line":123,"code":"      it('<Markdown /> component', async () => {\n        const html = await fixture.readFile('/astro/index.html');\n        const $ = cheerio.load(html);\n        expect($('pre').get(0).attribs.style).to.equal(style);\n        expect($('pre').get(1).attribs.style).to.equal(style);\n      });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","wrap = false"],"updatePoint":{"line":140,"column":21,"index":5632},"line":140,"code":"    it('Markdown file', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1);\n      expect($('pre').attr('style')).to.equal(style);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Markdown /> component","suites":["Astro Markdown Shiki","wrap = false"],"updatePoint":{"line":146,"column":30,"index":5879},"line":146,"code":"    it('<Markdown /> component', async () => {\n      const html = await fixture.readFile('/astro/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre').get(0).attribs.style).to.equal(style);\n      expect($('pre').get(1).attribs.style).to.equal(style);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Markdown file","suites":["Astro Markdown Shiki","wrap = null"],"updatePoint":{"line":162,"column":21,"index":6425},"line":162,"code":"    it('Markdown file', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre')).to.have.lengthOf(1);\n      expect($('pre').attr('style')).to.equal(style);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"<Markdown /> component","suites":["Astro Markdown Shiki","wrap = null"],"updatePoint":{"line":168,"column":30,"index":6672},"line":168,"code":"    it('<Markdown /> component', async () => {\n      const html = await fixture.readFile('/astro/index.html');\n      const $ = cheerio.load(html);\n      expect($('pre').get(0).attribs.style).to.equal(style);\n      expect($('pre').get(1).attribs.style).to.equal(style);\n    });","file":"astro-markdown-shiki.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load markdown pages with Astro","suites":["Astro Markdown"],"updatePoint":{"line":16,"column":40,"index":447},"line":16,"code":"  it('Can load markdown pages with Astro', async () => {\n    const html = await fixture.readFile('/post/index.html');\n    const $ = cheerio.load(html); // test 1: There is a div added in markdown\n\n    expect($('#first').length).to.be.ok; // test 2: There is a div added via a component from markdown\n\n    expect($('#test').length).to.be.ok;\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load more complex jsxy stuff","suites":["Astro Markdown"],"updatePoint":{"line":24,"column":38,"index":792},"line":24,"code":"  it('Can load more complex jsxy stuff', async () => {\n    const html = await fixture.readFile('/complex/index.html');\n    const $ = cheerio.load(html);\n    expect($('#test').text()).to.equal('Hello world');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Empty code blocks do not fail","suites":["Astro Markdown"],"updatePoint":{"line":29,"column":35,"index":1003},"line":29,"code":"  it('Empty code blocks do not fail', async () => {\n    const html = await fixture.readFile('/empty-code/index.html');\n    const $ = cheerio.load(html); // test 1: There is not a `<code>` in the codeblock\n\n    expect($('pre')[0].children).to.have.lengthOf(1); // test 2: The empty `<pre>` failed to render\n\n    expect($('pre')[1].children).to.have.lengthOf(0);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Runs code blocks through syntax highlighter","suites":["Astro Markdown"],"updatePoint":{"line":37,"column":49,"index":1384},"line":37,"code":"  it('Runs code blocks through syntax highlighter', async () => {\n    const html = await fixture.readFile('/code/index.html');\n    const $ = cheerio.load(html); // test 1: There are child spans in code blocks\n\n    expect($('code span').length).greaterThan(0);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Scoped styles should not break syntax highlight","suites":["Astro Markdown"],"updatePoint":{"line":43,"column":53,"index":1654},"line":43,"code":"  it('Scoped styles should not break syntax highlight', async () => {\n    const html = await fixture.readFile('/scopedStyles-code/index.html');\n    const $ = cheerio.load(html); // test 1: <pre> tag has scopedStyle class passed down\n\n    expect($('pre').is('[class]')).to.equal(true);\n    expect($('pre').attr('class').split(' ').length).to.equal(2); // test 2: <pre> tag has correct language\n\n    expect($('pre').hasClass('language-js')).to.equal(true); // test 3: <code> tag has correct language\n\n    expect($('code').hasClass('language-js')).to.equal(true); // test 4: There are child spans in code blocks\n\n    expect($('code span').length).to.be.greaterThan(0);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders correctly when deeply nested on a page","suites":["Astro Markdown"],"updatePoint":{"line":56,"column":52,"index":2325},"line":56,"code":"  it('Renders correctly when deeply nested on a page', async () => {\n    const html = await fixture.readFile('/deep/index.html');\n    const $ = cheerio.load(html); // test 1: Rendered all children\n\n    expect($('#deep').children()).to.have.lengthOf(3); // tests 2–4: Only rendered title in each section\n\n    expect($('.a').children()).to.have.lengthOf(1);\n    expect($('.b').children()).to.have.lengthOf(1);\n    expect($('.c').children()).to.have.lengthOf(1); // test 5–7: Rendered title in correct section\n\n    expect($('.a > h2').text()).to.equal('A');\n    expect($('.b > h2').text()).to.equal('B');\n    expect($('.c > h2').text()).to.equal('C');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders dynamic content though the content attribute","suites":["Astro Markdown"],"updatePoint":{"line":70,"column":58,"index":2986},"line":70,"code":"  it('Renders dynamic content though the content attribute', async () => {\n    const html = await fixture.readFile('/external/index.html');\n    const $ = cheerio.load(html); // test 1: Rendered markdown content\n\n    expect($('#outer')).to.have.lengthOf(1); // test 2: Nested markdown content\n\n    expect($('#inner')).to.have.lengthOf(1); // test 3: Scoped class passed down\n\n    expect($('#inner').is('[class]')).to.equal(true);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders curly braces correctly","suites":["Astro Markdown"],"updatePoint":{"line":80,"column":36,"index":3399},"line":80,"code":"  it('Renders curly braces correctly', async () => {\n    const html = await fixture.readFile('/braces/index.html');\n    const $ = cheerio.load(html); // test 1: Rendered curly braces markdown content\n\n    expect($('code')).to.have.lengthOf(3); // test 2: Rendered curly braces markdown content\n\n    expect($('code:first-child').text()).to.equal('({})'); // test 3: Rendered curly braces markdown content\n\n    expect($('code:nth-child(2)').text()).to.equal('{...props}'); // test 4: Rendered curly braces markdown content\n\n    expect($('code:last-child').text()).to.equal('{/* JavaScript */}');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Does not close parent early when using content attribute (#494)","suites":["Astro Markdown"],"updatePoint":{"line":92,"column":69,"index":4032},"line":92,"code":"  it('Does not close parent early when using content attribute (#494)', async () => {\n    const html = await fixture.readFile('/close/index.html');\n    const $ = cheerio.load(html); // test <Markdown content /> closed div#target early\n\n    expect($('#target').children()).to.have.lengthOf(2);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render markdown with --- for horizontal rule","suites":["Astro Markdown"],"updatePoint":{"line":98,"column":54,"index":4316},"line":98,"code":"  it('Can render markdown with --- for horizontal rule', async () => {\n    const html = await fixture.readFile('/dash/index.html');\n    expect(!!html).to.equal(true);\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can render markdown content prop (#1259)","suites":["Astro Markdown"],"updatePoint":{"line":102,"column":46,"index":4481},"line":102,"code":"  it('Can render markdown content prop (#1259)', async () => {\n    const html = await fixture.readFile('/content/index.html');\n    const $ = cheerio.load(html); // test Markdown rendered correctly via content prop\n\n    expect($('h1').text()).to.equal('Foo');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"doesn't occurs TypeError when no elements","suites":["Astro Markdown"],"updatePoint":{"line":108,"column":47,"index":4747},"line":108,"code":"  it(\"doesn't occurs TypeError when no elements\", async () => {\n    const html = await fixture.readFile('/no-elements/index.html'); // render html without error\n\n    expect(html).to.be.ok;\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can render nested list correctly","suites":["Astro Markdown"],"updatePoint":{"line":113,"column":38,"index":4933},"line":113,"code":"  it('can render nested list correctly', async () => {\n    const html = await fixture.readFile('/nested-list/index.html');\n    const $ = cheerio.load(html);\n    /**\n     * - list\n     *  - list\n     */\n\n    expect($('#target > ul > li').children()).to.have.lengthOf(1);\n    expect($('#target > ul > li > ul > li').text()).to.equal('nested list');\n    /**\n     * 1. Hello\n     *  1. nested hello\n     */\n\n    expect($('#target > ol > li').children()).to.have.lengthOf(1);\n    expect($('#target > ol > li > ol > li').text()).to.equal('nested hello');\n  });","file":"astro-markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"outputs","suites":["pageUrlFormat"],"updatePoint":{"line":14,"column":13,"index":357},"line":14,"code":"  it('outputs', async () => {\n    expect(await fixture.readFile('/client.html')).to.be.ok;\n    expect(await fixture.readFile('/nested-md.html')).to.be.ok;\n    expect(await fixture.readFile('/nested-astro.html')).to.be.ok;\n  });","file":"astro-pageDirectoryUrl.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can find page with \"index\" at the end file name","suites":["Pages"],"updatePoint":{"line":12,"column":53,"index":347},"line":12,"code":"  it('Can find page with \"index\" at the end file name', async () => {\n    const html = await fixture.readFile('/posts/name-with-index/index.html');\n    const $ = cheerio.load(html);\n    expect($('h1').text()).to.equal('Name with index');\n  });","file":"astro-pages.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"optional root page","suites":["Pagination"],"updatePoint":{"line":16,"column":24,"index":424},"line":16,"code":"  it('optional root page', async () => {\n    for (const file of ['/posts/optional-root-page/index.html', '/posts/optional-root-page/2/index.html', '/posts/optional-root-page/3/index.html']) {\n      expect(await fixture.readFile(file)).to.be.ok;\n    }\n  });","file":"astro-pagination.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"named root page","suites":["Pagination"],"updatePoint":{"line":21,"column":21,"index":678},"line":21,"code":"  it('named root page', async () => {\n    for (const file of ['/posts/named-root-page/1/index.html', '/posts/named-root-page/2/index.html', '/posts/named-root-page/3/index.html']) {\n      expect(await fixture.readFile(file)).to.be.ok;\n    }\n  });","file":"astro-pagination.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"multiple params","suites":["Pagination"],"updatePoint":{"line":26,"column":21,"index":925},"line":26,"code":"  it('multiple params', async () => {\n    const params = [{\n      color: 'red',\n      p: '1'\n    }, {\n      color: 'blue',\n      p: '1'\n    }, {\n      color: 'blue',\n      p: '2'\n    }];\n    await Promise.all(params.map(async ({\n      color,\n      p\n    }) => {\n      const html = await fixture.readFile(`/posts/${color}/${p}/index.html`);\n      const $ = cheerio.load(html);\n      expect($('#page-a').text()).to.equal(p);\n      expect($('#page-b').text()).to.equal(p);\n      expect($('#filter').text()).to.equal(color);\n    }));\n  });","file":"astro-pagination.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"injects Astro styles and scripts","suites":["Partial HTML "],"updatePoint":{"line":16,"column":38,"index":454},"line":16,"code":"  it('injects Astro styles and scripts', async () => {\n    const html = await fixture.fetch('/astro').then(res => res.text());\n    const $ = cheerio.load(html); // test 1: Doctype first\n\n    expect(html).to.match(/^<!DOCTYPE html/); // test 2: correct CSS present\n\n    const css = $('style[astro-style]').html();\n    expect(css).to.match(/\\.astro-[^{]+{color:red;}/);\n  });","file":"astro-partial-html.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"injects framework styles","suites":["Partial HTML "],"updatePoint":{"line":25,"column":30,"index":820},"line":25,"code":"  it('injects framework styles', async () => {\n    const html = await fixture.fetch('/jsx').then(res => res.text());\n    const $ = cheerio.load(html); // test 1: Doctype first\n\n    expect(html).to.match(/^<!DOCTYPE html/); // test 2: link tag present\n\n    const href = $('link[rel=stylesheet][data-astro-injected]').attr('href');\n    expect(href).to.be.ok;\n  });","file":"astro-partial-html.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"css and js files do not get bundled","suites":["Public"],"updatePoint":{"line":11,"column":41,"index":306},"line":11,"code":"  it('css and js files do not get bundled', async () => {\n    let indexHtml = await fixture.readFile('/index.html');\n    expect(indexHtml).to.include('<script src=\"/example.js\"></script>');\n    expect(indexHtml).to.include('<link href=\"/example.css\" ref=\"stylesheet\">');\n    expect(indexHtml).to.include('<img src=\"/images/twitter.png\">');\n  });","file":"astro-public.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Moves external scripts up","suites":["Scripts (hoisted and not)"],"updatePoint":{"line":13,"column":31,"index":372},"line":13,"code":"  it('Moves external scripts up', async () => {\n    const html = await fixture.readFile('/external/index.html');\n    const $ = cheerio.load(html);\n    expect($('head script[type=\"module\"]:not([src=\"/regular_script.js\"])')).to.have.lengthOf(1);\n    expect($('body script')).to.have.lengthOf(0);\n  });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Moves inline scripts up","suites":["Scripts (hoisted and not)"],"updatePoint":{"line":19,"column":29,"index":670},"line":19,"code":"  it('Moves inline scripts up', async () => {\n    const html = await fixture.readFile('/inline/index.html');\n    const $ = cheerio.load(html);\n    expect($('head script[type=\"module\"]')).to.have.lengthOf(1);\n    expect($('body script')).to.have.lengthOf(0);\n  });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Inline page builds the scripts to a single bundle","suites":["Scripts (hoisted and not)"],"updatePoint":{"line":25,"column":55,"index":960},"line":25,"code":"  it('Inline page builds the scripts to a single bundle', async () => {\n    // Inline page\n    let inline = await fixture.readFile('/inline/index.html');\n    let $ = cheerio.load(inline); // test 1: Just one entry module\n\n    expect($('script')).to.have.lengthOf(1); // test 2: attr removed\n\n    expect($('script').attr('data-astro')).to.equal(undefined);\n    let entryURL = path.join('inline', $('script').attr('src'));\n    let inlineEntryJS = await fixture.readFile(entryURL); // test 3: the JS exists\n\n    expect(inlineEntryJS).to.be.ok;\n  });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"External page builds the hoisted scripts to a single bundle","suites":["Scripts (hoisted and not)"],"updatePoint":{"line":38,"column":65,"index":1517},"line":38,"code":"  it('External page builds the hoisted scripts to a single bundle', async () => {\n    let external = await fixture.readFile('/external/index.html');\n    let $ = cheerio.load(external); // test 1: there are two scripts\n\n    expect($('script')).to.have.lengthOf(2);\n    let el = $('script').get(1);\n    let entryURL = path.join('external', $(el).attr('src'));\n    let externalEntryJS = await fixture.readFile(entryURL); // test 2: the JS exists\n\n    expect(externalEntryJS).to.be.ok;\n  });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"External page using non-hoist scripts that are modules are built standalone","suites":["Scripts (hoisted and not)"],"updatePoint":{"line":49,"column":81,"index":2021},"line":49,"code":"  it('External page using non-hoist scripts that are modules are built standalone', async () => {\n    let external = await fixture.readFile('/external-no-hoist/index.html');\n    let $ = cheerio.load(external); // test 1: there is 1 scripts\n\n    expect($('script')).to.have.lengthOf(1); // test 2: inside assets\n\n    let entryURL = $('script').attr('src');\n    expect(entryURL.includes('assets/')).to.equal(true);\n  });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"External page using non-hoist scripts that are not modules are built standalone","suites":["Scripts (hoisted and not)"],"updatePoint":{"line":58,"column":85,"index":2444},"line":58,"code":"  it('External page using non-hoist scripts that are not modules are built standalone', async () => {\n    let external = await fixture.readFile('/external-no-hoist-classic/index.html');\n    let $ = cheerio.load(external); // test 1: there is 1 scripts\n\n    expect($('script')).to.have.lengthOf(1); // test 2: inside assets\n\n    let entryURL = $('script').attr('src');\n    expect(entryURL.includes('assets/')).to.equal(true);\n  });","file":"astro-scripts.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"generates RSS correctly","suites":["Sitemaps","RSS Generation"],"updatePoint":{"line":17,"column":31,"index":463},"line":17,"code":"    it('generates RSS correctly', async () => {\n      const rss = await fixture.readFile('/custom/feed.xml');\n      expect(rss).to.equal(`<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"><channel><title><![CDATA[MF Doomcast]]></title><description><![CDATA[The podcast about the things you find on a picnic, or at a picnic table]]></description><link>https://astro.build/</link><language>en-us</language><itunes:author>MF Doom</itunes:author><item><title><![CDATA[Rap Snitch Knishes (feat. Mr. Fantastik)]]></title><link>https://astro.build/episode/rap-snitch-knishes/</link><guid>https://astro.build/episode/rap-snitch-knishes/</guid><description><![CDATA[Complex named this song the “22nd funniest rap song of all time.”]]></description><pubDate>Tue, 16 Nov 2004 00:00:00 GMT</pubDate><itunes:episodeType>music</itunes:episodeType><itunes:duration>172</itunes:duration><itunes:explicit>true</itunes:explicit></item><item><title><![CDATA[Fazers]]></title><link>https://astro.build/episode/fazers/</link><guid>https://astro.build/episode/fazers/</guid><description><![CDATA[Rhapsody ranked Take Me to Your Leader 17th on its list “Hip-Hop’s Best Albums of the Decade”]]></description><pubDate>Thu, 03 Jul 2003 00:00:00 GMT</pubDate><itunes:episodeType>music</itunes:episodeType><itunes:duration>197</itunes:duration><itunes:explicit>true</itunes:explicit></item><item><title><![CDATA[Rhymes Like Dimes (feat. Cucumber Slice)]]></title><link>https://astro.build/episode/rhymes-like-dimes/</link><guid>https://astro.build/episode/rhymes-like-dimes/</guid><description><![CDATA[Operation: Doomsday has been heralded as an underground classic that established MF Doom's rank within the underground hip-hop scene during the early to mid-2000s.\n]]></description><pubDate>Tue, 19 Oct 1999 00:00:00 GMT</pubDate><itunes:episodeType>music</itunes:episodeType><itunes:duration>259</itunes:duration><itunes:explicit>true</itunes:explicit></item></channel></rss>`);\n    });","file":"astro-sitemap-rss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"generates RSS with pregenerated URLs correctly","suites":["Sitemaps","RSS Generation"],"updatePoint":{"line":22,"column":54,"index":2570},"line":22,"code":"    it('generates RSS with pregenerated URLs correctly', async () => {\n      const rss = await fixture.readFile('/custom/feed-pregenerated-urls.xml');\n      expect(rss).to.equal(`<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"><channel><title><![CDATA[MF Doomcast]]></title><description><![CDATA[The podcast about the things you find on a picnic, or at a picnic table]]></description><link>https://astro.build/</link><language>en-us</language><itunes:author>MF Doom</itunes:author><item><title><![CDATA[Rap Snitch Knishes (feat. Mr. Fantastik)]]></title><link>https://example.com/episode/rap-snitch-knishes/</link><guid>https://example.com/episode/rap-snitch-knishes/</guid><description><![CDATA[Complex named this song the “22nd funniest rap song of all time.”]]></description><pubDate>Tue, 16 Nov 2004 00:00:00 GMT</pubDate><itunes:episodeType>music</itunes:episodeType><itunes:duration>172</itunes:duration><itunes:explicit>true</itunes:explicit></item><item><title><![CDATA[Fazers]]></title><link>https://example.com/episode/fazers/</link><guid>https://example.com/episode/fazers/</guid><description><![CDATA[Rhapsody ranked Take Me to Your Leader 17th on its list “Hip-Hop’s Best Albums of the Decade”]]></description><pubDate>Thu, 03 Jul 2003 00:00:00 GMT</pubDate><itunes:episodeType>music</itunes:episodeType><itunes:duration>197</itunes:duration><itunes:explicit>true</itunes:explicit></item><item><title><![CDATA[Rhymes Like Dimes (feat. Cucumber Slice)]]></title><link>https://example.com/episode/rhymes-like-dimes/</link><guid>https://example.com/episode/rhymes-like-dimes/</guid><description><![CDATA[Operation: Doomsday has been heralded as an underground classic that established MF Doom's rank within the underground hip-hop scene during the early to mid-2000s.\n]]></description><pubDate>Tue, 19 Oct 1999 00:00:00 GMT</pubDate><itunes:episodeType>music</itunes:episodeType><itunes:duration>259</itunes:duration><itunes:explicit>true</itunes:explicit></item></channel></rss>`);\n    });","file":"astro-sitemap-rss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Generates Sitemap correctly","suites":["Sitemaps","Sitemap Generation"],"updatePoint":{"line":29,"column":35,"index":4723},"line":29,"code":"    it('Generates Sitemap correctly', async () => {\n      let sitemap = await fixture.readFile('/sitemap.xml');\n      expect(sitemap).to.equal(`<?xml version=\"1.0\" encoding=\"UTF-8\"?><urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"><url><loc>https://astro.build/episode/fazers/</loc></url><url><loc>https://astro.build/episode/rap-snitch-knishes/</loc></url><url><loc>https://astro.build/episode/rhymes-like-dimes/</loc></url><url><loc>https://astro.build/episodes/</loc></url></urlset>\\n`);\n    });","file":"astro-sitemap-rss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Generates Sitemap correctly","suites":["Sitemaps served from subdirectory","Sitemap Generation"],"updatePoint":{"line":49,"column":35,"index":5640},"line":49,"code":"    it('Generates Sitemap correctly', async () => {\n      let sitemap = await fixture.readFile('/sitemap.xml');\n      expect(sitemap).to.equal(`<?xml version=\"1.0\" encoding=\"UTF-8\"?><urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"><url><loc>https://astro.build/base-directory/episode/fazers/</loc></url><url><loc>https://astro.build/base-directory/episode/rap-snitch-knishes/</loc></url><url><loc>https://astro.build/base-directory/episode/rhymes-like-dimes/</loc></url><url><loc>https://astro.build/base-directory/episodes/</loc></url></urlset>\\n`);\n    });","file":"astro-sitemap-rss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Basic named slots work","suites":["Slots"],"updatePoint":{"line":12,"column":28,"index":322},"line":12,"code":"  it('Basic named slots work', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#a').text().trim()).to.equal('A');\n    expect($('#b').text().trim()).to.equal('B');\n    expect($('#c').text().trim()).to.equal('C');\n    expect($('#default').text().trim()).to.equal('Default');\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Dynamic named slots work","suites":["Slots"],"updatePoint":{"line":20,"column":30,"index":673},"line":20,"code":"  it('Dynamic named slots work', async () => {\n    const html = await fixture.readFile('/dynamic/index.html');\n    const $ = cheerio.load(html);\n    expect($('#a').text().trim()).to.equal('A');\n    expect($('#b').text().trim()).to.equal('B');\n    expect($('#c').text().trim()).to.equal('C');\n    expect($('#default').text().trim()).to.equal('Default');\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots render fallback content by default","suites":["Slots"],"updatePoint":{"line":28,"column":46,"index":1048},"line":28,"code":"  it('Slots render fallback content by default', async () => {\n    const html = await fixture.readFile('/fallback/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default')).to.have.lengthOf(1);\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots override fallback content","suites":["Slots"],"updatePoint":{"line":33,"column":37,"index":1254},"line":33,"code":"  it('Slots override fallback content', async () => {\n    const html = await fixture.readFile('/fallback-override/index.html');\n    const $ = cheerio.load(html);\n    expect($('#override')).to.have.lengthOf(1);\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots work with multiple elements","suites":["Slots"],"updatePoint":{"line":38,"column":39,"index":1472},"line":38,"code":"  it('Slots work with multiple elements', async () => {\n    const html = await fixture.readFile('/multiple/index.html');\n    const $ = cheerio.load(html);\n    expect($('#a').text().trim()).to.equal('ABC');\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots work on Components","suites":["Slots"],"updatePoint":{"line":43,"column":30,"index":1675},"line":43,"code":"  it('Slots work on Components', async () => {\n    const html = await fixture.readFile('/component/index.html');\n    const $ = cheerio.load(html); // test 1: #a renders\n\n    expect($('#a')).to.have.lengthOf(1); // test 2: Slotted component into #a\n\n    expect($('#a').children('astro-component')).to.have.lengthOf(1); // test 3: Slotted component into default slot\n\n    expect($('#default').children('astro-component')).to.have.lengthOf(1);\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Slots API work on Components","suites":["Slots"],"updatePoint":{"line":53,"column":34,"index":2126},"line":53,"code":"  it('Slots API work on Components', async () => {\n    // IDs will exist whether the slots are filled or not\n    {\n      const html = await fixture.readFile('/slottedapi-default/index.html');\n      const $ = cheerio.load(html);\n      expect($('#a')).to.have.lengthOf(1);\n      expect($('#b')).to.have.lengthOf(1);\n      expect($('#c')).to.have.lengthOf(1);\n      expect($('#default')).to.have.lengthOf(1);\n    } // IDs will not exist because the slots are not filled\n\n    {\n      const html = await fixture.readFile('/slottedapi-empty/index.html');\n      const $ = cheerio.load(html);\n      expect($('#a')).to.have.lengthOf(0);\n      expect($('#b')).to.have.lengthOf(0);\n      expect($('#c')).to.have.lengthOf(0);\n      expect($('#default')).to.have.lengthOf(0);\n    } // IDs will exist because the slots are filled\n\n    {\n      const html = await fixture.readFile('/slottedapi-filled/index.html');\n      const $ = cheerio.load(html);\n      expect($('#a')).to.have.lengthOf(1);\n      expect($('#b')).to.have.lengthOf(1);\n      expect($('#c')).to.have.lengthOf(1);\n      expect($('#default')).to.have.lengthOf(0); // the default slot is not filled\n    } // Default ID will exist because the default slot is filled\n\n    {\n      const html = await fixture.readFile('/slottedapi-default-filled/index.html');\n      const $ = cheerio.load(html);\n      expect($('#a')).to.have.lengthOf(0);\n      expect($('#b')).to.have.lengthOf(0);\n      expect($('#c')).to.have.lengthOf(0);\n      expect($('#default')).to.have.lengthOf(1); // the default slot is filled\n    }\n  });","file":"astro-slots.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can be used with the node: prefix","suites":["Node builtins"],"updatePoint":{"line":12,"column":39,"index":338},"line":12,"code":"  it('Can be used with the node: prefix', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#version').text()).to.equal('1.2.0');\n    expect($('#dep-version').text()).to.equal('0.1.0');\n  });","file":"builtins.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can also be used with the non-prefixed version","suites":["Node builtins"],"updatePoint":{"line":18,"column":52,"index":611},"line":18,"code":"  it('Can also be used with the non-prefixed version', async () => {\n    const html = await fixture.readFile('/bare/index.html');\n    const $ = cheerio.load(html);\n    expect($('h1').text()).to.equal('true');\n  });","file":"builtins.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro","suites":["astro cli"],"updatePoint":{"line":6,"column":11,"index":186},"line":6,"code":"  it('astro', async () => {\n    const proc = await cli();\n    expect(proc.stdout).to.include('astro - Futuristic web development tool');\n  });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro --version","suites":["astro cli"],"updatePoint":{"line":10,"column":21,"index":339},"line":10,"code":"  it('astro --version', async () => {\n    const pkgURL = new URL('../package.json', import.meta.url);\n    const pkgVersion = await fs.readFile(pkgURL, 'utf8').then(data => JSON.parse(data).version);\n    const proc = await cli('--version');\n    expect(proc.stdout).to.equal(pkgVersion);\n  });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro dev --hostname=","suites":["astro cli"],"updatePoint":{"line":17,"column":40,"index":710},"line":17,"code":"    it(`astro dev --hostname=${hostname}`, async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const hostnameArgs = hostname ? ['--hostname', hostname] : [];\n      const proc = cli('dev', '--project-root', fileURLToPath(projectRootURL), ...hostnameArgs);\n      let stdout = '';\n\n      for await (const chunk of proc.stdout) {\n        stdout += chunk;\n        if (chunk.includes('Local:')) break;\n      }\n\n      proc.kill();\n      expect(stdout).to.include('Local:   http://localhost:3000');\n      expect(stdout).to.include(`Network: http://${hostname ?? '127.0.0.1'}:3000`);\n    });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"astro build","suites":["astro cli"],"updatePoint":{"line":33,"column":17,"index":1326},"line":33,"code":"  it('astro build', async () => {\n    const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n    const proc = await cli('build', '--project-root', fileURLToPath(projectRootURL));\n    expect(proc.stdout).to.include('Done');\n  });","file":"cli.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"empty user config is valid","suites":["Config Validation"],"updatePoint":{"line":6,"column":32,"index":239},"line":6,"code":"  it('empty user config is valid', async () => {\n    expect(() => validateConfig({}, process.cwd()).catch(err => err)).not.to.throw();\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Zod errors are returned when invalid config is used","suites":["Config Validation"],"updatePoint":{"line":9,"column":57,"index":405},"line":9,"code":"  it('Zod errors are returned when invalid config is used', async () => {\n    const configError = await validateConfig({\n      buildOptions: {\n        sitemap: 42\n      }\n    }, process.cwd()).catch(err => err);\n    expect(configError instanceof z.ZodError).to.equal(true);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"errors when an older markdownOptions format is used","suites":["Config Validation"],"updatePoint":{"line":17,"column":57,"index":685},"line":17,"code":"  it('errors when an older markdownOptions format is used', async () => {\n    const configError = await validateConfig({\n      markdownOptions: {\n        rehypePlugins: ['rehype-autolink-headings']\n      }\n    }, process.cwd()).catch(err => err);\n    expect(configError instanceof z.ZodError).to.equal(true);\n    expect(configError.issues[0].message).to.equal(\"Unrecognized key(s) in object: 'rehypePlugins'\");\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"A validation error can be formatted correctly","suites":["Config Validation"],"updatePoint":{"line":26,"column":51,"index":1096},"line":26,"code":"  it('A validation error can be formatted correctly', async () => {\n    const configError = await validateConfig({\n      buildOptions: {\n        sitemap: 42\n      }\n    }, process.cwd()).catch(err => err);\n    expect(configError instanceof z.ZodError).to.equal(true);\n    const formattedError = stripAnsi(formatConfigError(configError));\n    expect(formattedError).to.equal(`[config] Astro found issue(s) with your configuration:\n  ! buildOptions.sitemap  Expected boolean, received number.`);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Multiple validation errors can be formatted correctly","suites":["Config Validation"],"updatePoint":{"line":37,"column":59,"index":1604},"line":37,"code":"  it('Multiple validation errors can be formatted correctly', async () => {\n    const veryBadConfig = {\n      renderers: [42],\n      buildOptions: {\n        pageUrlFormat: 'invalid'\n      },\n      pages: {}\n    };\n    const configError = await validateConfig(veryBadConfig, process.cwd()).catch(err => err);\n    expect(configError instanceof z.ZodError).to.equal(true);\n    const formattedError = stripAnsi(formatConfigError(configError));\n    expect(formattedError).to.equal(`[config] Astro found issue(s) with your configuration:\n  ! pages  Expected string, received object.\n  ! renderers.0  Expected string, received number.\n  ! buildOptions.pageUrlFormat  Invalid input.`);\n  });","file":"config-validate.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be specified in astro.config.mjs","suites":["config","hostname"],"updatePoint":{"line":15,"column":44,"index":490},"line":15,"code":"    it('can be specified in astro.config.mjs', async () => {\n      expect(hostnameFixture.config.devOptions.hostname).to.equal('0.0.0.0');\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be specified via --hostname flag","suites":["config","hostname"],"updatePoint":{"line":18,"column":44,"index":637},"line":18,"code":"    it('can be specified via --hostname flag', async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const proc = cli('dev', '--project-root', fileURLToPath(projectRootURL), '--hostname', '127.0.0.1');\n      let stdout = '';\n\n      for await (const chunk of proc.stdout) {\n        stdout += chunk;\n        if (chunk.includes('Local:')) break;\n      }\n\n      proc.kill();\n      expect(stdout).to.include('127.0.0.1');\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be passed via --config","suites":["config","path"],"updatePoint":{"line":33,"column":34,"index":1133},"line":33,"code":"    it('can be passed via --config', async () => {\n      const projectRootURL = new URL('./fixtures/astro-basic/', import.meta.url);\n      const configFileURL = new URL('./fixtures/config-path/config/my-config.mjs', import.meta.url);\n      const proc = cli('dev', '--project-root', fileURLToPath(projectRootURL), '--config', configFileURL.pathname);\n      let stdout = '';\n\n      for await (const chunk of proc.stdout) {\n        stdout += chunk;\n        if (chunk.includes('Local:')) break;\n      }\n\n      proc.kill();\n      expect(stdout).to.include('127.0.0.1');\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can be specified in astro.config.mjs","suites":["config","port"],"updatePoint":{"line":49,"column":44,"index":1749},"line":49,"code":"    it('can be specified in astro.config.mjs', async () => {\n      expect(portFixture.config.devOptions.port).to.deep.equal(5006);\n    });","file":"config.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Work as constructors","suites":["Custom Elements"],"updatePoint":{"line":13,"column":26,"index":394},"line":13,"code":"  it('Work as constructors', async () => {\n    const html = await fixture.readFile('/ctr/index.html');\n    const $ = cheerio.load(html); // test 1: Element rendered\n\n    expect($('my-element')).to.have.lengthOf(1); // test 2: shadow rendererd\n\n    expect($('my-element template[shadowroot=open]')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with exported tagName","suites":["Custom Elements"],"updatePoint":{"line":21,"column":33,"index":726},"line":21,"code":"  it('Works with exported tagName', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html); // test 1: Element rendered\n\n    expect($('my-element')).to.have.lengthOf(1); // test 2: shadow rendered\n\n    expect($('my-element template[shadowroot=open]')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Hydration works with exported tagName","suites":["Custom Elements"],"updatePoint":{"line":29,"column":43,"index":1063},"line":29,"code":"  it('Hydration works with exported tagName', async () => {\n    const html = await fixture.readFile('/load/index.html');\n    const $ = cheerio.load(html); // SSR\n    // test 1: Element rendered\n\n    expect($('my-element')).to.have.lengthOf(1); // test 2: shadow rendered\n\n    expect($('my-element template[shadowroot=open]')).to.have.lengthOf(1); // Hydration\n    // test 3: Component and polyfill scripts bundled together\n\n    expect($('script[type=module]')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Polyfills are added even if not hydrating","suites":["Custom Elements"],"updatePoint":{"line":41,"column":47,"index":1555},"line":41,"code":"  it('Polyfills are added even if not hydrating', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('script[type=module]')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Custom elements not claimed by renderer are rendered as regular HTML","suites":["Custom Elements"],"updatePoint":{"line":46,"column":74,"index":1800},"line":46,"code":"  it('Custom elements not claimed by renderer are rendered as regular HTML', async () => {\n    const html = await fixture.readFile('/nossr/index.html');\n    const $ = cheerio.load(html); // test 1: Rendered the client-only element\n\n    expect($('client-element')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can import a client-only element that is nested in JSX","suites":["Custom Elements"],"updatePoint":{"line":52,"column":60,"index":2077},"line":52,"code":"  it('Can import a client-only element that is nested in JSX', async () => {\n    const html = await fixture.readFile('/nested/index.html');\n    const $ = cheerio.load(html); // test 1: Element rendered\n\n    expect($('client-only-element')).to.have.lengthOf(1);\n  });","file":"custom-elements.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works in markdown pages","suites":["<Debug />"],"updatePoint":{"line":23,"column":29,"index":632},"line":23,"code":"  it('Works in markdown pages', async () => {\n    const response = await fixture.fetch('/posts/first');\n    expect(response.status).to.equal(200);\n  });","file":"debug-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /","suites":["Development Routing","No site config"],"updatePoint":{"line":20,"column":26,"index":613},"line":20,"code":"    it('200 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when adding search params","suites":["Development Routing","No site config"],"updatePoint":{"line":24,"column":37,"index":769},"line":24,"code":"    it('200 when adding search params', async () => {\n      const response = await fixture.fetch('/?foo=bar');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading non-root page","suites":["Development Routing","No site config"],"updatePoint":{"line":28,"column":38,"index":934},"line":28,"code":"    it('200 when loading non-root page', async () => {\n      const response = await fixture.fetch('/another');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Development Routing","No site config"],"updatePoint":{"line":32,"column":38,"index":1098},"line":32,"code":"    it('200 when loading dynamic route', async () => {\n      const response = await fixture.fetch('/1');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"500 when loading invalid dynamic route","suites":["Development Routing","No site config"],"updatePoint":{"line":36,"column":46,"index":1264},"line":36,"code":"    it('500 when loading invalid dynamic route', async () => {\n      const response = await fixture.fetch('/2');\n      expect(response.status).to.equal(500);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /","suites":["Development Routing","No subpath used"],"updatePoint":{"line":56,"column":26,"index":1850},"line":56,"code":"    it('200 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading non-root page","suites":["Development Routing","No subpath used"],"updatePoint":{"line":60,"column":38,"index":2007},"line":60,"code":"    it('200 when loading non-root page', async () => {\n      const response = await fixture.fetch('/another');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Development Routing","No subpath used"],"updatePoint":{"line":64,"column":38,"index":2171},"line":64,"code":"    it('200 when loading dynamic route', async () => {\n      const response = await fixture.fetch('/1');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"500 when loading invalid dynamic route","suites":["Development Routing","No subpath used"],"updatePoint":{"line":68,"column":46,"index":2337},"line":68,"code":"    it('500 when loading invalid dynamic route', async () => {\n      const response = await fixture.fetch('/2');\n      expect(response.status).to.equal(500);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":88,"column":26,"index":2947},"line":88,"code":"    it('404 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":92,"column":37,"index":3103},"line":92,"code":"    it('200 when loading subpath root', async () => {\n      const response = await fixture.fetch('/blog/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":96,"column":60,"index":3287},"line":96,"code":"    it('404 when loading subpath root without trailing slash', async () => {\n      const response = await fixture.fetch('/blog');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":100,"column":55,"index":3465},"line":100,"code":"    it('200 when loading another page with subpath used', async () => {\n      const response = await fixture.fetch('/blog/another/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":104,"column":38,"index":3635},"line":104,"code":"    it('200 when loading dynamic route', async () => {\n      const response = await fixture.fetch('/blog/1/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"500 when loading invalid dynamic route","suites":["Development Routing","Subpath with trailing slash"],"updatePoint":{"line":108,"column":46,"index":3807},"line":108,"code":"    it('500 when loading invalid dynamic route', async () => {\n      const response = await fixture.fetch('/blog/2/');\n      expect(response.status).to.equal(500);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":128,"column":26,"index":4429},"line":128,"code":"    it('404 when loading /', async () => {\n      const response = await fixture.fetch('/');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":132,"column":57,"index":4605},"line":132,"code":"    it('200 when loading subpath root with trailing slash', async () => {\n      const response = await fixture.fetch('/blog/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":136,"column":60,"index":4789},"line":136,"code":"    it('404 when loading subpath root without trailing slash', async () => {\n      const response = await fixture.fetch('/blog');\n      expect(response.status).to.equal(404);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":140,"column":55,"index":4967},"line":140,"code":"    it('200 when loading another page with subpath used', async () => {\n      const response = await fixture.fetch('/blog/another/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":144,"column":38,"index":5137},"line":144,"code":"    it('200 when loading dynamic route', async () => {\n      const response = await fixture.fetch('/blog/1/');\n      expect(response.status).to.equal(200);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"500 when loading invalid dynamic route","suites":["Development Routing","Subpath without trailing slash"],"updatePoint":{"line":148,"column":46,"index":5309},"line":148,"code":"    it('500 when loading invalid dynamic route', async () => {\n      const response = await fixture.fetch('/blog/2/');\n      expect(response.status).to.equal(500);\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /home.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":168,"column":35,"index":5915},"line":168,"code":"    it('200 when loading /home.json', async () => {\n      const response = await fixture.fetch('/home.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.title).to.equal('home');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /thing1.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":174,"column":37,"index":6196},"line":174,"code":"    it('200 when loading /thing1.json', async () => {\n      const response = await fixture.fetch('/thing1.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.slug).to.equal('thing1');\n      expect(body.title).to.equal('[slug]');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /thing2.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":181,"column":37,"index":6525},"line":181,"code":"    it('200 when loading /thing2.json', async () => {\n      const response = await fixture.fetch('/thing2.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.slug).to.equal('thing2');\n      expect(body.title).to.equal('[slug]');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /data/thing3.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":188,"column":42,"index":6859},"line":188,"code":"    it('200 when loading /data/thing3.json', async () => {\n      const response = await fixture.fetch('/data/thing3.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.slug).to.equal('thing3');\n      expect(body.title).to.equal('data [slug]');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading /data/thing4.json","suites":["Development Routing","Endpoint routes"],"updatePoint":{"line":195,"column":42,"index":7203},"line":195,"code":"    it('200 when loading /data/thing4.json', async () => {\n      const response = await fixture.fetch('/data/thing4.json');\n      expect(response.status).to.equal(200);\n      const body = await response.text().then(text => JSON.parse(text));\n      expect(body.slug).to.equal('thing4');\n      expect(body.title).to.equal('data [slug]');\n    });","file":"dev-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"syntax error in template","suites":["Error display","Astro"],"updatePoint":{"line":22,"column":32,"index":712},"line":22,"code":"    it('syntax error in template', async () => {\n      const res = await fixture.fetch('/astro-syntax-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Unexpected &quot;}&quot;');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"syntax error in frontmatter","suites":["Error display","Astro"],"updatePoint":{"line":28,"column":35,"index":970},"line":28,"code":"    it('syntax error in frontmatter', async () => {\n      const res = await fixture.fetch('/astro-frontmatter-syntax-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Unexpected end of frontmatter');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"runtime error","suites":["Error display","Astro"],"updatePoint":{"line":34,"column":21,"index":1231},"line":34,"code":"    it('runtime error', async () => {\n      const res = await fixture.fetch('/astro-runtime-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('ReferenceError: title is not defined'); // TODO: improve and test stacktrace\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"hydration error","suites":["Error display","Astro"],"updatePoint":{"line":40,"column":23,"index":1527},"line":40,"code":"    it('hydration error', async () => {\n      const res = await fixture.fetch('/astro-hydration-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Error: invalid hydration directive');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"client:media error","suites":["Error display","Astro"],"updatePoint":{"line":46,"column":26,"index":1789},"line":46,"code":"    it('client:media error', async () => {\n      const res = await fixture.fetch('/astro-client-media-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Error: Media query must be provided');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"syntax error","suites":["Error display","JS"],"updatePoint":{"line":54,"column":20,"index":2080},"line":54,"code":"    it('syntax error', async () => {\n      const res = await fixture.fetch('/js-syntax-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Parse failure');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"runtime error","suites":["Error display","JS"],"updatePoint":{"line":60,"column":21,"index":2310},"line":60,"code":"    it('runtime error', async () => {\n      const res = await fixture.fetch('/js-runtime-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('ReferenceError: undefinedvar is not defined');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"syntax error","suites":["Error display","Preact"],"updatePoint":{"line":68,"column":20,"index":2605},"line":68,"code":"    it('syntax error', async () => {\n      const res = await fixture.fetch('/preact-syntax-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Syntax error');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"runtime error","suites":["Error display","Preact"],"updatePoint":{"line":74,"column":21,"index":2838},"line":74,"code":"    it('runtime error', async () => {\n      const res = await fixture.fetch('/preact-runtime-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Error: PreactRuntimeError');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"syntax error","suites":["Error display","React"],"updatePoint":{"line":82,"column":20,"index":3118},"line":82,"code":"    it('syntax error', async () => {\n      const res = await fixture.fetch('/react-syntax-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Syntax error');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"runtime error","suites":["Error display","React"],"updatePoint":{"line":88,"column":21,"index":3350},"line":88,"code":"    it('runtime error', async () => {\n      const res = await fixture.fetch('/react-runtime-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Error: ReactRuntimeError');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"syntax error","suites":["Error display","Solid"],"updatePoint":{"line":96,"column":20,"index":3628},"line":96,"code":"    it('syntax error', async () => {\n      const res = await fixture.fetch('/solid-syntax-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Syntax error');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"runtime error","suites":["Error display","Solid"],"updatePoint":{"line":102,"column":21,"index":3860},"line":102,"code":"    it('runtime error', async () => {\n      const res = await fixture.fetch('/solid-runtime-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Error: SolidRuntimeError');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"syntax error","suites":["Error display","Svelte"],"updatePoint":{"line":110,"column":20,"index":4139},"line":110,"code":"    it('syntax error', async () => {\n      const res = await fixture.fetch('/svelte-syntax-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Internal Error');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"runtime error","suites":["Error display","Svelte"],"updatePoint":{"line":116,"column":21,"index":4374},"line":116,"code":"    it('runtime error', async () => {\n      const res = await fixture.fetch('/svelte-runtime-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.include('Error: SvelteRuntimeError');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"syntax error","suites":["Error display","Vue"],"updatePoint":{"line":124,"column":20,"index":4652},"line":124,"code":"    it('syntax error', async () => {\n      const res = await fixture.fetch('/vue-syntax-error');\n      const body = await res.text();\n      expect(res.status).to.equal(500);\n      expect(body).to.include('Parse failure');\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"runtime error","suites":["Error display","Vue"],"updatePoint":{"line":130,"column":21,"index":4883},"line":130,"code":"    it('runtime error', async () => {\n      const res = await fixture.fetch('/vue-runtime-error');\n      expect(res.status).to.equal(500);\n      const body = await res.text();\n      expect(body).to.match(/Cannot read.*undefined/); // note: error differs slightly between Node versions\n    });","file":"errors.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is available in Astro pages","suites":["Global Fetch"],"updatePoint":{"line":12,"column":33,"index":328},"line":12,"code":"  it('Is available in Astro pages', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#astro-page').text()).to.equal('function', 'Fetch supported in .astro page');\n  });","file":"fetch.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is available in Astro components","suites":["Global Fetch"],"updatePoint":{"line":17,"column":38,"index":571},"line":17,"code":"  it('Is available in Astro components', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#astro-component').text()).to.equal('function', 'Fetch supported in .astro components');\n  });","file":"fetch.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is available in non-Astro components","suites":["Global Fetch"],"updatePoint":{"line":22,"column":42,"index":829},"line":22,"code":"  it('Is available in non-Astro components', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#jsx').text()).to.equal('function', 'Fetch supported in .jsx');\n    expect($('#svelte').text()).to.equal('function', 'Fetch supported in .svelte');\n    expect($('#vue').text()).to.equal('function', 'Fetch supported in .vue');\n  });","file":"fetch.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Respects existing code","suites":["Global Fetch"],"updatePoint":{"line":29,"column":28,"index":1210},"line":29,"code":"  it('Respects existing code', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#already-imported').text()).to.equal('function', 'Existing fetch imports respected');\n    expect($('#custom-declaration').text()).to.equal('number', 'Custom fetch declarations respected');\n  });","file":"fetch.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders a custom element by tag name","suites":["LitElement test"],"updatePoint":{"line":23,"column":42,"index":664},"line":23,"code":"  it('Renders a custom element by tag name', async () => {\n    // @lit-labs/ssr/ requires Node 13.9 or higher\n    if (NODE_VERSION < 13.9) {\n      return;\n    }\n\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html); // test 1: attributes rendered – non reactive properties\n\n    expect($('my-element').attr('foo')).to.equal('bar'); // test 2: shadow rendered\n\n    expect($('my-element').html()).to.include(`<div>Testing...</div>`); // test 3: string reactive property set\n\n    expect(stripExpressionMarkers($('my-element').html())).to.include(`<div id=\"str\">initialized</div>`); // test 4: boolean reactive property correctly set\n    // <my-element bool=\"false\"> Lit will equate to true because it uses\n    // this.hasAttribute to determine its value\n\n    expect(stripExpressionMarkers($('my-element').html())).to.include(`<div id=\"bool\">B</div>`); // test 5: object reactive property set\n    // by default objects will be stringifed to [object Object]\n\n    expect(stripExpressionMarkers($('my-element').html())).to.include(`<div id=\"data\">data: 1</div>`); // test 6: reactive properties are not rendered as attributes\n\n    expect($('my-element').attr('obj')).to.equal(undefined);\n    expect($('my-element').attr('bool')).to.equal(undefined);\n    expect($('my-element').attr('str')).to.equal(undefined); // test 7: reflected reactive props are rendered as attributes\n\n    expect($('my-element').attr('reflectedbool')).to.equal('');\n    expect($('my-element').attr('reflected-str')).to.equal('default reflected string');\n    expect($('my-element').attr('reflected-str-prop')).to.equal('initialized reflected');\n  }); // Skipped because not supported by Lit","file":"lit-element.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders a custom element by the constructor","suites":["LitElement test"],"line":54,"code":"  it.skip('Renders a custom element by the constructor', async () => {","file":"lit-element.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Can load a simple markdown page with Astro","suites":["Markdown tests"],"updatePoint":{"line":16,"column":48,"index":449},"line":16,"code":"  it('Can load a simple markdown page with Astro', async () => {\n    const html = await fixture.readFile('/post/index.html');\n    const $ = cheerio.load(html);\n    expect($('p').first().text()).to.equal('Hello world!');\n    expect($('#first').text()).to.equal('Some content');\n    expect($('#interesting-topic').text()).to.equal('Interesting Topic');\n  });","file":"markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load a realworld markdown page with Astro","suites":["Markdown tests"],"updatePoint":{"line":23,"column":51,"index":809},"line":23,"code":"  it('Can load a realworld markdown page with Astro', async () => {\n    const html = await fixture.readFile('/realworld/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre')).to.have.lengthOf(7);\n  });","file":"markdown.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in Astro page styles","suites":["PostCSS"],"updatePoint":{"line":21,"column":32,"index":837},"line":21,"code":"  it('works in Astro page styles', () => {\n    expect(bundledCSS).to.match(new RegExp(`.astro-page.astro-[^{]+${PREFIXED_CSS}`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in Astro component styles","suites":["PostCSS"],"updatePoint":{"line":24,"column":37,"index":978},"line":24,"code":"  it('works in Astro component styles', () => {\n    expect(bundledCSS).to.match(new RegExp(`.astro-component.astro-[^{]+${PREFIXED_CSS}`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in <link>","suites":["PostCSS"],"updatePoint":{"line":27,"column":21,"index":1108},"line":27,"code":"  it('works in <link>', () => {\n    expect(bundledCSS).to.match(new RegExp(`.a-n${PREFIXED_CSS}`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in JSX","suites":["PostCSS"],"updatePoint":{"line":30,"column":18,"index":1211},"line":30,"code":"  it('works in JSX', () => {\n    expect(bundledCSS).to.match(new RegExp(`.solid${PREFIXED_CSS}`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in Vue","suites":["PostCSS"],"updatePoint":{"line":33,"column":18,"index":1316},"line":33,"code":"  it('works in Vue', () => {\n    expect(bundledCSS).to.match(new RegExp(`.vue${PREFIXED_CSS}`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"works in Svelte","suites":["PostCSS"],"updatePoint":{"line":36,"column":21,"index":1422},"line":36,"code":"  it('works in Svelte', () => {\n    expect(bundledCSS).to.match(new RegExp(`.svelte.s[^{]+${PREFIXED_CSS}`));\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"ignores CSS in public/","suites":["PostCSS"],"updatePoint":{"line":39,"column":28,"index":1545},"line":39,"code":"  it('ignores CSS in public/', async () => {\n    const publicCSS = await fixture.readFile('/global.css'); // neither minified nor prefixed\n\n    expect(eol.lf(publicCSS.trim())).to.equal(`.global {\\n  appearance: none;\\n}`);\n  });","file":"postcss.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load class component","suites":["Preact component"],"updatePoint":{"line":16,"column":30,"index":435},"line":16,"code":"  it('Can load class component', async () => {\n    const html = await fixture.readFile('/class/index.html');\n    const $ = cheerio.load(html); // test 1: Can use class components\n\n    expect($('#class-component')).to.have.lengthOf(1);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load function component","suites":["Preact component"],"updatePoint":{"line":22,"column":33,"index":679},"line":22,"code":"  it('Can load function component', async () => {\n    const html = await fixture.readFile('/fn/index.html');\n    const $ = cheerio.load(html); // test 1: Can use function components\n\n    expect($('#fn-component')).to.have.lengthOf(1); // test 2: Can use function components\n\n    expect($('#arrow-fn-component')).to.have.lengthOf(1);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load TS component","suites":["Preact component"],"updatePoint":{"line":30,"column":27,"index":1012},"line":30,"code":"  it('Can load TS component', async () => {\n    const html = await fixture.readFile('/ts-components/index.html');\n    const $ = cheerio.load(html); // test 1: Can use TS components\n\n    expect($('.ts-component')).to.have.lengthOf(1);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can use hooks","suites":["Preact component"],"updatePoint":{"line":36,"column":19,"index":1244},"line":36,"code":"  it('Can use hooks', async () => {\n    const html = await fixture.readFile('/hooks/index.html');\n    const $ = cheerio.load(html);\n    expect($('#world')).to.have.lengthOf(1);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can export a Fragment","suites":["Preact component"],"updatePoint":{"line":41,"column":27,"index":1435},"line":41,"code":"  it('Can export a Fragment', async () => {\n    const html = await fixture.readFile('/frag/index.html');\n    const $ = cheerio.load(html); // test 1: nothing rendered but it didn’t throw\n\n    expect($('body').children()).to.have.lengthOf(0);\n  });","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can use a pragma comment","suites":["Preact component"],"updatePoint":{"line":47,"column":30,"index":1686},"line":47,"code":"  it('Can use a pragma comment', async () => {\n    const html = await fixture.readFile('/pragma-comment/index.html');\n    const $ = cheerio.load(html); // test 1: rendered the PragmaComment component\n\n    expect($('.pragma-comment')).to.have.lengthOf(1);\n    expect($('.pragma-comment-tsx')).to.have.lengthOf(1);\n  }); // In moving over to Vite, the jsx-runtime import is now obscured. TODO: update the method of finding this.","file":"preact-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Uses the new JSX transform","suites":["Preact component"],"line":55,"code":"  it.skip('Uses the new JSX transform', async () => {","file":"preact-component.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":25,"column":28,"index":847},"line":25,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":29,"column":59,"index":1031},"line":29,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n        expect(response.redirected).to.equal(false);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":34,"column":62,"index":1276},"line":34,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading another page with subpath used","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":38,"column":57,"index":1462},"line":38,"code":"      it('404 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":42,"column":40,"index":1640},"line":42,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":46,"column":48,"index":1819},"line":46,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":71,"column":28,"index":2645},"line":71,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":75,"column":59,"index":2829},"line":75,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":79,"column":62,"index":3021},"line":79,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":83,"column":57,"index":3207},"line":83,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading another page with subpath not used","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":87,"column":61,"index":3406},"line":87,"code":"      it('404 when loading another page with subpath not used', async () => {\n        const response = await fixture.fetch('/blog/another');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":91,"column":40,"index":3583},"line":91,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":95,"column":48,"index":3763},"line":95,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":120,"column":28,"index":4590},"line":120,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":124,"column":59,"index":4774},"line":124,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":128,"column":62,"index":4966},"line":128,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":132,"column":57,"index":5152},"line":132,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath not used","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":136,"column":61,"index":5351},"line":136,"code":"      it('200 when loading another page with subpath not used', async () => {\n        const response = await fixture.fetch('/blog/another');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":140,"column":40,"index":5528},"line":140,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","pageUrlFormat: directory","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":144,"column":48,"index":5708},"line":144,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":174,"column":28,"index":6654},"line":174,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":178,"column":59,"index":6838},"line":178,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n        expect(response.redirected).to.equal(false);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":183,"column":62,"index":7083},"line":183,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading another page with subpath used","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":187,"column":57,"index":7269},"line":187,"code":"      it('404 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":191,"column":40,"index":7447},"line":191,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: never"],"updatePoint":{"line":195,"column":48,"index":7626},"line":195,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":223,"column":28,"index":8525},"line":223,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":227,"column":59,"index":8709},"line":227,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":231,"column":62,"index":8901},"line":231,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":235,"column":57,"index":9087},"line":235,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading another page with subpath not used","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":239,"column":61,"index":9286},"line":239,"code":"      it('404 when loading another page with subpath not used', async () => {\n        const response = await fixture.fetch('/blog/another');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":243,"column":40,"index":9463},"line":243,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: always"],"updatePoint":{"line":247,"column":48,"index":9643},"line":247,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":275,"column":28,"index":10543},"line":275,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath root with trailing slash","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":279,"column":59,"index":10727},"line":279,"code":"      it('200 when loading subpath root with trailing slash', async () => {\n        const response = await fixture.fetch('/blog/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading subpath root without trailing slash","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":283,"column":62,"index":10919},"line":283,"code":"      it('404 when loading subpath root without trailing slash', async () => {\n        const response = await fixture.fetch('/blog');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":287,"column":57,"index":11105},"line":287,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath not used","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":291,"column":61,"index":11304},"line":291,"code":"      it('200 when loading another page with subpath not used', async () => {\n        const response = await fixture.fetch('/blog/another');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":295,"column":40,"index":11481},"line":295,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1/');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","pageUrlFormat: file","Subpath without trailing slash and trailingSlash: ignore"],"updatePoint":{"line":299,"column":48,"index":11661},"line":299,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading /","suites":["Preview Routing","pageUrlFormat: file","Exact file path"],"updatePoint":{"line":327,"column":28,"index":12520},"line":327,"code":"      it('404 when loading /', async () => {\n        const response = await fixture.fetch('/');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading subpath with index.html","suites":["Preview Routing","pageUrlFormat: file","Exact file path"],"updatePoint":{"line":331,"column":50,"index":12695},"line":331,"code":"      it('200 when loading subpath with index.html', async () => {\n        const response = await fixture.fetch('/blog/index.html');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading another page with subpath used","suites":["Preview Routing","pageUrlFormat: file","Exact file path"],"updatePoint":{"line":335,"column":57,"index":12892},"line":335,"code":"      it('200 when loading another page with subpath used', async () => {\n        const response = await fixture.fetch('/blog/another.html');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"200 when loading dynamic route","suites":["Preview Routing","pageUrlFormat: file","Exact file path"],"updatePoint":{"line":339,"column":40,"index":13074},"line":339,"code":"      it('200 when loading dynamic route', async () => {\n        const response = await fixture.fetch('/blog/1.html');\n        expect(response.status).to.equal(200);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"404 when loading invalid dynamic route","suites":["Preview Routing","pageUrlFormat: file","Exact file path"],"updatePoint":{"line":343,"column":48,"index":13258},"line":343,"code":"      it('404 when loading invalid dynamic route', async () => {\n        const response = await fixture.fetch('/blog/2.html');\n        expect(response.status).to.equal(404);\n      });","file":"preview-routing.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load React","suites":["React Components","build"],"updatePoint":{"line":19,"column":22,"index":522},"line":19,"code":"    it('Can load React', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html); // test 1: basic component renders\n\n      expect($('#react-h2').text()).to.equal('Hello world!'); // test 2: no reactroot\n\n      expect($('#react-h2').attr('data-reactroot')).to.equal(undefined); // test 3: Can use function components\n\n      expect($('#arrow-fn-component')).to.have.lengthOf(1); // test 4: Can use spread for components\n\n      expect($('#component-spread-props')).to.have.lengthOf(1); // test 5: spread props renders\n\n      expect($('#component-spread-props').text(), 'Hello world!'); // test 6: Can use TS components\n\n      expect($('.ts-component')).to.have.lengthOf(1); // test 7: Can use Pure components\n\n      expect($('#pure')).to.have.lengthOf(1);\n    });","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load Vue","suites":["React Components","build"],"updatePoint":{"line":37,"column":20,"index":1333},"line":37,"code":"    it('Can load Vue', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      expect($('#vue-h2').text()).to.equal('Hasta la vista, baby');\n    });","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can use a pragma comment","suites":["React Components","build"],"updatePoint":{"line":42,"column":32,"index":1552},"line":42,"code":"    it('Can use a pragma comment', async () => {\n      const html = await fixture.readFile('/pragma-comment/index.html');\n      const $ = cheerio.load(html); // test 1: rendered the PragmaComment component\n\n      expect($('.pragma-comment')).to.have.lengthOf(2);\n    }); // TODO: is this still a relevant test?","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Includes reactroot on hydrating components","suites":["React Components","build"],"line":49,"code":"    it.skip('Includes reactroot on hydrating components', async () => {","file":"react-component.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"scripts proxy correctly","suites":["React Components","dev"],"updatePoint":{"line":68,"column":31,"index":2479},"line":68,"code":"    it('scripts proxy correctly', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html);\n\n      for (const script of $('script').toArray()) {\n        const {\n          src\n        } = script.attribs;\n        if (!src) continue;\n        expect((await fixture.fetch(src)).status, `404: ${src}`).to.equal(200);\n      }\n    }); // TODO: move this to separate dev test?","file":"react-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Throws helpful error message on window SSR","suites":["React Components","dev"],"line":81,"code":"    it.skip('Throws helpful error message on window SSR', async () => {","file":"react-component.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"uses the new JSX transform","suites":["React Components","dev"],"line":89,"code":"    it.skip('uses the new JSX transform', async () => {","file":"react-component.test.js","skipped":true,"dir":"packages/astro/test"},{"name":"Includes all styles on the page","suites":["Remote CSS"],"updatePoint":{"line":12,"column":37,"index":335},"line":12,"code":"  it('Includes all styles on the page', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    const relPath = $('link').attr('href');\n    const css = await fixture.readFile('/' + relPath);\n    expect(css).to.match(/https:\\/\\/unpkg.com\\/open-props/);\n    expect(css).to.match(/body/);\n  });","file":"remote-css.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"creates routes with trailingSlashes = always","suites":["route manifest"],"updatePoint":{"line":27,"column":50,"index":633},"line":27,"code":"  it('creates routes with trailingSlashes = always', () => {\n    const {\n      routes\n    } = create('basic', 'always');\n    expect(cleanRoutes(routes)).to.deep.equal([{\n      type: 'page',\n      pattern: /^\\/$/,\n      params: [],\n      component: 'basic/index.astro',\n      pathname: '/'\n    }, {\n      type: 'page',\n      pattern: /^\\/about\\/$/,\n      params: [],\n      component: 'basic/about.astro',\n      pathname: '/about'\n    }, {\n      type: 'page',\n      pattern: /^\\/blog\\/$/,\n      params: [],\n      component: 'basic/blog/index.astro',\n      pathname: '/blog'\n    }, {\n      type: 'page',\n      pattern: /^\\/blog\\/([^/]+?)\\/$/,\n      params: ['slug'],\n      component: 'basic/blog/[slug].astro',\n      pathname: undefined\n    }]);\n  });","file":"route-manifest.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"creates routes with trailingSlashes = never","suites":["route manifest"],"updatePoint":{"line":57,"column":49,"index":1381},"line":57,"code":"  it('creates routes with trailingSlashes = never', () => {\n    const {\n      routes\n    } = create('basic', 'never');\n    expect(cleanRoutes(routes)).to.deep.equal([{\n      type: 'page',\n      pattern: /^\\/$/,\n      params: [],\n      component: 'basic/index.astro',\n      pathname: '/'\n    }, {\n      type: 'page',\n      pattern: /^\\/about$/,\n      params: [],\n      component: 'basic/about.astro',\n      pathname: '/about'\n    }, {\n      type: 'page',\n      pattern: /^\\/blog$/,\n      params: [],\n      component: 'basic/blog/index.astro',\n      pathname: '/blog'\n    }, {\n      type: 'page',\n      pattern: /^\\/blog\\/([^/]+?)$/,\n      params: ['slug'],\n      component: 'basic/blog/[slug].astro',\n      pathname: undefined\n    }]);\n  });","file":"route-manifest.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"creates routes with trailingSlashes = ignore","suites":["route manifest"],"updatePoint":{"line":87,"column":50,"index":2123},"line":87,"code":"  it('creates routes with trailingSlashes = ignore', () => {\n    const {\n      routes\n    } = create('basic', 'ignore');\n    expect(cleanRoutes(routes)).to.deep.equal([{\n      type: 'page',\n      pattern: /^\\/$/,\n      params: [],\n      component: 'basic/index.astro',\n      pathname: '/'\n    }, {\n      type: 'page',\n      pattern: /^\\/about\\/?$/,\n      params: [],\n      component: 'basic/about.astro',\n      pathname: '/about'\n    }, {\n      type: 'page',\n      pattern: /^\\/blog\\/?$/,\n      params: [],\n      component: 'basic/blog/index.astro',\n      pathname: '/blog'\n    }, {\n      type: 'page',\n      pattern: /^\\/blog\\/([^/]+?)\\/?$/,\n      params: ['slug'],\n      component: 'basic/blog/[slug].astro',\n      pathname: undefined\n    }]);\n  });","file":"route-manifest.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"encodes invalid characters","suites":["route manifest"],"updatePoint":{"line":117,"column":32,"index":2857},"line":117,"code":"  it('encodes invalid characters', () => {\n    const {\n      routes\n    } = create('encoding', 'always'); // had to remove ? and \" because windows\n    // const quote = 'encoding/\".astro';\n\n    const hash = 'encoding/#.astro'; // const question_mark = 'encoding/?.astro';\n\n    expect(routes.map(p => p.pattern)).to.deep.equal([// /^\\/%22$/,\n    /^\\/%23\\/$/ // /^\\/%3F$/\n    ]);\n  });","file":"route-manifest.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"ignores files and directories with leading underscores","suites":["route manifest"],"updatePoint":{"line":129,"column":60,"index":3268},"line":129,"code":"  it('ignores files and directories with leading underscores', () => {\n    const {\n      routes\n    } = create('hidden-underscore', 'always');\n    expect(routes.map(r => r.component).filter(Boolean)).to.deep.equal(['hidden-underscore/index.astro', 'hidden-underscore/e/f/g/h.astro']);\n  });","file":"route-manifest.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"ignores files and directories with leading dots except .well-known","suites":["route manifest"],"updatePoint":{"line":135,"column":72,"index":3571},"line":135,"code":"  it('ignores files and directories with leading dots except .well-known', () => {\n    const {\n      routes\n    } = create('hidden-dot', 'always');\n    expect(routes.map(r => r.component).filter(Boolean)).to.deep.equal(['hidden-dot/.well-known/dnt-policy.astro']);\n  });","file":"route-manifest.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"fails if dynamic params are not separated","suites":["route manifest"],"updatePoint":{"line":141,"column":47,"index":3817},"line":141,"code":"  it('fails if dynamic params are not separated', () => {\n    expect(() => create('invalid-params', 'always')).to.throw('Invalid route invalid-params/[foo][bar].astro — parameters must be separated');\n  });","file":"route-manifest.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"disallows rest parameters inside segments","suites":["route manifest"],"updatePoint":{"line":144,"column":47,"index":4024},"line":144,"code":"  it('disallows rest parameters inside segments', () => {\n    expect(() => create('invalid-rest', 'always')).to.throw('Invalid route invalid-rest/foo-[...rest]-bar.astro — rest parameter must be a standalone segment');\n  });","file":"route-manifest.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"ignores things that look like lockfiles","suites":["route manifest"],"updatePoint":{"line":147,"column":45,"index":4247},"line":147,"code":"  it('ignores things that look like lockfiles', () => {\n    const {\n      routes\n    } = create('lockfiles', 'always');\n    expect(cleanRoutes(routes)).to.deep.equal([{\n      type: 'page',\n      pattern: /^\\/foo\\/$/,\n      params: [],\n      component: 'lockfiles/foo.astro',\n      pathname: '/foo'\n    }]);\n  });","file":"route-manifest.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"ignores invalid route extensions","suites":["route manifest"],"updatePoint":{"line":159,"column":38,"index":4553},"line":159,"code":"  it('ignores invalid route extensions', () => {\n    const {\n      routes\n    } = create('invalid-extension', 'always');\n    expect(cleanRoutes(routes)).to.deep.equal([{\n      type: 'page',\n      pattern: /^\\/$/,\n      params: [],\n      component: 'invalid-extension/index.astro',\n      pathname: '/'\n    }, {\n      type: 'page',\n      pattern: /^\\/about\\/$/,\n      params: [],\n      component: 'invalid-extension/about.astro',\n      pathname: '/about'\n    }]);\n  });","file":"route-manifest.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"allows multiple slugs","suites":["route manifest"],"updatePoint":{"line":177,"column":27,"index":5010},"line":177,"code":"  it('allows multiple slugs', () => {\n    const {\n      routes\n    } = create('multiple-slugs', 'always');\n    expect(cleanRoutes(routes)).to.deep.equal([{\n      type: 'page',\n      pattern: /^\\/([^/]+?)\\.([^/]+?)\\/$/,\n      component: 'multiple-slugs/[file].[ext].astro',\n      params: ['file', 'ext'],\n      pathname: undefined\n    }]);\n  });","file":"route-manifest.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"sorts routes correctly","suites":["route manifest"],"updatePoint":{"line":189,"column":28,"index":5356},"line":189,"code":"  it('sorts routes correctly', () => {\n    const {\n      routes\n    } = create('sorting', 'always');\n    expect(routes.map(p => p.component)).to.deep.equal(['sorting/index.astro', 'sorting/about.astro', 'sorting/post/index.astro', 'sorting/post/bar.astro', 'sorting/post/foo.astro', 'sorting/post/f[xx].astro', 'sorting/post/f[yy].astro', 'sorting/post/[id].astro', 'sorting/[wildcard].astro', 'sorting/[...rest]/deep/[...deep_rest]/xyz.astro', 'sorting/[...rest]/deep/[...deep_rest]/index.astro', 'sorting/[...rest]/deep/index.astro', 'sorting/[...rest]/abc.astro', 'sorting/[...rest]/index.astro']);\n  });","file":"route-manifest.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Preact"],"updatePoint":{"line":13,"column":26,"index":376},"line":13,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-preact.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: React"],"updatePoint":{"line":13,"column":26,"index":373},"line":13,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-react.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Solid"],"updatePoint":{"line":13,"column":26,"index":373},"line":13,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-solid.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Svelte"],"updatePoint":{"line":13,"column":26,"index":376},"line":13,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-svelte.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Renders default slot","suites":["Slots: Vue"],"updatePoint":{"line":13,"column":26,"index":367},"line":13,"code":"  it('Renders default slot', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('#default-self-closing').text().trim()).to.equal('Fallback');\n    expect($('#default-empty').text().trim()).to.equal('Fallback');\n    expect($('#zero').text().trim()).to.equal('0');\n    expect($('#false').text().trim()).to.equal('');\n    expect($('#string').text().trim()).to.equal('');\n    expect($('#content').text().trim()).to.equal('Hello world!');\n  });","file":"slots-vue.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load a component","suites":["Solid component","build"],"updatePoint":{"line":19,"column":28,"index":504},"line":19,"code":"    it('Can load a component', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html); // test 1: Works\n\n      expect($('.hello')).to.have.lengthOf(1);\n    });","file":"solid-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"scripts proxy correctly","suites":["Solid component","dev"],"updatePoint":{"line":35,"column":31,"index":946},"line":35,"code":"    it('scripts proxy correctly', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html);\n\n      for (const script of $('script').toArray()) {\n        const {\n          src\n        } = script.attribs;\n        if (!src) continue;\n        expect((await fixture.fetch(src)).status, `404: ${src}`).to.equal(200);\n      }\n    });","file":"solid-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is able to build successfully","suites":["Code component inside static build"],"updatePoint":{"line":16,"column":35,"index":464},"line":16,"code":"  it('Is able to build successfully', async () => {\n    const html = await fixture.readFile('/index.html');\n    const $ = cheerio.load(html);\n    expect($('pre').length, 1, 'pre tag loaded');\n  });","file":"static-build-code-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build preact","suites":["Static build - frameworks"],"updatePoint":{"line":20,"column":22,"index":563},"line":20,"code":"  it('can build preact', async () => {\n    const html = await fixture.readFile('/preact/index.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build-frameworks.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build react","suites":["Static build - frameworks"],"updatePoint":{"line":24,"column":21,"index":706},"line":24,"code":"  it('can build react', async () => {\n    const html = await fixture.readFile('/react/index.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build-frameworks.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build lit","suites":["Static build - frameworks"],"updatePoint":{"line":28,"column":19,"index":846},"line":28,"code":"  it('can build lit', async () => {\n    const html = await fixture.readFile('/lit/index.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build-frameworks.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build nested framework usage","suites":["Static build - frameworks"],"updatePoint":{"line":32,"column":38,"index":1003},"line":32,"code":"  it('can build nested framework usage', async () => {\n    const html = await fixture.readFile('/nested/index.html');\n    const $ = cheerio.load(html);\n    const counter = $('.nested-counter .counter');\n    expect(counter.length).to.equal(1, 'Found the counter');\n  });","file":"static-build-frameworks.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds pages in root","suites":["Static build - pageUrlFormat: 'file'"],"updatePoint":{"line":23,"column":26,"index":622},"line":23,"code":"  it('Builds pages in root', async () => {\n    const html = await fixture.readFile('/subpath/one.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build-page-url-format.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds pages in subfolders","suites":["Static build - pageUrlFormat: 'file'"],"updatePoint":{"line":27,"column":32,"index":775},"line":27,"code":"  it('Builds pages in subfolders', async () => {\n    const html = await fixture.readFile('/subpath/sub/page.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build-page-url-format.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out .astro pages","suites":["Static build"],"updatePoint":{"line":25,"column":29,"index":657},"line":25,"code":"  it('Builds out .astro pages', async () => {\n    const html = await fixture.readFile('/subpath/index.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"can build pages using fetchContent","suites":["Static build"],"updatePoint":{"line":29,"column":40,"index":820},"line":29,"code":"  it('can build pages using fetchContent', async () => {\n    const html = await fixture.readFile('/subpath/index.html');\n    const $ = cheerio.load(html);\n    const link = $('.posts a');\n    const href = link.attr('href');\n    expect(href).to.be.equal('/subpath/posts/thoughts');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out .md pages","suites":["Static build"],"updatePoint":{"line":36,"column":26,"index":1092},"line":36,"code":"  it('Builds out .md pages', async () => {\n    const html = await fixture.readFile('/subpath/posts/thoughts/index.html');\n    expect(html).to.be.a('string');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out .json files","suites":["Static build"],"updatePoint":{"line":40,"column":28,"index":1258},"line":40,"code":"  it('Builds out .json files', async () => {\n    const content = await fixture.readFile('/subpath/company.json').then(text => JSON.parse(text));\n    expect(content.name).to.equal('Astro Technology Company');\n    expect(content.url).to.equal('https://astro.build/');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out async .json files","suites":["Static build"],"updatePoint":{"line":45,"column":34,"index":1536},"line":45,"code":"  it('Builds out async .json files', async () => {\n    const content = await fixture.readFile('/subpath/posts.json').then(text => JSON.parse(text));\n    expect(Array.isArray(content)).to.equal(true);\n    expect(content).deep.equal([{\n      filename: './posts/nested/more.md',\n      title: 'More post'\n    }, {\n      filename: './posts/thoughts.md',\n      title: 'Thoughts post'\n    }]);\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Builds out dynamic .json files","suites":["Static build"],"updatePoint":{"line":56,"column":36,"index":1931},"line":56,"code":"  it('Builds out dynamic .json files', async () => {\n    const slugs = ['thing1', 'thing2'];\n\n    for (const slug of slugs) {\n      const content = await fixture.readFile(`/subpath/data/${slug}.json`).then(text => JSON.parse(text));\n      expect(content.name).to.equal('Astro Technology Company');\n      expect(content.url).to.equal('https://astro.build/');\n      expect(content.slug).to.equal(slug);\n    }\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Page level CSS is added","suites":["Static build","Page CSS"],"updatePoint":{"line":88,"column":31,"index":2920},"line":88,"code":"    it('Page level CSS is added', async () => {\n      const found = await findEvidence('/subpath/index.html');\n      expect(found).to.equal(true, 'Did not find page-level CSS on this page');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Included on the index page","suites":["Static build","Shared CSS"],"updatePoint":{"line":95,"column":34,"index":3220},"line":95,"code":"    it('Included on the index page', async () => {\n      const found = await findEvidence('/subpath/index.html');\n      expect(found).to.equal(true, 'Did not find shared CSS on this page');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Included on a md page","suites":["Static build","Shared CSS"],"updatePoint":{"line":99,"column":29,"index":3413},"line":99,"code":"    it('Included on a md page', async () => {\n      const found = await findEvidence('/subpath/posts/thoughts/index.html');\n      expect(found).to.equal(true, 'Did not find shared CSS on this page');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Is included in the index CSS","suites":["Static build","CSS modules"],"updatePoint":{"line":106,"column":36,"index":3733},"line":106,"code":"    it('Is included in the index CSS', async () => {\n      const found = await findEvidence('/subpath/index.html');\n      expect(found).to.equal(true, 'Did not find shared CSS module code');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Get bundled together on the page","suites":["Static build","Hoisted scripts"],"updatePoint":{"line":112,"column":40,"index":3980},"line":112,"code":"    it('Get bundled together on the page', async () => {\n      const html = await fixture.readFile('/subpath/hoisted/index.html');\n      const $ = cheerio.load(html);\n      expect($('script[type=\"module\"]').length).to.equal(1, 'hoisted script added');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Do not get added to the wrong page","suites":["Static build","Hoisted scripts"],"updatePoint":{"line":117,"column":42,"index":4242},"line":117,"code":"    it('Do not get added to the wrong page', async () => {\n      const hoistedHTML = await fixture.readFile('/subpath/hoisted/index.html');\n      const $ = cheerio.load(hoistedHTML);\n      const href = $('script[type=\"module\"]').attr('src');\n      const indexHTML = await fixture.readFile('/subpath/index.html');\n      const $$ = cheerio.load(indexHTML);\n      expect($$(`script[src=\"${href}\"]`).length).to.equal(0, 'no script added to different page');\n    });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"honors ssr config","suites":["Static build","Hoisted scripts"],"updatePoint":{"line":126,"column":23,"index":4691},"line":126,"code":"  it('honors ssr config', async () => {\n    const html = await fixture.readFile('/subpath/index.html');\n    const $ = cheerio.load(html);\n    expect($('#ssr-config').text()).to.equal('testing');\n  });","file":"static-build.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Works with TypeScript","suites":["Svelte component","build"],"updatePoint":{"line":19,"column":29,"index":508},"line":19,"code":"    it('Works with TypeScript', async () => {\n      const html = await fixture.readFile('/typescript/index.html');\n      const $ = cheerio.load(html);\n      expect($('#svelte-ts').text()).to.equal('Hello, TypeScript');\n    });","file":"svelte-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"scripts proxy correctly","suites":["Svelte component","dev"],"updatePoint":{"line":34,"column":31,"index":973},"line":34,"code":"    it('scripts proxy correctly', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html);\n\n      for (const script of $('script').toArray()) {\n        const {\n          src\n        } = script.attribs;\n        if (!src) continue;\n        expect((await fixture.fetch(src)).status, `404: ${src}`).to.equal(200);\n      }\n    });","file":"svelte-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"Can load Vue","suites":["Vue component","build"],"updatePoint":{"line":19,"column":20,"index":490},"line":19,"code":"    it('Can load Vue', async () => {\n      const html = await fixture.readFile('/index.html');\n      const $ = cheerio.load(html);\n      const allPreValues = $('pre').toArray().map(el => $(el).text()); // test 1: renders all components correctly\n\n      expect(allPreValues).to.deep.equal(['0', '1', '10', '100', '1000']); // test 2: renders 3 <astro-root>s\n\n      expect($('astro-root')).to.have.lengthOf(4); // test 3: all <astro-root>s have uid attributes\n\n      expect($('astro-root[uid]')).to.have.lengthOf(4); // test 5: all <astro-root>s have unique uid attributes\n\n      const uniqueRootUIDs = $('astro-root').map((i, el) => $(el).attr('uid'));\n      expect(new Set(uniqueRootUIDs).size).to.equal(4);\n    });","file":"vue-component.test.js","skipped":false,"dir":"packages/astro/test"},{"name":"scripts proxy correctly","suites":["Vue component","dev"],"updatePoint":{"line":43,"column":31,"index":1453},"line":43,"code":"    it('scripts proxy correctly', async () => {\n      const html = await fixture.fetch('/').then(res => res.text());\n      const $ = cheerio.load(html);\n\n      for (const script of $('script').toArray()) {\n        const {\n          src\n        } = script.attribs;\n        if (!src) continue;\n        expect((await fixture.fetch(src)).status, `404: ${src}`).to.equal(200);\n      }\n    });","file":"vue-component.test.js","skipped":false,"dir":"packages/astro/test"}]}