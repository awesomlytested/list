{
    "repo": "atomiks/tippyjs",
    "url": "https://github.com/atomiks/tippyjs",
    "branch": "master",
    "configs": [
        {
            "package": "tippy.js",
            "lang": "js",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "borders are correctly inherited and SVG styles are correct",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 6,
                "column": 64
            },
            "line": 6,
            "code": "  it('borders are correctly inherited and SVG styles are correct', async () => {\n    const page = await browser.newPage();\n    await page.setViewport({\n      width: 1200,\n      height: 800\n    });\n    await page.goto('http://host.docker.internal:5000');\n    await navigateToTest(page, 'border');\n    expect(await screenshotTest(page, 'border')).toMatchImageSnapshot();\n  });",
            "file": "functional/border.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "follows the cursor on both axes",
            "suites": [
                "followCursor",
                "true"
            ],
            "updatePoint": {
                "line": 12,
                "column": 39
            },
            "line": 12,
            "code": "    it('follows the cursor on both axes', async () => {\n      const selector = generateSelector(true);\n      const page = await browser.newPage();\n      await page.setViewport({\n        width: 1200,\n        height: 800\n      });\n      await page.goto('http://host.docker.internal:5000');\n      await navigateToTest(page, 'followCursor');\n      const reference = await page.$(selector);\n      const rect = await page.evaluate(ref => {\n        const {\n          top,\n          left\n        } = ref.getBoundingClientRect();\n        return {\n          top,\n          left\n        };\n      }, reference);\n      await page.hover(selector);\n      await page.waitFor(60);\n      await page.mouse.move(rect.left + 15, rect.top + 20);\n      expect(await screenshotTest(page, 'followCursor')).toMatchImageSnapshot();\n    });",
            "file": "functional/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stays at cursor when content changes",
            "suites": [
                "followCursor",
                "true"
            ],
            "updatePoint": {
                "line": 38,
                "column": 42
            },
            "line": 38,
            "code": "  it('stays at cursor when content changes', async () => {\n    const selector = generateSelector('contentChange');\n    const page = await browser.newPage();\n    await page.setViewport({\n      width: 1200,\n      height: 800\n    });\n    await page.goto('http://host.docker.internal:5000');\n    await navigateToTest(page, 'followCursor');\n    await page.hover(selector);\n    await page.waitFor(150);\n    expect(await screenshotTest(page, 'followCursor')).toMatchImageSnapshot();\n  });",
            "file": "functional/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not follow the cursor at all",
            "suites": [
                "followCursor",
                "false"
            ],
            "updatePoint": {
                "line": 52,
                "column": 41
            },
            "line": 52,
            "code": "    it('does not follow the cursor at all', async () => {\n      const selector = generateSelector(false);\n      const page = await browser.newPage();\n      await page.setViewport({\n        width: 1200,\n        height: 800\n      });\n      await page.goto('http://host.docker.internal:5000');\n      await navigateToTest(page, 'followCursor');\n      const reference = await page.$(selector);\n      const rect = await page.evaluate(ref => {\n        const {\n          top,\n          left\n        } = ref.getBoundingClientRect();\n        return {\n          top,\n          left\n        };\n      }, reference);\n      await page.hover(selector);\n      await page.waitFor(60);\n      await page.mouse.move(rect.left + 15, rect.top + 20);\n      expect(await screenshotTest(page, 'followCursor')).toMatchImageSnapshot();\n    });",
            "file": "functional/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "follows the cursor only on the horizontal axis",
            "suites": [
                "followCursor",
                "horizontal"
            ],
            "updatePoint": {
                "line": 79,
                "column": 54
            },
            "line": 79,
            "code": "    it('follows the cursor only on the horizontal axis', async () => {\n      const selector = generateSelector('horizontal');\n      const page = await browser.newPage();\n      await page.setViewport({\n        width: 1200,\n        height: 800\n      });\n      await page.goto('http://host.docker.internal:5000');\n      await navigateToTest(page, 'followCursor');\n      const reference = await page.$(selector);\n      const rect = await page.evaluate(ref => {\n        const {\n          top,\n          left\n        } = ref.getBoundingClientRect();\n        return {\n          top,\n          left\n        };\n      }, reference);\n      await page.hover(selector);\n      await page.waitFor(60);\n      await page.mouse.move(rect.left + 15, rect.top + 20);\n      expect(await screenshotTest(page, 'followCursor')).toMatchImageSnapshot();\n    });",
            "file": "functional/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "follows the cursor only on the vertical axis",
            "suites": [
                "followCursor",
                "vertical"
            ],
            "updatePoint": {
                "line": 106,
                "column": 52
            },
            "line": 106,
            "code": "    it('follows the cursor only on the vertical axis', async () => {\n      const selector = generateSelector('vertical');\n      const page = await browser.newPage();\n      await page.setViewport({\n        width: 1200,\n        height: 800\n      });\n      await page.goto('http://host.docker.internal:5000');\n      await navigateToTest(page, 'followCursor');\n      const reference = await page.$(selector);\n      const rect = await page.evaluate(ref => {\n        const {\n          top,\n          left\n        } = ref.getBoundingClientRect();\n        return {\n          top,\n          left\n        };\n      }, reference);\n      await page.hover(selector);\n      await page.waitFor(60);\n      await page.mouse.move(rect.left + 15, rect.top + 20);\n      expect(await screenshotTest(page, 'followCursor')).toMatchImageSnapshot();\n    });",
            "file": "functional/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "follows the cursor only initially",
            "suites": [
                "followCursor",
                "initial"
            ],
            "updatePoint": {
                "line": 133,
                "column": 41
            },
            "line": 133,
            "code": "    it('follows the cursor only initially', async () => {\n      const selector = generateSelector('initial');\n      const page = await browser.newPage();\n      await page.setViewport({\n        width: 1200,\n        height: 800\n      });\n      await page.goto('http://host.docker.internal:5000');\n      await navigateToTest(page, 'followCursor');\n      const reference = await page.$(selector);\n      const rect = await page.evaluate(ref => {\n        const {\n          top,\n          left\n        } = ref.getBoundingClientRect();\n        return {\n          top,\n          left\n        };\n      }, reference);\n      await page.hover(selector);\n      await page.waitFor(60);\n      await page.mouse.move(rect.left, rect.top);\n      expect(await screenshotTest(page, 'followCursor')).toMatchImageSnapshot();\n    });",
            "file": "functional/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "aligns correctly",
            "suites": [
                "inlinePositioning"
            ],
            "updatePoint": {
                "line": 6,
                "column": 22
            },
            "line": 6,
            "code": "  it('aligns correctly', async () => {\n    const page = await browser.newPage();\n    await page.setViewport({\n      width: 1200,\n      height: 800\n    });\n    await page.goto('http://host.docker.internal:5000');\n    await navigateToTest(page, 'inlinePositioning');\n    expect(await screenshotTest(page, 'inlinePositioning')).toMatchImageSnapshot();\n  });",
            "file": "functional/inlinePositioning.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stays stuck to the reference element when it moves",
            "suites": [
                "sticky"
            ],
            "updatePoint": {
                "line": 6,
                "column": 56
            },
            "line": 6,
            "code": "  it('stays stuck to the reference element when it moves', async () => {\n    const page = await browser.newPage();\n    await page.setViewport({\n      width: 1200,\n      height: 800\n    });\n    await page.goto('http://host.docker.internal:5000');\n    await navigateToTest(page, 'sticky');\n    expect(await screenshotTest(page, 'sticky')).toMatchImageSnapshot();\n  });",
            "file": "functional/sticky.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "all themes are correct",
            "suites": [
                "themes"
            ],
            "updatePoint": {
                "line": 6,
                "column": 28
            },
            "line": 6,
            "code": "  it('all themes are correct', async () => {\n    const page = await browser.newPage();\n    await page.setViewport({\n      width: 1200,\n      height: 800\n    });\n    await page.goto('http://host.docker.internal:5000');\n    await navigateToTest(page, 'themes');\n    expect(await screenshotTest(page, 'themes')).toMatchImageSnapshot();\n  });",
            "file": "functional/themes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows when a tippy instance reference is triggered",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 8,
                "column": 56
            },
            "line": 8,
            "code": "  it('shows when a tippy instance reference is triggered', () => {\n    const refs = [h(), h()];\n    const singletonInstance = createSingleton(tippy(refs));\n    fireEvent.mouseEnter(refs[0]);\n    jest.runAllTimers();\n    expect(singletonInstance.state.isVisible).toBe(true);\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not show the original tippy element",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 15,
                "column": 46
            },
            "line": 15,
            "code": "  it('does not show the original tippy element', () => {\n    const refs = [h(), h()];\n    const firstRef = refs[0];\n    createSingleton(tippy(refs));\n    fireEvent.mouseEnter(firstRef);\n    jest.runAllTimers();\n    expect(firstRef._tippy.state.isVisible).toBe(false);\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses the relevant tippy instance content",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 23,
                "column": 46
            },
            "line": 23,
            "code": "  it('uses the relevant tippy instance content', () => {\n    const configs = [{\n      content: 'hi'\n    }, {\n      content: 'bye'\n    }];\n    const instances = configs.map(props => tippy(h(), props));\n    const singletonInstance = createSingleton(instances);\n    fireEvent.mouseEnter(instances[0].reference);\n    expect(singletonInstance.props.content).toBe('hi');\n    fireEvent.mouseLeave(instances[0].reference);\n    fireEvent.mouseEnter(instances[1].reference);\n    expect(singletonInstance.props.content).toBe('bye');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses `delay: number` correctly",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 37,
                "column": 36
            },
            "line": 37,
            "code": "  it('uses `delay: number` correctly', () => {\n    const refs = [h(), h()];\n    const singletonInstance = createSingleton(tippy(refs), {\n      delay: 1000\n    });\n    const firstRef = refs[0];\n    fireEvent.mouseEnter(firstRef);\n    jest.advanceTimersByTime(999);\n    expect(singletonInstance.state.isVisible).toBe(false);\n    jest.advanceTimersByTime(1);\n    expect(singletonInstance.state.isVisible).toBe(true);\n    fireEvent.mouseLeave(firstRef);\n    jest.advanceTimersByTime(999);\n    expect(singletonInstance.state.isVisible).toBe(true);\n    jest.advanceTimersByTime(1);\n    expect(singletonInstance.state.isVisible).toBe(false);\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses `delay: [number, number]` correctly",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 54,
                "column": 46
            },
            "line": 54,
            "code": "  it('uses `delay: [number, number]` correctly', () => {\n    const refs = [h(), h()];\n    const singletonInstance = createSingleton(tippy(refs), {\n      delay: [500, 1000]\n    });\n    const firstRef = refs[0];\n    fireEvent.mouseEnter(firstRef);\n    jest.advanceTimersByTime(499);\n    expect(singletonInstance.state.isVisible).toBe(false);\n    jest.advanceTimersByTime(1);\n    expect(singletonInstance.state.isVisible).toBe(true);\n    fireEvent.mouseLeave(firstRef);\n    jest.advanceTimersByTime(999);\n    expect(singletonInstance.state.isVisible).toBe(true);\n    jest.advanceTimersByTime(1);\n    expect(singletonInstance.state.isVisible).toBe(false);\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "throws if not passed an array",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 71,
                "column": 35
            },
            "line": 71,
            "code": "  it('throws if not passed an array', () => {\n    expect(() => {\n      createSingleton(null);\n    }).toThrow();\n    expect(console.error).toHaveBeenCalledWith(...getFormattedMessage(['The first argument passed to createSingleton() must be an array of tippy', 'instances. The passed value was', String(null)].join(' ')));\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not throw if any passed instance is not part of an existing singleton",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 77,
                "column": 80
            },
            "line": 77,
            "code": "  it('does not throw if any passed instance is not part of an existing singleton', () => {\n    expect(() => {\n      const instances = tippy([h(), h()]);\n      const singleton = createSingleton(instances);\n      singleton.destroy();\n      createSingleton(instances);\n    }).not.toThrow();\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "allows updates to `onTrigger`, `onDestroy`, and `onAfterUpdate`",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 85,
                "column": 69
            },
            "line": 85,
            "code": "  it('allows updates to `onTrigger`, `onDestroy`, and `onAfterUpdate`', () => {\n    const instances = tippy([h()]);\n    const onTriggerSpy = jest.fn();\n    const onDestroySpy = jest.fn();\n    const onAfterUpdateSpy = jest.fn();\n    const singleton = createSingleton(instances);\n    singleton.setProps({\n      onTrigger: onTriggerSpy,\n      onDestroy: onDestroySpy,\n      onAfterUpdate: onAfterUpdateSpy\n    });\n    fireEvent.mouseEnter(instances[0].reference);\n    expect(onTriggerSpy).toHaveBeenCalled();\n    singleton.setProps({});\n    expect(onAfterUpdateSpy).toHaveBeenCalled();\n    singleton.destroy();\n    expect(onDestroySpy).toHaveBeenCalled();\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "can update the `delay` option",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 103,
                "column": 35
            },
            "line": 103,
            "code": "  it('can update the `delay` option', () => {\n    const refs = [h(), h()];\n    const singletonInstance = createSingleton(tippy(refs), {\n      delay: 1000\n    });\n    const firstRef = refs[0];\n    singletonInstance.setProps({\n      delay: 500\n    });\n    fireEvent.mouseEnter(firstRef);\n    jest.advanceTimersByTime(499);\n    expect(singletonInstance.state.isVisible).toBe(false);\n    jest.advanceTimersByTime(1);\n    expect(singletonInstance.state.isVisible).toBe(true);\n    fireEvent.mouseLeave(firstRef);\n    jest.advanceTimersByTime(499);\n    expect(singletonInstance.state.isVisible).toBe(true);\n    jest.advanceTimersByTime(1);\n    expect(singletonInstance.state.isVisible).toBe(false);\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not destroy the passed instances if passed `false`",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 123,
                "column": 61
            },
            "line": 123,
            "code": "  it('does not destroy the passed instances if passed `false`', () => {\n    const tippyInstances = tippy([h(), h()]);\n    const singletonInstance = createSingleton(tippyInstances);\n    singletonInstance.destroy(false);\n    tippyInstances.forEach(instance => {\n      expect(instance.state.isDestroyed).toBe(false);\n    });\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "restores original state when destroyed",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 131,
                "column": 44
            },
            "line": 131,
            "code": "  it('restores original state when destroyed', () => {\n    const tippyInstances = tippy([h(), h()]);\n    const prevInstanceProps = tippyInstances.map(instance => instance.props);\n    const singletonInstance = createSingleton(tippyInstances);\n    singletonInstance.destroy(false);\n    tippyInstances.forEach((instance, i) => {\n      const {\n        props\n      } = instance;\n      expect({ ...props,\n        ...prevInstanceProps[i]\n      }).toEqual(props);\n    });\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "handles aria attribute correctly",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 145,
                "column": 38
            },
            "line": 145,
            "code": "  it('handles aria attribute correctly', () => {\n    const tippyInstances = tippy([h(), h()]);\n    const singletonInstance = createSingleton(tippyInstances, {\n      delay: 100\n    });\n    const id = `__NAMESPACE_PREFIX__-${singletonInstance.id}`;\n    const {\n      reference: firstRef\n    } = tippyInstances[0];\n    const {\n      reference: secondRef\n    } = tippyInstances[1];\n    fireEvent.mouseEnter(firstRef);\n    jest.runAllTimers();\n    expect(firstRef.getAttribute('aria-describedby')).toBe(id);\n    expect(secondRef.getAttribute('aria-describedby')).toBe(id);\n    fireEvent.mouseLeave(firstRef);\n    fireEvent.mouseEnter(secondRef);\n    expect(firstRef.getAttribute('aria-describedby')).toBe(id);\n    expect(secondRef.getAttribute('aria-describedby')).toBe(id);\n    singletonInstance.setProps({\n      aria: {\n        content: 'labelledby'\n      }\n    });\n    singletonInstance.hide();\n    fireEvent.mouseEnter(firstRef);\n    jest.runAllTimers();\n    expect(firstRef.getAttribute('aria-labelledby')).toBe(id);\n    expect(secondRef.getAttribute('aria-labelledby')).toBe(id);\n    fireEvent.mouseLeave(firstRef);\n    jest.advanceTimersByTime(100);\n    expect(firstRef.getAttribute('aria-labelledby')).toBe(null);\n    expect(secondRef.getAttribute('aria-labelledby')).toBe(null);\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not use the placeholder element content with a function",
            "suites": [
                "createSingleton"
            ],
            "updatePoint": {
                "line": 180,
                "column": 66
            },
            "line": 180,
            "code": "  it('does not use the placeholder element content with a function', () => {\n    const refs = [h(), h()];\n    const instances = tippy(refs, {\n      content: () => 'hello'\n    });\n    const singleton = createSingleton(instances);\n    const firstRef = refs[0];\n    expect(singleton.props.content).toBe('__DEFAULT_TEST_CONTENT__');\n    fireEvent.mouseEnter(firstRef);\n    expect(singleton.props.content).toBe('hello');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "individual tippy instance props override singleton instance props",
            "suites": [
                "overrides prop"
            ],
            "updatePoint": {
                "line": 193,
                "column": 71
            },
            "line": 193,
            "code": "  it('individual tippy instance props override singleton instance props', () => {\n    const tippyInstances = tippy([h(), h()], {\n      delay: 100\n    });\n    const singletonInstance = createSingleton(tippyInstances, {\n      delay: 0,\n      overrides: ['delay']\n    });\n    fireEvent.mouseEnter(tippyInstances[0].reference);\n    expect(singletonInstance.props.delay).toBe(100);\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "can be updated via .setProps()",
            "suites": [
                "overrides prop"
            ],
            "updatePoint": {
                "line": 204,
                "column": 36
            },
            "line": 204,
            "code": "  it('can be updated via .setProps()', () => {\n    const tippyInstances = tippy([h(), h()], {\n      delay: 100\n    });\n    const singletonInstance = createSingleton(tippyInstances, {\n      delay: 0,\n      overrides: ['delay']\n    });\n    singletonInstance.setProps({\n      overrides: []\n    });\n    fireEvent.mouseEnter(tippyInstances[0].reference);\n    expect(singletonInstance.props.delay).toBe(0);\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "updates the singleton instances",
            "suites": [
                ".setInstances() method"
            ],
            "updatePoint": {
                "line": 220,
                "column": 37
            },
            "line": 220,
            "code": "  it('updates the singleton instances', () => {\n    const initialRefs = [h(), h()];\n    const nextRefs = [initialRefs[0], h()];\n    const initialInstances = tippy(initialRefs);\n    const nextInstances = tippy(nextRefs);\n    const singleton = createSingleton(initialInstances);\n    singleton.setInstances(nextInstances);\n    expect(initialInstances[1].state.isEnabled).toBe(true);\n    expect(nextInstances[1].state.isEnabled).toBe(false);\n    fireEvent.mouseEnter(nextRefs[1]);\n    expect(singleton.state.isVisible).toBe(true);\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows the first tippy instance when no parameters are passed",
            "suites": [
                ".show() method"
            ],
            "updatePoint": {
                "line": 242,
                "column": 66
            },
            "line": 242,
            "code": "  it('shows the first tippy instance when no parameters are passed', () => {\n    const singletonInstance = createSingleton(getInstances());\n    singletonInstance.show();\n    expect(singletonInstance.state.isVisible).toBe(true);\n    expect(singletonInstance.props.content).toBe('first');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows the tippy instance passed as an argument",
            "suites": [
                ".show() method"
            ],
            "updatePoint": {
                "line": 248,
                "column": 52
            },
            "line": 248,
            "code": "  it('shows the tippy instance passed as an argument', () => {\n    const tippyInstances = getInstances();\n    const singletonInstance = createSingleton(tippyInstances);\n    singletonInstance.show(tippyInstances[1]);\n    expect(singletonInstance.state.isVisible).toBe(true);\n    expect(singletonInstance.props.content).toBe('second');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows the tippy instance related to the reference element passed as an argument",
            "suites": [
                ".show() method"
            ],
            "updatePoint": {
                "line": 255,
                "column": 85
            },
            "line": 255,
            "code": "  it('shows the tippy instance related to the reference element passed as an argument', () => {\n    const tippyInstances = getInstances();\n    const singletonInstance = createSingleton(tippyInstances);\n    singletonInstance.show(tippyInstances[1].reference);\n    expect(singletonInstance.state.isVisible).toBe(true);\n    expect(singletonInstance.props.content).toBe('second');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows the tippy instance at the given index number",
            "suites": [
                ".show() method"
            ],
            "updatePoint": {
                "line": 262,
                "column": 56
            },
            "line": 262,
            "code": "  it('shows the tippy instance at the given index number', () => {\n    const singletonInstance = createSingleton(getInstances());\n    singletonInstance.show(1);\n    expect(singletonInstance.state.isVisible).toBe(true);\n    expect(singletonInstance.props.content).toBe('second');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows the first tippy instance if none is visible",
            "suites": [
                ".showNext() method"
            ],
            "updatePoint": {
                "line": 278,
                "column": 55
            },
            "line": 278,
            "code": "  it('shows the first tippy instance if none is visible', () => {\n    const singletonInstance = createSingleton(getInstances());\n    singletonInstance.showNext();\n    expect(singletonInstance.state.isVisible).toBe(true);\n    expect(singletonInstance.props.content).toBe('first');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows the tippy instance after the currently visible one",
            "suites": [
                ".showNext() method"
            ],
            "updatePoint": {
                "line": 284,
                "column": 62
            },
            "line": 284,
            "code": "  it('shows the tippy instance after the currently visible one', () => {\n    const singletonInstance = createSingleton(getInstances());\n    singletonInstance.show();\n    expect(singletonInstance.props.content).toBe('first');\n    singletonInstance.showNext();\n    expect(singletonInstance.props.content).toBe('second');\n    singletonInstance.showNext();\n    expect(singletonInstance.props.content).toBe('last');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "loops to the beginning if the last instance is visible",
            "suites": [
                ".showNext() method"
            ],
            "updatePoint": {
                "line": 293,
                "column": 60
            },
            "line": 293,
            "code": "  it('loops to the beginning if the last instance is visible', () => {\n    const singletonInstance = createSingleton(getInstances());\n    singletonInstance.show(2);\n    expect(singletonInstance.props.content).toBe('last');\n    singletonInstance.showNext();\n    expect(singletonInstance.props.content).toBe('first');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows the last tippy instance if none is visible",
            "suites": [
                ".showPrevious() method"
            ],
            "updatePoint": {
                "line": 310,
                "column": 54
            },
            "line": 310,
            "code": "  it('shows the last tippy instance if none is visible', () => {\n    const singletonInstance = createSingleton(getInstances());\n    singletonInstance.showPrevious();\n    expect(singletonInstance.state.isVisible).toBe(true);\n    expect(singletonInstance.props.content).toBe('last');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows the tippy instance before the currently visible one",
            "suites": [
                ".showPrevious() method"
            ],
            "updatePoint": {
                "line": 316,
                "column": 63
            },
            "line": 316,
            "code": "  it('shows the tippy instance before the currently visible one', () => {\n    const singletonInstance = createSingleton(getInstances(), {\n      showOnCreate: true\n    });\n    singletonInstance.hide();\n    singletonInstance.show(2);\n    expect(singletonInstance.props.content).toBe('last');\n    singletonInstance.showPrevious();\n    expect(singletonInstance.props.content).toBe('second');\n    singletonInstance.showPrevious();\n    expect(singletonInstance.props.content).toBe('first');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "loops to the end if the first instance is visible",
            "suites": [
                ".showPrevious() method"
            ],
            "updatePoint": {
                "line": 328,
                "column": 55
            },
            "line": 328,
            "code": "  it('loops to the end if the first instance is visible', () => {\n    const singletonInstance = createSingleton(getInstances());\n    singletonInstance.show();\n    expect(singletonInstance.props.content).toBe('first');\n    singletonInstance.showPrevious();\n    expect(singletonInstance.props.content).toBe('last');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows the first tippy instance on creation",
            "suites": [
                "showOnCreate prop"
            ],
            "updatePoint": {
                "line": 337,
                "column": 48
            },
            "line": 337,
            "code": "  it('shows the first tippy instance on creation', () => {\n    const tippyInstances = [{\n      content: 'first'\n    }, {\n      content: 'second'\n    }].map(props => tippy(h(), props));\n    const singletonInstance = createSingleton(tippyInstances, {\n      showOnCreate: true\n    });\n    expect(singletonInstance.state.isVisible).toBe(true);\n    expect(singletonInstance.props.content).toBe('first');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "resets correctly if showOnCreate is cancelled by a click outside",
            "suites": [
                "showOnCreate prop"
            ],
            "updatePoint": {
                "line": 349,
                "column": 70
            },
            "line": 349,
            "code": "  it('resets correctly if showOnCreate is cancelled by a click outside', () => {\n    const tippyInstances = [{\n      content: 'first'\n    }, {\n      content: 'second'\n    }].map(props => tippy(h(), props));\n    const singletonInstance = createSingleton(tippyInstances, {\n      showOnCreate: true,\n      delay: 500\n    });\n    fireEvent.mouseDown(document.body);\n    jest.runAllTimers();\n    fireEvent.mouseEnter(tippyInstances[1].reference);\n    jest.runAllTimers();\n    expect(singletonInstance.state.isVisible).toBe(true);\n    expect(singletonInstance.props.content).toBe('second');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not hide tippy upon clicking next target",
            "suites": [
                "showOnCreate prop"
            ],
            "updatePoint": {
                "line": 366,
                "column": 51
            },
            "line": 366,
            "code": "  it('does not hide tippy upon clicking next target', () => {\n    currentInput.isTouch = true;\n    const tippyInstances = [{\n      content: 'first'\n    }, {\n      content: 'second'\n    }].map(props => tippy(h(), props));\n    const singletonInstance = createSingleton(tippyInstances);\n    fireEvent.mouseEnter(tippyInstances[0].reference);\n    fireEvent.mouseDown(document.body);\n    fireEvent.mouseEnter(tippyInstances[1].reference);\n    jest.runAllTimers();\n    expect(singletonInstance.state.isVisible).toBe(true);\n    expect(singletonInstance.props.content).toBe('second');\n    currentInput.isTouch = false;\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts custom `triggerTarget` in individual instances",
            "suites": [
                "showOnCreate prop"
            ],
            "updatePoint": {
                "line": 382,
                "column": 60
            },
            "line": 382,
            "code": "  it('accepts custom `triggerTarget` in individual instances', () => {\n    const ref1 = h();\n    const ref2 = h();\n    const triggerTarget1 = h();\n    const triggerTarget2 = h();\n    const tippyInstances = [{\n      ref: ref1,\n      content: 'first',\n      triggerTarget: triggerTarget1\n    }, {\n      ref: ref2,\n      content: 'second',\n      triggerTarget: triggerTarget2\n    }].map(({\n      ref,\n      ...props\n    }) => tippy(ref, props));\n    const singletonInstance = createSingleton(tippyInstances);\n    fireEvent.mouseEnter(ref1);\n    jest.runAllTimers();\n    expect(singletonInstance.state.isVisible).toBe(false);\n    fireEvent.mouseEnter(triggerTarget1);\n    jest.runAllTimers();\n    expect(singletonInstance.state.isVisible).toBe(true);\n    expect(singletonInstance.props.content).toBe('first');\n    fireEvent.mouseEnter(triggerTarget2);\n    jest.runAllTimers();\n    expect(singletonInstance.state.isVisible).toBe(true);\n    expect(singletonInstance.props.content).toBe('second');\n    fireEvent.mouseEnter(ref1);\n    jest.runAllTimers();\n    expect(singletonInstance.props.content).toBe('second');\n  });",
            "file": "integration/addons/createSingleton.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates an instance for the child target",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 16,
                "column": 46
            },
            "line": 16,
            "code": "  it('creates an instance for the child target', () => {\n    const button = h('button', {}, delegateElement);\n    instance = delegate(delegateElement, {\n      target: 'button'\n    });\n    expect(button._tippy).toBeUndefined();\n    fireEvent.mouseOver(button);\n    expect(button._tippy).toBeDefined();\n    instance.destroy();\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works with `trigger: click`",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 26,
                "column": 33
            },
            "line": 26,
            "code": "  it('works with `trigger: click`', () => {\n    const button = h('button', {}, delegateElement);\n    instance = delegate(delegateElement, {\n      target: 'button',\n      trigger: 'click'\n    });\n    expect(button._tippy).toBeUndefined();\n    fireEvent.click(button);\n    expect(button._tippy).toBeDefined();\n    instance.destroy();\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "handles an array of delegate targets",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 37,
                "column": 42
            },
            "line": 37,
            "code": "  it('handles an array of delegate targets', () => {\n    const refs = [h(), h()];\n    refs.forEach(ref => ref.append(document.createElement('button')));\n    instance = delegate(refs, {\n      target: 'button'\n    });\n    const button = refs[0].querySelector('button');\n    expect(button._tippy).toBeUndefined();\n    fireEvent.mouseOver(button);\n    expect(button._tippy).toBeDefined();\n    instance.forEach(instance => instance.destroy());\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not show its own tippy",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 49,
                "column": 33
            },
            "line": 49,
            "code": "  it('does not show its own tippy', () => {\n    instance = delegate(delegateElement, {\n      target: 'button'\n    });\n    fireEvent.mouseOver(delegateElement);\n    fireEvent.mouseEnter(delegateElement);\n    jest.runAllTimers();\n    expect(instance.state.isVisible).toBe(false);\n    instance.destroy();\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "throws if delegate target is falsy",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 59,
                "column": 40
            },
            "line": 59,
            "code": "  it('throws if delegate target is falsy', () => {\n    delegate(null, {\n      target: 'button'\n    });\n    expect(console.error).toHaveBeenCalledWith(...getFormattedMessage(['tippy() was passed', '`' + String(null) + '`', 'as its targets (first) argument. Valid types are: String, Element, Element[],', 'or NodeList.'].join(' ')));\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "errors if passed missing props object",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 65,
                "column": 43
            },
            "line": 65,
            "code": "  it('errors if passed missing props object', () => {\n    expect(() => delegate(delegateElement)).toThrow();\n    expect(console.error).toHaveBeenCalledWith(...getFormattedMessage(['You must specity a `target` prop indicating a CSS selector string matching', 'the target elements that should receive a tippy.'].join(' ')));\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "errors if passed falsy or missing `target` prop",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 69,
                "column": 53
            },
            "line": 69,
            "code": "  it('errors if passed falsy or missing `target` prop', () => {\n    delegate(delegateElement, {\n      target: ''\n    });\n    expect(console.error).toHaveBeenCalledWith(...getFormattedMessage(['You must specity a `target` prop indicating a CSS selector string matching', 'the target elements that should receive a tippy.'].join(' ')));\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "can be destroyed",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 75,
                "column": 22
            },
            "line": 75,
            "code": "  it('can be destroyed', () => {\n    const button = h('button', {}, delegateElement);\n    instance = delegate(delegateElement, {\n      target: 'button'\n    });\n    instance.destroy();\n    fireEvent.mouseOver(button);\n    expect(button._tippy).toBeUndefined();\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "destroys child instance by default too",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 84,
                "column": 44
            },
            "line": 84,
            "code": "  it('destroys child instance by default too', () => {\n    const button = h('button', {}, delegateElement);\n    instance = delegate(delegateElement, {\n      target: 'button'\n    });\n    fireEvent.mouseOver(button);\n    instance.destroy();\n    expect(button._tippy).toBeUndefined();\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not destroy child instance if passed `false`",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 93,
                "column": 55
            },
            "line": 93,
            "code": "  it('does not destroy child instance if passed `false`', () => {\n    const button = h('button', {}, delegateElement);\n    instance = delegate(delegateElement, {\n      target: 'button'\n    });\n    fireEvent.mouseOver(button);\n    instance.destroy(false);\n    expect(button._tippy).toBeDefined();\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "handles `data-tippy-trigger` attribute",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 102,
                "column": 44
            },
            "line": 102,
            "code": "  it('handles `data-tippy-trigger` attribute', () => {\n    const clickButton = h('button', {\n      'data-tippy-trigger': 'click'\n    }, delegateElement);\n    const focusButton = h('button', {\n      'data-tippy-trigger': 'focus'\n    }, delegateElement);\n    instance = delegate(delegateElement, {\n      target: 'button',\n      trigger: 'mouseenter'\n    });\n    fireEvent.mouseOver(clickButton);\n    expect(clickButton._tippy).toBeUndefined();\n    fireEvent.click(clickButton);\n    expect(clickButton._tippy).toBeDefined();\n    fireEvent.mouseOver(focusButton);\n    expect(focusButton._tippy).toBeUndefined();\n    fireEvent.focusIn(focusButton);\n    expect(focusButton._tippy).toBeDefined();\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "respects `delay` on first show",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 122,
                "column": 36
            },
            "line": 122,
            "code": "  it('respects `delay` on first show', () => {\n    const button = h('button', {}, delegateElement);\n    instance = delegate(delegateElement, {\n      target: 'button',\n      delay: 100\n    });\n    fireEvent.mouseOver(button);\n    jest.advanceTimersByTime(99);\n    expect(button._tippy.state.isVisible).toBe(false);\n    jest.advanceTimersByTime(1);\n    expect(button._tippy.state.isVisible).toBe(true);\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not hide tippy with touch input using click trigger",
            "suites": [
                "delegate"
            ],
            "updatePoint": {
                "line": 134,
                "column": 62
            },
            "line": 134,
            "code": "  it('does not hide tippy with touch input using click trigger', () => {\n    const button = h('button', {}, delegateElement);\n    instance = delegate(delegateElement, {\n      target: 'button',\n      trigger: 'click'\n    });\n    fireEvent.touchStart(button, {\n      bubbles: true\n    });\n    fireEvent.click(button, {\n      bubbles: true\n    });\n    jest.runAllTimers();\n    expect(button._tippy.state.isVisible).toBe(true);\n  });",
            "file": "integration/addons/delegate.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets currentInput.isTouch to `true`",
            "suites": [
                "onDocumentTouchStart"
            ],
            "updatePoint": {
                "line": 5,
                "column": 41
            },
            "line": 5,
            "code": "  it('sets currentInput.isTouch to `true`', () => {\n    Listeners.onDocumentTouchStart();\n    Listeners.onDocumentTouchStart();\n    expect(Listeners.currentInput.isTouch).toBe(true);\n  });",
            "file": "integration/bindGlobalEventListeners.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is undone if two consecutive mousemove events are fired",
            "suites": [
                "onDocumentTouchStart"
            ],
            "updatePoint": {
                "line": 10,
                "column": 61
            },
            "line": 10,
            "code": "  it('is undone if two consecutive mousemove events are fired', () => {\n    // NOTE: this is dependent on the previous test\n    Listeners.onDocumentMouseMove();\n    Listeners.onDocumentMouseMove();\n    expect(Listeners.currentInput.isTouch).toBe(false);\n  });",
            "file": "integration/bindGlobalEventListeners.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not blur reference element if the tippy is visible",
            "suites": [
                "onWindowBlur"
            ],
            "updatePoint": {
                "line": 18,
                "column": 61
            },
            "line": 18,
            "code": "  it('does not blur reference element if the tippy is visible', () => {\n    const instance = tippy(h(), {\n      trigger: 'manual'\n    });\n    const spy = jest.fn();\n    instance.reference.addEventListener('blur', spy);\n    instance.reference.focus();\n    instance.show();\n    Listeners.onWindowBlur();\n    expect(spy).not.toHaveBeenCalled();\n  });",
            "file": "integration/bindGlobalEventListeners.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does blur reference element if the tippy is not visible",
            "suites": [
                "onWindowBlur"
            ],
            "updatePoint": {
                "line": 29,
                "column": 61
            },
            "line": 29,
            "code": "  it('does blur reference element if the tippy is not visible', () => {\n    const instance = tippy(h(), {\n      trigger: 'manual'\n    });\n    const spy = jest.fn();\n    instance.reference.addEventListener('blur', spy);\n    instance.reference.focus();\n    Listeners.onWindowBlur();\n    expect(spy).toHaveBeenCalled();\n  });",
            "file": "integration/bindGlobalEventListeners.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns the instance with expected properties",
            "suites": [
                "createTippy"
            ],
            "updatePoint": {
                "line": 16,
                "column": 51
            },
            "line": 16,
            "code": "  it('returns the instance with expected properties', () => {\n    instance = createTippy(h(), defaultProps);\n    expect(instance).toMatchSnapshot();\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets `undefined` prop to the default",
            "suites": [
                "createTippy"
            ],
            "updatePoint": {
                "line": 20,
                "column": 42
            },
            "line": 20,
            "code": "  it('sets `undefined` prop to the default', () => {\n    instance = createTippy(h(), {\n      theme: undefined\n    });\n    expect(instance.props.theme).not.toBe(undefined);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "increments the `id` on each call with valid arguments",
            "suites": [
                "createTippy"
            ],
            "updatePoint": {
                "line": 26,
                "column": 59
            },
            "line": 26,
            "code": "  it('increments the `id` on each call with valid arguments', () => {\n    const instances = [createTippy(h(), defaultProps), createTippy(h(), defaultProps), createTippy(h(), defaultProps)];\n    expect(instances[0].id).toBe(instances[1].id - 1);\n    expect(instances[1].id).toBe(instances[2].id - 1);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds correct listeners to the reference element based on `trigger` (`interactive`: false)",
            "suites": [
                "createTippy"
            ],
            "updatePoint": {
                "line": 31,
                "column": 95
            },
            "line": 31,
            "code": "  it('adds correct listeners to the reference element based on `trigger` (`interactive`: false)', () => {\n    instance = createTippy(h(), { ...defaultProps,\n      trigger: 'mouseenter focus click focusin'\n    });\n    fireEvent.mouseEnter(instance.reference);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.mouseLeave(instance.reference);\n    expect(instance.state.isVisible).toBe(false);\n    fireEvent.focus(instance.reference);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.blur(instance.reference);\n    expect(instance.state.isVisible).toBe(false);\n    fireEvent.click(instance.reference);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.mouseLeave(instance.reference);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.click(instance.reference);\n    expect(instance.state.isVisible).toBe(false);\n    fireEvent.focusIn(instance.reference);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.focusOut(instance.reference);\n    expect(instance.state.isVisible).toBe(false); // For completeness, it would seem to make sense to test that the tippy *is*\n    // hidden on clicking it's content (as this is a non-interactive instance);\n    // however, we use CSS pointer-events: none for non-interaction, so firing a\n    // click event on the tippy content won't test this scenario. Neither can we\n    // test for that style with window.getComputedStyle in the testing\n    // environment.\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds correct listeners to the reference element based on `trigger` (`interactive`: true)",
            "suites": [
                "createTippy"
            ],
            "updatePoint": {
                "line": 59,
                "column": 94
            },
            "line": 59,
            "code": "  it('adds correct listeners to the reference element based on `trigger` (`interactive`: true)', () => {\n    instance = createTippy(h(), { ...defaultProps,\n      interactive: true,\n      trigger: 'mouseenter focus click focusin'\n    });\n    fireEvent.mouseEnter(instance.reference);\n    expect(instance.state.isVisible).toBe(true); // For interactive tippies, the reference onMouseLeave adds a document.body\n    // listener to scheduleHide, but doesn't scheduleHide itself (hence event\n    // bubbling being required here for the tip to hide).\n\n    fireEvent.mouseLeave(instance.reference, {\n      bubbles: true\n    });\n    expect(instance.state.isVisible).toBe(false);\n    fireEvent.focus(instance.reference);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.blur(instance.reference);\n    expect(instance.state.isVisible).toBe(false);\n    fireEvent.click(instance.reference);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.mouseLeave(instance.reference);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.click(instance.reference);\n    expect(instance.state.isVisible).toBe(false);\n    fireEvent.click(instance.reference);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.click(getChildren(instance.popper).content);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.focusIn(instance.reference);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.focusOut(instance.reference);\n    expect(instance.state.isVisible).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "extends `instance.props` with plugin props",
            "suites": [
                "createTippy"
            ],
            "updatePoint": {
                "line": 92,
                "column": 48
            },
            "line": 92,
            "code": "  it('extends `instance.props` with plugin props', () => {\n    instance = createTippy(h(), { ...defaultProps,\n      plugins: [animateFill]\n    });\n    expect(instance.props.animateFill).toBe(animateFill.defaultValue);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "`instance.plugins` does not contain duplicate plugins",
            "suites": [
                "createTippy"
            ],
            "updatePoint": {
                "line": 98,
                "column": 59
            },
            "line": 98,
            "code": "  it('`instance.plugins` does not contain duplicate plugins', () => {\n    instance = createTippy(h(), { ...defaultProps,\n      plugins: [animateFill, animateFill]\n    });\n    expect(instance.plugins).toEqual([animateFill]);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not remove an existing `aria-expanded` attribute",
            "suites": [
                "createTippy"
            ],
            "updatePoint": {
                "line": 104,
                "column": 59
            },
            "line": 104,
            "code": "  it('does not remove an existing `aria-expanded` attribute', () => {\n    const ref = h('div', {\n      'aria-expanded': 'true'\n    });\n    instance = createTippy(ref, {\n      interactive: false\n    });\n    expect(ref.hasAttribute('aria-expanded')).toBe(true);\n  }); // I don't know why a TDZ error occurs due to this, it doesn't happen in the",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "bails if props.render is not supplied",
            "suites": [
                "createTippy"
            ],
            "line": 115,
            "code": "  it.skip('bails if props.render is not supplied', () => {",
            "file": "integration/createTippy.test.js",
            "skipped": true,
            "dir": "test"
        },
        {
            "name": "bails if props.content is not supplied",
            "suites": [
                "createTippy"
            ],
            "line": 124,
            "code": "  it.skip('bails if props.content is not supplied', () => {",
            "file": "integration/createTippy.test.js",
            "skipped": true,
            "dir": "test"
        },
        {
            "name": "does not pass props that are `undefined`",
            "suites": [
                "createTippy"
            ],
            "updatePoint": {
                "line": 131,
                "column": 46
            },
            "line": 131,
            "code": "  it('does not pass props that are `undefined`', () => {\n    instance = createTippy(h(), {\n      placement: undefined\n    });\n    expect(instance.props.placement).toBe('top');\n    instance.setProps({\n      placement: undefined\n    });\n    expect(instance.props.placement).toBe('top');\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets state.isDestroyed to `true`",
            "suites": [
                "instance.destroy()"
            ],
            "updatePoint": {
                "line": 143,
                "column": 38
            },
            "line": 143,
            "code": "  it('sets state.isDestroyed to `true`', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.destroy();\n    expect(instance.state.isDestroyed).toBe(true);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "deletes the `_tippy` property from the reference",
            "suites": [
                "instance.destroy()"
            ],
            "updatePoint": {
                "line": 148,
                "column": 54
            },
            "line": 148,
            "code": "  it('deletes the `_tippy` property from the reference', () => {\n    const ref = h();\n    instance = createTippy(ref, defaultProps);\n    expect('_tippy' in ref).toBe(true);\n    instance.destroy();\n    expect('_tippy' in ref).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removes listeners from the reference",
            "suites": [
                "instance.destroy()"
            ],
            "updatePoint": {
                "line": 155,
                "column": 42
            },
            "line": 155,
            "code": "  it('removes listeners from the reference', () => {\n    const ref = h();\n    instance = createTippy(ref, { ...defaultProps,\n      trigger: 'mouseenter'\n    });\n    instance.destroy();\n    fireEvent.mouseEnter(ref);\n    expect(instance.state.isVisible).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does nothing if the instance is already destroyed",
            "suites": [
                "instance.destroy()"
            ],
            "updatePoint": {
                "line": 164,
                "column": 55
            },
            "line": 164,
            "code": "  it('does nothing if the instance is already destroyed', () => {\n    const ref = h();\n    instance = createTippy(ref, defaultProps);\n    instance.state.isDestroyed = true;\n    instance.destroy();\n    expect(ref._tippy).toBeDefined();\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "still unmounts the tippy if the instance is disabled",
            "suites": [
                "instance.destroy()"
            ],
            "updatePoint": {
                "line": 171,
                "column": 58
            },
            "line": 171,
            "code": "  it('still unmounts the tippy if the instance is disabled', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.show();\n    instance.disable();\n    instance.destroy();\n    expect(instance.state.isMounted).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "still unmounts the tippy if the instance is disabled",
            "suites": [
                "instance.destroy()"
            ],
            "updatePoint": {
                "line": 178,
                "column": 58
            },
            "line": 178,
            "code": "  it('still unmounts the tippy if the instance is disabled', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.show();\n    jest.runAllTimers();\n    instance.disable();\n    instance.destroy();\n    expect(instance.state.isMounted).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clears pending timeouts",
            "suites": [
                "instance.destroy()"
            ],
            "updatePoint": {
                "line": 186,
                "column": 29
            },
            "line": 186,
            "code": "  it('clears pending timeouts', () => {\n    instance = createTippy(h(), { ...defaultProps,\n      delay: 500\n    });\n    const spy = jest.spyOn(instance, 'clearDelayTimeouts');\n    fireEvent.mouseEnter(instance.reference);\n    instance.destroy();\n    jest.advanceTimersByTime(500);\n    expect(spy).toHaveBeenCalled();\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "destroys popperInstance if it was created",
            "suites": [
                "instance.destroy()"
            ],
            "updatePoint": {
                "line": 196,
                "column": 47
            },
            "line": 196,
            "code": "  it('destroys popperInstance if it was created', () => {\n    const spy = jest.fn();\n    instance = createTippy(h(), { ...defaultProps,\n      delay: 500,\n      popperOptions: {\n        modifiers: [{\n          name: 'x',\n          enabled: true,\n          phase: 'afterWrite',\n\n          fn() {},\n\n          effect() {\n            return spy;\n          }\n\n        }]\n      }\n    });\n    instance.show();\n    jest.runAllTimers();\n    instance.destroy();\n    expect(spy).toHaveBeenCalledTimes(1);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not cause a circular call loop if called within onHidden()",
            "suites": [
                "instance.destroy()"
            ],
            "updatePoint": {
                "line": 220,
                "column": 69
            },
            "line": 220,
            "code": "  it('does not cause a circular call loop if called within onHidden()', () => {\n    instance = createTippy(h(), { ...defaultProps,\n\n      onHidden() {\n        instance.destroy();\n      }\n\n    });\n    instance.show();\n    jest.runAllTimers();\n    instance.hide();\n    expect(instance.state.isDestroyed).toBe(true);\n    expect(instance.state.isMounted).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "changes state.isVisible to `true`",
            "suites": [
                "instance.show()"
            ],
            "updatePoint": {
                "line": 236,
                "column": 39
            },
            "line": 236,
            "code": "  it('changes state.isVisible to `true`', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.show();\n    expect(instance.state.isVisible).toBe(true);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "mounts the popper to the DOM",
            "suites": [
                "instance.show()"
            ],
            "updatePoint": {
                "line": 241,
                "column": 34
            },
            "line": 241,
            "code": "  it('mounts the popper to the DOM', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.show();\n    jest.runAllTimers();\n    expect(document.body.contains(instance.popper)).toBe(true);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not show tooltip if the reference has a `disabled` attribute",
            "suites": [
                "instance.show()"
            ],
            "updatePoint": {
                "line": 247,
                "column": 71
            },
            "line": 247,
            "code": "  it('does not show tooltip if the reference has a `disabled` attribute', () => {\n    const ref = h();\n    ref.setAttribute('disabled', 'disabled');\n    instance = createTippy(ref, defaultProps);\n    instance.show();\n    expect(instance.state.isVisible).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "bails out if already visible",
            "suites": [
                "instance.show()"
            ],
            "updatePoint": {
                "line": 254,
                "column": 34
            },
            "line": 254,
            "code": "  it('bails out if already visible', () => {\n    const spy = jest.fn();\n    instance = createTippy(h(), { ...defaultProps,\n      onShow: spy\n    });\n    instance.show();\n    instance.show();\n    expect(spy).toHaveBeenCalledTimes(1);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "changes state.isVisible to false",
            "suites": [
                "instance.hide()"
            ],
            "updatePoint": {
                "line": 265,
                "column": 38
            },
            "line": 265,
            "code": "  it('changes state.isVisible to false', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.hide();\n    expect(instance.state.isVisible).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removes the popper element from the DOM after hiding",
            "suites": [
                "instance.hide()"
            ],
            "updatePoint": {
                "line": 270,
                "column": 58
            },
            "line": 270,
            "code": "  it('removes the popper element from the DOM after hiding', () => {\n    instance = createTippy(h(), { ...defaultProps\n    });\n    instance.show();\n    jest.runAllTimers();\n    expect(document.body.contains(instance.popper)).toBe(true);\n    instance.hide();\n    jest.runAllTimers();\n    expect(document.body.contains(instance.popper)).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "bails out if already hidden",
            "suites": [
                "instance.hide()"
            ],
            "updatePoint": {
                "line": 280,
                "column": 33
            },
            "line": 280,
            "code": "  it('bails out if already hidden', () => {\n    const spy = jest.fn();\n    instance = createTippy(h(), { ...defaultProps,\n      onHide: spy\n    });\n    instance.hide();\n    instance.hide();\n    expect(spy).toHaveBeenCalledTimes(0);\n    instance.show();\n    instance.hide();\n    instance.hide();\n    expect(spy).toHaveBeenCalledTimes(1);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets state.isEnabled to `true`",
            "suites": [
                "instance.enable()"
            ],
            "updatePoint": {
                "line": 295,
                "column": 36
            },
            "line": 295,
            "code": "  it('sets state.isEnabled to `true`', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.enable();\n    expect(instance.state.isEnabled).toBe(true);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "allows a tippy to be shown",
            "suites": [
                "instance.enable()"
            ],
            "updatePoint": {
                "line": 300,
                "column": 32
            },
            "line": 300,
            "code": "  it('allows a tippy to be shown', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.enable();\n    instance.show();\n    expect(instance.state.isVisible).toBe(true);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets state.isEnabled to `false`",
            "suites": [
                "instance.disable()"
            ],
            "updatePoint": {
                "line": 308,
                "column": 37
            },
            "line": 308,
            "code": "  it('sets state.isEnabled to `false`', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.disable();\n    expect(instance.state.isEnabled).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "disallows a tippy to be shown",
            "suites": [
                "instance.disable()"
            ],
            "updatePoint": {
                "line": 313,
                "column": 35
            },
            "line": 313,
            "code": "  it('disallows a tippy to be shown', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.disable();\n    instance.show();\n    expect(instance.state.isVisible).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hides the instance if visible",
            "suites": [
                "instance.disable()"
            ],
            "updatePoint": {
                "line": 319,
                "column": 35
            },
            "line": 319,
            "code": "  it('hides the instance if visible', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.show();\n    instance.disable();\n    expect(instance.state.isVisible).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets the new props by merging them with the current instance",
            "suites": [
                "instance.setProps()"
            ],
            "updatePoint": {
                "line": 327,
                "column": 66
            },
            "line": 327,
            "code": "  it('sets the new props by merging them with the current instance', () => {\n    instance = createTippy(h(), defaultProps);\n    expect(instance.props.arrow).toBe(defaultProps.arrow);\n    expect(instance.props.duration).toBe(defaultProps.duration);\n    instance.setProps({\n      arrow: !defaultProps.arrow,\n      duration: 82\n    });\n    expect(instance.props.arrow).toBe(!defaultProps.arrow);\n    expect(instance.props.duration).toBe(82);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "redraws the tooltip by creating a new popper element",
            "suites": [
                "instance.setProps()"
            ],
            "updatePoint": {
                "line": 338,
                "column": 58
            },
            "line": 338,
            "code": "  it('redraws the tooltip by creating a new popper element', () => {\n    instance = createTippy(h(), defaultProps);\n    expect(instance.popper.querySelector('.__NAMESPACE_PREFIX__-arrow')).not.toBeNull();\n    instance.setProps({\n      arrow: false\n    });\n    expect(instance.popper.querySelector('.__NAMESPACE_PREFIX__-arrow')).toBeNull();\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "popper._tippy is defined with the correct instance",
            "suites": [
                "instance.setProps()"
            ],
            "updatePoint": {
                "line": 346,
                "column": 56
            },
            "line": 346,
            "code": "  it('popper._tippy is defined with the correct instance', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.setProps({\n      arrow: true\n    });\n    expect(instance.popper._tippy).toBe(instance);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "changing `trigger` or `touchHold` changes listeners",
            "suites": [
                "instance.setProps()"
            ],
            "updatePoint": {
                "line": 353,
                "column": 57
            },
            "line": 353,
            "code": "  it('changing `trigger` or `touchHold` changes listeners', () => {\n    const ref = h();\n    instance = createTippy(ref, defaultProps);\n    instance.setProps({\n      trigger: 'click'\n    });\n    fireEvent.mouseEnter(ref);\n    expect(instance.state.isVisible).toBe(false);\n    fireEvent.click(ref);\n    expect(instance.state.isVisible).toBe(true);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does nothing if the instance is destroyed",
            "suites": [
                "instance.setProps()"
            ],
            "updatePoint": {
                "line": 364,
                "column": 47
            },
            "line": 364,
            "code": "  it('does nothing if the instance is destroyed', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.destroy();\n    instance.setProps({\n      content: 'hello'\n    });\n    expect(instance.props.content).not.toBe('hello');\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "correctly removes stale `aria-expanded` attributes",
            "suites": [
                "instance.setProps()"
            ],
            "updatePoint": {
                "line": 372,
                "column": 56
            },
            "line": 372,
            "code": "  it('correctly removes stale `aria-expanded` attributes', () => {\n    instance = createTippy(h(), { ...defaultProps,\n      interactive: true\n    });\n    const triggerTarget = h();\n    expect(instance.reference.getAttribute('aria-expanded')).toBe('false');\n    instance.setProps({\n      interactive: false\n    });\n    expect(instance.reference.getAttribute('aria-expanded')).toBe(null);\n    instance.setProps({\n      triggerTarget,\n      interactive: true\n    });\n    expect(instance.reference.getAttribute('aria-expanded')).toBe(null);\n    expect(triggerTarget.getAttribute('aria-expanded')).toBe('false');\n    instance.setProps({\n      triggerTarget: null\n    });\n    expect(instance.reference.getAttribute('aria-expanded')).toBe('false');\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works like set({ content: newContent })",
            "suites": [
                "instance.setContent()"
            ],
            "updatePoint": {
                "line": 395,
                "column": 45
            },
            "line": 395,
            "code": "  it('works like set({ content: newContent })', () => {\n    instance = createTippy(h(), defaultProps);\n    const content = 'Hello!';\n    instance.setContent(content);\n    expect(instance.props.content).toBe(content);\n    expect(getChildren(instance.popper).content.textContent).toBe(content);\n    const div = document.createElement('div');\n    instance.setContent(div);\n    expect(instance.props.content).toBe(div);\n    expect(getChildren(instance.popper).content.firstElementChild).toBe(div);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "isEnabled",
            "suites": [
                "instance.state"
            ],
            "updatePoint": {
                "line": 408,
                "column": 15
            },
            "line": 408,
            "code": "  it('isEnabled', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.show();\n    expect(instance.state.isVisible).toBe(true);\n    instance.state.isEnabled = false;\n    instance.hide();\n    expect(instance.state.isVisible).toBe(true);\n    instance.state.isEnabled = true;\n    instance.hide();\n    expect(instance.state.isVisible).toBe(false);\n    instance.state.isEnabled = false;\n    instance.show();\n    expect(instance.state.isVisible).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "isVisible",
            "suites": [
                "instance.state"
            ],
            "updatePoint": {
                "line": 422,
                "column": 15
            },
            "line": 422,
            "code": "  it('isVisible', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.show();\n    expect(instance.state.isVisible).toBe(true);\n    instance.hide();\n    expect(instance.state.isVisible).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "isShown",
            "suites": [
                "instance.state"
            ],
            "updatePoint": {
                "line": 429,
                "column": 13
            },
            "line": 429,
            "code": "  it('isShown', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.show();\n    expect(instance.state.isShown).toBe(false);\n    jest.runAllTimers();\n    expect(instance.state.isShown).toBe(true);\n    instance.hide();\n    expect(instance.state.isShown).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should correctly add and clear instances",
            "suites": [
                "mountedInstances"
            ],
            "updatePoint": {
                "line": 440,
                "column": 46
            },
            "line": 440,
            "code": "  it('should correctly add and clear instances', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.show();\n    jest.runAllTimers();\n    expect(mountedInstances[0]).toBe(instance);\n    const instance2 = createTippy(h(), defaultProps);\n    instance2.show();\n    jest.runAllTimers();\n    expect(mountedInstances[0]).toBe(instance);\n    expect(mountedInstances[1]).toBe(instance2);\n    instance.destroy();\n    expect(mountedInstances[0]).toBe(instance2);\n    instance2.hide();\n    expect(mountedInstances.length).toBe(0);\n    instance2.destroy();\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add on mount and remove on unmount",
            "suites": [
                "updateIOSClass"
            ],
            "line": 461,
            "code": "  it.skip('should add on mount and remove on unmount', () => {",
            "file": "integration/createTippy.test.js",
            "skipped": true,
            "dir": "test"
        },
        {
            "name": "should only remove if mountedInstances.length is 0",
            "suites": [
                "updateIOSClass"
            ],
            "line": 470,
            "code": "  it.skip('should only remove if mountedInstances.length is 0', () => {",
            "file": "integration/createTippy.test.js",
            "skipped": true,
            "dir": "test"
        },
        {
            "name": "unmounts the tippy from the DOM",
            "suites": [
                "instance.unmount()"
            ],
            "updatePoint": {
                "line": 484,
                "column": 37
            },
            "line": 484,
            "code": "  it('unmounts the tippy from the DOM', () => {\n    instance = createTippy(h(), defaultProps);\n    instance.show();\n    jest.runAllTimers();\n    expect(document.body.contains(instance.popper)).toBe(true);\n    instance.unmount();\n    expect(document.body.contains(instance.popper)).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "unmounts subtree poppers",
            "suites": [
                "instance.unmount()"
            ],
            "updatePoint": {
                "line": 492,
                "column": 30
            },
            "line": 492,
            "code": "  it('unmounts subtree poppers', () => {\n    const content = h();\n    const subNode = h();\n    content.appendChild(subNode);\n    const subInstance = createTippy(subNode, { ...defaultProps,\n      interactive: true\n    });\n    subInstance.show();\n    jest.runAllTimers();\n    instance = createTippy(h(), { ...defaultProps,\n      content\n    });\n    instance.show();\n    jest.runAllTimers();\n    expect(document.body.contains(instance.popper)).toBe(true);\n    expect(document.body.contains(subInstance.popper)).toBe(true);\n    instance.unmount();\n    expect(document.body.contains(instance.popper)).toBe(false);\n    expect(instance.popper.contains(subInstance.popper)).toBe(false);\n  });",
            "file": "integration/createTippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "true: sets `data-animatefill` attribute on tooltip",
            "suites": [
                "animateFill"
            ],
            "updatePoint": {
                "line": 10,
                "column": 56
            },
            "line": 10,
            "code": "  it('true: sets `data-animatefill` attribute on tooltip', () => {\n    const ref = h();\n    const instance = tippy(ref, {\n      animateFill: true\n    });\n    expect(getChildren(instance.popper).box.hasAttribute('data-animatefill')).toBe(true);\n  });",
            "file": "integration/plugins/animateFill.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "false: does not set `data-animatefill` attribute on tooltip",
            "suites": [
                "animateFill"
            ],
            "updatePoint": {
                "line": 17,
                "column": 65
            },
            "line": 17,
            "code": "  it('false: does not set `data-animatefill` attribute on tooltip', () => {\n    const ref = h();\n    const instance = tippy(ref, {\n      animateFill: false\n    });\n    expect(getChildren(instance.popper).box.hasAttribute('data-animatefill')).toBe(false);\n  });",
            "file": "integration/plugins/animateFill.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "true: sets `transitionDelay` style on content element",
            "suites": [
                "animateFill"
            ],
            "updatePoint": {
                "line": 24,
                "column": 59
            },
            "line": 24,
            "code": "  it('true: sets `transitionDelay` style on content element', () => {\n    const instance = tippy(h(), {\n      animateFill: true,\n      duration: 120\n    });\n    const {\n      content\n    } = getChildren(instance.popper);\n    instance.show();\n    jest.runAllTimers();\n    expect(content.style.transitionDelay).toBe(`${120 / 10}ms`);\n  });",
            "file": "integration/plugins/animateFill.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "false: does not set `transitionDelay` style on content element",
            "suites": [
                "animateFill"
            ],
            "updatePoint": {
                "line": 36,
                "column": 68
            },
            "line": 36,
            "code": "  it('false: does not set `transitionDelay` style on content element', () => {\n    const instance = tippy(h(), {\n      animateFill: false,\n      duration: 120\n    });\n    const {\n      content\n    } = getChildren(instance.popper);\n    instance.show();\n    jest.runAllTimers();\n    expect(content.style.transitionDelay).toBe('');\n  });",
            "file": "integration/plugins/animateFill.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "true: sets `animation: \"shift-away\"",
            "suites": [
                "animateFill"
            ],
            "updatePoint": {
                "line": 48,
                "column": 41
            },
            "line": 48,
            "code": "  it('true: sets `animation: \"shift-away\"', () => {\n    const instance = tippy(h(), {\n      animateFill: true\n    });\n    expect(instance.props.animation).toBe('shift-away');\n  });",
            "file": "integration/plugins/animateFill.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "false: does not set `animation: \"shift-away\"",
            "suites": [
                "animateFill"
            ],
            "updatePoint": {
                "line": 54,
                "column": 50
            },
            "line": 54,
            "code": "  it('false: does not set `animation: \"shift-away\"', () => {\n    const instance = tippy(h(), {\n      animateFill: false\n    });\n    expect(instance.props.animation).not.toBe('shift-away');\n  });",
            "file": "integration/plugins/animateFill.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets `data-state` correctly",
            "suites": [
                "animateFill"
            ],
            "updatePoint": {
                "line": 60,
                "column": 33
            },
            "line": 60,
            "code": "  it('sets `data-state` correctly', () => {\n    const instance = tippy(h(), {\n      animateFill: true\n    });\n    const {\n      backdrop\n    } = getChildren(instance.popper);\n    expect(backdrop.getAttribute('data-state')).toBe('hidden');\n    instance.show();\n    jest.runAllTimers();\n    expect(backdrop.getAttribute('data-state')).toBe('visible');\n    instance.hide();\n    expect(backdrop.getAttribute('data-state')).toBe('hidden');\n  });",
            "file": "integration/plugins/animateFill.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "true: should error when render function is not default",
            "suites": [
                "animateFill"
            ],
            "updatePoint": {
                "line": 74,
                "column": 60
            },
            "line": 74,
            "code": "  it('true: should error when render function is not default', () => {\n    const spy = jest.spyOn(console, 'error');\n    tippy(h(), {\n      animateFill: true,\n\n      render() {\n        return {\n          popper: document.createElement('div')\n        };\n      }\n\n    });\n    expect(spy).toHaveBeenCalledWith(...getFormattedMessage('The `animateFill` plugin requires the default render function.'));\n  });",
            "file": "integration/plugins/animateFill.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "false: should not error when render function is not default",
            "suites": [
                "animateFill"
            ],
            "updatePoint": {
                "line": 88,
                "column": 65
            },
            "line": 88,
            "code": "  it('false: should not error when render function is not default', () => {\n    const spy = jest.spyOn(console, 'error');\n    tippy(h(), {\n      animateFill: false,\n\n      render() {\n        return {\n          popper: document.createElement('div')\n        };\n      }\n\n    });\n    expect(spy).not.toHaveBeenCalled();\n  });",
            "file": "integration/plugins/animateFill.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not error if render fn is not default",
            "suites": [
                "animateFill"
            ],
            "updatePoint": {
                "line": 102,
                "column": 50
            },
            "line": 102,
            "code": "  it('should not error if render fn is not default', () => {\n    const spy = jest.spyOn(console, 'error');\n    tippy(h(), {\n      animateFill: false,\n\n      render() {\n        return {\n          popper: document.createElement('div')\n        };\n      }\n\n    });\n  });",
            "file": "integration/plugins/animateFill.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "true: follows both axes",
            "suites": [
                "followCursor"
            ],
            "updatePoint": {
                "line": 39,
                "column": 29
            },
            "line": 39,
            "code": "  it('true: follows both axes', () => {\n    placements.forEach(placement => {\n      instance = tippy(h(), {\n        followCursor: true,\n        placement\n      });\n      fireEvent.mouseEnter(instance.reference, defaultPosition);\n      jest.runAllTimers();\n      fireEvent.mouseMove(instance.reference, first);\n      rect = instance.props.getReferenceClientRect();\n      matches({\n        top: first.clientY,\n        bottom: first.clientY,\n        left: first.clientX,\n        right: first.clientX\n      });\n      fireEvent.mouseMove(instance.reference, second);\n      rect = instance.props.getReferenceClientRect();\n      matches({\n        top: second.clientY,\n        bottom: second.clientY,\n        left: second.clientX,\n        right: second.clientX\n      });\n    });\n  });",
            "file": "integration/plugins/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "\"horizontal\": follows x-axis",
            "suites": [
                "followCursor"
            ],
            "updatePoint": {
                "line": 65,
                "column": 34
            },
            "line": 65,
            "code": "  it('\"horizontal\": follows x-axis', () => {\n    placements.forEach(placement => {\n      instance = tippy(h(), {\n        followCursor: 'horizontal',\n        placement\n      });\n      const referenceRect = instance.reference.getBoundingClientRect();\n      fireEvent.mouseEnter(instance.reference, defaultPosition);\n      jest.runAllTimers();\n      fireEvent.mouseMove(instance.reference, first);\n      rect = instance.props.getReferenceClientRect();\n      matches({\n        top: referenceRect.top,\n        bottom: referenceRect.bottom,\n        left: first.clientX,\n        right: first.clientX\n      });\n      fireEvent.mouseMove(instance.reference, second);\n      rect = instance.props.getReferenceClientRect();\n      matches({\n        top: referenceRect.top,\n        bottom: referenceRect.bottom,\n        left: second.clientX,\n        right: second.clientX\n      });\n    });\n  });",
            "file": "integration/plugins/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "\"vertical\": follows y-axis",
            "suites": [
                "followCursor"
            ],
            "updatePoint": {
                "line": 92,
                "column": 32
            },
            "line": 92,
            "code": "  it('\"vertical\": follows y-axis', () => {\n    placements.forEach(placement => {\n      instance = tippy(h(), {\n        followCursor: 'vertical',\n        placement\n      });\n      const referenceRect = instance.reference.getBoundingClientRect();\n      fireEvent.mouseEnter(instance.reference, defaultPosition);\n      jest.runAllTimers();\n      fireEvent.mouseMove(instance.reference, first);\n      rect = instance.props.getReferenceClientRect();\n      matches({\n        top: first.clientY,\n        bottom: first.clientY,\n        left: referenceRect.left,\n        right: referenceRect.right\n      });\n      fireEvent.mouseMove(instance.reference, second);\n      rect = instance.props.getReferenceClientRect();\n      matches({\n        top: second.clientY,\n        bottom: second.clientY,\n        left: referenceRect.left,\n        right: referenceRect.right\n      });\n    });\n  });",
            "file": "integration/plugins/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "\"initial\": only follows once",
            "suites": [
                "followCursor"
            ],
            "updatePoint": {
                "line": 119,
                "column": 34
            },
            "line": 119,
            "code": "  it('\"initial\": only follows once', () => {\n    placements.forEach(placement => {\n      instance = tippy(h(), {\n        followCursor: 'initial',\n        placement\n      });\n      fireEvent.mouseMove(instance.reference, first);\n      instance.show();\n      jest.runAllTimers();\n      fireEvent.mouseMove(instance.reference, first);\n      rect = instance.props.getReferenceClientRect();\n      matches({\n        top: first.clientY,\n        bottom: first.clientY,\n        left: first.clientX,\n        right: first.clientX\n      });\n      fireEvent.mouseMove(instance.reference, second);\n      rect = instance.props.getReferenceClientRect();\n      matches({\n        top: first.clientY,\n        bottom: first.clientY,\n        left: first.clientX,\n        right: first.clientX\n      });\n    });\n  });",
            "file": "integration/plugins/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is at correct position after a delay",
            "suites": [
                "followCursor"
            ],
            "updatePoint": {
                "line": 146,
                "column": 42
            },
            "line": 146,
            "code": "  it('is at correct position after a delay', () => {\n    instance = tippy(h(), {\n      followCursor: true,\n      delay: 100\n    });\n    fireEvent.mouseEnter(instance.reference, defaultPosition);\n    jest.runAllTimers();\n    fireEvent.mouseMove(instance.reference, first);\n    jest.advanceTimersByTime(100);\n    rect = instance.props.getReferenceClientRect();\n    matches({\n      top: first.clientY,\n      bottom: first.clientY,\n      left: first.clientX,\n      right: first.clientX\n    });\n  });",
            "file": "integration/plugins/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is at correct position after a content update",
            "suites": [
                "followCursor"
            ],
            "updatePoint": {
                "line": 163,
                "column": 51
            },
            "line": 163,
            "code": "  it('is at correct position after a content update', () => {\n    instance = tippy(h(), {\n      followCursor: true\n    });\n    fireEvent.mouseEnter(instance.reference, defaultPosition);\n    jest.runAllTimers();\n    fireEvent.mouseMove(instance.reference, first);\n    rect = instance.props.getReferenceClientRect();\n    matches({\n      top: first.clientY,\n      bottom: first.clientY,\n      left: first.clientX,\n      right: first.clientX\n    });\n    instance.setContent('x');\n    jest.runAllTimers();\n    rect = instance.props.getReferenceClientRect();\n    matches({\n      top: first.clientY,\n      bottom: first.clientY,\n      left: first.clientX,\n      right: first.clientX\n    });\n  });",
            "file": "integration/plugins/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not continue to follow if interactive: true and cursor is over popper",
            "suites": [
                "followCursor"
            ],
            "updatePoint": {
                "line": 187,
                "column": 80
            },
            "line": 187,
            "code": "  it('does not continue to follow if interactive: true and cursor is over popper', () => {\n    instance = tippy(h(), {\n      followCursor: 'horizontal',\n      interactive: true\n    });\n    fireEvent.mouseEnter(instance.reference, defaultPosition);\n    jest.runAllTimers();\n    fireEvent.mouseMove(instance.reference, first);\n    const referenceRect = instance.reference.getBoundingClientRect();\n    rect = instance.props.getReferenceClientRect();\n    fireEvent.mouseMove(instance.reference, second);\n    matches({\n      top: referenceRect.top,\n      bottom: referenceRect.bottom,\n      left: first.clientX,\n      right: first.clientX\n    });\n  });",
            "file": "integration/plugins/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should reset popperInstance.reference if triggered by `focus`",
            "suites": [
                "followCursor"
            ],
            "updatePoint": {
                "line": 205,
                "column": 67
            },
            "line": 205,
            "code": "  it('should reset popperInstance.reference if triggered by `focus`', () => {\n    instance = tippy(h(), {\n      followCursor: true,\n      flip: false,\n      delay: 1000\n    });\n    fireEvent.mouseEnter(instance.reference, defaultPosition);\n    jest.runAllTimers();\n    fireEvent.mouseMove(instance.reference, first);\n    fireEvent.mouseLeave(instance.reference);\n    fireEvent.mouseMove(instance.reference, second);\n    instance.hide();\n    fireEvent.focus(instance.reference);\n    expect(instance.props.getReferenceClientRect).toBe(null);\n  });",
            "file": "integration/plugins/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "\"initial\": does not update if triggered again while still visible",
            "suites": [
                "followCursor"
            ],
            "updatePoint": {
                "line": 220,
                "column": 71
            },
            "line": 220,
            "code": "  it('\"initial\": does not update if triggered again while still visible', () => {\n    instance = tippy(h(), {\n      followCursor: 'initial'\n    });\n    fireEvent.mouseMove(instance.reference, first);\n    instance.show();\n    jest.runAllTimers();\n    fireEvent.mouseMove(instance.reference, second);\n    rect = instance.props.getReferenceClientRect();\n    matches({\n      top: first.clientY,\n      bottom: first.clientY,\n      left: first.clientX,\n      right: first.clientX\n    });\n  });",
            "file": "integration/plugins/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works with manual trigger and .show()",
            "suites": [
                "followCursor"
            ],
            "updatePoint": {
                "line": 236,
                "column": 43
            },
            "line": 236,
            "code": "  it('works with manual trigger and .show()', () => {\n    instance = tippy(h(), {\n      followCursor: true,\n      trigger: 'manual'\n    });\n    instance.show();\n    jest.runAllTimers();\n    fireEvent.mouseMove(document, first);\n    rect = instance.props.getReferenceClientRect();\n    matches({\n      top: first.clientY,\n      bottom: first.clientY,\n      left: first.clientX,\n      right: first.clientX\n    });\n  });",
            "file": "integration/plugins/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is cleaned up if untriggered before showing",
            "suites": [
                "followCursor"
            ],
            "updatePoint": {
                "line": 252,
                "column": 49
            },
            "line": 252,
            "code": "  it('is cleaned up if untriggered before showing', () => {\n    instance = tippy(h(), {\n      followCursor: true,\n      delay: 100\n    });\n    fireEvent.mouseEnter(instance.reference, first);\n    fireEvent.mouseLeave(instance.reference);\n    fireEvent.mouseMove(instance.reference, second);\n    expect(instance.props.getReferenceClientRect).toBe(null);\n  });",
            "file": "integration/plugins/followCursor.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not have its popper modifier removed when updating popperOptions",
            "suites": [
                "inlinePositioning"
            ],
            "updatePoint": {
                "line": 8,
                "column": 75
            },
            "line": 8,
            "code": "  it('does not have its popper modifier removed when updating popperOptions', () => {\n    const instance = tippy(h());\n    instance.setProps({\n      popperOptions: {}\n    });\n    expect(instance.props.popperOptions).toMatchSnapshot();\n  });",
            "file": "integration/plugins/inlinePositioning.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appends the tippy to the node",
            "suites": [
                "appendTo",
                "Element"
            ],
            "updatePoint": {
                "line": 11,
                "column": 37
            },
            "line": 11,
            "code": "    it('appends the tippy to the node', () => {\n      const node = h();\n      const instance = tippy(h(), {\n        appendTo: node\n      });\n      instance.show();\n      jest.runAllTimers();\n      expect(node.contains(instance.popper)).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appends the tippy to the node",
            "suites": [
                "appendTo",
                "Function"
            ],
            "updatePoint": {
                "line": 22,
                "column": 37
            },
            "line": 22,
            "code": "    it('appends the tippy to the node', () => {\n      const node = h();\n      const instance = tippy(h(), {\n        appendTo: () => node\n      });\n      instance.show();\n      jest.runAllTimers();\n      expect(node.contains(instance.popper)).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appends the tippy to the node",
            "suites": [
                "appendTo",
                "\"parent\""
            ],
            "updatePoint": {
                "line": 33,
                "column": 37
            },
            "line": 33,
            "code": "    it('appends the tippy to the node', () => {\n      const node = h();\n      const instance = tippy(h('div', {}, node), {\n        appendTo: 'parent'\n      });\n      instance.show();\n      jest.runAllTimers();\n      expect(node.parentNode.contains(instance.popper)).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works correctly with \"describedby\"",
            "suites": [
                "aria",
                "content"
            ],
            "updatePoint": {
                "line": 46,
                "column": 42
            },
            "line": 46,
            "code": "    it('works correctly with \"describedby\"', () => {\n      const instance = tippy(h(), {\n        aria: {\n          content: 'describedby'\n        }\n      });\n      instance.show();\n      jest.runAllTimers();\n      expect(instance.reference.getAttribute('aria-describedby')).toBe(`__NAMESPACE_PREFIX__-${instance.id}`);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works correctly with \"labelledby\"",
            "suites": [
                "aria",
                "content"
            ],
            "updatePoint": {
                "line": 56,
                "column": 41
            },
            "line": 56,
            "code": "    it('works correctly with \"labelledby\"', () => {\n      const instance = tippy(h(), {\n        aria: {\n          content: 'labelledby'\n        }\n      });\n      instance.show();\n      jest.runAllTimers();\n      expect(instance.reference.getAttribute('aria-labelledby')).toBe(`__NAMESPACE_PREFIX__-${instance.id}`);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not add `aria-expanded` attribute by default",
            "suites": [
                "aria",
                "content"
            ],
            "updatePoint": {
                "line": 66,
                "column": 57
            },
            "line": 66,
            "code": "    it('does not add `aria-expanded` attribute by default', () => {\n      const instance = tippy(h());\n      instance.show();\n      jest.runAllTimers();\n      expect(instance.reference.hasAttribute('aria-expanded')).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not set any attribute if `null` by default",
            "suites": [
                "aria",
                "expanded"
            ],
            "updatePoint": {
                "line": 74,
                "column": 55
            },
            "line": 74,
            "code": "    it('does not set any attribute if `null` by default', () => {\n      const instance = tippy(h());\n      instance.show();\n      jest.runAllTimers();\n      expect(instance.reference.hasAttribute('aria-expanded')).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets the attribute if interactive by default",
            "suites": [
                "aria",
                "expanded"
            ],
            "updatePoint": {
                "line": 80,
                "column": 52
            },
            "line": 80,
            "code": "    it('sets the attribute if interactive by default', () => {\n      const instance = tippy(h(), {\n        interactive: true\n      });\n      expect(instance.reference.getAttribute('aria-expanded')).toBe('false');\n      instance.show();\n      jest.runAllTimers();\n      expect(instance.reference.getAttribute('aria-expanded')).toBe('true');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not set attribute if interactive and explicitly set to false",
            "suites": [
                "aria",
                "expanded"
            ],
            "updatePoint": {
                "line": 89,
                "column": 73
            },
            "line": 89,
            "code": "    it('does not set attribute if interactive and explicitly set to false', () => {\n      const instance = tippy(h(), {\n        interactive: true,\n        aria: {\n          expanded: false\n        }\n      });\n      expect(instance.reference.hasAttribute('aria-expanded')).toBe(false);\n      instance.show();\n      jest.runAllTimers();\n      expect(instance.reference.hasAttribute('aria-expanded')).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is injected into the tippy node",
            "suites": [
                "content",
                "string"
            ],
            "updatePoint": {
                "line": 105,
                "column": 39
            },
            "line": 105,
            "code": "    it('is injected into the tippy node', () => {\n      const instance = tippy(h(), {\n        content: 'string'\n      });\n      instance.show();\n      jest.runAllTimers();\n      expect(getChildren(instance.popper).content).toMatchSnapshot();\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is injected into the tippy node",
            "suites": [
                "content",
                "Element"
            ],
            "updatePoint": {
                "line": 115,
                "column": 39
            },
            "line": 115,
            "code": "    it('is injected into the tippy node', () => {\n      const node = h();\n      node.textContent = 'string';\n      const instance = tippy(h(), {\n        content: node\n      });\n      instance.show();\n      jest.runAllTimers();\n      expect(getChildren(instance.popper).content).toMatchSnapshot();\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is injected into the tippy node",
            "suites": [
                "content",
                "DocumentFragment"
            ],
            "updatePoint": {
                "line": 127,
                "column": 39
            },
            "line": 127,
            "code": "    it('is injected into the tippy node', () => {\n      const fragment = document.createDocumentFragment();\n      const node = h();\n      fragment.appendChild(node);\n      const instance = tippy(h(), {\n        content: fragment\n      });\n      expect(getChildren(instance.popper).content).toMatchSnapshot();\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is injected into the tippy node",
            "suites": [
                "content",
                "Function"
            ],
            "updatePoint": {
                "line": 138,
                "column": 39
            },
            "line": 138,
            "code": "    it('is injected into the tippy node', () => {\n      const instance = tippy(h(), {\n        content: () => 'string'\n      });\n      instance.show();\n      jest.runAllTimers();\n      expect(getChildren(instance.popper).content).toMatchSnapshot();\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "delays after a trigger",
            "suites": [
                "delay",
                "number"
            ],
            "updatePoint": {
                "line": 150,
                "column": 30
            },
            "line": 150,
            "code": "    it('delays after a trigger', () => {\n      const instance = tippy(h(), {\n        delay: 128\n      });\n      fireEvent.mouseEnter(instance.reference);\n      jest.advanceTimersByTime(127);\n      expect(instance.state.isVisible).toBe(false);\n      jest.advanceTimersByTime(1);\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.mouseLeave(instance.reference);\n      expect(instance.state.isVisible).toBe(true);\n      jest.advanceTimersByTime(127);\n      expect(instance.state.isVisible).toBe(true);\n      jest.advanceTimersByTime(1);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "delays after a trigger",
            "suites": [
                "delay",
                "tuple"
            ],
            "updatePoint": {
                "line": 168,
                "column": 30
            },
            "line": 168,
            "code": "    it('delays after a trigger', () => {\n      const instance = tippy(h(), {\n        delay: [242, 199]\n      });\n      fireEvent.mouseEnter(instance.reference);\n      jest.advanceTimersByTime(241);\n      expect(instance.state.isVisible).toBe(false);\n      jest.advanceTimersByTime(1);\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.mouseLeave(instance.reference);\n      expect(instance.state.isVisible).toBe(true);\n      jest.advanceTimersByTime(198);\n      expect(instance.state.isVisible).toBe(true);\n      jest.advanceTimersByTime(1);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is cleared if untriggered before timeout finishes",
            "suites": [
                "delay",
                "tuple"
            ],
            "updatePoint": {
                "line": 185,
                "column": 55
            },
            "line": 185,
            "code": "  it('is cleared if untriggered before timeout finishes', () => {\n    const instance = tippy(h(), {\n      delay: 128\n    });\n    fireEvent.mouseEnter(instance.reference);\n    jest.advanceTimersByTime(100);\n    fireEvent.mouseLeave(instance.reference);\n    jest.advanceTimersByTime(28);\n    expect(instance.state.isVisible).toBe(false);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is cleared if the cursor leaves the popper then re-enters",
            "suites": [
                "delay",
                "tuple"
            ],
            "updatePoint": {
                "line": 195,
                "column": 63
            },
            "line": 195,
            "code": "  it('is cleared if the cursor leaves the popper then re-enters', () => {\n    const instance = tippy(h(), {\n      delay: [0, 100],\n      interactive: true\n    });\n    fireEvent.mouseEnter(instance.reference);\n    jest.runAllTimers();\n    fireEvent.mouseEnter(instance.popper);\n    fireEvent.mouseLeave(instance.popper);\n    jest.advanceTimersByTime(99);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.mouseEnter(instance.popper);\n    jest.advanceTimersByTime(1);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.mouseLeave(instance.popper);\n    fireEvent.mouseMove(document.body, {\n      clientX: 1000,\n      clientY: 1000\n    });\n    jest.advanceTimersByTime(100);\n    expect(instance.state.isVisible).toBe(false);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets the CSS transition duration",
            "suites": [
                "duration",
                "number"
            ],
            "updatePoint": {
                "line": 220,
                "column": 40
            },
            "line": 220,
            "code": "    it('sets the CSS transition duration', () => {\n      const instance = tippy(h(), {\n        duration: 59\n      });\n      const box = getChildren(instance.popper).box;\n      instance.show();\n      jest.runAllTimers();\n      expect(box.style.transitionDuration).toBe('59ms');\n      instance.hide();\n      expect(box.style.transitionDuration).toBe('59ms');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets the CSS transition duration",
            "suites": [
                "duration",
                "tuple"
            ],
            "updatePoint": {
                "line": 233,
                "column": 40
            },
            "line": 233,
            "code": "    it('sets the CSS transition duration', () => {\n      const instance = tippy(h(), {\n        duration: [1, 218]\n      });\n      const box = getChildren(instance.popper).box;\n      instance.show();\n      jest.runAllTimers();\n      expect(box.style.transitionDuration).toBe('1ms');\n      instance.hide();\n      expect(box.style.transitionDuration).toBe('218ms');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets a virtual element as the popperInstance reference",
            "suites": [
                "getReferenceClientRect"
            ],
            "updatePoint": {
                "line": 247,
                "column": 60
            },
            "line": 247,
            "code": "  it('sets a virtual element as the popperInstance reference', () => {\n    const getBoundingClientRect = () => ({\n      width: 0,\n      height: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    });\n\n    const instance = tippy(h(), {\n      getReferenceClientRect: getBoundingClientRect\n    });\n    instance.show();\n    jest.runAllTimers();\n    expect(instance.popperInstance.state.elements.reference.getBoundingClientRect).toBe(getBoundingClientRect);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "leaves the popperInstance reference as default when null",
            "suites": [
                "getReferenceClientRect"
            ],
            "updatePoint": {
                "line": 264,
                "column": 62
            },
            "line": 264,
            "code": "  it('leaves the popperInstance reference as default when null', () => {\n    const instance = tippy(h());\n    instance.show();\n    jest.runAllTimers();\n    expect(instance.popperInstance.state.elements.reference).toBe(instance.reference);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be called on document mousedown if provided",
            "suites": [
                "onClickOutside"
            ],
            "updatePoint": {
                "line": 272,
                "column": 56
            },
            "line": 272,
            "code": "  it('should be called on document mousedown if provided', () => {\n    const onClickOutside = jest.fn();\n    const instance = tippy(h(), {\n      onClickOutside\n    });\n    instance.show();\n    jest.runAllTimers();\n    const outsideClickEvent = createEvent.mouseDown(document.body);\n    fireEvent(document.body, outsideClickEvent); // fire events multiple times to be sure its called once\n\n    fireEvent(document.body, outsideClickEvent);\n    fireEvent(document.body, outsideClickEvent);\n    expect(onClickOutside).toHaveBeenCalledTimes(1);\n    expect(onClickOutside).toHaveBeenCalledWith(instance, outsideClickEvent);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not be called if instance not shown",
            "suites": [
                "onClickOutside"
            ],
            "updatePoint": {
                "line": 287,
                "column": 48
            },
            "line": 287,
            "code": "  it('should not be called if instance not shown', () => {\n    const onClickOutside = jest.fn();\n    tippy(h(), {\n      onClickOutside\n    });\n    fireEvent.mouseDown(document.body);\n    expect(onClickOutside).toHaveBeenCalledTimes(0);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not be called if instance already hidden",
            "suites": [
                "onClickOutside"
            ],
            "updatePoint": {
                "line": 295,
                "column": 53
            },
            "line": 295,
            "code": "  it('should not be called if instance already hidden', () => {\n    const onClickOutside = jest.fn();\n    const instance = tippy(h(), {\n      onClickOutside\n    });\n    instance.show();\n    jest.runAllTimers();\n    instance.hide();\n    jest.runAllTimers();\n    fireEvent.mouseDown(document.body);\n    expect(onClickOutside).toHaveBeenCalledTimes(0);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hides the tippy on outside mousedown",
            "suites": [
                "hideOnClick",
                "true"
            ],
            "updatePoint": {
                "line": 310,
                "column": 44
            },
            "line": 310,
            "code": "    it('hides the tippy on outside mousedown', () => {\n      const instance = tippy(h(), {\n        hideOnClick: true\n      });\n      instance.show();\n      jest.runAllTimers();\n      fireEvent.mouseDown(document.body);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hides the tippy on inside mousedown",
            "suites": [
                "hideOnClick",
                "true"
            ],
            "updatePoint": {
                "line": 319,
                "column": 43
            },
            "line": 319,
            "code": "    it('hides the tippy on inside mousedown', () => {\n      const instance = tippy(h(), {\n        hideOnClick: true\n      });\n      instance.show();\n      jest.runAllTimers();\n      fireEvent.mouseDown(instance.reference);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not hide tippy upon clicking popper",
            "suites": [
                "hideOnClick",
                "true"
            ],
            "updatePoint": {
                "line": 328,
                "column": 48
            },
            "line": 328,
            "code": "    it('does not hide tippy upon clicking popper', () => {\n      const instance = tippy(h(), {\n        hideOnClick: true,\n        interactive: true\n      });\n      instance.show();\n      jest.runAllTimers();\n      fireEvent.mouseDown(instance.popper);\n      expect(instance.state.isVisible).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not hide on unintentional tap outside",
            "suites": [
                "hideOnClick",
                "true"
            ],
            "updatePoint": {
                "line": 338,
                "column": 50
            },
            "line": 338,
            "code": "    it('does not hide on unintentional tap outside', () => {\n      const instance = tippy(h(), {\n        hideOnClick: true\n      });\n      instance.show();\n      jest.runAllTimers();\n      fireEvent.touchStart(instance.popper);\n      fireEvent.touchMove(instance.popper);\n      fireEvent.touchEnd(instance.popper);\n      expect(instance.state.isVisible).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hides on intentional tap outside",
            "suites": [
                "hideOnClick",
                "true"
            ],
            "updatePoint": {
                "line": 349,
                "column": 40
            },
            "line": 349,
            "code": "    it('hides on intentional tap outside', () => {\n      const instance = tippy(h(), {\n        hideOnClick: true\n      });\n      instance.show();\n      jest.runAllTimers();\n      fireEvent.touchStart(instance.popper);\n      fireEvent.touchEnd(instance.popper);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not hide the tippy on outside mousedown",
            "suites": [
                "hideOnClick",
                "false"
            ],
            "updatePoint": {
                "line": 361,
                "column": 52
            },
            "line": 361,
            "code": "    it('does not hide the tippy on outside mousedown', () => {\n      const instance = tippy(h(), {\n        hideOnClick: false\n      });\n      instance.show();\n      jest.runAllTimers();\n      fireEvent.mouseDown(document.body);\n      expect(instance.state.isVisible).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not hide the tippy on inside mousedown",
            "suites": [
                "hideOnClick",
                "false"
            ],
            "updatePoint": {
                "line": 370,
                "column": 51
            },
            "line": 370,
            "code": "    it('does not hide the tippy on inside mousedown', () => {\n      const instance = tippy(h(), {\n        hideOnClick: false\n      });\n      instance.show();\n      jest.runAllTimers();\n      fireEvent.mouseDown(instance.reference);\n      expect(instance.state.isVisible).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not hide the tippy on outside mousedown",
            "suites": [
                "hideOnClick",
                "\"toggle\""
            ],
            "updatePoint": {
                "line": 381,
                "column": 52
            },
            "line": 381,
            "code": "    it('does not hide the tippy on outside mousedown', () => {\n      const instance = tippy(h(), {\n        hideOnClick: 'toggle'\n      });\n      instance.show();\n      jest.runAllTimers();\n      fireEvent.mouseDown(document.body);\n      expect(instance.state.isVisible).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hides the tippy on inside click",
            "suites": [
                "hideOnClick",
                "\"toggle\""
            ],
            "updatePoint": {
                "line": 390,
                "column": 39
            },
            "line": 390,
            "code": "    it('hides the tippy on inside click', () => {\n      const instance = tippy(h(), {\n        hideOnClick: 'toggle',\n        trigger: 'click'\n      });\n      instance.show();\n      jest.runAllTimers();\n      fireEvent.click(instance.reference);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores data-tippy-* attributes on the reference",
            "suites": [
                "ignoreAttributes",
                "true"
            ],
            "updatePoint": {
                "line": 404,
                "column": 56
            },
            "line": 404,
            "code": "    it('ignores data-tippy-* attributes on the reference', () => {\n      const instance = tippy(h('div', {\n        'data-tippy-animation': 'x'\n      }), {\n        animation: 'y',\n        ignoreAttributes: true\n      });\n      expect(instance.props.animation).toBe('y');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not ignore data-tippy-* attributes on the reference",
            "suites": [
                "ignoreAttributes",
                "false"
            ],
            "updatePoint": {
                "line": 415,
                "column": 64
            },
            "line": 415,
            "code": "    it('does not ignore data-tippy-* attributes on the reference', () => {\n      const instance = tippy(h('div', {\n        'data-tippy-animation': 'x'\n      }), {\n        animation: 'y',\n        ignoreAttributes: false\n      });\n      expect(instance.props.animation).toBe('x');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets pointer-events: none styles on show",
            "suites": [
                "interactive",
                "false"
            ],
            "updatePoint": {
                "line": 428,
                "column": 48
            },
            "line": 428,
            "code": "    it('sets pointer-events: none styles on show', () => {\n      const instance = tippy(h(), {\n        interactive: false\n      });\n      instance.show();\n      expect(instance.popper.style.pointerEvents).toBe('none');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not add `aria-expanded` attribute",
            "suites": [
                "interactive",
                "false"
            ],
            "updatePoint": {
                "line": 435,
                "column": 46
            },
            "line": 435,
            "code": "    it('does not add `aria-expanded` attribute', () => {\n      const instance = tippy(h(), {\n        interactive: false\n      });\n      expect(instance.reference.getAttribute('aria-expanded')).toBe(null);\n      instance.show();\n      jest.runAllTimers();\n      expect(instance.reference.getAttribute('aria-expanded')).toBe(null);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets no pointer-events styles on show",
            "suites": [
                "interactive",
                "true"
            ],
            "updatePoint": {
                "line": 446,
                "column": 45
            },
            "line": 446,
            "code": "    it('sets no pointer-events styles on show', () => {\n      const instance = tippy(h(), {\n        interactive: true\n      });\n      instance.show();\n      expect(instance.popper.style.pointerEvents).toBe('');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets pointer-events styles to none on hide",
            "suites": [
                "interactive",
                "true"
            ],
            "updatePoint": {
                "line": 453,
                "column": 50
            },
            "line": 453,
            "code": "    it('sets pointer-events styles to none on hide', () => {\n      const instance = tippy(h(), {\n        interactive: true\n      });\n      instance.show();\n      jest.runAllTimers();\n      instance.hide();\n      expect(instance.popper.style.pointerEvents).toBe('none');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appends the tippy to the reference parent",
            "suites": [
                "interactive",
                "true"
            ],
            "updatePoint": {
                "line": 462,
                "column": 49
            },
            "line": 462,
            "code": "    it('appends the tippy to the reference parent', () => {\n      const parentNode = h();\n      const instance = tippy(h('div', {}, parentNode), {\n        interactive: true\n      });\n      fireEvent.mouseEnter(instance.reference);\n      jest.runAllTimers();\n      expect(parentNode.contains(instance.popper)).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not cause the tippy to hide when clicked inside",
            "suites": [
                "interactive",
                "true"
            ],
            "updatePoint": {
                "line": 471,
                "column": 60
            },
            "line": 471,
            "code": "    it('does not cause the tippy to hide when clicked inside', () => {\n      const instance = tippy(h(), {\n        interactive: true\n      });\n      fireEvent.mouseEnter(instance.reference);\n      jest.runAllTimers();\n      fireEvent.click(instance.popper);\n      expect(instance.state.isVisible).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "tippy does not hide as cursor moves over it or the reference",
            "suites": [
                "interactive",
                "true"
            ],
            "updatePoint": {
                "line": 480,
                "column": 68
            },
            "line": 480,
            "code": "    it('tippy does not hide as cursor moves over it or the reference', () => {\n      const instance = tippy(h(), {\n        interactive: true\n      });\n      fireEvent.mouseEnter(instance.reference);\n      jest.runAllTimers();\n      fireEvent.mouseLeave(instance.reference);\n      fireEvent.mouseMove(instance.popper);\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.mouseMove(getChildren(instance.popper).box);\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.mouseMove(instance.reference);\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.mouseMove(document.body, {\n        clientX: 1000,\n        clientY: 1000\n      });\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "handles the `aria-expanded` attribute",
            "suites": [
                "interactive",
                "true"
            ],
            "updatePoint": {
                "line": 499,
                "column": 45
            },
            "line": 499,
            "code": "    it('handles the `aria-expanded` attribute', () => {\n      const instance = tippy(h(), {\n        interactive: true\n      });\n      const triggerTarget = h();\n      expect(instance.reference.getAttribute('aria-expanded')).toBe('false');\n      instance.show();\n      jest.runAllTimers();\n      expect(instance.reference.getAttribute('aria-expanded')).toBe('true');\n      instance.hide();\n      expect(instance.reference.getAttribute('aria-expanded')).toBe('false');\n      instance.setProps({\n        triggerTarget\n      });\n      fireEvent.mouseEnter(triggerTarget);\n      jest.runAllTimers();\n      expect(instance.reference.getAttribute('aria-expanded')).toBe(null);\n      expect(triggerTarget.getAttribute('aria-expanded')).toBe('true');\n      instance.hide();\n      expect(triggerTarget.getAttribute('aria-expanded')).toBe('false');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "true: warns if tippy is not accessible",
            "suites": [
                "interactive",
                "true"
            ],
            "updatePoint": {
                "line": 520,
                "column": 46
            },
            "line": 520,
            "code": "    it('true: warns if tippy is not accessible', () => {\n      const instance = tippy(h(), {\n        interactive: true\n      });\n      const inbetweenNode = h();\n      instance.reference.parentNode.appendChild(inbetweenNode);\n      instance.show();\n      jest.runAllTimers();\n      expect(console.warn).toHaveBeenCalledWith(...getFormattedMessage(['Interactive tippy element may not be accessible via keyboard', 'navigation because it is not directly after the reference element', 'in the DOM source order.', '\\n\\n', 'Using a wrapper <div> or <span> tag around the reference element', 'solves this by creating a new parentNode context.', '\\n\\n', 'Specifying `appendTo: document.body` silences this warning, but it', 'assumes you are using a focus management solution to handle', 'keyboard navigation.', '\\n\\n', 'See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity'].join(' ')));\n      instance.reference.parentNode.removeChild(inbetweenNode);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "it cleans up correctly if cursor entered and left before show with `delay`",
            "suites": [
                "interactive",
                "true"
            ],
            "updatePoint": {
                "line": 531,
                "column": 82
            },
            "line": 531,
            "code": "    it('it cleans up correctly if cursor entered and left before show with `delay`', () => {\n      const instance = tippy(h(), {\n        interactive: true,\n        delay: 100\n      });\n      fireEvent.mouseEnter(instance.reference);\n      fireEvent.mouseLeave(instance.reference);\n      jest.runAllTimers();\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "handles `aria-expanded` attribute correctly with .setProps()",
            "suites": [
                "interactive",
                "true"
            ],
            "updatePoint": {
                "line": 541,
                "column": 68
            },
            "line": 541,
            "code": "    it('handles `aria-expanded` attribute correctly with .setProps()', () => {\n      const instance = tippy(h(), {\n        interactive: true\n      });\n      expect(instance.reference.getAttribute('aria-expanded')).not.toBe(null);\n      instance.setProps({\n        interactive: false\n      });\n      expect(instance.reference.getAttribute('aria-expanded')).toBe(null);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "debounces the internal mousemove listener",
            "suites": [
                "interactiveDebounce"
            ],
            "updatePoint": {
                "line": 556,
                "column": 47
            },
            "line": 556,
            "code": "  it('debounces the internal mousemove listener', () => {\n    const instance = tippy(h(), {\n      interactive: true,\n      interactiveDebounce: 500\n    });\n    fireEvent.mouseEnter(instance.reference);\n    jest.runAllTimers();\n    fireEvent.mouseLeave(instance.reference);\n    fireEvent.mouseMove(document.body, {\n      clientX: 1000,\n      clientY: 1000\n    });\n    jest.advanceTimersByTime(499);\n    expect(instance.state.isVisible).toBe(true);\n    fireEvent.mouseMove(document.body, {\n      clientX: 1000,\n      clientY: 1000\n    });\n    jest.advanceTimersByTime(1);\n    expect(instance.state.isVisible).toBe(true);\n    jest.advanceTimersByTime(498);\n    expect(instance.state.isVisible).toBe(true);\n    jest.advanceTimersByTime(1);\n    expect(instance.state.isVisible).toBe(false);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets the transition on the popper element",
            "suites": [
                "moveTransition"
            ],
            "updatePoint": {
                "line": 583,
                "column": 47
            },
            "line": 583,
            "code": "  it('sets the transition on the popper element', () => {\n    const instance = tippy(h(), {\n      moveTransition: 'transform 0.5s ease'\n    });\n    instance.show();\n    jest.runAllTimers();\n    expect(instance.popper.style.transition).toBe('transform 0.5s ease');\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "disables the \"computeStyles\" modifier's `adaptive` option",
            "suites": [
                "moveTransition"
            ],
            "updatePoint": {
                "line": 591,
                "column": 64
            },
            "line": 591,
            "code": "  it('disables the \"computeStyles\" modifier\\'s `adaptive` option', () => {\n    const instance = tippy(h(), {\n      moveTransition: 'transform 0.5s ease'\n    });\n    instance.show();\n    jest.runAllTimers();\n    expect(instance.popperInstance.state.options.modifiers.find(modifier => modifier.name === 'computeStyles').options.adaptive).toBe(false);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is placed in the offset modifier",
            "suites": [
                "offset"
            ],
            "updatePoint": {
                "line": 601,
                "column": 38
            },
            "line": 601,
            "code": "  it('is placed in the offset modifier', () => {\n    const instance = tippy(h(), {\n      offset: [5, 20]\n    });\n    instance.show();\n    jest.runAllTimers();\n    expect(instance.popperInstance.state.options.modifiers.find(modifier => modifier.name === 'offset').options.offset).toEqual([5, 20]);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called after the instance props change",
            "suites": [
                "onAfterUpdate"
            ],
            "updatePoint": {
                "line": 611,
                "column": 47
            },
            "line": 611,
            "code": "  it('is called after the instance props change', () => {\n    const onAfterUpdate = jest.fn(() => {\n      expect(instance.props.content).toBe('next');\n    });\n    const instance = tippy(h(), {\n      content: 'prev',\n      onAfterUpdate\n    });\n    const props = {\n      content: 'next'\n    };\n    instance.setProps(props);\n    expect(onAfterUpdate).toHaveBeenCalledTimes(1);\n    expect(onAfterUpdate).toHaveBeenCalledWith(instance, props);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called before the instance props change",
            "suites": [
                "onBeforeUpdate"
            ],
            "updatePoint": {
                "line": 628,
                "column": 48
            },
            "line": 628,
            "code": "  it('is called before the instance props change', () => {\n    const onBeforeUpdate = jest.fn(() => {\n      expect(instance.props.content).toBe('prev');\n    });\n    const instance = tippy(h(), {\n      content: 'prev',\n      onBeforeUpdate\n    });\n    const props = {\n      content: 'next'\n    };\n    instance.setProps(props);\n    expect(onBeforeUpdate).toHaveBeenCalledTimes(1);\n    expect(onBeforeUpdate).toHaveBeenCalledWith(instance, props);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called once the instance has been created",
            "suites": [
                "onCreate"
            ],
            "updatePoint": {
                "line": 645,
                "column": 50
            },
            "line": 645,
            "code": "  it('is called once the instance has been created', () => {\n    const onCreate = jest.fn();\n    const instance = tippy(h(), {\n      onCreate\n    });\n    expect(onCreate).toHaveBeenCalledTimes(1);\n    expect(onCreate).toHaveBeenCalledWith(instance);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called once the instance has been destroyed",
            "suites": [
                "onDestroy"
            ],
            "updatePoint": {
                "line": 655,
                "column": 52
            },
            "line": 655,
            "code": "  it('is called once the instance has been destroyed', () => {\n    const onDestroy = jest.fn();\n    const instance = tippy(h(), {\n      onDestroy\n    });\n    expect(onDestroy).toHaveBeenCalledTimes(0);\n    instance.destroy();\n    expect(onDestroy).toHaveBeenCalledTimes(1);\n    expect(onDestroy).toHaveBeenCalledWith(instance);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called once the instance is unmounted",
            "suites": [
                "onHidden"
            ],
            "updatePoint": {
                "line": 667,
                "column": 46
            },
            "line": 667,
            "code": "  it('is called once the instance is unmounted', () => {\n    const onHidden = jest.fn();\n    const instance = tippy(h(), {\n      onHidden\n    });\n    instance.show();\n    jest.runAllTimers();\n    expect(onHidden).toHaveBeenCalledTimes(0);\n    instance.hide();\n    expect(onHidden).toHaveBeenCalledTimes(1);\n    expect(onHidden).toHaveBeenCalledWith(instance);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called once the instance is hidden",
            "suites": [
                "onHidden"
            ],
            "updatePoint": {
                "line": 679,
                "column": 43
            },
            "line": 679,
            "code": "  it('is called once the instance is hidden', () => {\n    const onHidden = jest.fn();\n    const instance = tippy(h(), {\n      onHidden\n    });\n    expect(onHidden).toHaveBeenCalledTimes(0);\n    instance.show();\n    jest.runAllTimers();\n    instance.hide();\n    expect(onHidden).toHaveBeenCalledTimes(1);\n    expect(onHidden).toHaveBeenCalledWith(instance);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called once the instance starts to hide",
            "suites": [
                "onHide"
            ],
            "updatePoint": {
                "line": 693,
                "column": 48
            },
            "line": 693,
            "code": "  it('is called once the instance starts to hide', () => {\n    const onHide = jest.fn();\n    const instance = tippy(h(), {\n      onHide\n    });\n    expect(onHide).toHaveBeenCalledTimes(0);\n    instance.show();\n    jest.runAllTimers();\n    instance.hide();\n    expect(onHide).toHaveBeenCalledTimes(1);\n    expect(onHide).toHaveBeenCalledWith(instance);\n  }); // TODO: this may be a bad idea so remove it maybe; it doesn't work with",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "can cancel hiding by returning false",
            "suites": [
                "onHide"
            ],
            "updatePoint": {
                "line": 707,
                "column": 42
            },
            "line": 707,
            "code": "  it('can cancel hiding by returning false', () => {\n    const onHide = jest.fn(() => false);\n    const instance = tippy(h(), {\n      onHide\n    });\n    expect(onHide).toHaveBeenCalledTimes(0);\n    instance.show();\n    jest.runAllTimers();\n    instance.hide();\n    expect(onHide).toHaveBeenCalledTimes(1);\n    expect(onHide).toHaveBeenCalledWith(instance);\n    expect(instance.state.isVisible).toBe(true);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called once the instance starts to hide",
            "suites": [
                "onShow"
            ],
            "updatePoint": {
                "line": 722,
                "column": 48
            },
            "line": 722,
            "code": "  it('is called once the instance starts to hide', () => {\n    const onShow = jest.fn();\n    const instance = tippy(h(), {\n      onShow\n    });\n    expect(onShow).toHaveBeenCalledTimes(0);\n    instance.show();\n    expect(onShow).toHaveBeenCalledTimes(1);\n    expect(onShow).toHaveBeenCalledWith(instance);\n  }); // TODO: this may be a bad idea so remove it maybe; it doesn't work with",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "can cancel showing by returning false",
            "suites": [
                "onShow"
            ],
            "updatePoint": {
                "line": 734,
                "column": 43
            },
            "line": 734,
            "code": "  it('can cancel showing by returning false', () => {\n    const onShow = jest.fn(() => false);\n    const instance = tippy(h(), {\n      onShow\n    });\n    expect(onShow).toHaveBeenCalledTimes(0);\n    instance.show();\n    expect(onShow).toHaveBeenCalledTimes(1);\n    expect(onShow).toHaveBeenCalledWith(instance);\n    expect(instance.state.isVisible).toBe(false);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called once the CSS transitions finish",
            "suites": [
                "onShown"
            ],
            "updatePoint": {
                "line": 747,
                "column": 47
            },
            "line": 747,
            "code": "  it('is called once the CSS transitions finish', () => {\n    const onShown = jest.fn();\n    const instance = tippy(h(), {\n      onShown,\n      duration: 100\n    });\n    expect(onShown).toHaveBeenCalledTimes(0);\n    instance.show();\n    jest.runAllTimers();\n    fireEvent.transitionEnd(getChildren(instance.popper).box);\n    expect(onShown).toHaveBeenCalledTimes(1);\n    expect(onShown).toHaveBeenCalledWith(instance);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called due to a trigger event",
            "suites": [
                "onTrigger"
            ],
            "updatePoint": {
                "line": 762,
                "column": 38
            },
            "line": 762,
            "code": "  it('is called due to a trigger event', () => {\n    const onTrigger = jest.fn();\n    const instance = tippy(h(), {\n      onTrigger\n    });\n    expect(onTrigger).toHaveBeenCalledTimes(0);\n    instance.show();\n    jest.runAllTimers();\n    expect(onTrigger).toHaveBeenCalledTimes(0);\n    instance.hide();\n    fireEvent.mouseEnter(instance.reference);\n    expect(onTrigger).toHaveBeenCalledTimes(1);\n    expect(onTrigger).toHaveBeenCalledWith(instance, new MouseEvent('mouseenter'));\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called due to an untrigger event",
            "suites": [
                "onTrigger"
            ],
            "updatePoint": {
                "line": 778,
                "column": 41
            },
            "line": 778,
            "code": "  it('is called due to an untrigger event', () => {\n    const onUntrigger = jest.fn();\n    const instance = tippy(h(), {\n      onUntrigger\n    });\n    expect(onUntrigger).toHaveBeenCalledTimes(0);\n    instance.show();\n    jest.runAllTimers();\n    expect(onUntrigger).toHaveBeenCalledTimes(0);\n    instance.hide();\n    fireEvent.mouseLeave(instance.reference);\n    expect(onUntrigger).toHaveBeenCalledTimes(1);\n    expect(onUntrigger).toHaveBeenCalledWith(instance, new MouseEvent('mouseleave'));\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is placed in popper options",
            "suites": [
                "placement"
            ],
            "updatePoint": {
                "line": 794,
                "column": 33
            },
            "line": 794,
            "code": "  it('is placed in popper options', () => {\n    const instance = tippy(h(), {\n      placement: 'right'\n    });\n    instance.show();\n    jest.runAllTimers();\n    expect(instance.popperInstance.state.options.placement).toBe('right');\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is placed in instance.plugins uniquely",
            "suites": [
                "plugins"
            ],
            "updatePoint": {
                "line": 804,
                "column": 44
            },
            "line": 804,
            "code": "  it('is placed in instance.plugins uniquely', () => {\n    const pluginA = {\n      fn: () => ({})\n    };\n    const pluginB = {\n      fn: () => ({})\n    };\n    const plugins = [pluginA, pluginB, pluginA];\n    const instance = tippy(h(), {\n      plugins\n    });\n    expect(instance.plugins).toEqual([pluginA, pluginB]);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "invokes plugin fn",
            "suites": [
                "plugins"
            ],
            "updatePoint": {
                "line": 817,
                "column": 23
            },
            "line": 817,
            "code": "  it('invokes plugin fn', () => {\n    const fn = jest.fn(() => ({}));\n    const instance = tippy(h(), {\n      plugins: [{\n        fn\n      }]\n    });\n    expect(fn).toHaveBeenCalledTimes(1);\n    expect(fn).toHaveBeenCalledWith(instance);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "merges modifiers correctly",
            "suites": [
                "popperOptions"
            ],
            "updatePoint": {
                "line": 829,
                "column": 32
            },
            "line": 829,
            "code": "  it('merges modifiers correctly', () => {\n    const instance = tippy(h(), {\n      popperOptions: {\n        strategy: 'fixed',\n        modifiers: [{\n          name: 'flip',\n          options: {\n            fallbackPlacements: ['right']\n          }\n        }, {\n          name: 'preventOverflow',\n          options: {\n            rootBoundary: 'document'\n          }\n        }, {\n          name: 'offset',\n          enabled: false\n        }, {\n          name: 'arrow',\n          options: {\n            padding: 999\n          }\n        }]\n      }\n    });\n    instance.show();\n    jest.runAllTimers();\n    expect(instance.popperInstance.state.orderedModifiers).toMatchSnapshot();\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is used as the template creator",
            "suites": [
                "render"
            ],
            "updatePoint": {
                "line": 860,
                "column": 37
            },
            "line": 860,
            "code": "  it('is used as the template creator', () => {\n    const popper = h();\n    const instance = tippy(h(), {\n      render() {\n        return {\n          popper,\n\n          update() {}\n\n        };\n      }\n\n    });\n    expect(instance.popper).toBe(popper);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "calls the update function with (prevProps, nextProps) args",
            "suites": [
                "render"
            ],
            "updatePoint": {
                "line": 875,
                "column": 64
            },
            "line": 875,
            "code": "  it('calls the update function with (prevProps, nextProps) args', () => {\n    const spy = jest.fn();\n    const instance = tippy(h(), {\n      render() {\n        return {\n          popper: h(),\n          onUpdate: spy\n        };\n      }\n\n    });\n    const prevProps = instance.props;\n    instance.setProps({});\n    const nextProps = instance.props;\n    expect(spy).toHaveBeenCalledTimes(1);\n    expect(spy).toHaveBeenCalledWith(prevProps, nextProps);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called onCreate",
            "suites": [
                "showOnCreate",
                "true"
            ],
            "updatePoint": {
                "line": 895,
                "column": 26
            },
            "line": 895,
            "code": "    it('is called onCreate', () => {\n      const instance = tippy(h(), {\n        showOnCreate: true\n      });\n      jest.runAllTimers();\n      expect(instance.state.isVisible).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "respects delays",
            "suites": [
                "showOnCreate",
                "true"
            ],
            "updatePoint": {
                "line": 902,
                "column": 23
            },
            "line": 902,
            "code": "    it('respects delays', () => {\n      const instance = tippy(h(), {\n        showOnCreate: true,\n        delay: 100\n      });\n      jest.advanceTimersByTime(99);\n      expect(instance.state.isVisible).toBe(false);\n      jest.advanceTimersByTime(1);\n      jest.runAllTimers();\n      expect(instance.state.isVisible).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not prevent the instance from showing",
            "suites": [
                "touch",
                "true"
            ],
            "updatePoint": {
                "line": 919,
                "column": 50
            },
            "line": 919,
            "code": "    it('does not prevent the instance from showing', () => {\n      const instance = tippy(h(), {\n        touch: true\n      });\n      fireEvent.mouseEnter(instance.reference);\n      jest.runAllTimers();\n      expect(instance.state.isVisible).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prevents instance from showing",
            "suites": [
                "touch",
                "false"
            ],
            "updatePoint": {
                "line": 929,
                "column": 38
            },
            "line": 929,
            "code": "    it('prevents instance from showing', () => {\n      const instance = tippy(h(), {\n        touch: false\n      });\n      fireEvent.mouseEnter(instance.reference);\n      jest.runAllTimers();\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "only shows while holding the press",
            "suites": [
                "touch",
                "hold"
            ],
            "updatePoint": {
                "line": 939,
                "column": 42
            },
            "line": 939,
            "code": "    it('only shows while holding the press', () => {\n      const instance = tippy(h(), {\n        touch: 'hold'\n      });\n      fireEvent.mouseEnter(instance.reference);\n      jest.runAllTimers();\n      expect(instance.state.isVisible).toBe(false);\n      fireEvent.touchStart(instance.reference);\n      jest.runAllTimers();\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.touchEnd(instance.reference);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "only shows after a delay",
            "suites": [
                "touch",
                "[\"hold\", delay]"
            ],
            "updatePoint": {
                "line": 954,
                "column": 32
            },
            "line": 954,
            "code": "    it('only shows after a delay', () => {\n      const instance = tippy(h(), {\n        touch: ['hold', 500]\n      });\n      fireEvent.mouseEnter(instance.reference);\n      jest.runAllTimers();\n      expect(instance.state.isVisible).toBe(false);\n      fireEvent.touchStart(instance.reference);\n      jest.advanceTimersByTime(499);\n      expect(instance.state.isVisible).toBe(false);\n      jest.advanceTimersByTime(1);\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.touchEnd(instance.reference);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is triggered and untriggered correctly",
            "suites": [
                "trigger",
                "mouseenter"
            ],
            "updatePoint": {
                "line": 973,
                "column": 46
            },
            "line": 973,
            "code": "    it('is triggered and untriggered correctly', () => {\n      const instance = tippy(h(), {\n        trigger: 'mouseenter'\n      });\n      fireEvent.mouseEnter(instance.reference);\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.mouseLeave(instance.reference);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is triggered and untriggered correctly",
            "suites": [
                "trigger",
                "mouseenter focus"
            ],
            "updatePoint": {
                "line": 984,
                "column": 46
            },
            "line": 984,
            "code": "    it('is triggered and untriggered correctly', () => {\n      const instance = tippy(h(), {\n        trigger: 'mouseenter focus'\n      });\n      fireEvent.mouseEnter(instance.reference);\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.mouseLeave(instance.reference);\n      expect(instance.state.isVisible).toBe(false);\n      fireEvent.focus(instance.reference);\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.blur(instance.reference);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is triggered and untriggered correctly",
            "suites": [
                "trigger",
                "focus"
            ],
            "updatePoint": {
                "line": 999,
                "column": 46
            },
            "line": 999,
            "code": "    it('is triggered and untriggered correctly', () => {\n      const instance = tippy(h(), {\n        trigger: 'mouseenter focus'\n      });\n      fireEvent.focus(instance.reference);\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.blur(instance.reference);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is triggered and untriggered correctly",
            "suites": [
                "trigger",
                "click"
            ],
            "updatePoint": {
                "line": 1010,
                "column": 46
            },
            "line": 1010,
            "code": "    it('is triggered and untriggered correctly', () => {\n      const instance = tippy(h(), {\n        trigger: 'click'\n      });\n      fireEvent.click(instance.reference);\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.click(instance.reference);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "toggles on repeated clicks with inner element target",
            "suites": [
                "trigger",
                "click"
            ],
            "updatePoint": {
                "line": 1019,
                "column": 60
            },
            "line": 1019,
            "code": "    it('toggles on repeated clicks with inner element target', () => {\n      const inner = h();\n      const outer = h();\n      outer.appendChild(inner);\n      const instance = tippy(outer, {\n        trigger: 'click'\n      });\n      fireEvent.mouseDown(inner, {\n        bubbles: true\n      });\n      fireEvent.click(inner, {\n        bubbles: true\n      });\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.mouseDown(inner, {\n        bubbles: true\n      });\n      fireEvent.click(inner, {\n        bubbles: true\n      });\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not hide immediately and can be toggled",
            "suites": [
                "trigger",
                "click focus"
            ],
            "updatePoint": {
                "line": 1043,
                "column": 52
            },
            "line": 1043,
            "code": "    it('does not hide immediately and can be toggled', () => {\n      const instance = tippy(h(), {\n        trigger: 'click focus'\n      });\n      fireEvent.focus(instance.reference);\n      fireEvent.click(instance.reference);\n      expect(instance.state.isVisible).toBe(true);\n      fireEvent.click(instance.reference);\n      expect(instance.state.isVisible).toBe(false);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses the reference as the trigger target",
            "suites": [
                "triggerTarget",
                "null"
            ],
            "updatePoint": {
                "line": 1057,
                "column": 48
            },
            "line": 1057,
            "code": "    it('uses the reference as the trigger target', () => {\n      const instance = tippy(h(), {\n        triggerTarget: null\n      });\n      fireEvent.mouseEnter(instance.reference);\n      expect(instance.state.isVisible).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is used as the trigger target",
            "suites": [
                "triggerTarget",
                "Element"
            ],
            "updatePoint": {
                "line": 1066,
                "column": 37
            },
            "line": 1066,
            "code": "    it('is used as the trigger target', () => {\n      const triggerTarget = h();\n      const instance = tippy(h(), {\n        triggerTarget\n      });\n      fireEvent.mouseEnter(instance.reference);\n      expect(instance.state.isVisible).toBe(false);\n      fireEvent.mouseEnter(triggerTarget);\n      expect(instance.state.isVisible).toBe(true);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is used as the trigger target",
            "suites": [
                "triggerTarget",
                "Element[]"
            ],
            "updatePoint": {
                "line": 1078,
                "column": 37
            },
            "line": 1078,
            "code": "    it('is used as the trigger target', () => {\n      const triggerTarget = [h(), h(), h()];\n      const instance = tippy(h(), {\n        triggerTarget\n      });\n      fireEvent.mouseEnter(instance.reference);\n      expect(instance.state.isVisible).toBe(false);\n      fireEvent.mouseEnter(triggerTarget[0]);\n      expect(instance.state.isVisible).toBe(true);\n      instance.hide();\n      fireEvent.mouseEnter(triggerTarget[1]);\n      expect(instance.state.isVisible).toBe(true);\n      instance.hide();\n      fireEvent.mouseEnter(triggerTarget[2]);\n      expect(instance.state.isVisible).toBe(true);\n      instance.hide();\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is set correctly on .tippy-box",
            "suites": [
                "animation"
            ],
            "updatePoint": {
                "line": 1101,
                "column": 36
            },
            "line": 1101,
            "code": "  it('is set correctly on .tippy-box', () => {\n    const instance = tippy(h(), {\n      animation: 'anything'\n    });\n    expect(getChildren(instance.popper).box.getAttribute('data-animation')).toBe('anything');\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders content as HTML",
            "suites": [
                "allowHTML",
                "true"
            ],
            "updatePoint": {
                "line": 1110,
                "column": 31
            },
            "line": 1110,
            "code": "    it('renders content as HTML', () => {\n      const instance = tippy(h(), {\n        content: '<b>hello</b>',\n        allowHTML: true\n      });\n      expect(getChildren(instance.popper).content.querySelector('b')).not.toBe(null);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders content as HTML",
            "suites": [
                "allowHTML",
                "false"
            ],
            "updatePoint": {
                "line": 1119,
                "column": 31
            },
            "line": 1119,
            "code": "    it('renders content as HTML', () => {\n      const instance = tippy(h(), {\n        content: '<b>hello</b>',\n        allowHTML: false\n      });\n      expect(getChildren(instance.popper).content.querySelector('b')).toBe(null);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should update even if content does not change",
            "suites": [
                "allowHTML",
                "false"
            ],
            "updatePoint": {
                "line": 1127,
                "column": 51
            },
            "line": 1127,
            "code": "  it('should update even if content does not change', () => {\n    const instance = tippy(h(), {\n      content: '<b>hello</b>',\n      allowHTML: true\n    });\n    expect(getChildren(instance.popper).content.querySelector('b')).not.toBe(null);\n    instance.setProps({\n      allowHTML: false\n    });\n    expect(getChildren(instance.popper).content.querySelector('b')).toBe(null);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets attribute correctly on .tippy-box",
            "suites": [
                "inertia"
            ],
            "updatePoint": {
                "line": 1140,
                "column": 44
            },
            "line": 1140,
            "code": "  it('sets attribute correctly on .tippy-box', () => {\n    const instance = tippy(h(), {\n      inertia: true\n    });\n    expect(getChildren(instance.popper).box.hasAttribute('data-inertia')).toBe(true);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is updated correctly with .setProps()",
            "suites": [
                "inertia"
            ],
            "updatePoint": {
                "line": 1146,
                "column": 43
            },
            "line": 1146,
            "code": "  it('is updated correctly with .setProps()', () => {\n    const instance = tippy(h(), {\n      inertia: false\n    });\n    expect(getChildren(instance.popper).box.hasAttribute('data-inertia')).toBe(false);\n    instance.setProps({\n      inertia: true\n    });\n    expect(getChildren(instance.popper).box.hasAttribute('data-inertia')).toBe(true);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates an arrow",
            "suites": [
                "arrow",
                "true"
            ],
            "updatePoint": {
                "line": 1159,
                "column": 24
            },
            "line": 1159,
            "code": "    it('creates an arrow', () => {\n      const instance = tippy(h(), {\n        arrow: true\n      });\n      expect(getChildren(instance.popper).arrow).not.toBe(undefined);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not create an arrow",
            "suites": [
                "arrow",
                "false"
            ],
            "updatePoint": {
                "line": 1167,
                "column": 32
            },
            "line": 1167,
            "code": "    it('does not create an arrow', () => {\n      const instance = tippy(h(), {\n        arrow: false\n      });\n      expect(getChildren(instance.popper).arrow).toBe(undefined);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates an svg",
            "suites": [
                "arrow",
                "string"
            ],
            "updatePoint": {
                "line": 1175,
                "column": 22
            },
            "line": 1175,
            "code": "    it('creates an svg', () => {\n      const instance = tippy(h(), {\n        arrow: '<svg></svg>'\n      });\n      expect(getChildren(instance.popper).arrow.className).toBe('__NAMESPACE_PREFIX__-svg-arrow');\n      expect(getChildren(instance.popper).arrow.querySelector('svg')).not.toBe(null);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses an svg",
            "suites": [
                "arrow",
                "Element"
            ],
            "updatePoint": {
                "line": 1184,
                "column": 19
            },
            "line": 1184,
            "code": "    it('uses an svg', () => {\n      const instance = tippy(h(), {\n        arrow: document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n      });\n      expect(getChildren(instance.popper).arrow.className).toBe('__NAMESPACE_PREFIX__-svg-arrow');\n      expect(getChildren(instance.popper).arrow.querySelector('svg')).not.toBe(null);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses an svg",
            "suites": [
                "arrow",
                "Fragment"
            ],
            "updatePoint": {
                "line": 1193,
                "column": 19
            },
            "line": 1193,
            "code": "    it('uses an svg', () => {\n      const fragment = document.createDocumentFragment();\n      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n      fragment.appendChild(svg);\n      const instance = tippy(h(), {\n        arrow: fragment\n      });\n      expect(getChildren(instance.popper).arrow.querySelector('svg')).not.toBe(null);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is updated correctly by .setProps()",
            "suites": [
                "arrow",
                "Fragment"
            ],
            "updatePoint": {
                "line": 1203,
                "column": 41
            },
            "line": 1203,
            "code": "  it('is updated correctly by .setProps()', () => {\n    const instance = tippy(h(), {\n      arrow: true\n    });\n    instance.setProps({\n      arrow: false\n    });\n    expect(getChildren(instance.popper).arrow).toBe(undefined);\n    instance.setProps({\n      arrow: '<svg></svg>'\n    });\n    expect(getChildren(instance.popper).arrow).not.toBe(undefined);\n    instance.setProps({\n      arrow: '<svg><path d=\"\" /></svg>'\n    });\n    expect(getChildren(instance.popper).arrow.querySelector('path')).not.toBe(undefined);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is injected into .tippy-content correctly",
            "suites": [
                "content",
                "string"
            ],
            "updatePoint": {
                "line": 1223,
                "column": 49
            },
            "line": 1223,
            "code": "    it('is injected into .tippy-content correctly', () => {\n      const instance = tippy(h(), {\n        content: 'hello'\n      });\n      expect(getChildren(instance.popper).content.textContent).toBe('hello');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not render HTML by default",
            "suites": [
                "content",
                "string"
            ],
            "updatePoint": {
                "line": 1229,
                "column": 39
            },
            "line": 1229,
            "code": "    it('does not render HTML by default', () => {\n      const instance = tippy(h(), {\n        content: '<b>hello</b>'\n      });\n      expect(getChildren(instance.popper).content.innerHTML).not.toBe('<b>hello</b>');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is injected into .tippy-content correctly",
            "suites": [
                "content",
                "Element"
            ],
            "updatePoint": {
                "line": 1237,
                "column": 49
            },
            "line": 1237,
            "code": "    it('is injected into .tippy-content correctly', () => {\n      const content = h();\n      const instance = tippy(h(), {\n        content\n      });\n      expect(getChildren(instance.popper).content.firstElementChild).toBe(content);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called with the reference as an argument",
            "suites": [
                "content",
                "Function"
            ],
            "updatePoint": {
                "line": 1246,
                "column": 51
            },
            "line": 1246,
            "code": "    it('is called with the reference as an argument', () => {\n      const node = h();\n      const content = jest.fn(() => node);\n      const instance = tippy(h(), {\n        content\n      });\n      expect(getChildren(instance.popper).content.firstElementChild).toBe(node);\n      expect(content).toHaveBeenCalledWith(instance.reference);\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appends px",
            "suites": [
                "maxWidth",
                "number"
            ],
            "updatePoint": {
                "line": 1259,
                "column": 18
            },
            "line": 1259,
            "code": "    it('appends px', () => {\n      const instance = tippy(h(), {\n        maxWidth: 200\n      });\n      expect(getChildren(instance.popper).box.style.maxWidth).toBe('200px');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appends directly (\"none\")",
            "suites": [
                "maxWidth",
                "string"
            ],
            "updatePoint": {
                "line": 1267,
                "column": 33
            },
            "line": 1267,
            "code": "    it('appends directly (\"none\")', () => {\n      const instance = tippy(h(), {\n        maxWidth: 'none'\n      });\n      expect(getChildren(instance.popper).box.style.maxWidth).toBe('none');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appends directly (\"10rem\")",
            "suites": [
                "maxWidth",
                "string"
            ],
            "updatePoint": {
                "line": 1273,
                "column": 34
            },
            "line": 1273,
            "code": "    it('appends directly (\"10rem\")', () => {\n      const instance = tippy(h(), {\n        maxWidth: '10rem'\n      });\n      expect(getChildren(instance.popper).box.style.maxWidth).toBe('10rem');\n    });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is updated correctly by .setProps()",
            "suites": [
                "maxWidth",
                "string"
            ],
            "updatePoint": {
                "line": 1280,
                "column": 41
            },
            "line": 1280,
            "code": "  it('is updated correctly by .setProps()', () => {\n    const instance = tippy(h(), {\n      maxWidth: 'none'\n    });\n    instance.setProps({\n      maxWidth: 100\n    });\n    expect(getChildren(instance.popper).box.style.maxWidth).toBe('100px');\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is set correctly",
            "suites": [
                "moveTransition"
            ],
            "updatePoint": {
                "line": 1291,
                "column": 22
            },
            "line": 1291,
            "code": "  it('is set correctly', () => {\n    const instance = tippy(h(), {\n      moveTransition: 'transform 1s ease-in'\n    });\n    instance.show();\n    jest.runAllTimers();\n    expect(instance.popper.style.transition).toBe('transform 1s ease-in');\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is updated correctly by .setProps()",
            "suites": [
                "moveTransition"
            ],
            "updatePoint": {
                "line": 1299,
                "column": 41
            },
            "line": 1299,
            "code": "  it('is updated correctly by .setProps()', () => {\n    const instance = tippy(h(), {\n      moveTransition: 'transform 1s ease-in'\n    });\n    instance.setProps({\n      moveTransition: 'none'\n    });\n    instance.show();\n    jest.runAllTimers();\n    expect(instance.popper.style.transition).toBe('none');\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets role attribute",
            "suites": [
                "role"
            ],
            "updatePoint": {
                "line": 1312,
                "column": 25
            },
            "line": 1312,
            "code": "  it('sets role attribute', () => {\n    const instance = tippy(h(), {\n      role: 'menu'\n    });\n    expect(getChildren(instance.popper).box.getAttribute('role')).toBe('menu');\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not add an attribute if `null`",
            "suites": [
                "role"
            ],
            "updatePoint": {
                "line": 1318,
                "column": 41
            },
            "line": 1318,
            "code": "  it('does not add an attribute if `null`', () => {\n    const instance = tippy(h(), {\n      role: null\n    });\n    expect(getChildren(instance.popper).box.hasAttribute('role')).toBe(false);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets `data-theme` attribute correctly",
            "suites": [
                "theme"
            ],
            "updatePoint": {
                "line": 1326,
                "column": 43
            },
            "line": 1326,
            "code": "  it('sets `data-theme` attribute correctly', () => {\n    const instance = tippy(h(), {\n      theme: 'a bunch of themes'\n    });\n    expect(getChildren(instance.popper).box.getAttribute('data-theme')).toBe('a bunch of themes');\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not add `data-theme` attribute if `null`",
            "suites": [
                "theme"
            ],
            "updatePoint": {
                "line": 1332,
                "column": 51
            },
            "line": 1332,
            "code": "  it('does not add `data-theme` attribute if `null`', () => {\n    const instance = tippy(h(), {\n      theme: null\n    });\n    expect(getChildren(instance.popper).box.hasAttribute('data-theme')).toBe(false);\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets zIndex style property correctly",
            "suites": [
                "zIndex"
            ],
            "updatePoint": {
                "line": 1340,
                "column": 42
            },
            "line": 1340,
            "code": "  it('sets zIndex style property correctly', () => {\n    const instance = tippy(h(), {\n      zIndex: 927\n    });\n    expect(instance.popper.style.zIndex).toBe('927');\n  });",
            "file": "integration/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "injects a string of css styles into the document `head`",
            "suites": [
                "injectCSS"
            ],
            "updatePoint": {
                "line": 7,
                "column": 61
            },
            "line": 7,
            "code": "  it('injects a string of css styles into the document `head`', () => {\n    expect(document.head.querySelector('style')).toBe(null);\n    injectCSS(styles);\n    const stylesheet = document.head.querySelector('[data-__NAMESPACE_PREFIX__-stylesheet]');\n    expect(stylesheet).not.toBe(null);\n    expect(stylesheet.textContent).toBe(styles);\n  });",
            "file": "unit/css.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "places the node before the first style or link node (link before style)",
            "suites": [
                "injectCSS"
            ],
            "updatePoint": {
                "line": 14,
                "column": 77
            },
            "line": 14,
            "code": "  it('places the node before the first style or link node (link before style)', () => {\n    document.head.append(document.createElement('title'));\n    document.head.append(document.createElement('link'));\n    document.head.append(document.createElement('style'));\n    injectCSS(styles);\n    const stylesheet = document.head.querySelector('[data-__NAMESPACE_PREFIX__-stylesheet]');\n    expect(document.head.children[1]).toBe(stylesheet);\n  });",
            "file": "unit/css.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "places the node before the first style or link node (link after style)",
            "suites": [
                "injectCSS"
            ],
            "updatePoint": {
                "line": 22,
                "column": 76
            },
            "line": 22,
            "code": "  it('places the node before the first style or link node (link after style)', () => {\n    document.head.append(document.createElement('title'));\n    document.head.append(document.createElement('style'));\n    document.head.append(document.createElement('link'));\n    injectCSS(styles);\n    const stylesheet = document.head.querySelector('[data-__NAMESPACE_PREFIX__-stylesheet]');\n    expect(document.head.children[1]).toBe(stylesheet);\n  });",
            "file": "unit/css.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns an empty array with no arguments",
            "suites": [
                "getArrayOfElements"
            ],
            "updatePoint": {
                "line": 5,
                "column": 46
            },
            "line": 5,
            "code": "  it('returns an empty array with no arguments', () => {\n    expect(Array.isArray(DomUtils.getArrayOfElements())).toBe(true);\n  });",
            "file": "unit/dom-utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns the same array if given an array",
            "suites": [
                "getArrayOfElements"
            ],
            "updatePoint": {
                "line": 8,
                "column": 46
            },
            "line": 8,
            "code": "  it('returns the same array if given an array', () => {\n    const arr = [];\n    expect(DomUtils.getArrayOfElements(arr)).toBe(arr);\n  });",
            "file": "unit/dom-utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns an array of elements when given a valid selector string",
            "suites": [
                "getArrayOfElements"
            ],
            "updatePoint": {
                "line": 12,
                "column": 69
            },
            "line": 12,
            "code": "  it('returns an array of elements when given a valid selector string', () => {\n    [...Array(10)].map(() => h());\n    const allAreElements = DomUtils.getArrayOfElements(IDENTIFIER).every(value => value instanceof Element);\n    expect(allAreElements).toBe(true);\n  });",
            "file": "unit/dom-utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns an empty array when given an invalid selector string",
            "suites": [
                "getArrayOfElements"
            ],
            "updatePoint": {
                "line": 17,
                "column": 66
            },
            "line": 17,
            "code": "  it('returns an empty array when given an invalid selector string', () => {\n    const arr = DomUtils.getArrayOfElements('😎');\n    expect(Array.isArray(arr)).toBe(true);\n    expect(arr.length).toBe(0);\n  });",
            "file": "unit/dom-utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns an array of length 1 if the value is a DOM element",
            "suites": [
                "getArrayOfElements"
            ],
            "updatePoint": {
                "line": 22,
                "column": 64
            },
            "line": 22,
            "code": "  it('returns an array of length 1 if the value is a DOM element', () => {\n    const ref = h();\n    const arr = DomUtils.getArrayOfElements(ref);\n    expect(arr[0]).toBe(ref);\n    expect(arr.length).toBe(1);\n  });",
            "file": "unit/dom-utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns an array if given a NodeList",
            "suites": [
                "getArrayOfElements"
            ],
            "updatePoint": {
                "line": 28,
                "column": 42
            },
            "line": 28,
            "code": "  it('returns an array if given a NodeList', () => {\n    const ref = h();\n    const arr = DomUtils.getArrayOfElements(document.querySelectorAll(`.${IDENTIFIER}`));\n    expect(arr[0]).toBe(ref);\n    expect(Array.isArray(arr)).toBe(true);\n  });",
            "file": "unit/dom-utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates and returns a div element",
            "suites": [
                "div"
            ],
            "updatePoint": {
                "line": 36,
                "column": 39
            },
            "line": 36,
            "code": "  it('creates and returns a div element', () => {\n    const d = DomUtils.div();\n    expect(d.nodeName).toBe('DIV');\n  });",
            "file": "unit/dom-utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets the `transition-duration` property on a list of elements with the value specified",
            "suites": [
                "setTransitionDuration"
            ],
            "updatePoint": {
                "line": 42,
                "column": 92
            },
            "line": 42,
            "code": "  it('sets the `transition-duration` property on a list of elements with the value specified', () => {\n    const els = [h(), h(), null, h()];\n    DomUtils.setTransitionDuration(els, 1298);\n    expect(els[0].style.transitionDuration).toBe('1298ms');\n    expect(els[1].style.transitionDuration).toBe('1298ms');\n    expect(els[3].style.transitionDuration).toBe('1298ms');\n  });",
            "file": "unit/dom-utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets the `data-state` attribute on a list of elements with the value specified",
            "suites": [
                "setVisibilityState"
            ],
            "updatePoint": {
                "line": 51,
                "column": 84
            },
            "line": 51,
            "code": "  it('sets the `data-state` attribute on a list of elements with the value specified', () => {\n    const els = [h(), h(), null, h()];\n    DomUtils.setVisibilityState(els, 'visible');\n    expect(els[0].getAttribute('data-state')).toBe('visible');\n    expect(els[1].getAttribute('data-state')).toBe('visible');\n    expect(els[3].getAttribute('data-state')).toBe('visible');\n    DomUtils.setVisibilityState(els, 'hidden');\n    expect(els[0].getAttribute('data-state')).toBe('hidden');\n    expect(els[1].getAttribute('data-state')).toBe('hidden');\n    expect(els[3].getAttribute('data-state')).toBe('hidden');\n  });",
            "file": "unit/dom-utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "correctly determines if a value is a reference element",
            "suites": [
                "isReferenceElement"
            ],
            "updatePoint": {
                "line": 64,
                "column": 60
            },
            "line": 64,
            "code": "  it('correctly determines if a value is a reference element', () => {\n    const instance = tippy(h());\n    expect(DomUtils.isReferenceElement(document.createElement('div'))).toBe(false);\n    expect(DomUtils.isReferenceElement(instance.reference)).toBe(true);\n    expect(DomUtils.isReferenceElement(instance.popper)).toBe(false);\n    instance.popper.classList.add('other');\n    expect(DomUtils.isReferenceElement(instance.popper)).toBe(false);\n  });",
            "file": "unit/dom-utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "finds the ownerDocument of an element",
            "suites": [
                "getOwnerDocument"
            ],
            "updatePoint": {
                "line": 74,
                "column": 43
            },
            "line": 74,
            "code": "  it('finds the ownerDocument of an element', () => {\n    expect(DomUtils.getOwnerDocument(document.createElement('div'))).toBe(document);\n  });",
            "file": "unit/dom-utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses the default document if the element was created from a template",
            "suites": [
                "getOwnerDocument"
            ],
            "updatePoint": {
                "line": 77,
                "column": 74
            },
            "line": 77,
            "code": "  it('uses the default document if the element was created from a template', () => {\n    const template = document.createElement('template');\n    template.innerHTML = '<div></div>';\n    const div = template.content.firstChild;\n    expect(DomUtils.getOwnerDocument(div)).toBe(document);\n  });",
            "file": "unit/dom-utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses data-tippy-content",
            "suites": [
                "getDataAttributeProps"
            ],
            "updatePoint": {
                "line": 6,
                "column": 29
            },
            "line": 6,
            "code": "  it('uses data-tippy-content', () => {\n    const ref = h();\n    ref.setAttribute('data-tippy-content', 'test');\n    expect(getDataAttributeProps(ref).content).toBe('test');\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not parse data-tippy-content",
            "suites": [
                "getDataAttributeProps"
            ],
            "updatePoint": {
                "line": 11,
                "column": 39
            },
            "line": 11,
            "code": "  it('does not parse data-tippy-content', () => {\n    const ref = h();\n    ref.setAttribute('data-tippy-content', '[Hello');\n    expect(getDataAttributeProps(ref).content).toBe('[Hello');\n    ref.setAttribute('data-tippy-content', '3333333333333333333333333');\n    expect(getDataAttributeProps(ref).content).toBe('3333333333333333333333333');\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns the attribute props",
            "suites": [
                "getDataAttributeProps"
            ],
            "updatePoint": {
                "line": 18,
                "column": 33
            },
            "line": 18,
            "code": "  it('returns the attribute props', () => {\n    const ref = h();\n    ref.setAttribute('data-tippy-arrow', 'round');\n    expect(getDataAttributeProps(ref)).toEqual({\n      arrow: 'round'\n    });\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "correctly parses true & false strings",
            "suites": [
                "getDataAttributeProps"
            ],
            "updatePoint": {
                "line": 25,
                "column": 43
            },
            "line": 25,
            "code": "  it('correctly parses true & false strings', () => {\n    const ref = h();\n    ref.setAttribute('data-tippy-interactive', 'true');\n    ref.setAttribute('data-tippy-arrow', 'false');\n    expect(getDataAttributeProps(ref)).toEqual({\n      interactive: true,\n      arrow: false\n    });\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "correctly parses number strings",
            "suites": [
                "getDataAttributeProps"
            ],
            "updatePoint": {
                "line": 34,
                "column": 37
            },
            "line": 34,
            "code": "  it('correctly parses number strings', () => {\n    const ref = h();\n    ref.setAttribute('data-tippy-delay', '129');\n    ref.setAttribute('data-tippy-duration', '111');\n    expect(getDataAttributeProps(ref)).toEqual({\n      delay: 129,\n      duration: 111\n    });\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "correctly parses JSON-serializable props",
            "suites": [
                "getDataAttributeProps"
            ],
            "updatePoint": {
                "line": 43,
                "column": 46
            },
            "line": 43,
            "code": "  it('correctly parses JSON-serializable props', () => {\n    const ref = h();\n    ref.setAttribute('data-tippy-delay', '[100, 255]');\n    ref.setAttribute('data-tippy-duration', '[0, 999]');\n    ref.setAttribute('data-tippy-popperOptions', '{ \"placement\": \"right\" }');\n    expect(getDataAttributeProps(ref)).toEqual({\n      delay: [100, 255],\n      duration: [0, 999],\n      popperOptions: {\n        placement: 'right'\n      }\n    });\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not break if content begins with [ or {",
            "suites": [
                "getDataAttributeProps"
            ],
            "updatePoint": {
                "line": 56,
                "column": 50
            },
            "line": 56,
            "code": "  it('does not break if content begins with [ or {', () => {\n    const ref = h();\n    ref.setAttribute('data-tippy-content', '[');\n    expect(() => getDataAttributeProps(ref)).not.toThrow();\n    ref.setAttribute('data-tippy-content', '{');\n    expect(() => getDataAttributeProps(ref)).not.toThrow();\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores attributes if `ignoreAttributes: true`",
            "suites": [
                "evaluateProps"
            ],
            "updatePoint": {
                "line": 65,
                "column": 52
            },
            "line": 65,
            "code": "  it('ignores attributes if `ignoreAttributes: true`', () => {\n    const props = {\n      animation: 'scale',\n      ignoreAttributes: true\n    };\n    const reference = h();\n    reference.setAttribute('data-tippy-animation', 'fade');\n    expect(evaluateProps(reference, props)).toMatchSnapshot();\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not ignore attributes if `ignoreAttributes: false`",
            "suites": [
                "evaluateProps"
            ],
            "updatePoint": {
                "line": 74,
                "column": 61
            },
            "line": 74,
            "code": "  it('does not ignore attributes if `ignoreAttributes: false`', () => {\n    const props = {\n      animation: 'scale',\n      ignoreAttributes: false\n    };\n    const reference = h();\n    reference.setAttribute('data-tippy-animation', 'fade');\n    expect(evaluateProps(reference, props)).toMatchSnapshot();\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "considers plugin props",
            "suites": [
                "evaluateProps"
            ],
            "updatePoint": {
                "line": 83,
                "column": 28
            },
            "line": 83,
            "code": "  it('considers plugin props', () => {\n    const plugins = [{\n      name: 'plugin',\n      fn: () => ({})\n    }];\n    const props = {\n      plugin: 'x',\n      plugins\n    };\n    const reference = h();\n    reference.setAttribute('data-tippy-plugin', 'y');\n    expect(evaluateProps(reference, props)).toMatchSnapshot();\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "recognizes an unknown prop",
            "suites": [
                "validateProps"
            ],
            "updatePoint": {
                "line": 98,
                "column": 32
            },
            "line": 98,
            "code": "  it('recognizes an unknown prop', () => {\n    const prop = '__x';\n    validateProps({\n      [prop]: true\n    });\n    expect(console.warn).toHaveBeenCalledWith(...getFormattedMessage([`\\`${prop}\\``, \"is not a valid prop. You may have spelled it incorrectly, or if it's\", 'a plugin, forgot to pass it in an array as props.plugins.', '\\n\\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' ')));\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "handles included plugin props",
            "suites": [
                "validateProps"
            ],
            "updatePoint": {
                "line": 105,
                "column": 35
            },
            "line": 105,
            "code": "  it('handles included plugin props', () => {\n    const prop = 'followCursor';\n    const plugins = [{\n      name: prop,\n      fn: () => ({})\n    }];\n    validateProps({\n      [prop]: true\n    });\n    expect(console.warn).toHaveBeenCalledWith(...getFormattedMessage([`\\`${prop}\\``, \"is not a valid prop. You may have spelled it incorrectly, or if it's\", 'a plugin, forgot to pass it in an array as props.plugins.', '\\n\\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' ')));\n    console.warn.mockClear();\n    validateProps({\n      [prop]: true\n    }, plugins);\n    expect(console.warn).not.toHaveBeenCalled();\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "handles custom plugin props",
            "suites": [
                "validateProps"
            ],
            "updatePoint": {
                "line": 121,
                "column": 33
            },
            "line": 121,
            "code": "  it('handles custom plugin props', () => {\n    const prop = '__custom';\n    const plugins = [{\n      name: prop,\n      fn: () => ({})\n    }];\n    validateProps({\n      [prop]: true\n    });\n    expect(console.warn).toHaveBeenCalledWith(...getFormattedMessage([`\\`${prop}\\``, \"is not a valid prop. You may have spelled it incorrectly, or if it's\", 'a plugin, forgot to pass it in an array as props.plugins.', '\\n\\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' ')));\n    console.warn.mockClear();\n    validateProps({\n      [prop]: true\n    }, plugins);\n    expect(console.warn).not.toHaveBeenCalled();\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is preferred over .defaultValue on Plugin objects",
            "suites": [
                "setDefaultProps"
            ],
            "updatePoint": {
                "line": 139,
                "column": 55
            },
            "line": 139,
            "code": "  it('is preferred over .defaultValue on Plugin objects', () => {\n    const instance1 = tippy(h());\n    expect(instance1.props.followCursor).toBe(false);\n    setDefaultProps({\n      followCursor: 'initial'\n    });\n    const instance2 = tippy(h());\n    expect(instance2.props.followCursor).toBe('initial');\n    const instance3 = tippy(h(), {\n      followCursor: true\n    });\n    expect(instance3.props.followCursor).toBe(true);\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works as expected with non-default plugins",
            "suites": [
                "setDefaultProps"
            ],
            "updatePoint": {
                "line": 152,
                "column": 48
            },
            "line": 152,
            "code": "  it('works as expected with non-default plugins', () => {\n    const instance1 = tippy(h(), {\n      plugins: [{\n        name: 'testPlugin',\n        defaultValue: 'new',\n        fn: () => ({})\n      }]\n    });\n    expect(instance1.props.testPlugin).toBe('new');\n    setDefaultProps({\n      testPlugin: false\n    });\n    const instance2 = tippy(h(), {\n      plugins: [{\n        name: 'testPlugin',\n        defaultValue: 'new',\n        fn: () => ({})\n      }]\n    });\n    expect(instance2.props.testPlugin).toBe(false);\n  });",
            "file": "unit/props.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns the expected object",
            "suites": [
                "tippy"
            ],
            "updatePoint": {
                "line": 7,
                "column": 33
            },
            "line": 7,
            "code": "  it('returns the expected object', () => {\n    expect(typeof tippy(h())).toBe('object');\n    expect(Array.isArray(tippy([h(), h()]))).toBe(true);\n  });",
            "file": "unit/tippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "merges the default props with the supplied props",
            "suites": [
                "tippy"
            ],
            "updatePoint": {
                "line": 11,
                "column": 54
            },
            "line": 11,
            "code": "  it('merges the default props with the supplied props', () => {\n    expect(tippy(h(), {\n      placement: 'bottom-end'\n    }).props).toMatchSnapshot();\n  });",
            "file": "unit/tippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "warns if invalid props(s) are supplied",
            "suites": [
                "tippy"
            ],
            "updatePoint": {
                "line": 16,
                "column": 44
            },
            "line": 16,
            "code": "  it('warns if invalid props(s) are supplied', () => {\n    tippy(h(), {\n      placement: 'top',\n      _someInvalidProp: true\n    });\n    expect(console.warn).toHaveBeenCalledTimes(1);\n  });",
            "file": "unit/tippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "handles falsy reference in an array",
            "suites": [
                "tippy"
            ],
            "updatePoint": {
                "line": 23,
                "column": 41
            },
            "line": 23,
            "code": "  it('handles falsy reference in an array', () => {\n    tippy([null, false, 0, undefined]);\n  });",
            "file": "unit/tippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "errors if passed falsy Target type",
            "suites": [
                "tippy"
            ],
            "updatePoint": {
                "line": 26,
                "column": 40
            },
            "line": 26,
            "code": "  it('errors if passed falsy Target type', () => {\n    tippy(null);\n    expect(console.error).toHaveBeenCalledWith(...getFormattedMessage(['tippy() was passed', '`' + String(null) + '`', 'as its targets (first) argument. Valid types are: String, Element, Element[],', 'or NodeList.'].join(' ')));\n  });",
            "file": "unit/tippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "warns if passed a single content element for many different references",
            "suites": [
                "tippy"
            ],
            "updatePoint": {
                "line": 30,
                "column": 76
            },
            "line": 30,
            "code": "  it('warns if passed a single content element for many different references', () => {\n    const targets = [h(), h()];\n    tippy(targets, {\n      content: document.createElement('div')\n    });\n    expect(console.warn).toHaveBeenCalledWith(...getFormattedMessage(['tippy() was passed an Element as the `content` prop, but more than', 'one tippy instance was created by this invocation. This means the', 'content element will only be appended to the last tippy instance.', '\\n\\n', 'Instead, pass the .innerHTML of the element, or use a function that', 'returns a cloned version of the element instead.', '\\n\\n', '1) content: element.innerHTML\\n', '2) content: () => element.cloneNode(true)'].join(' ')));\n  });",
            "file": "unit/tippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "changes the default props applied to instances",
            "suites": [
                "tippy.setDefaultProps()"
            ],
            "updatePoint": {
                "line": 39,
                "column": 52
            },
            "line": 39,
            "code": "  it('changes the default props applied to instances', () => {\n    const newPlacement = 'bottom-end';\n    tippy.setDefaultProps({\n      placement: newPlacement\n    });\n    expect(defaultProps.placement).toBe(newPlacement);\n  });",
            "file": "unit/tippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hides all tippys on the document, ignoring `hideOnClick`",
            "suites": [
                "hideAll()"
            ],
            "updatePoint": {
                "line": 48,
                "column": 62
            },
            "line": 48,
            "code": "  it('hides all tippys on the document, ignoring `hideOnClick`', () => {\n    const props = {\n      showOnCreate: true,\n      hideOnClick: false\n    };\n    const instances = [...Array(3)].map(() => tippy(h(), props));\n    jest.runAllTimers();\n    hideAll();\n    instances.forEach(instance => {\n      expect(instance.state.isVisible).toBe(false);\n    });\n  });",
            "file": "unit/tippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "respects `duration` option",
            "suites": [
                "hideAll()"
            ],
            "updatePoint": {
                "line": 60,
                "column": 32
            },
            "line": 60,
            "code": "  it('respects `duration` option', () => {\n    const props = {\n      showOnCreate: true,\n      duration: 100\n    };\n    const instances = [...Array(3)].map(() => tippy(h(), props));\n    jest.runAllTimers();\n    hideAll({\n      duration: 0\n    });\n    instances.forEach(instance => {\n      expect(instance.state.isMounted).toBe(false);\n    });\n  });",
            "file": "unit/tippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "respects `exclude` option",
            "suites": [
                "hideAll()"
            ],
            "updatePoint": {
                "line": 74,
                "column": 31
            },
            "line": 74,
            "code": "  it('respects `exclude` option', () => {\n    const props = {\n      showOnCreate: true\n    };\n    const instances = [...Array(3)].map(() => tippy(h(), props));\n    jest.runAllTimers();\n    hideAll({\n      exclude: instances[0]\n    });\n    instances.forEach(instance => {\n      expect(instance.state.isVisible).toBe(instance === instances[0] ? true : false);\n    });\n  });",
            "file": "unit/tippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "respects `exclude` option as type ReferenceElement for multiple tippys",
            "suites": [
                "hideAll()"
            ],
            "updatePoint": {
                "line": 87,
                "column": 76
            },
            "line": 87,
            "code": "  it('respects `exclude` option as type ReferenceElement for multiple tippys', () => {\n    const props = {\n      showOnCreate: true,\n      multiple: true\n    };\n    const ref = h();\n    tippy(ref, props);\n    tippy(ref, props);\n    hideAll({\n      exclude: ref\n    });\n    const instances = [...document.querySelectorAll(POPPER_SELECTOR)].map(popper => popper._tippy);\n    instances.forEach(instance => {\n      expect(instance.state.isVisible).toBe(true);\n    });\n  });",
            "file": "unit/tippy.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works for plain objects",
            "suites": [
                "hasOwnProperty"
            ],
            "updatePoint": {
                "line": 3,
                "column": 29
            },
            "line": 3,
            "code": "  it('works for plain objects', () => {\n    expect(Utils.hasOwnProperty({\n      prop: true\n    }, 'prop')).toBe(true);\n    expect(Utils.hasOwnProperty({}, 'toString')).toBe(false);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works for prototypeless objects",
            "suites": [
                "hasOwnProperty"
            ],
            "updatePoint": {
                "line": 9,
                "column": 37
            },
            "line": 9,
            "code": "  it('works for prototypeless objects', () => {\n    const o = Object.create(null);\n    o.prop = true;\n    expect(Utils.hasOwnProperty(o, 'prop')).toBe(true);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns the value if not an array",
            "suites": [
                "getValueAtIndexOrReturn"
            ],
            "updatePoint": {
                "line": 16,
                "column": 39
            },
            "line": 16,
            "code": "  it('returns the value if not an array', () => {\n    expect(Utils.getValueAtIndexOrReturn('unique', 0)).toBe('unique');\n    expect(Utils.getValueAtIndexOrReturn('unique', 1)).toBe('unique');\n    expect(Utils.getValueAtIndexOrReturn(true, 1)).toBe(true);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns the value at the specified index if an array",
            "suites": [
                "getValueAtIndexOrReturn"
            ],
            "updatePoint": {
                "line": 21,
                "column": 58
            },
            "line": 21,
            "code": "  it('returns the value at the specified index if an array', () => {\n    expect(Utils.getValueAtIndexOrReturn([-100, -200], 0)).toBe(-100);\n    expect(Utils.getValueAtIndexOrReturn([-100, -200], 1)).toBe(-200);\n    expect(Utils.getValueAtIndexOrReturn(['x', 'y'], 0)).toBe('x');\n    expect(Utils.getValueAtIndexOrReturn(['x', 'y'], 1)).toBe('y');\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses the default duration if the value is null",
            "suites": [
                "getValueAtIndexOrReturn"
            ],
            "updatePoint": {
                "line": 27,
                "column": 52
            },
            "line": 27,
            "code": "  it('uses the default duration if the value is null', () => {\n    expect(Utils.getValueAtIndexOrReturn([null, 5], 0, -1)).toBe(-1);\n    expect(Utils.getValueAtIndexOrReturn([5, null], 1, 1000)).toBe(1000);\n    expect(Utils.getValueAtIndexOrReturn([null, 5], 0, [8, 9])).toBe(8);\n    expect(Utils.getValueAtIndexOrReturn([5, null], 1, [1, 2])).toBe(2);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses the default duration if the value is undefined",
            "suites": [
                "getValueAtIndexOrReturn"
            ],
            "updatePoint": {
                "line": 33,
                "column": 57
            },
            "line": 33,
            "code": "  it('uses the default duration if the value is undefined', () => {\n    expect(Utils.getValueAtIndexOrReturn([undefined, 5], 0, -1)).toBe(-1);\n    expect(Utils.getValueAtIndexOrReturn([5, undefined], 1, 1000)).toBe(1000);\n    expect(Utils.getValueAtIndexOrReturn([undefined, 5], 0, [8, 9])).toBe(8);\n    expect(Utils.getValueAtIndexOrReturn([5, undefined], 1, [1, 2])).toBe(2);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works as expected",
            "suites": [
                "debounce"
            ],
            "updatePoint": {
                "line": 41,
                "column": 23
            },
            "line": 41,
            "code": "  it('works as expected', () => {\n    const fn = jest.fn();\n    const debouncedFn = Utils.debounce(fn, 50);\n    debouncedFn();\n    expect(fn).toHaveBeenCalledTimes(0);\n    jest.advanceTimersByTime(40);\n    expect(fn).toHaveBeenCalledTimes(0);\n    debouncedFn();\n    jest.advanceTimersByTime(40);\n    expect(fn).toHaveBeenCalledTimes(0);\n    jest.advanceTimersByTime(10);\n    expect(fn).toHaveBeenCalledTimes(1);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is called with arguments",
            "suites": [
                "debounce"
            ],
            "updatePoint": {
                "line": 54,
                "column": 30
            },
            "line": 54,
            "code": "  it('is called with arguments', () => {\n    const fn = jest.fn();\n    const ms = 50;\n    const debouncedFn = Utils.debounce(fn, ms);\n    debouncedFn('string');\n    jest.advanceTimersByTime(ms);\n    expect(fn).toHaveBeenCalledWith('string');\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not wrap with new function if ms = 0",
            "suites": [
                "debounce"
            ],
            "updatePoint": {
                "line": 62,
                "column": 47
            },
            "line": 62,
            "code": "  it('does not wrap with new function if ms = 0', () => {\n    const fn = jest.fn();\n    const debouncedFn = Utils.debounce(fn, 0);\n    expect(debouncedFn).toBe(fn);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "deletes unwanted properties",
            "suites": [
                "removeProperties"
            ],
            "updatePoint": {
                "line": 69,
                "column": 33
            },
            "line": 69,
            "code": "  it('deletes unwanted properties', () => {\n    expect(Utils.removeProperties({\n      a: 1,\n      b: 2\n    }, ['b'])).toEqual({\n      a: 1\n    });\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns an array parsed from the specified string",
            "suites": [
                "splitBySpaces"
            ],
            "updatePoint": {
                "line": 79,
                "column": 55
            },
            "line": 79,
            "code": "  it('returns an array parsed from the specified string', () => {\n    expect(Utils.splitBySpaces('')).toMatchObject([]);\n    expect(Utils.splitBySpaces('one')).toMatchObject(['one']);\n    expect(Utils.splitBySpaces('one two')).toMatchObject(['one', 'two']);\n    expect(Utils.splitBySpaces('one  two    three')).toMatchObject(['one', 'two', 'three']);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores surrounding whitespace",
            "suites": [
                "splitBySpaces"
            ],
            "updatePoint": {
                "line": 85,
                "column": 36
            },
            "line": 85,
            "code": "  it('ignores surrounding whitespace', () => {\n    expect(Utils.splitBySpaces('  one  ')).toMatchObject(['one']);\n    expect(Utils.splitBySpaces(' one  two ')).toMatchObject(['one', 'two']);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "correctly determines types of Elements",
            "suites": [
                "isType"
            ],
            "updatePoint": {
                "line": 91,
                "column": 44
            },
            "line": 91,
            "code": "  it('correctly determines types of Elements', () => {\n    expect(Utils.isType(document.createElement('div'), 'Element')).toBe(true);\n    expect(Utils.isType(document.createElementNS('http://www.w3.org/2000/svg', 'svg'), 'Element')).toBe(true);\n    expect(Utils.isType({}, 'Element')).toBe(false);\n    expect(Utils.isType('button', 'Element')).toBe(false);\n    expect(Utils.isType(document.querySelectorAll('a'), 'Element')).toBe(false);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "correctly determines type of MouseEvents",
            "suites": [
                "isType"
            ],
            "updatePoint": {
                "line": 98,
                "column": 46
            },
            "line": 98,
            "code": "  it('correctly determines type of MouseEvents', () => {\n    expect(Utils.isType(new MouseEvent('mouseenter'), 'MouseEvent')).toBe(true);\n    expect(Utils.isType(new FocusEvent('focus'), 'MouseEvent')).toBe(false);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "correctly determines type of NodeLists",
            "suites": [
                "isType"
            ],
            "updatePoint": {
                "line": 102,
                "column": 44
            },
            "line": 102,
            "code": "  it('correctly determines type of NodeLists', () => {\n    expect(Utils.isType(document.querySelectorAll('a'), 'NodeList')).toBe(true);\n    expect(Utils.isType(document.createElement('div'), 'NodeList')).toBe(false);\n    expect(Utils.isType({}, 'NodeList')).toBe(false);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds item only if unique",
            "suites": [
                "pushIfUnique"
            ],
            "updatePoint": {
                "line": 109,
                "column": 30
            },
            "line": 109,
            "code": "  it('adds item only if unique', () => {\n    const item = {};\n    const arr = [];\n    Utils.pushIfUnique(arr, item);\n    Utils.pushIfUnique(arr, item);\n    Utils.pushIfUnique(arr, 2);\n    expect(arr).toEqual([item, 2]);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should append `px` if number",
            "suites": [
                "appendPxIfNumber"
            ],
            "updatePoint": {
                "line": 119,
                "column": 34
            },
            "line": 119,
            "code": "  it('should append `px` if number', () => {\n    expect(Utils.appendPxIfNumber(200)).toBe('200px');\n    expect(Utils.appendPxIfNumber(0)).toBe('0px');\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not append `px` if string",
            "suites": [
                "appendPxIfNumber"
            ],
            "updatePoint": {
                "line": 123,
                "column": 38
            },
            "line": 123,
            "code": "  it('should not append `px` if string', () => {\n    expect(Utils.appendPxIfNumber('200rem')).toBe('200rem');\n    expect(Utils.appendPxIfNumber('10px')).toBe('10px');\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "filters out duplicate elements",
            "suites": [
                "unique"
            ],
            "updatePoint": {
                "line": 129,
                "column": 36
            },
            "line": 129,
            "code": "  it('filters out duplicate elements', () => {\n    const ref1 = {};\n    const ref2 = {};\n    expect(Utils.unique([0, 1, 0, 2, 3, 2, 3, 3, 4])).toEqual([0, 1, 2, 3, 4]);\n    expect(Utils.unique([ref1, ref1, ref2])).toEqual([ref1, ref2]);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "number: returns number",
            "suites": [
                "getNumber"
            ],
            "updatePoint": {
                "line": 137,
                "column": 28
            },
            "line": 137,
            "code": "  it('number: returns number', () => {\n    expect(Utils.getNumber(0)).toBe(0);\n    expect(Utils.getNumber(100)).toBe(100);\n    expect(Utils.getNumber(-1.13812)).toBe(-1.13812);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "string: returns number from CSS string",
            "suites": [
                "getNumber"
            ],
            "updatePoint": {
                "line": 142,
                "column": 44
            },
            "line": 142,
            "code": "  it('string: returns number from CSS string', () => {\n    expect(Utils.getNumber('0px')).toBe(0);\n    expect(Utils.getNumber('100rem')).toBe(100);\n    expect(Utils.getNumber('-21.35em')).toBe(-21.35);\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removes properties that are set to `undefined`",
            "suites": [
                "removeUndefinedProps"
            ],
            "updatePoint": {
                "line": 149,
                "column": 52
            },
            "line": 149,
            "code": "  it('removes properties that are set to `undefined`', () => {\n    expect(Utils.removeUndefinedProps({\n      a: undefined,\n      b: null,\n      c: 0,\n      d: true,\n      e: undefined\n    })).toEqual({\n      b: null,\n      c: 0,\n      d: true\n    });\n  });",
            "file": "unit/utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "recognizes a falsy target",
            "suites": [
                "validateTargets"
            ],
            "updatePoint": {
                "line": 3,
                "column": 31
            },
            "line": 3,
            "code": "  it('recognizes a falsy target', () => {\n    const falsys = [null, undefined, false, NaN, 0, ''];\n    falsys.forEach(falsy => {\n      validateTargets(falsy);\n      expect(console.error).toHaveBeenCalledWith(...getFormattedMessage(['tippy() was passed', '`' + String(falsy) + '`', 'as its targets (first) argument. Valid types are: String, Element, Element[],', 'or NodeList.'].join(' ')));\n    });\n  });",
            "file": "unit/validation.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should only ever emit a warning of the same message once",
            "suites": [
                "warnWhen"
            ],
            "updatePoint": {
                "line": 12,
                "column": 62
            },
            "line": 12,
            "code": "  it('should only ever emit a warning of the same message once', () => {\n    warnWhen(true, 'warning');\n    warnWhen(true, 'warning');\n    expect(console.warn).toHaveBeenCalledTimes(1);\n  });",
            "file": "unit/validation.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should only ever emit an error of the same message once",
            "suites": [
                "errorWhen"
            ],
            "updatePoint": {
                "line": 19,
                "column": 61
            },
            "line": 19,
            "code": "  it('should only ever emit an error of the same message once', () => {\n    errorWhen(true, 'error');\n    errorWhen(true, 'error');\n    expect(console.error).toHaveBeenCalledTimes(1);\n  });",
            "file": "unit/validation.test.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "atomiks__tippyjs.svg"
}