{"repo":"facebookarchive/react-360","url":"https://github.com/facebookarchive/react-360","branch":"master","configs":[{"package":"ref-count-cache","lang":"js","dir":"packages/ref-count-cache/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"webgl-lite","lang":"js","dir":"packages/webgl-lite/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"webgl-ui-system-font","lang":"js","dir":"packages/webgl-ui-system-font/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"webgl-ui","lang":"js","dir":"packages/webgl-ui/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"lang":"js","dir":"render-tests/tests","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"insertion","suites":["RefCountCache"],"updatePoint":{"line":13,"column":17,"index":456},"line":13,"code":"  test('insertion', () => {\n    const cache = new RefCountCache();\n    const obj = {};\n    expect(cache.has('obj')).toBe(false);\n    cache.addEntry('obj', obj);\n    expect(cache.has('obj')).toBe(true);\n    expect(cache.get('obj')).toBe(obj);\n  });","file":"RefCountCache-test.js","skipped":false,"dir":"packages/ref-count-cache/src/__tests__"},{"name":"override","suites":["RefCountCache"],"updatePoint":{"line":21,"column":16,"index":703},"line":21,"code":"  test('override', () => {\n    const cache = new RefCountCache();\n    const a = {};\n    const b = {};\n    cache.addEntry('path', a);\n    expect(cache.get('path')).toBe(a);\n    cache.addEntry('path', b);\n    expect(cache.get('path')).toBe(b);\n  });","file":"RefCountCache-test.js","skipped":false,"dir":"packages/ref-count-cache/src/__tests__"},{"name":"reference counting","suites":["RefCountCache"],"updatePoint":{"line":30,"column":26,"index":961},"line":30,"code":"  test('reference counting', () => {\n    const cache = new RefCountCache();\n    cache.addEntry('a', {});\n    expect(cache.addReference('a')).toBe(2);\n    expect(cache.addReference('a')).toBe(3);\n    expect(cache.removeReference('a')).toBe(2);\n    expect(cache.removeReference('a')).toBe(1);\n  });","file":"RefCountCache-test.js","skipped":false,"dir":"packages/ref-count-cache/src/__tests__"},{"name":"getting value on queue","suites":["RefCountCache"],"updatePoint":{"line":38,"column":30,"index":1262},"line":38,"code":"  test('getting value on queue', () => {\n    const cache = new RefCountCache();\n    const a = {};\n    cache.addEntry('a', a);\n    expect(cache.removeReference('a')).toBe(0);\n    expect(cache.get('a')).toBe(a);\n  });","file":"RefCountCache-test.js","skipped":false,"dir":"packages/ref-count-cache/src/__tests__"},{"name":"ejection","suites":["RefCountCache"],"updatePoint":{"line":45,"column":16,"index":1464},"line":45,"code":"  test('ejection', () => {\n    const ejected = [];\n    const cache = new RefCountCache(function (path) {\n      ejected.push(path);\n    }, {\n      queueSize: 2\n    });\n    cache.addEntry('a', {});\n    cache.addEntry('b', {});\n    cache.addEntry('c', {});\n    cache.removeReference('b');\n    cache.removeReference('c');\n    // Cache should be able to hold two elements\n    expect(ejected).toEqual([]);\n    cache.removeReference('a');\n    expect(ejected).toEqual(['b']);\n    cache.addEntry('d', {});\n    cache.removeReference('d');\n    expect(ejected).toEqual(['b', 'c']);\n  });","file":"RefCountCache-test.js","skipped":false,"dir":"packages/ref-count-cache/src/__tests__"},{"name":"count does not go below zero","suites":["RefCountCache"],"updatePoint":{"line":65,"column":36,"index":2060},"line":65,"code":"  test('count does not go below zero', () => {\n    const cache = new RefCountCache();\n    cache.addEntry('a', {});\n    expect(cache.removeReference('a')).toBe(0);\n    expect(cache.removeReference('a')).toBe(0);\n  });","file":"RefCountCache-test.js","skipped":false,"dir":"packages/ref-count-cache/src/__tests__"},{"name":"ejected entries cannot be queued twice","suites":["RefCountCache"],"updatePoint":{"line":71,"column":46,"index":2287},"line":71,"code":"  test('ejected entries cannot be queued twice', () => {\n    const ejected = [];\n    const cache = new RefCountCache(function (path) {\n      ejected.push(path);\n    }, {\n      queueSize: 2\n    });\n    cache.addEntry('a', {});\n    cache.addEntry('b', {});\n    cache.addEntry('c', {});\n    cache.addEntry('d', {});\n    cache.addEntry('e', {});\n    cache.removeReference('a');\n    cache.removeReference('b');\n    cache.removeReference('b');\n    cache.removeReference('b');\n    cache.removeReference('c');\n    expect(ejected).toEqual(['a']);\n    cache.removeReference('d');\n    cache.removeReference('e');\n    expect(ejected).toEqual(['a', 'b', 'c']);\n  });","file":"RefCountCache-test.js","skipped":false,"dir":"packages/ref-count-cache/src/__tests__"},{"name":"resurrection from queue","suites":["RefCountCache"],"updatePoint":{"line":93,"column":31,"index":2926},"line":93,"code":"  test('resurrection from queue', () => {\n    const ejected = [];\n    const cache = new RefCountCache(function (path) {\n      ejected.push(path);\n    }, {\n      queueSize: 2\n    });\n    cache.addEntry('a', {});\n    cache.addEntry('b', {});\n    cache.addEntry('c', {});\n    cache.addEntry('d', {});\n    cache.addEntry('e', {});\n    cache.removeReference('b'); // queue is ['b']\n    cache.removeReference('d'); // queue is ['d', 'b']\n    cache.removeReference('c'); // queue is ['c', 'd']\n    expect(ejected).toEqual(['b']);\n    expect(cache.addReference('d')).toBe(1); // queue is ['c']\n    cache.removeReference('e'); // queue is ['e', 'c']\n    cache.removeReference('a'); // queue is ['a', 'e']\n    expect(ejected).toEqual(['b', 'c']);\n  });","file":"RefCountCache-test.js","skipped":false,"dir":"packages/ref-count-cache/src/__tests__"},{"name":"shader definitions","suites":["Program"],"updatePoint":{"line":13,"column":26,"index":441},"line":13,"code":"  test('shader definitions', () => {\n    const prog = new Program({}).addShader('code', 0);\n    expect(prog._shaders[0].code).toBe('code');\n    prog.addShader('more code', 0, ['FOO', 'BAR']);\n    expect(prog._shaders[1].code).toBe('#define FOO\\n#define BAR\\nmore code');\n    prog.addShader('#version 300 es\\n\\nfancy code', 0, ['IMAGE']);\n    expect(prog._shaders[2].code).toBe('#version 300 es\\n#define IMAGE\\n\\nfancy code');\n  });","file":"Program-test.js","skipped":false,"dir":"packages/webgl-lite/src/__tests__"},{"name":"constructs one program for each context","suites":["ProgramManager"],"updatePoint":{"line":13,"column":47,"index":490},"line":13,"code":"  test('constructs one program for each context', () => {\n    const generator = _ => ({});\n    const pm = new ProgramManager(generator);\n    const gl1 = {};\n    const prog1 = pm.getProgram(gl1);\n    const prog2 = pm.getProgram(gl1);\n    expect(prog1).toBe(prog2);\n    const gl2 = {};\n    const prog3 = pm.getProgram(gl2);\n    expect(prog1).not.toBe(prog3);\n  });","file":"ProgramManager-test.js","skipped":false,"dir":"packages/webgl-lite/src/__tests__"},{"name":"perfect fit","suites":["AtlasNode"],"updatePoint":{"line":15,"column":19,"index":483},"line":15,"code":"  test('perfect fit', () => {\n    const root = new AtlasNode(0, 0, 100, 60);\n    const result = root.insert(100, 60);\n    expect(result).toBe(root);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"does not fit","suites":["AtlasNode"],"updatePoint":{"line":20,"column":20,"index":639},"line":20,"code":"  test('does not fit', () => {\n    const root = new AtlasNode(0, 0, 100, 100);\n    expect(root.insert(120, 50)).toBe(null);\n    expect(root.insert(30, 110)).toBe(null);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"fits vertically","suites":["AtlasNode"],"updatePoint":{"line":25,"column":23,"index":817},"line":25,"code":"  test('fits vertically', () => {\n    const root = new AtlasNode(0, 0, 100, 55);\n    const result = root.insert(40, 55);\n    expect(result).toBeTruthy();\n    expect(result.x).toBe(0);\n    expect(result.y).toBe(0);\n    expect(result.width).toBe(40);\n    expect(result.height).toBe(55);\n    expect(root.left).toBe(result);\n    expect(root.right.x).toBe(40);\n    expect(root.right.y).toBe(0);\n    expect(root.right.width).toBe(60);\n    expect(root.right.height).toBe(55);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"fits horizontally","suites":["AtlasNode"],"updatePoint":{"line":39,"column":25,"index":1294},"line":39,"code":"  test('fits horizontally', () => {\n    const root = new AtlasNode(0, 0, 100, 60);\n    const result = root.insert(100, 20);\n    expect(result).toBeTruthy();\n    expect(result.x).toBe(0);\n    expect(result.y).toBe(0);\n    expect(result.width).toBe(100);\n    expect(result.height).toBe(20);\n    expect(root.left).toBe(result);\n    expect(root.right.x).toBe(0);\n    expect(root.right.y).toBe(20);\n    expect(root.right.width).toBe(100);\n    expect(root.right.height).toBe(40);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"split vertically","suites":["AtlasNode"],"updatePoint":{"line":53,"column":24,"index":1773},"line":53,"code":"  test('split vertically', () => {\n    const root = new AtlasNode(0, 0, 100, 90);\n    const result = root.insert(20, 60);\n    expect(result).toBeTruthy();\n    expect(result.x).toBe(0);\n    expect(result.y).toBe(0);\n    expect(result.width).toBe(20);\n    expect(result.height).toBe(60);\n    expect(root.right.x).toBe(20);\n    expect(root.right.y).toBe(0);\n    expect(root.right.width).toBe(80);\n    expect(root.right.height).toBe(90);\n    expect(root.left.x).toBe(0);\n    expect(root.left.y).toBe(0);\n    expect(root.left.width).toBe(20);\n    expect(root.left.height).toBe(90);\n    expect(root.left.left).toBe(result);\n    const lowerLeft = root.left.right;\n    expect(lowerLeft.x).toBe(0);\n    expect(lowerLeft.y).toBe(60);\n    expect(lowerLeft.width).toBe(20);\n    expect(lowerLeft.height).toBe(30);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"split horizontally","suites":["AtlasNode"],"updatePoint":{"line":76,"column":26,"index":2582},"line":76,"code":"  test('split horizontally', () => {\n    const root = new AtlasNode(0, 0, 100, 90);\n    const result = root.insert(60, 20);\n    expect(result).toBeTruthy();\n    expect(result.x).toBe(0);\n    expect(result.y).toBe(0);\n    expect(result.width).toBe(60);\n    expect(result.height).toBe(20);\n    expect(root.left.x).toBe(0);\n    expect(root.left.y).toBe(0);\n    expect(root.left.width).toBe(100);\n    expect(root.left.height).toBe(20);\n    expect(root.left.left).toBe(result);\n    const upperRight = root.left.right;\n    expect(upperRight.x).toBe(60);\n    expect(upperRight.y).toBe(0);\n    expect(upperRight.width).toBe(40);\n    expect(upperRight.height).toBe(20);\n    expect(root.right.x).toBe(0);\n    expect(root.right.y).toBe(20);\n    expect(root.right.width).toBe(100);\n    expect(root.right.height).toBe(70);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"inserting multiple nodes","suites":["AtlasNode"],"updatePoint":{"line":99,"column":32,"index":3404},"line":99,"code":"  test('inserting multiple nodes', () => {\n    const root = new AtlasNode(0, 0, 100, 100);\n    const first = root.insert(30, 50);\n    first.key = 'one';\n    const second = root.insert(60, 70);\n    second.key = 'two';\n    const third = root.insert(25, 30);\n    third.key = 'three';\n    expect(first.x).toBe(0);\n    expect(first.y).toBe(0);\n    expect(first.width).toBe(30);\n    expect(first.height).toBe(50);\n    expect(second.x).toBe(30);\n    expect(second.y).toBe(0);\n    expect(second.width).toBe(60);\n    expect(second.height).toBe(70);\n    expect(third.x).toBe(0);\n    expect(third.y).toBe(50);\n    expect(third.width).toBe(25);\n    expect(third.height).toBe(30);\n    const fourth = root.insert(30, 30);\n    fourth.key = 'four';\n    expect(fourth.x).toBe(30);\n    expect(fourth.y).toBe(70);\n    expect(fourth.width).toBe(30);\n    expect(fourth.height).toBe(30);\n    const fifth = root.insert(30, 30);\n    fifth.key = 'five';\n    expect(fifth.x).toBe(60);\n    expect(fifth.y).toBe(70);\n    expect(fifth.width).toBe(30);\n    expect(fifth.height).toBe(30);\n    expect(root.insert(30, 31)).toBe(null);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"resize empty space","suites":["AtlasNode"],"updatePoint":{"line":133,"column":26,"index":4506},"line":133,"code":"  test('resize empty space', () => {\n    const empty = new AtlasNode(0, 0, 40, 50);\n    const wider = empty.resize(60, 50);\n    expect(wider).toBe(empty);\n    expect(empty.width).toBe(60);\n    expect(empty.height).toBe(50);\n    const taller = empty.resize(60, 70);\n    expect(taller).toBe(empty);\n    expect(empty.width).toBe(60);\n    expect(empty.height).toBe(70);\n    const bigger = empty.resize(90, 100);\n    expect(bigger).toBe(empty);\n    expect(empty.width).toBe(90);\n    expect(empty.height).toBe(100);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"resize single node width","suites":["AtlasNode"],"updatePoint":{"line":148,"column":32,"index":5028},"line":148,"code":"  test('resize single node width', () => {\n    const root = new AtlasNode(0, 0, 40, 50);\n    root.key = 'root';\n    const newRoot = root.resize(60, 50);\n    expect(newRoot.x).toBe(0);\n    expect(newRoot.y).toBe(0);\n    expect(newRoot.width).toBe(60);\n    expect(newRoot.height).toBe(50);\n    expect(newRoot.left).toBe(root);\n    expect(newRoot.left.width).toBe(40);\n    expect(newRoot.left.height).toBe(50);\n    expect(newRoot.right.x).toBe(40);\n    expect(newRoot.right.y).toBe(0);\n    expect(newRoot.right.width).toBe(20);\n    expect(newRoot.right.height).toBe(50);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"resize single node height","suites":["AtlasNode"],"updatePoint":{"line":164,"column":33,"index":5603},"line":164,"code":"  test('resize single node height', () => {\n    const root = new AtlasNode(0, 0, 40, 50);\n    root.key = 'root';\n    const newRoot = root.resize(40, 70);\n    expect(newRoot.x).toBe(0);\n    expect(newRoot.y).toBe(0);\n    expect(newRoot.width).toBe(40);\n    expect(newRoot.height).toBe(70);\n    expect(newRoot.left).toBe(root);\n    expect(newRoot.left.width).toBe(40);\n    expect(newRoot.left.height).toBe(50);\n    expect(newRoot.right.x).toBe(0);\n    expect(newRoot.right.y).toBe(50);\n    expect(newRoot.right.width).toBe(40);\n    expect(newRoot.right.height).toBe(20);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"resize single node in both dimensions","suites":["AtlasNode"],"updatePoint":{"line":180,"column":45,"index":6190},"line":180,"code":"  test('resize single node in both dimensions', () => {\n    const root = new AtlasNode(0, 0, 40, 50);\n    root.key = 'root';\n    const newRoot = root.resize(60, 60);\n    expect(newRoot.width).toBe(60);\n    expect(newRoot.height).toBe(60);\n    expect(newRoot.right.x).toBe(40);\n    expect(newRoot.right.y).toBe(0);\n    expect(newRoot.right.width).toBe(20);\n    expect(newRoot.right.height).toBe(60);\n    const left = newRoot.left;\n    expect(left.x).toBe(0);\n    expect(left.y).toBe(0);\n    expect(left.width).toBe(40);\n    expect(left.height).toBe(60);\n    expect(left.left).toBe(root);\n    expect(root.x).toBe(0);\n    expect(root.y).toBe(0);\n    expect(root.width).toBe(40);\n    expect(root.height).toBe(50);\n    expect(left.right.x).toBe(0);\n    expect(left.right.y).toBe(50);\n    expect(left.right.width).toBe(40);\n    expect(left.right.height).toBe(10);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"resize empty horizontal space","suites":["AtlasNode"],"updatePoint":{"line":205,"column":37,"index":7046},"line":205,"code":"  test('resize empty horizontal space', () => {\n    const root = new AtlasNode(0, 0, 40, 40);\n    root.insert(30, 40).key = 'key';\n    const newRoot = root.resize(50, 40);\n    expect(newRoot).toBe(root);\n    expect(root.left.width).toBe(30);\n    expect(root.left.height).toBe(40);\n    expect(root.right.width).toBe(20);\n    expect(root.right.height).toBe(40);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"resize empty vertical space","suites":["AtlasNode"],"updatePoint":{"line":215,"column":35,"index":7410},"line":215,"code":"  test('resize empty vertical space', () => {\n    const root = new AtlasNode(0, 0, 40, 40);\n    root.insert(40, 20).key = 'key';\n    const newRoot = root.resize(40, 60);\n    expect(newRoot).toBe(root);\n    expect(root.left.width).toBe(40);\n    expect(root.left.height).toBe(20);\n    expect(root.right.width).toBe(40);\n    expect(root.right.height).toBe(40);\n  });","file":"AtlasNode-test.js","skipped":false,"dir":"packages/webgl-ui-system-font/src/__tests__"},{"name":"invalid","suites":["colorStringToARGB"],"updatePoint":{"line":13,"column":15,"index":470},"line":13,"code":"  test('invalid', () => {\n    expect(colorStringToARGB('blah')).toBe(0);\n    expect(colorStringToARGB('#12')).toBe(0);\n    expect(colorStringToARGB('#1243')).toBe(0);\n    expect(colorStringToARGB('rgb(11,22,55')).toBe(0);\n  });","file":"colorStringToARGB-test.js","skipped":false,"dir":"packages/webgl-ui/src/__tests__"},{"name":"short hex","suites":["colorStringToARGB"],"updatePoint":{"line":19,"column":17,"index":700},"line":19,"code":"  test('short hex', () => {\n    expect(colorStringToARGB('#fff')).toBe(0xffffffff);\n    expect(colorStringToARGB('#35d')).toBe(0xff3355dd);\n    expect(colorStringToARGB('#000')).toBe(0xff000000);\n  });","file":"colorStringToARGB-test.js","skipped":false,"dir":"packages/webgl-ui/src/__tests__"},{"name":"long hex","suites":["colorStringToARGB"],"updatePoint":{"line":24,"column":16,"index":901},"line":24,"code":"  test('long hex', () => {\n    expect(colorStringToARGB('#ffffff')).toBe(0xffffffff);\n    expect(colorStringToARGB('#000000')).toBe(0xff000000);\n    expect(colorStringToARGB('#c0ffee')).toBe(0xffc0ffee);\n    expect(colorStringToARGB('#cafe55')).toBe(0xffcafe55);\n  });","file":"colorStringToARGB-test.js","skipped":false,"dir":"packages/webgl-ui/src/__tests__"},{"name":"rgb","suites":["colorStringToARGB"],"updatePoint":{"line":30,"column":11,"index":1165},"line":30,"code":"  test('rgb', () => {\n    expect(colorStringToARGB('rgb(255, 255, 255)')).toBe(0xffffffff);\n    expect(colorStringToARGB('rgb(0, 32, 100)')).toBe(0xff002064);\n  });","file":"colorStringToARGB-test.js","skipped":false,"dir":"packages/webgl-ui/src/__tests__"},{"name":"rgba","suites":["colorStringToARGB"],"updatePoint":{"line":34,"column":12,"index":1331},"line":34,"code":"  test('rgba', () => {\n    expect(colorStringToARGB('rgba(0, 0, 0, 1)')).toBe(0xff000000);\n    expect(colorStringToARGB('rgba(5, 6, 7, 0.5)')).toBe(0x7f050607);\n  });","file":"colorStringToARGB-test.js","skipped":false,"dir":"packages/webgl-ui/src/__tests__"},{"name":"basic render order","suites":["StackingContext"],"updatePoint":{"line":40,"column":26,"index":918},"line":40,"code":"  test('basic render order', () => {\n    // Build a simple node tree:\n    //      0\n    //   1     2\n    //  3 4\n    const nodes = [new MockView(), new MockView(), new MockView(), new MockView(), new MockView()];\n    nodes[0].addChild(0, nodes[1]);\n    nodes[0].addChild(1, nodes[2]);\n    nodes[1].addChild(0, nodes[3]);\n    nodes[1].addChild(1, nodes[4]);\n    restack(nodes[0]);\n    expect(nodes[0].renderOrder).toBe(1);\n    expect(nodes[1].renderOrder).toBe(2);\n    expect(nodes[2].renderOrder).toBe(5);\n    expect(nodes[3].renderOrder).toBe(3);\n    expect(nodes[4].renderOrder).toBe(4);\n    nodes.push(new MockView());\n    nodes[3].addChild(0, nodes[5]);\n    restack(nodes[0]);\n    expect(nodes[0].renderOrder).toBe(1);\n    expect(nodes[1].renderOrder).toBe(2);\n    expect(nodes[2].renderOrder).toBe(6);\n    expect(nodes[3].renderOrder).toBe(3);\n    expect(nodes[4].renderOrder).toBe(5);\n    expect(nodes[5].renderOrder).toBe(4);\n  });","file":"StackingContext-test.js","skipped":false,"dir":"packages/webgl-ui/src/__tests__"},{"name":"render order with z-index","suites":["StackingContext"],"updatePoint":{"line":66,"column":33,"index":1864},"line":66,"code":"  test('render order with z-index', () => {\n    const nodes = [new MockView(), new MockView(), new MockView(), new MockView(1), new MockView()];\n    nodes[0].addChild(0, nodes[1]);\n    nodes[0].addChild(1, nodes[2]);\n    nodes[1].addChild(0, nodes[3]);\n    nodes[1].addChild(1, nodes[4]);\n    restack(nodes[0]);\n    expect(nodes[0].renderOrder).toBe(1);\n    expect(nodes[1].renderOrder).toBe(2);\n    expect(nodes[2].renderOrder).toBe(4);\n    expect(nodes[3].renderOrder).toBe(5);\n    expect(nodes[4].renderOrder).toBe(3);\n    nodes[4].zIndex = 10;\n    restack(nodes[0]);\n    expect(nodes[2].renderOrder).toBe(3);\n    expect(nodes[3].renderOrder).toBe(4);\n    expect(nodes[4].renderOrder).toBe(5);\n    nodes[1].zIndex = 1;\n    nodes[3].zIndex = 0;\n    nodes[4].zIndex = 0;\n    restack(nodes[0]);\n    expect(nodes[0].renderOrder).toBe(1);\n    expect(nodes[1].renderOrder).toBe(3);\n    expect(nodes[2].renderOrder).toBe(2);\n    expect(nodes[3].renderOrder).toBe(4);\n    expect(nodes[4].renderOrder).toBe(5);\n  });","file":"StackingContext-test.js","skipped":false,"dir":"packages/webgl-ui/src/__tests__"},{"name":"render order with nested zIndex","suites":["StackingContext"],"updatePoint":{"line":93,"column":39,"index":2881},"line":93,"code":"  test('render order with nested zIndex', () => {\n    const nodes = [new MockView(), new MockView(10), new MockView(), new MockView(1), new MockView()];\n    nodes[0].addChild(0, nodes[1]);\n    nodes[0].addChild(1, nodes[2]);\n    nodes[1].addChild(0, nodes[3]);\n    nodes[1].addChild(1, nodes[4]);\n    restack(nodes[0]);\n    expect(nodes[0].renderOrder).toBe(1);\n    expect(nodes[1].renderOrder).toBe(3);\n    expect(nodes[2].renderOrder).toBe(2);\n    expect(nodes[3].renderOrder).toBe(5);\n    expect(nodes[4].renderOrder).toBe(4);\n  });","file":"StackingContext-test.js","skipped":false,"dir":"packages/webgl-ui/src/__tests__"},{"name":"render order with negative z-index","suites":["StackingContext"],"updatePoint":{"line":106,"column":42,"index":3420},"line":106,"code":"  test('render order with negative z-index', () => {\n    const nodes = [new MockView(), new MockView(-1), new MockView(), new MockView(), new MockView()];\n    nodes[0].addChild(0, nodes[1]);\n    nodes[0].addChild(1, nodes[2]);\n    nodes[1].addChild(0, nodes[3]);\n    nodes[1].addChild(1, nodes[4]);\n    restack(nodes[0]);\n    expect(nodes[0].renderOrder).toBe(4);\n    expect(nodes[1].renderOrder).toBe(1);\n    expect(nodes[2].renderOrder).toBe(5);\n    expect(nodes[3].renderOrder).toBe(2);\n    expect(nodes[4].renderOrder).toBe(3);\n  });","file":"StackingContext-test.js","skipped":false,"dir":"packages/webgl-ui/src/__tests__"},{"name":"render order with many z-index values","suites":["StackingContext"],"updatePoint":{"line":119,"column":45,"index":3961},"line":119,"code":"  test('render order with many z-index values', () => {\n    const nodes = [new MockView(10), new MockView(5), new MockView(-2), new MockView(1), new MockView(1000), new MockView(7)];\n    nodes[0].addChild(0, nodes[1]);\n    nodes[0].addChild(1, nodes[2]);\n    nodes[0].addChild(2, nodes[3]);\n    nodes[0].addChild(3, nodes[4]);\n    nodes[0].addChild(4, nodes[5]);\n    restack(nodes[0]);\n    expect(nodes[0].renderOrder).toBe(2);\n    expect(nodes[1].renderOrder).toBe(4);\n    expect(nodes[2].renderOrder).toBe(1);\n    expect(nodes[3].renderOrder).toBe(3);\n    expect(nodes[4].renderOrder).toBe(6);\n    expect(nodes[5].renderOrder).toBe(5);\n  });","file":"StackingContext-test.js","skipped":false,"dir":"packages/webgl-ui/src/__tests__"},{"name":"render order with same z-index","suites":["StackingContext"],"updatePoint":{"line":134,"column":38,"index":4598},"line":134,"code":"  test('render order with same z-index', () => {\n    const nodes = [new MockView(), new MockView(5), new MockView(5), new MockView(), new MockView()];\n    nodes[0].addChild(0, nodes[1]);\n    nodes[0].addChild(1, nodes[2]);\n    nodes[1].addChild(0, nodes[3]);\n    nodes[1].addChild(1, nodes[4]);\n    restack(nodes[0]);\n    expect(nodes[0].renderOrder).toBe(1);\n    expect(nodes[1].renderOrder).toBe(2);\n    expect(nodes[2].renderOrder).toBe(5);\n    expect(nodes[3].renderOrder).toBe(3);\n    expect(nodes[4].renderOrder).toBe(4);\n  });","file":"StackingContext-test.js","skipped":false,"dir":"packages/webgl-ui/src/__tests__"}]}