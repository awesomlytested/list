{"repo":"apache/echarts","url":"https://github.com/apache/echarts","branch":"master","configs":[{"package":"echarts","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"geo","suites":["api/containPixel"],"updatePoint":{"line":62,"column":9,"index":1873},"line":62,"code":"  it('geo', function () {\n    registerMap('test1', testGeoJson1);\n    registerMap('test2', testGeoJson2);\n    chart.setOption({\n      geo: [{\n        id: 'aa',\n        left: 10,\n        right: '50%',\n        top: 30,\n        bottom: 40,\n        map: 'test1'\n      }, {\n        id: 'bb',\n        layoutCenter: ['50%', 50],\n        layoutSize: 20,\n        aspectScale: 1,\n        map: 'test2'\n      }, {\n        id: 'cc',\n        aspectScale: 1,\n        left: 0,\n        width: '50%',\n        top: 0,\n        height: '50%',\n        zoom: 0.5,\n        // test roam\n        map: 'test1'\n      }],\n      series: [{\n        id: 'k1',\n        type: 'scatter',\n        coordinateSystem: 'geo',\n        geoIndex: 1\n      }, {\n        id: 'k2',\n        type: 'scatter',\n        coordinateSystem: 'geo'\n      }]\n    });\n    const width = chart.getWidth();\n    // const height = chart.getWidth();\n\n    expect(chart.containPixel('geo', [15, 30])).toEqual(true);\n    expect(chart.containPixel('geo', [9.5, 30])).toEqual(false);\n    expect(chart.containPixel({\n      geoIndex: 1\n    }, [width / 2, 50])).toEqual(true);\n    expect(chart.containPixel({\n      geoIndex: 1\n    }, [10, 20])).toEqual(false);\n    expect(chart.containPixel({\n      geoId: 'cc'\n    }, [0, 0])).toEqual(false);\n  });","file":"ut/spec/api/containPixel.test.ts","skipped":false,"dir":"test"},{"name":"map","suites":["api/containPixel"],"updatePoint":{"line":116,"column":9,"index":3149},"line":116,"code":"  it('map', function () {\n    registerMap('test1', testGeoJson1);\n    registerMap('test2', testGeoJson2);\n    chart.setOption({\n      series: [{\n        id: 'k1',\n        type: 'map',\n        map: 'test1',\n        left: 10,\n        right: '50%',\n        top: 30,\n        bottom: 40\n      }, {\n        id: 'k2',\n        type: 'map',\n        map: 'test2',\n        layoutCenter: ['50%', 50],\n        layoutSize: 20,\n        aspectScale: 1\n      }]\n    });\n    const width = chart.getWidth();\n    expect(chart.containPixel('series', [15, 30])).toEqual(true);\n    expect(chart.containPixel('series', [9.5, 30])).toEqual(false);\n    expect(chart.containPixel({\n      seriesId: 'k2'\n    }, [width / 2, 50])).toEqual(true);\n    expect(chart.containPixel({\n      seriesId: 1\n    }, [10, 20])).toEqual(false);\n  });","file":"ut/spec/api/containPixel.test.ts","skipped":false,"dir":"test"},{"name":"cartesian","suites":["api/containPixel"],"updatePoint":{"line":147,"column":15,"index":3961},"line":147,"code":"  it('cartesian', function () {\n    registerMap('test1', testGeoJson1);\n    chart.setOption({\n      geo: [\n      // Should not affect grid converter.\n      {\n        map: 'test1'\n      }],\n      grid: [{\n        id: 'g0',\n        left: 10,\n        right: '50%',\n        top: 30,\n        bottom: 40\n      }, {\n        id: 'g1',\n        left: '50%',\n        right: 20,\n        top: 30,\n        bottom: 40\n      }],\n      xAxis: [{\n        id: 'x0',\n        type: 'value',\n        min: -500,\n        max: 3000,\n        gridId: 'g0'\n      }, {\n        id: 'x1',\n        type: 'value',\n        min: -50,\n        max: 300,\n        gridId: 'g0'\n      }, {\n        id: 'x2',\n        type: 'value',\n        min: -50,\n        max: 300,\n        gridId: 'g1'\n      }],\n      yAxis: [{\n        id: 'y0',\n        type: 'value',\n        min: 6000,\n        max: 9000,\n        gridId: 'g0'\n      }, {\n        id: 'y1',\n        type: 'value',\n        inverse: true,\n        // test inverse\n        min: 600,\n        max: 900,\n        gridId: 'g1'\n      }],\n      series: [{\n        id: 'k1',\n        type: 'scatter',\n        // left: 0,\n        // right: 0,\n        // top: 0,\n        // bottom: 0,\n        data: [[1000, 700]]\n      }, {\n        id: 'k2',\n        type: 'scatter',\n        // left: 0,\n        // right: 0,\n        // top: 0,\n        // bottom: 0,\n        data: [[100, 800]]\n      }, {\n        id: 'j1',\n        type: 'scatter',\n        // left: 0,\n        // right: 0,\n        // top: 0,\n        // bottom: 0,\n        data: [[100, 800]],\n        xAxisIndex: 1\n      }, {\n        id: 'i1',\n        type: 'scatter',\n        // left: 0,\n        // right: 0,\n        // top: 0,\n        // bottom: 0,\n        data: [],\n        xAxisId: 'x2',\n        yAxisId: 'y1'\n      }]\n    });\n    const width = chart.getWidth();\n    expect(chart.containPixel('grid', [15, 30])).toEqual(true);\n    expect(chart.containPixel('grid', [9.5, 30])).toEqual(false);\n    expect(chart.containPixel({\n      gridIndex: 1\n    }, [width / 2, 50])).toEqual(true);\n    expect(chart.containPixel({\n      gridIndex: 1\n    }, [10, 20])).toEqual(false);\n  });","file":"ut/spec/api/containPixel.test.ts","skipped":false,"dir":"test"},{"name":"graph","suites":["api/containPixel"],"updatePoint":{"line":325,"column":11,"index":8738},"line":325,"code":"  it('graph', function () {\n    registerMap('test1', testGeoJson1);\n    chart.setOption({\n      geo: [\n      // Should not affect graph converter.\n      {\n        map: 'test1'\n      }],\n      series: [{\n        id: 'k1',\n        type: 'graph',\n        left: 10,\n        right: '50%',\n        top: 30,\n        bottom: 40,\n        data: [{\n          x: 1000,\n          y: 2000\n        }, {\n          x: 1000,\n          y: 5000\n        }, {\n          x: 3000,\n          y: 5000\n        }, {\n          x: 3000,\n          y: 2000\n        }],\n        links: []\n      }]\n    });\n    expect(chart.containPixel('series', [15, 35])).toEqual(true);\n    expect(chart.containPixel('series', [3, 4])).toEqual(false);\n  });","file":"ut/spec/api/containPixel.test.ts","skipped":false,"dir":"test"},{"name":"geo","suites":["api/converter"],"updatePoint":{"line":71,"column":9,"index":2277},"line":71,"code":"  it('geo', function () {\n    // TODO Needs namespace\n    chart.setOption({\n      geo: [{\n        id: 'aa',\n        left: 10,\n        right: 20,\n        top: 30,\n        bottom: 40,\n        map: 'converter_test_geo_1'\n      }, {\n        id: 'bb',\n        left: 10,\n        right: 20,\n        top: 30,\n        bottom: 40,\n        map: 'converter_test_geo_2'\n      }],\n      series: [{\n        id: 'k1',\n        type: 'scatter',\n        coordinateSystem: 'geo',\n        geoIndex: 1\n      }, {\n        id: 'k2',\n        type: 'scatter',\n        coordinateSystem: 'geo'\n      }, {\n        // Should not be affected by map.\n        id: 'm1',\n        type: 'map',\n        map: 'converter_test_geo_1',\n        left: 10,\n        right: 20,\n        top: 30,\n        bottom: 40\n      }]\n    });\n    const width = chart.getWidth();\n    const height = chart.getHeight();\n    expect(pointEquals(chart.convertToPixel('geo', [5000, 3000]), [width - 20, height - 40])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel('geo', [width - 20, height - 40]), [5000, 3000])).toEqual(true);\n    expect(pointEquals(chart.convertToPixel({\n      geoIndex: 1\n    }, [500, 800]), [width - 20, 30])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      geoIndex: 1\n    }, [width - 20, 30]), [500, 800])).toEqual(true);\n    expect(pointEquals(chart.convertToPixel({\n      geoId: 'bb'\n    }, [200, 300]), [10, height - 40])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      geoId: 'bb'\n    }, [10, height - 40]), [200, 300])).toEqual(true);\n    expect(pointEquals(chart.convertToPixel({\n      seriesIndex: 0\n    }, [200, 800]), [10, 30])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      seriesIndex: 0\n    }, [10, 30]), [200, 800])).toEqual(true);\n    expect(pointEquals(chart.convertToPixel({\n      seriesId: 'k2'\n    }, [2000, 8000]), [10, 30])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      seriesId: 'k2'\n    }, [10, 30]), [2000, 8000])).toEqual(true);\n  });","file":"ut/spec/api/converter.test.ts","skipped":false,"dir":"test"},{"name":"map","suites":["api/converter"],"updatePoint":{"line":138,"column":9,"index":4300},"line":138,"code":"  it('map', function () {\n    chart.setOption({\n      geo: [\n      // Should not be affected by geo\n      {\n        id: 'aa',\n        left: 10,\n        right: 20,\n        top: 30,\n        bottom: 40,\n        map: 'converter_test_geo_1'\n      }],\n      series: [{\n        id: 'k1',\n        type: 'map',\n        map: 'converter_test_geo_1',\n        left: 10,\n        right: 20,\n        top: 30,\n        bottom: 40\n      }, {\n        id: 'k2',\n        type: 'map',\n        map: 'converter_test_geo_2',\n        left: 10,\n        right: 20,\n        top: 30,\n        bottom: 40\n      }]\n    });\n    expect(pointEquals(chart.convertToPixel({\n      seriesIndex: 0\n    }, [2000, 8000]), [10, 30])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      seriesIndex: 0\n    }, [10, 30]), [2000, 8000])).toEqual(true);\n    expect(pointEquals(chart.convertToPixel({\n      seriesId: 'k2'\n    }, [200, 800]), [10, 30])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      seriesId: 'k2'\n    }, [10, 30]), [200, 800])).toEqual(true);\n  });","file":"ut/spec/api/converter.test.ts","skipped":false,"dir":"test"},{"name":"cartesian","suites":["api/converter"],"updatePoint":{"line":181,"column":15,"index":5361},"line":181,"code":"  it('cartesian', function () {\n    chart.setOption({\n      geo: [\n      // Should not affect grid converter.\n      {\n        map: 'converter_test_geo_1'\n      }],\n      grid: [{\n        id: 'g0',\n        left: 10,\n        right: '50%',\n        top: 30,\n        bottom: 40\n      }, {\n        id: 'g1',\n        left: '50%',\n        right: 20,\n        top: 30,\n        bottom: 40\n      }],\n      xAxis: [{\n        id: 'x0',\n        type: 'value',\n        min: -500,\n        max: 3000,\n        gridId: 'g0'\n      }, {\n        id: 'x1',\n        type: 'value',\n        min: -50,\n        max: 300,\n        gridId: 'g0'\n      }, {\n        id: 'x2',\n        type: 'value',\n        min: -50,\n        max: 300,\n        gridId: 'g1'\n      }],\n      yAxis: [{\n        id: 'y0',\n        type: 'value',\n        min: 6000,\n        max: 9000,\n        gridId: 'g0'\n      }, {\n        id: 'y1',\n        type: 'value',\n        inverse: true,\n        // test inverse\n        min: 600,\n        max: 900,\n        gridId: 'g1'\n      }],\n      series: [{\n        id: 'k1',\n        type: 'scatter',\n        // left: 0,\n        // right: 0,\n        // top: 0,\n        // bottom: 0,\n        data: [[1000, 700]]\n      }, {\n        id: 'k2',\n        type: 'scatter',\n        // left: 0,\n        // right: 0,\n        // top: 0,\n        // bottom: 0,\n        data: [[100, 800]]\n      }, {\n        id: 'j1',\n        type: 'scatter',\n        // left: 0,\n        // right: 0,\n        // top: 0,\n        // bottom: 0,\n        data: [[100, 800]],\n        xAxisIndex: 1\n      }, {\n        id: 'i1',\n        type: 'scatter',\n        // left: 0,\n        // right: 0,\n        // top: 0,\n        // bottom: 0,\n        data: [],\n        xAxisId: 'x2',\n        yAxisId: 'y1'\n      }]\n    });\n    const width = chart.getWidth();\n    const height = chart.getHeight();\n    expect(pointEquals(chart.convertToPixel({\n      seriesIndex: 1\n    }, [-500, 6000]), [10, height - 40])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      seriesIndex: 1\n    }, [10, height - 40]), [-500, 6000])).toEqual(true);\n    expect(pointEquals(chart.convertToPixel({\n      seriesId: 'i1'\n    }, [300, 900]), [width - 20, height - 40])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      seriesId: 'i1'\n    }, [width - 20, height - 40]), [300, 900])).toEqual(true);\n    expect(pointEquals(chart.convertToPixel({\n      xAxisIndex: 2,\n      yAxisId: 'y1'\n    }, [300, 900]), [width - 20, height - 40])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      xAxisIndex: 2,\n      yAxisId: 'y1'\n    }, [width - 20, height - 40]), [300, 900])).toEqual(true);\n    expect(pointEquals(chart.convertToPixel({\n      gridId: 'g1'\n    }, [300, 900]), [width - 20, height - 40])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      gridId: 'g1'\n    }, [width - 20, height - 40]), [300, 900])).toEqual(true);\n    expect(pointEquals(chart.convertToPixel({\n      xAxisId: 'x0'\n    }, 3000), width / 2)).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      xAxisId: 'x0'\n    }, width / 2), 3000)).toEqual(true);\n    expect(pointEquals(chart.convertToPixel({\n      yAxisIndex: 1\n    }, 600), 30)).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      yAxisIndex: 1\n    }, 30), 600)).toEqual(true);\n  });","file":"ut/spec/api/converter.test.ts","skipped":false,"dir":"test"},{"name":"graph","suites":["api/converter"],"updatePoint":{"line":313,"column":11,"index":8674},"line":313,"code":"  it('graph', function () {\n    chart.setOption({\n      geo: [\n      // Should not affect graph converter.\n      {\n        map: 'converter_test_geo_1'\n      }],\n      series: [{\n        id: 'k1',\n        type: 'graph',\n        left: 10,\n        right: 20,\n        top: 30,\n        bottom: 40,\n        data: [{\n          x: 1000,\n          y: 2000\n        }, {\n          x: 1000,\n          y: 5000\n        }, {\n          x: 3000,\n          y: 5000\n        }, {\n          x: 3000,\n          y: 2000\n        }],\n        links: []\n      }, {\n        id: 'k2',\n        type: 'graph',\n        left: 10,\n        right: 20,\n        top: 30,\n        bottom: 40,\n        data: [{\n          x: 100,\n          y: 200\n        }, {\n          x: 100,\n          y: 500\n        }, {\n          x: 300,\n          y: 500\n        }, {\n          x: 300,\n          y: 200\n        }],\n        links: []\n      }]\n    });\n    const width = chart.getWidth();\n    const height = chart.getHeight();\n    expect(pointEquals(chart.convertToPixel({\n      seriesIndex: 0\n    }, [2000, 3500]), [10 + (width - 30) / 2, 30 + (height - 70) / 2])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      seriesIndex: 0\n    }, [10 + (width - 30) / 2, 30 + (height - 70) / 2]), [2000, 3500])).toEqual(true);\n    expect(pointEquals(chart.convertToPixel({\n      seriesId: 'k2'\n    }, [100, 500]), [10, height - 40])).toEqual(true);\n    expect(pointEquals(chart.convertFromPixel({\n      seriesId: 'k2'\n    }, [10, height - 40]), [100, 500])).toEqual(true);\n  });","file":"ut/spec/api/converter.test.ts","skipped":false,"dir":"test"},{"name":"scatter","suites":["api/getVisual"],"updatePoint":{"line":35,"column":13,"index":1262},"line":35,"code":"  it('scatter', function () {\n    chart.setOption({\n      xAxis: {},\n      yAxis: {},\n      color: ['#000', '#111', '#222'],\n      visualMap: {\n        seriesIndex: 3,\n        dimension: 1,\n        min: 0,\n        max: 10000,\n        inRange: {\n          color: 'red'\n        }\n      },\n      series: [{\n        id: 'k0',\n        type: 'scatter',\n        data: [[1000, 700], [333, 222]]\n      }, {\n        id: 'k1',\n        type: 'scatter',\n        data: [[10, 7]],\n        itemStyle: {\n          color: '#fff'\n        }\n      }, {\n        id: 'k2',\n        type: 'scatter',\n        data: [[10, 7], {\n          value: [333, 222],\n          itemStyle: {\n            color: '#ff0'\n          }\n        }],\n        itemStyle: {\n          color: '#eee'\n        }\n      }, {\n        id: 'k3',\n        type: 'scatter',\n        data: [[10, 7], {\n          value: [333, 9999],\n          itemStyle: {\n            color: 'red'\n          }\n        }],\n        itemStyle: {\n          color: '#eee'\n        }\n      }]\n    });\n    expect(chart.getVisual({\n      dataIndex: 1\n    }, 'color')).toEqual('#000');\n    expect(chart.getVisual({\n      dataIndex: 0,\n      seriesIndex: 1\n    }, 'color')).toEqual('#fff');\n    expect(chart.getVisual({\n      seriesIndex: 1\n    }, 'color')).toEqual('#fff');\n    expect(chart.getVisual({\n      dataIndex: 1,\n      seriesId: 'k2'\n    }, 'color')).toEqual('#ff0');\n    expect(chart.getVisual({\n      seriesId: 'k2'\n    }, 'color')).toEqual('#eee');\n    expect(chart.getVisual({\n      dataIndex: 1,\n      seriesId: 'k3'\n    }, 'color')).toEqual('red');\n    expect(chart.getVisual({\n      seriesId: 'k3'\n    }, 'color')).toEqual('#eee');\n  });","file":"ut/spec/api/getVisual.test.ts","skipped":false,"dir":"test"},{"name":"dataZoom","suites":["api/getVisual"],"updatePoint":{"line":111,"column":14,"index":2926},"line":111,"code":"  it('dataZoom', function () {\n    chart.setOption({\n      xAxis: {},\n      yAxis: {},\n      color: ['#000', '#111', '#222'],\n      dataZoom: {\n        xAxisIndex: 0,\n        startValue: 45\n      },\n      series: [{\n        id: 'k2',\n        type: 'scatter',\n        data: [[10, 7], [20, 7], [30, 7], [40, 7], {\n          value: [50, 222],\n          itemStyle: {\n            color: '#ff0'\n          }\n        }],\n        itemStyle: {\n          color: '#eee'\n        }\n      }]\n    });\n    expect(chart.getVisual({\n      dataIndex: 4,\n      seriesId: 'k2'\n    }, 'color')).toEqual('#ff0');\n    expect(chart.getVisual({\n      dataIndexInside: 0,\n      seriesId: 'k2'\n    }, 'color')).toEqual('#ff0');\n    expect(chart.getVisual({\n      dataIndex: 1,\n      seriesId: 'k2'\n    }, 'color')).toEqual('#eee');\n  });","file":"ut/spec/api/getVisual.test.ts","skipped":false,"dir":"test"},{"name":"findLinkedNodes_base","suites":["dataZoom/helper","findLinkedNodes"],"updatePoint":{"line":32,"column":28,"index":1257},"line":32,"code":"    it('findLinkedNodes_base', function () {\n      chart.setOption({\n        xAxis: [{}, {}, {}, {}, {}, {}],\n        yAxis: [{}, {}, {}, {}, {}, {}],\n        dataZoom: [{\n          id: 'dz0',\n          xAxisIndex: [1, 2],\n          yAxisIndex: [0]\n        }, {\n          id: 'dz1',\n          xAxisIndex: [3],\n          yAxisIndex: [1]\n        }, {\n          id: 'dz2',\n          xAxisIndex: [5],\n          yAxisIndex: []\n        }, {\n          id: 'dz3',\n          xAxisIndex: [2, 5],\n          yAxisIndex: []\n        }]\n      });\n      const payload = {\n        type: 'dataZoom',\n        dataZoomIndex: 0\n      };\n      const dzModels = findEffectedDataZooms(getECModel(chart), payload);\n      expect(dzModels.length === 3);\n      expect(dzModels[0] === getECModel(chart).getComponent('dataZoom', 0)).toEqual(true);\n      expect(dzModels[1] === getECModel(chart).getComponent('dataZoom', 3)).toEqual(true);\n      expect(dzModels[2] === getECModel(chart).getComponent('dataZoom', 2)).toEqual(true);\n    });","file":"ut/spec/component/dataZoom/helper.test.ts","skipped":false,"dir":"test"},{"name":"findLinkedNodes_crossXY","suites":["dataZoom/helper","findLinkedNodes"],"updatePoint":{"line":64,"column":31,"index":2268},"line":64,"code":"    it('findLinkedNodes_crossXY', function () {\n      chart.setOption({\n        xAxis: [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}],\n        yAxis: [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}],\n        dataZoom: [{\n          id: 'dz0',\n          xAxisIndex: [1, 2],\n          yAxisIndex: [0]\n        }, {\n          id: 'dz1',\n          xAxisIndex: [3],\n          yAxisIndex: [3, 0]\n        }, {\n          id: 'dz2',\n          xAxisIndex: [6, 3],\n          yAxisIndex: [9]\n        }, {\n          id: 'dz3',\n          xAxisIndex: [5, 3],\n          yAxisIndex: []\n        }, {\n          id: 'dz4',\n          xAxisIndex: [8],\n          yAxisIndex: [4]\n        }]\n      });\n      const payload = {\n        type: 'dataZoom',\n        dataZoomIndex: 0\n      };\n      const dzModels = findEffectedDataZooms(getECModel(chart), payload);\n      expect(dzModels.length === 4);\n      expect(dzModels[0] === getECModel(chart).getComponent('dataZoom', 0)).toEqual(true);\n      expect(dzModels[1] === getECModel(chart).getComponent('dataZoom', 1)).toEqual(true);\n      expect(dzModels[2] === getECModel(chart).getComponent('dataZoom', 2)).toEqual(true);\n      expect(dzModels[3] === getECModel(chart).getComponent('dataZoom', 3)).toEqual(true);\n    });","file":"ut/spec/component/dataZoom/helper.test.ts","skipped":false,"dir":"test"},{"name":"findLinkedNodes_emptySourceModel","suites":["dataZoom/helper","findLinkedNodes"],"updatePoint":{"line":101,"column":40,"index":3505},"line":101,"code":"    it('findLinkedNodes_emptySourceModel', function () {\n      chart.setOption({\n        xAxis: [{}, {}, {}, {}, {}, {}, {}, {}, {}],\n        yAxis: [{}, {}, {}, {}, {}, {}, {}, {}, {}],\n        dataZoom: [{\n          id: 'dz0',\n          xAxisIndex: [1, 2],\n          yAxisIndex: [0]\n        }, {\n          id: 'dz1',\n          xAxisIndex: [3],\n          yAxisIndex: [3, 0]\n        }, {\n          id: 'dz2',\n          xAxisIndex: [6, 3],\n          yAxisIndex: [9]\n        }, {\n          id: 'dz3',\n          xAxisIndex: [5, 3],\n          yAxisIndex: []\n        }, {\n          id: 'dz4',\n          xAxisIndex: [8],\n          yAxisIndex: [4]\n        }]\n      });\n      const payload = {\n        type: 'other'\n      };\n      const dzModels = findEffectedDataZooms(getECModel(chart), payload);\n      expect(dzModels.length === 0);\n    });","file":"ut/spec/component/dataZoom/helper.test.ts","skipped":false,"dir":"test"},{"name":"normalize","suites":["component/helper/sliderMove","sliderMove"],"updatePoint":{"line":23,"column":17,"index":976},"line":23,"code":"    it('normalize', function () {\n      // Return input handleEnds\n      const inputHandleEnds = [22, 50];\n      const outputHandleEnds = sliderMove(0, inputHandleEnds, [20, 50], 0);\n      expect(inputHandleEnds === outputHandleEnds).toEqual(true);\n      expect(outputHandleEnds).toEqual([22, 50]);\n\n      // delta 0 and normalize\n      expect(sliderMove(0, [-10, 70], [20, 50], 0)).toEqual([20, 50]);\n\n      // normalize by minSpec\n      expect(sliderMove(0, [20, 22], [20, 50], 0, 10)).toEqual([20, 30]);\n\n      // normalize by maxSpec\n      expect(sliderMove(0, [20, 42], [20, 50], 0, null, 10)).toEqual([20, 30]);\n\n      // minSpan bigger than extent\n      expect(sliderMove(4, [20, 25], [10, 50], 0, 300)).toEqual([10, 50]);\n\n      // maxSpan smaller than minSpan\n      expect(sliderMove(4, [20, 25], [10, 50], 0, 6, 3)).toEqual([24, 30]);\n\n      // extent small then input range\n      expect(sliderMove(0, [-10, 70], [20, 50], 'all')).toEqual([20, 50]);\n      expect(sliderMove(0, [-10, 14], [1, 101], 'all')).toEqual([1, 25]);\n      expect(sliderMove(0, [99, 110], [1, 101], 'all')).toEqual([90, 101]);\n      expect(sliderMove(0, [-10, 14], [1, 101], 'all', null, 16)).toEqual([1, 17]);\n      expect(sliderMove(0, [-10, 14], [1, 101], 'all', 15, 16)).toEqual([1, 17]);\n      expect(sliderMove(0, [-10, 14], [1, 101], 'all', 50, null)).toEqual([1, 51]);\n      expect(sliderMove(0, [-10, 14], [1, 101], 'all', 50, 55)).toEqual([1, 51]);\n      expect(sliderMove(0, [-10, 14], [1, 101], 'all', 10, 55)).toEqual([1, 25]);\n    });","file":"ut/spec/component/helper/sliderMove.test.ts","skipped":false,"dir":"test"},{"name":"rigid_move","suites":["component/helper/sliderMove","sliderMove"],"updatePoint":{"line":55,"column":18,"index":2509},"line":55,"code":"    it('rigid_move', function () {\n      expect(sliderMove(2, [20, 30], [10, 50], 'all')).toEqual([22, 32]);\n      expect(sliderMove(200, [20, 30], [10, 50], 'all')).toEqual([40, 50]);\n      expect(sliderMove(-2, [30, 40], [10, 50], 'all')).toEqual([28, 38]);\n      expect(sliderMove(-2, [10, 20], [10, 50], 'all')).toEqual([10, 20]);\n    });","file":"ut/spec/component/helper/sliderMove.test.ts","skipped":false,"dir":"test"},{"name":"cross","suites":["component/helper/sliderMove","sliderMove"],"updatePoint":{"line":61,"column":13,"index":2847},"line":61,"code":"    it('cross', function () {\n      expect(sliderMove(2, [20, 25], [10, 50], 0)).toEqual([22, 25]);\n      expect(sliderMove(200, [20, 25], [10, 50], 0)).toEqual([50, 25]);\n      expect(sliderMove(-2, [20, 25], [10, 50], 0)).toEqual([18, 25]);\n      expect(sliderMove(-200, [20, 25], [10, 50], 0)).toEqual([10, 25]);\n      expect(sliderMove(2, [20, 25], [10, 50], 1)).toEqual([20, 27]);\n      expect(sliderMove(200, [20, 25], [10, 50], 1)).toEqual([20, 50]);\n      expect(sliderMove(-2, [20, 25], [10, 50], 1)).toEqual([20, 23]);\n      expect(sliderMove(-200, [20, 25], [10, 50], 1)).toEqual([20, 10]);\n    });","file":"ut/spec/component/helper/sliderMove.test.ts","skipped":false,"dir":"test"},{"name":"minSpan_push","suites":["component/helper/sliderMove","sliderMove"],"updatePoint":{"line":71,"column":20,"index":3464},"line":71,"code":"    it('minSpan_push', function () {\n      expect(sliderMove(1, [20, 25], [10, 50], 0, 3)).toEqual([21, 25]);\n      expect(sliderMove(4, [20, 25], [10, 50], 0, 3)).toEqual([24, 27]);\n      expect(sliderMove(200, [20, 25], [10, 50], 0, 3)).toEqual([47, 50]);\n      expect(sliderMove(-200, [20, 25], [10, 50], 0, 3)).toEqual([10, 25]);\n      expect(sliderMove(-1, [20, 25], [10, 50], 1, 3)).toEqual([20, 24]);\n      expect(sliderMove(-4, [20, 25], [10, 50], 1, 3)).toEqual([18, 21]);\n      expect(sliderMove(-200, [20, 25], [10, 50], 1, 3)).toEqual([10, 13]);\n      expect(sliderMove(200, [20, 25], [10, 50], 1, 3)).toEqual([20, 50]);\n\n      // minSpan is 0.\n      expect(sliderMove(10, [20, 25], [10, 50], 0, 0)).toEqual([30, 30]);\n      expect(sliderMove(-10, [20, 25], [10, 50], 1, 0)).toEqual([15, 15]);\n\n      // Input handleEnds[0] === handleEnds[1], should not cross.\n      expect(sliderMove(10, [20, 20], [10, 50], 0, 0)).toEqual([30, 30]);\n      expect(sliderMove(-5, [20, 20], [10, 50], 1, 0)).toEqual([15, 15]);\n    });","file":"ut/spec/component/helper/sliderMove.test.ts","skipped":false,"dir":"test"},{"name":"maxSpan_pull","suites":["component/helper/sliderMove","sliderMove"],"updatePoint":{"line":89,"column":20,"index":4493},"line":89,"code":"    it('maxSpan_pull', function () {\n      expect(sliderMove(-8, [20, 25], [10, 50], 0, null, 4)).toEqual([12, 16]);\n      expect(sliderMove(14, [20, 25], [10, 50], 0, null, 4)).toEqual([34, 30]);\n      expect(sliderMove(200, [20, 25], [10, 50], 0, null, 4)).toEqual([50, 46]);\n      expect(sliderMove(-200, [20, 25], [10, 50], 0, null, 4)).toEqual([10, 14]);\n      expect(sliderMove(8, [20, 25], [10, 50], 1, null, 4)).toEqual([29, 33]);\n      expect(sliderMove(-15, [20, 25], [10, 50], 1, null, 4)).toEqual([14, 10]);\n      expect(sliderMove(-200, [20, 25], [10, 50], 1, null, 4)).toEqual([14, 10]);\n      expect(sliderMove(200, [20, 25], [10, 50], 1, null, 4)).toEqual([46, 50]);\n    });","file":"ut/spec/component/helper/sliderMove.test.ts","skipped":false,"dir":"test"},{"name":"forbid_seriesLayoutBy_row","suites":["dataTransform"],"updatePoint":{"line":44,"column":31,"index":1699},"line":44,"code":"  it('forbid_seriesLayoutBy_row', function () {\n    const option = {\n      dataset: [{\n        source: makeDatasetSourceDetection(),\n        // This config should cause error thrown.\n        seriesLayoutBy: 'row'\n      }, {\n        transform: {\n          type: 'filter',\n          config: {\n            dimension: 0,\n            ne: ''\n          }\n        }\n      }],\n      xAxis: {\n        type: 'category'\n      },\n      yAxis: {},\n      series: {\n        type: 'bar',\n        datasetIndex: 1\n      }\n    };\n    expect(() => {\n      chart.setOption(option);\n    }).toThrowError(/column/);\n  });","file":"ut/spec/data/dataTransform.test.ts","skipped":false,"dir":"test"},{"name":"seriesLayoutBy_changed_no_transform","suites":["dataTransform"],"updatePoint":{"line":72,"column":41,"index":2306},"line":72,"code":"  it('seriesLayoutBy_changed_no_transform', function () {\n    const option = {\n      dataset: {\n        source: makeDatasetSourceDetection()\n      },\n      xAxis: {\n        type: 'category'\n      },\n      yAxis: {},\n      series: {\n        type: 'bar',\n        seriesLayoutBy: 'row'\n      }\n    };\n    chart.setOption(option);\n    const listData = getECModel(chart).getSeries()[0].getData();\n    expect(listData.getDimension(1)).toEqual('AAA');\n    expect(listData.getDimension(2)).toEqual('BBB');\n    expect(listData.getDimension(3)).toEqual('CCC');\n  });","file":"ut/spec/data/dataTransform.test.ts","skipped":false,"dir":"test"},{"name":"seriesLayoutBy_changed_transform_detection_","suites":["dataTransform"],"updatePoint":{"line":115,"column":59,"index":3274},"line":115,"code":"    it(`seriesLayoutBy_changed_transform_detection_${itIdx}`, function () {\n      const option = {\n        dataset: [{\n          source: makeDatasetSourceDetection()\n        }, dataset1],\n        xAxis: {\n          type: 'category'\n        },\n        yAxis: {},\n        series: {\n          type: 'bar',\n          datasetIndex: 1,\n          seriesLayoutBy: 'row'\n        }\n      };\n      chart.setOption(option);\n      const listData = getECModel(chart).getSeries()[0].getData();\n      expect(listData.getDimension(1)).toEqual('AAA');\n      expect(listData.getDimension(2)).toEqual('BBB');\n      expect(listData.getDimension(3)).toEqual('CCC');\n      expect(listData.get('product', 0)).toEqual(0);\n      expect(retrieveRawValue(listData, 0, 'product')).toEqual('2012');\n      expect(listData.get('product', 1)).toEqual(1);\n      expect(retrieveRawValue(listData, 1, 'product')).toEqual('2013');\n    });","file":"ut/spec/data/dataTransform.test.ts","skipped":false,"dir":"test"},{"name":"seriesLayoutBy_changed_transform_non_detection_","suites":["dataTransform"],"updatePoint":{"line":164,"column":63,"index":4555},"line":164,"code":"    it(`seriesLayoutBy_changed_transform_non_detection_${itIdx}`, function () {\n      const sourceWrap = makeDatasetSourceNonDetectionByRow();\n      const option = {\n        dataset: [{\n          dimensions: sourceWrap.dimensions,\n          source: sourceWrap.source\n        }, dataset1],\n        xAxis: {},\n        yAxis: {},\n        series: {\n          type: 'bar',\n          datasetIndex: 1,\n          seriesLayoutBy: 'row'\n        }\n      };\n      chart.setOption(option);\n      const listData = getECModel(chart).getSeries()[0].getData();\n      expect(listData.get(listData.getDimension(0), 0)).toEqual(41.1);\n      expect(listData.get(listData.getDimension(0), 1)).toEqual(30.4);\n    });","file":"ut/spec/data/dataTransform.test.ts","skipped":false,"dir":"test"},{"name":"inherit_detected_dimensions_","suites":["dataTransform"],"updatePoint":{"line":208,"column":44,"index":5620},"line":208,"code":"    it(`inherit_detected_dimensions_${itIdx}`, function () {\n      const option = {\n        dataset: [{\n          source: makeDatasetSourceDetection()\n        }, dataset1],\n        xAxis: {\n          type: 'category'\n        },\n        yAxis: {},\n        series: {\n          type: 'bar',\n          datasetIndex: 1\n        }\n      };\n      chart.setOption(option);\n      const listData = getECModel(chart).getSeries()[0].getData();\n      expect(listData.getDimension(0)).toEqual('product');\n      expect(listData.getDimension(1)).toEqual('2012');\n      expect(listData.getDimension(2)).toEqual('2013');\n    });","file":"ut/spec/data/dataTransform.test.ts","skipped":false,"dir":"test"},{"name":"Should report grid component missing error","suites":["model_componentMissing"],"updatePoint":{"line":59,"column":48,"index":2175},"line":59,"code":"  it('Should report grid component missing error', function () {\n    const chart = createChart();\n    console.error = jest.fn();\n    chart.setOption < EChartsOption > {\n      xAxis: {},\n      yAxis: {},\n      series: []\n    };\n    expect(console.error).toHaveBeenCalledWith(makeComponentError('xAxis', 'GridComponent'));\n    console.error = oldConsoleErr;\n  });","file":"ut/spec/model/componentMissing.test.ts","skipped":false,"dir":"test"},{"name":"Should report dataZoom component missing error","suites":["model_componentMissing"],"updatePoint":{"line":70,"column":52,"index":2541},"line":70,"code":"  it('Should report dataZoom component missing error', function () {\n    const chart = createChart();\n    console.error = jest.fn();\n    chart.setOption < EChartsOption > {\n      dataZoom: {}\n    };\n    expect(console.error).toHaveBeenCalledWith(makeComponentError('dataZoom', 'DataZoomComponent'));\n    console.error = oldConsoleErr;\n  });","file":"ut/spec/model/componentMissing.test.ts","skipped":false,"dir":"test"},{"name":"Should not report title component missing error","suites":["model_componentMissing"],"updatePoint":{"line":79,"column":53,"index":2883},"line":79,"code":"  it('Should not report title component missing error', function () {\n    const chart = createChart();\n    console.error = jest.fn();\n    chart.setOption < EChartsOption > {\n      title: {},\n      series: []\n    };\n    expect(console.error).not.toBeCalled();\n    console.error = oldConsoleErr;\n  });","file":"ut/spec/model/componentMissing.test.ts","skipped":false,"dir":"test"},{"name":"Should report funnel series missing error","suites":["model_componentMissing"],"updatePoint":{"line":89,"column":47,"index":3177},"line":89,"code":"  it('Should report funnel series missing error', function () {\n    const chart = createChart();\n    console.error = jest.fn();\n    chart.setOption < EChartsOption > {\n      series: [{\n        type: 'funnel'\n      }]\n    };\n    expect(console.error).toHaveBeenCalledWith(makeSerieError('funnel', 'FunnelChart'));\n    console.error = oldConsoleErr;\n  });","file":"ut/spec/model/componentMissing.test.ts","skipped":false,"dir":"test"},{"name":"Should not report pie series missing error","suites":["model_componentMissing"],"updatePoint":{"line":100,"column":48,"index":3532},"line":100,"code":"  it('Should not report pie series missing error', function () {\n    const chart = createChart();\n    console.error = jest.fn();\n    chart.setOption < EChartsOption > {\n      series: [{\n        type: 'pie'\n      }]\n    };\n    expect(console.error).not.toBeCalled();\n    console.error = oldConsoleErr;\n  });","file":"ut/spec/model/componentMissing.test.ts","skipped":false,"dir":"test"},{"name":"Should not report visualMap component missing error when using theme","suites":["model_componentMissing"],"updatePoint":{"line":111,"column":74,"index":3865},"line":111,"code":"  it('Should not report visualMap component missing error when using theme', function () {\n    const chart = createChart({\n      visualMap: {\n        borderColor: '#71708A'\n      }\n    });\n    console.error = jest.fn();\n    chart.setOption < EChartsOption > {};\n    expect(console.error).not.toBeCalled();\n    console.error = oldConsoleErr;\n  });","file":"ut/spec/model/componentMissing.test.ts","skipped":false,"dir":"test"},{"name":"visual_palette","suites":["custom_series"],"updatePoint":{"line":32,"column":20,"index":1226},"line":32,"code":"  it('visual_palette', function () {\n    const colors = ['#111111', '#222222', '#333333'];\n    const resultPaletteColors = [];\n    function renderItem(params, api) {\n      const color = api.visual('color');\n      resultPaletteColors.push(color);\n      return {\n        type: 'circle'\n      };\n    }\n    chart.setOption({\n      color: colors,\n      xAxis: {\n        data: ['a']\n      },\n      yAxis: {},\n      series: [{\n        type: 'custom',\n        renderItem: renderItem,\n        data: [11]\n      }, {\n        type: 'custom',\n        renderItem: renderItem,\n        data: [22]\n      }, {\n        type: 'custom',\n        renderItem: renderItem,\n        data: [33]\n      }]\n    }, true);\n    expect(resultPaletteColors).toEqual(colors);\n  });","file":"ut/spec/series/custom.test.ts","skipped":false,"dir":"test"},{"name":"subPixelOptimize_base","suites":["util/graphic","subPixelOptimize"],"updatePoint":{"line":24,"column":29,"index":1086},"line":24,"code":"    it('subPixelOptimize_base', function () {\n      expect(subPixelOptimize(5, 1)).toEqual(4.5);\n      expect(subPixelOptimize(5, 2)).toEqual(5);\n      expect(subPixelOptimize(5, 43)).toEqual(4.5);\n      expect(subPixelOptimize(7.5, 1)).toEqual(7.5);\n      expect(subPixelOptimize(7.5, 2)).toEqual(7);\n      expect(subPixelOptimize(14, 1, true)).toEqual(14.5);\n      expect(subPixelOptimize(14, 2, true)).toEqual(14);\n      expect(subPixelOptimize(-11, 1)).toEqual(-11.5);\n      expect(subPixelOptimize(-11, 2)).toEqual(-11);\n      expect(subPixelOptimize(0, 2)).toEqual(0);\n      expect(subPixelOptimize(0, 1)).toEqual(-0.5);\n      expect(subPixelOptimize(5, 0)).toEqual(5);\n    });","file":"ut/spec/util/graphic.test.ts","skipped":false,"dir":"test"},{"name":"subPixelOptimize_line","suites":["util/graphic","subPixelOptimize"],"updatePoint":{"line":38,"column":29,"index":1770},"line":38,"code":"    it('subPixelOptimize_line', function () {\n      function doSubPixelOptimizeLine(x, y, width, height, lineWidth) {\n        const params = makeParam(x, y, width, height, lineWidth);\n        return subPixelOptimizeLine(params.shape, params.shape, params.style);\n      }\n      function makeParam(x1, y1, x2, y2, lineWidth) {\n        return {\n          shape: {\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2\n          },\n          style: {\n            lineWidth: lineWidth\n          }\n        };\n      }\n      expect(doSubPixelOptimizeLine(5, 11, 3, 7, 1)).toEqual(makeParam(5, 11, 3, 7, 1).shape);\n      expect(doSubPixelOptimizeLine(5, 11, 5, 7, 1)).toEqual(makeParam(5.5, 11, 5.5, 7, 1).shape);\n      expect(doSubPixelOptimizeLine(5, 11, 5, 7, 2)).toEqual(makeParam(5, 11, 5, 7, 2).shape);\n      expect(doSubPixelOptimizeLine(5, 11, 15, 11, 1)).toEqual(makeParam(5, 11.5, 15, 11.5, 1).shape);\n      expect(doSubPixelOptimizeLine(5, 11, 15, 11, 2)).toEqual(makeParam(5, 11, 15, 11, 2).shape);\n      expect(doSubPixelOptimizeLine(5, 11, 15, 11, 3)).toEqual(makeParam(5, 11.5, 15, 11.5, 3).shape);\n      expect(doSubPixelOptimizeLine(5, 11, 15, 11.5, 3)).toEqual(makeParam(5, 11, 15, 11.5, 3).shape);\n      expect(doSubPixelOptimizeLine(5, 11.5, 15, 11.5, 3)).toEqual(makeParam(5, 11.5, 15, 11.5, 3).shape);\n      expect(doSubPixelOptimizeLine(5, 11.5, 15, 11.5, 4)).toEqual(makeParam(5, 12, 15, 12, 4).shape);\n    });","file":"ut/spec/util/graphic.test.ts","skipped":false,"dir":"test"},{"name":"subPixelOptimize_rect","suites":["util/graphic","subPixelOptimize"],"updatePoint":{"line":66,"column":29,"index":3221},"line":66,"code":"    it('subPixelOptimize_rect', function () {\n      function doSubPixelOptimizeRect(x, y, width, height, lineWidth) {\n        const params = makeParam(x, y, width, height, lineWidth);\n        return subPixelOptimizeRect(params.shape, params.shape, params.style);\n      }\n      function makeParam(x, y, width, height, lineWidth) {\n        return {\n          shape: {\n            x: x,\n            y: y,\n            width: width,\n            height: height\n          },\n          style: {\n            lineWidth: lineWidth\n          }\n        };\n      }\n      expect(doSubPixelOptimizeRect(5, 11, 3, 7, 1)).toEqual(makeParam(5.5, 11.5, 2, 6, 1).shape);\n      expect(doSubPixelOptimizeRect(5, 11, 3, 7, 2)).toEqual(makeParam(5, 11, 3, 7, 2).shape);\n      expect(doSubPixelOptimizeRect(5, 11, 3, 7, 3)).toEqual(makeParam(5.5, 11.5, 2, 6, 3).shape);\n      // Boundary value tests\n      expect(doSubPixelOptimizeRect(5, 11, 1, 7, 1)).toEqual(makeParam(5.5, 11.5, 1, 6, 1).shape);\n      expect(doSubPixelOptimizeRect(5, 11, 1, 0, 1)).toEqual(makeParam(5.5, 11.5, 1, 0, 1).shape);\n    });","file":"ut/spec/util/graphic.test.ts","skipped":false,"dir":"test"},{"name":"extreme","suites":["util/graphic","lineLineIntersect"],"updatePoint":{"line":93,"column":15,"index":4339},"line":93,"code":"    it('extreme', function () {\n      expect(lineLineIntersect(10, 10, 30, 30, 10, 10, 10, 10)).toEqual(false);\n    });","file":"ut/spec/util/graphic.test.ts","skipped":false,"dir":"test"},{"name":"parallel and colinear","suites":["util/graphic","lineLineIntersect"],"updatePoint":{"line":96,"column":29,"index":4473},"line":96,"code":"    it('parallel and colinear', function () {\n      expect(lineLineIntersect(10, 20, 30, 40, 100, 220, 120, 240)).toEqual(false);\n      expect(lineLineIntersect(10, 10, 30, 30, 40, 40, 50, 50)).toEqual(false);\n      expect(lineLineIntersect(10, 10, 30, 30, 10, 10, 30, 30)).toEqual(false);\n      expect(lineLineIntersect(10, 10, 30, 30, 20, 20, 30, 30)).toEqual(false);\n      expect(lineLineIntersect(10, 10, 30, 30, 20, 20, 22, 22)).toEqual(false);\n    });","file":"ut/spec/util/graphic.test.ts","skipped":false,"dir":"test"},{"name":"intersect","suites":["util/graphic","lineLineIntersect"],"updatePoint":{"line":103,"column":17,"index":4919},"line":103,"code":"    it('intersect', function () {\n      expect(lineLineIntersect(10, 20, 30, 40, 12, 20, 30, 40)).toEqual(true);\n      expect(lineLineIntersect(10, 20, 30, 40, 12, 20, 20, 42)).toEqual(true);\n    });","file":"ut/spec/util/graphic.test.ts","skipped":false,"dir":"test"},{"name":"base","suites":["util/model","compressBatches"],"updatePoint":{"line":29,"column":12,"index":1045},"line":29,"code":"    it('base', function () {\n      // Remove dupliate between A and B\n      expect(compressBatches([item(3, 4), item(3, 5), item(4, 5)], [item(4, 6), item(4, 5), item(3, 3), item(3, 4)])).toEqual([[item('3', [5])], [item('3', [3]), item('4', [6])]]);\n\n      // Compress\n      expect(compressBatches([item(3, 4), item(3, 6), item(3, 5), item(4, 5)], [item(4, 6), item(4, 5), item(3, 3), item(3, 4), item(4, 7)])).toEqual([[item('3', [5, 6])], [item('3', [3]), item('4', [6, 7])]]);\n\n      // Remove duplicate in themselves\n      expect(compressBatches([item(3, 4), item(3, 6), item(3, 5), item(4, 5)], [item(4, 6), item(4, 5), item(3, 3), item(3, 4), item(4, 7), item(4, 6)])).toEqual([[item('3', [5, 6])], [item('3', [3]), item('4', [6, 7])]]);\n\n      // dataIndex is array\n      expect(compressBatches([item(3, [4, 5, 8]), item(4, 4), item(3, [5, 7, 7])], [item(3, [8, 9])])).toEqual([[item('3', [4, 5, 7]), item('4', [4])], [item('3', [9])]]);\n\n      // empty\n      expect(compressBatches([item(3, [4, 5, 8]), item(4, 4), item(3, [5, 7, 7])], [])).toEqual([[item('3', [4, 5, 7, 8]), item('4', [4])], []]);\n      expect(compressBatches([], [item(3, [4, 5, 8]), item(4, 4), item(3, [5, 7, 7])])).toEqual([[], [item('3', [4, 5, 7, 8]), item('4', [4])]]);\n\n      // should not has empty array\n      expect(compressBatches([item(3, [4, 5, 8])], [item(3, [4, 5, 8])])).toEqual([[], []]);\n    });","file":"ut/spec/util/model.test.ts","skipped":false,"dir":"test"}]}