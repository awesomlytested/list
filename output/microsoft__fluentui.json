{
    "repo": "microsoft/fluentui",
    "url": "https://github.com/microsoft/fluentui",
    "branch": "master",
    "configs": [
        {
            "package": "ssr-tests",
            "lang": "js",
            "dir": "apps/ssr-tests/test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "fluent-ui-react-repo",
            "lang": "js",
            "dir": "specs",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@fluentui/accessibility",
            "lang": "js",
            "dir": "packages/fluentui/accessibility/test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@fluentui/e2e",
            "lang": "js",
            "dir": "packages/fluentui/e2e/cypress",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@fluentui/react-bindings",
            "lang": "ts",
            "dir": "packages/fluentui/react-bindings/test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@fluentui/react-builder",
            "lang": "js",
            "dir": "packages/fluentui/react-builder/test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@fluentui/react-component-event-listener",
            "lang": "js",
            "dir": "packages/fluentui/react-component-event-listener/test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@fluentui/react-component-nesting-registry",
            "lang": "js",
            "dir": "packages/fluentui/react-component-nesting-registry/test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@fluentui/react-component-ref",
            "lang": "ts",
            "dir": "packages/fluentui/react-component-ref/test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@fluentui/react-icons-northstar",
            "lang": "js",
            "dir": "packages/fluentui/react-icons-northstar/test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@fluentui/react-northstar-emotion-renderer",
            "lang": "ts",
            "dir": "packages/fluentui/react-northstar-emotion-renderer/test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@fluentui/react-northstar-fela-renderer",
            "lang": "ts",
            "dir": "packages/fluentui/react-northstar-fela-renderer/test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@fluentui/react-northstar",
            "lang": "js",
            "dir": "packages/fluentui/react-northstar/test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@fluentui/react-proptypes",
            "lang": "ts",
            "dir": "packages/fluentui/react-proptypes/test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@fluentui/styles",
            "lang": "ts",
            "dir": "packages/fluentui/styles/test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@fluentui/scripts",
            "lang": "js",
            "dir": "scripts/cypress",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": " can render in a server environment",
            "suites": [
                "Fabric components"
            ],
            "updatePoint": {
                "line": 46,
                "column": 57
            },
            "line": 46,
            "code": "  it(`${componentName} can render in a server environment`, done => {\n    let elem = React.createElement(component);\n\n    try {\n      ReactDOMServer.renderToString(elem);\n      done();\n    } catch (e) {\n      done(new Error(e));\n    }\n  });",
            "file": "test.js",
            "skipped": false,
            "dir": "apps/ssr-tests/test"
        },
        {
            "name": "can pass through default options",
            "suites": [
                "mergeProps"
            ],
            "updatePoint": {
                "line": 7,
                "column": 38
            },
            "line": 7,
            "code": "  it('can pass through default options', () => {\n    expect(mergeProps({}, defaultComposeOptions)).toEqual({\n      state: {},\n      slots: { ...selfSlot, root: 'div' },\n      slotProps: {\n        root: {},\n      },\n    });\n  });",
            "file": "compose/mergeProps-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-bindings/test"
        },
        {
            "name": "can pass through default slot props",
            "suites": [
                "mergeProps"
            ],
            "updatePoint": {
                "line": 17,
                "column": 41
            },
            "line": 17,
            "code": "  it('can pass through default slot props', () => {\n    expect(\n      mergeProps<{ id: string }>(\n        { id: 'abc' },\n        {\n          ...defaultComposeOptions,\n          handledProps: ['id'],\n          slotProps: [\n            _state => {\n              return {\n                slot1: { id: 'not this one' },\n              };\n            },\n            state => {\n              return {\n                slot1: { id: state.id },\n              };\n            },\n          ],\n        },\n      ),\n    ).toEqual({\n      state: { id: 'abc' },\n      slots: { ...selfSlot, root: 'div' },\n      slotProps: {\n        root: {},\n        slot1: { id: 'abc' },\n      },\n    });\n  });",
            "file": "compose/mergeProps-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-bindings/test"
        },
        {
            "name": "can resolve \"as\" prop",
            "suites": [
                "mergeProps"
            ],
            "updatePoint": {
                "line": 48,
                "column": 27
            },
            "line": 48,
            "code": "  it('can resolve \"as\" prop', () => {\n    const state = { as: 'button' };\n\n    expect(mergeProps(state, defaultComposeOptions)).toEqual({\n      state,\n      slots: {\n        ...selfSlot,\n        root: 'button',\n      },\n      slotProps: {\n        root: {},\n      },\n    });\n  });",
            "file": "compose/mergeProps-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-bindings/test"
        },
        {
            "name": "can mix unrecognized props onto the root",
            "suites": [
                "mergeProps"
            ],
            "updatePoint": {
                "line": 63,
                "column": 46
            },
            "line": 63,
            "code": "  it('can mix unrecognized props onto the root', () => {\n    expect(mergeProps({ 'data-foo': 'foo' }, defaultComposeOptions)).toEqual({\n      slots: { ...selfSlot, root: 'div' },\n      state: {\n        'data-foo': 'foo',\n      },\n      slotProps: {\n        root: {\n          'data-foo': 'foo',\n        },\n      },\n    });\n  });",
            "file": "compose/mergeProps-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-bindings/test"
        },
        {
            "name": "writes tree to URL and reads it",
            "suites": [
                "treeStore"
            ],
            "updatePoint": {
                "line": 39,
                "column": 37
            },
            "line": 39,
            "code": "  it('writes tree to URL and reads it', () => {\n    const url = writeTreeToURL(tree, 'http://localhost:8080/builder#rtl=true');\n    const readTree = readTreeFromURL(url);\n    expect(readTree).toMatchObject(tree);\n  });",
            "file": "utils/treeStore-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-builder/test"
        },
        {
            "name": "returns null if no param in URL",
            "suites": [
                "treeStore",
                "readTreeFromURL"
            ],
            "updatePoint": {
                "line": 45,
                "column": 39
            },
            "line": 45,
            "code": "    it('returns null if no param in URL', () => {\n      const readTree = readTreeFromURL('http://localhost:8080/builder');\n      expect(readTree).toBeNull();\n    });",
            "file": "utils/treeStore-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-builder/test"
        },
        {
            "name": "returns null if param is not valid lz string",
            "suites": [
                "treeStore",
                "readTreeFromURL"
            ],
            "updatePoint": {
                "line": 49,
                "column": 52
            },
            "line": 49,
            "code": "    it('returns null if param is not valid lz string', () => {\n      const readTree = readTreeFromURL('http://localhost:8080/builder#tree_lz=invalid');\n      expect(readTree).toBeNull();\n    });",
            "file": "utils/treeStore-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-builder/test"
        },
        {
            "name": "returns null if param is lz string of invalid",
            "suites": [
                "treeStore",
                "readTreeFromURL"
            ],
            "updatePoint": {
                "line": 53,
                "column": 53
            },
            "line": 53,
            "code": "    it('returns null if param is lz string of invalid', () => {\n      const invalid = compressToEncodedURIComponent('invalid');\n      const readTree = readTreeFromURL(`http://localhost:8080/builder#tree_lz=${invalid}`);\n      expect(readTree).toBeNull();\n    });",
            "file": "utils/treeStore-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-builder/test"
        },
        {
            "name": "throws an error when \"ref\" is string",
            "suites": [
                "handleRef"
            ],
            "updatePoint": {
                "line": 5,
                "column": 42
            },
            "line": 5,
            "code": "  it('throws an error when \"ref\" is string', () => {\n    const node = document.createElement('div');\n\n    expect(() => {\n      // handleRef() does not accept string, but in this test we want ensure that this case will be handled\n      handleRef('ref' as any, node);\n    }).toThrowError();\n  });",
            "file": "handleRef-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-component-ref/test"
        },
        {
            "name": "calls with node when \"ref\" is function",
            "suites": [
                "handleRef"
            ],
            "updatePoint": {
                "line": 14,
                "column": 44
            },
            "line": 14,
            "code": "  it('calls with node when \"ref\" is function', () => {\n    const ref = jest.fn();\n    const node = document.createElement('div');\n\n    handleRef(ref, node);\n    expect(ref).toBeCalledWith(node);\n  });",
            "file": "handleRef-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-component-ref/test"
        },
        {
            "name": "does not do anything when \"ref\" is null",
            "suites": [
                "handleRef"
            ],
            "updatePoint": {
                "line": 22,
                "column": 45
            },
            "line": 22,
            "code": "  it('does not do anything when \"ref\" is null', () => {\n    const node = document.createElement('div');\n\n    expect(() => {\n      handleRef(null, node);\n    }).not.toThrowError();\n  });",
            "file": "handleRef-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-component-ref/test"
        },
        {
            "name": "assigns to \"current\" when \"ref\" is object",
            "suites": [
                "handleRef"
            ],
            "updatePoint": {
                "line": 30,
                "column": 47
            },
            "line": 30,
            "code": "  it('assigns to \"current\" when \"ref\" is object', () => {\n    const ref = React.createRef<HTMLDivElement>();\n    const node = document.createElement('div');\n\n    handleRef(ref, node);\n    expect(ref.current).toBe(node);\n  });",
            "file": "handleRef-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-component-ref/test"
        },
        {
            "name": "checks for a valid param",
            "suites": [
                "isRefObject"
            ],
            "updatePoint": {
                "line": 4,
                "column": 30
            },
            "line": 4,
            "code": "  it('checks for a valid param', () => {\n    expect(isRefObject(document.createElement('div'))).toBe(false);\n    expect(isRefObject(null)).toBe(false);\n\n    expect(isRefObject({ current: document.createElement('div') })).toBe(true);\n    expect(isRefObject({ current: null })).toBe(true);\n  });",
            "file": "isRefObject-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-component-ref/test"
        },
        {
            "name": "replaces :focus-visible with the proper selector",
            "suites": [
                "focusVisiblePlugin"
            ],
            "updatePoint": {
                "line": 9,
                "column": 54
            },
            "line": 9,
            "code": "  it('replaces :focus-visible with the proper selector', () => {\n    expect(evaluateCSS('#test:focus-visible { color: red; }')).toMatchInlineSnapshot(\n      `\"[data-whatinput=\\\\\"keyboard\\\\\"] #test:focus{color:red;}\"`,\n    );\n  });",
            "file": "focusVisiblePlugin-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar-emotion-renderer/test"
        },
        {
            "name": "replaces the proper selector",
            "suites": [
                "focusVisiblePlugin"
            ],
            "updatePoint": {
                "line": 15,
                "column": 34
            },
            "line": 15,
            "code": "  it('replaces the proper selector', () => {\n    expect(evaluateCSS('#foo, #test:focus-visible { color: red; }')).toMatchInlineSnapshot(\n      `\"#foo,[data-whatinput=\\\\\"keyboard\\\\\"] #test:focus{color:red;}\"`,\n    );\n  });",
            "file": "focusVisiblePlugin-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar-emotion-renderer/test"
        },
        {
            "name": "works with the :not pseudo-class",
            "suites": [
                "focusVisiblePlugin"
            ],
            "updatePoint": {
                "line": 21,
                "column": 38
            },
            "line": 21,
            "code": "  it('works with the :not pseudo-class', () => {\n    expect(evaluateCSS('#test:not(:focus-visible) { color: red; }')).toMatchInlineSnapshot(\n      `\"[data-whatinput]:not([data-whatinput=\\\\\"keyboard\\\\\"]) #test:focus{color:red;}\"`,\n    );\n  });",
            "file": "focusVisiblePlugin-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar-emotion-renderer/test"
        },
        {
            "name": "works with a combination of :focus and :not pseudo-class",
            "suites": [
                "focusVisiblePlugin"
            ],
            "updatePoint": {
                "line": 27,
                "column": 62
            },
            "line": 27,
            "code": "  it('works with a combination of :focus and :not pseudo-class', () => {\n    expect(evaluateCSS('#test:focus:not(:focus-visible) { color: red; }')).toMatchInlineSnapshot(\n      `\"[data-whatinput]:not([data-whatinput=\\\\\"keyboard\\\\\"]) #test:focus:focus{color:red;}\"`,\n    );\n  });",
            "file": "focusVisiblePlugin-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar-emotion-renderer/test"
        },
        {
            "name": "works with a combination of :not(:focus-visible) and :focus-visible pseudo-classes",
            "suites": [
                "focusVisiblePlugin"
            ],
            "updatePoint": {
                "line": 33,
                "column": 88
            },
            "line": 33,
            "code": "  it('works with a combination of :not(:focus-visible) and :focus-visible pseudo-classes', () => {\n    expect(evaluateCSS('#test:focus-visible .foobar:not(:focus-visible) { color: red; }')).toMatchInlineSnapshot(\n      `\"[data-whatinput]:not([data-whatinput=\\\\\"keyboard\\\\\"]) #test:focus-visible .foobar:focus{color:red;}\"`,\n    );\n  });",
            "file": "focusVisiblePlugin-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar-emotion-renderer/test"
        },
        {
            "name": "doesn't affects normal Stylis usage",
            "suites": [
                "focusVisiblePlugin"
            ],
            "updatePoint": {
                "line": 39,
                "column": 41
            },
            "line": 39,
            "code": "  it(\"doesn't affects normal Stylis usage\", () => {\n    expect(evaluateCSS('#test:focus { color: red; }')).toMatchInlineSnapshot(`\"#test:focus{color:red;}\"`);\n  });",
            "file": "focusVisiblePlugin-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar-emotion-renderer/test"
        },
        {
            "name": "returns incoming range type if working days are empty",
            "suites": [
                "getDateRangeTypeToUse"
            ],
            "updatePoint": {
                "line": 4,
                "column": 59
            },
            "line": 4,
            "code": "  it('returns incoming range type if working days are empty', () => {\n    const resultDay = DateGrid.getDateRangeTypeToUse(DateRangeType.Day, undefined, DayOfWeek.Sunday);\n    expect(resultDay).toBe(DateRangeType.Day);\n    const resultWeek = DateGrid.getDateRangeTypeToUse(DateRangeType.Week, undefined, DayOfWeek.Sunday);\n    expect(resultWeek).toBe(DateRangeType.Week);\n    const resultMonth = DateGrid.getDateRangeTypeToUse(DateRangeType.Month, undefined, DayOfWeek.Sunday);\n    expect(resultMonth).toBe(DateRangeType.Month);\n    const resultWorkWeek = DateGrid.getDateRangeTypeToUse(DateRangeType.WorkWeek, undefined, DayOfWeek.Sunday);\n    expect(resultWorkWeek).toBe(DateRangeType.WorkWeek);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDateRangeTypeToUse-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns Week range type if working days are non-contiguous and incoming type is WorkWeek",
            "suites": [
                "getDateRangeTypeToUse"
            ],
            "updatePoint": {
                "line": 14,
                "column": 94
            },
            "line": 14,
            "code": "  it('returns Week range type if working days are non-contiguous and incoming type is WorkWeek', () => {\n    const resultWorkWeek = DateGrid.getDateRangeTypeToUse(DateRangeType.WorkWeek, [DayOfWeek.Monday, DayOfWeek.Wednesday], DayOfWeek.Sunday);\n    expect(resultWorkWeek).toBe(DateRangeType.Week);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDateRangeTypeToUse-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns WorkWeek range type if working days are contiguous and incoming type is WorkWeek",
            "suites": [
                "getDateRangeTypeToUse"
            ],
            "updatePoint": {
                "line": 18,
                "column": 94
            },
            "line": 18,
            "code": "  it('returns WorkWeek range type if working days are contiguous and incoming type is WorkWeek', () => {\n    const resultWorkWeek = DateGrid.getDateRangeTypeToUse(DateRangeType.WorkWeek, [DayOfWeek.Monday, DayOfWeek.Tuesday], DayOfWeek.Sunday);\n    expect(resultWorkWeek).toBe(DateRangeType.WorkWeek);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDateRangeTypeToUse-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns WorkWeek range type if working days are not contiguous from Saturday to Sunday and incoming type is WorkWeek",
            "suites": [
                "getDateRangeTypeToUse"
            ],
            "updatePoint": {
                "line": 22,
                "column": 122
            },
            "line": 22,
            "code": "  it('returns WorkWeek range type if working days are not contiguous from Saturday to Sunday and incoming type is WorkWeek', () => {\n    const resultWorkWeek = DateGrid.getDateRangeTypeToUse(DateRangeType.WorkWeek, [DayOfWeek.Saturday, DayOfWeek.Sunday], DayOfWeek.Sunday);\n    expect(resultWorkWeek).toBe(DateRangeType.Week);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDateRangeTypeToUse-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns WorkWeek range type if working days are contiguous from Saturday to Sunday and incoming type is WorkWeek",
            "suites": [
                "getDateRangeTypeToUse"
            ],
            "updatePoint": {
                "line": 26,
                "column": 118
            },
            "line": 26,
            "code": "  it('returns WorkWeek range type if working days are contiguous from Saturday to Sunday and incoming type is WorkWeek', () => {\n    const resultWorkWeek = DateGrid.getDateRangeTypeToUse(DateRangeType.WorkWeek, [DayOfWeek.Saturday, DayOfWeek.Sunday], DayOfWeek.Monday);\n    expect(resultWorkWeek).toBe(DateRangeType.WorkWeek);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDateRangeTypeToUse-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns matrix with days",
            "suites": [
                "getDayGrid"
            ],
            "updatePoint": {
                "line": 52,
                "column": 30
            },
            "line": 52,
            "code": "  it('returns matrix with days', () => {\n    const result = DateGrid.getDayGrid(defaultOptions);\n    const resultUTC = result.map(week => week.map(day => normalizeDay(day)));\n    expect(resultUTC).toMatchSnapshot();\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDayGrid-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns grid starting with proper day",
            "suites": [
                "getDayGrid"
            ],
            "updatePoint": {
                "line": 57,
                "column": 43
            },
            "line": 57,
            "code": "  it('returns grid starting with proper day', () => {\n    const result = DateGrid.getDayGrid({ ...defaultOptions,\n      firstDayOfWeek: DayOfWeek.Wednesday\n    });\n    expect(result[0][0].originalDate.getDay()).toBe(DayOfWeek.Wednesday);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDayGrid-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns grid with proper amount of weeks",
            "suites": [
                "getDayGrid"
            ],
            "updatePoint": {
                "line": 63,
                "column": 46
            },
            "line": 63,
            "code": "  it('returns grid with proper amount of weeks', () => {\n    const weekCount = 6;\n    const result = DateGrid.getDayGrid({ ...defaultOptions,\n      weeksToShow: weekCount\n    });\n    expect(result.length).toBe(weekCount + transitionWeekCount);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDayGrid-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns grid with proper amount of selected days",
            "suites": [
                "getDayGrid"
            ],
            "updatePoint": {
                "line": 70,
                "column": 54
            },
            "line": 70,
            "code": "  it('returns grid with proper amount of selected days', () => {\n    const daysToSelect = 6;\n    const result = DateGrid.getDayGrid({ ...defaultOptions,\n      dateRangeType: DateRangeType.Day,\n      daysToSelectInDayView: daysToSelect\n    });\n    expect(countDays(result, day => day.isSelected)).toBe(daysToSelect);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDayGrid-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns grid with no selected days",
            "suites": [
                "getDayGrid"
            ],
            "updatePoint": {
                "line": 78,
                "column": 40
            },
            "line": 78,
            "code": "  it('returns grid with no selected days', () => {\n    const result = DateGrid.getDayGrid({ ...defaultOptions,\n      selectedDate: new Date(0)\n    });\n    expect(countDays(result, day => day.isSelected)).toBe(0);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDayGrid-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns grid with proper amount of weeks",
            "suites": [
                "getDayGrid"
            ],
            "updatePoint": {
                "line": 84,
                "column": 46
            },
            "line": 84,
            "code": "  it('returns grid with proper amount of weeks', () => {\n    const result = DateGrid.getDayGrid({ ...defaultOptions,\n      minDate: addDays(defaultDate, -1),\n      maxDate: addDays(defaultDate, 1)\n    });\n    expect(countDays(result, day => day.isInBounds)).toBe(3);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDayGrid-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns grid with proper today",
            "suites": [
                "getDayGrid"
            ],
            "updatePoint": {
                "line": 91,
                "column": 36
            },
            "line": 91,
            "code": "  it('returns grid with proper today', () => {\n    const today = addDays(defaultDate, 5);\n    const result = DateGrid.getDayGrid({ ...defaultOptions,\n      today\n    });\n    expect(countDays(result, day => day.isToday)).toBe(1);\n    expect(countDays(result, day => compareDates(today, day.originalDate) && day.isToday)).toBe(1);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDayGrid-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns grid with proper amount of work week days when over multiple work weeks",
            "suites": [
                "getDayGrid"
            ],
            "updatePoint": {
                "line": 99,
                "column": 85
            },
            "line": 99,
            "code": "  it('returns grid with proper amount of work week days when over multiple work weeks', () => {\n    const result = DateGrid.getDayGrid({ ...defaultOptions,\n      workWeekDays: [DayOfWeek.Saturday, DayOfWeek.Sunday, DayOfWeek.Monday],\n      dateRangeType: DateRangeType.WorkWeek,\n      firstDayOfWeek: DayOfWeek.Monday\n    });\n    expect(countDays(result, day => day.isSelected)).toBe(7);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDayGrid-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns grid with proper amount of work week days when over single work weeks",
            "suites": [
                "getDayGrid"
            ],
            "updatePoint": {
                "line": 107,
                "column": 83
            },
            "line": 107,
            "code": "  it('returns grid with proper amount of work week days when over single work weeks', () => {\n    const result = DateGrid.getDayGrid({ ...defaultOptions,\n      workWeekDays: [DayOfWeek.Saturday, DayOfWeek.Sunday, DayOfWeek.Monday],\n      dateRangeType: DateRangeType.WorkWeek,\n      firstDayOfWeek: DayOfWeek.Tuesday\n    });\n    expect(countDays(result, day => day.isSelected)).toBe(3);\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/getDayGrid-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns false if non-consecutive days",
            "suites": [
                "isContiguous"
            ],
            "updatePoint": {
                "line": 4,
                "column": 43
            },
            "line": 4,
            "code": "  it('returns false if non-consecutive days', () => {\n    const result = isContiguous([DayOfWeek.Friday, DayOfWeek.Sunday], false, DayOfWeek.Friday);\n    expect(result).toBeFalsy();\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/isContiguous-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns true if consecutive work days",
            "suites": [
                "isContiguous"
            ],
            "updatePoint": {
                "line": 8,
                "column": 43
            },
            "line": 8,
            "code": "  it('returns true if consecutive work days', () => {\n    const result = isContiguous([DayOfWeek.Friday, DayOfWeek.Thursday, DayOfWeek.Wednesday, DayOfWeek.Tuesday, DayOfWeek.Monday], true, DayOfWeek.Monday);\n    expect(result).toBeTruthy();\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/isContiguous-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns true if weekend and not one week",
            "suites": [
                "isContiguous"
            ],
            "updatePoint": {
                "line": 12,
                "column": 46
            },
            "line": 12,
            "code": "  it('returns true if weekend and not one week', () => {\n    const result = isContiguous([DayOfWeek.Saturday, DayOfWeek.Sunday], false, DayOfWeek.Sunday);\n    expect(result).toBeTruthy();\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/isContiguous-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns false if weekend and one week",
            "suites": [
                "isContiguous"
            ],
            "updatePoint": {
                "line": 16,
                "column": 43
            },
            "line": 16,
            "code": "  it('returns false if weekend and one week', () => {\n    const result = isContiguous([DayOfWeek.Saturday, DayOfWeek.Sunday], true, DayOfWeek.Sunday);\n    expect(result).toBeFalsy();\n  });",
            "file": "specs/utils/date-time-utils/dateGrid/isContiguous-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "rounds values to 4 decimals",
            "suites": [
                "fontSizeUtility",
                "round"
            ],
            "updatePoint": {
                "line": 4,
                "column": 35
            },
            "line": 4,
            "code": "    it('rounds values to 4 decimals', () => {\n      expect(round(3)).toBe(3);\n      expect(round(3.14)).toBe(3.14);\n      expect(round(3.14159265359)).toBe(3.1416);\n      expect(round(-3.14159265359)).toBe(-3.1416);\n    });",
            "file": "specs/utils/fontSizeUtility-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns 1rem for 16px with a default HTML font size of 16px",
            "suites": [
                "fontSizeUtility",
                "pxToRem"
            ],
            "updatePoint": {
                "line": 12,
                "column": 67
            },
            "line": 12,
            "code": "    it('returns 1rem for 16px with a default HTML font size of 16px', () => {\n      expect(pxToRem(16)).toEqual('1rem');\n    });",
            "file": "specs/utils/fontSizeUtility-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns 1rem with base font size of 10px",
            "suites": [
                "fontSizeUtility",
                "pxToRem"
            ],
            "updatePoint": {
                "line": 15,
                "column": 48
            },
            "line": 15,
            "code": "    it('returns 1rem with base font size of 10px', () => {\n      expect(pxToRem(10, 10)).toEqual('1rem');\n    });",
            "file": "specs/utils/fontSizeUtility-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns 0.714rem with a base font size of 14px",
            "suites": [
                "fontSizeUtility",
                "pxToRem"
            ],
            "updatePoint": {
                "line": 18,
                "column": 54
            },
            "line": 18,
            "code": "    it('returns 0.714rem with a base font size of 14px', () => {\n      expect(pxToRem(10, 14)).toEqual('0.7143rem');\n    });",
            "file": "specs/utils/fontSizeUtility-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns 1.25rem with a base font size of 8px",
            "suites": [
                "fontSizeUtility",
                "pxToRem"
            ],
            "updatePoint": {
                "line": 21,
                "column": 52
            },
            "line": 21,
            "code": "    it('returns 1.25rem with a base font size of 8px', () => {\n      expect(pxToRem(10, 8)).toEqual('1.25rem');\n    });",
            "file": "specs/utils/fontSizeUtility-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "returns 0rem when pxToRem is called with 0",
            "suites": [
                "fontSizeUtility",
                "pxToRem"
            ],
            "updatePoint": {
                "line": 24,
                "column": 50
            },
            "line": 24,
            "code": "    it('returns 0rem when pxToRem is called with 0', () => {\n      expect(pxToRem(0)).toEqual('0rem');\n    });",
            "file": "specs/utils/fontSizeUtility-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "should handle negative input values and return negative conversion result",
            "suites": [
                "fontSizeUtility",
                "pxToRem"
            ],
            "updatePoint": {
                "line": 27,
                "column": 81
            },
            "line": 27,
            "code": "    it('should handle negative input values and return negative conversion result', () => {\n      expect(pxToRem(-16, 16)).toEqual('-1rem');\n    });",
            "file": "specs/utils/fontSizeUtility-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "fallbacks to a default value when \"documentElement\" contains an invalid entry",
            "suites": [
                "fontSizeUtility",
                "getDocumentRemSize"
            ],
            "updatePoint": {
                "line": 32,
                "column": 85
            },
            "line": 32,
            "code": "    it('fallbacks to a default value when \"documentElement\" contains an invalid entry', () => {\n      Object.defineProperty(document, 'documentElement', {\n        configurable: true,\n\n        get() {\n          return null;\n        }\n\n      });\n      expect(document.documentElement).toBe(null);\n      expect(getDocumentRemSize()).toEqual(16);\n    });",
            "file": "specs/utils/fontSizeUtility-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "handles proper keys",
            "suites": [
                "shouldPreventDefaultOnKeyDown"
            ],
            "updatePoint": {
                "line": 3,
                "column": 25
            },
            "line": 3,
            "code": "  it('handles proper keys', () => {\n    expect(shouldPreventDefaultOnKeyDown(new KeyboardEvent('keydown', {\n      key: 'Backspace'\n    }))).toBe(false);\n    expect(shouldPreventDefaultOnKeyDown(new KeyboardEvent('keydown', {\n      key: 'Delete'\n    }))).toBe(false);\n    expect(shouldPreventDefaultOnKeyDown(new KeyboardEvent('keydown', {\n      key: 'Enter'\n    }))).toBe(true);\n    expect(shouldPreventDefaultOnKeyDown(new KeyboardEvent('keydown', {\n      key: ' '\n    }))).toBe(true);\n  });",
            "file": "specs/utils/shouldPreventDefaultOnKeyDown-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "ignores for field-like targets",
            "suites": [
                "shouldPreventDefaultOnKeyDown"
            ],
            "updatePoint": {
                "line": 17,
                "column": 36
            },
            "line": 17,
            "code": "  it('ignores for field-like targets', () => {\n    const divEvent = new KeyboardEvent('keydown', {\n      key: 'Enter'\n    });\n    const inputEvent = new KeyboardEvent('keydown', {\n      key: 'Enter'\n    });\n    const textareaEvent = new KeyboardEvent('keydown', {\n      key: 'Enter'\n    });\n    document.createElement('div').dispatchEvent(divEvent);\n    document.createElement('input').dispatchEvent(inputEvent);\n    document.createElement('textarea').dispatchEvent(textareaEvent);\n    expect(shouldPreventDefaultOnKeyDown(divEvent)).toBe(true);\n    expect(shouldPreventDefaultOnKeyDown(inputEvent)).toBe(false);\n    expect(shouldPreventDefaultOnKeyDown(textareaEvent)).toBe(false);\n  });",
            "file": "specs/utils/shouldPreventDefaultOnKeyDown-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "handles \"Enter\" for anchor targets",
            "suites": [
                "shouldPreventDefaultOnKeyDown"
            ],
            "updatePoint": {
                "line": 34,
                "column": 40
            },
            "line": 34,
            "code": "  it('handles \"Enter\" for anchor targets', () => {\n    const anchorEvent = new KeyboardEvent('keydown', {\n      key: 'Enter'\n    });\n    document.createElement('a').dispatchEvent(anchorEvent);\n    expect(shouldPreventDefaultOnKeyDown(anchorEvent)).toBe(false);\n  });",
            "file": "specs/utils/shouldPreventDefaultOnKeyDown-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "ignores \"Space\" for anchor targets",
            "suites": [
                "shouldPreventDefaultOnKeyDown"
            ],
            "updatePoint": {
                "line": 41,
                "column": 40
            },
            "line": 41,
            "code": "  it('ignores \"Space\" for anchor targets', () => {\n    // 'Space' or 'Spacebar' doesn't work https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\n    const anchorEvent = new KeyboardEvent('keydown', {\n      key: ' '\n    });\n    document.createElement('a').dispatchEvent(anchorEvent);\n    expect(shouldPreventDefaultOnKeyDown(anchorEvent)).toBe(true);\n  });",
            "file": "specs/utils/shouldPreventDefaultOnKeyDown-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "ignores for editable targets",
            "suites": [
                "shouldPreventDefaultOnKeyDown"
            ],
            "updatePoint": {
                "line": 49,
                "column": 34
            },
            "line": 49,
            "code": "  it('ignores for editable targets', () => {\n    const event = new KeyboardEvent('keydown', {\n      key: 'Enter'\n    });\n    const element = document.createElement('div'); // @ts-ignore\n\n    element.isContentEditable = true;\n    element.dispatchEvent(event);\n    expect(shouldPreventDefaultOnKeyDown(event)).toBe(false);\n  });",
            "file": "specs/utils/shouldPreventDefaultOnKeyDown-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/react-northstar/test"
        },
        {
            "name": "can handle prototype pollution",
            "suites": [
                "deepmerge"
            ],
            "updatePoint": {
                "line": 155,
                "column": 36
            },
            "line": 155,
            "code": "  it('can handle prototype pollution', () => {\n    const obj1 = {\n      __proto__: { payload: 'malicious value' },\n      constructor: { foo: 'malicious value' },\n    };\n    // used to check it keeps other properties\n    const obj2 = {\n      __proto__: { payload: 'malicious value' },\n      prototype: { payload: 'malicious value' },\n      constructor: { foo: 'malicious value' },\n      foo: { bar: 'baz' },\n    };\n    // used to check deep cycles\n    const obj3 = {\n      __proto__: { payload: 'malicious value' },\n      constructor: { foo: 'malicious value' },\n      a: { b: 'baz', __proto__: { payload: 'malicious value' } },\n    };\n\n    expect(deepmerge({}, obj1)).toEqual({});\n    expect(deepmerge({}, obj2)).toEqual({ foo: { bar: 'baz' } });\n    expect(deepmerge({}, obj1, obj2)).toEqual({ foo: { bar: 'baz' } });\n    expect(deepmerge(obj1, obj2, obj3)).toEqual({\n      a: { b: 'baz' },\n      foo: { bar: 'baz' },\n    });\n  });",
            "file": "deepmerge-test.ts",
            "skipped": false,
            "dir": "packages/fluentui/styles/test"
        }
    ],
    "badge": "microsoft__fluentui.svg"
}