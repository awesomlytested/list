{"repo":"carbon-design-system/carbon","url":"https://github.com/carbon-design-system/carbon","branch":"main","configs":[{"package":"@carbon/react","lang":"js","dir":"packages/carbon-react/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/colors","lang":"js","dir":"packages/colors/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"carbon-components","lang":"js","dir":"packages/components/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/elements","lang":"js","dir":"packages/elements/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/feature-flags","lang":"js","dir":"packages/feature-flags/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/grid","lang":"js","dir":"packages/grid/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/icon-build-helpers","lang":"js","dir":"packages/icon-build-helpers/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/icon-helpers","lang":"js","dir":"packages/icon-helpers/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/layout","lang":"js","dir":"packages/layout/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/motion","lang":"js","dir":"packages/motion/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"carbon-components-react","lang":"js","dir":"packages/react/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/scss-generator","lang":"js","dir":"packages/scss-generator/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/styles","lang":"js","dir":"packages/styles/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/test-utils","lang":"js","dir":"packages/test-utils/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/themes","lang":"js","dir":"packages/themes/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/type","lang":"js","dir":"packages/type/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"colors","suites":[],"updatePoint":{"line":12,"column":12,"index":290},"line":12,"code":"test('colors', () => {\n  expect(colors).toMatchSnapshot();\n});","file":"colors-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"unstable_hoverColors","suites":[],"updatePoint":{"line":15,"column":26,"index":367},"line":15,"code":"test('unstable_hoverColors', () => {\n  expect(unstable_hoverColors).toMatchSnapshot();\n});","file":"colors-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"Public API","suites":["@carbon/colors"],"updatePoint":{"line":19,"column":18,"index":393},"line":19,"code":"  test('Public API', async () => {\n    const {\n      getValue\n    } = await render(`\n      @use 'sass:meta';\n      @use '../index.scss' as colors;\n\n      $_: get-value(meta.module-variables('colors'));\n    `);\n    const variables = getValue(0);\n    expect(variables).toMatchSnapshot();\n  });","file":"modules-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"should emit default variable initializations when mixins are included","suites":["colors.scss"],"updatePoint":{"line":18,"column":75,"index":455},"line":18,"code":"  it('should emit default variable initializations when mixins are included', async () => {\n    const {\n      calls\n    } = await render(`\n@import '../scss/mixins';\n\n$test: test(mixin-exists(carbon--colors));\n$test: test(global-variable-exists(carbon--blue-50));\n`);\n    expect(calls[0][0].getValue()).toBe(true);\n    expect(calls[1][0].getValue()).toBe(true);\n  });","file":"scss-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"should include color variables as globals if the mixin is called","suites":["colors.scss"],"updatePoint":{"line":30,"column":70,"index":817},"line":30,"code":"  it('should include color variables as globals if the mixin is called', async () => {\n    const {\n      calls\n    } = await render(`\n@import '../scss/mixins';\n\n@include carbon--colors();\n$test: test(variable-exists(carbon--blue-50));\n$test: test(global-variable-exists(carbon--blue-50));\n`);\n    expect(calls[0][0].getValue()).toBe(true);\n    expect(calls[1][0].getValue()).toBe(true);\n  });","file":"scss-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"should include color variables in the default entrypoint","suites":["colors.scss"],"updatePoint":{"line":43,"column":62,"index":1202},"line":43,"code":"  it('should include color variables in the default entrypoint', async () => {\n    const {\n      calls\n    } = await render(`\n@import '../scss/colors';\n\n$test: test(mixin-exists(carbon--colors));\n$test: test(variable-exists(carbon--blue-50));\n$test: test(global-variable-exists(carbon--blue-50));\n`);\n    expect(calls[0][0].getValue()).toBe(true);\n    expect(calls[1][0].getValue()).toBe(true);\n    expect(calls[2][0].getValue()).toBe(true);\n  });","file":"scss-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"should provide a map of color values","suites":["colors.scss","deprecated"],"updatePoint":{"line":58,"column":44,"index":1665},"line":58,"code":"    it('should provide a map of color values', async () => {\n      const {\n        calls\n      } = await render(`\n@import '../scss/colors';\n\n$map: test($ibm-color-map);\n$swatch: test(map-get($ibm-color-map, 'black'));\n$value: test(map-get(map-get($ibm-color-map, 'black'), 100));\n$null: test(map-get($ibm-color-map, black));\n`);\n      expect(calls[0][0]).toBeInstanceOf(types.Map);\n      expect(calls[1][0]).toBeInstanceOf(types.Map);\n      expect(calls[2][0]).toBeInstanceOf(types.Color);\n      expect(calls[3][0]).toBeInstanceOf(types.Null);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"Public API should only change with a semver change","suites":[],"updatePoint":{"line":8,"column":56,"index":274},"line":8,"code":"test('Public API should only change with a semver change', () => {\n  expect(Object.keys(CarbonElements).sort()).toMatchSnapshot();\n});","file":"PublicAPI-test.js","skipped":false,"dir":"packages/elements/src/__tests__"},{"name":"should add the given flag and set whether its enabled","suites":["@carbon/feature-flags","add"],"updatePoint":{"line":20,"column":61,"index":469},"line":20,"code":"    it('should add the given flag and set whether its enabled', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-a, true);\n        @include feature-flags.add(flag-b, false);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n        $_: get-value(feature-flags.enabled(flag-b));\n      `); // flag-a\n\n      expect(getValue(0)).toBe(true); // flag-b\n\n      expect(getValue(1)).toBe(false);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"should enable the given feature flag","suites":["@carbon/feature-flags","enable"],"updatePoint":{"line":39,"column":44,"index":996},"line":39,"code":"    it('should enable the given feature flag', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-a, false);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n\n        @include feature-flags.enable(flag-a);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n      `);\n      expect(getValue(0)).toBe(false);\n      expect(getValue(1)).toBe(true);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"should disable the given feature flag","suites":["@carbon/feature-flags","disable"],"updatePoint":{"line":58,"column":45,"index":1502},"line":58,"code":"    it('should disable the given feature flag', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-a, true);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n\n        @include feature-flags.disable(flag-a);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n      `);\n      expect(getValue(0)).toBe(true);\n      expect(getValue(1)).toBe(false);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"should return whether a flag is enabled or disabled","suites":["@carbon/feature-flags","enabled"],"updatePoint":{"line":77,"column":59,"index":2022},"line":77,"code":"    it('should return whether a flag is enabled or disabled', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-a, true);\n        @include feature-flags.add(flag-b, false);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n        $_: get-value(feature-flags.enabled(flag-b));\n      `); // flag-a\n\n      expect(getValue(0)).toBe(true); // flag-b\n\n      expect(getValue(1)).toBe(false);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"should set each feature flag given","suites":["@carbon/feature-flags","merge"],"updatePoint":{"line":96,"column":42,"index":2546},"line":96,"code":"    it('should set each feature flag given', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-c, false);\n        @include feature-flags.merge((\n          flag-a: true,\n          flag-b: false,\n          flag-c: true,\n        ));\n\n        $_: get-value(feature-flags.enabled(flag-a));\n        $_: get-value(feature-flags.enabled(flag-b));\n        $_: get-value(feature-flags.enabled(flag-c));\n      `); // flag-a\n\n      expect(getValue(0)).toBe(true); // flag-b\n\n      expect(getValue(1)).toBe(false); // flag-c\n\n      expect(getValue(2)).toBe(true);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"Public API","suites":["@carbon/grid"],"updatePoint":{"line":19,"column":18,"index":391},"line":19,"code":"  test('Public API', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use 'sass:meta';\n      @use '../index.scss' as grid;\n\n      $_: get('variables', meta.module-variables('grid'));\n      $_: get('mixins', (\n        css-grid: meta.mixin-exists('css-grid', 'grid'),\n        flex-grid: meta.mixin-exists('flex-grid', 'grid'),\n      ));\n    `);\n    expect(Object.keys(unwrap('variables'))).toMatchSnapshot();\n    expect(unwrap('mixins')).toEqual({\n      'css-grid': true,\n      'flex-grid': true\n    });\n  });","file":"scss-test.js","skipped":false,"dir":"packages/grid/__tests__"},{"name":"should register each asset from a directory","suites":["registry"],"updatePoint":{"line":31,"column":49,"index":853},"line":31,"code":"  it('should register each asset from a directory', async () => {\n    const assets = ['a', 'b', 'c'];\n    const files = {};\n\n    for (const asset of assets) {\n      const filepath = `/svg/${asset}.svg`;\n      files[filepath] = 'mock';\n    }\n\n    vol.fromJSON(files);\n    const registry = await Registry.create('/svg');\n\n    for (const [id] of registry) {\n      expect(assets.indexOf(id)).not.toBe(-1);\n    }\n  });","file":"registry-test.js","skipped":false,"dir":"packages/icon-build-helpers/src/__tests__"},{"name":"should register each asset in nested directories","suites":["registry"],"updatePoint":{"line":47,"column":54,"index":1272},"line":47,"code":"  it('should register each asset in nested directories', async () => {\n    const assets = ['foo/a', 'foo/bar/b', 'baz/c'];\n    const files = {};\n\n    for (const asset of assets) {\n      const filepath = `/svg/${asset}.svg`;\n      files[filepath] = 'mock';\n    }\n\n    vol.fromJSON(files);\n    const registry = await Registry.create('/svg');\n\n    for (const icon of registry.values()) {\n      const asset = icon.namespace.join('/') + '/' + icon.id;\n      expect(assets.indexOf(asset)).not.toBe(-1);\n    }\n  });","file":"registry-test.js","skipped":false,"dir":"packages/icon-build-helpers/src/__tests__"},{"name":"should register assets with the same name under the same icon","suites":["registry"],"updatePoint":{"line":64,"column":67,"index":1794},"line":64,"code":"  it('should register assets with the same name under the same icon', async () => {\n    const assets = ['16/a', '20/a', '32/a'];\n    const files = {};\n\n    for (const asset of assets) {\n      const filepath = `/svg/${asset}.svg`;\n      files[filepath] = 'mock';\n    }\n\n    vol.fromJSON(files);\n    const registry = await Registry.create('/svg');\n    expect(registry.size).toBe(1);\n    const icon = registry.get('a');\n    expect(icon.assets.length).toBe(assets.length);\n    expect(icon.assets[0].size).toBe(16);\n    expect(icon.assets[1].size).toBe(20);\n    expect(icon.assets[2].size).toBe(32);\n  });","file":"registry-test.js","skipped":false,"dir":"packages/icon-build-helpers/src/__tests__"},{"name":"should default `aria-hidden=\"true\"` and `focusable=\"false\"` for SVGs","suites":["getAttributes"],"updatePoint":{"line":16,"column":74,"index":437},"line":16,"code":"  it('should default `aria-hidden=\"true\"` and `focusable=\"false\"` for SVGs', () => {\n    const attrs = getAttributes();\n    expect(attrs['aria-hidden']).toBe(true);\n    expect(attrs.focusable).toBe('false');\n    expect(attrs.role).not.toBeDefined();\n  }); // Test when we need to set `focusable` and `tabindex`. The rule of thumb","file":"getAttributes-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should set `focusable=\"%s\"` when using %s","suites":["getAttributes"],"line":27,"code":"  test.each([['false', 'only tabindex', {\n    tabindex: 0\n  }], ['true', 'aria-label and tabindex', {\n    'aria-label': 'label',\n    tabindex: 0\n  }], ['false', 'only aria-label', {\n    'aria-label': 'label'\n  }], ['true', 'aria-labelledby and tabindex', {\n    'aria-labelledby': 'id',\n    tabindex: 0\n  }], ['false', 'only aria-labelledby', {\n    'aria-labelledby': 'id'\n  }], ['true', 'title and tabindex', {\n    title: 'title',\n    tabindex: 0\n  }], ['false', 'only title', {\n    title: 'title'\n  }]])('should set `focusable=\"%s\"` when using %s', (focusable, _, attributes) => {\n    const iconAttributes = getAttributes({\n      width: 16,\n      height: 16,\n      viewBox: '0 0 16 16',\n      ...attributes\n    });\n    expect(iconAttributes.focusable).toBe(focusable);\n  });","file":"getAttributes-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should set role and remove aria-hidden if `%s` is set","suites":["getAttributes"],"line":53,"code":"  test.each(['aria-label', 'aria-labelledby', 'title'])('should set role and remove aria-hidden if `%s` is set', attr => {\n    const attrs = getAttributes({\n      [attr]: 'attribute'\n    });\n    expect(attrs.role).toBe('img');\n    expect(attrs['aria-hidden']).not.toBeDefined();\n  });","file":"getAttributes-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should convert a given descriptor to a string","suites":["toString"],"updatePoint":{"line":37,"column":51,"index":903},"line":37,"code":"  it('should convert a given descriptor to a string', () => {\n    expect(() => {\n      toString(defaultDescriptor);\n    }).not.toThrow();\n    expect(typeof toString(defaultDescriptor)).toBe('string');\n  });","file":"toString-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should convert a given descriptor to a valid DOM node","suites":["toSVG"],"updatePoint":{"line":37,"column":59,"index":899},"line":37,"code":"  it('should convert a given descriptor to a valid DOM node', () => {\n    expect(() => {\n      const node = toSVG(defaultDescriptor);\n      document.body.appendChild(node);\n      node.parentNode.removeChild(node);\n    }).not.toThrow();\n  });","file":"toSVG-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"it should export spacing step %s","suites":["scss/layout.scss"],"line":37,"code":"  it.each(spacingScale)('it should export spacing step %s', async (index, namespace, alias, value) => {\n    const {\n      calls\n    } = await render(`\n        @import '../scss/layout';\n        $t: test(global-variable-exists(${namespace}));\n        $t: test($${namespace});\n        $t: test(global-variable-exists(${alias}));\n        $t: test($${alias});\n      `);\n    expect(convert(calls[0][0])).toBe(true);\n    expect(convert(calls[1][0])).toBe(value);\n    expect(convert(calls[2][0])).toBe(true);\n    expect(convert(calls[3][0])).toBe(value);\n  });","file":"layout-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"it should export fluid spacing step %s","suites":["scss/layout.scss"],"line":52,"code":"  it.each(fluidSpacingScale)('it should export fluid spacing step %s', async (index, namespace, alias, value) => {\n    const {\n      calls\n    } = await render(`\n        @import '../scss/layout';\n        $t: test(global-variable-exists(${namespace}));\n        $t: test($${namespace});\n        $t: test(global-variable-exists(${alias}));\n        $t: test($${alias});\n      `);\n    expect(convert(calls[0][0])).toBe(true);\n    expect(convert(calls[1][0])).toBe(value);\n    expect(convert(calls[2][0])).toBe(true);\n    expect(convert(calls[3][0])).toBe(value);\n  });","file":"layout-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"it should export layout step %s","suites":["scss/layout.scss"],"line":67,"code":"  it.each(layoutScale)('it should export layout step %s', async (index, namespace, alias, value) => {\n    const {\n      calls\n    } = await render(`\n        @import '../scss/layout';\n        $t: test(global-variable-exists(${namespace}));\n        $t: test($${namespace});\n        $t: test(global-variable-exists(${alias}));\n        $t: test($${alias});\n      `);\n    expect(convert(calls[0][0])).toBe(true);\n    expect(convert(calls[1][0])).toBe(value);\n    expect(convert(calls[2][0])).toBe(true);\n    expect(convert(calls[3][0])).toBe(value);\n  });","file":"layout-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"it should export container step %s","suites":["scss/layout.scss"],"line":82,"code":"  it.each(containerScale)('it should export container step %s', async (index, namespace, alias, value) => {\n    const {\n      calls\n    } = await render(`\n        @import '../scss/layout';\n        $t: test(global-variable-exists(${namespace}));\n        $t: test($${namespace});\n        $t: test(global-variable-exists(${alias}));\n        $t: test($${alias});\n      `);\n    expect(convert(calls[0][0])).toBe(true);\n    expect(convert(calls[1][0])).toBe(value);\n    expect(convert(calls[2][0])).toBe(true);\n    expect(convert(calls[3][0])).toBe(value);\n  });","file":"layout-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"it should export icon-size step %s","suites":["scss/layout.scss"],"line":97,"code":"  it.each(iconSizeScale)('it should export icon-size step %s', async (index, namespace, alias, value) => {\n    const {\n      calls\n    } = await render(`\n        @import '../scss/layout';\n        $t: test(global-variable-exists(${namespace}));\n        $t: test($${namespace});\n        $t: test(global-variable-exists(${alias}));\n        $t: test($${alias});\n      `);\n    expect(convert(calls[0][0])).toBe(true);\n    expect(convert(calls[1][0])).toBe(value);\n    expect(convert(calls[2][0])).toBe(true);\n    expect(convert(calls[3][0])).toBe(value);\n  });","file":"layout-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"Public API","suites":["@carbon/motion"],"updatePoint":{"line":15,"column":18,"index":410},"line":15,"code":"  test('Public API', () => {\n    expect(CarbonMotion).toMatchSnapshot();\n  });","file":"motion-test.js","skipped":false,"dir":"packages/motion/__tests__"},{"name":"@carbon/motion/scss/motion.scss","suites":["@carbon/motion"],"updatePoint":{"line":18,"column":39,"index":510},"line":18,"code":"  test('@carbon/motion/scss/motion.scss', async () => {\n    const {\n      getValue\n    } = await render(`\n      @use 'sass:meta';\n      @use '../scss/motion';\n\n      $_: get-value(meta.module-variables('motion'));\n    `);\n    const variables = getValue(0);\n    expect(Object.keys(variables)).toMatchSnapshot();\n  });","file":"motion-test.js","skipped":false,"dir":"packages/motion/__tests__"},{"name":"Public API should only change with a semver change","suites":[],"updatePoint":{"line":108,"column":56,"index":3704},"line":108,"code":"test('Public API should only change with a semver change', () => {\n  jest.mock('../src/internal/deprecateFieldOnObject');\n\n  const CarbonReact = require('../src');\n\n  const PublicAPI = new Map();\n  Object.keys(CarbonReact).forEach(name => {\n    const Component = CarbonReact[name];\n    PublicAPI.set(name, mapComponentToAPI(Component));\n  });\n\n  function mapComponentToAPI(Component) {\n    const api = {};\n    Object.keys(Component).forEach(key => {\n      // There are a couple of properties on components that we don't believe\n      // are part of our API, such as `_` prefixed variables, or capture details\n      // that are internal to a library-specific piece of functionality. For\n      // example, React's context functionality.\n      if (key[0] === '_') {\n        return;\n      }\n\n      if (key === 'Consumer') {\n        api[key] = 'React.Consumer';\n        return;\n      }\n\n      if (key === 'Provider') {\n        api[key] = 'React.Provider';\n        return;\n      }\n\n      if (key === 'contextType') {\n        api[key] = {\n          $$typeof: Component[key]['$$typeof']\n        };\n        return;\n      } // Handle components defined as fields on a component, for example\n      // `MultiSelect.Filterable`\n\n\n      if (typeof Component[key] === 'function' && key !== 'render' && isValidElementType(Component[key])) {\n        api[key] = mapComponentToAPI(Component[key]);\n        return;\n      }\n\n      api[key] = Component[key];\n    });\n    return api;\n  }\n\n  expect(PublicAPI).toMatchSnapshot();\n});","file":"PublicAPI-test.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"%s","suites":["@carbon/react/scss"],"line":26,"code":"  describe.each(relativePaths)('%s', relativePath => {\n    it('should be importable', async () => {\n      await expect(render(`@use '../${relativePath}' as test;`)).resolves.toBeDefined();\n    });\n  });","file":"scss-test.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"should be importable","suites":["@carbon/react/scss"],"updatePoint":{"line":27,"column":28,"index":590},"line":27,"code":"    it('should be importable', async () => {\n      await expect(render(`@use '../${relativePath}' as test;`)).resolves.toBeDefined();\n    });","file":"scss-test.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"should load","suites":[],"updatePoint":{"line":9,"column":17,"index":225},"line":9,"code":"test('should load', () => {\n  expect(() => require('../lib')).not.toThrow();\n});","file":"ssr-test.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"%s","suites":["@carbon/scss","assignments"],"line":74,"code":"    test.each(assignment)('%s', (_, init, expected, options = {}) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [t.Assignment({\n          id: t.Identifier({\n            name: 'variable'\n          }),\n          init,\n          ...options\n        })]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","rules"],"line":119,"code":"    test.each(rules)('%s', (_, rule, expected) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [rule]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","function"],"line":239,"code":"    test.each(functions)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [ast]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","mixin"],"line":339,"code":"    test.each(mixins)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [ast]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","calls"],"line":388,"code":"    test.each(calls)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [ast]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","Control structures"],"line":420,"code":"    test.each(structures)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(ast);\n      expect(code.trim()).toEqual(expected.trim());\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","Expressions"],"line":446,"code":"    test.each(expressions)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(ast);\n      expect(code.trim()).toEqual(expected.trim());\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"newline","suites":["@carbon/scss","formatting"],"updatePoint":{"line":454,"column":17,"index":11209},"line":454,"code":"    test('newline', () => {\n      const {\n        code\n      } = generate(t.StyleSheet([t.Comment('start'), t.Newline(), t.Comment('end')]));\n      expect(code).toBe(`//start\n\n//end\n`);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"should export white, g10, g90, and g100 themes","suites":["@carbon/styles/scss/compat"],"updatePoint":{"line":19,"column":52,"index":439},"line":19,"code":"  it('should export white, g10, g90, and g100 themes', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use 'sass:map';\n      @use 'sass:meta';\n      @use '../scss/compat/themes';\n\n      $_: get('variables', map.keys(meta.module-variables('themes')));\n    `);\n    const themes = unwrap('variables').sort();\n    expect(themes).toEqual(['white', 'g10', 'g90', 'g100'].sort());\n  });","file":"compat-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should export v10 tokens as Sass Variables","suites":["@carbon/styles/scss/compat"],"updatePoint":{"line":32,"column":48,"index":836},"line":32,"code":"  it('should export v10 tokens as Sass Variables', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use '../scss/config' with ( $prefix: 'cds' );\n      @use '../scss/compat/themes';\n      @use '../scss/compat/theme' with (\n        $theme: themes.$white,\n      );\n\n      $_: get('theme', themes.$white);\n      $_: get('variable', theme.$interactive-01);\n    `);\n    const theme = unwrap('theme');\n    const variable = unwrap('variable');\n    expect(variable).toEqual(`var(--cds-interactive-01, ${theme['interactive-01']})`);\n  });","file":"compat-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should export v11 tokens that match the fallback theme","suites":["@carbon/styles/scss/compat"],"updatePoint":{"line":49,"column":60,"index":1398},"line":49,"code":"  it('should export v11 tokens that match the fallback theme', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use '../scss/config' with ( $prefix: 'cds' );\n      @use '../scss/themes';\n      @use '../scss/compat/themes' as compat;\n      @use '../scss/compat/theme' with (\n        $theme: compat.$g100,\n      );\n\n      $_: get('theme', themes.$g100);\n      $_: get('variable', theme.$background);\n    `);\n    const theme = unwrap('theme');\n    const variable = unwrap('variable');\n    expect(variable).toEqual(`var(--cds-background, ${theme['background']})`);\n  });","file":"compat-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"%s","suites":["@carbon/styles"],"line":20,"code":"  describe.each(filepaths)('%s', filepath => {\n    it('should be importable', async () => {\n      await expect(render(`@use '../${filepath}';`)).resolves.toBeDefined();\n    });\n  });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should be importable","suites":["@carbon/styles"],"updatePoint":{"line":21,"column":28,"index":2488},"line":21,"code":"    it('should be importable', async () => {\n      await expect(render(`@use '../${filepath}';`)).resolves.toBeDefined();\n    });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should have stable public scss entrypoints","suites":["@carbon/styles"],"updatePoint":{"line":25,"column":48,"index":2644},"line":25,"code":"  it('should have stable public scss entrypoints', async () => {\n    expect(filepaths).toMatchSnapshot();\n  });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"config overrides","suites":["@carbon/styles","scss/config"],"updatePoint":{"line":29,"column":26,"index":2768},"line":29,"code":"    test('config overrides', async () => {\n      const {\n        get\n      } = await render(`\n        @use 'sass:meta';\n        @use '../scss/config' with (\n          $prefix: 'custom-prefix',\n          $css--font-face: false,\n        );\n\n        $_: get('config', (\n          prefix: config.$prefix,\n          css--font-face: config.$css--font-face,\n        ));\n      `);\n      expect(get('config').value).toEqual({\n        prefix: 'custom-prefix',\n        ['css--font-face']: false\n      });\n    });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should support bringing in stylesheets independently","suites":["@carbon/styles","import order"],"updatePoint":{"line":51,"column":60,"index":3345},"line":51,"code":"    it('should support bringing in stylesheets independently', async () => {\n      await expect(render(`\n          @use '../scss/reset';\n          @use '../scss/grid';\n          @use '../scss/breakpoint';\n          @use '../scss/colors';\n          @use '../scss/components';\n        `)).resolves.not.toThrow();\n    });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should get the matching node for the given text input","suites":["DOM test helpers","getByText"],"updatePoint":{"line":18,"column":61,"index":576},"line":18,"code":"    it('should get the matching node for the given text input', () => {\n      const nodes = ['<div>Text A</div>', '<button>Text B</button>', '<button>Text C <svg></svg></button>'];\n      container.innerHTML = nodes.join('');\n      expect(getByText(container, 'Text A')).toEqual(container.childNodes[0]);\n      expect(getByText(container, 'Text B')).toEqual(container.childNodes[1]);\n      expect(getByText(container, 'Text C')).toEqual(container.childNodes[2]);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should return null if no matches are found","suites":["DOM test helpers","getByText"],"updatePoint":{"line":25,"column":50,"index":1035},"line":25,"code":"    it('should return null if no matches are found', () => {\n      expect(getByText(container, 'Not found')).toEqual(null);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should get the matching node based on aria-label","suites":["DOM test helpers","getByLabel"],"updatePoint":{"line":30,"column":56,"index":1212},"line":30,"code":"    it('should get the matching node based on aria-label', () => {\n      container.innerHTML = '<button aria-label=\"test\">Test</button>';\n      expect(getByLabel(container, 'test')).toEqual(container.childNodes[0]);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should get the matching node based on aria-labelledby","suites":["DOM test helpers","getByLabel"],"updatePoint":{"line":34,"column":61,"index":1441},"line":34,"code":"    it('should get the matching node based on aria-labelledby', () => {\n      container.innerHTML = ['<span id=\"test\">label</span>', '<button aria-labelledby=\"test\">Test</button>'].join('');\n      expect(getByLabel(container, 'label')).toEqual(container.childNodes[1]);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should support matching based on text if label is in an interactive node","suites":["DOM test helpers","getByLabel"],"updatePoint":{"line":38,"column":80,"index":1738},"line":38,"code":"    it('should support matching based on text if label is in an interactive node', () => {\n      container.innerHTML = '<button>test</button>';\n      expect(getByLabel(container, 'test')).toEqual(container.childNodes[0]);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should return null if no matches are found","suites":["DOM test helpers","getByLabel"],"updatePoint":{"line":42,"column":50,"index":1938},"line":42,"code":"    it('should return null if no matches are found', () => {\n      expect(getByLabel(container, 'Not found')).toEqual(null);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should detect if an element is visible","suites":["DOM test helpers","isElementVisible"],"updatePoint":{"line":47,"column":46,"index":2112},"line":47,"code":"    it('should detect if an element is visible', () => {\n      expect(isElementVisible(container)).toBe(true);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should detect if an element is not visible","suites":["DOM test helpers","isElementVisible"],"updatePoint":{"line":50,"column":50,"index":2235},"line":50,"code":"    it('should detect if an element is not visible', () => {\n      const hidden = Array.from({\n        length: 6\n      }).map(() => document.createElement('div')); // <div hidden></div>\n\n      hidden[0].setAttribute('hidden', ''); // <div style=\"display: none;\"></div>\n\n      hidden[1].style.display = 'none'; // <div style=\"visibility: hidden;\"></div>\n\n      hidden[2].style.visibility = 'hidden'; // <div style=\"visibility: collapse;\"></div>\n\n      hidden[3].style.visibility = 'collapse'; // <div style=\"opacity: 0;\"></div>\n\n      hidden[4].style.opacity = '0'; // <div style=\"opacity: 0;\"></div>\n\n      hidden[5].style.opacity = 0;\n\n      for (const node of hidden) {\n        container.appendChild(node);\n        expect(isElementVisible(node)).toBe(false);\n      }\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should detect if an element has a parent that is not visible","suites":["DOM test helpers","isElementVisible"],"updatePoint":{"line":72,"column":68,"index":3030},"line":72,"code":"    it('should detect if an element has a parent that is not visible', () => {\n      const hiddenParent = document.createElement('div');\n      hiddenParent.style.display = 'none';\n      const visibleChild = document.createElement('div');\n      hiddenParent.appendChild(visibleChild);\n      expect(isElementVisible(hiddenParent)).toBe(false);\n      expect(isElementVisible(visibleChild)).toBe(false);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"pressTab should shift focus to the next focusable element","suites":[],"updatePoint":{"line":12,"column":63,"index":447},"line":12,"code":"test('pressTab should shift focus to the next focusable element', () => {\n  const button1 = document.createElement('button');\n  button1.textContent = 'Test button 1';\n  const button2 = document.createElement('button');\n  button2.textContent = 'Test button 2';\n  document.body.appendChild(button1); // Add a non-interactive element in between our interactive elements. If this\n  // receives focus, something is wrong with how we determine tab order\n\n  document.body.appendChild(document.createElement('span'));\n  document.body.appendChild(button2);\n  expect(document.activeElement === document.body).toBe(true);\n  pressTab();\n  expect(document.activeElement === button1).toBe(true);\n  pressTab();\n  expect(document.activeElement === button2).toBe(true);\n  pressTab();\n  expect(document.activeElement === button1).toBe(true);\n});","file":"keyboard-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"pressShiftTab should shift focus to the previous focusable element","suites":[],"updatePoint":{"line":30,"column":72,"index":1284},"line":30,"code":"test('pressShiftTab should shift focus to the previous focusable element', () => {\n  const button1 = document.createElement('button');\n  button1.textContent = 'Test button 1';\n  const button2 = document.createElement('button');\n  button2.textContent = 'Test button 2';\n  document.body.appendChild(button1);\n  document.body.appendChild(document.createElement('span'));\n  document.body.appendChild(button2);\n  expect(document.activeElement === document.body).toBe(true);\n  pressShiftTab();\n  expect(document.activeElement === button2).toBe(true);\n  pressShiftTab();\n  expect(document.activeElement === button1).toBe(true);\n  pressShiftTab();\n  expect(document.activeElement === button2).toBe(true);\n});","file":"keyboard-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"pressEnter should dispatch an additional click event on a button","suites":[],"updatePoint":{"line":46,"column":70,"index":1983},"line":46,"code":"test('pressEnter should dispatch an additional click event on a button', () => {\n  const button = document.createElement('button');\n  const buttonOnClick = jest.fn();\n  const buttonOnKeyDown = jest.fn();\n  const span = document.createElement('span');\n  const spanOnClick = jest.fn();\n  const spanOnKeyDown = jest.fn();\n  button.addEventListener('click', buttonOnClick);\n  button.addEventListener('keydown', buttonOnKeyDown);\n  span.addEventListener('click', spanOnClick);\n  span.addEventListener('keydown', spanOnKeyDown);\n  pressEnter(button);\n  expect(buttonOnClick).toHaveBeenCalledTimes(1);\n  expect(buttonOnKeyDown).toHaveBeenCalledTimes(1);\n  expect(buttonOnKeyDown).toHaveBeenLastCalledWith(expect.objectContaining({\n    key: 'Enter'\n  }));\n  pressEnter(span);\n  expect(spanOnClick).not.toHaveBeenCalled();\n  expect(spanOnKeyDown).toHaveBeenCalledTimes(1);\n  expect(spanOnKeyDown).toHaveBeenLastCalledWith(expect.objectContaining({\n    key: 'Enter'\n  }));\n});","file":"keyboard-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"pressSpace should dispatch an additional click event on a button","suites":[],"updatePoint":{"line":70,"column":70,"index":2950},"line":70,"code":"test('pressSpace should dispatch an additional click event on a button', () => {\n  const button = document.createElement('button');\n  const buttonOnClick = jest.fn();\n  const buttonOnKeyDown = jest.fn();\n  const span = document.createElement('span');\n  const spanOnClick = jest.fn();\n  const spanOnKeyDown = jest.fn();\n  button.addEventListener('click', buttonOnClick);\n  button.addEventListener('keydown', buttonOnKeyDown);\n  span.addEventListener('click', spanOnClick);\n  span.addEventListener('keydown', spanOnKeyDown);\n  pressSpace(button);\n  expect(buttonOnClick).toHaveBeenCalledTimes(1);\n  expect(buttonOnKeyDown).toHaveBeenCalledTimes(1);\n  expect(buttonOnKeyDown).toHaveBeenLastCalledWith(expect.objectContaining({\n    key: 'Space'\n  }));\n  pressSpace(span);\n  expect(spanOnClick).not.toHaveBeenCalled();\n  expect(spanOnKeyDown).toHaveBeenCalledTimes(1);\n  expect(spanOnKeyDown).toHaveBeenLastCalledWith(expect.objectContaining({\n    key: 'Space'\n  }));\n});","file":"keyboard-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should export a carbon--theme mixin","suites":["_mixins.scss"],"updatePoint":{"line":23,"column":41,"index":455},"line":23,"code":"  it('should export a carbon--theme mixin', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @import '../scss/mixins';\n\n      $_: get('mixin', mixin-exists(carbon--theme));\n    `);\n    expect(unwrap('mixin')).toBe(true);\n  });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should set token variables for the given theme","suites":["_mixins.scss"],"updatePoint":{"line":33,"column":52,"index":712},"line":33,"code":"  it('should set token variables for the given theme', async () => {\n    const themeTests = Object.keys(themes).map(key => {\n      const variable = `$carbon--theme--${key}`;\n      const test = `\n        @include carbon--theme(${variable}) {\n          $_: get('${variable}', $interactive-01);\n        }\n      `;\n      return [variable, themes[key].interactive01, test];\n    });\n    const tests = themeTests.map(([_variable, _expectedColor, test]) => test).join('\\n');\n    const {\n      unwrap\n    } = await render(`\n      @import '../scss/themes';\n      ${tests}\n    `);\n    themeTests.forEach(([variable, expectedColor]) => {\n      expect(unwrap(variable)).toBe(expectedColor);\n    });\n  });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should reset token variables after using the theme","suites":["_mixins.scss"],"updatePoint":{"line":54,"column":56,"index":1408},"line":54,"code":"  it('should reset token variables after using the theme', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @import '../scss/themes';\n\n      $custom-theme: map-merge($carbon--theme--white, (\n        interactive-01: #ffffff,\n      ));\n\n      $_: get('before', $interactive-01);\n\n      @include carbon--theme($custom-theme) {\n        $_: get('mixin', $interactive-01);\n      }\n\n      $_: get('after', $interactive-01);\n    `);\n    expect(unwrap('before')).toBe(unwrap('after'));\n    expect(unwrap('mixin')).toBe('#ffffff');\n  });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should reset token variables after using the theme with css custom properties","suites":["_mixins.scss"],"updatePoint":{"line":75,"column":83,"index":1982},"line":75,"code":"  it('should reset token variables after using the theme with css custom properties', async () => {\n    const {\n      unwrap\n    } = await render(`\n      $feature-flags: (enable-css-custom-properties: true);\n\n      @import '../scss/themes';\n\n      $custom-theme: map-merge($carbon--theme--white, (\n        interactive-01: #ffffff,\n      ));\n\n      $_: get('before', $interactive-01);\n\n      @include carbon--theme($custom-theme) {\n        $_: get('mixin', $interactive-01);\n      }\n\n      $_: get('after', $interactive-01);\n    `);\n    expect(unwrap('mixin')).toBe('var(--cds-interactive-01, #ffffff)');\n    expect(unwrap('after')).toBe(`var(--cds-interactive-01, ${unwrap('before')})`);\n  });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should set the global carbon--theme to match the given theme","suites":["_mixins.scss"],"updatePoint":{"line":98,"column":66,"index":2659},"line":98,"code":"  it('should set the global carbon--theme to match the given theme', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @import '../scss/themes';\n      $carbon--theme: ( value-01: #000000 );\n      $custom-theme: ( value-01: #ffffff );\n\n      @include carbon--theme($custom-theme) {\n        $_: get('mixin', $carbon--theme);\n      }\n\n      $_: get('after', $carbon--theme);\n    `);\n    const mixin = unwrap('mixin');\n    const after = unwrap('after');\n    expect(mixin['value-01']).toBe('#ffffff');\n    expect(after['value-01']).toBe('#000000');\n  });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should create a custom property for a given token name and value","suites":["_mixins.scss","@mixin custom-property"],"updatePoint":{"line":118,"column":72,"index":3278},"line":118,"code":"    it('should create a custom property for a given token name and value', async () => {\n      const {\n        result\n      } = await render(`\n        @import '../scss/mixins';\n        .selector {\n          @include custom-property('token-01', #000000);\n        }\n      `);\n      expect(result.css.toString()).toEqual(expect.stringContaining('--cds-token-01: #000000;'));\n    });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should export multiple tokens for maps","suites":["_mixins.scss","@mixin custom-property"],"updatePoint":{"line":129,"column":46,"index":3632},"line":129,"code":"    it('should export multiple tokens for maps', async () => {\n      const {\n        result\n      } = await render(`\n        @import '../scss/mixins';\n        .selector {\n          @include custom-property('token-01', (\n            property-01: #000000,\n            property-02: #ffffff,\n          ));\n        }\n      `);\n      const output = result.css.toString();\n      expect(output).toEqual(expect.stringContaining('--cds-token-01-property-01: #000000'));\n      expect(output).toEqual(expect.stringContaining('--cds-token-01-property-02: #ffffff'));\n    });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should emit a value only if they are different","suites":["_mixins.scss","@function should-emit"],"updatePoint":{"line":147,"column":54,"index":4252},"line":147,"code":"    it('should emit a value only if they are different', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @import '../scss/mixins';\n\n        $theme-a: (\n          property-01: #000000,\n          property-02: #ffffff,\n          property-03: (\n            sub-property-01: 16px,\n          ),\n          property-04: (\n            sub-property-01: 16px,\n          ),\n        );\n        $theme-b: (\n          property-01: #343434,\n          property-02: #ffffff,\n          property-03: (\n            sub-property-01: 16px,\n          ),\n          property-04: (\n            sub-property-01: 20px,\n          ),\n        );\n\n        // The properties are different, so should emit\n        $_: get('first', should-emit($theme-a, $theme-b, 'property-01', true));\n        $_: get('second', should-emit($theme-a, $theme-b, 'property-04', true));\n\n        // The properties are the same so should not emit\n        $_: get('third', should-emit($theme-a, $theme-b, 'property-02', true));\n        $_: get('fourth', should-emit($theme-a, $theme-b, 'property-03', true));\n      `);\n      expect(unwrap('first')).toBe(true);\n      expect(unwrap('second')).toBe(true);\n      expect(unwrap('third')).toBe(false);\n      expect(unwrap('fourth')).toBe(false);\n    });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should use fallback values for v11 tokens","suites":["_mixins.scss","v11"],"updatePoint":{"line":189,"column":49,"index":5549},"line":189,"code":"    it('should use fallback values for v11 tokens', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @import '../scss/mixins';\n        @import '../scss/theme-maps';\n\n        $carbon--theme: (\n          ui-background: #ffffff,\n        );\n        @include carbon--theme();\n\n        $_: get('token', $background);\n      `); // `ui-background` is the fallback for `background`\n\n      expect(unwrap('token')).toBe('#ffffff');\n    });","file":"mixins-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"index.scss","suites":["@carbon/themes/scss"],"updatePoint":{"line":25,"column":18,"index":487},"line":25,"code":"  test('index.scss', async () => {\n    const tokenVariables = tokens.map(token => {\n      const variable = `themes.$${token.name}`;\n      return `$_: get('${variable}', ${variable});`;\n    });\n    const {\n      unwrap\n    } = await render(`\n      @use 'sass:meta';\n      @use '../' as themes;\n\n      // Theme mixin\n      $_: get('themes.theme', meta.mixin-exists(theme, 'themes'));\n\n      // Get value from current theme\n      $_: get('themes.get', meta.function-exists(get, 'themes'));\n\n      // Current theme\n      $_: get('themes.$theme', themes.$theme);\n\n      // Theme variables\n      ${tokenVariables.join('\\n')}\n    `); // Mixin\n\n    expect(unwrap('themes.theme')).toBe(true); // Current theme\n\n    expect(unwrap('themes.$theme')).toBeDefined(); // Theme getter\n\n    expect(unwrap('themes.get')).toBe(true); // All tokens should be available as variables\n\n    for (const token of tokens) {\n      const variable = `themes.$${token.name}`;\n      expect(unwrap(variable)).toBeDefined();\n    }\n  });","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"scss/_themes.scss","suites":["@carbon/themes/scss"],"updatePoint":{"line":60,"column":25,"index":1497},"line":60,"code":"  test('scss/_themes.scss', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use '../scss/modules/themes';\n\n      // Themes\n      $_: get('themes.$white', themes.$white);\n      $_: get('themes.$g10', themes.$g10);\n      $_: get('themes.$g90', themes.$g90);\n      $_: get('themes.$g100', themes.$g100);\n    `); // Themes should be available\n\n    for (const theme of Object.keys(themes)) {\n      expect(unwrap(`themes.$${theme}`)).toBeDefined();\n    }\n  });","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"$theme","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":79,"column":16,"index":2042},"line":79,"code":"    test('$theme', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use 'sass:map';\n        @use '../scss/modules/themes' as *;\n        @use '../' as themes with (\n          $theme: $g100\n        );\n\n        $_: get('theme.background', themes.get('background'));\n        $_: get('g100.background', map.get($g100, 'background'));\n      `);\n      expect(unwrap('theme.background')).toBe(unwrap('g100.background'));\n    }); // Set current theme to a custom theme","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"custom $theme","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":95,"column":23,"index":2538},"line":95,"code":"    test('custom $theme', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use '../' as themes with (\n          $theme: (\n            token-01: #ffffff\n          )\n        );\n\n        $_: get('token-01', themes.get('token-01'));\n        $_: get('background', themes.get('background'));\n      `);\n      expect(unwrap('token-01')).toBe('#ffffff');\n      expect(unwrap('background')).toBeDefined();\n    }); // Set theme fallback","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"$fallback","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":112,"column":19,"index":2989},"line":112,"code":"    test('$fallback', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use 'sass:map';\n        @use '../scss/modules/themes' as *;\n        @use '../' as themes with (\n          $fallback: $g100,\n          $theme: (\n            token-01: #ffffff,\n          ),\n        );\n\n        $_: get('token-01', themes.get('token-01'));\n        $_: get('background', themes.get('background'));\n        $_: get('gray100.background', map.get($g100, 'background'));\n      `); // Should allow custom token to resolve and other tokens should resolve\n      // from the $fallback theme\n\n      expect(unwrap('token-01')).toBe('#ffffff');\n      expect(unwrap('background')).toBe(unwrap('gray100.background'));\n    }); // Set value fallback for CSS Custom Properties","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"$use-fallback-value","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":135,"column":29,"index":3772},"line":135,"code":"    test('$use-fallback-value', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use '../' as themes with (\n          $use-fallback-value: false,\n        );\n\n        $_: get('background', themes.$background);\n      `);\n      expect(unwrap('background')).toBe('var(--cds-background)');\n    }); // Set prefix for CSS Custom Properties","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"$property-prefix","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":148,"column":26,"index":4131},"line":148,"code":"    test('$property-prefix', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use '../' as themes with (\n          $prefix: 'test',\n        );\n\n        $_: get('background', themes.$background);\n      `);\n      expect(unwrap('background')).toEqual('var(--test-background, #ffffff)');\n    });","file":"module-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should export all themes as sass maps","suites":["_theme-maps.scss"],"updatePoint":{"line":21,"column":43,"index":460},"line":21,"code":"  it('should export all themes as sass maps', async () => {\n    const themeMapsTests = Object.keys(themes).map(theme => {\n      return `$t: test(global-variable-exists(carbon--theme--${theme}));`;\n    });\n    const {\n      calls\n    } = await render(`\n      @import '../scss/theme-maps';\n\n      ${themeMapsTests.join('\\n')}\n    `);\n\n    for (const call of calls) {\n      expect(call[0].getValue()).toBe(true);\n    }\n  });","file":"theme-maps-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"%s should match the default theme","suites":["themes.scss","tokens"],"line":57,"code":"    it.each(flatten(tokens))('%s should match the default theme', async token => {\n      const name = formatTokenName(token);\n      const {\n        calls\n      } = await render(`\n          @import '../scss/themes';\n          $t: test(global-variable-exists(${name}));\n          $t: test($${name});\n        `);\n      expect(convert(calls[0][0])).toBe(true); // Since some of our tokens are objects/maps (specifically type), we'll\n      // need to format the Sass value so that keys are changed from\n      // param-case to camelCase and that values are correctly mapped over for\n      // strings and numbers\n\n      expect(formatObjectKeys(convert(calls[1][0]))).toEqual(defaultTheme[token]);\n    });","file":"themes-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should export tokens that match the default theme","suites":["themes.scss","carbon--theme"],"updatePoint":{"line":75,"column":57,"index":1845},"line":75,"code":"    it('should export tokens that match the default theme', async () => {\n      const {\n        calls\n      } = await render(`\n        @import '../scss/themes';\n        $t: test($carbon--theme);\n      `);\n      const theme = convert(calls[0][0]);\n      Object.keys(defaultTheme).forEach(token => {\n        expect(defaultTheme[token]).toEqual(formatObjectKeys(theme[formatTokenName(token)]));\n      });\n    });","file":"themes-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should update based on global token definitions","suites":["themes.scss","carbon--theme"],"updatePoint":{"line":87,"column":55,"index":2253},"line":87,"code":"    it('should update based on global token definitions', async () => {\n      const color = '#000000';\n      const {\n        calls\n      } = await render(`\n        $interactive-01: ${color};\n\n        @import '../scss/themes';\n        $t: test($carbon--theme);\n      `);\n      const theme = convert(calls[0][0]);\n      expect(theme['interactive-01']).toEqual(color);\n    });","file":"themes-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should support emitting the difference between themes","suites":["themes.scss","carbon--theme"],"updatePoint":{"line":100,"column":61,"index":2633},"line":100,"code":"    it('should support emitting the difference between themes', async () => {\n      const {\n        result\n      } = await render(`\n        @import '../scss/themes';\n\n        $carbon--theme: map-merge($carbon--theme--white, (\n          interactive-01: #000000,\n        ));\n        $theme--light: map-merge($carbon--theme--white, (\n          interactive-01: #ffffff,\n        ));\n\n        .emit-all-values {\n          @include carbon--theme(\n            $emit-custom-properties: true,\n            $emit-difference: false,\n          );\n        }\n\n        .emit-changed-values {\n          @include carbon--theme(\n            $theme: $theme--light,\n            $emit-custom-properties: true,\n            $emit-difference: true,\n          );\n        }\n      `);\n      const style = document.createElement('style');\n      style.innerHTML = result.css.toString();\n      document.head.appendChild(style);\n      const allValues = document.styleSheets[0].cssRules[0].style;\n      const changedValues = document.styleSheets[0].cssRules[1].style;\n      expect(allValues.length).toBeGreaterThan(changedValues.length);\n      expect(changedValues.length).toBe(1);\n    });","file":"themes-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should export all tokens","suites":["_tokens.scss"],"updatePoint":{"line":22,"column":30,"index":462},"line":22,"code":"  it('should export all tokens', async () => {\n    const tokenVariableTests = tokens.colors.map(token => {\n      return `$t: test(global-variable-exists(${formatTokenName(token)}));`;\n    });\n    const {\n      calls\n    } = await render(`\n      @import '../scss/tokens';\n\n      ${tokenVariableTests.join('\\n')}\n    `);\n\n    for (const call of calls) {\n      expect(call[0].getValue()).toBe(true);\n    }\n  });","file":"tokens-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should emit the CSS properties and values for a type token","suites":["type.scss","styles"],"updatePoint":{"line":33,"column":66,"index":764},"line":33,"code":"    it('should emit the CSS properties and values for a type token', async () => {\n      const {\n        result\n      } = await render(`\n        @import '../scss/index';\n\n        .selector {\n          @include carbon--type-style('productive-heading-01');\n        }\n      `);\n      const stylesheet = renderIntoDocument(result.css.toString());\n      const {\n        style\n      } = stylesheet.cssRules[0];\n      expect(style.length).toBe(Object.keys(productiveHeading01).length);\n      Object.keys(productiveHeading01).forEach(key => {\n        const property = paramCase(key); // We stringify the value from JS due to the fact that most of these\n        // values (like numbers) are represented as strings when we get the\n        // value from the CSSStyleDeclaration\n\n        expect('' + productiveHeading01[key]).toBe(style.getPropertyValue(property));\n      });\n    });","file":"scss-test.js","skipped":false,"dir":"packages/type/__tests__"},{"name":"should emit CSS Custom Properties when the feature flag is set","suites":["type.scss","styles"],"updatePoint":{"line":56,"column":70,"index":1640},"line":56,"code":"    it('should emit CSS Custom Properties when the feature flag is set', async () => {\n      const {\n        result\n      } = await render(`\n        $feature-flags: (enable-css-custom-properties: true);\n        @import '../scss/index';\n\n        .selector {\n          @include carbon--type-style('productive-heading-01');\n        }\n      `);\n      const stylesheet = renderIntoDocument(result.css.toString());\n      const {\n        style\n      } = stylesheet.cssRules[0];\n\n      for (let i = 0; i < style.length; i++) {\n        const property = style[i];\n        const key = camelCase(property);\n        const value = style.getPropertyValue(property); // Make sure it's a custom property\n\n        expect(value).toEqual(expect.stringContaining('var(--')); // Make sure the fallback value is included\n\n        expect(value).toEqual(expect.stringContaining('' + productiveHeading01[key]));\n      }\n    });","file":"scss-test.js","skipped":false,"dir":"packages/type/__tests__"}]}