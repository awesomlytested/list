{
    "repo": "react-bootstrap/react-bootstrap",
    "url": "https://github.com/react-bootstrap/react-bootstrap",
    "branch": "master",
    "configs": [
        {
            "package": "react-bootstrap",
            "lang": "ts",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "Should have button as default component",
            "suites": [
                "<AccordionButton>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 45
            },
            "line": 6,
            "code": "  it('Should have button as default component', () => {\n    mount(<AccordionButton />).assertSingle('button[type=\"button\"]');\n  });",
            "file": "AccordionButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should allow rendering as different component",
            "suites": [
                "<AccordionButton>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 51
            },
            "line": 10,
            "code": "  it('Should allow rendering as different component', () => {\n    mount(<AccordionButton as=\"div\" />).assertSingle('div.accordion-button');\n  });",
            "file": "AccordionButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should just work if there is no onSelect or onClick handler",
            "suites": [
                "<AccordionButton>"
            ],
            "updatePoint": {
                "line": 15,
                "column": 65
            },
            "line": 15,
            "code": "  it('Should just work if there is no onSelect or onClick handler', () => {\n    const wrapper = mount(<AccordionButton />);\n    wrapper.simulate('click');\n  });",
            "file": "AccordionButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should output a div",
            "suites": [
                "<Accordion>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 25
            },
            "line": 10,
            "code": "  it('should output a div', () => {\n    mount(<Accordion />).assertSingle('div');\n  });",
            "file": "AccordionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render flush prop",
            "suites": [
                "<Accordion>"
            ],
            "updatePoint": {
                "line": 14,
                "column": 30
            },
            "line": 14,
            "code": "  it('should render flush prop', () => {\n    mount(<Accordion flush />).assertSingle('.accordion.accordion-flush');\n  });",
            "file": "AccordionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should output a h1",
            "suites": [
                "<Accordion>"
            ],
            "updatePoint": {
                "line": 18,
                "column": 24
            },
            "line": 18,
            "code": "  it('should output a h1', () => {\n    const wrapper = mount(\n      <Accordion>\n        <Accordion.Button>Hi</Accordion.Button>\n        <AccordionCollapse as=\"h1\" eventKey=\"0\">\n          <span>hidden Data</span>\n        </AccordionCollapse>\n      </Accordion>,\n    );\n\n    wrapper.find('AccordionCollapse').assertSingle('h1');\n  });",
            "file": "AccordionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should only have second item collapsed",
            "suites": [
                "<Accordion>"
            ],
            "updatePoint": {
                "line": 31,
                "column": 44
            },
            "line": 31,
            "code": "  it('should only have second item collapsed', () => {\n    const wrapper = mount(\n      <Accordion defaultActiveKey=\"0\">\n        <Accordion.Item eventKey=\"0\">\n          <Accordion.Header />\n          <Accordion.Body>body text</Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"1\">\n          <Accordion.Header />\n          <Accordion.Body>body text</Accordion.Body>\n        </Accordion.Item>\n      </Accordion>,\n    );\n    const collapses = wrapper.find('AccordionCollapse');\n\n    collapses.at(0).getDOMNode().className.should.include('show');\n    collapses.at(1).getDOMNode().className.should.include('collapse');\n  });",
            "file": "AccordionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should expand next item and collapse current item on click",
            "suites": [
                "<Accordion>"
            ],
            "updatePoint": {
                "line": 50,
                "column": 64
            },
            "line": 50,
            "code": "  it('should expand next item and collapse current item on click', () => {\n    const onClickSpy = sinon.spy();\n    const wrapper = mount(\n      <Accordion>\n        <Accordion.Item eventKey=\"0\">\n          <Accordion.Header onClick={onClickSpy} />\n          <Accordion.Body>body text</Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"1\">\n          <Accordion.Header onClick={onClickSpy} />\n          <Accordion.Body>body text</Accordion.Body>\n        </Accordion.Item>\n      </Accordion>,\n    );\n    wrapper.find('AccordionHeader').at(1).find('button').simulate('click');\n\n    onClickSpy.should.be.calledOnce;\n\n    const collapses = wrapper.find('AccordionCollapse');\n\n    collapses.at(0).getDOMNode().className.should.include('collapse');\n\n    // Enzyme doesn't really provide support for async utilities\n    // on components, but in an ideal setup we should be testing for\n    // this className to be `show` after the collapsing animation is done\n    // (which is possible in `@testing-library` via `waitForElement`).\n    // https://testing-library.com/docs/dom-testing-library/api-async#waitforelement\n    collapses.at(1).getDOMNode().className.should.include('collapsing');\n  });",
            "file": "AccordionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should collapse current item on click",
            "suites": [
                "<Accordion>"
            ],
            "updatePoint": {
                "line": 80,
                "column": 43
            },
            "line": 80,
            "code": "  it('should collapse current item on click', () => {\n    const onClickSpy = sinon.spy();\n    const wrapper = mount(\n      <Accordion defaultActiveKey=\"0\">\n        <Accordion.Item eventKey=\"0\">\n          <Accordion.Header onClick={onClickSpy} />\n          <Accordion.Body>body text</Accordion.Body>\n        </Accordion.Item>\n        <Accordion.Item eventKey=\"1\">\n          <Accordion.Header onClick={onClickSpy} />\n          <Accordion.Body>body text</Accordion.Body>\n        </Accordion.Item>\n      </Accordion>,\n    );\n    wrapper.find('AccordionHeader').at(0).find('button').simulate('click');\n\n    onClickSpy.should.be.calledOnce;\n\n    const collapses = wrapper.find('AccordionCollapse');\n\n    collapses.at(0).getDOMNode().className.should.include('collapse');\n    collapses.at(1).getDOMNode().className.should.include('collapse');\n\n    // Enzyme doesn't really provide support for async utilities\n    // on components, but in an ideal setup we should be testing for\n    // this className to be `show` after the collapsing animation is done\n    // (which is possible in `@testing-library` via `waitForElement`).\n    // https://testing-library.com/docs/dom-testing-library/api-async#waitforelement\n    collapses.at(0).getDOMNode().className.should.include('collapsing');\n  });",
            "file": "AccordionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not close accordion when child dropdown clicked",
            "suites": [
                "<Accordion>"
            ],
            "updatePoint": {
                "line": 112,
                "column": 60
            },
            "line": 112,
            "code": "  it('Should not close accordion when child dropdown clicked', () => {\n    const wrapper = mount(\n      <Accordion defaultActiveKey=\"0\">\n        <Accordion.Item eventKey=\"0\">\n          <Accordion.Header />\n          <Accordion.Body>\n            <Dropdown show>\n              <Dropdown.Toggle id=\"dropdown-test\">\n                Dropdown Button\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </Accordion.Body>\n        </Accordion.Item>\n      </Accordion>,\n    );\n\n    wrapper.find('a.dropdown-item').simulate('click');\n\n    wrapper\n      .find('AccordionCollapse')\n      .at(0)\n      .getDOMNode()\n      .className.should.include('show');\n  });",
            "file": "AccordionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not close accordion when child ListGroup clicked",
            "suites": [
                "<Accordion>"
            ],
            "updatePoint": {
                "line": 140,
                "column": 61
            },
            "line": 140,
            "code": "  it('Should not close accordion when child ListGroup clicked', () => {\n    const wrapper = mount(\n      <Accordion defaultActiveKey=\"0\">\n        <Accordion.Item eventKey=\"0\">\n          <Accordion.Header />\n          <Accordion.Body>\n            <ListGroup defaultActiveKey=\"#link1\">\n              <ListGroup.Item action href=\"#link1\">\n                Link 1\n              </ListGroup.Item>\n            </ListGroup>\n          </Accordion.Body>\n        </Accordion.Item>\n      </Accordion>,\n    );\n\n    wrapper.find('ListGroupItem').simulate('click');\n\n    wrapper\n      .find('AccordionCollapse')\n      .at(0)\n      .getDOMNode()\n      .className.should.include('show');\n  });",
            "file": "AccordionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not close accordion when child Nav clicked",
            "suites": [
                "<Accordion>"
            ],
            "updatePoint": {
                "line": 165,
                "column": 55
            },
            "line": 165,
            "code": "  it('Should not close accordion when child Nav clicked', () => {\n    const wrapper = mount(\n      <Accordion defaultActiveKey=\"0\">\n        <Accordion.Item eventKey=\"0\">\n          <Accordion.Header />\n          <Accordion.Body>\n            <Nav activeKey=\"/home\">\n              <Nav.Item>\n                <Nav.Link href=\"#\">Active</Nav.Link>\n              </Nav.Item>\n            </Nav>\n          </Accordion.Body>\n        </Accordion.Item>\n      </Accordion>,\n    );\n\n    wrapper.find('NavLink').simulate('click');\n\n    wrapper\n      .find('AccordionCollapse')\n      .at(0)\n      .getDOMNode()\n      .className.should.include('show');\n  });",
            "file": "AccordionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should output a alert with message",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 7,
                "column": 40
            },
            "line": 7,
            "code": "  it('Should output a alert with message', () => {\n    mount(\n      <Alert>\n        <strong>Message</strong>\n      </Alert>,\n    ).assertSingle('.alert > strong');\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have dismissible style",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 15,
                "column": 35
            },
            "line": 15,
            "code": "  it('Should have dismissible style', () => {\n    mount(<Alert dismissible>Message</Alert>).assertSingle(\n      '.alert-dismissible',\n    );\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should call onClose callback on dismiss click",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 21,
                "column": 51
            },
            "line": 21,
            "code": "  it('Should call onClose callback on dismiss click', (done) => {\n    let doneOp = () => {\n      done();\n    };\n    mount(\n      <Alert dismissible onClose={doneOp}>\n        Message\n      </Alert>,\n    )\n      .find('CloseButton')\n      .simulate('click');\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should default to variant=\"primary\"",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 34,
                "column": 41
            },
            "line": 34,
            "code": "  it('Should default to variant=\"primary\"', () => {\n    mount(<Alert>Message</Alert>).assertSingle(`.alert-primary`);\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should use variant class",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 38,
                "column": 30
            },
            "line": 38,
            "code": "  it('Should use variant class', () => {\n    mount(<Alert variant=\"danger\">Message</Alert>).assertSingle(\n      '.alert-danger',\n    );\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not have variant class when variant=null",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 44,
                "column": 53
            },
            "line": 44,
            "code": "  it('Should not have variant class when variant=null', () => {\n    const wrapper = mount(<Alert variant={null}>Message</Alert>);\n    expect(wrapper.find('.alert-primary').length).to.equal(0);\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should forward refs to the alert",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 49,
                "column": 38
            },
            "line": 49,
            "code": "  it('should forward refs to the alert', () => {\n    const ref = React.createRef();\n    mount(<Alert ref={ref}>Yo</Alert>);\n    ref.current.tagName.should.equal('DIV');\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not have fade class when transition=false",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 55,
                "column": 54
            },
            "line": 55,
            "code": "  it('should not have fade class when transition=false', () => {\n    const wrapper = mount(<Alert transition={false}>Message</Alert>);\n    expect(wrapper.find('.fade').length).to.equal(0);\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should spread props to alert when transition=false",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 60,
                "column": 56
            },
            "line": 60,
            "code": "  it('should spread props to alert when transition=false', () => {\n    const alertId = 'alert-id';\n    const wrapper = mount(\n      <Alert transition={false} id={alertId}>\n        Message\n      </Alert>,\n    );\n    expect(wrapper.getDOMNode().getAttribute('id')).to.equal(alertId);\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should spread props to alert when transition=true",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 70,
                "column": 55
            },
            "line": 70,
            "code": "  it('should spread props to alert when transition=true', () => {\n    const alertId = 'alert-id';\n    const wrapper = mount(\n      <Alert transition id={alertId}>\n        Message\n      </Alert>,\n    );\n    expect(wrapper.getDOMNode().getAttribute('id')).to.equal(alertId);\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use Fade when transition=true",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 80,
                "column": 42
            },
            "line": 80,
            "code": "  it('should use Fade when transition=true', () => {\n    mount(\n      <Alert variant=\"danger\" transition>\n        Message\n      </Alert>,\n    ).assertSingle('.fade');\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render null when transition and show are false",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 88,
                "column": 59
            },
            "line": 88,
            "code": "  it('should render null when transition and show are false', () => {\n    const wrapper = mount(\n      <Alert transition={false} show={false}>\n        Message\n      </Alert>,\n    );\n    expect(wrapper.isEmptyRender()).to.be.true;\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render close button variant",
            "suites": [
                "<Alert>"
            ],
            "updatePoint": {
                "line": 97,
                "column": 40
            },
            "line": 97,
            "code": "  it('should render close button variant', () => {\n    const wrapper = mount(\n      <Alert dismissible closeVariant=\"white\">\n        Message\n      </Alert>,\n    );\n    expect(wrapper.find('CloseButton').props()).to.have.property(\n      'variant',\n      'white',\n    );\n  });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have alert role",
            "suites": [
                "<Alert>",
                "Web Accessibility"
            ],
            "updatePoint": {
                "line": 110,
                "column": 30
            },
            "line": 110,
            "code": "    it('Should have alert role', () => {\n      mount(<Alert>Message</Alert>).assertSingle('[role=\"alert\"]');\n    });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have alert-heading",
            "suites": [
                "<Alert>",
                "Alert alert-heading"
            ],
            "updatePoint": {
                "line": 116,
                "column": 33
            },
            "line": 116,
            "code": "    it('Should have alert-heading', () => {\n      mount(\n        <Alert>\n          <Alert.Heading>Well done</Alert.Heading>\n          Message\n        </Alert>,\n      ).assertSingle('div.alert-heading');\n    });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have div styled as an h4 by default",
            "suites": [
                "<Alert>",
                "Alert alert-heading"
            ],
            "updatePoint": {
                "line": 125,
                "column": 50
            },
            "line": 125,
            "code": "    it('Should have div styled as an h4 by default', () => {\n      mount(\n        <Alert>\n          <Alert.Heading>Well done</Alert.Heading>\n          Message\n        </Alert>,\n      ).assertSingle('.h4');\n    });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should support Heading as as prop",
            "suites": [
                "<Alert>",
                "Alert alert-heading"
            ],
            "updatePoint": {
                "line": 134,
                "column": 41
            },
            "line": 134,
            "code": "    it('Should support Heading as as prop', () => {\n      mount(\n        <Alert>\n          <Alert.Heading as=\"h1\">Well done</Alert.Heading>\n          Message\n        </Alert>,\n      ).assertSingle('h1');\n    });",
            "file": "AlertSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render correctly",
            "suites": [
                "Badge"
            ],
            "updatePoint": {
                "line": 6,
                "column": 29
            },
            "line": 6,
            "code": "  it('Should render correctly', () => {\n    expect(\n      mount(\n        <Badge bg=\"primary\" pill>\n          Message\n        </Badge>,\n      )\n        .assertSingle('span.badge.bg-primary.rounded-pill')\n        .text(),\n    ).to.equal('Message');\n  });",
            "file": "BadgeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support custom `as`",
            "suites": [
                "Badge"
            ],
            "updatePoint": {
                "line": 18,
                "column": 32
            },
            "line": 18,
            "code": "  it('should support custom `as`', () => {\n    mount(\n      <Badge as=\"a\" href=\"#\" bg=\"primary\" pill>\n        Message\n      </Badge>,\n    ).assertSingle('a[href=\"#\"]');\n  });",
            "file": "BadgeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should default to bg=\"primary\"",
            "suites": [
                "Badge"
            ],
            "updatePoint": {
                "line": 26,
                "column": 36
            },
            "line": 26,
            "code": "  it('Should default to bg=\"primary\"', () => {\n    mount(<Badge>Message</Badge>).assertSingle(`.bg-primary`);\n  });",
            "file": "BadgeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should use bg class",
            "suites": [
                "Badge"
            ],
            "updatePoint": {
                "line": 30,
                "column": 25
            },
            "line": 30,
            "code": "  it('Should use bg class', () => {\n    mount(<Badge bg=\"danger\">Message</Badge>).assertSingle('.bg-danger');\n  });",
            "file": "BadgeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not have bg class when bg=null",
            "suites": [
                "Badge"
            ],
            "updatePoint": {
                "line": 34,
                "column": 43
            },
            "line": 34,
            "code": "  it('Should not have bg class when bg=null', () => {\n    const wrapper = mount(<Badge bg={null}>Message</Badge>);\n    expect(wrapper.find('.bg-primary').length).to.equal(0);\n  });",
            "file": "BadgeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add Modal",
            "suites": [
                "BootstrapModalManager"
            ],
            "updatePoint": {
                "line": 39,
                "column": 22
            },
            "line": 39,
            "code": "  it('should add Modal', () => {\n    const modal = createModal();\n\n    manager.add(modal);\n\n    expect(manager.modals.length).to.equal(1);\n    expect(manager.modals[0]).to.equal(modal);\n\n    expect(manager.state).to.eql({\n      scrollBarWidth: 0,\n      style: {\n        overflow: '',\n        paddingRight: '',\n      },\n    });\n  });",
            "file": "BootstrapModalManagerSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return a shared modal manager",
            "suites": [
                "BootstrapModalManager"
            ],
            "updatePoint": {
                "line": 56,
                "column": 42
            },
            "line": 56,
            "code": "  it('should return a shared modal manager', () => {\n    const localManager = getSharedManager();\n    localManager.should.exist;\n  });",
            "file": "BootstrapModalManagerSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return a same modal manager if called twice",
            "suites": [
                "BootstrapModalManager"
            ],
            "updatePoint": {
                "line": 61,
                "column": 56
            },
            "line": 61,
            "code": "  it('should return a same modal manager if called twice', () => {\n    let localManager = getSharedManager();\n    localManager.should.exist;\n\n    const modal = createModal();\n    localManager.add(modal as any);\n    localManager.modals.length.should.equal(1);\n\n    localManager = getSharedManager();\n    localManager.modals.length.should.equal(1);\n\n    localManager.remove(modal as any);\n  });",
            "file": "BootstrapModalManagerSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set padding to right side",
            "suites": [
                "BootstrapModalManager",
                "container styles"
            ],
            "updatePoint": {
                "line": 92,
                "column": 40
            },
            "line": 92,
            "code": "    it('should set padding to right side', () => {\n      const modal = createModal();\n      manager.add(modal);\n\n      expect(document.body.style.paddingRight).to.equal(\n        `${getScrollbarSize() + 20}px`,\n      );\n    });",
            "file": "BootstrapModalManagerSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set padding to left side if RTL",
            "suites": [
                "BootstrapModalManager",
                "container styles"
            ],
            "updatePoint": {
                "line": 101,
                "column": 46
            },
            "line": 101,
            "code": "    it('should set padding to left side if RTL', () => {\n      const modal = createModal();\n\n      new BootstrapModalManager({ isRTL: true }).add(modal as any);\n\n      expect(document.body.style.paddingLeft).to.equal(\n        `${getScrollbarSize() + 20}px`,\n      );\n    });",
            "file": "BootstrapModalManagerSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should restore container overflow style",
            "suites": [
                "BootstrapModalManager",
                "container styles"
            ],
            "updatePoint": {
                "line": 111,
                "column": 47
            },
            "line": 111,
            "code": "    it('should restore container overflow style', () => {\n      const modal = createModal();\n\n      document.body.style.overflow = 'scroll';\n\n      expect(document.body.style.overflow).to.equal('scroll');\n\n      manager.add(modal);\n      manager.remove(modal);\n\n      expect(document.body.style.overflow).to.equal('scroll');\n      document.body.style.overflow = '';\n    });",
            "file": "BootstrapModalManagerSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should restore container overflow style for RTL",
            "suites": [
                "BootstrapModalManager",
                "container styles"
            ],
            "updatePoint": {
                "line": 125,
                "column": 55
            },
            "line": 125,
            "code": "    it('should restore container overflow style for RTL', () => {\n      const modal = createModal();\n\n      document.body.style.overflow = 'scroll';\n\n      expect(document.body.style.overflow).to.equal('scroll');\n\n      const localManager = new BootstrapModalManager({ isRTL: true });\n      localManager.add(modal as any);\n      localManager.remove(modal as any);\n\n      expect(document.body.style.overflow).to.equal('scroll');\n      document.body.style.overflow = '';\n    });",
            "file": "BootstrapModalManagerSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render `a` as inner element when is not active",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 8,
                "column": 59
            },
            "line": 8,
            "code": "  it('Should render `a` as inner element when is not active', () => {\n    mount(<Breadcrumb.Item href=\"#\">Crumb</Breadcrumb.Item>)\n      .find('a.active')\n      .should.have.length(0);\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render `li` with no children as inner element when active.",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 14,
                "column": 71
            },
            "line": 14,
            "code": "  it('Should render `li` with no children as inner element when active.', () => {\n    let li = mount(<Breadcrumb.Item active>Active Crumb</Breadcrumb.Item>).find(\n      'li',\n    );\n    li.should.have.length(1);\n    li.children().html().should.eql('Active Crumb');\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render `li` with no children as inner element when active and has href",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 22,
                "column": 83
            },
            "line": 22,
            "code": "  it('Should render `li` with no children as inner element when active and has href', () => {\n    let li = mount(\n      <Breadcrumb.Item href=\"#\" active>\n        Active Crumb\n      </Breadcrumb.Item>,\n    ).find('li');\n    li.should.have.length(1);\n    li.children().html().should.eql('Active Crumb');\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should add custom classes onto `li` wrapper element",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 32,
                "column": 57
            },
            "line": 32,
            "code": "  it('Should add custom classes onto `li` wrapper element', () => {\n    mount(\n      <Breadcrumb.Item className=\"custom-one custom-two\">a</Breadcrumb.Item>,\n    )\n      .find('li.custom-one.custom-two')\n      .should.have.length(1);\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should add aria-current to active element",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 40,
                "column": 47
            },
            "line": 40,
            "code": "  it('Should add aria-current to active element', () => {\n    mount(<Breadcrumb.Item active>Active Crumb</Breadcrumb.Item>)\n      .find('li.active[aria-current=\"page\"]')\n      .should.have.length(1);\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should spread additional props onto inner element",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 46,
                "column": 55
            },
            "line": 46,
            "code": "  it('Should spread additional props onto inner element', () => {\n    const handleClick = sinon.spy();\n\n    const instance = mount(\n      <Breadcrumb.Item href=\"#\" onClick={handleClick}>\n        Crumb\n      </Breadcrumb.Item>,\n    );\n\n    instance.find('a').simulate('click');\n\n    expect(handleClick.callCount).to.equal(1);\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should apply id onto the li element",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 60,
                "column": 41
            },
            "line": 60,
            "code": "  it('Should apply id onto the li element', () => {\n    mount(\n      <Breadcrumb.Item href=\"#\" id=\"test-link-id\">\n        Crumb\n      </Breadcrumb.Item>,\n    )\n      .find('li#test-link-id')\n      .should.have.length(1);\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should apply `href` property onto `a` inner element",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 70,
                "column": 57
            },
            "line": 70,
            "code": "  it('Should apply `href` property onto `a` inner element', () => {\n    const instance = mount(\n      <Breadcrumb.Item href=\"http://getbootstrap.com/components/#breadcrumbs\">\n        Crumb\n      </Breadcrumb.Item>,\n    );\n\n    instance\n      .find('a')\n      .prop('href')\n      .should.eq('http://getbootstrap.com/components/#breadcrumbs');\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should apply `title` property onto `a` inner element",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 83,
                "column": 58
            },
            "line": 83,
            "code": "  it('Should apply `title` property onto `a` inner element', () => {\n    const instance = mount(\n      <Breadcrumb.Item\n        title=\"test-title\"\n        href=\"http://getbootstrap.com/components/#breadcrumbs\"\n      >\n        Crumb\n      </Breadcrumb.Item>,\n    );\n\n    instance.find('a').prop('title').should.eq('test-title');\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not apply properties for inner `anchor` onto `li` wrapper element",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 96,
                "column": 78
            },
            "line": 96,
            "code": "  it('Should not apply properties for inner `anchor` onto `li` wrapper element', () => {\n    const instance = mount(\n      <Breadcrumb.Item title=\"test-title\" href=\"/hi\">\n        Crumb\n      </Breadcrumb.Item>,\n    );\n    expect(instance.find('li[href=\"/hi\"]').exists()).to.equal(false);\n    expect(instance.find('li[title=\"test-title\"]').exists()).to.equal(false);\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should set `target` attribute on `anchor`",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 106,
                "column": 47
            },
            "line": 106,
            "code": "  it('Should set `target` attribute on `anchor`', () => {\n    const instance = mount(\n      <Breadcrumb.Item\n        target=\"_blank\"\n        href=\"http://getbootstrap.com/components/#breadcrumbs\"\n      >\n        Crumb\n      </Breadcrumb.Item>,\n    );\n    instance.find('a').prop('target').should.eq('_blank');\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have li as default component",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 118,
                "column": 41
            },
            "line": 118,
            "code": "  it('Should have li as default component', () => {\n    mount(<Breadcrumb.Item />).assertSingle('li');\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should be able to customize inner link element",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 122,
                "column": 52
            },
            "line": 122,
            "code": "  it('Should be able to customize inner link element', () => {\n    const instance = mount(<Breadcrumb.Item linkAs={Button} />);\n    instance.find('a').should.have.length(0);\n    instance.find('button').should.have.length(1);\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should be able to pass props to the customized inner link element",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 128,
                "column": 71
            },
            "line": 128,
            "code": "  it('Should be able to pass props to the customized inner link element', () => {\n    const instance = mount(\n      <Breadcrumb.Item linkAs={Button} linkProps={{ type: 'submit' }} />,\n    );\n    instance.find('button').prop('type').should.eq('submit');\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should be able to pass attributes to the link element",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 135,
                "column": 59
            },
            "line": 135,
            "code": "  it('Should be able to pass attributes to the link element', () => {\n    const instance = mount(\n      <Breadcrumb.Item linkProps={{ foo: 'bar' }}>Crumb</Breadcrumb.Item>,\n    );\n    instance.find('a').prop('foo').should.eq('bar');\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should be able to pass attributes to the li element",
            "suites": [
                "<Breadcrumb.Item>"
            ],
            "updatePoint": {
                "line": 142,
                "column": 57
            },
            "line": 142,
            "code": "  it('Should be able to pass attributes to the li element', () => {\n    const instance = mount(<Breadcrumb.Item foo=\"bar\">Crumb</Breadcrumb.Item>);\n    instance.find('li').prop('foo').should.eq('bar');\n  });",
            "file": "BreadcrumbItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should apply id to the wrapper ol element",
            "suites": [
                "<Breadcrumb>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 47
            },
            "line": 6,
            "code": "  it('Should apply id to the wrapper ol element', () => {\n    mount(<Breadcrumb id=\"custom-id\" />)\n      .find('nav#custom-id')\n      .should.have.length(1);\n  });",
            "file": "BreadcrumbSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have breadcrumb class inside ol",
            "suites": [
                "<Breadcrumb>"
            ],
            "updatePoint": {
                "line": 12,
                "column": 44
            },
            "line": 12,
            "code": "  it('Should have breadcrumb class inside ol', () => {\n    mount(<Breadcrumb />)\n      .find('ol.breadcrumb')\n      .should.have.length(1);\n  });",
            "file": "BreadcrumbSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have custom classes",
            "suites": [
                "<Breadcrumb>"
            ],
            "updatePoint": {
                "line": 18,
                "column": 32
            },
            "line": 18,
            "code": "  it('Should have custom classes', () => {\n    mount(<Breadcrumb className=\"custom-one custom-two\" />)\n      .find('nav.custom-one.custom-two')\n      .should.have.length(1);\n  });",
            "file": "BreadcrumbSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not have a navigation role",
            "suites": [
                "<Breadcrumb>"
            ],
            "updatePoint": {
                "line": 24,
                "column": 39
            },
            "line": 24,
            "code": "  it('Should not have a navigation role', () => {\n    mount(<Breadcrumb className=\"custom-one custom-two\" />)\n      .find('ol[role=\"navigation\"]')\n      .should.have.length(0);\n  });",
            "file": "BreadcrumbSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have an aria-label in ol",
            "suites": [
                "<Breadcrumb>"
            ],
            "updatePoint": {
                "line": 30,
                "column": 37
            },
            "line": 30,
            "code": "  it('Should have an aria-label in ol', () => {\n    mount(<Breadcrumb className=\"custom-one custom-two\" />)\n      .find('nav[aria-label=\"breadcrumb\"]')\n      .should.have.length(1);\n  });",
            "file": "BreadcrumbSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have nav as default component",
            "suites": [
                "<Breadcrumb>"
            ],
            "updatePoint": {
                "line": 36,
                "column": 42
            },
            "line": 36,
            "code": "  it('Should have nav as default component', () => {\n    mount(<Breadcrumb />).assertSingle('nav');\n  });",
            "file": "BreadcrumbSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should output a button group",
            "suites": [
                "ButtonGroup"
            ],
            "updatePoint": {
                "line": 6,
                "column": 34
            },
            "line": 6,
            "code": "  it('Should output a button group', () => {\n    mount(\n      <ButtonGroup>\n        <Button>Title</Button>\n      </ButtonGroup>,\n    ).assertSingle('div.btn-group');\n  });",
            "file": "ButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should add size",
            "suites": [
                "ButtonGroup"
            ],
            "updatePoint": {
                "line": 14,
                "column": 21
            },
            "line": 14,
            "code": "  it('Should add size', () => {\n    mount(\n      <ButtonGroup size=\"lg\">\n        <Button>Title</Button>\n      </ButtonGroup>,\n    ).assertSingle('.btn-group-lg');\n  });",
            "file": "ButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should add vertical variation",
            "suites": [
                "ButtonGroup"
            ],
            "updatePoint": {
                "line": 22,
                "column": 35
            },
            "line": 22,
            "code": "  it('Should add vertical variation', () => {\n    mount(\n      <ButtonGroup vertical>\n        <Button>Title</Button>\n      </ButtonGroup>,\n    )\n      .tap((b) => b.assertSingle('.btn-group-vertical'))\n      .assertNone('.btn-group');\n  });",
            "file": "ButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have div as default component",
            "suites": [
                "ButtonGroup"
            ],
            "updatePoint": {
                "line": 32,
                "column": 42
            },
            "line": 32,
            "code": "  it('Should have div as default component', () => {\n    mount(<ButtonGroup />).assertSingle('div');\n  });",
            "file": "ButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should output a button",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 7,
                "column": 28
            },
            "line": 7,
            "code": "  it('Should output a button', () => {\n    mount(<Button>Title</Button>)\n      .find('button')\n      .should.have.length(1);\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have type=button by default",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 13,
                "column": 40
            },
            "line": 13,
            "code": "  it('Should have type=button by default', () => {\n    mount(<Button>Title</Button>)\n      .find('button')\n      .getDOMNode()\n      .getAttribute('type')\n      .should.equal('button');\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should show the type if passed one",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 21,
                "column": 40
            },
            "line": 21,
            "code": "  it('Should show the type if passed one', () => {\n    mount(<Button type=\"submit\">Title</Button>)\n      .find('button')\n      .getDOMNode()\n      .getAttribute('type')\n      .should.equal('submit');\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should show the type if explicitly passed in when \"as\" is used",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 29,
                "column": 68
            },
            "line": 29,
            "code": "  it('Should show the type if explicitly passed in when \"as\" is used', () => {\n    mount(\n      <Button as=\"div\" type=\"submit\">\n        Title\n      </Button>,\n    )\n      .getDOMNode()\n      .getAttribute('type')\n      .should.equal('submit');\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not have default type=button when \"as\" is used",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 40,
                "column": 59
            },
            "line": 40,
            "code": "  it('Should not have default type=button when \"as\" is used', () => {\n    const wrapper = mount(<Button as=\"div\">Title</Button>);\n\n    expect(wrapper.getDOMNode().getAttribute('type')).to.be.null;\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should forward refs to the button",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 46,
                "column": 39
            },
            "line": 46,
            "code": "  it('should forward refs to the button', () => {\n    const ref = React.createRef();\n    mount(\n      <div>\n        <Button ref={ref}>Yo</Button>\n      </div>,\n    );\n\n    ref.current.tagName.should.equal('BUTTON');\n\n    mount(\n      <div>\n        <Button ref={ref} href=\"a\">\n          Yo\n        </Button>\n      </div>,\n    );\n\n    ref.current.tagName.should.equal('A');\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should output an anchor if called with a href",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 67,
                "column": 51
            },
            "line": 67,
            "code": "  it('Should output an anchor if called with a href', () => {\n    let href = '/url';\n\n    mount(<Button href={href}>Title</Button>).assertSingle(`a[href=\"${href}\"]`);\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should call onClick callback",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 73,
                "column": 34
            },
            "line": 73,
            "code": "  it('Should call onClick callback', (done) => {\n    mount(<Button onClick={() => done()}>Title</Button>).simulate('click');\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should be disabled",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 77,
                "column": 24
            },
            "line": 77,
            "code": "  it('Should be disabled', () => {\n    mount(<Button disabled>Title</Button>).assertSingle(`button[disabled]`);\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should be disabled link",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 81,
                "column": 29
            },
            "line": 81,
            "code": "  it('Should be disabled link', () => {\n    mount(\n      <Button disabled href=\"#\">\n        Title\n      </Button>,\n    ).assertSingle(`a.disabled`);\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should apply variant class",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 89,
                "column": 32
            },
            "line": 89,
            "code": "  it('Should apply variant class', () => {\n    mount(<Button variant=\"danger\">Title</Button>).assertSingle(\n      `button.btn-danger`,\n    );\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have size class",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 95,
                "column": 28
            },
            "line": 95,
            "code": "  it('Should have size class', () => {\n    mount(<Button size=\"lg\">Title</Button>).assertSingle(`button.btn-lg`);\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should honour additional classes passed in, adding not overriding",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 99,
                "column": 71
            },
            "line": 99,
            "code": "  it('Should honour additional classes passed in, adding not overriding', () => {\n    mount(\n      <Button className=\"bob\" variant=\"danger\">\n        Title\n      </Button>,\n    ).assertSingle(`button.bob.btn-danger`);\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should default to variant=\"primary\"",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 107,
                "column": 41
            },
            "line": 107,
            "code": "  it('Should default to variant=\"primary\"', () => {\n    mount(<Button>Title</Button>).assertSingle(`button.btn-primary`);\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should remove default variant",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 111,
                "column": 35
            },
            "line": 111,
            "code": "  it('Should remove default variant', () => {\n    mount(<Button variant={null}>Title</Button>)\n      .find(`.btn-primary`)\n      .should.have.length(0);\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not output null variant",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 117,
                "column": 36
            },
            "line": 117,
            "code": "  it('Should not output null variant', () => {\n    mount(<Button variant=\"\">Title</Button>)\n      .find(`.btn-null`)\n      .should.have.length(0);\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not output empty variant",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 123,
                "column": 37
            },
            "line": 123,
            "code": "  it('Should not output empty variant', () => {\n    mount(<Button variant=\"\">Title</Button>)\n      .find(`.btn-`)\n      .should.have.length(0);\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should be active",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 129,
                "column": 22
            },
            "line": 129,
            "code": "  it('Should be active', () => {\n    mount(<Button active>Title</Button>).assertSingle(`button.active`);\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should allow a custom prefix",
            "suites": [
                "<Button>"
            ],
            "updatePoint": {
                "line": 133,
                "column": 34
            },
            "line": 133,
            "code": "  it('Should allow a custom prefix', () => {\n    mount(\n      <Button bsPrefix=\"my-btn\" variant=\"danger\">\n        Title\n      </Button>,\n    ).assertSingle(`button.my-btn.my-btn-danger`);\n  });",
            "file": "ButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should output a button toolbar",
            "suites": [
                "ButtonToolbar"
            ],
            "updatePoint": {
                "line": 7,
                "column": 36
            },
            "line": 7,
            "code": "  it('Should output a button toolbar', () => {\n    mount(\n      <ButtonToolbar>\n        <Button>Title</Button>\n      </ButtonToolbar>,\n    ).assertSingle('div.btn-toolbar[role=\"toolbar\"]');\n  });",
            "file": "ButtonToolbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should output an img",
            "suites": [
                "<CardImg>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 26
            },
            "line": 6,
            "code": "  it('should output an img', () => {\n    mount(<CardImg src=\"#\" />).assertSingle('img');\n  });",
            "file": "CardImgSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass down src to img",
            "suites": [
                "<CardImg>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 33
            },
            "line": 10,
            "code": "  it('should pass down src to img', () => {\n    const img = mount(<CardImg src=\"http://fakeurl.com/pic.jpg\" />).find('img');\n    expect(img.prop('src')).to.equal('http://fakeurl.com/pic.jpg');\n  });",
            "file": "CardImgSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts as prop",
            "suites": [
                "<CardImg>"
            ],
            "updatePoint": {
                "line": 15,
                "column": 21
            },
            "line": 15,
            "code": "  it('accepts as prop', () => {\n    mount(<CardImg as=\"figure\">img</CardImg>).assertSingle('figure.card-img');\n  });",
            "file": "CardImgSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "null",
            "suites": [
                "<CardImg>",
                "variants"
            ],
            "updatePoint": {
                "line": 20,
                "column": 12
            },
            "line": 20,
            "code": "    it('null', () => {\n      mount(<CardImg />).assertSingle('.card-img');\n    });",
            "file": "CardImgSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "top",
            "suites": [
                "<CardImg>",
                "variants"
            ],
            "updatePoint": {
                "line": 24,
                "column": 11
            },
            "line": 24,
            "code": "    it('top', () => {\n      mount(<CardImg variant=\"top\" />).assertSingle('.card-img-top');\n    });",
            "file": "CardImgSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "bottom",
            "suites": [
                "<CardImg>",
                "variants"
            ],
            "updatePoint": {
                "line": 28,
                "column": 14
            },
            "line": 28,
            "code": "    it('bottom', () => {\n      mount(<CardImg variant=\"bottom\" />).assertSingle('.card-img-bottom');\n    });",
            "file": "CardImgSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have img as default component",
            "suites": [
                "<CardImg>",
                "variants"
            ],
            "updatePoint": {
                "line": 32,
                "column": 44
            },
            "line": 32,
            "code": "    it('Should have img as default component', () => {\n      mount(<CardImg />).assertSingle('img');\n    });",
            "file": "CardImgSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should output a div",
            "suites": [
                "<Card>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 25
            },
            "line": 6,
            "code": "  it('should output a div', () => {\n    mount(<Card>Card</Card>).assertSingle('div');\n  });",
            "file": "CardSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have additional classes",
            "suites": [
                "<Card>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 36
            },
            "line": 10,
            "code": "  it('should have additional classes', () => {\n    mount(<Card className=\"custom-class\">Card</Card>).assertSingle(\n      '.card.custom-class',\n    );\n  });",
            "file": "CardSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts a bg prop",
            "suites": [
                "<Card>"
            ],
            "updatePoint": {
                "line": 16,
                "column": 23
            },
            "line": 16,
            "code": "  it('accepts a bg prop', () => {\n    mount(<Card bg=\"primary\">Card</Card>).assertSingle('.card.bg-primary');\n  });",
            "file": "CardSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts a text prop",
            "suites": [
                "<Card>"
            ],
            "updatePoint": {
                "line": 20,
                "column": 25
            },
            "line": 20,
            "code": "  it('accepts a text prop', () => {\n    mount(<Card text=\"success\">Card</Card>).assertSingle('.card.text-success');\n  });",
            "file": "CardSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts a border prop",
            "suites": [
                "<Card>"
            ],
            "updatePoint": {
                "line": 24,
                "column": 27
            },
            "line": 24,
            "code": "  it('accepts a border prop', () => {\n    mount(<Card border=\"danger\">Card</Card>).assertSingle(\n      '.card.border-danger',\n    );\n  });",
            "file": "CardSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render children",
            "suites": [
                "<Card>"
            ],
            "updatePoint": {
                "line": 30,
                "column": 28
            },
            "line": 30,
            "code": "  it('should render children', () => {\n    mount(\n      <Card>\n        <p>hello</p>\n      </Card>,\n    ).assertSingle('p');\n  });",
            "file": "CardSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts as prop",
            "suites": [
                "<Card>"
            ],
            "updatePoint": {
                "line": 38,
                "column": 21
            },
            "line": 38,
            "code": "  it('accepts as prop', () => {\n    mount(<Card as=\"section\">body</Card>).assertSingle('section');\n  });",
            "file": "CardSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "allows for the body shorthand",
            "suites": [
                "<Card>"
            ],
            "updatePoint": {
                "line": 42,
                "column": 35
            },
            "line": 42,
            "code": "  it('allows for the body shorthand', () => {\n    mount(<Card body>test</Card>).assertSingle('.card-body');\n  });",
            "file": "CardSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have div as default component",
            "suites": [
                "<Card>"
            ],
            "updatePoint": {
                "line": 46,
                "column": 42
            },
            "line": 46,
            "code": "  it('Should have div as default component', () => {\n    const wrapper = mount(<Card />);\n    expect(wrapper.find('div').length).to.equal(1);\n  });",
            "file": "CardSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses \"div\" by default",
            "suites": [
                "<Carousel.Caption>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 27
            },
            "line": 6,
            "code": "  it('uses \"div\" by default', () => {\n    mount(\n      <Carousel.Caption className=\"custom-class\">\n        <strong>Children</strong>\n      </Carousel.Caption>,\n    ).assertSingle('div.carousel-caption.custom-class strong');\n  });",
            "file": "CarouselCaptionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow custom elements instead of \"div\"",
            "suites": [
                "<Carousel.Caption>"
            ],
            "updatePoint": {
                "line": 14,
                "column": 51
            },
            "line": 14,
            "code": "  it('should allow custom elements instead of \"div\"', () => {\n    mount(<Carousel.Caption as=\"section\" />).assertSingle(\n      'section.carousel-caption',\n    );\n  });",
            "file": "CarouselCaptionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not throw an error with StrictMode",
            "suites": [
                "<Carousel>"
            ],
            "updatePoint": {
                "line": 14,
                "column": 47
            },
            "line": 14,
            "code": "  it('should not throw an error with StrictMode', () => {\n    const ref = React.createRef();\n\n    mount(\n      <React.StrictMode>\n        <Carousel ref={ref} interval={null}>\n          {items}\n        </Carousel>\n      </React.StrictMode>,\n    );\n\n    ref.current.next();\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show the first item by default and render all",
            "suites": [
                "<Carousel>"
            ],
            "updatePoint": {
                "line": 28,
                "column": 58
            },
            "line": 28,
            "code": "  it('should show the first item by default and render all', () => {\n    const wrapper = mount(<Carousel>{items}</Carousel>);\n\n    const carouselItems = wrapper.find('CarouselItem');\n\n    expect(carouselItems.at(0).is('.active')).to.be.true;\n    expect(carouselItems.at(1).is('.active')).to.be.false;\n    expect(wrapper.find('.carousel-indicators > button')).to.have.lengthOf(\n      items.length,\n    );\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show the correct item with defaultActiveIndex",
            "suites": [
                "<Carousel>"
            ],
            "updatePoint": {
                "line": 40,
                "column": 58
            },
            "line": 40,
            "code": "  it('should show the correct item with defaultActiveIndex', () => {\n    const wrapper = mount(<Carousel defaultActiveIndex={1}>{items}</Carousel>);\n\n    const carouselItems = wrapper.find('CarouselItem');\n\n    expect(carouselItems.at(0).is('.active')).to.be.false;\n    expect(carouselItems.at(1).is('.active')).to.be.true;\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle falsy children",
            "suites": [
                "<Carousel>"
            ],
            "updatePoint": {
                "line": 49,
                "column": 34
            },
            "line": 49,
            "code": "  it('should handle falsy children', () => {\n    const wrapper = mount(\n      <Carousel>\n        {null}\n        <Carousel.Item>Item 1 content</Carousel.Item>\n        {false}\n        {undefined}\n        <Carousel.Item>Item 2 content</Carousel.Item>\n      </Carousel>,\n    );\n\n    const carouselItems = wrapper.find('CarouselItem');\n\n    expect(carouselItems.at(0).is('.active')).to.be.true;\n    expect(carouselItems.at(0).text()).to.equal('Item 1 content');\n    expect(wrapper.find('.carousel-indicators > button')).to.have.lengthOf(2);\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call onSelect when indicator selected",
            "suites": [
                "<Carousel>"
            ],
            "updatePoint": {
                "line": 67,
                "column": 50
            },
            "line": 67,
            "code": "  it('should call onSelect when indicator selected', (done) => {\n    function onSelect(index) {\n      expect(index).to.equal(0);\n\n      done();\n    }\n\n    const wrapper = mount(\n      <Carousel activeIndex={1} onSelect={onSelect} interval={null}>\n        {items}\n      </Carousel>,\n    );\n\n    wrapper.find('.carousel-indicators button').first().simulate('click');\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render custom indicator labels",
            "suites": [
                "<Carousel>"
            ],
            "updatePoint": {
                "line": 83,
                "column": 43
            },
            "line": 83,
            "code": "  it('should render custom indicator labels', () => {\n    const labels = ['custom1', 'custom2', 'custom3'];\n\n    const wrapper = mount(\n      <Carousel activeIndex={1} interval={null} indicatorLabels={labels}>\n        {items}\n      </Carousel>,\n    );\n\n    const indicators = wrapper.find('.carousel-indicators button');\n    for (let i = 0; i < labels.length; i++) {\n      const node = indicators.at(i).getDOMNode();\n      expect(node.getAttribute('aria-label')).to.equal(labels[i]);\n    }\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render variant",
            "suites": [
                "<Carousel>"
            ],
            "updatePoint": {
                "line": 99,
                "column": 27
            },
            "line": 99,
            "code": "  it('should render variant', () => {\n    mount(\n      <Carousel activeIndex={1} interval={null} variant=\"dark\">\n        {items}\n      </Carousel>,\n    ).assertSingle('.carousel.carousel-dark');\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow refs to be attached and expose next, prev functions",
            "suites": [
                "<Carousel>",
                "ref testing"
            ],
            "updatePoint": {
                "line": 118,
                "column": 72
            },
            "line": 118,
            "code": "    it('should allow refs to be attached and expose next, prev functions', () => {\n      const ref = React.createRef();\n      const onSelectSpy = sinon.spy();\n      mount(\n        <Carousel ref={ref} onSelect={onSelectSpy} defaultActiveIndex={1}>\n          {items}\n        </Carousel>,\n      );\n      expect(ref.current).to.have.property('next');\n      expect(ref.current).to.have.property('prev');\n      expect(ref.current).to.have.property('element');\n      ref.current.next();\n      clock.tick(50);\n      expect(onSelectSpy).to.have.been.calledOnce;\n      ref.current.prev();\n      clock.tick(50);\n      expect(onSelectSpy).to.have.been.calledTwice;\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call  with previous index and direction",
            "suites": [
                "<Carousel>",
                "ref testing"
            ],
            "updatePoint": {
                "line": 139,
                "column": 66
            },
            "line": 139,
            "code": "    it(`should call ${eventName} with previous index and direction`, (done) => {\n      function onEvent(index, direction) {\n        expect(index).to.equal(0);\n        expect(direction).to.equal('end');\n\n        done();\n      }\n\n      const wrapper = mount(\n        <Carousel\n          defaultActiveIndex={1}\n          interval={null}\n          {...{ [eventName]: onEvent }}\n        >\n          {items}\n        </Carousel>,\n      );\n\n      wrapper.find('.carousel-indicators button').first().simulate('click');\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call  with next index and direction",
            "suites": [
                "<Carousel>",
                "ref testing"
            ],
            "updatePoint": {
                "line": 160,
                "column": 62
            },
            "line": 160,
            "code": "    it(`should call ${eventName} with next index and direction`, (done) => {\n      function onEvent(index, direction) {\n        const lastPossibleIndex = items.length - 1;\n        expect(index).to.equal(lastPossibleIndex);\n        expect(direction).to.equal('start');\n\n        done();\n      }\n\n      const wrapper = mount(\n        <Carousel\n          defaultActiveIndex={1}\n          interval={null}\n          {...{ [eventName]: onEvent }}\n        >\n          {items}\n        </Carousel>,\n      );\n\n      wrapper.find('.carousel-indicators button').last().simulate('click');\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show back button control on the first image if wrap is true",
            "suites": [
                "<Carousel>",
                "Buttons and labels with and without wrapping"
            ],
            "updatePoint": {
                "line": 184,
                "column": 74
            },
            "line": 184,
            "code": "    it('should show back button control on the first image if wrap is true', () => {\n      const wrapper = mount(\n        <Carousel controls wrap>\n          {items}\n        </Carousel>,\n      ).find('Carousel');\n\n      wrapper.assertSingle('a.carousel-control-prev');\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should show next button control on the last image if wrap is true",
            "suites": [
                "<Carousel>",
                "Buttons and labels with and without wrapping"
            ],
            "updatePoint": {
                "line": 194,
                "column": 73
            },
            "line": 194,
            "code": "    it('should show next button control on the last image if wrap is true', () => {\n      const lastElementIndex = items.length - 1;\n\n      const wrapper = mount(\n        <Carousel defaultActiveIndex={lastElementIndex} controls wrap>\n          {items}\n        </Carousel>,\n      ).find('Carousel');\n\n      wrapper.assertSingle('a.carousel-control-next');\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not show the prev button on the first image if wrap is false",
            "suites": [
                "<Carousel>",
                "Buttons and labels with and without wrapping"
            ],
            "updatePoint": {
                "line": 206,
                "column": 75
            },
            "line": 206,
            "code": "    it('should not show the prev button on the first image if wrap is false', () => {\n      mount(\n        <Carousel controls wrap={false}>\n          {items}\n        </Carousel>,\n      ).assertNone('a.carousel-control-prev');\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not show the next button on the last image if wrap is false",
            "suites": [
                "<Carousel>",
                "Buttons and labels with and without wrapping"
            ],
            "updatePoint": {
                "line": 214,
                "column": 74
            },
            "line": 214,
            "code": "    it('should not show the next button on the last image if wrap is false', () => {\n      const lastElementIndex = items.length - 1;\n\n      mount(\n        <Carousel defaultActiveIndex={lastElementIndex} controls wrap={false}>\n          {items}\n        </Carousel>,\n      ).assertNone('a.carousel-control-next');\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow the user to specify a previous and next icon",
            "suites": [
                "<Carousel>",
                "Buttons and labels with and without wrapping"
            ],
            "updatePoint": {
                "line": 225,
                "column": 63
            },
            "line": 225,
            "code": "  it('should allow the user to specify a previous and next icon', () => {\n    const wrapper = mount(\n      <Carousel\n        controls\n        defaultActiveIndex={1}\n        prevIcon={<span className=\"ficon ficon-left\" />}\n        nextIcon={<span className=\"ficon ficon-right\" />}\n      >\n        {items}\n      </Carousel>,\n    );\n\n    wrapper.assertSingle('.ficon-left');\n    wrapper.assertSingle('.ficon-right');\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow user to specify a previous and next SR label",
            "suites": [
                "<Carousel>",
                "Buttons and labels with and without wrapping"
            ],
            "updatePoint": {
                "line": 241,
                "column": 63
            },
            "line": 241,
            "code": "  it('should allow user to specify a previous and next SR label', () => {\n    const wrapper = mount(\n      <Carousel\n        controls\n        defaultActiveIndex={1}\n        prevLabel=\"Previous awesomeness\"\n        nextLabel=\"Next awesomeness\"\n      >\n        {items}\n      </Carousel>,\n    );\n\n    const labels = wrapper.find('.visually-hidden');\n\n    expect(labels).to.have.lengthOf(2);\n    expect(labels.at(0).text()).to.equal('Previous awesomeness');\n    expect(labels.at(1).text()).to.equal('Next awesomeness');\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render labels when values are null or undefined",
            "suites": [
                "<Carousel>",
                "Buttons and labels with and without wrapping"
            ],
            "updatePoint": {
                "line": 260,
                "column": 64
            },
            "line": 260,
            "code": "  it('should not render labels when values are null or undefined', () => {\n    // undefined (as in nothing passed) renders default labels\n    [null, ''].forEach((falsyValue) => {\n      const wrapper = mount(\n        <Carousel\n          controls\n          defaultActiveIndex={1}\n          prevLabel={falsyValue}\n          nextLabel={falsyValue}\n        >\n          {items}\n        </Carousel>,\n      );\n\n      expect(wrapper.find('.visually-hidden')).to.have.lengthOf(\n        0,\n        `should not render labels for value ${falsyValue}`,\n      );\n    });\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should transition properly when slide animation is disabled",
            "suites": [
                "<Carousel>",
                "Buttons and labels with and without wrapping"
            ],
            "updatePoint": {
                "line": 281,
                "column": 65
            },
            "line": 281,
            "code": "  it('should transition properly when slide animation is disabled', (done) => {\n    const spy = sinon.spy();\n    const wrapper = mount(\n      <Carousel slide={false} onSelect={spy}>\n        {items}\n      </Carousel>,\n    );\n\n    wrapper.find('a.carousel-control-next').simulate('click');\n\n    setTimeout(() => {\n      spy.should.have.been.calledOnce;\n\n      wrapper.find('a.carousel-control-prev').simulate('click');\n\n      setTimeout(() => {\n        spy.should.have.been.calledTwice;\n\n        done();\n      }, 150);\n    }, 150);\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render on update, active item > new child length",
            "suites": [
                "<Carousel>",
                "Buttons and labels with and without wrapping"
            ],
            "updatePoint": {
                "line": 304,
                "column": 61
            },
            "line": 304,
            "code": "  it('should render on update, active item > new child length', () => {\n    let wrapper = mount(\n      <Carousel defaultActiveIndex={items.length - 1}>{items}</Carousel>,\n    );\n\n    expect(wrapper.find('.carousel-indicators > button')).to.have.lengthOf(\n      items.length,\n    );\n\n    let fewerItems = items.slice(2);\n\n    wrapper.setProps({ children: fewerItems });\n\n    expect(wrapper.find('.carousel-indicators > button')).to.have.lengthOf(\n      fewerItems.length,\n    );\n    expect(wrapper.find('div.carousel-item')).to.have.lengthOf(\n      fewerItems.length,\n    );\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render correctly when fade is set",
            "suites": [
                "<Carousel>",
                "Buttons and labels with and without wrapping"
            ],
            "updatePoint": {
                "line": 325,
                "column": 46
            },
            "line": 325,
            "code": "  it('should render correctly when fade is set', () => {\n    mount(\n      <Carousel defaultActiveIndex={1} fade>\n        {items}\n      </Carousel>,\n    ).assertSingle('.carousel-fade');\n  });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should go through the items after given seconds",
            "suites": [
                "<Carousel>",
                "automatic traversal"
            ],
            "updatePoint": {
                "line": 344,
                "column": 55
            },
            "line": 344,
            "code": "    it('should go through the items after given seconds', () => {\n      const onSelectSpy = sinon.spy();\n      const interval = 500;\n      mount(\n        <Carousel interval={interval} onSelect={onSelectSpy}>\n          {items}\n        </Carousel>,\n      );\n\n      clock.tick(interval * 1.5);\n      expect(onSelectSpy).to.have.been.calledOnce;\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should go through the items given the specified intervals",
            "suites": [
                "<Carousel>",
                "automatic traversal"
            ],
            "updatePoint": {
                "line": 357,
                "column": 65
            },
            "line": 357,
            "code": "    it('should go through the items given the specified intervals', () => {\n      const onSelectSpy = sinon.spy();\n      mount(\n        <Carousel interval={1000} onSelect={onSelectSpy}>\n          <Carousel.Item interval={100}>Item 1 content</Carousel.Item>\n          <Carousel.Item>Item 2 content</Carousel.Item>\n        </Carousel>,\n      );\n\n      // should be long enough to handle false positive issues\n      // but short enough to not trigger auto-play to occur twice\n      // (since the interval for the second item should be `1000`)\n      clock.tick(200);\n\n      expect(onSelectSpy).to.have.been.calledOnce;\n      expect(onSelectSpy.firstCall).to.have.been.calledWith(1);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should stop going through items on hover and continue afterwards",
            "suites": [
                "<Carousel>",
                "automatic traversal"
            ],
            "updatePoint": {
                "line": 375,
                "column": 72
            },
            "line": 375,
            "code": "    it('should stop going through items on hover and continue afterwards', () => {\n      const onSelectSpy = sinon.spy();\n      const interval = 500;\n      const wrapper = mount(\n        <Carousel interval={interval} onSelect={onSelectSpy}>\n          {items}\n        </Carousel>,\n      );\n      wrapper.simulate('mouseOver');\n      clock.tick(interval * 1.5);\n      sinon.assert.notCalled(onSelectSpy);\n\n      wrapper.simulate('mouseOut');\n      clock.tick(interval * 1.5);\n      sinon.assert.calledOnce(onSelectSpy);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should ignore hover if the prop is passed",
            "suites": [
                "<Carousel>",
                "automatic traversal"
            ],
            "updatePoint": {
                "line": 392,
                "column": 49
            },
            "line": 392,
            "code": "    it('should ignore hover if the prop is passed', () => {\n      const onSelectSpy = sinon.spy();\n      const interval = 500;\n      const wrapper = mount(\n        <Carousel interval={interval} onSelect={onSelectSpy} pause={false}>\n          {items}\n        </Carousel>,\n      );\n      wrapper.simulate('mouseOver');\n\n      clock.tick(interval * 1.5);\n      expect(onSelectSpy).to.have.been.calledOnce;\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should stop going through the items after unmounting",
            "suites": [
                "<Carousel>",
                "automatic traversal"
            ],
            "updatePoint": {
                "line": 406,
                "column": 60
            },
            "line": 406,
            "code": "    it('should stop going through the items after unmounting', () => {\n      const onSelectSpy = sinon.spy();\n      const interval = 500;\n      const wrapper = mount(\n        <Carousel interval={interval} onSelect={onSelectSpy}>\n          {items}\n        </Carousel>,\n      );\n      wrapper.unmount();\n      clock.tick(interval * 1.5);\n      expect(onSelectSpy).not.to.have.been.called;\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should wrap to last from first",
            "suites": [
                "<Carousel>",
                "wrapping"
            ],
            "updatePoint": {
                "line": 431,
                "column": 38
            },
            "line": 431,
            "code": "    it('should wrap to last from first', () => {\n      const onSelectSpy = sinon.spy();\n\n      const wrapper = mount(\n        <Carousel activeIndex={0} onSelect={onSelectSpy}>\n          {items}\n        </Carousel>,\n      );\n\n      wrapper.simulate('keyDown', {\n        key: 'ArrowLeft',\n      });\n      clock.tick(50);\n\n      expect(onSelectSpy).to.have.been.calledOnceWith(items.length - 1);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should wrap from first to last",
            "suites": [
                "<Carousel>",
                "wrapping"
            ],
            "updatePoint": {
                "line": 448,
                "column": 38
            },
            "line": 448,
            "code": "    it('should wrap from first to last', () => {\n      const onSelectSpy = sinon.spy();\n\n      const wrapper = mount(\n        <Carousel activeIndex={items.length - 1} onSelect={onSelectSpy}>\n          {items}\n        </Carousel>,\n      );\n\n      wrapper.simulate('keyDown', {\n        key: 'ArrowRight',\n      });\n      clock.tick(50);\n\n      expect(onSelectSpy).to.have.been.calledOnceWith(0);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not wrap with wrap unset for ",
            "suites": [
                "<Carousel>",
                "wrapping"
            ],
            "updatePoint": {
                "line": 481,
                "column": 57
            },
            "line": 481,
            "code": "      it(`should not wrap with wrap unset for ${caseName}`, () => {\n        const onSelectSpy = sinon.spy();\n        const wrapper = mount(\n          <Carousel\n            activeIndex={activeIndex}\n            wrap={false}\n            onSelect={onSelectSpy}\n          >\n            {items}\n          </Carousel>,\n        );\n\n        wrapper.simulate('keyDown', eventPayload);\n        clock.tick(50);\n\n        const carouselItems = wrapper.find('CarouselItem');\n        expect(carouselItems.at(activeIndex).is('.active')).to.be.true;\n        sinon.assert.notCalled(onSelectSpy);\n      });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should go back for the keyboard event ArrowLeft",
            "suites": [
                "<Carousel>",
                "keyboard events"
            ],
            "updatePoint": {
                "line": 514,
                "column": 55
            },
            "line": 514,
            "code": "    it('should go back for the keyboard event ArrowLeft', () => {\n      const onSelectSpy = sinon.spy();\n      const wrapper = mount(\n        <Carousel activeIndex={1} onSelect={onSelectSpy}>\n          {items}\n        </Carousel>,\n      );\n\n      wrapper.simulate('keyDown', {\n        key: 'ArrowLeft',\n      });\n      clock.tick(50);\n      sinon.assert.calledOnce(onSelectSpy);\n      sinon.assert.calledWith(onSelectSpy, 0);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should go forward for the keyboard event ArrowRight",
            "suites": [
                "<Carousel>",
                "keyboard events"
            ],
            "updatePoint": {
                "line": 530,
                "column": 59
            },
            "line": 530,
            "code": "    it('should go forward for the keyboard event ArrowRight', () => {\n      const onSelectSpy = sinon.spy();\n      const wrapper = mount(\n        <Carousel activeIndex={1} onSelect={onSelectSpy}>\n          {items}\n        </Carousel>,\n      );\n\n      wrapper.simulate('keyDown', {\n        key: 'ArrowRight',\n      });\n      clock.tick(50);\n      sinon.assert.calledOnce(onSelectSpy);\n      sinon.assert.calledWith(onSelectSpy, 2);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should ignore keyEvents when the keyboard is disabled",
            "suites": [
                "<Carousel>",
                "keyboard events"
            ],
            "updatePoint": {
                "line": 546,
                "column": 61
            },
            "line": 546,
            "code": "    it('should ignore keyEvents when the keyboard is disabled', () => {\n      const onSelectSpy = sinon.spy();\n      const wrapper = mount(\n        <Carousel activeIndex={1} onSelect={onSelectSpy} keyboard={false}>\n          {items}\n        </Carousel>,\n      );\n\n      wrapper.simulate('keyDown', {\n        key: 'ArrowRight',\n      });\n      clock.tick(50);\n      sinon.assert.notCalled(onSelectSpy);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle a defined custom key event",
            "suites": [
                "<Carousel>",
                "keyboard events"
            ],
            "updatePoint": {
                "line": 561,
                "column": 48
            },
            "line": 561,
            "code": "    it('should handle a defined custom key event', () => {\n      const onKeyDownSpy = sinon.spy();\n      const wrapper = mount(\n        <Carousel activeIndex={1} onKeyDown={onKeyDownSpy}>\n          {items}\n        </Carousel>,\n      );\n\n      wrapper.simulate('keyDown', {\n        key: 'ArrowUp',\n      });\n      clock.tick(50);\n      sinon.assert.calledOnce(onKeyDownSpy);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should do nothing for non left or right keys",
            "suites": [
                "<Carousel>",
                "keyboard events"
            ],
            "updatePoint": {
                "line": 577,
                "column": 54
            },
            "line": 577,
            "code": "      it('should do nothing for non left or right keys', () => {\n        const onSelectSpy = sinon.spy();\n        const wrapper = mount(\n          <Carousel activeIndex={1} onSelect={onSelectSpy}>\n            {items}\n          </Carousel>,\n        );\n\n        wrapper.simulate('keyDown', {\n          key,\n        });\n        clock.tick(50);\n        sinon.assert.notCalled(onSelectSpy);\n      });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle a defined mouse over event",
            "suites": [
                "<Carousel>",
                "mouse events"
            ],
            "updatePoint": {
                "line": 605,
                "column": 48
            },
            "line": 605,
            "code": "    it('should handle a defined mouse over event', () => {\n      const onMouseOverSpy = sinon.spy();\n      const wrapper = mount(\n        <Carousel activeIndex={1} onMouseOver={onMouseOverSpy}>\n          {items}\n        </Carousel>,\n      );\n\n      wrapper.simulate('mouseOver');\n      clock.tick(1500);\n      sinon.assert.calledOnce(onMouseOverSpy);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle a defined mouse out event",
            "suites": [
                "<Carousel>",
                "mouse events"
            ],
            "updatePoint": {
                "line": 618,
                "column": 47
            },
            "line": 618,
            "code": "    it('should handle a defined mouse out event', () => {\n      const onMouseOutSpy = sinon.spy();\n      const wrapper = mount(\n        <Carousel activeIndex={1} onMouseOut={onMouseOutSpy}>\n          {items}\n        </Carousel>,\n      );\n\n      wrapper.simulate('mouseOut');\n      clock.tick(50);\n      sinon.assert.calledOnce(onMouseOutSpy);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should swipe right",
            "suites": [
                "<Carousel>",
                "touch events"
            ],
            "updatePoint": {
                "line": 667,
                "column": 26
            },
            "line": 667,
            "code": "    it('should swipe right', () => {\n      wrapper.simulate('touchStart', { touches: [{ clientX: 50 }] });\n      wrapper.simulate('touchMove', { touches: [{ clientX: 0 }] });\n      wrapper.simulate('touchEnd');\n\n      clock.tick(50);\n\n      expect(onSelectSpy).to.have.been.calledOnceWith(2);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should swipe left",
            "suites": [
                "<Carousel>",
                "touch events"
            ],
            "updatePoint": {
                "line": 677,
                "column": 25
            },
            "line": 677,
            "code": "    it('should swipe left', () => {\n      wrapper.simulate('touchStart', { touches: [{ clientX: 0 }] });\n      wrapper.simulate('touchMove', { touches: [{ clientX: 50 }] });\n      wrapper.simulate('touchEnd');\n\n      clock.tick(50);\n\n      expect(onSelectSpy).to.have.been.calledOnceWith(0);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not swipe if swipe detected is under the swipe threshold",
            "suites": [
                "<Carousel>",
                "touch events"
            ],
            "updatePoint": {
                "line": 687,
                "column": 71
            },
            "line": 687,
            "code": "    it('should not swipe if swipe detected is under the swipe threshold', () => {\n      wrapper.simulate('touchStart', { touches: [{ clientX: 0 }] });\n      wrapper.simulate('touchMove', { touches: [{ clientX: 35 }] });\n      wrapper.simulate('touchEnd');\n\n      clock.tick(50);\n      expect(onSelectSpy).to.not.have.been.called;\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should do nothing with disabled touch right",
            "suites": [
                "<Carousel>",
                "touch events"
            ],
            "updatePoint": {
                "line": 696,
                "column": 51
            },
            "line": 696,
            "code": "    it('should do nothing with disabled touch right', () => {\n      const noTouchWrapper = mount(\n        <Carousel\n          activeIndex={1}\n          interval={null}\n          onSelect={onSelectSpy}\n          touch={false}\n        >\n          {items}\n        </Carousel>,\n      );\n      noTouchWrapper.simulate('touchStart', {\n        touches: [{ clientX: 50 }],\n      });\n      noTouchWrapper.simulate('touchMove', {\n        touches: [{ clientX: 0 }],\n      });\n      noTouchWrapper.simulate('touchEnd');\n\n      clock.tick(50);\n      expect(onSelectSpy).to.not.have.been.called;\n\n      const carouselItems = wrapper.find('CarouselItem');\n      expect(carouselItems.at(1).is('.active')).to.be.true;\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle a custom touch start and end event",
            "suites": [
                "<Carousel>",
                "touch events"
            ],
            "updatePoint": {
                "line": 722,
                "column": 56
            },
            "line": 722,
            "code": "    it('should handle a custom touch start and end event', () => {\n      wrapper.simulate('touchStart', {\n        touches: [{ clientX: 50 }],\n      });\n      wrapper.simulate('touchMove', {\n        touches: [{ clientX: 0 }],\n      });\n      wrapper.simulate('touchEnd');\n      clock.tick(50);\n      sinon.assert.calledOnce(onTouchStartSpy);\n      sinon.assert.calledOnce(onTouchMoveSpy);\n      sinon.assert.calledOnce(onTouchEndSpy);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle a custom multi-touch move event",
            "suites": [
                "<Carousel>",
                "touch events"
            ],
            "updatePoint": {
                "line": 736,
                "column": 53
            },
            "line": 736,
            "code": "    it('should handle a custom multi-touch move event', () => {\n      wrapper.simulate('touchMove', {\n        touches: [{ clientX: 0 }, { clientX: 50 }],\n      });\n      clock.tick(50);\n      expect(onTouchMoveSpy).to.have.been.calledOnce;\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call onSlide when slide animation is disabled",
            "suites": [
                "<Carousel>",
                "callback tests"
            ],
            "updatePoint": {
                "line": 756,
                "column": 60
            },
            "line": 756,
            "code": "    it('should call onSlide when slide animation is disabled', () => {\n      const onSlideSpy = sinon.spy();\n      const wrapper = mount(\n        <Carousel slide={false} onSelect={() => {}} onSlide={onSlideSpy}>\n          {items}\n        </Carousel>,\n      );\n\n      wrapper.find('a.carousel-control-next').simulate('click');\n      clock.tick(150);\n      onSlideSpy.should.have.been.calledOnce;\n\n      wrapper.find('a.carousel-control-prev').simulate('click');\n      clock.tick(150);\n      onSlideSpy.should.have.been.calledTwice;\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call onSlid when slide animation is disabled",
            "suites": [
                "<Carousel>",
                "callback tests"
            ],
            "updatePoint": {
                "line": 773,
                "column": 59
            },
            "line": 773,
            "code": "    it('should call onSlid when slide animation is disabled', () => {\n      const onSlidSpy = sinon.spy();\n      const wrapper = mount(\n        <Carousel slide={false} onSelect={() => {}} onSlid={onSlidSpy}>\n          {items}\n        </Carousel>,\n      );\n\n      wrapper.find('a.carousel-control-next').simulate('click');\n      clock.tick(150);\n      onSlidSpy.should.have.been.calledOnce;\n\n      wrapper.find('a.carousel-control-prev').simulate('click');\n      clock.tick(150);\n      onSlidSpy.should.have.been.calledTwice;\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should transition/call onSelect once if previous arrow double clicked",
            "suites": [
                "<Carousel>",
                "callback tests"
            ],
            "updatePoint": {
                "line": 790,
                "column": 77
            },
            "line": 790,
            "code": "    it('should transition/call onSelect once if previous arrow double clicked', () => {\n      const onSelectSpy = sinon.spy();\n      const wrapper = mount(\n        <Carousel onSelect={onSelectSpy}>{items}</Carousel>,\n      );\n\n      const prev = wrapper.find('a.carousel-control-prev');\n      prev.simulate('click');\n      prev.simulate('click');\n\n      clock.tick(1000);\n      onSelectSpy.should.have.been.calledOnce;\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should transition/call onSelect once if next arrow double clicked",
            "suites": [
                "<Carousel>",
                "callback tests"
            ],
            "updatePoint": {
                "line": 804,
                "column": 73
            },
            "line": 804,
            "code": "    it('should transition/call onSelect once if next arrow double clicked', () => {\n      const onSelectSpy = sinon.spy();\n      const wrapper = mount(\n        <Carousel onSelect={onSelectSpy}>{items}</Carousel>,\n      );\n\n      const next = wrapper.find('a.carousel-control-next');\n      next.simulate('click');\n      next.simulate('click');\n\n      clock.tick(1000);\n      onSelectSpy.should.have.been.calledOnce;\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should slide in correct direction on ArrowLeft when dir=rtl",
            "suites": [
                "<Carousel>",
                "RTL"
            ],
            "updatePoint": {
                "line": 830,
                "column": 67
            },
            "line": 830,
            "code": "    it('should slide in correct direction on ArrowLeft when dir=rtl', () => {\n      const onSelectSpy = sinon.spy();\n\n      const wrapper = mount(\n        <ThemeProvider dir=\"rtl\">\n          <Carousel activeIndex={1} onSelect={onSelectSpy}>\n            {items}\n          </Carousel>\n        </ThemeProvider>,\n      );\n\n      wrapper.simulate('keyDown', {\n        key: 'ArrowLeft',\n      });\n      clock.tick(50);\n\n      expect(onSelectSpy).to.have.been.calledOnceWith(2);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should slide in correct direction on ArrowLeft when dir=rtl",
            "suites": [
                "<Carousel>",
                "RTL"
            ],
            "updatePoint": {
                "line": 849,
                "column": 67
            },
            "line": 849,
            "code": "    it('should slide in correct direction on ArrowLeft when dir=rtl', () => {\n      const onSelectSpy = sinon.spy();\n\n      const wrapper = mount(\n        <ThemeProvider dir=\"rtl\">\n          <Carousel activeIndex={1} onSelect={onSelectSpy}>\n            {items}\n          </Carousel>\n        </ThemeProvider>,\n      );\n\n      wrapper.simulate('keyDown', {\n        key: 'ArrowRight',\n      });\n      clock.tick(50);\n\n      expect(onSelectSpy).to.have.been.calledOnceWith(0);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should slide in correct direction automatically when dir=rtl",
            "suites": [
                "<Carousel>",
                "RTL"
            ],
            "updatePoint": {
                "line": 868,
                "column": 68
            },
            "line": 868,
            "code": "    it('should slide in correct direction automatically when dir=rtl', () => {\n      const onSelectSpy = sinon.spy();\n      const interval = 300;\n\n      mount(\n        <ThemeProvider dir=\"rtl\">\n          <Carousel activeIndex={1} onSelect={onSelectSpy} interval={interval}>\n            {items}\n          </Carousel>\n        </ThemeProvider>,\n      );\n\n      clock.tick(interval * 1.5);\n\n      expect(onSelectSpy).to.have.been.calledOnceWith(0);\n    });",
            "file": "CarouselSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should output a button",
            "suites": [
                "<CloseButton>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 28
            },
            "line": 6,
            "code": "  it('Should output a button', () => {\n    mount(<CloseButton />)\n      .find('button')\n      .should.have.length(1);\n  });",
            "file": "CloseButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have type=button by default",
            "suites": [
                "<CloseButton>"
            ],
            "updatePoint": {
                "line": 12,
                "column": 40
            },
            "line": 12,
            "code": "  it('Should have type=button by default', () => {\n    mount(<CloseButton />)\n      .find('button')\n      .getDOMNode()\n      .getAttribute('type')\n      .should.equal('button');\n  });",
            "file": "CloseButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have class .btn-close",
            "suites": [
                "<CloseButton>"
            ],
            "updatePoint": {
                "line": 20,
                "column": 34
            },
            "line": 20,
            "code": "  it('Should have class .btn-close', () => {\n    mount(<CloseButton />).assertSingle('.btn-close');\n  });",
            "file": "CloseButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should call onClick callback",
            "suites": [
                "<CloseButton>"
            ],
            "updatePoint": {
                "line": 24,
                "column": 34
            },
            "line": 24,
            "code": "  it('Should call onClick callback', (done) => {\n    mount(<CloseButton onClick={() => done()} />).simulate('click');\n  });",
            "file": "CloseButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have a aria-label defaulted to \"Close\"",
            "suites": [
                "<CloseButton>"
            ],
            "updatePoint": {
                "line": 28,
                "column": 51
            },
            "line": 28,
            "code": "  it('Should have a aria-label defaulted to \"Close\"', () => {\n    mount(<CloseButton />)\n      .find('button')\n      .getDOMNode()\n      .getAttribute('aria-label')\n      .should.equal('Close');\n  });",
            "file": "CloseButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should allow override of aria-label",
            "suites": [
                "<CloseButton>"
            ],
            "updatePoint": {
                "line": 36,
                "column": 41
            },
            "line": 36,
            "code": "  it('Should allow override of aria-label', () => {\n    mount(<CloseButton aria-label=\"My Close\" />)\n      .find('button')\n      .getDOMNode()\n      .getAttribute('aria-label')\n      .should.equal('My Close');\n  });",
            "file": "CloseButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not throw an error with StrictMode",
            "suites": [
                "<Collapse>"
            ],
            "updatePoint": {
                "line": 30,
                "column": 47
            },
            "line": 30,
            "code": "  it('should not throw an error with StrictMode', () => {\n    wrapper = mount(\n      <React.StrictMode>\n        <Component>Panel content</Component>\n      </React.StrictMode>,\n    );\n\n    wrapper.setState({ in: true });\n  });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should work with a class component as children",
            "suites": [
                "<Collapse>"
            ],
            "updatePoint": {
                "line": 40,
                "column": 52
            },
            "line": 40,
            "code": "  it('should work with a class component as children', (done) => {\n    const InnerComponent = class extends React.Component {\n      render() {\n        return <div {...this.props}>test</div>;\n      }\n    };\n\n    function onEntering() {\n      assert.equal(wrapper.getDOMNode().className, 'collapsing');\n      done();\n    }\n\n    wrapper = mount(\n      <Collapse onEntering={onEntering}>\n        <InnerComponent />\n      </Collapse>,\n    );\n\n    wrapper.setProps({ in: true });\n  });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should default to collapsed",
            "suites": [
                "<Collapse>"
            ],
            "updatePoint": {
                "line": 61,
                "column": 33
            },
            "line": 61,
            "code": "  it('Should default to collapsed', () => {\n    wrapper = mount(<Component>Panel content</Component>);\n\n    assert.ok(wrapper.find(Collapse).props().in === false);\n  });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have collapse class",
            "suites": [
                "<Collapse>"
            ],
            "updatePoint": {
                "line": 67,
                "column": 32
            },
            "line": 67,
            "code": "  it('Should have collapse class', () => {\n    mount(<Component>Panel content</Component>).assertSingle('.collapse');\n  });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have collapsing class",
            "suites": [
                "<Collapse>",
                "from collapsed to expanded"
            ],
            "updatePoint": {
                "line": 76,
                "column": 36
            },
            "line": 76,
            "code": "    it('Should have collapsing class', () => {\n      wrapper.setState({ in: true });\n\n      assert.equal(wrapper.getDOMNode().className, 'collapsing');\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should set initial 0px height",
            "suites": [
                "<Collapse>",
                "from collapsed to expanded"
            ],
            "updatePoint": {
                "line": 82,
                "column": 37
            },
            "line": 82,
            "code": "    it('Should set initial 0px height', (done) => {\n      let node = wrapper.getDOMNode();\n\n      function onEnter() {\n        assert.equal(node.style.height, '0px');\n        done();\n      }\n\n      assert.equal(node.style.height, '');\n\n      wrapper.setState({ in: true, onEnter });\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should set node to height",
            "suites": [
                "<Collapse>",
                "from collapsed to expanded"
            ],
            "updatePoint": {
                "line": 95,
                "column": 33
            },
            "line": 95,
            "code": "    it('Should set node to height', () => {\n      let node = wrapper.getDOMNode();\n\n      assert.equal(node.style.height, '');\n      wrapper.setState({ in: true });\n      assert.equal(node.style.height, `${node.scrollHeight}px`);\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should transition from collapsing to not collapsing",
            "suites": [
                "<Collapse>",
                "from collapsed to expanded"
            ],
            "updatePoint": {
                "line": 103,
                "column": 59
            },
            "line": 103,
            "code": "    it('Should transition from collapsing to not collapsing', (done) => {\n      let node = wrapper.getDOMNode();\n\n      function onEntered() {\n        assert.equal(node.className, 'collapse show');\n        done();\n      }\n\n      wrapper.setState({ in: true, onEntered });\n\n      assert.equal(node.className, 'collapsing');\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should clear height after transition complete",
            "suites": [
                "<Collapse>",
                "from collapsed to expanded"
            ],
            "updatePoint": {
                "line": 116,
                "column": 53
            },
            "line": 116,
            "code": "    it('Should clear height after transition complete', (done) => {\n      let node = wrapper.getDOMNode();\n\n      function onEntered() {\n        assert.equal(node.style.height, '');\n        done();\n      }\n\n      assert.equal(node.style.height, '');\n\n      wrapper.setState({ in: true, onEntered });\n      assert.equal(node.style.height, `${node.scrollHeight}px`);\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have collapsing class",
            "suites": [
                "<Collapse>",
                "from expanded to collapsed"
            ],
            "updatePoint": {
                "line": 136,
                "column": 36
            },
            "line": 136,
            "code": "    it('Should have collapsing class', () => {\n      wrapper.setState({ in: false });\n      let node = wrapper.getDOMNode();\n      assert.equal(node.className, 'collapsing');\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should set initial height",
            "suites": [
                "<Collapse>",
                "from expanded to collapsed"
            ],
            "updatePoint": {
                "line": 142,
                "column": 33
            },
            "line": 142,
            "code": "    it('Should set initial height', () => {\n      let node = wrapper.getDOMNode();\n\n      function onExit() {\n        assert.equal(node.style.height, '15px');\n      }\n\n      assert.equal(node.style.height, '');\n      wrapper.setState({ in: false, onExit });\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should set node to height",
            "suites": [
                "<Collapse>",
                "from expanded to collapsed"
            ],
            "updatePoint": {
                "line": 153,
                "column": 33
            },
            "line": 153,
            "code": "    it('Should set node to height', () => {\n      let node = wrapper.getDOMNode();\n      assert.equal(node.style.height, '');\n\n      wrapper.setState({ in: false });\n      assert.equal(node.style.height, '');\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should transition from collapsing to not collapsing",
            "suites": [
                "<Collapse>",
                "from expanded to collapsed"
            ],
            "updatePoint": {
                "line": 161,
                "column": 59
            },
            "line": 161,
            "code": "    it('Should transition from collapsing to not collapsing', (done) => {\n      let node = wrapper.getDOMNode();\n\n      function onExited() {\n        assert.equal(node.className, 'collapse');\n        done();\n      }\n\n      wrapper.setState({ in: false, onExited });\n\n      assert.equal(node.className, 'collapsing');\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have no height after transition complete",
            "suites": [
                "<Collapse>",
                "from expanded to collapsed"
            ],
            "updatePoint": {
                "line": 174,
                "column": 55
            },
            "line": 174,
            "code": "    it('Should have no height after transition complete', (done) => {\n      let node = wrapper.getDOMNode();\n\n      function onExited() {\n        assert.equal(node.style.height, '');\n        done();\n      }\n\n      assert.equal(node.style.height, '');\n\n      wrapper.setState({ in: false, onExited });\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have collapse and in class",
            "suites": [
                "<Collapse>",
                "expanded"
            ],
            "updatePoint": {
                "line": 189,
                "column": 41
            },
            "line": 189,
            "code": "    it('Should have collapse and in class', () => {\n      mount(<Component in>Panel content</Component>).assertSingle(\n        '.collapse.show',\n      );\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not have width in class",
            "suites": [
                "<Collapse>",
                "dimension"
            ],
            "updatePoint": {
                "line": 201,
                "column": 38
            },
            "line": 201,
            "code": "    it('Should not have width in class', () => {\n      let node = wrapper.getDOMNode();\n      assert.ok(node.className.indexOf('width') === -1);\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have collapse-horizontal in class",
            "suites": [
                "<Collapse>",
                "dimension"
            ],
            "updatePoint": {
                "line": 206,
                "column": 48
            },
            "line": 206,
            "code": "    it('Should have collapse-horizontal in class', () => {\n      function dimension() {\n        return 'width';\n      }\n\n      wrapper.setProps({ dimension });\n      let node = wrapper.getDOMNode();\n      assert.ok(node.className.indexOf('collapse-horizontal') !== -1);\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets aria-expanded true when expanded",
            "suites": [
                "<Collapse>",
                "with a role"
            ],
            "updatePoint": {
                "line": 222,
                "column": 45
            },
            "line": 222,
            "code": "    it('sets aria-expanded true when expanded', () => {\n      let node = wrapper.getDOMNode();\n      wrapper.setState({ in: true });\n      assert.equal(node.getAttribute('aria-expanded'), 'true');\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets aria-expanded false when collapsed",
            "suites": [
                "<Collapse>",
                "with a role"
            ],
            "updatePoint": {
                "line": 228,
                "column": 47
            },
            "line": 228,
            "code": "    it('sets aria-expanded false when collapsed', () => {\n      let node = wrapper.getDOMNode();\n      wrapper.setState({ in: false });\n      assert.equal(node.getAttribute('aria-expanded'), 'false');\n    });",
            "file": "CollapseSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should include \"col\" when there are no sizes",
            "suites": [
                "Col"
            ],
            "updatePoint": {
                "line": 6,
                "column": 50
            },
            "line": 6,
            "code": "  it('Should include \"col\" when there are no sizes', () => {\n    mount(<Col />).assertSingle('.col');\n  });",
            "file": "ColSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should include \"col\" when xs is true",
            "suites": [
                "Col"
            ],
            "updatePoint": {
                "line": 10,
                "column": 42
            },
            "line": 10,
            "code": "  it('Should include \"col\" when xs is true', () => {\n    mount(<Col xs />).assertSingle('.col');\n    mount(<Col xs={{ span: true }} />).assertSingle('.col');\n  });",
            "file": "ColSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should include sizes",
            "suites": [
                "Col"
            ],
            "updatePoint": {
                "line": 15,
                "column": 26
            },
            "line": 15,
            "code": "  it('Should include sizes', () => {\n    mount(<Col xs={4} md={8} lg={{ span: 12 }} />).assertSingle(\n      '.col-md-8.col-4.col-lg-12',\n    );\n  });",
            "file": "ColSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should include offsets",
            "suites": [
                "Col"
            ],
            "updatePoint": {
                "line": 21,
                "column": 28
            },
            "line": 21,
            "code": "  it('Should include offsets', () => {\n    mount(\n      <Col\n        xs={{ span: 4, offset: 1 }}\n        md={{ span: 8, order: 1 }}\n        lg={{ order: 'last' }}\n      />,\n    ).assertSingle('.col-md-8.order-md-1.col-4.offset-1.order-lg-last');\n  });",
            "file": "ColSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should allow span to be null",
            "suites": [
                "Col"
            ],
            "updatePoint": {
                "line": 31,
                "column": 34
            },
            "line": 31,
            "code": "  it('Should allow span to be null', () => {\n    const wrapper = mount(<Col xs=\"6\" md={{ span: null, order: 1 }} />);\n    wrapper.assertSingle('.col-6.order-md-1');\n    wrapper.find('div').hasClass('col-md').should.equal(false);\n  });",
            "file": "ColSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should allow span to be false",
            "suites": [
                "Col"
            ],
            "updatePoint": {
                "line": 37,
                "column": 35
            },
            "line": 37,
            "code": "  it('Should allow span to be false', () => {\n    const wrapper = mount(<Col xs=\"6\" md={{ span: false, order: 1 }} />);\n    wrapper.assertSingle('.col-6.order-md-1');\n    wrapper.find('div').hasClass('col-md').should.equal(false);\n  });",
            "file": "ColSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should allow span to be auto",
            "suites": [
                "Col"
            ],
            "updatePoint": {
                "line": 43,
                "column": 34
            },
            "line": 43,
            "code": "  it('Should allow span to be auto', () => {\n    mount(<Col md=\"auto\" lg={{ span: 'auto' }} />).assertSingle(\n      '.col-md-auto.col-lg-auto',\n    );\n  });",
            "file": "ColSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have div as default component",
            "suites": [
                "Col"
            ],
            "updatePoint": {
                "line": 49,
                "column": 42
            },
            "line": 49,
            "code": "  it('Should have div as default component', () => {\n    mount(<Col />).assertSingle('div');\n  });",
            "file": "ColSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render props correctly",
            "suites": [
                "<Container>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 35
            },
            "line": 6,
            "code": "  it('should render props correctly', () => {\n    mount(<Container className=\"whatever\" />).assertSingle(\n      'div.container.whatever',\n    );\n  });",
            "file": "ContainerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "turns grid into \"full-width\" layout via \"fluid\" property set",
            "suites": [
                "<Container>"
            ],
            "updatePoint": {
                "line": 12,
                "column": 66
            },
            "line": 12,
            "code": "  it('turns grid into \"full-width\" layout via \"fluid\" property set', () => {\n    mount(<Container fluid />).assertSingle('.container-fluid');\n  });",
            "file": "ContainerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should include size breakpoint class when fluid is set to sm, md, lg or xl",
            "suites": [
                "<Container>"
            ],
            "updatePoint": {
                "line": 16,
                "column": 80
            },
            "line": 16,
            "code": "  it('Should include size breakpoint class when fluid is set to sm, md, lg or xl', () => {\n    mount(<Container fluid=\"sm\" />).assertSingle('.container-sm');\n  });",
            "file": "ContainerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "allows custom elements instead of \"div\"",
            "suites": [
                "<Container>"
            ],
            "updatePoint": {
                "line": 20,
                "column": 45
            },
            "line": 20,
            "code": "  it('allows custom elements instead of \"div\"', () => {\n    mount(<Container as=\"section\" />).assertSingle('section.container');\n  });",
            "file": "ContainerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have div as default component",
            "suites": [
                "<Container>"
            ],
            "updatePoint": {
                "line": 24,
                "column": 42
            },
            "line": 24,
            "code": "  it('Should have div as default component', () => {\n    mount(<Container />).assertSingle('div');\n  });",
            "file": "ContainerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns null with no arguments",
            "suites": [
                "createChainedFunction"
            ],
            "updatePoint": {
                "line": 5,
                "column": 36
            },
            "line": 5,
            "code": "  it('returns null with no arguments', () => {\n    expect(createChainedFunction()).to.equal(null);\n  });",
            "file": "createChainedFunctionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns original function when single function is provided",
            "suites": [
                "createChainedFunction"
            ],
            "updatePoint": {
                "line": 9,
                "column": 64
            },
            "line": 9,
            "code": "  it('returns original function when single function is provided', () => {\n    const func1 = sinon.stub();\n    createChainedFunction(func1).should.equal(func1);\n  });",
            "file": "createChainedFunctionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wraps two functions with another that invokes both when called",
            "suites": [
                "createChainedFunction"
            ],
            "updatePoint": {
                "line": 14,
                "column": 68
            },
            "line": 14,
            "code": "  it('wraps two functions with another that invokes both when called', () => {\n    const func1 = sinon.stub();\n    const func2 = sinon.stub();\n    const chained = createChainedFunction(func1, func2);\n\n    chained.should.not.equal(func1).and.should.not.equal(func2);\n\n    func1.should.not.have.been.called;\n    func2.should.not.have.been.called;\n\n    chained();\n\n    func1.should.have.been.calledOnce;\n    func2.should.have.been.calledOnce;\n  });",
            "file": "createChainedFunctionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wraps multiple functions and invokes them in the order provided",
            "suites": [
                "createChainedFunction"
            ],
            "updatePoint": {
                "line": 30,
                "column": 69
            },
            "line": 30,
            "code": "  it('wraps multiple functions and invokes them in the order provided', () => {\n    const results = [];\n    const func1 = () => results.push(1);\n    const func2 = () => results.push(2);\n    const func3 = () => results.push(3);\n    const chained = createChainedFunction(func1, func2, func3);\n    chained();\n    results.should.eql([1, 2, 3]);\n  });",
            "file": "createChainedFunctionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "forwards arguments to all chained functions",
            "suites": [
                "createChainedFunction"
            ],
            "updatePoint": {
                "line": 40,
                "column": 49
            },
            "line": 40,
            "code": "  it('forwards arguments to all chained functions', () => {\n    const in1 = 'herpa derpa';\n    const in2 = {\n      herpa: 'derpa',\n    };\n\n    const func = (arg1, arg2) => {\n      arg1.should.equal(in1);\n      arg2.should.equal(in2);\n    };\n\n    const chained = createChainedFunction(func, func, func);\n    chained(in1, in2);\n  });",
            "file": "createChainedFunctionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "throws when func is not provided",
            "suites": [
                "createChainedFunction"
            ],
            "updatePoint": {
                "line": 55,
                "column": 38
            },
            "line": 55,
            "code": "  it('throws when func is not provided', () => {\n    expect(() => {\n      createChainedFunction({ herpa: 'derpa' });\n    }).to.throw(/Invalid Argument Type/);\n  });",
            "file": "createChainedFunctionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works with new Function call",
            "suites": [
                "createChainedFunction"
            ],
            "updatePoint": {
                "line": 61,
                "column": 34
            },
            "line": 61,
            "code": "  it('works with new Function call', () => {\n    const results = [];\n    const func1 = new Function('results', 'results.push(1);');\n    const func2 = new Function('results', 'results.push(2);');\n    const chained = createChainedFunction(func1, func2);\n    chained(results);\n    results.should.eql([1, 2]);\n  });",
            "file": "createChainedFunctionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not create a class when value is not defined",
            "suites": [
                "createUtilityClassName"
            ],
            "updatePoint": {
                "line": 4,
                "column": 57
            },
            "line": 4,
            "code": "  it('should not create a class when value is not defined', () => {\n    const classList = createUtilityClasses({\n      gap: undefined,\n    });\n\n    classList.length.should.equal(0);\n  });",
            "file": "createUtilityClassesSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle falsy values",
            "suites": [
                "createUtilityClassName"
            ],
            "updatePoint": {
                "line": 12,
                "column": 32
            },
            "line": 12,
            "code": "  it('should handle falsy values', () => {\n    const classList = createUtilityClasses({\n      gap: 0,\n    });\n\n    classList.length.should.equal(1);\n    classList.should.include.all.members(['gap-0']);\n  });",
            "file": "createUtilityClassesSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle responsive falsy values",
            "suites": [
                "createUtilityClassName"
            ],
            "updatePoint": {
                "line": 21,
                "column": 43
            },
            "line": 21,
            "code": "  it('should handle responsive falsy values', () => {\n    const classList = createUtilityClasses({\n      gap: { xs: 0, md: 0 },\n    });\n\n    classList.length.should.equal(2);\n    classList.should.include.all.members(['gap-0', 'gap-md-0']);\n  });",
            "file": "createUtilityClassesSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return `utilityName-value` when value is a primitive",
            "suites": [
                "createUtilityClassName"
            ],
            "updatePoint": {
                "line": 30,
                "column": 65
            },
            "line": 30,
            "code": "  it('should return `utilityName-value` when value is a primitive', () => {\n    const classList = createUtilityClasses({\n      gap: 2,\n    });\n\n    classList.length.should.equal(1);\n    classList.should.include.all.members(['gap-2']);\n  });",
            "file": "createUtilityClassesSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return responsive class when value is a responsive type",
            "suites": [
                "createUtilityClassName"
            ],
            "updatePoint": {
                "line": 39,
                "column": 68
            },
            "line": 39,
            "code": "  it('should return responsive class when value is a responsive type', () => {\n    const classList = createUtilityClasses({\n      gap: { xs: 2, lg: 3, xxl: 4 },\n    });\n\n    classList.length.should.equal(3);\n    classList.should.include.all.members(['gap-2', 'gap-lg-3', 'gap-xxl-4']);\n  });",
            "file": "createUtilityClassesSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return multiple classes",
            "suites": [
                "createUtilityClassName"
            ],
            "updatePoint": {
                "line": 48,
                "column": 36
            },
            "line": 48,
            "code": "  it('should return multiple classes', () => {\n    const classList = createUtilityClasses({\n      gap: { xs: 2, lg: 3, xxl: 4 },\n      text: { xs: 'start', md: 'end', xl: 'start' },\n    });\n\n    classList.length.should.equal(6);\n    classList.should.include.all.members([\n      'gap-2',\n      'gap-lg-3',\n      'gap-xxl-4',\n      'text-start',\n      'text-md-end',\n      'text-xl-start',\n    ]);\n  });",
            "file": "createUtilityClassesSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders a toggle with the title prop",
            "suites": [
                "<DropdownButton>"
            ],
            "updatePoint": {
                "line": 15,
                "column": 42
            },
            "line": 15,
            "code": "  it('renders a toggle with the title prop', () => {\n    mount(simpleDropdown)\n      .find('button.dropdown-toggle.btn#test-id')\n      .text()\n      .should.equal('Simple Dropdown');\n  });",
            "file": "DropdownButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders single DropdownItem child",
            "suites": [
                "<DropdownButton>"
            ],
            "updatePoint": {
                "line": 22,
                "column": 39
            },
            "line": 22,
            "code": "  it('renders single DropdownItem child', () => {\n    mount(\n      <DropdownButton defaultShow title=\"Single child\" id=\"test-id\">\n        <DropdownItem>Item 1</DropdownItem>\n      </DropdownButton>,\n    ).assertSingle('.dropdown-menu a.dropdown-item');\n  });",
            "file": "DropdownButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "forwards align=\"end\" to the Dropdown",
            "suites": [
                "<DropdownButton>"
            ],
            "updatePoint": {
                "line": 30,
                "column": 42
            },
            "line": 30,
            "code": "  it('forwards align=\"end\" to the Dropdown', () => {\n    mount(\n      <DropdownButton align=\"end\" title=\"blah\" id=\"test-id\">\n        <DropdownItem>Item 1</DropdownItem>\n      </DropdownButton>,\n    )\n      .find('Dropdown')\n      .first()\n      .props()\n      .align.should.equal('end');\n  });",
            "file": "DropdownButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "passes variant and size to the toggle",
            "suites": [
                "<DropdownButton>"
            ],
            "updatePoint": {
                "line": 42,
                "column": 43
            },
            "line": 42,
            "code": "  it('passes variant and size to the toggle', () => {\n    mount(\n      <DropdownButton title=\"blah\" size=\"sm\" variant=\"success\" id=\"test-id\">\n        <DropdownItem>Item 1</DropdownItem>\n      </DropdownButton>,\n    ).find('button.dropdown-toggle.btn-success.btn-sm');\n  });",
            "file": "DropdownButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "passes menuVariant to dropdown menu",
            "suites": [
                "<DropdownButton>"
            ],
            "updatePoint": {
                "line": 50,
                "column": 41
            },
            "line": 50,
            "code": "  it('passes menuVariant to dropdown menu', () => {\n    const wrapper = mount(\n      <DropdownButton title=\"blah\" menuVariant=\"dark\" id=\"test\">\n        <DropdownItem>Item 1</DropdownItem>\n      </DropdownButton>,\n    );\n\n    expect(wrapper.find('DropdownMenu').props()).to.have.property(\n      'variant',\n      'dark',\n    );\n  });",
            "file": "DropdownButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "forwards onSelect handler to DropdownItems",
            "suites": [
                "<DropdownButton>"
            ],
            "updatePoint": {
                "line": 63,
                "column": 48
            },
            "line": 63,
            "code": "  it('forwards onSelect handler to DropdownItems', (done) => {\n    const selectedEvents = [];\n\n    const onSelect = (eventKey) => {\n      selectedEvents.push(eventKey);\n\n      if (selectedEvents.length === 4) {\n        selectedEvents.should.eql(['1', '2', '3', '4']);\n        done();\n      }\n    };\n    const instance = mount(\n      <DropdownButton\n        defaultShow\n        title=\"Simple Dropdown\"\n        onSelect={onSelect}\n        id=\"test-id\"\n      >\n        <DropdownItem eventKey=\"1\">Item 1</DropdownItem>\n        <DropdownItem eventKey=\"2\">Item 2</DropdownItem>\n        <DropdownItem eventKey=\"3\">Item 3</DropdownItem>\n        <DropdownItem eventKey=\"4\">Item 4</DropdownItem>\n      </DropdownButton>,\n    );\n\n    instance.find('a').forEach((item) => {\n      item.simulate('click');\n    });\n  });",
            "file": "DropdownButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not close when onToggle is controlled",
            "suites": [
                "<DropdownButton>"
            ],
            "updatePoint": {
                "line": 93,
                "column": 48
            },
            "line": 93,
            "code": "  it('does not close when onToggle is controlled', () => {\n    const handleSelect = sinon.spy();\n\n    const wrapper = mount(\n      <DropdownButton\n        show\n        title=\"Simple Dropdown\"\n        onToggle={handleSelect}\n        id=\"test-id\"\n      >\n        <DropdownItem eventKey=\"1\">Item 1</DropdownItem>\n      </DropdownButton>,\n    );\n\n    wrapper.find('button').simulate('click');\n    wrapper.find('.dropdown-menu a').first().simulate('click');\n\n    handleSelect.should.have.been.calledWith(false);\n    wrapper.find('Dropdown').first().prop('show').should.equal(true);\n  });",
            "file": "DropdownButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass disabled to button",
            "suites": [
                "<DropdownButton>"
            ],
            "updatePoint": {
                "line": 114,
                "column": 36
            },
            "line": 114,
            "code": "  it('Should pass disabled to button', () => {\n    mount(\n      <DropdownButton disabled title=\"Title\" id=\"testId\">\n        <DropdownItem eventKey=\"1\">DropdownItem 1 content</DropdownItem>\n        <DropdownItem eventKey=\"2\">DropdownItem 2 content</DropdownItem>\n      </DropdownButton>,\n    ).assertSingle('button[disabled]');\n  });",
            "file": "DropdownButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass bsPrefix to the button",
            "suites": [
                "<DropdownButton>"
            ],
            "updatePoint": {
                "line": 123,
                "column": 40
            },
            "line": 123,
            "code": "  it('should pass bsPrefix to the button', () => {\n    mount(\n      <DropdownButton title=\"title\" id=\"test-id\" bsPrefix=\"my-button\">\n        <DropdownItem eventKey=\"1\">DropdownItem 1 content</DropdownItem>\n      </DropdownButton>,\n    ).assertSingle('button.my-button-primary');\n  });",
            "file": "DropdownButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass defaultShow to `<Dropdown>`",
            "suites": [
                "<DropdownButton>"
            ],
            "updatePoint": {
                "line": 131,
                "column": 45
            },
            "line": 131,
            "code": "  it('should pass defaultShow to `<Dropdown>`', () => {\n    const wrapper = mount(\n      <DropdownButton id=\"test-id\" title=\"title\" defaultShow>\n        <DropdownItem eventKey=\"1\">DropdownItem 1 content</DropdownItem>\n      </DropdownButton>,\n    );\n\n    expect(wrapper.children().props().defaultShow).to.equal(true);\n    expect(wrapper.find('DropdownToggle').first().props().defaultShow).to.not\n      .exist;\n  });",
            "file": "DropdownButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders divider",
            "suites": [
                "<Dropdown.Item>"
            ],
            "updatePoint": {
                "line": 7,
                "column": 21
            },
            "line": 7,
            "code": "  it('renders divider', () => {\n    mount(<Dropdown.Divider />).assertSingle(\n      'hr.dropdown-divider[role=\"separator\"]',\n    );\n  });",
            "file": "DropdownItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders divider className and style",
            "suites": [
                "<Dropdown.Item>"
            ],
            "updatePoint": {
                "line": 13,
                "column": 41
            },
            "line": 13,
            "code": "  it('renders divider className and style', () => {\n    const node = mount(\n      <Dropdown.Divider className=\"foo bar\" style={{ height: '100px' }} />,\n    ).getDOMNode();\n\n    node.className.should.match(/\\bfoo bar dropdown-divider\\b/);\n    node.style.height.should.equal('100px');\n  });",
            "file": "DropdownItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders header",
            "suites": [
                "<Dropdown.Item>"
            ],
            "updatePoint": {
                "line": 22,
                "column": 20
            },
            "line": 22,
            "code": "  it('renders header', () => {\n    mount(<Dropdown.Header>Header text</Dropdown.Header>)\n      .assertSingle('div.dropdown-header[role=\"heading\"]')\n      .text()\n      .should.equal('Header text');\n  });",
            "file": "DropdownItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders header className and style",
            "suites": [
                "<Dropdown.Item>"
            ],
            "updatePoint": {
                "line": 29,
                "column": 40
            },
            "line": 29,
            "code": "  it('renders header className and style', () => {\n    const node = mount(\n      <Dropdown.Header className=\"foo bar\" style={{ height: '100px' }}>\n        Header text\n      </Dropdown.Header>,\n    ).getDOMNode();\n\n    node.className.should.match(/\\bfoo bar dropdown-header\\b/);\n    node.style.height.should.equal('100px');\n  });",
            "file": "DropdownItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders Dropdown.ItemText",
            "suites": [
                "<Dropdown.Item>"
            ],
            "updatePoint": {
                "line": 40,
                "column": 31
            },
            "line": 40,
            "code": "  it('renders Dropdown.ItemText', () => {\n    mount(<Dropdown.ItemText>My text</Dropdown.ItemText>)\n      .assertSingle('span.dropdown-item-text')\n      .text()\n      .should.equal('My text');\n  });",
            "file": "DropdownItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders Dropdown.ItemText className and style",
            "suites": [
                "<Dropdown.Item>"
            ],
            "updatePoint": {
                "line": 47,
                "column": 51
            },
            "line": 47,
            "code": "  it('renders Dropdown.ItemText className and style', () => {\n    const node = mount(\n      <Dropdown.ItemText className=\"foo bar\" style={{ height: '100px' }}>\n        My text\n      </Dropdown.ItemText>,\n    ).getDOMNode();\n\n    node.className.should.match(/\\bfoo bar dropdown-item-text\\b/);\n    node.style.height.should.equal('100px');\n  });",
            "file": "DropdownItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders menu item link",
            "suites": [
                "<Dropdown.Item>"
            ],
            "updatePoint": {
                "line": 58,
                "column": 28
            },
            "line": 58,
            "code": "  it('renders menu item link', (done) => {\n    mount(\n      <Dropdown.Item onKeyDown={() => done()} href=\"/herpa-derpa\">\n        Item\n      </Dropdown.Item>,\n    )\n      .assertSingle('a.dropdown-item[href=\"/herpa-derpa\"]')\n      .tap((a) => a.text().should.equal('Item'))\n      .simulate('keyDown', { key: 'a' });\n  });",
            "file": "DropdownItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render as a button when set",
            "suites": [
                "<Dropdown.Item>"
            ],
            "updatePoint": {
                "line": 69,
                "column": 40
            },
            "line": 69,
            "code": "  it('should render as a button when set', () => {\n    mount(<Dropdown.Item as={Button} variant=\"success\" />).assertSingle(\n      'button.dropdown-item.btn-success',\n    );\n  });",
            "file": "DropdownItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass through props",
            "suites": [
                "<Dropdown.Item>"
            ],
            "updatePoint": {
                "line": 75,
                "column": 31
            },
            "line": 75,
            "code": "  it('should pass through props', () => {\n    let node = mount(\n      <Dropdown.Item\n        className=\"test-class\"\n        href=\"#hi-mom!\"\n        title=\"hi mom!\"\n        style={{ height: 100 }}\n      >\n        Title\n      </Dropdown.Item>,\n    ).getDOMNode();\n\n    assert(node.className.match(/\\btest-class\\b/));\n    assert.equal(node.style.height, '100px');\n    assert.equal(node.getAttribute('href'), '#hi-mom!');\n    assert.equal(node.getAttribute('title'), 'hi mom!');\n  });",
            "file": "DropdownItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should set target attribute on anchor",
            "suites": [
                "<Dropdown.Item>"
            ],
            "updatePoint": {
                "line": 93,
                "column": 43
            },
            "line": 93,
            "code": "  it('Should set target attribute on anchor', () => {\n    let anchor = mount(<Dropdown.Item target=\"_blank\">Title</Dropdown.Item>)\n      .find('a')\n      .getDOMNode();\n\n    assert.equal(anchor.getAttribute('target'), '_blank');\n  });",
            "file": "DropdownItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders div with dropdown-menu class",
            "suites": [
                "<Dropdown.Menu>"
            ],
            "updatePoint": {
                "line": 15,
                "column": 42
            },
            "line": 15,
            "code": "  it('renders div with dropdown-menu class', () => {\n    mount(simpleMenu).assertSingle('div.dropdown-menu');\n  });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass props to dropdown",
            "suites": [
                "<Dropdown.Menu>"
            ],
            "updatePoint": {
                "line": 19,
                "column": 35
            },
            "line": 19,
            "code": "  it('Should pass props to dropdown', () => {\n    mount(\n      <DropdownMenu show className=\"new-fancy-class\">\n        <DropdownItem eventKey=\"1\">DropdownItem 1 content</DropdownItem>\n      </DropdownMenu>,\n    ).assertSingle('div.new-fancy-class');\n  });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "applies align=\"end\"",
            "suites": [
                "<Dropdown.Menu>"
            ],
            "updatePoint": {
                "line": 27,
                "column": 25
            },
            "line": 27,
            "code": "  it('applies align=\"end\"', () => {\n    mount(\n      <DropdownMenu show align=\"end\">\n        <DropdownItem>Item</DropdownItem>\n      </DropdownMenu>,\n    ).assertSingle('.dropdown-menu-end');\n  });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders on mount with prop",
            "suites": [
                "<Dropdown.Menu>"
            ],
            "updatePoint": {
                "line": 35,
                "column": 32
            },
            "line": 35,
            "code": "  it('renders on mount with prop', () => {\n    mount(\n      <DropdownMenu renderOnMount>\n        <DropdownItem>Item</DropdownItem>\n      </DropdownMenu>,\n    ).assertSingle('div.dropdown-menu');\n  });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not add any extra classes when align=\"start\"",
            "suites": [
                "<Dropdown.Menu>"
            ],
            "updatePoint": {
                "line": 43,
                "column": 55
            },
            "line": 43,
            "code": "  it('does not add any extra classes when align=\"start\"', () => {\n    const wrapper = mount(\n      <DropdownMenu show align=\"start\">\n        <DropdownItem>Item</DropdownItem>\n      </DropdownMenu>,\n    ).find('DropdownMenu');\n\n    expect(wrapper.getDOMNode().className).to.equal('dropdown-menu show');\n  });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds right align class when align=\"end\"",
            "suites": [
                "<Dropdown.Menu>"
            ],
            "updatePoint": {
                "line": 53,
                "column": 45
            },
            "line": 53,
            "code": "  it('adds right align class when align=\"end\"', () => {\n    mount(\n      <DropdownMenu show align=\"end\">\n        <DropdownItem>Item</DropdownItem>\n      </DropdownMenu>,\n    ).assertSingle('.dropdown-menu-end');\n  });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds responsive start alignment classes",
            "suites": [
                "<Dropdown.Menu>"
            ],
            "updatePoint": {
                "line": 61,
                "column": 45
            },
            "line": 61,
            "code": "  it('adds responsive start alignment classes', () => {\n    mount(\n      <DropdownMenu show align={{ lg: 'start' }}>\n        <DropdownItem>Item</DropdownItem>\n      </DropdownMenu>,\n    )\n      .assertSingle('.dropdown-menu-end')\n      .assertSingle('.dropdown-menu-lg-start');\n  });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds responsive end alignment classes",
            "suites": [
                "<Dropdown.Menu>"
            ],
            "updatePoint": {
                "line": 71,
                "column": 43
            },
            "line": 71,
            "code": "  it('adds responsive end alignment classes', () => {\n    mount(\n      <DropdownMenu show align={{ lg: 'end' }}>\n        <DropdownItem>Item</DropdownItem>\n      </DropdownMenu>,\n    )\n      .assertSingle('.dropdown-menu-lg-end')\n      .assertSingle('[data-bs-popper=\"static\"]');\n  });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render variant",
            "suites": [
                "<Dropdown.Menu>"
            ],
            "updatePoint": {
                "line": 81,
                "column": 27
            },
            "line": 81,
            "code": "  it('should render variant', () => {\n    mount(\n      <DropdownMenu show variant=\"dark\">\n        <DropdownItem>Item</DropdownItem>\n      </DropdownMenu>,\n    ).assertSingle('.dropdown-menu.dropdown-menu-dark');\n  });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return top placement",
            "suites": [
                "<Dropdown.Menu>",
                "getDropdownMenuPlacement"
            ],
            "updatePoint": {
                "line": 90,
                "column": 35
            },
            "line": 90,
            "code": "    it('should return top placement', () => {\n      getDropdownMenuPlacement(false, 'up', false).should.equal('top-start');\n      getDropdownMenuPlacement(true, 'up', false).should.equal('top-end');\n    });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return top placement for RTL",
            "suites": [
                "<Dropdown.Menu>",
                "getDropdownMenuPlacement"
            ],
            "updatePoint": {
                "line": 95,
                "column": 43
            },
            "line": 95,
            "code": "    it('should return top placement for RTL', () => {\n      getDropdownMenuPlacement(false, 'up', true).should.equal('top-end');\n      getDropdownMenuPlacement(true, 'up', true).should.equal('top-start');\n    });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return end placement",
            "suites": [
                "<Dropdown.Menu>",
                "getDropdownMenuPlacement"
            ],
            "updatePoint": {
                "line": 100,
                "column": 35
            },
            "line": 100,
            "code": "    it('should return end placement', () => {\n      getDropdownMenuPlacement(false, 'end', false).should.equal('right-start');\n      getDropdownMenuPlacement(true, 'end', false).should.equal('right-end');\n    });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return end placement for RTL",
            "suites": [
                "<Dropdown.Menu>",
                "getDropdownMenuPlacement"
            ],
            "updatePoint": {
                "line": 105,
                "column": 43
            },
            "line": 105,
            "code": "    it('should return end placement for RTL', () => {\n      getDropdownMenuPlacement(false, 'end', true).should.equal('left-start');\n      getDropdownMenuPlacement(true, 'end', true).should.equal('left-end');\n    });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return bottom placement",
            "suites": [
                "<Dropdown.Menu>",
                "getDropdownMenuPlacement"
            ],
            "updatePoint": {
                "line": 110,
                "column": 38
            },
            "line": 110,
            "code": "    it('should return bottom placement', () => {\n      getDropdownMenuPlacement(false, 'bottom', false).should.equal(\n        'bottom-start',\n      );\n      getDropdownMenuPlacement(true, 'bottom', false).should.equal(\n        'bottom-end',\n      );\n    });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return bottom placement for RTL",
            "suites": [
                "<Dropdown.Menu>",
                "getDropdownMenuPlacement"
            ],
            "updatePoint": {
                "line": 119,
                "column": 46
            },
            "line": 119,
            "code": "    it('should return bottom placement for RTL', () => {\n      getDropdownMenuPlacement(false, 'bottom', true).should.equal(\n        'bottom-end',\n      );\n      getDropdownMenuPlacement(true, 'bottom', true).should.equal(\n        'bottom-start',\n      );\n    });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return start placement",
            "suites": [
                "<Dropdown.Menu>",
                "getDropdownMenuPlacement"
            ],
            "updatePoint": {
                "line": 128,
                "column": 37
            },
            "line": 128,
            "code": "    it('should return start placement', () => {\n      getDropdownMenuPlacement(false, 'start', false).should.equal(\n        'left-start',\n      );\n      getDropdownMenuPlacement(true, 'start', false).should.equal('left-end');\n    });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return start placement for RTL",
            "suites": [
                "<Dropdown.Menu>",
                "getDropdownMenuPlacement"
            ],
            "updatePoint": {
                "line": 135,
                "column": 45
            },
            "line": 135,
            "code": "    it('should return start placement for RTL', () => {\n      getDropdownMenuPlacement(false, 'start', true).should.equal(\n        'right-start',\n      );\n      getDropdownMenuPlacement(true, 'start', true).should.equal('right-end');\n    });",
            "file": "DropdownMenuSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders div with dropdown class",
            "suites": [
                "<Dropdown>"
            ],
            "updatePoint": {
                "line": 24,
                "column": 37
            },
            "line": 24,
            "code": "  it('renders div with dropdown class', () => {\n    mount(simpleDropdown).assertSingle('div.dropdown');\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders div with dropup class",
            "suites": [
                "<Dropdown>"
            ],
            "updatePoint": {
                "line": 28,
                "column": 35
            },
            "line": 28,
            "code": "  it('renders div with dropup class', () => {\n    mount(simpleDropdown).assertSingle('div.dropdown');\n\n    const node = mount(\n      <Dropdown title=\"Dropup\" drop=\"up\">\n        {dropdownChildren}\n      </Dropdown>,\n    ).getDOMNode();\n\n    node.tagName.should.equal('DIV');\n    node.className.should.not.match(/\\bdropdown\\b/);\n    node.className.should.match(/\\bdropup\\b/);\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders div with dropend class",
            "suites": [
                "<Dropdown>"
            ],
            "updatePoint": {
                "line": 42,
                "column": 36
            },
            "line": 42,
            "code": "  it('renders div with dropend class', () => {\n    mount(\n      <Dropdown title=\"Dropend\" drop=\"end\">\n        {dropdownChildren}\n      </Dropdown>,\n    ).assertSingle('.dropend');\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders div with dropstart class",
            "suites": [
                "<Dropdown>"
            ],
            "updatePoint": {
                "line": 50,
                "column": 38
            },
            "line": 50,
            "code": "  it('renders div with dropstart class', () => {\n    mount(\n      <Dropdown title=\"Dropstart\" drop=\"start\">\n        {dropdownChildren}\n      </Dropdown>,\n    ).assertSingle('.dropstart');\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders toggle with Dropdown.Toggle",
            "suites": [
                "<Dropdown>"
            ],
            "updatePoint": {
                "line": 58,
                "column": 41
            },
            "line": 58,
            "code": "  it('renders toggle with Dropdown.Toggle', () => {\n    const buttonNode = mount(simpleDropdown)\n      .find('DropdownToggle')\n      .assertSingle('button.dropdown-toggle.btn-primary[type=\"button\"]')\n      .getDOMNode();\n\n    buttonNode.textContent.should.match(/Child Title/);\n    buttonNode.getAttribute('aria-expanded').should.equal('false');\n    buttonNode.getAttribute('id').should.be.ok;\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "forwards align=\"end\" to menu",
            "suites": [
                "<Dropdown>"
            ],
            "updatePoint": {
                "line": 69,
                "column": 34
            },
            "line": 69,
            "code": "  it('forwards align=\"end\" to menu', () => {\n    const Menu = React.forwardRef(\n      ({ show: _, close: _1, align, ...props }, ref) => (\n        <div {...props} data-align={align} ref={ref} />\n      ),\n    );\n\n    mount(\n      <Dropdown align=\"end\" show>\n        <Dropdown.Toggle id=\"test-id\" key=\"toggle\">\n          Child Title\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu key=\"menu\" as={Menu}>\n          <Dropdown.Item>Item 1</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>,\n    ).assertSingle('div[data-align=\"end\"]');\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "toggles open/closed when clicked",
            "suites": [
                "<Dropdown>"
            ],
            "updatePoint": {
                "line": 92,
                "column": 38
            },
            "line": 92,
            "code": "  it('toggles open/closed when clicked', () => {\n    const wrapper = mount(simpleDropdown);\n\n    wrapper.assertNone('.show');\n    wrapper.assertSingle('button[aria-expanded=false]').simulate('click');\n\n    wrapper.assertSingle('.dropdown.show');\n    wrapper.assertSingle('.dropdown-menu.show');\n\n    wrapper.assertSingle('button[aria-expanded=true]').simulate('click');\n\n    wrapper.assertNone('.show');\n\n    wrapper.assertSingle('button[aria-expanded=false]');\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not pass onSelect to DOM node",
            "suites": [
                "<Dropdown>"
            ],
            "updatePoint": {
                "line": 108,
                "column": 40
            },
            "line": 108,
            "code": "  it('does not pass onSelect to DOM node', () => {\n    expect(\n      mount(simpleDropdown)\n        .setProps({ onSelect: () => {} })\n        .find('div.dropdown')\n        .prop('onSelect'),\n    ).to.not.exist;\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "closes when child Dropdown.Item is selected",
            "suites": [
                "<Dropdown>"
            ],
            "updatePoint": {
                "line": 117,
                "column": 49
            },
            "line": 117,
            "code": "  it('closes when child Dropdown.Item is selected', () => {\n    const onToggle = sinon.spy();\n\n    const wrapper = mount(simpleDropdown).setProps({ show: true, onToggle });\n\n    wrapper.assertSingle('.dropdown.show');\n\n    wrapper.find('.dropdown-menu a').first().simulate('click');\n\n    onToggle.should.have.been.calledWith(false);\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has aria-labelledby same id as toggle button",
            "suites": [
                "<Dropdown>"
            ],
            "updatePoint": {
                "line": 129,
                "column": 50
            },
            "line": 129,
            "code": "  it('has aria-labelledby same id as toggle button', () => {\n    const wrapper = mount(\n      React.cloneElement(simpleDropdown, { defaultShow: true }),\n    );\n\n    wrapper\n      .find('button')\n      .getDOMNode()\n      .getAttribute('id')\n      .should.equal(\n        wrapper\n          .find('div.dropdown-menu')\n          .getDOMNode()\n          .getAttribute('aria-labelledby'),\n      );\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "chains refs",
            "suites": [
                "<Dropdown>"
            ],
            "updatePoint": {
                "line": 146,
                "column": 17
            },
            "line": 146,
            "code": "  it('chains refs', () => {\n    class RefDropdown extends React.Component {\n      render() {\n        return (\n          <Dropdown\n            defaultShow\n            ref={(dropdown) => {\n              this.dropdown = dropdown;\n            }}\n            id=\"test\"\n          >\n            <Dropdown.Toggle\n              id=\"test-id\"\n              ref={(toggle) => (this.toggle = toggle)}\n            />\n            <Dropdown.Menu ref={(menu) => (this.menu = menu)} />\n          </Dropdown>\n        );\n      }\n    }\n\n    let inst = mount(<RefDropdown />).instance();\n\n    inst.menu.should.exist;\n    inst.toggle.should.exist;\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "passes open, event, and source correctly when opened with click",
            "suites": [
                "<Dropdown>",
                "DOM event and source passed to onToggle"
            ],
            "updatePoint": {
                "line": 186,
                "column": 71
            },
            "line": 186,
            "code": "    it('passes open, event, and source correctly when opened with click', () => {\n      const spy = sinon.spy();\n      const wrapper = mount(\n        <Dropdown onToggle={spy}>{dropdownChildren}</Dropdown>,\n      );\n\n      expect(spy).to.not.have.been.called;\n\n      wrapper.find('button').simulate('click');\n\n      expect(spy).to.have.been.calledOnce;\n      expect(spy.getCall(0).args.length).to.equal(2);\n      expect(spy.getCall(0).args[0]).to.equal(true);\n      expect(spy.getCall(0).args[1].source).to.equal('click');\n    });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "passes open, event, and source correctly when closed with click",
            "suites": [
                "<Dropdown>",
                "DOM event and source passed to onToggle"
            ],
            "updatePoint": {
                "line": 202,
                "column": 71
            },
            "line": 202,
            "code": "    it('passes open, event, and source correctly when closed with click', () => {\n      const spy = sinon.spy();\n      const wrapper = mount(\n        <Dropdown onToggle={spy}>{dropdownChildren}</Dropdown>,\n      );\n\n      expect(spy).to.not.have.been.called;\n\n      wrapper.find('button').simulate('click');\n      expect(spy).to.have.been.calledOnce;\n\n      wrapper.find('button').simulate('click');\n      expect(spy).to.have.been.calledTwice;\n      expect(spy.getCall(1).args.length).to.equal(2);\n      expect(spy.getCall(1).args[0]).to.equal(false);\n      expect(spy.getCall(1).args[1].source).to.equal('click');\n    });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "passes open, event, and source correctly when child selected",
            "suites": [
                "<Dropdown>",
                "DOM event and source passed to onToggle"
            ],
            "updatePoint": {
                "line": 220,
                "column": 68
            },
            "line": 220,
            "code": "    it('passes open, event, and source correctly when child selected', () => {\n      const spy = sinon.spy();\n      const wrapper = mount(\n        <Dropdown onToggle={spy}>\n          <Dropdown.Toggle id=\"test-id\">Child Title</Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item eventKey={1}>Item 1</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>,\n      );\n\n      expect(spy).to.not.have.been.called;\n      wrapper.find('button').simulate('click');\n\n      expect(spy).to.have.been.calledOnce;\n\n      wrapper.find('a').first().simulate('click');\n\n      expect(spy).to.have.been.calledTwice;\n      expect(spy.getCall(1).args.length).to.equal(2);\n      expect(spy.getCall(1).args[0]).to.equal(false);\n      expect(spy.getCall(1).args[1].source).to.equal('select');\n    });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "passes open, event, and source correctly when opened with keydown",
            "suites": [
                "<Dropdown>",
                "DOM event and source passed to onToggle"
            ],
            "updatePoint": {
                "line": 244,
                "column": 73
            },
            "line": 244,
            "code": "    it('passes open, event, and source correctly when opened with keydown', () => {\n      const spy = sinon.spy();\n      const wrapper = mount(\n        <Dropdown onToggle={spy}>{dropdownChildren}</Dropdown>,\n        { attachTo: focusableContainer },\n      );\n\n      simulant.fire(wrapper.find('button').getDOMNode(), 'keydown', {\n        key: 'ArrowDown',\n      });\n\n      expect(spy).to.have.been.calledOnce;\n      expect(spy.getCall(0).args.length).to.equal(2);\n      expect(spy.getCall(0).args[0]).to.equal(true);\n      expect(spy.getCall(0).args[1].source).to.equal('keydown');\n    });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use each components bsPrefix",
            "suites": [
                "<Dropdown>",
                "DOM event and source passed to onToggle"
            ],
            "updatePoint": {
                "line": 262,
                "column": 41
            },
            "line": 262,
            "code": "  it('should use each components bsPrefix', () => {\n    const wrapper = mount(\n      <Dropdown defaultShow bsPrefix=\"my-dropdown\">\n        <Dropdown.Toggle id=\"test-id\" bsPrefix=\"my-toggle\">\n          Child Title\n        </Dropdown.Toggle>\n        <Dropdown.Menu bsPrefix=\"my-menu\">\n          <Dropdown.Item>Item 1</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>,\n    );\n\n    wrapper.assertSingle('div.my-dropdown');\n    wrapper.assertSingle('button.my-toggle');\n    wrapper.assertSingle('div.my-menu');\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have div as default component",
            "suites": [
                "<Dropdown>",
                "DOM event and source passed to onToggle"
            ],
            "updatePoint": {
                "line": 279,
                "column": 42
            },
            "line": 279,
            "code": "  it('Should have div as default component', () => {\n    const wrapper = mount(<Dropdown />);\n    expect(wrapper.find('div').length).to.equal(1);\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should also accept a custom component",
            "suites": [
                "<Dropdown>",
                "DOM event and source passed to onToggle"
            ],
            "updatePoint": {
                "line": 284,
                "column": 43
            },
            "line": 284,
            "code": "  it('Should also accept a custom component', () => {\n    const customComponent = React.forwardRef(\n      (\n        {\n          // eslint-disable-next-line no-unused-vars\n          show,\n          // eslint-disable-next-line no-unused-vars\n          close,\n          ...props\n        },\n        ref,\n      ) => <div ref={ref} id=\"custom-component\" {...props} />,\n    );\n    mount(\n      <Dropdown.Menu show as={customComponent}>\n        <Dropdown.Item>Example Item</Dropdown.Item>\n      </Dropdown.Menu>,\n    ).assertSingle('#custom-component');\n  });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render a .dropdown element when inside input group",
            "suites": [
                "<Dropdown>",
                "InputGroup Dropdowns"
            ],
            "updatePoint": {
                "line": 305,
                "column": 69
            },
            "line": 305,
            "code": "    it('should not render a .dropdown element when inside input group', () => {\n      const wrapper = mount(\n        <InputGroup>\n          <Dropdown>{dropdownChildren}</Dropdown>\n        </InputGroup>,\n      );\n\n      expect(wrapper.find('.dropdown').length).to.equal(0);\n    });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render .show on the dropdown toggle",
            "suites": [
                "<Dropdown>",
                "InputGroup Dropdowns"
            ],
            "updatePoint": {
                "line": 315,
                "column": 50
            },
            "line": 315,
            "code": "    it('should render .show on the dropdown toggle', () => {\n      mount(\n        <InputGroup>\n          <Dropdown show>{dropdownChildren}</Dropdown>\n        </InputGroup>,\n      ).assertSingle('button.dropdown-toggle.show');\n    });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should always render dropdown menu even if renderOnMount=false",
            "suites": [
                "<Dropdown>",
                "InputGroup Dropdowns"
            ],
            "updatePoint": {
                "line": 323,
                "column": 70
            },
            "line": 323,
            "code": "    it('should always render dropdown menu even if renderOnMount=false', () => {\n      mount(\n        <InputGroup>\n          <Dropdown renderOnMount={false}>{dropdownChildren}</Dropdown>\n        </InputGroup>,\n      ).assertSingle('div.dropdown-menu');\n    });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should close on outer click",
            "suites": [
                "<Dropdown>",
                "autoClose behaviour",
                "autoClose=\"true\""
            ],
            "updatePoint": {
                "line": 334,
                "column": 37
            },
            "line": 334,
            "code": "      it('should close on outer click', () => {\n        const onToggle = sinon.spy();\n\n        mount(simpleDropdown).setProps({\n          show: true,\n          autoClose: true,\n          onToggle,\n        });\n\n        simulant.fire(document.body, 'click');\n\n        onToggle.should.have.been.calledWith(false);\n      });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should close on child selection",
            "suites": [
                "<Dropdown>",
                "autoClose behaviour",
                "autoClose=\"inside\""
            ],
            "updatePoint": {
                "line": 350,
                "column": 41
            },
            "line": 350,
            "code": "      it('should close on child selection', () => {\n        const onToggle = sinon.spy();\n\n        const wrapper = mount(simpleDropdown).setProps({\n          show: true,\n          autoClose: 'inside',\n          onToggle,\n        });\n\n        wrapper.find('.dropdown-menu a').first().simulate('click');\n\n        onToggle.should.have.been.calledWith(false);\n      });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not close on outer click",
            "suites": [
                "<Dropdown>",
                "autoClose behaviour",
                "autoClose=\"inside\""
            ],
            "updatePoint": {
                "line": 364,
                "column": 41
            },
            "line": 364,
            "code": "      it('should not close on outer click', () => {\n        const onToggle = sinon.spy();\n\n        mount(simpleDropdown).setProps({\n          show: true,\n          autoClose: 'inside',\n          onToggle,\n        });\n\n        simulant.fire(document.body, 'click');\n\n        onToggle.should.not.be.called;\n      });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not close on child selection",
            "suites": [
                "<Dropdown>",
                "autoClose behaviour",
                "autoClose=\"outside\""
            ],
            "updatePoint": {
                "line": 380,
                "column": 45
            },
            "line": 380,
            "code": "      it('should not close on child selection', () => {\n        const onToggle = sinon.spy();\n\n        const wrapper = mount(simpleDropdown).setProps({\n          show: true,\n          autoClose: 'outside',\n          onToggle,\n        });\n\n        wrapper.find('.dropdown-menu a').first().simulate('click');\n\n        sinon.assert.notCalled(onToggle);\n      });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should close on outer click",
            "suites": [
                "<Dropdown>",
                "autoClose behaviour",
                "autoClose=\"outside\""
            ],
            "updatePoint": {
                "line": 394,
                "column": 37
            },
            "line": 394,
            "code": "      it('should close on outer click', () => {\n        const onToggle = sinon.spy();\n\n        mount(simpleDropdown).setProps({\n          show: true,\n          autoClose: 'outside',\n          onToggle,\n        });\n\n        simulant.fire(document.body, 'click');\n\n        onToggle.should.be.calledWith(false);\n      });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not close on child selection",
            "suites": [
                "<Dropdown>",
                "autoClose behaviour",
                "autoClose=\"false\""
            ],
            "updatePoint": {
                "line": 410,
                "column": 45
            },
            "line": 410,
            "code": "      it('should not close on child selection', () => {\n        const onToggle = sinon.spy();\n\n        const wrapper = mount(simpleDropdown).setProps({\n          show: true,\n          autoClose: false,\n          onToggle,\n        });\n\n        wrapper.find('.dropdown-menu a').first().simulate('click');\n\n        sinon.assert.notCalled(onToggle);\n      });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not close on outer click",
            "suites": [
                "<Dropdown>",
                "autoClose behaviour",
                "autoClose=\"false\""
            ],
            "updatePoint": {
                "line": 424,
                "column": 41
            },
            "line": 424,
            "code": "      it('should not close on outer click', () => {\n        const onToggle = sinon.spy();\n\n        mount(simpleDropdown).setProps({\n          show: true,\n          autoClose: false,\n          onToggle,\n        });\n\n        simulant.fire(document.body, 'click');\n\n        sinon.assert.notCalled(onToggle);\n      });",
            "file": "DropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders toggle button",
            "suites": [
                "<DropdownToggle>"
            ],
            "updatePoint": {
                "line": 9,
                "column": 27
            },
            "line": 9,
            "code": "  it('renders toggle button', () => {\n    mount(simpleToggle)\n      .assertSingle(\n        'button[aria-expanded=false].dropdown-toggle.btn.btn-primary',\n      )\n      .text()\n      .should.equal('herpa derpa');\n  });",
            "file": "DropdownToggleSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders children",
            "suites": [
                "<DropdownToggle>"
            ],
            "updatePoint": {
                "line": 18,
                "column": 22
            },
            "line": 18,
            "code": "  it('renders children', () => {\n    mount(\n      <DropdownToggle id=\"test-id\">\n        <h3>herpa derpa</h3>\n      </DropdownToggle>,\n    )\n      .assertSingle('h3')\n      .text()\n      .should.equal('herpa derpa');\n  });",
            "file": "DropdownToggleSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "forwards onClick handler",
            "suites": [
                "<DropdownToggle>"
            ],
            "updatePoint": {
                "line": 29,
                "column": 30
            },
            "line": 29,
            "code": "  it('forwards onClick handler', (done) => {\n    const handleClick = (event) => {\n      event.should.be.ok;\n      done();\n    };\n    mount(\n      <DropdownToggle\n        open={false}\n        id=\"test-id\"\n        title=\"click forwards\"\n        onClick={handleClick}\n      />,\n    ).simulate('click');\n  });",
            "file": "DropdownToggleSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "forwards id",
            "suites": [
                "<DropdownToggle>"
            ],
            "updatePoint": {
                "line": 44,
                "column": 17
            },
            "line": 44,
            "code": "  it('forwards id', () => {\n    const id = 'testid';\n    mount(<DropdownToggle id={id} />).assertSingle(`button#${id}`);\n  });",
            "file": "DropdownToggleSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not forward bsPrefix",
            "suites": [
                "<DropdownToggle>"
            ],
            "updatePoint": {
                "line": 49,
                "column": 31
            },
            "line": 49,
            "code": "  it('does not forward bsPrefix', () => {\n    mount(\n      <DropdownToggle\n        bsPrefix=\"my-custom-bsPrefix\"\n        open={false}\n        title=\"bsClass\"\n        id=\"test-id\"\n      />,\n    ).assertSingle('button.my-custom-bsPrefix.btn');\n  });",
            "file": "DropdownToggleSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not throw an error with StrictMode",
            "suites": [
                "Fade"
            ],
            "updatePoint": {
                "line": 23,
                "column": 47
            },
            "line": 23,
            "code": "  it('should not throw an error with StrictMode', () => {\n    wrapper = mount(\n      <React.StrictMode>\n        <Component>Panel content</Component>\n      </React.StrictMode>,\n    );\n\n    wrapper.setState({ in: true });\n  });",
            "file": "FadeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should work with a class component as children",
            "suites": [
                "Fade"
            ],
            "updatePoint": {
                "line": 33,
                "column": 52
            },
            "line": 33,
            "code": "  it('should work with a class component as children', (done) => {\n    const InnerComponent = class extends React.Component {\n      render() {\n        return <div {...this.props}>test</div>;\n      }\n    };\n\n    function onEntering() {\n      assert.equal(wrapper.getDOMNode().className, 'fade show');\n      done();\n    }\n\n    wrapper = mount(\n      <Fade onEntering={onEntering}>\n        <InnerComponent />\n      </Fade>,\n    );\n\n    wrapper.setProps({ in: true });\n  });",
            "file": "FadeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should default to hidden",
            "suites": [
                "Fade"
            ],
            "updatePoint": {
                "line": 54,
                "column": 30
            },
            "line": 54,
            "code": "  it('Should default to hidden', () => {\n    wrapper = mount(<Component>Panel content</Component>);\n\n    assert.ok(wrapper.instance().fade.props.in === false);\n  });",
            "file": "FadeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should always have the \"fade\" class",
            "suites": [
                "Fade"
            ],
            "updatePoint": {
                "line": 60,
                "column": 41
            },
            "line": 60,
            "code": "  it('Should always have the \"fade\" class', () => {\n    wrapper = mount(<Component>Panel content</Component>);\n\n    assert.ok(wrapper.instance().fade.props.in === false);\n\n    assert.equal(wrapper.getDOMNode().className, 'fade');\n  });",
            "file": "FadeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should add \"in\" class when entering",
            "suites": [
                "Fade"
            ],
            "updatePoint": {
                "line": 68,
                "column": 41
            },
            "line": 68,
            "code": "  it('Should add \"in\" class when entering', (done) => {\n    wrapper = mount(<Component>Panel content</Component>);\n\n    function onEntering() {\n      assert.equal(wrapper.getDOMNode().className, 'fade show');\n      done();\n    }\n\n    assert.ok(wrapper.instance().fade.props.in === false);\n\n    wrapper.setState({ in: true, onEntering });\n  });",
            "file": "FadeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should remove \"in\" class when exiting",
            "suites": [
                "Fade"
            ],
            "updatePoint": {
                "line": 81,
                "column": 43
            },
            "line": 81,
            "code": "  it('Should remove \"in\" class when exiting', (done) => {\n    wrapper = mount(<Component in>Panel content</Component>);\n\n    function onExiting() {\n      assert.equal(wrapper.getDOMNode().className, 'fade');\n      done();\n    }\n\n    assert.equal(wrapper.getDOMNode().className, 'fade show');\n\n    wrapper.setState({ in: false, onExiting });\n  });",
            "file": "FadeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have div as default component",
            "suites": [
                "<Feedback>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 42
            },
            "line": 6,
            "code": "  it('Should have div as default component', () => {\n    mount(<Feedback />).assertSingle('div');\n  });",
            "file": "FeedbackSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render valid feedback",
            "suites": [
                "<Feedback>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 34
            },
            "line": 10,
            "code": "  it('Should render valid feedback', () => {\n    mount(<Feedback type=\"valid\" />).assertSingle('.valid-feedback');\n  });",
            "file": "FeedbackSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render invalid feedback",
            "suites": [
                "<Feedback>"
            ],
            "updatePoint": {
                "line": 14,
                "column": 36
            },
            "line": 14,
            "code": "  it('Should render invalid feedback', () => {\n    mount(<Feedback type=\"invalid\" />).assertSingle('.invalid-feedback');\n  });",
            "file": "FeedbackSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render valid feedback tooltip",
            "suites": [
                "<Feedback>"
            ],
            "updatePoint": {
                "line": 18,
                "column": 42
            },
            "line": 18,
            "code": "  it('Should render valid feedback tooltip', () => {\n    mount(<Feedback type=\"valid\" tooltip />).assertSingle('.valid-tooltip');\n  });",
            "file": "FeedbackSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render invalid feedback tooltip",
            "suites": [
                "<Feedback>"
            ],
            "updatePoint": {
                "line": 22,
                "column": 44
            },
            "line": 22,
            "code": "  it('Should render invalid feedback tooltip', () => {\n    mount(<Feedback type=\"invalid\" tooltip />).assertSingle('.invalid-tooltip');\n  });",
            "file": "FeedbackSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses \"figcaption\" by default",
            "suites": [
                "<Figure.Caption>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 34
            },
            "line": 6,
            "code": "  it('uses \"figcaption\" by default', () => {\n    mount(<Figure.Caption />).assertSingle('figcaption');\n  });",
            "file": "FigureCaptionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has \"figure-caption\" class",
            "suites": [
                "<Figure.Caption>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 32
            },
            "line": 10,
            "code": "  it('has \"figure-caption\" class', () => {\n    mount(<Figure.Caption>FigureCaption content</Figure.Caption>).assertSingle(\n      '.figure-caption',\n    );\n  });",
            "file": "FigureCaptionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should merge additional classes passed in",
            "suites": [
                "<Figure.Caption>"
            ],
            "updatePoint": {
                "line": 16,
                "column": 47
            },
            "line": 16,
            "code": "  it('Should merge additional classes passed in', () => {\n    mount(<Figure.Caption className=\"bob\" />).assertSingle(\n      '.bob.figure-caption',\n    );\n  });",
            "file": "FigureCaptionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "allows custom elements instead of \"figcaption\"",
            "suites": [
                "<Figure.Caption>"
            ],
            "updatePoint": {
                "line": 22,
                "column": 52
            },
            "line": 22,
            "code": "  it('allows custom elements instead of \"figcaption\"', () => {\n    mount(<Figure.Caption as=\"section\" />).assertSingle('section');\n  });",
            "file": "FigureCaptionSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be a Figure",
            "suites": [
                "Figure",
                "General"
            ],
            "updatePoint": {
                "line": 7,
                "column": 26
            },
            "line": 7,
            "code": "    it('should be a Figure', () => {\n      mount(<Figure />).assertSingle('figure');\n    });",
            "file": "FigureSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be an image",
            "suites": [
                "Figure",
                "Figure.Image"
            ],
            "updatePoint": {
                "line": 13,
                "column": 26
            },
            "line": 13,
            "code": "    it('should be an image', () => {\n      mount(<Figure.Image />).assertSingle('img');\n    });",
            "file": "FigureSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should provide src and alt prop",
            "suites": [
                "Figure",
                "Figure.Image"
            ],
            "updatePoint": {
                "line": 17,
                "column": 39
            },
            "line": 17,
            "code": "    it('should provide src and alt prop', () => {\n      mount(<Figure.Image src=\"image.jpg\" alt=\"this is alt\" />).assertSingle(\n        'img[src=\"image.jpg\"][alt=\"this is alt\"]',\n      );\n    });",
            "file": "FigureSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have correct class when fluid prop is set",
            "suites": [
                "Figure",
                "Figure.Image"
            ],
            "updatePoint": {
                "line": 23,
                "column": 56
            },
            "line": 23,
            "code": "    it('should have correct class when fluid prop is set', () => {\n      mount(<Figure.Image fluid />).assertSingle('.img-fluid');\n    });",
            "file": "FigureSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not override class when rounded prop is set",
            "suites": [
                "Figure",
                "Figure.Image"
            ],
            "updatePoint": {
                "line": 27,
                "column": 58
            },
            "line": 27,
            "code": "    it('should not override class when rounded prop is set', () => {\n      mount(<Figure.Image rounded fluid />).assertSingle(\n        '.figure-img.img-fluid.rounded',\n      );\n    });",
            "file": "FigureSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have correct class when rounded prop is set",
            "suites": [
                "Figure",
                "Figure.Image"
            ],
            "updatePoint": {
                "line": 33,
                "column": 58
            },
            "line": 33,
            "code": "    it('should have correct class when rounded prop is set', () => {\n      mount(<Figure.Image rounded />).assertSingle('.rounded');\n    });",
            "file": "FigureSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have correct class when roundedCircle prop is set",
            "suites": [
                "Figure",
                "Figure.Image"
            ],
            "updatePoint": {
                "line": 37,
                "column": 64
            },
            "line": 37,
            "code": "    it('should have correct class when roundedCircle prop is set', () => {\n      mount(<Figure.Image roundedCircle />).assertSingle('.rounded-circle');\n    });",
            "file": "FigureSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have correct class when thumbnail prop is set",
            "suites": [
                "Figure",
                "Figure.Image"
            ],
            "updatePoint": {
                "line": 41,
                "column": 60
            },
            "line": 41,
            "code": "    it('should have correct class when thumbnail prop is set', () => {\n      mount(<Figure.Image thumbnail />).assertSingle('.img-thumbnail');\n    });",
            "file": "FigureSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render correctly",
            "suites": [
                "<FloatingLabel>"
            ],
            "updatePoint": {
                "line": 7,
                "column": 29
            },
            "line": 7,
            "code": "  it('should render correctly', () => {\n    const wrapper = mount(\n      <FloatingLabel label=\"MyLabel\">\n        <Form.Control type=\"text\" />\n      </FloatingLabel>,\n    );\n\n    wrapper\n      .assertSingle('div.form-floating')\n      .assertSingle('input[type=\"text\"]');\n\n    wrapper.assertSingle('label').text().should.equal('MyLabel');\n  });",
            "file": "FloatingLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass controlId to input and label",
            "suites": [
                "<FloatingLabel>"
            ],
            "updatePoint": {
                "line": 21,
                "column": 46
            },
            "line": 21,
            "code": "  it('should pass controlId to input and label', () => {\n    const wrapper = mount(\n      <FloatingLabel label=\"MyLabel\" controlId=\"MyId\">\n        <Form.Control type=\"text\" />\n      </FloatingLabel>,\n    );\n\n    wrapper.assertSingle('input[id=\"MyId\"]');\n    wrapper.assertSingle('label[htmlFor=\"MyId\"]');\n  });",
            "file": "FloatingLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support \"as\"",
            "suites": [
                "<FloatingLabel>"
            ],
            "updatePoint": {
                "line": 32,
                "column": 25
            },
            "line": 32,
            "code": "  it('should support \"as\"', () => {\n    mount(\n      <FloatingLabel label=\"MyLabel\" as=\"span\">\n        <Form.Control type=\"text\" />\n      </FloatingLabel>,\n    ).assertSingle('span.form-floating');\n  });",
            "file": "FloatingLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render correctly",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 7,
                "column": 29
            },
            "line": 7,
            "code": "  it('should render correctly', () => {\n    let wrapper = mount(\n      <FormCheck\n        id=\"foo\"\n        name=\"foo\"\n        value=\"foo\"\n        defaultChecked\n        label=\"My label\"\n        className=\"my-checkbox\"\n      />,\n    );\n\n    wrapper\n      .assertSingle('div.form-check.my-checkbox')\n      .assertSingle('input[type=\"checkbox\"][name=\"foo\"][defaultChecked]');\n\n    wrapper\n      .assertSingle('label.form-check-label[htmlFor=\"foo\"]')\n      .text()\n      .should.equal('My label');\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render radio correctly",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 29,
                "column": 35
            },
            "line": 29,
            "code": "  it('should render radio correctly', () => {\n    let wrapper = mount(\n      <FormCheck\n        id=\"foo\"\n        name=\"foo\"\n        value=\"foo\"\n        type=\"radio\"\n        defaultChecked\n        className=\"my-radio\"\n        label=\"My label\"\n      />,\n    );\n\n    wrapper\n      .assertSingle('div.form-check.my-radio')\n      .assertSingle('input[type=\"radio\"][name=\"foo\"][defaultChecked]');\n\n    wrapper\n      .assertSingle('label.form-check-label[htmlFor=\"foo\"]')\n      .text()\n      .should.equal('My label');\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support inline",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 52,
                "column": 27
            },
            "line": 52,
            "code": "  it('should support inline', () => {\n    mount(<FormCheck inline label=\"My label\" />).assertSingle(\n      'div.form-check-inline',\n    );\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support isValid",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 58,
                "column": 28
            },
            "line": 58,
            "code": "  it('should support isValid', () => {\n    mount(<FormCheck isValid />).assertSingle('.is-valid');\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support isInvalid",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 62,
                "column": 30
            },
            "line": 62,
            "code": "  it('should support isInvalid', () => {\n    mount(<FormCheck isInvalid />).assertSingle('.is-invalid');\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support ref forwarding",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 66,
                "column": 35
            },
            "line": 66,
            "code": "  it('should support ref forwarding', () => {\n    class Container extends React.Component {\n      render() {\n        return (\n          <FormCheck\n            ref={(ref) => {\n              this.input = ref;\n            }}\n          />\n        );\n      }\n    }\n\n    const instance = mount(<Container />).instance();\n\n    expect(instance.input.tagName).to.equal('INPUT');\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not render bsPrefix if no label is specified",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 84,
                "column": 57
            },
            "line": 84,
            "code": "  it('should not render bsPrefix if no label is specified', () => {\n    const wrapper = mount(\n      <FormCheck id=\"foo\" name=\"foo\" value=\"foo\" type=\"radio\" />,\n    );\n    expect(wrapper.find('.form-check').length).to.equal(0);\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support switches",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 91,
                "column": 29
            },
            "line": 91,
            "code": "  it('should support switches', () => {\n    let wrapper = mount(\n      <FormCheck type=\"switch\" label=\"My label\" id=\"switch-id\" />,\n    );\n\n    wrapper\n      .assertSingle('div.form-check')\n      .assertSingle('div.form-switch')\n      .assertSingle('input[type=\"checkbox\"].form-check-input');\n\n    wrapper.assertSingle('label.form-check-label');\n    wrapper.unmount();\n\n    wrapper = mount(<Switch label=\"My label\" id=\"switch-id2\" />);\n\n    wrapper\n      .assertSingle('div.form-check')\n      .assertSingle('div.form-switch')\n      .assertSingle('input[type=\"checkbox\"].form-check-input');\n\n    wrapper.assertSingle('label.form-check-label');\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support \"as\"",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 114,
                "column": 25
            },
            "line": 114,
            "code": "  it('should support \"as\"', () => {\n    const Surrogate = ({ className = '', ...rest }) => (\n      <input className={`extraClass ${className}'`} {...rest} />\n    );\n    const wrapper = mount(<FormCheck as={Surrogate} />);\n    wrapper.assertSingle('input.extraClass[type=\"checkbox\"]');\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render valid feedback properly",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 122,
                "column": 43
            },
            "line": 122,
            "code": "  it('Should render valid feedback properly', () => {\n    const wrapper = mount(\n      <FormCheck label=\"My label\" feedbackType=\"valid\" feedback=\"test\" />,\n    );\n    const feedback = wrapper.find('Feedback');\n\n    expect(feedback.prop('type')).to.equal('valid');\n    expect(feedback.prop('tooltip')).to.be.false;\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render invalid feedback properly",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 132,
                "column": 45
            },
            "line": 132,
            "code": "  it('Should render invalid feedback properly', () => {\n    const wrapper = mount(\n      <FormCheck label=\"My label\" feedbackType=\"invalid\" feedback=\"test\" />,\n    );\n    const feedback = wrapper.find('Feedback');\n\n    expect(feedback.prop('type')).to.equal('invalid');\n    expect(feedback.prop('tooltip')).to.be.false;\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render valid feedback tooltip properly",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 142,
                "column": 51
            },
            "line": 142,
            "code": "  it('Should render valid feedback tooltip properly', () => {\n    const wrapper = mount(\n      <FormCheck\n        label=\"My label\"\n        feedbackType=\"valid\"\n        feedback=\"test\"\n        feedbackTooltip\n      />,\n    );\n    const feedback = wrapper.find('Feedback');\n\n    expect(feedback.prop('type')).to.equal('valid');\n    expect(feedback.prop('tooltip')).to.be.true;\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render invalid feedback tooltip properly",
            "suites": [
                "<FormCheck>"
            ],
            "updatePoint": {
                "line": 157,
                "column": 53
            },
            "line": 157,
            "code": "  it('Should render invalid feedback tooltip properly', () => {\n    const wrapper = mount(\n      <FormCheck\n        label=\"My label\"\n        feedbackType=\"invalid\"\n        feedback=\"test\"\n        feedbackTooltip\n      />,\n    );\n    const feedback = wrapper.find('Feedback');\n\n    expect(feedback.prop('type')).to.equal('invalid');\n    expect(feedback.prop('tooltip')).to.be.true;\n  });",
            "file": "FormCheckSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render default success",
            "suites": [
                "<Feedback>"
            ],
            "updatePoint": {
                "line": 7,
                "column": 35
            },
            "line": 7,
            "code": "  it('should render default success', () => {\n    mount(\n      <FormGroup>\n        <FormControl isValid />\n        <FormControl.Feedback type=\"valid\" />\n      </FormGroup>,\n    ).assertSingle('.valid-feedback');\n  });",
            "file": "FormControlFeedbackSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render default error",
            "suites": [
                "<Feedback>"
            ],
            "updatePoint": {
                "line": 16,
                "column": 33
            },
            "line": 16,
            "code": "  it('should render default error', () => {\n    mount(\n      <FormGroup>\n        <FormControl isInvalid />\n        <FormControl.Feedback type=\"invalid\" />\n      </FormGroup>,\n    ).assertSingle('.invalid-feedback');\n  });",
            "file": "FormControlFeedbackSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render custom component",
            "suites": [
                "<Feedback>"
            ],
            "updatePoint": {
                "line": 25,
                "column": 36
            },
            "line": 25,
            "code": "  it('should render custom component', () => {\n    function MyComponent(props) {\n      return <div {...props} />;\n    }\n\n    mount(<FormControl.Feedback as={MyComponent} />).assertSingle(\n      'MyComponent.valid-feedback',\n    );\n  });",
            "file": "FormControlFeedbackSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render correctly",
            "suites": [
                "<FormControl>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 29
            },
            "line": 10,
            "code": "  it('should render correctly', () => {\n    mount(\n      <FormControl type=\"text\" id=\"foo\" name=\"bar\" className=\"my-control\" />,\n    ).assertSingle('input#foo.form-control.my-control[name=\"bar\"]');\n  });",
            "file": "FormControlSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support textarea",
            "suites": [
                "<FormControl>"
            ],
            "updatePoint": {
                "line": 16,
                "column": 29
            },
            "line": 16,
            "code": "  it('should support textarea', () => {\n    mount(<FormControl as=\"textarea\" />).assertSingle('textarea.form-control');\n  });",
            "file": "FormControlSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support plaintext inputs",
            "suites": [
                "<FormControl>"
            ],
            "updatePoint": {
                "line": 20,
                "column": 37
            },
            "line": 20,
            "code": "  it('should support plaintext inputs', () => {\n    mount(<FormControl plaintext />).assertSingle(\n      'input.form-control-plaintext',\n    );\n  });",
            "file": "FormControlSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support type=color",
            "suites": [
                "<FormControl>"
            ],
            "updatePoint": {
                "line": 26,
                "column": 31
            },
            "line": 26,
            "code": "  it('should support type=color', () => {\n    mount(<FormControl type=\"color\" />).assertSingle(\n      'input.form-control.form-control-color',\n    );\n  });",
            "file": "FormControlSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use controlId for id",
            "suites": [
                "<FormControl>"
            ],
            "updatePoint": {
                "line": 32,
                "column": 33
            },
            "line": 32,
            "code": "  it('should use controlId for id', () => {\n    mount(\n      <FormGroup controlId=\"foo\">\n        <FormControl type=\"text\" />\n      </FormGroup>,\n    ).assertSingle('input#foo.form-control');\n  });",
            "file": "FormControlSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should prefer explicit id",
            "suites": [
                "<FormControl>"
            ],
            "updatePoint": {
                "line": 40,
                "column": 31
            },
            "line": 40,
            "code": "  it('should prefer explicit id', () => {\n    shouldWarn('ignored');\n\n    mount(\n      <FormGroup controlId=\"foo\">\n        <FormControl type=\"text\" id=\"bar\" />\n      </FormGroup>,\n    ).assertSingle('input#bar.form-control');\n  });",
            "file": "FormControlSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support ref forwarding",
            "suites": [
                "<FormControl>"
            ],
            "updatePoint": {
                "line": 50,
                "column": 35
            },
            "line": 50,
            "code": "  it('should support ref forwarding', () => {\n    class Container extends React.Component {\n      render() {\n        return (\n          <FormGroup controlId=\"foo\">\n            <FormControl\n              type=\"text\"\n              ref={(ref) => {\n                this.input = ref;\n              }}\n            />\n          </FormGroup>\n        );\n      }\n    }\n\n    const instance = mount(<Container />).instance();\n    expect(instance.input.tagName).to.equal('INPUT');\n  });",
            "file": "FormControlSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly display size of FormControl",
            "suites": [
                "<FormControl>"
            ],
            "updatePoint": {
                "line": 70,
                "column": 49
            },
            "line": 70,
            "code": "  it('should properly display size of FormControl', () => {\n    mount(<FormControl type=\"text\" size=\"lg\" />).assertSingle(\n      'input.form-control.form-control-lg',\n    );\n  });",
            "file": "FormControlSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly display html size of FormControl",
            "suites": [
                "<FormControl>"
            ],
            "updatePoint": {
                "line": 76,
                "column": 54
            },
            "line": 76,
            "code": "  it('should properly display html size of FormControl', () => {\n    const wrapper = mount(<FormControl type=\"text\" htmlSize={42} />);\n\n    expect(wrapper.find('input').props().size).to.eq(42);\n  });",
            "file": "FormControlSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have input as default component",
            "suites": [
                "<FormControl>"
            ],
            "updatePoint": {
                "line": 82,
                "column": 44
            },
            "line": 82,
            "code": "  it('Should have input as default component', () => {\n    mount(<FormControl />).assertSingle('input');\n  });",
            "file": "FormControlSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support numbers as values",
            "suites": [
                "<FormControl>"
            ],
            "updatePoint": {
                "line": 86,
                "column": 38
            },
            "line": 86,
            "code": "  it('should support numbers as values', () => {\n    const wrapper = mount(<FormControl value={10} onChange={() => {}} />);\n\n    expect(wrapper.find('input').props().value).to.eq(10);\n  });",
            "file": "FormControlSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support an array of strings as values",
            "suites": [
                "<FormControl>"
            ],
            "updatePoint": {
                "line": 92,
                "column": 50
            },
            "line": 92,
            "code": "  it('should support an array of strings as values', () => {\n    const wrapper = mount(\n      <FormControl value={['hello', 'world']} onChange={() => {}} />,\n    );\n\n    expect(wrapper.find('input').props().value).to.eql(['hello', 'world']);\n  });",
            "file": "FormControlSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders children",
            "suites": [
                "<FormGroup>"
            ],
            "updatePoint": {
                "line": 8,
                "column": 22
            },
            "line": 8,
            "code": "  it('renders children', () => {\n    mount(\n      <FormGroup>\n        <span className=\"child1\" />\n        <span className=\"child2\" />\n      </FormGroup>,\n    ).assertSingle('.child1');\n  });",
            "file": "FormGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "provided controlId to label and control",
            "suites": [
                "<FormGroup>"
            ],
            "updatePoint": {
                "line": 17,
                "column": 45
            },
            "line": 17,
            "code": "  it('provided controlId to label and control', () => {\n    let wrapper = mount(\n      <FormGroup controlId=\"my-control\">\n        <div>\n          <FormLabel>label</FormLabel>\n          <FormControl />\n        </div>\n      </FormGroup>,\n    );\n\n    wrapper.assertSingle('label[htmlFor=\"my-control\"]');\n    wrapper.assertSingle('input[id=\"my-control\"]');\n  });",
            "file": "FormGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have div as default component",
            "suites": [
                "<FormGroup>"
            ],
            "updatePoint": {
                "line": 31,
                "column": 42
            },
            "line": 31,
            "code": "  it('Should have div as default component', () => {\n    const wrapper = mount(<FormGroup />);\n    expect(wrapper.find('div').length).to.equal(1);\n  });",
            "file": "FormGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render correctly",
            "suites": [
                "<FormLabel>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 29
            },
            "line": 10,
            "code": "  it('should render correctly', () => {\n    mount(\n      <FormLabel id=\"foo\" name=\"bar\" className=\"my-control\" />,\n    ).assertSingle('label#foo.form-label.my-control[name=\"bar\"]');\n  });",
            "file": "FormLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use controlId for htmlFor",
            "suites": [
                "<FormLabel>"
            ],
            "updatePoint": {
                "line": 16,
                "column": 38
            },
            "line": 16,
            "code": "  it('should use controlId for htmlFor', () => {\n    mount(\n      <FormGroup controlId=\"foo\">\n        <FormLabel type=\"text\" />\n      </FormGroup>,\n    ).assertSingle('label[htmlFor=\"foo\"].form-label');\n  });",
            "file": "FormLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render as a Col",
            "suites": [
                "<FormLabel>"
            ],
            "updatePoint": {
                "line": 23,
                "column": 28
            },
            "line": 23,
            "code": "  it('should render as a Col', () => {\n    mount(\n      <FormLabel column sm={4}>\n        Label\n      </FormLabel>,\n    ).assertSingle('label.col-sm-4.col-form-label');\n  });",
            "file": "FormLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use controlId for htmlFor when render as Col",
            "suites": [
                "<FormLabel>"
            ],
            "updatePoint": {
                "line": 30,
                "column": 57
            },
            "line": 30,
            "code": "  it('should use controlId for htmlFor when render as Col', () => {\n    mount(\n      <FormGroup controlId=\"foo\">\n        <FormLabel column sm={4} />\n      </FormGroup>,\n    ).assertSingle('label[htmlFor=\"foo\"].col-sm-4.col-form-label');\n  });",
            "file": "FormLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should respect visuallyHidden",
            "suites": [
                "<FormLabel>"
            ],
            "updatePoint": {
                "line": 38,
                "column": 35
            },
            "line": 38,
            "code": "  it('should respect visuallyHidden', () => {\n    mount(<FormLabel visuallyHidden>Label</FormLabel>).assertSingle(\n      'label.form-label.visually-hidden',\n    );\n  });",
            "file": "FormLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should prefer explicit htmlFor",
            "suites": [
                "<FormLabel>"
            ],
            "updatePoint": {
                "line": 44,
                "column": 36
            },
            "line": 44,
            "code": "  it('should prefer explicit htmlFor', () => {\n    shouldWarn('ignored');\n\n    mount(\n      <FormGroup controlId=\"foo\">\n        <FormLabel type=\"text\" htmlFor=\"bar\" />\n      </FormGroup>,\n    ).assertSingle('label[htmlFor=\"bar\"]');\n  });",
            "file": "FormLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support ref forwarding",
            "suites": [
                "<FormLabel>"
            ],
            "updatePoint": {
                "line": 54,
                "column": 35
            },
            "line": 54,
            "code": "  it('should support ref forwarding', () => {\n    class Container extends React.Component {\n      render() {\n        return (\n          <FormGroup controlId=\"foo\">\n            <FormLabel\n              type=\"text\"\n              ref={(ref) => {\n                this.input = ref;\n              }}\n            />\n          </FormGroup>\n        );\n      }\n    }\n\n    const instance = mount(<Container />).instance();\n    expect(instance.input.tagName).to.equal('LABEL');\n  });",
            "file": "FormLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support ref forwarding when rendered as a Col",
            "suites": [
                "<FormLabel>"
            ],
            "updatePoint": {
                "line": 74,
                "column": 58
            },
            "line": 74,
            "code": "  it('should support ref forwarding when rendered as a Col', () => {\n    class Container extends React.Component {\n      render() {\n        return (\n          <FormGroup controlId=\"foo\">\n            <FormLabel\n              type=\"text\"\n              column\n              ref={(ref) => {\n                this.input = ref;\n              }}\n            />\n          </FormGroup>\n        );\n      }\n    }\n\n    const instance = mount(<Container />).instance();\n    expect(instance.input.tagName).to.equal('LABEL');\n  });",
            "file": "FormLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts as prop",
            "suites": [
                "<FormLabel>"
            ],
            "updatePoint": {
                "line": 95,
                "column": 21
            },
            "line": 95,
            "code": "  it('accepts as prop', () => {\n    mount(<FormLabel as=\"legend\">body</FormLabel>).assertSingle('legend');\n  });",
            "file": "FormLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should properly size itself when rendered as a Col",
            "suites": [
                "<FormLabel>"
            ],
            "updatePoint": {
                "line": 99,
                "column": 56
            },
            "line": 99,
            "code": "  it('should properly size itself when rendered as a Col', () => {\n    mount(<FormLabel column=\"sm\">Label</FormLabel>).assertSingle(\n      'label.col-form-label.col-form-label-sm',\n    );\n    mount(<FormLabel column>Label</FormLabel>).assertSingle(\n      'label.col-form-label',\n    );\n    mount(<FormLabel column=\"lg\">Label</FormLabel>).assertSingle(\n      'label.col-form-label.col-form-label-lg',\n    );\n    let labelComponent = mount(<FormLabel>Label</FormLabel>);\n    labelComponent.assertNone('label.col-form-label');\n    labelComponent.assertNone('label.col-form-label-sm');\n    labelComponent.assertNone('label.col-form-label-lg');\n  });",
            "file": "FormLabelSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render correctly",
            "suites": [
                "<FormRange>"
            ],
            "updatePoint": {
                "line": 7,
                "column": 29
            },
            "line": 7,
            "code": "  it('should render correctly', () => {\n    mount(\n      <FormRange id=\"foo\" name=\"bar\" className=\"my-control\" />,\n    ).assertSingle('input#foo.form-range.my-control[type=\"range\"][name=\"bar\"]');\n  });",
            "file": "FormRangeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render controlId as id correctly",
            "suites": [
                "<FormRange>"
            ],
            "updatePoint": {
                "line": 13,
                "column": 45
            },
            "line": 13,
            "code": "  it('should render controlId as id correctly', () => {\n    mount(\n      <FormGroup controlId=\"test-id\">\n        <FormRange />\n      </FormGroup>,\n    ).assertSingle('.form-range#test-id');\n  });",
            "file": "FormRangeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should override controlId correctly",
            "suites": [
                "<FormRange>"
            ],
            "updatePoint": {
                "line": 21,
                "column": 41
            },
            "line": 21,
            "code": "  it('should override controlId correctly', () => {\n    mount(\n      <FormGroup controlId=\"test-id\">\n        <FormRange id=\"overridden-id\" />\n      </FormGroup>,\n    ).assertSingle('.form-range#overridden-id:not(#test-id)');\n  });",
            "file": "FormRangeSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render correctly",
            "suites": [
                "<FormSelect>"
            ],
            "updatePoint": {
                "line": 7,
                "column": 29
            },
            "line": 7,
            "code": "  it('should render correctly', () => {\n    mount(\n      <FormSelect id=\"foo\" name=\"bar\" className=\"my-control\" />,\n    ).assertSingle('select#foo.form-select.my-control[name=\"bar\"]');\n  });",
            "file": "FormSelectSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render size correctly",
            "suites": [
                "<FormSelect>"
            ],
            "updatePoint": {
                "line": 13,
                "column": 34
            },
            "line": 13,
            "code": "  it('should render size correctly', () => {\n    mount(<FormSelect size=\"lg\" />).assertSingle(\n      'select.form-select.form-select-lg',\n    );\n  });",
            "file": "FormSelectSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render htmlSize correctly",
            "suites": [
                "<FormSelect>"
            ],
            "updatePoint": {
                "line": 19,
                "column": 38
            },
            "line": 19,
            "code": "  it('should render htmlSize correctly', () => {\n    const wrapper = mount(<FormSelect htmlSize={3} />);\n\n    expect(wrapper.find('select').props().size).to.eq(3);\n  });",
            "file": "FormSelectSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render isValid correctly",
            "suites": [
                "<FormSelect>"
            ],
            "updatePoint": {
                "line": 25,
                "column": 37
            },
            "line": 25,
            "code": "  it('should render isValid correctly', () => {\n    mount(<FormSelect isValid />).assertSingle('select.form-select.is-valid');\n  });",
            "file": "FormSelectSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render isInvalid correctly",
            "suites": [
                "<FormSelect>"
            ],
            "updatePoint": {
                "line": 29,
                "column": 39
            },
            "line": 29,
            "code": "  it('should render isInvalid correctly', () => {\n    mount(<FormSelect isInvalid />).assertSingle(\n      'select.form-select.is-invalid',\n    );\n  });",
            "file": "FormSelectSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render controlId correctly",
            "suites": [
                "<FormSelect>"
            ],
            "updatePoint": {
                "line": 35,
                "column": 39
            },
            "line": 35,
            "code": "  it('should render controlId correctly', () => {\n    mount(\n      <FormGroup controlId=\"test-id\">\n        <FormSelect>\n          <option>1</option>\n        </FormSelect>\n      </FormGroup>,\n    ).assertSingle('.form-select#test-id');\n  });",
            "file": "FormSelectSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should override controlId correctly",
            "suites": [
                "<FormSelect>"
            ],
            "updatePoint": {
                "line": 45,
                "column": 41
            },
            "line": 45,
            "code": "  it('should override controlId correctly', () => {\n    mount(\n      <FormGroup controlId=\"test-id\">\n        <FormSelect id=\"overridden-id\">\n          <option>1</option>\n        </FormSelect>\n      </FormGroup>,\n    ).assertSingle('.form-select#overridden-id:not(#test-id)');\n  });",
            "file": "FormSelectSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support custom `as`",
            "suites": [
                "<Form>"
            ],
            "updatePoint": {
                "line": 7,
                "column": 32
            },
            "line": 7,
            "code": "  it('should support custom `as`', () => {\n    mount(\n      <Form as=\"fieldset\" className=\"my-form\">\n        <FormGroup />\n      </Form>,\n    )\n      .assertSingle('fieldset.my-form')\n      .assertSingle('FormGroup');\n  });",
            "file": "FormSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have form as default component",
            "suites": [
                "<Form>"
            ],
            "updatePoint": {
                "line": 17,
                "column": 43
            },
            "line": 17,
            "code": "  it('Should have form as default component', () => {\n    mount(<Form />).assertSingle('form');\n  });",
            "file": "FormSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have form class `was-validated` if validated",
            "suites": [
                "<Form>"
            ],
            "updatePoint": {
                "line": 21,
                "column": 57
            },
            "line": 21,
            "code": "  it('should have form class `was-validated` if validated', () => {\n    mount(<Form validated />).assertSingle('form.was-validated');\n  });",
            "file": "FormSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render correctly",
            "suites": [
                "<FormText>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 29
            },
            "line": 6,
            "code": "  it('should render correctly', () => {\n    expect(\n      mount(\n        <FormText id=\"foo\" className=\"my-form-text\">\n          Help contents\n        </FormText>,\n      )\n        .assertSingle('#foo.form-text.my-form-text')\n        .text(),\n    ).to.equal('Help contents');\n  });",
            "file": "FormTextSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have small as default component",
            "suites": [
                "<FormText>"
            ],
            "updatePoint": {
                "line": 18,
                "column": 44
            },
            "line": 18,
            "code": "  it('Should have small as default component', () => {\n    mount(<FormText />).assertSingle('small');\n  });",
            "file": "FormTextSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have \"form-text\" & \"text-muted\" class",
            "suites": [
                "<FormText>"
            ],
            "updatePoint": {
                "line": 22,
                "column": 50
            },
            "line": 22,
            "code": "  it('Should have \"form-text\" & \"text-muted\" class', () => {\n    expect(\n      mount(<FormText muted />)\n        .find('small.form-text')\n        .hasClass('text-muted'),\n    ).to.be.true;\n  });",
            "file": "FormTextSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return start for left",
            "suites": [
                "Helpers",
                "getOverlayDirection"
            ],
            "updatePoint": {
                "line": 5,
                "column": 36
            },
            "line": 5,
            "code": "    it('should return start for left', () => {\n      getOverlayDirection('left', false).should.equal('start');\n    });",
            "file": "helpersSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return end for left in RTL",
            "suites": [
                "Helpers",
                "getOverlayDirection"
            ],
            "updatePoint": {
                "line": 9,
                "column": 41
            },
            "line": 9,
            "code": "    it('should return end for left in RTL', () => {\n      getOverlayDirection('left', true).should.equal('end');\n    });",
            "file": "helpersSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return end for right",
            "suites": [
                "Helpers",
                "getOverlayDirection"
            ],
            "updatePoint": {
                "line": 13,
                "column": 35
            },
            "line": 13,
            "code": "    it('should return end for right', () => {\n      getOverlayDirection('right', false).should.equal('end');\n    });",
            "file": "helpersSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return start for right in RTL",
            "suites": [
                "Helpers",
                "getOverlayDirection"
            ],
            "updatePoint": {
                "line": 17,
                "column": 44
            },
            "line": 17,
            "code": "    it('should return start for right in RTL', () => {\n      getOverlayDirection('right', true).should.equal('start');\n    });",
            "file": "helpersSpec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be an image",
            "suites": [
                "Image"
            ],
            "updatePoint": {
                "line": 6,
                "column": 24
            },
            "line": 6,
            "code": "  it('should be an image', () => {\n    mount(<Image />).assertSingle('img');\n  });",
            "file": "ImageSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should provide src and alt prop",
            "suites": [
                "Image"
            ],
            "updatePoint": {
                "line": 10,
                "column": 37
            },
            "line": 10,
            "code": "  it('should provide src and alt prop', () => {\n    mount(<Image src=\"image.jpg\" alt=\"this is alt\" />).assertSingle(\n      'img[src=\"image.jpg\"][alt=\"this is alt\"]',\n    );\n  });",
            "file": "ImageSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have correct class when fluid prop is set",
            "suites": [
                "Image"
            ],
            "updatePoint": {
                "line": 16,
                "column": 54
            },
            "line": 16,
            "code": "  it('should have correct class when fluid prop is set', () => {\n    mount(<Image fluid />).assertSingle('.img-fluid');\n  });",
            "file": "ImageSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not override class when rounded prop is set",
            "suites": [
                "Image"
            ],
            "updatePoint": {
                "line": 20,
                "column": 56
            },
            "line": 20,
            "code": "  it('should not override class when rounded prop is set', () => {\n    mount(<Image rounded fluid />).assertSingle('.img-fluid.rounded');\n  });",
            "file": "ImageSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have correct class when rounded prop is set",
            "suites": [
                "Image"
            ],
            "updatePoint": {
                "line": 24,
                "column": 56
            },
            "line": 24,
            "code": "  it('should have correct class when rounded prop is set', () => {\n    mount(<Image rounded />).assertSingle('.rounded');\n  });",
            "file": "ImageSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have correct class when roundedCircle prop is set",
            "suites": [
                "Image"
            ],
            "updatePoint": {
                "line": 28,
                "column": 62
            },
            "line": 28,
            "code": "  it('should have correct class when roundedCircle prop is set', () => {\n    mount(<Image roundedCircle />).assertSingle('.rounded-circle');\n  });",
            "file": "ImageSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have correct class when thumbnail prop is set",
            "suites": [
                "Image"
            ],
            "updatePoint": {
                "line": 32,
                "column": 58
            },
            "line": 32,
            "code": "  it('should have correct class when thumbnail prop is set', () => {\n    mount(<Image thumbnail />).assertSingle('.img-thumbnail');\n  });",
            "file": "ImageSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not be production for React console warnings",
            "suites": [
                "Process environment for tests"
            ],
            "updatePoint": {
                "line": 73,
                "column": 57
            },
            "line": 73,
            "code": "  it('should not be production for React console warnings', () => {\n    expect(process.env.NODE_ENV).to.not.equal('production');\n  });",
            "file": "index.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have div as default component",
            "suites": [
                "<InputGroup>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 42
            },
            "line": 6,
            "code": "  it('Should have div as default component', () => {\n    const wrapper = mount(<InputGroup />);\n    expect(wrapper.find('div').length).to.equal(1);\n  });",
            "file": "InputGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render size correctly",
            "suites": [
                "<InputGroup>"
            ],
            "updatePoint": {
                "line": 11,
                "column": 34
            },
            "line": 11,
            "code": "  it('Should render size correctly', () => {\n    mount(<InputGroup size=\"sm\" />).assertSingle('.input-group-sm');\n  });",
            "file": "InputGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render hasValidation correctly",
            "suites": [
                "<InputGroup>"
            ],
            "updatePoint": {
                "line": 15,
                "column": 43
            },
            "line": 15,
            "code": "  it('Should render hasValidation correctly', () => {\n    mount(<InputGroup hasValidation />).assertSingle('.has-validation');\n  });",
            "file": "InputGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should forward props to underlying input element",
            "suites": [
                "<InputGroup>",
                "<Checkbox>"
            ],
            "updatePoint": {
                "line": 20,
                "column": 56
            },
            "line": 20,
            "code": "    it('Should forward props to underlying input element', () => {\n      const name = 'foobar';\n      const wrapper = mount(<InputGroup.Checkbox name={name} />);\n      const input = wrapper.find('FormCheckInput');\n      expect(input.length).to.equal(1);\n      expect(input.prop('name')).to.equal(name);\n    });",
            "file": "InputGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should forward props to underlying input element",
            "suites": [
                "<InputGroup>",
                "<Radio>"
            ],
            "updatePoint": {
                "line": 30,
                "column": 56
            },
            "line": 30,
            "code": "    it('Should forward props to underlying input element', () => {\n      const name = 'foobar';\n      const wrapper = mount(<InputGroup.Radio name={name} />);\n      const input = wrapper.find('FormCheckInput');\n      expect(input.length).to.equal(1);\n      expect(input.prop('name')).to.equal(name);\n    });",
            "file": "InputGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should output a div",
            "suites": [
                "<ListGroupItem>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 25
            },
            "line": 6,
            "code": "  it('should output a div', () => {\n    mount(<ListGroupItem />).assertSingle('div.list-group-item');\n  });",
            "file": "ListGroupItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts variants",
            "suites": [
                "<ListGroupItem>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 22
            },
            "line": 10,
            "code": "  it('accepts variants', () => {\n    mount(<ListGroupItem variant=\"success\" />).assertSingle(\n      'div.list-group-item.list-group-item-success',\n    );\n  });",
            "file": "ListGroupItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts active",
            "suites": [
                "<ListGroupItem>"
            ],
            "updatePoint": {
                "line": 16,
                "column": 20
            },
            "line": 16,
            "code": "  it('accepts active', () => {\n    mount(<ListGroupItem active />).assertSingle('div.list-group-item.active');\n  });",
            "file": "ListGroupItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts disabled",
            "suites": [
                "<ListGroupItem>"
            ],
            "updatePoint": {
                "line": 20,
                "column": 22
            },
            "line": 20,
            "code": "  it('accepts disabled', () => {\n    mount(<ListGroupItem disabled />).assertSingle(\n      'div.list-group-item.disabled',\n    );\n  });",
            "file": "ListGroupItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts as prop",
            "suites": [
                "<ListGroupItem>"
            ],
            "updatePoint": {
                "line": 26,
                "column": 21
            },
            "line": 26,
            "code": "  it('accepts as prop', () => {\n    mount(<ListGroupItem as=\"span\" />).assertSingle('span.list-group-item');\n  });",
            "file": "ListGroupItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not be focusable when disabled",
            "suites": [
                "<ListGroupItem>"
            ],
            "updatePoint": {
                "line": 30,
                "column": 43
            },
            "line": 30,
            "code": "  it('should not be focusable when disabled', () => {\n    const wrapper = mount(<ListGroupItem disabled />);\n    const node = wrapper.find('.list-group-item').first().getDOMNode();\n    expect(node.getAttribute('tabindex')).to.equal('-1');\n  });",
            "file": "ListGroupItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should respect user-specified tabIndex",
            "suites": [
                "<ListGroupItem>"
            ],
            "updatePoint": {
                "line": 36,
                "column": 44
            },
            "line": 36,
            "code": "  it('should respect user-specified tabIndex', () => {\n    const wrapper = mount(<ListGroupItem disabled tabIndex={4} />);\n    const node = wrapper.find('.list-group-item').first().getDOMNode();\n    expect(node.getAttribute('tabindex')).to.equal('4');\n  });",
            "file": "ListGroupItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders a button",
            "suites": [
                "<ListGroupItem>",
                "actions"
            ],
            "updatePoint": {
                "line": 43,
                "column": 24
            },
            "line": 43,
            "code": "    it('renders a button', () => {\n      mount(<ListGroupItem action />).assertSingle(\n        'button.list-group-item.list-group-item-action',\n      );\n    });",
            "file": "ListGroupItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders an anchor",
            "suites": [
                "<ListGroupItem>",
                "actions"
            ],
            "updatePoint": {
                "line": 48,
                "column": 25
            },
            "line": 48,
            "code": "    it('renders an anchor', () => {\n      mount(<ListGroupItem action href=\"/foo\" />).assertSingle(\n        'a.list-group-item.list-group-item-action[href=\"/foo\"]',\n      );\n    });",
            "file": "ListGroupItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should call on click",
            "suites": [
                "<ListGroupItem>",
                "onClick"
            ],
            "updatePoint": {
                "line": 56,
                "column": 28
            },
            "line": 56,
            "code": "    it('Should call on click', () => {\n      const listGroupItemOnClick = sinon.spy();\n      const wrapper = mount(<ListGroupItem onClick={listGroupItemOnClick} />);\n      wrapper.find('div.list-group-item').simulate('click');\n      expect(listGroupItemOnClick).to.be.calledOnce;\n    });",
            "file": "ListGroupItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not call if disabled",
            "suites": [
                "<ListGroupItem>",
                "onClick"
            ],
            "updatePoint": {
                "line": 63,
                "column": 35
            },
            "line": 63,
            "code": "    it('Should not call if disabled', () => {\n      const listGroupItemOnClick = sinon.spy();\n      const wrapper = mount(\n        <ListGroupItem onClick={listGroupItemOnClick} disabled />,\n      );\n      wrapper.find('div.list-group-item').simulate('click');\n      expect(listGroupItemOnClick).not.to.have.been.called;\n    });",
            "file": "ListGroupItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render correctly \"list-group\"",
            "suites": [
                "<ListGroup>"
            ],
            "updatePoint": {
                "line": 9,
                "column": 42
            },
            "line": 9,
            "code": "  it('Should render correctly \"list-group\"', () => {\n    mount(<ListGroup />).assertSingle('div.list-group');\n  });",
            "file": "ListGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts <ListGroup.Item> children",
            "suites": [
                "<ListGroup>"
            ],
            "updatePoint": {
                "line": 13,
                "column": 39
            },
            "line": 13,
            "code": "  it('accepts <ListGroup.Item> children', () => {\n    mount(\n      <ListGroup>\n        <ListGroup.Item>hey!</ListGroup.Item>\n      </ListGroup>,\n    ).assertSingle('div.list-group-item');\n  });",
            "file": "ListGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts variant",
            "suites": [
                "<ListGroup>"
            ],
            "updatePoint": {
                "line": 21,
                "column": 21
            },
            "line": 21,
            "code": "  it('accepts variant', () => {\n    mount(<ListGroup variant=\"flush\" />).assertSingle(\n      'div.list-group.list-group-flush',\n    );\n  });",
            "file": "ListGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts global horizontal",
            "suites": [
                "<ListGroup>"
            ],
            "updatePoint": {
                "line": 27,
                "column": 31
            },
            "line": 27,
            "code": "  it('accepts global horizontal', () => {\n    mount(<ListGroup horizontal />).assertSingle(\n      'div.list-group.list-group-horizontal',\n    );\n  });",
            "file": "ListGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts responsive horizontal",
            "suites": [
                "<ListGroup>"
            ],
            "updatePoint": {
                "line": 32,
                "column": 35
            },
            "line": 32,
            "code": "  it('accepts responsive horizontal', () => {\n    mount(<ListGroup horizontal=\"sm\" />).assertSingle(\n      'div.list-group.list-group-horizontal-sm',\n    );\n    mount(<ListGroup horizontal=\"md\" />).assertSingle(\n      'div.list-group.list-group-horizontal-md',\n    );\n    mount(<ListGroup horizontal=\"lg\" />).assertSingle(\n      'div.list-group.list-group-horizontal-lg',\n    );\n    mount(<ListGroup horizontal=\"xl\" />).assertSingle(\n      'div.list-group.list-group-horizontal-xl',\n    );\n  });",
            "file": "ListGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "throws a warning if flush and horizontal are used",
            "suites": [
                "<ListGroup>"
            ],
            "updatePoint": {
                "line": 47,
                "column": 55
            },
            "line": 47,
            "code": "  it('throws a warning if flush and horizontal are used', () => {\n    shouldWarn('together');\n    mount(<ListGroup horizontal variant=\"flush\" />);\n  });",
            "file": "ListGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "accepts as prop",
            "suites": [
                "<ListGroup>"
            ],
            "updatePoint": {
                "line": 52,
                "column": 21
            },
            "line": 52,
            "code": "  it('accepts as prop', () => {\n    mount(<ListGroup as=\"ul\" />).assertSingle('ul.list-group');\n  });",
            "file": "ListGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set active class on list item if activeKey set on parent",
            "suites": [
                "<ListGroup>"
            ],
            "updatePoint": {
                "line": 56,
                "column": 69
            },
            "line": 56,
            "code": "  it('should set active class on list item if activeKey set on parent', () => {\n    const { getByTestId } = render(\n      <ListGroup activeKey=\"1\">\n        <ListGroup.Item eventKey=\"1\" data-testid=\"list-item\">\n          test\n        </ListGroup.Item>\n      </ListGroup>,\n    );\n\n    getByTestId('list-item').classList.contains('active').should.be.true;\n  });",
            "file": "ListGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add numbered class",
            "suites": [
                "<ListGroup>"
            ],
            "updatePoint": {
                "line": 68,
                "column": 31
            },
            "line": 68,
            "code": "  it('should add numbered class', () => {\n    const { getByTestId } = render(\n      <ListGroup activeKey=\"1\" numbered data-testid=\"list-group\">\n        <ListGroup.Item eventKey=\"1\">test</ListGroup.Item>\n      </ListGroup>,\n    );\n\n    getByTestId('list-group').classList.contains('list-group-numbered').should\n      .be.true;\n  });",
            "file": "ListGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses \"div\" by default",
            "suites": [
                "Modal.Body"
            ],
            "updatePoint": {
                "line": 6,
                "column": 27
            },
            "line": 6,
            "code": "  it('uses \"div\" by default', () => {\n    mount(\n      <Modal.Body className=\"custom-class\">\n        <strong>Content</strong>\n      </Modal.Body>,\n    ).assertSingle('div.modal-body.custom-class strong');\n  });",
            "file": "ModalBodySpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow custom elements instead of \"div\"",
            "suites": [
                "Modal.Body"
            ],
            "updatePoint": {
                "line": 14,
                "column": 51
            },
            "line": 14,
            "code": "  it('should allow custom elements instead of \"div\"', () => {\n    mount(<Modal.Body as=\"section\" />).assertSingle('section.modal-body');\n  });",
            "file": "ModalBodySpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses \"div\" by default",
            "suites": [
                "Modal.Footer"
            ],
            "updatePoint": {
                "line": 6,
                "column": 27
            },
            "line": 6,
            "code": "  it('uses \"div\" by default', () => {\n    mount(\n      <Modal.Footer className=\"custom-class\">\n        <strong>Content</strong>\n      </Modal.Footer>,\n    ).assertSingle('div.modal-footer.custom-class strong');\n  });",
            "file": "ModalFooterSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow custom elements instead of \"div\"",
            "suites": [
                "Modal.Footer"
            ],
            "updatePoint": {
                "line": 14,
                "column": 51
            },
            "line": 14,
            "code": "  it('should allow custom elements instead of \"div\"', () => {\n    mount(<Modal.Footer as=\"section\" />).assertSingle('section.modal-footer');\n  });",
            "file": "ModalFooterSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses \"div\" by default",
            "suites": [
                "Modal.Header"
            ],
            "updatePoint": {
                "line": 6,
                "column": 27
            },
            "line": 6,
            "code": "  it('uses \"div\" by default', () => {\n    mount(\n      <Modal.Header className=\"custom-class\">\n        <strong>Content</strong>\n      </Modal.Header>,\n    ).assertSingle('div.modal-header.custom-class strong');\n  });",
            "file": "ModalHeaderSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has closeButton without a containing Modal and renders",
            "suites": [
                "Modal.Header"
            ],
            "updatePoint": {
                "line": 14,
                "column": 60
            },
            "line": 14,
            "code": "  it('has closeButton without a containing Modal and renders', () => {\n    mount(<Modal.Header closeButton />).assertSingle('button');\n  });",
            "file": "ModalHeaderSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should trigger onHide when modal is closed",
            "suites": [
                "Modal.Header"
            ],
            "updatePoint": {
                "line": 18,
                "column": 48
            },
            "line": 18,
            "code": "  it('Should trigger onHide when modal is closed', () => {\n    const onHideSpy = sinon.spy();\n    mount(<Modal.Header closeButton onHide={onHideSpy} />)\n      .find('button')\n      .simulate('click');\n\n    expect(onHideSpy).to.have.been.called;\n  });",
            "file": "ModalHeaderSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render close button variant",
            "suites": [
                "Modal.Header"
            ],
            "updatePoint": {
                "line": 27,
                "column": 40
            },
            "line": 27,
            "code": "  it('should render close button variant', () => {\n    const wrapper = mount(<Modal.Header closeButton closeVariant=\"white\" />);\n    expect(wrapper.find('CloseButton').props()).to.have.property(\n      'variant',\n      'white',\n    );\n  });",
            "file": "ModalHeaderSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should forward ref to BaseModal",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 12,
                "column": 37
            },
            "line": 12,
            "code": "  it('Should forward ref to BaseModal', () => {\n    const noOp = () => {};\n    const ref = React.createRef();\n    mount(\n      <Modal show onHide={noOp} animation={false} ref={ref}>\n        <strong>Message</strong>\n      </Modal>,\n    );\n    ref.current.dialog.should.exist;\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render the modal content",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 23,
                "column": 37
            },
            "line": 23,
            "code": "  it('Should render the modal content', () => {\n    const noOp = () => {};\n    mount(\n      <Modal show onHide={noOp} animation={false}>\n        <strong>Message</strong>\n      </Modal>,\n    )\n      .find('strong')\n      .text()\n      .should.equal('Message');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should sets `display: block` to `div.modal` when animation is false",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 35,
                "column": 73
            },
            "line": 35,
            "code": "  it('Should sets `display: block` to `div.modal` when animation is false', () => {\n    const node = mount(\n      <Modal show animation={false}>\n        <strong>Message</strong>\n      </Modal>,\n    )\n      .find('div.modal')\n      .getDOMNode();\n\n    expect(node.style.display).to.equal('block');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should close the modal when the modal dialog is clicked",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 47,
                "column": 61
            },
            "line": 47,
            "code": "  it('Should close the modal when the modal dialog is clicked', (done) => {\n    const doneOp = () => {\n      done();\n    };\n\n    mount(\n      <Modal show onHide={doneOp}>\n        <strong>Message</strong>\n      </Modal>,\n    )\n      .find('div.modal') // the modal-dialog element is pointer-events: none;\n      .simulate('click');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not close the modal when the \"static\" dialog is clicked",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 61,
                "column": 68
            },
            "line": 61,
            "code": "  it('Should not close the modal when the \"static\" dialog is clicked', () => {\n    const onHideSpy = sinon.spy();\n    mount(\n      <Modal show onHide={onHideSpy} backdrop=\"static\">\n        <strong>Message</strong>\n      </Modal>,\n    )\n      .find('ModalDialog')\n      .simulate('click');\n\n    expect(onHideSpy).to.not.have.been.called;\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should show \"static\" dialog animation when backdrop is clicked",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 74,
                "column": 68
            },
            "line": 74,
            "code": "  it('Should show \"static\" dialog animation when backdrop is clicked', () => {\n    const noOp = () => {};\n    const wrapper = mount(\n      <Modal show onHide={noOp} backdrop=\"static\">\n        <strong>Message</strong>\n      </Modal>,\n    );\n\n    const modal = wrapper.find('.modal');\n    modal.simulate('click');\n\n    expect(wrapper.find('.modal-static').length).to.equal(1);\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should show \"static\" dialog animation when esc pressed and keyboard is false",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 88,
                "column": 82
            },
            "line": 88,
            "code": "  it('Should show \"static\" dialog animation when esc pressed and keyboard is false', () => {\n    const noOp = () => {};\n    const wrapper = mount(\n      <Modal show onHide={noOp} backdrop=\"static\" keyboard={false}>\n        <strong>Message</strong>\n      </Modal>,\n    );\n\n    const event = new KeyboardEvent('keydown', { keyCode: 27 });\n    document.dispatchEvent(event);\n    wrapper.update();\n\n    expect(wrapper.find('.modal-static').length).to.equal(1);\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not show \"static\" dialog animation when esc pressed and keyboard is true",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 103,
                "column": 85
            },
            "line": 103,
            "code": "  it('Should not show \"static\" dialog animation when esc pressed and keyboard is true', () => {\n    const noOp = () => {};\n    const wrapper = mount(\n      <Modal show onHide={noOp} backdrop=\"static\" keyboard>\n        <strong>Message</strong>\n      </Modal>,\n    );\n\n    const event = new KeyboardEvent('keydown', { keyCode: 27 });\n    document.dispatchEvent(event);\n    wrapper.update();\n\n    expect(wrapper.find('.modal-static').length).to.equal(0);\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not show \"static\" dialog animation modal backdrop is not \"static\"",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 118,
                "column": 78
            },
            "line": 118,
            "code": "  it('Should not show \"static\" dialog animation modal backdrop is not \"static\"', () => {\n    const noOp = () => {};\n    const wrapper = mount(\n      <Modal show onHide={noOp} backdrop>\n        <strong>Message</strong>\n      </Modal>,\n    );\n\n    const modal = wrapper.find('.modal');\n    modal.simulate('click');\n\n    expect(wrapper.find('.modal-static').length).to.equal(0);\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should close the modal when the modal close button is clicked",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 132,
                "column": 67
            },
            "line": 132,
            "code": "  it('Should close the modal when the modal close button is clicked', (done) => {\n    const doneOp = () => {\n      done();\n    };\n\n    mount(\n      <Modal show onHide={doneOp}>\n        <Modal.Header closeButton />\n        <strong>Message</strong>\n      </Modal>,\n    )\n      .find('.btn-close')\n      .simulate('click');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass className to the dialog",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 147,
                "column": 41
            },
            "line": 147,
            "code": "  it('Should pass className to the dialog', () => {\n    const noOp = () => {};\n    mount(\n      <Modal show className=\"mymodal\" onHide={noOp}>\n        <strong>Message</strong>\n      </Modal>,\n    ).assertSingle('div.modal.mymodal');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should use backdropClassName to add classes to the backdrop",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 156,
                "column": 65
            },
            "line": 156,
            "code": "  it('Should use backdropClassName to add classes to the backdrop', () => {\n    const noOp = () => {};\n\n    mount(\n      <Modal show backdropClassName=\"my-modal-backdrop\" onHide={noOp}>\n        <strong>Message</strong>\n      </Modal>,\n    ).find('.modal-backdrop.my-modal-backdrop');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass size to the dialog",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 166,
                "column": 36
            },
            "line": 166,
            "code": "  it('Should pass size to the dialog', () => {\n    const noOp = () => {};\n    mount(\n      <Modal show size=\"sm\" onHide={noOp}>\n        <strong>Message</strong>\n      </Modal>,\n    ).find('.modal-dialog.modal-sm');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass fullscreen as bool to the dialog",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 175,
                "column": 50
            },
            "line": 175,
            "code": "  it('Should pass fullscreen as bool to the dialog', () => {\n    mount(\n      <Modal show fullscreen>\n        <strong>Message</strong>\n      </Modal>,\n    ).assertSingle('.modal-dialog.modal-fullscreen');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass fullscreen as string to the dialog",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 183,
                "column": 52
            },
            "line": 183,
            "code": "  it('Should pass fullscreen as string to the dialog', () => {\n    mount(\n      <Modal show fullscreen=\"sm-down\">\n        <strong>Message</strong>\n      </Modal>,\n    ).assertSingle('.modal-dialog.modal-fullscreen-sm-down');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass centered to the dialog",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 191,
                "column": 40
            },
            "line": 191,
            "code": "  it('Should pass centered to the dialog', () => {\n    const noOp = () => {};\n    mount(\n      <Modal show centered onHide={noOp}>\n        <strong>Message</strong>\n      </Modal>,\n    ).find('.modal-dialog.modal-dialog-centered');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass scrollable to the dialog",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 200,
                "column": 42
            },
            "line": 200,
            "code": "  it('Should pass scrollable to the dialog', () => {\n    const noOp = () => {};\n    mount(\n      <Modal show scrollable onHide={noOp}>\n        <strong>Message</strong>\n      </Modal>,\n    ).find('.modal-dialog.modal-dialog-scrollable');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass dialog style to the dialog",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 209,
                "column": 44
            },
            "line": 209,
            "code": "  it('Should pass dialog style to the dialog', () => {\n    const noOp = () => {};\n    const dialog = mount(\n      <Modal show style={{ color: 'red' }} onHide={noOp}>\n        <strong>Message</strong>\n      </Modal>,\n    )\n      .find('div.modal')\n      .getDOMNode();\n\n    assert.ok(dialog.style.color === 'red');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass dialogClassName to the dialog",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 222,
                "column": 47
            },
            "line": 222,
            "code": "  it('Should pass dialogClassName to the dialog', () => {\n    const noOp = () => {};\n    mount(\n      <Modal show dialogClassName=\"my-dialog\" onHide={noOp}>\n        <strong>Message</strong>\n      </Modal>,\n    ).assertSingle('.modal-dialog.my-dialog');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass contentClassName to .modal-content",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 231,
                "column": 52
            },
            "line": 231,
            "code": "  it('Should pass contentClassName to .modal-content', () => {\n    const noOp = () => {};\n    mount(\n      <Modal show contentClassName=\"my-content\" onHide={noOp}>\n        <strong>Message</strong>\n      </Modal>,\n    ).assertSingle('.modal-content.my-content');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should use dialogAs",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 240,
                "column": 25
            },
            "line": 240,
            "code": "  it('Should use dialogAs', () => {\n    const noOp = () => {};\n\n    function CustomDialog() {\n      return <div className=\"custom-dialog\" tabIndex=\"-1\" />;\n    }\n\n    mount(\n      <Modal show dialogAs={CustomDialog} onHide={noOp}>\n        <strong>Message</strong>\n      </Modal>,\n    ).assertSingle('.custom-dialog');\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass transition callbacks to Transition",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 254,
                "column": 52
            },
            "line": 254,
            "code": "  it('Should pass transition callbacks to Transition', (done) => {\n    const increment = sinon.spy();\n\n    const instance = mount(\n      <Modal\n        show\n        onHide={() => {}}\n        onExit={increment}\n        onExiting={increment}\n        onExited={() => {\n          increment();\n          expect(increment.callCount).to.equal(6);\n          done();\n        }}\n        onEnter={increment}\n        onEntering={increment}\n        onEntered={() => {\n          increment();\n          instance.setProps({ show: false });\n        }}\n      >\n        <strong>Message</strong>\n      </Modal>,\n    );\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call `transitionend` before `exited`",
            "suites": [
                "<Modal>"
            ],
            "updatePoint": {
                "line": 280,
                "column": 49
            },
            "line": 280,
            "code": "  it('should call `transitionend` before `exited`', (done) => {\n    const increment = sinon.spy();\n    let modal;\n\n    const instance = mount(\n      <Modal\n        show\n        style={{ transition: 'opacity 1s linear' }}\n        onExited={() => {\n          expect(increment.callCount).to.equal(1);\n          modal.removeEventListener('transitionend', increment);\n          done();\n        }}\n      >\n        <strong>Message</strong>\n      </Modal>,\n    );\n    modal = instance.find('.modal').getDOMNode();\n    modal.addEventListener('transitionend', increment);\n    instance.setProps({ show: false });\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should remove resize listener when unmounted",
            "suites": [
                "<Modal>",
                "cleanup"
            ],
            "updatePoint": {
                "line": 313,
                "column": 52
            },
            "line": 313,
            "code": "    it('should remove resize listener when unmounted', () => {\n      class Component extends React.Component {\n        state = {\n          show: true,\n        };\n\n        render() {\n          if (!this.state.show) {\n            return null;\n          }\n\n          return <Modal show>Foo</Modal>;\n        }\n      }\n\n      const instance = mount(<Component />);\n      instance.setState({ show: false });\n\n      expect(offSpy).to.have.been.calledWith('resize');\n    });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should close once it was clicked outside of the Modal",
            "suites": [
                "<Modal>",
                "cleanup"
            ],
            "updatePoint": {
                "line": 335,
                "column": 59
            },
            "line": 335,
            "code": "  it('Should close once it was clicked outside of the Modal', () => {\n    const onHideSpy = sinon.spy();\n    mount(\n      <Modal show onHide={onHideSpy}>\n        <strong>Message</strong>\n      </Modal>,\n    )\n      .find('div.modal.show')\n      .simulate('click');\n\n    expect(onHideSpy).to.have.been.called;\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not call onHide if the click target comes from inside the dialog",
            "suites": [
                "<Modal>",
                "cleanup"
            ],
            "updatePoint": {
                "line": 348,
                "column": 77
            },
            "line": 348,
            "code": "  it('Should not call onHide if the click target comes from inside the dialog', () => {\n    const onHideSpy = sinon.spy();\n    const wrapper = mount(\n      <Modal show onHide={onHideSpy}>\n        <strong>Message</strong>\n      </Modal>,\n    );\n\n    wrapper.find('div.modal-dialog').simulate('mouseDown');\n    wrapper.find('div.modal.show').simulate('mouseUp');\n    wrapper.find('div.modal.show').simulate('click');\n\n    expect(onHideSpy).to.not.have.been.called;\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should set aria-labelledby to the role=\"dialog\" element if aria-labelledby set",
            "suites": [
                "<Modal>",
                "cleanup"
            ],
            "updatePoint": {
                "line": 363,
                "column": 84
            },
            "line": 363,
            "code": "  it('Should set aria-labelledby to the role=\"dialog\" element if aria-labelledby set', () => {\n    const noOp = () => {};\n    const wrapper = mount(\n      <Modal show onHide={noOp} aria-labelledby=\"modal-title\">\n        <Modal.Header closeButton>\n          <Modal.Title id=\"modal-title\">Modal heading</Modal.Title>\n        </Modal.Header>\n      </Modal>,\n    );\n    wrapper.assertSingle(\n      'div.modal.show[role=\"dialog\"][aria-labelledby=\"modal-title\"]',\n    );\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should call onEscapeKeyDown when keyboard is true",
            "suites": [
                "<Modal>",
                "cleanup"
            ],
            "updatePoint": {
                "line": 377,
                "column": 55
            },
            "line": 377,
            "code": "  it('Should call onEscapeKeyDown when keyboard is true', () => {\n    const noOp = () => {};\n    const onEscapeKeyDownSpy = sinon.spy();\n    mount(\n      <Modal show onHide={noOp} keyboard onEscapeKeyDown={onEscapeKeyDownSpy}>\n        <strong>Message</strong>\n      </Modal>,\n    );\n\n    const event = new KeyboardEvent('keydown', { keyCode: 27 });\n    document.dispatchEvent(event);\n\n    expect(onEscapeKeyDownSpy).to.have.been.called;\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not call onEscapeKeyDown when keyboard is false",
            "suites": [
                "<Modal>",
                "cleanup"
            ],
            "updatePoint": {
                "line": 392,
                "column": 60
            },
            "line": 392,
            "code": "  it('Should not call onEscapeKeyDown when keyboard is false', () => {\n    const noOp = () => {};\n    const onEscapeKeyDownSpy = sinon.spy();\n    mount(\n      <Modal\n        show\n        onHide={noOp}\n        keyboard={false}\n        onEscapeKeyDown={onEscapeKeyDownSpy}\n      >\n        <strong>Message</strong>\n      </Modal>,\n    );\n\n    const event = new KeyboardEvent('keydown', { keyCode: 27 });\n    document.dispatchEvent(event);\n\n    expect(onEscapeKeyDownSpy).to.not.have.been.called;\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should use custom props manager if specified",
            "suites": [
                "<Modal>",
                "cleanup"
            ],
            "updatePoint": {
                "line": 412,
                "column": 50
            },
            "line": 412,
            "code": "  it('Should use custom props manager if specified', (done) => {\n    const noOp = () => {};\n\n    class MyModalManager extends ModalManager {\n      add() {\n        done();\n      }\n    }\n\n    const managerRef = React.createRef();\n    managerRef.current = new MyModalManager();\n\n    mount(\n      <Modal show onHide={noOp} manager={managerRef.current}>\n        <strong>Message</strong>\n      </Modal>,\n    );\n  });",
            "file": "ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses \"div\" by default",
            "suites": [
                "Modal.Title"
            ],
            "updatePoint": {
                "line": 6,
                "column": 27
            },
            "line": 6,
            "code": "  it('uses \"div\" by default', () => {\n    mount(\n      <Modal.Title className=\"custom-class\">\n        <strong>Content</strong>\n      </Modal.Title>,\n    ).assertSingle('div.h4.modal-title.custom-class strong');\n  });",
            "file": "ModalTitleSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow custom elements instead of \"div\"",
            "suites": [
                "Modal.Title"
            ],
            "updatePoint": {
                "line": 14,
                "column": 51
            },
            "line": 14,
            "code": "  it('should allow custom elements instead of \"div\"', () => {\n    mount(<Modal.Title as=\"h4\" />).assertSingle('h4.modal-title');\n  });",
            "file": "ModalTitleSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should create NavbarBrand SPAN element",
            "suites": [
                "<Navbar.Brand>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 44
            },
            "line": 6,
            "code": "  it('Should create NavbarBrand SPAN element', () => {\n    mount(<NavbarBrand>Brand</NavbarBrand>).assertSingle('span.navbar-brand');\n  });",
            "file": "NavbarBrandSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should create NavbarBrand A (link) element",
            "suites": [
                "<Navbar.Brand>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 48
            },
            "line": 10,
            "code": "  it('Should create NavbarBrand A (link) element', () => {\n    mount(<NavbarBrand href=\"/foo\">BrandLink</NavbarBrand>).assertSingle(\n      'a.navbar-brand',\n    );\n  });",
            "file": "NavbarBrandSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should create nav element",
            "suites": [
                "<Navbar>"
            ],
            "updatePoint": {
                "line": 8,
                "column": 31
            },
            "line": 8,
            "code": "  it('Should create nav element', () => {\n    mount(<Navbar />).assertSingle('nav.navbar.navbar-light');\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should add \"navigation\" role when not using a `<nav>`",
            "suites": [
                "<Navbar>"
            ],
            "updatePoint": {
                "line": 12,
                "column": 59
            },
            "line": 12,
            "code": "  it('Should add \"navigation\" role when not using a `<nav>`', () => {\n    mount(<Navbar as=\"div\" />).assertSingle('Navbar > div[role=\"navigation\"]');\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should add fixed=top|bottom variation",
            "suites": [
                "<Navbar>"
            ],
            "updatePoint": {
                "line": 16,
                "column": 43
            },
            "line": 16,
            "code": "  it('Should add fixed=top|bottom variation', () => {\n    mount(<Navbar fixed=\"top\" />).assertSingle('nav.fixed-top');\n\n    mount(<Navbar fixed=\"bottom\" />).assertSingle('nav.fixed-bottom');\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should variant=dark",
            "suites": [
                "<Navbar>"
            ],
            "updatePoint": {
                "line": 22,
                "column": 25
            },
            "line": 22,
            "code": "  it('Should variant=dark', () => {\n    mount(<Navbar variant=\"dark\" />).assertSingle('.navbar-dark');\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should override role attribute",
            "suites": [
                "<Navbar>"
            ],
            "updatePoint": {
                "line": 26,
                "column": 36
            },
            "line": 26,
            "code": "  it('Should override role attribute', () => {\n    assert.ok(\n      mount(<Navbar role=\"banner\" />)\n        .getDOMNode()\n        .getAttribute('role'),\n      'banner',\n    );\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render brand",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 36,
                "column": 27
            },
            "line": 36,
            "code": "    it('Should render brand', () => {\n      mount(<Navbar.Brand />).assertSingle('span.navbar-brand');\n    });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render brand as anchor",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 40,
                "column": 37
            },
            "line": 40,
            "code": "    it('Should render brand as anchor', () => {\n      mount(<Navbar.Brand href=\"#\" />).assertSingle('a.navbar-brand');\n    });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass navbar context to navs",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 45,
                "column": 40
            },
            "line": 45,
            "code": "  it('Should pass navbar context to navs', () => {\n    mount(\n      <Navbar>\n        <Nav />\n      </Navbar>,\n    ).assertSingle('div.navbar-nav');\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should add custom toggle",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 53,
                "column": 30
            },
            "line": 53,
            "code": "  it('Should add custom toggle', () => {\n    assert(\n      mount(\n        <Navbar>\n          <Navbar.Toggle as=\"p\">hi</Navbar.Toggle>\n        </Navbar>,\n      )\n        .assertSingle('p.navbar-toggler')\n        .text()\n        .should.equal('hi'),\n    );\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should trigger onToggle",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 66,
                "column": 29
            },
            "line": 66,
            "code": "  it('Should trigger onToggle', () => {\n    const toggleSpy = sinon.spy();\n    mount(\n      <Navbar onToggle={toggleSpy}>\n        <Navbar.Toggle />\n      </Navbar>,\n    )\n      .find('NavbarToggle')\n      .simulate('click');\n\n    expect(toggleSpy).to.be.calledOnce;\n    expect(toggleSpy).to.be.calledWith(true);\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not swallow onClick",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 80,
                "column": 32
            },
            "line": 80,
            "code": "  it('Should not swallow onClick', () => {\n    const clickSpy = sinon.spy();\n\n    mount(\n      <Navbar>\n        <Navbar.Toggle onClick={clickSpy} />\n      </Navbar>,\n    )\n      .find('NavbarToggle')\n      .simulate('click');\n\n    expect(clickSpy).to.have.been.called;\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render collapse",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 94,
                "column": 28
            },
            "line": 94,
            "code": "  it('Should render collapse', () => {\n    mount(\n      <Navbar>\n        <Navbar.Collapse>hello</Navbar.Collapse>\n      </Navbar>,\n    ).assertSingle('.navbar-collapse');\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass expanded to Collapse",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 102,
                "column": 38
            },
            "line": 102,
            "code": "  it('Should pass expanded to Collapse', () => {\n    const wrapper = mount(\n      <Navbar defaultExpanded>\n        <Navbar.Collapse>hello</Navbar.Collapse>\n      </Navbar>,\n    );\n    expect(wrapper.find(Collapse).prop('in')).to.be.true;\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should wire the toggle to the collapse",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 111,
                "column": 44
            },
            "line": 111,
            "code": "  it('Should wire the toggle to the collapse', () => {\n    const wrapper = mount(\n      <Navbar>\n        <Navbar.Toggle />\n        <Navbar.Collapse>hello</Navbar.Collapse>\n      </Navbar>,\n    );\n\n    let toggle = wrapper.find('.navbar-toggler');\n    let collapse = wrapper.find(Collapse);\n\n    expect(collapse.is('[in=false]')).to.equal(true);\n    expect(toggle.hasClass('collapsed')).to.equal(true);\n\n    toggle.simulate('click');\n\n    toggle = wrapper.find('.navbar-toggler');\n    collapse = wrapper.find(Collapse);\n\n    expect(collapse.is('[in=true]')).to.equal(true);\n    expect(toggle.hasClass('collapsed')).to.equal(false);\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should open external href link in collapseOnSelect",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 134,
                "column": 56
            },
            "line": 134,
            "code": "  it('Should open external href link in collapseOnSelect', () => {\n    const selectSpy = sinon.spy();\n    const navItemOnClick = sinon.stub();\n    mount(\n      <Navbar onSelect={selectSpy}>\n        <Navbar.Toggle />\n        <Navbar.Collapse>\n          <Nav as=\"div\">\n            <Nav.Link href=\"https://www.google.com\" onClick={navItemOnClick} />\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>,\n    )\n      .find('a.nav-link')\n      .simulate('click');\n\n    const event = navItemOnClick.getCall(0).args[0];\n    const preventDefaultSpy = sinon.spy(event.preventDefault);\n\n    expect(selectSpy).to.be.calledOnce;\n    expect(navItemOnClick).to.be.calledOnce;\n    expect(event.target.getAttribute('href')).to.be.equal(\n      'https://www.google.com',\n    );\n    expect(preventDefaultSpy).to.not.be.called;\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should fire external href click",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 161,
                "column": 37
            },
            "line": 161,
            "code": "  it('Should fire external href click', () => {\n    const navItemSpy = sinon.spy();\n    mount(\n      <Navbar defaultExpanded>\n        <Navbar.Toggle />\n        <Navbar.Collapse>\n          <Nav as=\"div\">\n            <Nav.Link href=\"https://www.google.com\" onClick={navItemSpy}>\n              <span className=\"link-text\">Option 1</span>\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>,\n    )\n      .find('.link-text')\n      .simulate('click');\n\n    expect(navItemSpy.getCall(0).args[0].isDefaultPrevented()).to.be.false;\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should collapseOnSelect & fire Nav subcomponent onSelect event if expanded",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 181,
                "column": 80
            },
            "line": 181,
            "code": "  it('Should collapseOnSelect & fire Nav subcomponent onSelect event if expanded', () => {\n    const toggleSpy = sinon.spy();\n    const navItemSpy = sinon.spy();\n    mount(\n      <Navbar collapseOnSelect onToggle={toggleSpy} defaultExpanded>\n        <Navbar.Toggle />\n        <Navbar.Collapse>\n          <Nav as=\"div\">\n            <Nav.Link href=\"#\" onClick={navItemSpy}>\n              <span className=\"link-text\">Option 1</span>\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>,\n    )\n      .find('.link-text')\n      .simulate('click');\n\n    expect(navItemSpy).to.be.calledOnce;\n    expect(toggleSpy).to.be.calledOnce;\n    expect(toggleSpy).to.be.calledWith(false);\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should fire onSelect with eventKey for nav children",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 204,
                "column": 57
            },
            "line": 204,
            "code": "  it('Should fire onSelect with eventKey for nav children', () => {\n    const selectSpy = sinon.spy();\n    const navItemSpy = sinon.spy();\n\n    mount(\n      <Navbar onSelect={selectSpy}>\n        <Navbar.Toggle />\n        <Navbar.Collapse>\n          <Nav as=\"div\">\n            <Nav.Link href=\"#home\" onClick={navItemSpy}>\n              <span className=\"link-text\">Option 1</span>\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>,\n    )\n      .find('.link-text')\n      .simulate('click');\n\n    expect(navItemSpy).to.be.calledOnce;\n    expect(selectSpy).to.be.calledOnce;\n    expect(selectSpy).to.be.calledWith('#home');\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have nav as default component",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 228,
                "column": 42
            },
            "line": 228,
            "code": "  it('Should have nav as default component', () => {\n    const wrapper = mount(<Navbar />);\n    expect(wrapper.find('nav').length).to.equal(1);\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render correctly when expand is a string",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 233,
                "column": 53
            },
            "line": 233,
            "code": "  it('Should render correctly when expand is a string', () => {\n    mount(<Navbar expand=\"sm\" />).assertSingle('.navbar-expand-sm');\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render correctly when bg is set",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 237,
                "column": 44
            },
            "line": 237,
            "code": "  it('Should render correctly when bg is set', () => {\n    mount(<Navbar bg=\"light\" />).assertSingle('.navbar.bg-light');\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render correctly when sticky is set",
            "suites": [
                "<Navbar>",
                "Brand"
            ],
            "updatePoint": {
                "line": 241,
                "column": 48
            },
            "line": 241,
            "code": "  it('Should render correctly when sticky is set', () => {\n    mount(<Navbar sticky=\"top\" />).assertSingle('.navbar.sticky-top');\n  });",
            "file": "NavbarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have button as default component",
            "suites": [
                "<NavbarToggle>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 45
            },
            "line": 6,
            "code": "  it('Should have button as default component', () => {\n    mount(<NavbarToggle />).assertSingle('button');\n  });",
            "file": "NavbarToggleSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render li when in nav",
            "suites": [
                "<NavDropdown>"
            ],
            "updatePoint": {
                "line": 9,
                "column": 34
            },
            "line": 9,
            "code": "  it('Should render li when in nav', () => {\n    const wrapper = mount(\n      <NavDropdown\n        defaultShow\n        title=\"Title\"\n        className=\"test-class\"\n        id=\"nav-test\"\n      >\n        <DropdownItem eventKey=\"1\">DropdownItem 1 content</DropdownItem>\n        <DropdownItem eventKey=\"2\">DropdownItem 2 content</DropdownItem>\n      </NavDropdown>,\n    );\n\n    wrapper.assertSingle('div.dropdown.test-class');\n\n    wrapper.assertSingle('a.nav-link').text().should.equal('Title');\n  });",
            "file": "NavDropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders active toggle",
            "suites": [
                "<NavDropdown>"
            ],
            "updatePoint": {
                "line": 27,
                "column": 27
            },
            "line": 27,
            "code": "  it('renders active toggle', () => {\n    mount(\n      <NavDropdown defaultShow active title=\"Title\" id=\"nav-test\">\n        <DropdownItem eventKey=\"1\">DropdownItem 1 content</DropdownItem>\n        <DropdownItem eventKey=\"2\">DropdownItem 2 content</DropdownItem>\n      </NavDropdown>,\n    ).assertSingle('a.dropdown-toggle.active');\n  });",
            "file": "NavDropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle child active state",
            "suites": [
                "<NavDropdown>"
            ],
            "updatePoint": {
                "line": 36,
                "column": 38
            },
            "line": 36,
            "code": "  it('should handle child active state', () => {\n    const wrapper = mount(\n      <Nav defaultActiveKey=\"2\">\n        <NavDropdown defaultShow id=\"test-id\" title=\"title\">\n          <DropdownItem eventKey=\"1\">DropdownItem 1 content</DropdownItem>\n          <DropdownItem eventKey=\"2\">DropdownItem 2 content</DropdownItem>\n          <DropdownItem eventKey=\"3\">DropdownItem 3 content</DropdownItem>\n        </NavDropdown>\n      </Nav>,\n    );\n\n    wrapper\n      .assertSingle('a.active')\n      .text()\n      .should.equal('DropdownItem 2 content');\n  });",
            "file": "NavDropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass the id to the NavLink element",
            "suites": [
                "<NavDropdown>"
            ],
            "updatePoint": {
                "line": 53,
                "column": 47
            },
            "line": 53,
            "code": "  it('should pass the id to the NavLink element', () => {\n    const wrapper = mount(\n      <NavDropdown id=\"test-id\" title=\"title\">\n        <DropdownItem eventKey=\"1\">DropdownItem 1 content</DropdownItem>\n      </NavDropdown>,\n    );\n\n    wrapper.assertSingle('a#test-id');\n  });",
            "file": "NavDropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support as as prop",
            "suites": [
                "<NavDropdown>"
            ],
            "updatePoint": {
                "line": 63,
                "column": 31
            },
            "line": 63,
            "code": "  it('should support as as prop', () => {\n    const wrapper = mount(\n      <NavDropdown as=\"li\" id=\"test-id\" title=\"title\">\n        <DropdownItem eventKey=\"1\">Item 1</DropdownItem>\n      </NavDropdown>,\n    );\n\n    wrapper.assertSingle('li.nav-item');\n  });",
            "file": "NavDropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "passes menuVariant to dropdown menu",
            "suites": [
                "<NavDropdown>"
            ],
            "updatePoint": {
                "line": 73,
                "column": 41
            },
            "line": 73,
            "code": "  it('passes menuVariant to dropdown menu', () => {\n    const wrapper = mount(\n      <NavDropdown title=\"blah\" menuVariant=\"dark\" id=\"test\">\n        <DropdownItem>Item 1</DropdownItem>\n      </NavDropdown>,\n    );\n\n    expect(wrapper.find('DropdownMenu').props()).to.have.property(\n      'variant',\n      'dark',\n    );\n  });",
            "file": "NavDropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets data-bs-popper attribute on dropdown menu",
            "suites": [
                "<NavDropdown>"
            ],
            "updatePoint": {
                "line": 86,
                "column": 52
            },
            "line": 86,
            "code": "  it('sets data-bs-popper attribute on dropdown menu', () => {\n    const wrapper = mount(\n      <Navbar>\n        <NavDropdown renderMenuOnMount id=\"test-id\" title=\"title\">\n          <DropdownItem>Item 1</DropdownItem>\n        </NavDropdown>\n      </Navbar>,\n    );\n\n    wrapper\n      .assertSingle('.dropdown-menu')\n      .assertSingle('[data-bs-popper=\"static\"]');\n  });",
            "file": "NavDropdownSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have div as default component",
            "suites": [
                "<NavItem>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 42
            },
            "line": 6,
            "code": "  it('should have div as default component', () => {\n    mount(<NavItem />).assertSingle('div');\n  });",
            "file": "NavItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow custom elements instead of \"div\"",
            "suites": [
                "<NavItem>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 51
            },
            "line": 10,
            "code": "  it('should allow custom elements instead of \"div\"', () => {\n    mount(<NavItem as=\"section\" />).assertSingle('section.nav-item');\n  });",
            "file": "NavItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should pass classNames down and render children",
            "suites": [
                "<NavItem>"
            ],
            "updatePoint": {
                "line": 14,
                "column": 53
            },
            "line": 14,
            "code": "  it('should pass classNames down and render children', () => {\n    mount(\n      <NavItem className=\"custom-class and-other\">\n        <strong>Children</strong>\n      </NavItem>,\n    ).assertSingle('div.nav-item.custom-class.and-other strong');\n  });",
            "file": "NavItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "renders correctly",
            "suites": [
                "<NavLink>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 23
            },
            "line": 6,
            "code": "  it('renders correctly', () => {\n    mount(\n      <NavLink\n        className=\"custom-class\"\n        href=\"/some/unique-thing/\"\n        title=\"content\"\n      >\n        <strong>Children</strong>\n      </NavLink>,\n    ).assertSingle(\n      'a.nav-link.custom-class[href=\"/some/unique-thing/\"][title=\"content\"] strong',\n    );\n  });",
            "file": "NavLinkSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should add active class",
            "suites": [
                "<NavLink>"
            ],
            "updatePoint": {
                "line": 20,
                "column": 29
            },
            "line": 20,
            "code": "  it('Should add active class', () => {\n    mount(<NavLink active>Item content</NavLink>).assertSingle(\n      'a.nav-link.active',\n    );\n  });",
            "file": "NavLinkSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should add disabled class",
            "suites": [
                "<NavLink>"
            ],
            "updatePoint": {
                "line": 26,
                "column": 31
            },
            "line": 26,
            "code": "  it('Should add disabled class', () => {\n    mount(<NavLink disabled>Item content</NavLink>).assertSingle(\n      'a.nav-link.disabled',\n    );\n  });",
            "file": "NavLinkSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should add aria-selected to the link when role is \"tab\"",
            "suites": [
                "<NavLink>",
                "Web Accessibility"
            ],
            "updatePoint": {
                "line": 33,
                "column": 63
            },
            "line": 33,
            "code": "    it('Should add aria-selected to the link when role is \"tab\"', () => {\n      mount(\n        <NavLink role=\"tab\" active>\n          Item content\n        </NavLink>,\n      ).assertSingle('a[aria-selected=true]');\n    });",
            "file": "NavLinkSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not add aria-selected to the link when role is not \"tab\"",
            "suites": [
                "<NavLink>",
                "Web Accessibility"
            ],
            "updatePoint": {
                "line": 41,
                "column": 71
            },
            "line": 41,
            "code": "    it('Should not add aria-selected to the link when role is not \"tab\"', () => {\n      mount(\n        <NavLink role=\"button\" active>\n          Item content\n        </NavLink>,\n      ).assertNone('a[aria-selected]');\n    });",
            "file": "NavLinkSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have div as default component",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 20,
                "column": 42
            },
            "line": 20,
            "code": "  it('should have div as default component', () => {\n    mount(<Nav />).assertSingle('div');\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set the correct item active",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 24,
                "column": 40
            },
            "line": 24,
            "code": "  it('should set the correct item active', () => {\n    const wrapper = mount(\n      <Nav variant=\"pills\" defaultActiveKey={1}>\n        <Nav.Link eventKey={1}>Pill 1 content</Nav.Link>\n        <Nav.Link eventKey={2}>Pill 2 content</Nav.Link>\n      </Nav>,\n    );\n\n    const items = wrapper.find('a.nav-link');\n\n    assert.ok(items.at(0).is('.active'));\n    assert.notOk(items.at(1).is('.active'));\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add variant class",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 38,
                "column": 30
            },
            "line": 38,
            "code": "  it('should add variant class', () => {\n    mount(\n      <Nav variant=\"tabs\">\n        <Nav.Link eventKey={1}>Pill 1 content</Nav.Link>\n        <Nav.Link eventKey={2}>Pill 2 content</Nav.Link>\n      </Nav>,\n    ).assertSingle('div.nav.nav-tabs');\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add justified class",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 47,
                "column": 32
            },
            "line": 47,
            "code": "  it('should add justified class', () => {\n    mount(\n      <Nav justify>\n        <Nav.Link eventKey={1}>Pill 1 content</Nav.Link>\n        <Nav.Link eventKey={2}>Pill 2 content</Nav.Link>\n      </Nav>,\n    ).assertSingle('div.nav.nav-justified');\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add fill class",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 56,
                "column": 27
            },
            "line": 56,
            "code": "  it('should add fill class', () => {\n    mount(\n      <Nav fill>\n        <Nav.Link eventKey={1}>Pill 1 content</Nav.Link>\n        <Nav.Link eventKey={2}>Pill 2 content</Nav.Link>\n      </Nav>,\n    ).assertSingle('div.nav.nav-fill');\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be navbar aware",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 65,
                "column": 28
            },
            "line": 65,
            "code": "  it('should be navbar aware', () => {\n    mount(\n      <Navbar>\n        <Nav>\n          <Nav.Link eventKey={1}>Pill 1 content</Nav.Link>\n          <Nav.Link eventKey={2}>Pill 2 content</Nav.Link>\n        </Nav>\n      </Navbar>,\n    ).assertSingle('div.navbar-nav');\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should handle navbarScroll only if within navbar",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 76,
                "column": 54
            },
            "line": 76,
            "code": "  it('should handle navbarScroll only if within navbar', () => {\n    mount(\n      <Navbar>\n        <Nav navbarScroll />\n      </Navbar>,\n    ).assertSingle('div.navbar-nav.navbar-nav-scroll');\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not add navbarScroll when not within navbar",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 84,
                "column": 56
            },
            "line": 84,
            "code": "  it('should not add navbarScroll when not within navbar', () => {\n    const wrapper = mount(<Nav navbarScroll />);\n\n    const nav = wrapper.find('div.nav');\n    expect(nav.hasClass('navbar-nav-scroll')).to.not.be.true;\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should be card header aware",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 91,
                "column": 33
            },
            "line": 91,
            "code": "  it('should be card header aware', () => {\n    mount(\n      <CardHeader>\n        <Nav variant=\"pills\">\n          <Nav.Link eventKey={1}>Pill 1 content</Nav.Link>\n          <Nav.Link eventKey={2}>Pill 2 content</Nav.Link>\n        </Nav>\n      </CardHeader>,\n    ).assertSingle('div.card-header-pills');\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call onSelect when a Nav.Link is selected",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 102,
                "column": 54
            },
            "line": 102,
            "code": "  it('should call onSelect when a Nav.Link is selected', (done) => {\n    function handleSelect(key) {\n      assert.equal(key, '2');\n      done();\n    }\n\n    mount(\n      <Nav onSelect={handleSelect}>\n        <Nav.Link eventKey={1}>Tab 1 content</Nav.Link>\n        <Nav.Link eventKey={2}>\n          <span>Tab 2 content</span>\n        </Nav.Link>\n      </Nav>,\n    )\n      .find('a')\n      .last()\n      .simulate('click');\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should call onSelect when a NavDropdown.Item is selected",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 121,
                "column": 62
            },
            "line": 121,
            "code": "  it('should call onSelect when a NavDropdown.Item is selected', () => {\n    const onSelectSpy = sinon.spy();\n\n    mount(\n      <Nav onSelect={onSelectSpy}>\n        <NavDropdown title=\"Dropdown\" id=\"nav-dropdown-test\" renderMenuOnMount>\n          <NavDropdown.Item eventKey={1}>Dropdown item</NavDropdown.Item>\n        </NavDropdown>\n      </Nav>,\n    )\n      .find('a.dropdown-item')\n      .simulate('click');\n\n    onSelectSpy.should.have.been.calledOnce;\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set the correct item active by href",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 137,
                "column": 48
            },
            "line": 137,
            "code": "  it('should set the correct item active by href', () => {\n    mount(\n      <Nav defaultActiveKey=\"#item1\">\n        <Nav.Link href=\"#item1\" className=\"test-selected\">\n          Pill 1 content\n        </Nav.Link>\n        <Nav.Link href=\"#item2\">Pill 2 content</Nav.Link>\n      </Nav>,\n    ).assertSingle('a.test-selected.active');\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should warn when attempting to use a justify navbar nav",
            "suites": [
                "<Nav>"
            ],
            "updatePoint": {
                "line": 148,
                "column": 61
            },
            "line": 148,
            "code": "  it('should warn when attempting to use a justify navbar nav', () => {\n    shouldWarn('justify navbar `Nav`s are not supported');\n\n    mount(<Nav navbar justify />);\n  });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have tablist and tab roles",
            "suites": [
                "<Nav>",
                "Web Accessibility"
            ],
            "updatePoint": {
                "line": 155,
                "column": 41
            },
            "line": 155,
            "code": "    it('should have tablist and tab roles', () => {\n      const wrapper = mount(\n        <Nav>\n          <Nav.Link key={1}>Tab 1 content</Nav.Link>\n          <Nav.Link key={2}>Tab 2 content</Nav.Link>\n        </Nav>,\n      );\n\n      wrapper.assertNone('div.nav[role=\"tablist\"]');\n      wrapper.assertNone('a[role=\"tab\"]');\n\n      wrapper.setProps({ role: 'tablist' });\n\n      wrapper.assertSingle('div.nav[role=\"tablist\"]');\n      wrapper.find('a[role=\"tab\"]').length.should.equal(2);\n    });",
            "file": "NavSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render the modal content",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 13,
                "column": 37
            },
            "line": 13,
            "code": "  it('Should render the modal content', () => {\n    const noOp = () => {};\n    mount(\n      <Offcanvas show onHide={noOp}>\n        <strong>Message</strong>\n      </Offcanvas>,\n    )\n      .find('strong')\n      .text()\n      .should.equal('Message');\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should set `visibility: visible` to `div.offcanvas`",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 25,
                "column": 57
            },
            "line": 25,
            "code": "  it('Should set `visibility: visible` to `div.offcanvas`', () => {\n    const node = mount(\n      <Offcanvas show>\n        <strong>Message</strong>\n      </Offcanvas>,\n    )\n      .find('div.offcanvas')\n      .getDOMNode();\n\n    expect(node.style.visibility).to.equal('visible');\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should close the offcanvas when the modal close button is clicked",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 37,
                "column": 71
            },
            "line": 37,
            "code": "  it('Should close the offcanvas when the modal close button is clicked', (done) => {\n    const doneOp = () => {\n      done();\n    };\n\n    mount(\n      <Offcanvas show onHide={doneOp}>\n        <Offcanvas.Header closeButton />\n        <strong>Message</strong>\n      </Offcanvas>,\n    )\n      .find('.btn-close')\n      .simulate('click');\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass className to the offcanvas",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 52,
                "column": 44
            },
            "line": 52,
            "code": "  it('Should pass className to the offcanvas', () => {\n    const noOp = () => {};\n    mount(\n      <Offcanvas show className=\"myoffcanvas\" onHide={noOp}>\n        <strong>Message</strong>\n      </Offcanvas>,\n    ).assertSingle('div.offcanvas.myoffcanvas');\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass backdropClassName to the backdrop",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 61,
                "column": 51
            },
            "line": 61,
            "code": "  it('Should pass backdropClassName to the backdrop', () => {\n    const noOp = () => {};\n\n    mount(\n      <Offcanvas show backdropClassName=\"custom-backdrop\" onHide={noOp}>\n        <strong>Message</strong>\n      </Offcanvas>,\n    ).find('.offcanvas-backdrop.custom-backdrop');\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass style to the offcanvas",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 71,
                "column": 40
            },
            "line": 71,
            "code": "  it('Should pass style to the offcanvas', () => {\n    const noOp = () => {};\n    const dialog = mount(\n      <Offcanvas show style={{ color: 'red' }} onHide={noOp}>\n        <strong>Message</strong>\n      </Offcanvas>,\n    )\n      .find('div.offcanvas')\n      .getDOMNode();\n\n    assert.ok(dialog.style.color === 'red');\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass transition callbacks to Transition",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 84,
                "column": 52
            },
            "line": 84,
            "code": "  it('Should pass transition callbacks to Transition', (done) => {\n    const increment = sinon.spy();\n\n    const instance = mount(\n      <Offcanvas\n        show\n        onHide={() => {}}\n        onExit={increment}\n        onExiting={increment}\n        onExited={() => {\n          increment();\n          expect(increment.callCount).to.equal(6);\n          done();\n        }}\n        onEnter={increment}\n        onEntering={increment}\n        onEntered={() => {\n          increment();\n          instance.setProps({ show: false });\n        }}\n      >\n        <strong>Message</strong>\n      </Offcanvas>,\n    );\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should close when backdrop clicked",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 110,
                "column": 40
            },
            "line": 110,
            "code": "  it('Should close when backdrop clicked', () => {\n    const onHideSpy = sinon.spy();\n    mount(\n      <Offcanvas show onHide={onHideSpy}>\n        <strong>Message</strong>\n      </Offcanvas>,\n    )\n      .find('div.offcanvas-backdrop')\n      .simulate('click');\n\n    expect(onHideSpy).to.have.been.called;\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not call onHide if the click target comes from inside the offcanvas",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 143,
                "column": 80
            },
            "line": 143,
            "code": "  it('Should not call onHide if the click target comes from inside the offcanvas', () => {\n    const onHideSpy = sinon.spy();\n    const wrapper = mount(\n      <>\n        <Offcanvas show onHide={onHideSpy}>\n          <strong>Message</strong>\n        </Offcanvas>\n        <div id=\"outside\">outside</div>\n      </>,\n    );\n\n    wrapper.find('div.offcanvas').simulate('click');\n\n    expect(onHideSpy).to.not.have.been.called;\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should set aria-labelledby to the role=\"dialog\" element if aria-labelledby set",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 159,
                "column": 84
            },
            "line": 159,
            "code": "  it('Should set aria-labelledby to the role=\"dialog\" element if aria-labelledby set', () => {\n    const noOp = () => {};\n    mount(\n      <Offcanvas show onHide={noOp} aria-labelledby=\"offcanvas-title\">\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title id=\"offcanvas-title\">\n            Offcanvas heading\n          </Offcanvas.Title>\n        </Offcanvas.Header>\n      </Offcanvas>,\n    ).assertSingle(\n      'div.offcanvas.show[role=\"dialog\"][aria-labelledby=\"offcanvas-title\"]',\n    );\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should call onEscapeKeyDown when keyboard is true",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 174,
                "column": 55
            },
            "line": 174,
            "code": "  it('Should call onEscapeKeyDown when keyboard is true', () => {\n    const noOp = () => {};\n    const onEscapeKeyDownSpy = sinon.spy();\n    mount(\n      <Offcanvas\n        show\n        onHide={noOp}\n        keyboard\n        onEscapeKeyDown={onEscapeKeyDownSpy}\n      >\n        <strong>Message</strong>\n      </Offcanvas>,\n    );\n\n    const event = new KeyboardEvent('keydown', { keyCode: 27 });\n    document.dispatchEvent(event);\n\n    expect(onEscapeKeyDownSpy).to.have.been.called;\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not call onEscapeKeyDown when keyboard is false",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 194,
                "column": 60
            },
            "line": 194,
            "code": "  it('Should not call onEscapeKeyDown when keyboard is false', () => {\n    const noOp = () => {};\n    const onEscapeKeyDownSpy = sinon.spy();\n    mount(\n      <Offcanvas\n        show\n        onHide={noOp}\n        keyboard={false}\n        onEscapeKeyDown={onEscapeKeyDownSpy}\n      >\n        <strong>Message</strong>\n      </Offcanvas>,\n    );\n\n    const event = new KeyboardEvent('keydown', { keyCode: 27 });\n    document.dispatchEvent(event);\n\n    expect(onEscapeKeyDownSpy).to.not.have.been.called;\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should use custom props manager if specified",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 214,
                "column": 50
            },
            "line": 214,
            "code": "  it('Should use custom props manager if specified', (done) => {\n    const noOp = () => {};\n\n    class MyModalManager extends ModalManager {\n      add() {\n        done();\n      }\n    }\n\n    const managerRef = React.createRef();\n    managerRef.current = new MyModalManager();\n\n    mount(\n      <Offcanvas show onHide={noOp} manager={managerRef.current}>\n        <strong>Message</strong>\n      </Offcanvas>,\n    );\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not change overflow style when scroll=true",
            "suites": [
                "<Offcanvas>"
            ],
            "updatePoint": {
                "line": 233,
                "column": 55
            },
            "line": 233,
            "code": "  it('should not change overflow style when scroll=true', () => {\n    const containerRef = React.createRef();\n    const noOp = () => {};\n    mount(\n      <div ref={containerRef} style={{ height: '2000px', overflow: 'scroll' }}>\n        <Offcanvas show onHide={noOp} container={containerRef} scroll>\n          <strong>Message</strong>\n        </Offcanvas>\n      </div>,\n    );\n\n    expect(containerRef.current.style.overflow).to.equal('scroll');\n  });",
            "file": "OffcanvasSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should forward ref to the overlay",
            "suites": [
                "<Overlay>"
            ],
            "updatePoint": {
                "line": 8,
                "column": 39
            },
            "line": 8,
            "code": "  it('should forward ref to the overlay', () => {\n    const ref = React.createRef();\n    mount(\n      <Overlay ref={ref} show>\n        <Popover id=\"my-overlay\">test</Popover>\n      </Overlay>,\n    );\n\n    ref.current.id.should.equal('my-overlay');\n  });",
            "file": "OverlaySpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use Fade internally if transition=true",
            "suites": [
                "<Overlay>"
            ],
            "updatePoint": {
                "line": 19,
                "column": 51
            },
            "line": 19,
            "code": "  it('should use Fade internally if transition=true', () => {\n    const wrapper = mount(\n      <Overlay show transition>\n        <Popover id=\"my-overlay\">test</Popover>\n      </Overlay>,\n    );\n\n    expect(wrapper.find('Fade').exists()).to.be.true;\n  });",
            "file": "OverlaySpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not use Fade if transition=false",
            "suites": [
                "<Overlay>"
            ],
            "updatePoint": {
                "line": 29,
                "column": 45
            },
            "line": 29,
            "code": "  it('should not use Fade if transition=false', () => {\n    const wrapper = mount(\n      <Overlay show transition={false}>\n        <Popover id=\"my-overlay\">test</Popover>\n      </Overlay>,\n    );\n\n    expect(wrapper.find('Fade').exists()).to.be.false;\n  });",
            "file": "OverlaySpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not throw an error with StrictMode",
            "suites": [
                "<OverlayTrigger>"
            ],
            "updatePoint": {
                "line": 19,
                "column": 47
            },
            "line": 19,
            "code": "  it('should not throw an error with StrictMode', () => {\n    const wrapper = mount(\n      <React.StrictMode>\n        <OverlayTrigger overlay={<Div>test</Div>}>\n          <button type=\"button\">button</button>\n        </OverlayTrigger>\n      </React.StrictMode>,\n    );\n\n    wrapper.find('button').simulate('click');\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render OverlayTrigger element",
            "suites": [
                "<OverlayTrigger>"
            ],
            "updatePoint": {
                "line": 31,
                "column": 42
            },
            "line": 31,
            "code": "  it('Should render OverlayTrigger element', () => {\n    mount(\n      <OverlayTrigger overlay={<Div>test</Div>}>\n        <button type=\"button\">button</button>\n      </OverlayTrigger>,\n    ).assertSingle('button');\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should accept a function as an overlay render prop",
            "suites": [
                "<OverlayTrigger>"
            ],
            "updatePoint": {
                "line": 39,
                "column": 56
            },
            "line": 39,
            "code": "  it('Should accept a function as an overlay render prop', () => {\n    const overlay = () => <Div className=\"test\" />;\n    const wrapper = mount(\n      <OverlayTrigger trigger=\"click\" overlay={overlay}>\n        <button type=\"button\">button</button>\n      </OverlayTrigger>,\n    );\n\n    wrapper.assertNone('.test');\n\n    wrapper.find('button').simulate('click');\n\n    wrapper.assertSingle('div.test');\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should show the tooltip when transitions are disabled",
            "suites": [
                "<OverlayTrigger>"
            ],
            "updatePoint": {
                "line": 54,
                "column": 59
            },
            "line": 54,
            "code": "  it('Should show the tooltip when transitions are disabled', () => {\n    const overlay = ({ className, ...props }) => (\n      <Div {...props} className={`${className} test`} />\n    );\n    const wrapper = mount(\n      <OverlayTrigger\n        transition={false}\n        trigger={['hover', 'focus']}\n        overlay={overlay}\n      >\n        <button type=\"button\">button</button>\n      </OverlayTrigger>,\n    );\n\n    wrapper.assertNone('.test');\n\n    wrapper.find('button').simulate('focus');\n\n    wrapper.assertSingle('div.test.show');\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should call OverlayTrigger onClick prop to child",
            "suites": [
                "<OverlayTrigger>"
            ],
            "updatePoint": {
                "line": 75,
                "column": 54
            },
            "line": 75,
            "code": "  it('Should call OverlayTrigger onClick prop to child', () => {\n    const callback = sinon.spy();\n\n    mount(\n      <OverlayTrigger overlay={<Div>test</Div>} trigger=\"click\">\n        <button type=\"button\" onClick={callback}>\n          button\n        </button>\n      </OverlayTrigger>,\n    )\n      .find('button')\n      .simulate('click');\n\n    callback.should.have.been.called;\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should be controllable",
            "suites": [
                "<OverlayTrigger>"
            ],
            "updatePoint": {
                "line": 91,
                "column": 28
            },
            "line": 91,
            "code": "  it('Should be controllable', () => {\n    const callback = sinon.spy();\n\n    const wrapper = mount(\n      <OverlayTrigger\n        show\n        trigger=\"click\"\n        onToggle={callback}\n        overlay={<Div className=\"test\" />}\n      >\n        <button type=\"button\">button</button>\n      </OverlayTrigger>,\n    );\n\n    wrapper.assertSingle('div.test');\n\n    wrapper.find('button').simulate('click');\n\n    callback.should.have.been.calledOnce.and.calledWith(false);\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should show after click trigger",
            "suites": [
                "<OverlayTrigger>"
            ],
            "updatePoint": {
                "line": 112,
                "column": 37
            },
            "line": 112,
            "code": "  it('Should show after click trigger', () => {\n    const wrapper = mount(\n      <OverlayTrigger trigger=\"click\" overlay={<Div className=\"test\" />}>\n        <button type=\"button\">button</button>\n      </OverlayTrigger>,\n    );\n\n    wrapper.assertNone('.test');\n\n    wrapper.find('button').simulate('click');\n\n    wrapper.assertSingle('div.test');\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should show after mouseover trigger",
            "suites": [
                "<OverlayTrigger>"
            ],
            "updatePoint": {
                "line": 126,
                "column": 41
            },
            "line": 126,
            "code": "  it('Should show after mouseover trigger', (done) => {\n    const clock = sinon.useFakeTimers();\n\n    try {\n      const wrapper = mount(\n        <OverlayTrigger overlay={<Div className=\"test\" />}>\n          <span>hover me</span>\n        </OverlayTrigger>,\n      );\n\n      wrapper.assertNone('.test');\n\n      wrapper.find('span').simulate('mouseover');\n\n      wrapper.assertSingle('div.test');\n\n      wrapper.find('span').simulate('mouseout');\n\n      clock.tick(50);\n\n      wrapper.assertNone('.test');\n    } finally {\n      clock.restore();\n      done();\n    }\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not set aria-describedby if the state is not show",
            "suites": [
                "<OverlayTrigger>"
            ],
            "updatePoint": {
                "line": 153,
                "column": 62
            },
            "line": 153,
            "code": "  it('Should not set aria-describedby if the state is not show', () => {\n    const [button] = mount(\n      <OverlayTrigger trigger=\"click\" overlay={<Div />}>\n        <button type=\"button\">button</button>\n      </OverlayTrigger>,\n    ).getDOMNode();\n\n    assert.equal(button.getAttribute('aria-describedby'), null);\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should set aria-describedby for tooltips if the state is show",
            "suites": [
                "<OverlayTrigger>"
            ],
            "updatePoint": {
                "line": 163,
                "column": 67
            },
            "line": 163,
            "code": "  it('Should set aria-describedby for tooltips if the state is show', (done) => {\n    const wrapper = mount(\n      <OverlayTrigger trigger=\"click\" overlay={<Div />}>\n        <button type=\"button\">button</button>\n      </OverlayTrigger>,\n    );\n\n    wrapper.find('button').simulate('click');\n\n    setTimeout(() => {\n      wrapper\n        .find('button')\n        .getDOMNode()\n        .matches('[aria-describedby=\"test-tooltip\"]')\n        .should.equal(true);\n      done();\n    });\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should keep trigger handlers",
            "suites": [
                "<OverlayTrigger>",
                "trigger handlers"
            ],
            "updatePoint": {
                "line": 195,
                "column": 36
            },
            "line": 195,
            "code": "    it('Should keep trigger handlers', (done) => {\n      mount(\n        <div>\n          <OverlayTrigger trigger=\"click\" overlay={<Div>test</Div>}>\n            <button type=\"button\" onClick={() => done()}>\n              button\n            </button>\n          </OverlayTrigger>\n          <input id=\"target\" />\n        </div>,\n      )\n        .find('button')\n        .simulate('click');\n    });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should maintain overlay classname",
            "suites": [
                "<OverlayTrigger>",
                "trigger handlers"
            ],
            "updatePoint": {
                "line": 211,
                "column": 39
            },
            "line": 211,
            "code": "  it('Should maintain overlay classname', () => {\n    const wrapper = mount(\n      <OverlayTrigger\n        trigger=\"click\"\n        overlay={<Div className=\"test-overlay\">test</Div>}\n      >\n        <button type=\"button\">button</button>\n      </OverlayTrigger>,\n    );\n    wrapper.find('button').simulate('click');\n\n    wrapper.assertSingle('div.test-overlay');\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass transition callbacks to Transition",
            "suites": [
                "<OverlayTrigger>",
                "trigger handlers"
            ],
            "updatePoint": {
                "line": 225,
                "column": 52
            },
            "line": 225,
            "code": "  it('Should pass transition callbacks to Transition', (done) => {\n    const increment = sinon.spy();\n\n    const wrapper = mount(\n      <OverlayTrigger\n        trigger=\"click\"\n        overlay={<Div>test</Div>}\n        onExit={increment}\n        onExiting={increment}\n        onExited={() => {\n          increment();\n          expect(increment.callCount).to.equal(6);\n          done();\n        }}\n        onEnter={increment}\n        onEntering={increment}\n        onEntered={() => {\n          increment();\n          wrapper.find('button').simulate('click');\n        }}\n      >\n        <button type=\"button\">button</button>\n      </OverlayTrigger>,\n    );\n\n    wrapper.find('button').simulate('click');\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should forward requested context",
            "suites": [
                "<OverlayTrigger>",
                "trigger handlers"
            ],
            "updatePoint": {
                "line": 253,
                "column": 38
            },
            "line": 253,
            "code": "  it('Should forward requested context', () => {\n    const contextTypes = {\n      key: PropTypes.string,\n    };\n\n    const contextSpy = sinon.spy();\n\n    class ContextReader extends React.Component {\n      static contextTypes = contextTypes;\n\n      render() {\n        contextSpy(this.context.key);\n        return <div />;\n      }\n    }\n\n    class ContextHolder extends React.Component {\n      static childContextTypes = contextTypes;\n\n      getChildContext() {\n        return { key: 'value' };\n      }\n\n      render() {\n        return (\n          <OverlayTrigger trigger=\"click\" overlay={<ContextReader />}>\n            <button type=\"button\">button</button>\n          </OverlayTrigger>\n        );\n      }\n    }\n\n    mount(<ContextHolder />)\n      .find('button')\n      .simulate('click');\n\n    contextSpy.calledWith('value').should.be.true;\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have flip set to true if placement is auto",
            "suites": [
                "<OverlayTrigger>",
                "trigger handlers"
            ],
            "updatePoint": {
                "line": 292,
                "column": 55
            },
            "line": 292,
            "code": "  it('Should have flip set to true if placement is auto', () => {\n    const wrapper = mount(\n      <OverlayTrigger\n        overlay={<Div>test</Div>}\n        trigger=\"click\"\n        placement=\"auto\"\n      >\n        <button type=\"button\">button</button>\n      </OverlayTrigger>,\n    );\n    wrapper.find('button').simulate('click');\n\n    expect(wrapper.update().find(Overlay).props().flip).to.equal(true);\n  });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should handle trigger without warnings",
            "suites": [
                "<OverlayTrigger>",
                "overlay types"
            ],
            "updatePoint": {
                "line": 319,
                "column": 50
            },
            "line": 319,
            "code": "        it('Should handle trigger without warnings', (done) => {\n          mount(\n            <OverlayTrigger trigger=\"click\" overlay={testCase.overlay}>\n              <button type=\"button\">button</button>\n            </OverlayTrigger>,\n          )\n            .find('button')\n            .simulate('click');\n\n          // The use of Popper means that errors above will show up\n          //  asynchronously.\n          setTimeout(done, 10);\n        });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have correct show state",
            "suites": [
                "<OverlayTrigger>",
                "rootClose"
            ],
            "updatePoint": {
                "line": 350,
                "column": 42
            },
            "line": 350,
            "code": "        it('Should have correct show state', () => {\n          const wrapper = mount(\n            <OverlayTrigger\n              overlay={<Div>test</Div>}\n              trigger=\"click\"\n              rootClose={testCase.rootClose}\n            >\n              <button type=\"button\">button</button>\n            </OverlayTrigger>,\n          );\n          wrapper.find('button').simulate('click');\n\n          expect(wrapper.update().find(Overlay).props().show).to.equal(true);\n\n          // Need to click this way for it to propagate to document element.\n          document.documentElement.click();\n\n          expect(wrapper.update().find(Overlay).props().show).to.equal(\n            testCase.shownAfterClick,\n          );\n        });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should hide after clicking on trigger",
            "suites": [
                "<OverlayTrigger>",
                "rootClose",
                "clicking on trigger to hide"
            ],
            "updatePoint": {
                "line": 375,
                "column": 47
            },
            "line": 375,
            "code": "      it('should hide after clicking on trigger', () => {\n        const attachTo = document.createElement('div');\n        document.body.appendChild(attachTo);\n\n        const wrapper = mount(\n          <OverlayTrigger overlay={<Div>test</Div>} trigger=\"click\" rootClose>\n            <button type=\"button\">button</button>\n          </OverlayTrigger>,\n          { attachTo },\n        );\n\n        const [node] = wrapper.getDOMNode();\n        expect(wrapper.update().find(Overlay).props().show).to.be.false;\n\n        node.click();\n        expect(wrapper.update().find(Overlay).props().show).to.be.true;\n\n        // Need to click this way for it to propagate to document element.\n        node.click();\n        expect(wrapper.update().find(Overlay).props().show).to.be.false;\n\n        wrapper.unmount();\n      });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should still be shown",
            "suites": [
                "<OverlayTrigger>",
                "rootClose",
                "replaced overlay"
            ],
            "updatePoint": {
                "line": 401,
                "column": 31
            },
            "line": 401,
            "code": "      it('Should still be shown', () => {\n        class ReplacedOverlay extends React.Component {\n          state = {\n            replaced: false,\n          };\n\n          handleClick = () => {\n            this.setState({ replaced: true });\n          };\n\n          render() {\n            if (this.state.replaced) {\n              return <div>replaced</div>;\n            }\n\n            return (\n              <div>\n                <a id=\"replace-overlay\" onClick={this.handleClick}>\n                  original\n                </a>\n              </div>\n            );\n          }\n        }\n\n        const wrapper = mount(\n          <OverlayTrigger\n            overlay={<ReplacedOverlay />}\n            trigger=\"click\"\n            rootClose\n          >\n            <button type=\"button\">button</button>\n          </OverlayTrigger>,\n        );\n\n        wrapper.find('button').simulate('click');\n\n        // Need to click this way for it to propagate to document element.\n        document.getElementById('replace-overlay').click();\n\n        wrapper.update().find(Overlay).props().show.should.be.true;\n      });",
            "file": "OverlayTriggerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have expected default innerText",
            "suites": [
                "<PageItem>",
                "<First>"
            ],
            "updatePoint": {
                "line": 7,
                "column": 46
            },
            "line": 7,
            "code": "    it('should have expected default innerText', () => {\n      const inner = mount(<First />).find(\n        '.page-link>span[aria-hidden=\"true\"]',\n      );\n      expect(inner.text()).to.equal('«');\n    });",
            "file": "PageItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have expected custom innerText",
            "suites": [
                "<PageItem>",
                "<First>"
            ],
            "updatePoint": {
                "line": 13,
                "column": 45
            },
            "line": 13,
            "code": "    it('should have expected custom innerText', () => {\n      const innerHTML = 'custom';\n      const inner = mount(<First>{innerHTML}</First>).find(\n        '.page-link>span[aria-hidden=\"true\"]',\n      );\n      expect(inner.text()).to.equal(innerHTML);\n    });",
            "file": "PageItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a span if active is true",
            "suites": [
                "<PageItem>",
                "<First>"
            ],
            "updatePoint": {
                "line": 21,
                "column": 46
            },
            "line": 21,
            "code": "    it('should render a span if active is true', () => {\n      mount(<PageItem active />).assertSingle('span.page-link');\n    });",
            "file": "PageItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a span if disabled is true",
            "suites": [
                "<PageItem>",
                "<First>"
            ],
            "updatePoint": {
                "line": 25,
                "column": 48
            },
            "line": 25,
            "code": "    it('should render a span if disabled is true', () => {\n      mount(<PageItem disabled />).assertSingle('span.page-link');\n    });",
            "file": "PageItemSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have class",
            "suites": [
                "<Pagination>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 23
            },
            "line": 6,
            "code": "  it('should have class', () => {\n    mount(<Pagination>Item content</Pagination>).assertSingle('.pagination');\n  });",
            "file": "PaginationSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render correctly when size is set",
            "suites": [
                "<Pagination>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 46
            },
            "line": 10,
            "code": "  it('should render correctly when size is set', () => {\n    mount(<Pagination size=\"sm\">Item content</Pagination>).assertSingle(\n      '.pagination.pagination-sm',\n    );\n  });",
            "file": "PaginationSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should output a popover title and content",
            "suites": [
                "Popover"
            ],
            "updatePoint": {
                "line": 6,
                "column": 47
            },
            "line": 6,
            "code": "  it('Should output a popover title and content', () => {\n    mount(\n      <Popover id=\"test-popover\">\n        <Popover.Header>Popover title</Popover.Header>\n        <Popover.Body>\n          <strong>Popover Content</strong>\n        </Popover.Body>\n      </Popover>,\n    ).assertSingle(\n      '.popover[x-placement=\"right\"][role=\"tooltip\"].bs-popover-end strong',\n    );\n  });",
            "file": "PopoverSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should output a progress bar with wrapper",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 7,
                "column": 47
            },
            "line": 7,
            "code": "  it('Should output a progress bar with wrapper', () => {\n    mount(<ProgressBar min={0} max={10} now={0} />).assertSingle(\n      'div.progress .progress-bar[role=\"progressbar\"]',\n    );\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have the variant=\"\" class",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 14,
                "column": 50
            },
            "line": 14,
            "code": "    it(`Should have the variant=\"${variant}\" class`, () => {\n      mount(\n        <ProgressBar min={0} max={10} now={0} variant={variant} />,\n      ).assertSingle(`.progress-bar.bg-${variant}`);\n    });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should default to min:0, max:100",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 21,
                "column": 38
            },
            "line": 21,
            "code": "  it('Should default to min:0, max:100', () => {\n    mount(<ProgressBar now={5} />).assertSingle(\n      '.progress-bar[aria-valuemin=0][aria-valuemax=100]',\n    );\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have 0% computed width",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 27,
                "column": 35
            },
            "line": 27,
            "code": "  it('Should have 0% computed width', () => {\n    const node = mount(<ProgressBar min={0} max={10} now={0} />)\n      .find('.progress-bar')\n      .getDOMNode();\n\n    assert.equal(node.style.width, '0%');\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have 10% computed width",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 35,
                "column": 36
            },
            "line": 35,
            "code": "  it('Should have 10% computed width', () => {\n    const node = mount(<ProgressBar min={0} max={10} now={1} />)\n      .find('.progress-bar')\n      .getDOMNode();\n\n    assert.equal(node.style.width, '10%');\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have 100% computed width",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 43,
                "column": 37
            },
            "line": 43,
            "code": "  it('Should have 100% computed width', () => {\n    const node = mount(<ProgressBar min={0} max={10} now={10} />)\n      .find('.progress-bar')\n      .getDOMNode();\n\n    assert.equal(node.style.width, '100%');\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have 50% computed width with non-zero min",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 51,
                "column": 54
            },
            "line": 51,
            "code": "  it('Should have 50% computed width with non-zero min', () => {\n    const node = mount(<ProgressBar min={1} max={11} now={6} />)\n      .find('.progress-bar')\n      .getDOMNode();\n\n    assert.equal(node.style.width, '50%');\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not have label",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 59,
                "column": 27
            },
            "line": 59,
            "code": "  it('Should not have label', () => {\n    const node = mount(<ProgressBar min={0} max={10} now={5} />).getDOMNode();\n\n    assert.equal(node.textContent, '');\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have label",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 65,
                "column": 23
            },
            "line": 65,
            "code": "  it('Should have label', () => {\n    const node = mount(\n      <ProgressBar\n        min={0}\n        max={10}\n        now={5}\n        variant=\"success\"\n        label=\"progress bar label\"\n      />,\n    ).getDOMNode();\n\n    assert.equal(node.textContent, 'progress bar label');\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have screen reader only label",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 79,
                "column": 42
            },
            "line": 79,
            "code": "  it('Should have screen reader only label', () => {\n    const node = mount(\n      <ProgressBar\n        min={0}\n        max={10}\n        now={5}\n        visuallyHidden\n        variant=\"success\"\n        label=\"progress bar label\"\n      />,\n    )\n      .find('.visually-hidden')\n      .getDOMNode();\n\n    assert.equal(node.textContent, 'progress bar label');\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have a label that is a React component",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 96,
                "column": 51
            },
            "line": 96,
            "code": "  it('Should have a label that is a React component', () => {\n    const customLabel = <strong className=\"special-label\">My label</strong>;\n\n    mount(\n      <ProgressBar min={0} max={10} now={5} label={customLabel} />,\n    ).assertSingle('.special-label');\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have screen reader only label that wraps a React component",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 104,
                "column": 71
            },
            "line": 104,
            "code": "  it('Should have screen reader only label that wraps a React component', () => {\n    const customLabel = <strong className=\"special-label\">My label</strong>;\n\n    mount(\n      <ProgressBar\n        min={0}\n        max={10}\n        now={5}\n        label={customLabel}\n        visuallyHidden\n      />,\n    ).find('.visually-hidden .special-label');\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should show striped bar",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 118,
                "column": 29
            },
            "line": 118,
            "code": "  it('Should show striped bar', () => {\n    mount(<ProgressBar min={1} max={11} now={6} striped />).assertSingle(\n      '.progress-bar-striped',\n    );\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should show animated striped bar",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 124,
                "column": 38
            },
            "line": 124,
            "code": "  it('Should show animated striped bar', () => {\n    mount(<ProgressBar min={1} max={11} now={6} animated />).assertSingle(\n      '.progress-bar-striped.progress-bar-animated',\n    );\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should show stacked bars",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 130,
                "column": 30
            },
            "line": 130,
            "code": "  it('Should show stacked bars', () => {\n    const node = mount(\n      <ProgressBar>\n        <ProgressBar key={1} now={50} />\n        <ProgressBar key={2} now={30} />\n      </ProgressBar>,\n    ).getDOMNode();\n\n    const bar1 = node.firstChild;\n    const bar2 = node.lastChild;\n\n    assert.ok(bar1.className.match(/\\bprogress-bar\\b/));\n    assert.equal(bar1.style.width, '50%');\n\n    assert.ok(bar2.className.match(/\\bprogress-bar\\b/));\n    assert.equal(bar2.style.width, '30%');\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render animated and striped children in stacked bar too",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 148,
                "column": 68
            },
            "line": 148,
            "code": "  it('Should render animated and striped children in stacked bar too', () => {\n    const node = mount(\n      <ProgressBar>\n        <ProgressBar animated key={1} now={50} />\n        <ProgressBar striped key={2} now={30} />\n      </ProgressBar>,\n    ).getDOMNode();\n    // const node = ReactDOM.findDOMNode(node);\n    const bar1 = node.firstChild;\n    const bar2 = node.lastChild;\n\n    assert.ok(bar1.className.match(/\\bprogress-bar\\b/));\n    assert.ok(bar1.className.match(/\\bprogress-bar-animated\\b/));\n    assert.ok(bar1.className.match(/\\bprogress-bar-striped\\b/));\n\n    assert.ok(bar2.className.match(/\\bprogress-bar\\b/));\n    assert.ok(bar2.className.match(/\\bprogress-bar-striped\\b/));\n    assert.notOk(bar2.className.match(/\\bprogress-bar-animated\\b/));\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should forward className and style to nested bars",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 168,
                "column": 55
            },
            "line": 168,
            "code": "  it('Should forward className and style to nested bars', () => {\n    const node = mount(\n      <ProgressBar>\n        <ProgressBar now={1} className=\"bar1\" />\n        <ProgressBar now={2} style={{ minWidth: 10 }} />\n      </ProgressBar>,\n    ).getDOMNode();\n\n    const bar1 = node.firstChild;\n    const bar2 = node.lastChild;\n\n    assert.ok(bar1.className.match(/\\bbar1\\b/));\n    assert.equal(bar2.style.minWidth, '10px');\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "allows only ProgressBar in children",
            "suites": [
                "<ProgressBar>"
            ],
            "updatePoint": {
                "line": 183,
                "column": 41
            },
            "line": 183,
            "code": "  it('allows only ProgressBar in children', () => {\n    shouldWarn('Failed prop');\n\n    function NotProgressBar() {\n      return null;\n    }\n\n    mount(\n      <ProgressBar>\n        <ProgressBar key={1} />\n        <NotProgressBar />\n        foo\n        <ProgressBar key={2} />\n      </ProgressBar>,\n    );\n  });",
            "file": "ProgressBarSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should contain `ratio` class",
            "suites": [
                "Ratio"
            ],
            "updatePoint": {
                "line": 6,
                "column": 34
            },
            "line": 6,
            "code": "  it('should contain `ratio` class', () => {\n    mount(\n      <Ratio aspectRatio=\"1x1\" className=\"custom-class\">\n        <div />\n      </Ratio>,\n    ).assertSingle('div.custom-class.ratio.ratio-1x1 div');\n  });",
            "file": "RatioSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support custom ratios using percent for aspectRatio",
            "suites": [
                "Ratio"
            ],
            "updatePoint": {
                "line": 14,
                "column": 64
            },
            "line": 14,
            "code": "  it('should support custom ratios using percent for aspectRatio', () => {\n    const wrapper = mount(\n      <Ratio aspectRatio={50}>\n        <div />\n      </Ratio>,\n    );\n\n    expect(wrapper.find('.ratio').props().style['--bs-aspect-ratio']).to.equal(\n      '50%',\n    );\n  });",
            "file": "RatioSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support custom ratios using fraction for aspectRatio",
            "suites": [
                "Ratio"
            ],
            "updatePoint": {
                "line": 26,
                "column": 65
            },
            "line": 26,
            "code": "  it('should support custom ratios using fraction for aspectRatio', () => {\n    const wrapper = mount(\n      <Ratio aspectRatio={1 / 2}>\n        <div />\n      </Ratio>,\n    );\n\n    expect(wrapper.find('.ratio').props().style['--bs-aspect-ratio']).to.equal(\n      '50%',\n    );\n  });",
            "file": "RatioSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support use 100% as custom ratio if aspectRatio is less than 0",
            "suites": [
                "Ratio"
            ],
            "updatePoint": {
                "line": 38,
                "column": 75
            },
            "line": 38,
            "code": "  it('should support use 100% as custom ratio if aspectRatio is less than 0', () => {\n    const wrapper = mount(\n      <Ratio aspectRatio={-1}>\n        <div />\n      </Ratio>,\n    );\n\n    expect(wrapper.find('.ratio').props().style['--bs-aspect-ratio']).to.equal(\n      '100%',\n    );\n  });",
            "file": "RatioSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should support use 100% as custom ratio if aspectRatio is greater than 100",
            "suites": [
                "Ratio"
            ],
            "updatePoint": {
                "line": 50,
                "column": 80
            },
            "line": 50,
            "code": "  it('should support use 100% as custom ratio if aspectRatio is greater than 100', () => {\n    const wrapper = mount(\n      <Ratio aspectRatio={200}>\n        <div />\n      </Ratio>,\n    );\n\n    expect(wrapper.find('.ratio').props().style['--bs-aspect-ratio']).to.equal(\n      '100%',\n    );\n  });",
            "file": "RatioSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should include \"row\" when there are no sizes",
            "suites": [
                "Row"
            ],
            "updatePoint": {
                "line": 6,
                "column": 50
            },
            "line": 6,
            "code": "  it('Should include \"row\" when there are no sizes', () => {\n    mount(<Row />).assertSingle('.row');\n  });",
            "file": "RowSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should include sizes",
            "suites": [
                "Row"
            ],
            "updatePoint": {
                "line": 10,
                "column": 26
            },
            "line": 10,
            "code": "  it('Should include sizes', () => {\n    mount(<Row xs={4} md={8} />).assertSingle('.row-cols-md-8.row-cols-4');\n  });",
            "file": "RowSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should allow sizes as objects",
            "suites": [
                "Row"
            ],
            "updatePoint": {
                "line": 14,
                "column": 35
            },
            "line": 14,
            "code": "  it('Should allow sizes as objects', () => {\n    mount(<Row xs={{ cols: 4 }} md={{ cols: 8 }} />).assertSingle(\n      '.row-cols-md-8.row-cols-4',\n    );\n  });",
            "file": "RowSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should allow auto as size",
            "suites": [
                "Row"
            ],
            "updatePoint": {
                "line": 20,
                "column": 31
            },
            "line": 20,
            "code": "  it('Should allow auto as size', () => {\n    mount(<Row xs=\"auto\" md=\"auto\" />).assertSingle(\n      '.row-cols-md-auto.row-cols-auto',\n    );\n  });",
            "file": "RowSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should allow auto as size in object form",
            "suites": [
                "Row"
            ],
            "updatePoint": {
                "line": 26,
                "column": 46
            },
            "line": 26,
            "code": "  it('Should allow auto as size in object form', () => {\n    mount(<Row xs={{ cols: 'auto' }} md={{ cols: 'auto' }} />).assertSingle(\n      '.row-cols-md-auto.row-cols-auto',\n    );\n  });",
            "file": "RowSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses \"div\" by default",
            "suites": [
                "Row"
            ],
            "updatePoint": {
                "line": 32,
                "column": 27
            },
            "line": 32,
            "code": "  it('uses \"div\" by default', () => {\n    mount(\n      <Row className=\"custom-class\">\n        <strong>Children</strong>\n      </Row>,\n    ).assertSingle('div.row.custom-class strong');\n  });",
            "file": "RowSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should allow custom elements instead of \"div\"",
            "suites": [
                "Row"
            ],
            "updatePoint": {
                "line": 40,
                "column": 51
            },
            "line": 40,
            "code": "  it('should allow custom elements instead of \"div\"', () => {\n    mount(<Row as=\"section\" />).assertSingle('section.row');\n  });",
            "file": "RowSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should be rendered on the server side",
            "suites": [
                "Modal"
            ],
            "updatePoint": {
                "line": 7,
                "column": 43
            },
            "line": 7,
            "code": "  it('Should be rendered on the server side', () => {\n    let noOp = () => {};\n\n    assert.doesNotThrow(() =>\n      ReactDOMServer.renderToString(\n        <Modal onHide={noOp}>\n          <strong>Message</strong>\n        </Modal>,\n      ),\n    );\n  });",
            "file": "server/ModalSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render a basic spinner correctly",
            "suites": [
                "<Spinner>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 45
            },
            "line": 6,
            "code": "  it('Should render a basic spinner correctly', () => {\n    mount(<Spinner animation=\"border\" />).assertSingle('div.spinner-border');\n  });",
            "file": "SpinnerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render a spinner with a custom element, variant and size ",
            "suites": [
                "<Spinner>"
            ],
            "updatePoint": {
                "line": 10,
                "column": 70
            },
            "line": 10,
            "code": "  it('Should render a spinner with a custom element, variant and size ', () => {\n    mount(\n      <Spinner as=\"span\" animation=\"grow\" variant=\"primary\" size=\"sm\" />,\n    ).assertSingle('span.spinner-grow.spinner-grow-sm.text-primary');\n  });",
            "file": "SpinnerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render a spinner with other properties",
            "suites": [
                "<Spinner>"
            ],
            "updatePoint": {
                "line": 16,
                "column": 51
            },
            "line": 16,
            "code": "  it('Should render a spinner with other properties', () => {\n    mount(<Spinner animation=\"grow\" role=\"status\" />).assertSingle(\n      'div.spinner-grow[role=\"status\"]',\n    );\n  });",
            "file": "SpinnerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should render child elements",
            "suites": [
                "<Spinner>"
            ],
            "updatePoint": {
                "line": 22,
                "column": 34
            },
            "line": 22,
            "code": "  it('Should render child elements', () => {\n    mount(\n      <Spinner animation=\"grow\">\n        <span id=\"testChild\" />\n      </Spinner>,\n    ).assertSingle('div.spinner-grow span#testChild');\n  });",
            "file": "SpinnerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have div as default component",
            "suites": [
                "<Spinner>"
            ],
            "updatePoint": {
                "line": 30,
                "column": 42
            },
            "line": 30,
            "code": "  it('Should have div as default component', () => {\n    mount(<Spinner animation=\"border\" />).assertSingle('div');\n  });",
            "file": "SpinnerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should open the menu when dropdown button is clicked",
            "suites": [
                "<SplitButton>"
            ],
            "updatePoint": {
                "line": 16,
                "column": 58
            },
            "line": 16,
            "code": "  it('should open the menu when dropdown button is clicked', () => {\n    const wrapper = mount(simple);\n\n    wrapper.assertNone('.show');\n\n    wrapper.find('button.dropdown-toggle').simulate('click');\n\n    wrapper.assertSingle('div.dropdown.show');\n  });",
            "file": "SplitButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not open the menu when other button is clicked",
            "suites": [
                "<SplitButton>"
            ],
            "updatePoint": {
                "line": 26,
                "column": 59
            },
            "line": 26,
            "code": "  it('should not open the menu when other button is clicked', () => {\n    const wrapper = mount(simple);\n\n    wrapper.assertNone('.show');\n\n    wrapper.find('button').first().simulate('click');\n\n    wrapper.assertNone('.show');\n  });",
            "file": "SplitButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should invoke onClick when SplitButton.Button is clicked (prop)",
            "suites": [
                "<SplitButton>"
            ],
            "updatePoint": {
                "line": 36,
                "column": 69
            },
            "line": 36,
            "code": "  it('should invoke onClick when SplitButton.Button is clicked (prop)', (done) => {\n    const wrapper = mount(\n      <SplitButton title=\"Title\" id=\"test-id\" onClick={() => done()}>\n        <DropdownItem>Item 1</DropdownItem>\n      </SplitButton>,\n    );\n\n    wrapper.find('button').first().simulate('click');\n  });",
            "file": "SplitButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not invoke onClick when SplitButton.Toggle is clicked (prop)",
            "suites": [
                "<SplitButton>"
            ],
            "updatePoint": {
                "line": 46,
                "column": 73
            },
            "line": 46,
            "code": "  it('should not invoke onClick when SplitButton.Toggle is clicked (prop)', () => {\n    let onClickSpy = sinon.spy();\n\n    const wrapper = mount(\n      <SplitButton title=\"Title\" id=\"test-id\" onClick={onClickSpy}>\n        <DropdownItem>Item 1</DropdownItem>\n      </SplitButton>,\n    );\n\n    wrapper.find('button.dropdown-toggle').simulate('click');\n\n    expect(onClickSpy.callCount).to.equal(0);\n  });",
            "file": "SplitButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass disabled to both buttons",
            "suites": [
                "<SplitButton>"
            ],
            "updatePoint": {
                "line": 60,
                "column": 42
            },
            "line": 60,
            "code": "  it('Should pass disabled to both buttons', () => {\n    mount(\n      <SplitButton title=\"Title\" id=\"test-id\" disabled>\n        <DropdownItem>Item 1</DropdownItem>\n      </SplitButton>,\n    )\n      .find('button[disabled]')\n      .length.should.equal(2);\n  });",
            "file": "SplitButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should set target attribute on anchor",
            "suites": [
                "<SplitButton>"
            ],
            "updatePoint": {
                "line": 70,
                "column": 43
            },
            "line": 70,
            "code": "  it('Should set target attribute on anchor', () => {\n    mount(\n      <SplitButton\n        title=\"Title\"\n        id=\"test-id\"\n        href=\"/some/unique-thing/\"\n        target=\"_blank\"\n      >\n        <DropdownItem eventKey=\"1\">DropdownItem 1 content</DropdownItem>\n      </SplitButton>,\n    ).assertSingle('a[target=\"_blank\"]');\n  });",
            "file": "SplitButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set accessible label on toggle",
            "suites": [
                "<SplitButton>"
            ],
            "updatePoint": {
                "line": 83,
                "column": 43
            },
            "line": 83,
            "code": "  it('should set accessible label on toggle', () => {\n    mount(simple)\n      .assertSingle('.visually-hidden')\n      .text()\n      .should.equal('Toggle dropdown');\n  });",
            "file": "SplitButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set aria-label on toggle from toggleLabel",
            "suites": [
                "<SplitButton>"
            ],
            "updatePoint": {
                "line": 90,
                "column": 54
            },
            "line": 90,
            "code": "  it('should set aria-label on toggle from toggleLabel', () => {\n    mount(\n      <SplitButton title=\"Title\" id=\"test-id\" toggleLabel=\"Label\">\n        <DropdownItem>Item 1</DropdownItem>\n      </SplitButton>,\n    )\n      .assertSingle('.visually-hidden')\n      .text()\n      .should.equal('Label');\n  });",
            "file": "SplitButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should set type attribute from type",
            "suites": [
                "<SplitButton>"
            ],
            "updatePoint": {
                "line": 101,
                "column": 41
            },
            "line": 101,
            "code": "  it('should set type attribute from type', () => {\n    mount(\n      <SplitButton title=\"Title\" id=\"test-id\" type=\"submit\">\n        <DropdownItem>Item 1</DropdownItem>\n      </SplitButton>,\n    ).assertSingle('button[type=\"submit\"]');\n  });",
            "file": "SplitButtonSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have div as default component",
            "suites": [
                "<TabContent>"
            ],
            "updatePoint": {
                "line": 6,
                "column": 42
            },
            "line": 6,
            "code": "  it('Should have div as default component', () => {\n    mount(<TabContent />).assertSingle('div');\n  });",
            "file": "TabContentSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should be a table",
            "suites": [
                "Table"
            ],
            "updatePoint": {
                "line": 6,
                "column": 23
            },
            "line": 6,
            "code": "  it('Should be a table', () => {\n    mount(<Table />).assertSingle('table.table');\n  });",
            "file": "TableSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have correct class when striped",
            "suites": [
                "Table"
            ],
            "updatePoint": {
                "line": 10,
                "column": 44
            },
            "line": 10,
            "code": "  it('Should have correct class when striped', () => {\n    mount(<Table striped />).assertSingle('table.table-striped');\n  });",
            "file": "TableSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have correct class when hover",
            "suites": [
                "Table"
            ],
            "updatePoint": {
                "line": 14,
                "column": 42
            },
            "line": 14,
            "code": "  it('Should have correct class when hover', () => {\n    mount(<Table hover />).assertSingle('table.table-hover');\n  });",
            "file": "TableSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have correct class when bordered",
            "suites": [
                "Table"
            ],
            "updatePoint": {
                "line": 18,
                "column": 45
            },
            "line": 18,
            "code": "  it('Should have correct class when bordered', () => {\n    mount(<Table bordered />).assertSingle('table.table-bordered');\n  });",
            "file": "TableSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have correct class when borderless",
            "suites": [
                "Table"
            ],
            "updatePoint": {
                "line": 22,
                "column": 47
            },
            "line": 22,
            "code": "  it('Should have correct class when borderless', () => {\n    mount(<Table borderless />).assertSingle('table.table-borderless');\n  });",
            "file": "TableSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have correct class when small",
            "suites": [
                "Table"
            ],
            "updatePoint": {
                "line": 26,
                "column": 42
            },
            "line": 26,
            "code": "  it('Should have correct class when small', () => {\n    mount(<Table size=\"sm\" />).assertSingle('table.table-sm');\n  });",
            "file": "TableSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have correct class when dark",
            "suites": [
                "Table"
            ],
            "updatePoint": {
                "line": 30,
                "column": 41
            },
            "line": 30,
            "code": "  it('Should have correct class when dark', () => {\n    mount(<Table variant=\"dark\" />).assertSingle('table.table-dark');\n  });",
            "file": "TableSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have responsive wrapper",
            "suites": [
                "Table"
            ],
            "updatePoint": {
                "line": 34,
                "column": 36
            },
            "line": 34,
            "code": "  it('Should have responsive wrapper', () => {\n    mount(<Table responsive />).assertSingle('div.table-responsive > .table');\n  });",
            "file": "TableSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have responsive breakpoints",
            "suites": [
                "Table"
            ],
            "updatePoint": {
                "line": 38,
                "column": 40
            },
            "line": 38,
            "code": "  it('Should have responsive breakpoints', () => {\n    mount(<Table responsive=\"sm\" />).assertSingle(\n      'div.table-responsive-sm > .table',\n    );\n  });",
            "file": "TableSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should show the correct tab",
            "suites": [
                "<Tabs>"
            ],
            "updatePoint": {
                "line": 9,
                "column": 33
            },
            "line": 9,
            "code": "  it('Should show the correct tab', () => {\n    const wrapper = mount(\n      <Tabs id=\"test\" defaultActiveKey={1}>\n        <Tab title=\"Tab 1\" eventKey={1}>\n          Tab 1 content\n        </Tab>\n        <Tab title=\"Tab 2\" eventKey={2}>\n          Tab 2 content\n        </Tab>\n      </Tabs>,\n    );\n\n    wrapper.assertSingle('TabPane[eventKey=1] .active');\n    wrapper.assertSingle('NavLink[eventKey=1] button.active');\n  });",
            "file": "TabsSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should get defaultActiveKey (if null) from first child tab with eventKey",
            "suites": [
                "<Tabs>"
            ],
            "updatePoint": {
                "line": 25,
                "column": 78
            },
            "line": 25,
            "code": "  it('should get defaultActiveKey (if null) from first child tab with eventKey', () => {\n    const wrapper = mount(\n      <Tabs id=\"test\">\n        <Tab title=\"Tab 1\" eventKey={1}>\n          Tab 1 content\n        </Tab>\n        <Tab title=\"Tab 2\" eventKey={2}>\n          Tab 2 content\n        </Tab>\n      </Tabs>,\n    );\n    wrapper.assertSingle('TabPane[eventKey=1] .active');\n    wrapper.assertSingle('NavLink[eventKey=1] button.active');\n  });",
            "file": "TabsSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should allow tab to have React components",
            "suites": [
                "<Tabs>"
            ],
            "updatePoint": {
                "line": 40,
                "column": 47
            },
            "line": 40,
            "code": "  it('Should allow tab to have React components', () => {\n    const tabTitle = <strong className=\"special-tab\">Tab 2</strong>;\n\n    mount(\n      <Tabs id=\"test\" defaultActiveKey={2}>\n        <Tab title=\"Tab 1\" eventKey={1}>\n          Tab 1 content\n        </Tab>\n        <Tab title={tabTitle} eventKey={2}>\n          Tab 2 content\n        </Tab>\n      </Tabs>,\n    ).assertSingle('NavLink button .special-tab');\n  });",
            "file": "TabsSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should call onSelect when tab is selected",
            "suites": [
                "<Tabs>"
            ],
            "updatePoint": {
                "line": 55,
                "column": 47
            },
            "line": 55,
            "code": "  it('Should call onSelect when tab is selected', (done) => {\n    function onSelect(key) {\n      assert.equal(key, '2');\n      done();\n    }\n\n    mount(\n      <Tabs id=\"test\" onSelect={onSelect} activeKey={1}>\n        <Tab title=\"Tab 1\" eventKey=\"1\">\n          Tab 1 content\n        </Tab>\n        <Tab title=\"Tab 2\" eventKey=\"2\">\n          Tab 2 content\n        </Tab>\n      </Tabs>,\n    )\n      .find('NavLink[eventKey=\"2\"] button')\n      .simulate('click');\n  });",
            "file": "TabsSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should have children with the correct DOM properties",
            "suites": [
                "<Tabs>"
            ],
            "updatePoint": {
                "line": 75,
                "column": 58
            },
            "line": 75,
            "code": "  it('Should have children with the correct DOM properties', () => {\n    const wrapper = mount(\n      <Tabs id=\"test\" defaultActiveKey={1}>\n        <Tab title=\"Tab 1\" className=\"custom\" eventKey={1}>\n          Tab 1 content\n        </Tab>\n        <Tab title=\"Tab 2\" tabClassName=\"tcustom\" eventKey={2}>\n          Tab 2 content\n        </Tab>\n      </Tabs>,\n    );\n\n    wrapper.assertSingle('button.nav-link.tcustom');\n    wrapper.assertNone('button.nav-link.custom');\n    wrapper.assertSingle('div.tab-pane.custom#test-tabpane-1');\n  });",
            "file": "TabsSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass variant to Nav",
            "suites": [
                "<Tabs>"
            ],
            "updatePoint": {
                "line": 92,
                "column": 32
            },
            "line": 92,
            "code": "  it('Should pass variant to Nav', () => {\n    mount(\n      <Tabs id=\"test\" variant=\"pills\" defaultActiveKey={1} transition={false}>\n        <Tab title=\"Tab 1\" eventKey={1}>\n          Tab 1 content\n        </Tab>\n        <Tab title=\"Tab 2\" eventKey={2}>\n          Tab 2 content\n        </Tab>\n      </Tabs>,\n    ).assertSingle('ul.nav-pills');\n  });",
            "file": "TabsSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should pass disabled to Nav",
            "suites": [
                "<Tabs>"
            ],
            "updatePoint": {
                "line": 105,
                "column": 33
            },
            "line": 105,
            "code": "  it('Should pass disabled to Nav', () => {\n    mount(\n      <Tabs id=\"test\" defaultActiveKey={1}>\n        <Tab title=\"Tab 1\" eventKey={1}>\n          Tab 1 content\n        </Tab>\n        <Tab title=\"Tab 2\" eventKey={2} disabled>\n          Tab 2 content\n        </Tab>\n      </Tabs>,\n    ).assertSingle('button.nav-link.disabled');\n  });",
            "file": "TabsSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should not render a Tab without a title",
            "suites": [
                "<Tabs>"
            ],
            "updatePoint": {
                "line": 118,
                "column": 45
            },
            "line": 118,
            "code": "  it('Should not render a Tab without a title', () => {\n    shouldWarn('Failed prop');\n    mount(\n      <Tabs id=\"test\" defaultActiveKey={1}>\n        <Tab eventKey={1}>Tab 1 content</Tab>\n        <Tab title=\"Tab 2\" eventKey={2} disabled>\n          Tab 2 content\n        </Tab>\n      </Tabs>,\n    )\n      .find('button.nav-link')\n      .should.have.length(1);\n  });",
            "file": "TabsSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should throw error message on attempt to render",
            "suites": [
                "<Tab>"
            ],
            "updatePoint": {
                "line": 134,
                "column": 53
            },
            "line": 134,
            "code": "  it('should throw error message on attempt to render', () => {\n    expect(() =>\n      shallow(\n        <Tab title=\"Tab 1\" eventKey={1}>\n          Tab 1 content\n        </Tab>,\n      ),\n    ).to.throw();\n  });",
            "file": "TabsSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use HOC value",
            "suites": [
                "<ThemeProvider>"
            ],
            "updatePoint": {
                "line": 19,
                "column": 26
            },
            "line": 19,
            "code": "  it('should use HOC value', () => {\n    const wrapper = mount(\n      <div>\n        <Foo />\n      </div>,\n    );\n\n    wrapper.assertSingle('p.foo');\n  });",
            "file": "ThemeProviderSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should provide bsPrefix overrides",
            "suites": [
                "<ThemeProvider>"
            ],
            "updatePoint": {
                "line": 29,
                "column": 39
            },
            "line": 29,
            "code": "  it('should provide bsPrefix overrides', () => {\n    const wrapper = mount(\n      <ThemeProvider prefixes={{ btn: 'my-btn', foo: 'global-foo' }}>\n        <div>\n          <Button variant=\"primary\">My label</Button>\n          <Foo />\n        </div>\n      </ThemeProvider>,\n    );\n\n    wrapper.assertSingle('button.my-btn.my-btn-primary');\n    wrapper.assertSingle('p.global-foo');\n  });",
            "file": "ThemeProviderSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use prop bsPrefix first",
            "suites": [
                "<ThemeProvider>"
            ],
            "updatePoint": {
                "line": 43,
                "column": 36
            },
            "line": 43,
            "code": "  it('should use prop bsPrefix first', () => {\n    const wrapper = mount(\n      <ThemeProvider prefixes={{ foo: 'global-foo' }}>\n        <div>\n          <Foo bsPrefix=\"my-foo\" />\n        </div>\n      </ThemeProvider>,\n    );\n\n    wrapper.assertSingle('p.my-foo');\n  });",
            "file": "ThemeProviderSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should forward ref",
            "suites": [
                "<ThemeProvider>"
            ],
            "updatePoint": {
                "line": 55,
                "column": 24
            },
            "line": 55,
            "code": "  it('should forward ref', () => {\n    let ref;\n    const wrapper = mount(\n      <div>\n        <Foo bsPrefix=\"my-foo\" ref={(r) => (ref = r)} />\n      </div>,\n    );\n\n    expect(ref).to.equal(wrapper.find('Foo').instance());\n  });",
            "file": "ThemeProviderSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "will pass all props to the created div and renders its children",
            "suites": [
                "Toast.Body"
            ],
            "updatePoint": {
                "line": 6,
                "column": 69
            },
            "line": 6,
            "code": "  it('will pass all props to the created div and renders its children', () => {\n    const content = <strong>Content</strong>;\n    mount(\n      <Toast.Body className=\"custom-class\">{content}</Toast.Body>,\n    ).assertSingle('div.custom-class.toast-body>strong');\n  });",
            "file": "ToastBodySpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render a basic toast container",
            "suites": [
                "ToastContainer"
            ],
            "updatePoint": {
                "line": 18,
                "column": 43
            },
            "line": 18,
            "code": "  it('should render a basic toast container', () => {\n    mount(<ToastContainer />).assertSingle('.toast-container');\n  });",
            "file": "ToastContainerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render position=",
            "suites": [
                "ToastContainer"
            ],
            "updatePoint": {
                "line": 23,
                "column": 42
            },
            "line": 23,
            "code": "    it(`should render position=${position}`, () => {\n      mount(<ToastContainer position={position} />).assertSingle(\n        expectedClasses[position],\n      );\n    });",
            "file": "ToastContainerSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "will pass all props to the created div and renders its children",
            "suites": [
                "Toast.Header"
            ],
            "updatePoint": {
                "line": 6,
                "column": 69
            },
            "line": 6,
            "code": "  it('will pass all props to the created div and renders its children', () => {\n    mount(\n      <Toast.Header>\n        <strong>content</strong>\n      </Toast.Header>,\n    ).assertSingle('div.toast-header strong');\n  });",
            "file": "ToastHeaderSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render close button variant",
            "suites": [
                "Toast.Header"
            ],
            "updatePoint": {
                "line": 14,
                "column": 40
            },
            "line": 14,
            "code": "  it('should render close button variant', () => {\n    const wrapper = mount(\n      <Toast.Header closeButton closeVariant=\"white\">\n        <strong>content</strong>\n      </Toast.Header>,\n    );\n    expect(wrapper.find('CloseButton').props()).to.have.property(\n      'variant',\n      'white',\n    );\n  });",
            "file": "ToastHeaderSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should apply bg prop",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 16,
                "column": 26
            },
            "line": 16,
            "code": "  it('should apply bg prop', () => {\n    mount(<Toast bg=\"primary\">Card</Toast>).assertSingle('.toast.bg-primary');\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render an entire toast",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 20,
                "column": 35
            },
            "line": 20,
            "code": "  it('should render an entire toast', () => {\n    mount(\n      <Toast>\n        <Toast.Header />\n        <Toast.Body />\n      </Toast>,\n    ).assertSingle(\n      'div.toast[className=\"fade toast show\"][role=\"alert\"][aria-live=\"assertive\"][aria-atomic=\"true\"]',\n    );\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render without transition if animation is false",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 31,
                "column": 60
            },
            "line": 31,
            "code": "  it('should render without transition if animation is false', () => {\n    mount(\n      <Toast animation={false}>\n        <Toast.Header />\n        <Toast.Body />\n      </Toast>,\n    ).assertSingle(\n      'div.toast[className=\"toast show\"][role=\"alert\"][aria-live=\"assertive\"][aria-atomic=\"true\"]',\n    );\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should trigger the onClose event after clicking on the close button",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 42,
                "column": 73
            },
            "line": 42,
            "code": "  it('should trigger the onClose event after clicking on the close button', () => {\n    const onCloseSpy = sinon.spy();\n\n    mount(\n      <Toast onClose={onCloseSpy}>\n        <Toast.Header>header-content</Toast.Header>\n        <Toast.Body>body-content</Toast.Body>\n      </Toast>,\n    )\n      .find('.toast-header')\n      .at(0)\n      .find('button')\n      .simulate('click');\n\n    expect(onCloseSpy).to.have.been.calledOnce;\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should trigger the onClose event after the autohide delay",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 59,
                "column": 63
            },
            "line": 59,
            "code": "  it('should trigger the onClose event after the autohide delay', () => {\n    const onCloseSpy = sinon.spy();\n    mount(\n      <Toast onClose={onCloseSpy} delay={500} show autohide>\n        <Toast.Header>header-content</Toast.Header>\n        <Toast.Body>body-content</Toast.Body>\n      </Toast>,\n    );\n    clock.tick(1000);\n    expect(onCloseSpy).to.have.been.calledOnce;\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not trigger the onClose event if autohide is not set",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 71,
                "column": 65
            },
            "line": 71,
            "code": "  it('should not trigger the onClose event if autohide is not set', () => {\n    const onCloseSpy = sinon.spy();\n    mount(\n      <Toast onClose={onCloseSpy}>\n        <Toast.Header>header-content</Toast.Header>\n        <Toast.Body>body-content</Toast.Body>\n      </Toast>,\n    );\n    clock.tick(3000);\n    expect(onCloseSpy).not.to.have.been.called;\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should clearTimeout after unmount",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 83,
                "column": 39
            },
            "line": 83,
            "code": "  it('should clearTimeout after unmount', () => {\n    const onCloseSpy = sinon.spy();\n    const wrapper = mount(\n      <Toast delay={500} onClose={onCloseSpy} show autohide>\n        <Toast.Header>header-content</Toast.Header>\n        <Toast.Body>body-content</Toast.Body>\n      </Toast>,\n    );\n    wrapper.unmount();\n    clock.tick(1000);\n    expect(onCloseSpy).not.to.have.been.called;\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not reset autohide timer when element re-renders with same props",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 96,
                "column": 77
            },
            "line": 96,
            "code": "  it('should not reset autohide timer when element re-renders with same props', () => {\n    const onCloseSpy = sinon.spy();\n    const wrapper = mount(\n      <Toast delay={500} onClose={onCloseSpy} show autohide>\n        <Toast.Header>header-content</Toast.Header>\n        <Toast.Body>body-content</Toast.Body>\n      </Toast>,\n    );\n\n    clock.tick(250);\n\n    // Trigger render with no props changes.\n    wrapper.setProps({});\n\n    clock.tick(300);\n    expect(onCloseSpy).to.have.been.calledOnce;\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not reset autohide timer when delay is changed",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 114,
                "column": 59
            },
            "line": 114,
            "code": "  it('should not reset autohide timer when delay is changed', () => {\n    const onCloseSpy = sinon.spy();\n    const wrapper = mount(\n      <Toast delay={500} onClose={onCloseSpy} show autohide>\n        <Toast.Header>header-content</Toast.Header>\n        <Toast.Body>body-content</Toast.Body>\n      </Toast>,\n    );\n\n    clock.tick(250);\n\n    wrapper.setProps({ delay: 10000 });\n\n    clock.tick(300);\n    expect(onCloseSpy).to.have.been.calledOnce;\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not reset autohide timer when onClosed is changed",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 131,
                "column": 62
            },
            "line": 131,
            "code": "  it('should not reset autohide timer when onClosed is changed', () => {\n    const onCloseSpy = sinon.spy();\n    const onCloseSpy2 = sinon.spy();\n    const wrapper = mount(\n      <Toast delay={500} onClose={onCloseSpy} show autohide>\n        <Toast.Header>header-content</Toast.Header>\n        <Toast.Body>body-content</Toast.Body>\n      </Toast>,\n    );\n\n    clock.tick(250);\n\n    wrapper.setProps({ onClose: onCloseSpy2 });\n\n    clock.tick(300);\n    expect(onCloseSpy).not.to.have.been.called;\n    expect(onCloseSpy2).to.have.been.calledOnce;\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not call onClose if autohide is changed from true to false",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 150,
                "column": 71
            },
            "line": 150,
            "code": "  it('should not call onClose if autohide is changed from true to false', () => {\n    const onCloseSpy = sinon.spy();\n    const wrapper = mount(\n      <Toast delay={500} onClose={onCloseSpy} show autohide>\n        <Toast.Header>header-content</Toast.Header>\n        <Toast.Body>body-content</Toast.Body>\n      </Toast>,\n    );\n\n    clock.tick(250);\n\n    wrapper.setProps({ autohide: false });\n\n    clock.tick(300);\n    expect(onCloseSpy).not.to.have.been.called;\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not call onClose if show is changed from true to false",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 167,
                "column": 67
            },
            "line": 167,
            "code": "  it('should not call onClose if show is changed from true to false', () => {\n    const onCloseSpy = sinon.spy();\n    const wrapper = mount(\n      <Toast delay={500} onClose={onCloseSpy} show autohide>\n        <Toast.Header>header-content</Toast.Header>\n        <Toast.Body>body-content</Toast.Body>\n      </Toast>,\n    );\n\n    clock.tick(250);\n\n    wrapper.setProps({ show: false });\n\n    clock.tick(300);\n    expect(onCloseSpy).not.to.have.been.called;\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render with bsPrefix",
            "suites": [
                "<Toast>"
            ],
            "updatePoint": {
                "line": 184,
                "column": 33
            },
            "line": 184,
            "code": "  it('should render with bsPrefix', () => {\n    mount(\n      <Toast bsPrefix=\"my-toast\">\n        <Toast.Header />\n        <Toast.Body />\n      </Toast>,\n    ).assertSingle('div.my-toast');\n  });",
            "file": "ToastSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should forward refs to the label",
            "suites": [
                "ToggleButton"
            ],
            "updatePoint": {
                "line": 7,
                "column": 38
            },
            "line": 7,
            "code": "  it('should forward refs to the label', () => {\n    const ref = React.createRef();\n    mount(\n      <div>\n        <ToggleButtonGroup.Button id=\"id\" ref={ref} value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </div>,\n    );\n\n    ref.current.tagName.should.equal('LABEL');\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should add an inputRef",
            "suites": [
                "ToggleButton"
            ],
            "updatePoint": {
                "line": 20,
                "column": 28
            },
            "line": 20,
            "code": "  it('should add an inputRef', () => {\n    const ref = React.createRef();\n    mount(\n      <ToggleButtonGroup.Button id=\"id\" inputRef={ref} value={3}>\n        Option 3\n      </ToggleButtonGroup.Button>,\n    );\n\n    ref.current.tagName.should.equal('INPUT');\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render checkboxes",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 33,
                "column": 30
            },
            "line": 33,
            "code": "  it('should render checkboxes', () => {\n    const wrapper = mount(\n      <ToggleButtonGroup type=\"checkbox\">\n        <ToggleButtonGroup.Button id=\"id1\" value={1}>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id2\" value={2}>\n          Option 2\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    );\n\n    wrapper.assertSingle('.btn-group').assertNone('.btn-group-vertical');\n    wrapper.find('input[type=\"checkbox\"]').length.should.equal(3);\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render checkboxes vertically",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 52,
                "column": 41
            },
            "line": 52,
            "code": "  it('should render checkboxes vertically', () => {\n    const wrapper = mount(\n      <ToggleButtonGroup type=\"checkbox\" vertical>\n        <ToggleButtonGroup.Button id=\"id1\" value={1}>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id2\" value={2}>\n          Option 2\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    );\n\n    wrapper.assertSingle('.btn-group-vertical').assertNone('.btn-group');\n    wrapper.find('input[type=\"checkbox\"]').length.should.equal(3);\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render checkboxes vertically and small",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 71,
                "column": 51
            },
            "line": 71,
            "code": "  it('should render checkboxes vertically and small', () => {\n    const wrapper = mount(\n      <ToggleButtonGroup type=\"checkbox\" vertical size=\"sm\">\n        <ToggleButtonGroup.Button id=\"id1\" value={1}>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id2\" value={2}>\n          Option 2\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    );\n\n    wrapper\n      .assertSingle('.btn-group-vertical.btn-group-sm')\n      .assertNone('.btn-group');\n    wrapper.find('input[type=\"checkbox\"]').length.should.equal(3);\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render checkboxes vertically and large",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 92,
                "column": 51
            },
            "line": 92,
            "code": "  it('should render checkboxes vertically and large', () => {\n    const wrapper = mount(\n      <ToggleButtonGroup type=\"checkbox\" vertical size=\"lg\">\n        <ToggleButtonGroup.Button id=\"id1\" value={1}>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id2\" value={2}>\n          Option 2\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    );\n\n    wrapper\n      .assertSingle('.btn-group-vertical.btn-group-lg')\n      .assertNone('.btn-group');\n    wrapper.find('input[type=\"checkbox\"]').length.should.equal(3);\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render radios",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 113,
                "column": 26
            },
            "line": 113,
            "code": "  it('should render radios', () => {\n    const wrapper = mount(\n      <ToggleButtonGroup type=\"radio\" name=\"items\">\n        <ToggleButtonGroup.Button id=\"id1\" value={1}>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id2\" value={2}>\n          Option 2\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    );\n\n    wrapper.assertSingle('.btn-group').assertNone('btn-group-vertical');\n    wrapper.find('input[type=\"radio\"]').length.should.equal(3);\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render radios vertically",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 132,
                "column": 37
            },
            "line": 132,
            "code": "  it('should render radios vertically', () => {\n    const wrapper = mount(\n      <ToggleButtonGroup type=\"radio\" name=\"items\" vertical>\n        <ToggleButtonGroup.Button id=\"id1\" value={1}>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id2\" value={2}>\n          Option 2\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    );\n\n    wrapper.assertSingle('.btn-group-vertical').assertNone('.btn-group');\n    wrapper.find('input[type=\"radio\"]').length.should.equal(3);\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render radios vertically and small",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 151,
                "column": 47
            },
            "line": 151,
            "code": "  it('should render radios vertically and small', () => {\n    const wrapper = mount(\n      <ToggleButtonGroup type=\"radio\" name=\"items\" vertical size=\"sm\">\n        <ToggleButtonGroup.Button id=\"id1\" value={1}>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id2\" value={2}>\n          Option 2\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    );\n\n    wrapper\n      .assertSingle('.btn-group-vertical.btn-group-sm')\n      .assertNone('.btn-group');\n    wrapper.find('input[type=\"radio\"]').length.should.equal(3);\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should render radios vertically and large",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 172,
                "column": 47
            },
            "line": 172,
            "code": "  it('should render radios vertically and large', () => {\n    const wrapper = mount(\n      <ToggleButtonGroup type=\"radio\" name=\"items\" vertical size=\"lg\">\n        <ToggleButtonGroup.Button id=\"id1\" value={1}>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id2\" value={2}>\n          Option 2\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    );\n\n    wrapper\n      .assertSingle('.btn-group-vertical.btn-group-lg')\n      .assertNone('.btn-group');\n    wrapper.find('input[type=\"radio\"]').length.should.equal(3);\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should select initial values",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 193,
                "column": 34
            },
            "line": 193,
            "code": "  it('should select initial values', () => {\n    mount(\n      <ToggleButtonGroup type=\"checkbox\" defaultValue={[1, 3]}>\n        <ToggleButtonGroup.Button id=\"id1\" value={1}>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id2\" value={2}>\n          Option 2\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    )\n      .find('input[checked=true]')\n      .length.should.equal(2);\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should disable radios",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 211,
                "column": 27
            },
            "line": 211,
            "code": "  it('should disable radios', () => {\n    const wrapper = mount(\n      <ToggleButtonGroup type=\"radio\" name=\"items\">\n        <ToggleButtonGroup.Button id=\"id1\" value={1} disabled>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id2\" value={2} disabled>\n          Option 2\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    );\n\n    wrapper.find('input[disabled=true]').length.should.equal(2);\n    wrapper.find('label.disabled').length.should.equal(2);\n    wrapper.assertNone('label[disabled=true]');\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return an array of values",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 231,
                "column": 38
            },
            "line": 231,
            "code": "  it('should return an array of values', () => {\n    const spy = sinon.spy();\n    mount(\n      <ToggleButtonGroup type=\"checkbox\" onChange={spy}>\n        <ToggleButtonGroup.Button id=\"id1\" value={1}>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id2\" value={2}>\n          Option 2\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    )\n      .find('input[type=\"checkbox\"]')\n      .at(1)\n      .simulate('change');\n\n    spy.should.have.been.calledWith([2]);\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should return a single value",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 253,
                "column": 34
            },
            "line": 253,
            "code": "  it('should return a single value', () => {\n    const spy = sinon.spy();\n    mount(\n      <ToggleButtonGroup type=\"radio\" name=\"items\" onChange={spy}>\n        <ToggleButtonGroup.Button id=\"id1\" value={1}>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id2\" value={2}>\n          Option 2\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={3}>\n          Option 3\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    )\n      .find('input[type=\"radio\"]')\n      .at(1)\n      .simulate('change');\n\n    spy.should.have.been.calledWith(2);\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should filter out value when deselected",
            "suites": [
                "ToggleButtonGroup"
            ],
            "updatePoint": {
                "line": 275,
                "column": 45
            },
            "line": 275,
            "code": "  it('should filter out value when deselected', () => {\n    const spy = sinon.spy();\n    mount(\n      <ToggleButtonGroup\n        type=\"checkbox\"\n        name=\"items\"\n        defaultValue={[1, 2]}\n        onChange={spy}\n      >\n        <ToggleButtonGroup.Button id=\"id2\" value={1}>\n          Option 1\n        </ToggleButtonGroup.Button>\n        <ToggleButtonGroup.Button id=\"id3\" value={2}>\n          Option 2\n        </ToggleButtonGroup.Button>\n      </ToggleButtonGroup>,\n    )\n      .find('input[type=\"checkbox\"]')\n      .at(0)\n      .simulate('change');\n\n    spy.should.have.been.calledWith([2]);\n  });",
            "file": "ToggleButtonGroupSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Should output a tooltip with content",
            "suites": [
                "Tooltip"
            ],
            "updatePoint": {
                "line": 6,
                "column": 42
            },
            "line": 6,
            "code": "  it('Should output a tooltip with content', () => {\n    mount(\n      <Tooltip id=\"test-tooltip\" placement=\"right\">\n        <strong>Tooltip Content</strong>\n      </Tooltip>,\n    ).assertSingle(\n      '.tooltip[x-placement=\"right\"][role=\"tooltip\"].bs-tooltip-end strong',\n    );\n  });",
            "file": "TooltipSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have offset of [0, 8] for Popovers",
            "suites": [
                "useOverlayOffset"
            ],
            "updatePoint": {
                "line": 22,
                "column": 47
            },
            "line": 22,
            "code": "  it('should have offset of [0, 8] for Popovers', () => {\n    const ref = React.createRef();\n\n    mount(\n      <Wrapper ref={ref}>\n        <Popover id=\"test-popover\" />\n      </Wrapper>,\n    );\n\n    const offset = ref.current.modifiers[0].options.offset();\n    expect(offset).to.eql([0, 8]);\n  });",
            "file": "useOverlayOffsetSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have offset of [0, 0] for Tooltips",
            "suites": [
                "useOverlayOffset"
            ],
            "updatePoint": {
                "line": 35,
                "column": 47
            },
            "line": 35,
            "code": "  it('should have offset of [0, 0] for Tooltips', () => {\n    const ref = React.createRef();\n\n    mount(\n      <Wrapper ref={ref}>\n        <Tooltip id=\"test-tooltip\" />\n      </Wrapper>,\n    );\n\n    const offset = ref.current.modifiers[0].options.offset();\n    expect(offset).to.eql([0, 0]);\n  });",
            "file": "useOverlayOffsetSpec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should have offset of [0, 0] for any overlay",
            "suites": [
                "useOverlayOffset"
            ],
            "updatePoint": {
                "line": 48,
                "column": 50
            },
            "line": 48,
            "code": "  it('should have offset of [0, 0] for any overlay', () => {\n    const ref = React.createRef();\n\n    mount(\n      <Wrapper ref={ref}>\n        <div>test</div>\n      </Wrapper>,\n    );\n\n    const offset = ref.current.modifiers[0].options.offset();\n    expect(offset).to.eql([0, 0]);\n  });",
            "file": "useOverlayOffsetSpec.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "react-bootstrap__react-bootstrap.svg"
}