{"repo":"expressjs/body-parser","url":"https://github.com/expressjs/body-parser","branch":"master","configs":[{"package":"body-parser","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should default to {}","suites":["bodyParser()"],"updatePoint":{"line":13,"column":26,"index":263},"line":13,"code":"  it('should default to {}', function (done) {\n    request(this.server).post('/').expect(200, '{}', done);\n  });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse JSON","suites":["bodyParser()"],"updatePoint":{"line":16,"column":23,"index":373},"line":16,"code":"  it('should parse JSON', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse x-www-form-urlencoded","suites":["bodyParser()"],"updatePoint":{"line":19,"column":40,"index":577},"line":19,"code":"  it('should parse x-www-form-urlencoded', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser()"],"updatePoint":{"line":22,"column":41,"index":793},"line":22,"code":"  it('should handle duplicated middleware', function (done) {\n    var _bodyParser = bodyParser();\n\n    var server = http.createServer(function (req, res) {\n      _bodyParser(req, res, function (err0) {\n        _bodyParser(req, res, function (err1) {\n          var err = err0 || err1;\n          res.statusCode = err ? err.status || 500 : 200;\n          res.end(err ? err.message : JSON.stringify(req.body));\n        });\n      });\n    });\n    request(server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse JSON","suites":["bodyParser()","with type option"],"updatePoint":{"line":71,"column":25,"index":2487},"line":71,"code":"    it('should parse JSON', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n    });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse x-www-form-urlencoded","suites":["bodyParser()","with type option"],"updatePoint":{"line":74,"column":42,"index":2697},"line":74,"code":"    it('should parse x-www-form-urlencoded', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n    });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should apply to json","suites":["bodyParser()","with verify option"],"updatePoint":{"line":79,"column":28,"index":2957},"line":79,"code":"    it('should apply to json', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send(' {\"user\":\"tobi\"}').expect(403, '[entity.verify.failed] no leading space', done);\n    });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should apply to urlencoded","suites":["bodyParser()","with verify option"],"updatePoint":{"line":87,"column":34,"index":3344},"line":87,"code":"    it('should apply to urlencoded', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(' user=tobi').expect(403, '[entity.verify.failed] no leading space', done);\n    });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse JSON","suites":["bodyParser.json()"],"updatePoint":{"line":15,"column":23,"index":394},"line":15,"code":"  it('should parse JSON', function (done) {\n    request(createServer()).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should handle Content-Length: 0","suites":["bodyParser.json()"],"updatePoint":{"line":18,"column":37,"index":598},"line":18,"code":"  it('should handle Content-Length: 0', function (done) {\n    request(createServer()).get('/').set('Content-Type', 'application/json').set('Content-Length', '0').expect(200, '{}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should handle empty message-body","suites":["bodyParser.json()"],"updatePoint":{"line":21,"column":38,"index":792},"line":21,"code":"  it('should handle empty message-body', function (done) {\n    request(createServer()).get('/').set('Content-Type', 'application/json').set('Transfer-Encoding', 'chunked').expect(200, '{}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should handle no message-body","suites":["bodyParser.json()"],"updatePoint":{"line":24,"column":35,"index":992},"line":24,"code":"  it('should handle no message-body', function (done) {\n    request(createServer()).get('/').set('Content-Type', 'application/json').unset('Transfer-Encoding').expect(200, '{}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 when only whitespace","suites":["bodyParser.json()"],"updatePoint":{"line":27,"column":37,"index":1185},"line":27,"code":"  it('should 400 when only whitespace', function (done) {\n    request(createServer()).post('/').set('Content-Type', 'application/json').send('  \\n').expect(400, '[entity.parse.failed] ' + parseError(' '), done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 when invalid content-length","suites":["bodyParser.json()"],"updatePoint":{"line":30,"column":44,"index":1410},"line":30,"code":"  it('should 400 when invalid content-length', function (done) {\n    var jsonParser = bodyParser.json();\n    var server = createServer(function (req, res, next) {\n      req.headers['content-length'] = '20'; // bad length\n\n      jsonParser(req, res, next);\n    });\n    request(server).post('/').set('Content-Type', 'application/json').send('{\"str\":').expect(400, /content length/, done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 500 if stream not readable","suites":["bodyParser.json()"],"updatePoint":{"line":39,"column":39,"index":1798},"line":39,"code":"  it('should 500 if stream not readable', function (done) {\n    var jsonParser = bodyParser.json();\n    var server = createServer(function (req, res, next) {\n      req.on('end', function () {\n        jsonParser(req, res, next);\n      });\n      req.resume();\n    });\n    request(server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(500, '[stream.not.readable] stream is not readable', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser.json()"],"updatePoint":{"line":49,"column":41,"index":2233},"line":49,"code":"  it('should handle duplicated middleware', function (done) {\n    var jsonParser = bodyParser.json();\n    var server = createServer(function (req, res, next) {\n      jsonParser(req, res, function (err) {\n        if (err) return next(err);\n        jsonParser(req, res, next);\n      });\n    });\n    request(server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 for bad token","suites":["bodyParser.json()","when JSON is invalid"],"updatePoint":{"line":63,"column":32,"index":2773},"line":63,"code":"    it('should 400 for bad token', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').send('{:').expect(400, '[entity.parse.failed] ' + parseError('{:'), done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 for incomplete","suites":["bodyParser.json()","when JSON is invalid"],"updatePoint":{"line":66,"column":33,"index":2987},"line":66,"code":"    it('should 400 for incomplete', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\"').expect(400, '[entity.parse.failed] ' + parseError('{\"user\"'), done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should include original body on error object","suites":["bodyParser.json()","when JSON is invalid"],"updatePoint":{"line":69,"column":52,"index":3230},"line":69,"code":"    it('should include original body on error object', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'body').send(' {\"user\"').expect(400, ' {\"user\"', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with Content-Length","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":74,"column":54,"index":3522},"line":74,"code":"    it('should 413 when over limit with Content-Length', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: '1kb'\n      })).post('/').set('Content-Type', 'application/json').set('Content-Length', '1034').send(JSON.stringify({\n        str: buf.toString()\n      })).expect(413, '[entity.too.large] request entity too large', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with chunked encoding","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":82,"column":56,"index":3914},"line":82,"code":"    it('should 413 when over limit with chunked encoding', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/json');\n      test.set('Transfer-Encoding', 'chunked');\n      test.write('{\"str\":');\n      test.write('\"' + buf.toString() + '\"}');\n      test.expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 413 when inflated body over limit","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":94,"column":48,"index":4347},"line":94,"code":"    it('should 413 when inflated body over limit', function (done) {\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000aab562a2e2952b252d21b05a360148c58a0540b0066f7ce1e0a040000', 'hex'));\n      test.expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should accept number of bytes","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":104,"column":37,"index":4766},"line":104,"code":"    it('should accept number of bytes', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: 1024\n      })).post('/').set('Content-Type', 'application/json').send(JSON.stringify({\n        str: buf.toString()\n      })).expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not change when options altered","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":112,"column":46,"index":5070},"line":112,"code":"    it('should not change when options altered', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      var options = {\n        limit: '1kb'\n      };\n      var server = createServer(options);\n      options.limit = '100kb';\n      request(server).post('/').set('Content-Type', 'application/json').send(JSON.stringify({\n        str: buf.toString()\n      })).expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not hang response","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":123,"column":32,"index":5448},"line":123,"code":"    it('should not hang response', function (done) {\n      var buf = Buffer.alloc(10240, '.');\n      var server = createServer({\n        limit: '8kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/json');\n      test.write(buf);\n      test.write(buf);\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not error when inflating","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":135,"column":39,"index":5818},"line":135,"code":"    it('should not error when inflating', function (done) {\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000aab562a2e2952b252d21b05a360148c58a0540b0066f7ce1e0a0400', 'hex'));\n      test.expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not accept content-encoding","suites":["bodyParser.json()","with inflate option","when false"],"updatePoint":{"line":153,"column":44,"index":6448},"line":153,"code":"      it('should not accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/json');\n        test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n        test.expect(415, '[encoding.unsupported] content encoding unsupported', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should accept content-encoding","suites":["bodyParser.json()","with inflate option","when true"],"updatePoint":{"line":167,"column":40,"index":7027},"line":167,"code":"      it('should accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/json');\n        test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n        test.expect(200, '{\"name\":\"论\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 on primitives","suites":["bodyParser.json()","with strict option","when undefined"],"updatePoint":{"line":181,"column":34,"index":7584},"line":181,"code":"      it('should 400 on primitives', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('true').expect(400, '[entity.parse.failed] ' + parseError('#rue').replace('#', 't'), done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse primitives","suites":["bodyParser.json()","with strict option","when false"],"updatePoint":{"line":191,"column":33,"index":7983},"line":191,"code":"      it('should parse primitives', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('true').expect(200, 'true', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not parse primitives","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":201,"column":37,"index":8327},"line":201,"code":"      it('should not parse primitives', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('true').expect(400, '[entity.parse.failed] ' + parseError('#rue').replace('#', 't'), done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not parse primitives with leading whitespaces","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":204,"column":62,"index":8596},"line":204,"code":"      it('should not parse primitives with leading whitespaces', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('    true').expect(400, '[entity.parse.failed] ' + parseError('    #rue').replace('#', 't'), done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should allow leading whitespaces in JSON","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":207,"column":50,"index":8861},"line":207,"code":"      it('should allow leading whitespaces in JSON', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('   { \"user\": \"tobi\" }').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should include correct message in stack trace","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":210,"column":55,"index":9094},"line":210,"code":"      it('should include correct message in stack trace', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'stack').send('true').expect(400).expect(shouldContainInBody(parseError('#rue').replace('#', 't'))).end(done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse JSON for custom type","suites":["bodyParser.json()","with type option","when \"application/vnd.api+json\""],"updatePoint":{"line":222,"column":43,"index":9632},"line":222,"code":"      it('should parse JSON for custom type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/vnd.api+json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should ignore standard type","suites":["bodyParser.json()","with type option","when \"application/vnd.api+json\""],"updatePoint":{"line":225,"column":37,"index":9849},"line":225,"code":"      it('should ignore standard type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse JSON for \"application/json\"","suites":["bodyParser.json()","with type option","when [\"application/json\", \"application/vnd.api+json\"]"],"updatePoint":{"line":235,"column":50,"index":10301},"line":235,"code":"      it('should parse JSON for \"application/json\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse JSON for \"application/vnd.api+json\"","suites":["bodyParser.json()","with type option","when [\"application/json\", \"application/vnd.api+json\"]"],"updatePoint":{"line":238,"column":58,"index":10531},"line":238,"code":"      it('should parse JSON for \"application/vnd.api+json\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/vnd.api+json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should ignore \"application/x-json\"","suites":["bodyParser.json()","with type option","when [\"application/json\", \"application/vnd.api+json\"]"],"updatePoint":{"line":241,"column":44,"index":10755},"line":241,"code":"      it('should ignore \"application/x-json\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-json').send('{\"user\":\"tobi\"}').expect(200, '{}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse when truthy value returned","suites":["bodyParser.json()","with type option","when a function"],"updatePoint":{"line":246,"column":49,"index":11019},"line":246,"code":"      it('should parse when truthy value returned', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return req.headers['content-type'] === 'application/vnd.api+json';\n        }\n\n        request(server).post('/').set('Content-Type', 'application/vnd.api+json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should work without content-type","suites":["bodyParser.json()","with type option","when a function"],"updatePoint":{"line":257,"column":42,"index":11427},"line":257,"code":"      it('should work without content-type', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return true;\n        }\n\n        var test = request(server).post('/');\n        test.write('{\"user\":\"tobi\"}');\n        test.expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not invoke without a body","suites":["bodyParser.json()","with type option","when a function"],"updatePoint":{"line":270,"column":42,"index":11773},"line":270,"code":"      it('should not invoke without a body', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          throw new Error('oops!');\n        }\n\n        request(server).get('/').expect(200, done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should assert value if function","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":284,"column":39,"index":12106},"line":284,"code":"    it('should assert value if function', function () {\n      assert.throws(createServer.bind(null, {\n        verify: 'lol'\n      }), /TypeError: option verify must be function/);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should error from verify","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":289,"column":32,"index":12287},"line":289,"code":"    it('should error from verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send('[\"tobi\"]').expect(403, '[entity.verify.failed] no arrays', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should allow custom codes","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":297,"column":33,"index":12651},"line":297,"code":"    it('should allow custom codes', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x5b) return;\n          var err = new Error('no arrays');\n          err.status = 400;\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send('[\"tobi\"]').expect(400, '[entity.verify.failed] no arrays', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should allow custom type","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":308,"column":32,"index":13085},"line":308,"code":"    it('should allow custom type', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x5b) return;\n          var err = new Error('no arrays');\n          err.type = 'foo.bar';\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send('[\"tobi\"]').expect(403, '[foo.bar] no arrays', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should include original body on error object","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":319,"column":52,"index":13530},"line":319,"code":"    it('should include original body on error object', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'body').send('[\"tobi\"]').expect(403, '[\"tobi\"]', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should allow pass-through","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":327,"column":33,"index":13902},"line":327,"code":"    it('should allow pass-through', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should work with different charsets","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":335,"column":43,"index":14266},"line":335,"code":"    it('should work with different charsets', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/json; charset=utf-16');\n      test.write(Buffer.from('feff007b0022006e0061006d00650022003a00228bba0022007d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown charset prior to verify","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":346,"column":53,"index":14758},"line":346,"code":"    it('should 415 on unknown charset prior to verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          throw new Error('unexpected verify call');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/json; charset=x-bogus');\n      test.write(Buffer.from('00000000', 'hex'));\n      test.expect(415, '[charset.unsupported] unsupported charset \"X-BOGUS\"', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should presist store","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":379,"column":28,"index":15845},"line":379,"code":"    it('should presist store', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200).expect('x-store-foo', 'bar').expect('{\"user\":\"tobi\"}').end(done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should presist store when unmatched content-type","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":382,"column":56,"index":16109},"line":382,"code":"    it('should presist store when unmatched content-type', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/fizzbuzz').send('buzz').expect(200).expect('x-store-foo', 'bar').expect('{}').end(done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should presist store when inflated","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":385,"column":42,"index":16339},"line":385,"code":"    it('should presist store when inflated', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n      test.expect(200);\n      test.expect('x-store-foo', 'bar');\n      test.expect('{\"name\":\"论\"}');\n      test.end(done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should presist store when inflate error","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":395,"column":47,"index":16792},"line":395,"code":"    it('should presist store when inflate error', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bab56cc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n      test.expect(400);\n      test.expect('x-store-foo', 'bar');\n      test.end(done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should presist store when parse error","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":404,"column":45,"index":17204},"line":404,"code":"    it('should presist store when parse error', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":').expect(400).expect('x-store-foo', 'bar').end(done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should presist store when limit exceeded","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":407,"column":48,"index":17427},"line":407,"code":"    it('should presist store when limit exceeded', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"' + Buffer.alloc(1024 * 100, '.').toString() + '\"}').expect(413).expect('x-store-foo', 'bar').end(done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse utf-8","suites":["bodyParser.json()","charset"],"updatePoint":{"line":415,"column":26,"index":17790},"line":415,"code":"    it('should parse utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=utf-8');\n      test.write(Buffer.from('7b226e616d65223a22e8aeba227d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse utf-16","suites":["bodyParser.json()","charset"],"updatePoint":{"line":421,"column":27,"index":18078},"line":421,"code":"    it('should parse utf-16', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=utf-16');\n      test.write(Buffer.from('feff007b0022006e0061006d00650022003a00228bba0022007d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse when content-length != char length","suites":["bodyParser.json()","charset"],"updatePoint":{"line":427,"column":55,"index":18419},"line":427,"code":"    it('should parse when content-length != char length', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=utf-8');\n      test.set('Content-Length', '13');\n      test.write(Buffer.from('7b2274657374223a22c3a5227d', 'hex'));\n      test.expect(200, '{\"test\":\"å\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should default to utf-8","suites":["bodyParser.json()","charset"],"updatePoint":{"line":434,"column":31,"index":18749},"line":434,"code":"    it('should default to utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('7b226e616d65223a22e8aeba227d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should fail on unknown charset","suites":["bodyParser.json()","charset"],"updatePoint":{"line":440,"column":38,"index":19033},"line":440,"code":"    it('should fail on unknown charset', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=koi8-r');\n      test.write(Buffer.from('7b226e616d65223a22cec5d4227d', 'hex'));\n      test.expect(415, '[charset.unsupported] unsupported charset \"KOI8-R\"', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse without encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":453,"column":37,"index":19512},"line":453,"code":"    it('should parse without encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('7b226e616d65223a22e8aeba227d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should support identity encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":459,"column":40,"index":19798},"line":459,"code":"    it('should support identity encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'identity');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('7b226e616d65223a22e8aeba227d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should support gzip encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":466,"column":36,"index":20128},"line":466,"code":"    it('should support gzip encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should support deflate encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":473,"column":39,"index":20497},"line":473,"code":"    it('should support deflate encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'deflate');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('789cab56ca4bcc4d55b2527ab16e97522d00274505ac', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should be case-insensitive","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":480,"column":34,"index":20840},"line":480,"code":"    it('should be case-insensitive', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'GZIP');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":487,"column":38,"index":21208},"line":487,"code":"    it('should 415 on unknown encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, '[encoding.unsupported] unsupported content encoding \"nulls\"', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 on malformed encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":494,"column":40,"index":21570},"line":494,"code":"    it('should 400 on malformed encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bab56cc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n      test.expect(400, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 413 when inflated value exceeds limit","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":501,"column":52,"index":21932},"line":501,"code":"    it('should 413 when inflated value exceeds limit', function (done) {\n      // gzip'd data exceeds 1kb, but deflated below 1kb\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bedc1010d000000c2a0f74f6d0f071400000000000000', 'hex'));\n      test.write(Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex'));\n      test.write(Buffer.from('0000000000000000004f0625b3b71650c30000', 'hex'));\n      test.expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse application/octet-stream","suites":["bodyParser.raw()"],"updatePoint":{"line":18,"column":43,"index":476},"line":18,"code":"  it('should parse application/octet-stream', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/octet-stream').send('the user is tobi').expect(200, 'buf:746865207573657220697320746f6269', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 400 when invalid content-length","suites":["bodyParser.raw()"],"updatePoint":{"line":21,"column":44,"index":714},"line":21,"code":"  it('should 400 when invalid content-length', function (done) {\n    var rawParser = bodyParser.raw();\n    var server = createServer(function (req, res, next) {\n      req.headers['content-length'] = '20'; // bad length\n\n      rawParser(req, res, next);\n    });\n    request(server).post('/').set('Content-Type', 'application/octet-stream').send('stuff').expect(400, /content length/, done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should handle Content-Length: 0","suites":["bodyParser.raw()"],"updatePoint":{"line":30,"column":37,"index":1103},"line":30,"code":"  it('should handle Content-Length: 0', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/octet-stream').set('Content-Length', '0').expect(200, 'buf:', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should handle empty message-body","suites":["bodyParser.raw()"],"updatePoint":{"line":33,"column":38,"index":1305},"line":33,"code":"  it('should handle empty message-body', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/octet-stream').set('Transfer-Encoding', 'chunked').send('').expect(200, 'buf:', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 500 if stream not readable","suites":["bodyParser.raw()"],"updatePoint":{"line":36,"column":39,"index":1526},"line":36,"code":"  it('should 500 if stream not readable', function (done) {\n    var rawParser = bodyParser.raw();\n    var server = createServer(function (req, res, next) {\n      req.on('end', function () {\n        rawParser(req, res, next);\n      });\n      req.resume();\n    });\n    request(server).post('/').set('Content-Type', 'application/octet-stream').send('the user is tobi').expect(500, '[stream.not.readable] stream is not readable', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser.raw()"],"updatePoint":{"line":46,"column":41,"index":1967},"line":46,"code":"  it('should handle duplicated middleware', function (done) {\n    var rawParser = bodyParser.raw();\n    var server = createServer(function (req, res, next) {\n      rawParser(req, res, function (err) {\n        if (err) return next(err);\n        rawParser(req, res, next);\n      });\n    });\n    request(server).post('/').set('Content-Type', 'application/octet-stream').send('the user is tobi').expect(200, 'buf:746865207573657220697320746f6269', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with Content-Length","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":57,"column":54,"index":2483},"line":57,"code":"    it('should 413 when over limit with Content-Length', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.set('Content-Length', '1028');\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with chunked encoding","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":68,"column":56,"index":2873},"line":68,"code":"    it('should 413 when over limit with chunked encoding', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.set('Transfer-Encoding', 'chunked');\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 413 when inflated body over limit","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":79,"column":48,"index":3261},"line":79,"code":"    it('should 413 when inflated body over limit', function (done) {\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a14704040000', 'hex'));\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should accept number of bytes","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":89,"column":37,"index":3670},"line":89,"code":"    it('should accept number of bytes', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var server = createServer({\n        limit: 1024\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not change when options altered","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":99,"column":46,"index":4007},"line":99,"code":"    it('should not change when options altered', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var options = {\n        limit: '1kb'\n      };\n      var server = createServer(options);\n      options.limit = '100kb';\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not hang response","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":111,"column":32,"index":4391},"line":111,"code":"    it('should not hang response', function (done) {\n      var buf = Buffer.alloc(10240, '.');\n      var server = createServer({\n        limit: '8kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(buf);\n      test.write(buf);\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not error when inflating","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":123,"column":39,"index":4769},"line":123,"code":"    it('should not error when inflating', function (done) {\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a147040400', 'hex'));\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not accept content-encoding","suites":["bodyParser.raw()","with inflate option","when false"],"updatePoint":{"line":141,"column":44,"index":5389},"line":141,"code":"      it('should not accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/octet-stream');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n        test.expect(415, '[encoding.unsupported] content encoding unsupported', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should accept content-encoding","suites":["bodyParser.raw()","with inflate option","when true"],"updatePoint":{"line":155,"column":40,"index":5964},"line":155,"code":"      it('should accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/octet-stream');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n        test.expect(200, 'buf:6e616d653de8aeba', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse for custom type","suites":["bodyParser.raw()","with type option","when \"application/vnd+octets\""],"updatePoint":{"line":171,"column":38,"index":6594},"line":171,"code":"      it('should parse for custom type', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/vnd+octets');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should ignore standard type","suites":["bodyParser.raw()","with type option","when \"application/vnd+octets\""],"updatePoint":{"line":177,"column":37,"index":6869},"line":177,"code":"      it('should ignore standard type', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/octet-stream');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, '{}', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse \"application/octet-stream\"","suites":["bodyParser.raw()","with type option","when [\"application/octet-stream\", \"application/vnd+octets\"]"],"updatePoint":{"line":190,"column":49,"index":7405},"line":190,"code":"      it('should parse \"application/octet-stream\"', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/octet-stream');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse \"application/vnd+octets\"","suites":["bodyParser.raw()","with type option","when [\"application/octet-stream\", \"application/vnd+octets\"]"],"updatePoint":{"line":196,"column":47,"index":7692},"line":196,"code":"      it('should parse \"application/vnd+octets\"', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/vnd+octets');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should ignore \"application/x-foo\"","suites":["bodyParser.raw()","with type option","when [\"application/octet-stream\", \"application/vnd+octets\"]"],"updatePoint":{"line":202,"column":43,"index":7973},"line":202,"code":"      it('should ignore \"application/x-foo\"', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/x-foo');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, '{}', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse when truthy value returned","suites":["bodyParser.raw()","with type option","when a function"],"updatePoint":{"line":210,"column":49,"index":8301},"line":210,"code":"      it('should parse when truthy value returned', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return req.headers['content-type'] === 'application/vnd.octet';\n        }\n\n        var test = request(server).post('/');\n        test.set('Content-Type', 'application/vnd.octet');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should work without content-type","suites":["bodyParser.raw()","with type option","when a function"],"updatePoint":{"line":224,"column":42,"index":8763},"line":224,"code":"      it('should work without content-type', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return true;\n        }\n\n        var test = request(server).post('/');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not invoke without a body","suites":["bodyParser.raw()","with type option","when a function"],"updatePoint":{"line":237,"column":42,"index":9115},"line":237,"code":"      it('should not invoke without a body', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          throw new Error('oops!');\n        }\n\n        request(server).get('/').expect(200, done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should assert value is function","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":251,"column":39,"index":9448},"line":251,"code":"    it('should assert value is function', function () {\n      assert.throws(createServer.bind(null, {\n        verify: 'lol'\n      }), /TypeError: option verify must be function/);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should error from verify","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":256,"column":32,"index":9629},"line":256,"code":"    it('should error from verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x00) throw new Error('no leading null');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('000102', 'hex'));\n      test.expect(403, '[entity.verify.failed] no leading null', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should allow custom codes","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":267,"column":33,"index":10079},"line":267,"code":"    it('should allow custom codes', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x00) return;\n          var err = new Error('no leading null');\n          err.status = 400;\n          throw err;\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('000102', 'hex'));\n      test.expect(400, '[entity.verify.failed] no leading null', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should allow pass-through","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":281,"column":33,"index":10600},"line":281,"code":"    it('should allow pass-through', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x00) throw new Error('no leading null');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('0102', 'hex'));\n      test.expect(200, 'buf:0102', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should presist store","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":314,"column":28,"index":11642},"line":314,"code":"    it('should presist store', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/octet-stream').send('the user is tobi').expect(200).expect('x-store-foo', 'bar').expect('buf:746865207573657220697320746f6269').end(done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should presist store when unmatched content-type","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":317,"column":56,"index":11936},"line":317,"code":"    it('should presist store when unmatched content-type', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/fizzbuzz').send('buzz').expect(200).expect('x-store-foo', 'bar').expect('{}').end(done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should presist store when inflated","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":320,"column":42,"index":12166},"line":320,"code":"    it('should presist store when inflated', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200);\n      test.expect('x-store-foo', 'bar');\n      test.expect('buf:6e616d653de8aeba');\n      test.end(done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should presist store when inflate error","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":330,"column":47,"index":12623},"line":330,"code":"    it('should presist store when inflate error', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad6080000', 'hex'));\n      test.expect(400);\n      test.expect('x-store-foo', 'bar');\n      test.end(done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should presist store when limit exceeded","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":339,"column":48,"index":13036},"line":339,"code":"    it('should presist store when limit exceeded', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/octet-stream').send('the user is ' + Buffer.alloc(1024 * 100, '.').toString()).expect(413).expect('x-store-foo', 'bar').end(done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should ignore charset","suites":["bodyParser.raw()","charset"],"updatePoint":{"line":347,"column":29,"index":13406},"line":347,"code":"    it('should ignore charset', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/octet-stream; charset=utf-8');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, 'buf:6e616d6520697320e8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse without encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":360,"column":37,"index":13863},"line":360,"code":"    it('should parse without encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should support identity encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":366,"column":40,"index":14153},"line":366,"code":"    it('should support identity encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'identity');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should support gzip encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":373,"column":36,"index":14487},"line":373,"code":"    it('should support gzip encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should support deflate encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":380,"column":39,"index":14860},"line":380,"code":"    it('should support deflate encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'deflate');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('789ccb4bcc4db57db16e17001068042f', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should be case-insensitive","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":387,"column":34,"index":15207},"line":387,"code":"    it('should be case-insensitive', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'GZIP');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":394,"column":38,"index":15579},"line":394,"code":"    it('should 415 on unknown encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, '[encoding.unsupported] unsupported content encoding \"nulls\"', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse text/plain","suites":["bodyParser.text()"],"updatePoint":{"line":18,"column":29,"index":463},"line":18,"code":"  it('should parse text/plain', function (done) {\n    request(this.server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200, '\"user is tobi\"', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 400 when invalid content-length","suites":["bodyParser.text()"],"updatePoint":{"line":21,"column":44,"index":661},"line":21,"code":"  it('should 400 when invalid content-length', function (done) {\n    var textParser = bodyParser.text();\n    var server = createServer(function (req, res, next) {\n      req.headers['content-length'] = '20'; // bad length\n\n      textParser(req, res, next);\n    });\n    request(server).post('/').set('Content-Type', 'text/plain').send('user').expect(400, /content length/, done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should handle Content-Length: 0","suites":["bodyParser.text()"],"updatePoint":{"line":30,"column":37,"index":1038},"line":30,"code":"  it('should handle Content-Length: 0', function (done) {\n    request(createServer({\n      limit: '1kb'\n    })).post('/').set('Content-Type', 'text/plain').set('Content-Length', '0').expect(200, '\"\"', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should handle empty message-body","suites":["bodyParser.text()"],"updatePoint":{"line":35,"column":38,"index":1253},"line":35,"code":"  it('should handle empty message-body', function (done) {\n    request(createServer({\n      limit: '1kb'\n    })).post('/').set('Content-Type', 'text/plain').set('Transfer-Encoding', 'chunked').send('').expect(200, '\"\"', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 500 if stream not readable","suites":["bodyParser.text()"],"updatePoint":{"line":40,"column":39,"index":1487},"line":40,"code":"  it('should 500 if stream not readable', function (done) {\n    var textParser = bodyParser.text();\n    var server = createServer(function (req, res, next) {\n      req.on('end', function () {\n        textParser(req, res, next);\n      });\n      req.resume();\n    });\n    request(server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(500, '[stream.not.readable] stream is not readable', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser.text()"],"updatePoint":{"line":50,"column":41,"index":1913},"line":50,"code":"  it('should handle duplicated middleware', function (done) {\n    var textParser = bodyParser.text();\n    var server = createServer(function (req, res, next) {\n      textParser(req, res, function (err) {\n        if (err) return next(err);\n        textParser(req, res, next);\n      });\n    });\n    request(server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200, '\"user is tobi\"', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should change default charset","suites":["bodyParser.text()","with defaultCharset option"],"updatePoint":{"line":61,"column":37,"index":2385},"line":61,"code":"    it('should change default charset', function (done) {\n      var server = createServer({\n        defaultCharset: 'koi8-r'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('6e616d6520697320cec5d4', 'hex'));\n      test.expect(200, '\"name is нет\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should honor content-type charset","suites":["bodyParser.text()","with defaultCharset option"],"updatePoint":{"line":70,"column":41,"index":2733},"line":70,"code":"    it('should honor content-type charset', function (done) {\n      var server = createServer({\n        defaultCharset: 'koi8-r'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain; charset=utf-8');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with Content-Length","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":81,"column":54,"index":3159},"line":81,"code":"    it('should 413 when over limit with Content-Length', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      request(createServer({\n        limit: '1kb'\n      })).post('/').set('Content-Type', 'text/plain').set('Content-Length', '1028').send(buf.toString()).expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with chunked encoding","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":87,"column":56,"index":3459},"line":87,"code":"    it('should 413 when over limit with chunked encoding', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.set('Transfer-Encoding', 'chunked');\n      test.write(buf.toString());\n      test.expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 413 when inflated body over limit","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":98,"column":48,"index":3844},"line":98,"code":"    it('should 413 when inflated body over limit', function (done) {\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a14704040000', 'hex'));\n      test.expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should accept number of bytes","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":108,"column":37,"index":4239},"line":108,"code":"    it('should accept number of bytes', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      request(createServer({\n        limit: 1024\n      })).post('/').set('Content-Type', 'text/plain').send(buf.toString()).expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not change when options altered","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":114,"column":46,"index":4498},"line":114,"code":"    it('should not change when options altered', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var options = {\n        limit: '1kb'\n      };\n      var server = createServer(options);\n      options.limit = '100kb';\n      request(server).post('/').set('Content-Type', 'text/plain').send(buf.toString()).expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not hang response","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":123,"column":32,"index":4831},"line":123,"code":"    it('should not hang response', function (done) {\n      var buf = Buffer.alloc(10240, '.');\n      var server = createServer({\n        limit: '8kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.write(buf);\n      test.write(buf);\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not error when inflating","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":135,"column":39,"index":5195},"line":135,"code":"    it('should not error when inflating', function (done) {\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a1470404', 'hex'));\n      setTimeout(function () {\n        test.expect(413, done);\n      }, 100);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not accept content-encoding","suites":["bodyParser.text()","with inflate option","when false"],"updatePoint":{"line":155,"column":44,"index":5847},"line":155,"code":"      it('should not accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'text/plain');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n        test.expect(415, '[encoding.unsupported] content encoding unsupported', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should accept content-encoding","suites":["bodyParser.text()","with inflate option","when true"],"updatePoint":{"line":169,"column":40,"index":6414},"line":169,"code":"      it('should accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'text/plain');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n        test.expect(200, '\"name is 论\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse for custom type","suites":["bodyParser.text()","with type option","when \"text/html\""],"updatePoint":{"line":185,"column":38,"index":7001},"line":185,"code":"      it('should parse for custom type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/html').send('<b>tobi</b>').expect(200, '\"<b>tobi</b>\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should ignore standard type","suites":["bodyParser.text()","with type option","when \"text/html\""],"updatePoint":{"line":188,"column":37,"index":7197},"line":188,"code":"      it('should ignore standard type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200, '{}', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse \"text/html\"","suites":["bodyParser.text()","with type option","when [\"text/html\", \"text/plain\"]"],"updatePoint":{"line":198,"column":34,"index":7582},"line":198,"code":"      it('should parse \"text/html\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/html').send('<b>tobi</b>').expect(200, '\"<b>tobi</b>\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse \"text/plain\"","suites":["bodyParser.text()","with type option","when [\"text/html\", \"text/plain\"]"],"updatePoint":{"line":201,"column":35,"index":7776},"line":201,"code":"      it('should parse \"text/plain\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/plain').send('tobi').expect(200, '\"tobi\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should ignore \"text/xml\"","suites":["bodyParser.text()","with type option","when [\"text/html\", \"text/plain\"]"],"updatePoint":{"line":204,"column":34,"index":7956},"line":204,"code":"      it('should ignore \"text/xml\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/xml').send('<user>tobi</user>').expect(200, '{}', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse when truthy value returned","suites":["bodyParser.text()","with type option","when a function"],"updatePoint":{"line":209,"column":49,"index":8212},"line":209,"code":"      it('should parse when truthy value returned', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return req.headers['content-type'] === 'text/vnd.something';\n        }\n\n        request(server).post('/').set('Content-Type', 'text/vnd.something').send('user is tobi').expect(200, '\"user is tobi\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should work without content-type","suites":["bodyParser.text()","with type option","when a function"],"updatePoint":{"line":220,"column":42,"index":8604},"line":220,"code":"      it('should work without content-type', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return true;\n        }\n\n        var test = request(server).post('/');\n        test.write('user is tobi');\n        test.expect(200, '\"user is tobi\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not invoke without a body","suites":["bodyParser.text()","with type option","when a function"],"updatePoint":{"line":233,"column":42,"index":8946},"line":233,"code":"      it('should not invoke without a body', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          throw new Error('oops!');\n        }\n\n        request(server).get('/').expect(200, done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should assert value is function","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":247,"column":39,"index":9279},"line":247,"code":"    it('should assert value is function', function () {\n      assert.throws(createServer.bind(null, {\n        verify: 'lol'\n      }), /TypeError: option verify must be function/);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should error from verify","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":252,"column":32,"index":9460},"line":252,"code":"    it('should error from verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'text/plain').send(' user is tobi').expect(403, '[entity.verify.failed] no leading space', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should allow custom codes","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":260,"column":33,"index":9837},"line":260,"code":"    it('should allow custom codes', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x20) return;\n          var err = new Error('no leading space');\n          err.status = 400;\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'text/plain').send(' user is tobi').expect(400, '[entity.verify.failed] no leading space', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should allow pass-through","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":271,"column":33,"index":10285},"line":271,"code":"    it('should allow pass-through', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200, '\"user is tobi\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown charset prior to verify","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":279,"column":53,"index":10656},"line":279,"code":"    it('should 415 on unknown charset prior to verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          throw new Error('unexpected verify call');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain; charset=x-bogus');\n      test.write(Buffer.from('00000000', 'hex'));\n      test.expect(415, '[charset.unsupported] unsupported charset \"X-BOGUS\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should presist store","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":312,"column":28,"index":11737},"line":312,"code":"    it('should presist store', function (done) {\n      request(this.server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200).expect('x-store-foo', 'bar').expect('\"user is tobi\"').end(done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should presist store when unmatched content-type","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":315,"column":56,"index":11991},"line":315,"code":"    it('should presist store when unmatched content-type', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/fizzbuzz').send('buzz').expect(200).expect('x-store-foo', 'bar').expect('{}').end(done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should presist store when inflated","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":318,"column":42,"index":12221},"line":318,"code":"    it('should presist store when inflated', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n      test.expect(200);\n      test.expect('x-store-foo', 'bar');\n      test.expect('\"name is 论\"');\n      test.end(done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should presist store when inflate error","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":328,"column":47,"index":12661},"line":328,"code":"    it('should presist store when inflate error', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b0000', 'hex'));\n      test.expect(400);\n      test.expect('x-store-foo', 'bar');\n      test.end(done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should presist store when limit exceeded","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":337,"column":48,"index":13066},"line":337,"code":"    it('should presist store when limit exceeded', function (done) {\n      request(this.server).post('/').set('Content-Type', 'text/plain').send('user is ' + Buffer.alloc(1024 * 100, '.').toString()).expect(413).expect('x-store-foo', 'bar').end(done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse utf-8","suites":["bodyParser.text()","charset"],"updatePoint":{"line":345,"column":26,"index":13415},"line":345,"code":"    it('should parse utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain; charset=utf-8');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse codepage charsets","suites":["bodyParser.text()","charset"],"updatePoint":{"line":351,"column":38,"index":13701},"line":351,"code":"    it('should parse codepage charsets', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain; charset=koi8-r');\n      test.write(Buffer.from('6e616d6520697320cec5d4', 'hex'));\n      test.expect(200, '\"name is нет\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse when content-length != char length","suites":["bodyParser.text()","charset"],"updatePoint":{"line":357,"column":55,"index":14007},"line":357,"code":"    it('should parse when content-length != char length', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain; charset=utf-8');\n      test.set('Content-Length', '11');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should default to utf-8","suites":["bodyParser.text()","charset"],"updatePoint":{"line":364,"column":31,"index":14326},"line":364,"code":"    it('should default to utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown charset","suites":["bodyParser.text()","charset"],"updatePoint":{"line":370,"column":37,"index":14596},"line":370,"code":"    it('should 415 on unknown charset', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain; charset=x-bogus');\n      test.write(Buffer.from('00000000', 'hex'));\n      test.expect(415, '[charset.unsupported] unsupported charset \"X-BOGUS\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse without encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":383,"column":37,"index":15052},"line":383,"code":"    it('should parse without encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should support identity encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":389,"column":40,"index":15325},"line":389,"code":"    it('should support identity encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'identity');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should support gzip encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":396,"column":36,"index":15642},"line":396,"code":"    it('should support gzip encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should support deflate encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":403,"column":39,"index":15998},"line":403,"code":"    it('should support deflate encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'deflate');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('789ccb4bcc4d55c82c5678b16e17001a6f050e', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should be case-insensitive","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":410,"column":34,"index":16328},"line":410,"code":"    it('should be case-insensitive', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'GZIP');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":417,"column":38,"index":16683},"line":417,"code":"    it('should 415 on unknown encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, '[encoding.unsupported] unsupported content encoding \"nulls\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse x-www-form-urlencoded","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":18,"column":40,"index":480},"line":18,"code":"  it('should parse x-www-form-urlencoded', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 400 when invalid content-length","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":21,"column":44,"index":699},"line":21,"code":"  it('should 400 when invalid content-length', function (done) {\n    var urlencodedParser = bodyParser.urlencoded();\n    var server = createServer(function (req, res, next) {\n      req.headers['content-length'] = '20'; // bad length\n\n      urlencodedParser(req, res, next);\n    });\n    request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('str=').expect(400, /content length/, done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should handle Content-Length: 0","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":30,"column":37,"index":1117},"line":30,"code":"  it('should handle Content-Length: 0', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('Content-Length', '0').send('').expect(200, '{}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should handle empty message-body","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":33,"column":38,"index":1335},"line":33,"code":"  it('should handle empty message-body', function (done) {\n    request(createServer({\n      limit: '1kb'\n    })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('Transfer-Encoding', 'chunked').send('').expect(200, '{}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 500 if stream not readable","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":38,"column":39,"index":1592},"line":38,"code":"  it('should 500 if stream not readable', function (done) {\n    var urlencodedParser = bodyParser.urlencoded();\n    var server = createServer(function (req, res, next) {\n      req.on('end', function () {\n        urlencodedParser(req, res, next);\n      });\n      req.resume();\n    });\n    request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(500, '[stream.not.readable] stream is not readable', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":48,"column":41,"index":2056},"line":48,"code":"  it('should handle duplicated middleware', function (done) {\n    var urlencodedParser = bodyParser.urlencoded();\n    var server = createServer(function (req, res, next) {\n      urlencodedParser(req, res, function (err) {\n        if (err) return next(err);\n        urlencodedParser(req, res, next);\n      });\n    });\n    request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse extended syntax","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":58,"column":34,"index":2515},"line":58,"code":"  it('should parse extended syntax', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user[name][first]=Tobi').expect(200, '{\"user\":{\"name\":{\"first\":\"Tobi\"}}}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not parse extended syntax","suites":["bodyParser.urlencoded()","with extended option","when false"],"updatePoint":{"line":68,"column":42,"index":2966},"line":68,"code":"      it('should not parse extended syntax', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user[name][first]=Tobi').expect(200, '{\"user[name][first]\":\"Tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse multiple key instances","suites":["bodyParser.urlencoded()","with extended option","when false"],"updatePoint":{"line":71,"column":45,"index":3220},"line":71,"code":"      it('should parse multiple key instances', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=Tobi&user=Loki').expect(200, '{\"user\":[\"Tobi\",\"Loki\"]}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse multiple key instances","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":81,"column":45,"index":3626},"line":81,"code":"      it('should parse multiple key instances', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=Tobi&user=Loki').expect(200, '{\"user\":[\"Tobi\",\"Loki\"]}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse extended syntax","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":84,"column":38,"index":3866},"line":84,"code":"      it('should parse extended syntax', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user[name][first]=Tobi').expect(200, '{\"user\":{\"name\":{\"first\":\"Tobi\"}}}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse parameters with dots","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":87,"column":43,"index":4124},"line":87,"code":"      it('should parse parameters with dots', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user.name=Tobi').expect(200, '{\"user.name\":\"Tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse fully-encoded extended syntax","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":90,"column":52,"index":4369},"line":90,"code":"      it('should parse fully-encoded extended syntax', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user%5Bname%5D%5Bfirst%5D=Tobi').expect(200, '{\"user\":{\"name\":{\"first\":\"Tobi\"}}}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse array index notation","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":93,"column":43,"index":4635},"line":93,"code":"      it('should parse array index notation', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('foo[0]=bar&foo[1]=baz').expect(200, '{\"foo\":[\"bar\",\"baz\"]}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse array index notation with large array","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":96,"column":60,"index":4896},"line":96,"code":"      it('should parse array index notation with large array', function (done) {\n        var str = 'f[0]=0';\n\n        for (var i = 1; i < 500; i++) {\n          str += '&f[' + i + ']=' + i.toString(16);\n        }\n\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(str).expect(function (res) {\n          var obj = JSON.parse(res.text);\n          assert.strictEqual(Object.keys(obj).length, 1);\n          assert.strictEqual(Array.isArray(obj.f), true);\n          assert.strictEqual(obj.f.length, 500);\n        }).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse array of objects syntax","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":110,"column":46,"index":5472},"line":110,"code":"      it('should parse array of objects syntax', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('foo[0][bar]=baz&foo[0][fizz]=buzz&foo[]=done!').expect(200, '{\"foo\":[{\"bar\":\"baz\",\"fizz\":\"buzz\"},\"done!\"]}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse deep object","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":113,"column":34,"index":5755},"line":113,"code":"      it('should parse deep object', function (done) {\n        var str = 'foo';\n\n        for (var i = 0; i < 500; i++) {\n          str += '[p]';\n        }\n\n        str += '=bar';\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(str).expect(function (res) {\n          var obj = JSON.parse(res.text);\n          assert.strictEqual(Object.keys(obj).length, 1);\n          assert.strictEqual(typeof obj.foo, 'object');\n          var depth = 0;\n          var ref = obj.foo;\n\n          while (ref = ref.p) {\n            depth++;\n          }\n\n          assert.strictEqual(depth, 500);\n        }).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not accept content-encoding","suites":["bodyParser.urlencoded()","with inflate option","when false"],"updatePoint":{"line":144,"column":44,"index":6647},"line":144,"code":"      it('should not accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/x-www-form-urlencoded');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n        test.expect(415, '[encoding.unsupported] content encoding unsupported', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should accept content-encoding","suites":["bodyParser.urlencoded()","with inflate option","when true"],"updatePoint":{"line":158,"column":40,"index":7231},"line":158,"code":"      it('should accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/x-www-form-urlencoded');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n        test.expect(200, '{\"name\":\"论\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with Content-Length","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":168,"column":54,"index":7692},"line":168,"code":"    it('should 413 when over limit with Content-Length', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: '1kb'\n      })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('Content-Length', '1028').send('str=' + buf.toString()).expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with chunked encoding","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":174,"column":56,"index":8024},"line":174,"code":"    it('should 413 when over limit with chunked encoding', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.set('Transfer-Encoding', 'chunked');\n      test.write('str=');\n      test.write(buf.toString());\n      test.expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 when inflated body over limit","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":186,"column":48,"index":8458},"line":186,"code":"    it('should 413 when inflated body over limit', function (done) {\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('1f8b080000000000000a2b2e29b2d51b05a360148c580000a0351f9204040000', 'hex'));\n      test.expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should accept number of bytes","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":196,"column":37,"index":8882},"line":196,"code":"    it('should accept number of bytes', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: 1024\n      })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('str=' + buf.toString()).expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not change when options altered","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":202,"column":46,"index":9173},"line":202,"code":"    it('should not change when options altered', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      var options = {\n        limit: '1kb'\n      };\n      var server = createServer(options);\n      options.limit = '100kb';\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('str=' + buf.toString()).expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not hang response","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":211,"column":32,"index":9538},"line":211,"code":"    it('should not hang response', function (done) {\n      var buf = Buffer.alloc(10240, '.');\n      var server = createServer({\n        limit: '8kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(buf);\n      test.write(buf);\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not error when inflating","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":223,"column":39,"index":9925},"line":223,"code":"    it('should not error when inflating', function (done) {\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('1f8b080000000000000a2b2e29b2d51b05a360148c580000a0351f92040400', 'hex'));\n      test.expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should reject 0","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":236,"column":25,"index":10447},"line":236,"code":"      it('should reject 0', function () {\n        assert.throws(createServer.bind(null, {\n          extended: false,\n          parameterLimit: 0\n        }), /TypeError: option parameterLimit must be a positive number/);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should reject string","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":242,"column":30,"index":10682},"line":242,"code":"      it('should reject string', function () {\n        assert.throws(createServer.bind(null, {\n          extended: false,\n          parameterLimit: 'beep'\n        }), /TypeError: option parameterLimit must be a positive number/);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 if over limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":248,"column":34,"index":10926},"line":248,"code":"      it('should 413 if over limit', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(11)).expect(413, '[parameters.too.many] too many parameters', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work when at the limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":254,"column":39,"index":11253},"line":254,"code":"      it('should work when at the limit', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(10)).expect(expectKeyCount(10)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work if number is floating point","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":260,"column":49,"index":11572},"line":260,"code":"      it('should work if number is floating point', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 10.1\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(11)).expect(413, /too many parameters/, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work with large limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":266,"column":38,"index":11878},"line":266,"code":"      it('should work with large limit', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 5000\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(5000)).expect(expectKeyCount(5000)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work with Infinity limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":272,"column":41,"index":12195},"line":272,"code":"      it('should work with Infinity limit', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: Infinity\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(10000)).expect(expectKeyCount(10000)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should reject 0","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":280,"column":25,"index":12560},"line":280,"code":"      it('should reject 0', function () {\n        assert.throws(createServer.bind(null, {\n          extended: true,\n          parameterLimit: 0\n        }), /TypeError: option parameterLimit must be a positive number/);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should reject string","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":286,"column":30,"index":12794},"line":286,"code":"      it('should reject string', function () {\n        assert.throws(createServer.bind(null, {\n          extended: true,\n          parameterLimit: 'beep'\n        }), /TypeError: option parameterLimit must be a positive number/);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 if over limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":292,"column":34,"index":13037},"line":292,"code":"      it('should 413 if over limit', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(11)).expect(413, '[parameters.too.many] too many parameters', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work when at the limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":298,"column":39,"index":13363},"line":298,"code":"      it('should work when at the limit', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(10)).expect(expectKeyCount(10)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work if number is floating point","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":304,"column":49,"index":13681},"line":304,"code":"      it('should work if number is floating point', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 10.1\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(11)).expect(413, /too many parameters/, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work with large limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":310,"column":38,"index":13986},"line":310,"code":"      it('should work with large limit', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 5000\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(5000)).expect(expectKeyCount(5000)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work with Infinity limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":316,"column":41,"index":14302},"line":316,"code":"      it('should work with Infinity limit', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: Infinity\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(10000)).expect(expectKeyCount(10000)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse for custom type","suites":["bodyParser.urlencoded()","with type option","when \"application/vnd.x-www-form-urlencoded\""],"updatePoint":{"line":331,"column":38,"index":14897},"line":331,"code":"      it('should parse for custom type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/vnd.x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should ignore standard type","suites":["bodyParser.urlencoded()","with type option","when \"application/vnd.x-www-form-urlencoded\""],"updatePoint":{"line":334,"column":37,"index":15121},"line":334,"code":"      it('should ignore standard type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse \"application/x-www-form-urlencoded\"","suites":["bodyParser.urlencoded()","with type option","when [\"urlencoded\", \"application/x-pairs\"]"],"updatePoint":{"line":344,"column":58,"index":15570},"line":344,"code":"      it('should parse \"application/x-www-form-urlencoded\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse \"application/x-pairs\"","suites":["bodyParser.urlencoded()","with type option","when [\"urlencoded\", \"application/x-pairs\"]"],"updatePoint":{"line":347,"column":44,"index":15797},"line":347,"code":"      it('should parse \"application/x-pairs\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-pairs').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should ignore application/x-foo","suites":["bodyParser.urlencoded()","with type option","when [\"urlencoded\", \"application/x-pairs\"]"],"updatePoint":{"line":350,"column":41,"index":16007},"line":350,"code":"      it('should ignore application/x-foo', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-foo').send('user=tobi').expect(200, '{}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse when truthy value returned","suites":["bodyParser.urlencoded()","with type option","when a function"],"updatePoint":{"line":355,"column":49,"index":16264},"line":355,"code":"      it('should parse when truthy value returned', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return req.headers['content-type'] === 'application/vnd.something';\n        }\n\n        request(server).post('/').set('Content-Type', 'application/vnd.something').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work without content-type","suites":["bodyParser.urlencoded()","with type option","when a function"],"updatePoint":{"line":366,"column":42,"index":16668},"line":366,"code":"      it('should work without content-type', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return true;\n        }\n\n        var test = request(server).post('/');\n        test.write('user=tobi');\n        test.expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not invoke without a body","suites":["bodyParser.urlencoded()","with type option","when a function"],"updatePoint":{"line":379,"column":42,"index":17008},"line":379,"code":"      it('should not invoke without a body', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          throw new Error('oops!');\n        }\n\n        request(server).get('/').expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should assert value if function","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":393,"column":39,"index":17341},"line":393,"code":"    it('should assert value if function', function () {\n      assert.throws(createServer.bind(null, {\n        verify: 'lol'\n      }), /TypeError: option verify must be function/);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should error from verify","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":398,"column":32,"index":17522},"line":398,"code":"    it('should error from verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(' user=tobi').expect(403, '[entity.verify.failed] no leading space', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should allow custom codes","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":406,"column":33,"index":17919},"line":406,"code":"    it('should allow custom codes', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x20) return;\n          var err = new Error('no leading space');\n          err.status = 400;\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(' user=tobi').expect(400, '[entity.verify.failed] no leading space', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should allow custom type","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":417,"column":32,"index":18386},"line":417,"code":"    it('should allow custom type', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x20) return;\n          var err = new Error('no leading space');\n          err.type = 'foo.bar';\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(' user=tobi').expect(403, '[foo.bar] no leading space', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should allow pass-through","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":428,"column":33,"index":18845},"line":428,"code":"    it('should allow pass-through', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown charset prior to verify","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":436,"column":53,"index":19230},"line":436,"code":"    it('should 415 on unknown charset prior to verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          throw new Error('unexpected verify call');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded; charset=x-bogus');\n      test.write(Buffer.from('00000000', 'hex'));\n      test.expect(415, '[charset.unsupported] unsupported charset \"X-BOGUS\"', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should presist store","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":469,"column":28,"index":20352},"line":469,"code":"    it('should presist store', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200).expect('x-store-foo', 'bar').expect('{\"user\":\"tobi\"}').end(done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should presist store when unmatched content-type","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":472,"column":56,"index":20627},"line":472,"code":"    it('should presist store when unmatched content-type', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/fizzbuzz').send('buzz').expect(200).expect('x-store-foo', 'bar').expect('{}').end(done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should presist store when inflated","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":475,"column":42,"index":20857},"line":475,"code":"    it('should presist store when inflated', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200);\n      test.expect('x-store-foo', 'bar');\n      test.expect('{\"name\":\"论\"}');\n      test.end(done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should presist store when inflate error","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":485,"column":47,"index":21315},"line":485,"code":"    it('should presist store when inflate error', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad6080000', 'hex'));\n      test.expect(400);\n      test.expect('x-store-foo', 'bar');\n      test.end(done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should presist store when limit exceeded","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":494,"column":48,"index":21737},"line":494,"code":"    it('should presist store when limit exceeded', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=' + Buffer.alloc(1024 * 100, '.').toString()).expect(413).expect('x-store-foo', 'bar').end(done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse utf-8","suites":["bodyParser.urlencoded()","charset"],"updatePoint":{"line":502,"column":26,"index":22106},"line":502,"code":"    it('should parse utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse when content-length != char length","suites":["bodyParser.urlencoded()","charset"],"updatePoint":{"line":508,"column":55,"index":22427},"line":508,"code":"    it('should parse when content-length != char length', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');\n      test.set('Content-Length', '7');\n      test.write(Buffer.from('746573743dc3a5', 'hex'));\n      test.expect(200, '{\"test\":\"å\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should default to utf-8","suites":["bodyParser.urlencoded()","charset"],"updatePoint":{"line":515,"column":31,"index":22761},"line":515,"code":"    it('should default to utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should fail on unknown charset","suites":["bodyParser.urlencoded()","charset"],"updatePoint":{"line":521,"column":38,"index":23050},"line":521,"code":"    it('should fail on unknown charset', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded; charset=koi8-r');\n      test.write(Buffer.from('6e616d653dcec5d4', 'hex'));\n      test.expect(415, '[charset.unsupported] unsupported charset \"KOI8-R\"', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse without encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":534,"column":37,"index":23535},"line":534,"code":"    it('should parse without encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should support identity encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":540,"column":40,"index":23826},"line":540,"code":"    it('should support identity encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'identity');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should support gzip encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":547,"column":36,"index":24161},"line":547,"code":"    it('should support gzip encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should support deflate encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":554,"column":39,"index":24535},"line":554,"code":"    it('should support deflate encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'deflate');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('789ccb4bcc4db57db16e17001068042f', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should be case-insensitive","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":561,"column":34,"index":24883},"line":561,"code":"    it('should be case-insensitive', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'GZIP');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":568,"column":38,"index":25256},"line":568,"code":"    it('should 415 on unknown encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, '[encoding.unsupported] unsupported content encoding \"nulls\"', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"}]}