{"repo":"remix-run/remix","url":"https://github.com/remix-run/remix","branch":"main","configs":[{"package":"create-remix","lang":"ts","dir":"packages/create-remix/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@remix-run/architect","lang":"ts","dir":"packages/remix-architect/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@remix-run/dev","lang":"ts","dir":"packages/remix-dev/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@remix-run/express","lang":"ts","dir":"packages/remix-express/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@remix-run/netlify","lang":"ts","dir":"packages/remix-netlify/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@remix-run/node","lang":"ts","dir":"packages/remix-node/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@remix-run/react","lang":"js","dir":"packages/remix-react/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@remix-run/server-runtime","lang":"ts","dir":"packages/remix-server-runtime/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@remix-run/vercel","lang":"ts","dir":"packages/remix-vercel/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"handles requests","suites":["architect createRequestHandler","basic requests"],"updatePoint":{"line":86,"column":24},"line":86,"code":"    it(\"handles requests\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async (req) => {\n        return new Response(`URL: ${new URL(req.url).pathname}`);\n      });\n\n      await lambdaTester(createRequestHandler({ build: undefined } as any))\n        .event(createMockEvent({ rawPath: \"/foo/bar\" }))\n        .expectResolve((res) => {\n          expect(res.statusCode).toBe(200);\n          expect(res.body).toBe(\"URL: /foo/bar\");\n        });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"handles null body","suites":["architect createRequestHandler","basic requests"],"updatePoint":{"line":99,"column":25},"line":99,"code":"    it(\"handles null body\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        return new Response(null, { status: 200 });\n      });\n\n      await lambdaTester(createRequestHandler({ build: undefined } as any))\n        .event(createMockEvent({ rawPath: \"/foo/bar\" }))\n        .expectResolve((res) => {\n          expect(res.statusCode).toBe(200);\n        });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"handles status codes","suites":["architect createRequestHandler","basic requests"],"updatePoint":{"line":111,"column":28},"line":111,"code":"    it(\"handles status codes\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        return new Response(null, { status: 204 });\n      });\n\n      await lambdaTester(createRequestHandler({ build: undefined } as any))\n        .event(createMockEvent({ rawPath: \"/foo/bar\" }))\n        .expectResolve((res) => {\n          expect(res.statusCode).toBe(204);\n        });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"sets headers","suites":["architect createRequestHandler","basic requests"],"updatePoint":{"line":123,"column":20},"line":123,"code":"    it(\"sets headers\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        let headers = new Headers();\n        headers.append(\"X-Time-Of-Year\", \"most wonderful\");\n        headers.append(\n          \"Set-Cookie\",\n          \"first=one; Expires=0; Path=/; HttpOnly; Secure; SameSite=Lax\"\n        );\n        headers.append(\n          \"Set-Cookie\",\n          \"second=two; MaxAge=1209600; Path=/; HttpOnly; Secure; SameSite=Lax\"\n        );\n        headers.append(\n          \"Set-Cookie\",\n          \"third=three; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Path=/; HttpOnly; Secure; SameSite=Lax\"\n        );\n\n        return new Response(null, { headers });\n      });\n\n      await lambdaTester(createRequestHandler({ build: undefined } as any))\n        .event(createMockEvent({ rawPath: \"/\" }))\n        .expectResolve((res) => {\n          expect(res.statusCode).toBe(200);\n          expect(res.headers[\"x-time-of-year\"]).toBe(\"most wonderful\");\n          expect(res.cookies).toEqual([\n            \"first=one; Expires=0; Path=/; HttpOnly; Secure; SameSite=Lax\",\n            \"second=two; MaxAge=1209600; Path=/; HttpOnly; Secure; SameSite=Lax\",\n            \"third=three; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Path=/; HttpOnly; Secure; SameSite=Lax\",\n          ]);\n        });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"handles empty headers","suites":["architect createRemixHeaders","creates fetch headers from architect headers"],"updatePoint":{"line":160,"column":29},"line":160,"code":"    it(\"handles empty headers\", () => {\n      expect(createRemixHeaders({}, undefined)).toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {},\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"handles simple headers","suites":["architect createRemixHeaders","creates fetch headers from architect headers"],"updatePoint":{"line":168,"column":30},"line":168,"code":"    it(\"handles simple headers\", () => {\n      expect(createRemixHeaders({ \"x-foo\": \"bar\" }, undefined))\n        .toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-foo\": Array [\n              \"bar\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"handles multiple headers","suites":["architect createRemixHeaders","creates fetch headers from architect headers"],"updatePoint":{"line":181,"column":32},"line":181,"code":"    it(\"handles multiple headers\", () => {\n      expect(createRemixHeaders({ \"x-foo\": \"bar\", \"x-bar\": \"baz\" }, undefined))\n        .toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-bar\": Array [\n              \"baz\",\n            ],\n            \"x-foo\": Array [\n              \"bar\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"handles headers with multiple values","suites":["architect createRemixHeaders","creates fetch headers from architect headers"],"updatePoint":{"line":197,"column":44},"line":197,"code":"    it(\"handles headers with multiple values\", () => {\n      expect(createRemixHeaders({ \"x-foo\": \"bar, baz\" }, undefined))\n        .toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-foo\": Array [\n              \"bar, baz\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"handles headers with multiple values and multiple headers","suites":["architect createRemixHeaders","creates fetch headers from architect headers"],"updatePoint":{"line":210,"column":65},"line":210,"code":"    it(\"handles headers with multiple values and multiple headers\", () => {\n      expect(\n        createRemixHeaders({ \"x-foo\": \"bar, baz\", \"x-bar\": \"baz\" }, undefined)\n      ).toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-bar\": Array [\n              \"baz\",\n            ],\n            \"x-foo\": Array [\n              \"bar, baz\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"handles cookies","suites":["architect createRemixHeaders","creates fetch headers from architect headers"],"updatePoint":{"line":227,"column":23},"line":227,"code":"    it(\"handles cookies\", () => {\n      expect(\n        createRemixHeaders({ \"x-something-else\": \"true\" }, [\n          \"__session=some_value\",\n          \"__other=some_other_value\",\n        ])\n      ).toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"Cookie\": Array [\n              \"__session=some_value; __other=some_other_value\",\n            ],\n            \"x-something-else\": Array [\n              \"true\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"creates a request with the correct headers","suites":["architect createRemixRequest"],"updatePoint":{"line":250,"column":48},"line":250,"code":"  it(\"creates a request with the correct headers\", () => {\n    expect(\n      createRemixRequest(\n        createMockEvent({\n          cookies: [\"__session=value\"],\n        })\n      )\n    ).toMatchInlineSnapshot(`\n      NodeRequest {\n        \"abortController\": undefined,\n        \"agent\": undefined,\n        \"compress\": true,\n        \"counter\": 0,\n        \"follow\": 20,\n        \"size\": 0,\n        \"timeout\": 0,\n        Symbol(Body internals): Object {\n          \"body\": null,\n          \"disturbed\": false,\n          \"error\": null,\n        },\n        Symbol(Request internals): Object {\n          \"headers\": Headers {\n            Symbol(map): Object {\n              \"Cookie\": Array [\n                \"__session=value\",\n              ],\n              \"accept\": Array [\n                \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n              ],\n              \"accept-encoding\": Array [\n                \"gzip, deflate\",\n              ],\n              \"accept-language\": Array [\n                \"en-US,en;q=0.9\",\n              ],\n              \"host\": Array [\n                \"localhost:3333\",\n              ],\n              \"upgrade-insecure-requests\": Array [\n                \"1\",\n              ],\n              \"user-agent\": Array [\n                \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15\",\n              ],\n            },\n          },\n          \"method\": \"GET\",\n          \"parsedURL\": Url {\n            \"auth\": null,\n            \"hash\": null,\n            \"host\": \"localhost:3333\",\n            \"hostname\": \"localhost\",\n            \"href\": \"https://localhost:3333/\",\n            \"path\": \"/\",\n            \"pathname\": \"/\",\n            \"port\": \"3333\",\n            \"protocol\": \"https:\",\n            \"query\": null,\n            \"search\": null,\n            \"slashes\": true,\n          },\n          \"redirect\": \"follow\",\n          \"signal\": undefined,\n        },\n      }\n    `);\n  });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"handles regular responses","suites":["sendRemixResponse"],"updatePoint":{"line":321,"column":31},"line":321,"code":"  it(\"handles regular responses\", async () => {\n    let response = new NodeResponse(\"anything\");\n    let abortController = new AbortController();\n    let result = await sendRemixResponse(response, abortController);\n    expect(result.body).toBe(\"anything\");\n  });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"handles resource routes with regular data","suites":["sendRemixResponse"],"updatePoint":{"line":328,"column":47},"line":328,"code":"  it(\"handles resource routes with regular data\", async () => {\n    let json = JSON.stringify({ foo: \"bar\" });\n    let response = new NodeResponse(json, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"content-length\": json.length.toString(),\n      },\n    });\n\n    let abortController = new AbortController();\n\n    let result = await sendRemixResponse(response, abortController);\n\n    expect(result.body).toMatch(json);\n  });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"handles resource routes with binary data","suites":["sendRemixResponse"],"updatePoint":{"line":344,"column":46},"line":344,"code":"  it(\"handles resource routes with binary data\", async () => {\n    let image = await fsp.readFile(path.join(__dirname, \"554828.jpeg\"));\n\n    let response = new NodeResponse(image, {\n      headers: {\n        \"content-type\": \"image/jpeg\",\n        \"content-length\": image.length.toString(),\n      },\n    });\n\n    let abortController = new AbortController();\n\n    let result = await sendRemixResponse(response, abortController);\n\n    expect(result.body).toMatch(image.toString(\"base64\"));\n  });","file":"server-test.ts","skipped":false,"dir":"packages/remix-architect/__tests__"},{"name":"generates the correct bundles","suites":["building","the development server build"],"updatePoint":{"line":32,"column":37},"line":32,"code":"    it(\"generates the correct bundles\", async () => {\n      let output = await generateBuild(config, {\n        mode: BuildMode.Development,\n        target: BuildTarget.Server,\n      });\n\n      expect(getFilenames(output)).toMatchInlineSnapshot(`\n        Array [\n          \"_shared/Shared-072c977d.js\",\n          \"_shared/_rollupPluginBabelHelpers-8a275fd9.js\",\n          \"entry.server.js\",\n          \"index.js\",\n          \"pages/one.js\",\n          \"pages/two.js\",\n          \"root.js\",\n          \"routes/404.js\",\n          \"routes/gists.js\",\n          \"routes/gists.mine.js\",\n          \"routes/gists/$username.js\",\n          \"routes/gists/index.js\",\n          \"routes/index.js\",\n          \"routes/links.js\",\n          \"routes/loader-errors.js\",\n          \"routes/loader-errors/nested.js\",\n          \"routes/methods.js\",\n          \"routes/page/four.js\",\n          \"routes/page/three.js\",\n          \"routes/prefs.js\",\n          \"routes/render-errors.js\",\n          \"routes/render-errors/nested.js\",\n        ]\n      `);\n    });","file":"build-test.ts","skipped":true,"dir":"packages/remix-dev/__tests__"},{"name":"generates the correct bundles","suites":["building","the production server build"],"updatePoint":{"line":68,"column":37},"line":68,"code":"    it(\"generates the correct bundles\", async () => {\n      let output = await generateBuild(config, {\n        mode: BuildMode.Production,\n        target: BuildTarget.Server,\n      });\n\n      expect(getFilenames(output)).toMatchInlineSnapshot(`\n        Array [\n          \"_shared/Shared-072c977d.js\",\n          \"_shared/_rollupPluginBabelHelpers-8a275fd9.js\",\n          \"entry.server.js\",\n          \"index.js\",\n          \"pages/one.js\",\n          \"pages/two.js\",\n          \"root.js\",\n          \"routes/404.js\",\n          \"routes/gists.js\",\n          \"routes/gists.mine.js\",\n          \"routes/gists/$username.js\",\n          \"routes/gists/index.js\",\n          \"routes/index.js\",\n          \"routes/links.js\",\n          \"routes/loader-errors.js\",\n          \"routes/loader-errors/nested.js\",\n          \"routes/methods.js\",\n          \"routes/page/four.js\",\n          \"routes/page/three.js\",\n          \"routes/prefs.js\",\n          \"routes/render-errors.js\",\n          \"routes/render-errors/nested.js\",\n        ]\n      `);\n    });","file":"build-test.ts","skipped":true,"dir":"packages/remix-dev/__tests__"},{"name":"generates the correct bundles","suites":["building","the development browser build"],"updatePoint":{"line":104,"column":37},"line":104,"code":"    it(\"generates the correct bundles\", async () => {\n      let output = await generateBuild(config, {\n        mode: BuildMode.Development,\n        target: BuildTarget.Browser,\n      });\n\n      expect(getFilenames(output)).toMatchInlineSnapshot(`\n        Array [\n          \"_shared/Shared-7d084ccf.js\",\n          \"_shared/__babel/runtime-88c72f87.js\",\n          \"_shared/__mdx-js/react-4b004046.js\",\n          \"_shared/__remix-run/react-cf018015.js\",\n          \"_shared/_rollupPluginBabelHelpers-bfa6c712.js\",\n          \"_shared/history-7c196d23.js\",\n          \"_shared/object-assign-510802f4.js\",\n          \"_shared/prop-types-1122a697.js\",\n          \"_shared/react-a3c235ca.js\",\n          \"_shared/react-dom-ec89bb6e.js\",\n          \"_shared/react-is-6b44b080.js\",\n          \"_shared/react-router-dom-ef82d700.js\",\n          \"_shared/react-router-e7697632.js\",\n          \"_shared/scheduler-8fd1645e.js\",\n          \"components/guitar-1080x720-a9c95518.jpg\",\n          \"components/guitar-2048x1365-f42efd6b.jpg\",\n          \"components/guitar-500x333-3a1a0bd1.jpg\",\n          \"components/guitar-500x500-c6f1ab94.jpg\",\n          \"components/guitar-600x600-b329e428.jpg\",\n          \"components/guitar-720x480-729becce.jpg\",\n          \"entry.client.js\",\n          \"manifest-8c53378e.js\",\n          \"pages/one.js\",\n          \"pages/two.js\",\n          \"root.js\",\n          \"routes/404.js\",\n          \"routes/gists.js\",\n          \"routes/gists.mine.js\",\n          \"routes/gists/$username.js\",\n          \"routes/gists/index.js\",\n          \"routes/index.js\",\n          \"routes/links.js\",\n          \"routes/loader-errors.js\",\n          \"routes/loader-errors/nested.js\",\n          \"routes/methods.js\",\n          \"routes/page/four.js\",\n          \"routes/page/three.js\",\n          \"routes/prefs.js\",\n          \"routes/render-errors.js\",\n          \"routes/render-errors/nested.js\",\n          \"styles/app-72f634dc.css\",\n          \"styles/gists-d7ad5f49.css\",\n          \"styles/methods-d182a270.css\",\n          \"styles/redText-2b391c21.css\",\n        ]\n      `);\n    });","file":"build-test.ts","skipped":true,"dir":"packages/remix-dev/__tests__"},{"name":"generates the correct bundles","suites":["building","the production browser build"],"updatePoint":{"line":162,"column":37},"line":162,"code":"    it(\"generates the correct bundles\", async () => {\n      let output = await generateBuild(config, {\n        mode: BuildMode.Production,\n        target: BuildTarget.Browser,\n      });\n\n      expect(getFilenames(output)).toMatchInlineSnapshot(`\n        Array [\n          \"_shared/Shared-bae6070c.js\",\n          \"_shared/__babel/runtime-88c72f87.js\",\n          \"_shared/__mdx-js/react-a9edf40b.js\",\n          \"_shared/__remix-run/react-991ebd19.js\",\n          \"_shared/_rollupPluginBabelHelpers-bfa6c712.js\",\n          \"_shared/history-e6417d88.js\",\n          \"_shared/object-assign-510802f4.js\",\n          \"_shared/prop-types-939a16b3.js\",\n          \"_shared/react-dom-9dcf9947.js\",\n          \"_shared/react-e3656f88.js\",\n          \"_shared/react-is-5765fb91.js\",\n          \"_shared/react-router-dom-baf54395.js\",\n          \"_shared/react-router-fc62a14c.js\",\n          \"_shared/scheduler-f1282356.js\",\n          \"components/guitar-1080x720-a9c95518.jpg\",\n          \"components/guitar-2048x1365-f42efd6b.jpg\",\n          \"components/guitar-500x333-3a1a0bd1.jpg\",\n          \"components/guitar-500x500-c6f1ab94.jpg\",\n          \"components/guitar-600x600-b329e428.jpg\",\n          \"components/guitar-720x480-729becce.jpg\",\n          \"entry.client-b7de4be6.js\",\n          \"manifest-943fff78.js\",\n          \"pages/one-829d2fc6.js\",\n          \"pages/two-31b88726.js\",\n          \"root-de6ed2a5.js\",\n          \"routes/404-a4edec5f.js\",\n          \"routes/gists-236207fe.js\",\n          \"routes/gists.mine-ac017552.js\",\n          \"routes/gists/$username-c4819bb8.js\",\n          \"routes/gists/index-0f39313f.js\",\n          \"routes/index-eb238abf.js\",\n          \"routes/links-50cd630a.js\",\n          \"routes/loader-errors-e4502176.js\",\n          \"routes/loader-errors/nested-741a07ef.js\",\n          \"routes/methods-8241c6fa.js\",\n          \"routes/page/four-efa66f69.js\",\n          \"routes/page/three-dfbf7520.js\",\n          \"routes/prefs-12bae83f.js\",\n          \"routes/render-errors-cb72f859.js\",\n          \"routes/render-errors/nested-ef1c619f.js\",\n          \"styles/app-72f634dc.css\",\n          \"styles/gists-d7ad5f49.css\",\n          \"styles/methods-d182a270.css\",\n          \"styles/redText-2b391c21.css\",\n        ]\n      `);\n    });","file":"build-test.ts","skipped":true,"dir":"packages/remix-dev/__tests__"},{"name":"prints help info","suites":["remix CLI","the --help flag"],"updatePoint":{"line":86,"column":24},"line":86,"code":"    it(\"prints help info\", async () => {\n      let { stdout } = await execRemix([\"--help\"]);\n      expect(stdout.trim()).toMatchInlineSnapshot(`\n        \"R E M I X\n\n          Usage:\n            $ remix create <projectDir> --template <template>\n            $ remix init [projectDir]\n            $ remix build [projectDir]\n            $ remix dev [projectDir]\n            $ remix routes [projectDir]\n            $ remix setup [remixPlatform]\n            $ remix migrate [-m migration] [projectDir]\n\n          Options:\n            --help, -h          Print this help message and exit\n            --version, -v       Print the CLI version and exit\n            --no-color          Disable ANSI colors in console output\n          \\`create\\` Options:\n            --template          The template to use\n            --no-install        Skip installing dependencies after creation\n            --no-typescript     Convert the template to JavaScript\n            --remix-version     The version of Remix to use\n          \\`build\\` Options:\n            --sourcemap         Generate source maps for production\n          \\`dev\\` Options:\n            --debug             Attach Node.js inspector\n          \\`routes\\` Options:\n            --json              Print the routes as JSON\n          \\`migrate\\` Options:\n            --debug             Show debugging logs\n            --dry               Dry run (no changes are made to files)\n            --force             Bypass Git safety checks and forcibly run migration\n            --migration, -m     Name of the migration to run\n\n          Values:\n            - projectDir        The Remix project directory\n            - template          The project template to use\n            - remixPlatform     \\`node\\` or \\`cloudflare\\`\n            - migration         One of the choices from https://github.com/remix-run/remix/tree/main/packages/remix-dev/cli/migrate/migration-options\n\n          Creating a new project:\n\n            Remix projects are created from templates. A template can be:\n\n            - a file path to a directory of files\n            - a file path to a tarball\n            - the name of a :username/:repo on GitHub\n            - the URL of a tarball\n\n            $ remix create my-app --template /path/to/remix-template\n            $ remix create my-app --template /path/to/remix-template.tar.gz\n            $ remix create my-app --template remix-run/grunge-stack\n            $ remix create my-app --template :username/:repo\n            $ remix create my-app --template https://github.com/:username/:repo\n            $ remix create my-app --template https://github.com/:username/:repo/tree/:branch\n            $ remix create my-app --template https://github.com/:username/:repo/archive/refs/tags/:tag.tar.gz\n            $ remix create my-app --template https://example.com/remix-template.tar.gz\n\n            To create a new project from a template in a private GitHub repo,\n            set the \\`GITHUB_TOKEN\\` environment variable to a personal access\n            token with access to that repo.\n\n          Initialize a project::\n\n            Remix project templates may contain a \\`remix.init\\` directory\n            with a script that initializes the project. This script automatically\n            runs during \\`remix create\\`, but if you ever need to run it manually\n            (e.g. to test it out) you can:\n\n            $ remix init\n\n          Build your project:\n\n            $ remix build\n            $ remix build --sourcemap\n            $ remix build my-app\n\n          Run your project locally in development:\n\n            $ remix dev\n            $ remix dev my-app\n            $ remix dev --debug\n\n          Show all routes in your app:\n\n            $ remix routes\n            $ remix routes my-app\n            $ remix routes --json\"\n      `);\n    });","file":"cli-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"prints the current version","suites":["remix CLI","the --version flag"],"updatePoint":{"line":180,"column":34},"line":180,"code":"    it(\"prints the current version\", async () => {\n      let { stdout } = await execRemix([\"--version\"]);\n      expect(!!semver.valid(stdout.trim())).toBe(true);\n    });","file":"cli-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"allows you to go through the prompts","suites":["remix CLI","create prompts"],"updatePoint":{"line":187,"column":44},"line":187,"code":"    it(\"allows you to go through the prompts\", async () => {\n      let projectDir = path.join(TEMP_DIR, \"my-app\");\n\n      let proc = childProcess.spawn(\n        \"node\",\n        [\n          \"--require\",\n          require.resolve(\"esbuild-register\"),\n          \"--require\",\n          path.join(__dirname, \"./msw.ts\"),\n          path.resolve(__dirname, \"../cli.ts\"),\n          \"create\",\n        ],\n        { stdio: [null, null, null] }\n      );\n\n      await interactWithShell(proc, [\n        { question: /Where.*create.*app/i, type: [projectDir, ENTER] },\n        { question: /What type of app/i, answer: /basics/i },\n        { question: /Where.*deploy/i, answer: /express/i },\n        { question: /install/i, type: [\"n\", ENTER] },\n        { question: /typescript or javascript/i, answer: /typescript/i },\n      ]);\n    });","file":"cli-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"allows you to go through the prompts and convert to JS","suites":["remix CLI","create prompts"],"updatePoint":{"line":212,"column":62},"line":212,"code":"    it(\"allows you to go through the prompts and convert to JS\", async () => {\n      let projectDir = path.join(TEMP_DIR, \"my-js-app\");\n\n      let proc = childProcess.spawn(\n        \"node\",\n        [\n          \"--require\",\n          require.resolve(\"esbuild-register\"),\n          \"--require\",\n          path.join(__dirname, \"./msw.ts\"),\n          path.resolve(__dirname, \"../cli.ts\"),\n          \"create\",\n        ],\n        { stdio: [null, null, null] }\n      );\n\n      await interactWithShell(proc, [\n        { question: /Where.*create.*app/i, type: [projectDir, ENTER] },\n        { question: /What type of app/i, answer: /basics/i },\n        { question: /Where.*deploy/i, answer: /express/i },\n        { question: /install/i, type: [\"n\", ENTER] },\n        { question: /typescript or javascript/i, answer: /javascript/i },\n      ]);\n\n      expect(\n        fse.existsSync(path.join(projectDir, \"package.json\"))\n      ).toBeTruthy();\n      expect(\n        fse.existsSync(path.join(projectDir, \"app/root.jsx\"))\n      ).toBeTruthy();\n      expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeFalsy();\n      expect(\n        fse.existsSync(path.join(projectDir, \"tsconfig.json\"))\n      ).toBeFalsy();\n      expect(\n        fse.existsSync(path.join(projectDir, \"jsconfig.json\"))\n      ).toBeTruthy();\n      let pkgJSON = JSON.parse(\n        fse.readFileSync(path.join(projectDir, \"package.json\"), \"utf-8\")\n      );\n      expect(Object.keys(pkgJSON.devDependencies)).not.toContain(\"typescript\");\n    });","file":"cli-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"works for examples in the remix repo","suites":["the create command"],"updatePoint":{"line":134,"column":42},"line":134,"code":"  it(\"works for examples in the remix repo\", async () => {\n    let projectDir = await getProjectDir(\"example\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      \"examples/basic\",\n      \"--no-install\",\n      \"--typescript\",\n    ]);\n    expect(output.trim()).toBe(\n      getSuccessMessage(path.join(\"<TEMP_DIR>\", \"example\"))\n    );\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"works for templates in the remix org","suites":["the create command"],"updatePoint":{"line":151,"column":42},"line":151,"code":"  it(\"works for templates in the remix org\", async () => {\n    let projectDir = await getProjectDir(\"template\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      \"grunge-stack\",\n      \"--no-install\",\n      \"--typescript\",\n    ]);\n\n    expect(output.trim()).toBe(\n      getOptOutOfInstallMessage() +\n        \"\\n\\n\" +\n        getSuccessMessage(path.join(\"<TEMP_DIR>\", \"template\"))\n    );\n\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"works for GitHub username/repo combo","suites":["the create command"],"updatePoint":{"line":172,"column":42},"line":172,"code":"  it(\"works for GitHub username/repo combo\", async () => {\n    let projectDir = await getProjectDir(\"repo\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      \"remix-fake-tester-username/remix-fake-tester-repo\",\n      \"--no-install\",\n      \"--typescript\",\n    ]);\n    expect(output.trim()).toBe(\n      getOptOutOfInstallMessage() +\n        \"\\n\\n\" +\n        getSuccessMessage(path.join(\"<TEMP_DIR>\", \"repo\"))\n    );\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"works for remote tarballs","suites":["the create command"],"updatePoint":{"line":191,"column":31},"line":191,"code":"  it(\"works for remote tarballs\", async () => {\n    let projectDir = await getProjectDir(\"remote-tarball\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      \"https://example.com/remix-stack.tar.gz\",\n      \"--no-install\",\n      \"--typescript\",\n    ]);\n    expect(output.trim()).toBe(\n      getOptOutOfInstallMessage() +\n        \"\\n\\n\" +\n        getSuccessMessage(path.join(\"<TEMP_DIR>\", \"remote-tarball\"))\n    );\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"works for different branches","suites":["the create command"],"updatePoint":{"line":210,"column":34},"line":210,"code":"  it(\"works for different branches\", async () => {\n    let projectDir = await getProjectDir(\"diff-branch\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      \"https://github.com/fake-remix-tester/nested-dir/tree/dev/stack\",\n      \"--no-install\",\n      \"--typescript\",\n    ]);\n    expect(output.trim()).toBe(\n      getOptOutOfInstallMessage() +\n        \"\\n\\n\" +\n        getSuccessMessage(path.join(\"<TEMP_DIR>\", \"diff-branch\"))\n    );\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"works for a path to a tarball on disk","suites":["the create command"],"updatePoint":{"line":229,"column":43},"line":229,"code":"  it(\"works for a path to a tarball on disk\", async () => {\n    let projectDir = await getProjectDir(\"local-tarball\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      path.join(__dirname, \"fixtures\", \"arc.tar.gz\"),\n      \"--no-install\",\n      \"--typescript\",\n    ]);\n    expect(output.trim()).toBe(\n      getSuccessMessage(path.join(\"<TEMP_DIR>\", \"local-tarball\"))\n    );\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"works for a file URL to a tarball on disk","suites":["the create command"],"updatePoint":{"line":246,"column":47},"line":246,"code":"  it(\"works for a file URL to a tarball on disk\", async () => {\n    let projectDir = await getProjectDir(\"file-url-tarball\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      pathToFileURL(path.join(__dirname, \"fixtures\", \"arc.tar.gz\")).toString(),\n      \"--no-install\",\n      \"--typescript\",\n    ]);\n    expect(output.trim()).toBe(\n      getSuccessMessage(path.join(\"<TEMP_DIR>\", \"file-url-tarball\"))\n    );\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"converts a template to javascript","suites":["the create command"],"updatePoint":{"line":263,"column":39},"line":263,"code":"  it(\"converts a template to javascript\", async () => {\n    let projectDir = await getProjectDir(\"template-to-js\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      \"blues-stack\",\n      \"--no-install\",\n      \"--no-typescript\",\n    ]);\n    expect(output.trim()).toBe(\n      getOptOutOfInstallMessage() +\n        \"\\n\\n\" +\n        getSuccessMessage(path.join(\"<TEMP_DIR>\", \"template-to-js\"))\n    );\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.jsx\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeFalsy();\n    expect(fse.existsSync(path.join(projectDir, \"tsconfig.json\"))).toBeFalsy();\n    expect(fse.existsSync(path.join(projectDir, \"jsconfig.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/utils.js\"))).toBeTruthy();\n    let pkgJSON = JSON.parse(\n      fse.readFileSync(path.join(projectDir, \"package.json\"), \"utf-8\")\n    );\n    expect(Object.keys(pkgJSON.devDependencies)).not.toContain(\"typescript\");\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"works for a file path to a directory on disk","suites":["the create command"],"updatePoint":{"line":290,"column":50},"line":290,"code":"  it(\"works for a file path to a directory on disk\", async () => {\n    let projectDir = await getProjectDir(\"local-directory\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      path.join(__dirname, \"fixtures/stack\"),\n      \"--no-install\",\n      \"--typescript\",\n    ]);\n    expect(output.trim()).toBe(\n      getOptOutOfInstallMessage() +\n        \"\\n\\n\" +\n        getSuccessMessage(path.join(\"<TEMP_DIR>\", \"local-directory\"))\n    );\n\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"works for a file URL to a directory on disk","suites":["the create command"],"updatePoint":{"line":310,"column":49},"line":310,"code":"  it(\"works for a file URL to a directory on disk\", async () => {\n    let projectDir = await getProjectDir(\"file-url-directory\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      pathToFileURL(path.join(__dirname, \"fixtures/stack\")).toString(),\n      \"--no-install\",\n      \"--typescript\",\n    ]);\n    expect(output.trim()).toBe(\n      getOptOutOfInstallMessage() +\n        \"\\n\\n\" +\n        getSuccessMessage(path.join(\"<TEMP_DIR>\", \"file-url-directory\"))\n    );\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"prioritizes built-in templates when validating input","suites":["the create command"],"updatePoint":{"line":329,"column":58},"line":329,"code":"  it(\"prioritizes built-in templates when validating input\", async () => {\n    let projectDir = await getProjectDir(\"built-in-template\");\n\n    // create a local directory in our cwd with the same name as our chosen\n    // template and give it a package.json so we can check it against the one in\n    // our template\n    let dupedDir = path.join(process.cwd(), \"express\");\n    await fse.mkdir(dupedDir);\n    await fse.writeFile(\n      path.join(dupedDir, \"package.json\"),\n      '{ \"name\": \"dummy\" }'\n    );\n\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      \"express\",\n      \"--install\",\n      \"--typescript\",\n    ]);\n\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    let pkgJSON = JSON.parse(\n      fse.readFileSync(path.join(projectDir, \"package.json\"), \"utf-8\")\n    );\n    expect(pkgJSON.name).not.toBe(\"dummy\");\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"runs remix.init script when installing dependencies","suites":["the create command"],"updatePoint":{"line":358,"column":57},"line":358,"code":"  it(\"runs remix.init script when installing dependencies\", async () => {\n    let projectDir = await getProjectDir(\"remix-init-auto\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      path.join(__dirname, \"fixtures\", \"successful-remix-init.tar.gz\"),\n      \"--install\",\n      \"--typescript\",\n    ]);\n    expect(output.trim()).toBe(\n      \"💿 Running remix.init script\\n\" +\n        getSuccessMessage(path.join(\"<TEMP_DIR>\", \"remix-init-auto\"))\n    );\n    expect(output).toContain(`💿 Running remix.init script`);\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"test.txt\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"remix.init\"))).toBeFalsy();\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"runs remix.init script when using `remix init`","suites":["the create command"],"updatePoint":{"line":379,"column":52},"line":379,"code":"  it(\"runs remix.init script when using `remix init`\", async () => {\n    let projectDir = await getProjectDir(\"remix-init-manual\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      path.join(__dirname, \"fixtures\", \"successful-remix-init.tar.gz\"),\n      \"--no-install\",\n      \"--typescript\",\n    ]);\n    expect(output.trim()).toBe(\n      getOptOutOfInstallMessage() +\n        \"\\n\\n\" +\n        getSuccessMessage(path.join(\"<TEMP_DIR>\", \"remix-init-manual\"))\n    );\n\n    output = \"\";\n    process.chdir(projectDir);\n    await run([\"init\"]);\n\n    expect(output).toBe(\"\");\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"test.txt\"))).toBeTruthy();\n    // if you run `remix init` keep around the remix.init directory for future use\n    expect(fse.existsSync(path.join(projectDir, \"remix.init\"))).toBeTruthy();\n    // deps can take a bit to install\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"throws an error when invalid remix.init script when automatically ran","suites":["the create command"],"updatePoint":{"line":408,"column":75},"line":408,"code":"  it(\"throws an error when invalid remix.init script when automatically ran\", async () => {\n    let projectDir = await getProjectDir(\"invalid-remix-init-manual\");\n    await expect(\n      run([\n        \"create\",\n        projectDir,\n        \"--template\",\n        path.join(__dirname, \"fixtures\", \"failing-remix-init.tar.gz\"),\n        \"--install\",\n        \"--typescript\",\n      ])\n    ).rejects.toThrowError(`🚨 Oops, remix.init failed`);\n\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n    // we should keep remix.init around if the init script fails\n    expect(fse.existsSync(path.join(projectDir, \"remix.init\"))).toBeTruthy();\n    // deps can take a bit to install\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"throws an error when invalid remix.init script when manually ran","suites":["the create command"],"updatePoint":{"line":428,"column":70},"line":428,"code":"  it(\"throws an error when invalid remix.init script when manually ran\", async () => {\n    let projectDir = await getProjectDir(\"invalid-remix-init-manual\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      path.join(__dirname, \"fixtures\", \"failing-remix-init.tar.gz\"),\n      \"--no-install\",\n      \"--typescript\",\n    ]);\n    expect(output.trim()).toBe(\n      getOptOutOfInstallMessage() +\n        \"\\n\\n\" +\n        getSuccessMessage(path.join(\"<TEMP_DIR>\", \"invalid-remix-init-manual\"))\n    );\n\n    process.chdir(projectDir);\n    await expect(run([\"init\"])).rejects.toThrowError(\n      `🚨 Oops, remix.init failed`\n    );\n    expect(fse.existsSync(path.join(projectDir, \"package.json\"))).toBeTruthy();\n    expect(fse.existsSync(path.join(projectDir, \"app/root.tsx\"))).toBeTruthy();\n    // we should keep remix.init around if the init script fails\n    expect(fse.existsSync(path.join(projectDir, \"remix.init\"))).toBeTruthy();\n    // deps can take a bit to install\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"recognizes when Yarn was used to run the command","suites":["the create command"],"updatePoint":{"line":455,"column":54},"line":455,"code":"  it(\"recognizes when Yarn was used to run the command\", async () => {\n    let originalUserAgent = process.env.npm_user_agent;\n    process.env.npm_user_agent = yarnUserAgent;\n\n    let projectDir = await getProjectDir(\"yarn-create\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      path.join(__dirname, \"fixtures\", \"successful-remix-init.tar.gz\"),\n      \"--install\",\n      \"--typescript\",\n    ]);\n\n    expect(execSync).toBeCalledWith(\"yarn install\", expect.anything());\n    process.env.npm_user_agent = originalUserAgent;\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"recognizes when pnpm was used to run the command","suites":["the create command"],"updatePoint":{"line":473,"column":54},"line":473,"code":"  it(\"recognizes when pnpm was used to run the command\", async () => {\n    let originalUserAgent = process.env.npm_user_agent;\n    process.env.npm_user_agent = pnpmUserAgent;\n\n    let projectDir = await getProjectDir(\"pnpm-create\");\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      path.join(__dirname, \"fixtures\", \"successful-remix-init.tar.gz\"),\n      \"--install\",\n      \"--typescript\",\n    ]);\n\n    expect(execSync).toBeCalledWith(\"pnpm install\", expect.anything());\n    process.env.npm_user_agent = originalUserAgent;\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"prompts to run the install command for the preferred package manager","suites":["the create command"],"updatePoint":{"line":491,"column":74},"line":491,"code":"  it(\"prompts to run the install command for the preferred package manager\", async () => {\n    let originalUserAgent = process.env.npm_user_agent;\n    process.env.npm_user_agent = pnpmUserAgent;\n\n    let projectDir = await getProjectDir(\"pnpm-prompt-install\");\n    let mockPrompt = jest.mocked(inquirer.prompt);\n    mockPrompt.mockImplementationOnce(() => {\n      return Promise.resolve({\n        install: false,\n      }) as unknown as ReturnType<typeof inquirer.prompt>;\n    });\n\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      \"grunge-stack\",\n      \"--typescript\",\n    ]);\n\n    let mockPromptCalls = mockPrompt.mock.calls;\n    let lastCallArgs = mockPromptCalls[mockPromptCalls.length - 1][0];\n    let lastCallUnknown = lastCallArgs as Array<unknown>;\n    expect(lastCallUnknown[lastCallUnknown.length - 1]).toHaveProperty(\n      \"message\",\n      \"Do you want me to run `pnpm install`?\"\n    );\n    process.env.npm_user_agent = originalUserAgent;\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"suggests to run the init command with the preferred package manager","suites":["the create command"],"updatePoint":{"line":521,"column":73},"line":521,"code":"  it(\"suggests to run the init command with the preferred package manager\", async () => {\n    let originalUserAgent = process.env.npm_user_agent;\n    process.env.npm_user_agent = pnpmUserAgent;\n\n    let projectDir = await getProjectDir(\"pnpm-suggest-install\");\n    let mockPrompt = jest.mocked(inquirer.prompt);\n    mockPrompt.mockImplementationOnce(() => {\n      return Promise.resolve({\n        install: false,\n      }) as unknown as ReturnType<typeof inquirer.prompt>;\n    });\n\n    await run([\n      \"create\",\n      projectDir,\n      \"--template\",\n      \"grunge-stack\",\n      \"--no-install\",\n      \"--typescript\",\n    ]);\n\n    expect(output).toContain(getOptOutOfInstallMessage(\"pnpm exec remix init\"));\n    process.env.npm_user_agent = originalUserAgent;\n  });","file":"create-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"returns an array of routes","suites":["defineRoutes"],"updatePoint":{"line":4,"column":32},"line":4,"code":"  it(\"returns an array of routes\", () => {\n    let routes = defineRoutes((route) => {\n      route(\"/\", \"routes/home.js\");\n      route(\"inbox\", \"routes/inbox.js\", () => {\n        route(\"/\", \"routes/inbox/index.js\", { index: true });\n        route(\":messageId\", \"routes/inbox/$messageId.js\");\n        route(\"archive\", \"routes/inbox/archive.js\");\n      });\n    });\n\n    expect(routes).toMatchInlineSnapshot(`\n      Object {\n        \"routes/home\": Object {\n          \"caseSensitive\": undefined,\n          \"file\": \"routes/home.js\",\n          \"id\": \"routes/home\",\n          \"index\": undefined,\n          \"parentId\": undefined,\n          \"path\": \"/\",\n        },\n        \"routes/inbox\": Object {\n          \"caseSensitive\": undefined,\n          \"file\": \"routes/inbox.js\",\n          \"id\": \"routes/inbox\",\n          \"index\": undefined,\n          \"parentId\": undefined,\n          \"path\": \"inbox\",\n        },\n        \"routes/inbox/$messageId\": Object {\n          \"caseSensitive\": undefined,\n          \"file\": \"routes/inbox/$messageId.js\",\n          \"id\": \"routes/inbox/$messageId\",\n          \"index\": undefined,\n          \"parentId\": \"routes/inbox\",\n          \"path\": \":messageId\",\n        },\n        \"routes/inbox/archive\": Object {\n          \"caseSensitive\": undefined,\n          \"file\": \"routes/inbox/archive.js\",\n          \"id\": \"routes/inbox/archive\",\n          \"index\": undefined,\n          \"parentId\": \"routes/inbox\",\n          \"path\": \"archive\",\n        },\n        \"routes/inbox/index\": Object {\n          \"caseSensitive\": undefined,\n          \"file\": \"routes/inbox/index.js\",\n          \"id\": \"routes/inbox/index\",\n          \"index\": true,\n          \"parentId\": \"routes/inbox\",\n          \"path\": \"/\",\n        },\n      }\n    `);\n  });","file":"defineRoutes-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"works with async data","suites":["defineRoutes"],"updatePoint":{"line":60,"column":27},"line":60,"code":"  it(\"works with async data\", async () => {\n    // Read everything *before* calling defineRoutes.\n    let fakeDirectory = await Promise.resolve([\"one.md\", \"two.md\"]);\n    let routes = defineRoutes((route) => {\n      for (let file of fakeDirectory) {\n        route(file.replace(/\\.md$/, \"\"), file);\n      }\n    });\n\n    expect(routes).toMatchInlineSnapshot(`\n      Object {\n        \"one\": Object {\n          \"caseSensitive\": undefined,\n          \"file\": \"one.md\",\n          \"id\": \"one\",\n          \"index\": undefined,\n          \"parentId\": undefined,\n          \"path\": \"one\",\n        },\n        \"two\": Object {\n          \"caseSensitive\": undefined,\n          \"file\": \"two.md\",\n          \"id\": \"two\",\n          \"index\": undefined,\n          \"parentId\": undefined,\n          \"path\": \"two\",\n        },\n      }\n    `);\n  });","file":"defineRoutes-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"validateEmail returns false for non-emails","suites":[],"updatePoint":{"line":3,"column":48},"line":3,"code":"test(\"validateEmail returns false for non-emails\", () => {\n  expect(validateEmail(undefined)).toBe(false);\n  expect(validateEmail(null)).toBe(false);\n  expect(validateEmail(\"\")).toBe(false);\n  expect(validateEmail(\"not-an-email\")).toBe(false);\n  expect(validateEmail(\"n@\")).toBe(false);\n});","file":"fixtures/replace-remix-imports/app/utils.test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"validateEmail returns true for emails","suites":[],"updatePoint":{"line":11,"column":43},"line":11,"code":"test(\"validateEmail returns true for emails\", () => {\n  expect(validateEmail(\"kody@example.com\")).toBe(true);\n});","file":"fixtures/replace-remix-imports/app/utils.test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"generates a config","suites":["readConfig"],"updatePoint":{"line":14,"column":24},"line":14,"code":"  it(\"generates a config\", async () => {\n    expect(config).toMatchInlineSnapshot(\n      {\n        rootDirectory: expect.any(String),\n        appDirectory: expect.any(String),\n        cacheDirectory: expect.any(String),\n        devServerPort: expect.any(Number),\n        serverBuildPath: expect.any(String),\n        assetsBuildDirectory: expect.any(String),\n      },\n      `\n      Object {\n        \"appDirectory\": Any<String>,\n        \"assetsBuildDirectory\": Any<String>,\n        \"cacheDirectory\": Any<String>,\n        \"devServerBroadcastDelay\": 0,\n        \"devServerPort\": Any<Number>,\n        \"entryClientFile\": \"entry.client.tsx\",\n        \"entryServerFile\": \"entry.server.tsx\",\n        \"mdx\": undefined,\n        \"publicPath\": \"/build/\",\n        \"rootDirectory\": Any<String>,\n        \"routes\": Object {\n          \"root\": Object {\n            \"file\": \"root.tsx\",\n            \"id\": \"root\",\n            \"path\": \"\",\n          },\n        },\n        \"serverBuildPath\": Any<String>,\n        \"serverBuildTarget\": undefined,\n        \"serverBuildTargetEntryModule\": \"export * from \\\\\"@remix-run/dev/server-build\\\\\";\",\n        \"serverDependenciesToBundle\": Array [],\n        \"serverEntryPoint\": undefined,\n        \"serverMode\": \"production\",\n        \"serverModuleFormat\": \"cjs\",\n        \"serverPlatform\": \"node\",\n      }\n    `\n    );\n  });","file":"readConfig-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"runs successfully","suites":["`replace-remix-imports` migration"],"updatePoint":{"line":74,"column":23},"line":74,"code":"  it(\"runs successfully\", async () => {\n    let projectDir = makeApp();\n    await replaceRemixImports(projectDir);\n\n    expect(output).toContain(\"detected `@remix-run/node`\");\n    expect(output).toContain(\"detected `@remix-run/serve`\");\n\n    expect(output).toContain(\"detected `1.3.4`\");\n    expect(output).toContain(\"✅ Your Remix dependencies look good!\");\n    let packageJson: PackageJson = fse.readJSONSync(\n      path.join(projectDir, \"package.json\")\n    );\n    expect(packageJson.dependencies).not.toContain(\"remix\");\n    expect(packageJson.devDependencies).not.toContain(\"remix\");\n    expect(packageJson.dependencies[\"@remix-run/react\"]).toBe(\"1.3.4\");\n    expect(packageJson.dependencies[\"@remix-run/node\"]).toBe(\"1.3.4\");\n    expect(packageJson.dependencies[\"@remix-run/serve\"]).toBe(\"1.3.4\");\n    expect(packageJson.devDependencies[\"@remix-run/dev\"]).toBe(\"1.3.4\");\n\n    expect(output).toContain(\n      \"🗑  I'm removing `remix setup` from your `postinstall` script.\"\n    );\n    expect(output).toContain(\"✅ Your `package.json` scripts looks good!\");\n    expect(packageJson.scripts).not.toContain(\"postinstall\");\n\n    expect(output).toContain(\"✅ Your Remix imports look good!\");\n    if (process.platform === \"win32\") {\n      let res =\n        await PowerShell.$`Get-ChildItem ${projectDir} | Select-String 'from \"remix\"'`;\n      let err = res.stderr?.toString(\"utf-8\");\n      let out = res.stdout?.toString(\"utf-8\");\n      expect(err).toBeFalsy();\n      expect(out).toBeFalsy();\n    } else {\n      let { status } = spawnSync(\"grep\", [\"-nri\", 'from \"remix\"', projectDir]);\n      // `grep` exits with status code `1` when no matches are found\n      expect(status).toBe(1);\n    }\n\n    expect(output).toContain(\"successfully migrated\");\n    expect(output).toContain(\"npm install\");\n  });","file":"replace-remix-imports-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"\"\" -> \"\"","suites":["createRoutePath","creates proper route paths"],"updatePoint":{"line":42,"column":37},"line":42,"code":"      it(`\"${input}\" -> \"${expected}\"`, () => {\n        expect(createRoutePath(input)).toBe(expected);\n      });","file":"routesConvention-test.ts","skipped":false,"dir":"packages/remix-dev/__tests__"},{"name":"handles requests","suites":["express createRequestHandler","basic requests"],"updatePoint":{"line":55,"column":24},"line":55,"code":"    it(\"handles requests\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async (req) => {\n        return new Response(`URL: ${new URL(req.url).pathname}`);\n      });\n\n      let request = supertest(createApp());\n      let res = await request.get(\"/foo/bar\");\n\n      expect(res.status).toBe(200);\n      expect(res.text).toBe(\"URL: /foo/bar\");\n      expect(res.headers[\"x-powered-by\"]).toBe(\"Express\");\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-express/__tests__"},{"name":"handles null body","suites":["express createRequestHandler","basic requests"],"updatePoint":{"line":68,"column":25},"line":68,"code":"    it(\"handles null body\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        return new Response(null, { status: 200 });\n      });\n\n      let request = supertest(createApp());\n      let res = await request.get(\"/\");\n\n      expect(res.status).toBe(200);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-express/__tests__"},{"name":"handles body as stream","suites":["express createRequestHandler","basic requests"],"updatePoint":{"line":80,"column":30},"line":80,"code":"    it(\"handles body as stream\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        let stream = Readable.from(\"hello world\");\n        return new NodeResponse(stream, { status: 200 }) as unknown as Response;\n      });\n\n      let request = supertest(createApp());\n      // note: vercel's createServerWithHelpers requires a x-now-bridge-request-id\n      let res = await request.get(\"/\").set({ \"x-now-bridge-request-id\": \"2\" });\n\n      expect(res.status).toBe(200);\n      expect(res.text).toBe(\"hello world\");\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-express/__tests__"},{"name":"handles status codes","suites":["express createRequestHandler","basic requests"],"updatePoint":{"line":94,"column":28},"line":94,"code":"    it(\"handles status codes\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        return new Response(null, { status: 204 });\n      });\n\n      let request = supertest(createApp());\n      let res = await request.get(\"/\");\n\n      expect(res.status).toBe(204);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-express/__tests__"},{"name":"sets headers","suites":["express createRequestHandler","basic requests"],"updatePoint":{"line":105,"column":20},"line":105,"code":"    it(\"sets headers\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        let headers = new Headers({ \"X-Time-Of-Year\": \"most wonderful\" });\n        headers.append(\n          \"Set-Cookie\",\n          \"first=one; Expires=0; Path=/; HttpOnly; Secure; SameSite=Lax\"\n        );\n        headers.append(\n          \"Set-Cookie\",\n          \"second=two; MaxAge=1209600; Path=/; HttpOnly; Secure; SameSite=Lax\"\n        );\n        headers.append(\n          \"Set-Cookie\",\n          \"third=three; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Path=/; HttpOnly; Secure; SameSite=Lax\"\n        );\n        return new Response(null, { headers });\n      });\n\n      let request = supertest(createApp());\n      let res = await request.get(\"/\");\n\n      expect(res.headers[\"x-time-of-year\"]).toBe(\"most wonderful\");\n      expect(res.headers[\"set-cookie\"]).toEqual([\n        \"first=one; Expires=0; Path=/; HttpOnly; Secure; SameSite=Lax\",\n        \"second=two; MaxAge=1209600; Path=/; HttpOnly; Secure; SameSite=Lax\",\n        \"third=three; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Path=/; HttpOnly; Secure; SameSite=Lax\",\n      ]);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-express/__tests__"},{"name":"handles empty headers","suites":["express createRemixHeaders","creates fetch headers from express headers"],"updatePoint":{"line":138,"column":29},"line":138,"code":"    it(\"handles empty headers\", () => {\n      expect(createRemixHeaders({})).toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {},\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-express/__tests__"},{"name":"handles simple headers","suites":["express createRemixHeaders","creates fetch headers from express headers"],"updatePoint":{"line":146,"column":30},"line":146,"code":"    it(\"handles simple headers\", () => {\n      expect(createRemixHeaders({ \"x-foo\": \"bar\" })).toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-foo\": Array [\n              \"bar\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-express/__tests__"},{"name":"handles multiple headers","suites":["express createRemixHeaders","creates fetch headers from express headers"],"updatePoint":{"line":158,"column":32},"line":158,"code":"    it(\"handles multiple headers\", () => {\n      expect(createRemixHeaders({ \"x-foo\": \"bar\", \"x-bar\": \"baz\" }))\n        .toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-bar\": Array [\n              \"baz\",\n            ],\n            \"x-foo\": Array [\n              \"bar\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-express/__tests__"},{"name":"handles headers with multiple values","suites":["express createRemixHeaders","creates fetch headers from express headers"],"updatePoint":{"line":174,"column":44},"line":174,"code":"    it(\"handles headers with multiple values\", () => {\n      expect(createRemixHeaders({ \"x-foo\": \"bar, baz\" }))\n        .toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-foo\": Array [\n              \"bar, baz\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-express/__tests__"},{"name":"handles headers with multiple values and multiple headers","suites":["express createRemixHeaders","creates fetch headers from express headers"],"updatePoint":{"line":187,"column":65},"line":187,"code":"    it(\"handles headers with multiple values and multiple headers\", () => {\n      expect(createRemixHeaders({ \"x-foo\": \"bar, baz\", \"x-bar\": \"baz\" }))\n        .toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-bar\": Array [\n              \"baz\",\n            ],\n            \"x-foo\": Array [\n              \"bar, baz\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-express/__tests__"},{"name":"handles multiple set-cookie headers","suites":["express createRemixHeaders","creates fetch headers from express headers"],"updatePoint":{"line":203,"column":43},"line":203,"code":"    it(\"handles multiple set-cookie headers\", () => {\n      expect(\n        createRemixHeaders({\n          \"set-cookie\": [\n            \"__session=some_value; Path=/; Secure; HttpOnly; MaxAge=7200; SameSite=Lax\",\n            \"__other=some_other_value; Path=/; Secure; HttpOnly; MaxAge=3600; SameSite=Lax\",\n          ],\n        })\n      ).toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"set-cookie\": Array [\n              \"__session=some_value; Path=/; Secure; HttpOnly; MaxAge=7200; SameSite=Lax\",\n              \"__other=some_other_value; Path=/; Secure; HttpOnly; MaxAge=3600; SameSite=Lax\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-express/__tests__"},{"name":"creates a request with the correct headers","suites":["express createRemixRequest"],"updatePoint":{"line":226,"column":48},"line":226,"code":"  it(\"creates a request with the correct headers\", async () => {\n    let expressRequest = createRequest({\n      url: \"/foo/bar\",\n      method: \"GET\",\n      protocol: \"http\",\n      hostname: \"localhost\",\n      headers: {\n        \"Cache-Control\": \"max-age=300, s-maxage=3600\",\n        Host: \"localhost:3000\",\n      },\n    });\n\n    expect(createRemixRequest(expressRequest)).toMatchInlineSnapshot(`\n      NodeRequest {\n        \"abortController\": undefined,\n        \"agent\": undefined,\n        \"compress\": true,\n        \"counter\": 0,\n        \"follow\": 20,\n        \"size\": 0,\n        \"timeout\": 0,\n        Symbol(Body internals): Object {\n          \"body\": null,\n          \"disturbed\": false,\n          \"error\": null,\n        },\n        Symbol(Request internals): Object {\n          \"headers\": Headers {\n            Symbol(map): Object {\n              \"cache-control\": Array [\n                \"max-age=300, s-maxage=3600\",\n              ],\n              \"host\": Array [\n                \"localhost:3000\",\n              ],\n            },\n          },\n          \"method\": \"GET\",\n          \"parsedURL\": Url {\n            \"auth\": null,\n            \"hash\": null,\n            \"host\": \"localhost:3000\",\n            \"hostname\": \"localhost\",\n            \"href\": \"http://localhost:3000/foo/bar\",\n            \"path\": \"/foo/bar\",\n            \"pathname\": \"/foo/bar\",\n            \"port\": \"3000\",\n            \"protocol\": \"http:\",\n            \"query\": null,\n            \"search\": null,\n            \"slashes\": true,\n          },\n          \"redirect\": \"follow\",\n          \"signal\": undefined,\n        },\n      }\n    `);\n  });","file":"server-test.ts","skipped":false,"dir":"packages/remix-express/__tests__"},{"name":"handles requests","suites":["netlify createRequestHandler","basic requests"],"updatePoint":{"line":59,"column":24},"line":59,"code":"    it(\"handles requests\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async (req) => {\n        return new Response(`URL: ${new URL(req.url).pathname}`);\n      });\n\n      // @ts-expect-error We don't have a real app to test, but it doesn't matter. We\n      // won't ever call through to the real createRequestHandler\n      await lambdaTester(createRequestHandler({ build: undefined }))\n        .event(createMockEvent({ rawUrl: \"http://localhost:3000/foo/bar\" }))\n        .expectResolve((res) => {\n          expect(res.statusCode).toBe(200);\n          expect(res.body).toBe(\"URL: /foo/bar\");\n        });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"handles null body","suites":["netlify createRequestHandler","basic requests"],"updatePoint":{"line":74,"column":25},"line":74,"code":"    it(\"handles null body\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        return new Response(null, { status: 200 });\n      });\n\n      // @ts-expect-error We don't have a real app to test, but it doesn't matter. We\n      // won't ever call through to the real createRequestHandler\n      await lambdaTester(createRequestHandler({ build: undefined }))\n        .event(createMockEvent({ rawUrl: \"http://localhost:3000\" }))\n        .expectResolve((res) => {\n          expect(res.statusCode).toBe(200);\n        });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"handles status codes","suites":["netlify createRequestHandler","basic requests"],"updatePoint":{"line":88,"column":28},"line":88,"code":"    it(\"handles status codes\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        return new Response(null, { status: 204 });\n      });\n\n      // @ts-expect-error We don't have a real app to test, but it doesn't matter. We\n      // won't ever call through to the real createRequestHandler\n      await lambdaTester(createRequestHandler({ build: undefined }))\n        .event(createMockEvent({ rawUrl: \"http://localhost:3000\" }))\n        .expectResolve((res) => {\n          expect(res.statusCode).toBe(204);\n        });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"sets headers","suites":["netlify createRequestHandler","basic requests"],"updatePoint":{"line":102,"column":20},"line":102,"code":"    it(\"sets headers\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        let headers = new Headers({ \"X-Time-Of-Year\": \"most wonderful\" });\n        headers.append(\n          \"Set-Cookie\",\n          \"first=one; Expires=0; Path=/; HttpOnly; Secure; SameSite=Lax\"\n        );\n        headers.append(\n          \"Set-Cookie\",\n          \"second=two; MaxAge=1209600; Path=/; HttpOnly; Secure; SameSite=Lax\"\n        );\n        headers.append(\n          \"Set-Cookie\",\n          \"third=three; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Path=/; HttpOnly; Secure; SameSite=Lax\"\n        );\n\n        return new Response(null, { headers });\n      });\n\n      // @ts-expect-error We don't have a real app to test, but it doesn't matter. We\n      // won't ever call through to the real createRequestHandler\n      await lambdaTester(createRequestHandler({ build: undefined }))\n        .event(createMockEvent({ rawUrl: \"http://localhost:3000\" }))\n        .expectResolve((res) => {\n          expect(res.multiValueHeaders[\"X-Time-Of-Year\"]).toEqual([\n            \"most wonderful\",\n          ]);\n          expect(res.multiValueHeaders[\"Set-Cookie\"]).toEqual([\n            \"first=one; Expires=0; Path=/; HttpOnly; Secure; SameSite=Lax\",\n            \"second=two; MaxAge=1209600; Path=/; HttpOnly; Secure; SameSite=Lax\",\n            \"third=three; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Path=/; HttpOnly; Secure; SameSite=Lax\",\n          ]);\n        });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"handles empty headers","suites":["netlify createRemixHeaders","creates fetch headers from netlify headers"],"updatePoint":{"line":141,"column":29},"line":141,"code":"    it(\"handles empty headers\", () => {\n      expect(createRemixHeaders({})).toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {},\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"handles simple headers","suites":["netlify createRemixHeaders","creates fetch headers from netlify headers"],"updatePoint":{"line":149,"column":30},"line":149,"code":"    it(\"handles simple headers\", () => {\n      expect(createRemixHeaders({ \"x-foo\": [\"bar\"] })).toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-foo\": Array [\n              \"bar\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"handles multiple headers","suites":["netlify createRemixHeaders","creates fetch headers from netlify headers"],"updatePoint":{"line":161,"column":32},"line":161,"code":"    it(\"handles multiple headers\", () => {\n      expect(createRemixHeaders({ \"x-foo\": [\"bar\"], \"x-bar\": [\"baz\"] }))\n        .toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-bar\": Array [\n              \"baz\",\n            ],\n            \"x-foo\": Array [\n              \"bar\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"handles headers with multiple values","suites":["netlify createRemixHeaders","creates fetch headers from netlify headers"],"updatePoint":{"line":177,"column":44},"line":177,"code":"    it(\"handles headers with multiple values\", () => {\n      expect(createRemixHeaders({ \"x-foo\": [\"bar\", \"baz\"] }))\n        .toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-foo\": Array [\n              \"bar\",\n              \"baz\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"handles headers with multiple values and multiple headers","suites":["netlify createRemixHeaders","creates fetch headers from netlify headers"],"updatePoint":{"line":191,"column":65},"line":191,"code":"    it(\"handles headers with multiple values and multiple headers\", () => {\n      expect(createRemixHeaders({ \"x-foo\": [\"bar\", \"baz\"], \"x-bar\": [\"baz\"] }))\n        .toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-bar\": Array [\n              \"baz\",\n            ],\n            \"x-foo\": Array [\n              \"bar\",\n              \"baz\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"handles cookies","suites":["netlify createRemixHeaders","creates fetch headers from netlify headers"],"updatePoint":{"line":208,"column":23},"line":208,"code":"    it(\"handles cookies\", () => {\n      expect(\n        createRemixHeaders({\n          Cookie: [\n            \"__session=some_value; Path=/; Secure; HttpOnly; MaxAge=7200; SameSite=Lax\",\n            \"__other=some_other_value; Path=/; Secure; HttpOnly; Expires=Wed, 21 Oct 2015 07:28:00 GMT; SameSite=Lax\",\n          ],\n          \"x-something-else\": [\"true\"],\n        })\n      ).toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"Cookie\": Array [\n              \"__session=some_value; Path=/; Secure; HttpOnly; MaxAge=7200; SameSite=Lax\",\n              \"__other=some_other_value; Path=/; Secure; HttpOnly; Expires=Wed, 21 Oct 2015 07:28:00 GMT; SameSite=Lax\",\n            ],\n            \"x-something-else\": Array [\n              \"true\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"creates a request with the correct headers","suites":["netlify createRemixRequest"],"updatePoint":{"line":235,"column":48},"line":235,"code":"  it(\"creates a request with the correct headers\", () => {\n    expect(\n      createRemixRequest(\n        createMockEvent({\n          multiValueHeaders: {\n            Cookie: [\"__session=value\", \"__other=value\"],\n          },\n        })\n      )\n    ).toMatchInlineSnapshot(`\n      NodeRequest {\n        \"abortController\": undefined,\n        \"agent\": undefined,\n        \"compress\": true,\n        \"counter\": 0,\n        \"follow\": 20,\n        \"size\": 0,\n        \"timeout\": 0,\n        Symbol(Body internals): Object {\n          \"body\": null,\n          \"disturbed\": false,\n          \"error\": null,\n        },\n        Symbol(Request internals): Object {\n          \"headers\": Headers {\n            Symbol(map): Object {\n              \"Cookie\": Array [\n                \"__session=value\",\n                \"__other=value\",\n              ],\n            },\n          },\n          \"method\": \"GET\",\n          \"parsedURL\": Url {\n            \"auth\": null,\n            \"hash\": null,\n            \"host\": \"localhost:3000\",\n            \"hostname\": \"localhost\",\n            \"href\": \"http://localhost:3000/\",\n            \"path\": \"/\",\n            \"pathname\": \"/\",\n            \"port\": \"3000\",\n            \"protocol\": \"http:\",\n            \"query\": null,\n            \"search\": null,\n            \"slashes\": true,\n          },\n          \"redirect\": \"follow\",\n          \"signal\": undefined,\n        },\n      }\n    `);\n  });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"handles regular responses","suites":["sendRemixResponse"],"updatePoint":{"line":291,"column":31},"line":291,"code":"  it(\"handles regular responses\", async () => {\n    let response = new NodeResponse(\"anything\");\n    let abortController = new AbortController();\n    let result = await sendRemixResponse(response, abortController);\n    expect(result.body).toBe(\"anything\");\n  });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"handles resource routes with regular data","suites":["sendRemixResponse"],"updatePoint":{"line":298,"column":47},"line":298,"code":"  it(\"handles resource routes with regular data\", async () => {\n    let json = JSON.stringify({ foo: \"bar\" });\n    let response = new NodeResponse(json, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"content-length\": json.length.toString(),\n      },\n    });\n\n    let abortController = new AbortController();\n\n    let result = await sendRemixResponse(response, abortController);\n\n    expect(result.body).toMatch(json);\n  });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"handles resource routes with binary data","suites":["sendRemixResponse"],"updatePoint":{"line":314,"column":46},"line":314,"code":"  it(\"handles resource routes with binary data\", async () => {\n    let image = await fsp.readFile(path.join(__dirname, \"554828.jpeg\"));\n\n    let response = new NodeResponse(image, {\n      headers: {\n        \"content-type\": \"image/jpeg\",\n        \"content-length\": image.length.toString(),\n      },\n    });\n\n    let abortController = new AbortController();\n\n    let result = await sendRemixResponse(response, abortController);\n\n    expect(result.body).toMatch(image.toString(\"base64\"));\n  });","file":"server-test.ts","skipped":false,"dir":"packages/remix-netlify/__tests__"},{"name":"clones","suites":["Request"],"updatePoint":{"line":75,"column":12},"line":75,"code":"  it(\"clones\", async () => {\n    let body = new PassThrough();\n    test.source.forEach((chunk) => body.write(chunk));\n\n    let req = new Request(\"http://test.com\", {\n      method: \"post\",\n      body,\n      headers: {\n        \"Content-Type\": \"multipart/form-data; boundary=\" + test.boundary,\n      },\n    });\n\n    let cloned = req.clone();\n    expect(Object.getPrototypeOf(req)).toBe(Object.getPrototypeOf(cloned));\n\n    let formData = await req.formData(uploadHandler);\n    let clonedFormData = await cloned.formData(uploadHandler);\n\n    expect(formData.get(\"file_name_0\")).toBe(\"super alpha file\");\n    expect(clonedFormData.get(\"file_name_0\")).toBe(\"super alpha file\");\n    expect(formData.get(\"file_name_1\")).toBe(\"super beta file\");\n    expect(clonedFormData.get(\"file_name_1\")).toBe(\"super beta file\");\n    let file = formData.get(\"upload_file_0\") as File;\n    expect(file.name).toBe(\"1k_a.dat\");\n    expect(file.size).toBe(1023);\n    file = clonedFormData.get(\"upload_file_0\") as File;\n    expect(file.name).toBe(\"1k_a.dat\");\n    expect(file.size).toBe(1023);\n\n    file = formData.get(\"upload_file_1\") as File;\n    expect(file.name).toBe(\"1k_b.dat\");\n    expect(file.size).toBe(1023);\n    file = clonedFormData.get(\"upload_file_1\") as File;\n    expect(file.name).toBe(\"1k_b.dat\");\n    expect(file.size).toBe(1023);\n  });","file":"fetch-test.ts","skipped":false,"dir":"packages/remix-node/__tests__"},{"name":"allows for mix of set and append","suites":["FormData"],"updatePoint":{"line":6,"column":38},"line":6,"code":"  it(\"allows for mix of set and append\", () => {\n    let formData = new NodeFormData();\n    formData.set(\"single\", \"heyo\");\n    formData.append(\"multi\", \"one\");\n    formData.append(\"multi\", \"two\");\n\n    let results = [];\n    for (let [k, v] of formData) results.push([k, v]);\n    expect(results).toEqual([\n      [\"single\", \"heyo\"],\n      [\"multi\", \"one\"],\n      [\"multi\", \"two\"],\n    ]);\n  });","file":"formData-test.ts","skipped":false,"dir":"packages/remix-node/__tests__"},{"name":"restores correctly empty string values with get method","suites":["FormData"],"updatePoint":{"line":21,"column":60},"line":21,"code":"  it(\"restores correctly empty string values with get method\", () => {\n    let formData = new NodeFormData();\n    formData.set(\"single\", \"\");\n    expect(formData.get(\"single\")).toBe(\"\");\n  });","file":"formData-test.ts","skipped":false,"dir":"packages/remix-node/__tests__"},{"name":"allows for mix of set and append with blobs and files","suites":["FormData"],"updatePoint":{"line":27,"column":59},"line":27,"code":"  it(\"allows for mix of set and append with blobs and files\", () => {\n    let formData = new NodeFormData();\n    formData.set(\"single\", new Blob([]));\n    formData.append(\"multi\", new Blob([]));\n    formData.append(\"multi\", new File([], \"test.txt\"));\n\n    expect(formData.getAll(\"single\")).toHaveLength(1);\n    expect(formData.getAll(\"multi\")).toHaveLength(2);\n  });","file":"formData-test.ts","skipped":false,"dir":"packages/remix-node/__tests__"},{"name":"plays nice with node-fetch","suites":["internalParseFormData"],"updatePoint":{"line":9,"column":32},"line":9,"code":"  it(\"plays nice with node-fetch\", async () => {\n    let formData = new NodeFormData();\n    formData.set(\"a\", \"value\");\n    formData.set(\"blob\", new Blob([\"blob\"]), \"blob.txt\");\n    formData.set(\"file\", new File([\"file\"], \"file.txt\"));\n\n    let req = new NodeRequest(\"https://test.com\", {\n      method: \"post\",\n      body: formData as any,\n    });\n\n    let uploadHandler = createMemoryUploadHandler({});\n    let parsedFormData = await internalParseFormData(\n      req.headers.get(\"Content-Type\"),\n      req.body as any,\n      undefined,\n      uploadHandler\n    );\n\n    expect(parsedFormData.get(\"a\")).toBe(\"value\");\n    let blob = parsedFormData.get(\"blob\") as Blob;\n    expect(await blob.text()).toBe(\"blob\");\n    let file = parsedFormData.get(\"file\") as File;\n    expect(file.name).toBe(\"file.txt\");\n    expect(await file.text()).toBe(\"file\");\n  });","file":"parseMultipartFormData-test.ts","skipped":false,"dir":"packages/remix-node/__tests__"},{"name":"persists session data across requests","suites":["File session storage"],"updatePoint":{"line":22,"column":43},"line":22,"code":"  it(\"persists session data across requests\", async () => {\n    let { getSession, commitSession } = createFileSessionStorage({\n      dir,\n      cookie: { secrets: [\"secret1\"] },\n    });\n    let session = await getSession();\n    session.set(\"user\", \"mjackson\");\n    let setCookie = await commitSession(session);\n    session = await getSession(getCookieFromSetCookie(setCookie));\n\n    expect(session.get(\"user\")).toEqual(\"mjackson\");\n  });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-node/__tests__"},{"name":"returns an empty session for cookies that are not signed properly","suites":["File session storage"],"updatePoint":{"line":35,"column":71},"line":35,"code":"  it(\"returns an empty session for cookies that are not signed properly\", async () => {\n    let { getSession, commitSession } = createFileSessionStorage({\n      dir,\n      cookie: { secrets: [\"secret1\"] },\n    });\n    let session = await getSession();\n    session.set(\"user\", \"mjackson\");\n\n    expect(session.get(\"user\")).toBe(\"mjackson\");\n\n    let setCookie = await commitSession(session);\n    session = await getSession(\n      // Tamper with the cookie...\n      getCookieFromSetCookie(setCookie).slice(0, -1)\n    );\n\n    expect(session.get(\"user\")).toBeUndefined();\n  });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-node/__tests__"},{"name":"unsigns old session cookies using the old secret and encodes new cookies using the new secret","suites":["File session storage","when a new secret shows up in the rotation"],"updatePoint":{"line":55,"column":101},"line":55,"code":"    it(\"unsigns old session cookies using the old secret and encodes new cookies using the new secret\", async () => {\n      let { getSession, commitSession } = createFileSessionStorage({\n        dir,\n        cookie: { secrets: [\"secret1\"] },\n      });\n      let session = await getSession();\n      session.set(\"user\", \"mjackson\");\n      let setCookie = await commitSession(session);\n      session = await getSession(getCookieFromSetCookie(setCookie));\n\n      expect(session.get(\"user\")).toEqual(\"mjackson\");\n\n      // A new secret enters the rotation...\n      let storage = createFileSessionStorage({\n        dir,\n        cookie: { secrets: [\"secret2\", \"secret1\"] },\n      });\n      getSession = storage.getSession;\n      commitSession = storage.commitSession;\n\n      // Old cookies should still work with the old secret.\n      session = await getSession(getCookieFromSetCookie(setCookie));\n      expect(session.get(\"user\")).toEqual(\"mjackson\");\n\n      // New cookies should be signed using the new secret.\n      let setCookie2 = await commitSession(session);\n      expect(setCookie2).not.toEqual(setCookie);\n    });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-node/__tests__"},{"name":"returns `true` for Cookie objects","suites":["isCookie"],"updatePoint":{"line":23,"column":39},"line":23,"code":"  it(\"returns `true` for Cookie objects\", () => {\n    expect(isCookie(createCookie(\"my-cookie\"))).toBe(true);\n  });","file":"cookies-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"returns `false` for non-Cookie objects","suites":["isCookie"],"updatePoint":{"line":27,"column":44},"line":27,"code":"  it(\"returns `false` for non-Cookie objects\", () => {\n    expect(isCookie({})).toBe(false);\n    expect(isCookie([])).toBe(false);\n    expect(isCookie(\"\")).toBe(false);\n    expect(isCookie(true)).toBe(false);\n  });","file":"cookies-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"parses/serializes empty string values","suites":["cookies"],"updatePoint":{"line":36,"column":43},"line":36,"code":"  it(\"parses/serializes empty string values\", async () => {\n    let cookie = createCookie(\"my-cookie\");\n    let setCookie = await cookie.serialize(\"\");\n    let value = await cookie.parse(getCookieFromSetCookie(setCookie));\n\n    expect(value).toMatchInlineSnapshot(`\"\"`);\n  });","file":"cookies-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"parses/serializes unsigned string values","suites":["cookies"],"updatePoint":{"line":44,"column":46},"line":44,"code":"  it(\"parses/serializes unsigned string values\", async () => {\n    let cookie = createCookie(\"my-cookie\");\n    let setCookie = await cookie.serialize(\"hello world\");\n    let value = await cookie.parse(getCookieFromSetCookie(setCookie));\n\n    expect(value).toEqual(\"hello world\");\n  });","file":"cookies-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"parses/serializes unsigned boolean values","suites":["cookies"],"updatePoint":{"line":52,"column":47},"line":52,"code":"  it(\"parses/serializes unsigned boolean values\", async () => {\n    let cookie = createCookie(\"my-cookie\");\n    let setCookie = await cookie.serialize(true);\n    let value = await cookie.parse(getCookieFromSetCookie(setCookie));\n\n    expect(value).toBe(true);\n  });","file":"cookies-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"parses/serializes signed string values","suites":["cookies"],"updatePoint":{"line":60,"column":44},"line":60,"code":"  it(\"parses/serializes signed string values\", async () => {\n    let cookie = createCookie(\"my-cookie\", {\n      secrets: [\"secret1\"],\n    });\n    let setCookie = await cookie.serialize(\"hello michael\");\n    let value = await cookie.parse(getCookieFromSetCookie(setCookie));\n\n    expect(value).toMatchInlineSnapshot(`\"hello michael\"`);\n  });","file":"cookies-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"parses/serializes string values containing utf8 characters","suites":["cookies"],"updatePoint":{"line":70,"column":64},"line":70,"code":"  it(\"parses/serializes string values containing utf8 characters\", async () => {\n    let cookie = createCookie(\"my-cookie\");\n    let setCookie = await cookie.serialize(\"日本語\");\n    let value = await cookie.parse(getCookieFromSetCookie(setCookie));\n\n    expect(value).toBe(\"日本語\");\n  });","file":"cookies-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"fails to parses signed string values with invalid signature","suites":["cookies"],"updatePoint":{"line":78,"column":65},"line":78,"code":"  it(\"fails to parses signed string values with invalid signature\", async () => {\n    let cookie = createCookie(\"my-cookie\", {\n      secrets: [\"secret1\"],\n    });\n    let setCookie = await cookie.serialize(\"hello michael\");\n    let cookie2 = createCookie(\"my-cookie\", {\n      secrets: [\"secret2\"],\n    });\n    let value = await cookie2.parse(getCookieFromSetCookie(setCookie));\n\n    expect(value).toBe(null);\n  });","file":"cookies-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"parses/serializes signed object values","suites":["cookies"],"updatePoint":{"line":91,"column":44},"line":91,"code":"  it(\"parses/serializes signed object values\", async () => {\n    let cookie = createCookie(\"my-cookie\", {\n      secrets: [\"secret1\"],\n    });\n    let setCookie = await cookie.serialize({ hello: \"mjackson\" });\n    let value = await cookie.parse(getCookieFromSetCookie(setCookie));\n\n    expect(value).toMatchInlineSnapshot(`\n      Object {\n        \"hello\": \"mjackson\",\n      }\n    `);\n  });","file":"cookies-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"fails to parse signed object values with invalid signature","suites":["cookies"],"updatePoint":{"line":105,"column":64},"line":105,"code":"  it(\"fails to parse signed object values with invalid signature\", async () => {\n    let cookie = createCookie(\"my-cookie\", {\n      secrets: [\"secret1\"],\n    });\n    let setCookie = await cookie.serialize({ hello: \"mjackson\" });\n    let cookie2 = createCookie(\"my-cookie\", {\n      secrets: [\"secret2\"],\n    });\n    let value = await cookie2.parse(getCookieFromSetCookie(setCookie));\n\n    expect(value).toBeNull();\n  });","file":"cookies-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"supports secret rotation","suites":["cookies"],"updatePoint":{"line":118,"column":30},"line":118,"code":"  it(\"supports secret rotation\", async () => {\n    let cookie = createCookie(\"my-cookie\", {\n      secrets: [\"secret1\"],\n    });\n    let setCookie = await cookie.serialize({ hello: \"mjackson\" });\n    let value = await cookie.parse(getCookieFromSetCookie(setCookie));\n\n    expect(value).toMatchInlineSnapshot(`\n      Object {\n        \"hello\": \"mjackson\",\n      }\n    `);\n\n    // A new secret enters the rotation...\n    cookie = createCookie(\"my-cookie\", {\n      secrets: [\"secret2\", \"secret1\"],\n    });\n\n    // cookie should still be able to parse old cookies.\n    let oldValue = await cookie.parse(getCookieFromSetCookie(setCookie));\n    expect(oldValue).toMatchObject(value);\n\n    // New Set-Cookie should be different, it uses a differet secret.\n    let setCookie2 = await cookie.serialize(value);\n    expect(setCookie).not.toEqual(setCookie2);\n  });","file":"cookies-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"makes the default path of cookies to be /","suites":["cookies"],"updatePoint":{"line":145,"column":47},"line":145,"code":"  it(\"makes the default path of cookies to be /\", async () => {\n    let cookie = createCookie(\"my-cookie\");\n\n    let setCookie = await cookie.serialize(\"hello world\");\n    expect(setCookie).toContain(\"Path=/\");\n\n    let cookie2 = createCookie(\"my-cookie2\");\n\n    let setCookie2 = await cookie2.serialize(\"hello world\", {\n      path: \"/about\",\n    });\n    expect(setCookie2).toContain(\"Path=/about\");\n  });","file":"cookies-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"removes _data from request.url","suites":["loaders"],"updatePoint":{"line":10,"column":36},"line":10,"code":"  it(\"removes _data from request.url\", async () => {\n    let loader = async ({ request }) => {\n      return new URL(request.url).search;\n    };\n\n    let routeId = \"routes/random\";\n    let build = {\n      routes: {\n        [routeId]: {\n          id: routeId,\n          path: \"/random\",\n          module: {\n            loader,\n          },\n        },\n      },\n      entry: { module: {} },\n    } as unknown as ServerBuild;\n\n    let handler = createRequestHandler(build, {});\n\n    let request = new Request(\n      \"http://example.com/random?_data=routes/random&foo=bar\",\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    let res = await handler(request);\n    expect(await res.json()).toMatchInlineSnapshot(`\"?foo=bar\"`);\n  });","file":"data-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"sets header for throw responses","suites":["loaders"],"updatePoint":{"line":44,"column":37},"line":44,"code":"  it(\"sets header for throw responses\", async () => {\n    let loader = async ({ request }) => {\n      throw new Response(\"null\", {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      });\n    };\n\n    let routeId = \"routes/random\";\n    let build = {\n      routes: {\n        [routeId]: {\n          id: routeId,\n          path: \"/random\",\n          module: {\n            loader,\n          },\n        },\n      },\n      entry: { module: {} },\n    } as unknown as ServerBuild;\n\n    let handler = createRequestHandler(build, {});\n\n    let request = new Request(\n      \"http://example.com/random?_data=routes/random&foo=bar\",\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    let res = await handler(request);\n    expect(await res.headers.get(\"X-Remix-Catch\")).toBeTruthy();\n  });","file":"data-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"removes index from request.url","suites":["loaders"],"updatePoint":{"line":82,"column":36},"line":82,"code":"  it(\"removes index from request.url\", async () => {\n    let loader = async ({ request }) => {\n      return new URL(request.url).search;\n    };\n\n    let routeId = \"routes/random\";\n    let build = {\n      routes: {\n        [routeId]: {\n          id: routeId,\n          path: \"/random\",\n          module: {\n            loader,\n          },\n        },\n      },\n      entry: { module: {} },\n    } as unknown as ServerBuild;\n\n    let handler = createRequestHandler(build, {});\n\n    let request = new Request(\n      \"http://example.com/random?_data=routes/random&index&foo=bar\",\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    let res = await handler(request);\n    expect(await res.json()).toMatchInlineSnapshot(`\"?foo=bar\"`);\n  });","file":"data-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"removes index from request.url and keeps other values","suites":["loaders"],"updatePoint":{"line":116,"column":59},"line":116,"code":"  it(\"removes index from request.url and keeps other values\", async () => {\n    let loader = async ({ request }) => {\n      return new URL(request.url).search;\n    };\n\n    let routeId = \"routes/random\";\n    let build = {\n      routes: {\n        [routeId]: {\n          id: routeId,\n          path: \"/random\",\n          module: {\n            loader,\n          },\n        },\n      },\n      entry: { module: {} },\n    } as unknown as ServerBuild;\n\n    let handler = createRequestHandler(build, {});\n\n    let request = new Request(\n      \"http://example.com/random?_data=routes/random&index&foo=bar&index=test\",\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    let res = await handler(request);\n    expect(await res.json()).toMatchInlineSnapshot(`\"?foo=bar&index=test\"`);\n  });","file":"data-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"throws the right error message when `loader` returns undefined","suites":["loaders"],"updatePoint":{"line":150,"column":68},"line":150,"code":"  it(\"throws the right error message when `loader` returns undefined\", async () => {\n    let loader = async () => {};\n\n    let routeId = \"routes/random\";\n\n    let request = new Request(\"http://example.com/random?_data=routes/random\");\n\n    let match = {\n      params: {},\n      pathname: \"random\",\n      route: {\n        id: routeId,\n        module: {\n          loader,\n        },\n      },\n    } as unknown as RouteMatch<ServerRoute>;\n\n    let possibleError: any;\n    try {\n      possibleError = await callRouteLoader({\n        request,\n        match,\n        loadContext: {},\n      });\n    } catch (error) {\n      possibleError = error;\n    }\n\n    expect(possibleError).toBeInstanceOf(Error);\n    expect(possibleError.message).toMatchInlineSnapshot(\n      '\"You defined a loader for route \\\\\"routes/random\\\\\" but didn\\'t return anything from your `loader` function. Please return a value or `null`.\"'\n    );\n  });","file":"data-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"throws the right error message when `action` returns undefined","suites":["actions"],"updatePoint":{"line":187,"column":68},"line":187,"code":"  it(\"throws the right error message when `action` returns undefined\", async () => {\n    let action = async () => {};\n\n    let routeId = \"routes/random\";\n\n    let request = new Request(\"http://example.com/random?_data=routes/random\");\n\n    let match = {\n      params: {},\n      pathname: \"random\",\n      route: {\n        id: routeId,\n        module: {\n          action,\n        },\n      },\n    } as unknown as RouteMatch<ServerRoute>;\n\n    let possibleError: any;\n    try {\n      possibleError = await callRouteAction({\n        request,\n        match,\n        loadContext: {},\n      });\n    } catch (error) {\n      possibleError = error;\n    }\n\n    expect(possibleError).toBeInstanceOf(Error);\n    expect(possibleError.message).toMatchInlineSnapshot(\n      '\"You defined an action for route \\\\\"routes/random\\\\\" but didn\\'t return anything from your `action` function. Please return a value or `null`.\"'\n    );\n  });","file":"data-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"sets the Content-Type header","suites":["json"],"updatePoint":{"line":4,"column":34},"line":4,"code":"  it(\"sets the Content-Type header\", () => {\n    let response = json({});\n    expect(response.headers.get(\"Content-Type\")).toEqual(\n      \"application/json; charset=utf-8\"\n    );\n  });","file":"responses-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"preserves existing headers, including Content-Type","suites":["json"],"updatePoint":{"line":11,"column":56},"line":11,"code":"  it(\"preserves existing headers, including Content-Type\", () => {\n    let response = json(\n      {},\n      {\n        headers: {\n          \"Content-Type\": \"application/json; charset=iso-8859-1\",\n          \"X-Remix\": \"is awesome\",\n        },\n      }\n    );\n\n    expect(response.headers.get(\"Content-Type\")).toEqual(\n      \"application/json; charset=iso-8859-1\"\n    );\n    expect(response.headers.get(\"X-Remix\")).toEqual(\"is awesome\");\n  });","file":"responses-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"encodes the response body","suites":["json"],"updatePoint":{"line":28,"column":31},"line":28,"code":"  it(\"encodes the response body\", async () => {\n    let response = json({ hello: \"remix\" });\n    expect(await response.json()).toEqual({ hello: \"remix\" });\n  });","file":"responses-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"accepts status as a second parameter","suites":["json"],"updatePoint":{"line":33,"column":42},"line":33,"code":"  it(\"accepts status as a second parameter\", () => {\n    let response = json({}, 201);\n    expect(response.status).toEqual(201);\n  });","file":"responses-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"sets the status to 302 by default","suites":["redirect"],"updatePoint":{"line":40,"column":39},"line":40,"code":"  it(\"sets the status to 302 by default\", () => {\n    let response = redirect(\"/login\");\n    expect(response.status).toEqual(302);\n  });","file":"responses-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"sets the status to 302 when only headers are given","suites":["redirect"],"updatePoint":{"line":45,"column":56},"line":45,"code":"  it(\"sets the status to 302 when only headers are given\", () => {\n    let response = redirect(\"/login\", {\n      headers: {\n        \"X-Remix\": \"is awesome\",\n      },\n    });\n    expect(response.status).toEqual(302);\n  });","file":"responses-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"sets the Location header","suites":["redirect"],"updatePoint":{"line":54,"column":30},"line":54,"code":"  it(\"sets the Location header\", () => {\n    let response = redirect(\"/login\");\n    expect(response.headers.get(\"Location\")).toEqual(\"/login\");\n  });","file":"responses-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"preserves existing headers, but not Location","suites":["redirect"],"updatePoint":{"line":59,"column":50},"line":59,"code":"  it(\"preserves existing headers, but not Location\", () => {\n    let response = redirect(\"/login\", {\n      headers: {\n        Location: \"/\",\n        \"X-Remix\": \"is awesome\",\n      },\n    });\n\n    expect(response.headers.get(\"Location\")).toEqual(\"/login\");\n    expect(response.headers.get(\"X-Remix\")).toEqual(\"is awesome\");\n  });","file":"responses-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"accepts status as a second parameter","suites":["redirect"],"updatePoint":{"line":71,"column":42},"line":71,"code":"  it(\"accepts status as a second parameter\", () => {\n    let response = redirect(\"/profile\", 301);\n    expect(response.status).toEqual(301);\n  });","file":"responses-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"allows through  request to ","suites":["server","createRequestHandler"],"updatePoint":{"line":70,"column":51},"line":70,"code":"      it(`allows through ${method} request to ${to}`, async () => {\n        let handler = createRequestHandler(build);\n        let response = await handler(\n          new Request(`http://localhost:3000${to}`, {\n            method,\n          })\n        );\n\n        expect(await response.text()).toContain(method);\n      });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"strips body for HEAD requests","suites":["server","createRequestHandler"],"updatePoint":{"line":82,"column":37},"line":82,"code":"    it(\"strips body for HEAD requests\", async () => {\n      let handler = createRequestHandler(build);\n      let response = await handler(\n        new Request(\"http://localhost:3000/\", {\n          method: \"HEAD\",\n        })\n      );\n\n      expect(await response.text()).toBe(\"\");\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"calls resource route loader","suites":["shared server runtime","resource routes"],"updatePoint":{"line":105,"column":37},"line":105,"code":"    test(\"calls resource route loader\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let resourceLoader = jest.fn(() => {\n        return \"resource\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n        \"routes/resource\": {\n          loader: resourceLoader,\n          path: \"resource\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/resource`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(200);\n      expect(await result.json()).toBe(\"resource\");\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(resourceLoader.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"calls sub resource route loader","suites":["shared server runtime","resource routes"],"updatePoint":{"line":133,"column":41},"line":133,"code":"    test(\"calls sub resource route loader\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let resourceLoader = jest.fn(() => {\n        return \"resource\";\n      });\n      let subResourceLoader = jest.fn(() => {\n        return \"sub\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n        \"routes/resource\": {\n          loader: resourceLoader,\n          path: \"resource\",\n        },\n        \"routes/resource.sub\": {\n          loader: subResourceLoader,\n          path: \"resource/sub\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/resource/sub`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(200);\n      expect(await result.json()).toBe(\"sub\");\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(resourceLoader.mock.calls.length).toBe(0);\n      expect(subResourceLoader.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"resource route loader allows thrown responses","suites":["shared server runtime","resource routes"],"updatePoint":{"line":169,"column":55},"line":169,"code":"    test(\"resource route loader allows thrown responses\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let resourceLoader = jest.fn(() => {\n        throw new Response(\"resource\");\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n        \"routes/resource\": {\n          loader: resourceLoader,\n          path: \"resource\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/resource`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(200);\n      expect(await result.text()).toBe(\"resource\");\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(resourceLoader.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"resource route loader responds with generic error when thrown","suites":["shared server runtime","resource routes"],"updatePoint":{"line":197,"column":71},"line":197,"code":"    test(\"resource route loader responds with generic error when thrown\", async () => {\n      let error = new Error(\"should be logged when resource loader throws\");\n      let loader = jest.fn(() => {\n        throw error;\n      });\n      let build = mockServerBuild({\n        \"routes/resource\": {\n          loader,\n          path: \"resource\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/resource`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(await result.text()).toBe(\"Unexpected Server Error\");\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"resource route loader responds with detailed error when thrown in development","suites":["shared server runtime","resource routes"],"updatePoint":{"line":216,"column":87},"line":216,"code":"    test(\"resource route loader responds with detailed error when thrown in development\", async () => {\n      let error = new Error(\"should be logged when resource loader throws\");\n      let loader = jest.fn(() => {\n        throw error;\n      });\n      let build = mockServerBuild({\n        \"routes/resource\": {\n          loader,\n          path: \"resource\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Development);\n\n      let request = new Request(`${baseUrl}/resource`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect((await result.text()).includes(error.message)).toBe(true);\n      expect(spy.console.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"calls resource route action","suites":["shared server runtime","resource routes"],"updatePoint":{"line":236,"column":37},"line":236,"code":"    test(\"calls resource route action\", async () => {\n      let rootAction = jest.fn(() => {\n        return \"root\";\n      });\n      let resourceAction = jest.fn(() => {\n        return \"resource\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          action: rootAction,\n        },\n        \"routes/resource\": {\n          action: resourceAction,\n          path: \"resource\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/resource`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(200);\n      expect(await result.json()).toBe(\"resource\");\n      expect(rootAction.mock.calls.length).toBe(0);\n      expect(resourceAction.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"calls sub resource route action","suites":["shared server runtime","resource routes"],"updatePoint":{"line":264,"column":41},"line":264,"code":"    test(\"calls sub resource route action\", async () => {\n      let rootAction = jest.fn(() => {\n        return \"root\";\n      });\n      let resourceAction = jest.fn(() => {\n        return \"resource\";\n      });\n      let subResourceAction = jest.fn(() => {\n        return \"sub\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          action: rootAction,\n        },\n        \"routes/resource\": {\n          action: resourceAction,\n          path: \"resource\",\n        },\n        \"routes/resource.sub\": {\n          action: subResourceAction,\n          path: \"resource/sub\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/resource/sub`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(200);\n      expect(await result.json()).toBe(\"sub\");\n      expect(rootAction.mock.calls.length).toBe(0);\n      expect(resourceAction.mock.calls.length).toBe(0);\n      expect(subResourceAction.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"resource route action allows thrown responses","suites":["shared server runtime","resource routes"],"updatePoint":{"line":300,"column":55},"line":300,"code":"    test(\"resource route action allows thrown responses\", async () => {\n      let rootAction = jest.fn(() => {\n        return \"root\";\n      });\n      let resourceAction = jest.fn(() => {\n        throw new Response(\"resource\");\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          action: rootAction,\n        },\n        \"routes/resource\": {\n          action: resourceAction,\n          path: \"resource\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/resource`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(200);\n      expect(await result.text()).toBe(\"resource\");\n      expect(rootAction.mock.calls.length).toBe(0);\n      expect(resourceAction.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"resource route action responds with generic error when thrown","suites":["shared server runtime","resource routes"],"updatePoint":{"line":328,"column":71},"line":328,"code":"    test(\"resource route action responds with generic error when thrown\", async () => {\n      let error = new Error(\"should be logged when resource loader throws\");\n      let action = jest.fn(() => {\n        throw error;\n      });\n      let build = mockServerBuild({\n        \"routes/resource\": {\n          action,\n          path: \"resource\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/resource`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(await result.text()).toBe(\"Unexpected Server Error\");\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"resource route action responds with detailed error when thrown in development","suites":["shared server runtime","resource routes"],"updatePoint":{"line":347,"column":87},"line":347,"code":"    test(\"resource route action responds with detailed error when thrown in development\", async () => {\n      let message = \"should be logged when resource loader throws\";\n      let action = jest.fn(() => {\n        throw new Error(message);\n      });\n      let build = mockServerBuild({\n        \"routes/resource\": {\n          action,\n          path: \"resource\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Development);\n\n      let request = new Request(`${baseUrl}/resource`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect((await result.text()).includes(message)).toBe(true);\n      expect(spy.console.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"data request that does not match loader surfaces error for boundary","suites":["shared server runtime","data requests"],"updatePoint":{"line":369,"column":77},"line":369,"code":"    test(\"data request that does not match loader surfaces error for boundary\", async () => {\n      let build = mockServerBuild({\n        root: {\n          default: {},\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          index: true,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/?_data=routes/index`, {\n        method: \"get\",\n      });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect(result.headers.get(\"X-Remix-Error\")).toBe(\"yes\");\n      expect((await result.json()).message).toBeTruthy();\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"data request calls loader","suites":["shared server runtime","data requests"],"updatePoint":{"line":391,"column":35},"line":391,"code":"    test(\"data request calls loader\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexLoader = jest.fn(() => {\n        return \"index\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          loader: indexLoader,\n          index: true,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/?_data=routes/index`, {\n        method: \"get\",\n      });\n\n      let result = await handler(request);\n      expect(result.status).toBe(200);\n      expect(await result.json()).toBe(\"index\");\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(indexLoader.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"data request calls loader and responds with generic message and error header","suites":["shared server runtime","data requests"],"updatePoint":{"line":422,"column":86},"line":422,"code":"    test(\"data request calls loader and responds with generic message and error header\", async () => {\n      let rootLoader = jest.fn(() => {\n        throw new Error(\"test\");\n      });\n      let testAction = jest.fn(() => {\n        return \"root\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n        \"routes/test\": {\n          parentId: \"root\",\n          action: testAction,\n          path: \"test\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/test?_data=root`, {\n        method: \"get\",\n      });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect((await result.json()).message).toBe(\"Unexpected Server Error\");\n      expect(result.headers.get(\"X-Remix-Error\")).toBe(\"yes\");\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(testAction.mock.calls.length).toBe(0);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"data request calls loader and responds with detailed info and error header in development mode","suites":["shared server runtime","data requests"],"updatePoint":{"line":454,"column":104},"line":454,"code":"    test(\"data request calls loader and responds with detailed info and error header in development mode\", async () => {\n      let message =\n        \"data request loader error logged to console once in dev mode\";\n      let rootLoader = jest.fn(() => {\n        throw new Error(message);\n      });\n      let testAction = jest.fn(() => {\n        return \"root\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n        \"routes/test\": {\n          parentId: \"root\",\n          action: testAction,\n          path: \"test\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Development);\n\n      let request = new Request(`${baseUrl}/test?_data=root`, {\n        method: \"get\",\n      });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect((await result.json()).message).toBe(message);\n      expect(result.headers.get(\"X-Remix-Error\")).toBe(\"yes\");\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(testAction.mock.calls.length).toBe(0);\n      expect(spy.console.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"data request calls loader and responds with catch header","suites":["shared server runtime","data requests"],"updatePoint":{"line":489,"column":66},"line":489,"code":"    test(\"data request calls loader and responds with catch header\", async () => {\n      let rootLoader = jest.fn(() => {\n        throw new Response(\"test\", { status: 400 });\n      });\n      let testAction = jest.fn(() => {\n        return \"root\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n        \"routes/test\": {\n          parentId: \"root\",\n          action: testAction,\n          path: \"test\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/test?_data=root`, {\n        method: \"get\",\n      });\n\n      let result = await handler(request);\n      expect(result.status).toBe(400);\n      expect(await result.text()).toBe(\"test\");\n      expect(result.headers.get(\"X-Remix-Catch\")).toBe(\"yes\");\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(testAction.mock.calls.length).toBe(0);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"data request calls action","suites":["shared server runtime","data requests"],"updatePoint":{"line":521,"column":35},"line":521,"code":"    test(\"data request calls action\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let testAction = jest.fn(() => {\n        return \"test\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n        \"routes/test\": {\n          parentId: \"root\",\n          action: testAction,\n          path: \"test\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/test?_data=routes/test`, {\n        method: \"post\",\n      });\n\n      let result = await handler(request);\n      expect(result.status).toBe(200);\n      expect(await result.json()).toBe(\"test\");\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(testAction.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"data request calls action and responds with generic message and error header","suites":["shared server runtime","data requests"],"updatePoint":{"line":552,"column":86},"line":552,"code":"    test(\"data request calls action and responds with generic message and error header\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let testAction = jest.fn(() => {\n        throw new Error(\"test\");\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n        \"routes/test\": {\n          parentId: \"root\",\n          action: testAction,\n          path: \"test\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/test?_data=routes/test`, {\n        method: \"post\",\n      });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect((await result.json()).message).toBe(\"Unexpected Server Error\");\n      expect(result.headers.get(\"X-Remix-Error\")).toBe(\"yes\");\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(testAction.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"data request calls action and responds with detailed info and error header in development mode","suites":["shared server runtime","data requests"],"updatePoint":{"line":584,"column":104},"line":584,"code":"    test(\"data request calls action and responds with detailed info and error header in development mode\", async () => {\n      let message =\n        \"data request action error logged to console once in dev mode\";\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let testAction = jest.fn(() => {\n        throw new Error(message);\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n        \"routes/test\": {\n          parentId: \"root\",\n          action: testAction,\n          path: \"test\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Development);\n\n      let request = new Request(`${baseUrl}/test?_data=routes/test`, {\n        method: \"post\",\n      });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect((await result.json()).message).toBe(message);\n      expect(result.headers.get(\"X-Remix-Error\")).toBe(\"yes\");\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(testAction.mock.calls.length).toBe(1);\n      expect(spy.console.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"data request calls action and responds with catch header","suites":["shared server runtime","data requests"],"updatePoint":{"line":619,"column":66},"line":619,"code":"    test(\"data request calls action and responds with catch header\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let testAction = jest.fn(() => {\n        throw new Response(\"test\", { status: 400 });\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n        \"routes/test\": {\n          parentId: \"root\",\n          action: testAction,\n          path: \"test\",\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/test?_data=routes/test`, {\n        method: \"post\",\n      });\n\n      let result = await handler(request);\n      expect(result.status).toBe(400);\n      expect(await result.text()).toBe(\"test\");\n      expect(result.headers.get(\"X-Remix-Catch\")).toBe(\"yes\");\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(testAction.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"data request calls layout action","suites":["shared server runtime","data requests"],"updatePoint":{"line":651,"column":42},"line":651,"code":"    test(\"data request calls layout action\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let rootAction = jest.fn(() => {\n        return \"root\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          action: rootAction,\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          index: true,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/?_data=root`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(200);\n      expect(await result.json()).toBe(\"root\");\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(rootAction.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"data request calls index action","suites":["shared server runtime","data requests"],"updatePoint":{"line":680,"column":41},"line":680,"code":"    test(\"data request calls index action\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexAction = jest.fn(() => {\n        return \"index\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          action: indexAction,\n          index: true,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/?index&_data=routes/index`, {\n        method: \"post\",\n      });\n\n      let result = await handler(request);\n      expect(result.status).toBe(200);\n      expect(await result.json()).toBe(\"index\");\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(indexAction.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"not found document request for no matches and no CatchBoundary","suites":["shared server runtime","document requests"],"updatePoint":{"line":713,"column":72},"line":713,"code":"    test(\"not found document request for no matches and no CatchBoundary\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(404);\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.catch).toBeTruthy();\n      expect(entryContext.appState.catch!.status).toBe(404);\n      expect(entryContext.appState.catchBoundaryRouteId).toBe(null);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"sets root as catch boundary for not found document request","suites":["shared server runtime","document requests"],"updatePoint":{"line":740,"column":68},"line":740,"code":"    test(\"sets root as catch boundary for not found document request\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          CatchBoundary: {},\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(404);\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.catch).toBeTruthy();\n      expect(entryContext.appState.catch!.status).toBe(404);\n      expect(entryContext.appState.catchBoundaryRouteId).toBe(\"root\");\n      expect(entryContext.routeData).toEqual({});\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"thrown loader responses bubble up","suites":["shared server runtime","document requests"],"updatePoint":{"line":769,"column":43},"line":769,"code":"    test(\"thrown loader responses bubble up\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexLoader = jest.fn(() => {\n        throw new Response(null, { status: 400 });\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          CatchBoundary: {},\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          index: true,\n          default: {},\n          loader: indexLoader,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(400);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(indexLoader.mock.calls.length).toBe(1);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.catch).toBeTruthy();\n      expect(entryContext.appState.catch!.status).toBe(400);\n      expect(entryContext.appState.catchBoundaryRouteId).toBe(\"root\");\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"thrown loader responses catch deep","suites":["shared server runtime","document requests"],"updatePoint":{"line":810,"column":44},"line":810,"code":"    test(\"thrown loader responses catch deep\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexLoader = jest.fn(() => {\n        throw new Response(null, { status: 400 });\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          CatchBoundary: {},\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          index: true,\n          default: {},\n          loader: indexLoader,\n          CatchBoundary: {},\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(400);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(indexLoader.mock.calls.length).toBe(1);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.catch).toBeTruthy();\n      expect(entryContext.appState.catch!.status).toBe(400);\n      expect(entryContext.appState.catchBoundaryRouteId).toBe(\"routes/index\");\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"thrown action responses bubble up","suites":["shared server runtime","document requests"],"updatePoint":{"line":852,"column":43},"line":852,"code":"    test(\"thrown action responses bubble up\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let testAction = jest.fn(() => {\n        throw new Response(null, { status: 400 });\n      });\n      let testLoader = jest.fn(() => {\n        return \"test\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          CatchBoundary: {},\n        },\n        \"routes/test\": {\n          parentId: \"root\",\n          path: \"test\",\n          default: {},\n          loader: testLoader,\n          action: testAction,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/test`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(400);\n      expect(testAction.mock.calls.length).toBe(1);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(testLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.catch).toBeTruthy();\n      expect(entryContext.appState.catch!.status).toBe(400);\n      expect(entryContext.appState.catchBoundaryRouteId).toBe(\"root\");\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"thrown action responses bubble up for index routes","suites":["shared server runtime","document requests"],"updatePoint":{"line":898,"column":60},"line":898,"code":"    test(\"thrown action responses bubble up for index routes\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexAction = jest.fn(() => {\n        throw new Response(null, { status: 400 });\n      });\n      let indexLoader = jest.fn(() => {\n        return \"index\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          CatchBoundary: {},\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          index: true,\n          default: {},\n          loader: indexLoader,\n          action: indexAction,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/?index`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(400);\n      expect(indexAction.mock.calls.length).toBe(1);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(indexLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.catch).toBeTruthy();\n      expect(entryContext.appState.catch!.status).toBe(400);\n      expect(entryContext.appState.catchBoundaryRouteId).toBe(\"root\");\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"thrown action responses catch deep","suites":["shared server runtime","document requests"],"updatePoint":{"line":944,"column":44},"line":944,"code":"    test(\"thrown action responses catch deep\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let testAction = jest.fn(() => {\n        throw new Response(null, { status: 400 });\n      });\n      let testLoader = jest.fn(() => {\n        return \"test\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          CatchBoundary: {},\n        },\n        \"routes/test\": {\n          parentId: \"root\",\n          path: \"test\",\n          default: {},\n          loader: testLoader,\n          action: testAction,\n          CatchBoundary: {},\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/test`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(400);\n      expect(testAction.mock.calls.length).toBe(1);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(testLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.catch).toBeTruthy();\n      expect(entryContext.appState.catch!.status).toBe(400);\n      expect(entryContext.appState.catchBoundaryRouteId).toBe(\"routes/test\");\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"thrown action responses catch deep for index routes","suites":["shared server runtime","document requests"],"updatePoint":{"line":991,"column":61},"line":991,"code":"    test(\"thrown action responses catch deep for index routes\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexAction = jest.fn(() => {\n        throw new Response(null, { status: 400 });\n      });\n      let indexLoader = jest.fn(() => {\n        return \"index\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          CatchBoundary: {},\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          index: true,\n          default: {},\n          loader: indexLoader,\n          action: indexAction,\n          CatchBoundary: {},\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/?index`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(400);\n      expect(indexAction.mock.calls.length).toBe(1);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(indexLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.catch).toBeTruthy();\n      expect(entryContext.appState.catch!.status).toBe(400);\n      expect(entryContext.appState.catchBoundaryRouteId).toBe(\"routes/index\");\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"thrown loader response after thrown action response bubble up action throw to deepest loader boundary","suites":["shared server runtime","document requests"],"updatePoint":{"line":1038,"column":111},"line":1038,"code":"    test(\"thrown loader response after thrown action response bubble up action throw to deepest loader boundary\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let layoutLoader = jest.fn(() => {\n        throw new Response(\"layout\", { status: 401 });\n      });\n      let testAction = jest.fn(() => {\n        throw new Response(\"action\", { status: 400 });\n      });\n      let testLoader = jest.fn(() => {\n        return \"test\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          CatchBoundary: {},\n        },\n        \"routes/__layout\": {\n          parentId: \"root\",\n          default: {},\n          loader: layoutLoader,\n          CatchBoundary: {},\n        },\n        \"routes/__layout/test\": {\n          parentId: \"routes/__layout\",\n          path: \"test\",\n          default: {},\n          loader: testLoader,\n          action: testAction,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/test`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(400);\n      expect(testAction.mock.calls.length).toBe(1);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(testLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.catch).toBeTruthy();\n      expect(entryContext.appState.catch.data).toBe(\"action\");\n      expect(entryContext.appState.catchBoundaryRouteId).toBe(\n        \"routes/__layout\"\n      );\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"thrown loader response after thrown index action response bubble up action throw to deepest loader boundary","suites":["shared server runtime","document requests"],"updatePoint":{"line":1095,"column":117},"line":1095,"code":"    test(\"thrown loader response after thrown index action response bubble up action throw to deepest loader boundary\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let layoutLoader = jest.fn(() => {\n        throw new Response(\"layout\", { status: 401 });\n      });\n      let indexAction = jest.fn(() => {\n        throw new Response(\"action\", { status: 400 });\n      });\n      let indexLoader = jest.fn(() => {\n        return \"index\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          CatchBoundary: {},\n        },\n        \"routes/__layout\": {\n          parentId: \"root\",\n          default: {},\n          loader: layoutLoader,\n          CatchBoundary: {},\n        },\n        \"routes/__layout/index\": {\n          parentId: \"routes/__layout\",\n          index: true,\n          default: {},\n          loader: indexLoader,\n          action: indexAction,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/?index`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(400);\n      expect(indexAction.mock.calls.length).toBe(1);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(indexLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.catch).toBeTruthy();\n      expect(entryContext.appState.catch.data).toBe(\"action\");\n      expect(entryContext.appState.catchBoundaryRouteId).toBe(\n        \"routes/__layout\"\n      );\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"loader errors bubble up","suites":["shared server runtime","document requests"],"updatePoint":{"line":1152,"column":33},"line":1152,"code":"    test(\"loader errors bubble up\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexLoader = jest.fn(() => {\n        throw new Error(\"index\");\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          index: true,\n          default: {},\n          loader: indexLoader,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(indexLoader.mock.calls.length).toBe(1);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.error).toBeTruthy();\n      expect(entryContext.appState.error.message).toBe(\"index\");\n      expect(entryContext.appState.loaderBoundaryRouteId).toBe(\"root\");\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"loader errors catch deep","suites":["shared server runtime","document requests"],"updatePoint":{"line":1193,"column":34},"line":1193,"code":"    test(\"loader errors catch deep\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexLoader = jest.fn(() => {\n        throw new Error(\"index\");\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          index: true,\n          default: {},\n          loader: indexLoader,\n          ErrorBoundary: {},\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(indexLoader.mock.calls.length).toBe(1);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.error).toBeTruthy();\n      expect(entryContext.appState.error.message).toBe(\"index\");\n      expect(entryContext.appState.loaderBoundaryRouteId).toBe(\"routes/index\");\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"action errors bubble up","suites":["shared server runtime","document requests"],"updatePoint":{"line":1235,"column":33},"line":1235,"code":"    test(\"action errors bubble up\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let testAction = jest.fn(() => {\n        throw new Error(\"test\");\n      });\n      let testLoader = jest.fn(() => {\n        return \"test\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/test\": {\n          parentId: \"root\",\n          path: \"test\",\n          default: {},\n          loader: testLoader,\n          action: testAction,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/test`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect(testAction.mock.calls.length).toBe(1);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(testLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.error).toBeTruthy();\n      expect(entryContext.appState.error.message).toBe(\"test\");\n      expect(entryContext.appState.loaderBoundaryRouteId).toBe(\"root\");\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"action errors bubble up for index routes","suites":["shared server runtime","document requests"],"updatePoint":{"line":1281,"column":50},"line":1281,"code":"    test(\"action errors bubble up for index routes\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexAction = jest.fn(() => {\n        throw new Error(\"index\");\n      });\n      let indexLoader = jest.fn(() => {\n        return \"index\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          index: true,\n          default: {},\n          loader: indexLoader,\n          action: indexAction,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/?index`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect(indexAction.mock.calls.length).toBe(1);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(indexLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.error).toBeTruthy();\n      expect(entryContext.appState.error.message).toBe(\"index\");\n      expect(entryContext.appState.loaderBoundaryRouteId).toBe(\"root\");\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"action errors catch deep","suites":["shared server runtime","document requests"],"updatePoint":{"line":1327,"column":34},"line":1327,"code":"    test(\"action errors catch deep\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let testAction = jest.fn(() => {\n        throw new Error(\"test\");\n      });\n      let testLoader = jest.fn(() => {\n        return \"test\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/test\": {\n          parentId: \"root\",\n          path: \"test\",\n          default: {},\n          loader: testLoader,\n          action: testAction,\n          ErrorBoundary: {},\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/test`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect(testAction.mock.calls.length).toBe(1);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(testLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.error).toBeTruthy();\n      expect(entryContext.appState.error.message).toBe(\"test\");\n      expect(entryContext.appState.loaderBoundaryRouteId).toBe(\"routes/test\");\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"action errors catch deep for index routes","suites":["shared server runtime","document requests"],"updatePoint":{"line":1374,"column":51},"line":1374,"code":"    test(\"action errors catch deep for index routes\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexAction = jest.fn(() => {\n        throw new Error(\"index\");\n      });\n      let indexLoader = jest.fn(() => {\n        return \"index\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          index: true,\n          default: {},\n          loader: indexLoader,\n          action: indexAction,\n          ErrorBoundary: {},\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/?index`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect(indexAction.mock.calls.length).toBe(1);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(indexLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.error).toBeTruthy();\n      expect(entryContext.appState.error.message).toBe(\"index\");\n      expect(entryContext.appState.loaderBoundaryRouteId).toBe(\"routes/index\");\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"loader errors after action error bubble up action error to deepest loader boundary","suites":["shared server runtime","document requests"],"updatePoint":{"line":1421,"column":92},"line":1421,"code":"    test(\"loader errors after action error bubble up action error to deepest loader boundary\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let layoutLoader = jest.fn(() => {\n        throw new Error(\"layout\");\n      });\n      let testAction = jest.fn(() => {\n        throw new Error(\"action\");\n      });\n      let testLoader = jest.fn(() => {\n        return \"test\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/__layout\": {\n          parentId: \"root\",\n          default: {},\n          loader: layoutLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/__layout/test\": {\n          parentId: \"routes/__layout\",\n          path: \"test\",\n          default: {},\n          loader: testLoader,\n          action: testAction,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/test`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect(testAction.mock.calls.length).toBe(1);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(testLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.error).toBeTruthy();\n      expect(entryContext.appState.error.message).toBe(\"action\");\n      expect(entryContext.appState.loaderBoundaryRouteId).toBe(\n        \"routes/__layout\"\n      );\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"loader errors after index action error bubble up action error to deepest loader boundary","suites":["shared server runtime","document requests"],"updatePoint":{"line":1478,"column":98},"line":1478,"code":"    test(\"loader errors after index action error bubble up action error to deepest loader boundary\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let layoutLoader = jest.fn(() => {\n        throw new Error(\"layout\");\n      });\n      let indexAction = jest.fn(() => {\n        throw new Error(\"action\");\n      });\n      let indexLoader = jest.fn(() => {\n        return \"index\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/__layout\": {\n          parentId: \"root\",\n          default: {},\n          loader: layoutLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/__layout/index\": {\n          parentId: \"routes/__layout\",\n          index: true,\n          default: {},\n          loader: indexLoader,\n          action: indexAction,\n        },\n      });\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/?index`, { method: \"post\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect(indexAction.mock.calls.length).toBe(1);\n      expect(rootLoader.mock.calls.length).toBe(1);\n      expect(indexLoader.mock.calls.length).toBe(0);\n      expect(build.entry.module.default.mock.calls.length).toBe(1);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(1);\n      let entryContext = calls[0][3];\n      expect(entryContext.appState.error).toBeTruthy();\n      expect(entryContext.appState.error.message).toBe(\"action\");\n      expect(entryContext.appState.loaderBoundaryRouteId).toBe(\n        \"routes/__layout\"\n      );\n      expect(entryContext.routeData).toEqual({\n        root: \"root\",\n      });\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"calls handleDocumentRequest again with new error when handleDocumentRequest throws","suites":["shared server runtime","document requests"],"updatePoint":{"line":1535,"column":92},"line":1535,"code":"    test(\"calls handleDocumentRequest again with new error when handleDocumentRequest throws\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexLoader = jest.fn(() => {\n        return \"index\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          default: {},\n          loader: indexLoader,\n        },\n      });\n      let calledBefore = false;\n      let ogHandleDocumentRequest = build.entry.module.default;\n      build.entry.module.default = jest.fn(function () {\n        if (!calledBefore) {\n          throw new Error(\"thrown\");\n        }\n        calledBefore = true;\n        return ogHandleDocumentRequest.call(null, arguments);\n      }) as any;\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(indexLoader.mock.calls.length).toBe(0);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(2);\n      let entryContext = calls[1][3];\n      expect(entryContext.appState.error).toBeTruthy();\n      expect(entryContext.appState.error.message).toBe(\"thrown\");\n      expect(entryContext.appState.trackBoundaries).toBe(false);\n      expect(entryContext.routeData).toEqual({});\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"returns generic message if handleDocumentRequest throws a second time","suites":["shared server runtime","document requests"],"updatePoint":{"line":1581,"column":79},"line":1581,"code":"    test(\"returns generic message if handleDocumentRequest throws a second time\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexLoader = jest.fn(() => {\n        return \"index\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          default: {},\n          loader: indexLoader,\n        },\n      });\n      let lastThrownError;\n      build.entry.module.default = jest.fn(function () {\n        lastThrownError = new Error(\"rofl\");\n        throw lastThrownError;\n      }) as any;\n      let handler = createRequestHandler(build, ServerMode.Test);\n\n      let request = new Request(`${baseUrl}/`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect(await result.text()).toBe(\"Unexpected Server Error\");\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(indexLoader.mock.calls.length).toBe(0);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(2);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"returns more detailed message if handleDocumentRequest throws a second time in development mode","suites":["shared server runtime","document requests"],"updatePoint":{"line":1619,"column":105},"line":1619,"code":"    test(\"returns more detailed message if handleDocumentRequest throws a second time in development mode\", async () => {\n      let rootLoader = jest.fn(() => {\n        return \"root\";\n      });\n      let indexLoader = jest.fn(() => {\n        return \"index\";\n      });\n      let build = mockServerBuild({\n        root: {\n          default: {},\n          loader: rootLoader,\n          ErrorBoundary: {},\n        },\n        \"routes/index\": {\n          parentId: \"root\",\n          default: {},\n          loader: indexLoader,\n        },\n      });\n      let errorMessage =\n        \"thrown from handleDocumentRequest and expected to be logged in console only once\";\n      let lastThrownError;\n      build.entry.module.default = jest.fn(function () {\n        lastThrownError = new Error(errorMessage);\n        throw lastThrownError;\n      }) as any;\n      let handler = createRequestHandler(build, ServerMode.Development);\n\n      let request = new Request(`${baseUrl}/`, { method: \"get\" });\n\n      let result = await handler(request);\n      expect(result.status).toBe(500);\n      expect((await result.text()).includes(errorMessage)).toBe(true);\n      expect(rootLoader.mock.calls.length).toBe(0);\n      expect(indexLoader.mock.calls.length).toBe(0);\n\n      let calls = build.entry.module.default.mock.calls;\n      expect(calls.length).toBe(2);\n      expect(spy.console.mock.calls.length).toBe(1);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"has an empty id by default","suites":["Session"],"updatePoint":{"line":35,"column":32},"line":35,"code":"  it(\"has an empty id by default\", () => {\n    expect(createSession().id).toEqual(\"\");\n  });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"correctly stores and retrieves values","suites":["Session"],"updatePoint":{"line":39,"column":43},"line":39,"code":"  it(\"correctly stores and retrieves values\", () => {\n    let session = createSession();\n\n    session.set(\"user\", \"mjackson\");\n    session.flash(\"error\", \"boom\");\n\n    expect(session.has(\"user\")).toBe(true);\n    expect(session.get(\"user\")).toBe(\"mjackson\");\n    // Normal values should remain in the session after get()\n    expect(session.has(\"user\")).toBe(true);\n    expect(session.get(\"user\")).toBe(\"mjackson\");\n\n    expect(session.has(\"error\")).toBe(true);\n    expect(session.get(\"error\")).toBe(\"boom\");\n    // Flash values disappear after the first get()\n    expect(session.has(\"error\")).toBe(false);\n    expect(session.get(\"error\")).toBeUndefined();\n\n    session.unset(\"user\");\n\n    expect(session.has(\"user\")).toBe(false);\n    expect(session.get(\"user\")).toBeUndefined();\n  });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"returns `true` for Session objects","suites":["isSession"],"updatePoint":{"line":65,"column":40},"line":65,"code":"  it(\"returns `true` for Session objects\", () => {\n    expect(isSession(createSession())).toBe(true);\n  });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"returns `false` for non-Session objects","suites":["isSession"],"updatePoint":{"line":69,"column":45},"line":69,"code":"  it(\"returns `false` for non-Session objects\", () => {\n    expect(isSession({})).toBe(false);\n    expect(isSession([])).toBe(false);\n    expect(isSession(\"\")).toBe(false);\n    expect(isSession(true)).toBe(false);\n  });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"persists session data across requests","suites":["In-memory session storage"],"updatePoint":{"line":78,"column":43},"line":78,"code":"  it(\"persists session data across requests\", async () => {\n    let { getSession, commitSession } = createMemorySessionStorage({\n      cookie: { secrets: [\"secret1\"] },\n    });\n    let session = await getSession();\n    session.set(\"user\", \"mjackson\");\n    let setCookie = await commitSession(session);\n    session = await getSession(getCookieFromSetCookie(setCookie));\n\n    expect(session.get(\"user\")).toEqual(\"mjackson\");\n  });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"persists session data across requests","suites":["Cookie session storage"],"updatePoint":{"line":92,"column":43},"line":92,"code":"  it(\"persists session data across requests\", async () => {\n    let { getSession, commitSession } = createCookieSessionStorage({\n      cookie: { secrets: [\"secret1\"] },\n    });\n    let session = await getSession();\n    session.set(\"user\", \"mjackson\");\n    let setCookie = await commitSession(session);\n    session = await getSession(getCookieFromSetCookie(setCookie));\n\n    expect(session.get(\"user\")).toEqual(\"mjackson\");\n  });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"returns an empty session for cookies that are not signed properly","suites":["Cookie session storage"],"updatePoint":{"line":104,"column":71},"line":104,"code":"  it(\"returns an empty session for cookies that are not signed properly\", async () => {\n    let { getSession, commitSession } = createCookieSessionStorage({\n      cookie: { secrets: [\"secret1\"] },\n    });\n    let session = await getSession();\n    session.set(\"user\", \"mjackson\");\n\n    expect(session.get(\"user\")).toEqual(\"mjackson\");\n\n    let setCookie = await commitSession(session);\n    session = await getSession(\n      // Tamper with the session cookie...\n      getCookieFromSetCookie(setCookie).slice(0, -1)\n    );\n\n    expect(session.get(\"user\")).toBeUndefined();\n  });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"\"makes the default path of cookies to be /","suites":["Cookie session storage"],"updatePoint":{"line":122,"column":48},"line":122,"code":"  it('\"makes the default path of cookies to be /', async () => {\n    let { getSession, commitSession } = createCookieSessionStorage({\n      cookie: { secrets: [\"secret1\"] },\n    });\n    let session = await getSession();\n    session.set(\"user\", \"mjackson\");\n    let setCookie = await commitSession(session);\n    expect(setCookie).toContain(\"Path=/\");\n  });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"throws an error when the cookie size exceeds 4096 bytes","suites":["Cookie session storage"],"updatePoint":{"line":132,"column":61},"line":132,"code":"  it(\"throws an error when the cookie size exceeds 4096 bytes\", async () => {\n    let { getSession, commitSession } = createCookieSessionStorage({\n      cookie: { secrets: [\"secret1\"] },\n    });\n    let session = await getSession();\n    let longString = new Array(4097).fill(\"a\").join(\"\");\n    session.set(\"over4096bytes\", longString);\n    await expect(() => commitSession(session)).rejects.toThrow();\n  });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"unsigns old session cookies using the old secret and encodes new cookies using the new secret","suites":["Cookie session storage","when a new secret shows up in the rotation"],"updatePoint":{"line":143,"column":101},"line":143,"code":"    it(\"unsigns old session cookies using the old secret and encodes new cookies using the new secret\", async () => {\n      let { getSession, commitSession } = createCookieSessionStorage({\n        cookie: { secrets: [\"secret1\"] },\n      });\n      let session = await getSession();\n      session.set(\"user\", \"mjackson\");\n      let setCookie = await commitSession(session);\n      session = await getSession(getCookieFromSetCookie(setCookie));\n\n      expect(session.get(\"user\")).toEqual(\"mjackson\");\n\n      // A new secret enters the rotation...\n      let storage = createCookieSessionStorage({\n        cookie: { secrets: [\"secret2\", \"secret1\"] },\n      });\n      getSession = storage.getSession;\n      commitSession = storage.commitSession;\n\n      // Old cookies should still work with the old secret.\n      session = await storage.getSession(getCookieFromSetCookie(setCookie));\n      expect(session.get(\"user\")).toEqual(\"mjackson\");\n\n      // New cookies should be signed using the new secret.\n      let setCookie2 = await storage.commitSession(session);\n      expect(setCookie2).not.toEqual(setCookie);\n    });","file":"sessions-test.ts","skipped":false,"dir":"packages/remix-server-runtime/__tests__"},{"name":"handles requests","suites":["vercel createRequestHandler","basic requests"],"updatePoint":{"line":55,"column":24},"line":55,"code":"    it(\"handles requests\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async (req) => {\n        return new Response(`URL: ${new URL(req.url).pathname}`);\n      });\n\n      let request = supertest(createApp());\n      // note: vercel's createServerWithHelpers requires a x-now-bridge-request-id\n      let res = await request\n        .get(\"/foo/bar\")\n        .set({ \"x-now-bridge-request-id\": \"2\" });\n\n      expect(res.status).toBe(200);\n      expect(res.text).toBe(\"URL: /foo/bar\");\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-vercel/__tests__"},{"name":"handles null body","suites":["vercel createRequestHandler","basic requests"],"updatePoint":{"line":70,"column":25},"line":70,"code":"    it(\"handles null body\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        return new Response(null, { status: 200 });\n      });\n\n      let request = supertest(createApp());\n      // note: vercel's createServerWithHelpers requires a x-now-bridge-request-id\n      let res = await request.get(\"/\").set({ \"x-now-bridge-request-id\": \"2\" });\n\n      expect(res.status).toBe(200);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-vercel/__tests__"},{"name":"handles body as stream","suites":["vercel createRequestHandler","basic requests"],"updatePoint":{"line":83,"column":30},"line":83,"code":"    it(\"handles body as stream\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        let stream = Readable.from(\"hello world\");\n        return new NodeResponse(stream, { status: 200 }) as unknown as Response;\n      });\n\n      let request = supertest(createApp());\n      // note: vercel's createServerWithHelpers requires a x-now-bridge-request-id\n      let res = await request.get(\"/\").set({ \"x-now-bridge-request-id\": \"2\" });\n\n      expect(res.status).toBe(200);\n      expect(res.text).toBe(\"hello world\");\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-vercel/__tests__"},{"name":"handles status codes","suites":["vercel createRequestHandler","basic requests"],"updatePoint":{"line":97,"column":28},"line":97,"code":"    it(\"handles status codes\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        return new Response(null, { status: 204 });\n      });\n\n      let request = supertest(createApp());\n      // note: vercel's createServerWithHelpers requires a x-now-bridge-request-id\n      let res = await request.get(\"/\").set({ \"x-now-bridge-request-id\": \"2\" });\n\n      expect(res.status).toBe(204);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-vercel/__tests__"},{"name":"sets headers","suites":["vercel createRequestHandler","basic requests"],"updatePoint":{"line":109,"column":20},"line":109,"code":"    it(\"sets headers\", async () => {\n      mockedCreateRequestHandler.mockImplementation(() => async () => {\n        let headers = new Headers({ \"X-Time-Of-Year\": \"most wonderful\" });\n        headers.append(\n          \"Set-Cookie\",\n          \"first=one; Expires=0; Path=/; HttpOnly; Secure; SameSite=Lax\"\n        );\n        headers.append(\n          \"Set-Cookie\",\n          \"second=two; MaxAge=1209600; Path=/; HttpOnly; Secure; SameSite=Lax\"\n        );\n        headers.append(\n          \"Set-Cookie\",\n          \"third=three; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Path=/; HttpOnly; Secure; SameSite=Lax\"\n        );\n        return new Response(null, { headers });\n      });\n\n      let request = supertest(createApp());\n      // note: vercel's createServerWithHelpers requires a x-now-bridge-request-id\n      let res = await request.get(\"/\").set({ \"x-now-bridge-request-id\": \"2\" });\n\n      expect(res.headers[\"x-time-of-year\"]).toBe(\"most wonderful\");\n      expect(res.headers[\"set-cookie\"]).toEqual([\n        \"first=one; Expires=0; Path=/; HttpOnly; Secure; SameSite=Lax\",\n        \"second=two; MaxAge=1209600; Path=/; HttpOnly; Secure; SameSite=Lax\",\n        \"third=three; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Path=/; HttpOnly; Secure; SameSite=Lax\",\n      ]);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-vercel/__tests__"},{"name":"handles empty headers","suites":["vercel createRemixHeaders","creates fetch headers from vercel headers"],"updatePoint":{"line":143,"column":29},"line":143,"code":"    it(\"handles empty headers\", () => {\n      expect(createRemixHeaders({})).toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {},\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-vercel/__tests__"},{"name":"handles simple headers","suites":["vercel createRemixHeaders","creates fetch headers from vercel headers"],"updatePoint":{"line":151,"column":30},"line":151,"code":"    it(\"handles simple headers\", () => {\n      expect(createRemixHeaders({ \"x-foo\": \"bar\" })).toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-foo\": Array [\n              \"bar\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-vercel/__tests__"},{"name":"handles multiple headers","suites":["vercel createRemixHeaders","creates fetch headers from vercel headers"],"updatePoint":{"line":163,"column":32},"line":163,"code":"    it(\"handles multiple headers\", () => {\n      expect(createRemixHeaders({ \"x-foo\": \"bar\", \"x-bar\": \"baz\" }))\n        .toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-bar\": Array [\n              \"baz\",\n            ],\n            \"x-foo\": Array [\n              \"bar\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-vercel/__tests__"},{"name":"handles headers with multiple values","suites":["vercel createRemixHeaders","creates fetch headers from vercel headers"],"updatePoint":{"line":179,"column":44},"line":179,"code":"    it(\"handles headers with multiple values\", () => {\n      expect(createRemixHeaders({ \"x-foo\": \"bar, baz\" }))\n        .toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-foo\": Array [\n              \"bar, baz\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-vercel/__tests__"},{"name":"handles headers with multiple values and multiple headers","suites":["vercel createRemixHeaders","creates fetch headers from vercel headers"],"updatePoint":{"line":192,"column":65},"line":192,"code":"    it(\"handles headers with multiple values and multiple headers\", () => {\n      expect(createRemixHeaders({ \"x-foo\": \"bar, baz\", \"x-bar\": \"baz\" }))\n        .toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"x-bar\": Array [\n              \"baz\",\n            ],\n            \"x-foo\": Array [\n              \"bar, baz\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-vercel/__tests__"},{"name":"handles multiple set-cookie headers","suites":["vercel createRemixHeaders","creates fetch headers from vercel headers"],"updatePoint":{"line":208,"column":43},"line":208,"code":"    it(\"handles multiple set-cookie headers\", () => {\n      expect(\n        createRemixHeaders({\n          \"set-cookie\": [\n            \"__session=some_value; Path=/; Secure; HttpOnly; MaxAge=7200; SameSite=Lax\",\n            \"__other=some_other_value; Path=/; Secure; HttpOnly; MaxAge=3600; SameSite=Lax\",\n          ],\n        })\n      ).toMatchInlineSnapshot(`\n        Headers {\n          Symbol(map): Object {\n            \"set-cookie\": Array [\n              \"__session=some_value; Path=/; Secure; HttpOnly; MaxAge=7200; SameSite=Lax\",\n              \"__other=some_other_value; Path=/; Secure; HttpOnly; MaxAge=3600; SameSite=Lax\",\n            ],\n          },\n        }\n      `);\n    });","file":"server-test.ts","skipped":false,"dir":"packages/remix-vercel/__tests__"},{"name":"creates a request with the correct headers","suites":["vercel createRemixRequest"],"updatePoint":{"line":231,"column":48},"line":231,"code":"  it(\"creates a request with the correct headers\", async () => {\n    let request = createRequest({\n      method: \"GET\",\n      url: \"/foo/bar\",\n      headers: {\n        \"x-forwarded-host\": \"localhost:3000\",\n        \"x-forwarded-proto\": \"http\",\n        \"Cache-Control\": \"max-age=300, s-maxage=3600\",\n      },\n    }) as VercelRequest;\n\n    expect(createRemixRequest(request)).toMatchInlineSnapshot(`\n      NodeRequest {\n        \"abortController\": undefined,\n        \"agent\": undefined,\n        \"compress\": true,\n        \"counter\": 0,\n        \"follow\": 20,\n        \"size\": 0,\n        \"timeout\": 0,\n        Symbol(Body internals): Object {\n          \"body\": null,\n          \"disturbed\": false,\n          \"error\": null,\n        },\n        Symbol(Request internals): Object {\n          \"headers\": Headers {\n            Symbol(map): Object {\n              \"cache-control\": Array [\n                \"max-age=300, s-maxage=3600\",\n              ],\n              \"x-forwarded-host\": Array [\n                \"localhost:3000\",\n              ],\n              \"x-forwarded-proto\": Array [\n                \"http\",\n              ],\n            },\n          },\n          \"method\": \"GET\",\n          \"parsedURL\": Url {\n            \"auth\": null,\n            \"hash\": null,\n            \"host\": \"localhost:3000\",\n            \"hostname\": \"localhost\",\n            \"href\": \"http://localhost:3000/foo/bar\",\n            \"path\": \"/foo/bar\",\n            \"pathname\": \"/foo/bar\",\n            \"port\": \"3000\",\n            \"protocol\": \"http:\",\n            \"query\": null,\n            \"search\": null,\n            \"slashes\": true,\n          },\n          \"redirect\": \"follow\",\n          \"signal\": undefined,\n        },\n      }\n    `);\n  });","file":"server-test.ts","skipped":false,"dir":"packages/remix-vercel/__tests__"}]}