{"repo":"jsdom/jsdom","url":"https://github.com/jsdom/jsdom","branch":"master","configs":[{"package":"jsdom","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should have a window and a document","suites":["JSDOM instances: basics"],"updatePoint":{"line":17,"column":41,"index":238},"line":17,"code":"  it(\"should have a window and a document\", () => {\n    const dom = new JSDOM();\n    assert.isOk(dom.window);\n    assert.isOk(dom.window.document);\n  });","file":"api/basics.js","skipped":false,"dir":"test"},{"name":"should have a document with documentElement <html> when no arguments are passed","suites":["JSDOM instances: basics"],"updatePoint":{"line":22,"column":85,"index":436},"line":22,"code":"  it(\"should have a document with documentElement <html> when no arguments are passed\", () => {\n    const {\n      document\n    } = new JSDOM().window;\n    assert.strictEqual(document.documentElement.localName, \"html\");\n  });","file":"api/basics.js","skipped":false,"dir":"test"},{"name":"should populate the resulting document with the given HTML","suites":["JSDOM() constructor first argument"],"updatePoint":{"line":30,"column":64,"index":699},"line":30,"code":"  it(\"should populate the resulting document with the given HTML\", () => {\n    const {\n      document\n    } = new JSDOM(`<a id=\"test\" href=\"#test\">`).window;\n    assert.strictEqual(document.getElementById(\"test\").getAttribute(\"href\"), \"#test\");\n  });","file":"api/basics.js","skipped":false,"dir":"test"},{"name":"should give the same document innerHTML for empty and whitespace and omitted strings","suites":["JSDOM() constructor first argument"],"updatePoint":{"line":36,"column":90,"index":976},"line":36,"code":"  it(\"should give the same document innerHTML for empty and whitespace and omitted strings\", () => {\n    const document1 = new JSDOM().window.document;\n    const document2 = new JSDOM(undefined).window.document;\n    const document3 = new JSDOM(``).window.document;\n    const document4 = new JSDOM(` `).window.document;\n    assert.strictEqual(document1.innerHTML, document2.innerHTML);\n    assert.strictEqual(document2.innerHTML, document3.innerHTML);\n    assert.strictEqual(document3.innerHTML, document4.innerHTML);\n  });","file":"api/basics.js","skipped":false,"dir":"test"},{"name":"should coerce null to a string","suites":["JSDOM() constructor first argument"],"updatePoint":{"line":45,"column":36,"index":1445},"line":45,"code":"  it(\"should coerce null to a string\", () => {\n    const document1 = new JSDOM(null).window.document;\n    const document2 = new JSDOM(\"null\").window.document;\n    assert.strictEqual(document1.innerHTML, document2.innerHTML);\n  });","file":"api/basics.js","skipped":false,"dir":"test"},{"name":"should include the URL when reporting an XML parse error","suites":["JSDOM() constructor first argument","error reporting"],"updatePoint":{"line":51,"column":64,"index":1742},"line":51,"code":"    it(\"should include the URL when reporting an XML parse error\", () => {\n      assert.throws(() => new JSDOM(\"<doc><!-- ... ---></doc>\", {\n        url: \"https://example.com/\",\n        contentType: \"text/xml\"\n      }), \"https://example.com/:1:17: malformed comment.\");\n    });","file":"api/basics.js","skipped":false,"dir":"test"},{"name":"reflects back what is set to it","suites":["Cookie processing","document.cookie"],"updatePoint":{"line":46,"column":39,"index":1742},"line":46,"code":"    it(\"reflects back what is set to it\", () => {\n      const {\n        window\n      } = new JSDOM(``, {\n        url: testHost + \"/TestPath/test-page\"\n      });\n\n      for (const cookieStr of testCookies) {\n        window.document.cookie = cookieStr;\n      }\n\n      assertCookies(window.document.cookie, [\"Test1=Basic\", \"Test2=PathMatch\", \"Test9=Duplicate\", \"Test10={\\\"prop1\\\":5,\\\"prop2\\\":\\\"value\\\"}\", \"Malformed\"]);\n    });","file":"api/cookies.js","skipped":false,"dir":"test"},{"name":"reflects back cookies set from the server while requesting the page","suites":["Cookie processing","document.cookie"],"updatePoint":{"line":59,"column":75,"index":2203},"line":59,"code":"    it(\"reflects back cookies set from the server while requesting the page\", () => {\n      return JSDOM.fromURL(testHost + \"/TestPath/set-cookie-from-server\").then(({\n        window\n      }) => {\n        assertCookies(window.document.cookie, [\"Test1=Basic\", \"Test2=PathMatch\", \"Test9=Duplicate\", \"Test10={\\\"prop1\\\":5,\\\"prop2\\\":\\\"value\\\"}\", \"Malformed\"]);\n      });\n    });","file":"api/cookies.js","skipped":false,"dir":"test"},{"name":"reflects back cookies set from the server while requesting a script","suites":["Cookie processing","document.cookie"],"updatePoint":{"line":66,"column":75,"index":2577},"line":66,"code":"    it(\"reflects back cookies set from the server while requesting a script\", () => {\n      const {\n        window\n      } = new JSDOM(``, {\n        url: testHost + \"/TestPath/test-page\",\n        resources: \"usable\",\n        runScripts: \"dangerously\"\n      });\n      const script = window.document.createElement(\"script\");\n      const loadPromise = new Promise(resolve => {\n        script.onload = () => {\n          assertCookies(window.document.cookie, [\"Test1=Basic\", \"Test2=PathMatch\", \"Test9=Duplicate\", \"Test10={\\\"prop1\\\":5,\\\"prop2\\\":\\\"value\\\"}\", \"Malformed\"]);\n          resolve();\n        };\n      });\n      script.src = testHost + \"/TestPath/set-cookie-from-server\";\n      window.document.body.appendChild(script);\n      return loadPromise;\n    });","file":"api/cookies.js","skipped":false,"dir":"test"},{"name":"reflects back cookies set from the server on an XHR response","suites":["Cookie processing","document.cookie"],"updatePoint":{"line":85,"column":68,"index":3327},"line":85,"code":"    it(\"reflects back cookies set from the server on an XHR response\", () => {\n      const {\n        window\n      } = new JSDOM(``, {\n        url: testHost + \"/TestPath/test-page\"\n      });\n      const xhr = new window.XMLHttpRequest();\n      const loadPromise = new Promise(resolve => {\n        xhr.onload = () => {\n          assertCookies(window.document.cookie, [\"Test1=Basic\", \"Test2=PathMatch\", \"Test9=Duplicate\", \"Test10={\\\"prop1\\\":5,\\\"prop2\\\":\\\"value\\\"}\", \"Malformed\"]);\n          resolve();\n        };\n      });\n      xhr.open(\"GET\", testHost + \"/TestPath/set-cookie-from-server\");\n      xhr.send();\n      return loadPromise;\n    });","file":"api/cookies.js","skipped":false,"dir":"test"},{"name":"should not crash or set cookies when requesting a file URL (GH-1180)","suites":["Cookie processing","document.cookie"],"updatePoint":{"line":102,"column":76,"index":3977},"line":102,"code":"    it(\"should not crash or set cookies when requesting a file URL (GH-1180)\", () => {\n      const {\n        window\n      } = new JSDOM(``, {\n        url: toFileUrl(__filename)\n      });\n      const xhr = new window.XMLHttpRequest();\n      const loadPromise = new Promise(resolve => {\n        xhr.onload = () => {\n          assert.strictEqual(window.document.cookie, \"\");\n          resolve();\n        };\n      });\n      xhr.open(\"GET\", toFileUrl(__filename));\n      xhr.send();\n      return loadPromise;\n    });","file":"api/cookies.js","skipped":false,"dir":"test"},{"name":"should not contain expired cookies (GH-1027)","suites":["Cookie processing","document.cookie"],"updatePoint":{"line":119,"column":52,"index":4465},"line":119,"code":"    it(\"should not contain expired cookies (GH-1027)\", () => {\n      const {\n        window\n      } = new JSDOM();\n      const timeNow = Date.now();\n      const expiredDate = new Date(timeNow - 24 * 60 * 60 * 1000);\n      window.document.cookie = \"ExpiredCookie=FooBar; Expires=\" + expiredDate.toGMTString();\n      const futureDate = new Date(timeNow + 24 * 60 * 60 * 1000);\n      window.document.cookie = \"Test=FooBar; Expires=\" + futureDate.toString();\n      assert.strictEqual(window.document.cookie, \"Test=FooBar\");\n    });","file":"api/cookies.js","skipped":false,"dir":"test"},{"name":"should send the Cookies header with a script request","suites":["Cookie processing","sent with requests"],"updatePoint":{"line":132,"column":60,"index":5048},"line":132,"code":"    it(\"should send the Cookies header with a script request\", () => {\n      const options = {\n        runScripts: \"dangerously\",\n        resources: \"usable\"\n      };\n      return JSDOM.fromURL(testHost + \"/TestPath/set-cookie-from-server\", options).then(({\n        window\n      }) => {\n        const loadPromise = new Promise(resolve => {\n          window.scriptCallback = cookiesHeader => {\n            assertCookies(cookiesHeader, [\"Test1=Basic\", \"Test2=PathMatch\", \"Test6=HttpOnly\", \"Test9=Duplicate\", \"Test10={\\\"prop1\\\":5,\\\"prop2\\\":\\\"value\\\"}\", \"Malformed\"]);\n            resolve();\n          };\n        });\n        const script = window.document.createElement(\"script\");\n        script.src = testHost + \"/TestPath/get-cookie-header-via-script\";\n        window.document.body.appendChild(script);\n        return loadPromise;\n      });\n    });","file":"api/cookies.js","skipped":false,"dir":"test"},{"name":"should send the Cookies header with iframes","suites":["Cookie processing","sent with requests"],"updatePoint":{"line":152,"column":51,"index":5886},"line":152,"code":"    it(\"should send the Cookies header with iframes\", () => {\n      const options = {\n        resources: \"usable\"\n      };\n      return JSDOM.fromURL(testHost + \"/TestPath/set-cookie-from-server\", options).then(({\n        window\n      }) => {\n        const iframe = window.document.createElement(\"iframe\");\n        const loadPromise = new Promise(resolve => {\n          iframe.onload = () => {\n            assertCookies(iframe.contentDocument.cookie, [\"Test1=Basic\", \"Test2=PathMatch\", \"Test9=Duplicate\", \"Test10={\\\"prop1\\\":5,\\\"prop2\\\":\\\"value\\\"}\", \"Malformed\"]);\n            assertCookies(iframe.contentDocument.body.textContent, [\"Test1=Basic\", \"Test2=PathMatch\", \"Test6=HttpOnly\", \"Test9=Duplicate\", \"Test10={\\\"prop1\\\":5,\\\"prop2\\\":\\\"value\\\"}\", \"Malformed\"]);\n            resolve();\n          };\n        });\n        iframe.src = testHost + \"/TestPath/get-cookie-header\";\n        window.document.body.appendChild(iframe);\n        return loadPromise;\n      });\n    });","file":"api/cookies.js","skipped":false,"dir":"test"},{"name":"should send the Cookies header with an XHR request","suites":["Cookie processing","sent with requests"],"updatePoint":{"line":172,"column":58,"index":6862},"line":172,"code":"    it(\"should send the Cookies header with an XHR request\", () => {\n      return JSDOM.fromURL(testHost + \"/TestPath/set-cookie-from-server\").then(({\n        window\n      }) => {\n        const xhr = new window.XMLHttpRequest();\n        const loadPromise = new Promise(resolve => {\n          xhr.onload = () => {\n            assertCookies(xhr.responseText, [\"Test1=Basic\", \"Test2=PathMatch\", \"Test6=HttpOnly\", \"Test9=Duplicate\", \"Test10={\\\"prop1\\\":5,\\\"prop2\\\":\\\"value\\\"}\", \"Malformed\"]);\n            resolve();\n          };\n        });\n        xhr.open(\"GET\", testHost + \"/TestPath/get-cookie-header\");\n        xhr.send();\n        return loadPromise;\n      });\n    });","file":"api/cookies.js","skipped":false,"dir":"test"},{"name":"should gather cookies from redirects (GH-1089)","suites":["Cookie processing","sent with requests"],"updatePoint":{"line":188,"column":54,"index":7527},"line":188,"code":"    it(\"should gather cookies from redirects (GH-1089)\", () => {\n      return JSDOM.fromURL(testHost + \"/TestPath/set-cookie-redirect-chain\").then(({\n        window\n      }) => {\n        assertCookies(window.document.cookie, [\"Test1=Redirect1\", \"Test2=Redirect2\", \"Test3=Redirect3\"]);\n      });\n    });","file":"api/cookies.js","skipped":false,"dir":"test"},{"name":"should have correct secure and HTTP-only cookie semantics","suites":["Cookie processing","sent with requests"],"updatePoint":{"line":196,"column":63,"index":7845},"line":196,"code":"  it(\"should have correct secure and HTTP-only cookie semantics\", () => {\n    const url = testSecuredHost + \"/TestPath/somewhere\";\n    const cookieJar = new CookieJar();\n    cookieJar.setCookieSync(\"OptionsTest=FooBar; expires=Wed, 13-Jan-2051 22:23:01 GMT; path=/TestPath; HttpOnly\", url);\n    cookieJar.setCookieSync(\"SecureAliasUrlTest=Baz; Secure\", url);\n    const {\n      window\n    } = new JSDOM(``, {\n      url,\n      cookieJar\n    });\n    assertCookies(window.document.cookie, [\"SecureAliasUrlTest=Baz\"]);\n    const xhr = new window.XMLHttpRequest();\n    xhr.withCredentials = true;\n    const loadPromise = new Promise(resolve => {\n      xhr.onload = () => {\n        assertCookies(xhr.responseText, [\"OptionsTest=FooBar\"]);\n        resolve();\n      };\n    });\n    xhr.open(\"GET\", testHost + \"/TestPath/get-cookie-header\");\n    xhr.send();\n    return loadPromise;\n  });","file":"api/cookies.js","skipped":false,"dir":"test"},{"name":"should share cookies when a cookie jar is shared","suites":["Cookie processing","sent with requests"],"updatePoint":{"line":220,"column":54,"index":8713},"line":220,"code":"  it(\"should share cookies when a cookie jar is shared\", () => {\n    const cookieJar = new CookieJar();\n    return JSDOM.fromURL(testHost + \"/TestPath/set-cookie-from-server\", {\n      cookieJar\n    }).then(() => {\n      return JSDOM.fromURL(testHost + \"/TestPath/html-get-cookie-header\", {\n        cookieJar\n      });\n    }).then(({\n      window\n    }) => {\n      const cookieHeader = window.document.querySelector(\".cookie-header\").innerHTML;\n      assertCookies(cookieHeader, [\"Test1=Basic\", \"Test2=PathMatch\", \"Test6=HttpOnly\", \"Test9=Duplicate\", \"Test10={\\\"prop1\\\":5,\\\"prop2\\\":\\\"value\\\"}\", \"Malformed\"]);\n      assertCookies(window.document.cookie, [\"Test1=Basic\", \"Test2=PathMatch\", \"Test9=Duplicate\", \"Test10={\\\"prop1\\\":5,\\\"prop2\\\":\\\"value\\\"}\", \"Malformed\"]);\n    });\n  });","file":"api/cookies.js","skipped":false,"dir":"test"},{"name":"should default to UTF-8 when passing a string","suites":["API: encoding detection","constructor, given a string"],"updatePoint":{"line":108,"column":53,"index":2774},"line":108,"code":"    it(\"should default to UTF-8 when passing a string\", () => {\n      const dom = new JSDOM(\"©\");\n      assert.strictEqual(dom.window.document.characterSet, \"UTF-8\");\n      assert.strictEqual(dom.window.document.body.textContent, \"©\");\n    });","file":"api/encoding.js","skipped":false,"dir":"test"},{"name":"should default to UTF-8 when passing nothing","suites":["API: encoding detection","constructor, given a string"],"updatePoint":{"line":113,"column":52,"index":3017},"line":113,"code":"    it(\"should default to UTF-8 when passing nothing\", () => {\n      const dom = new JSDOM();\n      assert.strictEqual(dom.window.document.characterSet, \"UTF-8\");\n      assert.strictEqual(dom.window.document.body.textContent, \"\");\n    });","file":"api/encoding.js","skipped":false,"dir":"test"},{"name":"should default to UTF-8 when passing null","suites":["API: encoding detection","constructor, given a string"],"updatePoint":{"line":118,"column":49,"index":3253},"line":118,"code":"    it(\"should default to UTF-8 when passing null\", () => {\n      const dom = new JSDOM(null);\n      assert.strictEqual(dom.window.document.characterSet, \"UTF-8\");\n      assert.strictEqual(dom.window.document.body.textContent, \"null\");\n    });","file":"api/encoding.js","skipped":false,"dir":"test"},{"name":"should sniff  as ","suites":["API: encoding detection","constructor, given binary data","with no contentType option given"],"updatePoint":{"line":136,"column":58,"index":3989},"line":136,"code":"            it(`should sniff ${encodingFixture} as ${name}`, () => {\n              return factory(encodingFixture).then(binaryData => {\n                assert.strictEqual(binaryData.constructor.name, binaryDataType, \"Sanity check: input binary data must be of the right type\");\n                const dom = new JSDOM(binaryData);\n                assert.strictEqual(dom.window.document.characterSet, name);\n                assert.strictEqual(dom.window.document.body.textContent, body);\n              });\n            });","file":"api/encoding.js","skipped":false,"dir":"test"},{"name":"should sniff  as ","suites":["API: encoding detection","constructor, given binary data","with a contentType option specifying csiso88598e"],"updatePoint":{"line":157,"column":72,"index":4999},"line":157,"code":"            it(`should sniff ${encodingFixture} as ${nameWhenOverridden}`, () => {\n              return factory(encodingFixture).then(binaryData => {\n                assert.strictEqual(binaryData.constructor.name, binaryDataType, \"Sanity check: input binary data must be of the right type\");\n                const dom = new JSDOM(binaryData, {\n                  contentType: \"text/html;charset=csiso88598e\"\n                });\n                assert.strictEqual(dom.window.document.characterSet, nameWhenOverridden);\n                assert.strictEqual(dom.window.document.contentType, \"text/html\"); // encoding should be stripped\n\n                if (bodyWhenOverridden) {\n                  assert.strictEqual(dom.window.document.body.textContent, bodyWhenOverridden);\n                }\n              });\n            });","file":"api/encoding.js","skipped":false,"dir":"test"},{"name":"should sniff  as ","suites":["API: encoding detection","fromFile"],"updatePoint":{"line":184,"column":52,"index":6061},"line":184,"code":"      it(`should sniff ${encodingFixture} as ${name}`, () => {\n        return JSDOM.fromFile(fixturePath(encodingFixture)).then(dom => {\n          assert.strictEqual(dom.window.document.characterSet, name);\n          assert.strictEqual(dom.window.document.body.textContent, body);\n        });\n      });","file":"api/encoding.js","skipped":false,"dir":"test"},{"name":"should sniff  as ","suites":["API: encoding detection","fromURL","with no Content-Type header given"],"updatePoint":{"line":221,"column":54,"index":7265},"line":221,"code":"        it(`should sniff ${encodingFixture} as ${name}`, () => {\n          return JSDOM.fromURL(`${host}/${encodingFixture}`).then(dom => {\n            assert.strictEqual(dom.window.document.characterSet, name);\n            assert.strictEqual(dom.window.document.body.textContent, body);\n          });\n        });","file":"api/encoding.js","skipped":false,"dir":"test"},{"name":"should sniff  as ","suites":["API: encoding detection","fromURL","with a Content-Type header specifying csiso88598e"],"updatePoint":{"line":235,"column":68,"index":7874},"line":235,"code":"        it(`should sniff ${encodingFixture} as ${nameWhenOverridden}`, () => {\n          return JSDOM.fromURL(`${host}/${encodingFixture}?charset=csiso88598e`).then(dom => {\n            assert.strictEqual(dom.window.document.characterSet, nameWhenOverridden);\n            assert.strictEqual(dom.window.document.contentType, \"text/html\"); // encoding should be stripped\n\n            if (bodyWhenOverridden) {\n              assert.strictEqual(dom.window.document.body.textContent, bodyWhenOverridden);\n            }\n          });\n        });","file":"api/encoding.js","skipped":false,"dir":"test"},{"name":"should return a DocumentFragment","suites":["API: JSDOM.fragment()"],"updatePoint":{"line":17,"column":38,"index":233},"line":17,"code":"  it(\"should return a DocumentFragment\", () => {\n    const frag = JSDOM.fragment(``);\n    assert.strictEqual(frag.constructor.name, \"DocumentFragment\");\n  });","file":"api/fragment.js","skipped":false,"dir":"test"},{"name":"should return fragments with shared owner documents each time","suites":["API: JSDOM.fragment()"],"updatePoint":{"line":21,"column":67,"index":421},"line":21,"code":"  it(\"should return fragments with shared owner documents each time\", () => {\n    const frag1 = JSDOM.fragment(``);\n    const frag2 = JSDOM.fragment(``);\n    assert.strictEqual(frag1.ownerDocument, frag2.ownerDocument);\n  });","file":"api/fragment.js","skipped":false,"dir":"test"},{"name":"should return a fragment with no associated browsing context","suites":["API: JSDOM.fragment()"],"updatePoint":{"line":26,"column":66,"index":646},"line":26,"code":"  it(\"should return a fragment with no associated browsing context\", () => {\n    const frag = JSDOM.fragment(``);\n    assert.isNull(frag.ownerDocument.defaultView);\n  });","file":"api/fragment.js","skipped":false,"dir":"test"},{"name":"should allow basic DOM querying","suites":["API: JSDOM.fragment()"],"updatePoint":{"line":30,"column":37,"index":788},"line":30,"code":"  it(\"should allow basic DOM querying\", () => {\n    const frag = JSDOM.fragment(`<p>Hello</p><p>Hi</p>`);\n    assert.strictEqual(frag.childNodes.length, 2);\n    assert.strictEqual(frag.firstChild.localName, \"p\");\n    assert.strictEqual(frag.querySelector(\"p\").textContent, \"Hello\");\n    assert.strictEqual(frag.querySelectorAll(\"p\")[1].textContent, \"Hi\");\n  });","file":"api/fragment.js","skipped":false,"dir":"test"},{"name":"should allow basic DOM manipulation","suites":["API: JSDOM.fragment()"],"updatePoint":{"line":37,"column":41,"index":1154},"line":37,"code":"  it(\"should allow basic DOM manipulation\", () => {\n    const frag = JSDOM.fragment(`<p>Hello</p>`);\n    assert.strictEqual(frag.firstChild.textContent, \"Hello\");\n    frag.firstChild.outerHTML = \"<b>Hi</b>\";\n    assert.strictEqual(frag.firstChild.localName, \"b\");\n    assert.strictEqual(frag.firstChild.textContent, \"Hi\");\n  });","file":"api/fragment.js","skipped":false,"dir":"test"},{"name":"should ignore any options passed in","suites":["API: JSDOM.fragment()"],"updatePoint":{"line":44,"column":41,"index":1483},"line":44,"code":"  it(\"should ignore any options passed in\", () => {\n    const frag = JSDOM.fragment(``, {\n      url: \"https://example.org\",\n      referrer: \"https://example.com\",\n      contentType: \"application/xhtml+xml\",\n      userAgent: \"Mellblomenator/9000\"\n    });\n    assert.strictEqual(frag.ownerDocument.URL, \"about:blank\");\n    assert.strictEqual(frag.ownerDocument.referrer, \"\");\n    assert.strictEqual(frag.ownerDocument.contentType, \"text/html\");\n  });","file":"api/fragment.js","skipped":false,"dir":"test"},{"name":"should default to no nodes","suites":["API: JSDOM.fragment()"],"updatePoint":{"line":55,"column":32,"index":1923},"line":55,"code":"  it(\"should default to no nodes\", () => {\n    const frag = JSDOM.fragment();\n    assert.strictEqual(frag.childNodes.length, 0);\n  });","file":"api/fragment.js","skipped":false,"dir":"test"},{"name":"should return a rejected promise for a nonexistant file","suites":["API: JSDOM.fromFile()"],"updatePoint":{"line":27,"column":61,"index":505},"line":27,"code":"  it(\"should return a rejected promise for a nonexistant file\", () => {\n    return Promise.all([assert.isRejected(JSDOM.fromFile(undefined)), assert.isRejected(JSDOM.fromFile(\"doesntexist.html\"))]);\n  });","file":"api/from-file.js","skipped":false,"dir":"test"},{"name":"should use the file contents of a file that exists","suites":["API: JSDOM.fromFile()"],"updatePoint":{"line":30,"column":56,"index":705},"line":30,"code":"  it(\"should use the file contents of a file that exists\", () => {\n    return fromFixtureFile(\"test.html\").then(dom => {\n      assert.strictEqual(dom.serialize(), `<!DOCTYPE html><html><head><meta charset=\"utf-8\"><title>Hello</title>` + `</head><body><p>Hi</p>\\n</body></html>`);\n    });\n  });","file":"api/from-file.js","skipped":false,"dir":"test"},{"name":"should work even for Unicode main resource and subresource filenames (GH-3016)","suites":["API: JSDOM.fromFile()"],"updatePoint":{"line":35,"column":84,"index":1027},"line":35,"code":"  it(\"should work even for Unicode main resource and subresource filenames (GH-3016)\", async () => {\n    const dom = await fromFixtureFile(\"unicode-진 シーン-i 🥰 you.html\", {\n      resources: \"usable\"\n    });\n    await new Promise(resolve => {\n      dom.window.onload = resolve;\n    });\n    assert.strictEqual(dom.window.getComputedStyle(dom.window.document.querySelector(\"p\")).color, \"red\");\n  });","file":"api/from-file.js","skipped":false,"dir":"test"},{"name":"should default to text/html Content-Type even with no file extension","suites":["API: JSDOM.fromFile()","contentType option defaulting"],"updatePoint":{"line":45,"column":76,"index":1467},"line":45,"code":"    it(\"should default to text/html Content-Type even with no file extension\", () => {\n      return fromFixtureFile(\"no-extension\").then(dom => {\n        assert.strictEqual(dom.window.document.contentType, \"text/html\");\n      });\n    });","file":"api/from-file.js","skipped":false,"dir":"test"},{"name":"should default to application/xhtml+xml Content-Type for .xhtml files","suites":["API: JSDOM.fromFile()","contentType option defaulting"],"updatePoint":{"line":50,"column":77,"index":1706},"line":50,"code":"    it(\"should default to application/xhtml+xml Content-Type for .xhtml files\", () => {\n      return fromFixtureFile(\"xhtml.xhtml\").then(dom => {\n        assert.strictEqual(dom.window.document.contentType, \"application/xhtml+xml\");\n      });\n    });","file":"api/from-file.js","skipped":false,"dir":"test"},{"name":"should default to application/xhtml+xml Content-Type for .xht files","suites":["API: JSDOM.fromFile()","contentType option defaulting"],"updatePoint":{"line":55,"column":75,"index":1954},"line":55,"code":"    it(\"should default to application/xhtml+xml Content-Type for .xht files\", () => {\n      return fromFixtureFile(\"xhtml.xht\").then(dom => {\n        assert.strictEqual(dom.window.document.contentType, \"application/xhtml+xml\");\n      });\n    });","file":"api/from-file.js","skipped":false,"dir":"test"},{"name":"should default to application/xhtml+xml Content-Type for .xml files","suites":["API: JSDOM.fromFile()","contentType option defaulting"],"updatePoint":{"line":60,"column":75,"index":2200},"line":60,"code":"    it(\"should default to application/xhtml+xml Content-Type for .xml files\", () => {\n      return fromFixtureFile(\"xhtml.xml\").then(dom => {\n        assert.strictEqual(dom.window.document.contentType, \"application/xhtml+xml\");\n      });\n    });","file":"api/from-file.js","skipped":false,"dir":"test"},{"name":"should allow overriding the Content-Type for .xhtml files","suites":["API: JSDOM.fromFile()","contentType option defaulting"],"updatePoint":{"line":65,"column":65,"index":2436},"line":65,"code":"    it(\"should allow overriding the Content-Type for .xhtml files\", () => {\n      return fromFixtureFile(\"xhtml.xhtml\", {\n        contentType: \"text/html\"\n      }).then(dom => {\n        assert.strictEqual(dom.window.document.contentType, \"text/html\");\n      });\n    });","file":"api/from-file.js","skipped":false,"dir":"test"},{"name":"should allow overriding the Content-Type for .xht files","suites":["API: JSDOM.fromFile()","contentType option defaulting"],"updatePoint":{"line":72,"column":63,"index":2704},"line":72,"code":"    it(\"should allow overriding the Content-Type for .xht files\", () => {\n      return fromFixtureFile(\"xhtml.xht\", {\n        contentType: \"text/html\"\n      }).then(dom => {\n        assert.strictEqual(dom.window.document.contentType, \"text/html\");\n      });\n    });","file":"api/from-file.js","skipped":false,"dir":"test"},{"name":"should allow overriding the Content-Type for .xml files","suites":["API: JSDOM.fromFile()","contentType option defaulting"],"updatePoint":{"line":79,"column":63,"index":2970},"line":79,"code":"    it(\"should allow overriding the Content-Type for .xml files\", () => {\n      return fromFixtureFile(\"xhtml.xml\", {\n        contentType: \"text/html\"\n      }).then(dom => {\n        assert.strictEqual(dom.window.document.contentType, \"text/html\");\n      });\n    });","file":"api/from-file.js","skipped":false,"dir":"test"},{"name":"should default to a file URL derived from the filename","suites":["API: JSDOM.fromFile()","url option defaulting"],"updatePoint":{"line":96,"column":62,"index":3640},"line":96,"code":"    it(\"should default to a file URL derived from the filename\", () => {\n      return fromFixtureFile(\"test.html\").then(dom => {\n        assert.strictEqual(dom.window.document.URL, testURL);\n      });\n    });","file":"api/from-file.js","skipped":false,"dir":"test"},{"name":"should allow overriding the URL","suites":["API: JSDOM.fromFile()","url option defaulting"],"updatePoint":{"line":101,"column":39,"index":3826},"line":101,"code":"    it(\"should allow overriding the URL\", () => {\n      return fromFixtureFile(\"test.html\", {\n        url: \"https://example.com/\"\n      }).then(dom => {\n        assert.strictEqual(dom.window.document.URL, \"https://example.com/\");\n      });\n    });","file":"api/from-file.js","skipped":false,"dir":"test"},{"name":"window.close() should prevent timers from registering and cause them to return 0","suites":["Test cases only possible to test from the outside"],"updatePoint":{"line":28,"column":86,"index":450},"line":28,"code":"  it(\"window.close() should prevent timers from registering and cause them to return 0\", async () => {\n    const {\n      window\n    } = new JSDOM();\n    assert.notEqual(window.setTimeout(() => {}, 100), undefined);\n    window.close();\n    let ran = false;\n    assert.equal(window.setTimeout(() => {\n      ran = true;\n    }), 0);\n    await delay(10);\n    assert.equal(ran, false);\n  });","file":"api/from-outside.js","skipped":false,"dir":"test"},{"name":"window.close() should stop a setInterval()","suites":["Test cases only possible to test from the outside"],"updatePoint":{"line":41,"column":48,"index":798},"line":41,"code":"  it(\"window.close() should stop a setInterval()\", async () => {\n    const {\n      window\n    } = new JSDOM(`<script>\n      window.counter = 0;\n      setInterval(() => window.counter++, 10);\n    </script>`, {\n      runScripts: \"dangerously\"\n    });\n    await delay(55);\n    window.close(); // We can't assert it's equal to 5, because the event loop might have been busy and not fully executed all 5.\n\n    assert.isAtLeast(window.counter, 1);\n    const counterBeforeSecondDelay = window.counter;\n    await delay(50);\n    assert.equal(window.counter, counterBeforeSecondDelay);\n  });","file":"api/from-outside.js","skipped":false,"dir":"test"},{"name":"frees up callback handles passed to setTimeout","suites":["Test cases only possible to test from the outside"],"updatePoint":{"line":58,"column":52,"index":1384},"line":58,"code":"  it(\"frees up callback handles passed to setTimeout\", {\n    skipIfBrowser: true,\n    timeout: 5000\n  }, () => {\n    const timeoutWithGcFixturePath = path.resolve(__dirname, \"./fixtures/timeout-with-gc.js\");\n    const {\n      status,\n      stdout\n    } = spawnSync(\"node\", [\"--expose-gc\", timeoutWithGcFixturePath], {\n      encoding: \"utf-8\"\n    });\n    assert.equal(status, 0);\n    const diffInBytes = Number(stdout);\n    assert.isNotNaN(diffInBytes);\n    const diffInMB = diffInBytes / 1024 / 1024;\n    assert.isBelow(diffInMB, 5);\n  });","file":"api/from-outside.js","skipped":false,"dir":"test"},{"name":"window.close() should work from within a load event listener","suites":["Test cases only possible to test from the outside"],"updatePoint":{"line":75,"column":66,"index":1938},"line":75,"code":"  it(\"window.close() should work from within a load event listener\", async () => {\n    const errors = [];\n    const virtualConsole = new VirtualConsole().sendTo(console);\n    virtualConsole.on(\"jsdomError\", e => {\n      errors.push(e);\n    });\n    const {\n      window\n    } = new JSDOM(``, {\n      virtualConsole\n    });\n    window.addEventListener(\"load\", () => {\n      window.close();\n    });\n    await delay(0);\n    assert.isEmpty(errors);\n  });","file":"api/from-outside.js","skipped":false,"dir":"test"},{"name":"should return a rejected promise for a bad URL","suites":["API: JSDOM.fromURL()"],"updatePoint":{"line":33,"column":52,"index":511},"line":33,"code":"  it(\"should return a rejected promise for a bad URL\", () => {\n    return Promise.all([assert.isRejected(JSDOM.fromURL(\"asdf\"), TypeError), assert.isRejected(JSDOM.fromURL(undefined), TypeError), assert.isRejected(JSDOM.fromURL(\"fail.com\"), TypeError)]);\n  });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should return a rejected promise for a 404","suites":["API: JSDOM.fromURL()"],"updatePoint":{"line":36,"column":48,"index":768},"line":36,"code":"  it(\"should return a rejected promise for a 404\", async () => {\n    const url = await simpleServer(404);\n    return assert.isRejected(JSDOM.fromURL(url));\n  });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should return a rejected promise for a 500","suites":["API: JSDOM.fromURL()"],"updatePoint":{"line":40,"column":48,"index":930},"line":40,"code":"  it(\"should return a rejected promise for a 500\", async () => {\n    const url = await simpleServer(500);\n    return assert.isRejected(JSDOM.fromURL(url));\n  });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should use the body of 200 responses","suites":["API: JSDOM.fromURL()"],"updatePoint":{"line":44,"column":42,"index":1086},"line":44,"code":"  it(\"should use the body of 200 responses\", async () => {\n    const url = await simpleServer(200, {\n      \"Content-Type\": \"text/html\"\n    }, \"<p>Hello</p>\");\n    const dom = await JSDOM.fromURL(url);\n    assert.strictEqual(dom.serialize(), \"<html><head></head><body><p>Hello</p></body></html>\");\n  });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should use the body of 301 responses","suites":["API: JSDOM.fromURL()"],"updatePoint":{"line":51,"column":42,"index":1389},"line":51,"code":"  it(\"should use the body of 301 responses\", async () => {\n    const [requestURL] = await redirectServer(\"<p>Hello</p>\", {\n      \"Content-Type\": \"text/html\"\n    });\n    const dom = await JSDOM.fromURL(requestURL);\n    assert.strictEqual(dom.serialize(), \"<html><head></head><body><p>Hello</p></body></html>\");\n  });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should be able to handle gzipped bodies","suites":["API: JSDOM.fromURL()"],"updatePoint":{"line":58,"column":45,"index":1708},"line":58,"code":"  it(\"should be able to handle gzipped bodies\", async () => {\n    const body = zlib.gzipSync(\"<p>Hello world!</p>\");\n    const headers = {\n      \"Content-Type\": \"text/html\",\n      \"Content-Length\": body.byteLength,\n      \"Content-Encoding\": \"gzip\"\n    };\n    const url = await simpleServer(200, headers, body);\n    const dom = await JSDOM.fromURL(url);\n    assert.strictEqual(dom.serialize(), \"<html><head></head><body><p>Hello world!</p></body></html>\");\n  });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should send a HTML-preferring Accept header","suites":["API: JSDOM.fromURL()"],"updatePoint":{"line":69,"column":49,"index":2174},"line":69,"code":"  it(\"should send a HTML-preferring Accept header\", async () => {\n    let recordedHeader;\n    const url = await requestRecordingServer(req => {\n      recordedHeader = req.headers.accept;\n    });\n    await JSDOM.fromURL(url);\n    assert.strictEqual(recordedHeader, \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\");\n  });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should send an Accept-Language: en header","suites":["API: JSDOM.fromURL()"],"updatePoint":{"line":77,"column":47,"index":2510},"line":77,"code":"  it(\"should send an Accept-Language: en header\", async () => {\n    let recordedHeader;\n    const url = await requestRecordingServer(req => {\n      recordedHeader = req.headers[\"accept-language\"];\n    });\n    await JSDOM.fromURL(url);\n    assert.strictEqual(recordedHeader, \"en\");\n  });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should use the default user agent as the User-Agent header when none is given","suites":["API: JSDOM.fromURL()","user agent"],"updatePoint":{"line":86,"column":85,"index":2868},"line":86,"code":"    it(\"should use the default user agent as the User-Agent header when none is given\", async () => {\n      const expected = `Mozilla/5.0 (${process.platform || \"unknown OS\"}) AppleWebKit/537.36 ` + `(KHTML, like Gecko) jsdom/${packageVersion}`;\n      let recordedHeader;\n      const url = await requestRecordingServer(req => {\n        recordedHeader = req.headers[\"user-agent\"];\n      });\n      const dom = await JSDOM.fromURL(url);\n      assert.strictEqual(recordedHeader, expected);\n      assert.strictEqual(dom.window.navigator.userAgent, expected);\n    });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should reject when passing an invalid absolute URL for referrer","suites":["API: JSDOM.fromURL()","referrer"],"updatePoint":{"line":98,"column":71,"index":3453},"line":98,"code":"    it(\"should reject when passing an invalid absolute URL for referrer\", () => {\n      assert.isRejected(JSDOM.fromURL(\"http://example.com/\", {\n        referrer: \"asdf\"\n      }), TypeError);\n    });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should not send a Referer header when no referrer option is given","suites":["API: JSDOM.fromURL()","referrer"],"updatePoint":{"line":103,"column":73,"index":3655},"line":103,"code":"    it(\"should not send a Referer header when no referrer option is given\", async () => {\n      let hasHeader;\n      const url = await requestRecordingServer(req => {\n        hasHeader = \"referer\" in req.headers;\n      });\n      const dom = await JSDOM.fromURL(url);\n      assert.strictEqual(hasHeader, false);\n      assert.strictEqual(dom.window.document.referrer, \"\");\n    });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should use the supplied referrer option as a Referer header","suites":["API: JSDOM.fromURL()","referrer"],"updatePoint":{"line":112,"column":67,"index":4028},"line":112,"code":"    it(\"should use the supplied referrer option as a Referer header\", async () => {\n      let recordedHeader;\n      const url = await requestRecordingServer(req => {\n        recordedHeader = req.headers.referer;\n      });\n      const dom = await JSDOM.fromURL(url, {\n        referrer: \"http://example.com/\"\n      });\n      assert.strictEqual(recordedHeader, \"http://example.com/\");\n      assert.strictEqual(dom.window.document.referrer, \"http://example.com/\");\n    });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should canonicalize referrer URLs before using them as a Referer header","suites":["API: JSDOM.fromURL()","referrer"],"updatePoint":{"line":123,"column":79,"index":4509},"line":123,"code":"    it(\"should canonicalize referrer URLs before using them as a Referer header\", async () => {\n      let recordedHeader;\n      const url = await requestRecordingServer(req => {\n        recordedHeader = req.headers.referer;\n      });\n      const dom = await JSDOM.fromURL(url, {\n        referrer: \"http:example.com\"\n      });\n      assert.strictEqual(recordedHeader, \"http://example.com/\");\n      assert.strictEqual(dom.window.document.referrer, \"http://example.com/\");\n    });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should use the redirect source URL as the referrer, overriding a provided one","suites":["API: JSDOM.fromURL()","referrer"],"updatePoint":{"line":134,"column":85,"index":4993},"line":134,"code":"    it(\"should use the redirect source URL as the referrer, overriding a provided one\", async () => {\n      const [requestURL] = await redirectServer(\"<p>Hello</p>\", {\n        \"Content-Type\": \"text/html\"\n      });\n      const dom = await JSDOM.fromURL(requestURL, {\n        referrer: \"http://example.com/\"\n      });\n      assert.strictEqual(dom.window.document.referrer, requestURL);\n    });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should use the URL fetched for a 200","suites":["API: JSDOM.fromURL()","inferring options from the response","url"],"updatePoint":{"line":146,"column":46,"index":5438},"line":146,"code":"      it(\"should use the URL fetched for a 200\", async () => {\n        const url = await simpleServer(200, {\n          \"Content-Type\": \"text/html\"\n        });\n        const dom = await JSDOM.fromURL(url);\n        assert.strictEqual(dom.window.document.URL, url);\n      });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should preserve full request URL","suites":["API: JSDOM.fromURL()","inferring options from the response","url"],"updatePoint":{"line":153,"column":42,"index":5707},"line":153,"code":"      it(\"should preserve full request URL\", async () => {\n        const url = await simpleServer(200, {\n          \"Content-Type\": \"text/html\"\n        });\n        const path = \"t\";\n        const search = \"?a=1\";\n        const fragment = \"#fragment\";\n        const fullURL = url + path + search + fragment;\n        const dom = await JSDOM.fromURL(fullURL);\n        assert.strictEqual(dom.window.document.URL, fullURL);\n        assert.strictEqual(dom.window.location.href, fullURL);\n        assert.strictEqual(dom.window.location.pathname, \"/\" + path);\n        assert.strictEqual(dom.window.location.search, search);\n        assert.strictEqual(dom.window.location.hash, fragment);\n      });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should use the ultimate response URL after a redirect","suites":["API: JSDOM.fromURL()","inferring options from the response","url"],"updatePoint":{"line":168,"column":63,"index":6417},"line":168,"code":"      it(\"should use the ultimate response URL after a redirect\", async () => {\n        const [requestURL, responseURL] = await redirectServer(\"<p>Hello</p>\", {\n          \"Content-Type\": \"text/html\"\n        });\n        const dom = await JSDOM.fromURL(requestURL);\n        assert.strictEqual(dom.window.document.URL, responseURL);\n      });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should preserve fragments when processing redirects","suites":["API: JSDOM.fromURL()","inferring options from the response","url"],"updatePoint":{"line":175,"column":61,"index":6755},"line":175,"code":"      it(\"should preserve fragments when processing redirects\", async () => {\n        const [requestURL, responseURL] = await redirectServer(\"<p>Hello</p>\", {\n          \"Content-Type\": \"text/html\"\n        });\n        const dom = await JSDOM.fromURL(requestURL + \"#fragment\");\n        assert.strictEqual(dom.window.document.URL, responseURL + \"#fragment\");\n        assert.strictEqual(dom.window.location.hash, \"#fragment\");\n      });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should disallow passing a URL manually","suites":["API: JSDOM.fromURL()","inferring options from the response","url"],"updatePoint":{"line":183,"column":48,"index":7175},"line":183,"code":"      it(\"should disallow passing a URL manually\", () => {\n        return assert.isRejected(JSDOM.fromURL(\"http://example.com/\", {\n          url: \"https://example.org\"\n        }), TypeError);\n      });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should use the content type fetched for a 200","suites":["API: JSDOM.fromURL()","inferring options from the response","contentType"],"updatePoint":{"line":190,"column":55,"index":7428},"line":190,"code":"      it(\"should use the content type fetched for a 200\", async () => {\n        const url = await simpleServer(200, {\n          \"Content-Type\": \"application/xml\"\n        }, \"<doc/>\");\n        const dom = await JSDOM.fromURL(url);\n        assert.strictEqual(dom.window.document.contentType, \"application/xml\");\n      });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should use the ultimate response content type after a redirect","suites":["API: JSDOM.fromURL()","inferring options from the response","contentType"],"updatePoint":{"line":197,"column":72,"index":7765},"line":197,"code":"      it(\"should use the ultimate response content type after a redirect\", async () => {\n        const [requestURL] = await redirectServer(\"<p>Hello</p>\", {\n          \"Content-Type\": \"text/html\"\n        }, {\n          \"Content-Type\": \"application/xml\"\n        });\n        const dom = await JSDOM.fromURL(requestURL);\n        assert.strictEqual(dom.window.document.contentType, \"application/xml\");\n      });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should disallow passing a content type manually","suites":["API: JSDOM.fromURL()","inferring options from the response","contentType"],"updatePoint":{"line":206,"column":57,"index":8157},"line":206,"code":"      it(\"should disallow passing a content type manually\", () => {\n        return assert.isRejected(JSDOM.fromURL(\"http://example.com/\", {\n          contentType: \"application/xml\"\n        }), TypeError);\n      });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should send applicable cookies in a supplied cookie jar","suites":["API: JSDOM.fromURL()","cookie jar integration"],"updatePoint":{"line":214,"column":63,"index":8437},"line":214,"code":"    it(\"should send applicable cookies in a supplied cookie jar\", async () => {\n      let recordedHeader;\n      const url = await requestRecordingServer(req => {\n        recordedHeader = req.headers.cookie;\n      });\n      const cookieJar = new jsdom.CookieJar();\n      cookieJar.setCookieSync(\"foo=bar\", url);\n      const dom = await JSDOM.fromURL(url, {\n        cookieJar\n      });\n      assert.strictEqual(recordedHeader, \"foo=bar\");\n      assert.strictEqual(dom.window.document.cookie, \"foo=bar\");\n    });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should store cookies set by the server in a supplied cookie jar","suites":["API: JSDOM.fromURL()","cookie jar integration"],"updatePoint":{"line":227,"column":71,"index":8955},"line":227,"code":"    it(\"should store cookies set by the server in a supplied cookie jar\", async () => {\n      const url = await simpleServer(200, {\n        \"Set-Cookie\": \"bar=baz\",\n        \"Content-Type\": \"text/html\"\n      });\n      const cookieJar = new jsdom.CookieJar();\n      const dom = await JSDOM.fromURL(url, {\n        cookieJar\n      });\n      assert.strictEqual(cookieJar.getCookieStringSync(url), \"bar=baz\");\n      assert.strictEqual(dom.window.document.cookie, \"bar=baz\");\n    });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should store cookies set by the server in a newly-created cookie jar","suites":["API: JSDOM.fromURL()","cookie jar integration"],"updatePoint":{"line":239,"column":76,"index":9437},"line":239,"code":"    it(\"should store cookies set by the server in a newly-created cookie jar\", async () => {\n      const url = await simpleServer(200, {\n        \"Set-Cookie\": \"baz=qux\",\n        \"Content-Type\": \"text/html\"\n      });\n      const dom = await JSDOM.fromURL(url);\n      assert.strictEqual(dom.cookieJar.getCookieStringSync(url), \"baz=qux\");\n      assert.strictEqual(dom.window.document.cookie, \"baz=qux\");\n    });","file":"api/from-url.js","skipped":false,"dir":"test"},{"name":"should not emit invalid stylesheet errors due to spaces (GH-2123)","suites":["API: virtual console jsdomErrors"],"updatePoint":{"line":19,"column":71,"index":391},"line":19,"code":"  it(\"should not emit invalid stylesheet errors due to spaces (GH-2123)\", () => {\n    const virtualConsole = new VirtualConsole();\n    const errors = [];\n    virtualConsole.on(\"jsdomError\", e => {\n      errors.push(e);\n    }); // eslint-disable-next-line no-new\n\n    new JSDOM(`\n      <html>\n        <head></head>\n        <body>\n          <style>\n          .cool-class {\n              font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n          }\n          </style>\n          <p class=\"cool-class\">\n          Hello!\n          </p>\n        </body>\n      </html>\n      `, {\n      virtualConsole\n    });\n    assert.isEmpty(errors);\n  });","file":"api/jsdom-errors.js","skipped":false,"dir":"test"},{"name":"should emit unhandled null value thrown in inline event handlers","suites":["API: virtual console jsdomErrors"],"updatePoint":{"line":45,"column":70,"index":1036},"line":45,"code":"  it(\"should emit unhandled null value thrown in inline event handlers\", t => {\n    const virtualConsole = new VirtualConsole();\n    virtualConsole.on(\"jsdomError\", error => {\n      assert.ok(error instanceof Error);\n      assert.equal(error.message, \"Uncaught null\");\n      assert.isNull(error.detail);\n      t.done();\n    });\n    const html = `<body onclick=\"throw null\"></body>`;\n    const doc = new JSDOM(html, {\n      virtualConsole,\n      runScripts: \"dangerously\"\n    }).window.document;\n    doc.body.click();\n  }, {\n    async: true\n  });","file":"api/jsdom-errors.js","skipped":false,"dir":"test"},{"name":"should serialize the default document correctly","suites":["API: JSDOM class's methods","serialize"],"updatePoint":{"line":20,"column":55,"index":314},"line":20,"code":"    it(\"should serialize the default document correctly\", () => {\n      const dom = new JSDOM();\n      assert.strictEqual(dom.serialize(), `<html><head></head><body></body></html>`);\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should serialize a text-only document correctly","suites":["API: JSDOM class's methods","serialize"],"updatePoint":{"line":24,"column":55,"index":505},"line":24,"code":"    it(\"should serialize a text-only document correctly\", () => {\n      const dom = new JSDOM(`hello`);\n      assert.strictEqual(dom.serialize(), `<html><head></head><body>hello</body></html>`);\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should serialize a document with HTML correctly","suites":["API: JSDOM class's methods","serialize"],"updatePoint":{"line":28,"column":55,"index":708},"line":28,"code":"    it(\"should serialize a document with HTML correctly\", () => {\n      const dom = new JSDOM(`<!DOCTYPE html><html><head></head><body><p>hello world!</p></body></html>`);\n      assert.strictEqual(dom.serialize(), `<!DOCTYPE html><html><head></head><body><p>hello world!</p></body></html>`);\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should serialize documents with omitted and varying-case html or body tags correctly","suites":["API: JSDOM class's methods","serialize"],"updatePoint":{"line":32,"column":92,"index":1045},"line":32,"code":"    it(\"should serialize documents with omitted and varying-case html or body tags correctly\", () => {\n      const inputs = [\"<HTML><BODY></BODY></HTML>\", \"<html><BODY></Body></HTML>\", \"<html><body></body></html>\", \"<body></body>\", \"\"];\n      const outputs = inputs.map(input => new JSDOM(input).serialize());\n\n      for (const output of outputs) {\n        assert.strictEqual(output, `<html><head></head><body></body></html>`);\n      }\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should throw when includeNodeLocations is left as the default (false)","suites":["API: JSDOM class's methods","nodeLocation"],"updatePoint":{"line":42,"column":77,"index":1515},"line":42,"code":"    it(\"should throw when includeNodeLocations is left as the default (false)\", () => {\n      const dom = new JSDOM(`<p>Hello</p>`);\n      const node = dom.window.document.querySelector(\"p\");\n      assert.throws(() => dom.nodeLocation(node));\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should throw when includeNodeLocations is set explicitly to false","suites":["API: JSDOM class's methods","nodeLocation"],"updatePoint":{"line":47,"column":73,"index":1762},"line":47,"code":"    it(\"should throw when includeNodeLocations is set explicitly to false\", () => {\n      const dom = new JSDOM(`<p>Hello</p>`, {\n        includeNodeLocations: false\n      });\n      const node = dom.window.document.querySelector(\"p\");\n      assert.throws(() => dom.nodeLocation(node));\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should give the correct location for an element","suites":["API: JSDOM class's methods","nodeLocation"],"updatePoint":{"line":54,"column":55,"index":2038},"line":54,"code":"    it(\"should give the correct location for an element\", () => {\n      const dom = new JSDOM(`<p>Hello</p>`, {\n        includeNodeLocations: true\n      });\n      const node = dom.window.document.querySelector(\"p\");\n      assert.deepEqual(dom.nodeLocation(node), {\n        endCol: 13,\n        endLine: 1,\n        startLine: 1,\n        startCol: 1,\n        startOffset: 0,\n        endOffset: 12,\n        startTag: {\n          endCol: 4,\n          endLine: 1,\n          startLine: 1,\n          startCol: 1,\n          startOffset: 0,\n          endOffset: 3\n        },\n        endTag: {\n          endCol: 13,\n          endLine: 1,\n          startLine: 1,\n          startCol: 9,\n          startOffset: 8,\n          endOffset: 12\n        }\n      });\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should give the correct location for a text node","suites":["API: JSDOM class's methods","nodeLocation"],"updatePoint":{"line":84,"column":56,"index":2791},"line":84,"code":"    it(\"should give the correct location for a text node\", () => {\n      const dom = new JSDOM(`<p>Hello</p>`, {\n        includeNodeLocations: true\n      });\n      const node = dom.window.document.querySelector(\"p\").firstChild;\n      assert.deepEqual(dom.nodeLocation(node), {\n        endCol: 9,\n        endLine: 1,\n        startLine: 1,\n        startCol: 4,\n        startOffset: 3,\n        endOffset: 8\n      });\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should give the correct location for a void element","suites":["API: JSDOM class's methods","nodeLocation"],"updatePoint":{"line":98,"column":59,"index":3216},"line":98,"code":"    it(\"should give the correct location for a void element\", () => {\n      const dom = new JSDOM(`<p>Hello\n        <img src=\"foo.jpg\">\n      </p>`, {\n        includeNodeLocations: true\n      });\n      const node = dom.window.document.querySelector(\"img\");\n      assert.deepEqual(dom.nodeLocation(node), {\n        startTag: {\n          attrs: {\n            src: {\n              endCol: 27,\n              endLine: 2,\n              startLine: 2,\n              startCol: 14,\n              startOffset: 22,\n              endOffset: 35\n            }\n          },\n          endCol: 28,\n          endLine: 2,\n          startLine: 2,\n          startCol: 9,\n          startOffset: 17,\n          endOffset: 36\n        },\n        attrs: {\n          src: {\n            endCol: 27,\n            endLine: 2,\n            startLine: 2,\n            startCol: 14,\n            startOffset: 22,\n            endOffset: 35\n          }\n        },\n        endCol: 28,\n        endLine: 2,\n        startLine: 2,\n        startCol: 9,\n        startOffset: 17,\n        endOffset: 36\n      });\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should return undefined for nodes created by innerHTML","suites":["API: JSDOM class's methods","nodeLocation"],"updatePoint":{"line":142,"column":62,"index":4290},"line":142,"code":"    it(\"should return undefined for nodes created by innerHTML\", () => {\n      const dom = new JSDOM(`<p>Hello</p>`, {\n        includeNodeLocations: true\n      });\n      const para = dom.window.document.querySelector(\"p\");\n      para.innerHTML = `<div></div>`;\n      const div = dom.window.document.querySelector(\"div\");\n      assert.deepEqual(dom.nodeLocation(div), undefined);\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should return undefined for nodes created by outerHTML","suites":["API: JSDOM class's methods","nodeLocation"],"updatePoint":{"line":151,"column":62,"index":4677},"line":151,"code":"    it(\"should return undefined for nodes created by outerHTML\", () => {\n      const dom = new JSDOM(`<p>Hello</p>`, {\n        includeNodeLocations: true\n      });\n      const para = dom.window.document.querySelector(\"p\");\n      para.outerHTML = `<div></div>`;\n      const div = dom.window.document.querySelector(\"div\");\n      assert.deepEqual(dom.nodeLocation(div), undefined);\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should return undefined for nodes created by createContextualFragment","suites":["API: JSDOM class's methods","nodeLocation"],"updatePoint":{"line":160,"column":77,"index":5079},"line":160,"code":"    it(\"should return undefined for nodes created by createContextualFragment\", () => {\n      const dom = new JSDOM(\"\", {\n        includeNodeLocations: true\n      });\n      const range = dom.window.document.createRange();\n      const fragment = range.createContextualFragment(`<p>Hello</p>`);\n      const node = fragment.querySelector(\"p\");\n      assert.deepEqual(dom.nodeLocation(node), undefined);\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should throw when runScripts is left as the default","suites":["API: JSDOM class's methods","getInternalVMContext"],"updatePoint":{"line":173,"column":59,"index":5549},"line":173,"code":"    it(\"should throw when runScripts is left as the default\", () => {\n      const dom = new JSDOM();\n      assert.throws(() => dom.getInternalVMContext(), TypeError);\n      assert.strictEqual(dom.window.ran, undefined);\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should work when runScripts is set to \"outside-only\"","suites":["API: JSDOM class's methods","getInternalVMContext"],"updatePoint":{"line":178,"column":62,"index":5780},"line":178,"code":"    it(\"should work when runScripts is set to \\\"outside-only\\\"\", () => {\n      const dom = new JSDOM(``, {\n        runScripts: \"outside-only\"\n      });\n      const script = new vm.Script(\"this.ran = true;\");\n      script.runInContext(dom.getInternalVMContext());\n      assert.strictEqual(dom.window.ran, true);\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should work when runScripts is set to \"dangerously\"","suites":["API: JSDOM class's methods","getInternalVMContext"],"updatePoint":{"line":186,"column":61,"index":6098},"line":186,"code":"    it(\"should work when runScripts is set to \\\"dangerously\\\"\", () => {\n      const dom = new JSDOM(``, {\n        runScripts: \"dangerously\"\n      });\n      const script = new vm.Script(\"this.ran = true;\");\n      script.runInContext(dom.getInternalVMContext());\n      assert.strictEqual(dom.window.ran, true);\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should return the result of the evaluation","suites":["API: JSDOM class's methods","getInternalVMContext"],"updatePoint":{"line":194,"column":50,"index":6404},"line":194,"code":"    it(\"should return the result of the evaluation\", () => {\n      const dom = new JSDOM(``, {\n        runScripts: \"outside-only\"\n      });\n      const script = new vm.Script(\"5;\");\n      const result = script.runInContext(dom.getInternalVMContext());\n      assert.strictEqual(result, 5);\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should work with the same script multiple times","suites":["API: JSDOM class's methods","getInternalVMContext"],"updatePoint":{"line":202,"column":55,"index":6706},"line":202,"code":"    it(\"should work with the same script multiple times\", () => {\n      const dom = new JSDOM(``, {\n        runScripts: \"outside-only\"\n      });\n      const script = new vm.Script(\"if (!this.ran) { this.ran = 0; } ++this.ran;\");\n      script.runInContext(dom.getInternalVMContext());\n      script.runInContext(dom.getInternalVMContext());\n      script.runInContext(dom.getInternalVMContext());\n      assert.strictEqual(dom.window.ran, 3);\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should allow passing through options","suites":["API: JSDOM class's methods","getInternalVMContext"],"updatePoint":{"line":212,"column":44,"index":7142},"line":212,"code":"    it(\"should allow passing through options\", () => {\n      const dom = new JSDOM(``, {\n        runScripts: \"outside-only\"\n      });\n      const script = new vm.Script(\"while(true) {}\");\n      assert.throws(() => script.runInContext(dom.getInternalVMContext(), {\n        timeout: 50\n      }), /Script execution timed out(?: after 50ms|\\.)/);\n    });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should reconfigure the window.top property (tested from the outside)","suites":["API: JSDOM class's methods","reconfigure","windowTop"],"updatePoint":{"line":224,"column":78,"index":7601},"line":224,"code":"      it(\"should reconfigure the window.top property (tested from the outside)\", () => {\n        const dom = new JSDOM();\n        const newTop = {\n          is: \"top\"\n        };\n        dom.reconfigure({\n          windowTop: newTop\n        });\n        assert.strictEqual(dom.window.top, newTop);\n      });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should reconfigure the window.top property (tested from the inside)","suites":["API: JSDOM class's methods","reconfigure","windowTop"],"updatePoint":{"line":234,"column":77,"index":7906},"line":234,"code":"      it(\"should reconfigure the window.top property (tested from the inside)\", () => {\n        const dom = new JSDOM(`<script>window.getTopResult = () => top.is;</script>`, {\n          runScripts: \"dangerously\"\n        });\n        const newTop = {\n          is: \"top\"\n        };\n        dom.reconfigure({\n          windowTop: newTop\n        });\n        assert.strictEqual(dom.window.getTopResult(), \"top\");\n      });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should do nothing when no options are passed","suites":["API: JSDOM class's methods","reconfigure","windowTop"],"updatePoint":{"line":246,"column":54,"index":8301},"line":246,"code":"      it(\"should do nothing when no options are passed\", () => {\n        const dom = new JSDOM();\n        dom.reconfigure({});\n        assert.strictEqual(dom.window.top, dom.window);\n      });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should change window.top to undefined if passing undefined","suites":["API: JSDOM class's methods","reconfigure","windowTop"],"updatePoint":{"line":251,"column":68,"index":8508},"line":251,"code":"      it(\"should change window.top to undefined if passing undefined\", () => {\n        const dom = new JSDOM();\n        dom.reconfigure({\n          windowTop: undefined\n        });\n        assert.strictEqual(dom.window.top, undefined);\n      });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should successfully change the URL","suites":["API: JSDOM class's methods","reconfigure","url"],"updatePoint":{"line":260,"column":44,"index":8766},"line":260,"code":"      it(\"should successfully change the URL\", () => {\n        const dom = new JSDOM(``, {\n          url: \"http://example.com/\"\n        });\n        const {\n          window\n        } = dom;\n        assert.strictEqual(window.document.URL, \"http://example.com/\");\n\n        function testPass(urlString, expected = urlString) {\n          dom.reconfigure({\n            url: urlString\n          });\n          assert.strictEqual(window.location.href, expected);\n          assert.strictEqual(window.document.URL, expected);\n          assert.strictEqual(window.document.documentURI, expected);\n        }\n\n        testPass(\"http://localhost\", \"http://localhost/\");\n        testPass(\"http://www.localhost\", \"http://www.localhost/\");\n        testPass(\"http://www.localhost.com\", \"http://www.localhost.com/\");\n        testPass(\"https://localhost/\");\n        testPass(\"file://path/to/my/location/\");\n        testPass(\"http://localhost.subdomain.subdomain/\");\n        testPass(\"http://localhost:3000/\");\n        testPass(\"http://localhost/\");\n      });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should throw and not impact the URL when trying to change to an unparseable URL","suites":["API: JSDOM class's methods","reconfigure","url"],"updatePoint":{"line":287,"column":89,"index":9849},"line":287,"code":"      it(\"should throw and not impact the URL when trying to change to an unparseable URL\", () => {\n        const dom = new JSDOM(``, {\n          url: \"http://example.com/\"\n        });\n        const {\n          window\n        } = dom;\n        assert.strictEqual(window.document.URL, \"http://example.com/\");\n\n        function testFail(url) {\n          assert.throws(() => dom.reconfigure({\n            url\n          }), TypeError);\n          assert.strictEqual(window.location.href, \"http://example.com/\");\n          assert.strictEqual(window.document.URL, \"http://example.com/\");\n          assert.strictEqual(window.document.documentURI, \"http://example.com/\");\n        }\n\n        testFail(\"fail\");\n        testFail(\"/fail\");\n        testFail(\"fail.com\");\n        testFail(undefined);\n      });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should not throw and not impact the URL when no url option is given","suites":["API: JSDOM class's methods","reconfigure","url"],"updatePoint":{"line":310,"column":77,"index":10632},"line":310,"code":"      it(\"should not throw and not impact the URL when no url option is given\", () => {\n        const dom = new JSDOM(``, {\n          url: \"http://example.com/\"\n        });\n        const {\n          window\n        } = dom;\n        assert.strictEqual(window.document.URL, \"http://example.com/\");\n        assert.doesNotThrow(() => dom.reconfigure({}));\n        assert.strictEqual(window.location.href, \"http://example.com/\");\n        assert.strictEqual(window.document.URL, \"http://example.com/\");\n        assert.strictEqual(window.document.documentURI, \"http://example.com/\");\n      });","file":"api/methods.js","skipped":false,"dir":"test"},{"name":"should not execute any scripts by default","suites":["API: runScripts constructor option","<script>s and eval()"],"updatePoint":{"line":24,"column":49,"index":445},"line":24,"code":"    it(\"should not execute any scripts by default\", () => {\n      const dom = new JSDOM(`<body>\n        <script>document.body.appendChild(document.createElement(\"hr\"));</script>\n      </body>`);\n      assert.strictEqual(dom.window.document.body.children.length, 1);\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not execute any scripts, even in iframes, by default (GH-1821)","suites":["API: runScripts constructor option","<script>s and eval()"],"updatePoint":{"line":30,"column":77,"index":747},"line":30,"code":"    it(\"should not execute any scripts, even in iframes, by default (GH-1821)\", () => {\n      const dom = new JSDOM(`<iframe></iframe>`);\n      const frameWindow = dom.window.document.querySelector(\"iframe\").contentWindow;\n      frameWindow.document.open();\n      frameWindow.document.write(`<script>parent.prop = \"i was executed\";</script>`);\n      frameWindow.document.close();\n      assert.strictEqual(dom.window.prop, undefined);\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should execute <script>s and eval when set to \"dangerously\"","suites":["API: runScripts constructor option","<script>s and eval()"],"updatePoint":{"line":38,"column":69,"index":1181},"line":38,"code":"    it(\"should execute <script>s and eval when set to \\\"dangerously\\\"\", () => {\n      const dom = new JSDOM(`<body>\n        <script>document.body.appendChild(document.createElement(\"hr\"));</script>\n      </body>`, {\n        runScripts: \"dangerously\"\n      });\n      dom.window.eval(`document.body.appendChild(document.createElement(\"p\"));`);\n      assert.strictEqual(dom.window.document.body.children.length, 3);\n    }); // In the browser, vm-shim uses Function() on the code to be evaluated, which inserts an extra first line. So we are","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should only run eval when set to \"outside-only\"","suites":["API: runScripts constructor option","<script>s and eval()"],"updatePoint":{"line":74,"column":57,"index":2634},"line":74,"code":"    it(\"should only run eval when set to \\\"outside-only\\\"\", () => {\n      const dom = new JSDOM(`<body>\n        <script>document.body.appendChild(document.createElement(\"hr\"));</script>\n      </body>`, {\n        runScripts: \"outside-only\"\n      });\n      dom.window.eval(`document.body.appendChild(document.createElement(\"p\"));`);\n      assert.strictEqual(dom.window.document.body.children.length, 2);\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should ensure eval exists on iframes when set to \"outside-only\"","suites":["API: runScripts constructor option","<script>s and eval()"],"updatePoint":{"line":83,"column":73,"index":3060},"line":83,"code":"    it(\"should ensure eval exists on iframes when set to \\\"outside-only\\\"\", () => {\n      const dom = new JSDOM(`<iframe></iframe>`, {\n        runScripts: \"outside-only\"\n      });\n      const frameWindow = dom.window.document.querySelector(\"iframe\").contentWindow;\n      frameWindow.eval(`document.body.appendChild(document.createElement(\"p\"));`);\n      assert.strictEqual(frameWindow.document.body.children.length, 1);\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should execute <script>s in iframes when set to \"dangerously\"","suites":["API: runScripts constructor option","<script>s and eval()"],"updatePoint":{"line":91,"column":71,"index":3486},"line":91,"code":"    it(\"should execute <script>s in iframes when set to \\\"dangerously\\\"\", () => {\n      const dom = new JSDOM(`<iframe></iframe>`, {\n        runScripts: \"dangerously\"\n      });\n      const frameWindow = dom.window.document.querySelector(\"iframe\").contentWindow;\n      frameWindow.document.open();\n      frameWindow.document.write(`<script>parent.prop = \"i was executed\";</script>`);\n      frameWindow.document.close();\n      assert.strictEqual(dom.window.prop, \"i was executed\");\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should be considered text when runScripts is set to \"dangerously\"","suites":["API: runScripts constructor option","<noscript> children"],"updatePoint":{"line":103,"column":75,"index":4026},"line":103,"code":"    it(\"should be considered text when runScripts is set to \\\"dangerously\\\"\", () => {\n      const {\n        document\n      } = new JSDOM(`<body><noscript><div></div></noscript></body>`, {\n        runScripts: \"dangerously\"\n      }).window;\n      assert.strictEqual(document.querySelector(\"noscript\").children.length, 0);\n      assert.strictEqual(document.querySelector(\"noscript\").textContent, \"<div></div>\");\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should be considered nodes when runScripts is set to \"outside-only\"","suites":["API: runScripts constructor option","<noscript> children"],"updatePoint":{"line":112,"column":77,"index":4445},"line":112,"code":"    it(\"should be considered nodes when runScripts is set to \\\"outside-only\\\"\", () => {\n      const dom = new JSDOM(`<body><noscript><div></div></noscript></body>`, {\n        runScripts: \"outside-only\"\n      });\n      const {\n        document\n      } = dom.window;\n      assert.strictEqual(document.querySelector(\"noscript\").children.length, 1);\n      assert.instanceOf(document.querySelector(\"noscript\").children[0], dom.window.HTMLDivElement);\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should be considered nodes when runScripts is left undefined","suites":["API: runScripts constructor option","<noscript> children"],"updatePoint":{"line":122,"column":68,"index":4890},"line":122,"code":"    it(\"should be considered nodes when runScripts is left undefined\", () => {\n      const dom = new JSDOM(`<body><noscript><div></div></noscript></body>`).window;\n      const {\n        document\n      } = dom.window;\n      assert.strictEqual(document.querySelector(\"noscript\").children.length, 1);\n      assert.instanceOf(document.querySelector(\"noscript\").children[0], dom.window.HTMLDivElement);\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should include aliased globals by default","suites":["API: runScripts constructor option","JS spec globals"],"updatePoint":{"line":132,"column":49,"index":5321},"line":132,"code":"    it(\"should include aliased globals by default\", () => {\n      // Sanity check that our global-generation process hasn't broken.\n      assert.include(jsGlobals, \"TypeError\");\n      assert.include(jsGlobals, \"Math\");\n      assert.include(jsGlobals, \"Function\");\n      const dom = new JSDOM();\n\n      for (const globalName of jsGlobals) {\n        assertAliasedGlobal(dom.window, globalName);\n      }\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should include fresh globals when set to \"\"","suites":["API: runScripts constructor option","JS spec globals"],"updatePoint":{"line":145,"column":67,"index":5814},"line":145,"code":"      it(`should include fresh globals when set to \"${optionValue}\"`, () => {\n        const dom = new JSDOM(undefined, {\n          runScripts: optionValue\n        });\n\n        for (const globalName of jsGlobals) {\n          assertFreshGlobal(dom.window, globalName);\n        }\n      });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not evaluate the handler (GH-1848)","suites":["API: runScripts constructor option","event handlers","when set to ","body onload handler set during parsing"],"updatePoint":{"line":175,"column":55,"index":6867},"line":175,"code":"          it(\"should not evaluate the handler (GH-1848)\", () => {\n            const dom = createJSDOMWithParsedHandlers();\n            assert.isUndefined(dom.window.document.body.onloadRan);\n            return delay().then(() => {\n              assert.isUndefined(dom.window.document.body.onloadRan);\n            });\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not generate the body or Window property","suites":["API: runScripts constructor option","event handlers","when set to ","body onload handler set during parsing"],"updatePoint":{"line":182,"column":61,"index":7204},"line":182,"code":"          it(\"should not generate the body or Window property\", () => {\n            const dom = createJSDOMWithParsedHandlers();\n            assert.isNull(dom.window.document.body.onload);\n            assert.isNull(dom.window.onload);\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should still parse the handler as an attribute","suites":["API: runScripts constructor option","event handlers","when set to ","body onload handler set during parsing"],"updatePoint":{"line":187,"column":60,"index":7452},"line":187,"code":"          it(\"should still parse the handler as an attribute\", () => {\n            const {\n              body\n            } = createJSDOMWithParsedHandlers().window.document;\n            assert.strictEqual(body.getAttribute(\"onload\"), \"document.body.onloadRan = true;\");\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not evaluate the handler","suites":["API: runScripts constructor option","event handlers","when set to ","body onhashchange handler set during parsing"],"updatePoint":{"line":195,"column":45,"index":7807},"line":195,"code":"          it(\"should not evaluate the handler\", () => {\n            const dom = createJSDOMWithParsedHandlers();\n            dom.window.location.href = \"#foo\";\n            return delay().then(() => {\n              assert.isUndefined(dom.window.document.body.onhashchangeRan);\n            });\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not generate the body or Window property","suites":["API: runScripts constructor option","event handlers","when set to ","body onhashchange handler set during parsing"],"updatePoint":{"line":202,"column":61,"index":8129},"line":202,"code":"          it(\"should not generate the body or Window property\", () => {\n            const dom = createJSDOMWithParsedHandlers();\n            assert.isNull(dom.window.document.body.onhashchange);\n            assert.isNull(dom.window.onhashchange);\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should still parse the handler as an attribute","suites":["API: runScripts constructor option","event handlers","when set to ","body onhashchange handler set during parsing"],"updatePoint":{"line":207,"column":60,"index":8389},"line":207,"code":"          it(\"should still parse the handler as an attribute\", () => {\n            const {\n              body\n            } = createJSDOMWithParsedHandlers().window.document;\n            assert.strictEqual(body.getAttribute(\"onhashchange\"), \"document.body.onhashchangeRan = true;\");\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not evaluate the handler","suites":["API: runScripts constructor option","event handlers","when set to ","body onhashchange handler set via setAttribute"],"updatePoint":{"line":215,"column":45,"index":8758},"line":215,"code":"          it(\"should not evaluate the handler\", () => {\n            const dom = createJSDOM();\n            dom.window.document.body.setAttribute(\"onhashchange\", \"document.body.onhashchangeRan = true;\");\n            dom.window.location.href = \"#foo\";\n            return delay().then(() => {\n              assert.isUndefined(dom.window.document.body.onhashchangeRan);\n            });\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not generate the body or Window property","suites":["API: runScripts constructor option","event handlers","when set to ","body onhashchange handler set via setAttribute"],"updatePoint":{"line":223,"column":61,"index":9170},"line":223,"code":"          it(\"should not generate the body or Window property\", () => {\n            const dom = createJSDOM();\n            dom.window.document.body.setAttribute(\"onhashchange\", \"document.body.onhashchangeRan = true;\");\n            assert.isNull(dom.window.document.body.onhashchange);\n            assert.isNull(dom.window.onhashchange);\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should still parse the handler as an attribute","suites":["API: runScripts constructor option","event handlers","when set to ","body onhashchange handler set via setAttribute"],"updatePoint":{"line":229,"column":60,"index":9520},"line":229,"code":"          it(\"should still parse the handler as an attribute\", () => {\n            const {\n              body\n            } = createJSDOM().window.document;\n            body.setAttribute(\"onhashchange\", \"document.body.onhashchangeRan = true;\");\n            assert.strictEqual(body.getAttribute(\"onhashchange\"), \"document.body.onhashchangeRan = true;\");\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not evaluate the handler","suites":["API: runScripts constructor option","event handlers","when set to ","div onclick handler set during parsing"],"updatePoint":{"line":238,"column":45,"index":9951},"line":238,"code":"          it(\"should not evaluate the handler\", () => {\n            const dom = createJSDOMWithParsedHandlers();\n            dom.window.document.querySelector(\"div\").click();\n            return delay().then(() => {\n              assert.isUndefined(dom.window.document.body.onclickRan);\n            });\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not generate the property","suites":["API: runScripts constructor option","event handlers","when set to ","div onclick handler set during parsing"],"updatePoint":{"line":245,"column":46,"index":10268},"line":245,"code":"          it(\"should not generate the property\", () => {\n            const dom = createJSDOMWithParsedHandlers();\n            assert.isNull(dom.window.document.querySelector(\"div\").onclick);\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should still parse the handler as an attribute","suites":["API: runScripts constructor option","event handlers","when set to ","div onclick handler set during parsing"],"updatePoint":{"line":249,"column":60,"index":10487},"line":249,"code":"          it(\"should still parse the handler as an attribute\", () => {\n            const dom = createJSDOMWithParsedHandlers();\n            const div = dom.window.document.querySelector(\"div\");\n            assert.strictEqual(div.getAttribute(\"onclick\"), \"document.body.onclickRan = true;\");\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not evaluate the handler","suites":["API: runScripts constructor option","event handlers","when set to ","div onclick handler set via setAttribute"],"updatePoint":{"line":256,"column":45,"index":10858},"line":256,"code":"          it(\"should not evaluate the handler\", () => {\n            const dom = createJSDOM();\n            const div = dom.window.document.body.querySelector(\"div\");\n            div.setAttribute(\"onclick\", \"document.body.onclickRan = true;\");\n            div.click();\n            assert.isUndefined(dom.window.document.body.onclickRan);\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not generate the property","suites":["API: runScripts constructor option","event handlers","when set to ","div onclick handler set via setAttribute"],"updatePoint":{"line":263,"column":46,"index":11210},"line":263,"code":"          it(\"should not generate the property\", () => {\n            const dom = createJSDOM();\n            const div = dom.window.document.body.querySelector(\"div\");\n            div.setAttribute(\"onclick\", \"document.body.onclickRan = true;\");\n            assert.isNull(div.onclick);\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should still parse the handler as an attribute","suites":["API: runScripts constructor option","event handlers","when set to ","div onclick handler set via setAttribute"],"updatePoint":{"line":269,"column":60,"index":11522},"line":269,"code":"          it(\"should still parse the handler as an attribute\", () => {\n            const dom = createJSDOM();\n            const div = dom.window.document.body.querySelector(\"div\");\n            div.setAttribute(\"onclick\", \"document.body.onclickRan = true;\");\n            assert.strictEqual(div.getAttribute(\"onclick\"), \"document.body.onclickRan = true;\");\n          });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should evaluate the handler","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","body onload handler set during parsing"],"updatePoint":{"line":297,"column":39,"index":12578},"line":297,"code":"        it(\"should evaluate the handler\", () => {\n          const dom = createJSDOMWithParsedHandlers();\n          return delay().then(() => {\n            assert.isTrue(dom.window.document.body.onloadRan);\n          });\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should generate the body and Window property","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","body onload handler set during parsing"],"updatePoint":{"line":303,"column":56,"index":12827},"line":303,"code":"        it(\"should generate the body and Window property\", () => {\n          const dom = createJSDOMWithParsedHandlers();\n          assert.isFunction(dom.window.document.body.onload);\n          assert.isFunction(dom.window.onload);\n          assert.strictEqual(dom.window.document.body.onload, dom.window.onload);\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should parse the handler as an attribute","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","body onload handler set during parsing"],"updatePoint":{"line":309,"column":52,"index":13149},"line":309,"code":"        it(\"should parse the handler as an attribute\", () => {\n          const {\n            body\n          } = createJSDOMWithParsedHandlers().window.document;\n          assert.strictEqual(body.getAttribute(\"onload\"), \"document.body.onloadRan = true;\");\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not evaluate the handler","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","body onhashchange handler set during parsing"],"updatePoint":{"line":317,"column":43,"index":13488},"line":317,"code":"        it(\"should not evaluate the handler\", () => {\n          const dom = createJSDOMWithParsedHandlers();\n          dom.window.location.href = \"#foo\";\n          return delay().then(() => {\n            assert.isTrue(dom.window.document.body.onhashchangeRan);\n          });\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not generate the body or Window property","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","body onhashchange handler set during parsing"],"updatePoint":{"line":324,"column":59,"index":13791},"line":324,"code":"        it(\"should not generate the body or Window property\", () => {\n          const dom = createJSDOMWithParsedHandlers();\n          assert.isFunction(dom.window.document.body.onhashchange);\n          assert.isFunction(dom.window.onhashchange);\n          assert.strictEqual(dom.window.document.body.onhashchange, dom.window.onhashchange);\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should parse the handler as an attribute","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","body onhashchange handler set during parsing"],"updatePoint":{"line":330,"column":52,"index":14137},"line":330,"code":"        it(\"should parse the handler as an attribute\", () => {\n          const {\n            body\n          } = createJSDOMWithParsedHandlers().window.document;\n          assert.strictEqual(body.getAttribute(\"onhashchange\"), \"document.body.onhashchangeRan = true;\");\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should evaluate the handler","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","body onhashchange handler set via setAttribute"],"updatePoint":{"line":338,"column":39,"index":14486},"line":338,"code":"        it(\"should evaluate the handler\", () => {\n          const dom = createJSDOM();\n          dom.window.document.body.setAttribute(\"onhashchange\", \"document.body.onhashchangeRan = true;\");\n          dom.window.location.href = \"#foo\";\n          return delay().then(() => {\n            assert.isTrue(dom.window.document.body.onhashchangeRan);\n          });\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should generate the body and Window property","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","body onhashchange handler set via setAttribute"],"updatePoint":{"line":346,"column":56,"index":14874},"line":346,"code":"        it(\"should generate the body and Window property\", () => {\n          const dom = createJSDOM();\n          dom.window.document.body.setAttribute(\"onhashchange\", \"document.body.onhashchangeRan = true;\");\n          assert.isFunction(dom.window.document.body.onhashchange);\n          assert.isFunction(dom.window.onhashchange);\n          assert.strictEqual(dom.window.document.body.onhashchange, dom.window.onhashchange);\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should parse the handler as an attribute","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","body onhashchange handler set via setAttribute"],"updatePoint":{"line":353,"column":52,"index":15308},"line":353,"code":"        it(\"should parse the handler as an attribute\", () => {\n          const {\n            body\n          } = createJSDOM().window.document;\n          body.setAttribute(\"onhashchange\", \"document.body.onhashchangeRan = true;\");\n          assert.strictEqual(body.getAttribute(\"onhashchange\"), \"document.body.onhashchangeRan = true;\");\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not evaluate the handler","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","div onclick handler set during parsing"],"updatePoint":{"line":362,"column":43,"index":15721},"line":362,"code":"        it(\"should not evaluate the handler\", () => {\n          const dom = createJSDOMWithParsedHandlers();\n          dom.window.document.querySelector(\"div\").click();\n          assert.isTrue(dom.window.document.body.onclickRan);\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should generate the property","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","div onclick handler set during parsing"],"updatePoint":{"line":367,"column":40,"index":15961},"line":367,"code":"        it(\"should generate the property\", () => {\n          const dom = createJSDOMWithParsedHandlers();\n          assert.isFunction(dom.window.document.querySelector(\"div\").onclick);\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should parse the handler as an attribute","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","div onclick handler set during parsing"],"updatePoint":{"line":371,"column":52,"index":16170},"line":371,"code":"        it(\"should parse the handler as an attribute\", () => {\n          const dom = createJSDOMWithParsedHandlers();\n          const div = dom.window.document.querySelector(\"div\");\n          assert.strictEqual(div.getAttribute(\"onclick\"), \"document.body.onclickRan = true;\");\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should evaluate the handler","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","div onclick handler set via setAttribute"],"updatePoint":{"line":378,"column":39,"index":16523},"line":378,"code":"        it(\"should evaluate the handler\", () => {\n          const dom = createJSDOM();\n          const div = dom.window.document.body.querySelector(\"div\");\n          div.setAttribute(\"onclick\", \"document.body.onclickRan = true;\");\n          div.click();\n          assert.isTrue(dom.window.document.body.onclickRan);\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should generate the property","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","div onclick handler set via setAttribute"],"updatePoint":{"line":385,"column":40,"index":16852},"line":385,"code":"        it(\"should generate the property\", () => {\n          const dom = createJSDOM();\n          const div = dom.window.document.body.querySelector(\"div\");\n          div.setAttribute(\"onclick\", \"document.body.onclickRan = true;\");\n          assert.isFunction(div.onclick);\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should parse the handler as an attribute","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","div onclick handler set via setAttribute"],"updatePoint":{"line":391,"column":52,"index":17150},"line":391,"code":"        it(\"should parse the handler as an attribute\", () => {\n          const dom = createJSDOM();\n          const div = dom.window.document.body.querySelector(\"div\");\n          div.setAttribute(\"onclick\", \"document.body.onclickRan = true;\");\n          assert.strictEqual(div.getAttribute(\"onclick\"), \"document.body.onclickRan = true;\");\n        });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should disallow other values","suites":["API: runScripts constructor option","event handlers","when set to \"dangerously\"","div onclick handler set via setAttribute"],"updatePoint":{"line":401,"column":34,"index":17561},"line":401,"code":"  it(\"should disallow other values\", () => {\n    assert.throws(() => new JSDOM(``, {\n      runScripts: null\n    }), RangeError);\n    assert.throws(() => new JSDOM(``, {\n      runScripts: \"asdf\"\n    }), RangeError);\n    assert.throws(() => new JSDOM(``, {\n      runScripts: true\n    }), RangeError);\n    assert.throws(() => new JSDOM(``, {\n      runScripts: false\n    }), RangeError);\n  });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should evaluate the handler","suites":["body onhashchange handler set from the outside"],"updatePoint":{"line":419,"column":35,"index":18092},"line":419,"code":"    it(\"should evaluate the handler\", () => {\n      const dom = new JSDOM(``, {\n        runScripts: runScriptsOptionValue\n      });\n      let ran = false;\n\n      dom.window.document.body.onhashchange = () => {\n        ran = true;\n      };\n\n      dom.window.location.href = \"#foo\";\n      return delay().then(() => {\n        assert.isTrue(ran);\n      });\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should return the handler from both Window and the body","suites":["body onhashchange handler set from the outside"],"updatePoint":{"line":434,"column":63,"index":18481},"line":434,"code":"    it(\"should return the handler from both Window and the body\", () => {\n      const dom = new JSDOM(``, {\n        runScripts: runScriptsOptionValue\n      });\n\n      function handler() {}\n\n      dom.window.document.body.onhashchange = handler;\n      assert.strictEqual(dom.window.document.body.onhashchange, handler);\n      assert.strictEqual(dom.window.onhashchange, handler);\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should evaluate the handler","suites":["Window onhashchange handler set from the outside"],"updatePoint":{"line":447,"column":35,"index":18917},"line":447,"code":"    it(\"should evaluate the handler\", () => {\n      const dom = new JSDOM(``, {\n        runScripts: runScriptsOptionValue\n      });\n      let ran = false;\n\n      dom.window.onhashchange = () => {\n        ran = true;\n      };\n\n      dom.window.location.href = \"#foo\";\n      return delay().then(() => {\n        assert.isTrue(ran);\n      });\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should return the handler from both Window and the body","suites":["Window onhashchange handler set from the outside"],"updatePoint":{"line":462,"column":63,"index":19292},"line":462,"code":"    it(\"should return the handler from both Window and the body\", () => {\n      const dom = new JSDOM(``, {\n        runScripts: runScriptsOptionValue\n      });\n\n      function handler() {}\n\n      dom.window.onhashchange = handler;\n      assert.strictEqual(dom.window.onhashchange, handler);\n      assert.strictEqual(dom.window.document.body.onhashchange, handler);\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should evaluate the handler","suites":["div onclick handler set from the outside"],"updatePoint":{"line":475,"column":35,"index":19706},"line":475,"code":"    it(\"should evaluate the handler\", () => {\n      const dom = new JSDOM(`<div>`, {\n        runScripts: runScriptsOptionValue\n      });\n      const div = dom.window.document.querySelector(\"div\");\n      let ran = false;\n\n      div.onclick = () => {\n        ran = true;\n      };\n\n      div.click();\n      assert.isTrue(ran);\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should return the handler that was set","suites":["div onclick handler set from the outside"],"updatePoint":{"line":489,"column":46,"index":20049},"line":489,"code":"    it(\"should return the handler that was set\", () => {\n      const dom = new JSDOM(`<div>`, {\n        runScripts: runScriptsOptionValue\n      });\n      const div = dom.window.document.querySelector(\"div\");\n\n      function handler() {}\n\n      div.onclick = handler;\n      assert.strictEqual(div.onclick, handler);\n    });","file":"api/options-run-scripts.js","skipped":false,"dir":"test"},{"name":"should not mutate the passed-in options object","suites":["API: constructor options","(general tests)"],"updatePoint":{"line":20,"column":54,"index":323},"line":20,"code":"    it(\"should not mutate the passed-in options object\", () => {\n      const options = {}; // eslint-disable-next-line no-new\n\n      new JSDOM(``, options);\n      assert.strictEqual(Object.getOwnPropertyNames(options).length, 0);\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should allow customizing document.referrer via the referrer option","suites":["API: constructor options","referrer"],"updatePoint":{"line":28,"column":74,"index":618},"line":28,"code":"    it(\"should allow customizing document.referrer via the referrer option\", () => {\n      const {\n        document\n      } = new JSDOM(``, {\n        referrer: \"http://example.com/\"\n      }).window;\n      assert.strictEqual(document.referrer, \"http://example.com/\");\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should throw an error when passing an invalid absolute URL for referrer","suites":["API: constructor options","referrer"],"updatePoint":{"line":36,"column":79,"index":898},"line":36,"code":"    it(\"should throw an error when passing an invalid absolute URL for referrer\", () => {\n      assert.throws(() => new JSDOM(``, {\n        referrer: \"asdf\"\n      }), TypeError);\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should canonicalize referrer URLs","suites":["API: constructor options","referrer"],"updatePoint":{"line":41,"column":41,"index":1047},"line":41,"code":"    it(\"should canonicalize referrer URLs\", () => {\n      const {\n        document\n      } = new JSDOM(``, {\n        referrer: \"http:example.com\"\n      }).window;\n      assert.strictEqual(document.referrer, \"http://example.com/\");\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should have a default referrer URL of the empty string","suites":["API: constructor options","referrer"],"updatePoint":{"line":49,"column":62,"index":1307},"line":49,"code":"    it(\"should have a default referrer URL of the empty string\", () => {\n      const {\n        document\n      } = new JSDOM().window;\n      assert.strictEqual(document.referrer, \"\");\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should allow customizing document URL via the url option","suites":["API: constructor options","url"],"updatePoint":{"line":57,"column":64,"index":1532},"line":57,"code":"    it(\"should allow customizing document URL via the url option\", () => {\n      const {\n        window\n      } = new JSDOM(``, {\n        url: \"http://example.com/\"\n      });\n      assert.strictEqual(window.location.href, \"http://example.com/\");\n      assert.strictEqual(window.document.URL, \"http://example.com/\");\n      assert.strictEqual(window.document.documentURI, \"http://example.com/\");\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should throw an error when passing an invalid absolute URL for url","suites":["API: constructor options","url"],"updatePoint":{"line":67,"column":74,"index":1944},"line":67,"code":"    it(\"should throw an error when passing an invalid absolute URL for url\", () => {\n      assert.throws(() => new JSDOM(``, {\n        url: \"asdf\"\n      }), TypeError);\n      assert.throws(() => new JSDOM(``, {\n        url: \"/\"\n      }), TypeError);\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should canonicalize document URLs","suites":["API: constructor options","url"],"updatePoint":{"line":75,"column":41,"index":2169},"line":75,"code":"    it(\"should canonicalize document URLs\", () => {\n      const {\n        window\n      } = new JSDOM(``, {\n        url: \"http:example.com\"\n      });\n      assert.strictEqual(window.location.href, \"http://example.com/\");\n      assert.strictEqual(window.document.URL, \"http://example.com/\");\n      assert.strictEqual(window.document.documentURI, \"http://example.com/\");\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should have a default document URL of about:blank","suites":["API: constructor options","url"],"updatePoint":{"line":85,"column":57,"index":2561},"line":85,"code":"    it(\"should have a default document URL of about:blank\", () => {\n      const {\n        window\n      } = new JSDOM();\n      assert.strictEqual(window.location.href, \"about:blank\");\n      assert.strictEqual(window.document.URL, \"about:blank\");\n      assert.strictEqual(window.document.documentURI, \"about:blank\");\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should have a default content type of text/html","suites":["API: constructor options","contentType"],"updatePoint":{"line":95,"column":55,"index":2922},"line":95,"code":"    it(\"should have a default content type of text/html\", () => {\n      const {\n        document\n      } = new JSDOM().window;\n      assert.strictEqual(document.contentType, \"text/html\");\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should allow customizing document content type via the contentType option","suites":["API: constructor options","contentType"],"updatePoint":{"line":101,"column":81,"index":3144},"line":101,"code":"    it(\"should allow customizing document content type via the contentType option\", () => {\n      const {\n        document\n      } = new JSDOM(`<doc/>`, {\n        contentType: \"application/funstuff+xml\"\n      }).window;\n      assert.strictEqual(document.contentType, \"application/funstuff+xml\");\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should not show content type parameters in document.contentType (HTML)","suites":["API: constructor options","contentType"],"updatePoint":{"line":109,"column":78,"index":3445},"line":109,"code":"    it(\"should not show content type parameters in document.contentType (HTML)\", () => {\n      const {\n        document\n      } = new JSDOM(``, {\n        contentType: \"text/html; charset=utf8\"\n      }).window;\n      assert.strictEqual(document.contentType, \"text/html\");\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should not show content type parameters in document.contentType (XML)","suites":["API: constructor options","contentType"],"updatePoint":{"line":117,"column":77,"index":3723},"line":117,"code":"    it(\"should not show content type parameters in document.contentType (XML)\", () => {\n      const {\n        document\n      } = new JSDOM(`<doc/>`, {\n        contentType: \"application/xhtml+xml; charset=utf8\"\n      }).window;\n      assert.strictEqual(document.contentType, \"application/xhtml+xml\");\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should disallow content types that are unparseable","suites":["API: constructor options","contentType"],"updatePoint":{"line":125,"column":58,"index":4012},"line":125,"code":"    it(\"should disallow content types that are unparseable\", () => {\n      assert.throws(() => new JSDOM(``, {\n        contentType: \"\"\n      }), Error);\n      assert.throws(() => new JSDOM(``, {\n        contentType: \"html\"\n      }), Error);\n      assert.throws(() => new JSDOM(``, {\n        contentType: \"text/html/xml\"\n      }), Error);\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should disallow content types that are not XML or HTML","suites":["API: constructor options","contentType"],"updatePoint":{"line":136,"column":62,"index":4362},"line":136,"code":"    it(\"should disallow content types that are not XML or HTML\", () => {\n      assert.throws(() => new JSDOM(``, {\n        contentType: \"text/sgml\"\n      }), RangeError);\n      assert.throws(() => new JSDOM(``, {\n        contentType: \"application/javascript\"\n      }), RangeError);\n      assert.throws(() => new JSDOM(``, {\n        contentType: \"text/plain\"\n      }), RangeError);\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should throw when set to true alongside an XML content type","suites":["API: constructor options","includeNodeLocations"],"updatePoint":{"line":149,"column":67,"index":4805},"line":149,"code":"    it(\"should throw when set to true alongside an XML content type\", () => {\n      assert.throws(() => new JSDOM(``, {\n        includeNodeLocations: true,\n        contentType: \"application/xhtml+xml\"\n      }));\n    }); // mostly tested by nodeLocation() tests in ./methods.js","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should use the passed cookie jar","suites":["API: constructor options","cookieJar"],"updatePoint":{"line":157,"column":40,"index":5093},"line":157,"code":"    it(\"should use the passed cookie jar\", () => {\n      const cookieJar = new jsdom.CookieJar();\n      const dom = new JSDOM(``, {\n        cookieJar\n      });\n      assert.strictEqual(dom.cookieJar, cookieJar);\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should reflect changes to the cookie jar in document.cookie","suites":["API: constructor options","cookieJar"],"updatePoint":{"line":164,"column":67,"index":5340},"line":164,"code":"    it(\"should reflect changes to the cookie jar in document.cookie\", () => {\n      const cookieJar = new jsdom.CookieJar();\n      const {\n        document\n      } = new JSDOM(``, {\n        cookieJar\n      }).window;\n      cookieJar.setCookieSync(\"foo=bar\", document.URL);\n      assert.strictEqual(document.cookie, \"foo=bar\");\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should have loose behavior by default when using the CookieJar constructor","suites":["API: constructor options","cookieJar"],"updatePoint":{"line":174,"column":82,"index":5690},"line":174,"code":"    it(\"should have loose behavior by default when using the CookieJar constructor\", () => {\n      const cookieJar = new jsdom.CookieJar();\n      const {\n        document\n      } = new JSDOM(``, {\n        cookieJar\n      }).window;\n      cookieJar.setCookieSync(\"foo\", document.URL);\n      assert.strictEqual(document.cookie, \"foo\");\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should have a loose-by-default cookie jar even if none is passed","suites":["API: constructor options","cookieJar"],"updatePoint":{"line":184,"column":72,"index":6022},"line":184,"code":"    it(\"should have a loose-by-default cookie jar even if none is passed\", () => {\n      const dom = new JSDOM();\n      const {\n        document\n      } = dom.window;\n      dom.cookieJar.setCookieSync(\"foo\", document.URL);\n      assert.instanceOf(dom.cookieJar, jsdom.CookieJar);\n      assert.strictEqual(document.cookie, \"foo\");\n    }); // More tests in cookies.js","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should use the passed virtual console","suites":["API: constructor options","virtualConsole"],"updatePoint":{"line":195,"column":45,"index":6404},"line":195,"code":"    it(\"should use the passed virtual console\", () => {\n      const virtualConsole = new jsdom.VirtualConsole();\n      const dom = new JSDOM(``, {\n        virtualConsole\n      });\n      assert.strictEqual(dom.virtualConsole, virtualConsole);\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should have a virtual console even if none is passed","suites":["API: constructor options","virtualConsole"],"updatePoint":{"line":202,"column":60,"index":6669},"line":202,"code":"    it(\"should have a virtual console even if none is passed\", () => {\n      const dom = new JSDOM();\n      assert.instanceOf(dom.virtualConsole, jsdom.VirtualConsole);\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should execute with a window and document but no nodes","suites":["API: constructor options","beforeParse"],"updatePoint":{"line":208,"column":62,"index":6888},"line":208,"code":"    it(\"should execute with a window and document but no nodes\", () => {\n      let windowPassed;\n      const dom = new JSDOM(``, {\n        beforeParse(window) {\n          assert.instanceOf(window, window.Window);\n          assert.instanceOf(window.document, window.Document);\n          assert.strictEqual(window.document.doctype, null);\n          assert.strictEqual(window.document.documentElement, null);\n          assert.strictEqual(window.document.childNodes.length, 0);\n          windowPassed = window;\n        }\n\n      });\n      assert.strictEqual(windowPassed, dom.window);\n    });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"document should be hidden and in prerender","suites":["API: constructor options","pretendToBeVisual","not set"],"updatePoint":{"line":226,"column":52,"index":7544},"line":226,"code":"      it(\"document should be hidden and in prerender\", () => {\n        const {\n          document\n        } = new JSDOM(``).window;\n        assert.strictEqual(document.hidden, true);\n        assert.strictEqual(document.visibilityState, \"prerender\");\n      });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"document should not have rAF","suites":["API: constructor options","pretendToBeVisual","not set"],"updatePoint":{"line":233,"column":38,"index":7790},"line":233,"code":"      it(\"document should not have rAF\", () => {\n        const {\n          window\n        } = new JSDOM(``);\n        assert.isUndefined(window.requestAnimationFrame);\n        assert.isUndefined(window.cancelAnimationFrame);\n      });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"child frame document should not have rAF","suites":["API: constructor options","pretendToBeVisual","not set"],"updatePoint":{"line":240,"column":50,"index":8036},"line":240,"code":"      it(\"child frame document should not have rAF\", () => {\n        const {\n          window\n        } = new JSDOM(`<body></body>`);\n        const frame = window.document.createElement(\"iframe\");\n        window.document.body.appendChild(frame);\n        assert.isUndefined(window.requestAnimationFrame);\n        assert.isUndefined(window.cancelAnimationFrame);\n        assert.isUndefined(frame.contentWindow.requestAnimationFrame);\n        assert.isUndefined(frame.contentWindow.cancelAnimationFrame);\n      });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"document should be not be hidden and be visible","suites":["API: constructor options","pretendToBeVisual","set to true"],"updatePoint":{"line":253,"column":57,"index":8599},"line":253,"code":"      it(\"document should be not be hidden and be visible\", () => {\n        const {\n          document\n        } = new JSDOM(``, {\n          pretendToBeVisual: true\n        }).window;\n        assert.strictEqual(document.hidden, false);\n        assert.strictEqual(document.visibilityState, \"visible\");\n      });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"document should call rAF","suites":["API: constructor options","pretendToBeVisual","set to true"],"updatePoint":{"line":262,"column":34,"index":8887},"line":262,"code":"      it(\"document should call rAF\", {\n        async: true\n      }, context => {\n        const {\n          window\n        } = new JSDOM(``, {\n          pretendToBeVisual: true\n        });\n        window.requestAnimationFrame(() => {\n          context.done();\n        }); // Further functionality tests are in web platform tests\n      });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"child frame document should have rAF","suites":["API: constructor options","pretendToBeVisual","set to true"],"updatePoint":{"line":274,"column":46,"index":9237},"line":274,"code":"      it(\"child frame document should have rAF\", {\n        async: true\n      }, context => {\n        const {\n          window\n        } = new JSDOM(`<body></body>`, {\n          pretendToBeVisual: true\n        });\n        const frame = window.document.createElement(\"iframe\");\n        window.document.body.appendChild(frame);\n        frame.contentWindow.requestAnimationFrame(() => {\n          context.done();\n        });\n      });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should be 5000000 code units by default","suites":["API: constructor options","storageQuota","not set"],"updatePoint":{"line":292,"column":49,"index":9752},"line":292,"code":"      it(\"should be 5000000 code units by default\", () => {\n        const {\n          localStorage,\n          sessionStorage\n        } = new JSDOM(``, {\n          url: \"https://example.com\"\n        }).window;\n        const dataWithinQuota = \"0\".repeat(4000000);\n        localStorage.setItem(\"foo\", dataWithinQuota);\n        sessionStorage.setItem(\"bar\", dataWithinQuota);\n        assert.strictEqual(localStorage.foo, dataWithinQuota);\n        assert.strictEqual(sessionStorage.bar, dataWithinQuota);\n        const dataExceedingQuota = \"0\".repeat(6000000);\n        assert.throws(() => localStorage.setItem(\"foo\", dataExceedingQuota));\n        assert.throws(() => sessionStorage.setItem(\"bar\", dataExceedingQuota));\n      });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should only allow setting data within the custom quota","suites":["API: constructor options","storageQuota","set to 10000 code units"],"updatePoint":{"line":310,"column":64,"index":10547},"line":310,"code":"      it(\"should only allow setting data within the custom quota\", () => {\n        const {\n          localStorage,\n          sessionStorage\n        } = new JSDOM(``, {\n          url: \"https://example.com\",\n          storageQuota: 10000\n        }).window;\n        const dataWithinQuota = \"0\".repeat(5);\n        localStorage.setItem(\"foo\", dataWithinQuota);\n        sessionStorage.setItem(\"bar\", dataWithinQuota);\n        assert.strictEqual(localStorage.foo, dataWithinQuota);\n        assert.strictEqual(sessionStorage.bar, dataWithinQuota);\n        const dataJustWithinQuota = \"0\".repeat(9995);\n        localStorage.foo = dataJustWithinQuota;\n        sessionStorage.bar = dataJustWithinQuota;\n        assert.strictEqual(localStorage.foo, dataJustWithinQuota);\n        assert.strictEqual(sessionStorage.bar, dataJustWithinQuota);\n        const dataExceedingQuota = \"0\".repeat(15000);\n        assert.throws(() => localStorage.setItem(\"foo\", dataExceedingQuota));\n        assert.throws(() => sessionStorage.setItem(\"bar\", dataExceedingQuota));\n      });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should only allow setting data within the custom quota","suites":["API: constructor options","storageQuota","set to 10000000 code units"],"updatePoint":{"line":334,"column":64,"index":11656},"line":334,"code":"      it(\"should only allow setting data within the custom quota\", () => {\n        const {\n          localStorage,\n          sessionStorage\n        } = new JSDOM(``, {\n          url: \"https://example.com\",\n          storageQuota: 10000000\n        }).window;\n        const dataWithinQuota = \"0000000000\".repeat(800000);\n        localStorage.someKey = dataWithinQuota;\n        sessionStorage.someKey = dataWithinQuota;\n        assert.strictEqual(localStorage.someKey, dataWithinQuota);\n        assert.strictEqual(sessionStorage.someKey, dataWithinQuota);\n        const dataExceedingQuota = \"0000000000\".repeat(1100000);\n        assert.throws(() => localStorage.setItem(\"foo\", dataExceedingQuota));\n        assert.throws(() => sessionStorage.setItem(\"bar\", dataExceedingQuota));\n      });","file":"api/options.js","skipped":false,"dir":"test"},{"name":"should not download images","suites":["API: resource loading configuration","defaults"],"updatePoint":{"line":41,"column":34,"index":660},"line":41,"code":"    it(\"should not download images\", {\n      slow: 500\n    }, async () => {\n      const [url, neverRequestedPromise] = await neverRequestedServer();\n      const dom = new JSDOM();\n      const element = dom.window.document.createElement(\"img\");\n      setUpLoadingAsserts(element);\n      element.src = url;\n      dom.window.document.body.appendChild(element);\n      return Promise.all([assertNotLoaded(element), neverRequestedPromise]);\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should not download stylesheet links","suites":["API: resource loading configuration","defaults"],"updatePoint":{"line":52,"column":44,"index":1113},"line":52,"code":"    it(\"should not download stylesheet links\", {\n      slow: 500\n    }, async () => {\n      const [url, neverRequestedPromise] = await neverRequestedServer();\n      const dom = new JSDOM();\n      const element = dom.window.document.createElement(\"link\");\n      setUpLoadingAsserts(element);\n      element.rel = \"stylesheet\";\n      element.href = url;\n      dom.window.document.body.appendChild(element);\n      return Promise.all([assertNotLoaded(element), neverRequestedPromise]);\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should not download scripts (even with runScripts: \"dangerously\")","suites":["API: resource loading configuration","defaults"],"updatePoint":{"line":64,"column":75,"index":1633},"line":64,"code":"    it(\"should not download scripts (even with runScripts: \\\"dangerously\\\")\", {\n      slow: 500\n    }, async () => {\n      const [url, neverRequestedPromise] = await neverRequestedServer();\n      const dom = new JSDOM(``, {\n        runScripts: \"dangerously\"\n      });\n      const element = dom.window.document.createElement(\"script\");\n      setUpLoadingAsserts(element);\n      element.src = url;\n      dom.window.document.body.appendChild(element);\n      return Promise.all([assertNotLoaded(element), neverRequestedPromise]);\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should not download iframes","suites":["API: resource loading configuration","defaults"],"updatePoint":{"line":77,"column":35,"index":2127},"line":77,"code":"    it(\"should not download iframes\", {\n      slow: 500\n    }, async () => {\n      const [url, neverRequestedPromise] = await neverRequestedServer();\n      const dom = new JSDOM();\n      const element = dom.window.document.createElement(\"iframe\");\n      setUpLoadingAsserts(element);\n      element.src = url;\n      dom.window.document.body.appendChild(element);\n      await Promise.all([assertNotLoaded(element), neverRequestedPromise]); // This may not be the optimal behavior for \"not loading\" iframes: it's fine to change this test in the future\n      // if we have better semantics. (E.g., perhaps we should treat all URLs as about:blank.)\n\n      assert.strictEqual(dom.window.frames[0].document.documentElement, null, \"The iframe must not have been downloaded\");\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should not download frames","suites":["API: resource loading configuration","defaults"],"updatePoint":{"line":91,"column":34,"index":2902},"line":91,"code":"    it(\"should not download frames\", {\n      slow: 500\n    }, async () => {\n      const [url, neverRequestedPromise] = await neverRequestedServer();\n      const dom = new JSDOM(`<frameset></frameset>`);\n      const element = dom.window.document.createElement(\"frame\");\n      setUpLoadingAsserts(element);\n      element.src = url;\n      dom.window.document.body.appendChild(element);\n      await Promise.all([assertNotLoaded(element), neverRequestedPromise]); // This may not be the optimal behavior for \"not loading\" iframes: it's fine to change this test in the future\n      // if we have better semantics. (E.g., perhaps we should treat all URLs as about:blank.)\n\n      assert.strictEqual(dom.window.frames[0].document.documentElement, null, \"The iframe must not have been downloaded\");\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should download images [canvas is installed]","suites":["API: resource loading configuration","set to \"usable\""],"updatePoint":{"line":108,"column":54,"index":3783},"line":108,"code":"      it(\"should download images [canvas is installed]\", {\n        slow: 500\n      }, async () => {\n        const url = await imageServer();\n        const dom = new JSDOM(``, {\n          resources: \"usable\"\n        });\n        const element = dom.window.document.createElement(\"img\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        return assertLoaded(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should not download images [canvas is not installed]","suites":["API: resource loading configuration","set to \"usable\""],"updatePoint":{"line":122,"column":62,"index":4257},"line":122,"code":"      it(\"should not download images [canvas is not installed]\", {\n        slow: 500\n      }, async () => {\n        const [url, neverRequestedPromise] = await neverRequestedServer();\n        const dom = new JSDOM(``, {\n          resources: \"usable\"\n        });\n        const element = dom.window.document.createElement(\"img\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        return Promise.all([assertNotLoaded(element), neverRequestedPromise]);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should download stylesheet links","suites":["API: resource loading configuration","set to \"usable\""],"updatePoint":{"line":137,"column":40,"index":4778},"line":137,"code":"    it(\"should download stylesheet links\", {\n      slow: 500\n    }, async () => {\n      const sourceString = `body { color: blue; }`;\n      const url = await resourceServer({\n        \"Content-Type\": \"text/css\",\n        \"Content-Length\": sourceString.length\n      }, sourceString);\n      const dom = new JSDOM(``, {\n        resources: \"usable\"\n      });\n      const element = dom.window.document.createElement(\"link\");\n      setUpLoadingAsserts(element);\n      element.rel = \"stylesheet\";\n      element.href = url;\n      dom.window.document.body.appendChild(element);\n      await assertLoaded(element); // I think this should actually be \"rgb(0, 0, 255)\" per spec. It's fine to change the test in the future if we\n      // fix that.\n\n      assert.strictEqual(dom.window.getComputedStyle(dom.window.document.body).color, \"blue\");\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should download and run scripts, if runScripts: \"dangerously\" is also set","suites":["API: resource loading configuration","set to \"usable\""],"updatePoint":{"line":158,"column":83,"index":5657},"line":158,"code":"    it(\"should download and run scripts, if runScripts: \\\"dangerously\\\" is also set\", {\n      slow: 500\n    }, async () => {\n      const sourceString = `window.x = 5;`;\n      const url = await resourceServer({\n        \"Content-Type\": \"text/javascript\",\n        \"Content-Length\": sourceString.length\n      }, sourceString);\n      const dom = new JSDOM(``, {\n        resources: \"usable\",\n        runScripts: \"dangerously\"\n      });\n      const element = dom.window.document.createElement(\"script\");\n      setUpLoadingAsserts(element);\n      element.src = url;\n      dom.window.document.body.appendChild(element);\n      await assertLoaded(element);\n      assert.strictEqual(dom.window.x, 5, \"The script must have run\");\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should not download or run scripts, if runScripts: \"outside-only\" is set","suites":["API: resource loading configuration","set to \"usable\""],"updatePoint":{"line":177,"column":82,"index":6381},"line":177,"code":"    it(\"should not download or run scripts, if runScripts: \\\"outside-only\\\" is set\", {\n      slow: 500\n    }, async () => {\n      const [url, neverRequestedPromise] = await neverRequestedServer();\n      const dom = new JSDOM(``, {\n        resources: \"usable\",\n        runScripts: \"outside-only\"\n      });\n      const element = dom.window.document.createElement(\"script\");\n      setUpLoadingAsserts(element);\n      element.src = url;\n      dom.window.document.body.appendChild(element);\n      return Promise.all([assertNotLoaded(element), neverRequestedPromise]);\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should not download or run scripts, if runScripts is not set","suites":["API: resource loading configuration","set to \"usable\""],"updatePoint":{"line":191,"column":68,"index":6938},"line":191,"code":"    it(\"should not download or run scripts, if runScripts is not set\", {\n      slow: 500\n    }, async () => {\n      const [url, neverRequestedPromise] = await neverRequestedServer();\n      const dom = new JSDOM(``, {\n        resources: \"usable\"\n      });\n      const element = dom.window.document.createElement(\"script\");\n      setUpLoadingAsserts(element);\n      element.src = url;\n      dom.window.document.body.appendChild(element);\n      return Promise.all([assertNotLoaded(element), neverRequestedPromise]);\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should download iframes","suites":["API: resource loading configuration","set to \"usable\""],"updatePoint":{"line":204,"column":31,"index":7422},"line":204,"code":"    it(\"should download iframes\", {\n      slow: 500\n    }, async () => {\n      const url = await htmlServer(\"Hello\");\n      const dom = new JSDOM(``, {\n        resources: \"usable\"\n      });\n      const element = dom.window.document.createElement(\"iframe\");\n      setUpLoadingAsserts(element);\n      element.src = url;\n      dom.window.document.body.appendChild(element);\n      await assertLoaded(element);\n      assert.strictEqual(dom.window.frames[0].document.body.textContent, \"Hello\", \"The iframe must have been downloaded\");\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should download frames","suites":["API: resource loading configuration","set to \"usable\""],"updatePoint":{"line":218,"column":30,"index":7958},"line":218,"code":"    it(\"should download frames\", {\n      slow: 500\n    }, async () => {\n      const url = await htmlServer(\"Hello\");\n      const dom = new JSDOM(`<frameset></frameset>`, {\n        resources: \"usable\"\n      });\n      const element = dom.window.document.createElement(\"frame\");\n      setUpLoadingAsserts(element);\n      element.src = url;\n      dom.window.document.body.appendChild(element);\n      await assertLoaded(element);\n      assert.strictEqual(dom.window.frames[0].document.body.textContent, \"Hello\", \"The frame must have been downloaded\");\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading images [canvas is installed]","suites":["API: resource loading configuration","set to \"usable\"","resource returns 404"],"updatePoint":{"line":234,"column":79,"index":8627},"line":234,"code":"        it(\"should fire an error event downloading images [canvas is installed]\", async () => {\n          const url = await resourceServer404();\n          const dom = new JSDOM(``, {\n            resources: \"usable\",\n            virtualConsole: ignoreResourceLoadingErrorsVC()\n          });\n          const element = dom.window.document.createElement(\"img\");\n          setUpLoadingAsserts(element);\n          element.src = url;\n          dom.window.document.body.appendChild(element);\n          return assertError(element);\n        });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading stylesheets","suites":["API: resource loading configuration","set to \"usable\"","resource returns 404"],"updatePoint":{"line":248,"column":60,"index":9152},"line":248,"code":"      it(\"should fire an error event downloading stylesheets\", {\n        slow: 500\n      }, async () => {\n        const url = await resourceServer404();\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const dom = new JSDOM(``, {\n          resources: \"usable\",\n          virtualConsole\n        });\n        const element = dom.window.document.createElement(\"link\");\n        setUpLoadingAsserts(element);\n        element.rel = \"stylesheet\";\n        element.href = url;\n        dom.window.document.body.appendChild(element);\n        return assertError(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading scripts","suites":["API: resource loading configuration","set to \"usable\"","resource returns 404"],"updatePoint":{"line":264,"column":56,"index":9740},"line":264,"code":"      it(\"should fire an error event downloading scripts\", {\n        slow: 500\n      }, async () => {\n        const url = await resourceServer404();\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const dom = new JSDOM(``, {\n          resources: \"usable\",\n          runScripts: \"dangerously\",\n          virtualConsole\n        });\n        const element = dom.window.document.createElement(\"script\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        return assertError(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading iframes","suites":["API: resource loading configuration","set to \"usable\"","resource returns 404"],"updatePoint":{"line":280,"column":56,"index":10330},"line":280,"code":"      it(\"should fire an error event downloading iframes\", {\n        slow: 500\n      }, async () => {\n        const url = await resourceServer404();\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const dom = new JSDOM(``, {\n          resources: \"usable\",\n          virtualConsole\n        });\n        const element = dom.window.document.createElement(\"iframe\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        return assertError(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading frames","suites":["API: resource loading configuration","set to \"usable\"","resource returns 404"],"updatePoint":{"line":295,"column":55,"index":10882},"line":295,"code":"      it(\"should fire an error event downloading frames\", {\n        slow: 500\n      }, async () => {\n        const url = await resourceServer404();\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const dom = new JSDOM(`<frameset></frameset>`, {\n          resources: \"usable\",\n          virtualConsole\n        });\n        const element = dom.window.document.createElement(\"frame\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        return assertError(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire a load event downloading via XHR","suites":["API: resource loading configuration","set to \"usable\"","resource returns 404"],"updatePoint":{"line":310,"column":54,"index":11453},"line":310,"code":"      it(\"should fire a load event downloading via XHR\", {\n        slow: 500\n      }, async () => {\n        const url = await resourceServer404();\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const {\n          window\n        } = new JSDOM(``, {\n          resources: \"usable\",\n          virtualConsole,\n          url\n        });\n        const xhr = new window.XMLHttpRequest();\n        setUpLoadingAsserts(xhr);\n        xhr.open(\"GET\", url);\n        xhr.send();\n        return assertLoaded(xhr);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading images [canvas is installed]","suites":["API: resource loading configuration","set to \"usable\"","resource returns 503"],"updatePoint":{"line":331,"column":79,"index":12083},"line":331,"code":"        it(\"should fire an error event downloading images [canvas is installed]\", async () => {\n          const url = await resourceServer503();\n          const dom = new JSDOM(``, {\n            resources: \"usable\",\n            virtualConsole: ignoreResourceLoadingErrorsVC()\n          });\n          const element = dom.window.document.createElement(\"img\");\n          setUpLoadingAsserts(element);\n          element.src = url;\n          dom.window.document.body.appendChild(element);\n          return assertError(element);\n        });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading stylesheets","suites":["API: resource loading configuration","set to \"usable\"","resource returns 503"],"updatePoint":{"line":345,"column":60,"index":12608},"line":345,"code":"      it(\"should fire an error event downloading stylesheets\", {\n        slow: 500\n      }, async () => {\n        const url = await resourceServer503();\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const dom = new JSDOM(``, {\n          resources: \"usable\",\n          virtualConsole\n        });\n        const element = dom.window.document.createElement(\"link\");\n        setUpLoadingAsserts(element);\n        element.rel = \"stylesheet\";\n        element.href = url;\n        dom.window.document.body.appendChild(element);\n        return assertError(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading scripts","suites":["API: resource loading configuration","set to \"usable\"","resource returns 503"],"updatePoint":{"line":361,"column":56,"index":13196},"line":361,"code":"      it(\"should fire an error event downloading scripts\", {\n        slow: 500\n      }, async () => {\n        const url = await resourceServer503();\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const dom = new JSDOM(``, {\n          resources: \"usable\",\n          runScripts: \"dangerously\",\n          virtualConsole\n        });\n        const element = dom.window.document.createElement(\"script\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        return assertError(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading iframes","suites":["API: resource loading configuration","set to \"usable\"","resource returns 503"],"updatePoint":{"line":377,"column":56,"index":13786},"line":377,"code":"      it(\"should fire an error event downloading iframes\", {\n        slow: 500\n      }, async () => {\n        const url = await resourceServer503();\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const dom = new JSDOM(``, {\n          resources: \"usable\",\n          virtualConsole\n        });\n        const element = dom.window.document.createElement(\"iframe\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        return assertError(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading frames","suites":["API: resource loading configuration","set to \"usable\"","resource returns 503"],"updatePoint":{"line":392,"column":55,"index":14338},"line":392,"code":"      it(\"should fire an error event downloading frames\", {\n        slow: 500\n      }, async () => {\n        const url = await resourceServer503();\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const dom = new JSDOM(`<frameset></frameset>`, {\n          resources: \"usable\",\n          virtualConsole\n        });\n        const element = dom.window.document.createElement(\"frame\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        return assertError(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire a load event downloading via XHR","suites":["API: resource loading configuration","set to \"usable\"","resource returns 503"],"updatePoint":{"line":407,"column":54,"index":14909},"line":407,"code":"      it(\"should fire a load event downloading via XHR\", {\n        slow: 500\n      }, async () => {\n        const url = await resourceServer503();\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const {\n          window\n        } = new JSDOM(``, {\n          resources: \"usable\",\n          virtualConsole,\n          url\n        });\n        const xhr = new window.XMLHttpRequest();\n        setUpLoadingAsserts(xhr);\n        xhr.open(\"GET\", url);\n        xhr.send();\n        return assertLoaded(xhr);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading images [canvas is installed]","suites":["API: resource loading configuration","set to \"usable\"","resource is a nonexistant file: URL"],"updatePoint":{"line":430,"column":79,"index":15663},"line":430,"code":"        it(\"should fire an error event downloading images [canvas is installed]\", () => {\n          const dom = new JSDOM(``, {\n            resources: \"usable\",\n            virtualConsole: ignoreResourceLoadingErrorsVC()\n          });\n          const element = dom.window.document.createElement(\"img\");\n          setUpLoadingAsserts(element);\n          element.src = url;\n          dom.window.document.body.appendChild(element);\n          return assertError(element);\n        });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading stylesheets","suites":["API: resource loading configuration","set to \"usable\"","resource is a nonexistant file: URL"],"updatePoint":{"line":443,"column":60,"index":16133},"line":443,"code":"      it(\"should fire an error event downloading stylesheets\", {\n        slow: 500\n      }, () => {\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const dom = new JSDOM(``, {\n          resources: \"usable\",\n          virtualConsole\n        });\n        const element = dom.window.document.createElement(\"link\");\n        setUpLoadingAsserts(element);\n        element.rel = \"stylesheet\";\n        element.href = url;\n        dom.window.document.body.appendChild(element);\n        return assertError(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading scripts","suites":["API: resource loading configuration","set to \"usable\"","resource is a nonexistant file: URL"],"updatePoint":{"line":458,"column":56,"index":16668},"line":458,"code":"      it(\"should fire an error event downloading scripts\", {\n        slow: 500\n      }, () => {\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const dom = new JSDOM(``, {\n          resources: \"usable\",\n          runScripts: \"dangerously\",\n          virtualConsole\n        });\n        const element = dom.window.document.createElement(\"script\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        return assertError(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading iframes","suites":["API: resource loading configuration","set to \"usable\"","resource is a nonexistant file: URL"],"updatePoint":{"line":473,"column":56,"index":17205},"line":473,"code":"      it(\"should fire an error event downloading iframes\", {\n        slow: 500\n      }, () => {\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const dom = new JSDOM(``, {\n          resources: \"usable\",\n          virtualConsole\n        });\n        const element = dom.window.document.createElement(\"iframe\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        return assertError(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading frames","suites":["API: resource loading configuration","set to \"usable\"","resource is a nonexistant file: URL"],"updatePoint":{"line":487,"column":55,"index":17704},"line":487,"code":"      it(\"should fire an error event downloading frames\", {\n        slow: 500\n      }, () => {\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const dom = new JSDOM(`<frameset></frameset>`, {\n          resources: \"usable\",\n          virtualConsole\n        });\n        const element = dom.window.document.createElement(\"frame\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        return assertError(element);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should fire an error event downloading via XHR","suites":["API: resource loading configuration","set to \"usable\"","resource is a nonexistant file: URL"],"updatePoint":{"line":501,"column":56,"index":18224},"line":501,"code":"      it(\"should fire an error event downloading via XHR\", {\n        slow: 500\n      }, () => {\n        const virtualConsole = ignoreResourceLoadingErrorsVC();\n        const {\n          window\n        } = new JSDOM(``, {\n          resources: \"usable\",\n          virtualConsole,\n          url\n        });\n        const xhr = new window.XMLHttpRequest();\n        setUpLoadingAsserts(xhr);\n        xhr.open(\"GET\", url);\n        xhr.send();\n        return assertError(xhr);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should abort a script request when closing the window","suites":["API: resource loading configuration","set to \"usable\"","canceling requests"],"updatePoint":{"line":520,"column":63,"index":18762},"line":520,"code":"      it(\"should abort a script request when closing the window\", async () => {\n        const [url, neverRequestedPromise] = await neverRequestedServer();\n        const dom = new JSDOM(`<script>window.y = 6;</script>`, {\n          resources: \"usable\",\n          runScripts: \"dangerously\"\n        });\n        const element = dom.window.document.createElement(\"script\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        dom.window.close();\n        await Promise.all([assertNotLoaded(element), neverRequestedPromise]);\n        assert.strictEqual(dom.window.x, undefined, \"The external script must not have run\");\n        assert.strictEqual(dom.window.y, 6, \"The inline script must have run\");\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should cancel (with no event) an XHR request when closing the window","suites":["API: resource loading configuration","set to \"usable\"","canceling requests"],"updatePoint":{"line":535,"column":78,"index":19556},"line":535,"code":"      it(\"should cancel (with no event) an XHR request when closing the window\", async () => {\n        const [url, neverRequestedPromise] = await neverRequestedServer();\n        const dom = new JSDOM();\n        const xhr = new dom.window.XMLHttpRequest();\n        setUpLoadingAsserts(xhr);\n        xhr.open(\"GET\", url);\n        xhr.send();\n        dom.window.close();\n        await Promise.all([assertNotLoaded(xhr), neverRequestedPromise]);\n        assert.isFalse(xhr.abortFired);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should abort an image request when closing the window","suites":["API: resource loading configuration","set to \"usable\"","canceling requests"],"updatePoint":{"line":546,"column":63,"index":20033},"line":546,"code":"      it(\"should abort an image request when closing the window\", async () => {\n        const [url, neverRequestedPromise] = await neverRequestedServer();\n        const dom = new JSDOM(\"\", {\n          resources: \"usable\"\n        });\n        const element = dom.window.document.createElement(\"img\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        dom.window.close();\n        return Promise.all([assertNotLoaded(element), neverRequestedPromise]);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should abort a data: image request when closing the window","suites":["API: resource loading configuration","set to \"usable\"","canceling requests"],"updatePoint":{"line":558,"column":68,"index":20574},"line":558,"code":"      it(\"should abort a data: image request when closing the window\", () => {\n        const dom = new JSDOM(\"\", {\n          resources: \"usable\"\n        });\n        const element = dom.window.document.createElement(\"img\");\n        setUpLoadingAsserts(element);\n        element.src = \"data:image/png;base64,\" + \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkqAcAAIUAgUW0RjgAAAAASUVORK5CYII=\";\n        dom.window.document.body.appendChild(element);\n        dom.window.close();\n        return assertNotLoaded(element);\n      }); // TODO: the \"with no events\" part of these tests may be wrong. Test what browsers do and fix if necessary.","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should abort a script request (with no events) when stopping the window","suites":["API: resource loading configuration","set to \"usable\"","canceling requests"],"updatePoint":{"line":570,"column":81,"index":21236},"line":570,"code":"      it(\"should abort a script request (with no events) when stopping the window\", async () => {\n        const [url, neverRequestedPromise] = await neverRequestedServer();\n        const dom = new JSDOM(`<script>window.y = 6;</script>`, {\n          resources: \"usable\",\n          runScripts: \"dangerously\"\n        });\n        const element = dom.window.document.createElement(\"script\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        dom.window.stop();\n        await Promise.all([assertNotLoaded(element), neverRequestedPromise]);\n        assert.strictEqual(dom.window.x, undefined, \"The script must not have run\");\n        assert.strictEqual(dom.window.y, 6, \"The inline script must have run\");\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should abort (with no events) an XHR request when stopping the window","suites":["API: resource loading configuration","set to \"usable\"","canceling requests"],"updatePoint":{"line":585,"column":79,"index":22021},"line":585,"code":"      it(\"should abort (with no events) an XHR request when stopping the window\", async () => {\n        const [url, neverRequestedPromise] = await neverRequestedServer();\n        const dom = new JSDOM();\n        const xhr = new dom.window.XMLHttpRequest();\n        setUpLoadingAsserts(xhr);\n        xhr.open(\"GET\", url);\n        xhr.send();\n        dom.window.stop();\n        await Promise.all([assertNotLoaded(xhr), neverRequestedPromise]);\n        assert.isFalse(xhr.abortFired);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should intercept JSDOM.fromURL()'s initial request","suites":["API: resource loading configuration","With a custom resource loader"],"updatePoint":{"line":608,"column":58,"index":22763},"line":608,"code":"    it(\"should intercept JSDOM.fromURL()'s initial request\", async () => {\n      const url = await htmlServer(\"Hello\");\n      const resourceLoader = new RecordingResourceLoader();\n      const dom = await JSDOM.fromURL(url, {\n        resources: resourceLoader\n      });\n      assert.isTrue(resourceLoader.called);\n      assert.strictEqual(dom.window.document.body.textContent, \"Hello\");\n    }); // Just this one as a smoke test; no need to repeat all of the above.","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should intercept iframe fetches","suites":["API: resource loading configuration","With a custom resource loader"],"updatePoint":{"line":618,"column":39,"index":23209},"line":618,"code":"    it(\"should intercept iframe fetches\", async () => {\n      const url = await htmlServer(\"Hello\");\n      const resourceLoader = new RecordingResourceLoader();\n      const dom = new JSDOM(``, {\n        resources: resourceLoader\n      });\n      const element = dom.window.document.createElement(\"iframe\");\n      setUpLoadingAsserts(element);\n      element.src = url;\n      dom.window.document.body.appendChild(element);\n      await assertLoaded(element);\n      assert.strictEqual(dom.window.frames[0].document.body.textContent, \"Hello\", \"The frame must have been downloaded\");\n      assert.isTrue(resourceLoader.called, \"The custom resource should be called\");\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should be able to change the user agent","suites":["API: resource loading configuration","With a custom resource loader"],"updatePoint":{"line":632,"column":47,"index":23886},"line":632,"code":"    it(\"should be able to change the user agent\", async () => {\n      const url = await htmlServer(\"<iframe></iframe>\");\n      const resourceLoader = new ResourceLoader({\n        userAgent: \"test user agent\"\n      });\n      const dom = await JSDOM.fromURL(url, {\n        resources: resourceLoader\n      });\n      assert.strictEqual(dom.window.navigator.userAgent, \"test user agent\");\n      return new Promise(resolve => {\n        dom.window.onload = () => {\n          assert.strictEqual(dom.window.frames[0].navigator.userAgent, \"test user agent\");\n          resolve();\n        };\n      });\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should be able to customize the proxy option","suites":["API: resource loading configuration","With a custom resource loader"],"updatePoint":{"line":648,"column":52,"index":24490},"line":648,"code":"    it(\"should be able to customize the proxy option\", async () => {\n      const [mainServer, mainHost] = await threeRequestServer();\n      let proxyServerRequestCount = 0;\n      const proxyServer = await createServer((proxyServerReq, proxyServerRes) => {\n        ++proxyServerRequestCount;\n        const options = nodeURLParse(proxyServerReq.url);\n        options.headers = proxyServerReq.headers;\n        options.method = proxyServerReq.method;\n        const mainServerReq = http.request(options, mainServerRes => {\n          proxyServerRes.writeHead(mainServerRes.statusCode, mainServerRes.headers);\n          mainServerRes.pipe(proxyServerRes);\n        });\n        proxyServerReq.pipe(mainServerReq);\n      });\n      const resourceLoader = new ResourceLoader({\n        proxy: `http://127.0.0.1:${proxyServer.address().port}`\n      });\n      const options = {\n        resources: resourceLoader,\n        runScripts: \"dangerously\"\n      };\n      const dom = await JSDOM.fromURL(mainHost + \"/html\", options);\n      return new Promise(resolve => {\n        dom.window.done = resolve;\n      }).then(() => {\n        assert.strictEqual(proxyServerRequestCount, 3);\n        return Promise.all([mainServer.destroy(), proxyServer.destroy()]);\n      });\n    });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should receive script elements in options","suites":["API: resource loading configuration","With a custom resource loader","element option"],"updatePoint":{"line":678,"column":51,"index":25781},"line":678,"code":"      it(\"should receive script elements in options\", async () => {\n        const resourceLoader = new RecordingResourceLoader();\n        const sourceString = `window.x = 5;`;\n        const url = await resourceServer({\n          \"Content-Type\": \"text/javascript\",\n          \"Content-Length\": sourceString.length\n        }, sourceString);\n        const dom = new JSDOM(``, {\n          resources: resourceLoader,\n          runScripts: \"dangerously\"\n        });\n        const element = dom.window.document.createElement(\"script\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        await assertLoaded(element);\n        assert.instanceOf(resourceLoader.options.element, dom.window.HTMLScriptElement);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should receive stylesheet link elements in options","suites":["API: resource loading configuration","With a custom resource loader","element option"],"updatePoint":{"line":696,"column":60,"index":26574},"line":696,"code":"      it(\"should receive stylesheet link elements in options\", async () => {\n        const resourceLoader = new RecordingResourceLoader();\n        const sourceString = `.foo {}`;\n        const url = await resourceServer({\n          \"Content-Type\": \"text/css\",\n          \"Content-Length\": sourceString.length\n        }, sourceString);\n        const dom = new JSDOM(``, {\n          resources: resourceLoader\n        });\n        const element = dom.window.document.createElement(\"link\");\n        element.rel = \"stylesheet\";\n        setUpLoadingAsserts(element);\n        element.href = url;\n        dom.window.document.body.appendChild(element);\n        await assertLoaded(element);\n        assert.instanceOf(resourceLoader.options.element, dom.window.HTMLLinkElement);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should receive frame elements in options","suites":["API: resource loading configuration","With a custom resource loader","element option"],"updatePoint":{"line":714,"column":50,"index":27340},"line":714,"code":"      it(\"should receive frame elements in options\", async () => {\n        const resourceLoader = new RecordingResourceLoader();\n        const sourceString = `<!DOCTYPE html>`;\n        const url = await resourceServer({\n          \"Content-Type\": \"text/html\",\n          \"Content-Length\": sourceString.length\n        }, sourceString);\n        const dom = new JSDOM(``, {\n          resources: resourceLoader\n        });\n        const element = dom.window.document.createElement(\"iframe\");\n        setUpLoadingAsserts(element);\n        element.src = url;\n        dom.window.document.body.appendChild(element);\n        await assertLoaded(element);\n        assert.instanceOf(resourceLoader.options.element, dom.window.HTMLIFrameElement);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should receive img elements in options [canvas is installed]","suites":["API: resource loading configuration","With a custom resource loader","element option"],"updatePoint":{"line":733,"column":72,"index":28125},"line":733,"code":"        it(\"should receive img elements in options [canvas is installed]\", async () => {\n          const resourceLoader = new RecordingResourceLoader();\n          const url = await imageServer();\n          const dom = new JSDOM(``, {\n            resources: resourceLoader\n          });\n          const element = dom.window.document.createElement(\"img\");\n          setUpLoadingAsserts(element);\n          element.src = url;\n          dom.window.document.body.appendChild(element);\n          await assertLoaded(element);\n          assert.instanceOf(resourceLoader.options.element, dom.window.HTMLImageElement);\n        });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should have a default user agent following the correct pattern","suites":["API: resource loading configuration","User agent (resources set to )"],"updatePoint":{"line":753,"column":72,"index":29031},"line":753,"code":"      it(\"should have a default user agent following the correct pattern\", () => {\n        const dom = new JSDOM(``, {\n          resources\n        });\n        assert.strictEqual(dom.window.navigator.userAgent, expected);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should inherit the default user agent to iframes","suites":["API: resource loading configuration","User agent (resources set to )"],"updatePoint":{"line":759,"column":58,"index":29248},"line":759,"code":"      it(\"should inherit the default user agent to iframes\", () => {\n        const dom = new JSDOM(`<iframe></iframe>`, {\n          resources\n        });\n        assert.strictEqual(dom.window.frames[0].navigator.userAgent, expected);\n      });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should disallow other values for resources","suites":["API: resource loading configuration","User agent (resources set to )"],"updatePoint":{"line":768,"column":48,"index":29495},"line":768,"code":"  it(\"should disallow other values for resources\", () => {\n    assert.throws(() => new JSDOM(``, {\n      resources: null\n    }), TypeError);\n    assert.throws(() => new JSDOM(``, {\n      resources: \"asdf\"\n    }), TypeError);\n    assert.throws(() => new JSDOM(``, {\n      resources: true\n    }), TypeError);\n    assert.throws(() => new JSDOM(``, {\n      resources: false\n    }), TypeError);\n  });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should disallow custom resource loaders if they doesn't implement ResourceLoader","suites":["API: resource loading configuration","User agent (resources set to )"],"updatePoint":{"line":782,"column":86,"index":29929},"line":782,"code":"  it(\"should disallow custom resource loaders if they doesn't implement ResourceLoader\", () => {\n    assert.throws(() => new JSDOM(``, {\n      resources: {\n        fetch() {}\n\n      }\n    }), TypeError);\n\n    class MyResourceLoader {\n      fetch() {}\n\n    }\n\n    assert.throws(() => new JSDOM(``, {\n      resources: new MyResourceLoader()\n    }), TypeError);\n\n    function MyResourceLoaderFunction() {\n      this.fetch = function () {};\n    }\n\n    assert.throws(() => new JSDOM(``, {\n      resources: new MyResourceLoaderFunction()\n    }), TypeError);\n  });","file":"api/resources.js","skipped":false,"dir":"test"},{"name":"should send output only to the appropriate window","suites":["API: virtual consoles"],"updatePoint":{"line":19,"column":55,"index":480},"line":19,"code":"  it(\"should send output only to the appropriate window\", () => {\n    const vc1 = new VirtualConsole();\n    const vc2 = new VirtualConsole();\n    const dom1 = new JSDOM(``, {\n      virtualConsole: vc1\n    });\n    const dom2 = new JSDOM(``, {\n      virtualConsole: vc2\n    });\n    let vc1Called = false;\n    let vc2Called = false;\n    vc1.on(\"log\", () => {\n      vc1Called = true;\n    });\n    vc2.on(\"log\", () => {\n      vc2Called = true;\n    });\n    dom1.window.console.log(\"yay\");\n    dom2.window.console.warn(\"yay\");\n    assert.isTrue(vc1Called, \"vc1 must emit a log event\");\n    assert.isFalse(vc2Called, \"vc2 must not have emitted a log event\");\n  });","file":"api/virtual-console.js","skipped":false,"dir":"test"},{"name":"should bubble up messages from iframes","suites":["API: virtual consoles"],"updatePoint":{"line":41,"column":44,"index":1125},"line":41,"code":"  it(\"should bubble up messages from iframes\", () => {\n    const virtualConsole = new VirtualConsole();\n    const messages = [];\n    virtualConsole.on(\"log\", message => messages.push(message));\n    const dom = new JSDOM(`<iframe></iframe>`, {\n      virtualConsole\n    });\n    dom.window.console.log(\"from the parent\");\n    dom.window.frames[0].console.log(\"from the iframe\");\n    assert.deepEqual(messages, [\"from the parent\", \"from the iframe\"]);\n  });","file":"api/virtual-console.js","skipped":false,"dir":"test"},{"name":"should show not-implemented messages as \"jsdomError\"s","suites":["API: virtual consoles"],"updatePoint":{"line":52,"column":61,"index":1596},"line":52,"code":"  it(\"should show not-implemented messages as \\\"jsdomError\\\"s\", () => {\n    const virtualConsole = new VirtualConsole();\n    const dom = new JSDOM(``, {\n      virtualConsole\n    });\n    let called = false;\n    virtualConsole.on(\"jsdomError\", error => {\n      assert.instanceOf(error, Error);\n      assert.strictEqual(error.message, \"Not implemented: window.alert\");\n      called = true;\n    });\n    dom.window.alert();\n    assert.isTrue(called, \"The \\\"jsdomError\\\" event must have been emitted\");\n  });","file":"api/virtual-console.js","skipped":false,"dir":"test"},{"name":"should pass through arguments to ","suites":["API: virtual consoles","passing through arguments"],"updatePoint":{"line":68,"column":52,"index":2181},"line":68,"code":"      it(`should pass through arguments to ${method}`, () => {\n        const virtualConsole = new VirtualConsole();\n        const dom = new JSDOM(``, {\n          virtualConsole\n        });\n        let called;\n        virtualConsole.on(method, (arg1, arg2, arg3, arg4) => {\n          called = true;\n          assert.strictEqual(arg1, \"1\");\n          assert.strictEqual(arg2, 2);\n          assert.strictEqual(arg3, true);\n          assert.strictEqual(arg4, null);\n        });\n        dom.window.console[method](\"1\", 2, true, null);\n        assert.isTrue(called, `The method ${method} must be called`);\n      });","file":"api/virtual-console.js","skipped":false,"dir":"test"},{"name":"should pass through arguments to ","suites":["API: virtual consoles","proxying console methods when using sendTo()"],"updatePoint":{"line":88,"column":52,"index":2913},"line":88,"code":"      it(`should pass through arguments to ${method}`, () => {\n        const virtualConsole = new VirtualConsole();\n        const dom = new JSDOM(``, {\n          virtualConsole\n        });\n        let called;\n        const destinationConsole = {\n          [method](arg1, arg2, arg3, arg4) {\n            called = true;\n            assert.strictEqual(arg1, \"1\");\n            assert.strictEqual(arg2, 2);\n            assert.strictEqual(arg3, true);\n            assert.strictEqual(arg4, null);\n          }\n\n        };\n        virtualConsole.sendTo(destinationConsole);\n        dom.window.console[method](\"1\", 2, true, null);\n        assert.isTrue(called, `The method ${method} on the destination console must have been called`);\n      });","file":"api/virtual-console.js","skipped":false,"dir":"test"},{"name":"should return the instance it was called on","suites":["API: virtual consoles","proxying console methods when using sendTo()"],"updatePoint":{"line":110,"column":51,"index":3654},"line":110,"code":"    it(\"should return the instance it was called on\", () => {\n      const virtualConsole = new VirtualConsole();\n      const returnValue = virtualConsole.sendTo({});\n      assert.strictEqual(returnValue, virtualConsole);\n    });","file":"api/virtual-console.js","skipped":false,"dir":"test"},{"name":"should forward \"jsdomError\"s to the error method by default","suites":["API: virtual consoles","proxying console methods when using sendTo()"],"updatePoint":{"line":115,"column":69,"index":3901},"line":115,"code":"    it(\"should forward \\\"jsdomError\\\"s to the error method by default\", () => {\n      const e = new Error(\"Test message\");\n      e.detail = {\n        foo: \"bar\"\n      };\n      let called = false;\n      const virtualConsole = new VirtualConsole().sendTo({\n        error(arg1, arg2) {\n          assert.strictEqual(arg1, e.stack, \"The first argument to error must be the stack property\");\n          assert.strictEqual(arg2, e.detail, \"The second argument to error must be the detail property\");\n          called = true;\n        }\n\n      });\n      virtualConsole.emit(\"jsdomError\", e);\n      assert.isTrue(called, \"The error method on the destination console must have been called\");\n    });","file":"api/virtual-console.js","skipped":false,"dir":"test"},{"name":"should not forward \"jsdomError\"s to the error method when asked not to","suites":["API: virtual consoles","proxying console methods when using sendTo()"],"updatePoint":{"line":132,"column":80,"index":4600},"line":132,"code":"    it(\"should not forward \\\"jsdomError\\\"s to the error method when asked not to\", () => {\n      const e = new Error(\"Test message\");\n      e.detail = {\n        foo: \"bar\"\n      };\n      let called = false;\n      const virtualConsole = new VirtualConsole().sendTo({\n        error() {\n          called = true;\n        }\n\n      }, {\n        omitJSDOMErrors: true\n      });\n      virtualConsole.emit(\"jsdomError\", e);\n      assert.isFalse(called, \"The error method on the destination console must *not* have been called\");\n    });","file":"api/virtual-console.js","skipped":false,"dir":"test"}]}