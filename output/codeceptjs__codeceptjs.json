{"repo":"codeceptjs/codeceptjs","url":"https://github.com/codeceptjs/codeceptjs","branch":"3.x","configs":[{"package":"codeceptjs","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should send a query: read","suites":["GraphQL","basic queries"],"updatePoint":{"line":42,"column":33,"index":875},"line":42,"code":"    it('should send a query: read', async () => {\n      const resp = await I.sendQuery('{ user(id: 0) { id name email }}');\n      const {\n        user\n      } = resp.data.data;\n      user.should.eql({\n        id: '0',\n        name: 'john doe',\n        email: 'johnd@mutex.com'\n      });\n    });","file":"graphql/GraphQL_test.js","skipped":false,"dir":"test"},{"name":"should send a mutation: create","suites":["GraphQL","basic mutations"],"updatePoint":{"line":55,"column":38,"index":1219},"line":55,"code":"    it('should send a mutation: create', async () => {\n      const mutation = `\n        mutation CreateUser($input: UserInput!) {\n          createUser(input: $input) {\n            id\n            name\n            email\n            age\n          }\n        }\n      `;\n      const variables = {\n        input: {\n          id: 111,\n          name: 'Sourab',\n          email: 'sourab@mail.com',\n          age: 23\n        }\n      };\n      const resp = await I.sendMutation(mutation, variables);\n      const {\n        createUser\n      } = resp.data.data;\n      createUser.should.eql({\n        id: '111',\n        name: 'Sourab',\n        email: 'sourab@mail.com',\n        age: 23\n      });\n    });","file":"graphql/GraphQL_test.js","skipped":false,"dir":"test"},{"name":"should send a mutation: delete","suites":["GraphQL","basic mutations"],"updatePoint":{"line":85,"column":38,"index":1907},"line":85,"code":"    it('should send a mutation: delete', async () => {\n      const mutation = `\n        mutation deleteUser($id: ID) {\n          deleteUser(id: $id)\n        }\n      `;\n      const variables = {\n        id: 111\n      };\n      const resp = await I.sendMutation(mutation, variables);\n      const {\n        deleteUser\n      } = resp.data.data;\n      deleteUser.should.eql('111');\n    });","file":"graphql/GraphQL_test.js","skipped":false,"dir":"test"},{"name":"should be able to parse JSON responses","suites":["GraphQL","JSONResponse integration"],"updatePoint":{"line":122,"column":46,"index":2799},"line":122,"code":"    it('should be able to parse JSON responses', async () => {\n      await I.sendQuery('{ user(id: 0) { id name email }}');\n      await jsonResponse.seeResponseCodeIsSuccessful();\n      await jsonResponse.seeResponseContainsKeys(['data']);\n      await jsonResponse.seeResponseContainsJson({\n        data: {\n          user: {\n            name: 'john doe',\n            email: 'johnd@mutex.com'\n          }\n        }\n      });\n    });","file":"graphql/GraphQL_test.js","skipped":false,"dir":"test"},{"name":"should create a new user","suites":["GraphQLDataFactory","create and cleanup records"],"updatePoint":{"line":81,"column":32,"index":1792},"line":81,"code":"    it('should create a new user', async () => {\n      await I.mutateData('createUser');\n      const resp = await I.graphqlHelper.sendQuery('query { users { id name } }');\n      const {\n        users\n      } = resp.data.data;\n      users.length.should.eql(2);\n    });","file":"graphql/GraphQLDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should create a new user with predefined field","suites":["GraphQLDataFactory","create and cleanup records"],"updatePoint":{"line":89,"column":54,"index":2082},"line":89,"code":"    it('should create a new user with predefined field', async () => {\n      const user = await I.mutateData('createUser', {\n        name: 'radhey'\n      });\n      user.name.should.eql('radhey');\n      user.id.should.eql('1');\n    });","file":"graphql/GraphQLDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should update request with onRequest","suites":["GraphQLDataFactory","create and cleanup records"],"updatePoint":{"line":96,"column":44,"index":2307},"line":96,"code":"    it('should update request with onRequest', async () => {\n      I = new GraphQLDataFactory({\n        endpoint: graphql_url,\n        onRequest: request => {\n          if (request.data.variables && request.data.variables.input) {\n            request.data.variables.input.name = 'Dante';\n          }\n        },\n        factories: {\n          createUser: {\n            factory: path.join(__dirname, '/../data/graphql/users_factory.js'),\n            query: creatUserQuery,\n            revert: data => {\n              return {\n                query: deleteOperationQuery,\n                variables: {\n                  id: data.id\n                }\n              };\n            }\n          }\n        }\n      });\n      const user = await I.mutateData('createUser');\n      user.name.should.eql('Dante');\n    });","file":"graphql/GraphQLDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should cleanup created data","suites":["GraphQLDataFactory","create and cleanup records"],"updatePoint":{"line":122,"column":35,"index":3105},"line":122,"code":"    it('should cleanup created data', async () => {\n      const user = await I.mutateData('createUser', {\n        name: 'Dante'\n      });\n      user.name.should.eql('Dante');\n      user.id.should.eql('1');\n      await I._after();\n      const resp = await I.graphqlHelper.sendQuery('query { users { id } }');\n      resp.data.data.users.length.should.eql(1);\n    });","file":"graphql/GraphQLDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should create multiple users and cleanup after","suites":["GraphQLDataFactory","create and cleanup records"],"updatePoint":{"line":132,"column":54,"index":3489},"line":132,"code":"    it('should create multiple users and cleanup after', async () => {\n      let resp = await I.graphqlHelper.sendQuery('query { users { id } }');\n      resp.data.data.users.length.should.eql(1);\n      await I.mutateMultiple('createUser', 3);\n      resp = await I.graphqlHelper.sendQuery('query { users { id } }');\n      resp.data.data.users.length.should.eql(4);\n      await I._after();\n      resp = await I.graphqlHelper.sendQuery('query { users { id } }');\n      resp.data.data.users.length.should.eql(1);\n    });","file":"graphql/GraphQLDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should not remove records if cleanup:false","suites":["GraphQLDataFactory","create and cleanup records"],"updatePoint":{"line":142,"column":50,"index":4002},"line":142,"code":"    it('should not remove records if cleanup:false', async () => {\n      I = new GraphQLDataFactory({\n        endpoint: graphql_url,\n        cleanup: false,\n        factories: {\n          createUser: {\n            factory: path.join(__dirname, '/../data/graphql/users_factory.js'),\n            query: creatUserQuery,\n            revert: data => {\n              return {\n                query: deleteOperationQuery,\n                variables: {\n                  id: data.id\n                }\n              };\n            }\n          }\n        }\n      });\n      await I.mutateData('createUser');\n      let resp = await I.graphqlHelper.sendQuery('query { users { id } }');\n      resp.data.data.users.length.should.eql(2);\n      await I._after();\n      resp = await I.graphqlHelper.sendQuery('query { users { id } }');\n      resp.data.data.users.length.should.eql(2);\n    });","file":"graphql/GraphQLDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should grab all available contexts for screen","suites":["Appium","app installation : #seeAppIsInstalled, #installApp, #removeApp, #seeAppIsNotInstalled","#grabAllContexts, #grabContext, #grabCurrentActivity, #grabNetworkConnection, #grabOrientation, #grabSettings"],"updatePoint":{"line":48,"column":55,"index":1571},"line":48,"code":"      it('should grab all available contexts for screen', async () => {\n        await app.click('~buttonStartWebviewCD');\n        const val = await app.grabAllContexts();\n        assert.deepEqual(val, ['NATIVE_APP', 'WEBVIEW_io.selendroid.testapp']);\n      });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should grab current context","suites":["Appium","app installation : #seeAppIsInstalled, #installApp, #removeApp, #seeAppIsNotInstalled","#grabAllContexts, #grabContext, #grabCurrentActivity, #grabNetworkConnection, #grabOrientation, #grabSettings"],"updatePoint":{"line":53,"column":37,"index":1814},"line":53,"code":"      it('should grab current context', async () => {\n        const val = await app.grabContext();\n        assert.equal(val, 'NATIVE_APP');\n      });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should grab current activity of app","suites":["Appium","app installation : #seeAppIsInstalled, #installApp, #removeApp, #seeAppIsNotInstalled","#grabAllContexts, #grabContext, #grabCurrentActivity, #grabNetworkConnection, #grabOrientation, #grabSettings"],"updatePoint":{"line":57,"column":45,"index":1972},"line":57,"code":"      it('should grab current activity of app', async () => {\n        const val = await app.grabCurrentActivity();\n        assert.equal(val, '.HomeScreenActivity');\n      });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should grab network connection settings","suites":["Appium","app installation : #seeAppIsInstalled, #installApp, #removeApp, #seeAppIsNotInstalled","#grabAllContexts, #grabContext, #grabCurrentActivity, #grabNetworkConnection, #grabOrientation, #grabSettings"],"updatePoint":{"line":61,"column":49,"index":2151},"line":61,"code":"      it('should grab network connection settings', async () => {\n        await app.setNetworkConnection(4);\n        const val = await app.grabNetworkConnection();\n        assert.equal(val.value, 4);\n        assert.equal(val.inAirplaneMode, false);\n        assert.equal(val.hasWifi, false);\n        assert.equal(val.hasData, true);\n      });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should grab orientation","suites":["Appium","app installation : #seeAppIsInstalled, #installApp, #removeApp, #seeAppIsNotInstalled","#grabAllContexts, #grabContext, #grabCurrentActivity, #grabNetworkConnection, #grabOrientation, #grabSettings"],"updatePoint":{"line":69,"column":33,"index":2477},"line":69,"code":"      it('should grab orientation', async () => {\n        const val = await app.grabOrientation();\n        assert.equal(val, 'PORTRAIT');\n      });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should grab custom settings","suites":["Appium","app installation : #seeAppIsInstalled, #installApp, #removeApp, #seeAppIsNotInstalled","#grabAllContexts, #grabContext, #grabCurrentActivity, #grabNetworkConnection, #grabOrientation, #grabSettings"],"updatePoint":{"line":73,"column":37,"index":2629},"line":73,"code":"      it('should grab custom settings', async () => {\n        const val = await app.grabSettings();\n        assert.deepEqual(val, {\n          ignoreUnimportantViews: false\n        });\n      });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should remove App and install it again","suites":["Appium","app installation : #seeAppIsInstalled, #installApp, #removeApp, #seeAppIsNotInstalled","#grabAllContexts, #grabContext, #grabCurrentActivity, #grabNetworkConnection, #grabOrientation, #grabSettings"],"updatePoint":{"line":80,"column":46,"index":2840},"line":80,"code":"    it('should remove App and install it again', async () => {\n      await app.seeAppIsInstalled('io.selendroid.testapp');\n      await app.removeApp('io.selendroid.testapp');\n      await app.seeAppIsNotInstalled('io.selendroid.testapp');\n      await app.installApp(apk_path);\n      await app.seeAppIsInstalled('io.selendroid.testapp');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should assert when app is/is not installed","suites":["Appium","app installation : #seeAppIsInstalled, #installApp, #removeApp, #seeAppIsNotInstalled","#grabAllContexts, #grabContext, #grabCurrentActivity, #grabNetworkConnection, #grabOrientation, #grabSettings"],"updatePoint":{"line":87,"column":50,"index":3188},"line":87,"code":"    it('should assert when app is/is not installed', async () => {\n      try {\n        await app.seeAppIsInstalled('io.super.app');\n      } catch (e) {\n        e.should.be.instanceOf(AssertionFailedError);\n        e.inspect().should.include('expected app io.super.app to be installed');\n      }\n\n      try {\n        await app.seeAppIsNotInstalled('io.selendroid.testapp');\n      } catch (e) {\n        e.should.be.instanceOf(AssertionFailedError);\n        e.inspect().should.include('expected app io.selendroid.testapp not to be installed');\n      }\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should return .HomeScreenActivity for default screen","suites":["Appium","see seeCurrentActivity: #seeCurrentActivityIs"],"updatePoint":{"line":104,"column":60,"index":3829},"line":104,"code":"    it('should return .HomeScreenActivity for default screen', async () => {\n      await app.seeCurrentActivityIs('.HomeScreenActivity');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should assert for wrong screen","suites":["Appium","see seeCurrentActivity: #seeCurrentActivityIs"],"updatePoint":{"line":107,"column":38,"index":3953},"line":107,"code":"    it('should assert for wrong screen', async () => {\n      try {\n        await app.seeCurrentActivityIs('.SuperScreen');\n      } catch (e) {\n        e.should.be.instanceOf(AssertionFailedError);\n        e.inspect().should.include('expected current activity to be .SuperScreen');\n      }\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should return correct status about lock @second","suites":["Appium","device lock : #seeDeviceIsLocked, #seeDeviceIsUnlocked"],"updatePoint":{"line":117,"column":55,"index":4350},"line":117,"code":"    it('should return correct status about lock @second', async () => {\n      await app.seeDeviceIsUnlocked();\n\n      try {\n        await app.seeDeviceIsLocked();\n      } catch (e) {\n        e.should.be.instanceOf(AssertionFailedError);\n        e.inspect().should.include('expected device to be locked');\n      }\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should return correct status about lock","suites":["Appium","device orientation : #seeOrientationIs #setOrientation"],"updatePoint":{"line":129,"column":47,"index":4746},"line":129,"code":"    it('should return correct status about lock', async () => {\n      await app.seeOrientationIs('PORTRAIT');\n\n      try {\n        await app.seeOrientationIs('LANDSCAPE');\n      } catch (e) {\n        e.should.be.instanceOf(AssertionFailedError);\n        e.inspect().should.include('expected orientation to be LANDSCAPE');\n      }\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should set device orientation","suites":["Appium","device orientation : #seeOrientationIs #setOrientation"],"updatePoint":{"line":139,"column":37,"index":5074},"line":139,"code":"    it('should set device orientation', async () => {\n      await app.click('~buttonStartWebviewCD');\n      await app.setOrientation('LANDSCAPE');\n      await app.seeOrientationIs('LANDSCAPE');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should switch context","suites":["Appium","app context and activity: #_switchToContext, #switchToWeb, #switchToNative"],"updatePoint":{"line":146,"column":29,"index":5371},"line":146,"code":"    it('should switch context', async () => {\n      await app.click('~buttonStartWebviewCD');\n      await app._switchToContext('WEBVIEW_io.selendroid.testapp');\n      const val = await app.grabContext();\n      return assert.equal(val, 'WEBVIEW_io.selendroid.testapp');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should switch to native and web contexts @quick","suites":["Appium","app context and activity: #_switchToContext, #switchToWeb, #switchToNative"],"updatePoint":{"line":152,"column":55,"index":5674},"line":152,"code":"    it('should switch to native and web contexts @quick', async () => {\n      await app.click('~buttonStartWebviewCD');\n      await app.see('WebView location');\n      await app.switchToWeb();\n      let val = await app.grabContext();\n      assert.equal(val, 'WEBVIEW_io.selendroid.testapp');\n      await app.see('Prefered Car');\n      assert.ok(app.isWeb);\n      await app.switchToNative();\n      val = await app.grabContext();\n      assert.equal(val, 'NATIVE_APP');\n      return assert.ok(!app.isWeb);\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should switch activity","suites":["Appium","app context and activity: #_switchToContext, #switchToWeb, #switchToNative"],"updatePoint":{"line":165,"column":30,"index":6159},"line":165,"code":"    it('should switch activity', async () => {\n      await app.startActivity('io.selendroid.testapp', '.RegisterUserActivity');\n      const val = await app.grabCurrentActivity();\n      assert.equal(val, '.RegisterUserActivity');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should set Network Connection (airplane mode on)","suites":["Appium","#setNetworkConnection, #setSettings"],"updatePoint":{"line":172,"column":56,"index":6486},"line":172,"code":"    it('should set Network Connection (airplane mode on)', async () => {\n      await app.setNetworkConnection(1);\n      const val = await app.grabNetworkConnection();\n      return assert.equal(val.value, 1);\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should set custom settings","suites":["Appium","#setNetworkConnection, #setSettings"],"updatePoint":{"line":177,"column":34,"index":6680},"line":177,"code":"    it('should set custom settings', async () => {\n      await app.setSettings({\n        cyberdelia: 'open'\n      });\n      const val = await app.grabSettings();\n      assert.deepEqual(val, {\n        ignoreUnimportantViews: false,\n        cyberdelia: 'open'\n      });\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should hide device Keyboard @quick","suites":["Appium","#hideDeviceKeyboard"],"updatePoint":{"line":189,"column":42,"index":7012},"line":189,"code":"    it('should hide device Keyboard @quick', async () => {\n      await app.click('~startUserRegistrationCD');\n\n      try {\n        await app.click('//android.widget.CheckBox');\n      } catch (e) {\n        e.message.should.include('element');\n      }\n\n      await app.hideDeviceKeyboard('pressKey', 'Done');\n      await app.click('//android.widget.CheckBox');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should assert if no keyboard","suites":["Appium","#hideDeviceKeyboard"],"updatePoint":{"line":201,"column":36,"index":7373},"line":201,"code":"    it('should assert if no keyboard', async () => {\n      try {\n        await app.hideDeviceKeyboard('pressKey', 'Done');\n      } catch (e) {\n        e.message.should.include('An unknown server-side error occurred while processing the command. Original error: Soft keyboard not present, cannot hide keyboard');\n      }\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on pressing keycode","suites":["Appium","#sendDeviceKeyEvent"],"updatePoint":{"line":210,"column":40,"index":7753},"line":210,"code":"    it('should react on pressing keycode', async () => {\n      await app.sendDeviceKeyEvent(3);\n      await app.waitForVisible('~Apps');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on notification opening","suites":["Appium","#openNotifications"],"updatePoint":{"line":216,"column":44,"index":7949},"line":216,"code":"    it('should react on notification opening', async () => {\n      try {\n        await app.seeElement('//android.widget.FrameLayout[@resource-id=\"com.android.systemui:id/quick_settings_container\"]');\n      } catch (e) {\n        e.should.be.instanceOf(AssertionFailedError);\n        e.inspect().should.include('expected elements of //android.widget.FrameLayout[@resource-id=\"com.android.systemui:id/quick_settings_container\"] to be seen');\n      }\n\n      await app.openNotifications();\n      await app.waitForVisible('//android.widget.FrameLayout[@resource-id=\"com.android.systemui:id/quick_settings_container\"]', 10);\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on touch actions","suites":["Appium","#makeTouchAction"],"updatePoint":{"line":229,"column":37,"index":8613},"line":229,"code":"    it('should react on touch actions', async () => {\n      await app.tap('~buttonStartWebviewCD');\n      const val = await app.grabCurrentActivity();\n      assert.equal(val, '.WebViewActivity');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on swipe action","suites":["Appium","#makeTouchAction"],"updatePoint":{"line":234,"column":36,"index":8816},"line":234,"code":"    it('should react on swipe action', async () => {\n      await app.click(\"//android.widget.Button[@resource-id = 'io.selendroid.testapp:id/touchTest']\");\n      await app.waitForText('Gesture Type', 10, \"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n      await app.swipe(\"//android.widget.LinearLayout[@resource-id = 'io.selendroid.testapp:id/LinearLayout1']\", 800, 1200, 1000);\n      const type = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n      const vx = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/text_view3']\");\n      const vy = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/text_view4']\");\n      assert.equal(type, 'FLICK');\n      assert.ok(vx.match(/vx: \\d\\d000\\.0 pps/), 'to be like \\d\\d000.0 pps');\n      assert.ok(vy.match(/vy: \\d\\d000\\.0 pps/), 'to be like \\d\\d000.0 pps');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on swipeDown action","suites":["Appium","#makeTouchAction"],"updatePoint":{"line":245,"column":40,"index":9833},"line":245,"code":"    it('should react on swipeDown action', async () => {\n      await app.click(\"//android.widget.Button[@resource-id = 'io.selendroid.testapp:id/touchTest']\");\n      await app.waitForText('Gesture Type', 10, \"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n      await app.swipeDown(\"//android.widget.LinearLayout[@resource-id = 'io.selendroid.testapp:id/LinearLayout1']\", 1200, 1000);\n      const type = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n      const vy = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/text_view4']\");\n      assert.equal(type, 'FLICK');\n      assert.ok(vy.match(/vy: \\d\\d000\\.0 pps/), 'to be like \\d\\d000.0 pps');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"run simplified swipeDown @quick","suites":["Appium","#makeTouchAction"],"updatePoint":{"line":254,"column":39,"index":10647},"line":254,"code":"    it('run simplified swipeDown @quick', async () => {\n      await app.click(\"//android.widget.Button[@resource-id = 'io.selendroid.testapp:id/touchTest']\");\n      await app.waitForText('Gesture Type', 10, \"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n      await app.swipeDown(\"//android.widget.LinearLayout[@resource-id = 'io.selendroid.testapp:id/LinearLayout1']\", 1200, 1000);\n      const type = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n      assert.equal(type, 'FLICK');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on swipeUp action","suites":["Appium","#makeTouchAction"],"updatePoint":{"line":261,"column":38,"index":11259},"line":261,"code":"    it('should react on swipeUp action', async () => {\n      await app.click(\"//android.widget.Button[@resource-id = 'io.selendroid.testapp:id/touchTest']\");\n      await app.waitForText('Gesture Type', 10, \"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n      await app.swipeUp(\"//android.widget.LinearLayout[@resource-id = 'io.selendroid.testapp:id/LinearLayout1']\", 1200, 1000);\n      const type = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n      const vy = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/text_view4']\");\n      assert.equal(type, 'FLICK');\n      assert.ok(vy.match(/vy: -\\d\\d000\\.0 pps/), 'to be like \\d\\d000.0 pps');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on swipeRight action","suites":["Appium","#makeTouchAction"],"updatePoint":{"line":270,"column":41,"index":12074},"line":270,"code":"    it('should react on swipeRight action', async () => {\n      await app.click(\"//android.widget.Button[@resource-id = 'io.selendroid.testapp:id/touchTest']\");\n      await app.waitForText('Gesture Type', 10, \"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n      await app.swipeRight(\"//android.widget.LinearLayout[@resource-id = 'io.selendroid.testapp:id/LinearLayout1']\", 800, 1000);\n      const type = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n      const vy = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/text_view3']\");\n      assert.equal(type, 'FLICK');\n      assert.ok(vy.match(/vx: \\d\\d000\\.0 pps/), 'to be like \\d\\d000.0 pps');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on swipeLeft action","suites":["Appium","#makeTouchAction"],"updatePoint":{"line":279,"column":40,"index":12889},"line":279,"code":"    it('should react on swipeLeft action', async () => {\n      await app.click(\"//android.widget.Button[@resource-id = 'io.selendroid.testapp:id/touchTest']\");\n      await app.waitForText('Gesture Type', 10, \"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n      await app.swipeLeft(\"//android.widget.LinearLayout[@resource-id = 'io.selendroid.testapp:id/LinearLayout1']\", 800, 1000);\n      const type = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n      const vy = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/text_view3']\");\n      assert.equal(type, 'FLICK');\n      assert.ok(vy.match(/vx: -\\d\\d000\\.0 pps/), 'to be like 21000.0 pps');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on touchPerform action","suites":["Appium","#makeTouchAction"],"updatePoint":{"line":288,"column":43,"index":13705},"line":288,"code":"    it('should react on touchPerform action', async () => {\n      await app.touchPerform([{\n        action: 'press',\n        options: {\n          x: 100,\n          y: 200\n        }\n      }, {\n        action: 'release'\n      }]);\n      const val = await app.grabCurrentActivity();\n      assert.equal(val, '.HomeScreenActivity');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should assert when you dont scroll the document anymore","suites":["Appium","#makeTouchAction"],"updatePoint":{"line":301,"column":63,"index":14061},"line":301,"code":"    it('should assert when you dont scroll the document anymore', async () => {\n      await app.click('~startUserRegistrationCD');\n\n      try {\n        await app.swipeTo('//android.widget.CheckBox', '//android.widget.ScrollView/android.widget.LinearLayout', 'up', 30, 100, 500);\n      } catch (e) {\n        e.message.should.include('Scroll to the end and element android.widget.CheckBox was not found');\n      }\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on swipeTo action","suites":["Appium","#makeTouchAction"],"updatePoint":{"line":310,"column":38,"index":14456},"line":310,"code":"    it('should react on swipeTo action', async () => {\n      await app.click('~startUserRegistrationCD');\n      await app.swipeTo('//android.widget.CheckBox', '//android.widget.ScrollView/android.widget.LinearLayout', 'up', 30, 100, 700);\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on swipeUp action @second","suites":["Appium","#makeTouchAction","#performTouchAction"],"updatePoint":{"line":315,"column":48,"index":14757},"line":315,"code":"      it('should react on swipeUp action @second', async () => {\n        await app.click(\"//android.widget.Button[@resource-id = 'io.selendroid.testapp:id/touchTest']\");\n        await app.waitForText('Gesture Type', 10, \"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n        await app.swipeUp(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n        const type = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n        const vy = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/text_view4']\");\n        assert.equal(type, 'FLICK');\n        expect(vy.split(' ')[1]).to.be.below(1006);\n      });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on swipeDown action @second","suites":["Appium","#makeTouchAction","#performTouchAction"],"updatePoint":{"line":324,"column":50,"index":15562},"line":324,"code":"      it('should react on swipeDown action @second', async () => {\n        await app.click(\"//android.widget.Button[@resource-id = 'io.selendroid.testapp:id/touchTest']\");\n        await app.waitForText('Gesture Type', 10, \"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n        await app.swipeUp(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n        const type = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n        const vy = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/text_view4']\");\n        assert.equal(type, 'FLICK');\n        expect(vy.split(' ')[1]).to.be.above(178);\n      });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on swipeLeft action","suites":["Appium","#makeTouchAction","#performTouchAction"],"updatePoint":{"line":333,"column":42,"index":16358},"line":333,"code":"      it('should react on swipeLeft action', async () => {\n        await app.click(\"//android.widget.Button[@resource-id = 'io.selendroid.testapp:id/touchTest']\");\n        await app.waitForText('Gesture Type', 10, \"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n        await app.swipeLeft(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n        const type = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n        const vy = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/text_view4']\");\n        assert.equal(type, 'FLICK');\n        expect(vy.split(' ')[1]).to.be.below(730);\n      });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should react on swipeRight action","suites":["Appium","#makeTouchAction","#performTouchAction"],"updatePoint":{"line":342,"column":43,"index":17157},"line":342,"code":"      it('should react on swipeRight action', async () => {\n        await app.click(\"//android.widget.Button[@resource-id = 'io.selendroid.testapp:id/touchTest']\");\n        await app.waitForText('Gesture Type', 10, \"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n        await app.swipeRight(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n        const type = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/gesture_type_text_view']\");\n        const vy = await app.grabTextFrom(\"//android.widget.TextView[@resource-id = 'io.selendroid.testapp:id/text_view4']\");\n        assert.equal(type, 'FLICK');\n        expect(vy.split(' ')[1]).to.be.above(278);\n      });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should pull file to local machine","suites":["Appium","#pullFile"],"updatePoint":{"line":354,"column":41,"index":18001},"line":354,"code":"    it('should pull file to local machine', async () => {\n      const savepath = path.join(__dirname, `/../data/output/testpullfile${new Date().getTime()}.png`);\n      await app.pullFile('/storage/emulated/0/DCIM/sauce_logo.png', savepath);\n      assert.ok(fileExists(savepath), null, 'file does not exists');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should work inside elements @second","suites":["Appium","see text : #see"],"updatePoint":{"line":361,"column":43,"index":18365},"line":361,"code":"    it('should work inside elements @second', async () => {\n      await app.see('EN Button', '~buttonTestCD');\n      await app.see('Hello');\n      await app.dontSee('Welcome', '~buttonTestCD');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should work inside web view as normally @quick","suites":["Appium","see text : #see"],"updatePoint":{"line":366,"column":54,"index":18578},"line":366,"code":"    it('should work inside web view as normally @quick', async () => {\n      await app.click('~buttonStartWebviewCD');\n      await app.switchToWeb();\n      await app.see('Prefered Car:');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should be able to send special keys to element @second","suites":["Appium","#appendField"],"updatePoint":{"line":373,"column":62,"index":18823},"line":373,"code":"    it('should be able to send special keys to element @second', async () => {\n      await app.click('~startUserRegistrationCD');\n      await app.click('~email of the customer');\n      await app.appendField('~email of the customer', '1');\n      await app.hideDeviceKeyboard('pressKey', 'Done');\n      await app.swipeTo('//android.widget.Button', '//android.widget.ScrollView/android.widget.LinearLayout', 'up', 30, 100, 700);\n      await app.click('//android.widget.Button');\n      await app.see('1', '#io.selendroid.testapp:id/label_email_data');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should check for text to be in HTML source","suites":["Appium","#seeInSource"],"updatePoint":{"line":384,"column":50,"index":19408},"line":384,"code":"    it('should check for text to be in HTML source', async () => {\n      await app.seeInSource('class=\"android.widget.Button\" package=\"io.selendroid.testapp\" content-desc=\"buttonTestCD\"');\n      await app.dontSeeInSource('<meta');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should return error if not present","suites":["Appium","#waitForText"],"updatePoint":{"line":390,"column":42,"index":19680},"line":390,"code":"    it('should return error if not present', async () => {\n      try {\n        await app.waitForText('Nothing here', 1, '~buttonTestCD');\n      } catch (e) {\n        e.should.be.instanceOf(AssertionFailedError);\n        e.inspect().should.be.equal('expected element ~buttonTestCD to include \"Nothing here\"');\n      }\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should return 1 as count","suites":["Appium","#seeNumberOfElements @second"],"updatePoint":{"line":400,"column":32,"index":20052},"line":400,"code":"    it('should return 1 as count', async () => {\n      await app.seeNumberOfElements('~buttonTestCD', 1);\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should check visible elements on page @quick","suites":["Appium","see element : #seeElement, #dontSeeElement"],"updatePoint":{"line":405,"column":52,"index":20257},"line":405,"code":"    it('should check visible elements on page @quick', async () => {\n      await app.seeElement('~buttonTestCD');\n      await app.seeElement('//android.widget.Button[@content-desc = \"buttonTestCD\"]');\n      await app.dontSeeElement('#something-beyond');\n      await app.dontSeeElement('//input[@id=\"something-beyond\"]');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should click by accessibility id","suites":["Appium","#click @quick"],"updatePoint":{"line":413,"column":40,"index":20616},"line":413,"code":"    it('should click by accessibility id', async () => {\n      await app.click('~startUserRegistrationCD');\n      await app.seeElement('~label_usernameCD');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should click by xpath","suites":["Appium","#click @quick"],"updatePoint":{"line":417,"column":29,"index":20770},"line":417,"code":"    it('should click by xpath', async () => {\n      await app.click('//android.widget.ImageButton[@content-desc = \"startUserRegistrationCD\"]');\n      await app.seeElement('~label_usernameCD');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should fill field by accessibility id","suites":["Appium","#fillField, #appendField @second"],"updatePoint":{"line":423,"column":45,"index":21048},"line":423,"code":"    it('should fill field by accessibility id', async () => {\n      await app.click('~startUserRegistrationCD');\n      await app.fillField('~email of the customer', 'Nothing special');\n      await app.hideDeviceKeyboard('pressKey', 'Done');\n      await app.swipeTo('//android.widget.Button', '//android.widget.ScrollView/android.widget.LinearLayout', 'up', 30, 100, 700);\n      await app.click('//android.widget.Button');\n      await app.see('Nothing special', '//android.widget.TextView[@resource-id=\"io.selendroid.testapp:id/label_email_data\"]');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should fill field by xpath","suites":["Appium","#fillField, #appendField @second"],"updatePoint":{"line":431,"column":34,"index":21594},"line":431,"code":"    it('should fill field by xpath', async () => {\n      await app.click('~startUserRegistrationCD');\n      await app.fillField('//android.widget.EditText[@content-desc=\"email of the customer\"]', 'Nothing special');\n      await app.hideDeviceKeyboard('pressKey', 'Done');\n      await app.swipeTo('//android.widget.Button', '//android.widget.ScrollView/android.widget.LinearLayout', 'up', 30, 100, 700);\n      await app.click('//android.widget.Button');\n      await app.see('Nothing special', '//android.widget.TextView[@resource-id=\"io.selendroid.testapp:id/label_email_data\"]');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should append field value @second","suites":["Appium","#fillField, #appendField @second"],"updatePoint":{"line":439,"column":41,"index":22189},"line":439,"code":"    it('should append field value @second', async () => {\n      await app.click('~startUserRegistrationCD');\n      await app.fillField('~email of the customer', 'Nothing special');\n      await app.appendField('~email of the customer', 'blabla');\n      await app.hideDeviceKeyboard('pressKey', 'Done');\n      await app.swipeTo('//android.widget.Button', '//android.widget.ScrollView/android.widget.LinearLayout', 'up', 30, 100, 700);\n      await app.click('//android.widget.Button');\n      await app.see('Nothing specialblabla', '//android.widget.TextView[@resource-id=\"io.selendroid.testapp:id/label_email_data\"]');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should clear a given element","suites":["Appium","#clearField"],"updatePoint":{"line":450,"column":36,"index":22848},"line":450,"code":"    it('should clear a given element', async () => {\n      await app.click('~startUserRegistrationCD');\n      await app.fillField('~email of the customer', 'Nothing special');\n      await app.see('Nothing special', '~email of the customer');\n      await app.clearField('~email of the customer');\n      await app.dontSee('Nothing special', '~email of the customer');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should grab text from page","suites":["Appium","#grabTextFrom, #grabValueFrom, #grabAttributeFrom @quick"],"updatePoint":{"line":459,"column":34,"index":23305},"line":459,"code":"    it('should grab text from page', async () => {\n      const val = await app.grabTextFrom('~buttonTestCD');\n      assert.equal(val, 'EN Button');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should grab attribute from element","suites":["Appium","#grabTextFrom, #grabValueFrom, #grabAttributeFrom @quick"],"updatePoint":{"line":463,"column":42,"index":23469},"line":463,"code":"    it('should grab attribute from element', async () => {\n      const val = await app.grabAttributeFrom('~buttonTestCD', 'resourceId');\n      assert.equal(val, 'io.selendroid.testapp:id/buttonTest');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should be able to grab elements","suites":["Appium","#grabTextFrom, #grabValueFrom, #grabAttributeFrom @quick"],"updatePoint":{"line":467,"column":39,"index":23675},"line":467,"code":"    it('should be able to grab elements', async () => {\n      await app.click('~startUserRegistrationCD');\n      await app.click('~email of the customer');\n      await app.appendField('~email of the customer', '1');\n      await app.hideDeviceKeyboard('pressKey', 'Done');\n      await app.swipeTo('//android.widget.Button', '//android.widget.ScrollView/android.widget.LinearLayout', 'up', 30, 100, 700);\n      await app.click('//android.widget.Button');\n      await app.see('1', '#io.selendroid.testapp:id/label_email_data');\n      const num = await app.grabNumberOfVisibleElements('#io.selendroid.testapp:id/label_email_data');\n      assert.strictEqual(1, num);\n      const id = await app.grabNumberOfVisibleElements('//android.widget.TextView[@resource-id=\"io.selendroid.testapp:id/label_email_data\"]', 'contentDescription');\n      assert.strictEqual(1, id);\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should create a screenshot file in output dir","suites":["Appium","#saveScreenshot @quick"],"updatePoint":{"line":485,"column":53,"index":24707},"line":485,"code":"    it('should create a screenshot file in output dir', async () => {\n      const sec = new Date().getUTCMilliseconds();\n      await app.saveScreenshot(`screenshot_${sec}.png`);\n      assert.ok(fileExists(path.join(global.output_dir, `screenshot_${sec}.png`)), null, 'file does not exists');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should use Android locators","suites":["Appium","#runOnIOS, #runOnAndroid, #runInWeb"],"updatePoint":{"line":492,"column":35,"index":25053},"line":492,"code":"    it('should use Android locators', async () => {\n      await app.click({\n        android: '~startUserRegistrationCD',\n        ios: 'fake-element'\n      });\n      await app.see('Welcome to register a new User');\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should execute only on Android @quick","suites":["Appium","#runOnIOS, #runOnAndroid, #runInWeb"],"updatePoint":{"line":499,"column":45,"index":25285},"line":499,"code":"    it('should execute only on Android @quick', () => {\n      let platform = null;\n      app.runOnIOS(() => {\n        platform = 'ios';\n      });\n      app.runOnAndroid(() => {\n        platform = 'android';\n      });\n      app.runOnAndroid({\n        platformVersion: '7.0'\n      }, () => {\n        platform = 'android7';\n      });\n      assert.equal('android', platform);\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should execute only on Android >= 5.0 @quick","suites":["Appium","#runOnIOS, #runOnAndroid, #runInWeb"],"updatePoint":{"line":514,"column":52,"index":25672},"line":514,"code":"    it('should execute only on Android >= 5.0 @quick', () => {\n      app.runOnAndroid(caps => caps.platformVersion >= 5, () => {});\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should execute only in Web","suites":["Appium","#runOnIOS, #runOnAndroid, #runInWeb"],"updatePoint":{"line":517,"column":34,"index":25794},"line":517,"code":"    it('should execute only in Web', () => {\n      app.isWeb = true;\n      let executed = false;\n      app.runOnIOS(() => {\n        executed = true;\n      });\n      assert.ok(!executed);\n    });","file":"helper/Appium_test.js","skipped":false,"dir":"test"},{"name":"should check for url fragment","suites":["Appium Web","current url : #seeInCurrentUrl, #seeCurrentUrlEquals, ..."],"updatePoint":{"line":40,"column":37,"index":1038},"line":40,"code":"    it('should check for url fragment', async () => {\n      await I.amOnPage('/angular-demo-app/#/info');\n      await I.seeInCurrentUrl('/info');\n      await I.dontSeeInCurrentUrl('/result');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should check for equality","suites":["Appium Web","current url : #seeInCurrentUrl, #seeCurrentUrlEquals, ..."],"updatePoint":{"line":45,"column":33,"index":1234},"line":45,"code":"    it('should check for equality', async () => {\n      await I.amOnPage('/angular-demo-app/#/info');\n      await I.seeCurrentUrlEquals('/angular-demo-app/#/info');\n      await I.dontSeeCurrentUrlEquals('/angular-demo-app/#/result');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should check text on site","suites":["Appium Web","see text : #see"],"updatePoint":{"line":52,"column":33,"index":1520},"line":52,"code":"    it('should check text on site', async () => {\n      await I.amOnPage('/angular-demo-app/');\n      await I.see('Description');\n      await I.dontSee('Create Event Today');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should check text inside element","suites":["Appium Web","see text : #see"],"updatePoint":{"line":57,"column":40,"index":1710},"line":57,"code":"    it('should check text inside element', async () => {\n      await I.amOnPage('/angular-demo-app/#/info');\n      await I.see('About', 'h1');\n      await I.see('Welcome to event app', {\n        css: 'p.jumbotron'\n      });\n      await I.see('Back to form', '//div/a');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should check visible elements on page","suites":["Appium Web","see element : #seeElement, #dontSeeElement"],"updatePoint":{"line":67,"column":45,"index":2064},"line":67,"code":"    it('should check visible elements on page', async () => {\n      await I.amOnPage('/angular-demo-app/');\n      await I.seeElement('.btn.btn-primary');\n      await I.seeElement({\n        css: '.btn.btn-primary'\n      });\n      await I.dontSeeElement({\n        css: '.btn.btn-secondary'\n      });\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should click by text","suites":["Appium Web","#click"],"updatePoint":{"line":79,"column":28,"index":2388},"line":79,"code":"    it('should click by text', async () => {\n      await I.amOnPage('/angular-demo-app/');\n      await I.dontSeeInCurrentUrl('/info');\n      await I.click('Get more info!');\n      await I.seeInCurrentUrl('/info');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should click by css","suites":["Appium Web","#click"],"updatePoint":{"line":85,"column":27,"index":2609},"line":85,"code":"    it('should click by css', async () => {\n      await I.amOnPage('/angular-demo-app/');\n      await I.click('.btn-primary');\n      await I.wait(2);\n      await I.seeInCurrentUrl('/result');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should click by non-optimal css","suites":["Appium Web","#click"],"updatePoint":{"line":91,"column":39,"index":2821},"line":91,"code":"    it('should click by non-optimal css', async () => {\n      await I.amOnPage('/angular-demo-app/');\n      await I.click('form a.btn');\n      await I.wait(2);\n      await I.seeInCurrentUrl('/result');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should click by xpath","suites":["Appium Web","#click"],"updatePoint":{"line":97,"column":29,"index":3021},"line":97,"code":"    it('should click by xpath', async () => {\n      await I.amOnPage('/angular-demo-app/');\n      await I.click('//a[contains(., \"more info\")]');\n      await I.seeInCurrentUrl('/info');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should click on context","suites":["Appium Web","#click"],"updatePoint":{"line":102,"column":31,"index":3217},"line":102,"code":"    it('should click on context', async () => {\n      await I.amOnPage('/angular-demo-app/');\n      await I.click('.btn-primary', 'form');\n      await I.wait(2);\n      await I.seeInCurrentUrl('/result');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should click link with inner span","suites":["Appium Web","#click"],"updatePoint":{"line":108,"column":41,"index":3439},"line":108,"code":"    it('should click link with inner span', async () => {\n      await I.amOnPage('/angular-demo-app/#/result');\n      await I.click('Go to info');\n      await I.seeInCurrentUrl('/info');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should click buttons as links","suites":["Appium Web","#click"],"updatePoint":{"line":113,"column":37,"index":3630},"line":113,"code":"    it('should click buttons as links', async () => {\n      await I.amOnPage('/angular-demo-app/');\n      await I.click('Options');\n      await I.seeInCurrentUrl('/options');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should grab text from page","suites":["Appium Web","#grabTextFrom, #grabValueFrom, #grabAttributeFrom"],"updatePoint":{"line":120,"column":34,"index":3888},"line":120,"code":"    it('should grab text from page', async () => {\n      await I.amOnPage('/angular-demo-app/#/info');\n      const val = await I.grabTextFrom('p.jumbotron');\n      val.should.be.equal('Welcome to event app');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should grab value from field","suites":["Appium Web","#grabTextFrom, #grabValueFrom, #grabAttributeFrom"],"updatePoint":{"line":125,"column":36,"index":4107},"line":125,"code":"    it('should grab value from field', async () => {\n      await I.amOnPage('/angular-demo-app/#/options');\n      const val = await I.grabValueFrom('#ssh');\n      val.should.be.equal('PUBLIC-SSH-KEY');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should grab attribute from element","suites":["Appium Web","#grabTextFrom, #grabValueFrom, #grabAttributeFrom"],"updatePoint":{"line":130,"column":42,"index":4323},"line":130,"code":"    it('should grab attribute from element', async () => {\n      await I.amOnPage('/angular-demo-app/#/info');\n      const val = await I.grabAttributeFrom('a.btn', 'ng-href');\n      val.should.be.equal('#/');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should work using within operator","suites":["Appium Web","#within"],"updatePoint":{"line":138,"column":41,"index":4612},"line":138,"code":"    it('should work using within operator', async () => {\n      await I.amOnPage('/angular-demo-app/#/options');\n      await I.see('Choose if you ok with terms');\n      await I._withinBegin({\n        css: 'div.results'\n      });\n      await I.see('SSH Public Key: PUBLIC-SSH-KEY');\n      await I.dontSee('Options');\n    });","file":"helper/AppiumWeb_test.js","skipped":false,"dir":"test"},{"name":"should check 200x codes","suites":["JSONResponse","response codes"],"updatePoint":{"line":39,"column":31,"index":648},"line":39,"code":"    it('should check 200x codes', async () => {\n      restHelper.config.onResponse({\n        status: 204\n      });\n      I.seeResponseCodeIs(204);\n      I.dontSeeResponseCodeIs(200);\n      I.seeResponseCodeIsSuccessful();\n    });","file":"helper/JSONResponse_test.js","skipped":false,"dir":"test"},{"name":"should check 300x codes","suites":["JSONResponse","response codes"],"updatePoint":{"line":47,"column":31,"index":878},"line":47,"code":"    it('should check 300x codes', async () => {\n      restHelper.config.onResponse({\n        status: 304\n      });\n      I.seeResponseCodeIs(304);\n      I.dontSeeResponseCodeIs(200);\n      I.seeResponseCodeIsRedirection();\n    });","file":"helper/JSONResponse_test.js","skipped":false,"dir":"test"},{"name":"should check 400x codes","suites":["JSONResponse","response codes"],"updatePoint":{"line":55,"column":31,"index":1109},"line":55,"code":"    it('should check 400x codes', async () => {\n      restHelper.config.onResponse({\n        status: 404\n      });\n      I.seeResponseCodeIs(404);\n      I.dontSeeResponseCodeIs(200);\n      I.seeResponseCodeIsClientError();\n    });","file":"helper/JSONResponse_test.js","skipped":false,"dir":"test"},{"name":"should check 500x codes","suites":["JSONResponse","response codes"],"updatePoint":{"line":63,"column":31,"index":1340},"line":63,"code":"    it('should check 500x codes', async () => {\n      restHelper.config.onResponse({\n        status: 504\n      });\n      I.seeResponseCodeIs(504);\n      I.dontSeeResponseCodeIs(200);\n      I.seeResponseCodeIsServerError();\n    });","file":"helper/JSONResponse_test.js","skipped":false,"dir":"test"},{"name":"should throw error on invalid code","suites":["JSONResponse","response codes"],"updatePoint":{"line":71,"column":42,"index":1582},"line":71,"code":"    it('should throw error on invalid code', () => {\n      restHelper.config.onResponse({\n        status: 504\n      });\n      expect(() => I.seeResponseCodeIs(200)).to.throw('Response code');\n    });","file":"helper/JSONResponse_test.js","skipped":false,"dir":"test"},{"name":"should check for json inclusion","suites":["JSONResponse","response data"],"updatePoint":{"line":79,"column":39,"index":1821},"line":79,"code":"    it('should check for json inclusion', () => {\n      restHelper.config.onResponse({\n        data\n      });\n      I.seeResponseContainsJson({\n        posts: [{\n          id: 2\n        }]\n      });\n      I.seeResponseContainsJson({\n        posts: [{\n          id: 1,\n          author: 'davert'\n        }]\n      });\n      expect(() => I.seeResponseContainsJson({\n        posts: [{\n          id: 2,\n          author: 'boss'\n        }]\n      })).to.throw('AssertionError');\n    });","file":"helper/JSONResponse_test.js","skipped":false,"dir":"test"},{"name":"should simply check for json inclusion","suites":["JSONResponse","response data"],"updatePoint":{"line":101,"column":46,"index":2308},"line":101,"code":"    it('should simply check for json inclusion', () => {\n      restHelper.config.onResponse({\n        data: {\n          user: {\n            name: 'jon',\n            email: 'jon@doe.com'\n          }\n        }\n      });\n      I.seeResponseContainsJson({\n        user: {\n          name: 'jon'\n        }\n      });\n      I.dontSeeResponseContainsJson({\n        user: {\n          name: 'jo'\n        }\n      });\n      I.dontSeeResponseContainsJson({\n        name: 'joe'\n      });\n    });","file":"helper/JSONResponse_test.js","skipped":false,"dir":"test"},{"name":"should simply check for json equality","suites":["JSONResponse","response data"],"updatePoint":{"line":124,"column":45,"index":2788},"line":124,"code":"    it('should simply check for json equality', () => {\n      restHelper.config.onResponse({\n        data: {\n          user: 1\n        }\n      });\n      I.seeResponseEquals({\n        user: 1\n      });\n    });","file":"helper/JSONResponse_test.js","skipped":false,"dir":"test"},{"name":"should check json contains keys","suites":["JSONResponse","response data"],"updatePoint":{"line":134,"column":39,"index":2991},"line":134,"code":"    it('should check json contains keys', () => {\n      restHelper.config.onResponse({\n        data: {\n          user: 1,\n          post: 2\n        }\n      });\n      I.seeResponseContainsKeys(['user', 'post']);\n    });","file":"helper/JSONResponse_test.js","skipped":false,"dir":"test"},{"name":"should check for json by callback","suites":["JSONResponse","response data"],"updatePoint":{"line":143,"column":41,"index":3212},"line":143,"code":"    it('should check for json by callback', () => {\n      restHelper.config.onResponse({\n        data\n      });\n\n      const fn = ({\n        expect,\n        data\n      }) => {\n        expect(data).to.have.keys(['posts', 'user']);\n      };\n\n      I.seeResponseValidByCallback(fn);\n      expect(fn.toString()).to.include('expect(data).to.have');\n    });","file":"helper/JSONResponse_test.js","skipped":false,"dir":"test"},{"name":"should check for json by joi schema","suites":["JSONResponse","response data"],"updatePoint":{"line":158,"column":43,"index":3566},"line":158,"code":"    it('should check for json by joi schema', () => {\n      restHelper.config.onResponse({\n        data\n      });\n      const schema = joi.object({\n        posts: joi.array().items({\n          id: joi.number(),\n          author: joi.string(),\n          title: joi.string()\n        }),\n        user: joi.object({\n          name: joi.string()\n        })\n      });\n\n      const fn = joi => {\n        return schema;\n      };\n\n      I.seeResponseMatchesJsonSchema(fn);\n      I.seeResponseMatchesJsonSchema(schema);\n    });","file":"helper/JSONResponse_test.js","skipped":false,"dir":"test"},{"name":"should open main page of configured site","suites":["Nightmare","open page : #amOnPage"],"updatePoint":{"line":49,"column":48,"index":1065},"line":49,"code":"    it('should open main page of configured site', async () => {\n      await I.amOnPage('/');\n      const url = await browser.url();\n      url.should.eql(`${siteUrl}/`);\n    });","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should open any page of configured site","suites":["Nightmare","open page : #amOnPage"],"updatePoint":{"line":54,"column":47,"index":1242},"line":54,"code":"    it('should open any page of configured site', async () => {\n      await I.amOnPage('/info');\n      const url = await browser.url();\n      url.should.eql(`${siteUrl}/info`);\n    });","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should open absolute url","suites":["Nightmare","open page : #amOnPage"],"updatePoint":{"line":59,"column":32,"index":1412},"line":59,"code":"    it('should open absolute url', async () => {\n      await I.amOnPage(siteUrl);\n      const url = await browser.url();\n      url.should.eql(`${siteUrl}/`);\n    });","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should open same page twice without error","suites":["Nightmare","open page : #amOnPage"],"updatePoint":{"line":64,"column":49,"index":1595},"line":64,"code":"    it('should open same page twice without error', async () => {\n      await I.amOnPage('/');\n      await I.amOnPage('/');\n    });","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should wait for function returns true","suites":["Nightmare","#waitForFunction"],"updatePoint":{"line":71,"column":45,"index":1791},"line":71,"code":"    it('should wait for function returns true', async () => {\n      await I.amOnPage('/form/wait_js');\n      await I.waitForFunction(() => window.__waitJs, 3);\n    });","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should pass arguments and wait for function returns true","suites":["Nightmare","#waitForFunction"],"updatePoint":{"line":75,"column":64,"index":1978},"line":75,"code":"    it('should pass arguments and wait for function returns true', async () => {\n      await I.amOnPage('/form/wait_js');\n      await I.waitForFunction(varName => window[varName], ['__waitJs'], 3);\n    });","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should trigger hover event","suites":["Nightmare","#moveCursorTo"],"updatePoint":{"line":83,"column":34,"index":2267},"line":83,"code":"    it('should trigger hover event', () => I.amOnPage('/form/hover').then(() => I.moveCursorTo('#hover')).then(() => I.see('Hovered', '#show')));","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should reinject scripts after navigating to new page","suites":["Nightmare","scripts Inject"],"updatePoint":{"line":86,"column":60,"index":2482},"line":86,"code":"    it('should reinject scripts after navigating to new page', () => I.amOnPage('/').then(() => I.click(\"//div[@id='area1']/a\")).then(() => I.waitForVisible(\"//input[@id='avatar']\")));","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should fail when text is not on site","suites":["Nightmare","see text : #see"],"updatePoint":{"line":89,"column":44,"index":2695},"line":89,"code":"    it('should fail when text is not on site', () => I.amOnPage('/').then(() => I.see('Something incredible!')).catch(e => {\n      e.should.be.instanceOf(AssertionFailedError);\n      e.inspect().should.include('web application');\n    }));","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should fail when clickable element not found","suites":["Nightmare","see text : #see"],"updatePoint":{"line":93,"column":52,"index":2942},"line":93,"code":"    it('should fail when clickable element not found', () => I.amOnPage('/').then(() => I.click('Welcome')).catch(e => {\n      e.should.be.instanceOf(Error);\n      e.message.should.include('Clickable');\n    }));","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should fail when text on site","suites":["Nightmare","see text : #see"],"updatePoint":{"line":97,"column":37,"index":3139},"line":97,"code":"    it('should fail when text on site', () => I.amOnPage('/').then(() => I.dontSee('Welcome')).catch(e => {\n      e.should.be.instanceOf(AssertionFailedError);\n      e.inspect().should.include('web application');\n    }));","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should fail when test is not in context","suites":["Nightmare","see text : #see"],"updatePoint":{"line":101,"column":47,"index":3371},"line":101,"code":"    it('should fail when test is not in context', () => I.amOnPage('/').then(() => I.see('debug', {\n      css: 'a'\n    })).catch(e => {\n      e.should.be.instanceOf(AssertionFailedError);\n      e.toString().should.not.include('web page');\n      e.inspect().should.include('expected element {css: a}');\n    }));","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should use locate to check element","suites":["Nightmare","#locate"],"updatePoint":{"line":110,"column":42,"index":3713},"line":110,"code":"    it('should use locate to check element', () => {\n      const attribute = 'qa-id';\n      return I.amOnPage('/').then(() => I._locate({\n        css: '.notice'\n      }).then(els => {\n        // we received an array with IDs of matched elements\n        // now let's execute client-side script to get attribute for the first element\n        assert.ok(!!els.length);\n        return browser.evaluate((el, attribute) => window.codeceptjs.fetchElement(el).getAttribute(attribute), els[0], attribute);\n      }).then(attributeValue => {\n        // get attribute value and back to server side\n        // execute an assertion\n        assert.equal(attributeValue, 'test');\n      }));\n    });","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should set initial window size","suites":["Nightmare","window size #resizeWindow"],"updatePoint":{"line":127,"column":38,"index":4445},"line":127,"code":"    it('should set initial window size', () => I.amOnPage('/form/resize').then(() => I.click('Window Size')).then(() => I.see('Height 700', '#height')).then(() => I.see('Width 500', '#width')));","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should resize window to specific dimensions","suites":["Nightmare","window size #resizeWindow"],"updatePoint":{"line":128,"column":51,"index":4653},"line":128,"code":"    it('should resize window to specific dimensions', () => I.amOnPage('/form/resize').then(() => I.resizeWindow(950, 600)).then(() => I.click('Window Size')).then(() => I.see('Height 600', '#height')).then(() => I.see('Width 950', '#width')));","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should refresh the current page","suites":["Nightmare","refresh page"],"updatePoint":{"line":131,"column":39,"index":4927},"line":131,"code":"    it('should refresh the current page', async () => {\n      await I.amOnPage(siteUrl);\n      const url = await browser.url();\n      assert.equal(`${siteUrl}/`, url);\n      await I.refreshPage();\n      const nextUrl = await browser.url(); // reloaded the page, check the url is the same\n\n      assert.equal(url, nextUrl);\n    });","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should return 1 as count","suites":["Nightmare","#seeNumberOfElements"],"updatePoint":{"line":142,"column":32,"index":5300},"line":142,"code":"    it('should return 1 as count', async () => {\n      await I.amOnPage('/');\n      await I.seeNumberOfElements('#area1', 1);\n    });","file":"helper/Nightmare_test.js","skipped":false,"dir":"test"},{"name":"should open main page of configured site","suites":["Playwright","open page : #amOnPage"],"updatePoint":{"line":66,"column":48,"index":1424},"line":66,"code":"    it('should open main page of configured site', async () => {\n      await I.amOnPage('/');\n      const url = await page.url();\n      await url.should.eql(`${siteUrl}/`);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should open any page of configured site","suites":["Playwright","open page : #amOnPage"],"updatePoint":{"line":71,"column":47,"index":1604},"line":71,"code":"    it('should open any page of configured site', async () => {\n      await I.amOnPage('/info');\n      const url = await page.url();\n      return url.should.eql(`${siteUrl}/info`);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should open absolute url","suites":["Playwright","open page : #amOnPage"],"updatePoint":{"line":76,"column":32,"index":1778},"line":76,"code":"    it('should open absolute url', async () => {\n      await I.amOnPage(siteUrl);\n      const url = await page.url();\n      return url.should.eql(`${siteUrl}/`);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should return data from performance timing","suites":["Playwright","grabDataFromPerformanceTiming"],"updatePoint":{"line":83,"column":50,"index":2024},"line":83,"code":"    it('should return data from performance timing', async () => {\n      await I.amOnPage('/');\n      const res = await I.grabDataFromPerformanceTiming();\n      expect(res).to.have.property('responseEnd');\n      expect(res).to.have.property('domInteractive');\n      expect(res).to.have.property('domContentLoadedEventEnd');\n      expect(res).to.have.property('loadEventEnd');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should not try to click on invisible elements","suites":["Playwright","#click"],"updatePoint":{"line":94,"column":53,"index":2469},"line":94,"code":"    it('should not try to click on invisible elements', async () => {\n      await I.amOnPage('/invisible_elements');\n      await I.click('Hello World');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should wait for function returns true","suites":["Playwright","#waitForFunction"],"updatePoint":{"line":100,"column":45,"index":2667},"line":100,"code":"    it('should wait for function returns true', () => {\n      return I.amOnPage('/form/wait_js').then(() => I.waitForFunction(() => window.__waitJs, 3));\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should pass arguments and wait for function returns true","suites":["Playwright","#waitForFunction"],"updatePoint":{"line":103,"column":64,"index":2848},"line":103,"code":"    it('should pass arguments and wait for function returns true', () => {\n      return I.amOnPage('/form/wait_js').then(() => I.waitForFunction(varName => window[varName], ['__waitJs'], 3));\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should wait for hidden element","suites":["Playwright","#waitToHide"],"updatePoint":{"line":108,"column":38,"index":3062},"line":108,"code":"    it('should wait for hidden element', () => {\n      return I.amOnPage('/form/wait_invisible').then(() => I.see('Step One Button')).then(() => I.waitToHide('#step_1', 2)).then(() => I.dontSeeElement('#step_1')).then(() => I.dontSee('Step One Button'));\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should wait for hidden element by XPath","suites":["Playwright","#waitToHide"],"updatePoint":{"line":111,"column":47,"index":3334},"line":111,"code":"    it('should wait for hidden element by XPath', () => {\n      return I.amOnPage('/form/wait_invisible').then(() => I.see('Step One Button')).then(() => I.waitToHide('//div[@id=\"step_1\"]', 2)).then(() => I.dontSeeElement('//div[@id=\"step_1\"]')).then(() => I.dontSee('Step One Button'));\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should wait for a specified number of elements on the page","suites":["Playwright","#waitNumberOfVisibleElements"],"updatePoint":{"line":116,"column":66,"index":3706},"line":116,"code":"    it('should wait for a specified number of elements on the page', () => I.amOnPage('/info').then(() => I.waitNumberOfVisibleElements('//div[@id = \"grab-multiple\"]//a', 3)).then(() => I.waitNumberOfVisibleElements('//div[@id = \"grab-multiple\"]//a', 2, 0.1)).then(() => {\n      throw Error('It should never get this far');\n    }).catch(e => {\n      e.message.should.include('The number of elements (//div[@id = \"grab-multiple\"]//a) is not 2 after 0.1 sec');\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should wait for a specified number of elements on the page using a css selector","suites":["Playwright","#waitNumberOfVisibleElements"],"updatePoint":{"line":121,"column":87,"index":4195},"line":121,"code":"    it('should wait for a specified number of elements on the page using a css selector', () => I.amOnPage('/info').then(() => I.waitNumberOfVisibleElements('#grab-multiple > a', 3)).then(() => I.waitNumberOfVisibleElements('#grab-multiple > a', 2, 0.1)).then(() => {\n      throw Error('It should never get this far');\n    }).catch(e => {\n      e.message.should.include('The number of elements (#grab-multiple > a) is not 2 after 0.1 sec');\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should wait for a specified number of elements which are not yet attached to the DOM","suites":["Playwright","#waitNumberOfVisibleElements"],"updatePoint":{"line":126,"column":92,"index":4650},"line":126,"code":"    it('should wait for a specified number of elements which are not yet attached to the DOM', () => I.amOnPage('/form/wait_num_elements').then(() => I.waitNumberOfVisibleElements('.title', 2, 3)).then(() => I.see('Hello')).then(() => I.see('World')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should trigger hover event","suites":["Playwright","#moveCursorTo"],"updatePoint":{"line":129,"column":34,"index":4887},"line":129,"code":"    it('should trigger hover event', () => I.amOnPage('/form/hover').then(() => I.moveCursorTo('#hover')).then(() => I.see('Hovered', '#show')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should not trigger hover event because of the offset is beyond the element","suites":["Playwright","#moveCursorTo"],"updatePoint":{"line":130,"column":82,"index":5081},"line":130,"code":"    it('should not trigger hover event because of the offset is beyond the element', () => I.amOnPage('/form/hover').then(() => I.moveCursorTo('#hover', 100, 100)).then(() => I.dontSee('Hovered', '#show')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should only have 1 tab open when the browser starts and navigates to the first page","suites":["Playwright","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":133,"column":91,"index":5436},"line":133,"code":"    it('should only have 1 tab open when the browser starts and navigates to the first page', () => I.amOnPage('/').then(() => I.wait(1)).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 1)));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should switch to next tab","suites":["Playwright","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":134,"column":33,"index":5599},"line":134,"code":"    it('should switch to next tab', () => I.amOnPage('/info').then(() => I.wait(1)).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 1)).then(() => I.click('New tab')).then(() => I.switchToNextTab()).then(() => I.wait(2)).then(() => I.seeCurrentUrlEquals('/login')).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 2)));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should assert when there is no ability to switch to next tab","suites":["Playwright","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":135,"column":68,"index":6011},"line":135,"code":"    it('should assert when there is no ability to switch to next tab', () => I.amOnPage('/').then(() => I.click('More info')).then(() => I.wait(1)) // Wait is required because the url is change by previous statement (maybe related to #914)\n    .then(() => I.switchToNextTab(2)).then(() => I.wait(2)).then(() => assert.equal(true, false, 'Throw an error if it gets this far (which it should not)!')).catch(e => {\n      assert.equal(e.message, 'There is no ability to switch to next tab with offset 2');\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should close current tab","suites":["Playwright","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":139,"column":32,"index":6486},"line":139,"code":"    it('should close current tab', () => I.amOnPage('/info').then(() => I.click('New tab')).then(() => I.switchToNextTab()).then(() => I.wait(2)).then(() => I.seeInCurrentUrl('/login')).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 2)).then(() => I.closeCurrentTab()).then(() => I.wait(1)).then(() => I.seeInCurrentUrl('/info')).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 1)));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should close other tabs","suites":["Playwright","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":140,"column":31,"index":6928},"line":140,"code":"    it('should close other tabs', () => I.amOnPage('/').then(() => I.openNewTab()).then(() => I.wait(1)).then(() => I.seeInCurrentUrl('about:blank')).then(() => I.amOnPage('/info')).then(() => I.openNewTab()).then(() => I.amOnPage('/login')).then(() => I.closeOtherTabs()).then(() => I.wait(1)).then(() => I.seeInCurrentUrl('/login')).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 1)));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should open new tab","suites":["Playwright","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":141,"column":27,"index":7342},"line":141,"code":"    it('should open new tab', () => I.amOnPage('/info').then(() => I.openNewTab()).then(() => I.wait(1)).then(() => I.seeInCurrentUrl('about:blank')).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 2)));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should switch to previous tab","suites":["Playwright","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":142,"column":37,"index":7585},"line":142,"code":"    it('should switch to previous tab', () => I.amOnPage('/info').then(() => I.openNewTab()).then(() => I.wait(1)).then(() => I.seeInCurrentUrl('about:blank')).then(() => I.switchToPreviousTab()).then(() => I.wait(2)).then(() => I.seeInCurrentUrl('/info')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should assert when there is no ability to switch to previous tab","suites":["Playwright","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":143,"column":72,"index":7879},"line":143,"code":"    it('should assert when there is no ability to switch to previous tab', () => I.amOnPage('/info').then(() => I.openNewTab()).then(() => I.wait(1)).then(() => I.waitInUrl('about:blank')).then(() => I.switchToPreviousTab(2)).then(() => I.wait(2)).then(() => I.waitInUrl('/info')).catch(e => {\n      assert.equal(e.message, 'There is no ability to switch to previous tab with offset 2');\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should accept popup window","suites":["Playwright","popup : #acceptPopup, #seeInPopup, #cancelPopup, #grabPopupText"],"updatePoint":{"line":148,"column":34,"index":8330},"line":148,"code":"    it('should accept popup window', () => I.amOnPage('/form/popup').then(() => I.amAcceptingPopups()).then(() => I.click('Confirm')).then(() => I.acceptPopup()).then(() => I.see('Yes', '#result')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should accept popup window (using default popup action type)","suites":["Playwright","popup : #acceptPopup, #seeInPopup, #cancelPopup, #grabPopupText"],"updatePoint":{"line":149,"column":68,"index":8564},"line":149,"code":"    it('should accept popup window (using default popup action type)', () => I.amOnPage('/form/popup').then(() => I.click('Confirm')).then(() => I.acceptPopup()).then(() => I.see('Yes', '#result')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should cancel popup","suites":["Playwright","popup : #acceptPopup, #seeInPopup, #cancelPopup, #grabPopupText"],"updatePoint":{"line":150,"column":27,"index":8723},"line":150,"code":"    it('should cancel popup', () => I.amOnPage('/form/popup').then(() => I.amCancellingPopups()).then(() => I.click('Confirm')).then(() => I.cancelPopup()).then(() => I.see('No', '#result')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should check text in popup","suites":["Playwright","popup : #acceptPopup, #seeInPopup, #cancelPopup, #grabPopupText"],"updatePoint":{"line":151,"column":34,"index":8923},"line":151,"code":"    it('should check text in popup', () => I.amOnPage('/form/popup').then(() => I.amCancellingPopups()).then(() => I.click('Alert')).then(() => I.seeInPopup('Really?')).then(() => I.cancelPopup()));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should grab text from popup","suites":["Playwright","popup : #acceptPopup, #seeInPopup, #cancelPopup, #grabPopupText"],"updatePoint":{"line":152,"column":35,"index":9123},"line":152,"code":"    it('should grab text from popup', () => I.amOnPage('/form/popup').then(() => I.amCancellingPopups()).then(() => I.click('Alert')).then(() => I.grabPopupText()).then(text => assert.equal(text, 'Really?')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should return null if no popup is visible (do not throw an error)","suites":["Playwright","popup : #acceptPopup, #seeInPopup, #cancelPopup, #grabPopupText"],"updatePoint":{"line":153,"column":73,"index":9371},"line":153,"code":"    it('should return null if no popup is visible (do not throw an error)', () => I.amOnPage('/form/popup').then(() => I.grabPopupText()).then(text => assert.equal(text, null)));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should return 1 as count","suites":["Playwright","#seeNumberOfElements"],"updatePoint":{"line":156,"column":32,"index":9558},"line":156,"code":"    it('should return 1 as count', () => I.amOnPage('/').then(() => I.seeNumberOfElements('#area1', 1)));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should switch reference to iframe content","suites":["Playwright","#switchTo"],"updatePoint":{"line":159,"column":49,"index":9719},"line":159,"code":"    it('should switch reference to iframe content', () => I.amOnPage('/iframe').then(() => I.switchTo('[name=\"content\"]')).then(() => I.see('Information')).then(() => I.see('Lots of valuable data here')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should return error if iframe selector is invalid","suites":["Playwright","#switchTo"],"updatePoint":{"line":160,"column":57,"index":9933},"line":160,"code":"    it('should return error if iframe selector is invalid', () => I.amOnPage('/iframe').then(() => I.switchTo('#invalidIframeSelector')).catch(e => {\n      e.should.be.instanceOf(Error);\n      e.message.should.be.equal('Element \"#invalidIframeSelector\" was not found by text|CSS|XPath');\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should return error if iframe selector is not iframe","suites":["Playwright","#switchTo"],"updatePoint":{"line":164,"column":60,"index":10233},"line":164,"code":"    it('should return error if iframe selector is not iframe', () => I.amOnPage('/iframe').then(() => I.switchTo('h1')).catch(e => {\n      e.should.be.instanceOf(Error);\n      e.message.should.be.equal('Element \"#invalidIframeSelector\" was not found by text|CSS|XPath');\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should return to parent frame given a null locator","suites":["Playwright","#switchTo"],"updatePoint":{"line":168,"column":58,"index":10511},"line":168,"code":"    it('should return to parent frame given a null locator', () => I.amOnPage('/iframe').then(() => I.switchTo('[name=\"content\"]')).then(() => I.see('Information')).then(() => I.see('Lots of valuable data here')).then(() => I.switchTo(null)).then(() => I.see('Iframe test')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should check for text to be in HTML source","suites":["Playwright","#seeInSource, #grabSource"],"updatePoint":{"line":171,"column":50,"index":10834},"line":171,"code":"    it('should check for text to be in HTML source', () => I.amOnPage('/').then(() => I.seeInSource('<title>TestEd Beta 2.0</title>')).then(() => I.dontSeeInSource('<meta')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should grab the source","suites":["Playwright","#seeInSource, #grabSource"],"updatePoint":{"line":172,"column":30,"index":10990},"line":172,"code":"    it('should grab the source', () => I.amOnPage('/').then(() => I.grabSource()).then(source => assert.notEqual(source.indexOf('<title>TestEd Beta 2.0</title>'), -1, 'Source html should be retrieved')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should check that title is equal to provided one","suites":["Playwright","#seeTitleEquals"],"updatePoint":{"line":175,"column":56,"index":11265},"line":175,"code":"    it('should check that title is equal to provided one', () => I.amOnPage('/').then(() => I.seeTitleEquals('TestEd Beta 2.0')).then(() => I.seeTitleEquals('TestEd Beta 2.')).then(() => assert.equal(true, false, 'Throw an error because it should not get this far!')).catch(e => {\n      e.should.be.instanceOf(Error);\n      e.message.should.be.equal('expected web page title \"TestEd Beta 2.0\" to equal \"TestEd Beta 2.\"');\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should check text is equal to provided one","suites":["Playwright","#seeTextEquals"],"updatePoint":{"line":181,"column":50,"index":11733},"line":181,"code":"    it('should check text is equal to provided one', () => I.amOnPage('/').then(() => I.seeTextEquals('Welcome to test app!', 'h1')).then(() => I.seeTextEquals('Welcome to test app', 'h1')).then(() => assert.equal(true, false, 'Throw an error because it should not get this far!')).catch(e => {\n      e.should.be.instanceOf(Error);\n      e.message.should.be.equal('expected element h1 \"Welcome to test app\" to equal \"Welcome to test app!\"');\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should locate a button to click","suites":["Playwright","#_locateClickable"],"updatePoint":{"line":187,"column":39,"index":12219},"line":187,"code":"    it('should locate a button to click', () => I.amOnPage('/form/checkbox').then(() => I._locateClickable('Submit')).then(res => {\n      res.length.should.be.equal(1);\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should not locate a non-existing checkbox using _locateClickable","suites":["Playwright","#_locateClickable"],"updatePoint":{"line":190,"column":72,"index":12430},"line":190,"code":"    it('should not locate a non-existing checkbox using _locateClickable', () => I.amOnPage('/form/checkbox').then(() => I._locateClickable('I disagree')).then(res => res.length.should.be.equal(0)));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should locate a checkbox","suites":["Playwright","#_locateCheckable"],"updatePoint":{"line":193,"column":32,"index":12636},"line":193,"code":"    it('should locate a checkbox', () => I.amOnPage('/form/checkbox').then(() => I._locateCheckable('I Agree')).then(res => res.should.be.not.undefined));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should locate a field","suites":["Playwright","#_locateFields"],"updatePoint":{"line":196,"column":29,"index":12831},"line":196,"code":"    it('should locate a field', () => I.amOnPage('/form/field').then(() => I._locateFields('Name')).then(res => res.length.should.be.equal(1)));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should not locate a non-existing field","suites":["Playwright","#_locateFields"],"updatePoint":{"line":197,"column":46,"index":12993},"line":197,"code":"    it('should not locate a non-existing field', () => I.amOnPage('/form/field').then(() => I._locateFields('Mother-in-law')).then(res => res.length.should.be.equal(0)));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should throw error if field is not empty","suites":["Playwright","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":200,"column":48,"index":13248},"line":200,"code":"    it('should throw error if field is not empty', () => I.amOnPage('/form/empty').then(() => I.seeInField('#empty_input', 'Ayayay')).catch(e => {\n      e.should.be.instanceOf(AssertionFailedError);\n      e.inspect().should.be.equal('expected fields by #empty_input to include \"Ayayay\"');\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should check values in checkboxes","suites":["Playwright","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":204,"column":41,"index":13539},"line":204,"code":"    it('should check values in checkboxes', async () => {\n      await I.amOnPage('/form/field_values');\n      await I.dontSeeInField('checkbox[]', 'not seen one');\n      await I.seeInField('checkbox[]', 'see test one');\n      await I.dontSeeInField('checkbox[]', 'not seen two');\n      await I.seeInField('checkbox[]', 'see test two');\n      await I.dontSeeInField('checkbox[]', 'not seen three');\n      await I.seeInField('checkbox[]', 'see test three');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should check values with boolean","suites":["Playwright","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":213,"column":40,"index":14002},"line":213,"code":"    it('should check values with boolean', async () => {\n      await I.amOnPage('/form/field_values');\n      await I.seeInField('checkbox1', true);\n      await I.dontSeeInField('checkbox1', false);\n      await I.seeInField('checkbox2', false);\n      await I.dontSeeInField('checkbox2', true);\n      await I.seeInField('radio2', true);\n      await I.dontSeeInField('radio2', false);\n      await I.seeInField('radio3', false);\n      await I.dontSeeInField('radio3', true);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should check values in radio","suites":["Playwright","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":224,"column":36,"index":14477},"line":224,"code":"    it('should check values in radio', async () => {\n      await I.amOnPage('/form/field_values');\n      await I.seeInField('radio1', 'see test one');\n      await I.dontSeeInField('radio1', 'not seen one');\n      await I.dontSeeInField('radio1', 'not seen two');\n      await I.dontSeeInField('radio1', 'not seen three');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should check values in select","suites":["Playwright","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":231,"column":37,"index":14807},"line":231,"code":"    it('should check values in select', async () => {\n      await I.amOnPage('/form/field_values');\n      await I.seeInField('select1', 'see test one');\n      await I.dontSeeInField('select1', 'not seen one');\n      await I.dontSeeInField('select1', 'not seen two');\n      await I.dontSeeInField('select1', 'not seen three');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should check for empty select field","suites":["Playwright","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":238,"column":43,"index":15147},"line":238,"code":"    it('should check for empty select field', async () => {\n      await I.amOnPage('/form/field_values');\n      await I.seeInField('select3', '');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should check for select multiple field","suites":["Playwright","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":242,"column":46,"index":15305},"line":242,"code":"    it('should check for select multiple field', async () => {\n      await I.amOnPage('/form/field_values');\n      await I.dontSeeInField('select2', 'not seen one');\n      await I.seeInField('select2', 'see test one');\n      await I.dontSeeInField('select2', 'not seen two');\n      await I.seeInField('select2', 'see test two');\n      await I.dontSeeInField('select2', 'not seen three');\n      await I.seeInField('select2', 'see test three');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should be able to send special keys to element","suites":["Playwright","#pressKey, #pressKeyDown, #pressKeyUp"],"updatePoint":{"line":253,"column":54,"index":15830},"line":253,"code":"    it('should be able to send special keys to element', async () => {\n      await I.amOnPage('/form/field');\n      await I.appendField('Name', '-');\n      await I.pressKey(['Right Shift', 'Home']);\n      await I.pressKey('Delete'); // Sequence only executes up to first non-modifier key ('Digit1')\n\n      await I.pressKey(['SHIFT_RIGHT', 'Digit1', 'Digit4']);\n      await I.pressKey('1');\n      await I.pressKey('2');\n      await I.pressKey('3');\n      await I.pressKey('ArrowLeft');\n      await I.pressKey('Left Arrow');\n      await I.pressKey('arrow_left');\n      await I.pressKeyDown('Shift');\n      await I.pressKey('a');\n      await I.pressKey('KeyB');\n      await I.pressKeyUp('ShiftLeft');\n      await I.pressKey('C');\n      await I.seeInField('Name', '!ABC123');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should use modifier key based on operating system","suites":["Playwright","#pressKey, #pressKeyDown, #pressKeyUp"],"updatePoint":{"line":273,"column":57,"index":16613},"line":273,"code":"    it('should use modifier key based on operating system', async () => {\n      await I.amOnPage('/form/field');\n      await I.fillField('Name', 'value that is cleared using select all shortcut');\n      await I.pressKey(['ControlOrCommand', 'a']);\n      await I.pressKey('Backspace');\n      await I.dontSeeInField('Name', 'value that is cleared using select all shortcut');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should show correct numpad or punctuation key when Shift modifier is active","suites":["Playwright","#pressKey, #pressKeyDown, #pressKeyUp"],"updatePoint":{"line":280,"column":83,"index":17021},"line":280,"code":"    it('should show correct numpad or punctuation key when Shift modifier is active', async () => {\n      await I.amOnPage('/form/field');\n      await I.fillField('Name', '');\n      await I.pressKey(';');\n      await I.pressKey(['Shift', ';']);\n      await I.pressKey(['Shift', 'Semicolon']);\n      await I.pressKey('=');\n      await I.pressKey(['Shift', '=']);\n      await I.pressKey(['Shift', 'Equal']);\n      await I.pressKey('*');\n      await I.pressKey(['Shift', '*']);\n      await I.pressKey(['Shift', 'Multiply']);\n      await I.pressKey('+');\n      await I.pressKey(['Shift', '+']);\n      await I.pressKey(['Shift', 'Add']);\n      await I.pressKey(',');\n      await I.pressKey(['Shift', ',']);\n      await I.pressKey(['Shift', 'Comma']);\n      await I.pressKey(['Shift', 'NumpadComma']);\n      await I.pressKey(['Shift', 'Separator']);\n      await I.pressKey('-');\n      await I.pressKey(['Shift', '-']);\n      await I.pressKey(['Shift', 'Subtract']);\n      await I.pressKey('.');\n      await I.pressKey(['Shift', '.']);\n      await I.pressKey('/');\n      await I.pressKey(['Shift', '/']);\n      await I.pressKey(['Shift', 'Divide']);\n      await I.pressKey(['Shift', 'Slash']);\n      await I.seeInField('Name', ';::=++***+++,<<<<-_-.>/?/?');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should wait for input text field to be enabled","suites":["Playwright","#waitForEnabled"],"updatePoint":{"line":313,"column":54,"index":18295},"line":313,"code":"    it('should wait for input text field to be enabled', () => I.amOnPage('/form/wait_enabled').then(() => I.waitForEnabled('#text', 2)).then(() => I.fillField('#text', 'hello world')).then(() => I.seeInField('#text', 'hello world')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should wait for input text field to be enabled by xpath","suites":["Playwright","#waitForEnabled"],"updatePoint":{"line":314,"column":63,"index":18540},"line":314,"code":"    it('should wait for input text field to be enabled by xpath', () => I.amOnPage('/form/wait_enabled').then(() => I.waitForEnabled(\"//*[@name = 'test']\", 2)).then(() => I.fillField('#text', 'hello world')).then(() => I.seeInField('#text', 'hello world')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should wait for a button to be enabled","suites":["Playwright","#waitForEnabled"],"updatePoint":{"line":315,"column":46,"index":18782},"line":315,"code":"    it('should wait for a button to be enabled', () => I.amOnPage('/form/wait_enabled').then(() => I.waitForEnabled('#text', 2)).then(() => I.click('#button')).then(() => I.see('button was clicked', '#message')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should wait for expected value for given locator","suites":["Playwright","#waitForValue"],"updatePoint":{"line":318,"column":56,"index":19048},"line":318,"code":"    it('should wait for expected value for given locator', () => I.amOnPage('/info').then(() => I.waitForValue('//input[@name= \"rus\"]', 'Верно')).then(() => I.waitForValue('//input[@name= \"rus\"]', 'Верно3', 0.1)).then(() => {\n      throw Error('It should never get this far');\n    }).catch(e => {\n      e.message.should.include('element (//input[@name= \"rus\"]) is not in DOM or there is no element(//input[@name= \"rus\"]) with value \"Верно3\" after 0.1 sec');\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should wait for expected value for given css locator","suites":["Playwright","#waitForValue"],"updatePoint":{"line":323,"column":60,"index":19519},"line":323,"code":"    it('should wait for expected value for given css locator', () => I.amOnPage('/form/wait_value').then(() => I.seeInField('#text', 'Hamburg')).then(() => I.waitForValue('#text', 'Brisbane', 2.5)).then(() => I.seeInField('#text', 'Brisbane')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should wait for expected value for given xpath locator","suites":["Playwright","#waitForValue"],"updatePoint":{"line":324,"column":62,"index":19767},"line":324,"code":"    it('should wait for expected value for given xpath locator', () => I.amOnPage('/form/wait_value').then(() => I.seeInField('#text', 'Hamburg')).then(() => I.waitForValue('//input[@value = \"Grüße aus Hamburg\"]', 'Brisbane', 2.5)).then(() => I.seeInField('#text', 'Brisbane')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should only wait for one of the matching elements to contain the value given xpath locator","suites":["Playwright","#waitForValue"],"updatePoint":{"line":325,"column":98,"index":20083},"line":325,"code":"    it('should only wait for one of the matching elements to contain the value given xpath locator', () => I.amOnPage('/form/wait_value').then(() => I.waitForValue('//input[@type = \"text\"]', 'Brisbane', 4)).then(() => I.seeInField('#text', 'Brisbane')).then(() => I.seeInField('#text2', 'London')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should only wait for one of the matching elements to contain the value given css locator","suites":["Playwright","#waitForValue"],"updatePoint":{"line":326,"column":96,"index":20381},"line":326,"code":"    it('should only wait for one of the matching elements to contain the value given css locator', () => I.amOnPage('/form/wait_value').then(() => I.waitForValue('.inputbox', 'Brisbane', 4)).then(() => I.seeInField('#text', 'Brisbane')).then(() => I.seeInField('#text2', 'London')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should grab inner html from an element using xpath query","suites":["Playwright","#grabHTMLFrom"],"updatePoint":{"line":329,"column":64,"index":20675},"line":329,"code":"    it('should grab inner html from an element using xpath query', () => I.amOnPage('/').then(() => I.grabHTMLFrom('//title')).then(html => assert.equal(html, 'TestEd Beta 2.0')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should grab inner html from an element using id query","suites":["Playwright","#grabHTMLFrom"],"updatePoint":{"line":330,"column":61,"index":20853},"line":330,"code":"    it('should grab inner html from an element using id query', () => I.amOnPage('/').then(() => I.grabHTMLFrom('#area1')).then(html => assert.equal(html.trim(), '<a href=\"/form/file\" qa-id=\"test\" qa-link=\"test\"> Test Link </a>')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should grab inner html from multiple elements","suites":["Playwright","#grabHTMLFrom"],"updatePoint":{"line":331,"column":53,"index":21078},"line":331,"code":"    it('should grab inner html from multiple elements', () => I.amOnPage('/').then(() => I.grabHTMLFromAll('//a')).then(html => assert.equal(html.length, 5)));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should grab inner html from within an iframe","suites":["Playwright","#grabHTMLFrom"],"updatePoint":{"line":332,"column":52,"index":21237},"line":332,"code":"    it('should grab inner html from within an iframe', () => I.amOnPage('/iframe').then(() => I.switchTo({\n      frame: 'iframe'\n    })).then(() => I.grabHTMLFrom('#new-tab')).then(html => assert.equal(html.trim(), '<a href=\"/login\" target=\"_blank\">New tab</a>')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should grab browser logs","suites":["Playwright","#grabBrowserLogs"],"updatePoint":{"line":337,"column":32,"index":21528},"line":337,"code":"    it('should grab browser logs', () => I.amOnPage('/').then(() => I.executeScript(() => {\n      console.log('Test log entry');\n    })).then(() => I.grabBrowserLogs()).then(logs => {\n      const matchingLogs = logs.filter(log => log.text().indexOf('Test log entry') > -1);\n      assert.equal(matchingLogs.length, 1);\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should grab browser logs in new tab","suites":["Playwright","#grabBrowserLogs"],"updatePoint":{"line":343,"column":43,"index":21866},"line":343,"code":"    it('should grab browser logs in new tab', () => I.amOnPage('/').then(() => I.openNewTab()).then(() => I.executeScript(() => {\n      console.log('Test log entry');\n    })).then(() => I.grabBrowserLogs()).then(logs => {\n      const matchingLogs = logs.filter(log => log.text().indexOf('Test log entry') > -1);\n      assert.equal(matchingLogs.length, 1);\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should grab browser logs in two tabs","suites":["Playwright","#grabBrowserLogs"],"updatePoint":{"line":349,"column":44,"index":22232},"line":349,"code":"    it('should grab browser logs in two tabs', () => I.amOnPage('/').then(() => I.executeScript(() => {\n      console.log('Test log entry 1');\n    })).then(() => I.openNewTab()).then(() => I.executeScript(() => {\n      console.log('Test log entry 2');\n    })).then(() => I.grabBrowserLogs()).then(logs => {\n      const matchingLogs = logs.filter(log => log.text().includes('Test log entry'));\n      assert.equal(matchingLogs.length, 2);\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should grab browser logs in next tab","suites":["Playwright","#grabBrowserLogs"],"updatePoint":{"line":357,"column":44,"index":22678},"line":357,"code":"    it('should grab browser logs in next tab', () => I.amOnPage('/info').then(() => I.click('New tab')).then(() => I.switchToNextTab()).then(() => I.executeScript(() => {\n      console.log('Test log entry');\n    })).then(() => I.grabBrowserLogs()).then(logs => {\n      const matchingLogs = logs.filter(log => log.text().indexOf('Test log entry') > -1);\n      assert.equal(matchingLogs.length, 1);\n    }));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"Drag item from source to target (no iframe) @dragNdrop","suites":["Playwright","#dragAndDrop"],"updatePoint":{"line":365,"column":62,"index":23143},"line":365,"code":"    it('Drag item from source to target (no iframe) @dragNdrop', () => I.amOnPage('https://jqueryui.com/resources/demos/droppable/default.html').then(() => I.seeElementInDOM('#draggable')).then(() => I.dragAndDrop('#draggable', '#droppable')).then(() => I.see('Dropped')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"Drag and drop from within an iframe","suites":["Playwright","#dragAndDrop"],"updatePoint":{"line":366,"column":44,"index":23399},"line":366,"code":"    xit('Drag and drop from within an iframe', () => I.amOnPage('https://jqueryui.com/droppable').then(() => I.resizeWindow(700, 700)).then(() => I.switchTo('//iframe[@class=\"demo-frame\"]')).then(() => I.seeElementInDOM('#draggable')).then(() => I.dragAndDrop('#draggable', '#droppable')).then(() => I.see('Dropped')));","skipped":true,"file":"helper/Playwright_test.js","dir":"test"},{"name":"should switch to frame using name","suites":["Playwright","#switchTo frame"],"updatePoint":{"line":369,"column":41,"index":23760},"line":369,"code":"    it('should switch to frame using name', () => I.amOnPage('/iframe').then(() => I.see('Iframe test', 'h1')).then(() => I.dontSee('Information', 'h1')).then(() => I.switchTo('iframe')).then(() => I.see('Information', 'h1')).then(() => I.dontSee('Iframe test', 'h1')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should switch to root frame","suites":["Playwright","#switchTo frame"],"updatePoint":{"line":370,"column":35,"index":24025},"line":370,"code":"    it('should switch to root frame', () => I.amOnPage('/iframe').then(() => I.see('Iframe test', 'h1')).then(() => I.dontSee('Information', 'h1')).then(() => I.switchTo('iframe')).then(() => I.see('Information', 'h1')).then(() => I.dontSee('Iframe test', 'h1')).then(() => I.switchTo()).then(() => I.see('Iframe test', 'h1')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should switch to frame using frame number","suites":["Playwright","#switchTo frame"],"updatePoint":{"line":371,"column":49,"index":24368},"line":371,"code":"    it('should switch to frame using frame number', () => I.amOnPage('/iframe').then(() => I.see('Iframe test', 'h1')).then(() => I.dontSee('Information', 'h1')).then(() => I.switchTo(0)).then(() => I.see('Information', 'h1')).then(() => I.dontSee('Iframe test', 'h1')));","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should drag scrubber to given position","suites":["Playwright","#dragSlider"],"updatePoint":{"line":374,"column":46,"index":24677},"line":374,"code":"    it('should drag scrubber to given position', async () => {\n      await I.amOnPage('/form/page_slider');\n      await I.seeElementInDOM('#slidecontainer input');\n      const before = await I.grabValueFrom('#slidecontainer input');\n      await I.dragSlider('#slidecontainer input', 20);\n      const after = await I.grabValueFrom('#slidecontainer input');\n      assert.notEqual(before, after);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should uncheck option that is currently checked","suites":["Playwright","#uncheckOption"],"updatePoint":{"line":384,"column":55,"index":25131},"line":384,"code":"    it('should uncheck option that is currently checked', async () => {\n      await I.amOnPage('/info');\n      await I.uncheckOption('interesting');\n      await I.dontSeeCheckboxIsChecked('interesting');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should NOT uncheck option that is NOT currently checked","suites":["Playwright","#uncheckOption"],"updatePoint":{"line":389,"column":63,"index":25351},"line":389,"code":"    it('should NOT uncheck option that is NOT currently checked', async () => {\n      await I.amOnPage('/info');\n      await I.uncheckOption('interesting'); // Unchecking again should not affect the current 'unchecked' status\n\n      await I.uncheckOption('interesting');\n      await I.dontSeeCheckboxIsChecked('interesting');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should return title","suites":["Playwright","#usePlaywrightTo"],"updatePoint":{"line":398,"column":27,"index":25694},"line":398,"code":"    it('should return title', async () => {\n      await I.amOnPage('/');\n      const title = await I.usePlaywrightTo('test', async ({\n        page\n      }) => {\n        return page.title();\n      });\n      assert.equal('TestEd Beta 2.0', title);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should pass expected parameters","suites":["Playwright","#usePlaywrightTo"],"updatePoint":{"line":407,"column":39,"index":25960},"line":407,"code":"    it('should pass expected parameters', async () => {\n      await I.amOnPage('/');\n      const params = await I.usePlaywrightTo('test', async params => {\n        return params;\n      });\n      expect(params.page).to.exist;\n      expect(params.browserContext).to.exist;\n      expect(params.browser).to.exist;\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should mock a route","suites":["Playwright","#mockRoute, #stopMockingRoute"],"updatePoint":{"line":418,"column":27,"index":26324},"line":418,"code":"    it('should mock a route', async () => {\n      await I.amOnPage('/form/fetch_call');\n      await I.mockRoute('https://jsonplaceholder.typicode.com/comments/1', route => {\n        route.fulfill({\n          status: 200,\n          headers: {\n            'Access-Control-Allow-Origin': '*'\n          },\n          contentType: 'application/json',\n          body: '{\"name\": \"this was mocked\" }'\n        });\n      });\n      await I.click('GET COMMENTS');\n      await I.see('this was mocked');\n      await I.stopMockingRoute('https://jsonplaceholder.typicode.com/comments/1');\n      await I.click('GET COMMENTS');\n      await I.see('postId');\n      await I.dontSee('this was mocked');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should make 3rd party API request","suites":["Playwright","#makeApiRequest"],"updatePoint":{"line":439,"column":41,"index":27070},"line":439,"code":"    it('should make 3rd party API request', async () => {\n      const response = await I.makeApiRequest('get', 'https://jsonplaceholder.typicode.com/comments/1');\n      expect(response.status()).to.equal(200);\n      expect(await response.json()).to.include.keys(['id', 'name']);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should make local API request","suites":["Playwright","#makeApiRequest"],"updatePoint":{"line":444,"column":37,"index":27353},"line":444,"code":"    it('should make local API request', async () => {\n      const response = await I.makeApiRequest('get', '/form/fetch_call');\n      expect(response.status()).to.equal(200);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should convert to axios response with onResponse hook","suites":["Playwright","#makeApiRequest"],"updatePoint":{"line":448,"column":61,"index":27560},"line":448,"code":"    it('should convert to axios response with onResponse hook', async () => {\n      let response;\n\n      I.config.onResponse = resp => response = resp;\n\n      await I.makeApiRequest('get', 'https://jsonplaceholder.typicode.com/comments/1');\n      expect(response).to.be.ok;\n      expect(response.status).to.equal(200);\n      expect(response.data).to.include.keys(['id', 'name']);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should get the element bounding rectangle","suites":["Playwright","#grabElementBoundingRect"],"updatePoint":{"line":460,"column":49,"index":27989},"line":460,"code":"    it('should get the element bounding rectangle', async () => {\n      await I.amOnPage('/image');\n      const size = await I.grabElementBoundingRect('#logo');\n      expect(size.x).is.greaterThan(39); // 40 or more\n\n      expect(size.y).is.greaterThan(39);\n      expect(size.width).is.greaterThan(0);\n      expect(size.height).is.greaterThan(0);\n      expect(size.width).to.eql(100);\n      expect(size.height).to.eql(100);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should get the element width","suites":["Playwright","#grabElementBoundingRect"],"updatePoint":{"line":471,"column":36,"index":28408},"line":471,"code":"    it('should get the element width', async () => {\n      await I.amOnPage('/image');\n      const width = await I.grabElementBoundingRect('#logo', 'width');\n      expect(width).is.greaterThan(0);\n      expect(width).to.eql(100);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should get the element height","suites":["Playwright","#grabElementBoundingRect"],"updatePoint":{"line":477,"column":37,"index":28647},"line":477,"code":"    it('should get the element height', async () => {\n      await I.amOnPage('/image');\n      const height = await I.grabElementBoundingRect('#logo', 'height');\n      expect(height).is.greaterThan(0);\n      expect(height).to.eql(100);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should dowload file","suites":["Playwright","#handleDownloads"],"updatePoint":{"line":494,"column":27,"index":29133},"line":494,"code":"    it('should dowload file', async () => {\n      await I.amOnPage('/form/download');\n      await I.handleDownloads('downloads/avatar.jpg');\n      await I.click('Download file');\n      await FS.waitForFile('downloads/avatar.jpg', 5);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should throw an exception when endpoint is unreachable","suites":["Playwright (remote browser) websocket","#_startBrowser"],"updatePoint":{"line":554,"column":62,"index":30879},"line":554,"code":"    it('should throw an exception when endpoint is unreachable', async () => {\n      I._setConfig({ ...helperConfig,\n        chromium: {\n          browserWSEndpoint: 'ws://unreachable/'\n        }\n      });\n\n      try {\n        await I._startBrowser();\n        throw Error('It should never get this far');\n      } catch (e) {\n        e.message.should.include('Cannot connect to websocket');\n      }\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should connect to legacy API endpoint","suites":["Playwright (remote browser) websocket","#_startBrowser"],"updatePoint":{"line":568,"column":45,"index":31268},"line":568,"code":"    it('should connect to legacy API endpoint', async () => {\n      const wsEndpoint = await remoteBrowser.wsEndpoint();\n\n      I._setConfig({ ...helperConfig,\n        chromium: {\n          browserWSEndpoint: {\n            wsEndpoint\n          }\n        }\n      });\n\n      await I._before();\n      await I.amOnPage('/');\n      await I.see('Welcome to test app');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should connect to remote browsers","suites":["Playwright (remote browser) websocket","#_startBrowser"],"updatePoint":{"line":583,"column":41,"index":31635},"line":583,"code":"    it('should connect to remote browsers', async () => {\n      helperConfig.chromium.browserWSEndpoint = await remoteBrowser.wsEndpoint();\n\n      I._setConfig(helperConfig);\n\n      await I._before();\n      await I.amOnPage('/');\n      await I.see('Welcome to test app');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should manage pages in remote browser","suites":["Playwright (remote browser) websocket","#_startBrowser"],"updatePoint":{"line":592,"column":45,"index":31919},"line":592,"code":"    it('should manage pages in remote browser', async () => {\n      helperConfig.chromium.browserWSEndpoint = await remoteBrowser.wsEndpoint();\n\n      I._setConfig(helperConfig);\n\n      await I._before();\n      assert.ok(I.isRemoteBrowser);\n      const context = await I.browserContext; // Session was cleared\n\n      let currentPages = await context.pages();\n      assert.equal(currentPages.length, 1);\n      let numPages = await I.grabNumberOfOpenTabs();\n      assert.equal(numPages, 1);\n      await I.openNewTab();\n      numPages = await I.grabNumberOfOpenTabs();\n      assert.equal(numPages, 2);\n      await I._stopBrowser();\n      currentPages = await context.pages();\n      assert.equal(currentPages.length, 0);\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should be authenticated ","suites":["Playwright - BasicAuth","open page with provided basic auth"],"updatePoint":{"line":653,"column":32,"index":33513},"line":653,"code":"    it('should be authenticated ', async () => {\n      await I.amOnPage('/basic_auth');\n      await I.see('You entered admin as your password.');\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should open page as iPhone ","suites":["Playwright - Emulation"],"updatePoint":{"line":693,"column":33,"index":34414},"line":693,"code":"  it('should open page as iPhone ', async () => {\n    await I.amOnPage('/');\n    const width = await I.executeScript('window.innerWidth');\n    assert.equal(width, 980);\n  });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should launch a persistent context","suites":["Playwright - PERSISTENT"],"updatePoint":{"line":729,"column":40,"index":35289},"line":729,"code":"  it('should launch a persistent context', async () => {\n    assert.equal(I._getType(), 'BrowserContext');\n  });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should throw an error","suites":["Playwright - Electron","#amOnPage"],"updatePoint":{"line":752,"column":29,"index":35858},"line":752,"code":"    it('should throw an error', async () => {\n      try {\n        await I.amOnPage('/');\n        throw Error('It should never get this far');\n      } catch (e) {\n        e.message.should.include('Cannot open pages inside an Electron container');\n      }\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should throw an error","suites":["Playwright - Electron","#openNewTab"],"updatePoint":{"line":762,"column":29,"index":36160},"line":762,"code":"    it('should throw an error', async () => {\n      try {\n        await I.openNewTab();\n        throw Error('It should never get this far');\n      } catch (e) {\n        e.message.should.include('Cannot open new tabs inside an Electron container');\n      }\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should throw an error","suites":["Playwright - Electron","#switchToNextTab"],"updatePoint":{"line":772,"column":29,"index":36469},"line":772,"code":"    it('should throw an error', async () => {\n      try {\n        await I.switchToNextTab();\n        throw Error('It should never get this far');\n      } catch (e) {\n        e.message.should.include('Cannot switch tabs inside an Electron container');\n      }\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should throw an error","suites":["Playwright - Electron","#switchToPreviousTab"],"updatePoint":{"line":782,"column":29,"index":36785},"line":782,"code":"    it('should throw an error', async () => {\n      try {\n        await I.switchToNextTab();\n        throw Error('It should never get this far');\n      } catch (e) {\n        e.message.should.include('Cannot switch tabs inside an Electron container');\n      }\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should throw an error","suites":["Playwright - Electron","#closeCurrentTab"],"updatePoint":{"line":792,"column":29,"index":37097},"line":792,"code":"    it('should throw an error', async () => {\n      try {\n        await I.closeCurrentTab();\n        throw Error('It should never get this far');\n      } catch (e) {\n        e.message.should.include('Cannot close current tab inside an Electron container');\n      }\n    });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"checks that video is recorded","suites":["Playwright - Video & Trace"],"updatePoint":{"line":835,"column":35,"index":38156},"line":835,"code":"  it('checks that video is recorded', async () => {\n    const test = {\n      title: 'a failed test',\n      artifacts: {}\n    };\n    await I.amOnPage('/');\n    await I.dontSee('this should be an error');\n    await I.click('More info');\n    await I.dontSee('this should be an error');\n    await I._failed(test);\n    assert(test.artifacts); // expect(Object.keys(test.artifacts).length).should.eq(2);\n\n    expect(Object.keys(test.artifacts)).to.include('trace');\n    expect(Object.keys(test.artifacts)).to.include('video');\n    assert.ok(fs.existsSync(test.artifacts.trace));\n    expect(test.artifacts.video).to.include(path.join(global.output_dir, 'video'));\n    expect(test.artifacts.trace).to.include(path.join(global.output_dir, 'trace'));\n  });","file":"helper/Playwright_test.js","skipped":false,"dir":"test"},{"name":"should be authenticated ","suites":["Puppeteer - BasicAuth","open page with provided basic auth"],"updatePoint":{"line":62,"column":32,"index":1368},"line":62,"code":"    it('should be authenticated ', async () => {\n      await I.amOnPage('/basic_auth');\n      await I.see('You entered admin as your password.');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should be authenticated on second run","suites":["Puppeteer - BasicAuth","open page with provided basic auth"],"updatePoint":{"line":66,"column":45,"index":1535},"line":66,"code":"    it('should be authenticated on second run', async () => {\n      await I.amOnPage('/basic_auth');\n      await I.see('You entered admin as your password.');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should not fail for localStorage.clear() on about:blank","suites":["Puppeteer","Session"],"updatePoint":{"line":107,"column":63,"index":2462},"line":107,"code":"    it('should not fail for localStorage.clear() on about:blank', async () => {\n      I.options.restart = false;\n      return I.page.goto('about:blank').then(() => I._after()).then(() => {\n        I.options.restart = true;\n      }).catch(e => {\n        I.options.restart = true;\n        throw new Error(e);\n      });\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should open main page of configured site","suites":["Puppeteer","open page : #amOnPage"],"updatePoint":{"line":118,"column":48,"index":2822},"line":118,"code":"    it('should open main page of configured site', async () => {\n      await I.amOnPage('/');\n      const url = await page.url();\n      await url.should.eql(`${siteUrl}/`);\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should open any page of configured site","suites":["Puppeteer","open page : #amOnPage"],"updatePoint":{"line":123,"column":47,"index":3002},"line":123,"code":"    it('should open any page of configured site', async () => {\n      await I.amOnPage('/info');\n      const url = await page.url();\n      return url.should.eql(`${siteUrl}/info`);\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should open absolute url","suites":["Puppeteer","open page : #amOnPage"],"updatePoint":{"line":128,"column":32,"index":3176},"line":128,"code":"    it('should open absolute url', async () => {\n      await I.amOnPage(siteUrl);\n      const url = await page.url();\n      return url.should.eql(`${siteUrl}/`);\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should be unauthenticated ","suites":["Puppeteer","open page : #amOnPage"],"updatePoint":{"line":133,"column":34,"index":3348},"line":133,"code":"    it('should be unauthenticated ', async () => {\n      await I.amOnPage('/basic_auth');\n      await I.dontSee('You entered admin as your password.');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should return data from performance timing","suites":["Puppeteer","grabDataFromPerformanceTiming"],"updatePoint":{"line":139,"column":50,"index":3582},"line":139,"code":"    it('should return data from performance timing', async () => {\n      await I.amOnPage('/');\n      const res = await I.grabDataFromPerformanceTiming();\n      expect(res).to.have.property('responseEnd');\n      expect(res).to.have.property('domInteractive');\n      expect(res).to.have.property('domContentLoadedEventEnd');\n      expect(res).to.have.property('loadEventEnd');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for function returns true","suites":["Puppeteer","#waitForFunction"],"updatePoint":{"line":150,"column":45,"index":4029},"line":150,"code":"    it('should wait for function returns true', () => {\n      return I.amOnPage('/form/wait_js').then(() => I.waitForFunction(() => window.__waitJs, 3));\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should pass arguments and wait for function returns true","suites":["Puppeteer","#waitForFunction"],"updatePoint":{"line":153,"column":64,"index":4210},"line":153,"code":"    it('should pass arguments and wait for function returns true', () => {\n      return I.amOnPage('/form/wait_js').then(() => I.waitForFunction(varName => window[varName], ['__waitJs'], 3));\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for hidden element","suites":["Puppeteer","#waitToHide"],"updatePoint":{"line":158,"column":38,"index":4424},"line":158,"code":"    it('should wait for hidden element', () => {\n      return I.amOnPage('/form/wait_invisible').then(() => I.see('Step One Button')).then(() => I.waitToHide('#step_1', 2)).then(() => I.dontSeeElement('#step_1')).then(() => I.dontSee('Step One Button'));\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for hidden element by XPath","suites":["Puppeteer","#waitToHide"],"updatePoint":{"line":161,"column":47,"index":4696},"line":161,"code":"    it('should wait for hidden element by XPath', () => {\n      return I.amOnPage('/form/wait_invisible').then(() => I.see('Step One Button')).then(() => I.waitToHide('//div[@id=\"step_1\"]', 2)).then(() => I.dontSeeElement('//div[@id=\"step_1\"]')).then(() => I.dontSee('Step One Button'));\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for a specified number of elements on the page","suites":["Puppeteer","#waitNumberOfVisibleElements"],"updatePoint":{"line":166,"column":66,"index":5068},"line":166,"code":"    it('should wait for a specified number of elements on the page', () => I.amOnPage('/info').then(() => I.waitNumberOfVisibleElements('//div[@id = \"grab-multiple\"]//a', 3)).then(() => I.waitNumberOfVisibleElements('//div[@id = \"grab-multiple\"]//a', 2, 0.1)).then(() => {\n      throw Error('It should never get this far');\n    }).catch(e => {\n      e.message.should.include('The number of elements (//div[@id = \"grab-multiple\"]//a) is not 2 after 0.1 sec');\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for a specified number of elements on the page using a css selector","suites":["Puppeteer","#waitNumberOfVisibleElements"],"updatePoint":{"line":171,"column":87,"index":5557},"line":171,"code":"    it('should wait for a specified number of elements on the page using a css selector', () => I.amOnPage('/info').then(() => I.waitNumberOfVisibleElements('#grab-multiple > a', 3)).then(() => I.waitNumberOfVisibleElements('#grab-multiple > a', 2, 0.1)).then(() => {\n      throw Error('It should never get this far');\n    }).catch(e => {\n      e.message.should.include('The number of elements (#grab-multiple > a) is not 2 after 0.1 sec');\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for a specified number of elements which are not yet attached to the DOM","suites":["Puppeteer","#waitNumberOfVisibleElements"],"updatePoint":{"line":176,"column":92,"index":6012},"line":176,"code":"    it('should wait for a specified number of elements which are not yet attached to the DOM', () => I.amOnPage('/form/wait_num_elements').then(() => I.waitNumberOfVisibleElements('.title', 2, 3)).then(() => I.see('Hello')).then(() => I.see('World')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should trigger hover event","suites":["Puppeteer","#moveCursorTo"],"updatePoint":{"line":179,"column":34,"index":6249},"line":179,"code":"    it('should trigger hover event', () => I.amOnPage('/form/hover').then(() => I.moveCursorTo('#hover')).then(() => I.see('Hovered', '#show')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should not trigger hover event because of the offset is beyond the element","suites":["Puppeteer","#moveCursorTo"],"updatePoint":{"line":180,"column":82,"index":6443},"line":180,"code":"    it('should not trigger hover event because of the offset is beyond the element', () => I.amOnPage('/form/hover').then(() => I.moveCursorTo('#hover', 100, 100)).then(() => I.dontSee('Hovered', '#show')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should only have 1 tab open when the browser starts and navigates to the first page","suites":["Puppeteer","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":183,"column":91,"index":6798},"line":183,"code":"    it('should only have 1 tab open when the browser starts and navigates to the first page', () => I.amOnPage('/').then(() => I.wait(1)).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 1)));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should switch to next tab","suites":["Puppeteer","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":184,"column":33,"index":6961},"line":184,"code":"    it('should switch to next tab', () => I.amOnPage('/info').then(() => I.wait(1)).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 1)).then(() => I.click('New tab')).then(() => I.switchToNextTab()).then(() => I.wait(2)).then(() => I.seeCurrentUrlEquals('/login')).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 2)));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should assert when there is no ability to switch to next tab","suites":["Puppeteer","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":185,"column":68,"index":7373},"line":185,"code":"    it('should assert when there is no ability to switch to next tab', () => I.amOnPage('/').then(() => I.click('More info')).then(() => I.wait(1)) // Wait is required because the url is change by previous statement (maybe related to #914)\n    .then(() => I.switchToNextTab(2)).then(() => I.wait(2)).then(() => assert.equal(true, false, 'Throw an error if it gets this far (which it should not)!')).catch(e => {\n      assert.equal(e.message, 'There is no ability to switch to next tab with offset 2');\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should close current tab","suites":["Puppeteer","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":189,"column":32,"index":7848},"line":189,"code":"    it('should close current tab', () => I.amOnPage('/info').then(() => I.click('New tab')).then(() => I.switchToNextTab()).then(() => I.wait(2)).then(() => I.seeInCurrentUrl('/login')).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 2)).then(() => I.closeCurrentTab()).then(() => I.wait(1)).then(() => I.seeInCurrentUrl('/info')).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 1)));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should close other tabs","suites":["Puppeteer","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":190,"column":31,"index":8290},"line":190,"code":"    it('should close other tabs', () => I.amOnPage('/').then(() => I.openNewTab()).then(() => I.wait(1)).then(() => I.seeInCurrentUrl('about:blank')).then(() => I.amOnPage('/info')).then(() => I.click('New tab')).then(() => I.switchToNextTab()).then(() => I.wait(2)).then(() => I.seeInCurrentUrl('/login')).then(() => I.closeOtherTabs()).then(() => I.wait(1)).then(() => I.seeInCurrentUrl('/login')).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 1)));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should open new tab","suites":["Puppeteer","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":191,"column":27,"index":8769},"line":191,"code":"    it('should open new tab', () => I.amOnPage('/info').then(() => I.openNewTab()).then(() => I.wait(1)).then(() => I.seeInCurrentUrl('about:blank')).then(() => I.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 2)));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should switch to previous tab","suites":["Puppeteer","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":192,"column":37,"index":9012},"line":192,"code":"    it('should switch to previous tab', () => I.amOnPage('/info').then(() => I.openNewTab()).then(() => I.wait(1)).then(() => I.seeInCurrentUrl('about:blank')).then(() => I.switchToPreviousTab()).then(() => I.wait(2)).then(() => I.seeInCurrentUrl('/info')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should assert when there is no ability to switch to previous tab","suites":["Puppeteer","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":193,"column":72,"index":9306},"line":193,"code":"    it('should assert when there is no ability to switch to previous tab', () => I.amOnPage('/info').then(() => I.openNewTab()).then(() => I.wait(1)).then(() => I.waitInUrl('about:blank')).then(() => I.switchToPreviousTab(2)).then(() => I.wait(2)).then(() => I.waitInUrl('/info')).catch(e => {\n      assert.equal(e.message, 'There is no ability to switch to previous tab with offset 2');\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should accept popup window","suites":["Puppeteer","popup : #acceptPopup, #seeInPopup, #cancelPopup, #grabPopupText"],"updatePoint":{"line":198,"column":34,"index":9757},"line":198,"code":"    it('should accept popup window', () => I.amOnPage('/form/popup').then(() => I.amAcceptingPopups()).then(() => I.click('Confirm')).then(() => I.acceptPopup()).then(() => I.see('Yes', '#result')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should accept popup window (using default popup action type)","suites":["Puppeteer","popup : #acceptPopup, #seeInPopup, #cancelPopup, #grabPopupText"],"updatePoint":{"line":199,"column":68,"index":9991},"line":199,"code":"    it('should accept popup window (using default popup action type)', () => I.amOnPage('/form/popup').then(() => I.click('Confirm')).then(() => I.acceptPopup()).then(() => I.see('Yes', '#result')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should cancel popup","suites":["Puppeteer","popup : #acceptPopup, #seeInPopup, #cancelPopup, #grabPopupText"],"updatePoint":{"line":200,"column":27,"index":10150},"line":200,"code":"    it('should cancel popup', () => I.amOnPage('/form/popup').then(() => I.amCancellingPopups()).then(() => I.click('Confirm')).then(() => I.cancelPopup()).then(() => I.see('No', '#result')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should check text in popup","suites":["Puppeteer","popup : #acceptPopup, #seeInPopup, #cancelPopup, #grabPopupText"],"updatePoint":{"line":201,"column":34,"index":10350},"line":201,"code":"    it('should check text in popup', () => I.amOnPage('/form/popup').then(() => I.amCancellingPopups()).then(() => I.click('Alert')).then(() => I.seeInPopup('Really?')).then(() => I.cancelPopup()));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should grab text from popup","suites":["Puppeteer","popup : #acceptPopup, #seeInPopup, #cancelPopup, #grabPopupText"],"updatePoint":{"line":202,"column":35,"index":10550},"line":202,"code":"    it('should grab text from popup', () => I.amOnPage('/form/popup').then(() => I.amCancellingPopups()).then(() => I.click('Alert')).then(() => I.grabPopupText()).then(text => assert.equal(text, 'Really?')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should return null if no popup is visible (do not throw an error)","suites":["Puppeteer","popup : #acceptPopup, #seeInPopup, #cancelPopup, #grabPopupText"],"updatePoint":{"line":203,"column":73,"index":10798},"line":203,"code":"    it('should return null if no popup is visible (do not throw an error)', () => I.amOnPage('/form/popup').then(() => I.grabPopupText()).then(text => assert.equal(text, null)));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should return 1 as count","suites":["Puppeteer","#seeNumberOfElements"],"updatePoint":{"line":206,"column":32,"index":10985},"line":206,"code":"    it('should return 1 as count', () => I.amOnPage('/').then(() => I.seeNumberOfElements('#area1', 1)));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should switch reference to iframe content","suites":["Puppeteer","#switchTo"],"updatePoint":{"line":209,"column":49,"index":11146},"line":209,"code":"    it('should switch reference to iframe content', () => I.amOnPage('/iframe').then(() => I.switchTo('[name=\"content\"]')).then(() => I.see('Information')).then(() => I.see('Lots of valuable data here')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should return error if iframe selector is invalid","suites":["Puppeteer","#switchTo"],"updatePoint":{"line":210,"column":57,"index":11360},"line":210,"code":"    it('should return error if iframe selector is invalid', () => I.amOnPage('/iframe').then(() => I.switchTo('#invalidIframeSelector')).catch(e => {\n      e.should.be.instanceOf(Error);\n      e.message.should.be.equal('Element \"#invalidIframeSelector\" was not found by text|CSS|XPath');\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should return error if iframe selector is not iframe","suites":["Puppeteer","#switchTo"],"updatePoint":{"line":214,"column":60,"index":11660},"line":214,"code":"    it('should return error if iframe selector is not iframe', () => I.amOnPage('/iframe').then(() => I.switchTo('h1')).catch(e => {\n      e.should.be.instanceOf(Error);\n      e.message.should.be.equal('Element \"#invalidIframeSelector\" was not found by text|CSS|XPath');\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should return to parent frame given a null locator","suites":["Puppeteer","#switchTo"],"updatePoint":{"line":218,"column":58,"index":11938},"line":218,"code":"    it('should return to parent frame given a null locator', () => I.amOnPage('/iframe').then(() => I.switchTo('[name=\"content\"]')).then(() => I.see('Information')).then(() => I.see('Lots of valuable data here')).then(() => I.switchTo(null)).then(() => I.see('Iframe test')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should check for text to be in HTML source","suites":["Puppeteer","#seeInSource, #grabSource"],"updatePoint":{"line":221,"column":50,"index":12261},"line":221,"code":"    it('should check for text to be in HTML source', () => I.amOnPage('/').then(() => I.seeInSource('<title>TestEd Beta 2.0</title>')).then(() => I.dontSeeInSource('<meta')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should grab the source","suites":["Puppeteer","#seeInSource, #grabSource"],"updatePoint":{"line":222,"column":30,"index":12417},"line":222,"code":"    it('should grab the source', () => I.amOnPage('/').then(() => I.grabSource()).then(source => assert.notEqual(source.indexOf('<title>TestEd Beta 2.0</title>'), -1, 'Source html should be retrieved')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should check that title is equal to provided one","suites":["Puppeteer","#seeTitleEquals"],"updatePoint":{"line":225,"column":56,"index":12692},"line":225,"code":"    it('should check that title is equal to provided one', () => I.amOnPage('/').then(() => I.seeTitleEquals('TestEd Beta 2.0')).then(() => I.seeTitleEquals('TestEd Beta 2.')).then(() => assert.equal(true, false, 'Throw an error because it should not get this far!')).catch(e => {\n      e.should.be.instanceOf(Error);\n      e.message.should.be.equal('expected web page title \"TestEd Beta 2.0\" to equal \"TestEd Beta 2.\"');\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should check text is equal to provided one","suites":["Puppeteer","#seeTextEquals"],"updatePoint":{"line":231,"column":50,"index":13160},"line":231,"code":"    it('should check text is equal to provided one', () => I.amOnPage('/').then(() => I.seeTextEquals('Welcome to test app!', 'h1')).then(() => I.seeTextEquals('Welcome to test app', 'h1')).then(() => assert.equal(true, false, 'Throw an error because it should not get this far!')).catch(e => {\n      e.should.be.instanceOf(Error);\n      e.message.should.be.equal('expected element h1 \"Welcome to test app\" to equal \"Welcome to test app!\"');\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should locate a button to click","suites":["Puppeteer","#_locateClickable"],"updatePoint":{"line":237,"column":39,"index":13646},"line":237,"code":"    it('should locate a button to click', () => I.amOnPage('/form/checkbox').then(() => I._locateClickable('Submit')).then(res => {\n      res.length.should.be.equal(1);\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should not locate a non-existing checkbox using _locateClickable","suites":["Puppeteer","#_locateClickable"],"updatePoint":{"line":240,"column":72,"index":13857},"line":240,"code":"    it('should not locate a non-existing checkbox using _locateClickable', () => I.amOnPage('/form/checkbox').then(() => I._locateClickable('I disagree')).then(res => res.length.should.be.equal(0)));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should locate a checkbox","suites":["Puppeteer","#_locateCheckable"],"updatePoint":{"line":243,"column":32,"index":14063},"line":243,"code":"    it('should locate a checkbox', () => I.amOnPage('/form/checkbox').then(() => I._locateCheckable('I Agree')).then(res => res.should.be.ok));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should locate a field","suites":["Puppeteer","#_locateFields"],"updatePoint":{"line":246,"column":29,"index":14247},"line":246,"code":"    it('should locate a field', () => I.amOnPage('/form/field').then(() => I._locateFields('Name')).then(res => res.length.should.be.equal(1)));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should not locate a non-existing field","suites":["Puppeteer","#_locateFields"],"updatePoint":{"line":247,"column":46,"index":14409},"line":247,"code":"    it('should not locate a non-existing field', () => I.amOnPage('/form/field').then(() => I._locateFields('Mother-in-law')).then(res => res.length.should.be.equal(0)));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should throw error if field is not empty","suites":["Puppeteer","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":250,"column":48,"index":14664},"line":250,"code":"    it('should throw error if field is not empty', () => I.amOnPage('/form/empty').then(() => I.seeInField('#empty_input', 'Ayayay')).catch(e => {\n      e.should.be.instanceOf(AssertionFailedError);\n      e.inspect().should.be.equal('expected fields by #empty_input to include \"Ayayay\"');\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should check values in checkboxes","suites":["Puppeteer","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":254,"column":41,"index":14955},"line":254,"code":"    it('should check values in checkboxes', async () => {\n      await I.amOnPage('/form/field_values');\n      await I.dontSeeInField('checkbox[]', 'not seen one');\n      await I.seeInField('checkbox[]', 'see test one');\n      await I.dontSeeInField('checkbox[]', 'not seen two');\n      await I.seeInField('checkbox[]', 'see test two');\n      await I.dontSeeInField('checkbox[]', 'not seen three');\n      await I.seeInField('checkbox[]', 'see test three');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should check values with boolean","suites":["Puppeteer","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":263,"column":40,"index":15418},"line":263,"code":"    it('should check values with boolean', async () => {\n      await I.amOnPage('/form/field_values');\n      await I.seeInField('checkbox1', true);\n      await I.dontSeeInField('checkbox1', false);\n      await I.seeInField('checkbox2', false);\n      await I.dontSeeInField('checkbox2', true);\n      await I.seeInField('radio2', true);\n      await I.dontSeeInField('radio2', false);\n      await I.seeInField('radio3', false);\n      await I.dontSeeInField('radio3', true);\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should check values in radio","suites":["Puppeteer","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":274,"column":36,"index":15893},"line":274,"code":"    it('should check values in radio', async () => {\n      await I.amOnPage('/form/field_values');\n      await I.seeInField('radio1', 'see test one');\n      await I.dontSeeInField('radio1', 'not seen one');\n      await I.dontSeeInField('radio1', 'not seen two');\n      await I.dontSeeInField('radio1', 'not seen three');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should check values in select","suites":["Puppeteer","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":281,"column":37,"index":16223},"line":281,"code":"    it('should check values in select', async () => {\n      await I.amOnPage('/form/field_values');\n      await I.seeInField('select1', 'see test one');\n      await I.dontSeeInField('select1', 'not seen one');\n      await I.dontSeeInField('select1', 'not seen two');\n      await I.dontSeeInField('select1', 'not seen three');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should check for empty select field","suites":["Puppeteer","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":288,"column":43,"index":16563},"line":288,"code":"    it('should check for empty select field', async () => {\n      await I.amOnPage('/form/field_values');\n      await I.seeInField('select3', '');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should check for select multiple field","suites":["Puppeteer","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":292,"column":46,"index":16721},"line":292,"code":"    it('should check for select multiple field', async () => {\n      await I.amOnPage('/form/field_values');\n      await I.dontSeeInField('select2', 'not seen one');\n      await I.seeInField('select2', 'see test one');\n      await I.dontSeeInField('select2', 'not seen two');\n      await I.seeInField('select2', 'see test two');\n      await I.dontSeeInField('select2', 'not seen three');\n      await I.seeInField('select2', 'see test three');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should be able to send special keys to element","suites":["Puppeteer","#pressKey, #pressKeyDown, #pressKeyUp"],"updatePoint":{"line":303,"column":54,"index":17246},"line":303,"code":"    it('should be able to send special keys to element', async () => {\n      await I.amOnPage('/form/field');\n      await I.appendField('Name', '-');\n      await I.pressKey(['Right Shift', 'Home']);\n      await I.pressKey('Delete'); // Sequence only executes up to first non-modifier key ('Digit1')\n\n      await I.pressKey(['SHIFT_RIGHT', 'Digit1', 'Digit4']);\n      await I.pressKey('1');\n      await I.pressKey('2');\n      await I.pressKey('3');\n      await I.pressKey('ArrowLeft');\n      await I.pressKey('Left Arrow');\n      await I.pressKey('arrow_left');\n      await I.pressKeyDown('Shift');\n      await I.pressKey('a');\n      await I.pressKey('KeyB');\n      await I.pressKeyUp('ShiftLeft');\n      await I.pressKey('C');\n      await I.seeInField('Name', '!ABC123');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should use modifier key based on operating system","suites":["Puppeteer","#pressKey, #pressKeyDown, #pressKeyUp"],"updatePoint":{"line":323,"column":57,"index":18029},"line":323,"code":"    it('should use modifier key based on operating system', async () => {\n      await I.amOnPage('/form/field');\n      await I.fillField('Name', 'value that is cleared using select all shortcut');\n      await I.pressKey(['ControlOrCommand', 'a']);\n      await I.pressKey('Backspace');\n      await I.dontSeeInField('Name', 'value that is cleared using select all shortcut');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should show correct numpad or punctuation key when Shift modifier is active","suites":["Puppeteer","#pressKey, #pressKeyDown, #pressKeyUp"],"updatePoint":{"line":330,"column":83,"index":18437},"line":330,"code":"    it('should show correct numpad or punctuation key when Shift modifier is active', async () => {\n      await I.amOnPage('/form/field');\n      await I.fillField('Name', '');\n      await I.pressKey(';');\n      await I.pressKey(['Shift', ';']);\n      await I.pressKey(['Shift', 'Semicolon']);\n      await I.pressKey('=');\n      await I.pressKey(['Shift', '=']);\n      await I.pressKey(['Shift', 'Equal']);\n      await I.pressKey('*');\n      await I.pressKey(['Shift', '*']);\n      await I.pressKey(['Shift', 'Multiply']);\n      await I.pressKey('+');\n      await I.pressKey(['Shift', '+']);\n      await I.pressKey(['Shift', 'Add']);\n      await I.pressKey(',');\n      await I.pressKey(['Shift', ',']);\n      await I.pressKey(['Shift', 'Comma']);\n      await I.pressKey(['Shift', 'NumpadComma']);\n      await I.pressKey(['Shift', 'Separator']);\n      await I.pressKey('-');\n      await I.pressKey(['Shift', '-']);\n      await I.pressKey(['Shift', 'Subtract']);\n      await I.pressKey('.');\n      await I.pressKey(['Shift', '.']);\n      await I.pressKey(['Shift', 'Decimal']);\n      await I.pressKey(['Shift', 'Period']);\n      await I.pressKey('/');\n      await I.pressKey(['Shift', '/']);\n      await I.pressKey(['Shift', 'Divide']);\n      await I.pressKey(['Shift', 'Slash']);\n      await I.seeInField('Name', ';::=++***+++,<<<<-_-.>.>/?/?');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should show correct number key when Shift modifier is active","suites":["Puppeteer","#pressKey, #pressKeyDown, #pressKeyUp"],"updatePoint":{"line":363,"column":68,"index":19774},"line":363,"code":"    it('should show correct number key when Shift modifier is active', async () => {\n      await I.amOnPage('/form/field');\n      await I.fillField('Name', '');\n      await I.pressKey('0');\n      await I.pressKeyDown('Shift');\n      await I.pressKey('0');\n      await I.pressKey('Digit0');\n      await I.pressKey('Numpad0');\n      await I.pressKeyUp('Shift');\n      await I.pressKey('1');\n      await I.pressKeyDown('Shift');\n      await I.pressKey('1');\n      await I.pressKey('Digit1');\n      await I.pressKey('Numpad1');\n      await I.pressKeyUp('Shift');\n      await I.pressKey('2');\n      await I.pressKeyDown('Shift');\n      await I.pressKey('2');\n      await I.pressKey('Digit2');\n      await I.pressKey('Numpad2');\n      await I.pressKeyUp('Shift');\n      await I.pressKey('3');\n      await I.pressKeyDown('Shift');\n      await I.pressKey('3');\n      await I.pressKey('Digit3');\n      await I.pressKey('Numpad3');\n      await I.pressKeyUp('Shift');\n      await I.pressKey('4');\n      await I.pressKeyDown('Shift');\n      await I.pressKey('4');\n      await I.pressKey('Digit4');\n      await I.pressKey('Numpad4');\n      await I.pressKeyUp('Shift');\n      await I.pressKey('5');\n      await I.pressKeyDown('Shift');\n      await I.pressKey('5');\n      await I.pressKey('Digit5');\n      await I.pressKey('Numpad5');\n      await I.pressKeyUp('Shift');\n      await I.pressKey('6');\n      await I.pressKeyDown('Shift');\n      await I.pressKey('6');\n      await I.pressKey('Digit6');\n      await I.pressKey('Numpad6');\n      await I.pressKeyUp('Shift');\n      await I.pressKey('7');\n      await I.pressKeyDown('Shift');\n      await I.pressKey('7');\n      await I.pressKey('Digit7');\n      await I.pressKey('Numpad7');\n      await I.pressKeyUp('Shift');\n      await I.pressKey('8');\n      await I.pressKeyDown('Shift');\n      await I.pressKey('8');\n      await I.pressKey('Digit8');\n      await I.pressKey('Numpad8');\n      await I.pressKeyUp('Shift');\n      await I.pressKey('9');\n      await I.pressKeyDown('Shift');\n      await I.pressKey('9');\n      await I.pressKey('Digit9');\n      await I.pressKey('Numpad9');\n      await I.pressKeyUp('Shift');\n      await I.seeInField('Name', '0))01!!12@@23##34$$45%%56^^67&&78**89((9');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for input text field to be enabled","suites":["Puppeteer","#waitForEnabled"],"updatePoint":{"line":430,"column":54,"index":22041},"line":430,"code":"    it('should wait for input text field to be enabled', () => I.amOnPage('/form/wait_enabled').then(() => I.waitForEnabled('#text', 2)).then(() => I.fillField('#text', 'hello world')).then(() => I.seeInField('#text', 'hello world')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for input text field to be enabled by xpath","suites":["Puppeteer","#waitForEnabled"],"updatePoint":{"line":431,"column":63,"index":22286},"line":431,"code":"    it('should wait for input text field to be enabled by xpath', () => I.amOnPage('/form/wait_enabled').then(() => I.waitForEnabled(\"//*[@name = 'test']\", 2)).then(() => I.fillField('#text', 'hello world')).then(() => I.seeInField('#text', 'hello world')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for a button to be enabled","suites":["Puppeteer","#waitForEnabled"],"updatePoint":{"line":432,"column":46,"index":22528},"line":432,"code":"    it('should wait for a button to be enabled', () => I.amOnPage('/form/wait_enabled').then(() => I.waitForEnabled('#text', 2)).then(() => I.click('#button')).then(() => I.see('button was clicked', '#message')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for text after load body","suites":["Puppeteer","#waitForText"],"updatePoint":{"line":435,"column":44,"index":22781},"line":435,"code":"    it('should wait for text after load body', async () => {\n      await I.amOnPage('/redirect_long');\n      await I.waitForText('Hi there and greetings!', 5);\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for expected value for given locator","suites":["Puppeteer","#waitForValue"],"updatePoint":{"line":441,"column":56,"index":23003},"line":441,"code":"    it('should wait for expected value for given locator', () => I.amOnPage('/info').then(() => I.waitForValue('//input[@name= \"rus\"]', 'Верно')).then(() => I.waitForValue('//input[@name= \"rus\"]', 'Верно3', 0.1)).then(() => {\n      throw Error('It should never get this far');\n    }).catch(e => {\n      e.message.should.include('element (//input[@name= \"rus\"]) is not in DOM or there is no element(//input[@name= \"rus\"]) with value \"Верно3\" after 0.1 sec');\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for expected value for given css locator","suites":["Puppeteer","#waitForValue"],"updatePoint":{"line":446,"column":60,"index":23474},"line":446,"code":"    it('should wait for expected value for given css locator', () => I.amOnPage('/form/wait_value').then(() => I.seeInField('#text', 'Hamburg')).then(() => I.waitForValue('#text', 'Brisbane', 2.5)).then(() => I.seeInField('#text', 'Brisbane')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for expected value for given xpath locator","suites":["Puppeteer","#waitForValue"],"updatePoint":{"line":447,"column":62,"index":23722},"line":447,"code":"    it('should wait for expected value for given xpath locator', () => I.amOnPage('/form/wait_value').then(() => I.seeInField('#text', 'Hamburg')).then(() => I.waitForValue('//input[@value = \"Grüße aus Hamburg\"]', 'Brisbane', 2.5)).then(() => I.seeInField('#text', 'Brisbane')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should only wait for one of the matching elements to contain the value given xpath locator","suites":["Puppeteer","#waitForValue"],"updatePoint":{"line":448,"column":98,"index":24038},"line":448,"code":"    it('should only wait for one of the matching elements to contain the value given xpath locator', () => I.amOnPage('/form/wait_value').then(() => I.waitForValue('//input[@type = \"text\"]', 'Brisbane', 4)).then(() => I.seeInField('#text', 'Brisbane')).then(() => I.seeInField('#text2', 'London')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should only wait for one of the matching elements to contain the value given css locator","suites":["Puppeteer","#waitForValue"],"updatePoint":{"line":449,"column":96,"index":24336},"line":449,"code":"    it('should only wait for one of the matching elements to contain the value given css locator', () => I.amOnPage('/form/wait_value').then(() => I.waitForValue('.inputbox', 'Brisbane', 4)).then(() => I.seeInField('#text', 'Brisbane')).then(() => I.seeInField('#text2', 'London')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should grab inner html from an element using xpath query","suites":["Puppeteer","#grabHTMLFrom"],"updatePoint":{"line":452,"column":64,"index":24630},"line":452,"code":"    it('should grab inner html from an element using xpath query', () => I.amOnPage('/').then(() => I.grabHTMLFrom('//title')).then(html => assert.equal(html, 'TestEd Beta 2.0')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should grab inner html from an element using id query","suites":["Puppeteer","#grabHTMLFrom"],"updatePoint":{"line":453,"column":61,"index":24808},"line":453,"code":"    it('should grab inner html from an element using id query', () => I.amOnPage('/').then(() => I.grabHTMLFrom('#area1')).then(html => assert.equal(html.trim(), '<a href=\"/form/file\" qa-id=\"test\" qa-link=\"test\"> Test Link </a>')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should grab inner html from multiple elements","suites":["Puppeteer","#grabHTMLFrom"],"updatePoint":{"line":454,"column":53,"index":25033},"line":454,"code":"    it('should grab inner html from multiple elements', () => I.amOnPage('/').then(() => I.grabHTMLFromAll('//a')).then(html => assert.equal(html.length, 5)));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should grab inner html from within an iframe","suites":["Puppeteer","#grabHTMLFrom"],"updatePoint":{"line":455,"column":52,"index":25192},"line":455,"code":"    it('should grab inner html from within an iframe', () => I.amOnPage('/iframe').then(() => I.switchTo({\n      frame: 'iframe'\n    })).then(() => I.grabHTMLFrom('#new-tab')).then(html => assert.equal(html.trim(), '<a href=\"/login\" target=\"_blank\">New tab</a>')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should grab browser logs","suites":["Puppeteer","#grabBrowserLogs"],"updatePoint":{"line":460,"column":32,"index":25483},"line":460,"code":"    it('should grab browser logs', () => I.amOnPage('/').then(() => I.executeScript(() => {\n      console.log('Test log entry');\n    })).then(() => I.grabBrowserLogs()).then(logs => {\n      const matchingLogs = logs.filter(log => log.text().indexOf('Test log entry') > -1);\n      assert.equal(matchingLogs.length, 1);\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should grab browser logs across pages","suites":["Puppeteer","#grabBrowserLogs"],"updatePoint":{"line":466,"column":45,"index":25823},"line":466,"code":"    it('should grab browser logs across pages', () => I.amOnPage('/').then(() => I.executeScript(() => {\n      console.log('Test log entry 1');\n    })).then(() => I.openNewTab()).then(() => I.wait(1)).then(() => I.amOnPage('/info')).then(() => I.executeScript(() => {\n      console.log('Test log entry 2');\n    })).then(() => I.grabBrowserLogs()).then(logs => {\n      const matchingLogs = logs.filter(log => log.text().indexOf('Test log entry') > -1);\n      assert.equal(matchingLogs.length, 2);\n    }));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"Drag item from source to target (no iframe) @dragNdrop","suites":["Puppeteer","#dragAndDrop"],"updatePoint":{"line":476,"column":62,"index":26386},"line":476,"code":"    it('Drag item from source to target (no iframe) @dragNdrop', () => I.amOnPage('http://jqueryui.com/resources/demos/droppable/default.html').then(() => I.seeElementInDOM('#draggable')).then(() => I.dragAndDrop('#draggable', '#droppable')).then(() => I.see('Dropped')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"Drag and drop from within an iframe","suites":["Puppeteer","#dragAndDrop"],"updatePoint":{"line":477,"column":43,"index":26640},"line":477,"code":"    it('Drag and drop from within an iframe', () => I.amOnPage('http://jqueryui.com/droppable').then(() => I.resizeWindow(700, 700)).then(() => I.switchTo('//iframe[@class=\"demo-frame\"]')).then(() => I.seeElementInDOM('#draggable')).then(() => I.dragAndDrop('#draggable', '#droppable')).then(() => I.see('Dropped')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should switch to frame using name","suites":["Puppeteer","#switchTo frame"],"updatePoint":{"line":480,"column":41,"index":27000},"line":480,"code":"    it('should switch to frame using name', () => I.amOnPage('/iframe').then(() => I.see('Iframe test', 'h1')).then(() => I.dontSee('Information', 'h1')).then(() => I.switchTo('iframe')).then(() => I.see('Information', 'h1')).then(() => I.dontSee('Iframe test', 'h1')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should switch to root frame","suites":["Puppeteer","#switchTo frame"],"updatePoint":{"line":481,"column":35,"index":27265},"line":481,"code":"    it('should switch to root frame', () => I.amOnPage('/iframe').then(() => I.see('Iframe test', 'h1')).then(() => I.dontSee('Information', 'h1')).then(() => I.switchTo('iframe')).then(() => I.see('Information', 'h1')).then(() => I.dontSee('Iframe test', 'h1')).then(() => I.switchTo()).then(() => I.see('Iframe test', 'h1')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should switch to frame using frame number","suites":["Puppeteer","#switchTo frame"],"updatePoint":{"line":482,"column":49,"index":27608},"line":482,"code":"    it('should switch to frame using frame number', () => I.amOnPage('/iframe').then(() => I.see('Iframe test', 'h1')).then(() => I.dontSee('Information', 'h1')).then(() => I.switchTo(0)).then(() => I.see('Information', 'h1')).then(() => I.dontSee('Iframe test', 'h1')));","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should drag scrubber to given position","suites":["Puppeteer","#dragSlider"],"updatePoint":{"line":485,"column":46,"index":27917},"line":485,"code":"    it('should drag scrubber to given position', async () => {\n      await I.amOnPage('/form/page_slider');\n      await I.seeElementInDOM('#slidecontainer input');\n      const before = await I.grabValueFrom('#slidecontainer input');\n      await I.dragSlider('#slidecontainer input', 20);\n      const after = await I.grabValueFrom('#slidecontainer input');\n      assert.notEqual(before, after);\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should uncheck option that is currently checked","suites":["Puppeteer","#uncheckOption"],"updatePoint":{"line":495,"column":55,"index":28371},"line":495,"code":"    it('should uncheck option that is currently checked', async () => {\n      await I.amOnPage('/info');\n      await I.uncheckOption('interesting');\n      await I.dontSeeCheckboxIsChecked('interesting');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should NOT uncheck option that is NOT currently checked","suites":["Puppeteer","#uncheckOption"],"updatePoint":{"line":500,"column":63,"index":28591},"line":500,"code":"    it('should NOT uncheck option that is NOT currently checked', async () => {\n      await I.amOnPage('/info');\n      await I.uncheckOption('interesting'); // Unchecking again should not affect the current 'unchecked' status\n\n      await I.uncheckOption('interesting');\n      await I.dontSeeCheckboxIsChecked('interesting');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should get the element bounding rectangle","suites":["Puppeteer","#grabElementBoundingRect"],"updatePoint":{"line":509,"column":49,"index":28964},"line":509,"code":"    it('should get the element bounding rectangle', async () => {\n      await I.amOnPage('/form/hidden');\n      const size = await I.grabElementBoundingRect('input[type=submit]');\n      expect(size.x).is.greaterThan(0);\n      expect(size.y).is.greaterThan(0);\n      expect(size.width).is.greaterThan(0);\n      expect(size.height).is.greaterThan(0);\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should get the element width","suites":["Puppeteer","#grabElementBoundingRect"],"updatePoint":{"line":517,"column":36,"index":29308},"line":517,"code":"    it('should get the element width', async () => {\n      await I.amOnPage('/form/hidden');\n      const width = await I.grabElementBoundingRect('input[type=submit]', 'width');\n      expect(width).is.greaterThan(0);\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should get the element height","suites":["Puppeteer","#grabElementBoundingRect"],"updatePoint":{"line":522,"column":37,"index":29533},"line":522,"code":"    it('should get the element height', async () => {\n      await I.amOnPage('/form/hidden');\n      const height = await I.grabElementBoundingRect('input[type=submit]', 'height');\n      expect(height).is.greaterThan(0);\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for clickable","suites":["Puppeteer","#waitForClickable"],"updatePoint":{"line":529,"column":33,"index":29803},"line":529,"code":"    it('should wait for clickable', async () => {\n      await I.amOnPage('/form/wait_for_clickable');\n      await I.waitForClickable({\n        css: 'input#text'\n      });\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should wait for clickable by XPath","suites":["Puppeteer","#waitForClickable"],"updatePoint":{"line":535,"column":42,"index":29991},"line":535,"code":"    it('should wait for clickable by XPath', async () => {\n      await I.amOnPage('/form/wait_for_clickable');\n      await I.waitForClickable({\n        xpath: './/input[@id=\"text\"]'\n      });\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should fail for disabled element","suites":["Puppeteer","#waitForClickable"],"updatePoint":{"line":541,"column":40,"index":30189},"line":541,"code":"    it('should fail for disabled element', async () => {\n      await I.amOnPage('/form/wait_for_clickable');\n      await I.waitForClickable({\n        css: '#button'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element {css: #button} still not clickable after 0.1 sec');\n      });\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should fail for disabled element by XPath","suites":["Puppeteer","#waitForClickable"],"updatePoint":{"line":551,"column":49,"index":30624},"line":551,"code":"    it('should fail for disabled element by XPath', async () => {\n      await I.amOnPage('/form/wait_for_clickable');\n      await I.waitForClickable({\n        xpath: './/button[@id=\"button\"]'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element {xpath: .//button[@id=\"button\"]} still not clickable after 0.1 sec');\n      });\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should fail for element not in viewport by top","suites":["Puppeteer","#waitForClickable"],"updatePoint":{"line":561,"column":54,"index":31100},"line":561,"code":"    it('should fail for element not in viewport by top', async () => {\n      await I.amOnPage('/form/wait_for_clickable');\n      await I.waitForClickable({\n        css: '#notInViewportTop'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element {css: #notInViewportTop} still not clickable after 0.1 sec');\n      });\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should fail for element not in viewport by bottom","suites":["Puppeteer","#waitForClickable"],"updatePoint":{"line":571,"column":57,"index":31563},"line":571,"code":"    it('should fail for element not in viewport by bottom', async () => {\n      await I.amOnPage('/form/wait_for_clickable');\n      await I.waitForClickable({\n        css: '#notInViewportBottom'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element {css: #notInViewportBottom} still not clickable after 0.1 sec');\n      });\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should fail for element not in viewport by left","suites":["Puppeteer","#waitForClickable"],"updatePoint":{"line":581,"column":55,"index":32030},"line":581,"code":"    it('should fail for element not in viewport by left', async () => {\n      await I.amOnPage('/form/wait_for_clickable');\n      await I.waitForClickable({\n        css: '#notInViewportLeft'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element {css: #notInViewportLeft} still not clickable after 0.1 sec');\n      });\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should fail for element not in viewport by right","suites":["Puppeteer","#waitForClickable"],"updatePoint":{"line":591,"column":56,"index":32494},"line":591,"code":"    it('should fail for element not in viewport by right', async () => {\n      await I.amOnPage('/form/wait_for_clickable');\n      await I.waitForClickable({\n        css: '#notInViewportRight'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element {css: #notInViewportRight} still not clickable after 0.1 sec');\n      });\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should fail for overlapping element","suites":["Puppeteer","#waitForClickable"],"updatePoint":{"line":601,"column":43,"index":32947},"line":601,"code":"    it('should fail for overlapping element', async () => {\n      await I.amOnPage('/form/wait_for_clickable');\n      await I.waitForClickable({\n        css: '#div2_button'\n      }, 0.1);\n      await I.waitForClickable({\n        css: '#div1_button'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element {css: #div1_button} still not clickable after 0.1 sec');\n      });\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should pass if element change class","suites":["Puppeteer","#waitForClickable"],"updatePoint":{"line":614,"column":43,"index":33462},"line":614,"code":"    it('should pass if element change class', async () => {\n      await I.amOnPage('/form/wait_for_clickable');\n      await I.click('button_save');\n      await I.waitForClickable('//button[@name=\"button_publish\"]');\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should fail if element change class and not clickable","suites":["Puppeteer","#waitForClickable"],"updatePoint":{"line":619,"column":62,"index":33705},"line":619,"code":"    xit('should fail if element change class and not clickable', async () => {\n      await I.amOnPage('/form/wait_for_clickable');\n      await I.click('button_save');\n      await I.waitForClickable('//button[@name=\"button_publish\"]', 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element //button[@name=\"button_publish\"] still not clickable after 0.1 sec');\n      });\n    });","skipped":true,"file":"helper/Puppeteer_test.js","dir":"test"},{"name":"should return title","suites":["Puppeteer","#usePuppeteerTo"],"updatePoint":{"line":630,"column":27,"index":34218},"line":630,"code":"    it('should return title', async () => {\n      await I.amOnPage('/');\n      const title = await I.usePuppeteerTo('test', async ({\n        page\n      }) => {\n        return page.title();\n      });\n      assert.equal('TestEd Beta 2.0', title);\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should throw an exception when endpoint is unreachable","suites":["Puppeteer (remote browser)","#_startBrowser"],"updatePoint":{"line":692,"column":62,"index":35863},"line":692,"code":"    it('should throw an exception when endpoint is unreachable', async () => {\n      helperConfig.chrome.browserWSEndpoint = 'ws://unreachable/';\n\n      I._setConfig(helperConfig);\n\n      try {\n        await I._startBrowser();\n        throw Error('It should never get this far');\n      } catch (e) {\n        e.message.should.include('Cannot connect to websocket endpoint.\\n\\nPlease make sure remote browser is running and accessible.');\n      }\n    });","file":"helper/Puppeteer_test.js","skipped":false,"dir":"test"},{"name":"should clear any prior existing pages on remote browser","suites":["Puppeteer (remote browser)","#_startBrowser"],"updatePoint":{"line":704,"column":64,"index":36318},"line":704,"code":"    xit('should clear any prior existing pages on remote browser', async () => {\n      const remotePages = await remoteBrowser.pages();\n      assert.equal(remotePages.length, 1);\n\n      for (let p = 1; p < 5; p++) {\n        await remoteBrowser.newPage();\n      }\n\n      const existingPages = await remoteBrowser.pages();\n      assert.equal(existingPages.length, 5);\n      await I._startBrowser(); // Session was cleared\n\n      let currentPages = await remoteBrowser.pages();\n      assert.equal(currentPages.length, 1);\n      let numPages = await I.grabNumberOfOpenTabs();\n      assert.equal(numPages, 1);\n      await I.openNewTab();\n      numPages = await I.grabNumberOfOpenTabs();\n      assert.equal(numPages, 2);\n      await I._stopBrowser();\n      currentPages = await remoteBrowser.pages();\n      assert.equal(currentPages.length, 0);\n    });","skipped":true,"file":"helper/Puppeteer_test.js","dir":"test"},{"name":"should open main page of configured site","suites":["TestCafe","open page : #amOnPage"],"updatePoint":{"line":49,"column":48,"index":1073},"line":49,"code":"    it('should open main page of configured site', async () => {\n      await I.amOnPage('/');\n      const url = await I.grabCurrentUrl();\n      await url.should.eql(`${siteUrl}/`);\n    });","file":"helper/TestCafe_test.js","skipped":false,"dir":"test"},{"name":"should open any page of configured site","suites":["TestCafe","open page : #amOnPage"],"updatePoint":{"line":54,"column":47,"index":1261},"line":54,"code":"    it('should open any page of configured site', async () => {\n      await I.amOnPage('/info');\n      const url = await I.grabCurrentUrl();\n      return url.should.eql(`${siteUrl}/info`);\n    });","file":"helper/TestCafe_test.js","skipped":false,"dir":"test"},{"name":"should open absolute url","suites":["TestCafe","open page : #amOnPage"],"updatePoint":{"line":59,"column":32,"index":1443},"line":59,"code":"    it('should open absolute url', async () => {\n      await I.amOnPage(siteUrl);\n      const url = await I.grabCurrentUrl();\n      return url.should.eql(`${siteUrl}/`);\n    });","file":"helper/TestCafe_test.js","skipped":false,"dir":"test"},{"name":"should wait for function returns true","suites":["TestCafe","#waitForFunction"],"updatePoint":{"line":66,"column":45,"index":1679},"line":66,"code":"    it('should wait for function returns true', () => {\n      return I.amOnPage('/form/wait_js').then(() => I.waitForFunction(() => window.__waitJs, 3));\n    });","file":"helper/TestCafe_test.js","skipped":false,"dir":"test"},{"name":"should pass arguments and wait for function returns true","suites":["TestCafe","#waitForFunction"],"updatePoint":{"line":69,"column":64,"index":1860},"line":69,"code":"    it('should pass arguments and wait for function returns true', () => {\n      return I.amOnPage('/form/wait_js').then(() => I.waitForFunction(varName => window[varName], ['__waitJs'], 3));\n    });","file":"helper/TestCafe_test.js","skipped":false,"dir":"test"},{"name":"should return title","suites":["TestCafe","#useTestCafeTo"],"updatePoint":{"line":75,"column":27,"index":2089},"line":75,"code":"    it('should return title', async () => {\n      await I.amOnPage('/');\n      const title = await I.useTestCafeTo('test', async ({\n        t\n      }) => {\n        return t.eval(() => document.title, {\n          boundTestRun: null\n        });\n      });\n      assert.equal('TestEd Beta 2.0', title);\n    });","file":"helper/TestCafe_test.js","skipped":false,"dir":"test"},{"name":"should locate through custom selector","suites":["WebDriver","customLocatorStrategies"],"updatePoint":{"line":64,"column":45,"index":1630},"line":64,"code":"    it('should locate through custom selector', async () => {\n      const el = await this.wdBrowser.custom$('customSelector', '.test');\n      expect(el.elementId).to.equal('.test-foobar');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should include the custom strategy","suites":["WebDriver","customLocatorStrategies"],"updatePoint":{"line":68,"column":42,"index":1824},"line":68,"code":"    it('should include the custom strategy', async () => {\n      expect(wd.customLocatorStrategies.customSelector).to.not.be.undefined;\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should be added to the browser locator strategies","suites":["WebDriver","customLocatorStrategies"],"updatePoint":{"line":71,"column":57,"index":1983},"line":71,"code":"    it('should be added to the browser locator strategies', async () => {\n      expect(this.wdBrowser.addLocatorStrategy).to.not.be.undefined;\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"throws on invalid custom selector","suites":["WebDriver","customLocatorStrategies"],"updatePoint":{"line":74,"column":41,"index":2118},"line":74,"code":"    it('throws on invalid custom selector', async () => {\n      try {\n        await wd.waitForEnabled({\n          madeUpSelector: '#text'\n        }, 2);\n      } catch (e) {\n        expect(e.message).to.include('Please define \"customLocatorStrategies\"');\n      }\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should open main page of configured site","suites":["WebDriver","open page : #amOnPage"],"updatePoint":{"line":85,"column":48,"index":2445},"line":85,"code":"    it('should open main page of configured site', async () => {\n      await wd.amOnPage('/');\n      const url = await wd.grabCurrentUrl();\n      url.should.eql(`${siteUrl}/`);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should open any page of configured site","suites":["WebDriver","open page : #amOnPage"],"updatePoint":{"line":90,"column":47,"index":2629},"line":90,"code":"    it('should open any page of configured site', async () => {\n      await wd.amOnPage('/info');\n      const url = await wd.grabCurrentUrl();\n      url.should.eql(`${siteUrl}/info`);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should open absolute url","suites":["WebDriver","open page : #amOnPage"],"updatePoint":{"line":95,"column":32,"index":2806},"line":95,"code":"    it('should open absolute url', async () => {\n      await wd.amOnPage(siteUrl);\n      const url = await wd.grabCurrentUrl();\n      url.should.eql(`${siteUrl}/`);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should fail when text is not on site","suites":["WebDriver","see text : #see"],"updatePoint":{"line":102,"column":44,"index":3035},"line":102,"code":"    it('should fail when text is not on site', async () => {\n      await wd.amOnPage('/');\n\n      try {\n        await wd.see('Something incredible!');\n      } catch (e) {\n        e.should.be.instanceOf(AssertionFailedError);\n        e.inspect().should.include('web page');\n      }\n\n      try {\n        await wd.dontSee('Welcome');\n      } catch (e) {\n        e.should.be.instanceOf(AssertionFailedError);\n        e.inspect().should.include('web page');\n      }\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should throw error if field is not empty","suites":["WebDriver","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":121,"column":48,"index":3590},"line":121,"code":"    it('should throw error if field is not empty', async () => {\n      await wd.amOnPage('/form/empty');\n\n      try {\n        await wd.seeInField('#empty_input', 'Ayayay');\n      } catch (e) {\n        e.should.be.instanceOf(AssertionFailedError);\n        e.inspect().should.be.equal('expected fields by #empty_input to include \"Ayayay\"');\n      }\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should check values in checkboxes","suites":["WebDriver","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":131,"column":41,"index":3938},"line":131,"code":"    it('should check values in checkboxes', async () => {\n      await wd.amOnPage('/form/field_values');\n      await wd.dontSeeInField('checkbox[]', 'not seen one');\n      await wd.seeInField('checkbox[]', 'see test one');\n      await wd.dontSeeInField('checkbox[]', 'not seen two');\n      await wd.seeInField('checkbox[]', 'see test two');\n      await wd.dontSeeInField('checkbox[]', 'not seen three');\n      await wd.seeInField('checkbox[]', 'see test three');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should check values with boolean","suites":["WebDriver","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":140,"column":40,"index":4408},"line":140,"code":"    it('should check values with boolean', async () => {\n      await wd.amOnPage('/form/field_values');\n      await wd.seeInField('checkbox1', true);\n      await wd.dontSeeInField('checkbox1', false);\n      await wd.seeInField('checkbox2', false);\n      await wd.dontSeeInField('checkbox2', true);\n      await wd.seeInField('radio2', true);\n      await wd.dontSeeInField('radio2', false);\n      await wd.seeInField('radio3', false);\n      await wd.dontSeeInField('radio3', true);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should check values in radio","suites":["WebDriver","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":151,"column":36,"index":4892},"line":151,"code":"    it('should check values in radio', async () => {\n      await wd.amOnPage('/form/field_values');\n      await wd.seeInField('radio1', 'see test one');\n      await wd.dontSeeInField('radio1', 'not seen one');\n      await wd.dontSeeInField('radio1', 'not seen two');\n      await wd.dontSeeInField('radio1', 'not seen three');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should check values in select","suites":["WebDriver","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":158,"column":37,"index":5227},"line":158,"code":"    it('should check values in select', async () => {\n      await wd.amOnPage('/form/field_values');\n      await wd.seeInField('select1', 'see test one');\n      await wd.dontSeeInField('select1', 'not seen one');\n      await wd.dontSeeInField('select1', 'not seen two');\n      await wd.dontSeeInField('select1', 'not seen three');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should check for empty select field","suites":["WebDriver","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":165,"column":43,"index":5572},"line":165,"code":"    it('should check for empty select field', async () => {\n      await wd.amOnPage('/form/field_values');\n      await wd.seeInField('select3', '');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should check for select multiple field","suites":["WebDriver","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":169,"column":46,"index":5732},"line":169,"code":"    it('should check for select multiple field', async () => {\n      await wd.amOnPage('/form/field_values');\n      await wd.dontSeeInField('select2', 'not seen one');\n      await wd.seeInField('select2', 'see test one');\n      await wd.dontSeeInField('select2', 'not seen two');\n      await wd.seeInField('select2', 'see test two');\n      await wd.dontSeeInField('select2', 'not seen three');\n      await wd.seeInField('select2', 'see test three');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should return error when element has no value attribute","suites":["WebDriver","check fields: #seeInField, #seeCheckboxIsChecked, ..."],"updatePoint":{"line":178,"column":63,"index":6207},"line":178,"code":"    it('should return error when element has no value attribute', async () => {\n      await wd.amOnPage('https://codecept.io/quickstart');\n\n      try {\n        await wd.seeInField('#search_input_react', 'WebDriver1');\n      } catch (e) {\n        e.should.be.instanceOf(Error);\n      }\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"it should forceRightClick","suites":["WebDriver","Force Right Click: #forceRightClick"],"updatePoint":{"line":189,"column":33,"index":6534},"line":189,"code":"    it('it should forceRightClick', async () => {\n      await wd.amOnPage('/form/rightclick');\n      await wd.dontSee('right clicked');\n      await wd.forceRightClick('Lorem Ipsum');\n      await wd.see('right clicked');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"it should forceRightClick by locator","suites":["WebDriver","Force Right Click: #forceRightClick"],"updatePoint":{"line":195,"column":44,"index":6773},"line":195,"code":"    it('it should forceRightClick by locator', async () => {\n      await wd.amOnPage('/form/rightclick');\n      await wd.dontSee('right clicked');\n      await wd.forceRightClick('.context a');\n      await wd.see('right clicked');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"it should forceRightClick by locator and context","suites":["WebDriver","Force Right Click: #forceRightClick"],"updatePoint":{"line":201,"column":56,"index":7023},"line":201,"code":"    it('it should forceRightClick by locator and context', async () => {\n      await wd.amOnPage('/form/rightclick');\n      await wd.dontSee('right clicked');\n      await wd.forceRightClick('Lorem Ipsum', '.context');\n      await wd.see('right clicked');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should be able to send special keys to element","suites":["WebDriver","#pressKey, #pressKeyDown, #pressKeyUp"],"updatePoint":{"line":209,"column":54,"index":7350},"line":209,"code":"    it('should be able to send special keys to element', async () => {\n      await wd.amOnPage('/form/field');\n      await wd.appendField('Name', '-');\n      await wd.pressKey(['Right Shift', 'Home']);\n      await wd.pressKey('Delete'); // Sequence only executes up to first non-modifier key ('Digit1')\n\n      await wd.pressKey(['SHIFT_RIGHT', 'Digit1', 'Digit4']);\n      await wd.pressKey('1');\n      await wd.pressKey('2');\n      await wd.pressKey('3');\n      await wd.pressKey('ArrowLeft');\n      await wd.pressKey('Left Arrow');\n      await wd.pressKey('arrow_left');\n      await wd.pressKeyDown('Shift');\n      await wd.pressKey('a');\n      await wd.pressKey('KeyB');\n      await wd.pressKeyUp('ShiftLeft');\n      await wd.pressKey('C');\n      await wd.seeInField('Name', '!ABC123');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should use modifier key based on operating system","suites":["WebDriver","#pressKey, #pressKeyDown, #pressKeyUp"],"updatePoint":{"line":229,"column":57,"index":8150},"line":229,"code":"    it('should use modifier key based on operating system', async () => {\n      await wd.amOnPage('/form/field');\n      await wd.fillField('Name', 'value that is cleared using select all shortcut');\n      await wd.pressKey(['CommandOrControl', 'A']);\n      await wd.pressKey('Backspace');\n      await wd.dontSeeInField('Name', 'value that is cleared using select all shortcut');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should show correct numpad or punctuation key when Shift modifier is active","suites":["WebDriver","#pressKey, #pressKeyDown, #pressKeyUp"],"updatePoint":{"line":236,"column":83,"index":8563},"line":236,"code":"    it('should show correct numpad or punctuation key when Shift modifier is active', async () => {\n      await wd.amOnPage('/form/field');\n      await wd.fillField('Name', '');\n      await wd.pressKey(';');\n      await wd.pressKey(['Shift', ';']);\n      await wd.pressKey(['Shift', 'Semicolon']);\n      await wd.pressKey('=');\n      await wd.pressKey(['Shift', '=']);\n      await wd.pressKey(['Shift', 'Equal']);\n      await wd.pressKey('*');\n      await wd.pressKey(['Shift', '*']);\n      await wd.pressKey(['Shift', 'Multiply']);\n      await wd.pressKey('+');\n      await wd.pressKey(['Shift', '+']);\n      await wd.pressKey(['Shift', 'Add']);\n      await wd.pressKey(',');\n      await wd.pressKey(['Shift', ',']);\n      await wd.pressKey(['Shift', 'Comma']);\n      await wd.pressKey(['Shift', 'NumpadComma']);\n      await wd.pressKey(['Shift', 'Separator']);\n      await wd.pressKey('-');\n      await wd.pressKey(['Shift', '-']);\n      await wd.pressKey(['Shift', 'Subtract']);\n      await wd.pressKey('.');\n      await wd.pressKey(['Shift', '.']);\n      await wd.pressKey(['Shift', 'Decimal']);\n      await wd.pressKey(['Shift', 'Period']);\n      await wd.pressKey('/');\n      await wd.pressKey(['Shift', '/']);\n      await wd.pressKey(['Shift', 'Divide']);\n      await wd.pressKey(['Shift', 'Slash']);\n      await wd.seeInField('Name', ';::=++***+++,<<<<-_-.>.>/?/?');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should show correct number key when Shift modifier is active","suites":["WebDriver","#pressKey, #pressKeyDown, #pressKeyUp"],"updatePoint":{"line":269,"column":68,"index":9931},"line":269,"code":"    it('should show correct number key when Shift modifier is active', async () => {\n      await wd.amOnPage('/form/field');\n      await wd.fillField('Name', '');\n      await wd.pressKey('0');\n      await wd.pressKeyDown('Shift');\n      await wd.pressKey('0');\n      await wd.pressKey('Digit0');\n      await wd.pressKeyUp('Shift');\n      await wd.pressKey('1');\n      await wd.pressKeyDown('Shift');\n      await wd.pressKey('1');\n      await wd.pressKey('Digit1');\n      await wd.pressKeyUp('Shift');\n      await wd.pressKey('2');\n      await wd.pressKeyDown('Shift');\n      await wd.pressKey('2');\n      await wd.pressKey('Digit2');\n      await wd.pressKeyUp('Shift');\n      await wd.pressKey('3');\n      await wd.pressKeyDown('Shift');\n      await wd.pressKey('3');\n      await wd.pressKey('Digit3');\n      await wd.pressKeyUp('Shift');\n      await wd.pressKey('4');\n      await wd.pressKeyDown('Shift');\n      await wd.pressKey('4');\n      await wd.pressKey('Digit4');\n      await wd.pressKeyUp('Shift');\n      await wd.pressKey('5');\n      await wd.pressKeyDown('Shift');\n      await wd.pressKey('5');\n      await wd.pressKey('Digit5');\n      await wd.pressKeyUp('Shift');\n      await wd.pressKey('6');\n      await wd.pressKeyDown('Shift');\n      await wd.pressKey('6');\n      await wd.pressKey('Digit6');\n      await wd.pressKeyUp('Shift');\n      await wd.pressKey('7');\n      await wd.pressKeyDown('Shift');\n      await wd.pressKey('7');\n      await wd.pressKey('Digit7');\n      await wd.pressKeyUp('Shift');\n      await wd.pressKey('8');\n      await wd.pressKeyDown('Shift');\n      await wd.pressKey('8');\n      await wd.pressKey('Digit8');\n      await wd.pressKeyUp('Shift');\n      await wd.pressKey('9');\n      await wd.pressKeyDown('Shift');\n      await wd.pressKey('9');\n      await wd.pressKey('Digit9');\n      await wd.pressKeyUp('Shift');\n      await wd.seeInField('Name', '0))1!!2@@3##4$$5%%6^^7&&8**9((');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should check for text to be in HTML source","suites":["WebDriver","#seeInSource, #grabSource"],"updatePoint":{"line":326,"column":50,"index":11897},"line":326,"code":"    it('should check for text to be in HTML source', async () => {\n      await wd.amOnPage('/');\n      await wd.seeInSource('<title>TestEd Beta 2.0</title>');\n      await wd.dontSeeInSource('<meta');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should grab the source","suites":["WebDriver","#seeInSource, #grabSource"],"updatePoint":{"line":331,"column":30,"index":12085},"line":331,"code":"    it('should grab the source', async () => {\n      await wd.amOnPage('/');\n      const source = await wd.grabSource();\n      assert.notEqual(source.indexOf('<title>TestEd Beta 2.0</title>'), -1, 'Source html should be retrieved');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should grab the innerHTML for an element","suites":["WebDriver","#seeInSource, #grabSource"],"updatePoint":{"line":336,"column":48,"index":12344},"line":336,"code":"    it('should grab the innerHTML for an element', async () => {\n      await wd.amOnPage('/');\n      const source = await wd.grabHTMLFrom('#area1');\n      assert.deepEqual(source, `\n    <a href=\"/form/file\" qa-id=\"test\" qa-link=\"test\"> Test Link </a>\n`);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should check that title is equal to provided one","suites":["WebDriver","#seeTitleEquals"],"updatePoint":{"line":345,"column":56,"index":12659},"line":345,"code":"    it('should check that title is equal to provided one', async () => {\n      await wd.amOnPage('/');\n\n      try {\n        await wd.seeTitleEquals('TestEd Beta 2.0');\n        await wd.seeTitleEquals('TestEd Beta 2.');\n      } catch (e) {\n        assert.equal(e.message, 'expected web page title to be TestEd Beta 2., but found TestEd Beta 2.0');\n      }\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should check text is equal to provided one","suites":["WebDriver","#seeTextEquals"],"updatePoint":{"line":357,"column":50,"index":13059},"line":357,"code":"    it('should check text is equal to provided one', async () => {\n      await wd.amOnPage('/');\n      await wd.seeTextEquals('Welcome to test app!', 'h1');\n\n      try {\n        await wd.seeTextEquals('Welcome to test app', 'h1');\n        assert.equal(true, false, 'Throw an error because it should not get this far!');\n      } catch (e) {\n        e.should.be.instanceOf(Error);\n        e.message.should.be.equal('expected element h1 \"Welcome to test app\" to equal \"Welcome to test app!\"'); // e.should.be.instanceOf(AssertionFailedError);\n      }\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should check text is not equal to empty string of element text","suites":["WebDriver","#seeTextEquals"],"updatePoint":{"line":369,"column":70,"index":13635},"line":369,"code":"    it('should check text is not equal to empty string of element text', async () => {\n      await wd.amOnPage('https://codecept.io');\n\n      try {\n        await wd.seeTextEquals('', '.logo');\n        await wd.seeTextEquals('This is not empty', '.logo');\n      } catch (e) {\n        e.should.be.instanceOf(Error);\n        e.message.should.be.equal('expected element .logo \"This is not empty\" to equal \"\"');\n      }\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for function returns true","suites":["WebDriver","#waitForFunction"],"updatePoint":{"line":382,"column":45,"index":14078},"line":382,"code":"    it('should wait for function returns true', async () => {\n      await wd.amOnPage('/form/wait_js');\n      await wd.waitForFunction(() => window.__waitJs, 3);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should pass arguments and wait for function returns true","suites":["WebDriver","#waitForFunction"],"updatePoint":{"line":386,"column":64,"index":14267},"line":386,"code":"    it('should pass arguments and wait for function returns true', async () => {\n      await wd.amOnPage('/form/wait_js');\n      await wd.waitForFunction(varName => window[varName], ['__waitJs'], 3);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for input text field to be enabled","suites":["WebDriver","#waitForEnabled"],"updatePoint":{"line":392,"column":54,"index":14509},"line":392,"code":"    it('should wait for input text field to be enabled', async () => {\n      await wd.amOnPage('/form/wait_enabled');\n      await wd.waitForEnabled('#text', 2);\n      await wd.fillField('#text', 'hello world');\n      await wd.seeInField('#text', 'hello world');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for input text field to be enabled by xpath","suites":["WebDriver","#waitForEnabled"],"updatePoint":{"line":398,"column":63,"index":14788},"line":398,"code":"    it('should wait for input text field to be enabled by xpath', async () => {\n      await wd.amOnPage('/form/wait_enabled');\n      await wd.waitForEnabled(\"//*[@name = 'test']\", 2);\n      await wd.fillField('#text', 'hello world');\n      await wd.seeInField('#text', 'hello world');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for a button to be enabled","suites":["WebDriver","#waitForEnabled"],"updatePoint":{"line":404,"column":46,"index":15064},"line":404,"code":"    it('should wait for a button to be enabled', async () => {\n      await wd.amOnPage('/form/wait_enabled');\n      await wd.waitForEnabled('#text', 2);\n      await wd.click('#button');\n      await wd.see('button was clicked');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for expected value for given locator","suites":["WebDriver","#waitForValue"],"updatePoint":{"line":412,"column":56,"index":15352},"line":412,"code":"    it('should wait for expected value for given locator', async () => {\n      await wd.amOnPage('/info');\n      await wd.waitForValue('//input[@name= \"rus\"]', 'Верно');\n\n      try {\n        await wd.waitForValue('//input[@name= \"rus\"]', 'Верно3', 0.1);\n        throw Error('It should never get this far');\n      } catch (e) {\n        e.message.should.include('element (//input[@name= \"rus\"]) is not in DOM or there is no element(//input[@name= \"rus\"]) with value \"Верно3\" after 0.1 sec');\n      }\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for expected value for given css locator","suites":["WebDriver","#waitForValue"],"updatePoint":{"line":423,"column":60,"index":15862},"line":423,"code":"    it('should wait for expected value for given css locator', async () => {\n      await wd.amOnPage('/form/wait_value');\n      await wd.seeInField('#text', 'Hamburg');\n      await wd.waitForValue('#text', 'Brisbane', 2.5);\n      await wd.seeInField('#text', 'Brisbane');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for expected value for given xpath locator","suites":["WebDriver","#waitForValue"],"updatePoint":{"line":429,"column":62,"index":16144},"line":429,"code":"    it('should wait for expected value for given xpath locator', async () => {\n      await wd.amOnPage('/form/wait_value');\n      await wd.seeInField('#text', 'Hamburg');\n      await wd.waitForValue('//input[@value = \"Grüße aus Hamburg\"]', 'Brisbane', 2.5);\n      await wd.seeInField('#text', 'Brisbane');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should only wait for one of the matching elements to contain the value given xpath locator","suites":["WebDriver","#waitForValue"],"updatePoint":{"line":435,"column":98,"index":16494},"line":435,"code":"    it('should only wait for one of the matching elements to contain the value given xpath locator', async () => {\n      await wd.amOnPage('/form/wait_value');\n      await wd.waitForValue('//input[@type = \"text\"]', 'Brisbane', 4);\n      await wd.seeInField('#text', 'Brisbane');\n      await wd.seeInField('#text2', 'London');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should only wait for one of the matching elements to contain the value given css locator","suites":["WebDriver","#waitForValue"],"updatePoint":{"line":441,"column":96,"index":16826},"line":441,"code":"    it('should only wait for one of the matching elements to contain the value given css locator', async () => {\n      await wd.amOnPage('/form/wait_value');\n      await wd.waitForValue('.inputbox', 'Brisbane', 4);\n      await wd.seeInField('#text', 'Brisbane');\n      await wd.seeInField('#text2', 'London');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for a specified number of elements on the page","suites":["WebDriver","#waitNumberOfVisibleElements"],"updatePoint":{"line":449,"column":66,"index":17171},"line":449,"code":"    it('should wait for a specified number of elements on the page', () => {\n      return wd.amOnPage('/info').then(() => wd.waitNumberOfVisibleElements('//div[@id = \"grab-multiple\"]//a', 3)).then(() => wd.waitNumberOfVisibleElements('//div[@id = \"grab-multiple\"]//a', 2, 0.1)).then(() => {\n        throw Error('It should never get this far');\n      }).catch(e => {\n        e.message.should.include('The number of elements (//div[@id = \"grab-multiple\"]//a) is not 2 after 0.1 sec');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should be no [object Object] in the error message","suites":["WebDriver","#waitNumberOfVisibleElements"],"updatePoint":{"line":456,"column":57,"index":17663},"line":456,"code":"    it('should be no [object Object] in the error message', () => {\n      return wd.amOnPage('/info').then(() => wd.waitNumberOfVisibleElements({\n        css: '//div[@id = \"grab-multiple\"]//a'\n      }, 3)).then(() => {\n        throw Error('It should never get this far');\n      }).catch(e => {\n        e.message.should.not.include('[object Object]');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for a specified number of elements on the page using a css selector","suites":["WebDriver","#waitNumberOfVisibleElements"],"updatePoint":{"line":465,"column":87,"index":18062},"line":465,"code":"    it('should wait for a specified number of elements on the page using a css selector', () => {\n      return wd.amOnPage('/info').then(() => wd.waitNumberOfVisibleElements('#grab-multiple > a', 3)).then(() => wd.waitNumberOfVisibleElements('#grab-multiple > a', 2, 0.1)).then(() => {\n        throw Error('It should never get this far');\n      }).catch(e => {\n        e.message.should.include('The number of elements (#grab-multiple > a) is not 2 after 0.1 sec');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for a specified number of elements which are not yet attached to the DOM","suites":["WebDriver","#waitNumberOfVisibleElements"],"updatePoint":{"line":472,"column":92,"index":18550},"line":472,"code":"    it('should wait for a specified number of elements which are not yet attached to the DOM', () => {\n      return wd.amOnPage('/form/wait_num_elements').then(() => wd.waitNumberOfVisibleElements('.title', 2, 3)).then(() => wd.see('Hello')).then(() => wd.see('World'));\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should be no [object Object] in the error message","suites":["WebDriver","#waitForVisible"],"updatePoint":{"line":477,"column":57,"index":18838},"line":477,"code":"    it('should be no [object Object] in the error message', () => {\n      return wd.amOnPage('/info').then(() => wd.waitForVisible('//div[@id = \"grab-multiple\"]//a', 3)).then(() => {\n        throw Error('It should never get this far');\n      }).catch(e => {\n        e.message.should.not.include('[object Object]');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should be no [object Object] in the error message","suites":["WebDriver","#waitForInvisible"],"updatePoint":{"line":486,"column":57,"index":19217},"line":486,"code":"    it('should be no [object Object] in the error message', () => {\n      return wd.amOnPage('/info').then(() => wd.waitForInvisible('//div[@id = \"grab-multiple\"]//a', 3)).then(() => {\n        throw Error('It should never get this far');\n      }).catch(e => {\n        e.message.should.not.include('[object Object]');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for a specified element to be invisible","suites":["WebDriver","#waitForInvisible"],"updatePoint":{"line":493,"column":59,"index":19554},"line":493,"code":"    it('should wait for a specified element to be invisible', () => {\n      return wd.amOnPage('/form/wait_invisible').then(() => wd.waitForInvisible('#step1', 3)).then(() => wd.dontSeeElement('#step1'));\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should trigger hover event","suites":["WebDriver","#moveCursorTo"],"updatePoint":{"line":498,"column":34,"index":19784},"line":498,"code":"    it('should trigger hover event', async () => {\n      await wd.amOnPage('/form/hover');\n      await wd.moveCursorTo('#hover');\n      await wd.see('Hovered', '#show');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should not trigger hover event because of the offset is beyond the element","suites":["WebDriver","#moveCursorTo"],"updatePoint":{"line":503,"column":82,"index":20010},"line":503,"code":"    it('should not trigger hover event because of the offset is beyond the element', async () => {\n      await wd.amOnPage('/form/hover');\n      await wd.moveCursorTo('#hover', 100, 100);\n      await wd.dontSee('Hovered', '#show');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should only have 1 tab open when the browser starts and navigates to the first page","suites":["WebDriver","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":510,"column":91,"index":20397},"line":510,"code":"    it('should only have 1 tab open when the browser starts and navigates to the first page', async () => {\n      await wd.amOnPage('/');\n      const numPages = await wd.grabNumberOfOpenTabs();\n      assert.equal(numPages, 1);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should switch to next tab","suites":["WebDriver","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":515,"column":33,"index":20574},"line":515,"code":"    it('should switch to next tab', async () => {\n      wd.amOnPage('/info');\n      const numPages = await wd.grabNumberOfOpenTabs();\n      assert.equal(numPages, 1);\n      await wd.click('New tab');\n      await wd.switchToNextTab();\n      await wd.waitInUrl('/login');\n      const numPagesAfter = await wd.grabNumberOfOpenTabs();\n      assert.equal(numPagesAfter, 2);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should assert when there is no ability to switch to next tab","suites":["WebDriver","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":525,"column":68,"index":20986},"line":525,"code":"    it('should assert when there is no ability to switch to next tab', () => {\n      return wd.amOnPage('/').then(() => wd.click('More info')).then(() => wd.wait(1)) // Wait is required because the url is change by previous statement (maybe related to #914)\n      .then(() => wd.switchToNextTab(2)).then(() => assert.equal(true, false, 'Throw an error if it gets this far (which it should not)!')).catch(e => {\n        assert.equal(e.message, 'There is no ability to switch to next tab with offset 2');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should close current tab","suites":["WebDriver","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":531,"column":32,"index":21471},"line":531,"code":"    it('should close current tab', () => {\n      return wd.amOnPage('/info').then(() => wd.click('New tab')).then(() => wd.switchToNextTab()).then(() => wd.seeInCurrentUrl('/login')).then(() => wd.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 2)).then(() => wd.closeCurrentTab()).then(() => wd.seeInCurrentUrl('/info')).then(() => wd.grabNumberOfOpenTabs());\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should close other tabs","suites":["WebDriver","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":534,"column":31,"index":21855},"line":534,"code":"    it('should close other tabs', () => {\n      return wd.amOnPage('/').then(() => wd.openNewTab()).then(() => wd.seeInCurrentUrl('about:blank')).then(() => wd.amOnPage('/info')).then(() => wd.click('New tab')).then(() => wd.switchToNextTab()).then(() => wd.seeInCurrentUrl('/login')).then(() => wd.closeOtherTabs()).then(() => wd.seeInCurrentUrl('/login')).then(() => wd.grabNumberOfOpenTabs());\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should open new tab","suites":["WebDriver","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":537,"column":27,"index":22256},"line":537,"code":"    it('should open new tab', () => {\n      return wd.amOnPage('/info').then(() => wd.openNewTab()).then(() => wd.waitInUrl('about:blank')).then(() => wd.grabNumberOfOpenTabs()).then(numPages => assert.equal(numPages, 2));\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should switch to previous tab","suites":["WebDriver","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":540,"column":37,"index":22497},"line":540,"code":"    it('should switch to previous tab', () => {\n      return wd.amOnPage('/info').then(() => wd.openNewTab()).then(() => wd.waitInUrl('about:blank')).then(() => wd.switchToPreviousTab()).then(() => wd.waitInUrl('/info'));\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should assert when there is no ability to switch to previous tab","suites":["WebDriver","#switchToNextTab, #switchToPreviousTab, #openNewTab, #closeCurrentTab, #closeOtherTabs, #grabNumberOfOpenTabs"],"updatePoint":{"line":543,"column":72,"index":22762},"line":543,"code":"    it('should assert when there is no ability to switch to previous tab', () => {\n      return wd.amOnPage('/info').then(() => wd.openNewTab()).then(() => wd.waitInUrl('about:blank')).then(() => wd.switchToPreviousTab(2)).then(() => wd.waitInUrl('/info')).catch(e => {\n        assert.equal(e.message, 'There is no ability to switch to previous tab with offset 2');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should accept popup window","suites":["WebDriver","popup : #acceptPopup, #seeInPopup, #cancelPopup"],"updatePoint":{"line":550,"column":34,"index":23184},"line":550,"code":"    it('should accept popup window', () => {\n      return wd.amOnPage('/form/popup').then(() => wd.click('Confirm')).then(() => wd.acceptPopup()).then(() => wd.see('Yes', '#result'));\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should cancel popup","suites":["WebDriver","popup : #acceptPopup, #seeInPopup, #cancelPopup"],"updatePoint":{"line":553,"column":27,"index":23369},"line":553,"code":"    it('should cancel popup', () => {\n      return wd.amOnPage('/form/popup').then(() => wd.click('Confirm')).then(() => wd.cancelPopup()).then(() => wd.see('No', '#result'));\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should check text in popup","suites":["WebDriver","popup : #acceptPopup, #seeInPopup, #cancelPopup"],"updatePoint":{"line":556,"column":34,"index":23560},"line":556,"code":"    it('should check text in popup', () => {\n      return wd.amOnPage('/form/popup').then(() => wd.click('Alert')).then(() => wd.seeInPopup('Really?')).then(() => wd.cancelPopup());\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should grab text from popup","suites":["WebDriver","popup : #acceptPopup, #seeInPopup, #cancelPopup"],"updatePoint":{"line":559,"column":35,"index":23751},"line":559,"code":"    it('should grab text from popup', () => {\n      return wd.amOnPage('/form/popup').then(() => wd.click('Alert')).then(() => wd.grabPopupText()).then(text => assert.equal(text, 'Really?'));\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should return null if no popup is visible (do not throw an error)","suites":["WebDriver","popup : #acceptPopup, #seeInPopup, #cancelPopup"],"updatePoint":{"line":562,"column":73,"index":23989},"line":562,"code":"    it('should return null if no popup is visible (do not throw an error)', () => {\n      return wd.amOnPage('/form/popup').then(() => wd.grabPopupText()).then(text => assert.equal(text, null));\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should return error if not present","suites":["WebDriver","#waitForText"],"updatePoint":{"line":567,"column":42,"index":24202},"line":567,"code":"    it('should return error if not present', () => {\n      return wd.amOnPage('/dynamic').then(() => wd.waitForText('Nothing here', 1, '#text')).catch(e => {\n        e.message.should.be.equal('element (#text) is not in DOM or there is no element(#text) with text \"Nothing here\" after 1 sec');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should return error if waiting is too small","suites":["WebDriver","#waitForText"],"updatePoint":{"line":572,"column":51,"index":24522},"line":572,"code":"    it('should return error if waiting is too small', () => {\n      return wd.amOnPage('/dynamic').then(() => wd.waitForText('Dynamic text', 0.1)).catch(e => {\n        e.message.should.be.equal('element (body) is not in DOM or there is no element(body) with text \"Dynamic text\" after 0.1 sec');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should return 1 as count","suites":["WebDriver","#seeNumberOfElements"],"updatePoint":{"line":579,"column":32,"index":24865},"line":579,"code":"    it('should return 1 as count', async () => {\n      await wd.amOnPage('/');\n      await wd.seeNumberOfElements('#area1', 1);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should switch reference to iframe content","suites":["WebDriver","#switchTo"],"updatePoint":{"line":585,"column":49,"index":25056},"line":585,"code":"    it('should switch reference to iframe content', async () => {\n      await wd.amOnPage('/iframe');\n      await wd.switchTo('[name=\"content\"]');\n      await wd.see('Information\\nLots of valuable data here');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should return error if iframe selector is invalid","suites":["WebDriver","#switchTo"],"updatePoint":{"line":590,"column":57,"index":25282},"line":590,"code":"    it('should return error if iframe selector is invalid', async () => {\n      await wd.amOnPage('/iframe');\n\n      try {\n        await wd.switchTo('#invalidIframeSelector');\n      } catch (e) {\n        e.should.be.instanceOf(Error);\n        e.message.should.be.equal('Element \"#invalidIframeSelector\" was not found by text|CSS|XPath');\n      }\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should return error if iframe selector is not iframe","suites":["WebDriver","#switchTo"],"updatePoint":{"line":600,"column":60,"index":25639},"line":600,"code":"    it('should return error if iframe selector is not iframe', async () => {\n      await wd.amOnPage('/iframe');\n\n      try {\n        await wd.switchTo('h1');\n      } catch (e) {\n        e.should.be.instanceOf(Error);\n        e.message.should.contain('no such frame');\n      }\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should return to parent frame given a null locator","suites":["WebDriver","#switchTo"],"updatePoint":{"line":610,"column":58,"index":25922},"line":610,"code":"    it('should return to parent frame given a null locator', async () => {\n      await wd.amOnPage('/iframe');\n      await wd.switchTo('[name=\"content\"]');\n      await wd.see('Information\\nLots of valuable data here');\n      await wd.switchTo(null);\n      await wd.see('Iframe test');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should click on inner text","suites":["WebDriver","click context"],"updatePoint":{"line":619,"column":34,"index":26233},"line":619,"code":"    it('should click on inner text', async () => {\n      await wd.amOnPage('/form/checkbox');\n      await wd.click('Submit', '//input[@type = \"submit\"]');\n      await wd.waitInUrl('/form/complex');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should click on input in inner element","suites":["WebDriver","click context"],"updatePoint":{"line":624,"column":46,"index":26451},"line":624,"code":"    it('should click on input in inner element', async () => {\n      await wd.amOnPage('/form/checkbox');\n      await wd.click('Submit', '//form');\n      await wd.waitInUrl('/form/complex');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should click by accessibility_id","suites":["WebDriver","click context"],"updatePoint":{"line":629,"column":40,"index":26644},"line":629,"code":"    it('should click by accessibility_id', async () => {\n      await wd.amOnPage('/info');\n      await wd.click('~index via aria-label');\n      await wd.see('Welcome to test app!');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should set initial window size","suites":["WebDriver","window size #resizeWindow"],"updatePoint":{"line":636,"column":38,"index":26886},"line":636,"code":"    it('should set initial window size', async () => {\n      await wd.amOnPage('/form/resize');\n      await wd.click('Window Size');\n      await wd.see('Height 700', '#height');\n      await wd.see('Width 500', '#width');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should set window size on new session","suites":["WebDriver","window size #resizeWindow"],"updatePoint":{"line":642,"column":45,"index":27122},"line":642,"code":"    it('should set window size on new session', () => {\n      return wd.amOnPage('/info').then(() => wd._session()).then(session => session.start().then(browser => ({\n        browser,\n        session\n      }))).then(({\n        session,\n        browser\n      }) => session.loadVars(browser)).then(() => wd.amOnPage('/form/resize')).then(() => wd.click('Window Size')).then(() => wd.see('Height 700', '#height')).then(() => wd.see('Width 500', '#width'));\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should resize window to specific dimensions","suites":["WebDriver","window size #resizeWindow"],"updatePoint":{"line":651,"column":51,"index":27590},"line":651,"code":"    it('should resize window to specific dimensions', async () => {\n      await wd.amOnPage('/form/resize');\n      await wd.resizeWindow(950, 600);\n      await wd.click('Window Size');\n      await wd.see('Height 600', '#height');\n      await wd.see('Width 950', '#width');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should resize window to maximum screen dimensions","suites":["WebDriver","window size #resizeWindow"],"updatePoint":{"line":658,"column":58,"index":27878},"line":658,"code":"    xit('should resize window to maximum screen dimensions', async () => {\n      await wd.amOnPage('/form/resize');\n      await wd.resizeWindow(500, 400);\n      await wd.click('Window Size');\n      await wd.see('Height 400', '#height');\n      await wd.see('Width 500', '#width');\n      await wd.resizeWindow('maximize');\n      await wd.click('Window Size');\n      await wd.dontSee('Height 400', '#height');\n      await wd.dontSee('Width 500', '#width');\n    });","skipped":true,"file":"helper/WebDriver_test.js","dir":"test"},{"name":"should wait for element to appear","suites":["WebDriver","SmartWait"],"updatePoint":{"line":673,"column":41,"index":28451},"line":673,"code":"    it('should wait for element to appear', async () => {\n      await wd.amOnPage('/form/wait_element');\n      await wd.dontSeeElement('h1');\n      await wd.seeElement('h1');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for clickable element appear","suites":["WebDriver","SmartWait"],"updatePoint":{"line":678,"column":48,"index":28641},"line":678,"code":"    it('should wait for clickable element appear', async () => {\n      await wd.amOnPage('/form/wait_clickable');\n      await wd.dontSeeElement('#click');\n      await wd.click('#click');\n      await wd.see('Hi!');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for clickable context to appear","suites":["WebDriver","SmartWait"],"updatePoint":{"line":684,"column":51,"index":28866},"line":684,"code":"    it('should wait for clickable context to appear', async () => {\n      await wd.amOnPage('/form/wait_clickable');\n      await wd.dontSeeElement('#linkContext');\n      await wd.click('Hello world', '#linkContext');\n      await wd.see('Hi!');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for text context to appear","suites":["WebDriver","SmartWait"],"updatePoint":{"line":690,"column":46,"index":29113},"line":690,"code":"    it('should wait for text context to appear', async () => {\n      await wd.amOnPage('/form/wait_clickable');\n      await wd.dontSee('Hello world');\n      await wd.see('Hello world', '#linkContext');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should work with grabbers","suites":["WebDriver","SmartWait"],"updatePoint":{"line":695,"column":33,"index":29310},"line":695,"code":"    it('should work with grabbers', async () => {\n      await wd.amOnPage('/form/wait_clickable');\n      await wd.dontSee('Hello world');\n      const res = await wd.grabAttributeFrom('#click', 'id');\n      assert.equal(res, 'click');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should locate a button to click","suites":["WebDriver","#_locateClickable"],"updatePoint":{"line":703,"column":39,"index":29604},"line":703,"code":"    it('should locate a button to click', async () => {\n      await wd.amOnPage('/form/checkbox');\n      const res = await wd._locateClickable('Submit');\n      res.length.should.be.equal(1);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should not locate a non-existing checkbox","suites":["WebDriver","#_locateClickable"],"updatePoint":{"line":708,"column":49,"index":29813},"line":708,"code":"    it('should not locate a non-existing checkbox', async () => {\n      await wd.amOnPage('/form/checkbox');\n      const res = await wd._locateClickable('I disagree');\n      res.length.should.be.equal(0);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should locate a checkbox","suites":["WebDriver","#_locateCheckable"],"updatePoint":{"line":715,"column":32,"index":30055},"line":715,"code":"    it('should locate a checkbox', async () => {\n      await wd.amOnPage('/form/checkbox');\n      const res = await wd._locateCheckable('I Agree');\n      res.length.should.be.equal(1);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should not locate a non-existing checkbox","suites":["WebDriver","#_locateCheckable"],"updatePoint":{"line":720,"column":49,"index":30265},"line":720,"code":"    it('should not locate a non-existing checkbox', async () => {\n      await wd.amOnPage('/form/checkbox');\n      const res = await wd._locateCheckable('I disagree');\n      res.length.should.be.equal(0);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should locate a field","suites":["WebDriver","#_locateFields"],"updatePoint":{"line":727,"column":29,"index":30501},"line":727,"code":"    it('should locate a field', async () => {\n      await wd.amOnPage('/form/field');\n      const res = await wd._locateFields('Name');\n      res.length.should.be.equal(1);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should not locate a non-existing field","suites":["WebDriver","#_locateFields"],"updatePoint":{"line":732,"column":46,"index":30699},"line":732,"code":"    it('should not locate a non-existing field', async () => {\n      await wd.amOnPage('/form/field');\n      const res = await wd._locateFields('Mother-in-law');\n      res.length.should.be.equal(0);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should grab browser logs","suites":["WebDriver","#_locateFields"],"updatePoint":{"line":739,"column":32,"index":30938},"line":739,"code":"    it('should grab browser logs', async () => {\n      await wd.amOnPage('/');\n      await wd.executeScript(() => {\n        console.log('Test log entry');\n      });\n      const logs = await wd.grabBrowserLogs();\n      console.log('lololo', logs);\n      const matchingLogs = logs.filter(log => log.message.indexOf('Test log entry') > -1);\n      assert.equal(matchingLogs.length, 1);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should grab browser logs across pages","suites":["WebDriver","#_locateFields"],"updatePoint":{"line":749,"column":45,"index":31341},"line":749,"code":"    it('should grab browser logs across pages', async () => {\n      wd.amOnPage('/');\n      await wd.executeScript(() => {\n        console.log('Test log entry 1');\n      });\n      await wd.openNewTab();\n      await wd.amOnPage('/info');\n      await wd.executeScript(() => {\n        console.log('Test log entry 2');\n      });\n      const logs = await wd.grabBrowserLogs();\n      const matchingLogs = logs.filter(log => log.message.indexOf('Test log entry') > -1);\n      assert.equal(matchingLogs.length, 2);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"Drag item from source to target (no iframe) @dragNdrop","suites":["WebDriver","#dragAndDrop"],"updatePoint":{"line":765,"column":62,"index":31914},"line":765,"code":"    it('Drag item from source to target (no iframe) @dragNdrop', async () => {\n      await wd.amOnPage('http://jqueryui.com/resources/demos/droppable/default.html');\n      await wd.seeElementInDOM('#draggable');\n      await wd.dragAndDrop('#draggable', '#droppable');\n      await wd.see('Dropped');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"Drag and drop from within an iframe","suites":["WebDriver","#dragAndDrop"],"updatePoint":{"line":771,"column":43,"index":32202},"line":771,"code":"    it('Drag and drop from within an iframe', async () => {\n      await wd.amOnPage('http://jqueryui.com/droppable');\n      await wd.resizeWindow(700, 700);\n      await wd.switchTo('//iframe[@class=\"demo-frame\"]');\n      await wd.seeElementInDOM('#draggable');\n      await wd.dragAndDrop('#draggable', '#droppable');\n      await wd.see('Dropped');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should switch to frame using name","suites":["WebDriver","#switchTo frame"],"updatePoint":{"line":781,"column":41,"index":32600},"line":781,"code":"    it('should switch to frame using name', async () => {\n      await wd.amOnPage('/iframe');\n      await wd.see('Iframe test', 'h1');\n      await wd.dontSee('Information', 'h1');\n      await wd.switchTo('iframe');\n      await wd.see('Information', 'h1');\n      await wd.dontSee('Iframe test', 'h1');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should switch to root frame","suites":["WebDriver","#switchTo frame"],"updatePoint":{"line":789,"column":35,"index":32903},"line":789,"code":"    it('should switch to root frame', async () => {\n      await wd.amOnPage('/iframe');\n      await wd.see('Iframe test', 'h1');\n      await wd.dontSee('Information', 'h1');\n      await wd.switchTo('iframe');\n      await wd.see('Information', 'h1');\n      await wd.dontSee('Iframe test', 'h1');\n      await wd.switchTo();\n      await wd.see('Iframe test', 'h1');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should switch to frame using frame number","suites":["WebDriver","#switchTo frame"],"updatePoint":{"line":799,"column":49,"index":33288},"line":799,"code":"    it('should switch to frame using frame number', async () => {\n      await wd.amOnPage('/iframe');\n      await wd.see('Iframe test', 'h1');\n      await wd.dontSee('Information', 'h1');\n      await wd.switchTo(0);\n      await wd.see('Information', 'h1');\n      await wd.dontSee('Iframe test', 'h1');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should attach to regular input element","suites":["WebDriver","#AttachFile"],"updatePoint":{"line":809,"column":46,"index":33635},"line":809,"code":"    it('should attach to regular input element', async () => {\n      await wd.amOnPage('/form/file');\n      await wd.attachFile('Avatar', './app/avatar.jpg');\n      await wd.seeInField('Avatar', 'avatar.jpg');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should attach to invisible input element","suites":["WebDriver","#AttachFile"],"updatePoint":{"line":814,"column":48,"index":33855},"line":814,"code":"    it('should attach to invisible input element', async () => {\n      await wd.amOnPage('/form/file');\n      await wd.attachFile('hidden', '/app/avatar.jpg');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should drag scrubber to given position","suites":["WebDriver","#dragSlider"],"updatePoint":{"line":820,"column":46,"index":34061},"line":820,"code":"    it('should drag scrubber to given position', async () => {\n      await wd.amOnPage('/form/page_slider');\n      await wd.seeElementInDOM('#slidecontainer input');\n      const before = await wd.grabValueFrom('#slidecontainer input');\n      await wd.dragSlider('#slidecontainer input', 20);\n      const after = await wd.grabValueFrom('#slidecontainer input');\n      assert.notEqual(before, after);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should uncheck option that is currently checked","suites":["WebDriver","#uncheckOption"],"updatePoint":{"line":830,"column":55,"index":34520},"line":830,"code":"    it('should uncheck option that is currently checked', async () => {\n      await wd.amOnPage('/info');\n      await wd.uncheckOption('interesting');\n      await wd.dontSeeCheckboxIsChecked('interesting');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should NOT uncheck option that is NOT currently checked","suites":["WebDriver","#uncheckOption"],"updatePoint":{"line":835,"column":63,"index":34743},"line":835,"code":"    it('should NOT uncheck option that is NOT currently checked', async () => {\n      await wd.amOnPage('/info');\n      await wd.uncheckOption('interesting'); // Unchecking again should not affect the current 'unchecked' status\n\n      await wd.uncheckOption('interesting');\n      await wd.dontSeeCheckboxIsChecked('interesting');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should open main page of configured site, open a popup, switch to main page, then switch to popup, close popup, and go back to main page","suites":["WebDriver","allow back and forth between handles: #grabAllWindowHandles #grabCurrentWindowHandle #switchToWindow"],"updatePoint":{"line":844,"column":144,"index":35291},"line":844,"code":"    it('should open main page of configured site, open a popup, switch to main page, then switch to popup, close popup, and go back to main page', async () => {\n      await wd.amOnPage('/');\n      const handleBeforePopup = await wd.grabCurrentWindowHandle();\n      const urlBeforePopup = await wd.grabCurrentUrl();\n      const allHandlesBeforePopup = await wd.grabAllWindowHandles();\n      allHandlesBeforePopup.length.should.eql(1);\n      await wd.executeScript(() => {\n        window.open('https://www.w3schools.com/', 'new window', 'toolbar=yes,scrollbars=yes,resizable=yes,width=400,height=400');\n      });\n      const allHandlesAfterPopup = await wd.grabAllWindowHandles();\n      allHandlesAfterPopup.length.should.eql(2);\n      await wd.switchToWindow(allHandlesAfterPopup[1]);\n      const urlAfterPopup = await wd.grabCurrentUrl();\n      urlAfterPopup.should.eql('https://www.w3schools.com/');\n      handleBeforePopup.should.eql(allHandlesAfterPopup[0]);\n      await wd.switchToWindow(handleBeforePopup);\n      const currentURL = await wd.grabCurrentUrl();\n      currentURL.should.eql(urlBeforePopup);\n      await wd.switchToWindow(allHandlesAfterPopup[1]);\n      const urlAfterSwitchBack = await wd.grabCurrentUrl();\n      urlAfterSwitchBack.should.eql('https://www.w3schools.com/');\n      await wd.closeCurrentTab();\n      const allHandlesAfterPopupClosed = await wd.grabAllWindowHandles();\n      allHandlesAfterPopupClosed.length.should.eql(1);\n      const currentWindowHandle = await wd.grabCurrentWindowHandle();\n      currentWindowHandle.should.eql(handleBeforePopup);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for clickable","suites":["WebDriver","#waitForClickable"],"updatePoint":{"line":873,"column":33,"index":36816},"line":873,"code":"    it('should wait for clickable', async () => {\n      await wd.amOnPage('/form/wait_for_clickable');\n      await wd.waitForClickable({\n        css: 'input#text'\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should wait for clickable by XPath","suites":["WebDriver","#waitForClickable"],"updatePoint":{"line":879,"column":42,"index":37006},"line":879,"code":"    it('should wait for clickable by XPath', async () => {\n      await wd.amOnPage('/form/wait_for_clickable');\n      await wd.waitForClickable({\n        xpath: './/input[@id=\"text\"]'\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should fail for disabled element","suites":["WebDriver","#waitForClickable"],"updatePoint":{"line":885,"column":40,"index":37206},"line":885,"code":"    it('should fail for disabled element', async () => {\n      await wd.amOnPage('/form/wait_for_clickable');\n      await wd.waitForClickable({\n        css: '#button'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element #button still not clickable after 0.1 sec');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should fail for disabled element by XPath","suites":["WebDriver","#waitForClickable"],"updatePoint":{"line":895,"column":49,"index":37636},"line":895,"code":"    it('should fail for disabled element by XPath', async () => {\n      await wd.amOnPage('/form/wait_for_clickable');\n      await wd.waitForClickable({\n        xpath: './/button[@id=\"button\"]'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element .//button[@id=\"button\"] still not clickable after 0.1 sec');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should fail for element not in viewport by top","suites":["WebDriver","#waitForClickable"],"updatePoint":{"line":905,"column":54,"index":38105},"line":905,"code":"    it('should fail for element not in viewport by top', async () => {\n      await wd.amOnPage('/form/wait_for_clickable');\n      await wd.waitForClickable({\n        css: '#notInViewportTop'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element #notInViewportTop still not clickable after 0.1 sec');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should fail for element not in viewport by bottom","suites":["WebDriver","#waitForClickable"],"updatePoint":{"line":915,"column":57,"index":38563},"line":915,"code":"    it('should fail for element not in viewport by bottom', async () => {\n      await wd.amOnPage('/form/wait_for_clickable');\n      await wd.waitForClickable({\n        css: '#notInViewportBottom'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element #notInViewportBottom still not clickable after 0.1 sec');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should fail for element not in viewport by left","suites":["WebDriver","#waitForClickable"],"updatePoint":{"line":925,"column":55,"index":39025},"line":925,"code":"    it('should fail for element not in viewport by left', async () => {\n      await wd.amOnPage('/form/wait_for_clickable');\n      await wd.waitForClickable({\n        css: '#notInViewportLeft'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element #notInViewportLeft still not clickable after 0.1 sec');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should fail for element not in viewport by right","suites":["WebDriver","#waitForClickable"],"updatePoint":{"line":935,"column":56,"index":39484},"line":935,"code":"    it('should fail for element not in viewport by right', async () => {\n      await wd.amOnPage('/form/wait_for_clickable');\n      await wd.waitForClickable({\n        css: '#notInViewportRight'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element #notInViewportRight still not clickable after 0.1 sec');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should fail for overlapping element","suites":["WebDriver","#waitForClickable"],"updatePoint":{"line":945,"column":43,"index":39932},"line":945,"code":"    it('should fail for overlapping element', async () => {\n      await wd.amOnPage('/form/wait_for_clickable');\n      await wd.waitForClickable({\n        css: '#div2_button'\n      }, 0.1);\n      await wd.waitForClickable({\n        css: '#div1_button'\n      }, 0.1).then(isClickable => {\n        if (isClickable) throw new Error('Element is clickable, but must be unclickable');\n      }).catch(e => {\n        e.message.should.include('element #div1_button still not clickable after 0.1 sec');\n      });\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should set the geoLocation","suites":["WebDriver","GeoLocation"],"updatePoint":{"line":960,"column":34,"index":40474},"line":960,"code":"    it('should set the geoLocation', async () => {\n      await wd.setGeoLocation(37.4043, -122.0748);\n      const geoLocation = await wd.grabGeoLocation();\n      assert.equal(geoLocation.latitude, 37.4043, 'The latitude is not properly set');\n      assert.equal(geoLocation.longitude, -122.0748, 'The longitude is not properly set');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should get the element size","suites":["WebDriver","#grabElementBoundingRect"],"updatePoint":{"line":968,"column":35,"index":40870},"line":968,"code":"    it('should get the element size', async () => {\n      await wd.amOnPage('/form/hidden');\n      const size = await wd.grabElementBoundingRect('input[type=submit]');\n      expect(size.x).is.greaterThan(0);\n      expect(size.y).is.greaterThan(0);\n      expect(size.width).is.greaterThan(0);\n      expect(size.height).is.greaterThan(0);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should get the element width","suites":["WebDriver","#grabElementBoundingRect"],"updatePoint":{"line":976,"column":36,"index":41216},"line":976,"code":"    it('should get the element width', async () => {\n      await wd.amOnPage('/form/hidden');\n      const width = await wd.grabElementBoundingRect('input[type=submit]', 'width');\n      expect(width).is.greaterThan(0);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should get the element height","suites":["WebDriver","#grabElementBoundingRect"],"updatePoint":{"line":981,"column":37,"index":41443},"line":981,"code":"    it('should get the element height', async () => {\n      await wd.amOnPage('/form/hidden');\n      const height = await wd.grabElementBoundingRect('input[type=submit]', 'height');\n      expect(height).is.greaterThan(0);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should scroll element into viewport","suites":["WebDriver","#scrollIntoView"],"updatePoint":{"line":988,"column":43,"index":41723},"line":988,"code":"    it('should scroll element into viewport', async () => {\n      await wd.amOnPage('/form/scroll_into_view');\n      const element = await wd.browser.$('#notInViewportByDefault');\n      expect(await element.isDisplayedInViewport()).to.be.false;\n      await wd.scrollIntoView('#notInViewportByDefault');\n      expect(await element.isDisplayedInViewport()).to.be.true;\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should return title","suites":["WebDriver","#useWebDriverTo"],"updatePoint":{"line":997,"column":27,"index":42126},"line":997,"code":"    it('should return title', async () => {\n      await wd.amOnPage('/');\n      const title = await wd.useWebDriverTo('test', async ({\n        browser\n      }) => {\n        return browser.getTitle();\n      });\n      assert.equal('TestEd Beta 2.0', title);\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should be authenticated","suites":["WebDriver - Basic Authentication","open page : #amOnPage"],"updatePoint":{"line":1047,"column":31,"index":43336},"line":1047,"code":"    it('should be authenticated', async () => {\n      await wd.amOnPage('/basic_auth');\n      await wd.see('You entered admin as your password.');\n    });","file":"helper/WebDriver_test.js","skipped":false,"dir":"test"},{"name":"should create a new post","suites":["ApiDataFactory","create and cleanup records"],"updatePoint":{"line":47,"column":32,"index":1071},"line":47,"code":"    it('should create a new post', async () => {\n      await I.have('post');\n      const resp = await I.restHelper.sendGetRequest('/posts');\n      resp.data.length.should.eql(2);\n    });","file":"rest/ApiDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should create a new post with predefined field","suites":["ApiDataFactory","create and cleanup records"],"updatePoint":{"line":52,"column":54,"index":1280},"line":52,"code":"    it('should create a new post with predefined field', async () => {\n      await I.have('post', {\n        author: 'Tapac'\n      });\n      let resp = await I.restHelper.sendGetRequest('/posts/1');\n      resp.data.author.should.eql('davert');\n      resp = await I.restHelper.sendGetRequest('/posts/2');\n      resp.data.author.should.eql('Tapac');\n    });","file":"rest/ApiDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should obtain id by function","suites":["ApiDataFactory","create and cleanup records"],"updatePoint":{"line":61,"column":36,"index":1617},"line":61,"code":"    it('should obtain id by function', async () => {\n      const I = new ApiDataFactory({\n        endpoint: api_url,\n        returnId: true,\n        factories: {\n          post: {\n            factory: path.join(__dirname, '/../data/rest/posts_factory.js'),\n            uri: '/posts',\n            fetchId: () => 'someId'\n          }\n        }\n      });\n      const id = await I.have('post');\n      id.should.eql('someId');\n    });","file":"rest/ApiDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should update request with onRequest","suites":["ApiDataFactory","create and cleanup records"],"updatePoint":{"line":76,"column":44,"index":2055},"line":76,"code":"    it('should update request with onRequest', async () => {\n      const I = new ApiDataFactory({\n        endpoint: api_url,\n        onRequest: request => request.data.author = 'Vasya',\n        factories: {\n          post: {\n            factory: path.join(__dirname, '/../data/rest/posts_factory.js'),\n            uri: '/posts'\n          }\n        }\n      });\n      const post = await I.have('post');\n      post.author.should.eql('Vasya');\n    });","file":"rest/ApiDataFactory_test.js","skipped":false,"dir":"test"},{"name":"can use functions to set factories","suites":["ApiDataFactory","create and cleanup records"],"updatePoint":{"line":90,"column":42,"index":2501},"line":90,"code":"    it('can use functions to set factories', async () => {\n      const I = new ApiDataFactory({\n        endpoint: api_url,\n        factories: {\n          post: {\n            factory: path.join(__dirname, '/../data/rest/posts_factory.js'),\n            create: () => ({\n              url: '/posts',\n              method: 'post',\n              data: {\n                author: 'Yorik',\n                title: 'xxx',\n                body: 'yyy'\n              }\n            }),\n            delete: id => ({\n              url: `/posts/${id}`,\n              method: 'delete'\n            })\n          }\n        }\n      });\n      const post = await I.have('post');\n      post.author.should.eql('Yorik');\n    });","file":"rest/ApiDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should cleanup created data","suites":["ApiDataFactory","create and cleanup records"],"updatePoint":{"line":115,"column":35,"index":3196},"line":115,"code":"    it('should cleanup created data', async () => {\n      await I.have('post', {\n        author: 'Tapac'\n      });\n      let resp = await I.restHelper.sendGetRequest('/posts');\n\n      for (const post of resp.data) {\n        if (post.author === 'Tapac') {\n          post.author.should.eql('Tapac');\n        }\n      }\n\n      await I._after();\n      resp = await I.restHelper.sendGetRequest('/posts/2');\n      resp.data.should.be.empty;\n      resp = await I.restHelper.sendGetRequest('/posts');\n      resp.data.length.should.eql(1);\n    });","file":"rest/ApiDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should create multiple posts and cleanup after","suites":["ApiDataFactory","create and cleanup records"],"updatePoint":{"line":133,"column":54,"index":3753},"line":133,"code":"    it('should create multiple posts and cleanup after', async () => {\n      let resp = await I.restHelper.sendGetRequest('/posts');\n      resp.data.length.should.eql(1);\n      await I.haveMultiple('post', 3);\n      await new Promise(done => setTimeout(done, 500));\n      resp = await I.restHelper.sendGetRequest('/posts');\n      resp.data.length.should.eql(4);\n      await I._after();\n      await new Promise(done => setTimeout(done, 500));\n      resp = await I.restHelper.sendGetRequest('/posts');\n      resp.data.length.should.eql(1);\n    });","file":"rest/ApiDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should create with different api","suites":["ApiDataFactory","create and cleanup records"],"updatePoint":{"line":145,"column":40,"index":4285},"line":145,"code":"    it('should create with different api', async () => {\n      I = new ApiDataFactory({\n        endpoint: api_url,\n        factories: {\n          post: {\n            factory: path.join(__dirname, '/../data/rest/posts_factory.js'),\n            uri: '/posts',\n            create: {\n              post: '/comments'\n            },\n            delete: {\n              delete: '/comments/{id}'\n            }\n          }\n        }\n      });\n      await I.have('post');\n      let resp = await I.restHelper.sendGetRequest('/posts');\n      resp.data.length.should.eql(1);\n      resp = await I.restHelper.sendGetRequest('/comments');\n      resp.data.length.should.eql(1);\n    });","file":"rest/ApiDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should not remove records if cleanup:false","suites":["ApiDataFactory","create and cleanup records"],"updatePoint":{"line":167,"column":50,"index":4964},"line":167,"code":"    it('should not remove records if cleanup:false', async () => {\n      I = new ApiDataFactory({\n        endpoint: api_url,\n        cleanup: false,\n        factories: {\n          post: {\n            factory: path.join(__dirname, '/../data/rest/posts_factory.js'),\n            uri: '/posts'\n          }\n        }\n      });\n      await I.have('post');\n      let resp = await I.restHelper.sendGetRequest('/posts');\n      resp.data.length.should.eql(2);\n      await I._after();\n      await new Promise(done => setTimeout(done, 500));\n      resp = await I.restHelper.sendGetRequest('/posts');\n      resp.data.length.should.eql(2);\n    });","file":"rest/ApiDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should send default headers","suites":["ApiDataFactory","create and cleanup records"],"updatePoint":{"line":186,"column":35,"index":5584},"line":186,"code":"    it('should send default headers', async () => {\n      I = new ApiDataFactory({\n        endpoint: api_url,\n        REST: {\n          defaultHeaders: {\n            auth: '111'\n          }\n        },\n        factories: {\n          post: {\n            factory: path.join(__dirname, '/../data/rest/posts_factory.js'),\n            create: {\n              post: '/headers'\n            }\n          }\n        }\n      });\n      const resp = await I.have('post');\n      resp.should.have.property('authorization');\n      resp.should.have.property('auth');\n      resp.auth.should.eql('111');\n    });","file":"rest/ApiDataFactory_test.js","skipped":false,"dir":"test"},{"name":"should send GET requests","suites":["REST","basic requests"],"updatePoint":{"line":44,"column":32,"index":947},"line":44,"code":"    it('should send GET requests', async () => {\n      const response = await I.sendGetRequest('/user');\n      response.data.name.should.eql('davert');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should send PATCH requests: payload format = json","suites":["REST","basic requests"],"updatePoint":{"line":48,"column":57,"index":1132},"line":48,"code":"    it('should send PATCH requests: payload format = json', async () => {\n      const response = await I.sendPatchRequest('/user', {\n        email: 'user@user.com'\n      });\n      response.data.email.should.eql('user@user.com');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should send PATCH requests: payload format = form urlencoded","suites":["REST","basic requests"],"updatePoint":{"line":54,"column":68,"index":1380},"line":54,"code":"    it('should send PATCH requests: payload format = form urlencoded', async () => {\n      const response = await I.sendPatchRequest('/user', 'email=user@user.com');\n      response.data.email.should.eql('user@user.com');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should send POST requests: payload format = json","suites":["REST","basic requests"],"updatePoint":{"line":58,"column":56,"index":1597},"line":58,"code":"    it('should send POST requests: payload format = json', async () => {\n      const response = await I.sendPostRequest('/user', {\n        name: 'john'\n      });\n      response.data.name.should.eql('john');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should send POST requests: payload format = form urlencoded","suites":["REST","basic requests"],"updatePoint":{"line":64,"column":67,"index":1823},"line":64,"code":"    it('should send POST requests: payload format = form urlencoded', async () => {\n      const response = await I.sendPostRequest('/user', 'name=john');\n      response.data.name.should.eql('john');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should send PUT requests: payload format = json","suites":["REST","basic requests"],"updatePoint":{"line":68,"column":55,"index":2018},"line":68,"code":"    it('should send PUT requests: payload format = json', async () => {\n      const putResponse = await I.sendPutRequest('/posts/1', {\n        author: 'john'\n      });\n      putResponse.data.author.should.eql('john');\n      const getResponse = await I.sendGetRequest('/posts/1');\n      getResponse.data.author.should.eql('john');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should send PUT requests: payload format = form urlencoded","suites":["REST","basic requests"],"updatePoint":{"line":76,"column":66,"index":2367},"line":76,"code":"    it('should send PUT requests: payload format = form urlencoded', async () => {\n      const putResponse = await I.sendPutRequest('/posts/1', 'author=john');\n      putResponse.data.author.should.eql('john');\n      const getResponse = await I.sendGetRequest('/posts/1');\n      getResponse.data.author.should.eql('john');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should send DELETE requests","suites":["REST","basic requests"],"updatePoint":{"line":82,"column":35,"index":2666},"line":82,"code":"    it('should send DELETE requests', async () => {\n      await I.sendDeleteRequest('/posts/1');\n      const getResponse = await I.sendGetRequest('/posts');\n      getResponse.data.should.be.empty;\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should update request with onRequest","suites":["REST","basic requests"],"updatePoint":{"line":87,"column":44,"index":2880},"line":87,"code":"    it('should update request with onRequest', async () => {\n      I.config.onRequest = request => request.data = {\n        name: 'Vasya'\n      };\n\n      const response = await I.sendPostRequest('/user', {\n        name: 'john'\n      });\n      response.data.name.should.eql('Vasya');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should set timeout for the request","suites":["REST","basic requests"],"updatePoint":{"line":97,"column":42,"index":3169},"line":97,"code":"    it('should set timeout for the request', async () => {\n      await I.setRequestTimeout(2000);\n      const response = await I.sendGetRequest('/posts');\n      response.config.timeout.should.eql(2000);\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should be able to parse JSON responses","suites":["REST","JSONResponse integration"],"updatePoint":{"line":120,"column":46,"index":3785},"line":120,"code":"    it('should be able to parse JSON responses', async () => {\n      await I.sendGetRequest('https://jsonplaceholder.typicode.com/comments/1');\n      await jsonResponse.seeResponseCodeIsSuccessful();\n      await jsonResponse.seeResponseContainsKeys(['id', 'name', 'email']);\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should send request headers","suites":["REST","headers"],"updatePoint":{"line":127,"column":35,"index":4093},"line":127,"code":"    it('should send request headers', async () => {\n      const response = await I.sendGetRequest('/user', {\n        'Content-Type': 'application/json'\n      });\n      response.headers.should.have.property('content-type');\n      response.headers['content-type'].should.include('application/json');\n      response.config.headers.should.have.property('X-Test');\n      response.config.headers['X-Test'].should.eql('test');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should set request headers","suites":["REST","headers"],"updatePoint":{"line":136,"column":34,"index":4520},"line":136,"code":"    it('should set request headers', async () => {\n      const response = await I.sendGetRequest('/user', {\n        'Content-Type': 'application/json',\n        HTTP_X_REQUESTED_WITH: 'xmlhttprequest'\n      });\n      response.config.headers.should.have.property('Content-Type');\n      response.config.headers['Content-Type'].should.eql('application/json');\n      response.config.headers.should.have.property('X-Test');\n      response.config.headers['X-Test'].should.eql('test');\n      response.config.headers.should.have.property('HTTP_X_REQUESTED_WITH');\n      response.config.headers.HTTP_X_REQUESTED_WITH.should.eql('xmlhttprequest');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should set Content-Type header if data is string and Content-Type is omitted","suites":["REST","headers"],"updatePoint":{"line":148,"column":84,"index":5215},"line":148,"code":"    it('should set Content-Type header if data is string and Content-Type is omitted', async () => {\n      const response = await I.sendPostRequest('/user', 'string of data');\n      response.config.headers.should.have.property('Content-Type');\n      response.config.headers['Content-Type'].should.eql('application/x-www-form-urlencoded');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should respect any passsed in Content-Type header","suites":["REST","headers"],"updatePoint":{"line":153,"column":57,"index":5535},"line":153,"code":"    it('should respect any passsed in Content-Type header', async () => {\n      const response = await I.sendPostRequest('/user', 'bad json data', {\n        'Content-Type': 'application/json'\n      });\n      response.config.headers.should.have.property('Content-Type');\n      response.config.headers['Content-Type'].should.eql('application/json');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should set headers for all requests","suites":["REST","headers"],"updatePoint":{"line":160,"column":43,"index":5877},"line":160,"code":"    it('should set headers for all requests', async () => {\n      I.haveRequestHeaders({\n        'XY1-Test': 'xy1test'\n      }); // 1st request\n\n      {\n        const response = await I.sendGetRequest('/user');\n        response.config.headers.should.have.property('XY1-Test');\n        response.config.headers['XY1-Test'].should.eql('xy1test');\n        response.config.headers.should.have.property('X-Test');\n        response.config.headers['X-Test'].should.eql('test');\n      } // 2nd request\n\n      {\n        const response = await I.sendPostRequest('/user', {\n          name: 'john'\n        }, {\n          'XY2-Test': 'xy2test'\n        });\n        response.config.headers.should.have.property('XY1-Test');\n        response.config.headers['XY1-Test'].should.eql('xy1test');\n        response.config.headers.should.have.property('XY2-Test');\n        response.config.headers['XY2-Test'].should.include('xy2test');\n        response.config.headers.should.have.property('X-Test');\n        response.config.headers['X-Test'].should.eql('test');\n      }\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should set headers for all requests multiple times","suites":["REST","headers"],"updatePoint":{"line":187,"column":58,"index":6946},"line":187,"code":"    it('should set headers for all requests multiple times', async () => {\n      I.haveRequestHeaders({\n        'XY1-Test': 'xy1-first'\n      });\n      I.haveRequestHeaders({\n        'XY1-Test': 'xy1-second'\n      });\n      I.haveRequestHeaders({\n        'XY2-Test': 'xy2'\n      });\n      {\n        const response = await I.sendGetRequest('/user');\n        response.config.headers.should.have.property('XY1-Test');\n        response.config.headers['XY1-Test'].should.eql('xy1-second');\n        response.config.headers.should.have.property('XY2-Test');\n        response.config.headers['XY2-Test'].should.eql('xy2');\n        response.config.headers.should.have.property('X-Test');\n        response.config.headers['X-Test'].should.eql('test');\n      }\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should override the header set for all requests","suites":["REST","headers"],"updatePoint":{"line":207,"column":55,"index":7699},"line":207,"code":"    it('should override the header set for all requests', async () => {\n      I.haveRequestHeaders({\n        'XY-Test': 'first'\n      });\n      {\n        const response = await I.sendGetRequest('/user', {\n          'XY-Test': 'value_custom'\n        });\n        response.config.headers.should.have.property('XY-Test');\n        response.config.headers['XY-Test'].should.eql('value_custom');\n        response.config.headers.should.have.property('X-Test');\n        response.config.headers['X-Test'].should.eql('test');\n      }\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should set Bearer authorization","suites":["REST","headers"],"updatePoint":{"line":221,"column":39,"index":8214},"line":221,"code":"    it('should set Bearer authorization', async () => {\n      I.amBearerAuthenticated('token');\n      const response = await I.sendGetRequest('/user');\n      response.config.headers.should.have.property('Authorization');\n      response.config.headers.Authorization.should.eql('Bearer token');\n      response.config.headers.should.have.property('X-Test');\n      response.config.headers['X-Test'].should.eql('test');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should set Bearer authorization multiple times","suites":["REST","headers"],"updatePoint":{"line":229,"column":54,"index":8652},"line":229,"code":"    it('should set Bearer authorization multiple times', async () => {\n      I.amBearerAuthenticated('token1');\n      I.amBearerAuthenticated('token2');\n      const response = await I.sendGetRequest('/user');\n      response.config.headers.should.have.property('Authorization');\n      response.config.headers.Authorization.should.eql('Bearer token2');\n      response.config.headers.should.have.property('X-Test');\n      response.config.headers['X-Test'].should.eql('test');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should override Bearer authorization","suites":["REST","headers"],"updatePoint":{"line":238,"column":44,"index":9123},"line":238,"code":"    it('should override Bearer authorization', async () => {\n      I.amBearerAuthenticated('token');\n      const response = await I.sendGetRequest('/user', {\n        Authorization: 'Bearer token_custom'\n      });\n      response.config.headers.should.have.property('Authorization');\n      response.config.headers.Authorization.should.eql('Bearer token_custom');\n      response.config.headers.should.have.property('X-Test');\n      response.config.headers['X-Test'].should.eql('test');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should not prepend base url, when url is absolute","suites":["REST","_url autocompletion"],"updatePoint":{"line":250,"column":57,"index":9675},"line":250,"code":"    it('should not prepend base url, when url is absolute', () => {\n      I._url('https://bla.bla/blabla').should.eql('https://bla.bla/blabla');\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should prepend base url, when url is not absolute","suites":["REST","_url autocompletion"],"updatePoint":{"line":253,"column":57,"index":9828},"line":253,"code":"    it('should prepend base url, when url is not absolute', () => {\n      I._url('/blabla').should.eql(`${api_url}/blabla`);\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should prepend base url, when url is not absolute, and \"http\" in request","suites":["REST","_url autocompletion"],"updatePoint":{"line":256,"column":80,"index":9984},"line":256,"code":"    it('should prepend base url, when url is not absolute, and \"http\" in request', () => {\n      I._url('/blabla&p=http://bla.bla').should.eql(`${api_url}/blabla&p=http://bla.bla`);\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should show error when file size exceedes the permit","suites":["REST - Form upload","upload file"],"updatePoint":{"line":273,"column":60,"index":10467},"line":273,"code":"    it('should show error when file size exceedes the permit', async () => {\n      const form = new FormData();\n      form.append('file', fs.createReadStream(testFile));\n\n      try {\n        await I.sendPostRequest('upload', form, { ...form.getHeaders()\n        });\n      } catch (error) {\n        error.message.should.eql('Request body larger than maxBodyLength limit');\n      }\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should not show error when file size doesnt exceedes the permit","suites":["REST - Form upload","upload file"],"updatePoint":{"line":284,"column":71,"index":10866},"line":284,"code":"    it('should not show error when file size doesnt exceedes the permit', async () => {\n      const form = new FormData();\n      form.append('file', fs.createReadStream(testFile));\n\n      try {\n        const response = await I.sendPostRequest('upload', form, { ...form.getHeaders()\n        });\n        response.data.should.include('File Uploaded!');\n      } catch (error) {\n        console.log(error.message);\n      }\n    });","file":"rest/REST_test.js","skipped":false,"dir":"test"},{"name":"should correct save info about page object for xml file","suites":["CodeceptJS Allure Plugin"],"updatePoint":{"line":46,"column":61,"index":1462},"line":46,"code":"  it('should correct save info about page object for xml file', done => {\n    exec(codecept_run_config('codecept.po.json'), err => {\n      const files = fs.readdirSync(path.join(codecept_dir, 'output/pageobject'));\n      fs.readFile(path.join(codecept_dir, 'output/pageobject', files[0]), (err, data) => {\n        parser.parseString(data, (err, result) => {\n          const testCase = result['ns2:test-suite']['test-cases'][0]['test-case'][0];\n          const firstMetaStep = testCase.steps[0].step[0];\n          expect(firstMetaStep.name[0]).toEqual('I: openDir \"aaa\"');\n          const nestedMetaStep = firstMetaStep.steps[0].step[0];\n          expect(nestedMetaStep.name[0]).toEqual('I am in path \".\"');\n          expect(testCase.steps[0].step[0].steps.length).toEqual(1);\n          const secondMetaStep = testCase.steps[0].step[1];\n          expect(secondMetaStep.name[0]).toEqual('I see file \"allure.conf.js\"');\n        });\n      });\n      expect(err).toBeFalsy();\n      expect(files.length).toEqual(1);\n      expect(files[0].match(/\\.xml$/)).toBeTruthy();\n      done();\n    });\n  });","file":"runner/allure_test.js","skipped":false,"dir":"test"},{"name":"should enable allure reports","suites":["CodeceptJS Allure Plugin"],"updatePoint":{"line":67,"column":34,"index":2525},"line":67,"code":"  it('should enable allure reports', done => {\n    exec(codecept_run_config('allure.conf.js'), err => {\n      const files = fs.readdirSync(path.join(codecept_dir, 'output/success'));\n      expect(err).toBeFalsy();\n      expect(files.length).toEqual(1);\n      expect(files[0].match(/\\.xml$/)).toBeTruthy();\n      done();\n    });\n  });","file":"runner/allure_test.js","skipped":false,"dir":"test"},{"name":"should create xml file when assert message has ansi symbols","suites":["CodeceptJS Allure Plugin"],"updatePoint":{"line":76,"column":65,"index":2890},"line":76,"code":"  it('should create xml file when assert message has ansi symbols', done => {\n    exec(codecept_run_config('failed_ansi.conf.js'), err => {\n      expect(err).toBeTruthy();\n      const files = fs.readdirSync(path.join(codecept_dir, 'output/ansi'));\n      expect(files[0].match(/\\.xml$/)).toBeTruthy();\n      expect(files.length).toEqual(1);\n      done();\n    });\n  });","file":"runner/allure_test.js","skipped":false,"dir":"test"},{"name":"should report skipped features","suites":["CodeceptJS Allure Plugin"],"updatePoint":{"line":85,"column":36,"index":3229},"line":85,"code":"  it('should report skipped features', done => {\n    exec(codecept_run_config('skipped_feature.conf.js'), (err, stdout) => {\n      expect(stdout).toContain('OK  | 0 passed, 2 skipped');\n      const files = fs.readdirSync(path.join(codecept_dir, 'output/skipped'));\n      const reports = files.map(testResultPath => {\n        expect(testResultPath.match(/\\.xml$/)).toBeTruthy();\n        return fs.readFileSync(path.join(codecept_dir, 'output/skipped', testResultPath), 'utf8');\n      }).join(' ');\n      expect(reports).toContain('Skipped due to \"skip\" on Feature.');\n      done();\n    });\n  });","file":"runner/allure_test.js","skipped":false,"dir":"test"},{"name":"should report skipped features","suites":["CodeceptJS Allure Plugin"],"updatePoint":{"line":97,"column":36,"index":3824},"line":97,"code":"  it('should report skipped features', done => {\n    exec(codecept_run_config('skipped_feature.conf.js'), (err, stdout) => {\n      stdout.should.include('OK  | 0 passed, 2 skipped');\n      const files = fs.readdirSync(path.join(codecept_dir, 'output/skipped'));\n      const reports = files.map(testResultPath => {\n        assert(testResultPath.match(/\\.xml$/), 'not a xml file');\n        return fs.readFileSync(path.join(codecept_dir, 'output/skipped', testResultPath), 'utf8');\n      }).join(' ');\n      reports.should.include('Skipped due to \"skip\" on Feature.');\n      done();\n    });\n  });","file":"runner/allure_test.js","skipped":false,"dir":"test"},{"name":"should report BeforeSuite errors when executing via run command","suites":["CodeceptJS Allure Plugin"],"updatePoint":{"line":109,"column":69,"index":4451},"line":109,"code":"  it('should report BeforeSuite errors when executing via run command', done => {\n    exec(codecept_run_config('before_suite_test_failed.conf.js'), (err, stdout) => {\n      expect(stdout).toContain('FAIL  | 0 passed, 1 failed');\n      const files = fs.readdirSync(path.join(codecept_dir, 'output/failed')); // join all reports together\n\n      const reports = files.map(testResultPath => {\n        expect(files[0].match(/\\.xml$/)).toBeTruthy();\n        return fs.readFileSync(path.join(codecept_dir, 'output/failed', testResultPath), 'utf8');\n      }).join(' ');\n      expect(reports).toContain('BeforeSuite of suite failing setup test suite: failed.');\n      expect(reports).toContain('the before suite setup failed');\n      expect(reports).toContain('Skipped due to failure in \\'before\\' hook');\n      done();\n    });\n  });","file":"runner/allure_test.js","skipped":false,"dir":"test"},{"name":"should report BeforeSuite errors when executing via run-workers command","suites":["CodeceptJS Allure Plugin"],"updatePoint":{"line":124,"column":77,"index":5284},"line":124,"code":"  it('should report BeforeSuite errors when executing via run-workers command', function (done) {\n    if (parseInt(process.version.match(/\\d+/), 10) < 12) {\n      this.skip();\n    }\n\n    exec(codecept_workers_config('before_suite_test_failed.conf.js'), (err, stdout) => {\n      stdout.should.include('FAIL  | 0 passed');\n      const files = fs.readdirSync(path.join(codecept_dir, 'output/failed'));\n      const reports = files.map(testResultPath => {\n        expect(testResultPath.match(/\\.xml$/)).toBeTruthy();\n        return fs.readFileSync(path.join(codecept_dir, 'output/failed', testResultPath), 'utf8');\n      }).join(' ');\n      expect(reports).toContain('BeforeSuite of suite failing setup test suite: failed.');\n      expect(reports).toContain('the before suite setup failed'); // the line below does not work in workers needs investigating https://github.com/Codeception/CodeceptJS/issues/2391\n      // expect(reports).toContain('Skipped due to failure in \\'before\\' hook');\n\n      done();\n    });\n  });","file":"runner/allure_test.js","skipped":false,"dir":"test"},{"name":"should run feature files","suites":["BDD Gherkin"],"updatePoint":{"line":17,"column":30,"index":486},"line":17,"code":"  it('should run feature files', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --steps --grep \"Checkout process\"', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include('Checkout process'); // feature\n\n      stdout.should.include('-- before checkout --');\n      stdout.should.include('-- after checkout --'); // stdout.should.include('In order to buy products'); // test name\n\n      stdout.should.include('Given I have product with $600 price');\n      stdout.should.include('And I have product with $1000 price');\n      stdout.should.include('Then I should see that total number of products is 2');\n      stdout.should.include('And my order amount is $1600');\n      stdout.should.not.include('I add item 600'); // 'Given' actor's non-gherkin step check\n\n      stdout.should.not.include('I see sum 1600'); // 'And' actor's non-gherkin step check\n\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should print substeps in debug mode","suites":["BDD Gherkin"],"updatePoint":{"line":37,"column":41,"index":1436},"line":37,"code":"  it('should print substeps in debug mode', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --debug --grep \"Checkout process\"', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include('Checkout process'); // feature\n      // stdout.should.include('In order to buy products'); // test name\n\n      stdout.should.include('Given I have product with $600 price');\n      stdout.should.include('I add item 600');\n      stdout.should.include('And I have product with $1000 price');\n      stdout.should.include('I add item 1000');\n      stdout.should.include('Then I should see that total number of products is 2');\n      stdout.should.include('I see num 2');\n      stdout.should.include('And my order amount is $1600');\n      stdout.should.include('I see sum 1600');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should print events in nodejs debug mode","suites":["BDD Gherkin"],"updatePoint":{"line":55,"column":46,"index":2289},"line":55,"code":"  it('should print events in nodejs debug mode', done => {\n    exec(`DEBUG=codeceptjs:* ${config_run_config('codecept.bdd.json')} --grep \"Checkout products\" --verbose`, (err, stdout, stderr) => {\n      //eslint-disable-line\n      stderr.should.include('Emitted | step.start (I add product \"Harry Potter\", 5)');\n      stdout.should.include('name            | category        | price');\n      stdout.should.include('Harry Potter    | Books           | 5');\n      stdout.should.include('iPhone 5        | Smartphones     | 1200 ');\n      stdout.should.include('Nuclear Bomb    | Weapons         | 100000');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should obfuscate secret substeps in debug mode","suites":["BDD Gherkin"],"updatePoint":{"line":67,"column":52,"index":2947},"line":67,"code":"  it('should obfuscate secret substeps in debug mode', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --debug --grep \"Secrets\"', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include('Given I login'); // feature\n\n      stdout.should.not.include('password');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should run feature with examples files","suites":["BDD Gherkin"],"updatePoint":{"line":77,"column":44,"index":3289},"line":77,"code":"  it('should run feature with examples files', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --steps --grep \"Checkout examples\"', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include(' order discount {\"price\":\"10\",\"total\":\"10.0\"}');\n      stdout.should.include(' Given I have product with price 10$ in my cart');\n      stdout.should.include(' order discount {\"price\":\"20\",\"total\":\"20.0\"}');\n      stdout.should.include(' Given I have product with price 20$ in my cart');\n      stdout.should.include(' order discount {\"price\":\"21\",\"total\":\"18.9\"}');\n      stdout.should.include(' Given I have product with price 21$ in my cart');\n      stdout.should.include(' order discount {\"price\":\"30\",\"total\":\"27.0\"}');\n      stdout.should.include(' Given I have product with price 30$ in my cart');\n      stdout.should.include(' order discount {\"price\":\"50\",\"total\":\"45.0\"}');\n      stdout.should.include(' Given I have product with price 50$ in my cart');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should run feature with table and examples files","suites":["BDD Gherkin"],"updatePoint":{"line":94,"column":54,"index":4338},"line":94,"code":"  it('should run feature with table and examples files', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --steps --grep \"Include Examples in dataTtable placeholder\"', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include('name            | Nuclear Bomb ');\n      stdout.should.include('price           | 20 ');\n      stdout.should.include('name            | iPhone 5 ');\n      stdout.should.include('price           | 10 ');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should run feature with tables","suites":["BDD Gherkin"],"updatePoint":{"line":105,"column":36,"index":4836},"line":105,"code":"  it('should run feature with tables', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --steps --grep \"Checkout products\"', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include('Given I have products in my cart');\n      stdout.should.include('name');\n      stdout.should.include('Harry Potter');\n      stdout.should.include('Smartphones');\n      stdout.should.include('100000');\n      stdout.should.include('Then my order amount is $101205');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should run feature with long strings","suites":["BDD Gherkin"],"updatePoint":{"line":118,"column":42,"index":5377},"line":118,"code":"  it('should run feature with long strings', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --steps --grep \"Checkout string\"', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include('Given I have product described as');\n      stdout.should.include('The goal of the product description is to provide the customer with enough information to compel them to want to buy the product immediately.');\n      stdout.should.include('Then my order amount is $582');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should run feature by file name","suites":["BDD Gherkin"],"updatePoint":{"line":128,"column":37,"index":5918},"line":128,"code":"  it('should run feature by file name', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --steps features/tables.feature', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include('Checkout product');\n      stdout.should.include('checkout 3 products');\n      stdout.should.not.include('Checkout string');\n      stdout.should.not.include('describe product');\n      stdout.should.not.include('Checkout process');\n      stdout.should.not.include('Checkout examples process');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should run feature by scenario name","suites":["BDD Gherkin"],"updatePoint":{"line":141,"column":41,"index":6482},"line":141,"code":"  it('should run feature by scenario name', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --grep \"checkout 3 products\" --steps', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include('Checkout product');\n      stdout.should.include('checkout 3 products');\n      stdout.should.not.include('Checkout string');\n      stdout.should.not.include('describe product');\n      stdout.should.not.include('Checkout process');\n      stdout.should.not.include('Checkout examples process');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should run feature by tag name","suites":["BDD Gherkin"],"updatePoint":{"line":154,"column":36,"index":7046},"line":154,"code":"  it('should run feature by tag name', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --grep \"@important\" --steps', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include('I have product with $600 price in my cart');\n      stdout.should.not.include('Checkout string');\n      stdout.should.not.include('describe product');\n      stdout.should.not.include('Checkout table');\n      stdout.should.not.include('Checkout examples process');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should run scenario by tag name","suites":["BDD Gherkin"],"updatePoint":{"line":166,"column":37,"index":7573},"line":166,"code":"  it('should run scenario by tag name', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --grep \"@very\" --steps', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include('I have product with $600 price in my cart');\n      stdout.should.not.include('Checkout string');\n      stdout.should.not.include('describe product');\n      stdout.should.not.include('Checkout table');\n      stdout.should.not.include('Checkout examples process');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should run scenario outline by tag","suites":["BDD Gherkin"],"updatePoint":{"line":178,"column":40,"index":8098},"line":178,"code":"  it('should run scenario outline by tag', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --grep \"@user\" --steps', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.not.include('0 passed');\n      stdout.should.include('I have product with price 10$');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should run scenario and scenario outline by tags","suites":["BDD Gherkin"],"updatePoint":{"line":187,"column":54,"index":8452},"line":187,"code":"  it('should run scenario and scenario outline by tags', done => {\n    exec(config_run_config('codecept.bdd.json') + ' --grep \"\\@user|\\@very\" --steps', (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.not.include('0 passed');\n      stdout.should.include('I have product with price 10$');\n      stdout.should.include('I have product with $600 price in my cart');\n      stdout.should.include('6 passed');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should show all available steps","suites":["BDD Gherkin"],"updatePoint":{"line":198,"column":37,"index":8912},"line":198,"code":"  it('should show all available steps', done => {\n    exec(`${runner} gherkin:steps --config ${codecept_dir}/codecept.bdd.json`, (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include('Gherkin');\n      stdout.should.include('/I have product with \\\\$(\\\\d+) price/');\n      stdout.should.include('step_definitions/my_steps.js:3:1');\n      stdout.should.include('step_definitions/my_steps.js:3:1');\n      stdout.should.include('I should see that total number of products is {int}');\n      stdout.should.include('I should see overall price is \"{float}\" $');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should generate snippets for missing steps","suites":["BDD Gherkin"],"updatePoint":{"line":211,"column":48,"index":9553},"line":211,"code":"  it('should generate snippets for missing steps', done => {\n    exec(`${runner} gherkin:snippets --dry-run --config ${codecept_dir}/codecept.dummy.bdd.json`, (err, stdout, stderr) => {\n      //eslint-disable-line\n      stdout.should.include(`Given('I open a browser on a site', () => {\n  // From \"support/dummy.feature\" {\"line\":4,\"column\":5}\n  throw new Error('Not implemented yet');\n});\n\nWhen('I click login button at {float}', () => {\n  // From \"support/dummy.feature\" {\"line\":5,\"column\":5}\n  throw new Error('Not implemented yet');\n});\n\nWhen('I enter username {string} and password {string}', () => {\n  // From \"support/dummy.feature\" {\"line\":6,\"column\":5}\n  throw new Error('Not implemented yet');\n});\n\nWhen('I submit {int} form', () => {\n  // From \"support/dummy.feature\" {\"line\":7,\"column\":5}\n  throw new Error('Not implemented yet');\n});\n\nThen('I should log in', () => {\n  // From \"support/dummy.feature\" {\"line\":8,\"column\":5}\n  throw new Error('Not implemented yet');\n});\n\nWhen(/^I define a step with an opening paren \\\\( only$/, () => {\n  // From \"support/dummy.feature\" {\"line\":9,\"column\":5}\n  throw new Error('Not implemented yet');\n});\n\nWhen(/^I define a step with a closing paren \\\\) only$/, () => {\n  // From \"support/dummy.feature\" {\"line\":10,\"column\":5}\n  throw new Error('Not implemented yet');\n});\n\nWhen(/^I define a step with a opening brace \\\\{ only$/, () => {\n  // From \"support/dummy.feature\" {\"line\":11,\"column\":5}\n  throw new Error('Not implemented yet');\n});\n\nWhen(/^I define a step with a closing brace \\\\} only$/, () => {\n  // From \"support/dummy.feature\" {\"line\":12,\"column\":5}\n  throw new Error('Not implemented yet');\n});\n\nWhen(/^I define a step with a slash http:\\\\/\\\\/example\\\\.com\\\\/foo$/, () => {\n  // From \"support/dummy.feature\" {\"line\":13,\"column\":5}\n  throw new Error('Not implemented yet');\n});\n\nWhen(/^I define a step with a \\\\( paren and an (\\\\d+) int$/, () => {\n  // From \"support/dummy.feature\" {\"line\":14,\"column\":5}\n  throw new Error('Not implemented yet');\n});\n\nWhen(/^I define a step with a \\\\( paren and a (\\\\d+\\\\.\\\\d+) float$/, () => {\n  // From \"support/dummy.feature\" {\"line\":15,\"column\":5}\n  throw new Error('Not implemented yet');\n});\n\nWhen(/^I define a step with a \\\\( paren and a \"(.*?)\" string$/, () => {\n  // From \"support/dummy.feature\" {\"line\":16,\"column\":5}\n  throw new Error('Not implemented yet');\n});`);\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should not generate duplicated steps","suites":["BDD Gherkin"],"updatePoint":{"line":282,"column":42,"index":11963},"line":282,"code":"  it('should not generate duplicated steps', done => {\n    exec(`${runner} gherkin:snippets --dry-run --config ${codecept_dir}/codecept.duplicate.bdd.json`, (err, stdout, stderr) => {\n      //eslint-disable-line\n      assert.equal(stdout.match(/I open a browser on a site/g).length, 1);\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bdd_test.js","skipped":false,"dir":"test"},{"name":"should skip tests that are skipped because of failure in before hook","suites":["Failure in before"],"updatePoint":{"line":10,"column":74,"index":440},"line":10,"code":"  it('should skip tests that are skipped because of failure in before hook', done => {\n    exec(`${codecept_run}`, (err, stdout) => {\n      stdout.should.include('✔ First test will be passed');\n      stdout.should.include('S Third test will be skipped @grep');\n      stdout.should.include('S Fourth test will be skipped');\n      stdout.should.include('1 passed, 1 failed, 2 skipped');\n      err.code.should.eql(1);\n      done();\n    });\n  });","file":"runner/before_failure_test.js","skipped":false,"dir":"test"},{"name":"should skip tests correctly with grep options","suites":["Failure in before"],"updatePoint":{"line":20,"column":51,"index":860},"line":20,"code":"  it('should skip tests correctly with grep options', done => {\n    exec(`${codecept_run} --grep @grep`, (err, stdout) => {\n      stdout.should.include('✔ First test will be passed');\n      stdout.should.include('S Third test will be skipped @grep');\n      stdout.should.include('1 passed, 1 failed, 1 skipped');\n      err.code.should.eql(1);\n      done();\n    });\n  });","file":"runner/before_failure_test.js","skipped":false,"dir":"test"},{"name":"should trigger skipped events","suites":["Failure in before"],"updatePoint":{"line":29,"column":35,"index":1215},"line":29,"code":"  it('should trigger skipped events', done => {\n    exec(`DEBUG=codeceptjs:* ${codecept_run} --verbose`, (err, stdout, stderr) => {\n      err.code.should.eql(1);\n      stderr.should.include('Emitted | test.skipped');\n      done();\n    });\n  });","file":"runner/before_failure_test.js","skipped":false,"dir":"test"},{"name":"should run bootstrap","suites":["CodeceptJS Bootstrap and Teardown"],"updatePoint":{"line":17,"column":26,"index":667},"line":17,"code":"  it('should run bootstrap', done => {\n    exec(codecept_run_config('bootstrap.conf.js', '@important'), (err, stdout) => {\n      stdout.should.include('Filesystem'); // feature\n\n      stdout.should.include('I am bootstrap');\n      stdout.should.include('I am teardown');\n      const lines = stdout.split('\\n');\n      const bootstrapIndex = lines.findIndex(l => l === 'I am bootstrap');\n      const testIndex = lines.findIndex(l => l.indexOf('Filesystem @main') === 0);\n      const teardownIndex = lines.findIndex(l => l === 'I am teardown');\n      assert(testIndex > bootstrapIndex, `${testIndex} (test) > ${bootstrapIndex} (bootstrap)`);\n      assert(teardownIndex > testIndex, `${teardownIndex} (teardown) > ${testIndex} (test)`);\n      assert(!err);\n      done();\n    });\n  });","file":"runner/bootstrap_test.js","skipped":false,"dir":"test"},{"name":"should run async bootstrap","suites":["CodeceptJS Bootstrap and Teardown"],"updatePoint":{"line":33,"column":32,"index":1454},"line":33,"code":"  it('should run async bootstrap', done => {\n    exec(codecept_run_config('bootstrap.async.conf.js', '@important'), (err, stdout) => {\n      stdout.should.include('Filesystem'); // feature\n\n      stdout.should.include('I am bootstrap');\n      stdout.should.include('I am teardown');\n      const lines = stdout.split('\\n');\n      const bootstrap0Index = lines.indexOf('I am 0 bootstrap');\n      const teardown0Index = lines.indexOf('I am 0 teardown');\n      const bootstrapIndex = lines.findIndex(l => l === 'I am bootstrap');\n      const testIndex = lines.findIndex(l => l.indexOf('Filesystem @main') === 0);\n      const teardownIndex = lines.findIndex(l => l === 'I am teardown');\n      assert(bootstrap0Index < bootstrapIndex, `${bootstrap0Index} < ${bootstrapIndex} (bootstrap)`);\n      assert(teardown0Index < teardownIndex, `${teardown0Index} < ${teardownIndex} (teardown)`);\n      assert(testIndex > bootstrapIndex, `${testIndex} (test) > ${bootstrapIndex} (bootstrap)`);\n      assert(teardownIndex > testIndex, `${teardownIndex} (teardown) > ${testIndex} (test)`);\n      assert(!err);\n      done();\n    });\n  }); // with teaedown - failed tests","file":"runner/bootstrap_test.js","skipped":false,"dir":"test"},{"name":"should fail with code 1 when test failed and async bootstrap/teardown function with args","suites":["CodeceptJS Bootstrap and Teardown"],"updatePoint":{"line":54,"column":94,"index":2669},"line":54,"code":"  it('should fail with code 1 when test failed and async bootstrap/teardown function with args', done => {\n    exec(config_run_override('bootstrap.async.conf.js', {\n      tests: './failed_test.js'\n    }), (err, stdout) => {\n      assert(err);\n      assert.equal(err.code, 1);\n      stdout.should.include('Filesystem'); // feature\n\n      stdout.should.include('I am bootstrap');\n      stdout.should.include('✖ check current dir @slow @important');\n      stdout.should.include('I am teardown');\n      done();\n    });\n  });","file":"runner/bootstrap_test.js","skipped":false,"dir":"test"},{"name":"should fail with code 1 when test failed and async bootstrap/teardown function without args","suites":["CodeceptJS Bootstrap and Teardown"],"updatePoint":{"line":68,"column":97,"index":3193},"line":68,"code":"  it('should fail with code 1 when test failed and async bootstrap/teardown function without args', done => {\n    exec(config_run_override('bootstrap.async.conf.js', {\n      tests: './failed_test.js'\n    }), (err, stdout) => {\n      assert(err);\n      assert.equal(err.code, 1);\n      stdout.should.include('Filesystem'); // feature\n\n      stdout.should.include('I am bootstrap');\n      stdout.should.include('✖ check current dir @slow @important');\n      stdout.should.include('I am teardown');\n      done();\n    });\n  }); // with teardown and fail bootstrap - teardown not call","file":"runner/bootstrap_test.js","skipped":false,"dir":"test"},{"name":"should fail with code 1 when async bootstrap failed and not call teardown","suites":["CodeceptJS Bootstrap and Teardown"],"updatePoint":{"line":83,"column":79,"index":3756},"line":83,"code":"  it('should fail with code 1 when async bootstrap failed and not call teardown', done => {\n    exec(codecept_run_config('without.args.failed.bootstrap.async.func.js'), (err, stdout) => {\n      assert(err);\n      assert.equal(err.code, 1);\n      stdout.should.include('Error from async bootstrap');\n      stdout.should.not.include('✔ check current dir @slow @important in 2ms');\n      stdout.should.not.include('I am teardown');\n      done();\n    });\n  });","file":"runner/bootstrap_test.js","skipped":false,"dir":"test"},{"name":"should be executed in current dir","suites":["CodeceptJS Runner"],"updatePoint":{"line":21,"column":39,"index":621},"line":21,"code":"  it('should be executed in current dir', done => {\n    process.chdir(codecept_dir);\n    exec(codecept_run, (err, stdout) => {\n      stdout.should.include('Filesystem'); // feature\n\n      stdout.should.include('check current dir'); // test name\n\n      assert(!err);\n      done();\n    });\n  });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should be executed with glob","suites":["CodeceptJS Runner"],"updatePoint":{"line":32,"column":34,"index":910},"line":32,"code":"  it('should be executed with glob', done => {\n    process.chdir(codecept_dir);\n    exec(codecept_run_config('codecept.glob.json'), (err, stdout) => {\n      stdout.should.include('Filesystem'); // feature\n\n      stdout.should.include('glob current dir'); // test name\n\n      assert(!err);\n      done();\n    });\n  });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should be executed with config path","suites":["CodeceptJS Runner"],"updatePoint":{"line":43,"column":41,"index":1234},"line":43,"code":"  it('should be executed with config path', done => {\n    process.chdir(__dirname);\n    exec(`${codecept_run} -c ${codecept_dir}`, (err, stdout) => {\n      stdout.should.include('Filesystem'); // feature\n\n      stdout.should.include('check current dir'); // test name\n\n      assert(!err);\n      done();\n    });\n  });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should show failures and exit with 1 on fail","suites":["CodeceptJS Runner"],"updatePoint":{"line":54,"column":50,"index":1560},"line":54,"code":"  it('should show failures and exit with 1 on fail', done => {\n    exec(codecept_run_config('codecept.failed.json'), (err, stdout) => {\n      stdout.should.include('Not-A-Filesystem');\n      stdout.should.include('file is not in dir');\n      stdout.should.include('FAILURES');\n      err.code.should.eql(1);\n      done();\n    });\n    it('should except a directory glob pattern', done => {\n      process.chdir(codecept_dir);\n      exec(`${codecept_run} \"test-dir/*\"`, (err, stdout) => {\n        stdout.should.include('2 passed'); // number of tests present in directory\n\n        done();\n      });\n    });\n  });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should except a directory glob pattern","suites":["CodeceptJS Runner"],"updatePoint":{"line":62,"column":46,"index":1885},"line":62,"code":"    it('should except a directory glob pattern', done => {\n      process.chdir(codecept_dir);\n      exec(`${codecept_run} \"test-dir/*\"`, (err, stdout) => {\n        stdout.should.include('2 passed'); // number of tests present in directory\n\n        done();\n      });\n    });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"filter by scenario tags","suites":["CodeceptJS Runner","grep"],"updatePoint":{"line":72,"column":31,"index":2177},"line":72,"code":"    it('filter by scenario tags', done => {\n      process.chdir(codecept_dir);\n      exec(`${codecept_run} --grep @slow`, (err, stdout) => {\n        stdout.should.include('Filesystem'); // feature\n\n        stdout.should.include('check current dir'); // test name\n\n        assert(!err);\n        done();\n      });\n    });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"filter by scenario tags #2","suites":["CodeceptJS Runner","grep"],"updatePoint":{"line":83,"column":34,"index":2500},"line":83,"code":"    it('filter by scenario tags #2', done => {\n      process.chdir(codecept_dir);\n      exec(`${codecept_run} --grep @important`, (err, stdout) => {\n        stdout.should.include('Filesystem'); // feature\n\n        stdout.should.include('check current dir'); // test name\n\n        assert(!err);\n        done();\n      });\n    });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"filter by feature tags","suites":["CodeceptJS Runner","grep"],"updatePoint":{"line":94,"column":30,"index":2824},"line":94,"code":"    it('filter by feature tags', done => {\n      process.chdir(codecept_dir);\n      exec(`${codecept_run} --grep @main`, (err, stdout) => {\n        stdout.should.include('Filesystem'); // feature\n\n        stdout.should.include('check current dir'); // test name\n\n        assert(!err);\n        done();\n      });\n    });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should filter by scenario tags","suites":["CodeceptJS Runner","grep","without \"invert\" option"],"updatePoint":{"line":106,"column":40,"index":3201},"line":106,"code":"      it('should filter by scenario tags', done => {\n        process.chdir(codecept_dir);\n        exec(`${codecept_run_config('codecept.grep.2.json')} --grep @1_grep`, (err, stdout) => {\n          stdout.should.include('@feature_grep'); // feature\n\n          stdout.should.include('grep message 1');\n          stdout.should.not.include('grep message 2');\n          assert(!err);\n          done();\n        });\n      });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should filter by scenario tags #2","suites":["CodeceptJS Runner","grep","without \"invert\" option"],"updatePoint":{"line":117,"column":43,"index":3623},"line":117,"code":"      it('should filter by scenario tags #2', done => {\n        process.chdir(codecept_dir);\n        exec(`${codecept_run_config('codecept.grep.2.json')} --grep @2_grep`, (err, stdout) => {\n          stdout.should.include('@feature_grep'); // feature\n\n          stdout.should.include('grep message 2');\n          stdout.should.not.include('grep message 1');\n          assert(!err);\n          done();\n        });\n      });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should filter by feature tags","suites":["CodeceptJS Runner","grep","without \"invert\" option"],"updatePoint":{"line":128,"column":39,"index":4041},"line":128,"code":"      it('should filter by feature tags', done => {\n        process.chdir(codecept_dir);\n        exec(`${codecept_run_config('codecept.grep.2.json')} --grep @feature_grep`, (err, stdout) => {\n          stdout.should.include('@feature_grep'); // feature\n\n          stdout.should.include('grep message 1');\n          stdout.should.include('grep message 2');\n          assert(!err);\n          done();\n        });\n      });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should filter by scenario tags","suites":["CodeceptJS Runner","grep","with \"invert\" option"],"updatePoint":{"line":141,"column":40,"index":4515},"line":141,"code":"      it('should filter by scenario tags', done => {\n        process.chdir(codecept_dir);\n        exec(`${codecept_run_config('codecept.grep.2.json')} --grep @1_grep --invert`, (err, stdout) => {\n          stdout.should.include('@feature_grep'); // feature\n\n          stdout.should.not.include('grep message 1');\n          stdout.should.include('grep message 2');\n          assert(!err);\n          done();\n        });\n      });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should filter by scenario tags #2","suites":["CodeceptJS Runner","grep","with \"invert\" option"],"updatePoint":{"line":152,"column":43,"index":4946},"line":152,"code":"      it('should filter by scenario tags #2', done => {\n        process.chdir(codecept_dir);\n        exec(`${codecept_run_config('codecept.grep.2.json')} --grep @2_grep --invert`, (err, stdout) => {\n          stdout.should.include('@feature_grep'); // feature\n\n          stdout.should.not.include('grep message 2');\n          stdout.should.include('grep message 1');\n          assert(!err);\n          done();\n        });\n      });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should filter by feature tags","suites":["CodeceptJS Runner","grep","with \"invert\" option"],"updatePoint":{"line":163,"column":39,"index":5373},"line":163,"code":"      it('should filter by feature tags', done => {\n        process.chdir(codecept_dir);\n        exec(`${codecept_run_config('codecept.grep.2.json')} --grep @main --invert`, (err, stdout) => {\n          stdout.should.include('@feature_grep'); // feature\n\n          stdout.should.include('grep message 1');\n          stdout.should.include('grep message 2');\n          assert(!err);\n          done();\n        });\n      });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should filter by feature tags","suites":["CodeceptJS Runner","grep","with \"invert\" option"],"updatePoint":{"line":174,"column":39,"index":5794},"line":174,"code":"      it('should filter by feature tags', done => {\n        process.chdir(codecept_dir);\n        exec(`${codecept_run_config('codecept.grep.2.json')} --grep @feature_grep --invert`, (err, stdout) => {\n          stdout.should.not.include('@feature_grep'); // feature\n\n          stdout.should.not.include('grep message 1');\n          stdout.should.not.include('grep message 2');\n          assert(!err);\n          done();\n        });\n      });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should run hooks from suites","suites":["CodeceptJS Runner","grep","with \"invert\" option"],"updatePoint":{"line":187,"column":34,"index":6244},"line":187,"code":"  it('should run hooks from suites', done => {\n    exec(codecept_run_config('codecept.testhooks.json'), (err, stdout) => {\n      const lines = stdout.match(/\\S.+/g);\n      const uniqueLines = lines.filter((v, i, a) => a.indexOf(v) === i);\n      expect(uniqueLines.length).to.eql(lines.length, `No duplicates in output +${lines} \\n\\n -${uniqueLines}`);\n      expect(lines).to.include.members(['Helper: I\\'m initialized', 'Helper: I\\'m simple BeforeSuite hook', 'Test: I\\'m simple BeforeSuite hook', 'Test: I\\'m generator BeforeSuite hook', 'Test: I\\'m async/await BeforeSuite hook', 'Helper: I\\'m simple Before hook', 'Test: I\\'m simple Before hook', 'Test: I\\'m generator Before hook', 'Test: I\\'m async/await Before hook', 'Test: I\\'m generator After hook', 'Test: I\\'m simple After hook', 'Test: I\\'m async/await After hook', 'Helper: I\\'m simple After hook', 'Test: I\\'m generator AfterSuite hook', 'Test: I\\'m simple AfterSuite hook', 'Test: I\\'m async/await AfterSuite hook', 'Helper: I\\'m simple AfterSuite hook']);\n      stdout.should.include('OK  | 1 passed');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should run hooks from suites (in different order)","suites":["CodeceptJS Runner","grep","with \"invert\" option"],"updatePoint":{"line":198,"column":55,"index":7382},"line":198,"code":"  it('should run hooks from suites (in different order)', done => {\n    exec(codecept_run_config('codecept.testhooks.different.order.json'), (err, stdout) => {\n      const lines = stdout.match(/\\S.+/g);\n      expect(lines).to.include.members(['Helper: I\\'m simple BeforeSuite hook', 'Test: I\\'m async/await BeforeSuite hook', 'Helper: I\\'m simple Before hook', 'Test: I\\'m async/await Before hook', 'Test: I\\'m async/await After hook', 'Helper: I\\'m simple After hook', 'Test: I\\'m async/await AfterSuite hook', 'Helper: I\\'m simple AfterSuite hook']);\n      stdout.should.include('OK  | 1 passed');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should run different types of scenario","suites":["CodeceptJS Runner","grep","with \"invert\" option"],"updatePoint":{"line":207,"column":44,"index":8019},"line":207,"code":"  it('should run different types of scenario', done => {\n    exec(codecept_run_config('codecept.testscenario.json'), (err, stdout) => {\n      const lines = stdout.match(/\\S.+/g);\n      expect(lines).to.include.members(['Test scenario types --', 'It\\'s usual test', 'Test: I\\'m async/await test', 'Test: I\\'m asyncbrackets test']);\n      stdout.should.include('OK  | 3 passed');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should run dynamic config","suites":["CodeceptJS Runner","grep","with \"invert\" option"],"updatePoint":{"line":216,"column":31,"index":8432},"line":216,"code":"  it('should run dynamic config', done => {\n    exec(codecept_run_config('config.js'), (err, stdout) => {\n      stdout.should.include('Filesystem'); // feature\n\n      assert(!err);\n      done();\n    });\n  });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should run dynamic config with profile","suites":["CodeceptJS Runner","grep","with \"invert\" option"],"updatePoint":{"line":224,"column":44,"index":8654},"line":224,"code":"  it('should run dynamic config with profile', done => {\n    exec(`${codecept_run_config('config.js')} --profile failed`, (err, stdout) => {\n      stdout.should.include('FAILURES');\n      stdout.should.not.include('I am bootstrap');\n      assert(err.code);\n      done();\n    });\n  });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should exit code 1 when error in config","suites":["CodeceptJS Runner","grep","with \"invert\" option"],"updatePoint":{"line":232,"column":45,"index":8940},"line":232,"code":"  it('should exit code 1 when error in config', done => {\n    exec(`${codecept_run_config('configs/codecept-invalid.config.js')} --profile failed`, (err, stdout, stderr) => {\n      stdout.should.not.include('UnhandledPromiseRejectionWarning');\n      stderr.should.not.include('UnhandledPromiseRejectionWarning');\n      stdout.should.include('badFn is not defined');\n      assert(err.code);\n      done();\n    });\n  });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should be executed with module when described","suites":["CodeceptJS Runner","with require parameter"],"updatePoint":{"line":244,"column":53,"index":9512},"line":244,"code":"    it('should be executed with module when described', done => {\n      process.chdir(codecept_dir);\n      exec(codecept_run_config('codecept.require.single.json'), (err, stdout) => {\n        stdout.should.include(moduleOutput);\n        stdout.should.not.include(moduleOutput2);\n        assert(!err);\n        done();\n      });\n    });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should be executed with several modules when described","suites":["CodeceptJS Runner","with require parameter"],"updatePoint":{"line":253,"column":62,"index":9856},"line":253,"code":"    it('should be executed with several modules when described', done => {\n      process.chdir(codecept_dir);\n      exec(codecept_run_config('codecept.require.several.json'), (err, stdout) => {\n        stdout.should.include(moduleOutput);\n        stdout.should.include(moduleOutput2);\n        assert(!err);\n        done();\n      });\n    });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should not be executed without module when not described","suites":["CodeceptJS Runner","with require parameter"],"updatePoint":{"line":262,"column":64,"index":10199},"line":262,"code":"    it('should not be executed without module when not described', done => {\n      process.chdir(codecept_dir);\n      exec(codecept_run_config('codecept.require.without.json'), (err, stdout) => {\n        stdout.should.not.include(moduleOutput);\n        stdout.should.not.include(moduleOutput2);\n        assert(!err);\n        done();\n      });\n    });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should fire events with only passing tests","suites":["Codeceptjs Events"],"updatePoint":{"line":274,"column":48,"index":10582},"line":274,"code":"  it('should fire events with only passing tests', done => {\n    exec(`${codecept_run_config('codecept.testevents.js')} --grep @willpass`, (err, stdout) => {\n      assert(!err);\n      const eventMessages = stdout.split('\\n').filter(text => text.startsWith('Event:')).map(text => text.replace(/^Event:/i, ''));\n      expect(eventMessages).to.deep.equal([event.all.before, event.suite.before, event.test.before, event.test.started, event.test.passed, `${event.test.passed} (helper)`, event.test.after, event.suite.after, event.all.result, event.all.after]);\n      done();\n    });\n  });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should fire events with passing and failing tests","suites":["Codeceptjs Events"],"updatePoint":{"line":282,"column":55,"index":11173},"line":282,"code":"  it('should fire events with passing and failing tests', done => {\n    exec(codecept_run_config('codecept.testevents.js'), (err, stdout) => {\n      assert(err);\n      const eventMessages = stdout.split('\\n').filter(text => text.startsWith('Event:')).map(text => text.replace(/^Event:/i, ''));\n      expect(eventMessages).to.deep.equal([event.all.before, event.suite.before, // Test 1 (should pass)\n      event.test.before, event.test.started, event.test.passed, `${event.test.passed} (helper)`, event.test.after, // Test 2 (should fail)\n      event.test.before, event.test.started, event.test.failed, `${event.test.failed} (helper)`, event.test.after, event.suite.after, event.all.result, event.all.after]);\n      done();\n    });\n  });","file":"runner/codecept_test.js","skipped":false,"dir":"test"},{"name":"should print nested steps when global var comments used","suites":["CodeceptJS commentStep plugin"],"updatePoint":{"line":18,"column":61,"index":625},"line":18,"code":"  it('should print nested steps when global var comments used', done => {\n    exec(`${config_run_config('codecept.conf.js', 'global var')} --debug`, (err, stdout) => {\n      const lines = stdout.split('\\n');\n      expect(lines).toEqual(expect.arrayContaining([expect.stringContaining('Prepare user base:'), expect.stringContaining('I print \"other thins\"'), expect.stringContaining('Update data:'), expect.stringContaining('I print \"do some things\"'), expect.stringContaining('Check the result:'), expect.stringContaining('I print \"see everything works\"')]));\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/comment_step_test.js","skipped":false,"dir":"test"},{"name":"should print nested steps when local var comments used","suites":["CodeceptJS commentStep plugin"],"updatePoint":{"line":26,"column":60,"index":1242},"line":26,"code":"  it('should print nested steps when local var comments used', done => {\n    exec(`${config_run_config('codecept.conf.js', 'local var')} --debug`, (err, stdout) => {\n      const lines = stdout.split('\\n');\n      expect(lines).toEqual(expect.arrayContaining([expect.stringContaining('Prepare project:'), expect.stringContaining('I print \"other thins\"'), expect.stringContaining('Update project:'), expect.stringContaining('I print \"do some things\"'), expect.stringContaining('Check project:'), expect.stringContaining('I print \"see everything works\"')]));\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/comment_step_test.js","skipped":false,"dir":"test"},{"name":"should have internal object that is available as variable codeceptjs","suites":["Definitions","Static files"],"updatePoint":{"line":45,"column":76,"index":1346},"line":45,"code":"    it('should have internal object that is available as variable codeceptjs', done => {\n      exec(`${runner} def --config ${codecept_dir}/codecept.inject.po.json`, () => {\n        const types = typesFrom(`${codecept_dir}/steps.d.ts`);\n        types.should.be.valid;\n        const definitionsFile = types.getSourceFileOrThrow(pathOfJSDocDefinitions);\n        const index = definitionsFile.getNamespaceOrThrow('CodeceptJS').getNamespaceOrThrow('index').getStructure();\n        index.statements.should.containSubset([{\n          declarations: [{\n            name: 'recorder',\n            type: 'CodeceptJS.recorder'\n          }]\n        }, {\n          declarations: [{\n            name: 'event',\n            type: 'typeof CodeceptJS.event'\n          }]\n        }, {\n          declarations: [{\n            name: 'output',\n            type: 'typeof CodeceptJS.output'\n          }]\n        }, {\n          declarations: [{\n            name: 'config',\n            type: 'typeof CodeceptJS.Config'\n          }]\n        }, {\n          declarations: [{\n            name: 'container',\n            type: 'typeof CodeceptJS.Container'\n          }]\n        }]);\n        const codeceptjs = types.getSourceFileOrThrow(pathOfStaticDefinitions).getVariableDeclarationOrThrow('codeceptjs').getStructure();\n        codeceptjs.type.should.equal('typeof CodeceptJS.index');\n        done();\n      });\n    });","file":"runner/definitions_test.js","skipped":false,"dir":"test"},{"name":"def should create definition file","suites":["Definitions","Static files"],"updatePoint":{"line":83,"column":39,"index":2702},"line":83,"code":"  it('def should create definition file', done => {\n    exec(`${runner} def ${codecept_dir}`, (err, stdout) => {\n      stdout.should.include('Definitions were generated in steps.d.ts');\n      const types = typesFrom(`${codecept_dir}/steps.d.ts`);\n      types.should.be.valid;\n      const definitionFile = types.getSourceFileOrThrow(`${codecept_dir}/steps.d.ts`);\n      const extend = getExtends(definitionFile.getNamespaceOrThrow('CodeceptJS').getInterfaceOrThrow('I'));\n      extend.should.containSubset([{\n        methods: [{\n          name: 'amInPath',\n          returnType: 'void',\n          parameters: [{\n            name: 'openPath',\n            type: 'string'\n          }]\n        }, {\n          name: 'seeFile',\n          returnType: 'void',\n          parameters: [{\n            name: 'name',\n            type: 'string'\n          }]\n        }]\n      }]);\n      assert(!err);\n      done();\n    });\n  });","file":"runner/definitions_test.js","skipped":false,"dir":"test"},{"name":"def should create definition file with correct page def","suites":["Definitions","Static files"],"updatePoint":{"line":111,"column":61,"index":3636},"line":111,"code":"  it('def should create definition file with correct page def', done => {\n    exec(`${runner} def --config ${codecept_dir}/codecept.inject.po.json`, (err, stdout) => {\n      stdout.should.include('Definitions were generated in steps.d.ts');\n      const types = typesFrom(`${codecept_dir}/steps.d.ts`);\n      types.should.be.valid;\n      const definitionFile = types.getSourceFileOrThrow(`${codecept_dir}/steps.d.ts`);\n      const extend = definitionFile.getFullText();\n      extend.should.include(\"type CurrentPage = typeof import('./po/custom_steps.js');\");\n      assert(!err);\n      done();\n    });\n  });","file":"runner/definitions_test.js","skipped":false,"dir":"test"},{"name":"def should create definition file given a config file","suites":["Definitions","Static files"],"updatePoint":{"line":123,"column":59,"index":4241},"line":123,"code":"  it('def should create definition file given a config file', done => {\n    exec(`${runner} def --config ${codecept_dir}/../../codecept.ddt.json`, (err, stdout) => {\n      stdout.should.include('Definitions were generated in steps.d.ts');\n      const types = typesFrom(`${codecept_dir}/../../steps.d.ts`);\n      types.should.be.valid;\n      assert(!err);\n      done();\n    });\n  });","file":"runner/definitions_test.js","skipped":false,"dir":"test"},{"name":"def should create definition file with support object","suites":["Definitions","Static files"],"updatePoint":{"line":132,"column":59,"index":4624},"line":132,"code":"  it('def should create definition file with support object', done => {\n    exec(`${runner} def --config ${codecept_dir}/codecept.inject.po.json`, () => {\n      const types = typesFrom(`${codecept_dir}/steps.d.ts`);\n      types.should.be.valid;\n      const definitionsFile = types.getSourceFileOrThrow(`${codecept_dir}/steps.d.ts`);\n      const MyPage = getAliasStructure(definitionsFile.getTypeAliasOrThrow('MyPage'));\n      MyPage.properties.should.containSubset([{\n        name: 'hasFile',\n        returnType: undefined,\n        kind: StructureKind.Method\n      }]);\n      const I = getExtends(definitionsFile.getNamespaceOrThrow('CodeceptJS').getInterfaceOrThrow('I'));\n      I.should.containSubset([{\n        methods: [{\n          name: 'openDir',\n          returnType: undefined,\n          kind: StructureKind.Method\n        }]\n      }]);\n      done();\n    });\n  });","file":"runner/definitions_test.js","skipped":false,"dir":"test"},{"name":"def should create definition file with inject which contains support objects","suites":["Definitions","Static files"],"updatePoint":{"line":154,"column":82,"index":5520},"line":154,"code":"  it('def should create definition file with inject which contains support objects', done => {\n    exec(`${runner} def --config ${codecept_dir}/codecept.inject.po.json`, () => {\n      const types = typesFrom(`${codecept_dir}/steps.d.ts`);\n      types.should.be.valid;\n      const definitionsFile = types.getSourceFileOrThrow(pathOfStaticDefinitions);\n      const returned = getReturnStructure(definitionsFile.getFunctionOrThrow('inject'));\n      returned.should.containSubset([{\n        properties: [{\n          name: 'SecondPage',\n          type: 'SecondPage'\n        }, {\n          name: 'MyPage',\n          type: 'MyPage'\n        }]\n      }]);\n      done();\n    });\n  });","file":"runner/definitions_test.js","skipped":false,"dir":"test"},{"name":"def should create definition file with inject which contains I object","suites":["Definitions","Static files"],"updatePoint":{"line":172,"column":75,"index":6188},"line":172,"code":"  it('def should create definition file with inject which contains I object', done => {\n    exec(`${runner} def --config ${codecept_dir}/codecept.inject.po.json`, err => {\n      assert(!err);\n      const types = typesFrom(`${codecept_dir}/steps.d.ts`);\n      types.should.be.valid;\n      const definitionsFile = types.getSourceFileOrThrow(pathOfStaticDefinitions);\n      const returned = getReturnStructure(definitionsFile.getFunctionOrThrow('inject'));\n      returned.should.containSubset([{\n        properties: [{\n          name: 'I',\n          type: 'I'\n        }, {\n          name: 'MyPage',\n          type: 'MyPage'\n        }]\n      }]);\n      done();\n    });\n  });","file":"runner/definitions_test.js","skipped":false,"dir":"test"},{"name":"def should create definition file with inject which contains I object from helpers","suites":["Definitions","Static files"],"updatePoint":{"line":191,"column":88,"index":6872},"line":191,"code":"  it('def should create definition file with inject which contains I object from helpers', done => {\n    exec(`${runner} def --config ${codecept_dir}//codecept.inject.powi.json`, () => {\n      const types = typesFrom(`${codecept_dir}/steps.d.ts`);\n      types.should.be.valid;\n      const definitionsFile = types.getSourceFileOrThrow(pathOfStaticDefinitions);\n      const returned = getReturnStructure(definitionsFile.getFunctionOrThrow('inject'));\n      returned.should.containSubset([{\n        properties: [{\n          name: 'I',\n          type: 'I'\n        }]\n      }]);\n      done();\n    });\n  });","file":"runner/definitions_test.js","skipped":false,"dir":"test"},{"name":"def should create definition file with callback params","suites":["Definitions","Static files"],"updatePoint":{"line":206,"column":60,"index":7446},"line":206,"code":"  it('def should create definition file with callback params', done => {\n    exec(`${runner} def --config ${codecept_dir}/codecept.inject.po.json`, () => {\n      const types = typesFrom(`${codecept_dir}/steps.d.ts`);\n      types.should.be.valid;\n      const definitionsFile = types.getSourceFileOrThrow(`${codecept_dir}/steps.d.ts`);\n      const CallbackOrder = definitionsFile.getNamespaceOrThrow('CodeceptJS').getInterfaceOrThrow('SupportObject').getStructure();\n      CallbackOrder.properties.should.containSubset([{\n        name: 'I',\n        type: 'I'\n      }, {\n        name: 'MyPage',\n        type: 'MyPage'\n      }, {\n        name: 'SecondPage',\n        type: 'SecondPage'\n      }]);\n      done();\n    });\n  });","file":"runner/definitions_test.js","skipped":false,"dir":"test"},{"name":"should be executed with config path","suites":["dry-run command"],"updatePoint":{"line":19,"column":41,"index":595},"line":19,"code":"  it('should be executed with config path', done => {\n    process.chdir(__dirname);\n    exec(`${codecept_run} -c ${codecept_dir}`, (err, stdout) => {\n      expect(stdout).toContain('Filesystem'); // feature\n\n      expect(stdout).toContain('check current dir'); // test name\n\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/dry_run_test.js","skipped":false,"dir":"test"},{"name":"should list all tests","suites":["dry-run command"],"updatePoint":{"line":30,"column":27,"index":915},"line":30,"code":"  it('should list all tests', done => {\n    process.chdir(__dirname);\n    exec(`${codecept_run} -c ${codecept_dir}`, (err, stdout) => {\n      expect(stdout).toContain('Filesystem'); // feature\n\n      expect(stdout).toContain('check current dir'); // test name\n\n      expect(stdout).not.toContain('I am in path'); // step name\n\n      expect(stdout).not.toContain('I see file'); // step name\n\n      expect(stdout).toContain('No tests were executed');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/dry_run_test.js","skipped":false,"dir":"test"},{"name":"should not run actual steps","suites":["dry-run command"],"updatePoint":{"line":46,"column":33,"index":1429},"line":46,"code":"  it('should not run actual steps', done => {\n    exec(codecept_run_config('codecept.flaky.json'), (err, stdout) => {\n      expect(stdout).toContain('Flaky'); // feature\n\n      expect(stdout).toContain('Not so flaky test'); // test name\n\n      expect(stdout).toContain('Old style flaky'); // test name\n\n      expect(stdout).not.toContain('[T1] Retries: 2');\n      expect(stdout).not.toContain('[T2] Retries: 4');\n      expect(stdout).not.toContain('[T3] Retries: 1');\n      expect(stdout).toContain('No tests were executed');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/dry_run_test.js","skipped":false,"dir":"test"},{"name":"should not run helper hooks","suites":["dry-run command"],"updatePoint":{"line":62,"column":33,"index":2014},"line":62,"code":"  it('should not run helper hooks', done => {\n    exec(`${codecept_run_config('codecept.testhooks.json')} --debug`, (err, stdout) => {\n      const lines = stdout.match(/\\S.+/g);\n      expect(lines).not.toEqual(expect.arrayContaining(['Helper: I\\'m initialized', 'Helper: I\\'m simple BeforeSuite hook', 'Helper: I\\'m simple Before hook', 'Helper: I\\'m simple After hook', 'Helper: I\\'m simple AfterSuite hook']));\n      expect(lines).toEqual(expect.arrayContaining(['Test: I\\'m simple BeforeSuite hook', 'Test: I\\'m simple Before hook', 'Test: I\\'m simple After hook', 'Test: I\\'m simple AfterSuite hook']));\n      expect(stdout).toContain('OK  | 1 passed');\n      expect(stdout).toContain('No tests were executed');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/dry_run_test.js","skipped":false,"dir":"test"},{"name":"should display meta steps and substeps","suites":["dry-run command"],"updatePoint":{"line":73,"column":44,"index":2800},"line":73,"code":"  it('should display meta steps and substeps', done => {\n    exec(`${codecept_run_config('configs/pageObjects/codecept.po.json')} --debug`, (err, stdout) => {\n      const lines = stdout.split('\\n');\n      expect(lines).toEqual(expect.arrayContaining(['  check current dir', '    I: openDir \"aaa\"', '      I am in path \".\"', '      I see file \"codecept.class.js\"', '    MyPage: hasFile \"First arg\", \"Second arg\"', '      I see file \"codecept.class.js\"', '      I see file \"codecept.po.json\"', '    I see file \"codecept.po.json\"']));\n      expect(stdout).toContain('OK  | 1 passed');\n      expect(stdout).toContain('No tests were executed');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/dry_run_test.js","skipped":false,"dir":"test"},{"name":"should run feature files","suites":["dry-run command"],"updatePoint":{"line":83,"column":30,"index":3485},"line":83,"code":"  it('should run feature files', done => {\n    exec(codecept_run_config('codecept.bdd.json') + ' --steps --grep \"Checkout process\"', (err, stdout) => {\n      //eslint-disable-line\n      expect(stdout).toContain('Checkout process'); // feature\n\n      expect(stdout).toContain('-- before checkout --');\n      expect(stdout).toContain('-- after checkout --'); // expect(stdout).toContain('In order to buy products'); // test name\n\n      expect(stdout).toContain('Given I have product with $600 price');\n      expect(stdout).toContain('And I have product with $1000 price');\n      expect(stdout).toContain('Then I should see that total number of products is 2');\n      expect(stdout).toContain('And my order amount is $1600');\n      expect(stdout).not.toContain('I add item 600'); // 'Given' actor's non-gherkin step check\n\n      expect(stdout).not.toContain('I see sum 1600'); // 'And' actor's non-gherkin step check\n\n      expect(stdout).toContain('No tests were executed');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/dry_run_test.js","skipped":false,"dir":"test"},{"name":"should print substeps in debug mode","suites":["dry-run command"],"updatePoint":{"line":104,"column":41,"index":4528},"line":104,"code":"  it('should print substeps in debug mode', done => {\n    exec(codecept_run_config('codecept.bdd.json') + ' --debug --grep \"Checkout process\"', (err, stdout) => {\n      //eslint-disable-line\n      expect(stdout).toContain('Checkout process'); // feature\n      // expect(stdout).toContain('In order to buy products'); // test name\n\n      expect(stdout).toContain('Given I have product with $600 price');\n      expect(stdout).toContain('I add item 600');\n      expect(stdout).toContain('And I have product with $1000 price');\n      expect(stdout).toContain('I add item 1000');\n      expect(stdout).toContain('Then I should see that total number of products is 2');\n      expect(stdout).toContain('I see num 2');\n      expect(stdout).toContain('And my order amount is $1600');\n      expect(stdout).toContain('I see sum 1600');\n      expect(stdout).toContain('No tests were executed');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/dry_run_test.js","skipped":false,"dir":"test"},{"name":"should run tests with different data","suites":["dry-run command"],"updatePoint":{"line":123,"column":42,"index":5470},"line":123,"code":"  it('should run tests with different data', done => {\n    exec(codecept_run_config('codecept.ddt.json'), (err, stdout) => {\n      const output = stdout.replace(/in [0-9]ms/g, '').replace(/\\r/g, '');\n      expect(output).toContain(`${char} Should log accounts1 | {\"login\":\"davert\",\"password\":\"123456\"}`);\n      expect(output).toContain(`${char} Should log accounts1 | {\"login\":\"admin\",\"password\":\"666666\"}`);\n      expect(output).toContain(`${char} Should log accounts2 | {\"login\":\"andrey\",\"password\":\"555555\"}`);\n      expect(output).toContain(`${char} Should log accounts2 | {\"login\":\"collaborator\",\"password\":\"222222\"}`);\n      expect(output).toContain(`${char} Should log accounts3 | [\"nick\",\"pick\"]`);\n      expect(output).toContain(`${char} Should log accounts3 | [\"jack\",\"sacj\"]`);\n      expect(output).toContain(`${char} Should log accounts4 | {\"user\":\"nick\"}`);\n      expect(output).toContain(`${char} Should log accounts4 | {\"user\":\"pick\"}`);\n      expect(output).toContain(`${char} Should log array of strings | {\"1\"}`);\n      expect(output).toContain(`${char} Should log array of strings | {\"2\"}`);\n      expect(output).toContain(`${char} Should log array of strings | {\"3\"}`);\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/dry_run_test.js","skipped":false,"dir":"test"},{"name":"should work with inject() keyword","suites":["dry-run command"],"updatePoint":{"line":141,"column":39,"index":6716},"line":141,"code":"  it('should work with inject() keyword', done => {\n    exec(`${codecept_run_config('configs/pageObjects/codecept.inject.po.json', 'check current dir')} --debug`, (err, stdout) => {\n      const lines = stdout.split('\\n');\n      expect(stdout).toContain('injected');\n      expect(lines).toEqual(expect.arrayContaining(['  check current dir', '    I: openDir \"aaa\"', '      I am in path \".\"', '      I see file \"codecept.class.js\"', '    MyPage: hasFile \"uu\"', '      I see file \"codecept.class.js\"', '      I see file \"codecept.po.json\"', '    I see file \"codecept.po.json\"']));\n      expect(stdout).toContain('OK  | 1 passed');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/dry_run_test.js","skipped":false,"dir":"test"},{"name":"should inject page objects via proxy","suites":["dry-run command"],"updatePoint":{"line":151,"column":42,"index":7406},"line":151,"code":"  it('should inject page objects via proxy', done => {\n    exec(`${codecept_run_config('../inject-fail-example')} --debug`, (err, stdout) => {\n      expect(stdout).toContain('newdomain');\n      expect(stdout).toContain(\"[ 'veni', 'vedi', 'vici' ]\", 'array objects work');\n      expect(stdout).toContain('OK  | 1 passed');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/dry_run_test.js","skipped":false,"dir":"test"},{"name":"should rerun flaky tests","suites":["CodeceptJS Interface"],"updatePoint":{"line":17,"column":30,"index":495},"line":17,"code":"  it('should rerun flaky tests', done => {\n    exec(config_run_config('codecept.flaky.json'), (err, stdout) => {\n      expect(stdout).toContain('Flaky'); // feature\n\n      expect(stdout).toContain('Not so flaky test'); // test name\n\n      expect(stdout).toContain('Old style flaky'); // test name\n\n      expect(stdout).toContain('[T1] Retries: 2'); // test name\n\n      expect(stdout).toContain('[T2] Retries: 4'); // test name\n\n      expect(stdout).toContain('[T3] Retries: 1'); // test name\n\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"should rerun retried steps","suites":["CodeceptJS Interface"],"updatePoint":{"line":35,"column":32,"index":1049},"line":35,"code":"  it('should rerun retried steps', done => {\n    exec(`${config_run_config('codecept.retry.json')} --grep @test1`, (err, stdout) => {\n      expect(stdout).toContain('Retry'); // feature\n\n      expect(stdout).toContain('Retries: 4'); // test name\n\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"should not propagate retries to non retried steps","suites":["CodeceptJS Interface"],"updatePoint":{"line":45,"column":55,"index":1378},"line":45,"code":"  it('should not propagate retries to non retried steps', done => {\n    exec(`${config_run_config('codecept.retry.json')} --grep @test2 --verbose`, (err, stdout) => {\n      expect(stdout).toContain('Retry'); // feature\n\n      expect(stdout).toContain('Retries: 1'); // test name\n\n      expect(err).toBeTruthy();\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"should use retryFailedStep plugin for failed steps","suites":["CodeceptJS Interface"],"updatePoint":{"line":55,"column":56,"index":1719},"line":55,"code":"  it('should use retryFailedStep plugin for failed steps', done => {\n    exec(`${config_run_config('codecept.retryFailed.json')} --grep @test1`, (err, stdout) => {\n      expect(stdout).toContain('Retry'); // feature\n\n      expect(stdout).toContain('Retries: 5'); // test name\n\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"should not retry wait* steps in retryFailedStep plugin","suites":["CodeceptJS Interface"],"updatePoint":{"line":65,"column":60,"index":2059},"line":65,"code":"  it('should not retry wait* steps in retryFailedStep plugin', done => {\n    exec(`${config_run_config('codecept.retryFailed.json')} --grep @test2`, (err, stdout) => {\n      expect(stdout).toContain('Retry'); // feature\n\n      expect(stdout).not.toContain('Retries: 5');\n      expect(stdout).toContain('Retries: 1');\n      expect(err).toBeTruthy();\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"should not retry steps if retryFailedStep plugin disabled","suites":["CodeceptJS Interface"],"updatePoint":{"line":75,"column":63,"index":2439},"line":75,"code":"  it('should not retry steps if retryFailedStep plugin disabled', done => {\n    exec(`${config_run_config('codecept.retryFailed.json')} --grep @test3`, (err, stdout) => {\n      expect(stdout).toContain('Retry'); // feature\n\n      expect(stdout).not.toContain('Retries: 5');\n      expect(stdout).toContain('Retries: 1');\n      expect(err).toBeTruthy();\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"should include grep option tests","suites":["CodeceptJS Interface"],"updatePoint":{"line":85,"column":38,"index":2794},"line":85,"code":"  it('should include grep option tests', done => {\n    exec(config_run_config('codecept.grep.json'), (err, stdout) => {\n      expect(stdout).toContain('Got login davert and password'); // feature\n\n      expect(stdout).not.toContain('Got changed login'); // test name\n\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"should run tests with different data","suites":["CodeceptJS Interface"],"updatePoint":{"line":95,"column":42,"index":3125},"line":95,"code":"  it('should run tests with different data', done => {\n    exec(config_run_config('codecept.ddt.json'), (err, stdout) => {\n      const output = stdout.replace(/in [0-9]ms/g, '').replace(/\\r/g, '');\n      expect(output).toContain(`Got login davert and password 123456\n  ✔ Should log accounts1 | {\"login\":\"davert\",\"password\":\"123456\"}`);\n      expect(output).toContain(`Got login admin and password 666666\n  ✔ Should log accounts1 | {\"login\":\"admin\",\"password\":\"666666\"}`);\n      expect(output).toContain(`Got changed login andrey and password 555555\n  ✔ Should log accounts2 | {\"login\":\"andrey\",\"password\":\"555555\"}`);\n      expect(output).toContain(`Got changed login collaborator and password 222222\n  ✔ Should log accounts2 | {\"login\":\"collaborator\",\"password\":\"222222\"}`);\n      expect(output).toContain(`Got changed login nick\n  ✔ Should log accounts3 | [\"nick\",\"pick\"]`);\n      expect(output).toContain(`Got changed login jack\n  ✔ Should log accounts3 | [\"jack\",\"sacj\"]`);\n      expect(output).toContain(`Got generator login nick\n  ✔ Should log accounts4 | {\"user\":\"nick\"}`);\n      expect(output).toContain(`Got generator login pick\n  ✔ Should log accounts4 | {\"user\":\"pick\"}`);\n      expect(output).toContain(`Got array item 1\n  ✔ Should log array of strings | {\"1\"}`);\n      expect(output).toContain(`Got array item 2\n  ✔ Should log array of strings | {\"2\"}`);\n      expect(output).toContain(`Got array item 3\n  ✔ Should log array of strings | {\"3\"}`);\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"should run all tests with data of array by only","suites":["CodeceptJS Interface"],"updatePoint":{"line":124,"column":53,"index":4655},"line":124,"code":"  it('should run all tests with data of array by only', done => {\n    exec(config_run_config('codecept.addt.json'), (err, stdout) => {\n      const output = stdout.replace(/in [0-9]ms/g, '').replace(/\\r/g, '');\n      expect(output).toContain('Got array item 1');\n      expect(output).toContain('Should log array of strings | {\"1\"}');\n      expect(output).toContain('Got array item 2');\n      expect(output).toContain('Should log array of strings | {\"2\"}');\n      expect(output).toContain('Got array item 3');\n      expect(output).toContain('Should log array of strings | {\"3\"}');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"should run all tests with data of generator by only","suites":["CodeceptJS Interface"],"updatePoint":{"line":137,"column":57,"index":5297},"line":137,"code":"  it('should run all tests with data of generator by only', done => {\n    exec(config_run_config('codecept.gddt.json'), (err, stdout) => {\n      const output = stdout.replace(/in [0-9]ms/g, '').replace(/\\r/g, '');\n      expect(output).toContain(`Got generator login nick\n  ✔ Should log generator of strings | {\"user\":\"nick\"}`);\n      expect(output).toContain(`Got generator login pick\n  ✔ Should log generator of strings | {\"user\":\"pick\"}`);\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"should provide skipped test for each entry of data","suites":["CodeceptJS Interface"],"updatePoint":{"line":148,"column":56,"index":5797},"line":148,"code":"  it('should provide skipped test for each entry of data', done => {\n    exec(config_run_config('codecept.skip_ddt.json'), (err, stdout) => {\n      const output = stdout.replace(/in [0-9]ms/g, '').replace(/\\r/g, '');\n      expect(output).toContain('S Should add skip entry for each item | {\"user\":\"bob\"}');\n      expect(output).toContain('S Should add skip entry for each item | {\"user\":\"anne\"}');\n      expect(output).toContain('OK');\n      expect(output).toContain('0 passed');\n      expect(output).toContain('2 skipped');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"should execute expected promise chain","suites":["CodeceptJS Interface"],"updatePoint":{"line":160,"column":43,"index":6368},"line":160,"code":"  it('should execute expected promise chain', done => {\n    exec(`${codecept_run} --verbose`, (err, stdout) => {\n      const lines = stdout.match(/\\S.+/g); // before hooks\n\n      const beforeStep = ['I am in path \".\"'];\n      lines.filter(l => beforeStep.indexOf(l) > -1).should.eql(beforeStep, 'check step hooks execution order'); // steps order\n\n      const step = ['I am in path \".\"', 'hello world', 'I see file \"codecept.json\"'];\n      lines.filter(l => step.indexOf(l) > -1).should.eql(step, 'check steps execution order');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"should display steps and artifacts & error log","suites":["CodeceptJS Interface"],"updatePoint":{"line":173,"column":52,"index":6965},"line":173,"code":"  it('should display steps and artifacts & error log', done => {\n    exec(`${config_run_config('./configs/testArtifacts')} --debug`, (err, stdout) => {\n      stdout.should.include('Scenario Steps:');\n      stdout.should.include('Artifacts');\n      stdout.should.include('- screenshot: [ SCREEENSHOT FILE ]');\n      done();\n    });\n  });","file":"runner/interface_test.js","skipped":false,"dir":"test"},{"name":"list should print actions","suites":["list commands"],"updatePoint":{"line":10,"column":31,"index":303},"line":10,"code":"  it('list should print actions', done => {\n    exec(`${runner} list ${codecept_dir}`, (err, stdout) => {\n      stdout.should.include('FileSystem'); // helper name\n\n      stdout.should.include('FileSystem I.amInPath(openPath)'); // action name\n\n      stdout.should.include('FileSystem I.seeFile(name)');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/list_test.js","skipped":false,"dir":"test"},{"name":"should fail if page objects was failed","suites":["CodeceptJS PageObject","Failed PageObject"],"updatePoint":{"line":18,"column":46,"index":614},"line":18,"code":"    it('should fail if page objects was failed', done => {\n      exec(`${config_run_config('codecept.fail_po.json')} --debug`, (err, stdout) => {\n        const lines = stdout.split('\\n');\n        expect(lines).toEqual(expect.arrayContaining([expect.stringContaining('File notexistfile.js not found in'), expect.stringContaining('-- FAILURES'), expect.stringContaining('- I.seeFile(\"notexistfile.js\")'), expect.stringContaining('- I.seeFile(\"codecept.class.js\")'), expect.stringContaining('- I.amInPath(\".\")')]));\n        expect(stdout).toContain('FAIL  | 0 passed, 1 failed');\n        expect(err).toBeTruthy();\n        done();\n      });\n    });","file":"runner/pageobject_test.js","skipped":false,"dir":"test"},{"name":"should inject page objects by class","suites":["CodeceptJS PageObject","PageObject as Class"],"updatePoint":{"line":29,"column":43,"index":1304},"line":29,"code":"    it('should inject page objects by class', done => {\n      exec(`${config_run_config('codecept.class.js', '@ClassPageObject')} --debug`, (err, stdout) => {\n        expect(stdout).not.toContain('classpage.type is not a function');\n        expect(stdout).toContain('classpage: type \"Class Page Type\"');\n        expect(stdout).toContain('I print message \"Class Page Type\"');\n        expect(stdout).toContain('classpage: purgeDomains');\n        expect(stdout).toContain('I print message \"purgeDomains\"');\n        expect(stdout).toContain('Class Page Type');\n        expect(stdout).toContain('OK  | 1 passed');\n        expect(err).toBeFalsy();\n        done();\n      });\n    });","file":"runner/pageobject_test.js","skipped":false,"dir":"test"},{"name":"should inject page objects by class which nested base clas","suites":["CodeceptJS PageObject","PageObject as Class"],"updatePoint":{"line":42,"column":66,"index":2003},"line":42,"code":"    it('should inject page objects by class which nested base clas', done => {\n      exec(`${config_run_config('codecept.class.js', '@NestedClassPageObject')} --debug`, (err, stdout) => {\n        expect(stdout).not.toContain('classnestedpage.type is not a function');\n        expect(stdout).toContain('classnestedpage: type \"Nested Class Page Type\"');\n        expect(stdout).toContain('user => User1');\n        expect(stdout).toContain('I print message \"Nested Class Page Type\"');\n        expect(stdout).toContain('classnestedpage: purgeDomains');\n        expect(stdout).toContain('I print message \"purgeDomains\"');\n        expect(stdout).toContain('Nested Class Page Type');\n        expect(stdout).toContain('OK  | 1 passed');\n        expect(err).toBeFalsy();\n        done();\n      });\n    });","file":"runner/pageobject_test.js","skipped":false,"dir":"test"},{"name":"should print pretty step log and pretty event log","suites":["CodeceptJS PageObject","PageObject as Class"],"updatePoint":{"line":56,"column":57,"index":2789},"line":56,"code":"    it('should print pretty step log and pretty event log', done => {\n      exec(`${config_run_config('codecept.logs.json', 'Print correct arg message')} --steps`, (err, stdout) => {\n        expect(stdout).toContain('I get humanize args Logs Page Value');\n        expect(stdout).toContain('Start event step: I get humanize args Logs Page Valu');\n        expect(stdout).toContain('OK  | 1 passed');\n        expect(err).toBeFalsy();\n        done();\n      });\n    });","file":"runner/pageobject_test.js","skipped":false,"dir":"test"},{"name":"should print pretty failed step log on stack trace","suites":["CodeceptJS PageObject","PageObject as Class"],"updatePoint":{"line":65,"column":58,"index":3255},"line":65,"code":"    it('should print pretty failed step log on stack trace', done => {\n      exec(`${config_run_config('codecept.logs.json', 'Error print correct arg message')} --steps`, (err, stdout) => {\n        expect(stdout).toContain('I.errorMethodHumanizeArgs(Logs Page Value)');\n        expect(stdout).toContain('FAIL  | 0 passed, 1 failed');\n        expect(err).toBeTruthy();\n        done();\n      });\n    });","file":"runner/pageobject_test.js","skipped":false,"dir":"test"},{"name":"should display meta steps and substeps","suites":["CodeceptJS PageObject","Show MetaSteps in Log"],"updatePoint":{"line":75,"column":46,"index":3695},"line":75,"code":"    it('should display meta steps and substeps', done => {\n      exec(`${config_run_config('codecept.po.json')} --debug`, (err, stdout) => {\n        const lines = stdout.split('\\n');\n        expect(lines).toEqual(expect.arrayContaining(['  check current dir', '    I: openDir \"aaa\"', '      I am in path \".\"', '      I see file \"codecept.class.js\"', '    MyPage: hasFile \"First arg\", \"Second arg\"', '      I see file \"codecept.class.js\"', '      I see file \"codecept.po.json\"', '    I see file \"codecept.po.json\"']));\n        expect(stdout).toContain('OK  | 1 passed');\n        expect(err).toBeFalsy();\n        done();\n      });\n    });","file":"runner/pageobject_test.js","skipped":false,"dir":"test"},{"name":"should work with inject() keyword","suites":["CodeceptJS PageObject","Inject PO in Test"],"updatePoint":{"line":86,"column":41,"index":4373},"line":86,"code":"    it('should work with inject() keyword', done => {\n      exec(`${config_run_config('codecept.inject.po.json', 'check current dir')} --debug`, (err, stdout) => {\n        const lines = stdout.split('\\n');\n        expect(stdout).toContain('injected');\n        expect(lines).toEqual(expect.arrayContaining(['  check current dir', '    I: openDir \"aaa\"', '      I am in path \".\"', '      I see file \"codecept.class.js\"', '    MyPage: hasFile \"uu\"', '      I see file \"codecept.class.js\"', '      I see file \"codecept.po.json\"', '    I see file \"codecept.po.json\"']));\n        expect(stdout).toContain('OK  | 1 passed');\n        expect(err).toBeFalsy();\n        done();\n      });\n    });","file":"runner/pageobject_test.js","skipped":false,"dir":"test"},{"name":"should work when used \"this\" context on method","suites":["CodeceptJS PageObject","PageObject with context"],"updatePoint":{"line":98,"column":54,"index":5123},"line":98,"code":"    it('should work when used \"this\" context on method', done => {\n      exec(`${config_run_config('codecept.inject.po.json', 'pageobject with context')} --debug`, (err, stdout) => {\n        const lines = stdout.split('\\n');\n        expect(lines).toEqual(expect.arrayContaining(['  pageobject with context', '    I: openDir \"aaa\"', '      I am in path \".\"', '      I see file \"codecept.class.js\"', '    MyPage: hasFile \"uu\"', '      I see file \"codecept.class.js\"', '      I see file \"codecept.po.json\"', '    I see file \"codecept.po.json\"']));\n        expect(stdout).toContain('OK  | 1 passed');\n        expect(err).toBeFalsy();\n        done();\n      });\n    });","file":"runner/pageobject_test.js","skipped":false,"dir":"test"},{"name":"should inject page objects via proxy","suites":["CodeceptJS PageObject","Inject PO in another PO"],"updatePoint":{"line":109,"column":44,"index":5829},"line":109,"code":"    it('should inject page objects via proxy', done => {\n      exec(`${config_run_config('../../../inject-fail-example')} --debug`, (err, stdout) => {\n        expect(stdout).toContain('newdomain');\n        expect(stdout).toContain(\"[ 'veni', 'vedi', 'vici' ]\", 'array objects work');\n        expect(stdout).toContain('OK  | 1 passed');\n        expect(err).toBeFalsy();\n        done();\n      });\n    });","file":"runner/pageobject_test.js","skipped":false,"dir":"test"},{"name":"built methods are still available custom I steps_file is added","suites":["CodeceptJS PageObject","Inject PO in another PO"],"updatePoint":{"line":119,"column":68,"index":6262},"line":119,"code":"  it('built methods are still available custom I steps_file is added', done => {\n    exec(`${config_run_config('codecept.class.js', '@CustomStepsBuiltIn')} --debug`, (err, stdout) => {\n      expect(stdout).toContain('Built in say');\n      expect(stdout).toContain('Say called from custom step');\n      expect(stdout).toContain('OK  | 1 passed');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/pageobject_test.js","skipped":false,"dir":"test"},{"name":"should execute one suite with browser","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":17,"column":43,"index":579},"line":17,"code":"  it('should execute one suite with browser', done => {\n    exec(`${codecept_run}default:firefox`, (err, stdout) => {\n      stdout.should.include('CodeceptJS'); // feature\n\n      stdout.should.include('.default:firefox] print browser ');\n      stdout.should.not.include('.default:chrome] print browser ');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should execute all suites","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":27,"column":31,"index":921},"line":27,"code":"  it('should execute all suites', done => {\n    exec(`${codecept_run}--all`, (err, stdout) => {\n      stdout.should.include('CodeceptJS'); // feature\n\n      stdout.should.include('[1.default:chrome] print browser ');\n      stdout.should.include('[2.default:firefox] print browser ');\n      stdout.should.include('[3.mobile:android] print browser ');\n      stdout.should.include('[4.mobile:safari] print browser ');\n      stdout.should.include('[5.mobile:chrome] print browser ');\n      stdout.should.include('[6.mobile:safari] print browser ');\n      stdout.should.include('[7.grep:chrome] @grep print browser size ');\n      stdout.should.include('[8.grep:firefox] @grep print browser size ');\n      stdout.should.not.include('[7.grep:chrome] print browser ');\n      stdout.should.include('[1.default:chrome] @grep print browser size ');\n      stdout.should.include('[3.mobile:android] @grep print browser size ');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should replace parameters","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":46,"column":31,"index":1884},"line":46,"code":"  it('should replace parameters', done => {\n    exec(`${codecept_run}grep --debug`, (err, stdout) => {\n      stdout.should.include('CodeceptJS'); // feature\n\n      stdout.should.include('[1.grep:chrome]     › maximize');\n      stdout.should.include('[2.grep:firefox]     › 1200x840');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should execute multiple suites","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":56,"column":36,"index":2222},"line":56,"code":"  it('should execute multiple suites', done => {\n    exec(`${codecept_run}mobile default `, (err, stdout) => {\n      stdout.should.include('CodeceptJS'); // feature\n\n      stdout.should.include('[1.mobile:android] print browser ');\n      stdout.should.include('[2.mobile:safari] print browser ');\n      stdout.should.include('[3.mobile:chrome] print browser ');\n      stdout.should.include('[4.mobile:safari] print browser ');\n      stdout.should.include('[5.default:chrome] print browser ');\n      stdout.should.include('[6.default:firefox] print browser ');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should execute multiple suites with selected browsers","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":70,"column":59,"index":2853},"line":70,"code":"  it('should execute multiple suites with selected browsers', done => {\n    exec(`${codecept_run}mobile:safari default:chrome `, (err, stdout) => {\n      stdout.should.include('CodeceptJS'); // feature\n\n      stdout.should.include('[1.mobile:safari] print browser ');\n      stdout.should.include('[2.mobile:safari] print browser ');\n      stdout.should.include('[3.default:chrome] print browser ');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should print steps","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":81,"column":24,"index":3265},"line":81,"code":"  it('should print steps', done => {\n    exec(`${codecept_run}default --steps`, (err, stdout) => {\n      stdout.should.include('CodeceptJS'); // feature\n\n      stdout.should.include('[2.default:firefox]   print browser ');\n      stdout.should.include('[2.default:firefox]     I print browser ');\n      stdout.should.include('[1.default:chrome]   print browser ');\n      stdout.should.include('[1.default:chrome]     I print browser ');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should pass grep to configuration","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":93,"column":39,"index":3764},"line":93,"code":"  it('should pass grep to configuration', done => {\n    exec(`${codecept_run}default --grep @grep`, (err, stdout) => {\n      stdout.should.include('CodeceptJS'); // feature\n\n      stdout.should.include('[1.default:chrome] @grep print browser size');\n      stdout.should.include('[2.default:firefox] @grep print browser size');\n      stdout.should.not.include('[1.default:chrome] print browser ');\n      stdout.should.not.include('[2.default:firefox] print browser ');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should pass grep invert to configuration","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":105,"column":46,"index":4287},"line":105,"code":"  it('should pass grep invert to configuration', done => {\n    exec(`${codecept_run}default --grep @grep --invert`, (err, stdout) => {\n      stdout.should.include('CodeceptJS'); // feature\n\n      stdout.should.not.include('[1.default:chrome] @grep print browser size');\n      stdout.should.not.include('[2.default:firefox] @grep print browser size');\n      stdout.should.include('[1.default:chrome] print browser ');\n      stdout.should.include('[2.default:firefox] print browser ');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should pass tests to configuration","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":117,"column":40,"index":4813},"line":117,"code":"  it('should pass tests to configuration', done => {\n    exec(`${codecept_run}test`, (err, stdout) => {\n      stdout.should.include('CodeceptJS'); // feature\n\n      stdout.should.include('[1.test:chrome] print browser size');\n      stdout.should.include('[2.test:firefox] print browser size');\n      stdout.should.include('[1.test:chrome] print browser ');\n      stdout.should.include('[2.test:firefox] print browser ');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should run chunks","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":129,"column":23,"index":5265},"line":129,"code":"  it('should run chunks', done => {\n    exec(`${codecept_run}chunks`, (err, stdout) => {\n      stdout.should.include('CodeceptJS'); // feature\n\n      stdout.should.include('[1.chunks:chunk1:dummy] print browser');\n      stdout.should.include('[2.chunks:chunk2:dummy] @grep print browser size');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should run features in parallel","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":139,"column":37,"index":5622},"line":139,"code":"  it('should run features in parallel', done => {\n    process.chdir(codecept_dir);\n    exec(`${runner} run-multiple --config codecept.multiple.features.js chunks --features`, (err, stdout) => {\n      stdout.should.include('[1.chunks:chunk1:default] Checkout examples process');\n      stdout.should.not.include('[2.chunks:chunk2:default] Checkout examples process');\n      stdout.should.include('[2.chunks:chunk2:default] Checkout string');\n      stdout.should.not.include('[1.chunks:chunk1:default] Checkout string');\n      stdout.should.include('[1.chunks:chunk1:default]   OK  |');\n      stdout.should.include('[2.chunks:chunk2:default]   OK  |');\n      stdout.should.not.include('@feature_grep');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should run features & tests in parallel","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":153,"column":45,"index":6378},"line":153,"code":"  it('should run features & tests in parallel', done => {\n    process.chdir(codecept_dir);\n    exec(`${runner} run-multiple --config codecept.multiple.features.js chunks`, (err, stdout) => {\n      stdout.should.include('@feature_grep');\n      stdout.should.include('Checkout examples process');\n      stdout.should.include('Checkout string');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should run only tests in parallel","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":163,"column":39,"index":6763},"line":163,"code":"  it('should run only tests in parallel', done => {\n    process.chdir(codecept_dir);\n    exec(`${runner} run-multiple --config codecept.multiple.features.js chunks --tests`, (err, stdout) => {\n      stdout.should.include('@feature_grep');\n      stdout.should.not.include('Checkout examples process');\n      stdout.should.not.include('Checkout string');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should exit with non-zero code for failures during init process","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":173,"column":69,"index":7194},"line":173,"code":"  it('should exit with non-zero code for failures during init process', done => {\n    process.chdir(codecept_dir);\n    exec(`${runner} run-multiple --config codecept.multiple.initFailure.json default --all`, (err, stdout) => {\n      expect(err).not.toBeFalsy();\n      expect(err.code).toBe(1);\n      expect(stdout).toContain('Failed on FailureHelper');\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should exit code 1 when error in config","suites":["CodeceptJS Multiple Runner"],"updatePoint":{"line":182,"column":45,"index":7551},"line":182,"code":"  it('should exit code 1 when error in config', done => {\n    process.chdir(codecept_dir);\n    exec(`${runner} run-multiple --config configs/codecept-invalid.config.js default --all`, (err, stdout, stderr) => {\n      expect(stdout).not.toContain('UnhandledPromiseRejectionWarning');\n      expect(stderr).not.toContain('UnhandledPromiseRejectionWarning');\n      expect(stdout).toContain('badFn is not defined');\n      expect(err).not.toBe(null);\n      done();\n    });\n  });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should be executed from async function in config","suites":["CodeceptJS Multiple Runner","bootstrapAll and teardownAll"],"updatePoint":{"line":194,"column":56,"index":8153},"line":194,"code":"    it('should be executed from async function in config', done => {\n      exec(`${runner} ${_codecept_run}/codecept.async.bootstrapall.multiple.code.js default`, (err, stdout) => {\n        stdout.should.include('CodeceptJS'); // feature\n\n        stdout.should.include('Results: inside Promise\\n\"event.multiple.before\" is called');\n        stdout.should.include('\"teardownAll\" is called.');\n        assert(!err);\n        done();\n      });\n    });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should be executed from function in config","suites":["CodeceptJS Multiple Runner","bootstrapAll and teardownAll"],"updatePoint":{"line":204,"column":50,"index":8594},"line":204,"code":"    it('should be executed from function in config', done => {\n      exec(`${runner} ${_codecept_run}/codecept.bootstrapall.multiple.code.js default`, (err, stdout) => {\n        stdout.should.include('CodeceptJS'); // feature\n\n        stdout.should.include('\"bootstrapAll\" is called.');\n        stdout.should.include('\"teardownAll\" is called.');\n        assert(!err);\n        done();\n      });\n    });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should be executed with module when described","suites":["CodeceptJS Multiple Runner","with require parameter"],"updatePoint":{"line":219,"column":53,"index":9218},"line":219,"code":"    it('should be executed with module when described', done => {\n      process.chdir(codecept_dir);\n      exec(`${runner} ${_codecept_run}/codecept.require.multiple.single.json default`, (err, stdout) => {\n        stdout.should.include(moduleOutput);\n        stdout.should.not.include(moduleOutput2);\n        (stdout.match(new RegExp(moduleOutput, 'g')) || []).should.have.lengthOf(2);\n        assert(!err);\n        done();\n      });\n    });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should be executed with several module when described","suites":["CodeceptJS Multiple Runner","with require parameter"],"updatePoint":{"line":229,"column":61,"index":9669},"line":229,"code":"    it('should be executed with several module when described', done => {\n      process.chdir(codecept_dir);\n      exec(`${runner} ${_codecept_run}/codecept.require.multiple.several.json default`, (err, stdout) => {\n        stdout.should.include(moduleOutput);\n        stdout.should.include(moduleOutput2);\n        (stdout.match(new RegExp(moduleOutput, 'g')) || []).should.have.lengthOf(2);\n        (stdout.match(new RegExp(moduleOutput2, 'g')) || []).should.have.lengthOf(2);\n        assert(!err);\n        done();\n      });\n    });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should not be executed without module when not described","suites":["CodeceptJS Multiple Runner","with require parameter"],"updatePoint":{"line":240,"column":64,"index":10206},"line":240,"code":"    it('should not be executed without module when not described', done => {\n      process.chdir(codecept_dir);\n      exec(`${runner} ${_codecept_run}/codecept.require.multiple.without.json default`, (err, stdout) => {\n        stdout.should.not.include(moduleOutput);\n        stdout.should.not.include(moduleOutput2);\n        assert(!err);\n        done();\n      });\n    });","file":"runner/run_multiple_test.js","skipped":false,"dir":"test"},{"name":"should run tests in 3 workers","suites":["CodeceptJS Workers Runner"],"updatePoint":{"line":20,"column":35,"index":670},"line":20,"code":"  it('should run tests in 3 workers', function (done) {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    exec(`${codecept_run} 3 --debug`, (err, stdout) => {\n      expect(stdout).toContain('CodeceptJS'); // feature\n\n      expect(stdout).toContain('glob current dir');\n      expect(stdout).toContain('From worker @1_grep print message 1');\n      expect(stdout).toContain('From worker @2_grep print message 2');\n      expect(stdout).toContain('Running tests in 3 workers');\n      expect(stdout).not.toContain('this is running inside worker');\n      expect(stdout).toContain('failed');\n      expect(stdout).toContain('File notafile not found');\n      expect(stdout).toContain('Scenario Steps:');\n      expect(err.code).toEqual(1);\n      done();\n    });\n  });","file":"runner/run_workers_test.js","skipped":false,"dir":"test"},{"name":"should print correct FAILURES in 3 workers without --debug","suites":["CodeceptJS Workers Runner"],"updatePoint":{"line":37,"column":64,"index":1501},"line":37,"code":"  it('should print correct FAILURES in 3 workers without --debug', function (done) {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    exec(`${codecept_run} 3`, (err, stdout) => {\n      expect(stdout).toContain('CodeceptJS'); // feature\n\n      expect(stdout).toContain('glob current dir');\n      expect(stdout).toContain('From worker @1_grep print message 1');\n      expect(stdout).toContain('From worker @2_grep print message 2');\n      expect(stdout).toContain('Running tests in 3 workers');\n      expect(stdout).not.toContain('this is running inside worker');\n      expect(stdout).toContain('failed');\n      expect(stdout).toContain('File notafile not found');\n      expect(stdout).toContain('Scenario Steps:');\n      expect(stdout).toContain('FAIL  | 5 passed, 2 failed'); // We are not testing order in logs, because it depends on race condition between workers\n\n      expect(stdout).toContain(') Workers Failing\\n'); // first fail log\n\n      expect(stdout).toContain(') Workers\\n'); // second fail log\n      // We just should be sure numbers are correct\n\n      expect(stdout).toContain('1) '); // first fail log\n\n      expect(stdout).toContain('2) '); // second fail log\n\n      expect(err.code).toEqual(1);\n      done();\n    });\n  });","file":"runner/run_workers_test.js","skipped":false,"dir":"test"},{"name":"should print positive or zero failures with same name tests","suites":["CodeceptJS Workers Runner"],"updatePoint":{"line":65,"column":65,"index":2788},"line":65,"code":"  it('should print positive or zero failures with same name tests', function (done) {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    exec(`${codecept_run_glob('configs/workers/codecept.workers-negative.conf.js')} 2`, (err, stdout) => {\n      expect(stdout).toContain('Running tests in 2 workers...'); // check negative number without checking specified negative number\n\n      expect(stdout).not.toContain('FAIL  | 2 passed, -'); // check we have positive failures\n      // TODO: \"10 failed\" - probably bug, but not in logs.\n      //  CodeceptJS starts 12 tests in this case, but now we can see this executions in logs.\n\n      expect(stdout).toContain('FAIL  | 2 passed, 10 failed');\n      expect(err).not.toBe(null);\n      done();\n    });\n  });","file":"runner/run_workers_test.js","skipped":false,"dir":"test"},{"name":"should use grep","suites":["CodeceptJS Workers Runner"],"updatePoint":{"line":79,"column":21,"index":3537},"line":79,"code":"  it('should use grep', function (done) {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    exec(`${codecept_run} 2 --grep \"grep\"`, (err, stdout) => {\n      expect(stdout).toContain('CodeceptJS'); // feature\n\n      expect(stdout).not.toContain('glob current dir');\n      expect(stdout).toContain('From worker @1_grep print message 1');\n      expect(stdout).toContain('From worker @2_grep print message 2');\n      expect(stdout).toContain('Running tests in 2 workers');\n      expect(stdout).not.toContain('this is running inside worker');\n      expect(stdout).not.toContain('failed');\n      expect(stdout).not.toContain('File notafile not found');\n      expect(err).toEqual(null);\n      done();\n    });\n  });","file":"runner/run_workers_test.js","skipped":false,"dir":"test"},{"name":"should use suites","suites":["CodeceptJS Workers Runner"],"updatePoint":{"line":95,"column":23,"index":4292},"line":95,"code":"  it('should use suites', function (done) {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    exec(`${codecept_run} 2 --suites`, (err, stdout) => {\n      expect(stdout).toContain('CodeceptJS'); // feature\n\n      expect(stdout).toContain('Running tests in 2 workers'); // feature\n\n      expect(stdout).toContain('glob current dir');\n      expect(stdout).toContain('From worker @1_grep print message 1');\n      expect(stdout).toContain('From worker @2_grep print message 2');\n      expect(stdout).not.toContain('this is running inside worker');\n      expect(err.code).toEqual(1);\n      done();\n    });\n  });","file":"runner/run_workers_test.js","skipped":false,"dir":"test"},{"name":"should show failures when suite is failing","suites":["CodeceptJS Workers Runner"],"updatePoint":{"line":110,"column":48,"index":4968},"line":110,"code":"  it('should show failures when suite is failing', function (done) {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    exec(`${codecept_run} 2 --grep \"Workers Failing\"`, (err, stdout) => {\n      expect(stdout).toContain('CodeceptJS'); // feature\n\n      expect(stdout).toContain('Running tests in 2 workers'); // Test Scenario wasn't executed, but we can see it in logs because Before() hook was executed\n\n      expect(stdout).not.toContain(' should not be executed ');\n      expect(stdout).toContain('\"before each\" hook: Before for \"should not be executed\"');\n      expect(stdout).not.toContain('this is running inside worker');\n      expect(stdout).toContain('failed');\n      expect(stdout).toContain('FAILURES');\n      expect(stdout).toContain('Workers Failing'); // Only 1 test is executed - Before hook in Workers Failing\n\n      expect(stdout).toContain('✖ Workers Failing');\n      expect(stdout).toContain('FAIL  | 0 passed, 1 failed');\n      expect(err.code).toEqual(1);\n      done();\n    });\n  });","file":"runner/run_workers_test.js","skipped":false,"dir":"test"},{"name":"should print stdout in debug mode and load bootstrap","suites":["CodeceptJS Workers Runner"],"updatePoint":{"line":130,"column":58,"index":6028},"line":130,"code":"  it('should print stdout in debug mode and load bootstrap', function (done) {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    exec(`${codecept_run} 1 --grep \"grep\" --debug`, (err, stdout) => {\n      expect(stdout).toContain('CodeceptJS'); // feature\n\n      expect(stdout).toContain('Running tests in 1 workers');\n      expect(stdout).toContain('bootstrap b1+b2');\n      expect(stdout).toContain('message 1');\n      expect(stdout).toContain('message 2');\n      expect(stdout).toContain('see this is worker');\n      expect(err).toEqual(null);\n      done();\n    });\n  });","file":"runner/run_workers_test.js","skipped":false,"dir":"test"},{"name":"should run tests with glob pattern","suites":["CodeceptJS Workers Runner"],"updatePoint":{"line":144,"column":40,"index":6627},"line":144,"code":"  it('should run tests with glob pattern', function (done) {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    exec(`${codecept_run_glob('codecept.workers-glob.conf.js')} 1 --grep \"grep\" --debug`, (err, stdout) => {\n      expect(stdout).toContain('CodeceptJS'); // feature\n\n      expect(stdout).toContain('Running tests in 1 workers');\n      expect(stdout).toContain('bootstrap b1+b2');\n      expect(stdout).toContain('message 1');\n      expect(stdout).toContain('message 2');\n      expect(stdout).toContain('see this is worker');\n      expect(err).toEqual(null);\n      done();\n    });\n  });","file":"runner/run_workers_test.js","skipped":false,"dir":"test"},{"name":"should print empty results with incorrect glob pattern","suites":["CodeceptJS Workers Runner"],"updatePoint":{"line":158,"column":60,"index":7284},"line":158,"code":"  it('should print empty results with incorrect glob pattern', function (done) {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    exec(`${codecept_run_glob('codecept.workers-incorrect-glob.conf.js')} 1 --grep \"grep\" --debug`, (err, stdout) => {\n      expect(stdout).toContain('CodeceptJS'); // feature\n\n      expect(stdout).toContain('Running tests in 1 workers');\n      expect(stdout).toContain('OK  | 0 passed');\n      expect(err).toEqual(null);\n      done();\n    });\n  });","file":"runner/run_workers_test.js","skipped":false,"dir":"test"},{"name":"should retry test","suites":["CodeceptJS Workers Runner"],"updatePoint":{"line":169,"column":23,"index":7769},"line":169,"code":"  it('should retry test', function (done) {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    exec(`${codecept_run} 2 --grep \"retry\"`, (err, stdout) => {\n      expect(stdout).toContain('CodeceptJS'); // feature\n\n      expect(stdout).toContain('OK  | 1 passed');\n      done();\n    });\n  });","file":"runner/run_workers_test.js","skipped":false,"dir":"test"},{"name":"should create output folder with custom name","suites":["CodeceptJS Workers Runner"],"updatePoint":{"line":178,"column":50,"index":8131},"line":178,"code":"  it('should create output folder with custom name', function (done) {\n    const fs = require('fs');\n\n    const customName = 'thisIsCustomOutputFolderName';\n    const outputDir = `${codecept_dir}/${customName}`;\n    let createdOutput = false;\n\n    if (fs.existsSync(outputDir)) {\n      fs.rmdirSync(outputDir, {\n        recursive: true\n      });\n    }\n\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    const configFileName = 'codecept.workers-custom-output-folder-name.conf.js';\n    exec(`${codecept_run_glob(configFileName)} 2 --grep \"grep\" --debug`, (err, stdout) => {\n      expect(stdout).toContain(customName);\n\n      if (fs.existsSync(outputDir)) {\n        createdOutput = true;\n      }\n\n      expect(createdOutput).toEqual(true);\n      expect(err).toEqual(null);\n      done();\n    });\n  });","file":"runner/run_workers_test.js","skipped":false,"dir":"test"},{"name":"should exit code 1 when error in config","suites":["CodeceptJS Workers Runner"],"updatePoint":{"line":205,"column":45,"index":8969},"line":205,"code":"  it('should exit code 1 when error in config', function (done) {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    exec(`${codecept_run_glob('configs/codecept-invalid.config.js')} 2`, (err, stdout, stderr) => {\n      expect(stdout).not.toContain('UnhandledPromiseRejectionWarning');\n      expect(stderr).not.toContain('UnhandledPromiseRejectionWarning');\n      expect(stdout).toContain('badFn is not defined');\n      expect(err).not.toBe(null);\n      done();\n    });\n  });","file":"runner/run_workers_test.js","skipped":false,"dir":"test"},{"name":"should run with 3 sessions","suites":["CodeceptJS session"],"updatePoint":{"line":17,"column":32,"index":538},"line":17,"code":"  it('should run with 3 sessions', done => {\n    exec(`${codecept_run} --steps --grep \"@1\"`, (err, stdout) => {\n      const lines = stdout.match(/\\S.+/g);\n      const list = grepLines(lines, 'basic session @1');\n      list.pop();\n      testStatus = list.pop();\n      testStatus.should.include('OK');\n      list.should.eql(['I do \"writing\"', 'davert: I do \"reading\"', 'I do \"playing\"', 'john: I do \"crying\"', 'davert: I do \"smiling\"', 'I do \"laughing\"', 'mike: I do \"spying\"', 'john: I do \"lying\"', 'I do \"waving\"'], 'check steps execution order');\n      done();\n    });\n  });","file":"runner/session_test.js","skipped":false,"dir":"test"},{"name":"should run session defined before executing","suites":["CodeceptJS session"],"updatePoint":{"line":28,"column":49,"index":1131},"line":28,"code":"  it('should run session defined before executing', done => {\n    exec(`${codecept_run} --steps --grep \"@2\"`, (err, stdout) => {\n      const lines = stdout.match(/\\S.+/g);\n      const list = grepLines(lines, 'session defined not used @2');\n      list.pop();\n      testStatus = list.pop();\n      testStatus.should.include('OK');\n      list.should.eql(['I do \"writing\"', 'I do \"playing\"', 'john: I do \"crying\"', 'davert: I do \"smiling\"', 'I do \"laughing\"', 'davert: I do \"singing\"', 'I do \"waving\"'], 'check steps execution order');\n      done();\n    });\n  });","file":"runner/session_test.js","skipped":false,"dir":"test"},{"name":"should run all session tests","suites":["CodeceptJS session"],"updatePoint":{"line":39,"column":34,"index":1675},"line":39,"code":"  it('should run all session tests', done => {\n    exec(`${codecept_run} --steps`, (err, stdout) => {\n      const lines = stdout.match(/\\S.+/g);\n      const testStatus = lines.pop();\n      testStatus.should.include('passed');\n      testStatus.should.not.include(' 1 ', 'more than 1 test expected');\n      done();\n    });\n  });","file":"runner/session_test.js","skipped":false,"dir":"test"},{"name":"should skip test with skip","suites":["Skip"],"updatePoint":{"line":11,"column":32,"index":389},"line":11,"code":"  it('should skip test with skip', done => {\n    exec(`${codecept_run}`, (err, stdout) => {\n      stdout.should.include('S @skip');\n      stdout.should.include('S @skip with opts');\n      stdout.should.not.include('skip test not passed');\n      stdout.should.include('✔ @NotSkip in');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/skip_test.js","skipped":false,"dir":"test"},{"name":"should correctly pass custom opts for skip test","suites":["Skip"],"updatePoint":{"line":21,"column":53,"index":743},"line":21,"code":"  it('should correctly pass custom opts for skip test', done => {\n    exec(`${codecept_run}`, (err, stdout) => {\n      stdout.should.include('test @skip with opts was marked for skip with customOpts: \"Custom options for skip\"');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/skip_test.js","skipped":false,"dir":"test"},{"name":"should stop test, when step timeout exceeded","suites":["CodeceptJS Steps"],"updatePoint":{"line":16,"column":50,"index":513},"line":16,"code":"  it('should stop test, when step timeout exceeded', done => {\n    exec(config_run_config('codecept-1000.conf.js', 'Default command timeout'), (err, stdout) => {\n      debug_this_test && console.log(stdout);\n      expect(stdout).toContain('Action exceededByTimeout: 1500 was interrupted on step timeout 1000ms');\n      expect(stdout).toContain('0 passed, 1 failed');\n      expect(stdout).toContain('- I.exceededByTimeout(1500)');\n      expect(err).toBeTruthy();\n      done();\n    });\n  });","file":"runner/step_timeout_test.js","skipped":false,"dir":"test"},{"name":"should respect custom timeout with regex","suites":["CodeceptJS Steps"],"updatePoint":{"line":26,"column":46,"index":999},"line":26,"code":"  it('should respect custom timeout with regex', done => {\n    exec(config_run_config('codecept-1000.conf.js', 'Wait with longer timeout', debug_this_test), (err, stdout) => {\n      debug_this_test && console.log(stdout);\n      expect(stdout).not.toContain('was interrupted on step timeout');\n      expect(stdout).toContain('1 passed');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/step_timeout_test.js","skipped":false,"dir":"test"},{"name":"should respect custom timeout with full step name","suites":["CodeceptJS Steps"],"updatePoint":{"line":35,"column":55,"index":1404},"line":35,"code":"  it('should respect custom timeout with full step name', done => {\n    exec(config_run_config('codecept-1000.conf.js', 'Wait with shorter timeout', debug_this_test), (err, stdout) => {\n      debug_this_test && console.log(stdout);\n      expect(stdout).toContain('Action waitTadShorter: 750 was interrupted on step timeout 500ms');\n      expect(stdout).toContain('0 passed, 1 failed');\n      expect(err).toBeTruthy();\n      done();\n    });\n  });","file":"runner/step_timeout_test.js","skipped":false,"dir":"test"},{"name":"should not stop test, when step not exceeded","suites":["CodeceptJS Steps"],"updatePoint":{"line":44,"column":50,"index":1845},"line":44,"code":"  it('should not stop test, when step not exceeded', done => {\n    exec(config_run_config('codecept-2000.conf.js', 'Default command timeout'), (err, stdout) => {\n      debug_this_test && console.log(stdout);\n      expect(stdout).not.toContain('was interrupted on step timeout');\n      expect(stdout).toContain('1 passed');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/step_timeout_test.js","skipped":false,"dir":"test"},{"name":"should ignore timeout for steps with `wait*` prefix","suites":["CodeceptJS Steps"],"updatePoint":{"line":53,"column":57,"index":2234},"line":53,"code":"  it('should ignore timeout for steps with `wait*` prefix', done => {\n    exec(config_run_config('codecept-1000.conf.js', 'Wait command timeout'), (err, stdout) => {\n      debug_this_test && console.log(stdout);\n      expect(stdout).not.toContain('was interrupted on step timeout');\n      expect(stdout).toContain('1 passed');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/step_timeout_test.js","skipped":false,"dir":"test"},{"name":"step timeout should work nicely with step retries","suites":["CodeceptJS Steps"],"updatePoint":{"line":62,"column":55,"index":2618},"line":62,"code":"  it('step timeout should work nicely with step retries', done => {\n    exec(config_run_config('codecept-1000.conf.js', 'Rerun sleep', true), (err, stdout) => {\n      debug_this_test && console.log(stdout);\n      expect(stdout).not.toContain('was interrupted on step timeout');\n      expect(stdout).toContain('1 passed');\n      expect(stdout).toContain('Retrying... Attempt #2');\n      expect(stdout).toContain('Retrying... Attempt #3');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/step_timeout_test.js","skipped":false,"dir":"test"},{"name":"should stop test when timeout exceeded","suites":["CodeceptJS Timeouts"],"updatePoint":{"line":16,"column":44,"index":507},"line":16,"code":"  it('should stop test when timeout exceeded', done => {\n    exec(config_run_config('codecept.conf.js', 'timed out'), (err, stdout) => {\n      debug_this_test && console.log(stdout);\n      expect(stdout).toContain('Timeout 2s exceeded');\n      expect(stdout).toContain('Timeout 1s exceeded');\n      expect(err).toBeTruthy();\n      done();\n    });\n  });","file":"runner/timeout_test.js","skipped":false,"dir":"test"},{"name":"should take --no-timeouts option","suites":["CodeceptJS Timeouts"],"updatePoint":{"line":25,"column":38,"index":854},"line":25,"code":"  it('should take --no-timeouts option', done => {\n    exec(`${config_run_config('codecept.conf.js', 'timed out')} --no-timeouts`, (err, stdout) => {\n      debug_this_test && console.log(stdout);\n      expect(stdout).toContain('Timeouts were disabled');\n      expect(stdout).not.toContain('Timeout 2s exceeded');\n      expect(stdout).not.toContain('Timeout 1s exceeded');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/timeout_test.js","skipped":false,"dir":"test"},{"name":"should ignore timeouts if no timeout","suites":["CodeceptJS Timeouts"],"updatePoint":{"line":35,"column":42,"index":1289},"line":35,"code":"  it('should ignore timeouts if no timeout', done => {\n    exec(config_run_config('codecept.conf.js', 'no timeout test'), (err, stdout) => {\n      debug_this_test && console.log(stdout);\n      expect(stdout).not.toContain('Timeout');\n      expect(err).toBeFalsy();\n      done();\n    });\n  });","file":"runner/timeout_test.js","skipped":false,"dir":"test"},{"name":"should use global timeouts if timeout is set","suites":["CodeceptJS Timeouts"],"updatePoint":{"line":43,"column":50,"index":1590},"line":43,"code":"  it('should use global timeouts if timeout is set', done => {\n    exec(config_run_config('codecept.timeout.conf.js', 'no timeout test'), (err, stdout) => {\n      debug_this_test && console.log(stdout);\n      expect(stdout).toContain('Timeout 0.1');\n      expect(err).toBeTruthy();\n      done();\n    });\n  });","file":"runner/timeout_test.js","skipped":false,"dir":"test"},{"name":"should prefer step timeout","suites":["CodeceptJS Timeouts"],"updatePoint":{"line":51,"column":32,"index":1882},"line":51,"code":"  it('should prefer step timeout', done => {\n    exec(config_run_config('codecept.conf.js', 'timeout step', true), (err, stdout) => {\n      debug_this_test && console.log(stdout);\n      expect(stdout).toContain('was interrupted on step timeout 100ms');\n      expect(err).toBeTruthy();\n      done();\n    });\n  });","file":"runner/timeout_test.js","skipped":false,"dir":"test"},{"name":"should keep timeout with steps","suites":["CodeceptJS Timeouts"],"updatePoint":{"line":59,"column":36,"index":2199},"line":59,"code":"  it('should keep timeout with steps', done => {\n    exec(config_run_config('codecept.timeout.conf.js', 'timeout step', true), (err, stdout) => {\n      debug_this_test && console.log(stdout);\n      expect(stdout).toContain('was interrupted on step timeout 100ms');\n      expect(err).toBeTruthy();\n      done();\n    });\n  });","file":"runner/timeout_test.js","skipped":false,"dir":"test"},{"name":"should skip test with todo","suites":["Todo"],"updatePoint":{"line":11,"column":32,"index":389},"line":11,"code":"  it('should skip test with todo', done => {\n    exec(`${codecept_run}`, (err, stdout) => {\n      stdout.should.include('S @todo');\n      stdout.should.include('S @todo without function');\n      stdout.should.not.include('todo test not passed');\n      stdout.should.include('✔ @NotTodo in');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/todo_test.js","skipped":false,"dir":"test"},{"name":"should skip inject skipinfo to todo test","suites":["Todo"],"updatePoint":{"line":21,"column":46,"index":743},"line":21,"code":"  it('should skip inject skipinfo to todo test', done => {\n    exec(`${codecept_run}`, (err, stdout) => {\n      stdout.should.include('test @todo was marked for todo with message: Test not implemented!');\n      stdout.should.include('test @todo without function was marked for todo with message: Test not implemented!');\n      stdout.should.not.include('test @NotTodo was marked for todo with message: Test not implemented!');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/todo_test.js","skipped":false,"dir":"test"},{"name":"should correctly pass custom opts for todo test","suites":["Todo"],"updatePoint":{"line":30,"column":53,"index":1225},"line":30,"code":"  it('should correctly pass custom opts for todo test', done => {\n    exec(`${codecept_run}`, (err, stdout) => {\n      stdout.should.include('test @todo with opts was marked for todo with customOpts: \"Custom options for todo\"');\n      assert(!err);\n      done();\n    });\n  });","file":"runner/todo_test.js","skipped":false,"dir":"test"},{"name":"Should run translated test file","suites":["Translation"],"updatePoint":{"line":11,"column":37,"index":408},"line":11,"code":"  it('Should run translated test file', done => {\n    exec(`${codecept_run}`, err => {\n      assert(!err);\n      done();\n    });\n  });","file":"runner/translation_test.js","skipped":false,"dir":"test"},{"name":"should execute if no generators","suites":["CodeceptJS within"],"updatePoint":{"line":18,"column":37,"index":557},"line":18,"code":"  it('should execute if no generators', done => {\n    exec(`${codecept_run} --debug`, (_err, stdout) => {\n      const lines = stdout.match(/\\S.+/g);\n      const withoutGeneratorList = grepLines(lines, 'Check within without generator', 'Check within with generator. Yield is first in order');\n      testStatus = withoutGeneratorList.pop();\n      testStatus.should.include('OK');\n      withoutGeneratorList.should.eql(['I small promise ', 'I small  Promise was finished ', 'I  Hey!  I am within  Begin.  I get blabla ', 'Within \"blabla\" ', 'I small promise ', 'I small  Promise was finished ', 'I oh!  I am within end( '], 'check steps execution order');\n      done();\n    });\n  });","file":"runner/within_test.js","skipped":false,"dir":"test"},{"name":"should execute with async/await. Await is first in order","suites":["CodeceptJS within"],"updatePoint":{"line":28,"column":62,"index":1263},"line":28,"code":"  it('should execute with async/await. Await is first in order', done => {\n    exec(`${codecept_run} --debug`, (_err, stdout) => {\n      const lines = stdout.match(/\\S.+/g);\n      const withGeneratorList = grepLines(lines, 'Check within with async/await. Await is first in order', 'Check within with async/await. Await is second in order');\n      testStatus = withGeneratorList.pop();\n      testStatus.should.include('OK');\n      withGeneratorList.should.eql(['I small promise ', 'I small  Promise was finished ', 'I small yield ', 'I am small yield string await', 'I  Hey!  I am within  Begin.  I get blabla ', 'Within \"blabla\" ', 'I small yield ', 'I am small yield string await', 'I small promise ', 'I small  Promise was finished ', 'I oh!  I am within end( '], 'check steps execution order');\n      done();\n    });\n  });","file":"runner/within_test.js","skipped":false,"dir":"test"},{"name":"should execute with async/await. Await is second in order","suites":["CodeceptJS within"],"updatePoint":{"line":38,"column":63,"index":2090},"line":38,"code":"  it('should execute with async/await. Await is second in order', done => {\n    exec(`${codecept_run} --debug`, (_err, stdout) => {\n      const lines = stdout.match(/\\S.+/g);\n      const withGeneratorList = grepLines(lines, 'Check within with async/await. Await is second in order', '-- FAILURES:');\n      testStatus = withGeneratorList.pop();\n      testStatus.should.include('OK');\n      withGeneratorList.should.eql(['I small promise ', 'I small  Promise was finished ', 'I small yield ', 'I am small yield string await', 'I  Hey!  I am within  Begin.  I get blabla ', 'Within \"blabla\" ', 'I small promise ', 'I small  Promise was finished ', 'I small yield ', 'I am small yield string await', 'I oh!  I am within end( '], 'check steps execution order');\n      done();\n    });\n  });","file":"runner/within_test.js","skipped":false,"dir":"test"},{"name":"should init actor on store","suites":["Actor"],"updatePoint":{"line":41,"column":32,"index":991},"line":41,"code":"  it('should init actor on store', () => {\n    const store = require('../../lib/store');\n\n    expect(store.actor).toBeTruthy();\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should collect pageobject methods in actor","suites":["Actor"],"updatePoint":{"line":46,"column":48,"index":1141},"line":46,"code":"  it('should collect pageobject methods in actor', () => {\n    const poI = actor({\n      customStep: () => {}\n    });\n    expect(poI).toHaveProperty('customStep');\n    expect(I).toHaveProperty('customStep');\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should correct run step from Helper inside PageObject","suites":["Actor"],"updatePoint":{"line":53,"column":59,"index":1366},"line":53,"code":"  it('should correct run step from Helper inside PageObject', () => {\n    actor({\n      customStep() {\n        return this.hello();\n      }\n\n    });\n    recorder.start();\n    const promise = I.customStep();\n    return promise.then(val => expect(val).toEqual('hello world'));\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should init pageobject methods as metastep","suites":["Actor"],"updatePoint":{"line":64,"column":48,"index":1636},"line":64,"code":"  it('should init pageobject methods as metastep', () => {\n    actor({\n      customStep: () => 3\n    });\n    expect(I.customStep()).toEqual(3);\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should correct add translation for step from Helper","suites":["Actor"],"updatePoint":{"line":70,"column":57,"index":1795},"line":70,"code":"  it('should correct add translation for step from Helper', () => {\n    expect(I).toHaveProperty('привет');\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should correct add translation for step from PageObject","suites":["Actor"],"updatePoint":{"line":73,"column":61,"index":1913},"line":73,"code":"  it('should correct add translation for step from PageObject', () => {\n    container.translation().vocabulary.actions.customStep = 'кастомный_шаг';\n    actor({\n      customStep: () => 3\n    });\n    expect(I).toHaveProperty('кастомный_шаг');\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should take all methods from helpers and built in","suites":["Actor"],"updatePoint":{"line":80,"column":55,"index":2155},"line":80,"code":"  it('should take all methods from helpers and built in', () => {\n    ['hello', 'bye', 'die', 'failAfter', 'say', 'retry', 'greeting'].forEach(key => {\n      expect(I).toHaveProperty(key);\n    });\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should return promise","suites":["Actor"],"updatePoint":{"line":85,"column":27,"index":2330},"line":85,"code":"  it('should return promise', () => {\n    recorder.start();\n    const promise = I.hello();\n    expect(promise).toBeInstanceOf(Promise);\n    return promise.then(val => expect(val).toEqual('hello world'));\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should produce step events","suites":["Actor"],"updatePoint":{"line":91,"column":32,"index":2545},"line":91,"code":"  it('should produce step events', () => {\n    recorder.start();\n    let listeners = 0;\n    event.dispatcher.addListener(event.step.before, () => listeners++);\n    event.dispatcher.addListener(event.step.after, () => listeners++);\n    event.dispatcher.addListener(event.step.passed, step => {\n      listeners++;\n      expect(step.endTime).toBeTruthy();\n      expect(step.startTime).toBeTruthy();\n    });\n    return I.hello().then(() => {\n      expect(listeners).toEqual(3);\n    });\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should retry failed step with #retry","suites":["Actor"],"updatePoint":{"line":105,"column":42,"index":3043},"line":105,"code":"  it('should retry failed step with #retry', () => {\n    recorder.start();\n    return I.retry({\n      retries: 2,\n      minTimeout: 0\n    }).failAfter(1);\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should retry once step with #retry","suites":["Actor"],"updatePoint":{"line":112,"column":40,"index":3202},"line":112,"code":"  it('should retry once step with #retry', () => {\n    recorder.start();\n    return I.retry().failAfter(1);\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should alway use the latest global retry options","suites":["Actor"],"updatePoint":{"line":116,"column":54,"index":3330},"line":116,"code":"  it('should alway use the latest global retry options', () => {\n    recorder.start();\n    recorder.retry({\n      retries: 0,\n      minTimeout: 0,\n      when: () => true\n    });\n    recorder.retry({\n      retries: 1,\n      minTimeout: 0,\n      when: () => true\n    });\n    I.hello(); // before fix: this changed the order of retries\n\n    return I.failAfter(1);\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should not delete a global retry option","suites":["Actor"],"updatePoint":{"line":132,"column":45,"index":3688},"line":132,"code":"  it('should not delete a global retry option', () => {\n    recorder.start();\n    recorder.retry({\n      retries: 2,\n      minTimeout: 0,\n      when: () => true\n    });\n    I.retry(1).failAfter(1); // before fix: this changed the order of retries\n\n    return I.failAfter(2);\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should print handle failed steps","suites":["Actor"],"updatePoint":{"line":143,"column":38,"index":3962},"line":143,"code":"  it('should print handle failed steps', () => {\n    recorder.start();\n    let listeners = 0;\n    event.dispatcher.addListener(event.step.before, () => listeners++);\n    event.dispatcher.addListener(event.step.after, () => listeners++);\n    event.dispatcher.addListener(event.step.failed, step => {\n      listeners++;\n      expect(step.endTime).toBeTruthy();\n      expect(step.startTime).toBeTruthy();\n    });\n    return I.die().then(() => listeners = 0).catch(() => null).then(() => {\n      expect(listeners).toEqual(3);\n    });\n  });","file":"unit/actor_test.js","skipped":false,"dir":"test"},{"name":"should handle asserts","suites":["Assertion"],"updatePoint":{"line":16,"column":27,"index":328},"line":16,"code":"  it('should handle asserts', () => {\n    assertion.assert(1, 1);\n    expect(() => assertion.assert(1, 2)).to.throw(AssertionError);\n  });","file":"unit/assert_test.js","skipped":false,"dir":"test"},{"name":"should handle negative asserts","suites":["Assertion"],"updatePoint":{"line":20,"column":36,"index":476},"line":20,"code":"  it('should handle negative asserts', () => {\n    assertion.negate(1, 2);\n    expect(() => assertion.negate(1, 1)).to.throw(AssertionError);\n  });","file":"unit/assert_test.js","skipped":false,"dir":"test"},{"name":"should check for something to be empty","suites":["empty assertion"],"updatePoint":{"line":18,"column":44,"index":345},"line":18,"code":"  it('should check for something to be empty', () => {\n    empty.assert(null);\n    expect(() => empty.negate(null)).to.throw(AssertionError);\n  });","file":"unit/assert/empty_test.js","skipped":false,"dir":"test"},{"name":"should check for something not to be empty","suites":["empty assertion"],"updatePoint":{"line":22,"column":48,"index":497},"line":22,"code":"  it('should check for something not to be empty', () => {\n    empty.negate('something');\n    expect(() => empty.assert('something')).to.throw(AssertionError);\n  });","file":"unit/assert/empty_test.js","skipped":false,"dir":"test"},{"name":"should provide nice assert error message","suites":["empty assertion"],"updatePoint":{"line":26,"column":46,"index":661},"line":26,"code":"  it('should provide nice assert error message', () => {\n    empty.params.value = '/nothing';\n    const err = empty.getFailedAssertion();\n    expect(err.inspect()).to.equal(\"expected web page '/nothing' to be empty\");\n  });","file":"unit/assert/empty_test.js","skipped":false,"dir":"test"},{"name":"should provide nice negate error message","suites":["empty assertion"],"updatePoint":{"line":31,"column":46,"index":885},"line":31,"code":"  it('should provide nice negate error message', () => {\n    empty.params.value = '/nothing';\n    const err = empty.getFailedNegation();\n    expect(err.inspect()).to.equal(\"expected web page '/nothing' not to be empty\");\n  });","file":"unit/assert/empty_test.js","skipped":false,"dir":"test"},{"name":"should check for equality","suites":["equal assertion"],"updatePoint":{"line":18,"column":31,"index":339},"line":18,"code":"  it('should check for equality', () => {\n    equal.assert('hello', 'hello');\n    expect(() => equal.negate('hello', 'hello')).to.throw(AssertionError);\n  });","file":"unit/assert/equal_test.js","skipped":false,"dir":"test"},{"name":"should check for something not to be equal","suites":["equal assertion"],"updatePoint":{"line":22,"column":48,"index":515},"line":22,"code":"  it('should check for something not to be equal', () => {\n    equal.negate('hello', 'hi');\n    expect(() => equal.assert('hello', 'hi')).to.throw(AssertionError);\n  });","file":"unit/assert/equal_test.js","skipped":false,"dir":"test"},{"name":"should provide nice assert error message","suites":["equal assertion"],"updatePoint":{"line":26,"column":46,"index":683},"line":26,"code":"  it('should provide nice assert error message', () => {\n    equal.params.expected = 'hello';\n    equal.params.actual = 'hi';\n    const err = equal.getFailedAssertion();\n    expect(err.inspect()).to.equal('expected contents of webpage \"hello\" to equal \"hi\"');\n  });","file":"unit/assert/equal_test.js","skipped":false,"dir":"test"},{"name":"should provide nice negate error message","suites":["equal assertion"],"updatePoint":{"line":32,"column":46,"index":949},"line":32,"code":"  it('should provide nice negate error message', () => {\n    equal.params.expected = 'hello';\n    equal.params.actual = 'hello';\n    const err = equal.getFailedNegation();\n    expect(err.inspect()).to.equal('expected contents of webpage \"hello\" not to equal \"hello\"');\n  });","file":"unit/assert/equal_test.js","skipped":false,"dir":"test"},{"name":"should check for inclusion","suites":["equal assertion"],"updatePoint":{"line":16,"column":32,"index":346},"line":16,"code":"  it('should check for inclusion', () => {\n    equal.assert('h', 'hello');\n    expect(() => equal.negate('h', 'hello')).to.throw(AssertionError);\n  });","file":"unit/assert/include_test.js","skipped":false,"dir":"test"},{"name":"should check !include","suites":["equal assertion"],"updatePoint":{"line":20,"column":27,"index":493},"line":20,"code":"  it('should check !include', () => {\n    equal.negate('x', 'hello');\n    expect(() => equal.assert('x', 'hello')).to.throw(AssertionError);\n  });","file":"unit/assert/include_test.js","skipped":false,"dir":"test"},{"name":"should provide nice assert error message","suites":["equal assertion"],"updatePoint":{"line":24,"column":46,"index":659},"line":24,"code":"  it('should provide nice assert error message', () => {\n    equal.params.needle = 'hello';\n    equal.params.haystack = 'x';\n    const err = equal.getFailedAssertion();\n    expect(err.inspect()).to.equal('expected contents of webpage to include \"hello\"');\n  });","file":"unit/assert/include_test.js","skipped":false,"dir":"test"},{"name":"should provide nice negate error message","suites":["equal assertion"],"updatePoint":{"line":30,"column":46,"index":921},"line":30,"code":"  it('should provide nice negate error message', () => {\n    equal.params.needle = 'hello';\n    equal.params.haystack = 'h';\n    const err = equal.getFailedNegation();\n    expect(err.inspect()).to.equal('expected contents of webpage not to include \"hello\"');\n  });","file":"unit/assert/include_test.js","skipped":false,"dir":"test"},{"name":"should parse gherkin input","suites":["BDD"],"updatePoint":{"line":66,"column":32,"index":1174},"line":66,"code":"  it('should parse gherkin input', () => {\n    const parser = new Parser();\n    parser.stopAtFirstError = false;\n    const ast = parser.parse(text); // console.log('Feature', ast.feature);\n    // console.log('Scenario', ast.feature.children);\n    // console.log('Steps', ast.feature.children[0].steps[0]);\n\n    expect(ast.feature).is.ok;\n    expect(ast.feature.children).is.ok;\n    expect(ast.feature.children[0].steps).is.ok;\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should load step definitions","suites":["BDD"],"updatePoint":{"line":77,"column":34,"index":1609},"line":77,"code":"  it('should load step definitions', () => {\n    Given('I am a bird', () => 1);\n    When('I fly over ocean', () => 2);\n    And(/^I fly over land$/i, () => 3);\n    Then(/I see (.*?)/, () => 4);\n    expect(1).is.equal(matchStep('I am a bird')());\n    expect(3).is.equal(matchStep('I Fly oVer Land')());\n    expect(4).is.equal(matchStep('I see ocean')());\n    expect(4).is.equal(matchStep('I see world')());\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should fail on duplicate step definitions with option","suites":["BDD"],"updatePoint":{"line":87,"column":59,"index":2045},"line":87,"code":"  it('should fail on duplicate step definitions with option', () => {\n    Config.append({\n      gherkin: {\n        avoidDuplicateSteps: true\n      }\n    });\n    let error = null;\n\n    try {\n      Given('I am a bird', () => 1);\n      Then('I am a bird', () => 1);\n    } catch (err) {\n      error = err;\n    } finally {\n      expect(!!error).is.true;\n    }\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should contain tags","suites":["BDD"],"updatePoint":{"line":104,"column":25,"index":2372},"line":104,"code":"  it('should contain tags', async () => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', () => sum += 10);\n    const suite = run(text);\n    suite.tests[0].fn(() => {});\n    expect(suite.tests[0].tags).is.ok;\n    expect('@super').is.equal(suite.tests[0].tags[0]);\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should load step definitions","suites":["BDD"],"updatePoint":{"line":113,"column":34,"index":2740},"line":113,"code":"  it('should load step definitions', done => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', () => sum += 10);\n    const suite = run(text);\n    expect('checkout process').is.equal(suite.title);\n    suite.tests[0].fn(() => {\n      expect(suite.tests[0].steps).is.ok;\n      expect(1610).is.equal(sum);\n      done();\n    });\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should allow failed steps","suites":["BDD"],"updatePoint":{"line":125,"column":31,"index":3156},"line":125,"code":"  it('should allow failed steps', async () => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', () => expect(false).is.true);\n    const suite = run(text);\n    expect('checkout process').is.equal(suite.title);\n\n    try {\n      await checkTestForErrors(suite.tests[0]);\n      return Promise.reject(new Error('Test should have thrown with failed step, but did not'));\n    } catch (err) {\n      const errored = !!err;\n      expect(errored).is.true;\n    }\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"handles errors in steps","suites":["BDD"],"updatePoint":{"line":140,"column":29,"index":3700},"line":140,"code":"  it('handles errors in steps', async () => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', () => {\n      throw new Error('errored step');\n    });\n    const suite = run(text);\n    expect('checkout process').is.equal(suite.title);\n\n    try {\n      await checkTestForErrors(suite.tests[0]);\n      return Promise.reject(new Error('Test should have thrown with error, but did not'));\n    } catch (err) {\n      const errored = !!err;\n      expect(errored).is.true;\n    }\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"handles async errors in steps","suites":["BDD"],"updatePoint":{"line":157,"column":35,"index":4269},"line":157,"code":"  it('handles async errors in steps', async () => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', () => Promise.reject(new Error('step failed')));\n    const suite = run(text);\n    expect('checkout process').is.equal(suite.title);\n\n    try {\n      await checkTestForErrors(suite.tests[0]);\n      return Promise.reject(new Error('Test should have thrown with error, but did not'));\n    } catch (err) {\n      const errored = !!err;\n      expect(errored).is.true;\n    }\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should work with async functions","suites":["BDD"],"updatePoint":{"line":172,"column":38,"index":4835},"line":172,"code":"  it('should work with async functions', done => {\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, param => sum += parseInt(param, 10));\n    When('I go to checkout process', async () => {\n      return new Promise(checkoutDone => {\n        sum += 10;\n        setTimeout(checkoutDone, 0);\n      });\n    });\n    const suite = run(text);\n    expect('checkout process').is.equal(suite.title);\n    suite.tests[0].fn(() => {\n      expect(suite.tests[0].steps).is.ok;\n      expect(1610).is.equal(sum);\n      done();\n    });\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should execute scenarios step-by-step ","suites":["BDD"],"updatePoint":{"line":189,"column":44,"index":5377},"line":189,"code":"  it('should execute scenarios step-by-step ', done => {\n    printed = [];\n    container.append({\n      helpers: {\n        simple: {\n          do(...args) {\n            return Promise.resolve().then(() => printed.push(args.join(' ')));\n          }\n\n        }\n      }\n    });\n    I = actor();\n    let sum = 0;\n    Given(/I have product with (\\d+) price/, price => {\n      I.do('add', sum += parseInt(price, 10));\n    });\n    When('I go to checkout process', () => {\n      I.do('add finish checkout');\n    });\n    const suite = run(text);\n    suite.tests[0].fn(() => {\n      recorder.promise().then(() => {\n        printed.should.include.members(['add 600', 'add 1600', 'add finish checkout']);\n        const lines = recorder.scheduled().split('\\n');\n        lines.should.include.members(['do: \"add\", 600', 'step passed', 'return result', 'do: \"add\", 1600', 'step passed', 'return result', 'do: \"add finish checkout\"', 'step passed', 'return result', 'fire test.passed', 'finish test']);\n        done();\n      });\n    });\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should match step with params","suites":["BDD"],"updatePoint":{"line":219,"column":35,"index":6394},"line":219,"code":"  it('should match step with params', () => {\n    Given('I am a {word}', param => param);\n    const fn = matchStep('I am a bird');\n    expect('bird').is.equal(fn.params[0]);\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should produce step events","suites":["BDD"],"updatePoint":{"line":224,"column":32,"index":6571},"line":224,"code":"  it('should produce step events', done => {\n    const text = `\n    Feature: Emit step event\n\n      Scenario:\n        Then I emit step events\n    `;\n    Then('I emit step events', () => {});\n    let listeners = 0;\n    event.dispatcher.addListener(event.bddStep.before, () => listeners++);\n    event.dispatcher.addListener(event.bddStep.after, () => listeners++);\n    const suite = run(text);\n    suite.tests[0].fn(() => {\n      listeners.should.eql(2);\n      done();\n    });\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should use shortened form for step definitions","suites":["BDD"],"updatePoint":{"line":241,"column":52,"index":7072},"line":241,"code":"  it('should use shortened form for step definitions', () => {\n    let fn;\n    Given('I am a {word}', params => params[0]);\n    When('I have {int} wings and {int} eyes', params => params[0] + params[1]);\n    Given('I have ${int} in my pocket', params => params[0]); // eslint-disable-line no-template-curly-in-string\n\n    Given('I have also ${float} in my pocket', params => params[0]); // eslint-disable-line no-template-curly-in-string\n\n    fn = matchStep('I am a bird');\n    expect('bird').is.equal(fn(fn.params));\n    fn = matchStep('I have 2 wings and 2 eyes');\n    expect(4).is.equal(fn(fn.params));\n    fn = matchStep('I have $500 in my pocket');\n    expect(500).is.equal(fn(fn.params));\n    fn = matchStep('I have also $500.30 in my pocket');\n    expect(500.30).is.equal(fn(fn.params));\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should attach before hook for Background","suites":["BDD"],"updatePoint":{"line":258,"column":46,"index":7867},"line":258,"code":"  it('should attach before hook for Background', () => {\n    const text = `\n    Feature: checkout process\n\n      Background:\n        Given I am logged in as customer\n\n      Scenario:\n        Then I am shopping\n    `;\n    let sum = 0;\n    Given('I am logged in as customer', () => sum++);\n    Then('I am shopping', () => sum++);\n    const suite = run(text);\n\n    const done = () => {};\n\n    suite._beforeEach.forEach(hook => hook.run(done));\n\n    suite.tests[0].fn(done);\n    expect(2).is.equal(sum);\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should execute scenario outlines","suites":["BDD"],"updatePoint":{"line":280,"column":38,"index":8365},"line":280,"code":"  it('should execute scenario outlines', done => {\n    const text = `\n    @awesome @cool\n    Feature: checkout process\n\n    @super\n    Scenario Outline: order discount\n      Given I have product with price <price>$ in my cart\n      And discount is 10 %\n      Then I should see price is \"<total>\" $\n\n      Examples:\n        | price | total |\n        | 10    | 9     |\n\n      @exampleTag1\n      @exampleTag2\n      Examples:\n        | price | total |\n        | 20    | 18    |\n    `;\n    let cart = 0;\n    let sum = 0;\n    Given('I have product with price {int}$ in my cart', price => {\n      cart = price;\n    });\n    Given('discount is {int} %', discount => {\n      cart -= cart * discount / 100;\n    });\n    Then('I should see price is {string} $', total => {\n      sum = parseInt(total, 10);\n    });\n    const suite = run(text);\n    expect(suite.tests[0].tags).is.ok;\n    expect(['@awesome', '@cool', '@super']).is.deep.equal(suite.tests[0].tags);\n    expect(['@awesome', '@cool', '@super', '@exampleTag1', '@exampleTag2']).is.deep.equal(suite.tests[1].tags);\n    expect(2).is.equal(suite.tests.length);\n    suite.tests[0].fn(() => {\n      expect(9).is.equal(cart);\n      expect(9).is.equal(sum);\n      suite.tests[1].fn(() => {\n        expect(18).is.equal(cart);\n        expect(18).is.equal(sum);\n        done();\n      });\n    });\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should provide a parsed DataTable","suites":["BDD"],"updatePoint":{"line":327,"column":39,"index":9705},"line":327,"code":"  it('should provide a parsed DataTable', done => {\n    const text = `\n    @awesome @cool\n    Feature: checkout process\n\n    @super\n    Scenario: order products\n      Given I have the following products :\n        | label   | price  |\n        | beer    | 9      |\n        | cookies | 12     |\n      Then I should see the following products :\n        | label   | price  |\n        | beer    | 9      |\n        | cookies | 12     |\n    `;\n    let givenParsedRows;\n    let thenParsedRows;\n    Given('I have the following products :', products => {\n      givenParsedRows = products.parse();\n    });\n    Then('I should see the following products :', products => {\n      thenParsedRows = products.parse();\n    });\n    const suite = run(text);\n    const expectedParsedDataTable = [['label', 'price'], ['beer', '9'], ['cookies', '12']];\n    suite.tests[0].fn(() => {\n      expect(givenParsedRows.rawData).is.deep.equal(expectedParsedDataTable);\n      expect(thenParsedRows.rawData).is.deep.equal(expectedParsedDataTable);\n      done();\n    });\n  });","file":"unit/bdd_test.js","skipped":false,"dir":"test"},{"name":"should be created","suites":["Config"],"updatePoint":{"line":9,"column":23,"index":171},"line":9,"code":"  it('should be created', () => {\n    const cfg = config.create({\n      output: './report'\n    });\n    expect(cfg).to.contain.keys(['helpers', 'plugins', 'include']);\n    expect(config.get()).to.eql(cfg);\n    expect(cfg.output).to.eql('./report');\n    expect(config.get('output')).to.eql('./report');\n    expect(config.get('output', './other')).to.eql('./report');\n    expect(config.get('tests', '**_test.js')).to.eql('**_test.js');\n  });","file":"unit/config_test.js","skipped":false,"dir":"test"},{"name":"should be completely reset","suites":["Config"],"updatePoint":{"line":20,"column":32,"index":619},"line":20,"code":"  it('should be completely reset', () => {\n    config.addHook(cfg => {\n      cfg.helpers.Puppeteer.show = true;\n    });\n    config.create({\n      tests: '**tests',\n      helpers: {\n        Puppeteer: {}\n      }\n    });\n    config.append({\n      output: './other'\n    });\n    expect(config.get('helpers').Puppeteer.show).to.eql(true);\n    config.reset();\n    expect(config.get().output).to.not.eql('./other');\n    expect(config.get()).to.not.contain.key('tests');\n    expect(config.get('helpers')).to.not.contain.key('Puppeteer');\n    config.create({\n      helpers: {\n        Puppeteer: {}\n      }\n    });\n    expect(config.get('helpers').Puppeteer.show).to.not.eql(true);\n  });","file":"unit/config_test.js","skipped":false,"dir":"test"},{"name":"can be updated","suites":["Config"],"updatePoint":{"line":45,"column":20,"index":1285},"line":45,"code":"  it('can be updated', () => {\n    config.create();\n    config.append({\n      output: './other'\n    });\n    expect(config.get('output')).to.eql('./other');\n  });","file":"unit/config_test.js","skipped":false,"dir":"test"},{"name":"should use config hooks to enhance configs","suites":["Config"],"updatePoint":{"line":52,"column":48,"index":1475},"line":52,"code":"  it('should use config hooks to enhance configs', () => {\n    config.addHook(cfg => {\n      cfg.additionalValue = true;\n    });\n    const cfg = config.create({\n      additionalValue: false\n    });\n    expect(cfg).to.contain.key('additionalValue');\n    expect(cfg.additionalValue).to.eql(true);\n  });","file":"unit/config_test.js","skipped":false,"dir":"test"},{"name":"should create empty translation","suites":["Container","#translation"],"updatePoint":{"line":30,"column":39,"index":738},"line":30,"code":"    it('should create empty translation', () => {\n      container.create({});\n      expect(container.translation()).to.be.instanceOf(Translation);\n      expect(container.translation().loaded).to.be.false;\n      expect(container.translation().actionAliasFor('see')).to.eql('see');\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should create Russian translation","suites":["Container","#translation"],"updatePoint":{"line":36,"column":41,"index":1028},"line":36,"code":"    it('should create Russian translation', () => {\n      container.create({\n        translation: 'ru-RU'\n      });\n      expect(container.translation()).to.be.instanceOf(Translation);\n      expect(container.translation().loaded).to.be.true;\n      expect(container.translation().I).to.eql('Я');\n      expect(container.translation().actionAliasFor('see')).to.eql('вижу');\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should create Italian translation","suites":["Container","#translation"],"updatePoint":{"line":45,"column":41,"index":1407},"line":45,"code":"    it('should create Italian translation', () => {\n      container.create({\n        translation: 'it-IT'\n      });\n      expect(container.translation()).to.be.instanceOf(Translation);\n      expect(container.translation().loaded).to.be.true;\n      expect(container.translation().I).to.eql('io');\n      expect(container.translation().value('contexts').Feature).to.eql('Caratteristica');\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should create French translation","suites":["Container","#translation"],"updatePoint":{"line":54,"column":40,"index":1800},"line":54,"code":"    it('should create French translation', () => {\n      container.create({\n        translation: 'fr-FR'\n      });\n      expect(container.translation()).to.be.instanceOf(Translation);\n      expect(container.translation().loaded).to.be.true;\n      expect(container.translation().I).to.eql('Je');\n      expect(container.translation().value('contexts').Feature).to.eql('Fonctionnalité');\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should create Portuguese translation","suites":["Container","#translation"],"updatePoint":{"line":63,"column":44,"index":2197},"line":63,"code":"    it('should create Portuguese translation', () => {\n      container.create({\n        translation: 'pt-BR'\n      });\n      expect(container.translation()).to.be.instanceOf(Translation);\n      expect(container.translation().loaded).to.be.true;\n      expect(container.translation().I).to.eql('Eu');\n      expect(container.translation().value('contexts').Feature).to.eql('Funcionalidade');\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should return all helper with no args","suites":["Container","#helpers"],"updatePoint":{"line":84,"column":45,"index":2804},"line":84,"code":"    it('should return all helper with no args', () => expect(container.helpers()).to.have.keys('helper1', 'helper2'));","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should return helper by name","suites":["Container","#helpers"],"updatePoint":{"line":85,"column":36,"index":2914},"line":85,"code":"    it('should return helper by name', () => {\n      expect(container.helpers('helper1')).is.ok;\n      expect(container.helpers('helper1').name).to.eql('hello');\n      expect(container.helpers('helper2')).is.ok;\n      expect(container.helpers('helper2').name).to.eql('world');\n      expect(!container.helpers('helper3')).is.ok;\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should return all support objects","suites":["Container","#support"],"updatePoint":{"line":104,"column":41,"index":3470},"line":104,"code":"    it('should return all support objects', () => expect(container.support()).to.have.keys('support1', 'support2'));","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should support object by name","suites":["Container","#support"],"updatePoint":{"line":105,"column":37,"index":3583},"line":105,"code":"    it('should support object by name', () => {\n      expect(container.support('support1')).is.ok;\n      expect(container.support('support1').name).to.eql('hello');\n      expect(container.support('support2')).is.ok;\n      expect(container.support('support2').name).to.eql('world');\n      expect(!container.support('support3')).is.ok;\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should return all plugins","suites":["Container","#plugins"],"updatePoint":{"line":124,"column":33,"index":4138},"line":124,"code":"    it('should return all plugins', () => expect(container.plugins()).to.have.keys('plugin1', 'plugin2'));","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should get plugin by name","suites":["Container","#plugins"],"updatePoint":{"line":125,"column":33,"index":4245},"line":125,"code":"    it('should get plugin by name', () => {\n      expect(container.plugins('plugin1')).is.ok;\n      expect(container.plugins('plugin1').name).is.eql('hello');\n      expect(container.plugins('plugin2')).is.ok;\n      expect(container.plugins('plugin2').name).is.eql('world');\n      expect(!container.plugins('plugin3')).is.ok;\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should create container with helpers","suites":["Container","#create"],"updatePoint":{"line":134,"column":44,"index":4625},"line":134,"code":"    it('should create container with helpers', () => {\n      const config = {\n        helpers: {\n          MyHelper: {\n            require: './data/helper'\n          },\n          FileSystem: {}\n        }\n      };\n      container.create(config); // custom helpers\n\n      expect(container.helpers('MyHelper')).is.ok;\n      expect(container.helpers('MyHelper').method()).to.eql('hello world'); // built-in helpers\n\n      expect(container.helpers('FileSystem')).is.ok;\n      expect(container.helpers('FileSystem')).to.be.instanceOf(FileSystem);\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should always create I","suites":["Container","#create"],"updatePoint":{"line":151,"column":30,"index":5160},"line":151,"code":"    it('should always create I', () => {\n      container.create({});\n      expect(container.support('I')).is.ok;\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should load DI and return a reference to the module","suites":["Container","#create"],"updatePoint":{"line":155,"column":59,"index":5310},"line":155,"code":"    it('should load DI and return a reference to the module', () => {\n      container.create({\n        include: {\n          dummyPage: './data/dummy_page'\n        }\n      });\n\n      const dummyPage = require('../data/dummy_page');\n\n      expect(container.support('dummyPage')).is.eql(dummyPage);\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should load I from path and execute _init","suites":["Container","#create"],"updatePoint":{"line":166,"column":49,"index":5604},"line":166,"code":"    it('should load I from path and execute _init', () => {\n      container.create({\n        include: {\n          I: './data/I'\n        }\n      });\n      expect(container.support('I')).is.ok;\n      expect(container.support('I')).to.include.keys('_init', 'doSomething');\n      expect(global.I_initialized).to.be.true;\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should load DI includes provided as require paths","suites":["Container","#create"],"updatePoint":{"line":176,"column":57,"index":5937},"line":176,"code":"    it('should load DI includes provided as require paths', () => {\n      container.create({\n        include: {\n          dummyPage: './data/dummy_page'\n        }\n      });\n      expect(container.support('dummyPage')).is.ok;\n      expect(container.support('dummyPage')).to.include.keys('openDummyPage');\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should load DI and inject I into PO","suites":["Container","#create"],"updatePoint":{"line":185,"column":43,"index":6235},"line":185,"code":"    it('should load DI and inject I into PO', () => {\n      container.create({\n        include: {\n          dummyPage: './data/dummy_page'\n        }\n      });\n      expect(container.support('dummyPage')).is.ok;\n      expect(container.support('I')).is.ok;\n      expect(container.support('dummyPage')).to.include.keys('openDummyPage');\n      expect(container.support('dummyPage').getI()).to.have.keys(Object.keys(container.support('I')));\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should load DI and inject custom I into PO","suites":["Container","#create"],"updatePoint":{"line":196,"column":50,"index":6687},"line":196,"code":"    it('should load DI and inject custom I into PO', () => {\n      container.create({\n        include: {\n          dummyPage: './data/dummy_page',\n          I: './data/I'\n        }\n      });\n      expect(container.support('dummyPage')).is.ok;\n      expect(container.support('I')).is.ok;\n      expect(container.support('dummyPage')).to.include.keys('openDummyPage');\n      expect(container.support('dummyPage').getI()).to.have.keys(Object.keys(container.support('I')));\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should load DI includes provided as objects","suites":["Container","#create"],"updatePoint":{"line":208,"column":51,"index":7165},"line":208,"code":"    it('should load DI includes provided as objects', () => {\n      container.create({\n        include: {\n          dummyPage: {\n            openDummyPage: () => 'dummy page opened'\n          }\n        }\n      });\n      expect(container.support('dummyPage')).is.ok;\n      expect(container.support('dummyPage')).to.include.keys('openDummyPage');\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should load DI includes provided as objects","suites":["Container","#create"],"updatePoint":{"line":219,"column":51,"index":7518},"line":219,"code":"    it('should load DI includes provided as objects', () => {\n      container.create({\n        include: {\n          dummyPage: {\n            openDummyPage: () => 'dummy page opened'\n          }\n        }\n      });\n      expect(container.support('dummyPage')).is.ok;\n      expect(container.support('dummyPage')).to.include.keys('openDummyPage');\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should be able to add new helper","suites":["Container","#append"],"updatePoint":{"line":232,"column":40,"index":7896},"line":232,"code":"    it('should be able to add new helper', () => {\n      const config = {\n        helpers: {\n          FileSystem: {}\n        }\n      };\n      container.create(config);\n      container.append({\n        helpers: {\n          AnotherHelper: {\n            method: () => 'executed'\n          }\n        }\n      });\n      expect(container.helpers('FileSystem')).is.ok;\n      expect(container.helpers('FileSystem')).is.instanceOf(FileSystem);\n      expect(container.helpers('AnotherHelper')).is.ok;\n      expect(container.helpers('AnotherHelper').method()).is.eql('executed');\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should be able to add new support object","suites":["Container","#append"],"updatePoint":{"line":251,"column":48,"index":8481},"line":251,"code":"    it('should be able to add new support object', () => {\n      container.create({});\n      container.append({\n        support: {\n          userPage: {\n            login: '#login'\n          }\n        }\n      });\n      expect(container.support('I')).is.ok;\n      expect(container.support('userPage')).is.ok;\n      expect(container.support('userPage').login).is.eql('#login');\n    });","file":"unit/container_test.js","skipped":false,"dir":"test"},{"name":"should return a 2D array containing each row","suites":["DataTableArgument"],"updatePoint":{"line":111,"column":50,"index":2148},"line":111,"code":"  it('should return a 2D array containing each row', () => {\n    const dta = new DataTableArgument(gherkinDataTable);\n    const raw = dta.raw();\n    const expectedRaw = [['John', 'Doe'], ['Chuck', 'Norris']];\n    expect(raw).to.deep.equal(expectedRaw);\n  });","file":"unit/data/dataTableArgument_test.js","skipped":false,"dir":"test"},{"name":"should return a 2D array containing each row without the header (first one)","suites":["DataTableArgument"],"updatePoint":{"line":117,"column":81,"index":2438},"line":117,"code":"  it('should return a 2D array containing each row without the header (first one)', () => {\n    const dta = new DataTableArgument(gherkinDataTableWithHeader);\n    const rows = dta.rows();\n    const expectedRows = [['Chuck', 'Norris']];\n    expect(rows).to.deep.equal(expectedRows);\n  });","file":"unit/data/dataTableArgument_test.js","skipped":false,"dir":"test"},{"name":"should return an of object where properties is the header","suites":["DataTableArgument"],"updatePoint":{"line":123,"column":63,"index":2708},"line":123,"code":"  it('should return an of object where properties is the header', () => {\n    const dta = new DataTableArgument(gherkinDataTableWithHeader);\n    const rows = dta.hashes();\n    const expectedRows = [{\n      firstName: 'Chuck',\n      lastName: 'Norris'\n    }];\n    expect(rows).to.deep.equal(expectedRows);\n  });","file":"unit/data/dataTableArgument_test.js","skipped":false,"dir":"test"},{"name":"transpose should transpose the gherkin data table","suites":["DataTableArgument"],"updatePoint":{"line":132,"column":55,"index":3011},"line":132,"code":"  it('transpose should transpose the gherkin data table', () => {\n    const dta = new DataTableArgument(gherkinDataTable);\n    dta.transpose();\n    const raw = dta.raw();\n    const expectedRaw = [['John', 'Chuck'], ['Doe', 'Norris']];\n    expect(raw).to.deep.equal(expectedRaw);\n  });","file":"unit/data/dataTableArgument_test.js","skipped":false,"dir":"test"},{"name":"rowsHash returns an object where the keys are the first column","suites":["DataTableArgument"],"updatePoint":{"line":139,"column":68,"index":3309},"line":139,"code":"  it('rowsHash returns an object where the keys are the first column', () => {\n    const dta = new DataTableArgument(gherkinDataTableWithColumnHeader);\n    const rawHash = dta.rowsHash();\n    const expectedRaw = {\n      firstName: 'Chuck',\n      lastName: 'Norris'\n    };\n    expect(rawHash).to.deep.equal(expectedRaw);\n  });","file":"unit/data/dataTableArgument_test.js","skipped":false,"dir":"test"},{"name":"should take an array for creation","suites":["DataTable"],"updatePoint":{"line":8,"column":39,"index":164},"line":8,"code":"  it('should take an array for creation', () => {\n    const data = ['login', 'password'];\n    const dataTable = new DataTable(data);\n    expect(dataTable.array).to.deep.equal(data);\n    expect(dataTable.rows).to.deep.equal([]);\n  });","file":"unit/data/table_test.js","skipped":false,"dir":"test"},{"name":"should allow arrays to be added","suites":["DataTable"],"updatePoint":{"line":14,"column":37,"index":396},"line":14,"code":"  it('should allow arrays to be added', () => {\n    const data = ['login', 'password'];\n    const dataTable = new DataTable(data);\n    dataTable.add(['jon', 'snow']);\n    const expected = {\n      login: 'jon',\n      password: 'snow'\n    };\n    expect(JSON.stringify(dataTable.rows[0].data)).to.equal(JSON.stringify(expected));\n  });","file":"unit/data/table_test.js","skipped":false,"dir":"test"},{"name":"should not allow an empty array to be added","suites":["DataTable"],"updatePoint":{"line":24,"column":49,"index":741},"line":24,"code":"  it('should not allow an empty array to be added', () => {\n    const data = ['login', 'password'];\n    const dataTable = new DataTable(data);\n    expect(() => dataTable.add([])).to.throw();\n  });","file":"unit/data/table_test.js","skipped":false,"dir":"test"},{"name":"should not allow an array with more slots than the original to be added","suites":["DataTable"],"updatePoint":{"line":29,"column":77,"index":966},"line":29,"code":"  it('should not allow an array with more slots than the original to be added', () => {\n    const data = ['login', 'password'];\n    const dataTable = new DataTable(data);\n    expect(() => dataTable.add(['Henrietta'])).to.throw();\n  });","file":"unit/data/table_test.js","skipped":false,"dir":"test"},{"name":"should not allow an array with less slots than the original to be added","suites":["DataTable"],"updatePoint":{"line":34,"column":77,"index":1202},"line":34,"code":"  it('should not allow an array with less slots than the original to be added', () => {\n    const data = ['login', 'password'];\n    const dataTable = new DataTable(data);\n    expect(() => dataTable.add(['Acid', 'Jazz', 'Singer'])).to.throw();\n  });","file":"unit/data/table_test.js","skipped":false,"dir":"test"},{"name":"should filter an array","suites":["DataTable"],"updatePoint":{"line":39,"column":28,"index":1402},"line":39,"code":"  it('should filter an array', () => {\n    const data = ['login', 'password'];\n    const dataTable = new DataTable(data);\n    dataTable.add(['jon', 'snow']);\n    dataTable.add(['tyrion', 'lannister']);\n    dataTable.add(['jaime', 'lannister']);\n    const expected = [{\n      skip: false,\n      data: {\n        login: 'tyrion',\n        password: 'lannister'\n      }\n    }, {\n      skip: false,\n      data: {\n        login: 'jaime',\n        password: 'lannister'\n      }\n    }];\n    expect(JSON.stringify(dataTable.filter(row => row.password === 'lannister'))).to.equal(JSON.stringify(expected));\n  });","file":"unit/data/table_test.js","skipped":false,"dir":"test"},{"name":"should filter an array with skips","suites":["DataTable"],"updatePoint":{"line":60,"column":39,"index":2014},"line":60,"code":"  it('should filter an array with skips', () => {\n    const data = ['login', 'password'];\n    const dataTable = new DataTable(data);\n    dataTable.add(['jon', 'snow']);\n    dataTable.xadd(['tyrion', 'lannister']);\n    dataTable.add(['jaime', 'lannister']);\n    const expected = [{\n      skip: true,\n      data: {\n        login: 'tyrion',\n        password: 'lannister'\n      }\n    }, {\n      skip: false,\n      data: {\n        login: 'jaime',\n        password: 'lannister'\n      }\n    }];\n    expect(JSON.stringify(dataTable.filter(row => row.password === 'lannister'))).to.equal(JSON.stringify(expected));\n  });","file":"unit/data/table_test.js","skipped":false,"dir":"test"},{"name":"can add a tag to all scenarios","suites":["ui","Data"],"updatePoint":{"line":31,"column":38,"index":766},"line":31,"code":"    it('can add a tag to all scenarios', () => {\n      dataScenarioConfig = context.Data(dataTable).Scenario('scenario', () => {});\n      dataScenarioConfig.tag('@user');\n      dataScenarioConfig.scenarios.forEach(scenario => {\n        expect(scenario.test.tags).to.include('@user');\n      });\n    });","file":"unit/data/ui_test.js","skipped":false,"dir":"test"},{"name":"can add a timout to all scenarios","suites":["ui","Data"],"updatePoint":{"line":38,"column":41,"index":1071},"line":38,"code":"    it('can add a timout to all scenarios', () => {\n      dataScenarioConfig = context.Data(dataTable).Scenario('scenario', () => {});\n      dataScenarioConfig.timeout(3);\n      dataScenarioConfig.scenarios.forEach(scenario => expect(3).to.equal(scenario.test._timeout));\n    });","file":"unit/data/ui_test.js","skipped":false,"dir":"test"},{"name":"can add retries to all scenarios","suites":["ui","Data"],"updatePoint":{"line":43,"column":40,"index":1350},"line":43,"code":"    it('can add retries to all scenarios', () => {\n      dataScenarioConfig = context.Data(dataTable).Scenario('scenario', () => {});\n      dataScenarioConfig.retry(3);\n      dataScenarioConfig.scenarios.forEach(scenario => expect(3).to.equal(scenario.test._retries));\n    });","file":"unit/data/ui_test.js","skipped":false,"dir":"test"},{"name":"can expect failure for all scenarios","suites":["ui","Data"],"updatePoint":{"line":48,"column":44,"index":1631},"line":48,"code":"    it('can expect failure for all scenarios', () => {\n      dataScenarioConfig = context.Data(dataTable).Scenario('scenario', () => {});\n      dataScenarioConfig.fails();\n      dataScenarioConfig.scenarios.forEach(scenario => expect(scenario.test.throws).to.exist);\n    });","file":"unit/data/ui_test.js","skipped":false,"dir":"test"},{"name":"can expect a specific error for all scenarios","suites":["ui","Data"],"updatePoint":{"line":53,"column":53,"index":1915},"line":53,"code":"    it('can expect a specific error for all scenarios', () => {\n      const err = new Error();\n      dataScenarioConfig = context.Data(dataTable).Scenario('scenario', () => {});\n      dataScenarioConfig.throws(err);\n      dataScenarioConfig.scenarios.forEach(scenario => expect(err).to.equal(scenario.test.throws));\n    });","file":"unit/data/ui_test.js","skipped":false,"dir":"test"},{"name":"can configure a helper for all scenarios","suites":["ui","Data"],"updatePoint":{"line":59,"column":48,"index":2234},"line":59,"code":"    it('can configure a helper for all scenarios', () => {\n      const helperName = 'myHelper';\n      const helper = {};\n      dataScenarioConfig = context.Data(dataTable).Scenario('scenario', () => {});\n      dataScenarioConfig.config(helperName, helper);\n      dataScenarioConfig.scenarios.forEach(scenario => expect(helper).to.equal(scenario.test.config[helperName]));\n    });","file":"unit/data/ui_test.js","skipped":false,"dir":"test"},{"name":"should shows object's toString() method in each scenario's name if the toString() method is overrided","suites":["ui","Data"],"updatePoint":{"line":66,"column":109,"index":2675},"line":66,"code":"    it(\"should shows object's toString() method in each scenario's name if the toString() method is overrided\", () => {\n      const data = [{\n        toString: () => 'test case title'\n      }];\n      const dataScenarioConfig = context.Data(data).Scenario('scenario', () => {});\n      expect('scenario | test case title').to.equal(dataScenarioConfig.scenarios[0].test.title);\n    });","file":"unit/data/ui_test.js","skipped":false,"dir":"test"},{"name":"should shows JSON.stringify() in each scenario's name if the toString() method isn't overrided","suites":["ui","Data"],"updatePoint":{"line":73,"column":102,"index":3051},"line":73,"code":"    it(\"should shows JSON.stringify() in each scenario's name if the toString() method isn't overrided\", () => {\n      const data = [{\n        name: 'John Do'\n      }];\n      const dataScenarioConfig = context.Data(data).Scenario('scenario', () => {});\n      expect(`scenario | ${JSON.stringify(data[0])}`).to.equal(dataScenarioConfig.scenarios[0].test.title);\n    });","file":"unit/data/ui_test.js","skipped":false,"dir":"test"},{"name":"should throw error","suites":["ElementNotFound error"],"updatePoint":{"line":9,"column":24,"index":222},"line":9,"code":"  it('should throw error', () => {\n    expect(() => new ElementNotFound(locator)).to.throw(Error);\n  });","file":"unit/helper/element_not_found_test.js","skipped":false,"dir":"test"},{"name":"should provide default message","suites":["ElementNotFound error"],"updatePoint":{"line":12,"column":36,"index":339},"line":12,"code":"  it('should provide default message', () => {\n    expect(() => new ElementNotFound(locator)).to.throw(Error, 'Element \"#invalidSelector\" was not found by text|CSS|XPath');\n  });","file":"unit/helper/element_not_found_test.js","skipped":false,"dir":"test"},{"name":"should use prefix for message","suites":["ElementNotFound error"],"updatePoint":{"line":15,"column":35,"index":517},"line":15,"code":"  it('should use prefix for message', () => {\n    expect(() => new ElementNotFound(locator, 'Field')).to.throw(Error, 'Field \"#invalidSelector\" was not found by text|CSS|XPath');\n  });","file":"unit/helper/element_not_found_test.js","skipped":false,"dir":"test"},{"name":"should use postfix for message","suites":["ElementNotFound error"],"updatePoint":{"line":18,"column":36,"index":703},"line":18,"code":"  it('should use postfix for message', () => {\n    expect(() => new ElementNotFound(locator, 'Locator', 'cannot be found')).to.throw(Error, 'Locator \"#invalidSelector\" cannot be found');\n  });","file":"unit/helper/element_not_found_test.js","skipped":false,"dir":"test"},{"name":"should stringify locator object","suites":["ElementNotFound error"],"updatePoint":{"line":21,"column":37,"index":897},"line":21,"code":"  it('should stringify locator object', () => {\n    const objectLocator = {\n      css: locator\n    };\n    expect(() => new ElementNotFound(objectLocator)).to.throw(Error, `Element \"${JSON.stringify(objectLocator)}\" was not found by text|CSS|XPath`);\n  });","file":"unit/helper/element_not_found_test.js","skipped":false,"dir":"test"},{"name":"should be initialized before tests","suites":["FileSystem"],"updatePoint":{"line":20,"column":40,"index":412},"line":20,"code":"  it('should be initialized before tests', () => {\n    expect(fs.dir).to.eql(global.codecept_dir);\n  });","file":"unit/helper/FileSystem_test.js","skipped":false,"dir":"test"},{"name":"should open dirs","suites":["FileSystem"],"updatePoint":{"line":23,"column":22,"index":499},"line":23,"code":"  it('should open dirs', () => {\n    fs.amInPath('data');\n    expect(fs.dir).to.eql(path.join(global.codecept_dir, '/data'));\n  });","file":"unit/helper/FileSystem_test.js","skipped":false,"dir":"test"},{"name":"should see file","suites":["FileSystem"],"updatePoint":{"line":27,"column":21,"index":630},"line":27,"code":"  it('should see file', () => {\n    fs.seeFile('data/fs_sample.txt');\n    fs.amInPath('data');\n    fs.seeFile('fs_sample.txt');\n    expect(fs.grabFileNames()).to.include('fs_sample.txt');\n    fs.seeFileNameMatching('sample');\n  });","file":"unit/helper/FileSystem_test.js","skipped":false,"dir":"test"},{"name":"should check file contents","suites":["FileSystem"],"updatePoint":{"line":34,"column":32,"index":873},"line":34,"code":"  it('should check file contents', () => {\n    fs.seeFile('data/fs_sample.txt');\n    fs.seeInThisFile('FileSystem');\n    fs.dontSeeInThisFile('WebDriverIO');\n    fs.dontSeeFileContentsEqual('123345');\n    fs.seeFileContentsEqual(`A simple file\nfor FileSystem helper\ntest`);\n  });","file":"unit/helper/FileSystem_test.js","skipped":false,"dir":"test"},{"name":"should create css locator","suites":["Locator","constructor","with string argument"],"updatePoint":{"line":66,"column":35,"index":1995},"line":66,"code":"      it('should create css locator', () => {\n        const l = new Locator('#foo');\n        expect(l.type).to.equal('css');\n        expect(l.value).to.equal('#foo');\n        expect(l.toString()).to.equal('#foo');\n      });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should create xpath locator","suites":["Locator","constructor","with string argument"],"updatePoint":{"line":72,"column":37,"index":2221},"line":72,"code":"      it('should create xpath locator', () => {\n        const l = new Locator('//foo[@bar=\"baz\"]/*');\n        expect(l.type).to.equal('xpath');\n        expect(l.value).to.equal('//foo[@bar=\"baz\"]/*');\n        expect(l.toString()).to.equal('//foo[@bar=\"baz\"]/*');\n      });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should create fuzzy locator","suites":["Locator","constructor","with string argument"],"updatePoint":{"line":78,"column":37,"index":2494},"line":78,"code":"      it('should create fuzzy locator', () => {\n        const l = new Locator('foo');\n        expect(l.type).to.equal('fuzzy');\n        expect(l.value).to.equal('foo');\n        expect(l.toString()).to.equal('foo');\n      });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should create custom locator","suites":["Locator","constructor","with string argument"],"updatePoint":{"line":84,"column":38,"index":2720},"line":84,"code":"      it('should create custom locator', () => {\n        const l = new Locator({\n          custom: 'foo'\n        });\n        expect(l.type).to.equal('custom');\n        expect(l.value).to.equal('foo');\n        expect(l.toString()).to.equal('{custom: foo}');\n      });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should create shadow locator","suites":["Locator","constructor","with string argument"],"updatePoint":{"line":92,"column":38,"index":2987},"line":92,"code":"      it('should create shadow locator', () => {\n        const l = new Locator({\n          shadow: ['my-app', 'recipe-hello-binding', 'ui-input', 'input.input']\n        });\n        expect(l.type).to.equal('shadow');\n        expect(l.value).to.deep.equal(['my-app', 'recipe-hello-binding', 'ui-input', 'input.input']);\n        expect(l.toString()).to.equal('{shadow: my-app,recipe-hello-binding,ui-input,input.input}');\n      });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should create described custom default type locator","suites":["Locator","constructor","with string argument"],"updatePoint":{"line":100,"column":61,"index":3439},"line":100,"code":"      it('should create described custom default type locator', () => {\n        const l = new Locator('foo', 'defaultLocator');\n        expect(l.type).to.equal('defaultLocator');\n        expect(l.value).to.equal('foo');\n        expect(l.toString()).to.equal('foo');\n      });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should create id locator","suites":["Locator","constructor","with object argument"],"updatePoint":{"line":108,"column":34,"index":3741},"line":108,"code":"      it('should create id locator', () => {\n        const l = new Locator({\n          id: 'foo'\n        });\n        expect(l.type).to.equal('id');\n        expect(l.value).to.equal('foo');\n        expect(l.toString()).to.equal('{id: foo}');\n      });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should create described custom locator","suites":["Locator","constructor","with object argument"],"updatePoint":{"line":116,"column":48,"index":4006},"line":116,"code":"      it('should create described custom locator', () => {\n        const l = new Locator({\n          customLocator: '=foo'\n        });\n        expect(l.type).to.equal('customLocator');\n        expect(l.value).to.equal('=foo');\n        expect(l.toString()).to.equal('{customLocator: =foo}');\n      });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should create id locator","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":126,"column":34,"index":4354},"line":126,"code":"      it('should create id locator', () => {\n        const l = new Locator(new Locator({\n          id: 'foo'\n        }));\n        expect(l).to.eql(new Locator({\n          id: 'foo'\n        }));\n        expect(l.type).to.equal('id');\n        expect(l.value).to.equal('foo');\n        expect(l.toString()).to.equal('{id: foo}');\n      });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should transform CSS to xpath","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":139,"column":35,"index":4705},"line":139,"code":"  it('should transform CSS to xpath', () => {\n    const l = new Locator('p > #user', 'css');\n    const nodes = xpath.select(l.toXPath(), doc);\n    expect(nodes).to.have.length(1);\n    expect(nodes[0].firstChild.data).to.eql('davert');\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should build locator to match element by attr","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":145,"column":51,"index":4962},"line":145,"code":"  it('should build locator to match element by attr', () => {\n    const l = Locator.build('input').withAttr({\n      'data-value': 'yes'\n    });\n    const nodes = xpath.select(l.toXPath(), doc);\n    expect(nodes).to.have.length(1);\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should build locator to match element by text","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":152,"column":51,"index":5199},"line":152,"code":"  it('should build locator to match element by text', () => {\n    const l = Locator.build('span').withText('Hey');\n    const nodes = xpath.select(l.toXPath(), doc);\n    expect(nodes).to.have.length(1);\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should build locator to match element by position","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":157,"column":55,"index":5411},"line":157,"code":"  it('should build locator to match element by position', () => {\n    const l = Locator.build('#fieldset-buttons').find('//tr').first().find('td').at(2);\n    const nodes = xpath.select(l.toXPath(), doc);\n    expect(nodes).to.have.length(1, l.toXPath());\n    expect(nodes[0].firstChild.data).to.eql('Edit');\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should build complex locator","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":163,"column":34,"index":5703},"line":163,"code":"  it('should build complex locator', () => {\n    const l = Locator.build('#fieldset-buttons').find('tr').last().find('td').first();\n    const nodes = xpath.select(l.toXPath(), doc);\n    expect(nodes).to.have.length(1, l.toXPath());\n    expect(nodes[0].firstChild.data).to.eql('Show');\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should select a by label","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":169,"column":30,"index":5990},"line":169,"code":"  it('should select a by label', () => {\n    const l = Locator.build('a').withAttr({\n      href: '#'\n    }).inside(Locator.build('label').withText('Hello'));\n    const nodes = xpath.select(l.toXPath(), doc);\n    expect(nodes).to.have.length(1, l.toXPath());\n    expect(nodes[0].firstChild.data).to.eql('Please click', l.toXPath());\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should select child element by name","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":177,"column":41,"index":6339},"line":177,"code":"  it('should select child element by name', () => {\n    const l = Locator.build('.form-field').withDescendant(Locator.build('//input[@name=\"name1\"]'));\n    const nodes = xpath.select(l.toXPath(), doc);\n    expect(nodes).to.have.length(1, l.toXPath());\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should select element by siblings","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":182,"column":39,"index":6595},"line":182,"code":"  it('should select element by siblings', () => {\n    const l = Locator.build('//table').withChild(Locator.build('tr').withChild('td').withText('Also Edit'));\n    const nodes = xpath.select(l.toXPath(), doc);\n    expect(nodes).to.have.length(1, l.toXPath());\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should throw an error when xpath with round brackets is nested","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":187,"column":68,"index":6889},"line":187,"code":"  it('should throw an error when xpath with round brackets is nested', () => {\n    expect(() => {\n      Locator.build('tr').find('(./td)[@id=\"id\"]');\n    }).to.throw('round brackets');\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should throw an error when locator with specific position is nested","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":192,"column":73,"index":7085},"line":192,"code":"  it('should throw an error when locator with specific position is nested', () => {\n    expect(() => {\n      Locator.build('tr').withChild(Locator.build('td').first());\n    }).to.throw('round brackets');\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should not select element by deep nested siblings","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":197,"column":55,"index":7277},"line":197,"code":"  it('should not select element by deep nested siblings', () => {\n    const l = Locator.build('//table').withChild('td');\n    const nodes = xpath.select(l.toXPath(), doc);\n    expect(nodes).to.have.length(0, l.toXPath());\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should select element by siblings","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":202,"column":39,"index":7489},"line":202,"code":"  it('should select element by siblings', () => {\n    const l = Locator.build('//table').find('td').after(Locator.build('td').withText('Also Edit')).first();\n    const nodes = xpath.select(l.toXPath(), doc);\n    expect(nodes).to.have.length(1, l.toXPath());\n    expect(nodes[0].firstChild.data).to.eql('Also Delete', l.toXPath());\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should translate locator to string","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":208,"column":40,"index":7827},"line":208,"code":"  it('should translate locator to string', () => {\n    const l = Locator.build('//table').find('td').as('cell');\n    expect(l.toString()).to.eql('cell');\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should be able to add custom locator strategy","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":212,"column":51,"index":7998},"line":212,"code":"  it('should be able to add custom locator strategy', () => {\n    Locator.addFilter((selector, locator) => {\n      if (selector.data) {\n        locator.type = 'css';\n        locator.value = `[data-element=${locator.value}]`;\n      }\n    });\n    const l = Locator.build({\n      data: 'name'\n    });\n    const nodes = xpath.select(l.toXPath(), doc);\n    expect(nodes).to.have.length(1, l.toXPath());\n    expect(nodes[0].firstChild.data).to.eql('davert', l.toXPath());\n    Locator.filters = [];\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should be able to add custom locator strategy","suites":["Locator","constructor","with Locator object argument"],"updatePoint":{"line":227,"column":51,"index":8496},"line":227,"code":"  it('should be able to add custom locator strategy', () => {\n    Locator.addFilter((providedLocator, locator) => {\n      if (typeof providedLocator === 'string') {\n        // this is a string\n        if (providedLocator[0] === '=') {\n          locator.value = `.//*[text()='${providedLocator.substring(1)}']`;\n          locator.type = 'xpath';\n        }\n      }\n    });\n    const l = Locator.build('=Sign In');\n    const nodes = xpath.select(l.toXPath(), doc);\n    expect(nodes).to.have.length(1, l.toXPath());\n    expect(nodes[0].firstChild.data).to.eql('Sign In', l.toXPath());\n    Locator.filters = [];\n  });","file":"unit/locator_test.js","skipped":false,"dir":"test"},{"name":"should allow the output level to be set","suites":["Output"],"updatePoint":{"line":25,"column":45,"index":445},"line":25,"code":"  it('should allow the output level to be set', () => {\n    const expectedLevel = 2;\n    output.level(expectedLevel);\n    expect(output.level()).to.equal(expectedLevel);\n  });","file":"unit/output_test.js","skipped":false,"dir":"test"},{"name":"should allow the process to be set","suites":["Output"],"updatePoint":{"line":30,"column":40,"index":616},"line":30,"code":"  it('should allow the process to be set', () => {\n    const expectedProcess = {\n      profile: 'firefox'\n    };\n    output.process(expectedProcess);\n    expect(output.process()).to.equal(`[${expectedProcess}]`);\n  });","file":"unit/output_test.js","skipped":false,"dir":"test"},{"name":"should allow debug messages when output level >= 2","suites":["Output"],"updatePoint":{"line":37,"column":56,"index":851},"line":37,"code":"  it('should allow debug messages when output level >= 2', () => {\n    const debugMsg = 'Dear Henrietta';\n    output.level(0);\n    output.debug(debugMsg);\n    expect(console.log).not.to.be.called;\n    output.level(1);\n    output.debug(debugMsg);\n    expect(console.log).not.to.be.called;\n    output.level(2);\n    output.debug(debugMsg);\n    expect(console.log).to.have.been.called;\n    output.level(3);\n    output.debug(debugMsg);\n    expect(console.log).to.have.been.calledTwice;\n  });","file":"unit/output_test.js","skipped":false,"dir":"test"},{"name":"should not throwing error when using non predefined system color for say function","suites":["Output"],"updatePoint":{"line":52,"column":87,"index":1369},"line":52,"code":"  it('should not throwing error when using non predefined system color for say function', () => {\n    const debugMsg = 'Dear Henrietta';\n    output.say(debugMsg, 'orange');\n    expect(console.log).to.have.been.called;\n  });","file":"unit/output_test.js","skipped":false,"dir":"test"},{"name":"should get params for normal function","suites":["parser","#getParamsToString"],"updatePoint":{"line":31,"column":45,"index":638},"line":31,"code":"    it('should get params for normal function', () => {\n      expect(parser.getParamsToString(obj.method1)).to.eql('locator, sec');\n    });","file":"unit/parser_test.js","skipped":false,"dir":"test"},{"name":"should get params for async function","suites":["parser","#getParamsToString"],"updatePoint":{"line":34,"column":44,"index":777},"line":34,"code":"    it('should get params for async function', () => {\n      expect(parser.getParamsToString(obj.method4)).to.eql('locator, context');\n    });","file":"unit/parser_test.js","skipped":false,"dir":"test"},{"name":"should get params for anonymous function with destructured args | ","suites":["parser","#getParamsToString"],"updatePoint":{"line":38,"column":82,"index":1004},"line":38,"code":"      it(`should get params for anonymous function with destructured args | ${arg}`, () => {\n        expect(parser.getParams(arg)).to.eql(['locator', 'sec']);\n      });","file":"unit/parser_test.js","skipped":false,"dir":"test"},{"name":"should get params for anonymous function with destructured args","suites":["parser","#getParamsToString"],"updatePoint":{"line":42,"column":71,"index":1170},"line":42,"code":"    it('should get params for anonymous function with destructured args', () => {\n      expect(parser.getParams(({\n        locator,\n        sec\n      }, {\n        first,\n        second\n      }) => {})).to.eql(['locator', 'sec', 'first', 'second']);\n    });","file":"unit/parser_test.js","skipped":false,"dir":"test"},{"name":"should get params for class method with destructured args","suites":["parser","#getParamsToString"],"updatePoint":{"line":51,"column":65,"index":1421},"line":51,"code":"    it('should get params for class method with destructured args', () => {\n      expect(parser.getParams(obj.method5)).to.eql(['locator', 'sec']);\n    });","file":"unit/parser_test.js","skipped":false,"dir":"test"},{"name":"add a custom locator by $ -> data-qa","suites":["customLocator"],"updatePoint":{"line":13,"column":42,"index":294},"line":13,"code":"  it('add a custom locator by $ -> data-qa', () => {\n    customLocatorPlugin({\n      prefix: '$',\n      attribute: 'data-qa',\n      showActual: true\n    });\n    const l = new Locator('$user-id');\n    expect(l.isXPath()).to.be.true;\n    expect(l.toXPath()).to.eql('.//*[@data-qa=\\'user-id\\']');\n    expect(l.toString()).to.eql('.//*[@data-qa=\\'user-id\\']');\n  });","file":"unit/plugin/customLocator_test.js","skipped":false,"dir":"test"},{"name":"add a custom locator by = -> data-test-id","suites":["customLocator"],"updatePoint":{"line":24,"column":47,"index":662},"line":24,"code":"  it('add a custom locator by = -> data-test-id', () => {\n    customLocatorPlugin({\n      prefix: '=',\n      attribute: 'data-test-id',\n      showActual: false\n    });\n    const l = new Locator('=no-user');\n    expect(l.isXPath()).to.be.true;\n    expect(l.toXPath()).to.eql('.//*[@data-test-id=\\'no-user\\']');\n    expect(l.toString()).to.eql('=no-user');\n  });","file":"unit/plugin/customLocator_test.js","skipped":false,"dir":"test"},{"name":"add a custom locator with multple char prefix = -> data-test-id","suites":["customLocator"],"updatePoint":{"line":35,"column":69,"index":1045},"line":35,"code":"  it('add a custom locator with multple char prefix = -> data-test-id', () => {\n    customLocatorPlugin({\n      prefix: 'test=',\n      attribute: 'data-test-id',\n      showActual: false\n    });\n    const l = new Locator('test=no-user');\n    expect(l.isXPath()).to.be.true;\n    expect(l.toXPath()).to.eql('.//*[@data-test-id=\\'no-user\\']');\n    expect(l.toString()).to.eql('test=no-user');\n  });","file":"unit/plugin/customLocator_test.js","skipped":false,"dir":"test"},{"name":"add a custom locator with CSS","suites":["customLocator"],"updatePoint":{"line":46,"column":35,"index":1406},"line":46,"code":"  it('add a custom locator with CSS', () => {\n    customLocatorPlugin({\n      prefix: '$',\n      attribute: 'data-test',\n      strategy: 'css'\n    });\n    const l = new Locator('$user');\n    expect(l.isCSS()).to.be.true;\n    expect(l.simplify()).to.eql('[data-test=user]');\n  });","file":"unit/plugin/customLocator_test.js","skipped":false,"dir":"test"},{"name":"add a custom locator with array $ -> data-qa, data-qa-id","suites":["customLocator"],"updatePoint":{"line":56,"column":62,"index":1713},"line":56,"code":"  it('add a custom locator with array $ -> data-qa, data-qa-id', () => {\n    customLocatorPlugin({\n      prefix: '$',\n      attribute: ['data-qa', 'data-qa-id'],\n      showActual: true\n    });\n    const l = new Locator('$user-id');\n    expect(l.isXPath()).to.be.true;\n    expect(l.toXPath()).to.eql('.//*[@data-qa=\\'user-id\\' or @data-qa-id=\\'user-id\\']');\n    expect(l.toString()).to.eql('.//*[@data-qa=\\'user-id\\' or @data-qa-id=\\'user-id\\']');\n  });","file":"unit/plugin/customLocator_test.js","skipped":false,"dir":"test"},{"name":"add a custom locator array with CSS","suites":["customLocator"],"updatePoint":{"line":67,"column":41,"index":2145},"line":67,"code":"  it('add a custom locator array with CSS', () => {\n    customLocatorPlugin({\n      prefix: '$',\n      attribute: ['data-test', 'data-test-id'],\n      strategy: 'css'\n    });\n    const l = new Locator('$user');\n    expect(l.isCSS()).to.be.true;\n    expect(l.simplify()).to.eql('[data-test=user],[data-test-id=user]');\n  });","file":"unit/plugin/customLocator_test.js","skipped":false,"dir":"test"},{"name":"should return initial locator value when it does not start with specified prefix","suites":["customLocator"],"updatePoint":{"line":77,"column":86,"index":2514},"line":77,"code":"  it('should return initial locator value when it does not start with specified prefix', () => {\n    customLocatorPlugin({\n      prefix: '$',\n      attribute: 'data-test'\n    });\n    const l = new Locator('=user');\n    expect(l.simplify()).to.eql('=user');\n  });","file":"unit/plugin/customLocator_test.js","skipped":false,"dir":"test"},{"name":"should iterate for each elements","suites":["eachElement plugin"],"updatePoint":{"line":28,"column":38,"index":598},"line":28,"code":"  it('should iterate for each elements', async () => {\n    let counter = 0;\n    await eachElement('some action', 'some locator', async el => {\n      expect(el).is.not.null;\n      counter++;\n    });\n    await recorder.promise();\n    expect(counter).to.equal(2);\n  });","file":"unit/plugin/eachElement_test.js","skipped":false,"dir":"test"},{"name":"should not allow non async function","suites":["eachElement plugin"],"updatePoint":{"line":37,"column":41,"index":868},"line":37,"code":"  it('should not allow non async function', async () => {\n    let errorCaught = false;\n\n    try {\n      await eachElement('some action', 'some locator', el => {});\n      await recorder.promise();\n    } catch (err) {\n      errorCaught = true;\n      expect(err.message).to.include('Async');\n    }\n\n    expect(errorCaught).is.true;\n  });","file":"unit/plugin/eachElement_test.js","skipped":false,"dir":"test"},{"name":"should retry failed step","suites":["retryFailedStep"],"updatePoint":{"line":29,"column":30,"index":635},"line":29,"code":"  it('should retry failed step', async () => {\n    retryFailedStep({\n      retries: 2,\n      minTimeout: 1\n    });\n    event.dispatcher.emit(event.test.before, {});\n    event.dispatcher.emit(event.step.started, {\n      name: 'click'\n    });\n    let counter = 0;\n    recorder.add(() => {\n      counter++;\n\n      if (counter < 3) {\n        throw new Error();\n      }\n    }, undefined, undefined, true);\n    return recorder.promise();\n  });","file":"unit/plugin/retryFailedStep_test.js","skipped":false,"dir":"test"},{"name":"should not retry within","suites":["retryFailedStep"],"updatePoint":{"line":48,"column":29,"index":1072},"line":48,"code":"  it('should not retry within', async () => {\n    retryFailedStep({\n      retries: 1,\n      minTimeout: 1\n    });\n    event.dispatcher.emit(event.test.before, {});\n    let counter = 0;\n    event.dispatcher.emit(event.step.started, {\n      name: 'click'\n    });\n\n    try {\n      within('foo', () => {\n        recorder.add(() => {\n          counter++;\n          throw new Error();\n        }, undefined, undefined, true);\n      });\n      await recorder.promise();\n    } catch (e) {\n      recorder.catchWithoutStop(err => err);\n    } // expects to retry only once\n\n\n    counter.should.equal(2);\n  });","file":"unit/plugin/retryFailedStep_test.js","skipped":false,"dir":"test"},{"name":"should not retry steps with wait*","suites":["retryFailedStep"],"updatePoint":{"line":74,"column":39,"index":1679},"line":74,"code":"  it('should not retry steps with wait*', async () => {\n    retryFailedStep({\n      retries: 2,\n      minTimeout: 1\n    });\n    event.dispatcher.emit(event.test.before, {});\n    let counter = 0;\n    event.dispatcher.emit(event.step.started, {\n      name: 'waitForElement'\n    });\n\n    try {\n      recorder.add(() => {\n        counter++;\n\n        if (counter < 3) {\n          throw new Error();\n        }\n      }, undefined, undefined, true);\n      await recorder.promise();\n    } catch (e) {\n      recorder.catchWithoutStop(err => err);\n    }\n\n    expect(counter).to.equal(1); // expects to retry only once\n  });","file":"unit/plugin/retryFailedStep_test.js","skipped":false,"dir":"test"},{"name":"should not retry steps with amOnPage","suites":["retryFailedStep"],"updatePoint":{"line":100,"column":42,"index":2295},"line":100,"code":"  it('should not retry steps with amOnPage', async () => {\n    retryFailedStep({\n      retries: 2,\n      minTimeout: 1\n    });\n    event.dispatcher.emit(event.test.before, {});\n    let counter = 0;\n    event.dispatcher.emit(event.step.started, {\n      name: 'amOnPage'\n    });\n\n    try {\n      recorder.add(() => {\n        counter++;\n\n        if (counter < 3) {\n          throw new Error();\n        }\n      }, undefined, undefined, true);\n      await recorder.promise();\n    } catch (e) {\n      recorder.catchWithoutStop(err => err);\n    }\n\n    expect(counter).to.equal(1); // expects to retry only once\n  });","file":"unit/plugin/retryFailedStep_test.js","skipped":false,"dir":"test"},{"name":"should add custom steps to ignore","suites":["retryFailedStep"],"updatePoint":{"line":126,"column":39,"index":2902},"line":126,"code":"  it('should add custom steps to ignore', async () => {\n    retryFailedStep({\n      retries: 2,\n      minTimeout: 1,\n      ignoredSteps: ['somethingNew*']\n    });\n    event.dispatcher.emit(event.test.before, {});\n    let counter = 0;\n    event.dispatcher.emit(event.step.started, {\n      name: 'somethingNew'\n    });\n\n    try {\n      recorder.add(() => {\n        counter++;\n\n        if (counter < 3) {\n          throw new Error();\n        }\n      }, undefined, undefined, true);\n      await recorder.promise();\n    } catch (e) {\n      recorder.catchWithoutStop(err => err);\n    }\n\n    expect(counter).to.equal(1); // expects to retry only once\n  });","file":"unit/plugin/retryFailedStep_test.js","skipped":false,"dir":"test"},{"name":"should add custom regexp steps to ignore","suites":["retryFailedStep"],"updatePoint":{"line":153,"column":46,"index":3559},"line":153,"code":"  it('should add custom regexp steps to ignore', async () => {\n    retryFailedStep({\n      retries: 2,\n      minTimeout: 1,\n      ignoredSteps: [/somethingNew/]\n    });\n    event.dispatcher.emit(event.test.before, {});\n    let counter = 0;\n    event.dispatcher.emit(event.step.started, {\n      name: 'somethingNew'\n    });\n\n    try {\n      recorder.add(() => {\n        counter++;\n\n        if (counter < 3) {\n          throw new Error();\n        }\n      }, undefined, undefined, true);\n      await recorder.promise();\n    } catch (e) {\n      recorder.catchWithoutStop(err => err);\n    }\n\n    expect(counter).to.equal(1); // expects to retry only once\n  });","file":"unit/plugin/retryFailedStep_test.js","skipped":false,"dir":"test"},{"name":"should not retry session","suites":["retryFailedStep"],"updatePoint":{"line":180,"column":30,"index":4199},"line":180,"code":"  it('should not retry session', async () => {\n    retryFailedStep({\n      retries: 1,\n      minTimeout: 1\n    });\n    event.dispatcher.emit(event.test.before, {});\n    event.dispatcher.emit(event.step.started, {\n      name: 'click'\n    });\n    let counter = 0;\n\n    try {\n      session('foo', () => {\n        recorder.add(() => {\n          counter++;\n          throw new Error();\n        }, undefined, undefined, true);\n      });\n      await recorder.promise();\n    } catch (e) {\n      recorder.catchWithoutStop(err => err);\n    } // expects to retry only once\n\n\n    expect(counter).to.equal(2);\n  });","file":"unit/plugin/retryFailedStep_test.js","skipped":false,"dir":"test"},{"name":"should not turn around the chain of retries","suites":["retryFailedStep"],"updatePoint":{"line":206,"column":49,"index":4821},"line":206,"code":"  it('should not turn around the chain of retries', () => {\n    recorder.retry({\n      retries: 2,\n      when: err => {\n        return err.message === 'someerror';\n      },\n      identifier: 'test'\n    });\n    recorder.retry({\n      retries: 2,\n      when: err => {\n        return err.message === 'othererror';\n      }\n    });\n\n    const getRetryIndex = () => recorder.retries.indexOf(recorder.retries.find(retry => retry.identifier));\n\n    let initalIndex;\n    recorder.add(() => {\n      initalIndex = getRetryIndex();\n    }, undefined, undefined, true);\n    recorder.add(() => {\n      initalIndex.should.equal(getRetryIndex());\n    }, undefined, undefined, true);\n    return recorder.promise();\n  });","file":"unit/plugin/retryFailedStep_test.js","skipped":false,"dir":"test"},{"name":"should execute command on success","suites":["retryTo plugin"],"updatePoint":{"line":13,"column":39,"index":274},"line":13,"code":"  it('should execute command on success', async () => {\n    let counter = 0;\n    await retryTo(() => recorder.add(() => counter++), 5);\n    expect(counter).is.equal(1);\n    return recorder.promise();\n  });","file":"unit/plugin/retryto_test.js","skipped":false,"dir":"test"},{"name":"should execute few times command on fail","suites":["retryTo plugin"],"updatePoint":{"line":19,"column":46,"index":487},"line":19,"code":"  it('should execute few times command on fail', async () => {\n    let counter = 0;\n    let errorCaught = false;\n    await retryTo(() => {\n      recorder.add(() => counter++);\n      recorder.add(() => {\n        throw new Error('Ups');\n      });\n    }, 5, 10);\n\n    try {\n      await recorder.promise();\n    } catch (err) {\n      errorCaught = true;\n      expect(err.message).to.eql('Ups');\n    }\n\n    expect(counter).to.equal(5);\n    expect(errorCaught).is.true;\n  });","file":"unit/plugin/retryto_test.js","skipped":false,"dir":"test"},{"name":"should exclude the data driven in failed screenshot file name","suites":["screenshotOnFail"],"updatePoint":{"line":27,"column":67,"index":627},"line":27,"code":"  it('should exclude the data driven in failed screenshot file name', async () => {\n    screenshotOnFail({});\n    event.dispatcher.emit(event.test.failed, {\n      title: 'Scenario with data driven | {\"login\":\"admin\",\"password\":\"123456\"}'\n    });\n    await recorder.promise();\n    expect(screenshotSaved.called).is.ok;\n    expect('Scenario_with_data_driven.failed.png').is.equal(screenshotSaved.getCall(0).args[0]);\n  });","file":"unit/plugin/screenshotOnFail_test.js","skipped":false,"dir":"test"},{"name":"should create screenshot on fail","suites":["screenshotOnFail"],"updatePoint":{"line":36,"column":38,"index":1019},"line":36,"code":"  it('should create screenshot on fail', async () => {\n    screenshotOnFail({});\n    event.dispatcher.emit(event.test.failed, {\n      title: 'test1'\n    });\n    await recorder.promise();\n    expect(screenshotSaved.called).is.ok;\n    expect('test1.failed.png').is.equal(screenshotSaved.getCall(0).args[0]);\n  });","file":"unit/plugin/screenshotOnFail_test.js","skipped":false,"dir":"test"},{"name":"should create screenshot with unique name","suites":["screenshotOnFail"],"updatePoint":{"line":45,"column":47,"index":1340},"line":45,"code":"  it('should create screenshot with unique name', async () => {\n    screenshotOnFail({\n      uniqueScreenshotNames: true\n    });\n    event.dispatcher.emit(event.test.failed, {\n      title: 'test1',\n      uuid: 1\n    });\n    await recorder.promise();\n    expect(screenshotSaved.called).is.ok;\n    expect('test1_1.failed.png').is.equal(screenshotSaved.getCall(0).args[0]);\n  });","file":"unit/plugin/screenshotOnFail_test.js","skipped":false,"dir":"test"},{"name":"should create screenshot with unique name when uuid is null","suites":["screenshotOnFail"],"updatePoint":{"line":57,"column":65,"index":1735},"line":57,"code":"  it('should create screenshot with unique name when uuid is null', async () => {\n    screenshotOnFail({\n      uniqueScreenshotNames: true\n    });\n    event.dispatcher.emit(event.test.failed, {\n      title: 'test1'\n    });\n    await recorder.promise();\n    expect(screenshotSaved.called).is.ok;\n    const fileName = screenshotSaved.getCall(0).args[0];\n    const regexpFileName = /test1_[0-9]{10}.failed.png/;\n    expect(fileName.match(regexpFileName).length).is.equal(1);\n  }); // TODO: write more tests for different options","file":"unit/plugin/screenshotOnFail_test.js","skipped":false,"dir":"test"},{"name":"should not capture subtitle as video artifact was missing","suites":["subtitles"],"updatePoint":{"line":31,"column":63,"index":647},"line":31,"code":"  it('should not capture subtitle as video artifact was missing', async () => {\n    const fsMock = sinon.mock(fsPromises);\n    const test = {};\n    fsMock.expects('writeFile').never();\n    event.dispatcher.emit(event.test.before, test);\n    const step1 = {\n      name: 'see',\n      actor: 'I',\n      args: ['Test 1']\n    };\n    event.dispatcher.emit(event.step.started, step1);\n    event.dispatcher.emit(event.step.finished, step1);\n    event.dispatcher.emit(event.test.after, test);\n    fsMock.verify();\n  });","file":"unit/plugin/subtitles_test.js","skipped":false,"dir":"test"},{"name":"should capture subtitle as video artifact is present","suites":["subtitles"],"updatePoint":{"line":46,"column":58,"index":1153},"line":46,"code":"  it('should capture subtitle as video artifact is present', async () => {\n    const fsMock = sinon.mock(fsPromises);\n    const test = {\n      artifacts: {\n        video: '../../lib/output/failedTest1.webm'\n      }\n    };\n    fsMock.expects('writeFile').once().withExactArgs('../../lib/output/failedTest1.srt', sinon.match(value => {\n      return value.match(/^1\\n[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}\\s-->\\s[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}\\nI\\.click\\(Continue\\)\\n\\n$/gm);\n    }));\n    event.dispatcher.emit(event.test.before, test);\n    const step1 = {\n      name: 'click',\n      actor: 'I',\n      args: ['Continue']\n    };\n    event.dispatcher.emit(event.step.started, step1);\n    event.dispatcher.emit(event.step.finished, step1);\n    event.dispatcher.emit(event.test.after, test);\n    fsMock.verify();\n  });","file":"unit/plugin/subtitles_test.js","skipped":false,"dir":"test"},{"name":"should capture mutiple steps as subtitle","suites":["subtitles"],"updatePoint":{"line":67,"column":46,"index":1954},"line":67,"code":"  it('should capture mutiple steps as subtitle', async () => {\n    const fsMock = sinon.mock(fsPromises);\n    const test = {\n      artifacts: {\n        video: '../../lib/output/failedTest1.webm'\n      }\n    };\n    fsMock.expects('writeFile').once().withExactArgs('../../lib/output/failedTest1.srt', sinon.match(value => {\n      return value.match(/^1\\n[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}\\s-->\\s[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}\\nI\\.click\\(Continue\\)\\n\\n2\\n[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}\\s-->\\s[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}\\nI\\.see\\(Github\\)\\n\\n$/gm);\n    }));\n    event.dispatcher.emit(event.test.before, test);\n    const step1 = {\n      name: 'click',\n      actor: 'I',\n      args: ['Continue']\n    };\n    const step2 = {\n      name: 'see',\n      actor: 'I',\n      args: ['Github']\n    };\n    event.dispatcher.emit(event.step.started, step1);\n    event.dispatcher.emit(event.step.started, step2);\n    event.dispatcher.emit(event.step.finished, step2);\n    await sleep(300);\n    event.dispatcher.emit(event.step.finished, step1);\n    event.dispatcher.emit(event.test.after, test);\n    fsMock.verify();\n  });","file":"unit/plugin/subtitles_test.js","skipped":false,"dir":"test"},{"name":"should capture seperate steps for separate tests","suites":["subtitles"],"updatePoint":{"line":96,"column":54,"index":3083},"line":96,"code":"  it('should capture seperate steps for separate tests', async () => {\n    const fsMock = sinon.mock(fsPromises);\n    const test1 = {\n      artifacts: {\n        video: '../../lib/output/failedTest1.webm'\n      }\n    };\n    fsMock.expects('writeFile').once().withExactArgs('../../lib/output/failedTest1.srt', sinon.match(value => {\n      return value.match(/^1\\n[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}\\s-->\\s[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}\\nI\\.click\\(Continue\\)\\n\\n2\\n[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}\\s-->\\s[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}\\nI\\.see\\(Github\\)\\n\\n$/gm);\n    }));\n    event.dispatcher.emit(event.test.before, test1);\n    const step1 = {\n      name: 'click',\n      actor: 'I',\n      args: ['Continue']\n    };\n    const step2 = {\n      name: 'see',\n      actor: 'I',\n      args: ['Github']\n    };\n    event.dispatcher.emit(event.step.started, step1);\n    event.dispatcher.emit(event.step.started, step2);\n    event.dispatcher.emit(event.step.finished, step2);\n    await sleep(300);\n    event.dispatcher.emit(event.step.finished, step1);\n    event.dispatcher.emit(event.test.after, test1);\n    fsMock.verify();\n    fsMock.restore();\n    /**\n     * To Ensure that when multiple tests are run steps are not incorrectly captured\n     */\n\n    const fsMock1 = sinon.mock(fsPromises);\n    fsMock1.expects('writeFile').once().withExactArgs('../../lib/output/failedTest2.srt', sinon.match(value => {\n      return value.match(/^1\\n[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}\\s-->\\s[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}\\nI\\.click\\(Login\\)\\n\\n$/gm);\n    }));\n    const test2 = {\n      artifacts: {\n        video: '../../lib/output/failedTest2.webm'\n      }\n    };\n    event.dispatcher.emit(event.test.before, test2);\n    const step3 = {\n      name: 'click',\n      actor: 'I',\n      args: ['Login']\n    };\n    event.dispatcher.emit(event.step.started, step3);\n    await sleep(300);\n    event.dispatcher.emit(event.step.finished, step3);\n    event.dispatcher.emit(event.test.after, test2);\n    fsMock1.verify();\n  });","file":"unit/plugin/subtitles_test.js","skipped":false,"dir":"test"},{"name":"should execute command on success","suites":["tryTo plugin"],"updatePoint":{"line":13,"column":39,"index":268},"line":13,"code":"  it('should execute command on success', async () => {\n    const ok = await tryTo(() => recorder.add(() => 5));\n    expect(true).is.equal(ok);\n    return recorder.promise();\n  });","file":"unit/plugin/tryTo_test.js","skipped":false,"dir":"test"},{"name":"should execute command on fail","suites":["tryTo plugin"],"updatePoint":{"line":18,"column":36,"index":446},"line":18,"code":"  it('should execute command on fail', async () => {\n    const notOk = await tryTo(() => recorder.add(() => {\n      throw new Error('Ups');\n    }));\n    expect(false).is.equal(notOk);\n    return recorder.promise();\n  });","file":"unit/plugin/tryTo_test.js","skipped":false,"dir":"test"},{"name":"should create a promise","suites":["Recorder"],"updatePoint":{"line":9,"column":29,"index":185},"line":9,"code":"  it('should create a promise', () => {\n    expect(recorder.promise()).to.be.instanceof(Promise);\n  });","file":"unit/recorder_test.js","skipped":false,"dir":"test"},{"name":"should execute error handler on error","suites":["Recorder"],"updatePoint":{"line":12,"column":43,"index":303},"line":12,"code":"  it('should execute error handler on error', done => {\n    recorder.errHandler(() => done());\n    recorder.throw(new Error('err'));\n    recorder.catch();\n  });","file":"unit/recorder_test.js","skipped":false,"dir":"test"},{"name":"can be started saving previous promise chain","suites":["Recorder","#session"],"updatePoint":{"line":18,"column":52,"index":504},"line":18,"code":"    it('can be started saving previous promise chain', () => {\n      let order = '';\n      recorder.add(() => order += 'a');\n      recorder.add(() => {\n        recorder.session.start();\n        recorder.add(() => order += 'c');\n        recorder.add(() => order += 'd');\n      });\n      recorder.add(() => recorder.session.restore());\n      recorder.add(() => order += 'b');\n      return recorder.promise().then(() => expect(order).is.equal('acdb'));\n    });","file":"unit/recorder_test.js","skipped":false,"dir":"test"},{"name":"should add steps to promise","suites":["Recorder","#add"],"updatePoint":{"line":32,"column":35,"index":978},"line":32,"code":"    it('should add steps to promise', () => {\n      let counter = 0;\n      recorder.add(() => counter++);\n      recorder.add(() => counter++);\n      recorder.add(() => expect(counter).eql(2));\n      return recorder.promise();\n    });","file":"unit/recorder_test.js","skipped":false,"dir":"test"},{"name":"should not add steps when stopped","suites":["Recorder","#add"],"updatePoint":{"line":39,"column":41,"index":1218},"line":39,"code":"    it('should not add steps when stopped', () => {\n      let counter = 0;\n      recorder.add(() => counter++);\n      recorder.stop();\n      recorder.add(() => counter++);\n      return recorder.promise().then(() => expect(counter).eql(1));\n    });","file":"unit/recorder_test.js","skipped":false,"dir":"test"},{"name":"should retry failed steps when asked","suites":["Recorder","#retry"],"updatePoint":{"line":48,"column":44,"index":1504},"line":48,"code":"    it('should retry failed steps when asked', () => {\n      let counter = 0;\n      recorder.retry(2);\n      recorder.add(() => {\n        counter++;\n\n        if (counter < 3) {\n          throw new Error('ups');\n        }\n      }, undefined, undefined, true);\n      return recorder.promise();\n    });","file":"unit/recorder_test.js","skipped":false,"dir":"test"},{"name":"should create a chain of retries","suites":["Recorder","#retry"],"updatePoint":{"line":60,"column":40,"index":1800},"line":60,"code":"    it('should create a chain of retries', () => {\n      let counter = 0;\n      const errorText = 'noerror';\n      recorder.retry({\n        retries: 2,\n        when: err => {\n          return err.message === errorText;\n        }\n      });\n      recorder.retry({\n        retries: 2,\n        when: err => {\n          return err.message === 'othererror';\n        }\n      });\n      recorder.add(() => {\n        counter++;\n\n        if (counter < 3) {\n          throw new Error(errorText);\n        }\n      }, undefined, undefined, true);\n      return recorder.promise();\n    });","file":"unit/recorder_test.js","skipped":false,"dir":"test"},{"name":"should prefer opts for non-when retry when possible","suites":["Recorder","#retry"],"updatePoint":{"line":84,"column":59,"index":2392},"line":84,"code":"    it('should prefer opts for non-when retry when possible', () => {\n      let counter = 0;\n      const errorText = 'noerror';\n      recorder.retry({\n        retries: 2\n      });\n      recorder.retry({\n        retries: 100,\n        when: err => {\n          return err.message === errorText;\n        }\n      });\n      recorder.add(() => {\n        counter++;\n\n        if (counter < 3) {\n          throw new Error(errorText);\n        }\n      }, undefined, undefined, true);\n      return recorder.promise();\n    });","file":"unit/recorder_test.js","skipped":false,"dir":"test"},{"name":"should wrap test function","suites":["Scenario"],"updatePoint":{"line":31,"column":31,"index":566},"line":31,"code":"  it('should wrap test function', () => {\n    scenario.test(test).fn(() => {});\n    expect(fn.called).is.ok;\n  });","file":"unit/scenario_test.js","skipped":false,"dir":"test"},{"name":"should work with async func","suites":["Scenario"],"updatePoint":{"line":35,"column":33,"index":683},"line":35,"code":"  it('should work with async func', () => {\n    let counter = 0;\n\n    test.fn = () => {\n      recorder.add('test', async () => {\n        await counter++;\n        await counter++;\n        await counter++;\n        counter++;\n      });\n    };\n\n    scenario.setup();\n    scenario.test(test).fn(() => null);\n    recorder.add('validation', () => expect(counter).to.eq(4));\n    return recorder.promise();\n  });","file":"unit/scenario_test.js","skipped":false,"dir":"test"},{"name":"should fire events","suites":["Scenario","events"],"updatePoint":{"line":62,"column":26,"index":1543},"line":62,"code":"    it('should fire events', () => {\n      scenario.test(test).fn(() => null);\n      expect(started.called).is.ok;\n      scenario.teardown();\n      scenario.suiteTeardown();\n      return recorder.promise().then(() => expect(beforeSuite.called).is.ok).then(() => expect(afterSuite.called).is.ok).then(() => expect(before.called).is.ok).then(() => expect(after.called).is.ok);\n    });","file":"unit/scenario_test.js","skipped":false,"dir":"test"},{"name":"should fire failed event on error","suites":["Scenario","events"],"updatePoint":{"line":69,"column":41,"index":1941},"line":69,"code":"    it('should fire failed event on error', () => {\n      event.dispatcher.on(event.test.failed, failed = sinon.spy());\n      scenario.setup();\n\n      test.fn = () => {\n        throw new Error('ups');\n      };\n\n      scenario.test(test).fn(() => {});\n      return recorder.promise().then(() => expect(failed.called).is.ok).catch(() => null);\n    });","file":"unit/scenario_test.js","skipped":false,"dir":"test"},{"name":"should fire failed event on async error","suites":["Scenario","events"],"updatePoint":{"line":80,"column":47,"index":2297},"line":80,"code":"    it('should fire failed event on async error', () => {\n      test.fn = () => {\n        recorder.throw(new Error('ups'));\n      };\n\n      scenario.test(test).fn(() => {});\n      return recorder.promise().then(() => expect(failed.called).is.ok).catch(() => null);\n    });","file":"unit/scenario_test.js","skipped":false,"dir":"test"},{"name":"has name","suites":["Steps","Step"],"updatePoint":{"line":29,"column":16,"index":498},"line":29,"code":"    it('has name', () => {\n      expect(step.name).eql('doSomething');\n    });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should convert method names for output","suites":["Steps","Step"],"updatePoint":{"line":32,"column":46,"index":607},"line":32,"code":"    it('should convert method names for output', () => {\n      expect(step.humanize()).eql('do something');\n    });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should convert arguments for output","suites":["Steps","Step"],"updatePoint":{"line":35,"column":43,"index":720},"line":35,"code":"    it('should convert arguments for output', () => {\n      step.args = ['word', 1];\n      expect(step.humanizeArgs()).eql('\"word\", 1');\n      step.args = [['some', 'data'], 1];\n      expect(step.humanizeArgs()).eql('[\"some\",\"data\"], 1');\n      step.args = [{\n        css: '.class'\n      }];\n      expect(step.humanizeArgs()).eql('{\"css\":\".class\"}');\n      let testUndefined;\n      step.args = [testUndefined, 'undefined'];\n      expect(step.humanizeArgs()).eql(', \"undefined\"');\n      step.args = [secret('word'), 1];\n      expect(step.humanizeArgs()).eql('*****, 1');\n    });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should provide nice output","suites":["Steps","Step"],"updatePoint":{"line":50,"column":34,"index":1289},"line":50,"code":"    it('should provide nice output', () => {\n      step.args = [1, 'yo'];\n      expect(step.toString()).eql('I do something 1, \"yo\"');\n    });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should provide code output","suites":["Steps","Step"],"updatePoint":{"line":54,"column":34,"index":1432},"line":54,"code":"    it('should provide code output', () => {\n      step.args = [1, 'yo'];\n      expect(step.toCode()).eql('I.doSomething(1, \"yo\")');\n    });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should set status for Step and MetaStep if exist","suites":["Steps","Step"],"updatePoint":{"line":58,"column":56,"index":1595},"line":58,"code":"    it('should set status for Step and MetaStep if exist', () => {\n      const metaStep = new MetaStep({\n        doSomethingMS: action\n      }, 'doSomethingMS');\n      step.metaStep = metaStep;\n      step.run();\n      expect(step.metaStep.status).eq('success');\n    });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should set status only for Step when MetaStep not exist","suites":["Steps","Step"],"updatePoint":{"line":66,"column":63,"index":1872},"line":66,"code":"    it('should set status only for Step when MetaStep not exist', () => {\n      step.run();\n      expect(step.metaStep);\n    });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should run step","suites":["Steps","Step","#run"],"updatePoint":{"line":72,"column":25,"index":2040},"line":72,"code":"      it('should run step', () => {\n        expect(step.status).is.equal('pending');\n        const res = step.run();\n        expect(res).is.equal('done');\n        expect(action.called);\n        expect(step.status).is.equal('success');\n      });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"[] #isBdd should return true if it BDD style","suites":["Steps","MetaStep","#isBDD"],"updatePoint":{"line":88,"column":62,"index":2614},"line":88,"code":"        it(`[${key}] #isBdd should return true if it BDD style`, () => {\n          const metaStep = new MetaStep(key, 'I need to open Google');\n          expect(metaStep.isBDD()).to.be.true;\n        });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"#isWithin should return true if it Within step","suites":["Steps","MetaStep","#isBDD"],"updatePoint":{"line":94,"column":54,"index":2827},"line":94,"code":"    it('#isWithin should return true if it Within step', () => {\n      const metaStep = new MetaStep('Within', 'clickByName');\n      expect(metaStep.isWithin()).to.be.true;\n    });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"[] should correct print BDD step","suites":["Steps","MetaStep","#toString"],"updatePoint":{"line":100,"column":50,"index":3094},"line":100,"code":"        it(`[${key}] should correct print BDD step`, () => {\n          const metaStep = new MetaStep(key, 'I need to open Google');\n          expect(metaStep.toString()).to.include(`${key} I need to open Google`);\n        });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should correct print step info for simple PageObject","suites":["Steps","MetaStep","#toString"],"updatePoint":{"line":105,"column":62,"index":3342},"line":105,"code":"      it('should correct print step info for simple PageObject', () => {\n        const metaStep = new MetaStep('MyPage', 'clickByName');\n        expect(metaStep.toString()).to.include('MyPage: clickByName');\n      });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should correct print step with args","suites":["Steps","MetaStep","#toString"],"updatePoint":{"line":109,"column":45,"index":3543},"line":109,"code":"      it('should correct print step with args', () => {\n        const metaStep = new MetaStep('MyPage', 'clickByName');\n        const msg = 'first message';\n        const msg2 = 'second message';\n\n        const fn = msg => `result from callback = ${msg}`;\n\n        metaStep.run.bind(metaStep, fn)(msg, msg2);\n        expect(metaStep.toString()).eql(`MyPage: clickByName \"${msg}\", \"${msg2}\"`);\n      });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"#setContext should correct init context variable","suites":["Steps","MetaStep","#toString"],"updatePoint":{"line":120,"column":56,"index":3965},"line":120,"code":"    it('#setContext should correct init context variable', () => {\n      const context = {\n        prop: 'prop'\n      };\n      const metaStep = new MetaStep('MyPage', 'clickByName');\n      metaStep.setContext(context);\n      expect(metaStep.context).eql(context);\n    });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should return result from run callback function","suites":["Steps","MetaStep","#run"],"updatePoint":{"line":141,"column":57,"index":4574},"line":141,"code":"      it('should return result from run callback function', () => {\n        const fn = () => 'result from callback';\n\n        expect(metaStep.run(fn)).eql('result from callback');\n      });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should return result when run is bound","suites":["Steps","MetaStep","#run"],"updatePoint":{"line":146,"column":48,"index":4755},"line":146,"code":"      it('should return result when run is bound', () => {\n        const fn = () => 'result from callback';\n\n        const boundedRun = metaStep.run.bind(metaStep, fn);\n        expect(boundedRun()).eql('result from callback');\n      });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should correct init args when run is bound","suites":["Steps","MetaStep","#run"],"updatePoint":{"line":152,"column":52,"index":4996},"line":152,"code":"      it('should correct init args when run is bound', () => {\n        const msg = 'arg message';\n        expect(boundedRun(msg)).eql(`result from callback = ${msg}`);\n      });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"should init as metaStep in step","suites":["Steps","MetaStep","#run"],"updatePoint":{"line":156,"column":41,"index":5163},"line":156,"code":"      it('should init as metaStep in step', () => {\n        let step1;\n        let step2;\n        const stepAction1 = sinon.spy(() => event.emit(event.step.before, step1));\n        const stepAction2 = sinon.spy(() => event.emit(event.step.before, step2));\n        step1 = new Step({\n          doSomething: stepAction1\n        }, 'doSomething');\n        step2 = new Step({\n          doSomething2: stepAction2\n        }, 'doSomething2');\n        boundedRun = metaStep.run.bind(metaStep, () => {\n          step1.run();\n          step2.run();\n        });\n        boundedRun();\n        expect(step1.metaStep).eql(metaStep);\n        expect(step2.metaStep).eql(metaStep);\n      });","file":"unit/steps_test.js","skipped":false,"dir":"test"},{"name":"context should contain ","suites":["ui","basic constants"],"updatePoint":{"line":25,"column":37,"index":625},"line":25,"code":"      it(`context should contain ${c}`, () => expect(context[c]).is.ok);","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"Feature should return featureConfig","suites":["ui","Feature"],"updatePoint":{"line":30,"column":43,"index":769},"line":30,"code":"    it('Feature should return featureConfig', () => {\n      suiteConfig = context.Feature('basic suite');\n      expect(suiteConfig.suite).is.ok;\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"should contain title","suites":["ui","Feature"],"updatePoint":{"line":34,"column":28,"index":907},"line":34,"code":"    it('should contain title', () => {\n      suiteConfig = context.Feature('basic suite');\n      expect(suiteConfig.suite).is.ok;\n      expect(suiteConfig.suite.title).eq('basic suite');\n      expect(suiteConfig.suite.fullTitle()).eq('basic suite:');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"should contain tags","suites":["ui","Feature"],"updatePoint":{"line":40,"column":27,"index":1165},"line":40,"code":"    it('should contain tags', () => {\n      suiteConfig = context.Feature('basic suite');\n      expect(0).eq(suiteConfig.suite.tags.length);\n      suiteConfig = context.Feature('basic suite @very @important');\n      expect(suiteConfig.suite).is.ok;\n      suiteConfig.suite.tags.should.include('@very');\n      suiteConfig.suite.tags.should.include('@important');\n      suiteConfig.tag('@user');\n      suiteConfig.suite.tags.should.include('@user');\n      suiteConfig.suite.tags.should.not.include('@slow');\n      suiteConfig.tag('slow');\n      suiteConfig.suite.tags.should.include('@slow');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"retries can be set","suites":["ui","Feature"],"updatePoint":{"line":53,"column":26,"index":1763},"line":53,"code":"    it('retries can be set', () => {\n      suiteConfig = context.Feature('basic suite');\n      suiteConfig.retry(3);\n      expect(3).eq(suiteConfig.suite.retries());\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"timeout can be set","suites":["ui","Feature"],"updatePoint":{"line":58,"column":26,"index":1937},"line":58,"code":"    it('timeout can be set', () => {\n      suiteConfig = context.Feature('basic suite');\n      expect(0).eq(suiteConfig.suite.timeout());\n      suiteConfig.timeout(3);\n      expect(3).eq(suiteConfig.suite.timeout());\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"helpers can be configured","suites":["ui","Feature"],"updatePoint":{"line":64,"column":33,"index":2169},"line":64,"code":"    it('helpers can be configured', () => {\n      suiteConfig = context.Feature('basic suite');\n      expect(!suiteConfig.suite.config);\n      suiteConfig.config('WebDriver', {\n        browser: 'chrome'\n      });\n      expect('chrome').eq(suiteConfig.suite.config.WebDriver.browser);\n      suiteConfig.config({\n        browser: 'firefox'\n      });\n      expect('firefox').eq(suiteConfig.suite.config[0].browser);\n      suiteConfig.config('WebDriver', () => {\n        return {\n          browser: 'edge'\n        };\n      });\n      expect('edge').eq(suiteConfig.suite.config.WebDriver.browser);\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"Feature can be skipped","suites":["ui","Feature"],"updatePoint":{"line":82,"column":30,"index":2766},"line":82,"code":"    it('Feature can be skipped', () => {\n      suiteConfig = context.Feature.skip('skipped suite');\n      expect(suiteConfig.suite.pending).eq(true, 'Skipped Feature must be contain pending === true');\n      expect(suiteConfig.suite.opts.skipInfo.message).eq('Skipped due to \"skip\" on Feature.');\n      expect(suiteConfig.suite.opts.skipInfo.skipped).eq(true, 'Skip should be set on skipInfo');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"Feature can be skipped via xFeature","suites":["ui","Feature"],"updatePoint":{"line":88,"column":43,"index":3182},"line":88,"code":"    it('Feature can be skipped via xFeature', () => {\n      suiteConfig = context.xFeature('skipped suite');\n      expect(suiteConfig.suite.pending).eq(true, 'Skipped Feature must be contain pending === true');\n      expect(suiteConfig.suite.opts.skipInfo.message).eq('Skipped due to \"skip\" on Feature.');\n      expect(suiteConfig.suite.opts.skipInfo.skipped).eq(true, 'Skip should be set on skipInfo');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"Feature are not skipped by default","suites":["ui","Feature"],"updatePoint":{"line":94,"column":42,"index":3593},"line":94,"code":"    it('Feature are not skipped by default', () => {\n      suiteConfig = context.Feature('not skipped suite');\n      expect(suiteConfig.suite.pending).eq(false, 'Feature must not contain pending === true'); // expect(suiteConfig.suite.opts, undefined, 'Features should have no skip info');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"Feature can be skipped","suites":["ui","Feature"],"updatePoint":{"line":98,"column":30,"index":3879},"line":98,"code":"    it('Feature can be skipped', () => {\n      suiteConfig = context.Feature.skip('skipped suite');\n      expect(suiteConfig.suite.pending).eq(true, 'Skipped Feature must be contain pending === true');\n      expect(suiteConfig.suite.opts.skipInfo.message).eq('Skipped due to \"skip\" on Feature.');\n      expect(suiteConfig.suite.opts.skipInfo.skipped).eq(true, 'Skip should be set on skipInfo');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"Feature can be skipped via xFeature","suites":["ui","Feature"],"updatePoint":{"line":104,"column":43,"index":4295},"line":104,"code":"    it('Feature can be skipped via xFeature', () => {\n      suiteConfig = context.xFeature('skipped suite');\n      expect(suiteConfig.suite.pending).eq(true, 'Skipped Feature must be contain pending === true');\n      expect(suiteConfig.suite.opts.skipInfo.message).eq('Skipped due to \"skip\" on Feature.');\n      expect(suiteConfig.suite.opts.skipInfo.skipped).eq(true, 'Skip should be set on skipInfo');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"Feature are not skipped by default","suites":["ui","Feature"],"updatePoint":{"line":110,"column":42,"index":4706},"line":110,"code":"    it('Feature are not skipped by default', () => {\n      suiteConfig = context.Feature('not skipped suite');\n      expect(suiteConfig.suite.pending).eq(false, 'Feature must not contain pending === true'); // expect(suiteConfig.suite.opts, undefined, 'Features should have no skip info');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"Feature can be skipped","suites":["ui","Feature"],"updatePoint":{"line":114,"column":30,"index":4992},"line":114,"code":"    it('Feature can be skipped', () => {\n      suiteConfig = context.Feature.skip('skipped suite');\n      expect(suiteConfig.suite.pending).eq(true, 'Skipped Feature must be contain pending === true');\n      expect(suiteConfig.suite.opts.skipInfo.message).eq('Skipped due to \"skip\" on Feature.');\n      expect(suiteConfig.suite.opts.skipInfo.skipped).eq(true, 'Skip should be set on skipInfo');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"Feature can be skipped via xFeature","suites":["ui","Feature"],"updatePoint":{"line":120,"column":43,"index":5408},"line":120,"code":"    it('Feature can be skipped via xFeature', () => {\n      suiteConfig = context.xFeature('skipped suite');\n      expect(suiteConfig.suite.pending).eq(true, 'Skipped Feature must be contain pending === true');\n      expect(suiteConfig.suite.opts.skipInfo.message).eq('Skipped due to \"skip\" on Feature.');\n      expect(suiteConfig.suite.opts.skipInfo.skipped).eq(true, 'Skip should be set on skipInfo');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"Feature are not skipped by default","suites":["ui","Feature"],"updatePoint":{"line":126,"column":42,"index":5819},"line":126,"code":"    it('Feature are not skipped by default', () => {\n      suiteConfig = context.Feature('not skipped suite');\n      expect(suiteConfig.suite.pending).eq(false, 'Feature must not contain pending === true');\n      expect(suiteConfig.suite.opts).to.deep.eq({}, 'Features should have no skip info');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"Feature should correctly pass options to suite context","suites":["ui","Feature"],"updatePoint":{"line":131,"column":62,"index":6144},"line":131,"code":"    it('Feature should correctly pass options to suite context', () => {\n      suiteConfig = context.Feature('not skipped suite', {\n        key: 'value'\n      });\n      expect(suiteConfig.suite.opts).to.deep.eq({\n        key: 'value'\n      }, 'Features should have passed options');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"Scenario should return scenarioConfig","suites":["ui","Scenario"],"updatePoint":{"line":142,"column":45,"index":6479},"line":142,"code":"    it('Scenario should return scenarioConfig', () => {\n      scenarioConfig = context.Scenario('basic scenario');\n      expect(scenarioConfig.test).is.ok;\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"should contain title","suites":["ui","Scenario"],"updatePoint":{"line":146,"column":28,"index":6626},"line":146,"code":"    it('should contain title', () => {\n      context.Feature('suite');\n      scenarioConfig = context.Scenario('scenario');\n      expect(scenarioConfig.test.title).eq('scenario');\n      expect(scenarioConfig.test.fullTitle()).eq('suite: scenario');\n      expect(scenarioConfig.test.tags.length).eq(0);\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"should contain tags","suites":["ui","Scenario"],"updatePoint":{"line":153,"column":27,"index":6935},"line":153,"code":"    it('should contain tags', () => {\n      context.Feature('basic suite @cool');\n      scenarioConfig = context.Scenario('scenario @very @important');\n      scenarioConfig.test.tags.should.include('@cool');\n      scenarioConfig.test.tags.should.include('@very');\n      scenarioConfig.test.tags.should.include('@important');\n      scenarioConfig.tag('@user');\n      scenarioConfig.test.tags.should.include('@user');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"should dynamically inject dependencies","suites":["ui","Scenario"],"updatePoint":{"line":162,"column":46,"index":7378},"line":162,"code":"    it('should dynamically inject dependencies', () => {\n      scenarioConfig = context.Scenario('scenario');\n      scenarioConfig.injectDependencies({\n        Data: 'data'\n      });\n      expect(scenarioConfig.test.inject.Data).eq('data');\n    });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"should inject skipInfo to opts","suites":["ui","Scenario","todo"],"updatePoint":{"line":170,"column":40,"index":7650},"line":170,"code":"      it('should inject skipInfo to opts', () => {\n        scenarioConfig = context.Scenario.todo('scenario', () => {\n          console.log('Scenario Body');\n        });\n        expect(scenarioConfig.test.pending).eq(true, 'Todo Scenario must be contain pending === true');\n        expect(scenarioConfig.test.opts.skipInfo.message).eq('Test not implemented!');\n        expect(scenarioConfig.test.opts.skipInfo.description).eq(\"() => { console.log('Scenario Body'); }\");\n      });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"should contain empty description in skipInfo and empty body","suites":["ui","Scenario","todo"],"updatePoint":{"line":178,"column":69,"index":8159},"line":178,"code":"      it('should contain empty description in skipInfo and empty body', () => {\n        scenarioConfig = context.Scenario.todo('scenario');\n        expect(scenarioConfig.test.pending).eq(true, 'Todo Scenario must be contain pending === true');\n        expect(scenarioConfig.test.opts.skipInfo.description).eq('');\n        expect(scenarioConfig.test.body).eq('');\n      });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"should inject custom opts to opts and without callback","suites":["ui","Scenario","todo"],"updatePoint":{"line":184,"column":64,"index":8527},"line":184,"code":"      it('should inject custom opts to opts and without callback', () => {\n        scenarioConfig = context.Scenario.todo('scenario', {\n          customOpts: 'Custom Opts'\n        });\n        expect(scenarioConfig.test.opts.customOpts).eq('Custom Opts');\n      });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"should inject custom opts to opts and with callback","suites":["ui","Scenario","todo"],"updatePoint":{"line":190,"column":61,"index":8789},"line":190,"code":"      it('should inject custom opts to opts and with callback', () => {\n        scenarioConfig = context.Scenario.todo('scenario', {\n          customOpts: 'Custom Opts'\n        }, () => {\n          console.log('Scenario Body');\n        });\n        expect(scenarioConfig.test.opts.customOpts).eq('Custom Opts');\n      });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"should inject custom opts to opts and without callback","suites":["ui","Scenario","skip"],"updatePoint":{"line":200,"column":64,"index":9150},"line":200,"code":"      it('should inject custom opts to opts and without callback', () => {\n        scenarioConfig = context.Scenario.skip('scenario', {\n          customOpts: 'Custom Opts'\n        });\n        expect(scenarioConfig.test.opts.customOpts).eq('Custom Opts');\n      });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"should inject custom opts to opts and with callback","suites":["ui","Scenario","skip"],"updatePoint":{"line":206,"column":61,"index":9412},"line":206,"code":"      it('should inject custom opts to opts and with callback', () => {\n        scenarioConfig = context.Scenario.skip('scenario', {\n          customOpts: 'Custom Opts'\n        }, () => {\n          console.log('Scenario Body');\n        });\n        expect(scenarioConfig.test.opts.customOpts).eq('Custom Opts');\n      });","file":"unit/ui_test.js","skipped":false,"dir":"test"},{"name":"exists","suites":["utils","#fileExists"],"updatePoint":{"line":15,"column":14,"index":248},"line":15,"code":"    it('exists', () => expect(utils.fileExists(__filename)));","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"not exists","suites":["utils","#fileExists"],"updatePoint":{"line":16,"column":18,"index":314},"line":16,"code":"    it('not exists', () => expect(!utils.fileExists('not_utils.js')));","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"fn#1","suites":["utils","#getParamNames"],"updatePoint":{"line":21,"column":12,"index":461},"line":21,"code":"    it('fn#1', () => expect(utils.getParamNames((a, b) => {})).eql(['a', 'b']));","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"fn#2","suites":["utils","#getParamNames"],"updatePoint":{"line":22,"column":12,"index":542},"line":22,"code":"    it('fn#2', () => expect(utils.getParamNames((I, userPage) => {})).eql(['I', 'userPage']));","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"should handle single-param arrow functions with omitted parens","suites":["utils","#getParamNames"],"updatePoint":{"line":23,"column":70,"index":695},"line":23,"code":"    it('should handle single-param arrow functions with omitted parens', () => expect(utils.getParamNames(I => {})).eql(['I']));","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"should handle trailing comma","suites":["utils","#getParamNames"],"updatePoint":{"line":24,"column":36,"index":790},"line":24,"code":"    it('should handle trailing comma', () => expect(utils.getParamNames((I, trailing, comma) => {})).eql(['I', 'trailing', 'comma']));","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"should get methods","suites":["utils","#methodsOfObject"],"updatePoint":{"line":29,"column":26,"index":998},"line":29,"code":"    it('should get methods', () => {\n      expect(utils.methodsOfObject({\n        a: 1,\n        hello: () => {},\n        world: () => {}\n      })).eql(['hello', 'world']);\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"should capitalize first letter","suites":["utils","#ucfirst"],"updatePoint":{"line":38,"column":38,"index":1227},"line":38,"code":"    it('should capitalize first letter', () => {\n      expect(utils.ucfirst('hello')).equal('Hello');\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"should beautify JS code","suites":["utils","#beautify"],"updatePoint":{"line":43,"column":31,"index":1368},"line":43,"code":"    it('should beautify JS code', () => {\n      expect(utils.beautify('module.exports = function(a, b) { a++; b = a; if (a == b) { return 2 }};')).eql(`module.exports = function(a, b) {\n  a++;\n  b = a;\n  if (a == b) {\n    return 2\n  }\n};`);\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"combines xpaths","suites":["utils","#xpathLocator"],"updatePoint":{"line":54,"column":23,"index":1651},"line":54,"code":"    it('combines xpaths', () => {\n      expect(utils.xpathLocator.combine(['//a', '//button'])).eql('//a | //button');\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"converts string to xpath literal","suites":["utils","#xpathLocator"],"updatePoint":{"line":57,"column":40,"index":1795},"line":57,"code":"    it('converts string to xpath literal', () => {\n      expect(utils.xpathLocator.literal(\"can't find thing\")).eql('concat(\\'can\\',\"\\'\",\\'t find thing\\')');\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"returns updated object","suites":["utils","#replaceValueDeep"],"updatePoint":{"line":63,"column":30,"index":2013},"line":63,"code":"    it('returns updated object', () => {\n      target = {\n        timeout: 1,\n        helpers: {\n          something: 2\n        }\n      };\n      expect(utils.replaceValueDeep(target.helpers, 'something', 1234)).eql({\n        something: 1234\n      });\n      expect(target).eql({\n        timeout: 1,\n        helpers: {\n          something: 1234\n        }\n      });\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"do not replace unexisting value","suites":["utils","#replaceValueDeep"],"updatePoint":{"line":80,"column":39,"index":2393},"line":80,"code":"    it('do not replace unexisting value', () => {\n      target = {\n        timeout: 1,\n        helpers: {\n          something: 2\n        }\n      };\n      utils.replaceValueDeep(target, 'unexisting', 1234);\n      expect(target).eql({\n        timeout: 1,\n        helpers: {\n          something: 2\n        }\n      });\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"replace simple value","suites":["utils","#replaceValueDeep"],"updatePoint":{"line":95,"column":28,"index":2705},"line":95,"code":"    it('replace simple value', () => {\n      target = {\n        timeout: 1,\n        helpers: {\n          something: 2\n        }\n      };\n      utils.replaceValueDeep(target, 'timeout', 1234);\n      expect(target).eql({\n        timeout: 1234,\n        helpers: {\n          something: 2\n        }\n      });\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"replace simple falsy value","suites":["utils","#replaceValueDeep"],"updatePoint":{"line":110,"column":34,"index":3023},"line":110,"code":"    it('replace simple falsy value', () => {\n      target = {\n        zeroValue: {\n          timeout: 0\n        },\n        falseValue: {\n          timeout: false\n        },\n        undefinedValue: {\n          timeout: undefined\n        },\n        emptyStringValue: {\n          timeout: ''\n        },\n        nullValue: {\n          timeout: null\n        }\n      };\n      utils.replaceValueDeep(target, 'timeout', 1234);\n      expect(target).eql({\n        zeroValue: {\n          timeout: 1234\n        },\n        falseValue: {\n          timeout: 1234\n        },\n        undefinedValue: {\n          timeout: 1234\n        },\n        emptyStringValue: {\n          timeout: 1234\n        },\n        nullValue: {\n          timeout: 1234\n        }\n      });\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"replace value in array of objects","suites":["utils","#replaceValueDeep"],"updatePoint":{"line":147,"column":41,"index":3786},"line":147,"code":"    it('replace value in array of objects', () => {\n      target = {\n        timeout: 1,\n        something: [{\n          a: 1,\n          b: 2\n        }, {\n          a: 3\n        }, 123, 0, [{\n          a: 1\n        }, 123]]\n      };\n      utils.replaceValueDeep(target, 'a', 1234);\n      expect(target).eql({\n        timeout: 1,\n        something: [{\n          a: 1234,\n          b: 2\n        }, {\n          a: 1234\n        }, 123, 0, [{\n          a: 1234\n        }, 123]]\n      });\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"replace simple value deep in object","suites":["utils","#replaceValueDeep"],"updatePoint":{"line":172,"column":43,"index":4279},"line":172,"code":"    it('replace simple value deep in object', () => {\n      target = {\n        timeout: 1,\n        helpers: {\n          something: {\n            otherthing: 2\n          }\n        }\n      };\n      utils.replaceValueDeep(target, 'otherthing', 1234);\n      expect(target).eql({\n        timeout: 1,\n        helpers: {\n          something: {\n            otherthing: 1234\n          }\n        }\n      });\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"replace object value","suites":["utils","#replaceValueDeep"],"updatePoint":{"line":191,"column":28,"index":4670},"line":191,"code":"    it('replace object value', () => {\n      target = {\n        timeout: 1,\n        helpers: {\n          WebDriver: {\n            timeouts: 0,\n            url: 'someurl'\n          },\n          someHelper: {\n            timeouts: 3\n          }\n        }\n      };\n      utils.replaceValueDeep(target.helpers, 'WebDriver', {\n        timeouts: 1234\n      });\n      expect(target).eql({\n        timeout: 1,\n        helpers: {\n          WebDriver: {\n            timeouts: 1234 // url is not described in new object\n\n          },\n          someHelper: {\n            timeouts: 3\n          }\n        }\n      });\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"should normalize key (alias) to key attribute value","suites":["utils","#getNormalizedKeyAttributeValue"],"updatePoint":{"line":222,"column":59,"index":5372},"line":222,"code":"    it('should normalize key (alias) to key attribute value', () => {\n      expect(utils.getNormalizedKeyAttributeValue('Arrow down')).equal('ArrowDown');\n      expect(utils.getNormalizedKeyAttributeValue('RIGHT_ARROW')).equal('ArrowRight');\n      expect(utils.getNormalizedKeyAttributeValue('leftarrow')).equal('ArrowLeft');\n      expect(utils.getNormalizedKeyAttributeValue('Up arrow')).equal('ArrowUp');\n      expect(utils.getNormalizedKeyAttributeValue('Left Alt')).equal('AltLeft');\n      expect(utils.getNormalizedKeyAttributeValue('RIGHT_ALT')).equal('AltRight');\n      expect(utils.getNormalizedKeyAttributeValue('alt')).equal('Alt');\n      expect(utils.getNormalizedKeyAttributeValue('oPTION left')).equal('AltLeft');\n      expect(utils.getNormalizedKeyAttributeValue('ALTGR')).equal('AltGraph');\n      expect(utils.getNormalizedKeyAttributeValue('alt graph')).equal('AltGraph');\n      expect(utils.getNormalizedKeyAttributeValue('Control Left')).equal('ControlLeft');\n      expect(utils.getNormalizedKeyAttributeValue('RIGHT_CTRL')).equal('ControlRight');\n      expect(utils.getNormalizedKeyAttributeValue('Ctrl')).equal('Control');\n      expect(utils.getNormalizedKeyAttributeValue('Cmd')).equal('Meta');\n      expect(utils.getNormalizedKeyAttributeValue('LeftCommand')).equal('MetaLeft');\n      expect(utils.getNormalizedKeyAttributeValue('os right')).equal('MetaRight');\n      expect(utils.getNormalizedKeyAttributeValue('SUPER')).equal('Meta');\n      expect(utils.getNormalizedKeyAttributeValue('NumpadComma')).equal('Comma');\n      expect(utils.getNormalizedKeyAttributeValue('Separator')).equal('Comma');\n      expect(utils.getNormalizedKeyAttributeValue('Add')).equal('NumpadAdd');\n      expect(utils.getNormalizedKeyAttributeValue('Decimal')).equal('NumpadDecimal');\n      expect(utils.getNormalizedKeyAttributeValue('Divide')).equal('NumpadDivide');\n      expect(utils.getNormalizedKeyAttributeValue('Multiply')).equal('NumpadMultiply');\n      expect(utils.getNormalizedKeyAttributeValue('Subtract')).equal('NumpadSubtract');\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"should normalize modifier key based on operating system","suites":["utils","#getNormalizedKeyAttributeValue"],"updatePoint":{"line":248,"column":63,"index":7429},"line":248,"code":"    it('should normalize modifier key based on operating system', () => {\n      sinon.stub(os, 'platform').returns('notdarwin');\n      expect(utils.getNormalizedKeyAttributeValue('CmdOrCtrl')).equal('Control');\n      expect(utils.getNormalizedKeyAttributeValue('COMMANDORCONTROL')).equal('Control');\n      expect(utils.getNormalizedKeyAttributeValue('ControlOrCommand')).equal('Control');\n      expect(utils.getNormalizedKeyAttributeValue('left ctrl or command')).equal('ControlLeft');\n      os.platform.restore();\n      sinon.stub(os, 'platform').returns('darwin');\n      expect(utils.getNormalizedKeyAttributeValue('CtrlOrCmd')).equal('Meta');\n      expect(utils.getNormalizedKeyAttributeValue('CONTROLORCOMMAND')).equal('Meta');\n      expect(utils.getNormalizedKeyAttributeValue('CommandOrControl')).equal('Meta');\n      expect(utils.getNormalizedKeyAttributeValue('right command or ctrl')).equal('MetaRight');\n      os.platform.restore();\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"returns the joined filename for filename only","suites":["utils","#screenshotOutputFolder"],"updatePoint":{"line":278,"column":53,"index":8883},"line":278,"code":"    it('returns the joined filename for filename only', () => {\n      const _path = utils.screenshotOutputFolder('screenshot1.failed.png');\n\n      expect(_path).eql('/Users/someuser/workbase/project1/test_output/screenshot1.failed.png'.replace(/\\//g, path.sep));\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"returns the given filename for absolute one","suites":["utils","#screenshotOutputFolder"],"updatePoint":{"line":283,"column":51,"index":9152},"line":283,"code":"    it('returns the given filename for absolute one', () => {\n      const _path = utils.screenshotOutputFolder('/Users/someuser/workbase/project1/test_output/screenshot1.failed.png'.replace(/\\//g, path.sep));\n\n      if (os.platform() === 'win32') {\n        expect(_path).eql(path.resolve(global.codecept_dir, '/Users/someuser/workbase/project1/test_output/screenshot1.failed.png'));\n      } else {\n        expect(_path).eql('/Users/someuser/workbase/project1/test_output/screenshot1.failed.png');\n      }\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"returns the fallback package","suites":["utils","#requireWithFallback"],"updatePoint":{"line":294,"column":36,"index":9699},"line":294,"code":"    it('returns the fallback package', () => {\n      expect(utils.requireWithFallback('unexisting-package', 'playwright')).eql(require('playwright'));\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"returns provide default require not found message","suites":["utils","#requireWithFallback"],"updatePoint":{"line":297,"column":57,"index":9879},"line":297,"code":"    it('returns provide default require not found message', () => {\n      expect(() => utils.requireWithFallback('unexisting-package', 'unexisting-package2')).to.throw(Error, 'Cannot find modules unexisting-package,unexisting-package2');\n    });","file":"unit/utils_test.js","skipped":false,"dir":"test"},{"name":"should run simple worker","suites":["Workers"],"updatePoint":{"line":19,"column":30,"index":327},"line":19,"code":"  it('should run simple worker', done => {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    const workerConfig = {\n      by: 'test',\n      testConfig: './test/data/sandbox/codecept.workers.conf.js'\n    };\n    let passedCount = 0;\n    let failedCount = 0;\n    const workers = new Workers(2, workerConfig);\n    workers.run();\n    workers.on(event.test.failed, () => {\n      failedCount += 1;\n    });\n    workers.on(event.test.passed, () => {\n      passedCount += 1;\n    });\n    workers.on(event.all.result, status => {\n      expect(status).equal(false);\n      expect(passedCount).equal(5);\n      expect(failedCount).equal(3);\n      done();\n    });\n  });","file":"unit/worker_test.js","skipped":false,"dir":"test"},{"name":"should create worker by function","suites":["Workers"],"updatePoint":{"line":42,"column":38,"index":1033},"line":42,"code":"  it('should create worker by function', done => {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n\n    const createTestGroups = () => {\n      const files = [[path.join(codecept_dir, '/custom-worker/base_test.worker.js')], [path.join(codecept_dir, '/custom-worker/custom_test.worker.js')]];\n      return files;\n    };\n\n    const workerConfig = {\n      by: createTestGroups,\n      testConfig: './test/data/sandbox/codecept.customworker.js'\n    };\n    const workers = new Workers(-1, workerConfig);\n\n    for (const worker of workers.getWorkers()) {\n      worker.addConfig({\n        helpers: {\n          FileSystem: {},\n          Workers: {\n            require: './custom_worker_helper'\n          }\n        }\n      });\n    }\n\n    workers.run();\n    workers.on(event.all.result, status => {\n      expect(workers.getWorkers().length).equal(2);\n      expect(status).equal(true);\n      done();\n    });\n  });","file":"unit/worker_test.js","skipped":false,"dir":"test"},{"name":"should run worker with custom config","suites":["Workers"],"updatePoint":{"line":74,"column":42,"index":1981},"line":74,"code":"  it('should run worker with custom config', done => {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    const workerConfig = {\n      by: 'test',\n      testConfig: './test/data/sandbox/codecept.customworker.js'\n    };\n    let passedCount = 0;\n    let failedCount = 0;\n    const workers = new Workers(2, workerConfig);\n\n    for (const worker of workers.getWorkers()) {\n      worker.addConfig({\n        helpers: {\n          FileSystem: {},\n          Workers: {\n            require: './custom_worker_helper'\n          }\n        }\n      });\n    }\n\n    workers.run();\n    workers.on(event.test.failed, () => {\n      failedCount += 1;\n    });\n    workers.on(event.test.passed, () => {\n      passedCount += 1;\n    });\n    workers.on(event.all.result, status => {\n      expect(status).equal(false);\n      expect(passedCount).equal(4);\n      expect(failedCount).equal(1);\n      done();\n    });\n  });","file":"unit/worker_test.js","skipped":false,"dir":"test"},{"name":"should able to add tests to each worker","suites":["Workers"],"updatePoint":{"line":109,"column":45,"index":2920},"line":109,"code":"  it('should able to add tests to each worker', done => {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    const workerConfig = {\n      by: 'test',\n      testConfig: './test/data/sandbox/codecept.customworker.js'\n    };\n    const workers = new Workers(-1, workerConfig);\n    const workerOne = workers.spawn();\n    workerOne.addTestFiles([path.join(codecept_dir, '/custom-worker/base_test.worker.js')]);\n    const workerTwo = workers.spawn();\n    workerTwo.addTestFiles([path.join(codecept_dir, '/custom-worker/custom_test.worker.js')]);\n\n    for (const worker of workers.getWorkers()) {\n      worker.addConfig({\n        helpers: {\n          FileSystem: {},\n          Workers: {\n            require: './custom_worker_helper'\n          }\n        }\n      });\n    }\n\n    workers.run();\n    workers.on(event.all.result, status => {\n      expect(workers.getWorkers().length).equal(2);\n      expect(status).equal(true);\n      done();\n    });\n  });","file":"unit/worker_test.js","skipped":false,"dir":"test"},{"name":"should able to add tests to using createGroupsOfTests","suites":["Workers"],"updatePoint":{"line":139,"column":59,"index":3921},"line":139,"code":"  it('should able to add tests to using createGroupsOfTests', done => {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    const workerConfig = {\n      by: 'test',\n      testConfig: './test/data/sandbox/codecept.customworker.js'\n    };\n    const workers = new Workers(-1, workerConfig);\n    const testGroups = workers.createGroupsOfSuites(2);\n    const workerOne = workers.spawn();\n    workerOne.addTests(testGroups[0]);\n    const workerTwo = workers.spawn();\n    workerTwo.addTests(testGroups[1]);\n\n    for (const worker of workers.getWorkers()) {\n      worker.addConfig({\n        helpers: {\n          FileSystem: {},\n          Workers: {\n            require: './custom_worker_helper'\n          }\n        }\n      });\n    }\n\n    workers.run();\n    workers.on(event.all.result, status => {\n      expect(workers.getWorkers().length).equal(2);\n      expect(status).equal(true);\n      done();\n    });\n  });","file":"unit/worker_test.js","skipped":false,"dir":"test"},{"name":"Should able to pass data from workers to main thread and vice versa","suites":["Workers"],"updatePoint":{"line":170,"column":73,"index":4882},"line":170,"code":"  it('Should able to pass data from workers to main thread and vice versa', done => {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    const workerConfig = {\n      by: 'test',\n      testConfig: './test/data/sandbox/codecept.customworker.js'\n    };\n    const workers = new Workers(2, workerConfig);\n\n    for (const worker of workers.getWorkers()) {\n      worker.addConfig({\n        helpers: {\n          FileSystem: {},\n          Workers: {\n            require: './custom_worker_helper'\n          }\n        }\n      });\n    }\n\n    workers.run();\n    recorder.add(() => share({\n      fromMain: true\n    }));\n    workers.on(event.all.result, status => {\n      expect(status).equal(true);\n      done();\n    });\n  });","file":"unit/worker_test.js","skipped":false,"dir":"test"},{"name":"should propagate non test events","suites":["Workers"],"updatePoint":{"line":198,"column":38,"index":5604},"line":198,"code":"  it('should propagate non test events', done => {\n    if (!semver.satisfies(process.version, '>=11.7.0')) this.skip('not for node version');\n    const messages = [];\n\n    const createTestGroups = () => {\n      const files = [[path.join(codecept_dir, '/non-test-events-worker/non_test_event.worker.js')]];\n      return files;\n    };\n\n    const workerConfig = {\n      by: createTestGroups,\n      testConfig: './test/data/sandbox/codecept.non-test-events-worker.js'\n    };\n    workers = new Workers(2, workerConfig);\n    workers.run();\n    workers.on('message', data => {\n      messages.push(data);\n    });\n    workers.on(event.all.result, () => {\n      expect(messages.length).equal(2);\n      expect(messages[0]).equal('message 1');\n      expect(messages[1]).equal('message 2');\n      done();\n    });\n  });","file":"unit/worker_test.js","skipped":false,"dir":"test"}]}