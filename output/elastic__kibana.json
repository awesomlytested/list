{"repo":"elastic/kibana","url":"https://github.com/elastic/kibana","branch":"main","configs":[{"package":"kibana","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@elastic/safer-lodash-set","lang":"ts","dir":"packages/elastic-safer-lodash-set/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@kbn/tinymath","lang":"js","dir":"packages/kbn-tinymath/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"x-pack","lang":"js","dir":"x-pack/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"apm-scripts","lang":"js","dir":"x-pack/plugins/apm/scripts/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"fleet","lang":"js","dir":"x-pack/plugins/fleet/cypress","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"osquery","lang":"js","dir":"x-pack/plugins/osquery/cypress","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"security_solution","lang":"js","dir":"x-pack/plugins/security_solution/cypress","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"only calls fn when previous call is complete, ignores when filter returns true","suites":[],"updatePoint":{"line":9,"column":82,"index":502},"line":9,"code":"it('only calls fn when previous call is complete, ignores when filter returns true', async () => {\n  const orderOfEvents = [];\n\n  async function foo(arg) {\n    orderOfEvents.push(`called with ${arg}`);\n    await new Promise(resolve => setTimeout(resolve, arg));\n    orderOfEvents.push(`resolved with ${arg}`);\n  }\n\n  const serialized = preventParallelCalls(foo, arg => arg === 0);\n  await Promise.all([serialized(100), serialized(0), serialized(150), serialized(170), serialized(50)]);\n  expect(orderOfEvents).toMatchInlineSnapshot(`\nArray [\n  \"called with 100\",\n  \"called with 0\",\n  \"resolved with 0\",\n  \"resolved with 100\",\n  \"called with 150\",\n  \"resolved with 150\",\n  \"called with 170\",\n  \"resolved with 170\",\n  \"called with 50\",\n  \"resolved with 50\",\n]\n`);\n});","file":"functional/services/remote/prevent_parallel_calls.test.js","skipped":false,"dir":"test"},{"name":"numbers","suites":["Abs"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(abs(-10)).toEqual(10);\n    expect(abs(10)).toEqual(10);\n  });","file":"functions/abs.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Abs"],"updatePoint":{"line":17,"column":12,"index":543},"line":17,"code":"  it('arrays', () => {\n    expect(abs([-1])).toEqual([1]);\n    expect(abs([-10, -20, -30, -40])).toEqual([10, 20, 30, 40]);\n    expect(abs([-13, 30, -90, 200])).toEqual([13, 30, 90, 200]);\n  });","file":"functions/abs.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Add"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(add(1)).toEqual(1);\n    expect(add(10, 2, 5, 8)).toEqual(25);\n    expect(add(0.1, 0.2, 0.4, 0.3)).toEqual(0.1 + 0.2 + 0.3 + 0.4);\n  });","file":"functions/add.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Add"],"updatePoint":{"line":18,"column":22,"index":627},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(add([10, 20, 30, 40], 10, 20, 30)).toEqual([70, 80, 90, 100]);\n    expect(add(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([43, 54, 65, 76]);\n  });","file":"functions/add.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Add"],"updatePoint":{"line":22,"column":12,"index":813},"line":22,"code":"  it('arrays', () => {\n    expect(add([1, 2, 3, 4])).toEqual(10);\n    expect(add([1, 2, 3, 4], [1, 2, 5, 10])).toEqual([2, 4, 8, 14]);\n    expect(add([1, 2, 3, 4], [1, 2, 5, 10], [10, 20, 30, 40])).toEqual([12, 24, 38, 54]);\n    expect(add([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([12, 50, 63, 76]);\n  });","file":"functions/add.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Add"],"updatePoint":{"line":28,"column":27,"index":1134},"line":28,"code":"  it('array length mismatch', () => {\n    expect(() => add([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/add.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Cbrt"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(cbrt(27)).toEqual(3);\n    expect(cbrt(-1)).toEqual(-1);\n    expect(cbrt(94)).toEqual(4.546835943776344);\n  });","file":"functions/cbrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Cbrt"],"updatePoint":{"line":18,"column":12,"index":595},"line":18,"code":"  it('arrays', () => {\n    expect(cbrt([27, 64, 125])).toEqual([3, 4, 5]);\n    expect(cbrt([1, 8, 1000])).toEqual([1, 2, 10]);\n  });","file":"functions/cbrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Ceil"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(ceil(-10.5)).toEqual(-10);\n    expect(ceil(-10.1)).toEqual(-10);\n    expect(ceil(10.9)).toEqual(11);\n  });","file":"functions/ceil.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Ceil"],"updatePoint":{"line":18,"column":12,"index":591},"line":18,"code":"  it('arrays', () => {\n    expect(ceil([-10.5, -20.9, -30.1, -40.2])).toEqual([-10, -20, -30, -40]);\n    expect(ceil([2.9, 5.1, 3.5, 4.3])).toEqual([3, 6, 4, 5]);\n  });","file":"functions/ceil.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Clamp"],"updatePoint":{"line":13,"column":13,"index":453},"line":13,"code":"  it('numbers', () => {\n    expect(clamp(10, 5, 8)).toEqual(8);\n    expect(clamp(1, 2, 3)).toEqual(2);\n    expect(clamp(0.5, 0.2, 0.4)).toEqual(0.4);\n    expect(clamp(3.58, 0, 1)).toEqual(1);\n    expect(clamp(-0.48, 0, 1)).toEqual(0);\n    expect(clamp(1.38, -1, 0)).toEqual(0);\n  });","file":"functions/clamp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Clamp"],"updatePoint":{"line":21,"column":22,"index":746},"line":21,"code":"  it('arrays & numbers', () => {\n    expect(clamp([10, 20, 30, 40], 15, 25)).toEqual([15, 20, 25, 25]);\n    expect(clamp(10, [15, 2, 4, 20], 25)).toEqual([15, 10, 10, 20]);\n    expect(clamp(5, 10, [20, 30, 40, 50])).toEqual([10, 10, 10, 10]);\n    expect(clamp(35, 10, [20, 30, 40, 50])).toEqual([20, 30, 35, 35]);\n    expect(clamp([1, 9], 3, [4, 5])).toEqual([3, 5]);\n  });","file":"functions/clamp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Clamp"],"updatePoint":{"line":28,"column":12,"index":1110},"line":28,"code":"  it('arrays', () => {\n    expect(clamp([6, 28, 32, 10], [11, 2, 5, 10], [20, 21, 22, 23])).toEqual([11, 21, 22, 10]);\n  });","file":"functions/clamp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"errors","suites":["Clamp"],"updatePoint":{"line":31,"column":12,"index":1235},"line":31,"code":"  it('errors', () => {\n    expect(() => clamp(1, 4, 3)).toThrow('Min must be less than max');\n    expect(() => clamp([1, 2], [3], 3)).toThrow('Array length mismatch');\n    expect(() => clamp([1, 2], [3], 3)).toThrow('Array length mismatch');\n    expect(() => clamp(10, 20, null)).toThrow(\"Missing maximum value. You may want to use the 'min' function instead\");\n    expect(() => clamp([10, 20, 30, 40], 15, null)).toThrow(\"Missing maximum value. You may want to use the 'min' function instead\");\n    expect(() => clamp(10, null, 30)).toThrow(\"Missing minimum value. You may want to use the 'max' function instead\");\n    expect(() => clamp([11, 28, 60, 10], null, [1, 48, 3, -17])).toThrow(\"Missing minimum value. You may want to use the 'max' function instead\");\n  });","file":"functions/clamp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Cosine"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(cos(0)).toEqual(1);\n    expect(cos(1.5707963267948966)).toEqual(6.123233995736766e-17);\n  });","file":"functions/cos.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Cosine"],"updatePoint":{"line":17,"column":12,"index":578},"line":17,"code":"  it('arrays', () => {\n    expect(cos([0, 1.5707963267948966])).toEqual([1, 6.123233995736766e-17]);\n  });","file":"functions/cos.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Cube"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(cube(3)).toEqual(27);\n    expect(cube(-1)).toEqual(-1);\n  });","file":"functions/cube.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Cube"],"updatePoint":{"line":17,"column":12,"index":546},"line":17,"code":"  it('arrays', () => {\n    expect(cube([3, 4, 5])).toEqual([27, 64, 125]);\n    expect(cube([1, 2, 10])).toEqual([1, 8, 1000]);\n  });","file":"functions/cube.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Degrees to Radians"],"updatePoint":{"line":13,"column":13,"index":472},"line":13,"code":"  it('numbers', () => {\n    expect(degtorad(0)).toEqual(0);\n    expect(degtorad(90)).toEqual(1.5707963267948966);\n  });","file":"functions/degtorad.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Degrees to Radians"],"updatePoint":{"line":17,"column":12,"index":591},"line":17,"code":"  it('arrays', () => {\n    expect(degtorad([0, 90, 180, 360])).toEqual([0, 1.5707963267948966, 3.141592653589793, 6.283185307179586]);\n  });","file":"functions/degtorad.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, number","suites":["Divide"],"updatePoint":{"line":13,"column":20,"index":463},"line":13,"code":"  it('number, number', () => {\n    expect(divide(10, 2)).toEqual(5);\n    expect(divide(0.1, 0.02)).toEqual(0.1 / 0.02);\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, number","suites":["Divide"],"updatePoint":{"line":17,"column":19,"index":588},"line":17,"code":"  it('array, number', () => {\n    expect(divide([10, 20, 30, 40], 10)).toEqual([1, 2, 3, 4]);\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, array","suites":["Divide"],"updatePoint":{"line":20,"column":19,"index":688},"line":20,"code":"  it('number, array', () => {\n    expect(divide(10, [1, 2, 5, 10])).toEqual([10, 5, 2, 1]);\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, array","suites":["Divide"],"updatePoint":{"line":23,"column":18,"index":785},"line":23,"code":"  it('array, array', () => {\n    expect(divide([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([11, 24, 20, 18]);\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Divide"],"updatePoint":{"line":26,"column":27,"index":907},"line":26,"code":"  it('array length mismatch', () => {\n    expect(() => divide([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/divide.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Exp"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(exp(3)).toEqual(Math.exp(3));\n    expect(exp(0)).toEqual(Math.exp(0));\n    expect(exp(5)).toEqual(Math.exp(5));\n  });","file":"functions/exp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Exp"],"updatePoint":{"line":18,"column":12,"index":599},"line":18,"code":"  it('arrays', () => {\n    expect(exp([3, 4, 5])).toEqual([Math.exp(3), Math.exp(4), Math.exp(5)]);\n    expect(exp([1, 2, 10])).toEqual([Math.exp(1), Math.exp(2), Math.exp(10)]);\n    expect(exp([10])).toEqual([Math.exp(10)]);\n  });","file":"functions/exp.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["First"],"updatePoint":{"line":13,"column":13,"index":453},"line":13,"code":"  it('numbers', () => {\n    expect(first(-10)).toEqual(-10);\n    expect(first(10)).toEqual(10);\n  });","file":"functions/first.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["First"],"updatePoint":{"line":17,"column":12,"index":554},"line":17,"code":"  it('arrays', () => {\n    expect(first([])).toEqual(undefined);\n    expect(first([-1])).toEqual(-1);\n    expect(first([-10, -20, -30, -40])).toEqual(-10);\n    expect(first([-13, 30, -90, 200])).toEqual(-13);\n  });","file":"functions/first.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"skips number validation","suites":["First"],"updatePoint":{"line":23,"column":29,"index":786},"line":23,"code":"  it('skips number validation', () => {\n    expect(first).toHaveProperty('skipNumberValidation', true);\n  });","file":"functions/first.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Fix"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(fix(-10.5)).toEqual(-10);\n    expect(fix(-10.1)).toEqual(-10);\n    expect(fix(10.9)).toEqual(10);\n  });","file":"functions/fix.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Fix"],"updatePoint":{"line":18,"column":12,"index":585},"line":18,"code":"  it('arrays', () => {\n    expect(fix([-10.5, -20.9, -30.1, -40.2])).toEqual([-10, -20, -30, -40]);\n    expect(fix([2.9, 5.1, 3.5, 4.3])).toEqual([2, 5, 3, 4]);\n  });","file":"functions/fix.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Floor"],"updatePoint":{"line":13,"column":13,"index":453},"line":13,"code":"  it('numbers', () => {\n    expect(floor(-10.5)).toEqual(-11);\n    expect(floor(-10.1)).toEqual(-11);\n    expect(floor(10.9)).toEqual(10);\n  });","file":"functions/floor.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Floor"],"updatePoint":{"line":18,"column":12,"index":597},"line":18,"code":"  it('arrays', () => {\n    expect(floor([-10.5, -20.9, -30.1, -40.2])).toEqual([-11, -21, -31, -41]);\n    expect(floor([2.9, 5.1, 3.5, 4.3])).toEqual([2, 5, 3, 4]);\n  });","file":"functions/floor.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Last"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(last(-10)).toEqual(-10);\n    expect(last(10)).toEqual(10);\n  });","file":"functions/last.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Last"],"updatePoint":{"line":17,"column":12,"index":549},"line":17,"code":"  it('arrays', () => {\n    expect(last([])).toEqual(undefined);\n    expect(last([-1])).toEqual(-1);\n    expect(last([-10, -20, -30, -40])).toEqual(-40);\n    expect(last([-13, 30, -90, 200])).toEqual(200);\n  });","file":"functions/last.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"skips number validation","suites":["Last"],"updatePoint":{"line":23,"column":29,"index":777},"line":23,"code":"  it('skips number validation', () => {\n    expect(last).toHaveProperty('skipNumberValidation', true);\n  });","file":"functions/last.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Log"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(log(1)).toEqual(Math.log(1));\n    expect(log(3, 2)).toEqual(Math.log(3) / Math.log(2));\n    expect(log(11, 3)).toEqual(Math.log(11) / Math.log(3));\n    expect(log(42, 5)).toEqual(2.322344707681546);\n  });","file":"functions/log.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Log"],"updatePoint":{"line":19,"column":12,"index":686},"line":19,"code":"  it('arrays', () => {\n    expect(log([3, 4, 5], 3)).toEqual([Math.log(3) / Math.log(3), Math.log(4) / Math.log(3), Math.log(5) / Math.log(3)]);\n    expect(log([1, 2, 10], 10)).toEqual([Math.log(1) / Math.log(10), Math.log(2) / Math.log(10), Math.log(10) / Math.log(10)]);\n  });","file":"functions/log.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number less than 1","suites":["Log"],"updatePoint":{"line":23,"column":24,"index":977},"line":23,"code":"  it('number less than 1', () => {\n    expect(() => log(-1)).toThrow('Must be greater than 0');\n  });","file":"functions/log.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"base out of range","suites":["Log"],"updatePoint":{"line":26,"column":23,"index":1078},"line":26,"code":"  it('base out of range', () => {\n    expect(() => log(1, -1)).toThrow('Base out of range');\n  });","file":"functions/log.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Log10"],"updatePoint":{"line":13,"column":13,"index":453},"line":13,"code":"  it('numbers', () => {\n    expect(log10(1)).toEqual(Math.log(1) / Math.log(10));\n    expect(log10(3)).toEqual(Math.log(3) / Math.log(10));\n    expect(log10(11)).toEqual(Math.log(11) / Math.log(10));\n    expect(log10(80)).toEqual(1.9030899869919433);\n  });","file":"functions/log10.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Log10"],"updatePoint":{"line":19,"column":12,"index":709},"line":19,"code":"  it('arrays', () => {\n    expect(log10([3, 4, 5], 3)).toEqual([Math.log(3) / Math.log(10), Math.log(4) / Math.log(10), Math.log(5) / Math.log(10)]);\n    expect(log10([1, 2, 10], 10)).toEqual([Math.log(1) / Math.log(10), Math.log(2) / Math.log(10), Math.log(10) / Math.log(10)]);\n  });","file":"functions/log10.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number less than 1","suites":["Log10"],"updatePoint":{"line":23,"column":24,"index":1007},"line":23,"code":"  it('number less than 1', () => {\n    expect(() => log10(-1)).toThrow('Must be greater than 0');\n  });","file":"functions/log10.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Max"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(max(1)).toEqual(1);\n    expect(max(10, 2, 5, 8)).toEqual(10);\n    expect(max(0.1, 0.2, 0.4, 0.3)).toEqual(0.4);\n  });","file":"functions/max.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Max"],"updatePoint":{"line":18,"column":22,"index":609},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(max([88, 20, 30, 40], 60, [30, 10, 70, 90])).toEqual([88, 60, 70, 90]);\n    expect(max(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([22, 22, 30, 40]);\n  });","file":"functions/max.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Max"],"updatePoint":{"line":22,"column":12,"index":804},"line":22,"code":"  it('arrays', () => {\n    expect(max([1, 2, 3, 4])).toEqual(4);\n    expect(max([6, 2, 3, 10], [11, 2, 5, 10])).toEqual([11, 2, 5, 10]);\n    expect(max([30, 55, 9, 4], [72, 24, 48, 10], [10, 20, 30, 40])).toEqual([72, 55, 48, 40]);\n    expect(max([11, 28, 60, 10], [1, 48, 3, -17])).toEqual([11, 48, 60, 10]);\n  });","file":"functions/max.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Max"],"updatePoint":{"line":28,"column":27,"index":1135},"line":28,"code":"  it('array length mismatch', () => {\n    expect(() => max([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/max.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Mean"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(mean(1)).toEqual(1);\n    expect(mean(10, 2, 5, 8)).toEqual(25 / 4);\n    expect(mean(0.1, 0.2, 0.4, 0.3)).toEqual((0.1 + 0.2 + 0.3 + 0.4) / 4);\n  });","file":"functions/mean.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Mean"],"updatePoint":{"line":18,"column":22,"index":643},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(mean([10, 20, 30, 40], 10, 20, 30)).toEqual([70 / 4, 80 / 4, 90 / 4, 100 / 4]);\n    expect(mean(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([43 / 4, 54 / 4, 65 / 4, 76 / 4]);\n  });","file":"functions/mean.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Mean"],"updatePoint":{"line":22,"column":12,"index":863},"line":22,"code":"  it('arrays', () => {\n    expect(mean([1, 2, 3, 4])).toEqual(10 / 4);\n    expect(mean([1, 2, 3, 4], [1, 2, 5, 10])).toEqual([2 / 2, 4 / 2, 8 / 2, 14 / 2]);\n    expect(mean([1, 2, 3, 4], [1, 2, 5, 10], [10, 20, 30, 40])).toEqual([12 / 3, 24 / 3, 38 / 3, 54 / 3]);\n    expect(mean([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([12 / 2, 50 / 2, 63 / 2, 76 / 2]);\n  });","file":"functions/mean.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Mean"],"updatePoint":{"line":28,"column":27,"index":1240},"line":28,"code":"  it('array length mismatch', () => {\n    expect(() => mean([1, 2], [3])).toThrow();\n  });","file":"functions/mean.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Median"],"updatePoint":{"line":13,"column":13,"index":456},"line":13,"code":"  it('numbers', () => {\n    expect(median(1)).toEqual(1);\n    expect(median(10, 2, 5, 8)).toEqual((8 + 5) / 2);\n    expect(median(0.1, 0.2, 0.4, 0.3)).toEqual((0.2 + 0.3) / 2);\n  });","file":"functions/median.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Median"],"updatePoint":{"line":18,"column":22,"index":648},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(median([10, 20, 30, 40], 10, 20, 30)).toEqual([15, 20, 25, 25]);\n    expect(median(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([10, 15, 16, 16]);\n  });","file":"functions/median.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Median"],"updatePoint":{"line":22,"column":12,"index":839},"line":22,"code":"  it('arrays', () => {\n    expect(median([1, 2, 3, 4], [1, 2, 5, 10])).toEqual([1, 2, 4, 7]);\n    expect(median([1, 2, 3, 4], [1, 2, 5, 10], [10, 20, 30, 40])).toEqual([1, 2, 5, 10]);\n    expect(median([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([12 / 2, 50 / 2, 63 / 2, 76 / 2]);\n  });","file":"functions/median.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Median"],"updatePoint":{"line":27,"column":27,"index":1138},"line":27,"code":"  it('array length mismatch', () => {\n    expect(() => median([1, 2], [3])).toThrow();\n  });","file":"functions/median.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Min"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(min(1)).toEqual(1);\n    expect(min(10, 2, 5, 8)).toEqual(2);\n    expect(min(0.1, 0.2, 0.4, 0.3)).toEqual(0.1);\n  });","file":"functions/min.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Min"],"updatePoint":{"line":18,"column":22,"index":608},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(min([88, 20, 30, 100], 60, [30, 10, 70, 90])).toEqual([30, 10, 30, 60]);\n    expect(min([50, 20, 3, 40], 10, [13, 2, 34, 4], 22)).toEqual([10, 2, 3, 4]);\n    expect(min(10, [50, 20, 3, 40], [13, 2, 34, 4], 22)).toEqual([10, 2, 3, 4]);\n  });","file":"functions/min.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Min"],"updatePoint":{"line":23,"column":12,"index":883},"line":23,"code":"  it('arrays', () => {\n    expect(min([1, 2, 3, 4])).toEqual(1);\n    expect(min([6, 2, 30, 10], [11, 2, 5, 15])).toEqual([6, 2, 5, 10]);\n    expect(min([30, 55, 9, 4], [72, 24, 48, 10], [10, 20, 30, 40])).toEqual([10, 20, 9, 4]);\n    expect(min([11, 28, 60, 10], [1, 48, 3, -17])).toEqual([1, 28, 3, -17]);\n  });","file":"functions/min.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Min"],"updatePoint":{"line":29,"column":27,"index":1211},"line":29,"code":"  it('array length mismatch', () => {\n    expect(() => min([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/min.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, number","suites":["Mod"],"updatePoint":{"line":13,"column":20,"index":454},"line":13,"code":"  it('number, number', () => {\n    expect(mod(13, 8)).toEqual(5);\n    expect(mod(0.1, 0.02)).toEqual(0.1 % 0.02);\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, number","suites":["Mod"],"updatePoint":{"line":17,"column":19,"index":573},"line":17,"code":"  it('array, number', () => {\n    expect(mod([13, 26, 34, 42], 10)).toEqual([3, 6, 4, 2]);\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, array","suites":["Mod"],"updatePoint":{"line":20,"column":19,"index":670},"line":20,"code":"  it('number, array', () => {\n    expect(mod(10, [3, 7, 2, 4])).toEqual([1, 3, 0, 2]);\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, array","suites":["Mod"],"updatePoint":{"line":23,"column":18,"index":762},"line":23,"code":"  it('array, array', () => {\n    expect(mod([11, 48, 60, 72], [4, 13, 9, 5])).toEqual([3, 9, 6, 2]);\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Mod"],"updatePoint":{"line":26,"column":27,"index":878},"line":26,"code":"  it('array length mismatch', () => {\n    expect(() => mod([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/mod.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Mode"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(mode(1)).toEqual(1);\n    expect(mode(10, 2, 5, 8)).toEqual([2, 5, 8, 10]);\n    expect(mode(0.1, 0.2, 0.4, 0.3)).toEqual([0.1, 0.2, 0.3, 0.4]);\n    expect(mode(1, 1, 2, 3, 1, 4, 3, 2, 4)).toEqual([1]);\n  });","file":"functions/mode.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Mode"],"updatePoint":{"line":19,"column":22,"index":701},"line":19,"code":"  it('arrays & numbers', () => {\n    expect(mode([10, 20, 30, 40], 10, 20, 30)).toEqual([[10], [20], [30], [10, 20, 30, 40]]);\n    expect(mode([1, 2, 3, 4], 2, 3, [3, 2, 4, 3])).toEqual([[3], [2], [3], [3]]);\n  });","file":"functions/mode.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Mode"],"updatePoint":{"line":23,"column":12,"index":906},"line":23,"code":"  it('arrays', () => {\n    expect(mode([1, 2, 3, 4], [1, 2, 5, 10])).toEqual([[1], [2], [3, 5], [4, 10]]);\n    expect(mode([1, 2, 3, 4], [1, 2, 1, 2], [2, 3, 2, 3], [4, 3, 2, 3])).toEqual([[1], [2, 3], [2], [3]]);\n  });","file":"functions/mode.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Mode"],"updatePoint":{"line":27,"column":27,"index":1141},"line":27,"code":"  it('array length mismatch', () => {\n    expect(() => mode([1, 2], [3])).toThrow();\n  });","file":"functions/mode.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, number","suites":["Multiply"],"updatePoint":{"line":13,"column":20,"index":469},"line":13,"code":"  it('number, number', () => {\n    expect(multiply(10, 2)).toEqual(20);\n    expect(multiply(0.1, 0.2)).toEqual(0.1 * 0.2);\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, number","suites":["Multiply"],"updatePoint":{"line":17,"column":19,"index":597},"line":17,"code":"  it('array, number', () => {\n    expect(multiply([10, 20, 30, 40], 10)).toEqual([100, 200, 300, 400]);\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, array","suites":["Multiply"],"updatePoint":{"line":20,"column":19,"index":707},"line":20,"code":"  it('number, array', () => {\n    expect(multiply(10, [1, 2, 5, 10])).toEqual([10, 20, 50, 100]);\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, array","suites":["Multiply"],"updatePoint":{"line":23,"column":18,"index":810},"line":23,"code":"  it('array, array', () => {\n    expect(multiply([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([11, 96, 180, 288]);\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Multiply"],"updatePoint":{"line":26,"column":27,"index":936},"line":26,"code":"  it('array length mismatch', () => {\n    expect(() => multiply([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/multiply.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"constant","suites":["PI"],"updatePoint":{"line":13,"column":14,"index":445},"line":13,"code":"  it('constant', () => {\n    expect(pi()).toEqual(Math.PI);\n  });","file":"functions/pi.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Pow"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(pow(3, 2)).toEqual(9);\n    expect(pow(-1, -1)).toEqual(-1);\n    expect(pow(5, 0)).toEqual(1);\n  });","file":"functions/pow.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Pow"],"updatePoint":{"line":18,"column":12,"index":581},"line":18,"code":"  it('arrays', () => {\n    expect(pow([3, 4, 5], 3)).toEqual([Math.pow(3, 3), Math.pow(4, 3), Math.pow(5, 3)]);\n    expect(pow([1, 2, 10], 10)).toEqual([Math.pow(1, 10), Math.pow(2, 10), Math.pow(10, 10)]);\n  });","file":"functions/pow.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"missing exponent","suites":["Pow"],"updatePoint":{"line":22,"column":22,"index":804},"line":22,"code":"  it('missing exponent', () => {\n    expect(() => pow(1)).toThrow('Missing exponent');\n  });","file":"functions/pow.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Radians to Degrees"],"updatePoint":{"line":13,"column":13,"index":472},"line":13,"code":"  it('numbers', () => {\n    expect(radtodeg(0)).toEqual(0);\n    expect(radtodeg(1.5707963267948966)).toEqual(90);\n  });","file":"functions/radtodeg.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Radians to Degrees"],"updatePoint":{"line":17,"column":12,"index":591},"line":17,"code":"  it('arrays', () => {\n    expect(radtodeg([0, 1.5707963267948966, 3.141592653589793, 6.283185307179586])).toEqual([0, 90, 180, 360]);\n  });","file":"functions/radtodeg.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Random"],"updatePoint":{"line":13,"column":13,"index":456},"line":13,"code":"  it('numbers', () => {\n    const random1 = random();\n    expect(random1).toBeGreaterThanOrEqual(0);\n    expect(random1).toBeLessThan(1);\n    expect(random(0)).toEqual(0);\n    const random3 = random(3);\n    expect(random3).toBeGreaterThanOrEqual(0);\n    expect(random3).toBeLessThan(3);\n    const random100 = random(-100, 100);\n    expect(random100).toBeGreaterThanOrEqual(-100);\n    expect(random100).toBeLessThan(100);\n    expect(random(1, 1)).toEqual(1);\n    expect(random(100, 100)).toEqual(100);\n  });","file":"functions/random.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"min greater than max","suites":["Random"],"updatePoint":{"line":27,"column":26,"index":976},"line":27,"code":"  it('min greater than max', () => {\n    expect(() => random(-1)).toThrow('Min is greater than max');\n    expect(() => random(3, 1)).toThrow('Min is greater than max');\n  });","file":"functions/random.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Range"],"updatePoint":{"line":13,"column":13,"index":453},"line":13,"code":"  it('numbers', () => {\n    expect(range(1)).toEqual(0);\n    expect(range(10, 2, 5, 8)).toEqual(8);\n    expect(range(0.1, 0.2, 0.4, 0.3)).toEqual(0.4 - 0.1);\n  });","file":"functions/range.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Range"],"updatePoint":{"line":18,"column":22,"index":626},"line":18,"code":"  it('arrays & numbers', () => {\n    expect(range([88, 20, 30, 40], 60, [30, 10, 70, 90])).toEqual([58, 50, 40, 50]);\n    expect(range(10, [10, 20, 30, 40], [1, 2, 3, 4], 22)).toEqual([21, 20, 27, 36]);\n  });","file":"functions/range.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Range"],"updatePoint":{"line":22,"column":12,"index":825},"line":22,"code":"  it('arrays', () => {\n    expect(range([1, 2, 3, 4])).toEqual(3);\n    expect(range([6, 2, 3, 10], [11, 2, 5, 10])).toEqual([5, 0, 2, 0]);\n    expect(range([30, 55, 9, 4], [72, 24, 48, 10], [10, 20, 30, 40])).toEqual([62, 35, 39, 36]);\n    expect(range([11, 28, 60, 10], [1, 48, 3, -17])).toEqual([10, 20, 57, 27]);\n  });","file":"functions/range.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Range"],"updatePoint":{"line":28,"column":27,"index":1162},"line":28,"code":"  it('array length mismatch', () => {\n    expect(() => range([1, 2], [3])).toThrow();\n  });","file":"functions/range.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Round"],"updatePoint":{"line":13,"column":13,"index":453},"line":13,"code":"  it('numbers', () => {\n    expect(round(-10.51)).toEqual(-11);\n    expect(round(-10.1, 2)).toEqual(-10.1);\n    expect(round(10.93745987, 4)).toEqual(10.9375);\n  });","file":"functions/round.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Round"],"updatePoint":{"line":18,"column":12,"index":618},"line":18,"code":"  it('arrays', () => {\n    expect(round([-10.51, -20.9, -30.1, -40.2])).toEqual([-11, -21, -30, -40]);\n    expect(round([2.9234, 5.1234, 3.5234, 4.49234324], 2)).toEqual([2.92, 5.12, 3.52, 4.49]);\n  });","file":"functions/round.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Sine"],"updatePoint":{"line":13,"column":13,"index":448},"line":13,"code":"  it('numbers', () => {\n    expect(sin(0)).toEqual(0);\n    expect(sin(1.5707963267948966)).toEqual(1);\n  });","file":"functions/sin.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Sine"],"updatePoint":{"line":17,"column":12,"index":556},"line":17,"code":"  it('arrays', () => {\n    expect(sin([0, 1.5707963267948966])).toEqual([0, 1]);\n  });","file":"functions/sin.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array","suites":["Size (also Count)"],"updatePoint":{"line":13,"column":11,"index":461},"line":13,"code":"  it('array', () => {\n    expect(size([])).toEqual(0);\n    expect(size([10, 20, 30, 40])).toEqual(4);\n  });","file":"functions/size.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"not an array","suites":["Size (also Count)"],"updatePoint":{"line":17,"column":18,"index":576},"line":17,"code":"  it('not an array', () => {\n    expect(() => size(null)).toThrow('Must pass an array');\n    expect(() => size(undefined)).toThrow('Must pass an array');\n    expect(() => size('string')).toThrow('Must pass an array');\n    expect(() => size(10)).toThrow('Must pass an array');\n    expect(() => size(true)).toThrow('Must pass an array');\n    expect(() => size({})).toThrow('Must pass an array');\n    expect(() => size(function () {})).toThrow('Must pass an array');\n  });","file":"functions/size.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"skips number validation","suites":["Size (also Count)"],"updatePoint":{"line":26,"column":29,"index":1057},"line":26,"code":"  it('skips number validation', () => {\n    expect(size).toHaveProperty('skipNumberValidation', true);\n  });","file":"functions/size.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Sqrt"],"updatePoint":{"line":13,"column":13,"index":450},"line":13,"code":"  it('numbers', () => {\n    expect(sqrt(9)).toEqual(3);\n    expect(sqrt(0)).toEqual(0);\n    expect(sqrt(30)).toEqual(5.477225575051661);\n  });","file":"functions/sqrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Sqrt"],"updatePoint":{"line":18,"column":12,"index":592},"line":18,"code":"  it('arrays', () => {\n    expect(sqrt([49, 64, 81])).toEqual([7, 8, 9]);\n    expect(sqrt([1, 4, 100])).toEqual([1, 2, 10]);\n  });","file":"functions/sqrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"Invalid negative number","suites":["Sqrt"],"updatePoint":{"line":22,"column":29,"index":740},"line":22,"code":"  it('Invalid negative number', () => {\n    expect(() => sqrt(-1)).toThrow('Unable find the square root of a negative number');\n  });","file":"functions/sqrt.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Square"],"updatePoint":{"line":13,"column":13,"index":456},"line":13,"code":"  it('numbers', () => {\n    expect(square(3)).toEqual(9);\n    expect(square(-1)).toEqual(1);\n  });","file":"functions/square.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Square"],"updatePoint":{"line":17,"column":12,"index":554},"line":17,"code":"  it('arrays', () => {\n    expect(square([3, 4, 5])).toEqual([9, 16, 25]);\n    expect(square([1, 2, 10])).toEqual([1, 4, 100]);\n  });","file":"functions/square.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, number","suites":["Subtract"],"updatePoint":{"line":13,"column":20,"index":469},"line":13,"code":"  it('number, number', () => {\n    expect(subtract(10, 2)).toEqual(8);\n    expect(subtract(0.1, 0.2)).toEqual(0.1 - 0.2);\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, number","suites":["Subtract"],"updatePoint":{"line":17,"column":19,"index":596},"line":17,"code":"  it('array, number', () => {\n    expect(subtract([10, 20, 30, 40], 10)).toEqual([0, 10, 20, 30]);\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"number, array","suites":["Subtract"],"updatePoint":{"line":20,"column":19,"index":701},"line":20,"code":"  it('number, array', () => {\n    expect(subtract(10, [1, 2, 5, 10])).toEqual([9, 8, 5, 0]);\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array, array","suites":["Subtract"],"updatePoint":{"line":23,"column":18,"index":799},"line":23,"code":"  it('array, array', () => {\n    expect(subtract([11, 48, 60, 72], [1, 2, 3, 4])).toEqual([10, 46, 57, 68]);\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["Subtract"],"updatePoint":{"line":26,"column":27,"index":923},"line":26,"code":"  it('array length mismatch', () => {\n    expect(() => subtract([1, 2], [3])).toThrow('Array length mismatch');\n  });","file":"functions/subtract.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Sum"],"updatePoint":{"line":13,"column":13,"index":447},"line":13,"code":"  it('numbers', () => {\n    expect(sum(10, 2, 5, 8)).toEqual(25);\n    expect(sum(0.1, 0.2, 0.4, 0.3)).toEqual(0.1 + 0.2 + 0.3 + 0.4);\n  });","file":"functions/sum.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays & numbers","suites":["Sum"],"updatePoint":{"line":17,"column":22,"index":596},"line":17,"code":"  it('arrays & numbers', () => {\n    expect(sum([10, 20, 30, 40], 10, 20, 30)).toEqual(160);\n    expect(sum([10, 20, 30, 40], 10, [1, 2, 3], 22)).toEqual(138);\n  });","file":"functions/sum.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Sum"],"updatePoint":{"line":21,"column":12,"index":752},"line":21,"code":"  it('arrays', () => {\n    expect(sum([1, 2, 3, 4], [1, 2, 5, 10])).toEqual(28);\n    expect(sum([1, 2, 3, 4], [1, 2, 5, 10], [10, 20, 30, 40])).toEqual(128);\n    expect(sum([11, 48, 60, 72], [1, 2, 3, 4])).toEqual(201);\n  });","file":"functions/sum.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Tangent"],"updatePoint":{"line":13,"column":13,"index":451},"line":13,"code":"  it('numbers', () => {\n    expect(tan(0)).toEqual(0);\n    expect(tan(1)).toEqual(1.5574077246549023);\n  });","file":"functions/tan.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Tangent"],"updatePoint":{"line":17,"column":12,"index":559},"line":17,"code":"  it('arrays', () => {\n    expect(tan([0, 1])).toEqual([0, 1.5574077246549023]);\n  });","file":"functions/tan.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"2D arrays","suites":["transpose"],"updatePoint":{"line":13,"column":15,"index":471},"line":13,"code":"  it('2D arrays', () => {\n    expect(transpose([[1, 2], [3, 4], [5, 6]], 0)).toEqual([[1, 3, 5], [2, 4, 6]]);\n    expect(transpose([10, 20, [10, 20, 30, 40], 30], 2)).toEqual([[10, 20, 10, 30], [10, 20, 20, 30], [10, 20, 30, 30], [10, 20, 40, 30]]);\n    expect(transpose([4, [1, 9], [3, 5]], 1)).toEqual([[4, 1, 3], [4, 9, 5]]);\n  });","file":"functions/transpose.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"array length mismatch","suites":["transpose"],"updatePoint":{"line":18,"column":27,"index":818},"line":18,"code":"  it('array length mismatch', () => {\n    expect(() => transpose([[1], [2, 3]], 0)).toThrow('Array length mismatch');\n  });","file":"functions/transpose.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Unique"],"updatePoint":{"line":13,"column":13,"index":456},"line":13,"code":"  it('numbers', () => {\n    expect(unique(1)).toEqual(1);\n    expect(unique(10000)).toEqual(1);\n  });","file":"functions/unique.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arrays","suites":["Unique"],"updatePoint":{"line":17,"column":12,"index":557},"line":17,"code":"  it('arrays', () => {\n    expect(unique([])).toEqual(0);\n    expect(unique([-10, -20, -30, -40])).toEqual(4);\n    expect(unique([-13, 30, -90, 200])).toEqual(4);\n    expect(unique([1, 2, 3, 4, 2, 2, 2, 3, 4, 2, 4, 5, 2, 1, 4, 2])).toEqual(5);\n  });","file":"functions/unique.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"skips number validation","suites":["Unique"],"updatePoint":{"line":23,"column":29,"index":824},"line":23,"code":"  it('skips number validation', () => {\n    expect(unique).toHaveProperty('skipNumberValidation', true);\n  });","file":"functions/unique.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"integers","suites":["Parser","Numbers"],"updatePoint":{"line":40,"column":16,"index":921},"line":40,"code":"    it('integers', () => {\n      expect(parse('10')).toEqual(10);\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"floats","suites":["Parser","Numbers"],"updatePoint":{"line":43,"column":14,"index":993},"line":43,"code":"    it('floats', () => {\n      expect(parse('10.5')).toEqual(10.5);\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"negatives","suites":["Parser","Numbers"],"updatePoint":{"line":46,"column":17,"index":1072},"line":46,"code":"    it('negatives', () => {\n      expect(parse('-10')).toEqual(-10);\n      expect(parse('-10.5')).toEqual(-10.5);\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"converts basic symbols into left-to-right pairs","suites":["Parser","Math"],"updatePoint":{"line":52,"column":55,"index":1265},"line":52,"code":"    it('converts basic symbols into left-to-right pairs', () => {\n      expect(parse('a + b + c - d')).toEqual({\n        args: [{\n          name: 'add',\n          type: 'function',\n          args: [{\n            name: 'add',\n            type: 'function',\n            args: [expect.objectContaining({\n              location: {\n                min: 0,\n                max: 2\n              }\n            }), expect.objectContaining({\n              location: {\n                min: 3,\n                max: 6\n              }\n            })]\n          }, expect.objectContaining({\n            location: {\n              min: 7,\n              max: 10\n            }\n          })]\n        }, expect.objectContaining({\n          location: {\n            min: 11,\n            max: 13\n          }\n        })],\n        name: 'subtract',\n        type: 'function',\n        text: 'a + b + c - d',\n        location: {\n          min: 0,\n          max: 13\n        }\n      });\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"strings","suites":["Parser","Variables"],"updatePoint":{"line":94,"column":15,"index":2226},"line":94,"code":"    it('strings', () => {\n      expect(parse('f')).toEqual(variableEqual('f'));\n      expect(parse('foo')).toEqual(variableEqual('foo'));\n      expect(parse('foo1')).toEqual(variableEqual('foo1'));\n      expect(() => parse('1foo1')).toThrow('but \"f\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"strings with spaces","suites":["Parser","Variables"],"updatePoint":{"line":100,"column":27,"index":2505},"line":100,"code":"    it('strings with spaces', () => {\n      expect(parse(' foo ')).toEqual(variableEqual('foo'));\n      expect(() => parse(' foo bar ')).toThrow('but \"b\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"allowed characters","suites":["Parser","Variables"],"updatePoint":{"line":104,"column":26,"index":2675},"line":104,"code":"    it('allowed characters', () => {\n      expect(parse('_foo')).toEqual(variableEqual('_foo'));\n      expect(parse('@foo')).toEqual(variableEqual('@foo'));\n      expect(parse('.foo')).toEqual(variableEqual('.foo'));\n      expect(parse('-foo')).toEqual(variableEqual('-foo'));\n      expect(parse('_foo0')).toEqual(variableEqual('_foo0'));\n      expect(parse('@foo0')).toEqual(variableEqual('@foo0'));\n      expect(parse('.foo0')).toEqual(variableEqual('.foo0'));\n      expect(parse('-foo0')).toEqual(variableEqual('-foo0'));\n      expect(() => parse(`foo😀\\t')`)).toThrow('Failed to parse');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"strings with double quotes","suites":["Parser","quoted variables"],"updatePoint":{"line":117,"column":34,"index":3328},"line":117,"code":"    it('strings with double quotes', () => {\n      expect(parse('\"foo\"')).toEqual(variableEqual('foo'));\n      expect(parse('\"f b\"')).toEqual(variableEqual('f b'));\n      expect(parse('\"foo bar\"')).toEqual(variableEqual('foo bar'));\n      expect(parse('\"foo bar fizz buzz\"')).toEqual(variableEqual('foo bar fizz buzz'));\n      expect(parse('\"foo   bar   baby\"')).toEqual(variableEqual('foo   bar   baby'));\n      expect(parse(`\"f'oo\"`)).toEqual(variableEqual(`f'oo`));\n      expect(parse(`\"foo😀\\t\"`)).toEqual(variableEqual(`foo😀\\t`));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"strings with single quotes","suites":["Parser","quoted variables"],"updatePoint":{"line":126,"column":34,"index":3873},"line":126,"code":"    it('strings with single quotes', () => {\n      /* eslint-disable prettier/prettier */\n      expect(parse(\"'foo'\")).toEqual(variableEqual('foo'));\n      expect(parse(\"'f b'\")).toEqual(variableEqual('f b'));\n      expect(parse(\"'foo bar'\")).toEqual(variableEqual('foo bar'));\n      expect(parse(\"'foo bar fizz buzz'\")).toEqual(variableEqual('foo bar fizz buzz'));\n      expect(parse(\"'foo   bar   baby'\")).toEqual(variableEqual('foo   bar   baby'));\n      expect(parse(\"' foo bar'\")).toEqual(variableEqual(\" foo bar\"));\n      expect(parse(\"'foo bar '\")).toEqual(variableEqual(\"foo bar \"));\n      expect(parse(\"'0foo'\")).toEqual(variableEqual(\"0foo\"));\n      expect(parse(\"' foo bar'\")).toEqual(variableEqual(\" foo bar\"));\n      expect(parse(\"'foo bar '\")).toEqual(variableEqual(\"foo bar \"));\n      expect(parse(\"'0foo'\")).toEqual(variableEqual(\"0foo\"));\n      expect(parse(`'f\"oo'`)).toEqual(variableEqual(`f\"oo`));\n      expect(parse(`'foo😀\\t'`)).toEqual(variableEqual(`foo😀\\t`));\n      /* eslint-enable prettier/prettier */\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"allowed characters","suites":["Parser","quoted variables"],"updatePoint":{"line":143,"column":26,"index":4903},"line":143,"code":"    it('allowed characters', () => {\n      expect(parse('\"_foo bar\"')).toEqual(variableEqual('_foo bar'));\n      expect(parse('\"@foo bar\"')).toEqual(variableEqual('@foo bar'));\n      expect(parse('\".foo bar\"')).toEqual(variableEqual('.foo bar'));\n      expect(parse('\"-foo bar\"')).toEqual(variableEqual('-foo bar'));\n      expect(parse('\"_foo0 bar1\"')).toEqual(variableEqual('_foo0 bar1'));\n      expect(parse('\"@foo0 bar1\"')).toEqual(variableEqual('@foo0 bar1'));\n      expect(parse('\".foo0 bar1\"')).toEqual(variableEqual('.foo0 bar1'));\n      expect(parse('\"-foo0 bar1\"')).toEqual(variableEqual('-foo0 bar1'));\n      expect(parse('\" foo bar\"')).toEqual(variableEqual(' foo bar'));\n      expect(parse('\"foo bar \"')).toEqual(variableEqual('foo bar '));\n      expect(parse('\"0foo\"')).toEqual(variableEqual('0foo'));\n      expect(parse('\" foo bar\"')).toEqual(variableEqual(' foo bar'));\n      expect(parse('\"foo bar \"')).toEqual(variableEqual('foo bar '));\n      expect(parse('\"0foo\"')).toEqual(variableEqual('0foo'));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"no arguments","suites":["Parser","Functions"],"updatePoint":{"line":161,"column":20,"index":5960},"line":161,"code":"    it('no arguments', () => {\n      expect(parse('foo()')).toEqual(functionEqual('foo', []));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arguments","suites":["Parser","Functions"],"updatePoint":{"line":164,"column":17,"index":6060},"line":164,"code":"    it('arguments', () => {\n      expect(parse('foo(5,10)')).toEqual(functionEqual('foo', [5, 10]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"arguments with strings","suites":["Parser","Functions"],"updatePoint":{"line":167,"column":30,"index":6182},"line":167,"code":"    it('arguments with strings', () => {\n      expect(parse('foo(\"string with spaces\")')).toEqual(functionEqual('foo', [variableEqual('string with spaces')]));\n      expect(parse(\"foo('string with spaces')\")).toEqual(functionEqual('foo', [variableEqual('string with spaces')]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named only","suites":["Parser","Functions"],"updatePoint":{"line":171,"column":18,"index":6457},"line":171,"code":"    it('named only', () => {\n      expect(parse('foo(q=10)')).toEqual(functionEqual('foo', [namedArgumentEqual('q', 10)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named argument is numeric","suites":["Parser","Functions"],"updatePoint":{"line":174,"column":33,"index":6604},"line":174,"code":"    it('named argument is numeric', () => {\n      expect(parse('foo(q=10.1234e5)')).toEqual(functionEqual('foo', [namedArgumentEqual('q', 10.1234e5)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named argument is empty string","suites":["Parser","Functions"],"updatePoint":{"line":177,"column":38,"index":6770},"line":177,"code":"    it('named argument is empty string', () => {\n      expect(parse('foo(q=\"\")')).toEqual(functionEqual('foo', [namedArgumentEqual('q', '')]));\n      expect(parse(`foo(q='')`)).toEqual(functionEqual('foo', [namedArgumentEqual('q', '')]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named and positional","suites":["Parser","Functions"],"updatePoint":{"line":181,"column":28,"index":7007},"line":181,"code":"    it('named and positional', () => {\n      expect(parse('foo(ref, q=\"bar\")')).toEqual(functionEqual('foo', [variableEqual('ref'), namedArgumentEqual('q', 'bar')]));\n      expect(parse(`foo(ref, q='ba\"r')`)).toEqual(functionEqual('foo', [variableEqual('ref'), namedArgumentEqual('q', `ba\"r`)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numerically named","suites":["Parser","Functions"],"updatePoint":{"line":185,"column":25,"index":7309},"line":185,"code":"    it('numerically named', () => {\n      expect(() => parse('foo(1=2)')).toThrow('but \"(\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"multiple named","suites":["Parser","Functions"],"updatePoint":{"line":188,"column":22,"index":7414},"line":188,"code":"    it('multiple named', () => {\n      expect(parse('foo(q_param=\"bar\", offset=\"1d\")')).toEqual(functionEqual('foo', [namedArgumentEqual('q_param', 'bar'), namedArgumentEqual('offset', '1d')]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"multiple named and positional","suites":["Parser","Functions"],"updatePoint":{"line":191,"column":37,"index":7632},"line":191,"code":"    it('multiple named and positional', () => {\n      expect(parse('foo(q=\"bar\", ref, offset=\"1d\", 100)')).toEqual(functionEqual('foo', [namedArgumentEqual('q', 'bar'), variableEqual('ref'), namedArgumentEqual('offset', '1d'), 100]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"duplicate named","suites":["Parser","Functions"],"updatePoint":{"line":194,"column":23,"index":7861},"line":194,"code":"    it('duplicate named', () => {\n      expect(parse('foo(q=\"bar\", q=\"test\")')).toEqual(functionEqual('foo', [namedArgumentEqual('q', 'bar'), namedArgumentEqual('q', 'test')]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"incomplete named","suites":["Parser","Functions"],"updatePoint":{"line":197,"column":24,"index":8048},"line":197,"code":"    it('incomplete named', () => {\n      expect(() => parse('foo(a=)')).toThrow('but \"(\" found');\n      expect(() => parse('foo(=a)')).toThrow('but \"(\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"invalid named","suites":["Parser","Functions"],"updatePoint":{"line":201,"column":21,"index":8214},"line":201,"code":"    it('invalid named', () => {\n      expect(() => parse('foo(offset-type=\"1d\")')).toThrow('but \"(\" found');\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named with complex strings","suites":["Parser","Functions"],"updatePoint":{"line":204,"column":34,"index":8344},"line":204,"code":"    it('named with complex strings', () => {\n      expect(parse(`foo(filter='😀 > \"\\ttab\"')`)).toEqual(functionEqual('foo', [namedArgumentEqual('filter', `😀 > \"\\ttab\"`)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"named with escape characters","suites":["Parser","Functions"],"updatePoint":{"line":207,"column":36,"index":8528},"line":207,"code":"    it('named with escape characters', () => {\n      expect(parse(`foo(filter='Women\\\\'s Clothing')`)).toEqual(functionEqual('foo', [namedArgumentEqual('filter', `Women's Clothing`)]));\n      expect(parse(`foo(filter=\"\\\\\"Quoted inner string\\\\\"\")`)).toEqual(functionEqual('foo', [namedArgumentEqual('filter', `\"Quoted inner string\"`)]));\n    });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"Missing expression","suites":["Parser","Functions"],"updatePoint":{"line":212,"column":24,"index":8867},"line":212,"code":"  it('Missing expression', () => {\n    expect(() => parse(undefined)).toThrow('Missing expression');\n    expect(() => parse(null)).toThrow('Missing expression');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"Failed parse","suites":["Parser","Functions"],"updatePoint":{"line":216,"column":18,"index":9029},"line":216,"code":"  it('Failed parse', () => {\n    expect(() => parse('')).toThrow('Failed to parse expression');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"Not a string","suites":["Parser","Functions"],"updatePoint":{"line":219,"column":18,"index":9131},"line":219,"code":"  it('Not a string', () => {\n    expect(() => parse(3)).toThrow('Expression must be a string');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"numbers","suites":["Evaluate"],"updatePoint":{"line":224,"column":13,"index":9261},"line":224,"code":"  it('numbers', () => {\n    expect(evaluate('10')).toEqual(10);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"variables","suites":["Evaluate"],"updatePoint":{"line":227,"column":15,"index":9333},"line":227,"code":"  it('variables', () => {\n    expect(evaluate('foo', {\n      foo: 10\n    })).toEqual(10);\n    expect(evaluate('bar', {\n      bar: [1, 2]\n    })).toEqual([1, 2]);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"variables with spaces","suites":["Evaluate"],"updatePoint":{"line":235,"column":27,"index":9513},"line":235,"code":"  it('variables with spaces', () => {\n    expect(evaluate('\"foo bar\"', {\n      'foo bar': 10\n    })).toEqual(10);\n    expect(evaluate('\"key with many spaces in it\"', {\n      'key with many spaces in it': 10\n    })).toEqual(10);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"variables with dots","suites":["Evaluate"],"updatePoint":{"line":243,"column":25,"index":9745},"line":243,"code":"  it('variables with dots', () => {\n    expect(evaluate('foo.bar', {\n      'foo.bar': 20\n    })).toEqual(20);\n    expect(evaluate('\"is.null\"', {\n      'is.null': null\n    })).toEqual(null);\n    expect(evaluate('\"is.false\"', {\n      'is.null': null,\n      'is.false': false\n    })).toEqual(false);\n    expect(evaluate('\"with space.val\"', {\n      'with space.val': 42\n    })).toEqual(42);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"variables with dot notation","suites":["Evaluate"],"updatePoint":{"line":258,"column":33,"index":10146},"line":258,"code":"  it('variables with dot notation', () => {\n    expect(evaluate('foo.bar', {\n      foo: {\n        bar: 20\n      }\n    })).toEqual(20);\n    expect(evaluate('foo.bar[0].baz', {\n      foo: {\n        bar: [{\n          baz: 30\n        }, {\n          beer: 40\n        }]\n      }\n    })).toEqual(30);\n    expect(evaluate('\"is.false\"', {\n      is: {\n        null: null,\n        false: false\n      }\n    })).toEqual(false);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations","suites":["Evaluate"],"updatePoint":{"line":280,"column":15,"index":10549},"line":280,"code":"  it('equations', () => {\n    expect(evaluate('3 + 4')).toEqual(7);\n    expect(evaluate('10 - 2')).toEqual(8);\n    expect(evaluate('8 + 6 / 3')).toEqual(10);\n    expect(evaluate('10 * (1 + 2)')).toEqual(30);\n    expect(evaluate('(3 - 4) * 10')).toEqual(-10);\n    expect(evaluate('-1 - -12')).toEqual(11);\n    expect(evaluate('5/20')).toEqual(0.25);\n    expect(evaluate('1 + 1 + 2 + 3 + 12')).toEqual(19);\n    expect(evaluate('100 / 10 / 10')).toEqual(1);\n    expect(evaluate('0 * 1 - 100 / 10 / 10')).toEqual(-1);\n    expect(evaluate('100 / (10 / 10)')).toEqual(100);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with functions","suites":["Evaluate"],"updatePoint":{"line":293,"column":30,"index":11138},"line":293,"code":"  it('equations with functions', () => {\n    expect(evaluate('3 + multiply(10, 4)')).toEqual(43);\n    expect(evaluate('3 + multiply(10, 4, 5)')).toEqual(203);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with trigonometry","suites":["Evaluate"],"updatePoint":{"line":297,"column":33,"index":11306},"line":297,"code":"  it('equations with trigonometry', () => {\n    expect(evaluate('pi()')).toEqual(Math.PI);\n    expect(evaluate('sin(degtorad(0))')).toEqual(0);\n    expect(evaluate('sin(degtorad(180))')).toEqual(1.2246467991473532e-16);\n    expect(evaluate('cos(degtorad(0))')).toEqual(1);\n    expect(evaluate('cos(degtorad(180))')).toEqual(-1);\n    expect(evaluate('tan(degtorad(0))')).toEqual(0);\n    expect(evaluate('tan(degtorad(180))')).toEqual(-1.2246467991473532e-16);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with variables","suites":["Evaluate"],"updatePoint":{"line":306,"column":30,"index":11768},"line":306,"code":"  it('equations with variables', () => {\n    expect(evaluate('3 + foo', {\n      foo: 5\n    })).toEqual(8);\n    expect(evaluate('3 + foo', {\n      foo: [5, 10]\n    })).toEqual([8, 13]);\n    expect(evaluate('3 + foo', {\n      foo: 5\n    })).toEqual(8);\n    expect(evaluate('sum(foo)', {\n      foo: [5, 10, 15]\n    })).toEqual(30);\n    expect(evaluate('90 / sum(foo)', {\n      foo: [5, 10, 15]\n    })).toEqual(3);\n    expect(evaluate('multiply(foo, bar)', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([4, 10, 18]);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with quoted variables","suites":["Evaluate"],"updatePoint":{"line":327,"column":37,"index":12309},"line":327,"code":"  it('equations with quoted variables', () => {\n    expect(evaluate('\"b\" * 7', {\n      b: 3\n    })).toEqual(21);\n    expect(evaluate('\"space name\" * 2', {\n      'space name': [1, 2, 21]\n    })).toEqual([2, 4, 42]);\n    expect(evaluate('sum(\"space name\")', {\n      'space name': [1, 2, 21]\n    })).toEqual(24);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"throws on named arguments","suites":["Evaluate"],"updatePoint":{"line":338,"column":31,"index":12619},"line":338,"code":"  it('throws on named arguments', () => {\n    expect(() => evaluate('sum(invalid=a)')).toThrow('Named arguments are not supported');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with injected functions","suites":["Evaluate"],"updatePoint":{"line":341,"column":39,"index":12766},"line":341,"code":"  it('equations with injected functions', () => {\n    expect(evaluate('plustwo(foo)', {\n      foo: 5\n    }, {\n      plustwo: function (a) {\n        return a + 2;\n      }\n    })).toEqual(7);\n    expect(evaluate('negate(1)', null, {\n      negate: function (a) {\n        return -a;\n      }\n    })).toEqual(-1);\n    expect(evaluate('stringify(2)', null, {\n      stringify: function (a) {\n        return '' + a;\n      }\n    })).toEqual('2');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"equations with arrays using special operator functions","suites":["Evaluate"],"updatePoint":{"line":360,"column":60,"index":13230},"line":360,"code":"  it('equations with arrays using special operator functions', () => {\n    expect(evaluate('foo + bar', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([5, 7, 9]);\n    expect(evaluate('foo - bar', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([-3, -3, -3]);\n    expect(evaluate('foo * bar', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([4, 10, 18]);\n    expect(evaluate('foo / bar', {\n      foo: [1, 2, 3],\n      bar: [4, 5, 6]\n    })).toEqual([1 / 4, 2 / 5, 3 / 6]);\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"missing expression","suites":["Evaluate"],"updatePoint":{"line":378,"column":24,"index":13712},"line":378,"code":"  it('missing expression', () => {\n    expect(() => evaluate('')).toThrow('Failed to parse expression');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"missing referenced scope when used in injected function","suites":["Evaluate"],"updatePoint":{"line":381,"column":61,"index":13860},"line":381,"code":"  it('missing referenced scope when used in injected function', () => {\n    expect(() => evaluate('increment(foo)', null, {\n      increment: function (a) {\n        return a + 1;\n      }\n    })).toThrow('Unknown variable: foo');\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"invalid context datatypes","suites":["Evaluate"],"updatePoint":{"line":388,"column":31,"index":14064},"line":388,"code":"  it('invalid context datatypes', () => {\n    expect(evaluate('mean(foo)', {\n      foo: [true, true, false]\n    })).toBeNaN();\n    expect(evaluate('mean(foo + bar)', {\n      foo: [true, true, false],\n      bar: [1, 2, 3]\n    })).toBeNaN();\n    expect(evaluate('mean(foo)', {\n      foo: ['dog', 'cat', 'mouse']\n    })).toBeNaN();\n    expect(evaluate('mean(foo + 2)', {\n      foo: ['dog', 'cat', 'mouse']\n    })).toBeNaN();\n    expect(evaluate('foo + bar', {\n      foo: NaN,\n      bar: [4, 5, 6]\n    })).toBeNaN();\n  });","file":"library.test.js","skipped":false,"dir":"packages/kbn-tinymath/test"},{"name":"checks if alert is active","suites":["with ml jobs"],"updatePoint":{"line":58,"column":35,"index":2473},"line":58,"code":"      it('checks if alert is active', async () => {\n        const {\n          body: createdRule\n        } = await supertest.post(`/api/alerting/rule`).set('kbn-xsrf', 'foo').send({\n          params: {\n            environment: 'production',\n            windowSize: 99,\n            windowUnit: 'y',\n            anomalySeverityType: 'warning'\n          },\n          consumer: 'apm',\n          schedule: {\n            interval: '1m'\n          },\n          tags: ['apm', 'service.name:service-a'],\n          name: 'Latency anomaly | service-a',\n          rule_type_id: AlertType.Anomaly,\n          notify_when: 'onActiveAlert',\n          actions: []\n        });\n        ruleId = createdRule.id;\n        const executionStatus = await waitForRuleStatus({\n          id: ruleId,\n          expectedStatus: 'active',\n          supertest,\n          log\n        });\n        expect(executionStatus.status).to.be('active');\n      });","file":"apm_api_integration/tests/alerts/anomaly_alert.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 501","suites":[],"updatePoint":{"line":67,"column":21,"index":1954},"line":67,"code":"    it('returns a 501', async () => {\n      const status = await statusOf(getAnomalyCharts({\n        serviceName: 'a',\n        transactionType: 'request',\n        start: '2021-01-01T00:00:00.000Z',\n        end: '2021-01-01T00:15:00.000Z',\n        environment: 'ENVIRONMENT_ALL'\n      }));\n      expect(status).to.eql(501);\n    });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 403 for a user without access to ML","suites":[],"updatePoint":{"line":103,"column":53,"index":3658},"line":103,"code":"    it('returns a 403 for a user without access to ML', async () => {\n      expect(await statusOf(getAnomalyCharts({\n        serviceName: 'a',\n        transactionType: 'request',\n        start,\n        end,\n        environment: 'ENVIRONMENT_ALL'\n      }, apmApiClient.noMlAccessUser))).to.eql(403);\n    });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 200 for a user _with_ access to ML","suites":["without ml jobs"],"updatePoint":{"line":113,"column":54,"index":4006},"line":113,"code":"      it('returns a 200 for a user _with_ access to ML', async () => {\n        const status = await statusOf(getAnomalyCharts({\n          serviceName: 'a',\n          transactionType: 'request',\n          start,\n          end,\n          environment: 'ENVIRONMENT_ALL'\n        }));\n        expect(status).to.eql(200);\n      });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 200 for a user _with_ access to ML","suites":["with ml jobs"],"updatePoint":{"line":137,"column":54,"index":4685},"line":137,"code":"      it('returns a 200 for a user _with_ access to ML', async () => {\n        const status = await statusOf(getAnomalyCharts({\n          serviceName: 'a',\n          transactionType: 'request',\n          start,\n          end,\n          environment: 'ENVIRONMENT_ALL'\n        }));\n        expect(status).to.eql(200);\n      });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns model plots for all detectors and job ids for the given transaction type","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":165,"column":92,"index":5884},"line":165,"code":"        it('returns model plots for all detectors and job ids for the given transaction type', () => {\n          expect(allAnomalyTimeseries.length).to.eql(3);\n          expect(allAnomalyTimeseries.every(spec => spec.bounds.some(bound => bound.y0 ?? 0 > 0)));\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns model plots with bounds for x range within start and end","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":169,"column":76,"index":6140},"line":169,"code":"        it('returns model plots with bounds for x range within start and end', () => {\n          expect(allAnomalyTimeseries.length).to.eql(3);\n          expect(allAnomalyTimeseries.every(spec => spec.bounds.every(bound => bound.x >= new Date(start).getTime() && bound.x <= endTimeMs)));\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns model plots with latest bucket matching the end time","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":173,"column":72,"index":6436},"line":173,"code":"        it('returns model plots with latest bucket matching the end time', () => {\n          expect(allAnomalyTimeseries.every(spec => last(spec.bounds)?.x === endTimeMs));\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct metadata","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":176,"column":40,"index":6589},"line":176,"code":"        it('returns the correct metadata', () => {\n          function omitTimeseriesData(series) {\n            return series ? omit(series, 'anomalies', 'bounds') : undefined;\n          }\n\n          expect(omitTimeseriesData(latencySeries)).to.eql({\n            type: ApmMlDetectorType.txLatency,\n            jobId: 'apm-tx-metrics-production',\n            serviceName: 'a',\n            environment: 'production',\n            transactionType: 'request',\n            version: 3\n          });\n          expect(omitTimeseriesData(throughputSeries)).to.eql({\n            type: ApmMlDetectorType.txThroughput,\n            jobId: 'apm-tx-metrics-production',\n            serviceName: 'a',\n            environment: 'production',\n            transactionType: 'request',\n            version: 3\n          });\n          expect(omitTimeseriesData(failureRateSeries)).to.eql({\n            type: ApmMlDetectorType.txFailureRate,\n            jobId: 'apm-tx-metrics-production',\n            serviceName: 'a',\n            environment: 'production',\n            transactionType: 'request',\n            version: 3\n          });\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns anomalies for during the spike","suites":["with ml jobs","inspecting the body"],"updatePoint":{"line":206,"column":50,"index":7720},"line":206,"code":"        it('returns anomalies for during the spike', () => {\n          const latencyAnomalies = latencySeries?.anomalies.filter(anomaly => anomaly.y ?? 0 > 0);\n          const throughputAnomalies = throughputSeries?.anomalies.filter(anomaly => anomaly.y ?? 0 > 0);\n          const failureRateAnomalies = failureRateSeries?.anomalies.filter(anomaly => anomaly.y ?? 0 > 0);\n          expect(latencyAnomalies?.length).to.be.greaterThan(0);\n          expect(throughputAnomalies?.length).to.be.greaterThan(0);\n          expect(failureRateAnomalies?.length).to.be.greaterThan(0);\n          expect(latencyAnomalies?.every(anomaly => anomaly.x >= spikeStart && (anomaly.actual ?? 0) > NORMAL_DURATION));\n          expect(throughputAnomalies?.every(anomaly => anomaly.x >= spikeStart && (anomaly.actual ?? 0) > NORMAL_RATE));\n          expect(failureRateAnomalies?.every(anomaly => anomaly.x >= spikeStart && (anomaly.actual ?? 0) > 0));\n        });","file":"apm_api_integration/tests/anomalies/anomaly_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":52,"column":27,"index":1874},"line":52,"code":"    it('handles empty state', async () => {\n      const {\n        status,\n        body\n      } = await callApi();\n      expect(status).to.be(200);\n      expect(body.currentPeriod.transactionColdstartRate).to.empty();\n      expect(body.currentPeriod.average).to.be(null);\n      expect(body.previousPeriod.transactionColdstartRate).to.empty();\n      expect(body.previousPeriod.average).to.be(null);\n    });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":["without comparison"],"updatePoint":{"line":84,"column":37,"index":2853},"line":84,"code":"      it('returns correct HTTP status', () => {\n        expect(status).to.be(200);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an array of transaction cold start rates","suites":["without comparison"],"updatePoint":{"line":87,"column":58,"index":2967},"line":87,"code":"      it('returns an array of transaction cold start rates', () => {\n        expect(body).to.have.property('currentPeriod');\n        expect(body.currentPeriod.transactionColdstartRate).to.have.length(15);\n        expect(body.currentPeriod.transactionColdstartRate.every(({\n          y\n        }) => y === 0.25)).to.be(true);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct average rate","suites":["without comparison"],"updatePoint":{"line":94,"column":38,"index":3282},"line":94,"code":"      it('returns correct average rate', () => {\n        expect(body.currentPeriod.average).to.be(0.25);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"doesn't have data for the previous period","suites":["without comparison"],"updatePoint":{"line":97,"column":51,"index":3410},"line":97,"code":"      it(\"doesn't have data for the previous period\", () => {\n        expect(body).to.have.property('previousPeriod');\n        expect(body.previousPeriod.transactionColdstartRate).to.have.length(0);\n        expect(body.previousPeriod.average).to.be(null);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":["with comparison"],"updatePoint":{"line":136,"column":37,"index":4764},"line":136,"code":"      it('returns correct HTTP status', () => {\n        expect(status).to.be(200);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["with comparison"],"updatePoint":{"line":139,"column":27,"index":4847},"line":139,"code":"      it('returns some data', () => {\n        expect(body.currentPeriod.average).not.to.be(null);\n        expect(body.currentPeriod.transactionColdstartRate.length).to.be.greaterThan(0);\n        const hasCurrentPeriodData = body.currentPeriod.transactionColdstartRate.some(({\n          y\n        }) => isFiniteNumber(y));\n        expect(hasCurrentPeriodData).to.equal(true);\n        expect(body.previousPeriod.average).not.to.be(null);\n        expect(body.previousPeriod.transactionColdstartRate.length).to.be.greaterThan(0);\n        const hasPreviousPeriodData = body.previousPeriod.transactionColdstartRate.some(({\n          y\n        }) => isFiniteNumber(y));\n        expect(hasPreviousPeriodData).to.equal(true);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["with comparison"],"updatePoint":{"line":153,"column":46,"index":5593},"line":153,"code":"      it('has same start time for both periods', () => {\n        expect(first(body.currentPeriod.transactionColdstartRate)?.x).to.equal(first(body.previousPeriod.transactionColdstartRate)?.x);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["with comparison"],"updatePoint":{"line":156,"column":44,"index":5794},"line":156,"code":"      it('has same end time for both periods', () => {\n        expect(last(body.currentPeriod.transactionColdstartRate)?.x).to.equal(last(body.previousPeriod.transactionColdstartRate)?.x);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an array of transaction cold start rates","suites":["with comparison"],"updatePoint":{"line":159,"column":58,"index":6007},"line":159,"code":"      it('returns an array of transaction cold start rates', () => {\n        expect(body.currentPeriod.transactionColdstartRate).to.have.length(3);\n        expect(body.currentPeriod.transactionColdstartRate.every(({\n          y\n        }) => y === 0.25)).to.be(true);\n        expect(body.previousPeriod.transactionColdstartRate).to.have.length(3);\n        expect(body.previousPeriod.transactionColdstartRate.every(({\n          y\n        }) => y === 0.5)).to.be(true);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same average value for both periods","suites":["with comparison"],"updatePoint":{"line":169,"column":49,"index":6476},"line":169,"code":"      it('has same average value for both periods', () => {\n        expect(body.currentPeriod.average).to.be(0.25);\n        expect(body.previousPeriod.average).to.be(0.5);\n      });","file":"apm_api_integration/tests/cold_start/cold_start_by_transaction_name/cold_start_by_transaction_name.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":50,"column":27,"index":1783},"line":50,"code":"    it('handles empty state', async () => {\n      const {\n        status,\n        body\n      } = await callApi();\n      expect(status).to.be(200);\n      expect(body.currentPeriod.transactionColdstartRate).to.empty();\n      expect(body.currentPeriod.average).to.be(null);\n      expect(body.previousPeriod.transactionColdstartRate).to.empty();\n      expect(body.previousPeriod.average).to.be(null);\n    });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":["without comparison"],"updatePoint":{"line":82,"column":37,"index":2742},"line":82,"code":"      it('returns correct HTTP status', () => {\n        expect(status).to.be(200);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an array of transaction cold start rates","suites":["without comparison"],"updatePoint":{"line":85,"column":58,"index":2856},"line":85,"code":"      it('returns an array of transaction cold start rates', () => {\n        expect(body).to.have.property('currentPeriod');\n        expect(body.currentPeriod.transactionColdstartRate).to.have.length(15);\n        expect(body.currentPeriod.transactionColdstartRate.every(({\n          y\n        }) => y === 0.25)).to.be(true);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct average rate","suites":["without comparison"],"updatePoint":{"line":92,"column":38,"index":3171},"line":92,"code":"      it('returns correct average rate', () => {\n        expect(body.currentPeriod.average).to.be(0.25);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"doesn't have data for the previous period","suites":["without comparison"],"updatePoint":{"line":95,"column":51,"index":3299},"line":95,"code":"      it(\"doesn't have data for the previous period\", () => {\n        expect(body).to.have.property('previousPeriod');\n        expect(body.previousPeriod.transactionColdstartRate).to.have.length(0);\n        expect(body.previousPeriod.average).to.be(null);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":["with comparison"],"updatePoint":{"line":134,"column":37,"index":4653},"line":134,"code":"      it('returns correct HTTP status', () => {\n        expect(status).to.be(200);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["with comparison"],"updatePoint":{"line":137,"column":27,"index":4736},"line":137,"code":"      it('returns some data', () => {\n        expect(body.currentPeriod.average).not.to.be(null);\n        expect(body.currentPeriod.transactionColdstartRate.length).to.be.greaterThan(0);\n        const hasCurrentPeriodData = body.currentPeriod.transactionColdstartRate.some(({\n          y\n        }) => isFiniteNumber(y));\n        expect(hasCurrentPeriodData).to.equal(true);\n        expect(body.previousPeriod.average).not.to.be(null);\n        expect(body.previousPeriod.transactionColdstartRate.length).to.be.greaterThan(0);\n        const hasPreviousPeriodData = body.previousPeriod.transactionColdstartRate.some(({\n          y\n        }) => isFiniteNumber(y));\n        expect(hasPreviousPeriodData).to.equal(true);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["with comparison"],"updatePoint":{"line":151,"column":46,"index":5482},"line":151,"code":"      it('has same start time for both periods', () => {\n        expect(first(body.currentPeriod.transactionColdstartRate)?.x).to.equal(first(body.previousPeriod.transactionColdstartRate)?.x);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["with comparison"],"updatePoint":{"line":154,"column":44,"index":5683},"line":154,"code":"      it('has same end time for both periods', () => {\n        expect(last(body.currentPeriod.transactionColdstartRate)?.x).to.equal(last(body.previousPeriod.transactionColdstartRate)?.x);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an array of transaction cold start rates","suites":["with comparison"],"updatePoint":{"line":157,"column":58,"index":5896},"line":157,"code":"      it('returns an array of transaction cold start rates', () => {\n        expect(body.currentPeriod.transactionColdstartRate).to.have.length(3);\n        expect(body.currentPeriod.transactionColdstartRate.every(({\n          y\n        }) => y === 0.25)).to.be(true);\n        expect(body.previousPeriod.transactionColdstartRate).to.have.length(3);\n        expect(body.previousPeriod.transactionColdstartRate.every(({\n          y\n        }) => y === 0.5)).to.be(true);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same average value for both periods","suites":["with comparison"],"updatePoint":{"line":167,"column":49,"index":6365},"line":167,"code":"      it('has same average value for both periods', () => {\n        expect(body.currentPeriod.average).to.be(0.25);\n        expect(body.previousPeriod.average).to.be(0.5);\n      });","file":"apm_api_integration/tests/cold_start/cold_start.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":31,"column":31,"index":905},"line":31,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.fieldCandidates.length).to.be(14);\n    });","file":"apm_api_integration/tests/correlations/field_candidates.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns field candidates","suites":[],"updatePoint":{"line":44,"column":32,"index":1301},"line":44,"code":"    it('returns field candidates', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200);\n      expect(response.body?.fieldCandidates.length).to.be(69);\n    });","file":"apm_api_integration/tests/correlations/field_candidates.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":32,"column":31,"index":1224},"line":32,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.fieldValuePairs.length).to.be(0);\n    });","file":"apm_api_integration/tests/correlations/field_value_pairs.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns field value pairs","suites":[],"updatePoint":{"line":45,"column":33,"index":1621},"line":45,"code":"    it('returns field value pairs', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200);\n      expect(response.body?.fieldValuePairs.length).to.be(124);\n    });","file":"apm_api_integration/tests/correlations/field_value_pairs.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":32,"column":31,"index":1206},"line":32,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.failedTransactionsCorrelations.length).to.be(0);\n    });","file":"apm_api_integration/tests/correlations/p_values.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns p values","suites":[],"updatePoint":{"line":45,"column":24,"index":1600},"line":45,"code":"    it('returns p values', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200);\n      expect(response.body?.failedTransactionsCorrelations.length).to.be(15);\n    });","file":"apm_api_integration/tests/correlations/p_values.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":74,"column":31,"index":2373},"line":74,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.latencyCorrelations.length).to.be(0);\n    });","file":"apm_api_integration/tests/correlations/significant_correlations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns significant correlations","suites":[],"updatePoint":{"line":87,"column":40,"index":2788},"line":87,"code":"    it('returns significant correlations', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200);\n      expect(response.body?.latencyCorrelations.length).to.be(7);\n    });","file":"apm_api_integration/tests/correlations/significant_correlations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":36,"column":27,"index":1242},"line":36,"code":"    it('handles empty state', async () => {\n      const {\n        status,\n        body\n      } = await callApi();\n      expect(status).to.be(200);\n      expect(body.metadata).to.empty();\n    });","file":"apm_api_integration/tests/dependencies/metadata.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct metadata for the dependency","suites":[],"updatePoint":{"line":50,"column":51,"index":1627},"line":50,"code":"    it('returns correct metadata for the dependency', async () => {\n      await generateData({\n        synthtraceEsClient,\n        start,\n        end\n      });\n      const {\n        status,\n        body\n      } = await callApi();\n      const {\n        span\n      } = dataConfig;\n      expect(status).to.be(200);\n      expect(body.metadata.spanType).to.equal(span.type);\n      expect(body.metadata.spanSubtype).to.equal(span.subType);\n      await synthtraceEsClient.clean();\n    });","file":"apm_api_integration/tests/dependencies/metadata.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":50,"column":27,"index":1584},"line":50,"code":"    it('handles empty state', async () => {\n      const {\n        body,\n        status\n      } = await callApi({\n        dependencyName: 'elasticsearch',\n        spanName: '/_search'\n      });\n      expect(status).to.be(200);\n      expect(body.spans).to.empty();\n    });","file":"apm_api_integration/tests/dependencies/top_spans.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct spans for the requested spanName","suites":["without a kuery or environment"],"updatePoint":{"line":72,"column":62,"index":3172},"line":72,"code":"      it('returns the correct spans for the requested spanName', async () => {\n        const response = await callApi({\n          dependencyName: 'elasticsearch',\n          spanName: '/_search'\n        });\n        const {\n          spans\n        } = response.body;\n        const spanNames = uniq(spans.map(span => span.spanName));\n        const javaSpans = spans.filter(span => span.serviceName === 'java');\n        const goSpans = spans.filter(span => span.serviceName === 'go');\n        expect(spanNames).to.eql(['/_search']);\n        expect(javaSpans.length).to.be.greaterThan(0);\n        expect(goSpans.length).to.be.greaterThan(0);\n        expect(javaSpans.length + goSpans.length).to.eql(spans.length);\n        expect(omit(javaSpans[0], 'traceId', 'transactionId')).to.eql({\n          '@timestamp': 1609459200000,\n          agentName: 'java',\n          duration: 100000,\n          serviceName: 'java',\n          spanName: '/_search',\n          transactionName: 'GET /api/my-endpoint',\n          transactionType: 'request',\n          outcome: 'success'\n        });\n        expect(omit(goSpans[0], 'traceId', 'transactionId')).to.eql({\n          '@timestamp': 1609459200000,\n          agentName: 'go',\n          duration: 50000,\n          serviceName: 'go',\n          spanName: '/_search',\n          transactionName: 'GET /api/my-other-endpoint',\n          transactionType: 'request',\n          outcome: 'unknown'\n        });\n      });","file":"apm_api_integration/tests/dependencies/top_spans.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct spans for the requested spanName","suites":["with a kuery"],"updatePoint":{"line":110,"column":62,"index":4657},"line":110,"code":"      it('returns the correct spans for the requested spanName', async () => {\n        const response = await callApi({\n          dependencyName: 'elasticsearch',\n          spanName: '/_search',\n          kuery: 'service.name:go'\n        });\n        const {\n          spans\n        } = response.body;\n        const spanNames = uniq(spans.map(span => span.spanName));\n        const javaSpans = spans.filter(span => span.serviceName === 'java');\n        const goSpans = spans.filter(span => span.serviceName === 'go');\n        expect(spanNames).to.eql(['/_search']);\n        expect(javaSpans.length).to.be(0);\n        expect(goSpans.length).to.be.greaterThan(0);\n        expect(goSpans.length).to.eql(spans.length);\n      });","file":"apm_api_integration/tests/dependencies/top_spans.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct spans for the requested spanName","suites":["with an environment"],"updatePoint":{"line":129,"column":62,"index":5433},"line":129,"code":"      it('returns the correct spans for the requested spanName', async () => {\n        const response = await callApi({\n          dependencyName: 'elasticsearch',\n          spanName: '/_search',\n          environment: 'development'\n        });\n        const {\n          spans\n        } = response.body;\n        const spanNames = uniq(spans.map(span => span.spanName));\n        const javaSpans = spans.filter(span => span.serviceName === 'java');\n        const goSpans = spans.filter(span => span.serviceName === 'go');\n        expect(spanNames).to.eql(['/_search']);\n        expect(javaSpans.length).to.be(0);\n        expect(goSpans.length).to.be.greaterThan(0);\n        expect(goSpans.length).to.eql(spans.length);\n      });","file":"apm_api_integration/tests/dependencies/top_spans.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should return the spans without transaction metadata","suites":["when requesting spans without a transaction"],"updatePoint":{"line":148,"column":62,"index":6235},"line":148,"code":"      it('should return the spans without transaction metadata', async () => {\n        const response = await callApi({\n          dependencyName: 'elasticsearch',\n          spanName: 'without transaction'\n        });\n        const {\n          spans\n        } = response.body;\n        const spanNames = uniq(spans.map(span => span.spanName));\n        expect(spanNames).to.eql(['without transaction']);\n        expect(omit(spans[0], 'traceId')).to.eql({\n          '@timestamp': 1609459200000,\n          agentName: 'java',\n          duration: 200000,\n          serviceName: 'java',\n          spanName: 'without transaction',\n          outcome: 'unknown'\n        });\n        expect(spans[0].transactionType).not.to.be.ok();\n        expect(spans[0].transactionId).not.to.be.ok();\n        expect(spans[0].transactionName).not.to.be.ok();\n      });","file":"apm_api_integration/tests/dependencies/top_spans.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns only spans whose duration falls into the requested range","suites":["when requesting spans within a specific sample range"],"updatePoint":{"line":172,"column":74,"index":7174},"line":172,"code":"      it('returns only spans whose duration falls into the requested range', async () => {\n        const response = await callApi({\n          dependencyName: 'elasticsearch',\n          spanName: '/_search',\n          sampleRangeFrom: 50000,\n          sampleRangeTo: 99999\n        });\n        const {\n          spans\n        } = response.body;\n        expect(spans.every(span => span.duration === 50000)).to.be(true);\n      });","file":"apm_api_integration/tests/dependencies/top_spans.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same avg error rate value for Transaction-based and Metric-based data","suites":["when data is loaded ","compare latency value between service inventory and service maps"],"updatePoint":{"line":74,"column":89,"index":3795},"line":74,"code":"        it('returns same avg error rate value for Transaction-based and Metric-based data', () => {\n          [errorTransactionValues.serviceInventoryErrorRate, errorTransactionValues.serviceMapsNodeDetailsErrorRate, errorRateMetricValues.serviceInventoryErrorRate, errorRateMetricValues.serviceMapsNodeDetailsErrorRate].forEach(value => expect(value).to.be.equal(GO_PROD_ID_ERROR_RATE / 100));\n        });","file":"apm_api_integration/tests/error_rate/service_maps.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":48,"column":31,"index":1743},"line":48,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.currentPeriod.length).to.be(0);\n      expect(response.body.previousPeriod.length).to.be(0);\n    });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays combined number of occurrences","suites":["errors distribution","without comparison"],"updatePoint":{"line":79,"column":51,"index":2663},"line":79,"code":"        it('displays combined number of occurrences', () => {\n          const countSum = sumBy(errorsDistribution.currentPeriod, 'y');\n          const numberOfBuckets = 15;\n          expect(countSum).to.equal((appleTransaction.failureRate + bananaTransaction.failureRate) * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time when comparison is enabled","suites":["errors distribution","without comparison","displays correct start in errors distribution chart"],"updatePoint":{"line":96,"column":60,"index":3473},"line":96,"code":"          it('has same start time when comparison is enabled', () => {\n            expect(first(errorsDistribution.currentPeriod)?.x).to.equal(first(errorsDistributionWithComparison.currentPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays combined number of occurrences","suites":["errors distribution","displays occurrences for type \"apple transaction\" only"],"updatePoint":{"line":111,"column":51,"index":4065},"line":111,"code":"        it('displays combined number of occurrences', () => {\n          const countSum = sumBy(errorsDistribution.currentPeriod, 'y');\n          const numberOfBuckets = 15;\n          expect(countSum).to.equal(appleTransaction.failureRate * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["errors distribution","with comparison","when data is returned"],"updatePoint":{"line":131,"column":31,"index":4836},"line":131,"code":"          it('returns some data', () => {\n            const hasCurrentPeriodData = errorsDistribution.currentPeriod.some(({\n              y\n            }) => isFiniteNumber(y));\n            const hasPreviousPeriodData = errorsDistribution.previousPeriod.some(({\n              y\n            }) => isFiniteNumber(y));\n            expect(hasCurrentPeriodData).to.equal(true);\n            expect(hasPreviousPeriodData).to.equal(true);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["errors distribution","with comparison","when data is returned"],"updatePoint":{"line":141,"column":50,"index":5300},"line":141,"code":"          it('has same start time for both periods', () => {\n            expect(first(errorsDistribution.currentPeriod)?.x).to.equal(first(errorsDistribution.previousPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["errors distribution","with comparison","when data is returned"],"updatePoint":{"line":144,"column":48,"index":5491},"line":144,"code":"          it('has same end time for both periods', () => {\n            expect(last(errorsDistribution.currentPeriod)?.x).to.equal(last(errorsDistribution.previousPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["errors distribution","with comparison","when data is returned"],"updatePoint":{"line":147,"column":61,"index":5693},"line":147,"code":"          it('returns same number of buckets for both periods', () => {\n            expect(errorsDistribution.currentPeriod.length).to.equal(errorsDistribution.previousPeriod.length);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["errors distribution","with comparison","when no data is returned"],"updatePoint":{"line":163,"column":50,"index":6301},"line":163,"code":"          it('has same start time for both periods', () => {\n            expect(first(errorsDistribution.currentPeriod)?.x).to.equal(first(errorsDistribution.previousPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["errors distribution","with comparison","when no data is returned"],"updatePoint":{"line":166,"column":48,"index":6492},"line":166,"code":"          it('has same end time for both periods', () => {\n            expect(last(errorsDistribution.currentPeriod)?.x).to.equal(last(errorsDistribution.previousPeriod)?.x);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["errors distribution","with comparison","when no data is returned"],"updatePoint":{"line":169,"column":61,"index":6694},"line":169,"code":"          it('returns same number of buckets for both periods', () => {\n            expect(errorsDistribution.currentPeriod.length).to.equal(errorsDistribution.previousPeriod.length);\n          });","file":"apm_api_integration/tests/errors/distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":45,"column":27,"index":1591},"line":45,"code":"    it('handles empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.errorGroups).to.empty();\n    });","file":"apm_api_integration/tests/errors/error_group_list.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct number of errors","suites":["errors group","returns the correct data"],"updatePoint":{"line":77,"column":44,"index":3533},"line":77,"code":"        it('returns correct number of errors', () => {\n          expect(errorGroups.length).to.equal(2);\n          expect(errorGroups.map(error => error.name).sort()).to.eql(['error 1', 'error 2']);\n        });","file":"apm_api_integration/tests/errors/error_group_list.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct occurences","suites":["errors group","returns the correct data"],"updatePoint":{"line":81,"column":38,"index":3738},"line":81,"code":"        it('returns correct occurences', () => {\n          const numberOfBuckets = 15;\n          expect(errorGroups.map(error => error.occurrences).sort()).to.eql([appleTransaction.failureRate * numberOfBuckets, bananaTransaction.failureRate * numberOfBuckets]);\n        });","file":"apm_api_integration/tests/errors/error_group_list.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":47,"column":31,"index":1641},"line":47,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.occurrencesCount).to.be(0);\n    });","file":"apm_api_integration/tests/errors/group_id.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays correct number of occurrences","suites":["error group id","return correct data"],"updatePoint":{"line":80,"column":50,"index":2565},"line":80,"code":"        it('displays correct number of occurrences', () => {\n          const numberOfBuckets = 15;\n          expect(errorsDistribution.occurrencesCount).to.equal(bananaTransaction.failureRate * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/group_id.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":51,"column":31,"index":1852},"line":51,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.topErroneousTransactions).to.be.empty();\n    });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays the correct number of occurrences","suites":["returns the correct data","without comparison"],"updatePoint":{"line":92,"column":54,"index":3062},"line":92,"code":"        it('displays the correct number of occurrences', () => {\n          const {\n            topErroneousTransactions\n          } = erroneousTransactions;\n          expect(topErroneousTransactions.length).to.be(2);\n          const firstTransaction = topErroneousTransactions.find(x => x.transactionName === firstTransactionName);\n          expect(firstTransaction).to.not.be(undefined);\n          expect(firstTransaction?.occurrences).to.be(firstTransactionFailureRate * numberOfBuckets);\n          const secondTransaction = topErroneousTransactions.find(x => x.transactionName === secondTransactionName);\n          expect(secondTransaction).to.not.be(undefined);\n          expect(secondTransaction?.occurrences).to.be(secondTransactionFailureRate * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"displays the correct number of occurrences in time series","suites":["returns the correct data","without comparison"],"updatePoint":{"line":104,"column":69,"index":3859},"line":104,"code":"        it('displays the correct number of occurrences in time series', () => {\n          const {\n            topErroneousTransactions\n          } = erroneousTransactions;\n          const firstTransaction = topErroneousTransactions.find(x => x.transactionName === firstTransactionName);\n          const firstErrorCount = sumBy(firstTransaction?.currentPeriodTimeseries, 'y');\n          expect(firstErrorCount).to.be(firstTransactionFailureRate * numberOfBuckets);\n          const secondTransaction = topErroneousTransactions.find(x => x.transactionName === secondTransactionName);\n          const secondErrorCount = sumBy(secondTransaction?.currentPeriodTimeseries, 'y');\n          expect(secondErrorCount).to.be(secondTransactionFailureRate * numberOfBuckets);\n        });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["returns the correct data","with comparison","when there are data for the time periods"],"updatePoint":{"line":133,"column":31,"index":5240},"line":133,"code":"          it('returns some data', () => {\n            const {\n              topErroneousTransactions\n            } = erroneousTransactions;\n            const hasCurrentPeriodData = topErroneousTransactions[0].currentPeriodTimeseries.some(({\n              y\n            }) => isFiniteNumber(y));\n            const hasPreviousPeriodData = topErroneousTransactions[0].previousPeriodTimeseries.some(({\n              y\n            }) => isFiniteNumber(y));\n            expect(hasCurrentPeriodData).to.be(true);\n            expect(hasPreviousPeriodData).to.be(true);\n          });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the same start time for both periods","suites":["returns the correct data","with comparison","when there are data for the time periods"],"updatePoint":{"line":146,"column":54,"index":5838},"line":146,"code":"          it('has the same start time for both periods', () => {\n            const {\n              topErroneousTransactions\n            } = erroneousTransactions;\n            expect(first(topErroneousTransactions[0].currentPeriodTimeseries)?.x).to.be(first(topErroneousTransactions[0].previousPeriodTimeseries)?.x);\n          });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["returns the correct data","with comparison","when there are data for the time periods"],"updatePoint":{"line":152,"column":48,"index":6162},"line":152,"code":"          it('has same end time for both periods', () => {\n            const {\n              topErroneousTransactions\n            } = erroneousTransactions;\n            expect(last(topErroneousTransactions[0].currentPeriodTimeseries)?.x).to.be(last(topErroneousTransactions[0].previousPeriodTimeseries)?.x);\n          });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["returns the correct data","with comparison","when there are data for the time periods"],"updatePoint":{"line":158,"column":61,"index":6497},"line":158,"code":"          it('returns same number of buckets for both periods', () => {\n            const {\n              topErroneousTransactions\n            } = erroneousTransactions;\n            expect(topErroneousTransactions[0].currentPeriodTimeseries.length).to.be(topErroneousTransactions[0].previousPeriodTimeseries.length);\n          });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an empty array","suites":["returns the correct data","with comparison","when there are no data for the time period"],"updatePoint":{"line":166,"column":36,"index":6886},"line":166,"code":"          it('returns an empty array', async () => {\n            const response = await callApi({\n              path: {\n                groupId: '0000000000000000000000Error test'\n              },\n              query: {\n                start: '2021-01-03T00:00:00.000Z',\n                end: '2021-01-03T00:15:00.000Z',\n                offset: '1d'\n              }\n            });\n            const {\n              body: {\n                topErroneousTransactions\n              }\n            } = response;\n            expect(topErroneousTransactions).to.be.empty();\n          });","file":"apm_api_integration/tests/errors/top_erroneous_transactions/top_erroneous_transactions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":49,"column":27,"index":1751},"line":49,"code":"    it('handles empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.errorGroups).to.empty();\n    });","file":"apm_api_integration/tests/errors/top_errors_for_transaction/top_errors_main_stats.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct number of errors and error data","suites":["top errors for transaction","returns the correct data"],"updatePoint":{"line":85,"column":59,"index":2798},"line":85,"code":"        it('returns correct number of errors and error data', () => {\n          const numberOfBuckets = 15;\n          expect(errorGroups.length).to.equal(2);\n          const firstErrorId = `Error 1 transaction ${firstTransactionName}`;\n          const firstError = errorGroups.find(x => x.groupId === firstErrorId);\n          expect(firstError).to.not.be(undefined);\n          expect(firstError?.groupId).to.be(firstErrorId);\n          expect(firstError?.name).to.be(firstErrorId);\n          expect(firstError?.occurrences).to.be(firstTransactionFailureRate * numberOfBuckets);\n          expect(firstError?.lastSeen).to.be(moment(end).startOf('minute').valueOf());\n          const secondErrorId = `Error 2 transaction ${firstTransactionName}`;\n          const secondError = errorGroups.find(x => x.groupId === secondErrorId);\n          expect(secondError).to.not.be(undefined);\n          expect(secondError?.groupId).to.be(secondErrorId);\n          expect(secondError?.name).to.be(secondErrorId);\n          expect(secondError?.occurrences).to.be(firstTransactionFailureRate * numberOfBuckets);\n          expect(secondError?.lastSeen).to.be(moment(end).startOf('minute').valueOf());\n        });","file":"apm_api_integration/tests/errors/top_errors_for_transaction/top_errors_main_stats.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"APIs can't be accessed by logstash_read user","suites":[],"updatePoint":{"line":277,"column":52,"index":8113},"line":277,"code":"    it(`APIs can't be accessed by logstash_read user`, async () => {\n      const username = 'logstash_read';\n      const roleName = 'logstash_read';\n      const password = `${username}-password`;\n\n      try {\n        await security.role.create(roleName, {\n          elasticsearch: elasticsearchPrivileges\n        });\n        await security.user.create(username, {\n          password,\n          roles: [roleName],\n          full_name: 'a kibana user'\n        });\n        await executeRequests({\n          username,\n          password,\n          expectation: 'forbidden'\n        });\n      } finally {\n        await security.role.delete(roleName);\n        await security.user.delete(username);\n      }\n    });","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"APIs can be accessed by global_all user","suites":[],"updatePoint":{"line":301,"column":47,"index":8815},"line":301,"code":"    it('APIs can be accessed by global_all user', async () => {\n      const username = 'global_all';\n      const roleName = 'global_all';\n      const password = `${username}-password`;\n\n      try {\n        await security.role.create(roleName, {\n          elasticsearch: elasticsearchPrivileges,\n          kibana: [{\n            base: ['all'],\n            spaces: ['*']\n          }]\n        });\n        await security.user.create(username, {\n          password,\n          roles: [roleName],\n          full_name: 'a kibana user'\n        });\n        await executeRequests({\n          username,\n          password,\n          expectation: 'response'\n        });\n      } finally {\n        await security.role.delete(roleName);\n        await security.user.delete(username);\n      }\n    }); // this could be any role which doesn't have access to the APM feature","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"APIs can't be accessed by dashboard_all user","suites":[],"updatePoint":{"line":330,"column":52,"index":9675},"line":330,"code":"    it(`APIs can't be accessed by dashboard_all user`, async () => {\n      const username = 'dashboard_all';\n      const roleName = 'dashboard_all';\n      const password = `${username}-password`;\n\n      try {\n        await security.role.create(roleName, {\n          elasticsearch: elasticsearchPrivileges,\n          kibana: [{\n            feature: {\n              dashboard: ['all']\n            },\n            spaces: ['*']\n          }]\n        });\n        await security.user.create(username, {\n          password,\n          roles: [roleName],\n          full_name: 'a kibana user'\n        });\n        await executeRequests({\n          username,\n          password,\n          expectation: 'forbidden'\n        });\n      } finally {\n        await security.role.delete(roleName);\n        await security.user.delete(username);\n      }\n    });","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"user_1 can access APIs in space_1","suites":["spaces"],"updatePoint":{"line":403,"column":43,"index":11786},"line":403,"code":"      it('user_1 can access APIs in space_1', async () => {\n        await executeRequests({\n          username,\n          password,\n          expectation: 'response',\n          spaceId: space1Id\n        });\n      });","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"user_1 can't access APIs in space_2","suites":["spaces"],"updatePoint":{"line":411,"column":45,"index":12005},"line":411,"code":"      it(`user_1 can't access APIs in space_2`, async () => {\n        await executeRequests({\n          username,\n          password,\n          expectation: 'forbidden',\n          spaceId: space2Id\n        });\n      });","file":"apm_api_integration/tests/feature_controls.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":19,"column":31,"index":684},"line":19,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: `GET /internal/apm/has_data`\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.be(false);\n    });","file":"apm_api_integration/tests/historical_data/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns hasData: true","suites":[],"updatePoint":{"line":31,"column":29,"index":1065},"line":31,"code":"    it('returns hasData: true', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: `GET /internal/apm/has_data`\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.be(true);\n    });","file":"apm_api_integration/tests/historical_data/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":41,"column":31,"index":1366},"line":41,"code":"    it('handles the empty state', async () => {\n      const response = await callApi('synth-go');\n      expect(response.status).to.be(200);\n      expect(response.body.containerIds.length).to.be(0);\n      expect(response.body.hostNames.length).to.be(0);\n      expect(response.body.podNames.length).to.be(0);\n    });","file":"apm_api_integration/tests/infrastructure/infrastructure_attributes.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns arrays of container ids and pod names","suites":["when data is loaded","when service runs in container"],"updatePoint":{"line":63,"column":57,"index":2106},"line":63,"code":"        it('returns arrays of container ids and pod names', async () => {\n          const response = await callApi('synth-go');\n          expect(response.status).to.be(200);\n          expect(response.body.containerIds.length).to.be(1);\n          expect(response.body.hostNames.length).to.be(1);\n          expect(response.body.podNames.length).to.be(1);\n        });","file":"apm_api_integration/tests/infrastructure/infrastructure_attributes.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns array of host names","suites":["when data is loaded","when service does NOT run in container"],"updatePoint":{"line":72,"column":39,"index":2528},"line":72,"code":"        it('returns array of host names', async () => {\n          const response = await callApi('synth-java');\n          expect(response.status).to.be(200);\n          expect(response.body.containerIds.length).to.be(0);\n          expect(response.body.hostNames.length).to.be(1);\n          expect(response.body.podNames.length).to.be(0);\n        });","file":"apm_api_integration/tests/infrastructure/infrastructure_attributes.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns response without `_inspect`","suites":["when omitting `_inspect` query param"],"updatePoint":{"line":22,"column":45,"index":891},"line":22,"code":"      it('returns response without `_inspect`', async () => {\n        const {\n          status,\n          body\n        } = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/environments',\n          params: {\n            query: {\n              start: metadata.start,\n              end: metadata.end\n            }\n          }\n        });\n        expect(status).to.be(200);\n        expect(body._inspect).to.be(undefined);\n      });","file":"apm_api_integration/tests/inspect/inspect.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"for environments","suites":["when passing `_inspect` as query param","elasticsearch calls made with end-user auth are returned"],"updatePoint":{"line":41,"column":28,"index":1476},"line":41,"code":"        it('for environments', async () => {\n          const {\n            status,\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/environments',\n            params: {\n              query: {\n                start: metadata.start,\n                end: metadata.end,\n                _inspect: true\n              }\n            }\n          });\n          expect(status).to.be(200);\n          expect(body._inspect).not.to.be.empty(); // @ts-expect-error\n\n          expect(Object.keys(body._inspect[0])).to.eql(['id', 'json', 'name', 'response', 'startTime', 'stats', 'status']);\n        });","file":"apm_api_integration/tests/inspect/inspect.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"for custom links","suites":["when passing `_inspect` as query param","elasticsearch calls made with internal user are not return"],"updatePoint":{"line":62,"column":28,"index":2210},"line":62,"code":"        it('for custom links', async () => {\n          const {\n            status,\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/settings/custom_links',\n            params: {\n              query: {\n                'service.name': 'opbeans-node',\n                'transaction.type': 'request',\n                _inspect: true\n              }\n            }\n          });\n          expect(status).to.be(200);\n          expect(body._inspect).to.eql([]);\n        });","file":"apm_api_integration/tests/inspect/inspect.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"for agent configs","suites":["when passing `_inspect` as query param","elasticsearch calls made with internal user are not return"],"updatePoint":{"line":79,"column":29,"index":2728},"line":79,"code":"        it('for agent configs', async () => {\n          const {\n            status,\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /api/apm/settings/agent-configuration',\n            params: {\n              query: {\n                _inspect: true\n              }\n            }\n          });\n          expect(status).to.be(200);\n          expect(body._inspect).to.eql([]);\n        });","file":"apm_api_integration/tests/inspect/inspect.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same avg latency value for Transaction-based and Metric-based data","suites":["when data is loaded ","compare latency value between service inventory and service maps"],"updatePoint":{"line":73,"column":86,"index":3305},"line":73,"code":"        it('returns same avg latency value for Transaction-based and Metric-based data', () => {\n          const expectedLatencyAvgValueMs = GO_DEV_RATE * GO_DEV_DURATION / GO_DEV_RATE * 1000;\n          [latencyTransactionValues.serviceMapsNodeDetailsLatency, latencyTransactionValues.serviceInventoryLatency, latencyMetricValues.serviceMapsNodeDetailsLatency, latencyMetricValues.serviceInventoryLatency].forEach(value => expect(value).to.be.equal(expectedLatencyAvgValueMs));\n        });","file":"apm_api_integration/tests/latency/service_maps.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains CPU usage and System memory usage chart data","suites":["for opbeans-node","returns metrics data"],"updatePoint":{"line":41,"column":65,"index":1578},"line":41,"code":"        it('contains CPU usage and System memory usage chart data', async () => {\n          expect(chartsResponse.status).to.be(200);\n          expectSnapshot(chartsResponse.body.charts.map(chart => chart.title)).toMatchInline(`\n                          Array [\n                            \"CPU usage\",\n                            \"System memory usage\",\n                          ]\n                      `);\n        });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-node","returns metrics data","CPU usage"],"updatePoint":{"line":57,"column":32,"index":2199},"line":57,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"System max\",\n                                \"System average\",\n                                \"Process max\",\n                                \"Process average\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-node","returns metrics data","CPU usage"],"updatePoint":{"line":70,"column":47,"index":2733},"line":70,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                Array [\n                  0.714,\n                  0.3877,\n                  0.75,\n                  0.2543,\n                ]\n              `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-node","returns metrics data","System memory usage (using 'system.memory' fields to calculate the memory usage)"],"updatePoint":{"line":90,"column":32,"index":3420},"line":90,"code":"          it('has correct series', () => {\n            expect(systemMemoryUsageChart).to.not.empty();\n            expectSnapshot(systemMemoryUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Max\",\n                                \"Average\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-node","returns metrics data","System memory usage (using 'system.memory' fields to calculate the memory usage)"],"updatePoint":{"line":101,"column":47,"index":3860},"line":101,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(systemMemoryUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                Array [\n                  0.722093920925555,\n                  0.718173546796348,\n                ]\n              `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct chart data","suites":["for opbeans-java","returns metrics data"],"updatePoint":{"line":134,"column":34,"index":4900},"line":134,"code":"        it('has correct chart data', async () => {\n          expect(chartsResponse.status).to.be(200);\n          expectSnapshot(chartsResponse.body.charts.map(chart => chart.title)).toMatchInline(`\n                          Array [\n                            \"CPU usage\",\n                            \"System memory usage\",\n                            \"Heap Memory\",\n                            \"Non-Heap Memory\",\n                            \"Thread Count\",\n                            \"Garbage collection per minute\",\n                            \"Garbage collection time spent per minute\",\n                          ]\n                      `);\n        });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","CPU usage"],"updatePoint":{"line":155,"column":32,"index":5788},"line":155,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"System max\",\n                                \"System average\",\n                                \"Process max\",\n                                \"Process average\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","CPU usage"],"updatePoint":{"line":168,"column":47,"index":6322},"line":168,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                0.203,\n                                0.178777777777778,\n                                0.01,\n                                0.009,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","CPU usage"],"updatePoint":{"line":180,"column":34,"index":6780},"line":180,"code":"          it('has the correct rate', async () => {\n            const yValues = cpuUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                0.193,\n                                0.193,\n                                0.009,\n                                0.009,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","System memory usage (using 'system.process.cgroup' fields to calculate the memory usage)"],"updatePoint":{"line":199,"column":32,"index":7582},"line":199,"code":"          it('has correct series', () => {\n            expect(systemMemoryUsageChart).to.not.empty();\n            expectSnapshot(systemMemoryUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Max\",\n                                \"Average\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","System memory usage (using 'system.process.cgroup' fields to calculate the memory usage)"],"updatePoint":{"line":210,"column":47,"index":8022},"line":210,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(systemMemoryUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                0.707924703557837,\n                                0.705395980841182,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","System memory usage (using 'system.process.cgroup' fields to calculate the memory usage)"],"updatePoint":{"line":220,"column":34,"index":8424},"line":220,"code":"          it('has the correct rate', async () => {\n            const yValues = systemMemoryUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                0.707924703557837,\n                                0.707924703557837,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Heap Memory"],"updatePoint":{"line":237,"column":32,"index":9090},"line":237,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Avg. used\",\n                                \"Avg. committed\",\n                                \"Avg. limit\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Heap Memory"],"updatePoint":{"line":249,"column":47,"index":9571},"line":249,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                222501617.777778,\n                                374341632,\n                                1560281088,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","Heap Memory"],"updatePoint":{"line":260,"column":34,"index":9999},"line":260,"code":"          it('has the correct rate', async () => {\n            const yValues = cpuUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                211472896,\n                                374341632,\n                                1560281088,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Non-Heap Memory"],"updatePoint":{"line":278,"column":32,"index":10692},"line":278,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Avg. used\",\n                                \"Avg. committed\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Non-Heap Memory"],"updatePoint":{"line":289,"column":47,"index":11127},"line":289,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                138573397.333333,\n                                147677639.111111,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","Non-Heap Memory"],"updatePoint":{"line":299,"column":34,"index":11518},"line":299,"code":"          it('has the correct rate', async () => {\n            const yValues = cpuUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                138162752,\n                                147386368,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Thread Count"],"updatePoint":{"line":316,"column":32,"index":12161},"line":316,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"Avg. count\",\n                                \"Max count\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Thread Count"],"updatePoint":{"line":327,"column":47,"index":12592},"line":327,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                              Array [\n                                44.4444444444444,\n                                45,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has the correct rate","suites":["for opbeans-java","returns metrics data","Thread Count"],"updatePoint":{"line":337,"column":34,"index":12969},"line":337,"code":"          it('has the correct rate', async () => {\n            const yValues = cpuUsageChart?.series.map(serie => first(serie.data)?.y);\n            expectSnapshot(yValues).toMatchInline(`\n                              Array [\n                                44,\n                                44,\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Garbage collection per minute"],"updatePoint":{"line":354,"column":32,"index":13610},"line":354,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"G1 Old Generation\",\n                                \"G1 Young Generation\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Garbage collection per minute"],"updatePoint":{"line":365,"column":47,"index":14058},"line":365,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                Array [\n                  0,\n                  3,\n                ]\n              `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series","suites":["for opbeans-java","returns metrics data","Garbage collection time spent per minute"],"updatePoint":{"line":383,"column":32,"index":14628},"line":383,"code":"          it('has correct series', () => {\n            expect(cpuUsageChart).to.not.empty();\n            expectSnapshot(cpuUsageChart?.series.map(({\n              title\n            }) => title)).toMatchInline(`\n                              Array [\n                                \"G1 Old Generation\",\n                                \"G1 Young Generation\",\n                              ]\n                          `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has correct series overall values","suites":["for opbeans-java","returns metrics data","Garbage collection time spent per minute"],"updatePoint":{"line":394,"column":47,"index":15076},"line":394,"code":"          it('has correct series overall values', () => {\n            expectSnapshot(cpuUsageChart?.series.map(({\n              overallValue\n            }) => overallValue)).toMatchInline(`\n                Array [\n                  0,\n                  37500,\n                ]\n              `);\n          });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"calculates system memory usage using system total field when cgroup limit is equal to 9223372036854771712","suites":["for opbeans-java","returns metrics data","Garbage collection time spent per minute"],"updatePoint":{"line":407,"column":115,"index":15563},"line":407,"code":"      it('calculates system memory usage using system total field when cgroup limit is equal to 9223372036854771712', async () => {\n        const chartsResponse = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/services/{serviceName}/metrics/charts',\n          params: {\n            path: {\n              serviceName: 'opbeans-java'\n            },\n            query: {\n              start: '2020-09-08T15:00:30.000Z',\n              end: '2020-09-08T15:05:00.000Z',\n              agentName: 'java',\n              environment: 'ENVIRONMENT_ALL',\n              kuery: ``\n            }\n          }\n        });\n        const systemMemoryUsageChart = chartsResponse.body.charts.find(({\n          key\n        }) => key === 'memory_usage_chart');\n        expect(systemMemoryUsageChart).to.not.empty();\n        expectSnapshot(systemMemoryUsageChart?.series.map(({\n          title\n        }) => title)).toMatchInline(`\n                      Array [\n                        \"Max\",\n                        \"Average\",\n                      ]\n                  `);\n        expectSnapshot(systemMemoryUsageChart?.series.map(({\n          overallValue\n        }) => overallValue)).toMatchInline(`\n                      Array [\n                        0.114523896426499,\n                        0.114002376090415,\n                      ]\n                  `);\n        const yValues = systemMemoryUsageChart?.series.map(serie => first(serie.data)?.y);\n        expectSnapshot(yValues).toMatchInline(`\n                      Array [\n                        0.11383724014064,\n                        0.11383724014064,\n                      ]\n                  `);\n      });","file":"apm_api_integration/tests/metrics_charts/metrics_charts.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns false when there is no data","suites":[],"updatePoint":{"line":18,"column":43,"index":668},"line":18,"code":"    it('returns false when there is no data', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/observability_overview/has_data'\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.eql(false);\n    });","file":"apm_api_integration/tests/observability_overview/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns false when there is only onboarding data","suites":[],"updatePoint":{"line":30,"column":56,"index":1136},"line":30,"code":"    it('returns false when there is only onboarding data', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/observability_overview/has_data'\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.eql(false);\n    });","file":"apm_api_integration/tests/observability_overview/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns true when there is at least one document on transaction, error or metrics indices","suites":[],"updatePoint":{"line":42,"column":97,"index":1620},"line":42,"code":"    it('returns true when there is at least one document on transaction, error or metrics indices', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/observability_overview/has_data'\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.hasData).to.eql(true);\n    });","file":"apm_api_integration/tests/observability_overview/has_data.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":["when data is not loaded"],"updatePoint":{"line":59,"column":33,"index":2108},"line":59,"code":"      it('handles the empty state', async () => {\n        const response = await apmApiClient.readUser({\n          endpoint: `GET /internal/apm/observability_overview`,\n          params: {\n            query: {\n              start: new Date(start).toISOString(),\n              end: new Date(end).toISOString(),\n              bucketSize,\n              intervalString\n            }\n          }\n        });\n        expect(response.status).to.be(200);\n        expect(response.body.serviceCount).to.be(0);\n        expect(response.body.transactionPerMinute.timeseries.length).to.be(0);\n      });","file":"apm_api_integration/tests/observability_overview/observability_overview.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of service as shown on service inventory API","suites":["Observability overview api ","compare throughput values"],"updatePoint":{"line":97,"column":76,"index":4138},"line":97,"code":"        it('returns same number of service as shown on service inventory API', () => {\n          const {\n            serviceInventoryCount,\n            observabilityOverview\n          } = throughputValues;\n          [serviceInventoryCount, observabilityOverview.serviceCount].forEach(value => expect(value).to.be.equal(2));\n        });","file":"apm_api_integration/tests/observability_overview/observability_overview.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same throughput value on service inventory and obs throughput count","suites":["Observability overview api ","compare throughput values"],"updatePoint":{"line":104,"column":87,"index":4485},"line":104,"code":"        it('returns same throughput value on service inventory and obs throughput count', () => {\n          const {\n            serviceInventoryThroughputSum,\n            observabilityOverview\n          } = throughputValues;\n          const obsThroughputCount = roundNumber(observabilityOverview.transactionPerMinute.value);\n          [serviceInventoryThroughputSum, obsThroughputCount].forEach(value => expect(value).to.be.equal(roundNumber(GO_PROD_RATE + GO_DEV_RATE + JAVA_PROD_RATE)));\n        });","file":"apm_api_integration/tests/observability_overview/observability_overview.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same throughput value on service inventory and obs mean throughput timeseries","suites":["Observability overview api ","compare throughput values"],"updatePoint":{"line":112,"column":97,"index":4997},"line":112,"code":"        it('returns same throughput value on service inventory and obs mean throughput timeseries', () => {\n          const {\n            serviceInventoryThroughputSum,\n            observabilityOverview\n          } = throughputValues;\n          const obsThroughputMean = roundNumber(meanBy(observabilityOverview.transactionPerMinute.timeseries, 'y'));\n          [serviceInventoryThroughputSum, obsThroughputMean].forEach(value => expect(value).to.be.equal(roundNumber(GO_PROD_RATE + GO_DEV_RATE + JAVA_PROD_RATE)));\n        });","file":"apm_api_integration/tests/observability_overview/observability_overview.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":42,"column":31,"index":1376},"line":42,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"serviceNodes\": Array [],\n          }\n        `);\n    });","file":"apm_api_integration/tests/service_nodes/get_service_nodes.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns service nodes","suites":[],"updatePoint":{"line":66,"column":29,"index":2245},"line":66,"code":"    it('returns service nodes', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"serviceNodes\": Array [\n              Object {\n                \"cpu\": 1,\n                \"heapMemory\": 1000,\n                \"hostName\": \"instance-a\",\n                \"name\": \"instance-a\",\n                \"nonHeapMemory\": 100,\n                \"threadCount\": 25,\n              },\n            ],\n          }\n        `);\n    });","file":"apm_api_integration/tests/service_nodes/get_service_nodes.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":["when data is not loaded"],"updatePoint":{"line":28,"column":29,"index":1046},"line":28,"code":"      it('handles empty state', async () => {\n        const response = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/services/{serviceName}/service_overview_instances/details/{serviceNodeName}',\n          params: {\n            path: {\n              serviceName: 'opbeans-java',\n              serviceNodeName: 'foo'\n            },\n            query: {\n              start,\n              end\n            }\n          }\n        });\n        expect(response.status).to.be(200);\n        expect(response.body).to.eql({});\n      });","file":"apm_api_integration/tests/service_overview/instance_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the instance details","suites":["fetch instance details"],"updatePoint":{"line":75,"column":38,"index":2464},"line":75,"code":"      it('returns the instance details', () => {\n        expect(response.body).to.not.eql({});\n      });","file":"apm_api_integration/tests/service_overview/instance_details.spec.ts","skipped":true,"dir":"x-pack/test"},{"name":"return the correct data","suites":["fetch instance details"],"updatePoint":{"line":78,"column":33,"index":2564},"line":78,"code":"      it('return the correct data', () => {\n        expectSnapshot(omit(response.body, '@timestamp')).toMatch();\n      });","file":"apm_api_integration/tests/service_overview/instance_details.spec.ts","skipped":true,"dir":"x-pack/test"},{"name":"handles empty state when instance id not found","suites":["fetch instance details"],"updatePoint":{"line":87,"column":54,"index":2864},"line":87,"code":"    it('handles empty state when instance id not found', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/service_overview_instances/details/{serviceNodeName}',\n        params: {\n          path: {\n            serviceName: 'opbeans-java',\n            serviceNodeName: 'foo'\n          },\n          query: {\n            start,\n            end\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({});\n    });","file":"apm_api_integration/tests/service_overview/instance_details.spec.ts","skipped":true,"dir":"x-pack/test"},{"name":"handles the empty state","suites":["when data is not loaded"],"updatePoint":{"line":32,"column":33,"index":1352},"line":32,"code":"      it('handles the empty state', async () => {\n        const response = await apmApiClient.readUser({\n          endpoint: 'GET /internal/apm/services/{serviceName}/service_overview_instances/detailed_statistics',\n          params: {\n            path: {\n              serviceName\n            },\n            query: {\n              latencyAggregationType: LatencyAggregationType.avg,\n              start,\n              end,\n              numBuckets: 20,\n              transactionType: 'request',\n              serviceNodeIds: JSON.stringify(await getServiceNodeIds({\n                apmApiClient,\n                start,\n                end\n              })),\n              environment: 'ENVIRONMENT_ALL',\n              kuery: ''\n            }\n          }\n        });\n        expect(response.status).to.be(200);\n        expect(response.body).to.be.eql({\n          currentPeriod: {},\n          previousPeriod: {}\n        });\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a service node item","suites":["fetching data without comparison"],"updatePoint":{"line":97,"column":37,"index":3366},"line":97,"code":"      it('returns a service node item', () => {\n        expect(Object.values(response.body.currentPeriod).length).to.be.greaterThan(0);\n        expect(Object.values(response.body.previousPeriod)).to.eql(0);\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns statistics for each service node","suites":["fetching data without comparison"],"updatePoint":{"line":101,"column":50,"index":3596},"line":101,"code":"      it('returns statistics for each service node', async () => {\n        const item = response.body.currentPeriod[serviceNodeIds[0]];\n        expect(item?.cpuUsage?.some(point => isFiniteNumber(point.y))).to.be(true);\n        expect(item?.memoryUsage?.some(point => isFiniteNumber(point.y))).to.be(true);\n        expect(item?.errorRate?.some(point => isFiniteNumber(point.y))).to.be(true);\n        expect(item?.throughput?.some(point => isFiniteNumber(point.y))).to.be(true);\n        expect(item?.latency?.some(point => isFiniteNumber(point.y))).to.be(true);\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the right data","suites":["fetching data without comparison"],"updatePoint":{"line":109,"column":32,"index":4149},"line":109,"code":"      it('returns the right data', () => {\n        expectSnapshot(Object.values(response.body.currentPeriod).length).toMatchInline(`1`);\n        expectSnapshot(Object.keys(response.body.currentPeriod)).toMatchInline(`\n            Array [\n              \"31651f3c624b81c55dd4633df0b5b9f9ab06b151121b0404ae796632cd1f87ad\",\n            ]\n          `);\n        expectSnapshot(response.body).toMatch();\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a service node item for current and previous periods","suites":["fetching data with comparison"],"updatePoint":{"line":150,"column":70,"index":5592},"line":150,"code":"      it('returns a service node item for current and previous periods', () => {\n        expect(Object.values(response.body.currentPeriod).length).to.be.greaterThan(0);\n        expect(Object.values(response.body.previousPeriod).length).to.be.greaterThan(0);\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns statistics for current and previous periods","suites":["fetching data with comparison"],"updatePoint":{"line":154,"column":61,"index":5851},"line":154,"code":"      it('returns statistics for current and previous periods', () => {\n        const currentPeriodItem = response.body.currentPeriod[serviceNodeIds[0]];\n\n        function hasValidYCoordinate(point) {\n          return isFiniteNumber(point.y);\n        }\n\n        expect(currentPeriodItem?.cpuUsage?.some(hasValidYCoordinate)).to.be(true);\n        expect(currentPeriodItem?.memoryUsage?.some(hasValidYCoordinate)).to.be(true);\n        expect(currentPeriodItem?.errorRate?.some(hasValidYCoordinate)).to.be(true);\n        expect(currentPeriodItem?.throughput?.some(hasValidYCoordinate)).to.be(true);\n        expect(currentPeriodItem?.latency?.some(hasValidYCoordinate)).to.be(true);\n        const previousPeriodItem = response.body.previousPeriod[serviceNodeIds[0]];\n        expect(previousPeriodItem?.cpuUsage?.some(hasValidYCoordinate)).to.be(true);\n        expect(previousPeriodItem?.memoryUsage?.some(hasValidYCoordinate)).to.be(true);\n        expect(previousPeriodItem?.errorRate?.some(hasValidYCoordinate)).to.be(true);\n        expect(previousPeriodItem?.throughput?.some(hasValidYCoordinate)).to.be(true);\n        expect(previousPeriodItem?.latency?.some(hasValidYCoordinate)).to.be(true);\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the right data for current and previous periods","suites":["fetching data with comparison"],"updatePoint":{"line":173,"column":65,"index":7058},"line":173,"code":"      it('returns the right data for current and previous periods', () => {\n        expectSnapshot(Object.values(response.body.currentPeriod).length).toMatchInline(`1`);\n        expectSnapshot(Object.values(response.body.previousPeriod).length).toMatchInline(`1`);\n        expectSnapshot(Object.keys(response.body.currentPeriod)).toMatchInline(`\n            Array [\n              \"31651f3c624b81c55dd4633df0b5b9f9ab06b151121b0404ae796632cd1f87ad\",\n            ]\n          `);\n        expectSnapshot(Object.keys(response.body.previousPeriod)).toMatchInline(`\n            Array [\n              \"31651f3c624b81c55dd4633df0b5b9f9ab06b151121b0404ae796632cd1f87ad\",\n            ]\n          `);\n        expectSnapshot(response.body).toMatch();\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"matches x-axis on current period and previous period","suites":["fetching data with comparison"],"updatePoint":{"line":188,"column":62,"index":7802},"line":188,"code":"      it('matches x-axis on current period and previous period', () => {\n        const currentLatencyItems = response.body.currentPeriod[serviceNodeIds[0]]?.latency;\n        const previousLatencyItems = response.body.previousPeriod[serviceNodeIds[0]]?.latency;\n        expect(currentLatencyItems?.map(({\n          x\n        }) => x)).to.be.eql(previousLatencyItems?.map(({\n          x\n        }) => x));\n      });","file":"apm_api_integration/tests/service_overview/instances_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":24,"column":31,"index":813},"line":24,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/agent',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({});\n    });","file":"apm_api_integration/tests/services/agent.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the agent name","suites":[],"updatePoint":{"line":45,"column":30,"index":1366},"line":45,"code":"    it('returns the agent name', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/agent',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({\n        agentName: 'nodejs',\n        runtimeName: 'node'\n      });\n    });","file":"apm_api_integration/tests/services/agent.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"fails with a 403 forbidden","suites":["when creating an annotation"],"updatePoint":{"line":52,"column":36,"index":1593},"line":52,"code":"      it('fails with a 403 forbidden', async () => {\n        const response = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': new Date().toISOString(),\n            message: 'New deployment',\n            tags: ['foo'],\n            service: {\n              version: '1.1',\n              environment: 'production'\n            }\n          }\n        });\n        expect(response.status).to.be(403);\n        expect(response.body.message).to.be('Annotations require at least a gold license or a trial license.');\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"fails with a 400 bad request if data is missing","suites":["when creating an annotation"],"updatePoint":{"line":87,"column":57,"index":2666},"line":87,"code":"      it('fails with a 400 bad request if data is missing', async () => {\n        const response = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST'\n        });\n        expect(response.status).to.be(400);\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"fails with a 400 bad request if data is invalid","suites":["when creating an annotation"],"updatePoint":{"line":94,"column":57,"index":2932},"line":94,"code":"      it('fails with a 400 bad request if data is invalid', async () => {\n        const invalidTimestampResponse = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': 'foo',\n            message: 'foo'\n          }\n        });\n        expect(invalidTimestampResponse.status).to.be(400);\n        const missingServiceVersionResponse = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': new Date().toISOString(),\n            message: 'New deployment'\n          }\n        });\n        expect(missingServiceVersionResponse.status).to.be(400);\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"completes with a 200 and the created annotation if data is complete and valid","suites":["when creating an annotation"],"updatePoint":{"line":114,"column":87,"index":3696},"line":114,"code":"      it('completes with a 200 and the created annotation if data is complete and valid', async () => {\n        const timestamp = new Date().toISOString();\n        const response = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': timestamp,\n            message: 'New deployment',\n            tags: ['foo'],\n            service: {\n              version: '1.1',\n              environment: 'production'\n            }\n          }\n        });\n        expect(response.status).to.be(200);\n        expectContainsObj(response.body, {\n          _source: {\n            annotation: {\n              type: 'deployment'\n            },\n            tags: ['apm', 'foo'],\n            message: 'New deployment',\n            '@timestamp': timestamp,\n            service: {\n              name: 'opbeans-java',\n              version: '1.1',\n              environment: 'production'\n            }\n          }\n        });\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"prefills `message` and `tags`","suites":["when creating an annotation"],"updatePoint":{"line":146,"column":39,"index":4652},"line":146,"code":"      it('prefills `message` and `tags`', async () => {\n        const timestamp = new Date().toISOString();\n        const response = await request({\n          url: '/api/apm/services/opbeans-java/annotation',\n          method: 'POST',\n          data: {\n            '@timestamp': timestamp,\n            service: {\n              version: '1.1'\n            }\n          }\n        });\n        expectContainsObj(response.body, {\n          _source: {\n            annotation: {\n              type: 'deployment'\n            },\n            tags: ['apm'],\n            message: '1.1',\n            '@timestamp': timestamp,\n            service: {\n              name: 'opbeans-java',\n              version: '1.1'\n            }\n          }\n        });\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the derived annotations if there are no stored annotations","suites":["when mixing stored and derived annotations"],"updatePoint":{"line":247,"column":76,"index":7480},"line":247,"code":"      it('returns the derived annotations if there are no stored annotations', async () => {\n        const range = {\n          start: new Date(2020, 4, 2, 18).toISOString(),\n          end: new Date(2020, 4, 2, 20).toISOString()\n        };\n        const response = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=ENVIRONMENT_ALL`,\n          method: 'GET'\n        });\n        expect(response.status).to.be(200);\n        expect(response.body.annotations.length).to.be(2);\n        expect(response.body.annotations[0].text).to.be('1.1');\n        expect(response.body.annotations[1].text).to.be('1.2');\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the stored annotations only if there are any","suites":["when mixing stored and derived annotations"],"updatePoint":{"line":261,"column":62,"index":8158},"line":261,"code":"      it('returns the stored annotations only if there are any', async () => {\n        const range = {\n          start: new Date(2020, 4, 2, 18).toISOString(),\n          end: new Date(2020, 4, 2, 23).toISOString()\n        };\n        expect((await request({\n          url: `/api/apm/services/${serviceName}/annotation`,\n          method: 'POST',\n          data: {\n            service: {\n              version: '1.3'\n            },\n            '@timestamp': new Date(2020, 4, 2, 21, 30).toISOString()\n          }\n        })).status).to.be(200);\n        const response = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=ENVIRONMENT_ALL`,\n          method: 'GET'\n        });\n        expect(response.body.annotations.length).to.be(1);\n        expect(response.body.annotations[0].text).to.be('1.3');\n        const earlierRange = {\n          start: new Date(2020, 4, 2, 18).toISOString(),\n          end: new Date(2020, 4, 2, 20).toISOString()\n        };\n        expect((await request({\n          url: `/api/apm/services/${serviceName}/annotation`,\n          method: 'POST',\n          data: {\n            service: {\n              version: '1.3'\n            },\n            '@timestamp': new Date(2020, 4, 2, 21, 30).toISOString()\n          }\n        })).status).to.be(200);\n        const responseFromEarlierRange = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${earlierRange.start}&end=${earlierRange.end}&environment=ENVIRONMENT_ALL`,\n          method: 'GET'\n        });\n        expect(responseFromEarlierRange.body.annotations.length).to.be(2);\n        expect(responseFromEarlierRange.body.annotations[0].text).to.be('1.1');\n        expect(responseFromEarlierRange.body.annotations[1].text).to.be('1.2');\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns stored annotations for the given environment","suites":["when mixing stored and derived annotations"],"updatePoint":{"line":304,"column":62,"index":9994},"line":304,"code":"      it('returns stored annotations for the given environment', async () => {\n        expect((await request({\n          url: `/api/apm/services/${serviceName}/annotation`,\n          method: 'POST',\n          data: {\n            service: {\n              version: '1.3'\n            },\n            '@timestamp': new Date(2020, 4, 2, 21, 30).toISOString()\n          }\n        })).status).to.be(200);\n        expect((await request({\n          url: `/api/apm/services/${serviceName}/annotation`,\n          method: 'POST',\n          data: {\n            service: {\n              version: '1.4',\n              environment: 'production'\n            },\n            '@timestamp': new Date(2020, 4, 2, 21, 31).toISOString()\n          }\n        })).status).to.be(200);\n        const range = {\n          start: new Date(2020, 4, 2, 18).toISOString(),\n          end: new Date(2020, 4, 2, 23).toISOString()\n        };\n        const allEnvironmentsResponse = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=ENVIRONMENT_ALL`,\n          method: 'GET'\n        });\n        expect(allEnvironmentsResponse.body.annotations.length).to.be(2);\n        const productionEnvironmentResponse = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=production`,\n          method: 'GET'\n        });\n        expect(productionEnvironmentResponse.body.annotations.length).to.be(1);\n        expect(productionEnvironmentResponse.body.annotations[0].text).to.be('1.4');\n        const missingEnvironmentsResponse = await request({\n          url: `/api/apm/services/${serviceName}/annotation/search?start=${range.start}&end=${range.end}&environment=ENVIRONMENT_NOT_DEFINED`,\n          method: 'GET'\n        });\n        expect(missingEnvironmentsResponse.body.annotations.length).to.be(1);\n        expect(missingEnvironmentsResponse.body.annotations[0].text).to.be('1.3');\n      });","file":"apm_api_integration/tests/services/annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"annotations are displayed for the service versions in the given time range","suites":["when there are multiple service versions"],"updatePoint":{"line":118,"column":84,"index":3733},"line":118,"code":"      it('annotations are displayed for the service versions in the given time range', async () => {\n        expect(response.annotations.length).to.be(2);\n        expect(response.annotations[0]['@timestamp']).to.be(dates[1].getTime());\n        expect(response.annotations[1]['@timestamp']).to.be(dates[2].getTime());\n        expectSnapshot(response.annotations[0]).toMatchInline(`\n            Object {\n              \"@timestamp\": 1612141200000,\n              \"id\": \"2\",\n              \"text\": \"2\",\n              \"type\": \"version\",\n            }\n          `);\n      });","file":"apm_api_integration/tests/services/derived_annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"annotations are not displayed for the service versions outside of the given time range","suites":["when there are multiple service versions"],"updatePoint":{"line":131,"column":96,"index":4313},"line":131,"code":"      it('annotations are not displayed for the service versions outside of the given time range', () => {\n        expect(response.annotations.some(annotation => {\n          return annotation['@timestamp'] !== dates[0].getTime() && annotation['@timestamp'] !== dates[2].getTime();\n        }));\n      });","file":"apm_api_integration/tests/services/derived_annotations.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":54,"column":27,"index":1973},"line":54,"code":"    it('handles empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body).to.be.eql({\n        currentPeriod: {},\n        previousPeriod: {}\n      });\n    });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"return detailed statistics for all errors found","suites":["when data is loaded","without data comparison"],"updatePoint":{"line":98,"column":59,"index":3200},"line":98,"code":"        it('return detailed statistics for all errors found', () => {\n          expect(Object.keys(errorGroupsDetailedStatistics.currentPeriod).sort()).to.eql(errorIds);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct number of occurrencies","suites":["when data is loaded","without data comparison"],"updatePoint":{"line":101,"column":50,"index":3373},"line":101,"code":"        it('returns correct number of occurrencies', () => {\n          const numberOfBuckets = 15;\n          const detailedStatisticsOccurrenciesSum = Object.values(errorGroupsDetailedStatistics.currentPeriod).sort().map(({\n            timeseries\n          }) => {\n            return sumBy(timeseries, 'y');\n          });\n          expect(detailedStatisticsOccurrenciesSum).to.eql([PROD_ID_ERROR_RATE * numberOfBuckets, PROD_LIST_ERROR_RATE * numberOfBuckets]);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns empty state","suites":["when data is loaded","return empty state when invalid group id"],"updatePoint":{"line":121,"column":31,"index":4185},"line":121,"code":"        it('returns empty state', () => {\n          expect(errorGroupsDetailedStatistics).to.be.eql({\n            currentPeriod: {},\n            previousPeriod: {}\n          });\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["when data is loaded","with comparison"],"updatePoint":{"line":150,"column":29,"index":5061},"line":150,"code":"        it('returns some data', () => {\n          expect(Object.keys(errorGroupsDetailedStatistics.currentPeriod).length).to.be.greaterThan(0);\n          expect(Object.keys(errorGroupsDetailedStatistics.previousPeriod).length).to.be.greaterThan(0);\n          const hasCurrentPeriodData = Object.values(errorGroupsDetailedStatistics.currentPeriod)[0].timeseries.some(({\n            y\n          }) => isFiniteNumber(y));\n          const hasPreviousPeriodData = Object.values(errorGroupsDetailedStatistics.previousPeriod)[0].timeseries.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasCurrentPeriodData).to.equal(true);\n          expect(hasPreviousPeriodData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["when data is loaded","with comparison"],"updatePoint":{"line":162,"column":48,"index":5794},"line":162,"code":"        it('has same start time for both periods', () => {\n          expect(first(Object.values(errorGroupsDetailedStatistics.currentPeriod)[0].timeseries)?.x).to.equal(first(Object.values(errorGroupsDetailedStatistics.previousPeriod)[0].timeseries)?.x);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["when data is loaded","with comparison"],"updatePoint":{"line":165,"column":46,"index":6059},"line":165,"code":"        it('has same end time for both periods', () => {\n          expect(last(Object.values(errorGroupsDetailedStatistics.currentPeriod)[0].timeseries)?.x).to.equal(last(Object.values(errorGroupsDetailedStatistics.previousPeriod)[0].timeseries)?.x);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["when data is loaded","with comparison"],"updatePoint":{"line":168,"column":59,"index":6335},"line":168,"code":"        it('returns same number of buckets for both periods', () => {\n          expect(Object.values(errorGroupsDetailedStatistics.currentPeriod)[0].timeseries.length).to.equal(Object.values(errorGroupsDetailedStatistics.previousPeriod)[0].timeseries.length);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_detailed_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":46,"column":27,"index":1654},"line":46,"code":"    it('handles empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.errorGroups).to.empty();\n    });","file":"apm_api_integration/tests/services/error_groups/error_groups_main_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct number of occurrences","suites":["when data is loaded","returns the correct data"],"updatePoint":{"line":78,"column":49,"index":2581},"line":78,"code":"        it('returns correct number of occurrences', () => {\n          expect(errorGroupMainStatistics.errorGroups.length).to.equal(2);\n          expect(errorGroupMainStatistics.errorGroups.map(error => error.name).sort()).to.eql([ERROR_NAME_1, ERROR_NAME_2]);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_main_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct occurences","suites":["when data is loaded","returns the correct data"],"updatePoint":{"line":82,"column":38,"index":2842},"line":82,"code":"        it('returns correct occurences', () => {\n          const numberOfBuckets = 15;\n          expect(errorGroupMainStatistics.errorGroups.map(error => error.occurrences).sort()).to.eql([PROD_LIST_ERROR_RATE * numberOfBuckets, PROD_ID_ERROR_RATE * numberOfBuckets]);\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_main_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same last seen value as end date","suites":["when data is loaded","returns the correct data"],"updatePoint":{"line":86,"column":48,"index":3133},"line":86,"code":"        it('has same last seen value as end date', () => {\n          errorGroupMainStatistics.errorGroups.map(error => {\n            expect(error.lastSeen).to.equal(moment(end).startOf('minute').valueOf());\n          });\n        });","file":"apm_api_integration/tests/services/error_groups/error_groups_main_statistics.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":42,"column":31,"index":1402},"line":42,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"containerId\": \"N/A\",\n            \"host\": \"N/A\",\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/get_service_node_metadata.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns service node metadata","suites":[],"updatePoint":{"line":62,"column":37,"index":2218},"line":62,"code":"    it('returns service node metadata', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"containerId\": \"instance-a\",\n            \"host\": \"instance-a\",\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/get_service_node_metadata.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":45,"column":27,"index":1448},"line":45,"code":"    it('handles empty state', async () => {\n      const {\n        status,\n        body\n      } = await callApi();\n      expect(status).to.be(200);\n      expect(body).to.empty();\n    });","file":"apm_api_integration/tests/services/service_details/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":[],"updatePoint":{"line":71,"column":35,"index":2059},"line":71,"code":"    it('returns correct HTTP status', () => {\n      expect(status).to.be(200);\n    });","file":"apm_api_integration/tests/services/service_details/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct cloud details","suites":[],"updatePoint":{"line":74,"column":37,"index":2148},"line":74,"code":"    it('returns correct cloud details', () => {\n      const {\n        cloud\n      } = dataConfig;\n      const {\n        provider,\n        availabilityZone,\n        region,\n        machineType,\n        projectName,\n        serviceName: cloudServiceName\n      } = cloud;\n      expect(first(body?.cloud?.availabilityZones)).to.be(availabilityZone);\n      expect(first(body?.cloud?.machineTypes)).to.be(machineType);\n      expect(body?.cloud?.provider).to.be(provider);\n      expect(body?.cloud?.projectName).to.be(projectName);\n      expect(body?.cloud?.serviceName).to.be(cloudServiceName);\n      expect(first(body?.cloud?.regions)).to.be(region);\n    });","file":"apm_api_integration/tests/services/service_details/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct container details","suites":[],"updatePoint":{"line":93,"column":41,"index":2806},"line":93,"code":"    it('returns correct container details', () => {\n      const {\n        containerOs\n      } = dataConfig;\n      expect(body?.container?.isContainerized).to.be(true);\n      expect(body?.container?.os).to.be(containerOs);\n      expect(body?.container?.totalNumberInstances).to.be(1);\n      expect(body?.container?.type).to.be('Kubernetes');\n    });","file":"apm_api_integration/tests/services/service_details/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct serverless details","suites":[],"updatePoint":{"line":102,"column":42,"index":3156},"line":102,"code":"    it('returns correct serverless details', () => {\n      const {\n        cloud,\n        serverless\n      } = dataConfig;\n      const {\n        serviceName: cloudServiceName\n      } = cloud;\n      const {\n        faasTriggerType,\n        firstFunctionName,\n        secondFunctionName\n      } = serverless;\n      expect(body?.serverless?.type).to.be(cloudServiceName);\n      expect(body?.serverless?.functionNames).to.have.length(2);\n      expect(body?.serverless?.functionNames).to.contain(firstFunctionName);\n      expect(body?.serverless?.functionNames).to.contain(secondFunctionName);\n      expect(first(body?.serverless?.faasTriggerTypes)).to.be(faasTriggerType);\n    });","file":"apm_api_integration/tests/services/service_details/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct service details","suites":[],"updatePoint":{"line":121,"column":39,"index":3830},"line":121,"code":"    it('returns correct service details', () => {\n      const {\n        service\n      } = dataConfig;\n      const {\n        version,\n        runtime,\n        framework,\n        agent\n      } = service;\n      const {\n        name: runTimeName,\n        version: runTimeVersion\n      } = runtime;\n      const {\n        name: agentName,\n        version: agentVersion\n      } = agent;\n      expect(body?.service?.framework).to.be(framework);\n      expect(body?.service?.agent.name).to.be(agentName);\n      expect(body?.service?.agent.version).to.be(agentVersion);\n      expect(body?.service?.runtime?.name).to.be(runTimeName);\n      expect(body?.service?.runtime?.version).to.be(runTimeVersion);\n      expect(first(body?.service?.versions)).to.be(version);\n    });","file":"apm_api_integration/tests/services/service_details/service_details.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":42,"column":27,"index":1383},"line":42,"code":"    it('handles empty state', async () => {\n      const {\n        status,\n        body\n      } = await callApi();\n      expect(status).to.be(200);\n      expect(body).to.empty();\n    });","file":"apm_api_integration/tests/services/service_icons/service_icons.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct HTTP status","suites":[],"updatePoint":{"line":68,"column":35,"index":1992},"line":68,"code":"    it('returns correct HTTP status', () => {\n      expect(status).to.be(200);\n    });","file":"apm_api_integration/tests/services/service_icons/service_icons.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct metadata","suites":[],"updatePoint":{"line":71,"column":32,"index":2076},"line":71,"code":"    it('returns correct metadata', () => {\n      const {\n        agentName,\n        cloud\n      } = dataConfig;\n      const {\n        provider,\n        serviceName: cloudServiceName\n      } = cloud;\n      expect(body.agentName).to.be(agentName);\n      expect(body.cloudProvider).to.be(provider);\n      expect(body.containerType).to.be('Kubernetes');\n      expect(body.serverlessType).to.be(cloudServiceName);\n    });","file":"apm_api_integration/tests/services/service_icons/service_icons.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns services based on the terms enum API and ML data","suites":["with no kuery or environment are set"],"updatePoint":{"line":81,"column":66,"index":3603},"line":81,"code":"      it('returns services based on the terms enum API and ML data', () => {\n        const serviceNames = items.map(item => item.serviceName);\n        expect(serviceNames.sort()).to.eql(['a', 'b', 'c']);\n      });","file":"apm_api_integration/tests/services/sorted_and_filtered_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not return any services","suites":["with kuery set"],"updatePoint":{"line":93,"column":38,"index":3989},"line":93,"code":"      it('does not return any services', () => {\n        expect(items.length).to.be(0);\n      });","file":"apm_api_integration/tests/services/sorted_and_filtered_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns services for production only","suites":["with environment set to production"],"updatePoint":{"line":104,"column":46,"index":4317},"line":104,"code":"      it('returns services for production only', () => {\n        const serviceNames = items.map(item => item.serviceName);\n        expect(serviceNames.sort()).to.eql(['a']);\n      });","file":"apm_api_integration/tests/services/sorted_and_filtered_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":51,"column":31,"index":1866},"line":51,"code":"    it('handles the empty state', async () => {\n      const response = await callApi();\n      expect(response.status).to.be(200);\n      expect(response.body.currentPeriod.length).to.be(0);\n      expect(response.body.previousPeriod.length).to.be(0);\n    });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some transactions data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":89,"column":42,"index":3995},"line":89,"code":"        it('returns some transactions data', () => {\n          expect(throughputTransactions.currentPeriod.length).to.be.greaterThan(0);\n          const hasData = throughputTransactions.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some metrics data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":96,"column":37,"index":4302},"line":96,"code":"        it('returns some metrics data', () => {\n          expect(throughputMetrics.currentPeriod.length).to.be.greaterThan(0);\n          const hasData = throughputMetrics.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same mean value for metrics and transactions data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":103,"column":65,"index":4627},"line":103,"code":"        it('has same mean value for metrics and transactions data', () => {\n          const transactionsMean = meanBy(throughputTransactions.currentPeriod, 'y');\n          const metricsMean = meanBy(throughputMetrics.currentPeriod, 'y');\n          [transactionsMean, metricsMean].forEach(value => expect(roundNumber(value)).to.be.equal(roundNumber(GO_PROD_RATE + GO_DEV_RATE)));\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has a bucket size of 30 seconds for transactions data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":108,"column":65,"index":5018},"line":108,"code":"        it('has a bucket size of 30 seconds for transactions data', () => {\n          const firstTimerange = throughputTransactions.currentPeriod[0].x;\n          const secondTimerange = throughputTransactions.currentPeriod[1].x;\n          const timeIntervalAsSeconds = (secondTimerange - firstTimerange) / 1000;\n          expect(timeIntervalAsSeconds).to.equal(30);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has a bucket size of 1 minute for metrics data","suites":["Throughput chart api","compare transactions and metrics based throughput"],"updatePoint":{"line":114,"column":58,"index":5389},"line":114,"code":"        it('has a bucket size of 1 minute for metrics data', () => {\n          const firstTimerange = throughputMetrics.currentPeriod[0].x;\n          const secondTimerange = throughputMetrics.currentPeriod[1].x;\n          const timeIntervalAsMinutes = (secondTimerange - firstTimerange) / 1000 / 60;\n          expect(timeIntervalAsMinutes).to.equal(1);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["Throughput chart api","production environment"],"updatePoint":{"line":131,"column":29,"index":6039},"line":131,"code":"        it('returns some data', () => {\n          expect(throughput.currentPeriod.length).to.be.greaterThan(0);\n          const hasData = throughput.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns correct average throughput","suites":["Throughput chart api","production environment"],"updatePoint":{"line":138,"column":46,"index":6331},"line":138,"code":"        it('returns correct average throughput', () => {\n          const throughputMean = meanBy(throughput.currentPeriod, 'y');\n          expect(roundNumber(throughputMean)).to.be.equal(roundNumber(GO_PROD_RATE));\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["Throughput chart api","when synth-java is selected"],"updatePoint":{"line":153,"column":29,"index":6859},"line":153,"code":"        it('returns some data', () => {\n          expect(throughput.currentPeriod.length).to.be.greaterThan(0);\n          const hasData = throughput.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns throughput related to java agent","suites":["Throughput chart api","when synth-java is selected"],"updatePoint":{"line":160,"column":52,"index":7157},"line":160,"code":"        it('returns throughput related to java agent', () => {\n          const throughputMean = meanBy(throughput.currentPeriod, 'y');\n          expect(roundNumber(throughputMean)).to.be.equal(roundNumber(JAVA_PROD_RATE));\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns some data","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":177,"column":29,"index":7779},"line":177,"code":"        it('returns some data', () => {\n          expect(throughputResponse.currentPeriod.length).to.be.greaterThan(0);\n          expect(throughputResponse.previousPeriod.length).to.be.greaterThan(0);\n          const hasCurrentPeriodData = throughputResponse.currentPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          const hasPreviousPeriodData = throughputResponse.previousPeriod.some(({\n            y\n          }) => isFiniteNumber(y));\n          expect(hasCurrentPeriodData).to.equal(true);\n          expect(hasPreviousPeriodData).to.equal(true);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same start time for both periods","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":189,"column":48,"index":8384},"line":189,"code":"        it('has same start time for both periods', () => {\n          expect(first(throughputResponse.currentPeriod)?.x).to.equal(first(throughputResponse.previousPeriod)?.x);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same end time for both periods","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":192,"column":46,"index":8569},"line":192,"code":"        it('has same end time for both periods', () => {\n          expect(last(throughputResponse.currentPeriod)?.x).to.equal(last(throughputResponse.previousPeriod)?.x);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same number of buckets for both periods","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":195,"column":59,"index":8765},"line":195,"code":"        it('returns same number of buckets for both periods', () => {\n          expect(throughputResponse.currentPeriod.length).to.be(throughputResponse.previousPeriod.length);\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"has same mean value for both periods","suites":["Throughput chart api","time comparisons"],"updatePoint":{"line":198,"column":48,"index":8943},"line":198,"code":"        it('has same mean value for both periods', () => {\n          const currentPeriodMean = meanBy(throughputResponse.currentPeriod.filter(item => isFiniteNumber(item.y) && item.y > 0), 'y');\n          const previousPeriodMean = meanBy(throughputResponse.previousPeriod.filter(item => isFiniteNumber(item.y) && item.y > 0), 'y');\n          const currentPeriod = throughputResponse.currentPeriod;\n          const bucketSize = currentPeriod[1].x - currentPeriod[0].x;\n          const durationAsMinutes = bucketSize / 1000 / 60;\n          [currentPeriodMean, previousPeriodMean].every(value => expect(roundNumber(value)).to.be.equal(roundNumber((GO_PROD_RATE + GO_DEV_RATE) / durationAsMinutes)));\n        });","file":"apm_api_integration/tests/services/throughput.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":32,"column":31,"index":1427},"line":32,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: `GET /internal/apm/services`,\n        params: {\n          query: {\n            start,\n            end,\n            environment: ENVIRONMENT_ALL.value,\n            kuery: '',\n            probability: 1\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.items.length).to.be(0);\n    });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a successful response","suites":["when no additional filters are applied"],"updatePoint":{"line":100,"column":39,"index":4537},"line":100,"code":"      it('returns a successful response', () => {\n        expect(response.status).to.be(200);\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct statistics","suites":["when no additional filters are applied"],"updatePoint":{"line":103,"column":40,"index":4642},"line":103,"code":"      it('returns the correct statistics', () => {\n        const multipleEnvService = response.body.items.find(item => item.serviceName === 'multiple-env-service');\n        const totalRps = config.multiple.prod.rps + config.multiple.dev.rps;\n        expect(multipleEnvService).to.eql({\n          serviceName: 'multiple-env-service',\n          transactionType: 'request',\n          environments: ['production', 'development'],\n          agentName: 'go',\n          latency: 1000 * ((config.multiple.prod.duration * config.multiple.prod.rps + config.multiple.dev.duration * config.multiple.dev.rps) / totalRps),\n          throughput: totalRps * 60,\n          transactionErrorRate: config.multiple.dev.rps / (config.multiple.prod.rps + config.multiple.dev.rps)\n        });\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns services without transaction data","suites":["when no additional filters are applied"],"updatePoint":{"line":116,"column":51,"index":5432},"line":116,"code":"      it('returns services without transaction data', () => {\n        const serviceNames = response.body.items.map(item => item.serviceName);\n        expect(serviceNames).to.contain('metric-only-service');\n        expect(serviceNames).to.contain('error-only-service');\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns data only for that environment","suites":["when applying an environment filter"],"updatePoint":{"line":137,"column":48,"index":6126},"line":137,"code":"      it('returns data only for that environment', () => {\n        const multipleEnvService = response.body.items.find(item => item.serviceName === 'multiple-env-service');\n        const totalRps = config.multiple.prod.rps;\n        expect(multipleEnvService).to.eql({\n          serviceName: 'multiple-env-service',\n          transactionType: 'request',\n          environments: ['production'],\n          agentName: 'go',\n          latency: 1000 * (config.multiple.prod.duration * config.multiple.prod.rps / totalRps),\n          throughput: totalRps * 60,\n          transactionErrorRate: 0\n        });\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns data for that kuery filter only","suites":["when applying a kuery filter"],"updatePoint":{"line":166,"column":49,"index":7209},"line":166,"code":"      it('returns data for that kuery filter only', () => {\n        const multipleEnvService = response.body.items.find(item => item.serviceName === 'multiple-env-service');\n        const totalRps = config.multiple.dev.rps;\n        expect(multipleEnvService).to.eql({\n          serviceName: 'multiple-env-service',\n          transactionType: 'request',\n          environments: ['development'],\n          agentName: 'go',\n          latency: 1000 * (config.multiple.dev.duration * config.multiple.dev.rps / totalRps),\n          throughput: totalRps * 60,\n          transactionErrorRate: 1\n        });\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns data for the top transaction type that is not a default","suites":["when excluding default transaction types"],"updatePoint":{"line":195,"column":73,"index":8304},"line":195,"code":"      it('returns data for the top transaction type that is not a default', () => {\n        const multipleEnvService = response.body.items.find(item => item.serviceName === 'multiple-env-service');\n        expect(multipleEnvService?.transactionType).to.eql('rpc');\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"the response is successful","suites":["with the default APM read user","and fetching a list of services"],"updatePoint":{"line":222,"column":38,"index":9252},"line":222,"code":"        it('the response is successful', () => {\n          expect(response.status).to.eql(200);\n        });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"there is at least one service","suites":["with the default APM read user","and fetching a list of services"],"updatePoint":{"line":225,"column":41,"index":9363},"line":225,"code":"        it('there is at least one service', () => {\n          expect(response.body.items.length).to.be.greaterThan(0);\n        });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"some items have a health status set","suites":["with the default APM read user","and fetching a list of services"],"updatePoint":{"line":228,"column":47,"index":9500},"line":228,"code":"        it('some items have a health status set', () => {\n          // Under the assumption that the loaded archive has\n          // at least one APM ML job, and the time range is longer\n          // than 15m, at least one items should have a health status\n          // set. Note that we currently have a bug where healthy\n          // services report as unknown (so without any health status):\n          // https://github.com/elastic/kibana/issues/77083\n          const healthStatuses = sortBy(response.body.items, 'serviceName').map(item => item.healthStatus);\n          expect(healthStatuses.filter(Boolean).length).to.be.greaterThan(0);\n          expectSnapshot(healthStatuses).toMatchInline(`\n              Array [\n                undefined,\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n                \"healthy\",\n              ]\n            `);\n        });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"the response is successful","suites":["with a user that does not have access to ML"],"updatePoint":{"line":268,"column":36,"index":10966},"line":268,"code":"      it('the response is successful', () => {\n        expect(response.status).to.eql(200);\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"there is at least one service","suites":["with a user that does not have access to ML"],"updatePoint":{"line":271,"column":39,"index":11071},"line":271,"code":"      it('there is at least one service', () => {\n        expect(response.body.items.length).to.be.greaterThan(0);\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains no health statuses","suites":["with a user that does not have access to ML"],"updatePoint":{"line":274,"column":37,"index":11194},"line":274,"code":"      it('contains no health statuses', () => {\n        const definedHealthStatuses = response.body.items.map(item => item.healthStatus).filter(Boolean);\n        expect(definedHealthStatuses.length).to.be(0);\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not return health statuses for services that are not found in APM data","suites":["and fetching a list of services with a filter"],"updatePoint":{"line":295,"column":85,"index":11975},"line":295,"code":"      it('does not return health statuses for services that are not found in APM data', () => {\n        expect(response.status).to.be(200);\n        expect(response.body.items.length).to.be(1);\n        expect(response.body.items[0].serviceName).to.be('opbeans-java');\n      });","file":"apm_api_integration/tests/services/top_services.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":24,"column":27,"index":816},"line":24,"code":"    it('handles empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transaction_types',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.transactionTypes.length).to.be(0);\n    });","file":"apm_api_integration/tests/services/transaction_types.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":45,"column":27,"index":1407},"line":45,"code":"    it('handles empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transaction_types',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.transactionTypes.length).to.be.greaterThan(0);\n      expectSnapshot(response.body).toMatchInline(`\n          Object {\n            \"transactionTypes\": Array [\n              \"request\",\n              \"Worker\",\n            ],\n          }\n        `);\n    });","file":"apm_api_integration/tests/services/transaction_types.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state for environments","suites":[],"updatePoint":{"line":124,"column":48,"index":3607},"line":124,"code":"    it('handles the empty state for environments', async () => {\n      const {\n        body\n      } = await getEnvironments('myservice');\n      expect(body.environments).to.eql([{\n        name: 'ALL_OPTION_VALUE',\n        alreadyConfigured: false\n      }]);\n    });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state for agent name","suites":[],"updatePoint":{"line":133,"column":46,"index":3871},"line":133,"code":"    it('handles the empty state for agent name', async () => {\n      const {\n        body\n      } = await getAgentName('myservice');\n      expect(body.agentName).to.eql(undefined);\n    });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not allow creating config","suites":["as a read-only user"],"updatePoint":{"line":146,"column":40,"index":4226},"line":146,"code":"      it('does not allow creating config', async () => {\n        await expectStatusCode(() => createConfiguration(newConfig, {\n          user: 'read'\n        }), 403);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not allow updating the config","suites":["as a read-only user","when a configuration already exists"],"updatePoint":{"line":154,"column":46,"index":4591},"line":154,"code":"        it('does not allow updating the config', async () => {\n          await expectStatusCode(() => updateConfiguration(newConfig, {\n            user: 'read'\n          }), 403);\n        });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"does not allow deleting the config","suites":["as a read-only user","when a configuration already exists"],"updatePoint":{"line":159,"column":46,"index":4783},"line":159,"code":"        it('does not allow deleting the config', async () => {\n          await expectStatusCode(() => deleteConfiguration(newConfig, {\n            user: 'read'\n          }), 403);\n        });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can create and delete config","suites":["when creating one configuration"],"updatePoint":{"line":180,"column":38,"index":5360},"line":180,"code":"      it('can create and delete config', async () => {\n        // assert that config does not exist\n        await expectMissing(() => searchConfigurations(searchParams)); // create config\n\n        await createConfiguration(newConfig); // assert that config now exists\n\n        await expectExists(() => searchConfigurations(searchParams)); // delete config\n\n        await deleteConfiguration(newConfig); // assert that config was deleted\n\n        await expectMissing(() => searchConfigurations(searchParams));\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can find the config","suites":["when creating one configuration","when a configuration exists"],"updatePoint":{"line":195,"column":31,"index":6045},"line":195,"code":"        it('can find the config', async () => {\n          const {\n            status,\n            body\n          } = await searchConfigurations(searchParams);\n          expect(status).to.equal(200);\n          expect(body._source.service).to.eql({});\n          expect(body._source.settings).to.eql({\n            transaction_sample_rate: '0.55'\n          });\n        });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can list the config","suites":["when creating one configuration","when a configuration exists"],"updatePoint":{"line":206,"column":31,"index":6414},"line":206,"code":"        it('can list the config', async () => {\n          const {\n            status,\n            body\n          } = await getAllConfigurations();\n          expect(status).to.equal(200);\n          expect(omitTimestamp(body.configurations)).to.eql([{\n            service: {},\n            settings: {\n              transaction_sample_rate: '0.55'\n            },\n            applied_by_agent: false,\n            etag: 'eb88a8997666cc4b33745ef355a1bbd7c4782f2d'\n          }]);\n        });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can update the config","suites":["when creating one configuration","when a configuration exists"],"updatePoint":{"line":221,"column":33,"index":6901},"line":221,"code":"        it('can update the config', async () => {\n          await updateConfiguration({\n            service: {},\n            settings: {\n              transaction_sample_rate: '0.85'\n            }\n          });\n          const {\n            status,\n            body\n          } = await searchConfigurations(searchParams);\n          expect(status).to.equal(200);\n          expect(body._source.service).to.eql({});\n          expect(body._source.settings).to.eql({\n            transaction_sample_rate: '0.85'\n          });\n        });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"can list all configs","suites":["when creating multiple configurations"],"updatePoint":{"line":331,"column":30,"index":9676},"line":331,"code":"      it('can list all configs', async () => {\n        const {\n          status,\n          body\n        } = await getAllConfigurations();\n        expect(status).to.equal(200);\n        expect(orderBy(omitTimestamp(body.configurations), ['settings.transaction_sample_rate'])).to.eql([{\n          service: {},\n          settings: {\n            transaction_sample_rate: '0.1'\n          },\n          applied_by_agent: false,\n          etag: '0758cb18817de60cca29e07480d472694239c4c3'\n        }, {\n          service: {\n            name: 'my_service'\n          },\n          settings: {\n            transaction_sample_rate: '0.2'\n          },\n          applied_by_agent: false,\n          etag: 'e04737637056fdf1763bf0ef0d3fcb86e89ae5fc'\n        }, {\n          service: {\n            name: 'my_service',\n            environment: 'development'\n          },\n          settings: {\n            transaction_sample_rate: '0.3'\n          },\n          applied_by_agent: false,\n          etag: 'af4dac62621b6762e6281481d1f7523af1124120'\n        }, {\n          service: {\n            environment: 'production'\n          },\n          settings: {\n            transaction_sample_rate: '0.4'\n          },\n          applied_by_agent: false,\n          etag: '8d1bf8e6b778b60af351117e2cf53fb1ee570068'\n        }, {\n          service: {\n            environment: 'development'\n          },\n          settings: {\n            transaction_sample_rate: '0.5'\n          },\n          applied_by_agent: false,\n          etag: '4ce40da57e3c71daca704121c784b911ec05ae81'\n        }]);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":" / ","suites":["when creating multiple configurations"],"updatePoint":{"line":385,"column":78,"index":11333},"line":385,"code":"        it(`${agentRequest.service.name} / ${agentRequest.service.environment}`, async () => {\n          const {\n            status,\n            body\n          } = await searchConfigurations({\n            service: agentRequest.service,\n            etag: 'abc'\n          });\n          expect(status).to.equal(200);\n          expect(body._source.settings).to.eql(agentRequest.expectedSettings);\n        });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=false' before supplying etag","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":427,"column":68,"index":12547},"line":427,"code":"      it(`should have 'applied_by_agent=false' before supplying etag`, async () => {\n        const res1 = await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'development'\n          }\n        });\n        etag = res1.body._source.etag;\n        const res2 = await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'development'\n          },\n          etag\n        });\n        expect(res1.body._source.applied_by_agent).to.be(false);\n        expect(res2.body._source.applied_by_agent).to.be(false);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=true' after supplying etag","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":445,"column":66,"index":13155},"line":445,"code":"      it(`should have 'applied_by_agent=true' after supplying etag`, async () => {\n        await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'development'\n          },\n          etag\n        });\n\n        async function hasBeenAppliedByAgent() {\n          const {\n            body\n          } = await searchConfigurations({\n            service: {\n              name: 'myservice',\n              environment: 'development'\n            }\n          });\n          return !!body._source.applied_by_agent;\n        } // wait until `applied_by_agent` has been updated in elasticsearch\n\n\n        expect(await waitFor(hasBeenAppliedByAgent)).to.be(true);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=false' before marking as applied","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":469,"column":72,"index":13870},"line":469,"code":"      it(`should have 'applied_by_agent=false' before marking as applied`, async () => {\n        const res1 = await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'production'\n          }\n        });\n        expect(res1.body._source.applied_by_agent).to.be(false);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=true' when 'mark_as_applied_by_agent' attribute is true","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":478,"column":95,"index":14221},"line":478,"code":"      it(`should have 'applied_by_agent=true' when 'mark_as_applied_by_agent' attribute is true`, async () => {\n        await searchConfigurations({\n          service: {\n            name: 'myservice',\n            environment: 'production'\n          },\n          mark_as_applied_by_agent: true\n        });\n\n        async function hasBeenAppliedByAgent() {\n          const {\n            body\n          } = await searchConfigurations({\n            service: {\n              name: 'myservice',\n              environment: 'production'\n            }\n          });\n          return !!body._source.applied_by_agent;\n        } // wait until `applied_by_agent` has been updated in elasticsearch\n\n\n        expect(await waitFor(hasBeenAppliedByAgent)).to.be(true);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=false' when there are no agent config metrics for this etag","suites":["when an agent retrieves a configuration"],"updatePoint":{"line":531,"column":97,"index":15683},"line":531,"code":"    it(`should have 'applied_by_agent=false' when there are no agent config metrics for this etag`, async () => {\n      expect(agentConfiguration?.applied_by_agent).to.be(false);\n    });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=true' when getting a config from all configurations","suites":["when there are agent config metrics for this etag"],"updatePoint":{"line":546,"column":91,"index":16283},"line":546,"code":"      it(`should have 'applied_by_agent=true' when getting a config from all configurations`, async () => {\n        const {\n          body: {\n            configurations\n          }\n        } = await getAllConfigurations();\n        const updatedConfig = configurations.find(x => x.service.name === name && x.service.environment === environment);\n        expect(updatedConfig?.applied_by_agent).to.be(true);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should have 'applied_by_agent=true' when getting a single config","suites":["when there are agent config metrics for this etag"],"updatePoint":{"line":555,"column":74,"index":16682},"line":555,"code":"      it(`should have 'applied_by_agent=true' when getting a single config`, async () => {\n        const {\n          body: {\n            applied_by_agent: appliedByAgent\n          }\n        } = await findExactConfiguration(name, environment);\n        expect(appliedByAgent).to.be(true);\n      });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the environments, all unconfigured","suites":["when there are agent config metrics for this etag"],"updatePoint":{"line":569,"column":50,"index":17092},"line":569,"code":"    it('returns the environments, all unconfigured', async () => {\n      const {\n        body\n      } = await getEnvironments('opbeans-node');\n      const {\n        environments\n      } = body;\n      expect(environments.map(item => item.name)).to.contain('ALL_OPTION_VALUE');\n      expect(environments.every(item => item.alreadyConfigured === false)).to.be(true);\n      expectSnapshot(body).toMatchInline(`\n          Object {\n            \"environments\": Array [\n              Object {\n                \"alreadyConfigured\": false,\n                \"name\": \"ALL_OPTION_VALUE\",\n              },\n              Object {\n                \"alreadyConfigured\": false,\n                \"name\": \"testing\",\n              },\n            ],\n          }\n        `);\n    });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the agent name","suites":["when there are agent config metrics for this etag"],"updatePoint":{"line":593,"column":30,"index":17828},"line":593,"code":"    it('returns the agent name', async () => {\n      const {\n        body\n      } = await getAgentName('opbeans-node');\n      expect(body.agentName).to.eql('nodejs');\n    });","file":"apm_api_integration/tests/settings/agent_configuration/agent_configuration.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should return an error when creating an agent key","suites":["When the user does not have the required cluster privileges"],"updatePoint":{"line":56,"column":59,"index":1821},"line":56,"code":"      it('should return an error when creating an agent key', async () => {\n        const error = await expectToReject(() => createAgentKey(apmApiClient.writeUser));\n        expect(error.res.status).to.be(500);\n        expect(error.res.body.message).contain('is missing the following requested privilege');\n      });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should return an error when invalidating an agent key","suites":["When the user does not have the required cluster privileges"],"updatePoint":{"line":61,"column":63,"index":2142},"line":61,"code":"      it('should return an error when invalidating an agent key', async () => {\n        const error = await expectToReject(() => invalidateAgentKey(apmApiClient.writeUser, agentKeyName));\n        expect(error.res.status).to.be(500);\n      });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should return an error when getting a list of agent keys","suites":["When the user does not have the required cluster privileges"],"updatePoint":{"line":65,"column":66,"index":2388},"line":65,"code":"      it('should return an error when getting a list of agent keys', async () => {\n        const error = await expectToReject(() => getAgentKeys(apmApiClient.writeUser));\n        expect(error.res.status).to.be(500);\n      });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should return an error when creating an agent key with  privilege","suites":["When the user does not have the required application privileges"],"updatePoint":{"line":72,"column":89,"index":2783},"line":72,"code":"        it(`should return an error when creating an agent key with ${privilege} privilege`, async () => {\n          const error = await expectToReject(() => createAgentKey(apmApiClient.manageOwnAgentKeysUser, [privilege]));\n          expect(error.res.status).to.be(500);\n          expect(error.res.body.message).contain('is missing the following requested privilege');\n        });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to create an agent key","suites":["When the user does not have the required application privileges"],"updatePoint":{"line":89,"column":45,"index":3414},"line":89,"code":"    it('should be able to create an agent key', async () => {\n      const {\n        status,\n        body\n      } = await createAgentKey(apmApiClient.createAndAllAgentKeysUser);\n      expect(status).to.be(200);\n      expect(body).to.have.property('agentKey');\n      expect(body.agentKey).to.have.property('id');\n      expect(body.agentKey).to.have.property('api_key');\n      expect(body.agentKey).to.have.property('encoded');\n      expect(body.agentKey.name).to.be(agentKeyName);\n      const {\n        api_keys: apiKeys\n      } = await esClient.security.getApiKey({});\n      expect(apiKeys.filter(key => !key.invalidated && key.metadata?.application === 'apm')).to.have.length(1);\n    });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to invalidate an agent key","suites":["When the user does not have the required application privileges"],"updatePoint":{"line":105,"column":49,"index":4106},"line":105,"code":"    it('should be able to invalidate an agent key', async () => {\n      // Create\n      const {\n        body: createAgentKeyBody\n      } = await createAgentKey(apmApiClient.createAndAllAgentKeysUser);\n      const {\n        agentKey: {\n          id\n        }\n      } = createAgentKeyBody; // Invalidate\n\n      const {\n        status,\n        body\n      } = await invalidateAgentKey(apmApiClient.createAndAllAgentKeysUser, id);\n      expect(status).to.be(200);\n      expect(body).to.have.property('invalidatedAgentKeys');\n      expect(body.invalidatedAgentKeys).to.eql([id]); // Get\n\n      const {\n        api_keys: apiKeys\n      } = await esClient.security.getApiKey({});\n      expect(apiKeys.filter(key => !key.invalidated && key.metadata?.application === 'apm')).to.be.empty();\n    });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to get a list of agent keys","suites":["When the user does not have the required application privileges"],"updatePoint":{"line":129,"column":50,"index":4894},"line":129,"code":"    it('should be able to get a list of agent keys', async () => {\n      // Create\n      const {\n        body: createAgentKeyBody\n      } = await createAgentKey(apmApiClient.createAndAllAgentKeysUser);\n      const {\n        agentKey: {\n          id\n        }\n      } = createAgentKeyBody; // Get\n\n      const {\n        status,\n        body: {\n          agentKeys\n        }\n      } = await getAgentKeys(apmApiClient.createAndAllAgentKeysUser);\n      expect(status).to.be(200);\n      const agentKey = first(agentKeys);\n      expect(agentKey?.id).to.be(id);\n      expect(agentKey?.name).to.be(agentKeyName);\n      expect(agentKey).to.have.property('creation');\n      expect(agentKey?.invalidated).to.be(false);\n      expect(agentKey).to.have.property('username');\n      expect(agentKey).to.have.property('realm');\n      expect(agentKey?.metadata.application).to.be('apm');\n    });","file":"apm_api_integration/tests/settings/agent_keys/agent_keys.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an error because the user does not have access","suites":["when user does not have read access to ML","when calling the endpoint for listing jobs"],"updatePoint":{"line":31,"column":66,"index":1115},"line":31,"code":"        it('returns an error because the user does not have access', async () => {\n          const {\n            body\n          } = await getJobs();\n          expect(body.statusCode).to.be(403);\n          expect(body.error).to.be('Forbidden');\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/no_access_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns an error because the user does not have access","suites":["when user does not have read access to ML","when calling create endpoint"],"updatePoint":{"line":40,"column":66,"index":1436},"line":40,"code":"        it('returns an error because the user does not have access', async () => {\n          const {\n            body\n          } = await createJobs(['production', 'staging']);\n          expect(body.statusCode).to.be(403);\n          expect(body.error).to.be('Forbidden');\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/no_access_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a 200/true","suites":["when there are no v2 jobs"],"updatePoint":{"line":68,"column":28,"index":1757},"line":68,"code":"      it('returns a 200/true', async () => {\n        const {\n          status,\n          body\n        } = await callUpdateEndpoint();\n        expect(status).to.eql(200);\n        expect(body.update).to.eql(true);\n      });","file":"apm_api_integration/tests/settings/anomaly_detection/update_to_v3.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"creates a new job for each environment that has a v2 job","suites":["when there are only v2 jobs"],"updatePoint":{"line":81,"column":66,"index":2173},"line":81,"code":"      it('creates a new job for each environment that has a v2 job', async () => {\n        await callUpdateEndpoint();\n        const {\n          body: {\n            jobs\n          }\n        } = await getJobs();\n        expect(jobs.filter(job => job.version === 3).map(job => job.environment).sort()).to.eql(['development', 'production']);\n      });","file":"apm_api_integration/tests/settings/anomaly_detection/update_to_v3.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"only creates new jobs for environments that did not have a v3 job","suites":["when there are both v2 and v3 jobs"],"updatePoint":{"line":100,"column":75,"index":2855},"line":100,"code":"      it('only creates new jobs for environments that did not have a v3 job', async () => {\n        await callUpdateEndpoint();\n        const {\n          body: {\n            jobs\n          }\n        } = await getJobs();\n        expect(jobs.filter(job => job.version === 3).map(job => job.environment).sort()).to.eql(['development', 'production']);\n      });","file":"apm_api_integration/tests/settings/anomaly_detection/update_to_v3.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns a list of jobs","suites":["when user has write access to ML","when calling the endpoint for listing jobs"],"updatePoint":{"line":51,"column":34,"index":1553},"line":51,"code":"        it('returns a list of jobs', async () => {\n          const {\n            body\n          } = await getJobs();\n          expect(body.jobs.length).to.be(0);\n          expect(body.hasLegacyJobs).to.be(false);\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/write_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"creates two jobs","suites":["when user has write access to ML","when calling create endpoint"],"updatePoint":{"line":60,"column":28,"index":1837},"line":60,"code":"        it('creates two jobs', async () => {\n          await createJobs(['production', 'staging']);\n          const {\n            body\n          } = await getJobs();\n          expect(body.hasLegacyJobs).to.be(false);\n          expect(countBy(body.jobs, 'environment')).to.eql({\n            production: 1,\n            staging: 1\n          });\n        });","file":"apm_api_integration/tests/settings/anomaly_detection/write_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"skips duplicate job creation","suites":["when user has write access to ML","when calling create endpoint","with existing ML jobs"],"updatePoint":{"line":75,"column":42,"index":2357},"line":75,"code":"          it('skips duplicate job creation', async () => {\n            await createJobs(['production', 'test']);\n            const {\n              body\n            } = await getJobs();\n            expect(countBy(body.jobs, 'environment')).to.eql({\n              production: 1,\n              staging: 1,\n              test: 1\n            });\n          });","file":"apm_api_integration/tests/settings/anomaly_detection/write_user.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains two children link on Span A","suites":["Span links count on traces","producer-internal-only trace"],"updatePoint":{"line":57,"column":48,"index":2260},"line":57,"code":"        it('contains two children link on Span A', () => {\n          expect(Object.values(traces.linkedChildrenOfSpanCountBySpanId).length).to.equal(1);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerInternalOnly.spanAId]).to.equal(2);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains two children link on Span B","suites":["Span links count on traces","producer-external-only trace"],"updatePoint":{"line":70,"column":48,"index":2818},"line":70,"code":"        it('contains two children link on Span B', () => {\n          expect(Object.values(traces.linkedChildrenOfSpanCountBySpanId).length).to.equal(2);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerExternalOnly.spanBId]).to.equal(1);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerExternalOnly.transactionBId]).to.equal(1);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains one children link on transaction C and two on span C","suites":["Span links count on traces","producer-consumer trace"],"updatePoint":{"line":84,"column":73,"index":3505},"line":84,"code":"        it('contains one children link on transaction C and two on span C', () => {\n          expect(Object.values(traces.linkedChildrenOfSpanCountBySpanId).length).to.equal(2);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerConsumer.transactionCId]).to.equal(1);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerConsumer.spanCId]).to.equal(1);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"contains no children","suites":["Span links count on traces","consumer-multiple trace"],"updatePoint":{"line":98,"column":32,"index":4143},"line":98,"code":"        it('contains no children', () => {\n          expect(Object.values(traces.linkedChildrenOfSpanCountBySpanId).length).to.equal(0);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerMultiple.transactionDId]).to.equal(undefined);\n          expect(traces.linkedChildrenOfSpanCountBySpanId[ids.producerMultiple.spanEId]).to.equal(undefined);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no links for transaction A","suites":["Span links details","producer-internal-only span links details"],"updatePoint":{"line":164,"column":46,"index":6641},"line":164,"code":"        it('returns no links for transaction A', () => {\n          expect(transactionALinksDetails.childrenLinks.spanLinksDetails).to.eql([]);\n          expect(transactionALinksDetails.parentsLinks.spanLinksDetails).to.eql([]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no parents on Span A","suites":["Span links details","producer-internal-only span links details"],"updatePoint":{"line":168,"column":40,"index":6875},"line":168,"code":"        it('returns no parents on Span A', () => {\n          expect(spanALinksDetails.parentsLinks.spanLinksDetails).to.eql([]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns two children on Span A","suites":["Span links details","producer-internal-only span links details"],"updatePoint":{"line":171,"column":42,"index":7018},"line":171,"code":"        it('returns two children on Span A', () => {\n          expect(spanALinksDetails.childrenLinks.spanLinksDetails.length).to.eql(2);\n          const serviceCDetails = spanALinksDetails.childrenLinks.spanLinksDetails.find(childDetails => {\n            return childDetails.traceId === ids.producerConsumer.traceId && childDetails.spanId === ids.producerConsumer.transactionCId;\n          });\n          expect(serviceCDetails?.details).to.eql({\n            serviceName: 'producer-consumer',\n            agentName: 'ruby',\n            transactionId: ids.producerConsumer.transactionCId,\n            spanName: 'Transaction C',\n            duration: 1000000\n          });\n          const serviceDDetails = spanALinksDetails.childrenLinks.spanLinksDetails.find(childDetails => {\n            return childDetails.traceId === ids.producerMultiple.traceId && childDetails.spanId === ids.producerMultiple.transactionDId;\n          });\n          expect(serviceDDetails?.details).to.eql({\n            serviceName: 'consumer-multiple',\n            agentName: 'nodejs',\n            transactionId: ids.producerMultiple.transactionDId,\n            spanName: 'Transaction D',\n            duration: 1000000\n          });\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns producer-consumer as children of transaction B","suites":["Span links details","producer-external-only span links details"],"updatePoint":{"line":213,"column":66,"index":9145},"line":213,"code":"        it('returns producer-consumer as children of transaction B', () => {\n          expect(transactionBLinksDetails.childrenLinks.spanLinksDetails.length).to.be(1);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no parent for transaction B","suites":["Span links details","producer-external-only span links details"],"updatePoint":{"line":216,"column":47,"index":9306},"line":216,"code":"        it('returns no parent for transaction B', () => {\n          expect(transactionBLinksDetails.parentsLinks.spanLinksDetails).to.eql([]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns external parent on Span B","suites":["Span links details","producer-external-only span links details"],"updatePoint":{"line":219,"column":45,"index":9459},"line":219,"code":"        it('returns external parent on Span B', () => {\n          expect(spanBLinksDetails.parentsLinks.spanLinksDetails.length).to.be(1);\n          expect(spanBLinksDetails.parentsLinks.spanLinksDetails).to.eql([{\n            traceId: 'trace#1',\n            spanId: 'span#1'\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns consumer-multiple as child on Span B","suites":["Span links details","producer-external-only span links details"],"updatePoint":{"line":226,"column":56,"index":9773},"line":226,"code":"        it('returns consumer-multiple as child on Span B', () => {\n          expect(spanBLinksDetails.childrenLinks.spanLinksDetails.length).to.be(1);\n          expect(spanBLinksDetails.childrenLinks.spanLinksDetails).to.eql([{\n            traceId: ids.producerMultiple.traceId,\n            spanId: ids.producerMultiple.spanEId,\n            details: {\n              serviceName: 'consumer-multiple',\n              agentName: 'nodejs',\n              transactionId: ids.producerMultiple.transactionDId,\n              spanName: 'Span E',\n              duration: 100000,\n              spanSubtype: 'http',\n              spanType: 'external'\n            }\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns producer-internal-only Span A, producer-external-only Transaction B, and External link as parents of Transaction C","suites":["Span links details","producer-consumer span links details"],"updatePoint":{"line":261,"column":134,"index":11393},"line":261,"code":"        it('returns producer-internal-only Span A, producer-external-only Transaction B, and External link as parents of Transaction C', () => {\n          expect(transactionCLinksDetails.parentsLinks.spanLinksDetails.length).to.be(3);\n          expect(transactionCLinksDetails.parentsLinks.spanLinksDetails).to.eql([{\n            traceId: ids.producerInternalOnly.traceId,\n            spanId: ids.producerInternalOnly.spanAId,\n            details: {\n              serviceName: 'producer-internal-only',\n              agentName: 'go',\n              transactionId: ids.producerInternalOnly.transactionAId,\n              spanName: 'Span A',\n              duration: 100000,\n              spanSubtype: 'http',\n              spanType: 'external'\n            }\n          }, {\n            traceId: ids.producerExternalOnly.traceId,\n            spanId: ids.producerExternalOnly.transactionBId,\n            details: {\n              serviceName: 'producer-external-only',\n              agentName: 'java',\n              transactionId: ids.producerExternalOnly.transactionBId,\n              duration: 1000000,\n              spanName: 'Transaction B'\n            }\n          }, {\n            traceId: ids.producerConsumer.externalTraceId,\n            spanId: ids.producerExternalOnly.spanBId\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns consumer-multiple Span E as child of Transaction C","suites":["Span links details","producer-consumer span links details"],"updatePoint":{"line":290,"column":70,"index":12634},"line":290,"code":"        it('returns consumer-multiple Span E as child of Transaction C', () => {\n          expect(transactionCLinksDetails.childrenLinks.spanLinksDetails.length).to.be(1);\n          expect(transactionCLinksDetails.childrenLinks.spanLinksDetails).to.eql([{\n            traceId: ids.producerMultiple.traceId,\n            spanId: ids.producerMultiple.spanEId,\n            details: {\n              serviceName: 'consumer-multiple',\n              agentName: 'nodejs',\n              transactionId: ids.producerMultiple.transactionDId,\n              spanName: 'Span E',\n              duration: 100000,\n              spanSubtype: 'http',\n              spanType: 'external'\n            }\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no child on Span C","suites":["Span links details","producer-consumer span links details"],"updatePoint":{"line":306,"column":38,"index":13308},"line":306,"code":"        it('returns no child on Span C', () => {\n          expect(spanCLinksDetails.parentsLinks.spanLinksDetails.length).to.be(0);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns consumer-multiple as Child on producer-consumer","suites":["Span links details","producer-consumer span links details"],"updatePoint":{"line":309,"column":67,"index":13481},"line":309,"code":"        it('returns consumer-multiple as Child on producer-consumer', () => {\n          expect(spanCLinksDetails.childrenLinks.spanLinksDetails.length).to.be(1);\n          expect(spanCLinksDetails.childrenLinks.spanLinksDetails).to.eql([{\n            traceId: ids.producerMultiple.traceId,\n            spanId: ids.producerMultiple.transactionDId,\n            details: {\n              serviceName: 'consumer-multiple',\n              agentName: 'nodejs',\n              transactionId: ids.producerMultiple.transactionDId,\n              spanName: 'Transaction D',\n              duration: 1000000\n            }\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns producer-internal-only Span A and producer-consumer Span C as parents of Transaction D","suites":["Span links details","consumer-multiple span links details"],"updatePoint":{"line":342,"column":106,"index":15017},"line":342,"code":"        it('returns producer-internal-only Span A and producer-consumer Span C as parents of Transaction D', () => {\n          expect(transactionDLinksDetails.parentsLinks.spanLinksDetails.length).to.be(2);\n          expect(transactionDLinksDetails.parentsLinks.spanLinksDetails).to.eql([{\n            traceId: ids.producerInternalOnly.traceId,\n            spanId: ids.producerInternalOnly.spanAId,\n            details: {\n              serviceName: 'producer-internal-only',\n              agentName: 'go',\n              transactionId: ids.producerInternalOnly.transactionAId,\n              spanName: 'Span A',\n              duration: 100000,\n              spanSubtype: 'http',\n              spanType: 'external'\n            }\n          }, {\n            traceId: ids.producerConsumer.traceId,\n            spanId: ids.producerConsumer.spanCId,\n            details: {\n              serviceName: 'producer-consumer',\n              agentName: 'ruby',\n              transactionId: ids.producerConsumer.transactionCId,\n              spanName: 'Span C',\n              duration: 100000,\n              spanSubtype: 'http',\n              spanType: 'external'\n            }\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no children on Transaction D","suites":["Span links details","consumer-multiple span links details"],"updatePoint":{"line":370,"column":48,"index":16148},"line":370,"code":"        it('returns no children on Transaction D', () => {\n          expect(transactionDLinksDetails.childrenLinks.spanLinksDetails.length).to.be(0);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns producer-external-only Span B and producer-consumer Transaction C as parents of Span E","suites":["Span links details","consumer-multiple span links details"],"updatePoint":{"line":373,"column":106,"index":16368},"line":373,"code":"        it('returns producer-external-only Span B and producer-consumer Transaction C as parents of Span E', () => {\n          expect(spanELinksDetails.parentsLinks.spanLinksDetails.length).to.be(2);\n          expect(spanELinksDetails.parentsLinks.spanLinksDetails).to.eql([{\n            traceId: ids.producerExternalOnly.traceId,\n            spanId: ids.producerExternalOnly.spanBId,\n            details: {\n              serviceName: 'producer-external-only',\n              agentName: 'java',\n              transactionId: ids.producerExternalOnly.transactionBId,\n              spanName: 'Span B',\n              duration: 100000,\n              spanSubtype: 'http',\n              spanType: 'external'\n            }\n          }, {\n            traceId: ids.producerConsumer.traceId,\n            spanId: ids.producerConsumer.transactionCId,\n            details: {\n              serviceName: 'producer-consumer',\n              agentName: 'ruby',\n              transactionId: ids.producerConsumer.transactionCId,\n              spanName: 'Transaction C',\n              duration: 1000000\n            }\n          }]);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns no children on Span E","suites":["Span links details","consumer-multiple span links details"],"updatePoint":{"line":399,"column":41,"index":17424},"line":399,"code":"        it('returns no children on Span E', () => {\n          expect(spanELinksDetails.childrenLinks.spanLinksDetails.length).to.be(0);\n        });","file":"apm_api_integration/tests/span_links/span_links.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns all environments","suites":["with environment","with an empty string parameter"],"updatePoint":{"line":26,"column":36,"index":1036},"line":26,"code":"        it('returns all environments', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                fieldName: SERVICE_ENVIRONMENT,\n                fieldValue: '',\n                start,\n                end\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n          Object {\n            \"terms\": Array [\n              \"production\",\n              \"testing\",\n            ],\n          }\n        `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns items matching the string parameter","suites":["with environment","with a string parameter"],"updatePoint":{"line":51,"column":55,"index":1713},"line":51,"code":"        it('returns items matching the string parameter', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                fieldName: SERVICE_ENVIRONMENT,\n                fieldValue: 'pr',\n                start,\n                end\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n            Object {\n              \"terms\": Array [\n                \"production\",\n              ],\n            }\n          `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns all services","suites":["with service name","with an empty string parameter"],"updatePoint":{"line":77,"column":32,"index":2413},"line":77,"code":"        it('returns all services', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                fieldName: SERVICE_NAME,\n                fieldValue: '',\n                start,\n                end\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n              Object {\n                \"terms\": Array [\n                  \"auditbeat\",\n                  \"opbeans-dotnet\",\n                  \"opbeans-go\",\n                  \"opbeans-java\",\n                  \"opbeans-node\",\n                  \"opbeans-python\",\n                  \"opbeans-ruby\",\n                  \"opbeans-rum\",\n                ],\n              }\n            `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns items matching the string parameter","suites":["with service name","with a string parameter"],"updatePoint":{"line":108,"column":55,"index":3320},"line":108,"code":"        it('returns items matching the string parameter', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                fieldName: SERVICE_NAME,\n                fieldValue: 'aud',\n                start,\n                end\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n              Object {\n                \"terms\": Array [\n                  \"auditbeat\",\n                ],\n              }\n            `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns all transaction types","suites":["with transaction type","with an empty string parameter"],"updatePoint":{"line":134,"column":41,"index":4038},"line":134,"code":"        it('returns all transaction types', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                fieldName: TRANSACTION_TYPE,\n                fieldValue: '',\n                start,\n                end\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n                Object {\n                  \"terms\": Array [\n                    \"Worker\",\n                    \"celery\",\n                    \"page-load\",\n                    \"request\",\n                  ],\n                }\n              `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns items matching the string parameter","suites":["with transaction type","with a string parameter"],"updatePoint":{"line":161,"column":55,"index":4813},"line":161,"code":"        it('returns items matching the string parameter', async () => {\n          const {\n            body\n          } = await apmApiClient.readUser({\n            endpoint: 'GET /internal/apm/suggestions',\n            params: {\n              query: {\n                fieldName: TRANSACTION_TYPE,\n                fieldValue: 'w',\n                start,\n                end\n              }\n            }\n          });\n          expectSnapshot(body).toMatchInline(`\n                Object {\n                  \"terms\": Array [\n                    \"Worker\",\n                  ],\n                }\n              `);\n        });","file":"apm_api_integration/tests/suggestions/suggestions.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns same throughput value for Transaction-based and Metric-based data","suites":["when data is loaded ","compare throughput value between service inventory and service maps"],"updatePoint":{"line":83,"column":85,"index":3474},"line":83,"code":"        it('returns same throughput value for Transaction-based and Metric-based data', () => {\n          [...Object.values(throughputTransactionValues), ...Object.values(throughputMetricValues)].forEach(value => expect(roundNumber(value)).to.be.equal(GO_DEV_RATE));\n        });","file":"apm_api_integration/tests/throughput/service_maps.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns expected throughput value","suites":["when data is loaded ","when calling service maps transactions stats api"],"updatePoint":{"line":93,"column":45,"index":4025},"line":93,"code":"        it('returns expected throughput value', () => {\n          expect(roundNumber(serviceMapsNodeThroughput)).to.be.equal(GO_DEV_RATE);\n        });","file":"apm_api_integration/tests/throughput/service_maps.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":27,"column":27,"index":908},"line":27,"code":"    it('handles empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: `GET /internal/apm/traces`,\n        params: {\n          query: {\n            start,\n            end,\n            kuery: '',\n            environment: 'ENVIRONMENT_ALL',\n            probability: 1\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.items.length).to.be(0);\n    });","file":"apm_api_integration/tests/traces/top_traces.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct status code","suites":[],"updatePoint":{"line":63,"column":39,"index":1826},"line":63,"code":"    it('returns the correct status code', async () => {\n      expect(response.status).to.be(200);\n    });","file":"apm_api_integration/tests/traces/top_traces.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct number of buckets","suites":[],"updatePoint":{"line":66,"column":45,"index":1938},"line":66,"code":"    it('returns the correct number of buckets', async () => {\n      expectSnapshot(response.body.items.length).toMatchInline(`81`);\n    });","file":"apm_api_integration/tests/traces/top_traces.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct buckets","suites":[],"updatePoint":{"line":69,"column":35,"index":2068},"line":69,"code":"    it('returns the correct buckets', async () => {\n      const sortedItems = sortBy(response.body.items, 'impact');\n      const firstItem = sortedItems[0];\n      const lastItem = sortedItems[sortedItems.length - 1];\n      const groups = sortedItems.map(item => item.key).slice(0, 5);\n      expectSnapshot(sortedItems).toMatch();\n      expectSnapshot(firstItem).toMatchInline(`\n          Object {\n            \"agentName\": \"java\",\n            \"averageResponseTime\": 1639,\n            \"impact\": 0,\n            \"key\": Object {\n              \"service.name\": \"opbeans-java\",\n              \"transaction.name\": \"DispatcherServlet#doPost\",\n            },\n            \"serviceName\": \"opbeans-java\",\n            \"transactionName\": \"DispatcherServlet#doPost\",\n            \"transactionType\": \"request\",\n            \"transactionsPerMinute\": 0.0333333333333333,\n          }\n        `);\n      expectSnapshot(lastItem).toMatchInline(`\n          Object {\n            \"agentName\": \"dotnet\",\n            \"averageResponseTime\": 5963775,\n            \"impact\": 100,\n            \"key\": Object {\n              \"service.name\": \"opbeans-dotnet\",\n              \"transaction.name\": \"GET Orders/Get\",\n            },\n            \"serviceName\": \"opbeans-dotnet\",\n            \"transactionName\": \"GET Orders/Get\",\n            \"transactionType\": \"request\",\n            \"transactionsPerMinute\": 0.633333333333333,\n          }\n        `);\n      expectSnapshot(groups).toMatchInline(`\n          Array [\n            Object {\n              \"service.name\": \"opbeans-java\",\n              \"transaction.name\": \"DispatcherServlet#doPost\",\n            },\n            Object {\n              \"service.name\": \"opbeans-node\",\n              \"transaction.name\": \"POST /api/orders\",\n            },\n            Object {\n              \"service.name\": \"opbeans-node\",\n              \"transaction.name\": \"GET /api/products/:id\",\n            },\n            Object {\n              \"service.name\": \"opbeans-dotnet\",\n              \"transaction.name\": \"POST Orders/Post\",\n            },\n            Object {\n              \"service.name\": \"opbeans-python\",\n              \"transaction.name\": \"GET opbeans.views.product\",\n            },\n          ]\n        `);\n    });","file":"apm_api_integration/tests/traces/top_traces.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":26,"column":31,"index":887},"line":26,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transaction/charts/breakdown',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end,\n            transactionType,\n            environment: 'ENVIRONMENT_ALL',\n            kuery: ''\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body).to.eql({\n        timeseries: []\n      });\n    });","file":"apm_api_integration/tests/transactions/breakdown.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the transaction breakdown for a service","suites":[],"updatePoint":{"line":52,"column":55,"index":1613},"line":52,"code":"    it('returns the transaction breakdown for a service', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transaction/charts/breakdown',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end,\n            transactionType,\n            environment: 'ENVIRONMENT_ALL',\n            kuery: ''\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body).toMatch();\n    });","file":"apm_api_integration/tests/transactions/breakdown.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the transaction breakdown for a transaction group","suites":[],"updatePoint":{"line":71,"column":65,"index":2207},"line":71,"code":"    it('returns the transaction breakdown for a transaction group', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transaction/charts/breakdown',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end,\n            transactionType,\n            transactionName,\n            environment: 'ENVIRONMENT_ALL',\n            kuery: ''\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      const {\n        timeseries\n      } = response.body;\n      const numberOfSeries = timeseries.length;\n      expectSnapshot(numberOfSeries).toMatchInline(`1`);\n      const {\n        title,\n        color,\n        type,\n        data,\n        hideLegend,\n        legendValue\n      } = timeseries[0];\n      const nonNullDataPoints = data.filter(({\n        y\n      }) => y !== null);\n      expectSnapshot(nonNullDataPoints.length).toMatchInline(`47`);\n      expectSnapshot(data.slice(0, 5).map(({\n        x,\n        y\n      }) => {\n        return {\n          x: new Date(x ?? NaN).toISOString(),\n          y\n        };\n      })).toMatchInline(`\n        Array [\n          Object {\n            \"x\": \"2021-08-03T06:50:00.000Z\",\n            \"y\": null,\n          },\n          Object {\n            \"x\": \"2021-08-03T06:50:30.000Z\",\n            \"y\": 1,\n          },\n          Object {\n            \"x\": \"2021-08-03T06:51:00.000Z\",\n            \"y\": null,\n          },\n          Object {\n            \"x\": \"2021-08-03T06:51:30.000Z\",\n            \"y\": 1,\n          },\n          Object {\n            \"x\": \"2021-08-03T06:52:00.000Z\",\n            \"y\": 1,\n          },\n        ]\n      `);\n      expectSnapshot(title).toMatchInline(`\"app\"`);\n      expectSnapshot(color).toMatchInline(`\"#54b399\"`);\n      expectSnapshot(type).toMatchInline(`\"areaStacked\"`);\n      expectSnapshot(hideLegend).toMatchInline(`false`);\n      expectSnapshot(legendValue).toMatchInline(`\"100%\"`);\n      expectSnapshot(data).toMatch();\n    });","file":"apm_api_integration/tests/transactions/breakdown.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the transaction breakdown sorted by name","suites":[],"updatePoint":{"line":145,"column":56,"index":4265},"line":145,"code":"    it('returns the transaction breakdown sorted by name', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transaction/charts/breakdown',\n        params: {\n          path: {\n            serviceName: 'opbeans-node'\n          },\n          query: {\n            start,\n            end,\n            transactionType,\n            environment: 'ENVIRONMENT_ALL',\n            kuery: ''\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body.timeseries.map(serie => serie.title)).toMatchInline(`\n          Array [\n            \"app\",\n            \"http\",\n            \"postgresql\",\n            \"redis\",\n          ]\n        `);\n    });","file":"apm_api_integration/tests/transactions/breakdown.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles the empty state","suites":[],"updatePoint":{"line":34,"column":31,"index":1226},"line":34,"code":"    it('handles the empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.be(200);\n      expect(response.body?.percentileThresholdValue).to.be(undefined);\n      expect(response.body?.overallHistogram?.length).to.be(undefined);\n    });","file":"apm_api_integration/tests/transactions/latency_overall_distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns percentileThresholdValue and overall histogram","suites":[],"updatePoint":{"line":49,"column":62,"index":1851},"line":49,"code":"    it('returns percentileThresholdValue and overall histogram', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint,\n        ...getOptions()\n      });\n      expect(response.status).to.eql(200); // This matches the values returned for the other tab's search strategy approach in `../correlations/*`.\n\n      expect(response.body?.percentileThresholdValue).to.be(1309695.875);\n      expect(response.body?.overallHistogram?.length).to.be(101);\n    });","file":"apm_api_integration/tests/transactions/latency_overall_distribution.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"handles empty state","suites":[],"updatePoint":{"line":25,"column":27,"index":876},"line":25,"code":"    it('handles empty state', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transactions/traces/samples',\n        params: {\n          path: {\n            serviceName: 'opbeans-java'\n          },\n          query: {\n            start,\n            end,\n            transactionType: 'request',\n            environment: 'ENVIRONMENT_ALL',\n            transactionName: 'APIRestController#stats',\n            kuery: ''\n          }\n        }\n      });\n      expect(response.status).to.be(200);\n      expect(response.body.traceSamples.length).to.be(0);\n    });","file":"apm_api_integration/tests/transactions/trace_samples.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"returns the correct samples","suites":[],"updatePoint":{"line":50,"column":35,"index":1671},"line":50,"code":"    it('returns the correct samples', async () => {\n      const response = await apmApiClient.readUser({\n        endpoint: 'GET /internal/apm/services/{serviceName}/transactions/traces/samples',\n        params: {\n          path: {\n            serviceName: 'opbeans-java'\n          },\n          query: {\n            start,\n            end,\n            transactionType: 'request',\n            environment: 'ENVIRONMENT_ALL',\n            transactionName: 'APIRestController#stats',\n            kuery: ''\n          }\n        }\n      });\n      const {\n        traceSamples\n      } = response.body;\n      expect(response.status).to.be(200);\n      expectSnapshot(response.body.traceSamples.length).toMatchInline(`15`);\n      expectSnapshot(sortBy(traceSamples, sample => sample.traceId)).toMatchInline(`\n          Array [\n            Object {\n              \"traceId\": \"0996b09e42ad4dbfaaa6a069326c6e66\",\n              \"transactionId\": \"5721364b179716d0\",\n            },\n            Object {\n              \"traceId\": \"10d882b7118870015815a27c37892375\",\n              \"transactionId\": \"0cf9db0b1e321239\",\n            },\n            Object {\n              \"traceId\": \"2ca82e99453c58584c4b8de9a8ba4ec3\",\n              \"transactionId\": \"8fa2ca73976ce1e7\",\n            },\n            Object {\n              \"traceId\": \"45b3d1a86003938687a55e49bf3610b8\",\n              \"transactionId\": \"a707456bda99ee98\",\n            },\n            Object {\n              \"traceId\": \"4943691f87b7eb97d442d1ef33ca65c7\",\n              \"transactionId\": \"f6f4677d731e57c5\",\n            },\n            Object {\n              \"traceId\": \"5267685738bf75b68b16bf3426ba858c\",\n              \"transactionId\": \"5223f43bc3154c5a\",\n            },\n            Object {\n              \"traceId\": \"66bd97c457f5675665397ac9201cc050\",\n              \"transactionId\": \"592b60cc9ddabb15\",\n            },\n            Object {\n              \"traceId\": \"6d85d8f1bc4bbbfdb19cdba59d2fc164\",\n              \"transactionId\": \"d0a16f0f52f25d6b\",\n            },\n            Object {\n              \"traceId\": \"7483bd52150d1c93a858c60bfdd0c138\",\n              \"transactionId\": \"e20e701ff93bdb55\",\n            },\n            Object {\n              \"traceId\": \"9a84d15e5a0e32098d569948474e8e2f\",\n              \"transactionId\": \"b85db78a9824107b\",\n            },\n            Object {\n              \"traceId\": \"a21ea39b41349a4614a86321d965c957\",\n              \"transactionId\": \"338bd7908cbf7f2d\",\n            },\n            Object {\n              \"traceId\": \"ca7a2072e7974ae84b5096706c6b6255\",\n              \"transactionId\": \"92ab7f2ef11685dd\",\n            },\n            Object {\n              \"traceId\": \"d250e2a1bad40f78653d8858db65326b\",\n              \"transactionId\": \"6fcd12599c1b57fa\",\n            },\n            Object {\n              \"traceId\": \"d9415d102c0634e1e8fa53ceef07be70\",\n              \"transactionId\": \"fab91c68c9b1c42b\",\n            },\n            Object {\n              \"traceId\": \"e123f0466fa092f345d047399db65aa2\",\n              \"transactionId\": \"c0af16286229d811\",\n            },\n          ]\n        `);\n    });","file":"apm_api_integration/tests/transactions/trace_samples.spec.ts","skipped":false,"dir":"x-pack/test"},{"name":"PNG file matches the baseline image","suites":["Captures"],"updatePoint":{"line":27,"column":43,"index":1075},"line":27,"code":"    it('PNG file matches the baseline image', async () => {\n      await PageObjects.common.navigateToApp(appId);\n      await (await testSubjects.find('shareButton')).click();\n      await (await testSubjects.find('captureTestPanel')).click();\n      await (await testSubjects.find('captureTestPNG')).click();\n      await PageObjects.reporting.clickGenerateReportButton();\n      const url = await PageObjects.reporting.getReportURL(60000);\n      const captureData = await PageObjects.reporting.getRawPdfReportData(url);\n      const pngSessionFilePath = await PageObjects.reporting.writeSessionReport('capture_test_baseline_a', 'png', captureData, screenshotDir);\n      expect(await png.compareAgainstBaseline(pngSessionFilePath, fixtures.baselineAPng, screenshotDir, updateBaselines)).to.be.lessThan(0.09);\n    });","file":"examples/reporting_examples/capture_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"imports an 8.2 workpad","suites":["migration smoke test"],"updatePoint":{"line":15,"column":30,"index":564},"line":15,"code":"    it('imports an 8.2 workpad', async function () {\n      /*\n        In 8.1 Canvas introduced by value embeddables, which requires expressions to know about embeddable migrations\n        Starting in 8.3, we were seeing an error during migration where it would appear that an 8.2 workpad was\n        from a future version.  This was because there were missing embeddable migrations on the expression because\n        the Canvas plugin was adding the embeddable expression with all of it's migrations before other embeddables had\n        registered their own migrations.\n         This smoke test is intended to import an 8.2 workpad to ensure that we don't hit a similar scenario in the future\n      */\n      await PageObjects.settings.navigateTo();\n      await PageObjects.settings.clickKibanaSavedObjects();\n      await PageObjects.savedObjects.waitTableIsLoaded();\n      await PageObjects.savedObjects.importFile(path.join(__dirname, 'exports', '8.2.workpad.ndjson'));\n      await PageObjects.savedObjects.checkImportSucceeded();\n      await PageObjects.savedObjects.clickImportDone();\n    });","file":"functional/apps/canvas/migrations_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"migrates a workpad from 8.1","suites":["migration smoke test"],"updatePoint":{"line":31,"column":35,"index":1664},"line":31,"code":"    it('migrates a workpad from 8.1', async function () {\n      /*\n        This is a smoke test to make sure migrations don't fail.\n        This workpad from 8.1 has both by-val and by-ref embeddables\n      */\n      await PageObjects.settings.navigateTo();\n      await PageObjects.settings.clickKibanaSavedObjects();\n      await PageObjects.savedObjects.waitTableIsLoaded();\n      await PageObjects.savedObjects.importFile(path.join(__dirname, 'exports', '8.1.embeddable_test.ndjson'));\n      await PageObjects.savedObjects.checkImportSucceeded();\n      await PageObjects.savedObjects.clickImportDone();\n    });","file":"functional/apps/canvas/migrations_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"loads workpad list","suites":["smoke test"],"updatePoint":{"line":38,"column":26,"index":1432},"line":38,"code":"    it('loads workpad list', async () => {\n      await retry.try(async () => {\n        const workpadRows = await testSubjects.findAll(workpadListSelector);\n        expect(workpadRows).to.have.length(1);\n        expect(await workpadRows[0].getVisibleText()).to.equal('Test Workpad');\n      });\n    });","file":"functional/apps/canvas/smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"loads workpage when clicked","suites":["smoke test"],"updatePoint":{"line":45,"column":35,"index":1742},"line":45,"code":"    it('loads workpage when clicked', async () => {\n      // click the first workpad in the list to load it\n      await testSubjects.click(workpadListSelector); // wait for the workpad page to load\n\n      await retry.waitFor('workpad page', () => testSubjects.exists('canvasWorkpadPage')); // check that workpad loaded in url\n\n      await retry.try(async () => {\n        const url = await browser.getCurrentUrl();\n        const path = new URL(url).pathname;\n        expect(path).to.equal(`/app/canvas/workpad/${testWorkpadId}/page/1`);\n      });\n    });","file":"functional/apps/canvas/smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"renders elements on workpad","suites":["smoke test"],"updatePoint":{"line":57,"column":35,"index":2296},"line":57,"code":"    it('renders elements on workpad', async () => {\n      await retry.try(async () => {\n        // check for elements on the page\n        const elements = await testSubjects.findAll('canvasWorkpadPage > canvasWorkpadPageElementContent');\n        expect(elements).to.have.length(4); // check that the elements are what we expect\n        // first is a markdown element\n\n        const md = await elements[0].findByCssSelector('.canvasMarkdown');\n        expect(await md.getVisibleText()).to.contain('Welcome to Canvas'); // second element is a datatable that uses essql\n\n        const serverRows = await elements[1].findAllByCssSelector('.canvasDataTable tbody tr');\n        expect(serverRows).to.have.length(10); // third is a datatable that uses csv\n\n        const commonRows = await elements[2].findAllByCssSelector('.canvasDataTable tbody tr');\n        expect(commonRows).to.have.length(2); // fourth is a datatable that uses timelion\n\n        const timelionRows = await elements[3].findAllByCssSelector('.canvasDataTable tbody tr');\n        expect(timelionRows).to.have.length(12);\n      });\n    });","file":"functional/apps/canvas/smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with controls from 8.0.0","suites":["Export import saved objects between versions"],"updatePoint":{"line":45,"column":67,"index":1830},"line":45,"code":"    it('should be able to import dashboard with controls from 8.0.0', async () => {\n      // this will catch cases where there is an error in the migrations.\n      await savedObjects.checkImportSucceeded();\n      await savedObjects.clickImportDone();\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":50,"column":49,"index":2071},"line":50,"code":"    it('should render all panels on the dashboard', async () => {\n      await dashboardControls.enableControlsLab();\n      await common.navigateToApp('dashboard');\n      await dashboard.loadSavedDashboard('[8.0.0] Controls Dashboard'); // dashboard should load properly\n\n      await dashboard.expectOnDashboard('[8.0.0] Controls Dashboard');\n      await dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n      const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n      expect(errorEmbeddables.length).to.be(0);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"loads all controls from the saved dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":61,"column":51,"index":2658},"line":61,"code":"    it('loads all controls from the saved dashboard', async () => {\n      expect(await dashboardControls.getControlsCount()).to.be(2);\n      expect(await dashboardControls.getAllControlTitles()).to.eql(['Speaker Name', 'Play Name']);\n      const ids = await dashboardControls.getAllControlIds();\n      await dashboardControls.optionsListOpenPopover(ids[0]);\n      await retry.try(async () => {\n        expect(await dashboardControls.optionsListPopoverGetAvailableOptionsCount()).to.be(10);\n      });\n      await dashboardControls.optionsListEnsurePopoverIsClosed(ids[0]);\n      await dashboardControls.optionsListOpenPopover(ids[1]);\n      await retry.try(async () => {\n        // the second control should only have 5 available options because the previous control has HAMLET ROMEO JULIET and BRUTUS selected\n        expect(await dashboardControls.optionsListPopoverGetAvailableOptionsCount()).to.be(5);\n      });\n      await dashboardControls.optionsListEnsurePopoverIsClosed(ids[1]);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"applies default selected options list options to control","suites":["Export import saved objects between versions"],"updatePoint":{"line":77,"column":64,"index":3666},"line":77,"code":"    it('applies default selected options list options to control', async () => {\n      const controlIds = await dashboardControls.getAllControlIds();\n      const selectionString = await dashboardControls.optionsListGetSelectionsString(controlIds[0]);\n      expect(selectionString).to.be('HAMLET, ROMEO, JULIET, BRUTUS');\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"applies default selected options list options to dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":82,"column":66,"index":3997},"line":82,"code":"    it('applies default selected options list options to dashboard', async () => {\n      // because 4 selections are made on the control, the pie chart should only show 4 slices.\n      await elasticChart.setNewChartUiDebugFlag();\n      await queryBar.submitQuery();\n      await pieChart.expectPieSliceCountEsCharts(4);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/controls_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with various Lens panels from 7.12.1","suites":["Export import saved objects between versions"],"updatePoint":{"line":35,"column":79,"index":1647},"line":35,"code":"    it('should be able to import dashboard with various Lens panels from 7.12.1', async () => {\n      // this will catch cases where there is an error in the migrations.\n      await PageObjects.savedObjects.checkImportSucceeded();\n      await PageObjects.savedObjects.clickImportDone();\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/lens_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":40,"column":49,"index":1912},"line":40,"code":"    it('should render all panels on the dashboard', async () => {\n      await PageObjects.common.navigateToApp('dashboard');\n      await PageObjects.dashboard.loadSavedDashboard('[7.12.1] Lens By Value Test Dashboard'); // dashboard should load properly\n\n      await PageObjects.dashboard.expectOnDashboard('[7.12.1] Lens By Value Test Dashboard');\n      await PageObjects.dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n      const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n      expect(errorEmbeddables.length).to.be(0);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/lens_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should show the edit action for all panels","suites":["Export import saved objects between versions"],"updatePoint":{"line":50,"column":50,"index":2517},"line":50,"code":"    it('should show the edit action for all panels', async () => {\n      await PageObjects.dashboard.switchToEditMode(); //   All panels should be editable. This will catch cases where an error does not create an error embeddable.\n\n      const panelTitles = await PageObjects.dashboard.getPanelTitles();\n\n      for (const title of panelTitles) {\n        await dashboardPanelActions.expectExistsEditPanelAction(title);\n      }\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/lens_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should retain all panel drilldowns from 7.12.1","suites":["Export import saved objects between versions"],"updatePoint":{"line":59,"column":54,"index":2955},"line":59,"code":"    it('should retain all panel drilldowns from 7.12.1', async () => {\n      // Both panels configured with drilldowns in 7.12.1 should still have drilldowns.\n      const totalPanels = await PageObjects.dashboard.getPanelCount();\n      let panelsWithDrilldowns = 0;\n\n      for (let panelIndex = 0; panelIndex < totalPanels; panelIndex++) {\n        if ((await PageObjects.dashboard.getPanelDrilldownCount(panelIndex)) === 1) {\n          panelsWithDrilldowns++;\n        }\n      }\n\n      expect(panelsWithDrilldowns).to.be(2);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/lens_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with TSVB panels from 7.12.1","suites":["Export import saved objects between versions","From 7.12.1"],"updatePoint":{"line":28,"column":73,"index":1369},"line":28,"code":"      it('should be able to import dashboard with TSVB panels from 7.12.1', async () => {\n        // this will catch cases where there is an error in the migrations.\n        await PageObjects.savedObjects.checkImportSucceeded();\n        await PageObjects.savedObjects.clickImportDone();\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions","From 7.12.1"],"updatePoint":{"line":33,"column":51,"index":1644},"line":33,"code":"      it('should render all panels on the dashboard', async () => {\n        await PageObjects.common.navigateToApp('dashboard');\n        await PageObjects.dashboard.loadSavedDashboard('TSVB Index Pattern Smoke Test'); // dashboard should load properly\n\n        await PageObjects.dashboard.expectOnDashboard('TSVB Index Pattern Smoke Test');\n        await PageObjects.dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n        const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n        expect(errorEmbeddables.length).to.be(0);\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should show the edit action for all panels","suites":["Export import saved objects between versions","From 7.12.1"],"updatePoint":{"line":43,"column":52,"index":2249},"line":43,"code":"      it('should show the edit action for all panels', async () => {\n        await PageObjects.dashboard.switchToEditMode(); //   All panels should be editable. This will catch cases where an error does not create an error embeddable.\n\n        const panelTitles = await PageObjects.dashboard.getPanelTitles();\n\n        for (const title of panelTitles) {\n          await dashboardPanelActions.expectExistsEditPanelAction(title);\n        }\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should retain all panel drilldowns from 7.12.1","suites":["Export import saved objects between versions","From 7.12.1"],"updatePoint":{"line":52,"column":56,"index":2701},"line":52,"code":"      it('should retain all panel drilldowns from 7.12.1', async () => {\n        // Both panels configured with drilldowns in 7.12.1 should still have drilldowns.\n        const totalPanels = await PageObjects.dashboard.getPanelCount();\n        let panelsWithDrilldowns = 0;\n        let drilldownCount = 0;\n\n        for (let panelIndex = 0; panelIndex < totalPanels; panelIndex++) {\n          const panelDrilldownCount = await PageObjects.dashboard.getPanelDrilldownCount(panelIndex);\n\n          if (panelDrilldownCount >= 1) {\n            panelsWithDrilldowns++;\n          }\n\n          drilldownCount += await PageObjects.dashboard.getPanelDrilldownCount(panelIndex);\n        }\n\n        expect(panelsWithDrilldowns).to.be(2);\n        expect(drilldownCount).to.be(3);\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with TSVB panels from 7.13.3","suites":["Export import saved objects between versions","from 7.13.3"],"updatePoint":{"line":84,"column":73,"index":4154},"line":84,"code":"      it('should be able to import dashboard with TSVB panels from 7.13.3', async () => {\n        // this will catch cases where there is an error in the migrations.\n        await PageObjects.savedObjects.checkImportSucceeded();\n        await PageObjects.savedObjects.clickImportDone();\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions","from 7.13.3"],"updatePoint":{"line":89,"column":51,"index":4429},"line":89,"code":"      it('should render all panels on the dashboard', async () => {\n        await PageObjects.common.navigateToApp('dashboard');\n        await PageObjects.dashboard.loadSavedDashboard('TSVB 7.13.3'); // dashboard should load properly\n\n        await PageObjects.dashboard.expectOnDashboard('TSVB 7.13.3');\n        await PageObjects.dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n        const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n        expect(errorEmbeddables.length).to.be(0);\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should show the edit action for all panels","suites":["Export import saved objects between versions","from 7.13.3"],"updatePoint":{"line":99,"column":52,"index":4998},"line":99,"code":"      it('should show the edit action for all panels', async () => {\n        await PageObjects.dashboard.switchToEditMode(); //   All panels should be editable. This will catch cases where an error does not create an error embeddable.\n\n        const panelTitles = await PageObjects.dashboard.getPanelTitles();\n\n        for (const title of panelTitles) {\n          await dashboardPanelActions.expectExistsEditPanelAction(title);\n        }\n      });","file":"functional/apps/dashboard/group2/migration_smoke_tests/tsvb_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should be able to import dashboard with various Visualize panels from 7.12.1","suites":["Export import saved objects between versions"],"updatePoint":{"line":35,"column":84,"index":1657},"line":35,"code":"    it('should be able to import dashboard with various Visualize panels from 7.12.1', async () => {\n      // this will catch cases where there is an error in the migrations.\n      await PageObjects.savedObjects.checkImportSucceeded();\n      await PageObjects.savedObjects.clickImportDone();\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/visualize_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should render all panels on the dashboard","suites":["Export import saved objects between versions"],"updatePoint":{"line":40,"column":49,"index":1922},"line":40,"code":"    it('should render all panels on the dashboard', async () => {\n      await PageObjects.common.navigateToApp('dashboard');\n      await PageObjects.dashboard.loadSavedDashboard('[7.12.1] Visualize Test Dashboard'); // dashboard should load properly\n\n      await PageObjects.dashboard.expectOnDashboard('[7.12.1] Visualize Test Dashboard');\n      await PageObjects.dashboard.waitForRenderComplete(); // There should be 0 error embeddables on the dashboard\n\n      const errorEmbeddables = await testSubjects.findAll('embeddableStackError');\n      expect(errorEmbeddables.length).to.be(0);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/visualize_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should show the edit action for all panels","suites":["Export import saved objects between versions"],"updatePoint":{"line":50,"column":50,"index":2519},"line":50,"code":"    it('should show the edit action for all panels', async () => {\n      await PageObjects.dashboard.switchToEditMode(); //   All panels should be editable. This will catch cases where an error does not create an error embeddable.\n\n      const panelTitles = await PageObjects.dashboard.getPanelTitles();\n\n      for (const title of panelTitles) {\n        await dashboardPanelActions.expectExistsEditPanelAction(title);\n      }\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/visualize_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"should retain all panel drilldowns from 7.12.1","suites":["Export import saved objects between versions"],"updatePoint":{"line":59,"column":54,"index":2957},"line":59,"code":"    it('should retain all panel drilldowns from 7.12.1', async () => {\n      // Both panels configured with drilldowns in 7.12.1 should still have drilldowns.\n      const totalPanels = await PageObjects.dashboard.getPanelCount();\n      let panelsWithDrilldowns = 0;\n\n      for (let panelIndex = 0; panelIndex < totalPanels; panelIndex++) {\n        if ((await PageObjects.dashboard.getPanelDrilldownCount(panelIndex)) === 1) {\n          panelsWithDrilldowns++;\n        }\n      }\n\n      expect(panelsWithDrilldowns).to.be(2);\n    });","file":"functional/apps/dashboard/group2/migration_smoke_tests/visualize_migration_smoke_test.ts","skipped":false,"dir":"x-pack/test"},{"name":"create and save a new watch","suites":["watcher_test"],"updatePoint":{"line":63,"column":35,"index":2417},"line":63,"code":"    it('create and save a new watch', async () => {\n      await PageObjects.watcher.createWatch(watchID, watchName);\n      const watch = await PageObjects.watcher.getWatch(watchID);\n      expect(watch.id).to.be(watchID);\n      expect(watch.name).to.be(watchName);\n    });","file":"functional/apps/watcher/watcher_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should not allow a user to save a watch with the same ID","suites":["watcher_test"],"updatePoint":{"line":69,"column":64,"index":2718},"line":69,"code":"    it('should not allow a user to save a watch with the same ID', async () => {\n      await PageObjects.watcher.createWatch(watchID, updatedName);\n      const errorCallout = await testSubjects.find('sectionErrorMessage');\n      const errorCalloutText = await errorCallout.getVisibleText();\n      expect(errorCalloutText).to.be(`There is already a watch with ID '${watchID}'.`);\n    }); //delete the watch","file":"functional/apps/watcher/watcher_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should delete the watch","suites":["watcher_test"],"updatePoint":{"line":76,"column":31,"index":3092},"line":76,"code":"    it('should delete the watch', async () => {\n      // Navigate to the main list page\n      await PageObjects.common.navigateToApp('watcher');\n      const watchList = keyBy(await PageObjects.watcher.getWatches(), 'id');\n      log.debug(watchList);\n      expect(watchList.watchID.name).to.eql([watchName]);\n      await PageObjects.watcher.deleteWatch(watchID);\n      await testSubjects.click('confirmModalConfirmButton');\n      await PageObjects.header.waitUntilLoadingHasFinished();\n      await retry.try(async () => {\n        const emptyPrompt = await testSubjects.find('emptyPrompt');\n        const emptyPromptText = await emptyPrompt.getVisibleText();\n        expect(emptyPromptText).to.contain('You don’t have any watches yet\\n');\n      });\n    });","file":"functional/apps/watcher/watcher_test.js","skipped":false,"dir":"x-pack/test"},{"name":"can navigate to APM app","suites":["APM smoke test"],"updatePoint":{"line":25,"column":31,"index":1014},"line":25,"code":"    it('can navigate to APM app', async () => {\n      await testSubjects.existOrFail('apmMainContainer', {\n        timeout: 10000\n      }); // wait for this last change on the page;\n      // <caption class=\"euiScreenReaderOnly euiTableCaption\">This table contains 1 rows out of 1 rows; Page 1 of 1.</caption>\n      // but \"<caption class=\"euiScreenReaderOnly euiTableCaption\">\" always exists so we have to wait until there's text\n\n      await retry.waitForWithTimeout('The APM table has a caption', 5000, async () => {\n        return (await (await find.byCssSelector('caption')).getAttribute('innerHTML')).includes('This table contains ');\n      });\n      await find.clickByDisplayedLinkText('apm-a-rum-test-e2e-general-usecase');\n      log.debug('### apm smoke test passed');\n      await find.clickByLinkText('general-usecase-initial-p-load');\n      log.debug('### general use case smoke test passed');\n    });","file":"stack_functional_integration/apps/apm/apm_smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"should display tabs in the ML app correctly","suites":["ML smoke test should check all the tabs"],"updatePoint":{"line":17,"column":51,"index":626},"line":17,"code":"    it('should display tabs in the ML app correctly', async () => {\n      await ml.testExecution.logTestStep('should load the ML app');\n      await ml.navigation.navigateToMl();\n      await ml.testExecution.logTestStep('should display the enabled \"Overview\" tab');\n      await ml.navigation.assertOverviewTabEnabled(true);\n      await ml.testExecution.logTestStep('should display the enabled \"Anomaly Detection\" tab');\n      await ml.navigation.assertAnomalyDetectionTabEnabled(true);\n      await ml.testExecution.logTestStep('should display the enabled \"Data Frame Analytics\" tab');\n      await ml.navigation.assertDataFrameAnalyticsTabEnabled(true);\n      await ml.testExecution.logTestStep('should display the enabled \"Data Visualizer\" tab');\n      await ml.navigation.assertDataVisualizerTabEnabled(true);\n      await ml.testExecution.logTestStep('should display the enabled \"Settings\" tab');\n      await ml.navigation.assertSettingsTabEnabled(true);\n    });","file":"stack_functional_integration/apps/ml/ml_smoke_test.js","skipped":false,"dir":"x-pack/test"},{"name":"Get started with fleet","suites":["Home page","Agents","Quick Start"],"updatePoint":{"line":25,"column":32,"index":1616},"line":25,"code":"      it('Get started with fleet', () => {\n        checkA11y({\n          skipFailures: false\n        });\n      });","file":"integration/a11y/home_page.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Install Fleet Server","suites":["Home page","Agents","Quick Start"],"updatePoint":{"line":30,"column":30,"index":1729},"line":30,"code":"      it('Install Fleet Server', () => {\n        cy.getBySel('fleetServerHostInput', {\n          timeout: 15000\n        }).should('be.visible');\n        cy.getBySel('fleetServerHostInput').getBySel('comboBoxSearchInput').type(fleetServerHost);\n        cy.getBySel(GENERATE_FLEET_SERVER_POLICY_BUTTON).click();\n        cy.getBySel(PLATFORM_TYPE_LINUX_BUTTON, {\n          timeout: 15000\n        }).should('be.visible');\n        checkA11y({\n          skipFailures: false\n        });\n      });","file":"integration/a11y/home_page.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Select policy for fleet","suites":["Home page","Agents","Advanced"],"updatePoint":{"line":48,"column":33,"index":2351},"line":48,"code":"      it('Select policy for fleet', () => {\n        checkA11y({\n          skipFailures: false\n        });\n      });","file":"integration/a11y/home_page.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Add your fleet sever host","suites":["Home page","Agents","Advanced"],"updatePoint":{"line":53,"column":35,"index":2469},"line":53,"code":"      it('Add your fleet sever host', () => {\n        cy.getBySel(ADVANCED_FLEET_SERVER_ADD_HOST_BUTTON).click();\n        checkA11y({\n          skipFailures: false\n        });\n      });","file":"integration/a11y/home_page.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Generate service token","suites":["Home page","Agents","Advanced"],"updatePoint":{"line":59,"column":32,"index":2652},"line":59,"code":"      it('Generate service token', () => {\n        cy.getBySel(ADVANCED_FLEET_SERVER_ADD_HOST_BUTTON, {\n          timeout: 15000\n        }).should('be.visible');\n        cy.getBySel(ADVANCED_FLEET_SERVER_GENERATE_SERVICE_TOKEN_BUTTON).click();\n        cy.getBySel(PLATFORM_TYPE_LINUX_BUTTON, {\n          timeout: 15000\n        }).should('be.visible');\n        checkA11y({\n          skipFailures: false\n        });\n      });","file":"integration/a11y/home_page.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Agent Table","suites":["Home page","Agent Policies"],"updatePoint":{"line":80,"column":19,"index":3305},"line":80,"code":"    it('Agent Table', () => {\n      checkA11y({\n        skipFailures: false\n      });\n    });","file":"integration/a11y/home_page.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Create Policy Flyout","suites":["Home page","Agent Policies"],"updatePoint":{"line":85,"column":28,"index":3408},"line":85,"code":"    it('Create Policy Flyout', () => {\n      cy.getBySel(AGENT_POLICIES_CREATE_AGENT_POLICY_BUTTON).click();\n      cy.getBySel(AGENT_POLICIES_CREATE_AGENT_POLICY_FLYOUT_TITLE, {\n        timeout: 15000\n      }).should('be.visible');\n      cy.getBySel(AGENT_POLICY_CREATE_AGENT_POLICY_NAME_FIELD).type('testName');\n      cy.get('.ingest-active-button').click();\n      cy.getBySel(AGENT_POLICIES_FLYOUT_ADVANCED_DEFAULT_NAMESPACE_HEADER, {\n        timeout: 15000\n      }).should('be.visible');\n      checkA11y({\n        skipFailures: false\n      });\n    });","file":"integration/a11y/home_page.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Agent Table After Adding Another Agent","suites":["Home page","Agent Policies"],"updatePoint":{"line":99,"column":46,"index":3981},"line":99,"code":"    it('Agent Table After Adding Another Agent', () => {\n      cy.getBySel(AGENT_POLICY_FLYOUT_CREATE_BUTTON).click();\n      cy.getBySel(AGENT_POLICY_NAME_LINK, {\n        timeout: 15000\n      }).should('be.visible');\n      checkA11y({\n        skipFailures: true\n      });\n    });","file":"integration/a11y/home_page.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Enrollment Tokens Table","suites":["Home page","Enrollment Tokens"],"updatePoint":{"line":113,"column":31,"index":4369},"line":113,"code":"    it('Enrollment Tokens Table', () => {\n      cy.getBySel('tableHeaderCell_name_0', {\n        timeout: 15000\n      }).should('be.visible');\n      checkA11y({\n        skipFailures: false\n      });\n    });","file":"integration/a11y/home_page.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Create Enrollment Token Modal","suites":["Home page","Enrollment Tokens"],"updatePoint":{"line":121,"column":37,"index":4581},"line":121,"code":"    it('Create Enrollment Token Modal', () => {\n      cy.getBySel(ENROLLMENT_TOKENS_CREATE_TOKEN_BUTTON).click();\n      cy.getBySel(ENROLLMENT_TOKENS_CREATE_TOKEN_NAME_FIELD, {\n        timeout: 15000\n      }).should('be.visible');\n      checkA11y({\n        skipFailures: false\n      });\n    });","file":"integration/a11y/home_page.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Datastreams Empty Table","suites":["Home page","Data Streams"],"updatePoint":{"line":139,"column":31,"index":5130},"line":139,"code":"    it('Datastreams Empty Table', () => {\n      cy.getBySel('tableHeaderSortButton', {\n        timeout: 15000\n      }).should('be.visible');\n      checkA11y({\n        skipFailures: false\n      });\n    });","file":"integration/a11y/home_page.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Settings Form","suites":["Home page","Settings"],"updatePoint":{"line":153,"column":21,"index":5505},"line":153,"code":"    it('Settings Form', () => {\n      cy.getBySel(SETTINGS_FLEET_SERVER_HOST_HEADING, {\n        timeout: 15000\n      }).should('be.visible');\n      checkA11y({\n        skipFailures: false\n      });\n    });","file":"integration/a11y/home_page.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"has a default value and allows to edit an existing object","suites":["Agent binary download source section"],"updatePoint":{"line":15,"column":63,"index":761},"line":15,"code":"  it('has a default value and allows to edit an existing object', () => {\n    cy.getBySel(SETTINGS_TAB).click();\n    cy.getBySel(AGENT_BINARY_SOURCES_TABLE).find('tr').should('have.length', '2');\n    cy.getBySel(AGENT_BINARY_SOURCES_TABLE_ACTIONS.HOST).contains('https://artifacts.elastic.co/downloads/');\n    cy.getBySel(AGENT_BINARY_SOURCES_TABLE_ACTIONS.DEFAULT_VALUE).should('exist');\n    cy.getBySel(AGENT_BINARY_SOURCES_TABLE_ACTIONS.EDIT).click();\n    cy.getBySel(AGENT_BINARY_SOURCES_FLYOUT.NAME_INPUT).clear().type('New Name');\n    cy.getBySel(AGENT_BINARY_SOURCES_FLYOUT.HOST_INPUT).clear().type('https://edited-default-host.co');\n    cy.getBySel(AGENT_BINARY_SOURCES_FLYOUT.SUBMIT_BUTTON).click();\n    cy.getBySel(CONFIRM_MODAL_CONFIRM_BUTTON).click();\n    cy.intercept('api/fleet/agent_download_sources/fleet-default-download-source', {\n      host: 'https://edited-default-host.co',\n      is_default: true,\n      name: 'New Name'\n    });\n  });","file":"integration/agent_binary_download_source.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"allows to create new download source objects","suites":["Agent binary download source section"],"updatePoint":{"line":31,"column":50,"index":1704},"line":31,"code":"  it('allows to create new download source objects', () => {\n    cy.getBySel(SETTINGS_TAB).click();\n    cy.getBySel(AGENT_BINARY_SOURCES_TABLE_ACTIONS.ADD).click();\n    cy.getBySel(AGENT_BINARY_SOURCES_FLYOUT.NAME_INPUT).clear().type('New Host');\n    cy.getBySel(AGENT_BINARY_SOURCES_FLYOUT.HOST_INPUT).clear().type('https://new-test-host.co');\n    cy.getBySel(AGENT_BINARY_SOURCES_FLYOUT.SUBMIT_BUTTON).click();\n    cy.getBySel(AGENT_BINARY_SOURCES_TABLE).find('tr').should('have.length', '3');\n    cy.intercept('api/fleet/agent_download_sources', {\n      name: 'New Host',\n      is_default: false,\n      host: 'https://new-test-host.co'\n    });\n    cy.getBySel(AGENT_BINARY_SOURCES_TABLE_ACTIONS.ADD).click();\n    cy.getBySel(AGENT_BINARY_SOURCES_FLYOUT.NAME_INPUT).clear().type('New Default Host');\n    cy.getBySel(AGENT_BINARY_SOURCES_FLYOUT.HOST_INPUT).clear().type('https://new-default-host.co');\n    cy.getBySel(AGENT_BINARY_SOURCES_FLYOUT.IS_DEFAULT_SWITCH).click();\n    cy.getBySel(AGENT_BINARY_SOURCES_FLYOUT.SUBMIT_BUTTON).click();\n    cy.intercept('api/fleet/agent_download_sources', {\n      name: 'New Default Host',\n      is_default: true,\n      host: 'https://new-default-host.co'\n    });\n  });","file":"integration/agent_binary_download_source.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"the download source is displayed in agent policy settings","suites":["Agent binary download source section"],"updatePoint":{"line":54,"column":63,"index":2927},"line":54,"code":"  it('the download source is displayed in agent policy settings', () => {\n    cy.request({\n      method: 'POST',\n      url: `api/fleet/agent_download_sources`,\n      body: {\n        name: 'Custom Host',\n        id: 'fleet-local-registry',\n        host: 'https://new-custom-host.co'\n      },\n      headers: {\n        'kbn-xsrf': 'kibana'\n      }\n    });\n    cy.request({\n      method: 'POST',\n      url: '/api/fleet/agent_policies',\n      body: {\n        name: 'Test Agent policy',\n        namespace: 'default',\n        description: '',\n        monitoring_enabled: ['logs', 'metrics'],\n        id: 'new-agent-policy',\n        download_source_id: 'fleet-local-registry'\n      },\n      headers: {\n        'kbn-xsrf': 'kibana'\n      }\n    }).then(response => {\n      navigateTo('app/fleet/policies/new-agent-policy/settings');\n      cy.getBySel(AGENT_POLICY_FORM.DOWNLOAD_SOURCE_SELECT).contains('Custom Host');\n    });\n  });","file":"integration/agent_binary_download_source.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should edit agent policy","suites":["Edit agent policy"],"updatePoint":{"line":32,"column":30,"index":871},"line":32,"code":"  it('should edit agent policy', () => {\n    cy.visit('/app/fleet/policies/policy-1/settings');\n    cy.getBySel('toastCloseButton').click();\n    cy.get('[placeholder=\"Optional description\"').clear().type('desc');\n    cy.intercept('/api/fleet/agent_policies/policy-1', {\n      item: {\n        id: 'policy-1',\n        name: 'Agent policy 1',\n        description: 'desc',\n        namespace: 'default',\n        monitoring_enabled: ['logs', 'metrics'],\n        status: 'active'\n      }\n    });\n    cy.intercept('PUT', '/api/fleet/agent_policies/policy-1', {\n      name: 'Agent policy 1',\n      description: 'desc',\n      namespace: 'default',\n      monitoring_enabled: ['logs', 'metrics']\n    }).as('updateAgentPolicy');\n    cy.get('.euiButton').contains('Save changes').click();\n    cy.wait('@updateAgentPolicy').then(interception => {\n      expect(interception.request.body.description).to.equal('desc');\n    });\n  });","file":"integration/agent_policy.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should filter based on agent id","suites":["View agents","Agent filter suggestions"],"updatePoint":{"line":81,"column":39,"index":2444},"line":81,"code":"    it('should filter based on agent id', () => {\n      cy.visit('/app/fleet/agents');\n      cy.getBySel('agentList.queryInput').type('agent.id: \"agent-1\"{enter}');\n      cy.getBySel('fleetAgentListTable');\n      cy.getBySel('fleetAgentListTable').find('tr').should('have.length', 2);\n      cy.getBySel('fleetAgentListTable').contains('agent-1');\n    });","file":"integration/agent.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should only show agents with upgrade available after click","suites":["View agents","Upgrade available filter"],"updatePoint":{"line":90,"column":66,"index":2879},"line":90,"code":"    it('should only show agents with upgrade available after click', () => {\n      cy.visit('/app/fleet/agents');\n      cy.getBySel('agentList.showUpgradeable').click();\n      cy.getBySel('fleetAgentListTable').find('tr').should('have.length', 17);\n      cy.getBySel('fleetAgentListTable').contains('agent-1');\n    });","file":"integration/agent.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should clear filter on second click","suites":["View agents","Upgrade available filter"],"updatePoint":{"line":96,"column":43,"index":3175},"line":96,"code":"    it('should clear filter on second click', () => {\n      cy.visit('/app/fleet/agents');\n      cy.getBySel('agentList.showUpgradeable').click();\n      cy.getBySel('agentList.showUpgradeable').click();\n      cy.getBySel('fleetAgentListTable').find('tr').should('have.length', 18);\n      cy.getBySel('fleetAgentListTable').contains('agent-1');\n      cy.getBySel('fleetAgentListTable').contains('agent-2');\n    });","file":"integration/agent.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should should show all policies as options","suites":["View agents","Agent policy filter"],"updatePoint":{"line":106,"column":50,"index":3644},"line":106,"code":"    it('should should show all policies as options', () => {\n      cy.visit('/app/fleet/agents');\n      cy.getBySel('agentList.policyFilter').click();\n      cy.get('button').contains('Agent policy 1');\n      cy.get('button').contains('Agent policy 2');\n      cy.get('button').contains('Agent policy 3');\n    });","file":"integration/agent.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should filter on single policy (no results)","suites":["View agents","Agent policy filter"],"updatePoint":{"line":113,"column":51,"index":3957},"line":113,"code":"    it('should filter on single policy (no results)', () => {\n      cy.visit('/app/fleet/agents');\n      cy.getBySel('agentList.policyFilter').click();\n      cy.get('button').contains('Agent policy 4').click();\n      cy.getBySel('fleetAgentListTable').contains('No agents found');\n    });","file":"integration/agent.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should filter on single policy","suites":["View agents","Agent policy filter"],"updatePoint":{"line":119,"column":38,"index":4233},"line":119,"code":"    it('should filter on single policy', () => {\n      cy.visit('/app/fleet/agents');\n      cy.getBySel('agentList.policyFilter').click();\n      cy.get('button').contains('Agent policy 1').click();\n      cy.getBySel('fleetAgentListTable').find('tr').should('have.length', 2);\n      cy.getBySel('fleetAgentListTable').contains('agent-1');\n    });","file":"integration/agent.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should filter on multiple policies","suites":["View agents","Agent policy filter"],"updatePoint":{"line":126,"column":42,"index":4583},"line":126,"code":"    it('should filter on multiple policies', () => {\n      cy.visit('/app/fleet/agents');\n      cy.getBySel('agentList.policyFilter').click();\n      cy.get('button').contains('Agent policy 1').click();\n      cy.get('button').contains('Agent policy 2').click();\n      cy.getBySel('fleetAgentListTable').find('tr').should('have.length', 3);\n      cy.getBySel('fleetAgentListTable').contains('agent-1');\n      cy.getBySel('fleetAgentListTable').contains('agent-2');\n    });","file":"integration/agent.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should filter on healthy (16 result)","suites":["View agents","Agent status filter"],"updatePoint":{"line":137,"column":44,"index":5104},"line":137,"code":"    it('should filter on healthy (16 result)', () => {\n      cy.visit('/app/fleet/agents');\n      cy.getBySel('agentList.statusFilter').click();\n      cy.get('button').contains('Healthy').click();\n      cy.getBySel('fleetAgentListTable').find('tr').should('have.length', 17);\n      cy.getBySel('fleetAgentListTable').contains('agent-1');\n    });","file":"integration/agent.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should filter on unhealthy (1 result)","suites":["View agents","Agent status filter"],"updatePoint":{"line":144,"column":45,"index":5451},"line":144,"code":"    it('should filter on unhealthy (1 result)', () => {\n      cy.visit('/app/fleet/agents');\n      cy.getBySel('agentList.statusFilter').click();\n      cy.get('button').contains('Unhealthy').click();\n      cy.getBySel('fleetAgentListTable').find('tr').should('have.length', 2);\n      cy.getBySel('fleetAgentListTable').contains('agent-2');\n    });","file":"integration/agent.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should filter on inactive (0 result)","suites":["View agents","Agent status filter"],"updatePoint":{"line":151,"column":44,"index":5798},"line":151,"code":"    it('should filter on inactive (0 result)', () => {\n      cy.visit('/app/fleet/agents');\n      cy.getBySel('agentList.statusFilter').click();\n      cy.get('button').contains('Inactive').click();\n      cy.getBySel('fleetAgentListTable').contains('No agents found');\n    });","file":"integration/agent.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should filter on healthy and unhealthy","suites":["View agents","Agent status filter"],"updatePoint":{"line":157,"column":46,"index":6076},"line":157,"code":"    it('should filter on healthy and unhealthy', () => {\n      cy.visit('/app/fleet/agents');\n      cy.getBySel('agentList.statusFilter').click();\n      cy.get('button').contains('healthy').click();\n      cy.get('button').contains('Unhealthy').click();\n      cy.getBySel('fleetAgentListTable').find('tr').should('have.length', 18);\n      cy.getBySel('fleetAgentListTable').contains('agent-1');\n      cy.getBySel('fleetAgentListTable').contains('agent-2');\n    });","file":"integration/agent.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should allow to bulk upgrade agents","suites":["View agents","Bulk actions"],"updatePoint":{"line":168,"column":43,"index":6578},"line":168,"code":"    it('should allow to bulk upgrade agents', () => {\n      cy.visit('/app/fleet/agents');\n      cy.getBySel('agentList.policyFilter').click();\n      cy.get('button').contains('Agent policy 3').click();\n      cy.getBySel('fleetAgentListTable').find('tr').should('have.length', 16);\n      cy.getBySel('checkboxSelectAll').click(); // Trigger a bulk upgrade\n\n      cy.getBySel('agentBulkActionsButton').click();\n      cy.get('button').contains('Upgrade 15 agents').click();\n      cy.get('.euiModalFooter button').contains('Upgrade 15 agents').click(); // Cancel upgrade\n\n      cy.getBySel('abortUpgradeBtn').click();\n      cy.get('button').contains('Confirm').click();\n    });","file":"integration/agent.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should update Fleet server hosts","suites":["Edit settings"],"updatePoint":{"line":28,"column":38,"index":865},"line":28,"code":"  it('should update Fleet server hosts', () => {\n    cy.getBySel('editHostsBtn').click();\n    cy.get('[placeholder=\"Specify host URL\"').type('https://localhost:8220');\n    cy.intercept('/api/fleet/settings', {\n      item: {\n        id: 'fleet-default-settings',\n        fleet_server_hosts: ['https://localhost:8220']\n      }\n    });\n    cy.intercept('PUT', '/api/fleet/settings', {\n      fleet_server_hosts: ['https://localhost:8220']\n    }).as('updateSettings');\n    cy.getBySel('saveApplySettingsBtn').click();\n    cy.getBySel(CONFIRM_MODAL_BTN).click();\n    cy.wait('@updateSettings').then(interception => {\n      expect(interception.request.body.fleet_server_hosts[0]).to.equal('https://localhost:8220');\n    });\n  });","file":"integration/fleet_settings.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should update outputs","suites":["Edit settings"],"updatePoint":{"line":46,"column":27,"index":1577},"line":46,"code":"  it('should update outputs', () => {\n    cy.getBySel('editOutputBtn').click();\n    cy.get('[placeholder=\"Specify name\"').clear().type('output-1');\n    cy.get('[placeholder=\"Specify host URL\"').clear().type('http://elasticsearch:9200');\n    cy.intercept('/api/fleet/outputs', {\n      items: [{\n        id: 'fleet-default-output',\n        name: 'output-1',\n        type: 'elasticsearch',\n        is_default: true,\n        is_default_monitoring: true\n      }]\n    });\n    cy.intercept('PUT', '/api/fleet/outputs/fleet-default-output', {\n      name: 'output-1',\n      type: 'elasticsearch',\n      hosts: ['http://elasticsearch:9200'],\n      is_default: true,\n      is_default_monitoring: true\n    }).as('updateOutputs');\n    cy.getBySel('saveApplySettingsBtn').click();\n    cy.getBySel(CONFIRM_MODAL_BTN).click();\n    cy.wait('@updateOutputs').then(interception => {\n      expect(interception.request.body.name).to.equal('output-1');\n    });\n  });","file":"integration/fleet_settings.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should allow to create a logstash output","suites":["Edit settings"],"updatePoint":{"line":72,"column":46,"index":2541},"line":72,"code":"  it('should allow to create a logstash output', () => {\n    cy.getBySel('addOutputBtn').click();\n    cy.get('[placeholder=\"Specify name\"]').clear().type('output-logstash-1');\n    cy.get('[placeholder=\"Specify type\"]').select('logstash');\n    cy.get('[placeholder=\"Specify host\"').clear().type('logstash:5044');\n    cy.get('[placeholder=\"Specify ssl certificate\"]').clear().type('SSL CERTIFICATE');\n    cy.get('[placeholder=\"Specify certificate key\"]').clear().type('SSL KEY');\n    cy.intercept('/api/fleet/outputs', {\n      items: [{\n        id: 'fleet-default-output',\n        name: 'output-1',\n        type: 'elasticsearch',\n        is_default: true,\n        is_default_monitoring: true\n      }]\n    });\n    cy.intercept('POST', '/api/fleet/outputs', {\n      name: 'output-logstash-1',\n      type: 'logstash',\n      hosts: ['logstash:5044'],\n      is_default: false,\n      is_default_monitoring: false,\n      ssl: {\n        certificate: \"SSL CERTIFICATE');\",\n        key: 'SSL KEY'\n      }\n    }).as('postLogstashOutput');\n    cy.getBySel('saveApplySettingsBtn').click();\n    cy.wait('@postLogstashOutput').then(interception => {\n      expect(interception.request.body.name).to.equal('output-logstash-1');\n    });\n  });","file":"integration/fleet_settings.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should display Add agent button and Healthy agent once Fleet Agent page loaded","suites":["Fleet startup","Fleet Server"],"updatePoint":{"line":14,"column":86,"index":838},"line":14,"code":"    it('should display Add agent button and Healthy agent once Fleet Agent page loaded', () => {\n      navigateTo(FLEET);\n      cy.get('.euiBadge').contains('Healthy');\n      verifyPolicy('Fleet Server policy', ['Fleet Server']);\n    });","file":"integration/fleet_startup.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should have no agent policy by default","suites":["Fleet startup","Create policies"],"updatePoint":{"line":31,"column":46,"index":1271},"line":31,"code":"    it('should have no agent policy by default', () => {\n      cy.request('/api/fleet/agent_policies?full=true').then(response => {\n        expect(response.body.items.length).to.equal(0);\n      });\n    });","file":"integration/fleet_startup.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should create agent policy","suites":["Fleet startup","Create policies"],"updatePoint":{"line":36,"column":34,"index":1465},"line":36,"code":"    it('should create agent policy', () => {\n      cy.getBySel(ADD_AGENT_BUTTON_TOP).click();\n      cy.getBySel(STANDALONE_TAB).click();\n      cy.intercept('POST', '/api/fleet/agent_policies?sys_monitoring=true').as('createAgentPolicy');\n      cy.getBySel('createPolicyBtn').click();\n      let agentPolicyId;\n      const startTime = Date.now();\n      cy.wait('@createAgentPolicy', {\n        timeout: 180000\n      }).then(xhr => {\n        cy.log('Create agent policy took: ' + (Date.now() - startTime) / 1000 + ' s');\n        agentPolicyId = xhr.response.body.item.id; // verify create button changed to dropdown\n\n        cy.getBySel('agentPolicyDropdown'); // verify agent.yml code block has new policy id\n\n        cy.getBySel(AGENT_POLICY_CODE_BLOCK).contains(`id: ${agentPolicyId}`);\n        cy.getBySel(AGENT_FLYOUT_CLOSE_BUTTON).click(); // verify policy is created and has system package\n\n        verifyPolicy('Agent policy 1', ['System']);\n        verifyAgentPackage();\n      });\n    });","file":"integration/fleet_startup.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should create Fleet Server policy","suites":["Fleet startup","Create policies"],"updatePoint":{"line":58,"column":41,"index":2466},"line":58,"code":"    it('should create Fleet Server policy', () => {\n      cy.getBySel('fleetServerFlyoutTab-advanced').click();\n      cy.getBySel('createFleetServerPolicyBtn').click(); // Wait until the success callout is shown before navigating away\n\n      cy.getBySel('agentPolicyCreateStatusCallOut').should('exist').and('have.class', 'euiCallOut--success'); // verify policy is created and has fleet server and system package\n\n      verifyPolicy('Fleet Server policy 1', ['Fleet Server', 'System']);\n      navigateToTab(AGENTS_TAB);\n      cy.getBySel('fleetServerFlyoutTab-advanced').click(); // verify create button changed to dropdown\n\n      cy.getBySel('agentPolicyDropdown'); // verify fleet server enroll command contains created policy id\n\n      cy.getBySel('fleetServerHostInput').getBySel('comboBoxSearchInput').type('https://localhost:8220');\n      cy.getBySel('fleetServerAddHostBtn').click();\n      cy.getBySel('fleetServerGenerateServiceTokenBtn').click();\n      cy.get('.euiCodeBlock__code').contains('--fleet-server-policy=fleet-server-policy');\n    });","file":"integration/fleet_startup.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should upgrade policies without integration update","suites":["Add Integration - Mock API","upgrade package and upgrade package policy"],"updatePoint":{"line":108,"column":58,"index":3168},"line":108,"code":"    it('should upgrade policies without integration update', () => {\n      navigateTo(`app/integrations/detail/apache-${oldVersion}/settings`);\n      cy.get('.euiLoadingSpinner').should('not.exist');\n      cy.getBySel('installedVersion').contains(oldVersion);\n      cy.get('#upgradePoliciesCheckbox').uncheck({\n        force: true\n      });\n      cy.intercept(`/api/fleet/epm/packages/apache/${newVersion}`, {\n        item: {\n          name: 'apache',\n          version: newVersion,\n          latestVersion: newVersion,\n          status: 'installed',\n          assets: [],\n          savedObject: {\n            attributes: {\n              version: newVersion\n            }\n          }\n        }\n      }).as('updatePackage');\n      cy.getBySel(UPDATE_PACKAGE_BTN).click();\n      cy.wait('@updatePackage');\n      cy.get('#upgradePoliciesCheckbox').should('not.exist');\n      cy.getBySel('installedVersion').contains(newVersion);\n    });","file":"integration/integrations_mock.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should upgrade integration policy","suites":["Add Integration - Mock API","upgrade package and upgrade package policy"],"updatePoint":{"line":134,"column":41,"index":4085},"line":134,"code":"    it('should upgrade integration policy', () => {\n      cy.intercept('/api/fleet/epm/packages/apache/*', {\n        item: {\n          name: 'apache',\n          version: newVersion,\n          latestVersion: newVersion,\n          status: 'installed',\n          assets: [],\n          savedObject: {\n            attributes: {\n              version: newVersion\n            }\n          }\n        }\n      });\n      cy.intercept('/api/fleet/epm/packages/apache/stats', {\n        response: {\n          agent_policy_count: 1\n        }\n      });\n      cy.intercept('PUT', '/api/fleet/package_policies/apache-2', {\n        item: {\n          id: 'apache-2',\n          name: 'apache-2',\n          namespace: 'default',\n          package: {\n            name: 'apache',\n            version: newVersion\n          },\n          enabled: true,\n          policy_id: 'policy-1',\n          inputs: []\n        }\n      }).as('updateApachePolicy');\n      navigateTo('/app/fleet/policies/package-1/upgrade-package-policy/apache-2?from=integrations-policy-list');\n      cy.getBySel('toastCloseButton').click();\n      cy.getBySel(AGENT_POLICY_SAVE_INTEGRATION).click();\n      cy.wait('@updateApachePolicy').then(interception => {\n        expect(interception.request.body.package.version).to.equal(newVersion);\n      });\n    });","file":"integration/integrations_mock.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should install integration without policy","suites":["Add Integration - Real API"],"updatePoint":{"line":17,"column":47,"index":964},"line":17,"code":"  it('should install integration without policy', () => {\n    cy.visit('/app/integrations/detail/tomcat/settings');\n    cy.get('.euiButton').contains('Install Apache Tomcat assets').click();\n    cy.get('.euiCallOut').contains('This action will install 1 assets');\n    cy.getBySel(CONFIRM_MODAL_BTN).click();\n    cy.get('.euiLoadingSpinner').should('not.exist');\n    cy.get('.euiButton').contains('Uninstall Apache Tomcat').click();\n    cy.getBySel(CONFIRM_MODAL_BTN).click();\n    cy.get('.euiLoadingSpinner').should('not.exist');\n    cy.get('.euiButton').contains('Install Apache Tomcat assets');\n  });","file":"integration/integrations_real.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should display Apache integration in the Policies list once installed ","suites":["Add Integration - Real API"],"updatePoint":{"line":50,"column":76,"index":2297},"line":50,"code":"  it('should display Apache integration in the Policies list once installed ', () => {\n    addAndVerifyIntegration();\n    cy.getBySel(AGENT_POLICY_NAME_LINK).contains('Agent policy 1');\n  });","file":"integration/integrations_real.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should add integration to policy","suites":["Add Integration - Real API"],"updatePoint":{"line":54,"column":38,"index":2451},"line":54,"code":"  it('should add integration to policy', () => {\n    cy.request('/api/fleet/agent_policies').then(response => {\n      const agentPolicyId = response.body.items.filter(policy => policy.name === 'Agent policy 1').map(policy => policy.id);\n      cy.visit(`/app/fleet/policies/${agentPolicyId}`);\n      cy.intercept('/api/fleet/epm/packages?*', {\n        middleware: true\n      }, req => {\n        req.on('before:response', res => {\n          // force all API responses to not be cached\n          res.headers['cache-control'] = 'no-store';\n        });\n      }).as('packages');\n      cy.getBySel(ADD_PACKAGE_POLICY_BTN).click();\n      cy.wait('@packages');\n      cy.get('.euiLoadingSpinner').should('not.exist');\n      cy.get('input[placeholder=\"Search for integrations\"]').type('Apache');\n      cy.get(INTEGRATIONS_CARD).contains(integration).click();\n      addIntegration({\n        useExistingPolicy: true\n      });\n      cy.get('.euiBasicTable-loading').should('not.exist');\n      cy.get('.euiTitle').contains('Agent policy 1');\n      clickIfVisible(FLYOUT_CLOSE_BTN_SEL);\n      cy.get('.euiLink').contains('apache-1');\n    });\n  });","file":"integration/integrations_real.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should upgrade policies with integration update","suites":["Add Integration - Real API"],"updatePoint":{"line":80,"column":53,"index":3598},"line":80,"code":"  it('should upgrade policies with integration update', () => {\n    const oldVersion = '0.3.3';\n    installPackageWithVersion('apache', oldVersion);\n    navigateTo(`app/integrations/detail/apache-${oldVersion}/policies`);\n    addIntegration({\n      useExistingPolicy: true\n    });\n    cy.getBySel(INTEGRATION_NAME_LINK).contains('apache-');\n    cy.getBySel(PACKAGE_VERSION).contains(oldVersion);\n    clickIfVisible(FLYOUT_CLOSE_BTN_SEL);\n    cy.getBySel(SETTINGS_TAB).click();\n    cy.getBySel(UPDATE_PACKAGE_BTN).click();\n    cy.getBySel(CONFIRM_MODAL_BTN).click();\n    cy.getBySel(LATEST_VERSION).then($title => {\n      const newVersion = $title.text();\n      cy.get('#upgradePoliciesCheckbox').should('not.exist');\n      cy.getBySel(POLICIES_TAB).click();\n      cy.getBySel(PACKAGE_VERSION).contains(oldVersion).should('not.exist');\n      cy.getBySel(PACKAGE_VERSION).contains(newVersion);\n    });\n  });","file":"integration/integrations_real.spec.ts","skipped":true,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should edit package policy","suites":["Edit package policy"],"updatePoint":{"line":129,"column":32,"index":3472},"line":129,"code":"  it('should edit package policy', () => {\n    cy.visit('/app/fleet/policies/fleet-server-policy/edit-integration/policy-1');\n    cy.getBySel('toastCloseButton').click();\n    cy.getBySel('packagePolicyDescriptionInput').clear().type('desc');\n    cy.intercept('PUT', '/api/fleet/package_policies/policy-1', {\n      name: 'fleet_server-1',\n      description: 'desc',\n      namespace: 'default'\n    }).as('updatePackagePolicy');\n    cy.get('.euiButton').contains('Save integration').click();\n    cy.wait('@updatePackagePolicy').then(interception => {\n      expect(interception.request.body.description).to.equal('desc');\n    });\n  });","file":"integration/package_policy.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Fleet access is blocked with a callout","suites":["When the user has All privilege for Fleet but None for integrations"],"updatePoint":{"line":23,"column":44,"index":1009},"line":23,"code":"  it('Fleet access is blocked with a callout', () => {\n    loginWithUserAndWaitForPage(FLEET, FleetAllIntegrNoneUser);\n    cy.getBySel(MISSING_PRIVILEGES_TITLE).should('have.text', 'Permission denied');\n    cy.getBySel(MISSING_PRIVILEGES_MESSAGE).should('contain', 'You are not authorized to access Fleet.');\n  });","file":"integration/privileges_fleet_all_integrations_none.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Some elements in the UI are not enabled","suites":["When the user has All privilege for Fleet but Read for integrations","When there are agent policies"],"updatePoint":{"line":31,"column":47,"index":1513},"line":31,"code":"    it('Some elements in the UI are not enabled', () => {\n      logout();\n      loginWithUserAndWaitForPage(FLEET, FleetAllIntegrReadUser);\n      navigateToTab(AGENT_POLICIES_TAB);\n      cy.getBySel(AGENT_POLICY_NAME_LINK).click();\n      cy.getBySel(ADD_PACKAGE_POLICY_BTN).should('be.disabled');\n      cy.get('a[title=\"system-1\"]').click();\n      cy.getBySel(AGENT_POLICY_SAVE_INTEGRATION).should('be.disabled');\n    });","file":"integration/privileges_fleet_all_integrations_read.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"If fleet server is not set up, Fleet shows a callout","suites":["When the user has All privilege for Fleet but Read for integrations","When there are no agent policies"],"updatePoint":{"line":46,"column":60,"index":2088},"line":46,"code":"    it('If fleet server is not set up, Fleet shows a callout', () => {\n      loginWithUserAndWaitForPage(FLEET, FleetAllIntegrReadUser);\n      cy.getBySel(FLEET_SERVER_MISSING_PRIVILEGES_TITLE).should('have.text', 'Permission denied');\n      cy.getBySel(FLEET_SERVER_MISSING_PRIVILEGES_MESSAGE).should('contain', 'Fleet Server needs to be set up.');\n      cy.getBySel(ADD_AGENT_BUTTON_TOP).should('not.be.disabled');\n    });","file":"integration/privileges_fleet_all_integrations_read.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"are visible but cannot be added","suites":["When the user has All privilege for Fleet but Read for integrations","Integrations"],"updatePoint":{"line":54,"column":39,"index":2533},"line":54,"code":"    it('are visible but cannot be added', () => {\n      loginWithUserAndWaitForPage(INTEGRATIONS, FleetAllIntegrReadUser);\n      cy.getBySel('integration-card:epr:apache').click();\n      cy.getBySel(ADD_POLICY_BTN).should('be.disabled');\n    });","file":"integration/privileges_fleet_all_integrations_read.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"Integrations are visible but cannot be added","suites":["When the user has All privileges for Integrations but None for for Fleet"],"updatePoint":{"line":23,"column":50,"index":996},"line":23,"code":"  it('Integrations are visible but cannot be added', () => {\n    loginWithUserAndWaitForPage(INTEGRATIONS, FleetNoneIntegrAllUser);\n    cy.getBySel('integration-card:epr:apache').click();\n    cy.getBySel(ADD_POLICY_BTN).should('be.disabled');\n  });","file":"integration/privileges_fleet_none_integrations_all.spec.ts","skipped":false,"dir":"x-pack/plugins/fleet/cypress"},{"name":"should add the old integration and be able to upgrade it","suites":["ALL - Add Integration"],"updatePoint":{"line":24,"column":62,"index":1054},"line":24,"code":"  it('should add the old integration and be able to upgrade it', () => {\n    const oldVersion = '0.7.4';\n    cy.visit(OLD_OSQUERY_MANAGER);\n    cy.contains(integration).click();\n    addIntegration();\n    cy.contains('osquery_manager-1');\n    cy.visit('app/fleet/policies');\n    cy.contains(/^Default Fleet Server policy$/).click();\n    cy.contains('Actions').click();\n    cy.contains('View policy').click();\n    cy.contains('name: osquery_manager-1');\n    cy.contains(`version: ${oldVersion}`);\n    cy.contains('Close').click();\n    cy.contains(/^Osquery Manager$/).click();\n    cy.contains(/^Settings$/).click();\n    cy.contains(/^Upgrade to latest version$/).click();\n    closeModalIfVisible();\n    cy.contains('Updated Osquery Manager and upgraded policies', {\n      timeout: 60000\n    });\n    cy.visit('app/fleet/policies');\n    cy.contains(/^Default Fleet Server policy$/).click();\n    cy.contains('Actions').click();\n    cy.contains('View policy').click();\n    cy.contains('name: osquery_manager-1');\n    cy.contains(`version: ${oldVersion}`).should('not.exist');\n    cy.visit('app/integrations/detail/osquery_manager/policies');\n    cy.contains('Loading integration policies').should('exist');\n    cy.contains('Loading integration policies').should('not.exist');\n    cy.getBySel('integrationPolicyTable').get('.euiTableRow', {\n      timeout: 60000\n    }).should('have.lengthOf.above', 0);\n    cy.get('.euiTableCellContent').get('.euiPopover__anchor').get(`[aria-label=\"Open\"]`).click();\n    cy.contains(/^Delete integration$/).click();\n    closeModalIfVisible();\n    cy.contains(/^Deleted integration 'osquery_manager-1'$/);\n    cy.contains(/^Settings$/).click();\n    cy.contains(/^Uninstall Osquery Manager$/).click();\n    closeModalIfVisible();\n    cy.contains(/^Successfully uninstalled Osquery Manager$/);\n  });","file":"integration/all/add_integration.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"add integration","suites":["ALL - Add Integration"],"updatePoint":{"line":65,"column":21,"index":2836},"line":65,"code":"  it('add integration', () => {\n    cy.visit(FLEET_AGENT_POLICIES);\n    cy.contains(DEFAULT_POLICY).click();\n    cy.contains('Add integration').click();\n    cy.contains(integration).click();\n    addIntegration();\n    cy.contains('osquery_manager-');\n  });","file":"integration/all/add_integration.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should have integration and packs copied when upgrading integration","suites":["ALL - Add Integration"],"updatePoint":{"line":73,"column":73,"index":3144},"line":73,"code":"  it('should have integration and packs copied when upgrading integration', () => {\n    const packageName = 'osquery_manager';\n    const oldVersion = '1.2.0';\n    cy.visit(`app/integrations/detail/${packageName}-${oldVersion}/overview`);\n    cy.contains('Add Osquery Manager').click();\n    cy.contains('Save and continue').click();\n    cy.contains('Add Elastic Agent later').click();\n    cy.contains('Upgrade');\n    cy.contains('Agent policy 1').click();\n    cy.get('tr').should('contain', 'osquery_manager-2').and('contain', 'Osquery Manager').and('contain', `v${oldVersion}`);\n    cy.contains('Actions').click();\n    cy.contains('View policy').click();\n    cy.contains('name: osquery_manager-2');\n    cy.contains(`version: ${oldVersion}`);\n    cy.contains('Close').click();\n    navigateTo('app/osquery/packs');\n    findAndClickButton('Add pack');\n    findFormFieldByRowsLabelAndType('Name', 'Integration');\n    findFormFieldByRowsLabelAndType('Scheduled agent policies (optional)', 'Agent policy 1 {downArrow} {enter}');\n    findAndClickButton('Add query');\n    cy.react('EuiComboBox', {\n      props: {\n        placeholder: 'Search for a query to run, or write a new query below'\n      }\n    }).click().type('{downArrow} {enter}');\n    cy.contains(/^Save$/).click();\n    cy.contains(/^Save pack$/).click();\n    cy.contains(/^Successfully created \"Integration\" pack$/).click();\n    cy.visit('app/fleet/policies');\n    cy.contains('Agent policy 1').click();\n    cy.contains('Upgrade').click();\n    cy.contains(/^Advanced$/).click();\n    cy.contains('\"Integration\":');\n    cy.contains(/^Upgrade integration$/).click();\n    cy.contains(/^osquery_manager-2$/).click();\n    cy.contains(/^Advanced$/).click();\n    cy.contains('\"Integration\":');\n    cy.contains('Cancel').click();\n    closeModalIfVisible();\n    cy.get('tr').should('contain', 'osquery_manager-2').and('contain', 'Osquery Manager').and('contain', 'v').and('not.contain', `v${oldVersion}`);\n    cy.contains('Actions').click();\n    cy.contains('View policy').click();\n    cy.contains('name: osquery_manager-2'); // test list of prebuilt queries\n\n    navigateTo('/app/osquery/saved_queries');\n    cy.waitForReact();\n    cy.react('EuiTableRow').should('have.length.above', 5);\n  });","file":"integration/all/add_integration.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should prepare packs and alert rules","suites":["Alert Event Details"],"updatePoint":{"line":27,"column":42,"index":1183},"line":27,"code":"  it('should prepare packs and alert rules', () => {\n    const PACK_NAME = 'testpack';\n    const RULE_NAME = 'Test-rule';\n    navigateTo('/app/osquery/packs');\n    preparePack(PACK_NAME);\n    findAndClickButton('Edit');\n    cy.contains(`Edit ${PACK_NAME}`);\n    findFormFieldByRowsLabelAndType('Scheduled agent policies (optional)', 'fleet server {downArrow}{enter}');\n    findAndClickButton('Update pack');\n    closeModalIfVisible();\n    cy.contains(PACK_NAME);\n    cy.visit('/app/security/rules');\n    cy.contains(RULE_NAME);\n    cy.wait(2000);\n    cy.getBySel('ruleSwitch').should('have.attr', 'aria-checked', 'true');\n    cy.getBySel('ruleSwitch').click();\n    cy.getBySel('ruleSwitch').should('have.attr', 'aria-checked', 'false');\n    cy.getBySel('ruleSwitch').click();\n    cy.getBySel('ruleSwitch').should('have.attr', 'aria-checked', 'true');\n  });","file":"integration/all/alerts.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should be able to run live query and add to timeline (-depending on the previous test)","suites":["Alert Event Details"],"updatePoint":{"line":47,"column":92,"index":2090},"line":47,"code":"  it('should be able to run live query and add to timeline (-depending on the previous test)', () => {\n    const TIMELINE_NAME = 'Untitled timeline';\n    cy.visit('/app/security/alerts');\n    cy.getBySel('header-page-title').contains('Alerts').should('exist');\n    cy.getBySel('expand-event').first().within(() => {\n      cy.get(`[data-is-loading=\"true\"]`).should('exist');\n    });\n    cy.getBySel('expand-event').first().within(() => {\n      cy.get(`[data-is-loading=\"true\"]`).should('not.exist');\n    });\n    cy.getBySel('timeline-context-menu-button').first().click({\n      force: true\n    });\n    cy.contains('Run Osquery');\n    cy.getBySel('expand-event').first().click({\n      force: true\n    });\n    cy.getBySel('take-action-dropdown-btn').click();\n    cy.getBySel('osquery-action-item').click();\n    cy.contains('1 agent selected.');\n    inputQuery('select * from uptime;');\n    submitQuery();\n    cy.contains('Results');\n    cy.contains('Add to timeline investigation');\n    cy.contains('Save for later').click();\n    cy.contains('Save query');\n    cy.get('.euiButtonEmpty--flushLeft').contains('Cancel').click();\n    cy.getBySel('add-to-timeline').first().click();\n    cy.getBySel('globalToastList').contains('Added');\n    cy.getBySel(RESULTS_TABLE).within(() => {\n      cy.getBySel(RESULTS_TABLE_BUTTON).should('not.exist');\n    });\n    cy.contains('Cancel').click();\n    cy.contains(TIMELINE_NAME).click();\n    cy.getBySel('draggableWrapperKeyboardHandler').contains('action_id: \"');\n  });","file":"integration/all/alerts.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should be opened in new tab in results table","suites":["ALL - Discover"],"updatePoint":{"line":17,"column":50,"index":762},"line":17,"code":"  it('should be opened in new tab in results table', () => {\n    cy.contains('New live query').click();\n    selectAllAgents();\n    inputQuery('select * from uptime; ');\n    submitQuery();\n    checkResults();\n    cy.contains('View in Lens').should('exist');\n    cy.contains('View in Discover').should('exist').should('have.attr', 'href').then($href => {\n      // @ts-expect-error-next-line href string - check types\n      cy.visit($href);\n      cy.getBySel('breadcrumbs').contains('Discover').should('exist');\n      cy.getBySel('discoverDocTable', {\n        timeout: 60000\n      }).contains('action_data.queryselect * from uptime');\n    });\n  });","file":"integration/all/discover.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"by changing ecs mappings and platforms","suites":["ALL - Edit saved query"],"updatePoint":{"line":23,"column":44,"index":867},"line":23,"code":"  it('by changing ecs mappings and platforms', () => {\n    cy.getBySel('pagination-button-next').click();\n    cy.react('CustomItemAction', {\n      props: {\n        index: 1,\n        item: {\n          attributes: {\n            id: SAVED_QUERY_ID\n          }\n        }\n      }\n    }).click();\n    cy.contains('Custom key/value pairs.').should('exist');\n    cy.contains('Hours of uptime').should('exist');\n    cy.react('ECSMappingEditorForm').within(() => {\n      cy.react('EuiButtonIcon', {\n        props: {\n          iconType: 'trash'\n        }\n      }).click();\n    });\n    cy.react('PlatformCheckBoxGroupField').within(() => {\n      cy.react('EuiCheckbox', {\n        props: {\n          id: 'linux',\n          checked: true\n        }\n      }).should('exist');\n      cy.react('EuiCheckbox', {\n        props: {\n          id: 'darwin',\n          checked: true\n        }\n      }).should('exist');\n      cy.react('EuiCheckbox', {\n        props: {\n          id: 'windows',\n          checked: false\n        }\n      }).should('exist');\n    });\n    cy.get('#windows').check({\n      force: true\n    });\n    cy.react('EuiButton').contains('Update query').click();\n    cy.wait(5000);\n    cy.react('CustomItemAction', {\n      props: {\n        index: 1,\n        item: {\n          attributes: {\n            id: SAVED_QUERY_ID\n          }\n        }\n      }\n    }).click();\n    cy.contains('Custom key/value pairs').should('not.exist');\n    cy.contains('Hours of uptime').should('not.exist');\n    cy.react('PlatformCheckBoxGroupField').within(() => {\n      cy.react('EuiCheckbox', {\n        props: {\n          id: 'linux',\n          checked: true\n        }\n      }).should('exist');\n      cy.react('EuiCheckbox', {\n        props: {\n          id: 'darwin',\n          checked: true\n        }\n      }).should('exist');\n      cy.react('EuiCheckbox', {\n        props: {\n          id: 'windows',\n          checked: true\n        }\n      }).should('exist');\n    });\n  });","file":"integration/all/edit_saved_queries.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should validate the form","suites":["ALL - Live Query"],"updatePoint":{"line":27,"column":30,"index":1256},"line":27,"code":"  it('should validate the form', () => {\n    cy.contains('New live query').click();\n    submitQuery();\n    cy.contains('Agents is a required field');\n    cy.contains('Query is a required field');\n    selectAllAgents();\n    inputQuery('select * from uptime; ');\n    submitQuery();\n    cy.contains('Agents is a required field').should('not.exist');\n    cy.contains('Query is a required field').should('not.exist');\n    checkResults();\n    getAdvancedButton().click();\n    typeInOsqueryFieldInput('days{downArrow}{enter}');\n    submitQuery();\n    cy.contains('ECS field is required.');\n    typeInECSFieldInput('message{downArrow}{enter}');\n    submitQuery();\n    cy.contains('ECS field is required.').should('not.exist');\n    checkResults();\n  });","file":"integration/all/live_query.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should run query and enable ecs mapping","suites":["ALL - Live Query"],"updatePoint":{"line":47,"column":45,"index":2016},"line":47,"code":"  it('should run query and enable ecs mapping', () => {\n    const cmd = Cypress.platform === 'darwin' ? '{meta}{enter}' : '{ctrl}{enter}';\n    cy.contains('New live query').click();\n    selectAllAgents();\n    inputQuery('select * from uptime; ');\n    cy.wait(500); // checking submit by clicking cmd+enter\n\n    inputQuery(cmd);\n    checkResults();\n    cy.contains('View in Discover').should('exist');\n    cy.contains('View in Lens').should('exist');\n    cy.react(RESULTS_TABLE_CELL_WRRAPER, {\n      props: {\n        id: 'osquery.days.number',\n        index: 1\n      }\n    }).should('exist');\n    cy.react(RESULTS_TABLE_CELL_WRRAPER, {\n      props: {\n        id: 'osquery.hours.number',\n        index: 2\n      }\n    }).should('exist');\n    getAdvancedButton().click();\n    typeInECSFieldInput('message{downArrow}{enter}');\n    typeInOsqueryFieldInput('days{downArrow}{enter}');\n    submitQuery();\n    checkResults();\n    cy.getBySel(RESULTS_TABLE).within(() => {\n      cy.getBySel(RESULTS_TABLE_BUTTON).should('exist');\n    });\n    cy.react(RESULTS_TABLE_CELL_WRRAPER, {\n      props: {\n        id: 'message',\n        index: 1\n      }\n    }).should('exist');\n    cy.react(RESULTS_TABLE_CELL_WRRAPER, {\n      props: {\n        id: 'osquery.days.number',\n        index: 2\n      }\n    }).react('EuiIconTip', {\n      props: {\n        type: 'indexMapping'\n      }\n    }).should('exist');\n  });","file":"integration/all/live_query.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should run customized saved query","suites":["ALL - Live Query"],"updatePoint":{"line":95,"column":39,"index":3396},"line":95,"code":"  it('should run customized saved query', () => {\n    cy.contains('New live query').click();\n    selectAllAgents();\n    cy.react('SavedQueriesDropdown').type('NOMAPPING{downArrow}{enter}'); // cy.getReact('SavedQueriesDropdown').getCurrentState().should('have.length', 1); // TODO do we need it?\n\n    inputQuery('{selectall}{backspace}{selectall}{backspace}select * from users');\n    cy.wait(1000);\n    submitQuery();\n    checkResults();\n    navigateTo('/app/osquery');\n    cy.react('EuiButtonIcon', {\n      props: {\n        iconType: 'play'\n      }\n    }).eq(0).should('be.visible').click();\n    cy.react('ReactAce', {\n      props: {\n        value: 'select * from users'\n      }\n    }).should('exist');\n  });","file":"integration/all/live_query.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should run live pack","suites":["ALL - Live Query"],"updatePoint":{"line":116,"column":26,"index":4093},"line":116,"code":"  it('should run live pack', () => {\n    cy.contains('New live query').click();\n    cy.contains('Run a set of queries in a pack.').click();\n    cy.get(LIVE_QUERY_EDITOR).should('not.exist');\n    cy.getBySel('select-live-pack').click();\n    cy.contains('Example').click();\n    cy.contains('This table contains 3 rows.');\n    cy.contains('system_memory_linux_elastic');\n    cy.contains('system_info_elastic');\n    cy.contains('failingQuery');\n    selectAllAgents();\n    submitQuery();\n    cy.getBySel('live-query-loading').should('exist');\n    cy.getBySel('live-query-loading', {\n      timeout: 10000\n    }).should('not.exist');\n    cy.getBySel('toggleIcon-system_memory_linux_elastic').click();\n    checkResults();\n    cy.getBySel('toggleIcon-system_memory_linux_elastic').click();\n    cy.getBySel('toggleIcon-failingQuery').click();\n    cy.contains('Status').click();\n    cy.contains('query failed, code: 1, message: no such table: opera_extensions');\n    navigateTo('/app/osquery');\n    cy.contains('Example');\n  });","file":"integration/all/live_query.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should be able to run the query","suites":["ALL - Inventory"],"updatePoint":{"line":23,"column":37,"index":876},"line":23,"code":"  it('should be able to run the query', () => {\n    cy.getBySel('toggleNavButton').click();\n    cy.contains('Infrastructure').click();\n    cy.wait(1000);\n    cy.getBySel('nodeContainer').click();\n    cy.contains('Osquery').click();\n    inputQuery('select * from uptime;');\n    submitQuery();\n    checkResults();\n  });","file":"integration/all/metrics.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should be able to run the previously saved query","suites":["ALL - Inventory"],"updatePoint":{"line":33,"column":54,"index":1211},"line":33,"code":"  it('should be able to run the previously saved query', () => {\n    cy.getBySel('toggleNavButton').click();\n    cy.getBySel('collapsibleNavAppLink').contains('Infrastructure').click();\n    cy.wait(500);\n    cy.getBySel('nodeContainer').click();\n    cy.contains('Osquery').click();\n    cy.getBySel('comboBoxInput').first().click();\n    cy.wait(500);\n    cy.getBySel('comboBoxInput').first().type('saved{downArrow}{enter}');\n    submitQuery();\n    checkResults();\n  });","file":"integration/all/metrics.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should add a pack from a saved query","suites":["ALL - Packs","Create and edit a pack"],"updatePoint":{"line":38,"column":44,"index":1823},"line":38,"code":"    it('should add a pack from a saved query', () => {\n      cy.contains('Packs').click();\n      findAndClickButton('Add pack');\n      findFormFieldByRowsLabelAndType('Name', PACK_NAME);\n      findFormFieldByRowsLabelAndType('Description (optional)', 'Pack description');\n      findFormFieldByRowsLabelAndType('Scheduled agent policies (optional)', DEFAULT_POLICY);\n      cy.react('List').first().click();\n      findAndClickButton('Add query');\n      cy.contains('Attach next query');\n      getSavedQueriesDropdown().type(`${SAVED_QUERY_ID}{downArrow}{enter}`);\n      cy.react('EuiFormRow', {\n        props: {\n          label: 'Interval (s)'\n        }\n      }).click().clear().type('5');\n      cy.react('EuiFlyoutFooter').react('EuiButton').contains('Save').click();\n      cy.react('EuiTableRow').contains(SAVED_QUERY_ID);\n      findAndClickButton('Save pack');\n      cy.contains('Save and deploy changes');\n      findAndClickButton('Save and deploy changes');\n      cy.contains(PACK_NAME);\n      cy.contains(`Successfully created \"${PACK_NAME}\" pack`);\n    });","file":"integration/all/packs.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"to click the edit button and edit pack","suites":["ALL - Packs","Create and edit a pack"],"updatePoint":{"line":61,"column":46,"index":2887},"line":61,"code":"    it('to click the edit button and edit pack', () => {\n      preparePack(PACK_NAME);\n      findAndClickButton('Edit');\n      cy.contains(`Edit ${PACK_NAME}`);\n      findAndClickButton('Add query');\n      cy.contains('Attach next query');\n      inputQuery('select * from uptime');\n      findFormFieldByRowsLabelAndType('ID', SAVED_QUERY_ID);\n      cy.react('EuiFlyoutFooter').react('EuiButton').contains('Save').click();\n      cy.contains('ID must be unique').should('exist');\n      findFormFieldByRowsLabelAndType('ID', NEW_QUERY_NAME);\n      cy.contains('ID must be unique').should('not.exist');\n      cy.react('EuiFlyoutFooter').react('EuiButton').contains('Save').click();\n      cy.react('EuiTableRow').contains(NEW_QUERY_NAME);\n      findAndClickButton('Update pack');\n      cy.contains('Save and deploy changes');\n      findAndClickButton('Save and deploy changes');\n      cy.contains(`Successfully updated \"${PACK_NAME}\" pack`);\n    });","file":"integration/all/packs.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should trigger validation when saved query is being chosen","suites":["ALL - Packs","Create and edit a pack"],"updatePoint":{"line":80,"column":66,"index":3852},"line":80,"code":"    it('should trigger validation when saved query is being chosen', () => {\n      preparePack(PACK_NAME);\n      findAndClickButton('Edit');\n      findAndClickButton('Add query');\n      cy.contains('Attach next query');\n      cy.contains('ID must be unique').should('not.exist');\n      getSavedQueriesDropdown().type(`${SAVED_QUERY_ID}{downArrow}{enter}`);\n      cy.react('EuiFlyoutFooter').react('EuiButton').contains('Save').click();\n      cy.contains('ID must be unique').should('exist');\n      cy.react('EuiFlyoutFooter').react('EuiButtonEmpty').contains('Cancel').click();\n    });","file":"integration/all/packs.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should open lens in new tab","suites":["ALL - Packs","Create and edit a pack"],"line":91,"code":"    it.skip('should open lens in new tab', () => {","file":"integration/all/packs.spec.ts","skipped":true,"dir":"x-pack/plugins/osquery/cypress"},{"name":"activate and deactive pack","suites":["ALL - Packs","Create and edit a pack"],"updatePoint":{"line":137,"column":34,"index":6162},"line":137,"code":"    it('activate and deactive pack', () => {\n      cy.contains('Packs').click();\n      cy.react('ActiveStateSwitchComponent', {\n        props: {\n          item: {\n            attributes: {\n              name: PACK_NAME\n            }\n          }\n        }\n      }).click();\n      cy.contains(`Successfully deactivated \"${PACK_NAME}\" pack`).should('not.exist');\n      cy.contains(`Successfully deactivated \"${PACK_NAME}\" pack`).should('exist');\n      cy.react('ActiveStateSwitchComponent', {\n        props: {\n          item: {\n            attributes: {\n              name: PACK_NAME\n            }\n          }\n        }\n      }).click();\n      cy.getBySel('confirmModalConfirmButton').click();\n      cy.contains(`Successfully activated \"${PACK_NAME}\" pack`).should('not.exist');\n      cy.contains(`Successfully activated \"${PACK_NAME}\" pack`).should('exist');\n    });","file":"integration/all/packs.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should verify that packs are triggered","suites":["ALL - Packs","Create and edit a pack"],"line":163,"code":"    it.skip('should verify that packs are triggered', () => {","file":"integration/all/packs.spec.ts","skipped":true,"dir":"x-pack/plugins/osquery/cypress"},{"name":"delete all queries in the pack","suites":["ALL - Packs","Create and edit a pack"],"updatePoint":{"line":180,"column":38,"index":7749},"line":180,"code":"    it('delete all queries in the pack', () => {\n      preparePack(PACK_NAME);\n      cy.contains(/^Edit$/).click();\n      cy.getBySel('checkboxSelectAll').click();\n      cy.contains(/^Delete \\d+ quer(y|ies)/).click();\n      cy.contains(/^Update pack$/).click();\n      cy.react('EuiButtonDisplay').contains(/^Save and deploy changes$/).click();\n      cy.contains(`${PACK_NAME}`).click();\n      cy.contains(`${PACK_NAME} details`).should('exist');\n      cy.contains(/^No items found/).should('exist');\n    });","file":"integration/all/packs.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"enable changing saved queries and ecs_mappings","suites":["ALL - Packs","Create and edit a pack"],"updatePoint":{"line":191,"column":54,"index":8273},"line":191,"code":"    it('enable changing saved queries and ecs_mappings', () => {\n      preparePack(PACK_NAME);\n      cy.contains(/^Edit$/).click();\n      findAndClickButton('Add query');\n      getSavedQueriesDropdown().type('Multiple {downArrow} {enter}');\n      cy.contains('Custom key/value pairs').should('exist');\n      cy.contains('Days of uptime').should('exist');\n      cy.contains('List of keywords used to tag each').should('exist');\n      cy.contains('Seconds of uptime').should('exist');\n      cy.contains('Client network address.').should('exist');\n      cy.contains('Total uptime seconds').should('exist');\n      cy.getBySel('ECSMappingEditorForm').should('have.length', 4);\n      getSavedQueriesDropdown().type('NOMAPPING {downArrow} {enter}');\n      cy.contains('Custom key/value pairs').should('not.exist');\n      cy.contains('Days of uptime').should('not.exist');\n      cy.contains('List of keywords used to tag each').should('not.exist');\n      cy.contains('Seconds of uptime').should('not.exist');\n      cy.contains('Client network address.').should('not.exist');\n      cy.contains('Total uptime seconds').should('not.exist');\n      cy.getBySel('ECSMappingEditorForm').should('have.length', 1);\n      getSavedQueriesDropdown().type('ONE_MAPPING {downArrow} {enter}');\n      cy.contains('Name of the continent').should('exist');\n      cy.contains('Seconds of uptime').should('exist');\n      cy.getBySel('ECSMappingEditorForm').should('have.length', 2);\n      findAndClickButton('Save');\n      cy.react('CustomItemAction', {\n        props: {\n          index: 0,\n          item: {\n            id: 'ONE_MAPPING_CHANGED'\n          }\n        }\n      }).click();\n      cy.contains('Name of the continent').should('exist');\n      cy.contains('Seconds of uptime').should('exist');\n    });","file":"integration/all/packs.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"to click delete button","suites":["ALL - Packs","Create and edit a pack"],"updatePoint":{"line":227,"column":30,"index":10032},"line":227,"code":"    it('to click delete button', () => {\n      preparePack(PACK_NAME);\n      findAndClickButton('Edit');\n      deleteAndConfirm('pack');\n    });","file":"integration/all/packs.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"add integration","suites":["ALL - Packs","Validate that agent is getting removed from pack if we remove agent"],"updatePoint":{"line":239,"column":23,"index":10391},"line":239,"code":"    it('add integration', () => {\n      cy.visit(FLEET_AGENT_POLICIES);\n      cy.contains('Create agent policy').click();\n      cy.get('input[placeholder*=\"Choose a name\"]').type(AGENT_NAME);\n      cy.get('.euiFlyoutFooter').contains('Create agent policy').click();\n      cy.contains(`Agent policy '${AGENT_NAME}' created`);\n      cy.visit(FLEET_AGENT_POLICIES);\n      cy.contains(AGENT_NAME).click();\n      cy.contains('Add integration').click();\n      cy.contains(integration).click();\n      addIntegration(AGENT_NAME);\n      cy.contains('Add Elastic Agent later').click();\n      navigateTo('app/osquery/packs');\n      findAndClickButton('Add pack');\n      findFormFieldByRowsLabelAndType('Name', REMOVING_PACK);\n      findFormFieldByRowsLabelAndType('Scheduled agent policies (optional)', AGENT_NAME);\n      findAndClickButton('Save pack');\n      cy.getBySel('toastCloseButton').click();\n      cy.contains(REMOVING_PACK).click();\n      cy.contains(`${REMOVING_PACK} details`).should('exist');\n      findAndClickButton('Edit');\n      cy.react('EuiComboBoxInput', {\n        props: {\n          value: AGENT_NAME\n        }\n      }).should('exist');\n      cy.visit(FLEET_AGENT_POLICIES);\n      cy.contains(AGENT_NAME).click();\n      cy.get('.euiTableCellContent').get('.euiPopover__anchor').get(`[aria-label=\"Open\"]`).first().click();\n      cy.contains(/^Delete integration$/).click();\n      closeModalIfVisible();\n      cy.contains(/^Deleted integration 'osquery_manager-3'$/);\n      navigateTo('app/osquery/packs');\n      cy.contains(REMOVING_PACK).click();\n      cy.contains(`${REMOVING_PACK} details`).should('exist');\n      cy.wait(1000);\n      findAndClickButton('Edit');\n      cy.react('EuiComboBoxInput', {\n        props: {\n          value: ''\n        }\n      }).should('exist');\n    });","file":"integration/all/packs.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should load prebuilt packs","suites":["ALL - Packs","Load prebuilt packs"],"updatePoint":{"line":288,"column":34,"index":12347},"line":288,"code":"    it('should load prebuilt packs', () => {\n      cy.contains('Load Elastic prebuilt packs').click();\n      cy.contains('Load Elastic prebuilt packs').should('not.exist');\n      cy.wait(1000);\n      cy.react('EuiTableRow').should('have.length.above', 5);\n    });","file":"integration/all/packs.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should be able to run live query with BASE All permissions","suites":["Admin"],"updatePoint":{"line":16,"column":64,"index":656},"line":16,"code":"  it('should be able to run live query with BASE All permissions', () => {\n    cy.contains('New live query').click();\n    selectAllAgents();\n    inputQuery('select * from uptime; ');\n    submitQuery();\n    checkResults();\n  });","file":"integration/roles/admin.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should be able to run live query","suites":["Alert_Test"],"updatePoint":{"line":26,"column":38,"index":1064},"line":26,"code":"  it('should be able to run live query', () => {\n    const PACK_NAME = 'testpack';\n    const RULE_NAME = 'Test-rule';\n    navigateTo('/app/osquery');\n    preparePack(PACK_NAME);\n    findAndClickButton('Edit');\n    cy.contains(`Edit ${PACK_NAME}`);\n    findFormFieldByRowsLabelAndType('Scheduled agent policies (optional)', 'fleet server {downArrow}{enter}');\n    findAndClickButton('Update pack');\n    closeModalIfVisible();\n    cy.contains(PACK_NAME);\n    cy.visit('/app/security/rules');\n    cy.contains(RULE_NAME).click();\n    cy.wait(2000);\n    cy.getBySel('ruleSwitch').should('have.attr', 'aria-checked', 'true');\n    cy.getBySel('ruleSwitch').click();\n    cy.getBySel('ruleSwitch').should('have.attr', 'aria-checked', 'false');\n    cy.getBySel('ruleSwitch').click();\n    cy.getBySel('ruleSwitch').should('have.attr', 'aria-checked', 'true');\n    cy.visit('/app/security/alerts');\n    cy.getBySel('expand-event').first().click();\n    cy.getBySel('take-action-dropdown-btn').click();\n    cy.getBySel('osquery-action-item').click();\n    cy.contains('Run Osquery');\n    cy.contains('Permission denied');\n  });","file":"integration/roles/alert_test.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should not be able to add nor run saved queries","suites":["Reader - only READ"],"updatePoint":{"line":22,"column":53,"index":821},"line":22,"code":"  it('should not be able to add nor run saved queries', () => {\n    navigateTo('/app/osquery/saved_queries');\n    cy.waitForReact(1000);\n    cy.getBySel('pagination-button-next').click();\n    cy.contains(SAVED_QUERY_ID);\n    cy.contains('Add saved query').should('be.disabled');\n    cy.react('PlayButtonComponent', {\n      props: {\n        savedQuery: {\n          attributes: {\n            id: SAVED_QUERY_ID\n          }\n        }\n      },\n      options: {\n        timeout: 3000\n      }\n    }).should('not.exist');\n    cy.react('CustomItemAction', {\n      props: {\n        index: 1,\n        item: {\n          attributes: {\n            id: SAVED_QUERY_ID\n          }\n        }\n      }\n    }).click();\n    cy.react('EuiFormRow', {\n      props: {\n        label: 'ID'\n      }\n    }).getBySel('input').should('be.disabled');\n    cy.react('EuiFormRow', {\n      props: {\n        label: 'Description (optional)'\n      }\n    }).getBySel('input').should('be.disabled');\n    cy.contains('Update query').should('not.exist');\n    cy.contains(`Delete query`).should('not.exist');\n  });","file":"integration/roles/reader.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should not be able to enter live queries with just read and no run saved queries","suites":["Reader - only READ"],"updatePoint":{"line":63,"column":86,"index":1926},"line":63,"code":"  it('should not be able to enter live queries with just read and no run saved queries', () => {\n    navigateTo('/app/osquery/live_queries/new');\n    cy.waitForReact(1000);\n    cy.contains('Permission denied');\n  });","file":"integration/roles/reader.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should not be able to play in live queries history","suites":["Reader - only READ"],"updatePoint":{"line":68,"column":56,"index":2113},"line":68,"code":"  it('should not be able to play in live queries history', () => {\n    navigateTo('/app/osquery/live_queries');\n    cy.waitForReact(1000);\n    cy.contains('New live query').should('be.disabled');\n    cy.contains('select * from uptime');\n    cy.react('EuiIconPlay', {\n      options: {\n        timeout: 3000\n      }\n    }).should('not.exist');\n    cy.react('ActionTableResultsButton').should('exist');\n  });","file":"integration/roles/reader.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should not be able to add nor edit packs","suites":["Reader - only READ"],"updatePoint":{"line":80,"column":46,"index":2509},"line":80,"code":"  it('should not be able to add nor edit packs', () => {\n    const PACK_NAME = 'removing-pack';\n    navigateTo('/app/osquery/packs');\n    cy.waitForReact(1000);\n    cy.contains('Add pack').should('be.disabled');\n    cy.react('ActiveStateSwitchComponent', {\n      props: {\n        item: {\n          attributes: {\n            name: PACK_NAME\n          }\n        }\n      }\n    }).find('button').should('be.disabled');\n    cy.contains(PACK_NAME).click();\n    cy.contains(`${PACK_NAME} details`);\n    cy.contains('Edit').should('be.disabled');\n    cy.react('CustomItemAction', {\n      props: {\n        index: 0,\n        item: {\n          id: SAVED_QUERY_ID\n        }\n      },\n      options: {\n        timeout: 3000\n      }\n    }).should('not.exist');\n    cy.react('CustomItemAction', {\n      props: {\n        index: 1,\n        item: {\n          id: SAVED_QUERY_ID\n        }\n      },\n      options: {\n        timeout: 3000\n      }\n    }).should('not.exist');\n  });","file":"integration/roles/reader.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should be able to run saved queries but not add new ones","suites":["T1 Analyst - READ + runSavedQueries "],"updatePoint":{"line":24,"column":62,"index":1024},"line":24,"code":"  it('should be able to run saved queries but not add new ones', () => {\n    navigateTo('/app/osquery/saved_queries');\n    cy.waitForReact(1000);\n    cy.getBySel('pagination-button-next').click();\n    cy.contains(SAVED_QUERY_ID);\n    cy.contains('Add saved query').should('be.disabled');\n    cy.react('PlayButtonComponent', {\n      props: {\n        savedQuery: {\n          attributes: {\n            id: SAVED_QUERY_ID\n          }\n        }\n      }\n    }).should('not.be.disabled').click();\n    selectAllAgents();\n    cy.contains('select * from uptime;');\n    submitQuery();\n    checkResults();\n    cy.contains('View in Discover').should('not.exist');\n    cy.contains('View in Lens').should('not.exist');\n  });","file":"integration/roles/t1_analyst.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should be able to play in live queries history","suites":["T1 Analyst - READ + runSavedQueries "],"updatePoint":{"line":46,"column":52,"index":1724},"line":46,"code":"  it('should be able to play in live queries history', () => {\n    navigateTo('/app/osquery/live_queries');\n    cy.waitForReact(1000);\n    cy.contains('New live query').should('not.be.disabled');\n    cy.contains('select * from uptime');\n    cy.wait(1000);\n    cy.react('EuiTableBody').first().react('DefaultItemAction').first().click();\n    cy.contains(SAVED_QUERY_ID);\n    submitQuery();\n    checkResults();\n  });","file":"integration/roles/t1_analyst.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should be able to use saved query in a new query","suites":["T1 Analyst - READ + runSavedQueries "],"updatePoint":{"line":57,"column":54,"index":2141},"line":57,"code":"  it('should be able to use saved query in a new query', () => {\n    navigateTo('/app/osquery/live_queries');\n    cy.waitForReact(1000);\n    cy.contains('New live query').should('not.be.disabled').click();\n    selectAllAgents();\n    getSavedQueriesDropdown().type(`${SAVED_QUERY_ID}{downArrow} {enter}`);\n    cy.contains('select * from uptime');\n    submitQuery();\n    checkResults();\n  });","file":"integration/roles/t1_analyst.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should not be able to add nor edit packs","suites":["T1 Analyst - READ + runSavedQueries "],"updatePoint":{"line":67,"column":46,"index":2524},"line":67,"code":"  it('should not be able to add nor edit packs', () => {\n    const PACK_NAME = 'removing-pack';\n    navigateTo('/app/osquery/packs');\n    cy.waitForReact(1000);\n    cy.contains('Add pack').should('be.disabled');\n    cy.react('ActiveStateSwitchComponent', {\n      props: {\n        item: {\n          attributes: {\n            name: PACK_NAME\n          }\n        }\n      }\n    }).find('button').should('be.disabled');\n    cy.contains(PACK_NAME).click();\n    cy.contains(`${PACK_NAME} details`);\n    cy.contains('Edit').should('be.disabled');\n    cy.react('CustomItemAction', {\n      props: {\n        index: 0,\n        item: {\n          id: SAVED_QUERY_ID\n        }\n      },\n      options: {\n        timeout: 3000\n      }\n    }).should('not.exist');\n    cy.react('CustomItemAction', {\n      props: {\n        index: 1,\n        item: {\n          id: SAVED_QUERY_ID\n        }\n      },\n      options: {\n        timeout: 3000\n      }\n    }).should('not.exist');\n  });","file":"integration/roles/t1_analyst.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should not be able to create new liveQuery from scratch","suites":["T1 Analyst - READ + runSavedQueries "],"updatePoint":{"line":107,"column":61,"index":3498},"line":107,"code":"  it('should not be able to create new liveQuery from scratch', () => {\n    navigateTo('/app/osquery');\n    cy.contains('New live query').click();\n    selectAllAgents();\n    cy.get(LIVE_QUERY_EDITOR).should('not.exist');\n    submitQuery();\n    cy.contains('Query is a required field');\n  });","file":"integration/roles/t1_analyst.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should not be able to add nor edit packs","suites":["T2 Analyst - READ + Write Live/Saved + runSavedQueries "],"updatePoint":{"line":28,"column":46,"index":1304},"line":28,"code":"  it('should not be able to add nor edit packs', () => {\n    const PACK_NAME = 'removing-pack';\n    navigateTo('/app/osquery/packs');\n    cy.waitForReact(1000);\n    cy.contains('Add pack').should('be.disabled');\n    cy.react('ActiveStateSwitchComponent', {\n      props: {\n        item: {\n          attributes: {\n            name: PACK_NAME\n          }\n        }\n      }\n    }).find('button').should('be.disabled');\n    cy.contains(PACK_NAME).click();\n    cy.contains(`${PACK_NAME} details`);\n    cy.contains('Edit').should('be.disabled');\n    cy.react('CustomItemAction', {\n      props: {\n        index: 0,\n        item: {\n          id: SAVED_QUERY_ID\n        }\n      },\n      options: {\n        timeout: 3000\n      }\n    }).should('not.exist');\n    cy.react('CustomItemAction', {\n      props: {\n        index: 1,\n        item: {\n          id: SAVED_QUERY_ID\n        }\n      },\n      options: {\n        timeout: 3000\n      }\n    }).should('not.exist');\n  });","file":"integration/roles/t2_analyst.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"should run query and enable ecs mapping","suites":["T2 Analyst - READ + Write Live/Saved + runSavedQueries "],"updatePoint":{"line":68,"column":45,"index":2262},"line":68,"code":"  it('should run query and enable ecs mapping', () => {\n    const cmd = Cypress.platform === 'darwin' ? '{meta}{enter}' : '{ctrl}{enter}';\n    cy.contains('New live query').click();\n    selectAllAgents();\n    inputQuery('select * from uptime; ');\n    cy.wait(500); // checking submit by clicking cmd+enter\n\n    inputQuery(cmd);\n    checkResults();\n    cy.contains('View in Discover').should('not.exist');\n    cy.contains('View in Lens').should('not.exist');\n    cy.react('EuiDataGridHeaderCellWrapper', {\n      props: {\n        id: 'osquery.days.number',\n        index: 1\n      }\n    }).should('exist');\n    cy.react('EuiDataGridHeaderCellWrapper', {\n      props: {\n        id: 'osquery.hours.number',\n        index: 2\n      }\n    }).should('exist');\n    cy.react('EuiAccordionClass', {\n      props: {\n        buttonContent: 'Advanced'\n      }\n    }).last().click();\n    typeInECSFieldInput('message{downArrow}{enter}');\n    typeInOsqueryFieldInput('days{downArrow}{enter}');\n    submitQuery();\n    checkResults();\n    cy.react('EuiDataGridHeaderCellWrapper', {\n      props: {\n        id: 'message',\n        index: 1\n      }\n    }).should('exist');\n    cy.react('EuiDataGridHeaderCellWrapper', {\n      props: {\n        id: 'osquery.days.number',\n        index: 2\n      }\n    }).within(() => {\n      cy.get('.euiToolTipAnchor').within(() => {\n        cy.get('svg').should('exist');\n      });\n    });\n  });","file":"integration/roles/t2_analyst.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"to click the edit button and edit pack","suites":["T2 Analyst - READ + Write Live/Saved + runSavedQueries "],"updatePoint":{"line":117,"column":44,"index":3666},"line":117,"code":"  it('to click the edit button and edit pack', () => {\n    navigateTo('/app/osquery/saved_queries');\n    cy.getBySel('pagination-button-next').click();\n    cy.react('CustomItemAction', {\n      props: {\n        index: 1,\n        item: {\n          attributes: {\n            id: SAVED_QUERY_ID\n          }\n        }\n      }\n    }).click();\n    cy.contains('Custom key/value pairs.').should('exist');\n    cy.contains('Hours of uptime').should('exist');\n    cy.react('ECSMappingEditorForm').within(() => {\n      cy.react('EuiButtonIcon', {\n        props: {\n          iconType: 'trash'\n        }\n      }).click();\n    });\n    cy.react('EuiButton').contains('Update query').click();\n    cy.wait(5000);\n    cy.react('CustomItemAction', {\n      props: {\n        index: 1,\n        item: {\n          attributes: {\n            id: SAVED_QUERY_ID\n          }\n        }\n      }\n    }).click();\n    cy.contains('Custom key/value pairs').should('not.exist');\n    cy.contains('Hours of uptime').should('not.exist');\n  });","file":"integration/roles/t2_analyst.spec.ts","skipped":false,"dir":"x-pack/plugins/osquery/cypress"},{"name":"Displays the unmapped field on the JSON view","suites":["Alert details with unmapped fields"],"updatePoint":{"line":26,"column":50,"index":1169},"line":26,"code":"  it('Displays the unmapped field on the JSON view', () => {\n    const expectedUnmappedValue = 'This is the unmapped field';\n    openJsonView();\n    cy.get(JSON_TEXT).then(x => {\n      const parsed = JSON.parse(x.text());\n      expect(parsed.fields.unmapped[0]).to.equal(expectedUnmappedValue);\n    });\n  });","file":"ccs_integration/detection_alerts/alerts_details.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"EQL rule on remote indices generates alerts","suites":["Detection rules"],"updatePoint":{"line":21,"column":49,"index":1132},"line":21,"code":"  it('EQL rule on remote indices generates alerts', function () {\n    esArchiverCCSLoad('linux_process');\n    this.rule = getCCSEqlRule();\n    login();\n    createEventCorrelationRule(this.rule);\n    visitWithoutDateRange(DETECTIONS_RULE_MANAGEMENT_URL);\n    waitForRulesTableToBeLoaded();\n    filterByCustomRules();\n    goToRuleDetails();\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(NUMBER_OF_ALERTS).should('have.text', expectedNumberOfAlerts);\n    cy.get(ALERT_DATA_GRID).invoke('text').then(text => {\n      cy.log('ALERT_DATA_GRID', text);\n      expect(text).contains(this.rule.name);\n      expect(text).contains(this.rule.severity.toLowerCase());\n      expect(text).contains(this.rule.riskScore);\n    });\n  });","file":"ccs_integration/detection_rules/event_correlation_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should not allow user with read only privileges to attach alerts to cases","suites":["Alerts timeline","Privileges: read only"],"updatePoint":{"line":38,"column":81,"index":1541},"line":38,"code":"    it('should not allow user with read only privileges to attach alerts to cases', () => {\n      // Disabled actions for read only users are hidden, so actions button should not show\n      cy.get(TIMELINE_CONTEXT_MENU_BTN).should('not.exist');\n    });","file":"integration/cases/attach_alert_to_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should allow a user with crud privileges to attach alerts to cases","suites":["Alerts timeline","Privileges: can crud"],"updatePoint":{"line":49,"column":74,"index":2086},"line":49,"code":"    it('should allow a user with crud privileges to attach alerts to cases', () => {\n      expandFirstAlertActions();\n      cy.get(ATTACH_ALERT_TO_CASE_BUTTON).first().should('not.be.disabled');\n    });","file":"integration/cases/attach_alert_to_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"attach timeline to a new case","suites":["attach timeline to case","without cases created"],"updatePoint":{"line":27,"column":37,"index":1195},"line":27,"code":"    it('attach timeline to a new case', function () {\n      visitTimeline(this.myTimeline.savedObjectId);\n      attachTimelineToNewCase();\n      cy.location('origin').then(origin => {\n        cy.get(DESCRIPTION_INPUT).should('have.text', `[${this.myTimeline.title}](${origin}/app/security/timelines?timeline=(id:%27${this.myTimeline.savedObjectId}%27,isOpen:!t))`);\n      });\n    });","file":"integration/cases/attach_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"attach timeline to an existing case with no case","suites":["attach timeline to case","without cases created"],"updatePoint":{"line":34,"column":56,"index":1598},"line":34,"code":"    it('attach timeline to an existing case with no case', function () {\n      visitTimeline(this.myTimeline.savedObjectId);\n      attachTimelineToExistingCase();\n      addNewCase();\n      cy.location('origin').then(origin => {\n        cy.get(DESCRIPTION_INPUT).should('have.text', `[${this.myTimeline.title}](${origin}/app/security/timelines?timeline=(id:%27${this.myTimeline.savedObjectId}%27,isOpen:!t))`);\n      });\n    });","file":"integration/cases/attach_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"attach timeline to an existing case","suites":["attach timeline to case","with cases created"],"updatePoint":{"line":49,"column":43,"index":2337},"line":49,"code":"    it('attach timeline to an existing case', function () {\n      visitTimeline(this.timelineId);\n      attachTimelineToExistingCase();\n      selectCase(this.caseId);\n      cy.location('origin').then(origin => {\n        cy.get(ADD_COMMENT_INPUT).should('have.text', `[${getTimeline().title}](${origin}/app/security/timelines?timeline=(id:%27${this.timelineId}%27,isOpen:!t))`);\n      });\n    });","file":"integration/cases/attach_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Correct incident fields show when connector is changed","suites":["Cases connector incident fields"],"updatePoint":{"line":37,"column":60,"index":2101},"line":37,"code":"  it('Correct incident fields show when connector is changed', () => {\n    visitWithoutDateRange(CASES_URL);\n    goToCreateNewCase();\n    fillCasesMandatoryfields(getCase1());\n    fillJiraConnectorOptions(getJiraConnectorOptions());\n    fillServiceNowConnectorOptions(getServiceNowConnectorOptions());\n    fillIbmResilientConnectorOptions(getIbmResilientConnectorOptions());\n    createCase();\n    cy.get(CONNECTOR_TITLE).should('have.text', getIbmResilientConnectorOptions().title);\n    cy.get(CONNECTOR_CARD_DETAILS).should('have.text', `${getIbmResilientConnectorOptions().title}Incident Types: ${getIbmResilientConnectorOptions().incidentTypes.join(', ')}Severity: ${getIbmResilientConnectorOptions().severity}`);\n  });","file":"integration/cases/connector_options.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Configures a new connector","suites":["Cases connectors"],"updatePoint":{"line":91,"column":32,"index":2928},"line":91,"code":"  it('Configures a new connector', () => {\n    visitWithoutDateRange(CASES_URL);\n    goToEditExternalConnection();\n    openAddNewConnectorOption();\n    addServiceNowConnector(snConnector);\n    cy.wait('@createConnector').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      cy.get(TOASTER).should('have.text', \"Created 'New connector'\");\n      cy.get(TOASTER).should('not.exist');\n      selectLastConnectorCreated(response?.body.id);\n      cy.wait('@saveConnector', {\n        timeout: 10000\n      }).its('response.statusCode').should('eql', 200);\n      cy.get(SERVICE_NOW_MAPPING).first().should('have.text', 'short_description');\n      cy.get(TOASTER).should('have.text', 'Saved external connection settings');\n    });\n  });","file":"integration/cases/connectors.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"User  with role(s)  can create a case","suites":["Cases privileges"],"updatePoint":{"line":46,"column":81,"index":2031},"line":46,"code":"    it(`User ${user.username} with role(s) ${user.roles.join()} can create a case`, () => {\n      loginWithUser(user);\n      visitWithUser(CASES_URL, user);\n      goToCreateNewCase();\n      fillCasesMandatoryfields(testCase);\n      createCase();\n      backToCases();\n      filterStatusOpen();\n      cy.get(ALL_CASES_NAME).should('have.text', testCase.name);\n    });","file":"integration/cases/privileges.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"User  with role(s)  cannot create a case","suites":["Cases privileges"],"updatePoint":{"line":59,"column":84,"index":2461},"line":59,"code":"    it(`User ${user.username} with role(s) ${user.roles.join()} cannot create a case`, () => {\n      loginWithUser(user);\n      visitWithUser(CASES_URL, user);\n      cy.get(ALL_CASES_CREATE_NEW_CASE_BTN).should('not.exist');\n    });","file":"integration/cases/privileges.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds field to alert table","suites":["Create DataView runtime field"],"updatePoint":{"line":21,"column":31,"index":1047},"line":21,"code":"  it('adds field to alert table', () => {\n    const fieldName = 'field.name.alert.page';\n    visit(ALERTS_URL);\n    createCustomRuleEnabled(getNewRule());\n    refreshPage();\n    waitForAlertsToPopulate();\n    openEventsViewerFieldsBrowser();\n    createField(fieldName);\n    assertFieldDisplayed(fieldName, 'alerts');\n  });","file":"integration/data_sources/create_runtime_field.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds field to timeline","suites":["Create DataView runtime field"],"updatePoint":{"line":31,"column":28,"index":1367},"line":31,"code":"  it('adds field to timeline', () => {\n    const fieldName = 'field.name.timeline';\n    visit(HOSTS_URL);\n    openTimelineUsingToggle();\n    populateTimeline();\n    openTimelineFieldsBrowser();\n    createField(fieldName);\n    assertFieldDisplayed(fieldName);\n  });","file":"integration/data_sources/create_runtime_field.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"role(s)  shows error when user does not have permissions","suites":["Sourcerer","permissions"],"updatePoint":{"line":34,"column":99,"index":2124},"line":34,"code":"    it(`role(s) ${secReadCasesAllUser.roles.join()} shows error when user does not have permissions`, () => {\n      loginWithUser(secReadCasesAllUser);\n      visitWithUser(HOSTS_URL, secReadCasesAllUser);\n      cy.get(TOASTER).should('have.text', 'Write role required to generate data');\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"correctly loads SIEM data view","suites":["Sourcerer","Default scope"],"updatePoint":{"line":48,"column":38,"index":2528},"line":48,"code":"    it('correctly loads SIEM data view', () => {\n      openSourcerer();\n      isDataViewSelection(siemDataViewTitle);\n      openAdvancedSettings();\n      isSourcererSelection(`auditbeat-*`);\n      isSourcererOptions(DEFAULT_INDEX_PATTERN.filter(pattern => pattern !== 'auditbeat-*'));\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Selecting new data view does not add a modified badge","suites":["Sourcerer","Default scope","Modified badge"],"updatePoint":{"line":56,"column":63,"index":2885},"line":56,"code":"      it('Selecting new data view does not add a modified badge', () => {\n        cy.get(SOURCERER.badgeModified).should(`not.exist`);\n        openSourcerer();\n        cy.get(SOURCERER.badgeModifiedOption).should(`not.exist`);\n        openDataViewSelection();\n        isKibanaDataViewOption(dataViews);\n        cy.get(SOURCERER.selectListDefaultOption).should(`contain`, siemDataViewTitle);\n        cy.get(SOURCERER.selectListOption).contains(dataViews[1]).click();\n        isDataViewSelection(dataViews[1]);\n        saveSourcerer();\n        cy.get(SOURCERER.badgeModified).should(`not.exist`);\n        openSourcerer();\n        cy.get(SOURCERER.badgeModifiedOption).should(`not.exist`);\n      });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"shows modified badge when index patterns change and removes when reset","suites":["Sourcerer","Default scope","Modified badge"],"updatePoint":{"line":70,"column":80,"index":3599},"line":70,"code":"      it('shows modified badge when index patterns change and removes when reset', () => {\n        openSourcerer();\n        openDataViewSelection();\n        cy.get(SOURCERER.selectListOption).contains(dataViews[1]).click();\n        isDataViewSelection(dataViews[1]);\n        openAdvancedSettings();\n        const patterns = dataViews[1].split(',');\n        deselectSourcererOptions([patterns[0]]);\n        saveSourcerer();\n        cy.get(SOURCERER.badgeModified).should(`exist`);\n        openSourcerer();\n        cy.get(SOURCERER.badgeModifiedOption).should(`exist`);\n        resetSourcerer();\n        saveSourcerer();\n        cy.get(SOURCERER.badgeModified).should(`not.exist`);\n        openSourcerer();\n        cy.get(SOURCERER.badgeModifiedOption).should(`not.exist`);\n        isDataViewSelection(siemDataViewTitle);\n      });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"disables save when no patterns are selected","suites":["Sourcerer","Default scope","Modified badge"],"updatePoint":{"line":90,"column":51,"index":4408},"line":90,"code":"    it('disables save when no patterns are selected', () => {\n      openSourcerer();\n      openAdvancedSettings();\n      cy.get(SOURCERER.saveButton).should('be.enabled');\n      deselectSourcererOptions(['auditbeat-*']);\n      cy.get(SOURCERER.saveButton).should('be.disabled');\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds a pattern to the default index and correctly filters out auditbeat-*","suites":["Sourcerer","Default scope","Modified badge"],"updatePoint":{"line":97,"column":81,"index":4725},"line":97,"code":"    it('adds a pattern to the default index and correctly filters out auditbeat-*', () => {\n      openSourcerer();\n      isSourcererSelection(`auditbeat-*`);\n      isNotSourcererSelection('*beat*');\n      addIndexToDefault('*beat*');\n      isHostsStatValue('1 ');\n      openSourcerer();\n      openAdvancedSettings();\n      isSourcererSelection(`auditbeat-*`);\n      isSourcererSelection('*beat*');\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"correctly loads SIEM data view before and after signals index exists","suites":["Timeline scope"],"updatePoint":{"line":118,"column":74,"index":5286},"line":118,"code":"  it('correctly loads SIEM data view before and after signals index exists', () => {\n    openTimelineUsingToggle();\n    openSourcerer('timeline');\n    isDataViewSelection(siemDataViewTitle);\n    openAdvancedSettings();\n    isSourcererSelection(`auditbeat-*`);\n    isNotSourcererSelection(`${DEFAULT_ALERTS_INDEX}-default`);\n    isSourcererOptions([...DEFAULT_INDEX_PATTERN, `${DEFAULT_ALERTS_INDEX}-default`].filter(pattern => pattern !== 'auditbeat-*'));\n    waitForAlertsIndexToExist();\n    isSourcererOptions(DEFAULT_INDEX_PATTERN.filter(pattern => pattern !== 'auditbeat-*'));\n    isNotSourcererOption(`${DEFAULT_ALERTS_INDEX}-default`);\n  });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Selecting new data view does not add a modified badge","suites":["Timeline scope","Modified badge"],"updatePoint":{"line":131,"column":61,"index":5958},"line":131,"code":"    it('Selecting new data view does not add a modified badge', () => {\n      openTimelineUsingToggle();\n      cy.get(SOURCERER.badgeModified).should(`not.exist`);\n      openSourcerer('timeline');\n      cy.get(SOURCERER.badgeModifiedOption).should(`not.exist`);\n      openDataViewSelection();\n      isKibanaDataViewOption(dataViews);\n      cy.get(SOURCERER.selectListDefaultOption).should(`contain`, siemDataViewTitle);\n      cy.get(SOURCERER.selectListOption).contains(dataViews[1]).click();\n      isDataViewSelection(dataViews[1]);\n      saveSourcerer();\n      cy.get(SOURCERER.badgeModified).should(`not.exist`);\n      openSourcerer('timeline');\n      cy.get(SOURCERER.badgeModifiedOption).should(`not.exist`);\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"shows modified badge when index patterns change and removes when reset","suites":["Timeline scope","Modified badge"],"updatePoint":{"line":146,"column":78,"index":6697},"line":146,"code":"    it('shows modified badge when index patterns change and removes when reset', () => {\n      openTimelineUsingToggle();\n      openSourcerer('timeline');\n      openDataViewSelection();\n      cy.get(SOURCERER.selectListOption).contains(dataViews[1]).click();\n      isDataViewSelection(dataViews[1]);\n      openAdvancedSettings();\n      const patterns = dataViews[1].split(',');\n      deselectSourcererOptions([patterns[0]]);\n      saveSourcerer();\n      cy.get(SOURCERER.badgeModified).should(`exist`);\n      openSourcerer('timeline');\n      cy.get(SOURCERER.badgeModifiedOption).should(`exist`);\n      resetSourcerer();\n      saveSourcerer();\n      cy.get(SOURCERER.badgeModified).should(`not.exist`);\n      openSourcerer('timeline');\n      cy.get(SOURCERER.badgeModifiedOption).should(`not.exist`);\n      isDataViewSelection(siemDataViewTitle);\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Modifies timeline to alerts only, and switches to different saved timeline without issue","suites":["Timeline scope","Alerts checkbox"],"updatePoint":{"line":177,"column":96,"index":8054},"line":177,"code":"    it('Modifies timeline to alerts only, and switches to different saved timeline without issue', function () {\n      openTimelineById(this.timelineId).then(() => {\n        cy.get(SOURCERER.badgeAlerts).should(`not.exist`);\n        cy.get(SOURCERER.badgeModified).should(`not.exist`);\n        openSourcerer('timeline');\n        clickAlertCheckbox();\n        saveSourcerer();\n        cy.get(SOURCERER.badgeAlerts).should(`exist`);\n        cy.get(SOURCERER.badgeModified).should(`not.exist`);\n        closeTimeline();\n        openTimelineById(this.auditbeatTimelineId).then(() => {\n          cy.get(SOURCERER.badgeModified).should(`exist`);\n          cy.get(SOURCERER.badgeAlerts).should(`not.exist`);\n          openSourcerer('timeline');\n          openAdvancedSettings();\n          isSourcererSelection(`auditbeat-*`);\n        });\n      });\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"alerts checkbox behaves as expected","suites":["Timeline scope","Alerts checkbox"],"updatePoint":{"line":197,"column":43,"index":8930},"line":197,"code":"    it('alerts checkbox behaves as expected', () => {\n      isDataViewSelection(siemDataViewTitle);\n      defaultPatterns.forEach(pattern => isSourcererSelection(pattern));\n      openDataViewSelection();\n      cy.get(SOURCERER.selectListOption).contains(dataViews[1]).click();\n      isDataViewSelection(dataViews[1]);\n      dataViews[1].split(',').filter(pattern => pattern !== 'fakebeat-*' && pattern !== 'siem-read*').forEach(pattern => isSourcererSelection(pattern));\n      clickAlertCheckbox();\n      isNotSourcererSelection(`auditbeat-*`);\n      isSourcererSelection(`${DEFAULT_ALERTS_INDEX}-default`);\n      cy.get(SOURCERER.alertCheckbox).uncheck({\n        force: true\n      });\n      defaultPatterns.forEach(pattern => isSourcererSelection(pattern));\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"shows alerts badge when index patterns change and removes when reset","suites":["Timeline scope","Alerts checkbox"],"updatePoint":{"line":212,"column":76,"index":9730},"line":212,"code":"    it('shows alerts badge when index patterns change and removes when reset', () => {\n      clickAlertCheckbox();\n      saveSourcerer();\n      cy.get(SOURCERER.badgeAlerts).should(`exist`);\n      openSourcerer('timeline');\n      cy.get(SOURCERER.badgeAlertsOption).should(`exist`);\n      resetSourcerer();\n      saveSourcerer();\n      cy.get(SOURCERER.badgeAlerts).should(`not.exist`);\n      openSourcerer('timeline');\n      cy.get(SOURCERER.badgeAlertsOption).should(`not.exist`);\n    });","file":"integration/data_sources/sourcerer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Opens a new timeline investigation (from a prevalence field)","suites":["Alert Flyout"],"updatePoint":{"line":33,"column":66,"index":1682},"line":33,"code":"  it('Opens a new timeline investigation (from a prevalence field)', () => {\n    cy.get(SUMMARY_VIEW_PREVALENCE_CELL).first().invoke('text').then(alertCount => {\n      // Click on the first button that lets us investigate in timeline\n      cy.get(ALERT_FLYOUT).find(SUMMARY_VIEW_INVESTIGATE_IN_TIMELINE_BUTTON).first().click(); // Make sure a new timeline is created and opened\n\n      cy.get(TIMELINE_TITLE).should('contain.text', 'Untitled timeline'); // The alert count in this timeline should match the count shown on the alert flyout\n\n      cy.get(QUERY_TAB_BUTTON).should('contain.text', alertCount);\n    });\n  });","file":"integration/detection_alerts/alert_flyout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Opens a new timeline investigation (from an insights module)","suites":["Alert Flyout"],"updatePoint":{"line":43,"column":66,"index":2302},"line":43,"code":"  it('Opens a new timeline investigation (from an insights module)', () => {\n    verifyInsightCount({\n      tableSelector: INSIGHTS_RELATED_ALERTS_BY_SESSION,\n      investigateSelector: INSIGHTS_INVESTIGATE_IN_TIMELINE_BUTTON\n    });\n  });","file":"integration/detection_alerts/alert_flyout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Opens a new timeline investigation with alert ids from the process ancestry","suites":["Alert Flyout"],"updatePoint":{"line":49,"column":81,"index":2557},"line":49,"code":"  it('Opens a new timeline investigation with alert ids from the process ancestry', () => {\n    verifyInsightCount({\n      tableSelector: INSIGHTS_RELATED_ALERTS_BY_ANCESTRY,\n      investigateSelector: INSIGHTS_INVESTIGATE_ANCESTRY_ALERTS_IN_TIMELINE_BUTTON\n    });\n  });","file":"integration/detection_alerts/alert_flyout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the unmapped field on the JSON view","suites":["Alert details with unmapped fields"],"updatePoint":{"line":31,"column":50,"index":1404},"line":31,"code":"  it('Displays the unmapped field on the JSON view', () => {\n    const expectedUnmappedValue = 'This is the unmapped field';\n    openJsonView();\n    cy.get(JSON_TEXT).then(x => {\n      const parsed = JSON.parse(x.text());\n      expect(parsed.fields.unmapped[0]).to.equal(expectedUnmappedValue);\n    });\n  });","file":"integration/detection_alerts/alerts_details.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the unmapped field on the table","suites":["Alert details with unmapped fields"],"updatePoint":{"line":39,"column":46,"index":1709},"line":39,"code":"  it('Displays the unmapped field on the table', () => {\n    const expectedUnmmappedField = {\n      field: 'unmapped',\n      text: 'This is the unmapped field'\n    };\n    openTable();\n    cy.get(ALERT_FLYOUT).find(pageSelector(4)).click({\n      force: true\n    });\n    cy.get(ALERT_FLYOUT).find(TABLE_ROWS).within(() => {\n      cy.get(CELL_TEXT).should('contain', expectedUnmmappedField.field);\n      cy.get(CELL_TEXT).should('contain', expectedUnmmappedField.text);\n    });\n  }); // This test makes sure that the table does not overflow horizontally","file":"integration/detection_alerts/alerts_details.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Table does not scroll horizontally","suites":["Alert details with unmapped fields"],"updatePoint":{"line":54,"column":40,"index":2255},"line":54,"code":"  it('Table does not scroll horizontally', () => {\n    openTable();\n    cy.get(ALERT_FLYOUT).find(TABLE_CONTAINER).within($tableContainer => {\n      expect($tableContainer[0].scrollLeft).to.equal(0); // Due to the introduction of pagination on the table, a slight horizontal overflow has been introduced.\n      // scroll ignores the `overflow-x:hidden` attribute and will still scroll the element if there is a hidden overflow\n      // Updated the below to equal 4 to account for this and keep a test to make sure it doesn't grow\n\n      $tableContainer[0].scroll({\n        left: 1000\n      });\n      expect($tableContainer[0].scrollLeft).to.equal(4);\n    });\n  });","file":"integration/detection_alerts/alerts_details.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show the need admin primary callout","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"true\" and their admin callouts should show up","On Detections home page"],"updatePoint":{"line":52,"column":48,"index":2277},"line":52,"code":"      it('We show the need admin primary callout', () => {\n        waitForCallOutToBeShown(NEED_ADMIN_FOR_UPDATE_CALLOUT, 'primary');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show 1 primary callout of need admin","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"true\" and their admin callouts should show up","On Rules Management page"],"updatePoint":{"line":60,"column":49,"index":2585},"line":60,"code":"      it('We show 1 primary callout of need admin', () => {\n        waitForCallOutToBeShown(NEED_ADMIN_FOR_UPDATE_CALLOUT, 'primary');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show 1 primary callout","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"true\" and their admin callouts should show up","On Rule Details page"],"updatePoint":{"line":74,"column":35,"index":3041},"line":74,"code":"      it('We show 1 primary callout', () => {\n        waitForCallOutToBeShown(NEED_ADMIN_FOR_UPDATE_CALLOUT, 'primary');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show the need admin primary callout","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"false\" and their admin callouts should not show up ","On Detections home page"],"updatePoint":{"line":92,"column":48,"index":3766},"line":92,"code":"      it('We show the need admin primary callout', () => {\n        getCallOut(NEED_ADMIN_FOR_UPDATE_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show 1 primary callout of need admin","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"false\" and their admin callouts should not show up ","On Rules Management page"],"updatePoint":{"line":100,"column":49,"index":4070},"line":100,"code":"      it('We show 1 primary callout of need admin', () => {\n        getCallOut(NEED_ADMIN_FOR_UPDATE_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show 1 primary callout","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"false\" and their admin callouts should not show up ","On Rule Details page"],"updatePoint":{"line":114,"column":35,"index":4522},"line":114,"code":"      it('We show 1 primary callout', () => {\n        getCallOut(NEED_ADMIN_FOR_UPDATE_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show the need admin primary callout","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"null\" and their admin callouts should not show up ","On Detections home page"],"updatePoint":{"line":132,"column":48,"index":5241},"line":132,"code":"      it('We show the need admin primary callout', () => {\n        getCallOut(NEED_ADMIN_FOR_UPDATE_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show 1 primary callout of need admin","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"null\" and their admin callouts should not show up ","On Rules Management page"],"updatePoint":{"line":140,"column":49,"index":5545},"line":140,"code":"      it('We show 1 primary callout of need admin', () => {\n        getCallOut(NEED_ADMIN_FOR_UPDATE_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show 1 primary callout","suites":["Detections > Need Admin Callouts indicating an admin is needed to migrate the alert data set","The users index_mapping_outdated is \"null\" and their admin callouts should not show up ","On Rule Details page"],"updatePoint":{"line":154,"column":35,"index":5997},"line":154,"code":"      it('We show 1 primary callout', () => {\n        getCallOut(NEED_ADMIN_FOR_UPDATE_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/alerts_detection_callouts_index_outdated.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Alerts should be visible on the Rule Detail page and not visible on the Overview page","suites":["Alerts generated by building block rules"],"updatePoint":{"line":31,"column":91,"index":1433},"line":31,"code":"  it('Alerts should be visible on the Rule Detail page and not visible on the Overview page', () => {\n    visitWithoutDateRange(DETECTIONS_RULE_MANAGEMENT_URL);\n    goToRuleDetails();\n    waitForTheRuleToBeExecuted(); // Check that generated events are visible on the Details page\n\n    waitForAlertsToPopulate(EXPECTED_NUMBER_OF_ALERTS);\n    navigateFromHeaderTo(OVERVIEW); // Check that generated events are hidden on the Overview page\n\n    cy.get(OVERVIEW_ALERTS_HISTOGRAM).should('contain.text', 'No data to display');\n  });","file":"integration/detection_alerts/building_block_alerts.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Open one alert when more than one closed alerts are selected","suites":["Changing alert status","Opening alerts"],"updatePoint":{"line":38,"column":68,"index":1804},"line":38,"code":"    it('Open one alert when more than one closed alerts are selected', () => {\n      waitForAlertsToPopulate();\n      cy.get(ALERTS_COUNT).invoke('text').then(numberOfOpenedAlertsText => {\n        const numberOfOpenedAlerts = parseInt(numberOfOpenedAlertsText, 10);\n        goToClosedAlerts();\n        cy.get(ALERTS_COUNT).invoke('text').then(alertNumberString => {\n          const numberOfAlerts = alertNumberString.split(' ')[0];\n          const numberOfAlertsToBeOpened = 1;\n          const numberOfAlertsToBeSelected = 3;\n          cy.get(TAKE_ACTION_POPOVER_BTN).should('not.exist');\n          selectNumberOfAlerts(numberOfAlertsToBeSelected);\n          cy.get(SELECTED_ALERTS).should('have.text', `Selected ${numberOfAlertsToBeSelected} alerts`); // TODO: Popover not shwing up in cypress UI, but code is in the UtilityBar\n          // cy.get(TAKE_ACTION_POPOVER_BTN).should('not.have.attr', 'disabled');\n\n          openFirstAlert();\n          waitForAlerts();\n          const expectedNumberOfAlerts = +numberOfAlerts - numberOfAlertsToBeOpened;\n          cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfAlerts} alerts`);\n          cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfAlerts}`);\n          goToOpenedAlerts();\n          waitForAlerts();\n          cy.get(ALERTS_COUNT).should('have.text', `${numberOfOpenedAlerts + numberOfAlertsToBeOpened} alerts`.toString());\n          cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${numberOfOpenedAlerts + numberOfAlertsToBeOpened}`);\n        });\n      });\n    });","file":"integration/detection_alerts/changing_alert_status.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Mark one alert as acknowledged when more than one open alerts are selected","suites":["Changing alert status","Marking alerts as acknowledged"],"updatePoint":{"line":74,"column":82,"index":3676},"line":74,"code":"    it('Mark one alert as acknowledged when more than one open alerts are selected', () => {\n      cy.get(ALERTS_COUNT).invoke('text').then(alertNumberString => {\n        const numberOfAlerts = alertNumberString.split(' ')[0];\n        const numberOfAlertsToBeMarkedAcknowledged = 1;\n        const numberOfAlertsToBeSelected = 3;\n        cy.get(TAKE_ACTION_POPOVER_BTN).should('not.exist');\n        selectNumberOfAlerts(numberOfAlertsToBeSelected);\n        cy.get(TAKE_ACTION_POPOVER_BTN).should('exist');\n        markAcknowledgedFirstAlert();\n        const expectedNumberOfAlerts = +numberOfAlerts - numberOfAlertsToBeMarkedAcknowledged;\n        cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfAlerts} alerts`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfAlerts}`);\n        goToAcknowledgedAlerts();\n        waitForAlerts();\n        cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlertsToBeMarkedAcknowledged} alert`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${numberOfAlertsToBeMarkedAcknowledged}`);\n      });\n    });","file":"integration/detection_alerts/changing_alert_status.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Closes and opens alerts","suites":["Changing alert status","Closing alerts"],"updatePoint":{"line":102,"column":31,"index":5019},"line":102,"code":"    it('Closes and opens alerts', () => {\n      const numberOfAlertsToBeClosed = 3;\n      cy.get(ALERTS_COUNT).invoke('text').then(alertNumberString => {\n        const numberOfAlerts = alertNumberString.split(' ')[0];\n        cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlerts} alerts`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${numberOfAlerts}`);\n        selectNumberOfAlerts(numberOfAlertsToBeClosed);\n        cy.get(SELECTED_ALERTS).should('have.text', `Selected ${numberOfAlertsToBeClosed} alerts`);\n        closeAlerts();\n        waitForAlerts();\n        const expectedNumberOfAlertsAfterClosing = +numberOfAlerts - numberOfAlertsToBeClosed;\n        cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfAlertsAfterClosing} alerts`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfAlertsAfterClosing}`);\n        goToClosedAlerts();\n        waitForAlerts();\n        cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlertsToBeClosed} alerts`);\n        const numberOfAlertsToBeOpened = 1;\n        selectNumberOfAlerts(numberOfAlertsToBeOpened);\n        cy.get(SELECTED_ALERTS).should('have.text', `Selected ${numberOfAlertsToBeOpened} alert`);\n        openAlerts();\n        waitForAlerts();\n        const expectedNumberOfClosedAlertsAfterOpened = 2;\n        cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfClosedAlertsAfterOpened} alerts`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfClosedAlertsAfterOpened}`);\n        goToOpenedAlerts();\n        waitForAlerts();\n        const expectedNumberOfOpenedAlerts = +numberOfAlerts - expectedNumberOfClosedAlertsAfterOpened;\n        cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfOpenedAlerts} alerts`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfOpenedAlerts}`);\n      });\n    });","file":"integration/detection_alerts/changing_alert_status.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Closes one alert when more than one opened alerts are selected","suites":["Changing alert status","Closing alerts"],"updatePoint":{"line":133,"column":70,"index":6994},"line":133,"code":"    it('Closes one alert when more than one opened alerts are selected', () => {\n      cy.get(ALERTS_COUNT).invoke('text').then(alertNumberString => {\n        const numberOfAlerts = alertNumberString.split(' ')[0];\n        const numberOfAlertsToBeClosed = 1;\n        const numberOfAlertsToBeSelected = 3;\n        cy.get(TAKE_ACTION_POPOVER_BTN).should('not.exist');\n        selectNumberOfAlerts(numberOfAlertsToBeSelected);\n        cy.get(TAKE_ACTION_POPOVER_BTN).should('exist');\n        closeFirstAlert();\n        waitForAlerts();\n        const expectedNumberOfAlerts = +numberOfAlerts - numberOfAlertsToBeClosed;\n        cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfAlerts} alerts`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfAlerts}`);\n        goToClosedAlerts();\n        waitForAlerts();\n        cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlertsToBeClosed} alert`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${numberOfAlertsToBeClosed}`);\n      });\n    });","file":"integration/detection_alerts/changing_alert_status.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Updates trend histogram whenever alert status is updated in table","suites":["Changing alert status","Closing alerts"],"updatePoint":{"line":152,"column":73,"index":8059},"line":152,"code":"    it('Updates trend histogram whenever alert status is updated in table', () => {\n      const numberOfAlertsToBeClosed = 1;\n      cy.get(ALERTS_COUNT).invoke('text').then(alertNumberString => {\n        const numberOfAlerts = alertNumberString.split(' ')[0];\n        cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlerts} alerts`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${numberOfAlerts}`);\n        selectNumberOfAlerts(numberOfAlertsToBeClosed);\n        cy.get(SELECTED_ALERTS).should('have.text', `Selected ${numberOfAlertsToBeClosed} alert`);\n        closeAlerts();\n        waitForAlerts();\n        const expectedNumberOfAlertsAfterClosing = +numberOfAlerts - numberOfAlertsToBeClosed;\n        cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfAlertsAfterClosing} alerts`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfAlertsAfterClosing}`);\n        goToClosedAlerts();\n        waitForAlerts();\n        cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlertsToBeClosed} alert`);\n        const numberOfAlertsToBeOpened = 1;\n        selectNumberOfAlerts(numberOfAlertsToBeOpened);\n        cy.get(SELECTED_ALERTS).should('have.text', `Selected ${numberOfAlertsToBeOpened} alert`);\n        cy.get(ALERTS_TREND_SIGNAL_RULE_NAME_PANEL).should('exist');\n        openAlerts();\n        waitForAlerts();\n        cy.get(ALERTS_COUNT).should('not.exist');\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('not.exist');\n        cy.get(ALERTS_TREND_SIGNAL_RULE_NAME_PANEL).should('not.exist');\n      });\n    });","file":"integration/detection_alerts/changing_alert_status.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Mark one alert as acknowledged when more than one open alerts are selected","suites":["Changing alert status","Changing alert status with read only role"],"updatePoint":{"line":192,"column":82,"index":10020},"line":192,"code":"    it('Mark one alert as acknowledged when more than one open alerts are selected', () => {\n      cy.get(ALERTS_COUNT).invoke('text').then(alertNumberString => {\n        const numberOfAlerts = alertNumberString.split(' ')[0];\n        const numberOfAlertsToBeMarkedAcknowledged = 1;\n        const numberOfAlertsToBeSelected = 3;\n        cy.get(TAKE_ACTION_POPOVER_BTN).should('not.exist');\n        selectNumberOfAlerts(numberOfAlertsToBeSelected);\n        cy.get(TAKE_ACTION_POPOVER_BTN).should('exist');\n        markAcknowledgedFirstAlert();\n        const expectedNumberOfAlerts = +numberOfAlerts - numberOfAlertsToBeMarkedAcknowledged;\n        cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfAlerts} alerts`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfAlerts}`);\n        goToAcknowledgedAlerts();\n        waitForAlerts();\n        cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlertsToBeMarkedAcknowledged} alert`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${numberOfAlertsToBeMarkedAcknowledged}`);\n      });\n    });","file":"integration/detection_alerts/changing_alert_status.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Closes alerts","suites":["Changing alert status","Changing alert status with read only role"],"updatePoint":{"line":210,"column":21,"index":11073},"line":210,"code":"    it('Closes alerts', () => {\n      const numberOfAlertsToBeClosed = 3;\n      cy.get(ALERTS_COUNT).invoke('text').then(alertNumberString => {\n        const numberOfAlerts = alertNumberString.split(' ')[0];\n        cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlerts} alerts`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${numberOfAlerts}`);\n        selectNumberOfAlerts(numberOfAlertsToBeClosed);\n        cy.get(SELECTED_ALERTS).should('have.text', `Selected ${numberOfAlertsToBeClosed} alerts`);\n        closeAlerts();\n        waitForAlerts();\n        const expectedNumberOfAlertsAfterClosing = +numberOfAlerts - numberOfAlertsToBeClosed;\n        cy.get(ALERTS_COUNT).should('have.text', `${expectedNumberOfAlertsAfterClosing} alerts`);\n        cy.get(ALERT_COUNT_TABLE_FIRST_ROW_COUNT).should('have.text', `${expectedNumberOfAlertsAfterClosing}`);\n        goToClosedAlerts();\n        waitForAlerts();\n        cy.get(ALERTS_COUNT).should('have.text', `${numberOfAlertsToBeClosed} alerts`);\n      });\n    });","file":"integration/detection_alerts/changing_alert_status.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Investigate alert in default timeline","suites":["Alerts timeline"],"updatePoint":{"line":26,"column":43,"index":1190},"line":26,"code":"  it('Investigate alert in default timeline', () => {\n    investigateFirstAlertInTimeline();\n    cy.get(PROVIDER_BADGE).first().invoke('text').then(eventId => {\n      investigateFirstAlertInTimeline();\n      cy.get(PROVIDER_BADGE).filter(':visible').should('have.text', eventId);\n    });\n  });","file":"integration/detection_alerts/investigate_in_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Add a non-empty property to default timeline","suites":["Alerts timeline"],"updatePoint":{"line":33,"column":50,"index":1491},"line":33,"code":"  it('Add a non-empty property to default timeline', () => {\n    cy.get(ALERT_TABLE_SEVERITY_VALUES).first().invoke('text').then(severityVal => {\n      addAlertPropertyToTimeline(ALERT_TABLE_SEVERITY_VALUES, 0);\n      openActiveTimeline();\n      cy.get(PROVIDER_BADGE).first().should('have.text', `kibana.alert.severity: \"${severityVal}\"`);\n    });\n  });","file":"integration/detection_alerts/investigate_in_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Add an empty property to default timeline","suites":["Alerts timeline"],"updatePoint":{"line":40,"column":47,"index":1843},"line":40,"code":"  it('Add an empty property to default timeline', () => {\n    scrollAlertTableColumnIntoView(ALERT_TABLE_FILE_NAME_HEADER);\n    addAlertPropertyToTimeline(ALERT_TABLE_FILE_NAME_VALUES, 0);\n    openActiveTimeline();\n    cy.get(PROVIDER_BADGE).first().should('have.text', 'NOT file.name exists');\n  });","file":"integration/detection_alerts/investigate_in_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show one primary callout","suites":["Detections > Callouts","indicating read-only access to resources","On Detections home page"],"updatePoint":{"line":50,"column":37,"index":1940},"line":50,"code":"      it('We show one primary callout', () => {\n        waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n      });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We hide it and persist the dismissal","suites":["Detections > Callouts","indicating read-only access to resources","On Detections home page","When a user clicks Dismiss on the callout"],"updatePoint":{"line":54,"column":48,"index":2148},"line":54,"code":"        it('We hide it and persist the dismissal', () => {\n          waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n          dismissCallOut(MISSING_PRIVILEGES_CALLOUT);\n          reloadPage();\n          getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n        });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show one primary callout","suites":["Detections > Callouts","indicating read-only access to resources","On Rule Details page"],"updatePoint":{"line":73,"column":37,"index":2845},"line":73,"code":"      it('We show one primary callout', () => {\n        waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n      });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We hide them and persist the dismissal","suites":["Detections > Callouts","indicating read-only access to resources","On Rule Details page","When a user clicks Dismiss on the callouts"],"updatePoint":{"line":77,"column":50,"index":3056},"line":77,"code":"        it('We hide them and persist the dismissal', () => {\n          waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n          dismissCallOut(MISSING_PRIVILEGES_CALLOUT);\n          reloadPage();\n          getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n        });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show no callout","suites":["Detections > Callouts","indicating read-write access to resources","On Detections home page"],"updatePoint":{"line":91,"column":28,"index":3546},"line":91,"code":"      it('We show no callout', () => {\n        getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show no callout","suites":["Detections > Callouts","indicating read-write access to resources","On Rules Management page"],"updatePoint":{"line":99,"column":28,"index":3822},"line":99,"code":"      it('We show no callout', () => {\n        getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We show no callouts","suites":["Detections > Callouts","indicating read-write access to resources","On Rule Details page"],"updatePoint":{"line":113,"column":29,"index":4261},"line":113,"code":"      it('We show no callouts', () => {\n        getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n      });","file":"integration/detection_alerts/missing_privileges_callout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"opens timeline with correct query count for hosts by alert severity table","suites":["Detection response view","Open in timeline"],"updatePoint":{"line":27,"column":81,"index":1180},"line":27,"code":"    it(`opens timeline with correct query count for hosts by alert severity table`, () => {\n      cy.get(HOST_TABLE_ROW_TOTAL_ALERTS).click();\n      cy.get(QUERY_TAB_BUTTON).should('contain.text', ALERT_COUNT);\n    });","file":"integration/detection_response/open_alerts_in_timeline.spec.ts","skipped":true,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"opens timeline with correct query count for users by alert severity table","suites":["Detection response view","Open in timeline"],"updatePoint":{"line":31,"column":81,"index":1399},"line":31,"code":"    it(`opens timeline with correct query count for users by alert severity table`, () => {\n      cy.get(USER_TABLE_ROW_TOTAL_ALERTS).click();\n      cy.get(QUERY_TAB_BUTTON).should('contain.text', ALERT_COUNT);\n    });","file":"integration/detection_response/open_alerts_in_timeline.spec.ts","skipped":true,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"opens timeline with correct query count for open alerts by rule table","suites":["Detection response view","Open in timeline"],"updatePoint":{"line":35,"column":77,"index":1614},"line":35,"code":"    it(`opens timeline with correct query count for open alerts by rule table`, () => {\n      cy.get(RULE_TABLE_ROW_TOTAL_ALERTS).click();\n      cy.get(QUERY_TAB_BUTTON).should('contain.text', ALERT_COUNT);\n    });","file":"integration/detection_response/open_alerts_in_timeline.spec.ts","skipped":true,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not display select boxes for rules","suites":["All rules - read only"],"updatePoint":{"line":27,"column":45,"index":1377},"line":27,"code":"  it('Does not display select boxes for rules', () => {\n    cy.get(RULE_CHECKBOX).should('not.exist');\n  });","file":"integration/detection_rules/all_rules_read_only.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Disables value lists upload","suites":["All rules - read only"],"updatePoint":{"line":30,"column":33,"index":1474},"line":30,"code":"  it('Disables value lists upload', () => {\n    cy.get(VALUE_LISTS_MODAL_ACTIVATOR).should('be.disabled');\n  });","file":"integration/detection_rules/all_rules_read_only.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not display action options","suites":["All rules - read only"],"updatePoint":{"line":33,"column":37,"index":1591},"line":33,"code":"  it('Does not display action options', () => {\n    // These are the 3 dots at the end of the row that opens up\n    // options to take action on the rule\n    cy.get(COLLAPSED_ACTION_BTN).should('not.exist');\n  });","file":"integration/detection_rules/all_rules_read_only.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays missing privileges primary callout","suites":["All rules - read only"],"updatePoint":{"line":38,"column":49,"index":1817},"line":38,"code":"  it('Displays missing privileges primary callout', () => {\n    waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n  });","file":"integration/detection_rules/all_rules_read_only.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We hide them and persist the dismissal","suites":["All rules - read only","When a user clicks Dismiss on the callouts"],"updatePoint":{"line":42,"column":46,"index":2012},"line":42,"code":"    it('We hide them and persist the dismissal', () => {\n      waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n      dismissCallOut(MISSING_PRIVILEGES_CALLOUT);\n      cy.reload();\n      cy.get(RULE_NAME).should('have.text', getNewRule().name);\n      getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n    });","file":"integration/detection_rules/all_rules_read_only.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should show warning modal windows when some of the selected rules cannot be edited","suites":["Detection rules, bulk edit"],"updatePoint":{"line":53,"column":88,"index":3247},"line":53,"code":"  it('should show warning modal windows when some of the selected rules cannot be edited', () => {\n    createMachineLearningRule(getMachineLearningRule(), '7');\n    loadPrebuiltDetectionRulesFromHeaderBtn(); // select few Elastic rules, check if we can't proceed further, as ELastic rules are not editable\n    // filter rules, only Elastic rule to show\n\n    switchToElasticRules(); // check modal window for few selected rules\n\n    selectNumberOfRules(numberOfRulesPerPage);\n    clickAddIndexPatternsMenuItem();\n    checkElasticRulesCannotBeModified(numberOfRulesPerPage);\n    cy.get(MODAL_CONFIRMATION_BTN).click(); // Select all rules(Elastic rules and custom)\n\n    cy.get(ELASTIC_RULES_BTN).click();\n    selectAllRules();\n    clickAddIndexPatternsMenuItem();\n    waitForMixedRulesBulkEditModal(expectedNumberOfCustomRulesToBeEdited); // check rules that cannot be edited for index patterns: immutable and ML\n\n    checkElasticRulesCannotBeModified(totalNumberOfPrebuiltRules);\n    checkMachineLearningRulesCannotBeModified(expectedNumberOfMachineLearningRulesToBeEdited); // proceed with custom rule editing\n\n    cy.get(MODAL_CONFIRMATION_BTN).should('have.text', `Edit ${expectedNumberOfCustomRulesToBeEdited} custom rules`).click();\n    typeIndexPatterns([CUSTOM_INDEX_PATTERN_1]);\n    confirmBulkEditForm(); // check if rule has been updated\n\n    cy.get(CUSTOM_RULES_BTN).click();\n    cy.get(RULES_TABLE_REFRESH_INDICATOR).should('exist');\n    cy.get(RULES_TABLE_REFRESH_INDICATOR).should('not.exist');\n    goToTheRuleDetailsOf(RULE_NAME);\n    hasIndexPatterns([...DEFAULT_INDEX_PATTERNS, CUSTOM_INDEX_PATTERN_1].join(''));\n  });","file":"integration/detection_rules/bulk_edit_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should add/delete/overwrite index patterns in rules","suites":["Detection rules, bulk edit"],"updatePoint":{"line":83,"column":57,"index":4851},"line":83,"code":"  it('should add/delete/overwrite index patterns in rules', () => {\n    cy.log('Adds index patterns'); // Switch to 5(numberOfRulesPerPage) rules per page, so we can edit all existing rules, not only ones on a page\n    // this way we will use underlying bulk edit API with query parameter, which update all rules based on query search results\n\n    changeRowsPerPageTo(numberOfRulesPerPage);\n    selectAllRules();\n    openBulkEditAddIndexPatternsForm();\n    typeIndexPatterns([CUSTOM_INDEX_PATTERN_1]);\n    confirmBulkEditForm();\n    waitForBulkEditActionToFinish({\n      rulesCount: expectedNumberOfCustomRulesToBeEdited\n    }); // check if rule has been updated\n\n    changeRowsPerPageTo(20);\n    goToTheRuleDetailsOf(RULE_NAME);\n    hasIndexPatterns([...DEFAULT_INDEX_PATTERNS, CUSTOM_INDEX_PATTERN_1].join(''));\n    cy.go('back');\n    cy.log('Deletes index patterns'); // select all rules on page (as page displays all existing rules).\n    // this way we will use underlying bulk edit API with ids parameter, which updates rules based their ids\n\n    cy.get(SELECT_ALL_RULES_ON_PAGE_CHECKBOX).click();\n    openBulkEditDeleteIndexPatternsForm();\n    typeIndexPatterns([CUSTOM_INDEX_PATTERN_1]);\n    confirmBulkEditForm();\n    waitForBulkEditActionToFinish({\n      rulesCount: expectedNumberOfCustomRulesToBeEdited\n    }); // check if rule has been updated\n\n    goToTheRuleDetailsOf(RULE_NAME);\n    hasIndexPatterns(DEFAULT_INDEX_PATTERNS.join(''));\n    cy.go('back');\n    cy.log('Overwrites index patterns');\n    cy.get(SELECT_ALL_RULES_ON_PAGE_CHECKBOX).click();\n    openBulkEditAddIndexPatternsForm();\n    cy.get(RULES_BULK_EDIT_OVERWRITE_INDEX_PATTERNS_CHECKBOX).should('have.text', \"Overwrite all selected rules' index patterns\").click();\n    cy.get(RULES_BULK_EDIT_INDEX_PATTERNS_WARNING).should('have.text', `You’re about to overwrite index patterns for ${expectedNumberOfCustomRulesToBeEdited} selected rules, press Save to apply changes.`);\n    typeIndexPatterns(OVERWRITE_INDEX_PATTERNS);\n    confirmBulkEditForm();\n    waitForBulkEditActionToFinish({\n      rulesCount: expectedNumberOfCustomRulesToBeEdited\n    }); // check if rule has been updated\n\n    goToTheRuleDetailsOf(RULE_NAME);\n    hasIndexPatterns(OVERWRITE_INDEX_PATTERNS.join(''));\n  });","file":"integration/detection_rules/bulk_edit_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should add/delete/overwrite tags in rules","suites":["Detection rules, bulk edit"],"updatePoint":{"line":128,"column":47,"index":7101},"line":128,"code":"  it('should add/delete/overwrite tags in rules', () => {\n    cy.log('Add tags to all rules'); // Switch to 5(numberOfRulesPerPage) rules per page, so we can edit all existing rules, not only ones on a page\n    // this way we will use underlying bulk edit API with query parameter, which update all rules based on query search results\n\n    changeRowsPerPageTo(numberOfRulesPerPage);\n    selectAllRules(); // open add tags form and add 2 new tags\n\n    openBulkEditAddTagsForm();\n    typeTags(TAGS);\n    confirmBulkEditForm();\n    waitForBulkEditActionToFinish({\n      rulesCount: expectedNumberOfCustomRulesToBeEdited\n    }); // check if all rules have been updated with new tags\n\n    changeRowsPerPageTo(20);\n    testAllTagsBadges(TAGS); // test how many tags exist and displayed in filter button\n\n    cy.get(RULES_TAGS_FILTER_BTN).contains(/Tags2/);\n    cy.log('Remove one tag from all rules'); // select all rules on page (as page displays all existing rules).\n    // this way we will use underlying bulk edit API with query parameter, which update all rules based on query search results\n\n    cy.get(SELECT_ALL_RULES_ON_PAGE_CHECKBOX).click();\n    openBulkEditDeleteTagsForm();\n    typeTags([TAGS[0]]);\n    confirmBulkEditForm();\n    waitForBulkEditActionToFinish({\n      rulesCount: expectedNumberOfCustomRulesToBeEdited\n    });\n    testAllTagsBadges(TAGS.slice(1));\n    cy.get(RULES_TAGS_FILTER_BTN).contains(/Tags1/);\n    cy.log('Overwrite all tags');\n    openBulkEditAddTagsForm();\n    cy.get(RULES_BULK_EDIT_OVERWRITE_TAGS_CHECKBOX).should('have.text', \"Overwrite all selected rules' tags\").click();\n    cy.get(RULES_BULK_EDIT_TAGS_WARNING).should('have.text', `You’re about to overwrite tags for ${expectedNumberOfCustomRulesToBeEdited} selected rules, press Save to apply changes.`);\n    typeTags(['overwrite-tag']);\n    confirmBulkEditForm();\n    waitForBulkEditActionToFinish({\n      rulesCount: expectedNumberOfCustomRulesToBeEdited\n    });\n    testAllTagsBadges(['overwrite-tag']);\n  });","file":"integration/detection_rules/bulk_edit_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should not lose rules selection after edit action","suites":["Detection rules, bulk edit"],"updatePoint":{"line":169,"column":55,"index":9111},"line":169,"code":"  it('should not lose rules selection after edit action', () => {\n    const rulesCount = 4; // Switch to 5 rules per page, to have few pages in pagination(ideal way to test auto refresh and selection of few items)\n\n    changeRowsPerPageTo(numberOfRulesPerPage);\n    selectNumberOfRules(rulesCount); // open add tags form and add 2 new tags\n\n    openBulkEditAddTagsForm();\n    typeTags(TAGS);\n    confirmBulkEditForm();\n    waitForBulkEditActionToFinish({\n      rulesCount\n    });\n    testMultipleSelectedRulesLabel(rulesCount); // check if first four(rulesCount) rules still selected and tags are updated\n\n    for (let i = 0; i < rulesCount; i += 1) {\n      cy.get(RULE_CHECKBOX).eq(i).should('be.checked');\n      cy.get(RULES_TAGS_POPOVER_BTN).eq(i).each($el => {\n        testTagsBadge($el, TAGS);\n      });\n    }\n  });","file":"integration/detection_rules/bulk_edit_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and enables a new rule","suites":["Custom query rules","Custom detection rules creation with data views"],"updatePoint":{"line":49,"column":38,"index":3119},"line":49,"code":"    it('Creates and enables a new rule', function () {\n      visit(RULE_CREATION);\n      fillDefineCustomRuleWithImportedQueryAndContinue(this.rule);\n      fillAboutRuleAndContinue(this.rule);\n      fillScheduleRuleAndContinue(this.rule);\n      createAndEnableRule();\n      cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n      cy.get(RULES_TABLE).find(RULES_ROW).should('have.length', expectedNumberOfRules);\n      cy.get(RULE_NAME).should('have.text', this.rule.name);\n      cy.get(RISK_SCORE).should('have.text', this.rule.riskScore);\n      cy.get(SEVERITY).should('have.text', this.rule.severity);\n      cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n      goToRuleDetails();\n      cy.get(RULE_NAME_HEADER).should('contain', `${this.rule.name}`);\n      cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', this.rule.description);\n      cy.get(ABOUT_DETAILS).within(() => {\n        getDetails(SEVERITY_DETAILS).should('have.text', this.rule.severity);\n        getDetails(RISK_SCORE_DETAILS).should('have.text', this.rule.riskScore);\n        getDetails(REFERENCE_URLS_DETAILS).should(details => {\n          expect(removeExternalLinkText(details.text())).equal(expectedUrls);\n        });\n        getDetails(FALSE_POSITIVES_DETAILS).should('have.text', expectedFalsePositives);\n        getDetails(MITRE_ATTACK_DETAILS).should(mitre => {\n          expect(removeExternalLinkText(mitre.text())).equal(expectedMitre);\n        });\n        getDetails(TAGS_DETAILS).should('have.text', expectedTags);\n      });\n      cy.get(INVESTIGATION_NOTES_TOGGLE).click({\n        force: true\n      });\n      cy.get(ABOUT_INVESTIGATION_NOTES).should('have.text', INVESTIGATION_NOTES_MARKDOWN);\n      cy.get(DEFINITION_DETAILS).within(() => {\n        getDetails(DATA_VIEW_DETAILS).should('have.text', this.rule.dataSource.dataView);\n        getDetails(CUSTOM_QUERY_DETAILS).should('have.text', this.rule.customQuery);\n        getDetails(RULE_TYPE_DETAILS).should('have.text', 'Query');\n        getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n      });\n      cy.get(DEFINITION_DETAILS).should('not.contain', INDEX_PATTERNS_DETAILS);\n      cy.get(SCHEDULE_DETAILS).within(() => {\n        getDetails(RUNS_EVERY_DETAILS).should('have.text', `${getDataViewRule().runsEvery.interval}${getDataViewRule().runsEvery.type}`);\n        getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', `${getDataViewRule().lookBack.interval}${getDataViewRule().lookBack.type}`);\n      });\n      waitForTheRuleToBeExecuted();\n      waitForAlertsToPopulate();\n      cy.get(NUMBER_OF_ALERTS).invoke('text').should('match', /^[1-9].+$/);\n      cy.get(ALERT_GRID_CELL).contains(this.rule.name);\n    });","file":"integration/detection_rules/custom_query_rule_data_view.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and enables a new rule","suites":["Custom query rules","Custom detection rules creation"],"updatePoint":{"line":43,"column":38,"index":3512},"line":43,"code":"    it('Creates and enables a new rule', function () {\n      visit(RULE_CREATION);\n      fillDefineCustomRuleWithImportedQueryAndContinue(this.rule);\n      fillAboutRuleAndContinue(this.rule);\n      fillScheduleRuleAndContinue(this.rule); // expect define step to repopulate\n\n      cy.get(DEFINE_EDIT_BUTTON).click();\n      cy.get(CUSTOM_QUERY_INPUT).should('have.value', this.rule.customQuery);\n      cy.get(DEFINE_CONTINUE_BUTTON).should('exist').click({\n        force: true\n      });\n      cy.get(DEFINE_CONTINUE_BUTTON).should('not.exist'); // expect about step to populate\n\n      cy.get(ABOUT_EDIT_BUTTON).click();\n      cy.get(RULE_NAME_INPUT).invoke('val').should('eql', this.rule.name);\n      cy.get(ABOUT_CONTINUE_BTN).should('exist').click({\n        force: true\n      });\n      cy.get(ABOUT_CONTINUE_BTN).should('not.exist');\n      createAndEnableRule();\n      cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n      cy.get(RULES_TABLE).find(RULES_ROW).should('have.length', expectedNumberOfRules);\n      cy.get(RULE_NAME).should('have.text', this.rule.name);\n      cy.get(RISK_SCORE).should('have.text', this.rule.riskScore);\n      cy.get(SEVERITY).should('have.text', this.rule.severity);\n      cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n      goToRuleDetails();\n      cy.get(RULE_NAME_HEADER).should('contain', `${this.rule.name}`);\n      cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', this.rule.description);\n      cy.get(ABOUT_DETAILS).within(() => {\n        getDetails(SEVERITY_DETAILS).should('have.text', this.rule.severity);\n        getDetails(RISK_SCORE_DETAILS).should('have.text', this.rule.riskScore);\n        getDetails(REFERENCE_URLS_DETAILS).should(details => {\n          expect(removeExternalLinkText(details.text())).equal(expectedUrls);\n        });\n        getDetails(FALSE_POSITIVES_DETAILS).should('have.text', expectedFalsePositives);\n        getDetails(MITRE_ATTACK_DETAILS).should(mitre => {\n          expect(removeExternalLinkText(mitre.text())).equal(expectedMitre);\n        });\n        getDetails(TAGS_DETAILS).should('have.text', expectedTags);\n      });\n      cy.get(INVESTIGATION_NOTES_TOGGLE).click({\n        force: true\n      });\n      cy.get(ABOUT_INVESTIGATION_NOTES).should('have.text', INVESTIGATION_NOTES_MARKDOWN);\n      cy.get(DEFINITION_DETAILS).within(() => {\n        getDetails(INDEX_PATTERNS_DETAILS).should('have.text', getIndexPatterns().join(''));\n        getDetails(CUSTOM_QUERY_DETAILS).should('have.text', this.rule.customQuery);\n        getDetails(RULE_TYPE_DETAILS).should('have.text', 'Query');\n        getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n      });\n      cy.get(SCHEDULE_DETAILS).within(() => {\n        getDetails(RUNS_EVERY_DETAILS).should('have.text', `${getNewRule().runsEvery.interval}${getNewRule().runsEvery.type}`);\n        getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', `${getNewRule().lookBack.interval}${getNewRule().lookBack.type}`);\n      });\n      waitForTheRuleToBeExecuted();\n      waitForAlertsToPopulate();\n      cy.get(NUMBER_OF_ALERTS).invoke('text').should('match', /^[1-9].+$/); // Any number of alerts\n\n      cy.get(ALERT_GRID_CELL).contains(this.rule.name);\n    });","file":"integration/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes one rule","suites":["Custom query rules","Custom detection rules deletion and edition","Deletion"],"updatePoint":{"line":114,"column":26,"index":7137},"line":114,"code":"      it('Deletes one rule', () => {\n        cy.get(RULES_TABLE).find(RULES_ROW).then(rules => {\n          const initialNumberOfRules = rules.length;\n          const expectedNumberOfRulesAfterDeletion = initialNumberOfRules - 1;\n          cy.request({\n            url: '/api/detection_engine/rules/_find'\n          }).then(({\n            body\n          }) => {\n            const numberOfRules = body.data.length;\n            expect(numberOfRules).to.eql(initialNumberOfRules);\n          });\n          deleteFirstRule();\n          waitForRulesTableToBeRefreshed();\n          cy.get(RULES_TABLE).find(RULES_ROW).should('have.length', expectedNumberOfRulesAfterDeletion);\n          cy.request({\n            url: '/api/detection_engine/rules/_find'\n          }).then(({\n            body\n          }) => {\n            const numberOfRules = body.data.length;\n            expect(numberOfRules).to.eql(expectedNumberOfRulesAfterDeletion);\n          });\n          cy.get(CUSTOM_RULES_BTN).should('have.text', `Custom rules (${expectedNumberOfRulesAfterDeletion})`);\n        });\n      });","file":"integration/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes more than one rule","suites":["Custom query rules","Custom detection rules deletion and edition","Deletion"],"updatePoint":{"line":140,"column":36,"index":8226},"line":140,"code":"      it('Deletes more than one rule', () => {\n        cy.get(RULES_TABLE).find(RULES_ROW).then(rules => {\n          const initialNumberOfRules = rules.length;\n          const numberOfRulesToBeDeleted = 2;\n          const expectedNumberOfRulesAfterDeletion = initialNumberOfRules - numberOfRulesToBeDeleted;\n          selectNumberOfRules(numberOfRulesToBeDeleted);\n          deleteSelectedRules();\n          waitForRulesTableToBeRefreshed();\n          cy.get(RULES_TABLE).find(RULES_ROW).should('have.length', expectedNumberOfRulesAfterDeletion);\n          cy.request({\n            url: '/api/detection_engine/rules/_find'\n          }).then(({\n            body\n          }) => {\n            const numberOfRules = body.data.length;\n            expect(numberOfRules).to.eql(expectedNumberOfRulesAfterDeletion);\n          });\n          cy.get(CUSTOM_RULES_BTN).should('have.text', `Custom rules (${expectedNumberOfRulesAfterDeletion})`);\n        });\n      });","file":"integration/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes one rule from detail page","suites":["Custom query rules","Custom detection rules deletion and edition","Deletion"],"updatePoint":{"line":160,"column":43,"index":9190},"line":160,"code":"      it('Deletes one rule from detail page', () => {\n        cy.get(RULES_TABLE).find(RULES_ROW).then(rules => {\n          const initialNumberOfRules = rules.length;\n          const expectedNumberOfRulesAfterDeletion = initialNumberOfRules - 1;\n          goToRuleDetails();\n          cy.intercept('POST', '/api/detection_engine/rules/_bulk_delete').as('deleteRule');\n          deleteRuleFromDetailsPage();\n          cy.waitFor('@deleteRule').then(() => {\n            cy.get(RULES_TABLE).should('exist');\n            cy.get(RULES_TABLE).find(RULES_ROW).should('have.length', expectedNumberOfRulesAfterDeletion);\n            cy.request({\n              url: '/api/detection_engine/rules/_find'\n            }).then(({\n              body\n            }) => {\n              const numberOfRules = body.data.length;\n              expect(numberOfRules).to.eql(expectedNumberOfRulesAfterDeletion);\n            });\n            cy.get(CUSTOM_RULES_BTN).should('have.text', `Custom rules (${expectedNumberOfRulesAfterDeletion})`);\n          });\n        });\n      });","file":"integration/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Only modifies rule active status on enable/disable","suites":["Custom query rules","Custom detection rules deletion and edition","Edition"],"updatePoint":{"line":194,"column":60,"index":10781},"line":194,"code":"      it('Only modifies rule active status on enable/disable', () => {\n        enablesRule();\n        cy.intercept('GET', `/api/detection_engine/rules?id=*`).as('fetchRuleDetails');\n        goToRuleDetails();\n        cy.wait('@fetchRuleDetails').then(({\n          response\n        }) => {\n          cy.wrap(response?.statusCode).should('eql', 200);\n          cy.wrap(response?.body.max_signals).should('eql', getExistingRule().maxSignals);\n          cy.wrap(response?.body.enabled).should('eql', false);\n        });\n      });","file":"integration/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows a rule to be edited","suites":["Custom query rules","Custom detection rules deletion and edition","Edition"],"updatePoint":{"line":206,"column":36,"index":11283},"line":206,"code":"      it('Allows a rule to be edited', () => {\n        const existingRule = getExistingRule();\n        editFirstRule(); // expect define step to populate\n\n        cy.get(CUSTOM_QUERY_INPUT).should('have.value', existingRule.customQuery);\n\n        if (existingRule.dataSource.type === 'indexPatterns' && existingRule.dataSource.index.length > 0) {\n          cy.get(DEFINE_INDEX_INPUT).should('have.text', existingRule.dataSource.index.join(''));\n        }\n\n        goToAboutStepTab(); // expect about step to populate\n\n        cy.get(RULE_NAME_INPUT).invoke('val').should('eql', existingRule.name);\n        cy.get(RULE_DESCRIPTION_INPUT).should('have.text', existingRule.description);\n        cy.get(TAGS_FIELD).should('have.text', existingRule.tags.join(''));\n        cy.get(SEVERITY_DROPDOWN).should('have.text', existingRule.severity);\n        cy.get(DEFAULT_RISK_SCORE_INPUT).invoke('val').should('eql', existingRule.riskScore);\n        goToScheduleStepTab(); // expect schedule step to populate\n\n        const interval = existingRule.interval;\n        const intervalParts = interval != null && interval.match(/[0-9]+|[a-zA-Z]+/g);\n\n        if (intervalParts) {\n          const [amount, unit] = intervalParts;\n          cy.get(SCHEDULE_INTERVAL_AMOUNT_INPUT).invoke('val').should('eql', amount);\n          cy.get(SCHEDULE_INTERVAL_UNITS_INPUT).invoke('val').should('eql', unit);\n        } else {\n          throw new Error('Cannot assert scheduling info on a rule without an interval');\n        }\n\n        goToActionsStepTab();\n        cy.get(ACTIONS_THROTTLE_INPUT).invoke('val').should('eql', 'no_actions');\n        cy.get(ACTIONS_THROTTLE_INPUT).select('Weekly');\n        cy.get(EMAIL_ACTION_BTN).click();\n        cy.get(CREATE_ACTION_CONNECTOR_BTN).click();\n        fillEmailConnectorForm();\n        cy.get(SAVE_ACTION_CONNECTOR_BTN).click();\n        cy.get(EMAIL_ACTION_TO_INPUT).type('test@example.com');\n        cy.get(EMAIL_ACTION_SUBJECT_INPUT).type('Subject');\n        cy.get(FROM_VALIDATION_ERROR).should('not.exist');\n        goToAboutStepTab();\n        cy.get(TAGS_CLEAR_BUTTON).click({\n          force: true\n        });\n        fillAboutRule(getEditedRule());\n        cy.intercept('GET', '/api/detection_engine/rules?id*').as('getRule');\n        saveEditedRule();\n        cy.wait('@getRule').then(({\n          response\n        }) => {\n          cy.wrap(response?.statusCode).should('eql', 200); // ensure that editing rule does not modify max_signals\n\n          cy.wrap(response?.body.max_signals).should('eql', existingRule.maxSignals);\n        });\n        cy.get(RULE_NAME_HEADER).should('contain', `${getEditedRule().name}`);\n        cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', getEditedRule().description);\n        cy.get(ABOUT_DETAILS).within(() => {\n          getDetails(SEVERITY_DETAILS).should('have.text', getEditedRule().severity);\n          getDetails(RISK_SCORE_DETAILS).should('have.text', getEditedRule().riskScore);\n          getDetails(TAGS_DETAILS).should('have.text', expectedEditedtags);\n        });\n        cy.get(INVESTIGATION_NOTES_TOGGLE).click({\n          force: true\n        });\n        cy.get(ABOUT_INVESTIGATION_NOTES).should('have.text', getEditedRule().note);\n        cy.get(DEFINITION_DETAILS).within(() => {\n          getDetails(INDEX_PATTERNS_DETAILS).should('have.text', expectedEditedIndexPatterns?.join(''));\n          getDetails(CUSTOM_QUERY_DETAILS).should('have.text', getEditedRule().customQuery);\n          getDetails(RULE_TYPE_DETAILS).should('have.text', 'Query');\n          getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n        });\n\n        if (getEditedRule().interval) {\n          cy.get(SCHEDULE_DETAILS).within(() => {\n            getDetails(RUNS_EVERY_DETAILS).should('have.text', getEditedRule().interval);\n          });\n        }\n      });","file":"integration/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and enables a new EQL rule","suites":["EQL rules","Detection rules, EQL"],"updatePoint":{"line":42,"column":42,"index":2680},"line":42,"code":"    it('Creates and enables a new EQL rule', function () {\n      visit(RULE_CREATION);\n      selectEqlRuleType();\n      fillDefineEqlRuleAndContinue(this.rule);\n      fillAboutRuleAndContinue(this.rule);\n      fillScheduleRuleAndContinue(this.rule);\n      createAndEnableRule();\n      cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n      cy.get(RULES_TABLE).then($table => {\n        cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRules);\n      });\n      cy.get(RULE_NAME).should('have.text', this.rule.name);\n      cy.get(RISK_SCORE).should('have.text', this.rule.riskScore);\n      cy.get(SEVERITY).should('have.text', this.rule.severity);\n      cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n      goToRuleDetails();\n      cy.get(RULE_NAME_HEADER).should('contain', `${this.rule.name}`);\n      cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', this.rule.description);\n      cy.get(ABOUT_DETAILS).within(() => {\n        getDetails(SEVERITY_DETAILS).should('have.text', this.rule.severity);\n        getDetails(RISK_SCORE_DETAILS).should('have.text', this.rule.riskScore);\n        getDetails(REFERENCE_URLS_DETAILS).should(details => {\n          expect(removeExternalLinkText(details.text())).equal(expectedUrls);\n        });\n        getDetails(FALSE_POSITIVES_DETAILS).should('have.text', expectedFalsePositives);\n        getDetails(MITRE_ATTACK_DETAILS).should(mitre => {\n          expect(removeExternalLinkText(mitre.text())).equal(expectedMitre);\n        });\n        getDetails(TAGS_DETAILS).should('have.text', expectedTags);\n      });\n      cy.get(INVESTIGATION_NOTES_TOGGLE).click({\n        force: true\n      });\n      cy.get(ABOUT_INVESTIGATION_NOTES).should('have.text', INVESTIGATION_NOTES_MARKDOWN);\n      cy.get(DEFINITION_DETAILS).within(() => {\n        getDetails(INDEX_PATTERNS_DETAILS).should('have.text', getIndexPatterns().join(''));\n        getDetails(CUSTOM_QUERY_DETAILS).should('have.text', this.rule.customQuery);\n        getDetails(RULE_TYPE_DETAILS).should('have.text', 'Event Correlation');\n        getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n      });\n      cy.get(SCHEDULE_DETAILS).within(() => {\n        getDetails(RUNS_EVERY_DETAILS).should('have.text', `${this.rule.runsEvery.interval}${this.rule.runsEvery.type}`);\n        getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', `${this.rule.lookBack.interval}${this.rule.lookBack.type}`);\n      });\n      waitForTheRuleToBeExecuted();\n      waitForAlertsToPopulate();\n      cy.get(NUMBER_OF_ALERTS).should('have.text', expectedNumberOfAlerts);\n      cy.get(ALERT_DATA_GRID).invoke('text').then(text => {\n        expect(text).contains(this.rule.name);\n        expect(text).contains(this.rule.severity.toLowerCase());\n        expect(text).contains(this.rule.riskScore);\n      });\n    });","file":"integration/detection_rules/event_correlation_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and enables a new EQL rule with a sequence","suites":["EQL rules","Detection rules, sequence EQL"],"updatePoint":{"line":113,"column":58,"index":6117},"line":113,"code":"    it('Creates and enables a new EQL rule with a sequence', function () {\n      visit(RULE_CREATION);\n      selectEqlRuleType();\n      fillDefineEqlRuleAndContinue(this.rule);\n      fillAboutRuleAndContinue(this.rule);\n      fillScheduleRuleAndContinue(this.rule);\n      createAndEnableRule();\n      goToTheRuleDetailsOf(this.rule.name);\n      waitForTheRuleToBeExecuted();\n      waitForAlertsToPopulate();\n      cy.get(NUMBER_OF_ALERTS).should('have.text', expectedNumberOfSequenceAlerts);\n      cy.get(ALERT_DATA_GRID).invoke('text').then(text => {\n        cy.log('ALERT_DATA_GRID', text);\n        expect(text).contains(this.rule.name);\n        expect(text).contains(this.rule.severity.toLowerCase());\n      });\n    });","file":"integration/detection_rules/event_correlation_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Exports a custom rule","suites":["Export rules"],"updatePoint":{"line":29,"column":27,"index":1548},"line":29,"code":"  it('Exports a custom rule', function () {\n    exportFirstRule();\n    cy.wait('@bulk_action').then(({\n      response\n    }) => {\n      cy.wrap(response?.body).should('eql', expectedExportedRule(this.ruleResponse));\n      cy.get(TOASTER_BODY).should('have.text', 'Successfully exported 1 of 1 rule.');\n    });\n  });","file":"integration/detection_rules/export_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"shows a modal saying that no rules can be exported if all the selected rules are prebuilt","suites":["Export rules"],"updatePoint":{"line":38,"column":95,"index":1932},"line":38,"code":"  it('shows a modal saying that no rules can be exported if all the selected rules are prebuilt', function () {\n    const expectedElasticRulesCount = 7;\n    loadPrebuiltDetectionRulesFromHeaderBtn();\n    switchToElasticRules();\n    selectNumberOfRules(expectedElasticRulesCount);\n    bulkExportRules();\n    cy.get(MODAL_CONFIRMATION_BODY).contains(`${expectedElasticRulesCount} prebuilt Elastic rules (exporting prebuilt rules is not supported)`);\n  });","file":"integration/detection_rules/export_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"exports only custom rules","suites":["Export rules"],"updatePoint":{"line":46,"column":31,"index":2322},"line":46,"code":"  it('exports only custom rules', function () {\n    const expectedNumberCustomRulesToBeExported = 1;\n    const totalNumberOfRules = expectedNumberCustomRulesToBeExported + totalNumberOfPrebuiltRules;\n    loadPrebuiltDetectionRulesFromHeaderBtn();\n    selectAllRules();\n    bulkExportRules();\n    cy.get(MODAL_CONFIRMATION_BODY).contains(`${totalNumberOfPrebuiltRules} prebuilt Elastic rules (exporting prebuilt rules is not supported)`); // proceed with exporting only custom rules\n\n    cy.get(MODAL_CONFIRMATION_BTN).should('have.text', `Export ${expectedNumberCustomRulesToBeExported} custom rule`).click();\n    cy.get(TOASTER_BODY).should('contain', `Successfully exported ${expectedNumberCustomRulesToBeExported} of ${totalNumberOfRules} rules. Prebuilt rules were excluded from the resulting file.`);\n  });","file":"integration/detection_rules/export_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"exports custom rules with exceptions","suites":["Export rules","rules with exceptions"],"updatePoint":{"line":71,"column":44,"index":3707},"line":71,"code":"    it('exports custom rules with exceptions', function () {\n      // one rule with exception, one without it\n      const expectedNumberCustomRulesToBeExported = 2;\n      loadPrebuiltDetectionRulesFromHeaderBtn();\n      selectAllRules();\n      bulkExportRules(); // should display correct number of custom rules when one of them has exceptions\n\n      cy.get(MODAL_CONFIRMATION_BTN).should('have.text', `Export ${expectedNumberCustomRulesToBeExported} custom rules`).click();\n      cy.get(TOASTER_BODY).should('contain', `Successfully exported ${expectedNumberCustomRulesToBeExported}`);\n    });","file":"integration/detection_rules/export_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Imports a custom rule with exceptions","suites":["Import rules"],"updatePoint":{"line":22,"column":43,"index":955},"line":22,"code":"  it('Imports a custom rule with exceptions', function () {\n    importRules('7_16_rules.ndjson');\n    cy.wait('@import').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      cy.get(TOASTER).should('have.text', 'Successfully imported 1 ruleSuccessfully imported 2 exceptions.');\n    });\n  });","file":"integration/detection_rules/import_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows error toaster when trying to import rule and exception list that already exist","suites":["Import rules"],"updatePoint":{"line":31,"column":90,"index":1338},"line":31,"code":"  it('Shows error toaster when trying to import rule and exception list that already exist', function () {\n    importRules('7_16_rules.ndjson');\n    cy.wait('@import').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n    });\n    reload();\n    importRules('7_16_rules.ndjson');\n    cy.wait('@import').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      cy.get(TOASTER).should('have.text', 'Failed to import 1 ruleFailed to import 2 exceptions');\n    });\n  });","file":"integration/detection_rules/import_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not show error toaster when trying to import rule and exception list that already exist when overwrite is true","suites":["Import rules"],"updatePoint":{"line":47,"column":121,"index":1915},"line":47,"code":"  it('Does not show error toaster when trying to import rule and exception list that already exist when overwrite is true', function () {\n    importRules('7_16_rules.ndjson');\n    cy.wait('@import').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n    });\n    reload();\n    importRulesWithOverwriteAll('7_16_rules.ndjson');\n    cy.wait('@import').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      cy.get(TOASTER).should('have.text', 'Successfully imported 1 ruleSuccessfully imported 2 exceptions.');\n    });\n  });","file":"integration/detection_rules/import_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Contains a predefined index pattern","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Index patterns"],"updatePoint":{"line":50,"column":47,"index":4222},"line":50,"code":"        it('Contains a predefined index pattern', () => {\n          getIndicatorIndex().should('have.text', getIndexPatterns().join(''));\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does NOT show invalidation text on initial page load if indicator index pattern is filled out","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Index patterns"],"updatePoint":{"line":53,"column":105,"index":4430},"line":53,"code":"        it('Does NOT show invalidation text on initial page load if indicator index pattern is filled out', () => {\n          getDefineContinueButton().click();\n          getIndexPatternInvalidationText().should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text when you try to continue without filling it out","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Index patterns"],"updatePoint":{"line":57,"column":83,"index":4646},"line":57,"code":"        it('Shows invalidation text when you try to continue without filling it out', () => {\n          getIndexPatternClearButton().click();\n          getIndicatorIndicatorIndex().type(`{backspace}{enter}`);\n          getDefineContinueButton().click();\n          getIndexPatternInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Contains a predefined index pattern","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator index patterns"],"updatePoint":{"line":69,"column":47,"index":5119},"line":69,"code":"        it('Contains a predefined index pattern', () => {\n          getIndicatorIndicatorIndex().should('have.text', getThreatIndexPatterns().join(''));\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does NOT show invalidation text on initial page load","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator index patterns"],"updatePoint":{"line":72,"column":64,"index":5301},"line":72,"code":"        it('Does NOT show invalidation text on initial page load', () => {\n          getIndexPatternInvalidationText().should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text if you try to continue without filling it out","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator index patterns"],"updatePoint":{"line":75,"column":81,"index":5470},"line":75,"code":"        it('Shows invalidation text if you try to continue without filling it out', () => {\n          getIndicatorIndicatorIndex().type(`{backspace}{enter}`);\n          getDefineContinueButton().click();\n          getIndexPatternInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Has a default set of *:*","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","custom query input"],"updatePoint":{"line":86,"column":36,"index":5878},"line":86,"code":"        it('Has a default set of *:*', () => {\n          getCustomQueryInput().should('have.text', '*:*');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text if text is removed","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","custom query input"],"updatePoint":{"line":89,"column":54,"index":6015},"line":89,"code":"        it('Shows invalidation text if text is removed', () => {\n          getCustomQueryInput().type('{selectall}{del}');\n          getCustomQueryInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Has a default set of ","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","custom indicator query input"],"updatePoint":{"line":99,"column":62,"index":6404},"line":99,"code":"        it(`Has a default set of ${DEFAULT_THREAT_MATCH_QUERY}`, () => {\n          getCustomIndicatorQueryInput().should('have.text', DEFAULT_THREAT_MATCH_QUERY);\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text if text is removed","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","custom indicator query input"],"updatePoint":{"line":102,"column":54,"index":6571},"line":102,"code":"        it('Shows invalidation text if text is removed', () => {\n          getCustomIndicatorQueryInput().type('{selectall}{del}');\n          getCustomQueryInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does NOT show invalidation text on initial page load","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":117,"column":64,"index":7185},"line":117,"code":"        it('Does NOT show invalidation text on initial page load', () => {\n          getIndicatorInvalidationText().should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text when you try to press continue without filling anything out","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":120,"column":95,"index":7365},"line":120,"code":"        it('Shows invalidation text when you try to press continue without filling anything out', () => {\n          getDefineContinueButton().click();\n          getIndicatorAtLeastOneInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text when the \"AND\" button is pressed and both the mappings are blank","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":124,"column":100,"index":7601},"line":124,"code":"        it('Shows invalidation text when the \"AND\" button is pressed and both the mappings are blank', () => {\n          getIndicatorAndButton().click();\n          getIndicatorInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text when the \"OR\" button is pressed and both the mappings are blank","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":128,"column":99,"index":7824},"line":128,"code":"        it('Shows invalidation text when the \"OR\" button is pressed and both the mappings are blank', () => {\n          getIndicatorOrButton().click();\n          getIndicatorInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does NOT show invalidation text when there is a valid \"index field\" and a valid \"indicator index field\"","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":132,"column":115,"index":8062},"line":132,"code":"        it('Does NOT show invalidation text when there is a valid \"index field\" and a valid \"indicator index field\"', () => {\n          fillIndicatorMatchRow({\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField\n          });\n          getDefineContinueButton().click();\n          getIndicatorInvalidationText().should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text when there is an invalid \"index field\" and a valid \"indicator index field\"","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":140,"column":110,"index":8506},"line":140,"code":"        it('Shows invalidation text when there is an invalid \"index field\" and a valid \"indicator index field\"', () => {\n          fillIndicatorMatchRow({\n            indexField: 'non-existent-value',\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField,\n            validColumns: 'indicatorField'\n          });\n          getDefineContinueButton().click();\n          getIndicatorInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows invalidation text when there is a valid \"index field\" and an invalid \"indicator index field\"","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":149,"column":110,"index":8961},"line":149,"code":"        it('Shows invalidation text when there is a valid \"index field\" and an invalid \"indicator index field\"', () => {\n          fillIndicatorMatchRow({\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: 'non-existent-value',\n            validColumns: 'indexField'\n          });\n          getDefineContinueButton().click();\n          getIndicatorInvalidationText().should('exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes the first row when you have two rows. Both rows valid rows of \"index fields\" and valid \"indicator index fields\". The second row should become the first row","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":158,"column":175,"index":9479},"line":158,"code":"        it('Deletes the first row when you have two rows. Both rows valid rows of \"index fields\" and valid \"indicator index fields\". The second row should become the first row', () => {\n          fillIndicatorMatchRow({\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField\n          });\n          getIndicatorAndButton().click();\n          fillIndicatorMatchRow({\n            rowNumber: 2,\n            indexField: 'agent.name',\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField,\n            validColumns: 'indicatorField'\n          });\n          getIndicatorDeleteButton().click();\n          getIndicatorIndexComboField().should('have.text', 'agent.name');\n          getIndicatorMappingComboField().should('have.text', getNewThreatIndicatorRule().indicatorIndexField);\n          getIndicatorIndexComboField(2).should('not.exist');\n          getIndicatorMappingComboField(2).should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes the first row when you have two rows. Both rows have valid \"index fields\" and invalid \"indicator index fields\". The second row should become the first row","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":176,"column":174,"index":10519},"line":176,"code":"        it('Deletes the first row when you have two rows. Both rows have valid \"index fields\" and invalid \"indicator index fields\". The second row should become the first row', () => {\n          fillIndicatorMatchRow({\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: 'non-existent-value',\n            validColumns: 'indexField'\n          });\n          getIndicatorAndButton().click();\n          fillIndicatorMatchRow({\n            rowNumber: 2,\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: 'second-non-existent-value',\n            validColumns: 'indexField'\n          });\n          getIndicatorDeleteButton().click();\n          getIndicatorMappingComboField().should('have.text', 'second-non-existent-value');\n          getIndicatorIndexComboField(2).should('not.exist');\n          getIndicatorMappingComboField(2).should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes the first row when you have two rows. Both rows have valid \"indicator index fields\" and invalid \"index fields\". The second row should become the first row","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":194,"column":174,"index":11490},"line":194,"code":"        it('Deletes the first row when you have two rows. Both rows have valid \"indicator index fields\" and invalid \"index fields\". The second row should become the first row', () => {\n          fillIndicatorMatchRow({\n            indexField: 'non-existent-value',\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField,\n            validColumns: 'indicatorField'\n          });\n          getIndicatorAndButton().click();\n          fillIndicatorMatchRow({\n            rowNumber: 2,\n            indexField: 'second-non-existent-value',\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField,\n            validColumns: 'indicatorField'\n          });\n          getIndicatorDeleteButton().click();\n          getIndicatorIndexComboField().should('have.text', 'second-non-existent-value');\n          getIndicatorIndexComboField(2).should('not.exist');\n          getIndicatorMappingComboField(2).should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes the first row of data but not the UI elements and the text defaults back to the placeholder of Search","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":212,"column":121,"index":12410},"line":212,"code":"        it('Deletes the first row of data but not the UI elements and the text defaults back to the placeholder of Search', () => {\n          fillIndicatorMatchRow({\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField\n          });\n          getIndicatorDeleteButton().click();\n          getIndicatorIndexComboField().should('text', 'Search');\n          getIndicatorMappingComboField().should('text', 'Search');\n          getIndicatorIndexComboField(2).should('not.exist');\n          getIndicatorMappingComboField(2).should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes the second row when you have three rows. The first row is valid data, the second row is invalid data, and the third row is valid data. Third row should shift up correctly","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":223,"column":190,"index":13133},"line":223,"code":"        it('Deletes the second row when you have three rows. The first row is valid data, the second row is invalid data, and the third row is valid data. Third row should shift up correctly', () => {\n          fillIndicatorMatchRow({\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField\n          });\n          getIndicatorAndButton().click();\n          fillIndicatorMatchRow({\n            rowNumber: 2,\n            indexField: 'non-existent-value',\n            indicatorIndexField: 'non-existent-value',\n            validColumns: 'none'\n          });\n          getIndicatorAndButton().click();\n          fillIndicatorMatchRow({\n            rowNumber: 3,\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField\n          });\n          getIndicatorDeleteButton(2).click();\n          getIndicatorIndexComboField(1).should('text', getNewThreatIndicatorRule().indicatorMappingField);\n          getIndicatorMappingComboField(1).should('text', getNewThreatIndicatorRule().indicatorIndexField);\n          getIndicatorIndexComboField(2).should('text', getNewThreatIndicatorRule().indicatorMappingField);\n          getIndicatorMappingComboField(2).should('text', getNewThreatIndicatorRule().indicatorIndexField);\n          getIndicatorIndexComboField(3).should('not.exist');\n          getIndicatorMappingComboField(3).should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Can add two OR rows and delete the second row. The first row has invalid data and the second row has valid data. The first row is deleted and the second row shifts up correctly.","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Indicator mapping"],"updatePoint":{"line":249,"column":189,"index":14678},"line":249,"code":"        it('Can add two OR rows and delete the second row. The first row has invalid data and the second row has valid data. The first row is deleted and the second row shifts up correctly.', () => {\n          fillIndicatorMatchRow({\n            indexField: 'non-existent-value-one',\n            indicatorIndexField: 'non-existent-value-two',\n            validColumns: 'none'\n          });\n          getIndicatorOrButton().click();\n          fillIndicatorMatchRow({\n            rowNumber: 2,\n            indexField: getNewThreatIndicatorRule().indicatorMappingField,\n            indicatorIndexField: getNewThreatIndicatorRule().indicatorIndexField\n          });\n          getIndicatorDeleteButton().click();\n          getIndicatorIndexComboField().should('text', getNewThreatIndicatorRule().indicatorMappingField);\n          getIndicatorMappingComboField().should('text', getNewThreatIndicatorRule().indicatorIndexField);\n          getIndicatorIndexComboField(2).should('not.exist');\n          getIndicatorMappingComboField(2).should('not.exist');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"IM rule has 1h time interval and lookback by default","suites":["indicator match","Detection rules, Indicator Match","Creating new indicator match rules","Schedule"],"updatePoint":{"line":269,"column":64,"index":15658},"line":269,"code":"        it('IM rule has 1h time interval and lookback by default', () => {\n          visitWithoutDateRange(RULE_CREATION);\n          selectIndicatorMatchType();\n          fillDefineIndicatorMatchRuleAndContinue(getNewThreatIndicatorRule());\n          fillAboutRuleAndContinue(getNewThreatIndicatorRule());\n          cy.get(SCHEDULE_INTERVAL_AMOUNT_INPUT).invoke('val').should('eql', '1');\n          cy.get(SCHEDULE_INTERVAL_UNITS_INPUT).invoke('val').should('eql', 'h');\n          cy.get(SCHEDULE_LOOKBACK_AMOUNT_INPUT).invoke('val').should('eql', '5');\n          cy.get(SCHEDULE_LOOKBACK_UNITS_INPUT).invoke('val').should('eql', 'm');\n        });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and enables a new Indicator Match rule","suites":["indicator match","Detection rules, Indicator Match","Generating signals"],"updatePoint":{"line":285,"column":56,"index":16426},"line":285,"code":"      it('Creates and enables a new Indicator Match rule', () => {\n        const rule = getNewThreatIndicatorRule();\n        visitWithoutDateRange(RULE_CREATION);\n        selectIndicatorMatchType();\n        fillDefineIndicatorMatchRuleAndContinue(rule);\n        fillAboutRuleAndContinue(rule);\n        fillScheduleRuleAndContinue(rule);\n        createAndEnableRule();\n        cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n        cy.get(RULES_TABLE).then($table => {\n          cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRules);\n        });\n        cy.get(RULE_NAME).should('have.text', rule.name);\n        cy.get(RISK_SCORE).should('have.text', rule.riskScore);\n        cy.get(SEVERITY).should('have.text', rule.severity);\n        cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n        goToRuleDetails();\n        cy.get(RULE_NAME_HEADER).should('contain', `${rule.name}`);\n        cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', rule.description);\n        cy.get(ABOUT_DETAILS).within(() => {\n          getDetails(SEVERITY_DETAILS).should('have.text', rule.severity);\n          getDetails(RISK_SCORE_DETAILS).should('have.text', rule.riskScore);\n          getDetails(INDICATOR_PREFIX_OVERRIDE).should('have.text', rule.threatIndicatorPath);\n          getDetails(REFERENCE_URLS_DETAILS).should(details => {\n            expect(removeExternalLinkText(details.text())).equal(expectedUrls);\n          });\n          getDetails(FALSE_POSITIVES_DETAILS).should('have.text', expectedFalsePositives);\n          getDetails(MITRE_ATTACK_DETAILS).should(mitre => {\n            expect(removeExternalLinkText(mitre.text())).equal(expectedMitre);\n          });\n          getDetails(TAGS_DETAILS).should('have.text', expectedTags);\n        });\n        cy.get(INVESTIGATION_NOTES_TOGGLE).click({\n          force: true\n        });\n        cy.get(ABOUT_INVESTIGATION_NOTES).should('have.text', INVESTIGATION_NOTES_MARKDOWN);\n        cy.get(DEFINITION_DETAILS).within(() => {\n          if (rule.dataSource.type === 'indexPatterns') {\n            getDetails(INDEX_PATTERNS_DETAILS).should('have.text', rule.dataSource.index?.join(''));\n          }\n\n          getDetails(CUSTOM_QUERY_DETAILS).should('have.text', '*:*');\n          getDetails(RULE_TYPE_DETAILS).should('have.text', 'Indicator Match');\n          getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n          getDetails(INDICATOR_INDEX_PATTERNS).should('have.text', rule.indicatorIndexPattern.join(''));\n          getDetails(INDICATOR_MAPPING).should('have.text', `${rule.indicatorMappingField} MATCHES ${rule.indicatorIndexField}`);\n          getDetails(INDICATOR_INDEX_QUERY).should('have.text', '*:*');\n        });\n        cy.get(SCHEDULE_DETAILS).within(() => {\n          getDetails(RUNS_EVERY_DETAILS).should('have.text', `${rule.runsEvery.interval}${rule.runsEvery.type}`);\n          getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', `${rule.lookBack.interval}${rule.lookBack.type}`);\n        });\n        waitForTheRuleToBeExecuted();\n        waitForAlertsToPopulate();\n        cy.get(NUMBER_OF_ALERTS).should('have.text', expectedNumberOfAlerts);\n        cy.get(ALERT_RULE_NAME).first().should('have.text', rule.name);\n        cy.get(ALERT_SEVERITY).first().should('have.text', rule.severity.toLowerCase());\n        cy.get(ALERT_RISK_SCORE).first().should('have.text', rule.riskScore);\n      });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Investigate alert in timeline","suites":["indicator match","Detection rules, Indicator Match","Generating signals"],"updatePoint":{"line":344,"column":39,"index":19846},"line":344,"code":"      it('Investigate alert in timeline', () => {\n        const accessibilityText = `Press enter for options, or press space to begin dragging.`;\n        loadPrepackagedTimelineTemplates();\n        createCustomIndicatorRule(getNewThreatIndicatorRule());\n        visit(DETECTIONS_RULE_MANAGEMENT_URL);\n        goToRuleDetails();\n        waitForAlertsToPopulate();\n        investigateFirstAlertInTimeline();\n        cy.get(PROVIDER_BADGE).should('have.length', 3);\n        cy.get(PROVIDER_BADGE).should('have.text', `threat.enrichments.matched.atomic: \"${getNewThreatIndicatorRule().atomic}\"threat.enrichments.matched.type: \"indicator_match_rule\"threat.enrichments.matched.field: \"${getNewThreatIndicatorRule().indicatorMappingField}\"`);\n        cy.get(INDICATOR_MATCH_ROW_RENDER).should('have.text', `threat.enrichments.matched.field${getNewThreatIndicatorRule().indicatorMappingField}${accessibilityText}matched${getNewThreatIndicatorRule().indicatorMappingField}${getNewThreatIndicatorRule().atomic}${accessibilityText}threat.enrichments.matched.typeindicator_match_rule${accessibilityText}provided` + ` byfeed.nameAbuseCH malware${accessibilityText}`);\n      });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows the rule to be duplicated from the table","suites":["indicator match","Detection rules, Indicator Match","Duplicates the indicator rule"],"updatePoint":{"line":363,"column":57,"index":21285},"line":363,"code":"      it('Allows the rule to be duplicated from the table', () => {\n        duplicateFirstRule();\n        goBackToRuleDetails();\n        goBackToAllRulesTable();\n        checkDuplicatedRule();\n      });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows the rule to be duplicated from the table's bulk actions","suites":["indicator match","Detection rules, Indicator Match","Duplicates the indicator rule"],"updatePoint":{"line":369,"column":72,"index":21503},"line":369,"code":"      it(\"Allows the rule to be duplicated from the table's bulk actions\", () => {\n        selectNumberOfRules(1);\n        duplicateSelectedRules();\n        checkDuplicatedRule();\n      });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows the rule to be duplicated from the edit screen","suites":["indicator match","Detection rules, Indicator Match","Duplicates the indicator rule"],"updatePoint":{"line":374,"column":63,"index":21684},"line":374,"code":"      it('Allows the rule to be duplicated from the edit screen', () => {\n        goToRuleDetails();\n        duplicateRuleFromMenu();\n        goBackToRuleDetails();\n        goBackToAllRulesTable();\n        checkDuplicatedRule();\n      });","file":"integration/detection_rules/indicator_match_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should render correct link for rule name - rules","suites":["Rules talbes links"],"updatePoint":{"line":23,"column":54,"index":988},"line":23,"code":"  it('should render correct link for rule name - rules', () => {\n    cy.get(RULE_NAME).first().click();\n    cy.url().should('contain', 'rules/id/');\n  });","file":"integration/detection_rules/links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should render correct link for rule name - rule monitoring","suites":["Rules talbes links"],"updatePoint":{"line":27,"column":64,"index":1153},"line":27,"code":"  it('should render correct link for rule name - rule monitoring', () => {\n    cy.get(RULES_MONITORING_TABLE).first().click();\n    cy.get(RULE_NAME).first().click();\n    cy.url().should('contain', 'rules/id/');\n  });","file":"integration/detection_rules/links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and enables a new ml rule","suites":["Detection rules, machine learning"],"updatePoint":{"line":28,"column":39,"index":2014},"line":28,"code":"  it('Creates and enables a new ml rule', () => {\n    selectMachineLearningRuleType();\n    fillDefineMachineLearningRuleAndContinue(getMachineLearningRule());\n    fillAboutRuleAndContinue(getMachineLearningRule());\n    fillScheduleRuleAndContinue(getMachineLearningRule());\n    createAndEnableRule();\n    cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n    cy.get(RULES_TABLE).then($table => {\n      cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRules);\n    });\n    cy.get(RULE_NAME).should('have.text', getMachineLearningRule().name);\n    cy.get(RISK_SCORE).should('have.text', getMachineLearningRule().riskScore);\n    cy.get(SEVERITY).should('have.text', getMachineLearningRule().severity);\n    cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n    goToRuleDetails();\n    cy.get(RULE_NAME_HEADER).should('contain', `${getMachineLearningRule().name}`);\n    cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', getMachineLearningRule().description);\n    cy.get(ABOUT_DETAILS).within(() => {\n      getDetails(SEVERITY_DETAILS).should('have.text', getMachineLearningRule().severity);\n      getDetails(RISK_SCORE_DETAILS).should('have.text', getMachineLearningRule().riskScore);\n      getDetails(REFERENCE_URLS_DETAILS).should(details => {\n        expect(removeExternalLinkText(details.text())).equal(expectedUrls);\n      });\n      getDetails(FALSE_POSITIVES_DETAILS).should('have.text', expectedFalsePositives);\n      getDetails(MITRE_ATTACK_DETAILS).should(mitre => {\n        expect(removeExternalLinkText(mitre.text())).equal(expectedMitre);\n      });\n      getDetails(TAGS_DETAILS).should('have.text', expectedTags);\n    });\n    cy.get(DEFINITION_DETAILS).within(() => {\n      getDetails(ANOMALY_SCORE_DETAILS).should('have.text', getMachineLearningRule().anomalyScoreThreshold);\n      getDetails(RULE_TYPE_DETAILS).should('have.text', 'Machine Learning');\n      getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n      cy.get(MACHINE_LEARNING_JOB_STATUS).should('have.text', 'StoppedStopped');\n      cy.get(MACHINE_LEARNING_JOB_ID).should('have.text', getMachineLearningRule().machineLearningJobs.join(''));\n    });\n    cy.get(SCHEDULE_DETAILS).within(() => {\n      getDetails(RUNS_EVERY_DETAILS).should('have.text', `${getMachineLearningRule().runsEvery.interval}${getMachineLearningRule().runsEvery.type}`);\n      getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', `${getMachineLearningRule().lookBack.interval}${getMachineLearningRule().lookBack.type}`);\n    });\n  });","file":"integration/detection_rules/machine_learning_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and enables a new terms rule","suites":["New Terms rules","Detection rules, New Terms"],"updatePoint":{"line":40,"column":44,"index":2623},"line":40,"code":"    it('Creates and enables a new terms rule', function () {\n      visit(RULE_CREATION);\n      selectNewTermsRuleType();\n      fillDefineNewTermsRuleAndContinue(this.rule);\n      fillAboutRuleAndContinue(this.rule);\n      fillScheduleRuleAndContinue(this.rule);\n      createAndEnableRule();\n      cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n      cy.get(RULES_TABLE).then($table => {\n        cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRules);\n      });\n      cy.get(RULE_NAME).should('have.text', this.rule.name);\n      cy.get(RISK_SCORE).should('have.text', this.rule.riskScore);\n      cy.get(SEVERITY).should('have.text', this.rule.severity);\n      cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n      goToRuleDetails();\n      cy.get(RULE_NAME_HEADER).should('contain', `${this.rule.name}`);\n      cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', this.rule.description);\n      cy.get(ABOUT_DETAILS).within(() => {\n        getDetails(SEVERITY_DETAILS).should('have.text', this.rule.severity);\n        getDetails(RISK_SCORE_DETAILS).should('have.text', this.rule.riskScore);\n        getDetails(REFERENCE_URLS_DETAILS).should(details => {\n          expect(removeExternalLinkText(details.text())).equal(expectedUrls);\n        });\n        getDetails(FALSE_POSITIVES_DETAILS).should('have.text', expectedFalsePositives);\n        getDetails(MITRE_ATTACK_DETAILS).should(mitre => {\n          expect(removeExternalLinkText(mitre.text())).equal(expectedMitre);\n        });\n        getDetails(TAGS_DETAILS).should('have.text', expectedTags);\n      });\n      cy.get(INVESTIGATION_NOTES_TOGGLE).click({\n        force: true\n      });\n      cy.get(ABOUT_INVESTIGATION_NOTES).should('have.text', INVESTIGATION_NOTES_MARKDOWN);\n      cy.get(DEFINITION_DETAILS).within(() => {\n        getDetails(INDEX_PATTERNS_DETAILS).should('have.text', getIndexPatterns().join(''));\n        getDetails(CUSTOM_QUERY_DETAILS).should('have.text', this.rule.customQuery);\n        getDetails(RULE_TYPE_DETAILS).should('have.text', 'New Terms');\n        getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n        getDetails(NEW_TERMS_FIELDS_DETAILS).should('have.text', 'host.name');\n        getDetails(NEW_TERMS_HISTORY_WINDOW_DETAILS).should('have.text', '51000h');\n      });\n      cy.get(SCHEDULE_DETAILS).within(() => {\n        getDetails(RUNS_EVERY_DETAILS).should('have.text', `${this.rule.runsEvery.interval}${this.rule.runsEvery.type}`);\n        getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', `${this.rule.lookBack.interval}${this.rule.lookBack.type}`);\n      });\n      waitForTheRuleToBeExecuted();\n      waitForAlertsToPopulate();\n      cy.get(ALERT_DATA_GRID).invoke('text').then(text => {\n        expect(text).contains(this.rule.name);\n        expect(text).contains(this.rule.severity.toLowerCase());\n        expect(text).contains(this.rule.riskScore);\n      });\n    });","file":"integration/detection_rules/new_terms_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Loads prebuilt rules","suites":["Prebuilt rules","Alerts rules, prebuilt rules"],"updatePoint":{"line":20,"column":28,"index":1333},"line":20,"code":"    it('Loads prebuilt rules', () => {\n      const rowsPerPage = 100;\n      const expectedNumberOfRules = totalNumberOfPrebuiltRules;\n      const expectedNumberOfPages = Math.ceil(totalNumberOfPrebuiltRules / rowsPerPage);\n      const expectedElasticRulesBtnText = `Elastic rules (${expectedNumberOfRules})`;\n      visitWithoutDateRange(DETECTIONS_RULE_MANAGEMENT_URL);\n      loadPrebuiltDetectionRules();\n      waitForPrebuiltDetectionRulesToBeLoaded();\n      cy.get(ELASTIC_RULES_BTN).should('have.text', expectedElasticRulesBtnText);\n      changeRowsPerPageTo(rowsPerPage);\n      cy.request({\n        url: '/api/detection_engine/rules/_find'\n      }).then(({\n        body\n      }) => {\n        // Assert the total number of loaded rules equals the expected number of in-memory rules\n        expect(body.total).to.equal(rawRules.length); // Assert the table was refreshed with the rules returned by the API request\n\n        const ruleNames = rawRules.map(rule => rule.name);\n        cy.get(RULE_NAME).each($item => {\n          expect($item.text()).to.be.oneOf(ruleNames);\n        });\n      });\n      cy.get(pageSelector(expectedNumberOfPages)).should('exist');\n    });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows to enable/disable all rules at once","suites":["Prebuilt rules","Alerts rules, prebuilt rules","Rule monitoring table"],"updatePoint":{"line":46,"column":52,"index":2573},"line":46,"code":"      it('Allows to enable/disable all rules at once', () => {\n        cy.get(RULES_MONITORING_TABLE).click();\n        cy.get(SELECT_ALL_RULES_ON_PAGE_CHECKBOX).click();\n        enableSelectedRules();\n        waitForRuleToChangeStatus();\n        cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n        selectAllRules();\n        disableSelectedRules();\n        waitForRuleToChangeStatus();\n        cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'false');\n      });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows to enable/disable all rules at once","suites":["Prebuilt rules","Actions with prebuilt rules","Rules table"],"updatePoint":{"line":64,"column":52,"index":3250},"line":64,"code":"      it('Allows to enable/disable all rules at once', () => {\n        selectAllRules();\n        enableSelectedRules();\n        waitForRuleToChangeStatus();\n        cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n        disableSelectedRules();\n        waitForRuleToChangeStatus();\n        cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'false');\n      });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not allow to delete one rule when more than one is selected","suites":["Prebuilt rules","Actions with prebuilt rules","Rules table"],"updatePoint":{"line":73,"column":74,"index":3655},"line":73,"code":"      it('Does not allow to delete one rule when more than one is selected', () => {\n        const numberOfRulesToBeSelected = 2;\n        selectNumberOfRules(numberOfRulesToBeSelected);\n        cy.get(COLLAPSED_ACTION_BTN).each(collapsedItemActionBtn => {\n          cy.wrap(collapsedItemActionBtn).should('have.attr', 'disabled');\n        });\n      });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes and recovers one rule","suites":["Prebuilt rules","Actions with prebuilt rules","Rules table"],"updatePoint":{"line":80,"column":39,"index":3973},"line":80,"code":"      it('Deletes and recovers one rule', () => {\n        const expectedNumberOfRulesAfterDeletion = totalNumberOfPrebuiltRules - 1;\n        const expectedNumberOfRulesAfterRecovering = totalNumberOfPrebuiltRules;\n        visitWithoutDateRange(DETECTIONS_RULE_MANAGEMENT_URL);\n        deleteFirstRule();\n        cy.get(ELASTIC_RULES_BTN).should('have.text', `Elastic rules (${expectedNumberOfRulesAfterDeletion})`);\n        cy.get(RELOAD_PREBUILT_RULES_BTN).should('exist');\n        cy.get(RELOAD_PREBUILT_RULES_BTN).should('have.text', 'Install 1 Elastic prebuilt rule ');\n        reloadDeletedRules();\n        cy.get(RELOAD_PREBUILT_RULES_BTN).should('not.exist');\n        cy.get(ELASTIC_RULES_BTN).should('have.text', `Elastic rules (${expectedNumberOfRulesAfterRecovering})`);\n      });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes and recovers more than one rule","suites":["Prebuilt rules","Actions with prebuilt rules","Rules table"],"updatePoint":{"line":92,"column":49,"index":4774},"line":92,"code":"      it('Deletes and recovers more than one rule', () => {\n        const numberOfRulesToBeSelected = 2;\n        const expectedNumberOfRulesAfterDeletion = totalNumberOfPrebuiltRules - 2;\n        const expectedNumberOfRulesAfterRecovering = totalNumberOfPrebuiltRules;\n        selectNumberOfRules(numberOfRulesToBeSelected);\n        deleteSelectedRules();\n        cy.get(RELOAD_PREBUILT_RULES_BTN).should('exist');\n        cy.get(RELOAD_PREBUILT_RULES_BTN).should('have.text', `Install ${numberOfRulesToBeSelected} Elastic prebuilt rules `);\n        cy.get(ELASTIC_RULES_BTN).should('have.text', `Elastic rules (${expectedNumberOfRulesAfterDeletion})`);\n        reloadDeletedRules();\n        cy.get(RELOAD_PREBUILT_RULES_BTN).should('not.exist');\n        cy.get(ELASTIC_RULES_BTN).should('have.text', `Elastic rules (${expectedNumberOfRulesAfterRecovering})`);\n      });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Allows to delete all rules at once","suites":["Prebuilt rules","Actions with prebuilt rules","Rules table"],"updatePoint":{"line":105,"column":44,"index":5640},"line":105,"code":"      it('Allows to delete all rules at once', () => {\n        selectAllRules();\n        deleteSelectedRules();\n        confirmRulesDelete();\n        cy.get(RULES_EMPTY_PROMPT).should('be.visible');\n      });","file":"integration/detection_rules/prebuilt_rules.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display a badge with the installed integrations on the rule management page","suites":["Related integrations","integrations not installed"],"updatePoint":{"line":52,"column":90,"index":2263},"line":52,"code":"    it('should display a badge with the installed integrations on the rule management page', () => {\n      cy.get(INTEGRATIONS_POPOVER).should('have.text', `${rule.enabledIntegrations}/${rule.integrations.length} integrations`);\n    });","file":"integration/detection_rules/related_integrations.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display a popover when clicking the badge with the installed integrations on the rule management page","suites":["Related integrations","integrations not installed"],"updatePoint":{"line":55,"column":116,"index":2526},"line":55,"code":"    it('should display a popover when clicking the badge with the installed integrations on the rule management page', () => {\n      openIntegrationsPopover();\n      cy.get(INTEGRATIONS_POPOVER_TITLE).should('have.text', `[${rule.integrations.length}] Related integrations available`);\n      cy.get(INTEGRATIONS).should('have.length', rule.integrations.length);\n      cy.get(INTEGRATIONS_STATUS).should('have.length', rule.integrations.length);\n      rule.integrations.forEach((integration, index) => {\n        cy.get(INTEGRATIONS).eq(index).should('contain', integration);\n        cy.get(INTEGRATIONS_STATUS).eq(index).should('have.text', 'Not installed');\n      });\n    });","file":"integration/detection_rules/related_integrations.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display the integrations on the definition section","suites":["Related integrations","integrations not installed"],"updatePoint":{"line":65,"column":65,"index":3151},"line":65,"code":"    it('should display the integrations on the definition section', () => {\n      goToTheRuleDetailsOf(rule.name);\n      cy.get(INTEGRATIONS).should('have.length', rule.integrations.length);\n      cy.get(INTEGRATIONS_STATUS).should('have.length', rule.integrations.length);\n      rule.integrations.forEach((integration, index) => {\n        cy.get(INTEGRATIONS).eq(index).should('contain', integration);\n        cy.get(INTEGRATIONS_STATUS).eq(index).should('have.text', 'Not installed');\n      });\n    });","file":"integration/detection_rules/related_integrations.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display a badge with the installed integrations on the rule management page","suites":["Related integrations","installed integrations: Amazon CloudFront, AWS CloudTrail, System, enabled integrations: Amazon CloudFront, Aws Cloudfront, System"],"updatePoint":{"line":102,"column":90,"index":4449},"line":102,"code":"    it('should display a badge with the installed integrations on the rule management page', () => {\n      cy.get(INTEGRATIONS_POPOVER).should('have.text', `${rule.enabledIntegrations}/${rule.integrations.length} integrations`);\n    });","file":"integration/detection_rules/related_integrations.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display a popover when clicking the badge with the installed integrations on the rule management page","suites":["Related integrations","installed integrations: Amazon CloudFront, AWS CloudTrail, System, enabled integrations: Amazon CloudFront, Aws Cloudfront, System"],"updatePoint":{"line":105,"column":116,"index":4712},"line":105,"code":"    it('should display a popover when clicking the badge with the installed integrations on the rule management page', () => {\n      openIntegrationsPopover();\n      cy.get(INTEGRATIONS_POPOVER_TITLE).should('have.text', `[${rule.integrations.length}] Related integrations available`);\n      cy.get(INTEGRATIONS).should('have.length', rule.integrations.length);\n      cy.get(INTEGRATIONS_STATUS).should('have.length', rule.integrations.length);\n      rule.integrations.forEach((integration, index) => {\n        let expectedStatus = integration.installed ? 'Installed' : 'Not installed';\n        if (integration.enabled) expectedStatus += ': enabled';\n        cy.get(INTEGRATIONS).eq(index).should('contain', integration.name);\n        cy.get(INTEGRATIONS_STATUS).eq(index).should('have.text', expectedStatus);\n      });\n    });","file":"integration/detection_rules/related_integrations.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display the integrations on the definition section","suites":["Related integrations","installed integrations: Amazon CloudFront, AWS CloudTrail, System, enabled integrations: Amazon CloudFront, Aws Cloudfront, System"],"updatePoint":{"line":117,"column":65,"index":5489},"line":117,"code":"    it('should display the integrations on the definition section', () => {\n      goToTheRuleDetailsOf(rule.name);\n      cy.get(INTEGRATIONS).should('have.length', rule.integrations.length);\n      cy.get(INTEGRATIONS_STATUS).should('have.length', rule.integrations.length);\n      rule.integrations.forEach((integration, index) => {\n        let expectedStatus = integration.installed ? 'Installed' : 'Not installed';\n        if (integration.enabled) expectedStatus += ': enabled';\n        cy.get(INTEGRATIONS).eq(index).should('contain', integration.name);\n        cy.get(INTEGRATIONS_STATUS).eq(index).should('have.text', expectedStatus);\n      });\n    });","file":"integration/detection_rules/related_integrations.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"the alerts generated should have a \"kibana.alert.rule.parameters.related_integrations\" field containing the integrations","suites":["Related integrations","installed integrations: Amazon CloudFront, AWS CloudTrail, System, enabled integrations: Amazon CloudFront, Aws Cloudfront, System"],"updatePoint":{"line":128,"column":128,"index":6209},"line":128,"code":"    it('the alerts generated should have a \"kibana.alert.rule.parameters.related_integrations\" field containing the integrations', () => {\n      const firstRule = 0;\n      const relatedIntegrationsField = 'kibana.alert.rule.parameters.related_integrations';\n      const expectedRelatedIntegrationsText = '{\"package\":\"system\",\"version\":\"1.17.0\"}{\"package\":\"aws\",\"integration\":\"cloudtrail\",\"version\":\"1.17.0\"}{\"package\":\"aws\",\"integration\":\"cloudfront\",\"version\":\"1.17.0\"}{\"package\":\"aws\",\"integration\":\"unknown\",\"version\":\"1.17.0\"}';\n      visit(DETECTIONS_RULE_MANAGEMENT_URL);\n      enableRule(firstRule);\n      waitForRuleToChangeStatus();\n      goToTheRuleDetailsOf(rule.name);\n      waitForAlertsToPopulate();\n      expandFirstAlert();\n      openTable();\n      filterBy(relatedIntegrationsField);\n      cy.get(FIELD(relatedIntegrationsField)).should('have.text', expectedRelatedIntegrationsText);\n    });","file":"integration/detection_rules/related_integrations.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should not display a badge with the installed integrations on the rule management page","suites":["Related integrations","related Integrations Advanced Setting is disabled"],"updatePoint":{"line":157,"column":94,"index":7534},"line":157,"code":"    it('should not display a badge with the installed integrations on the rule management page', () => {\n      cy.get(RULE_NAME).should('have.text', rule.name);\n      cy.get(INTEGRATIONS).should('not.exist');\n    });","file":"integration/detection_rules/related_integrations.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display the integrations on the definition section","suites":["Related integrations","related Integrations Advanced Setting is disabled"],"updatePoint":{"line":161,"column":65,"index":7722},"line":161,"code":"    it('should display the integrations on the definition section', () => {\n      goToTheRuleDetailsOf(rule.name);\n      cy.get(INTEGRATIONS).should('have.length', rule.integrations.length);\n      cy.get(INTEGRATIONS_STATUS).should('have.length', rule.integrations.length);\n      rule.integrations.forEach((integration, index) => {\n        cy.get(INTEGRATIONS).eq(index).should('contain', integration);\n        cy.get(INTEGRATIONS_STATUS).eq(index).should('have.text', 'Not installed');\n      });\n    });","file":"integration/detection_rules/related_integrations.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Auto refreshes rules","suites":["Alerts detection rules table auto-refresh"],"updatePoint":{"line":26,"column":26,"index":1319},"line":26,"code":"  it('Auto refreshes rules', () => {\n    visit(DETECTIONS_RULE_MANAGEMENT_URL);\n    mockGlobalClock();\n    waitForRulesTableToBeLoaded(); // ensure rules have rendered. As there is no user interaction in this test,\n    // rules were not rendered before test completes\n\n    cy.get(RULE_CHECKBOX).should('have.length', 6); // mock 1 minute passing to make sure refresh is conducted\n\n    checkAutoRefresh(DEFAULT_RULE_REFRESH_INTERVAL_VALUE, 'be.visible');\n    cy.contains(REFRESH_RULES_STATUS, 'Updated now');\n  });","file":"integration/detection_rules/rules_table_auto_refresh.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should prevent table from rules refetch if any rule selected","suites":["Alerts detection rules table auto-refresh"],"updatePoint":{"line":37,"column":66,"index":1873},"line":37,"code":"  it('should prevent table from rules refetch if any rule selected', () => {\n    visit(DETECTIONS_RULE_MANAGEMENT_URL);\n    mockGlobalClock();\n    waitForRulesTableToBeLoaded();\n    selectNumberOfRules(1); // mock 1 minute passing to make sure refresh is not conducted\n\n    checkAutoRefresh(DEFAULT_RULE_REFRESH_INTERVAL_VALUE, 'not.exist'); // ensure rule is still selected\n\n    cy.get(RULE_CHECKBOX).first().should('be.checked');\n    cy.contains(REFRESH_RULES_STATUS, 'Updated 1 minute ago');\n  });","file":"integration/detection_rules/rules_table_auto_refresh.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should disable auto refresh when any rule selected and enable it after rules unselected","suites":["Alerts detection rules table auto-refresh"],"updatePoint":{"line":48,"column":93,"index":2401},"line":48,"code":"  it('should disable auto refresh when any rule selected and enable it after rules unselected', () => {\n    visit(DETECTIONS_RULE_MANAGEMENT_URL);\n    waitForRulesTableToBeLoaded();\n    changeRowsPerPageTo(5); // check refresh settings if it's enabled before selecting\n\n    openRefreshSettingsPopover();\n    checkAutoRefreshIsEnabled();\n    selectAllRules(); // auto refresh should be disabled after rules selected\n\n    openRefreshSettingsPopover();\n    checkAutoRefreshIsDisabled(); // if any rule selected, refresh switch should be disabled and help note to users should displayed\n\n    cy.get(REFRESH_SETTINGS_SWITCH).should('be.disabled');\n    cy.contains(REFRESH_SETTINGS_SELECTION_NOTE, 'Note: Refresh is disabled while there is an active selection.');\n    clearAllRuleSelection(); // after all rules unselected, auto refresh should renew\n\n    openRefreshSettingsPopover();\n    checkAutoRefreshIsEnabled();\n  });","file":"integration/detection_rules/rules_table_auto_refresh.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should not enable auto refresh after rules were unselected if auto refresh was disabled","suites":["Alerts detection rules table auto-refresh"],"updatePoint":{"line":67,"column":93,"index":3319},"line":67,"code":"  it('should not enable auto refresh after rules were unselected if auto refresh was disabled', () => {\n    visit(DETECTIONS_RULE_MANAGEMENT_URL);\n    waitForRulesTableToBeLoaded();\n    changeRowsPerPageTo(5);\n    openRefreshSettingsPopover();\n    disableAutoRefresh();\n    selectAllRules();\n    openRefreshSettingsPopover();\n    checkAutoRefreshIsDisabled();\n    clearAllRuleSelection(); // after all rules unselected, auto refresh should still be disabled\n\n    openRefreshSettingsPopover();\n    checkAutoRefreshIsDisabled();\n  });","file":"integration/detection_rules/rules_table_auto_refresh.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Sorts by enabled rules","suites":["Alerts detection rules"],"updatePoint":{"line":23,"column":28,"index":1236},"line":23,"code":"  it('Sorts by enabled rules', () => {\n    visit(DETECTIONS_RULE_MANAGEMENT_URL);\n    waitForRulesTableToBeLoaded();\n    enableRule(SECOND_RULE);\n    waitForRuleToChangeStatus();\n    enableRule(FOURTH_RULE);\n    waitForRuleToChangeStatus();\n    cy.get(RULE_SWITCH).eq(SECOND_RULE).should('have.attr', 'role', 'switch');\n    cy.get(RULE_SWITCH).eq(FOURTH_RULE).should('have.attr', 'role', 'switch');\n    sortByEnabledRules();\n    cy.get(RULE_SWITCH).eq(FIRST_RULE).should('have.attr', 'role', 'switch');\n    cy.get(RULE_SWITCH).eq(SECOND_RULE).should('have.attr', 'role', 'switch');\n  });","file":"integration/detection_rules/sorting.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Pagination updates page number and results","suites":["Alerts detection rules"],"updatePoint":{"line":36,"column":48,"index":1844},"line":36,"code":"  it('Pagination updates page number and results', () => {\n    createCustomRule({ ...getNewRule(),\n      name: 'Test a rule'\n    }, '5');\n    createCustomRule({ ...getNewRule(),\n      name: 'Not same as first rule'\n    }, '6');\n    visit(DETECTIONS_RULE_MANAGEMENT_URL);\n    waitForRulesTableToBeLoaded();\n    changeRowsPerPageTo(5);\n    const FIRST_PAGE_SELECTOR = pageSelector(1);\n    const SECOND_PAGE_SELECTOR = pageSelector(2);\n    cy.get(RULES_TABLE).find(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n    cy.get(RULES_TABLE).find(RULE_NAME).first().invoke('text').then(ruleNameFirstPage => {\n      goToPage(2); // Check that the rules table shows at least one row\n\n      cy.get(RULES_TABLE).find(RULES_ROW).should('have.length.gte', 1); // Check that the rules table doesn't show the rule from the first page\n\n      cy.get(RULES_TABLE).should('not.contain', ruleNameFirstPage);\n    });\n    cy.get(RULES_TABLE).find(FIRST_PAGE_SELECTOR).should('not.have.class', 'euiPaginationButton-isActive');\n    cy.get(RULES_TABLE).find(SECOND_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n  });","file":"integration/detection_rules/sorting.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates and enables a new threshold rule","suites":["Detection rules, threshold"],"updatePoint":{"line":37,"column":46,"index":2545},"line":37,"code":"  it('Creates and enables a new threshold rule', () => {\n    selectThresholdRuleType();\n    fillDefineThresholdRuleAndContinue(rule);\n    fillAboutRuleAndContinue(rule);\n    fillScheduleRuleAndContinue(rule);\n    createAndEnableRule();\n    cy.get(CUSTOM_RULES_BTN).should('have.text', 'Custom rules (1)');\n    const expectedNumberOfRules = 1;\n    cy.get(RULES_TABLE).then($table => {\n      cy.wrap($table.find(RULES_ROW).length).should('eql', expectedNumberOfRules);\n    });\n    cy.get(RULE_NAME).should('have.text', rule.name);\n    cy.get(RISK_SCORE).should('have.text', rule.riskScore);\n    cy.get(SEVERITY).should('have.text', rule.severity);\n    cy.get(RULE_SWITCH).should('have.attr', 'aria-checked', 'true');\n    goToRuleDetails();\n    cy.get(RULE_NAME_HEADER).should('contain', `${rule.name}`);\n    cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', rule.description);\n    cy.get(ABOUT_DETAILS).within(() => {\n      getDetails(SEVERITY_DETAILS).should('have.text', rule.severity);\n      getDetails(RISK_SCORE_DETAILS).should('have.text', rule.riskScore);\n      getDetails(REFERENCE_URLS_DETAILS).should(details => {\n        expect(removeExternalLinkText(details.text())).equal(expectedUrls);\n      });\n      getDetails(FALSE_POSITIVES_DETAILS).should('have.text', expectedFalsePositives);\n      getDetails(MITRE_ATTACK_DETAILS).should(mitre => {\n        expect(removeExternalLinkText(mitre.text())).equal(expectedMitre);\n      });\n      getDetails(TAGS_DETAILS).should('have.text', expectedTags);\n    });\n    cy.get(INVESTIGATION_NOTES_TOGGLE).click({\n      force: true\n    });\n    cy.get(ABOUT_INVESTIGATION_NOTES).should('have.text', INVESTIGATION_NOTES_MARKDOWN);\n    cy.get(DEFINITION_DETAILS).within(() => {\n      getDetails(INDEX_PATTERNS_DETAILS).should('have.text', getIndexPatterns().join(''));\n      getDetails(CUSTOM_QUERY_DETAILS).should('have.text', rule.customQuery);\n      getDetails(RULE_TYPE_DETAILS).should('have.text', 'Threshold');\n      getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', 'None');\n      getDetails(THRESHOLD_DETAILS).should('have.text', `Results aggregated by ${rule.thresholdField} >= ${rule.threshold}`);\n    });\n    cy.get(SCHEDULE_DETAILS).within(() => {\n      getDetails(RUNS_EVERY_DETAILS).should('have.text', `${rule.runsEvery.interval}${rule.runsEvery.type}`);\n      getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', `${rule.lookBack.interval}${rule.lookBack.type}`);\n    });\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(NUMBER_OF_ALERTS).should($count => expect(+$count.text().split(' ')[0]).to.be.lt(100));\n    cy.get(ALERT_GRID_CELL).contains(rule.name);\n  });","file":"integration/detection_rules/threshold_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates an exception from an alert and deletes it","suites":["Adds rule exception using data views"],"updatePoint":{"line":49,"column":55,"index":2307},"line":49,"code":"  it('Creates an exception from an alert and deletes it', () => {\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS); // Create an exception from the alerts actions menu that matches\n    // the existing alert\n\n    addExceptionFromFirstAlert();\n    addsException(getException()); // Alerts table should now be empty from having added exception and closed\n    // matching alert\n\n    cy.get(EMPTY_ALERT_TABLE).should('exist'); // Closed alert should appear in table\n\n    goToClosedAlerts();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`); // Remove the exception and load an event that would have matched that exception\n    // to show that said exception now starts to show up again\n\n    goToExceptionsTab();\n    removeException();\n    esArchiverLoad('exceptions_2');\n    goToAlertsTab();\n    goToOpenedAlerts();\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`);\n  });","file":"integration/exceptions/add_edit_data_view_exception.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates an exception from a rule and deletes it","suites":["Adds rule exception using data views"],"updatePoint":{"line":75,"column":53,"index":3489},"line":75,"code":"  it('Creates an exception from a rule and deletes it', () => {\n    // Create an exception from the exception tab that matches\n    // the existing alert\n    goToExceptionsTab();\n    addsExceptionFromRuleSettings(getException()); // Alerts table should now be empty from having added exception and closed\n    // matching alert\n\n    goToAlertsTab();\n    cy.get(EMPTY_ALERT_TABLE).should('exist'); // Closed alert should appear in table\n\n    goToClosedAlerts();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`); // Remove the exception and load an event that would have matched that exception\n    // to show that said exception now starts to show up again\n\n    goToExceptionsTab();\n    removeException();\n    esArchiverLoad('exceptions_2');\n    goToAlertsTab();\n    goToOpenedAlerts();\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`);\n  });","file":"integration/exceptions/add_edit_data_view_exception.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Edits an exception","suites":["Adds rule exception using data views"],"updatePoint":{"line":100,"column":24,"index":4536},"line":100,"code":"  it('Edits an exception', () => {\n    goToExceptionsTab();\n    addsExceptionFromRuleSettings(getException());\n    editException(); // check that the existing item's field is being populated\n\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name'); // check that you can select a different field\n\n    addExceptionEntryFieldValueOfItemX('user.name{downarrow}{enter}', 0, 0);\n    addExceptionEntryFieldValueValue('test', 0);\n    cy.get(EXCEPTION_EDIT_FLYOUT_SAVE_BTN).click();\n    cy.get(EXCEPTION_EDIT_FLYOUT_SAVE_BTN).should('have.attr', 'disabled');\n    cy.get(EXCEPTION_EDIT_FLYOUT_SAVE_BTN).should('not.exist');\n  });","file":"integration/exceptions/add_edit_data_view_exception.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates an exception from an alert and deletes it","suites":["Adds rule exception"],"updatePoint":{"line":48,"column":55,"index":2245},"line":48,"code":"  it('Creates an exception from an alert and deletes it', () => {\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS); // Create an exception from the alerts actions menu that matches\n    // the existing alert\n\n    addExceptionFromFirstAlert();\n    addsException(getException()); // Alerts table should now be empty from having added exception and closed\n    // matching alert\n\n    cy.get(EMPTY_ALERT_TABLE).should('exist'); // Closed alert should appear in table\n\n    goToClosedAlerts();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`); // Remove the exception and load an event that would have matched that exception\n    // to show that said exception now starts to show up again\n\n    goToExceptionsTab();\n    removeException();\n    esArchiverLoad('exceptions_2');\n    goToAlertsTab();\n    goToOpenedAlerts();\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`);\n  });","file":"integration/exceptions/add_edit_exception.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates an exception from a rule and deletes it","suites":["Adds rule exception"],"updatePoint":{"line":74,"column":53,"index":3427},"line":74,"code":"  it('Creates an exception from a rule and deletes it', () => {\n    // Create an exception from the exception tab that matches\n    // the existing alert\n    goToExceptionsTab();\n    addsExceptionFromRuleSettings(getException()); // Alerts table should now be empty from having added exception and closed\n    // matching alert\n\n    goToAlertsTab();\n    cy.get(EMPTY_ALERT_TABLE).should('exist'); // Closed alert should appear in table\n\n    goToClosedAlerts();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`); // Remove the exception and load an event that would have matched that exception\n    // to show that said exception now starts to show up again\n\n    goToExceptionsTab();\n    removeException();\n    esArchiverLoad('exceptions_2');\n    goToAlertsTab();\n    goToOpenedAlerts();\n    waitForTheRuleToBeExecuted();\n    waitForAlertsToPopulate();\n    cy.get(ALERTS_COUNT).should('exist');\n    cy.get(NUMBER_OF_ALERTS).should('have.text', `${NUMBER_OF_AUDITBEAT_EXCEPTIONS_ALERTS}`);\n  });","file":"integration/exceptions/add_edit_exception.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Edits an exception","suites":["Adds rule exception"],"updatePoint":{"line":99,"column":24,"index":4474},"line":99,"code":"  it('Edits an exception', () => {\n    goToExceptionsTab();\n    addsExceptionFromRuleSettings(getException());\n    editException(); // check that the existing item's field is being populated\n\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name'); // check that you can select a different field\n\n    addExceptionEntryFieldValueOfItemX('user.name{downarrow}{enter}', 0, 0);\n    addExceptionEntryFieldValueValue('test', 0);\n    cy.get(EXCEPTION_EDIT_FLYOUT_SAVE_BTN).click();\n    cy.get(EXCEPTION_EDIT_FLYOUT_SAVE_BTN).should('have.attr', 'disabled');\n    cy.get(EXCEPTION_EDIT_FLYOUT_SAVE_BTN).should('not.exist');\n  });","file":"integration/exceptions/add_edit_exception.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays missing privileges primary callout","suites":["All exception lists - read only"],"updatePoint":{"line":28,"column":49,"index":1392},"line":28,"code":"  it('Displays missing privileges primary callout', () => {\n    waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n  });","file":"integration/exceptions/all_exception_lists_read_only.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"We hide them and persist the dismissal","suites":["All exception lists - read only","When a user clicks Dismiss on the callouts"],"updatePoint":{"line":32,"column":46,"index":1587},"line":32,"code":"    it('We hide them and persist the dismissal', () => {\n      waitForCallOutToBeShown(MISSING_PRIVILEGES_CALLOUT, 'primary');\n      dismissCallOut(MISSING_PRIVILEGES_CALLOUT);\n      cy.reload();\n      cy.contains(EXCEPTIONS_TABLE_SHOWING_LISTS, '1');\n      getCallOut(MISSING_PRIVILEGES_CALLOUT).should('not.exist');\n    });","file":"integration/exceptions/all_exception_lists_read_only.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Validates empty entry values correctly","suites":["Exceptions flyout"],"updatePoint":{"line":53,"column":44,"index":2988},"line":53,"code":"  it('Validates empty entry values correctly', () => {\n    cy.root().pipe($el => {\n      $el.find(ADD_EXCEPTIONS_BTN).trigger('click');\n      return $el.find(ADD_AND_BTN);\n    }).should('be.visible'); // add an entry with a value and submit button should enable\n\n    addExceptionEntryFieldValue('agent.name', 0);\n    addExceptionEntryFieldValueValue('test', 0);\n    cy.get(CONFIRM_BTN).should('be.enabled'); // remove the value and should see warning and button disabled\n\n    cy.get(VALUES_INPUT).eq(0).type('{backspace}{enter}');\n    cy.get(EXCEPTION_FLYOUT_TITLE).click();\n    cy.get(CONFIRM_BTN).should('be.disabled'); // change operators\n\n    addExceptionEntryOperatorValue('is one of', 0);\n    cy.get(CONFIRM_BTN).should('be.disabled'); // add value again and button should be enabled again\n\n    addExceptionEntryFieldMatchAnyValue('test', 0);\n    cy.get(CONFIRM_BTN).should('be.enabled');\n    closeExceptionBuilderFlyout();\n  });","file":"integration/exceptions/exceptions_flyout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not overwrite values and-ed together","suites":["Exceptions flyout"],"updatePoint":{"line":74,"column":47,"index":3927},"line":74,"code":"  it('Does not overwrite values and-ed together', () => {\n    cy.root().pipe($el => {\n      $el.find(ADD_EXCEPTIONS_BTN).trigger('click');\n      return $el.find(ADD_AND_BTN);\n    }).should('be.visible'); // add multiple entries with invalid field values\n\n    addExceptionEntryFieldValue('agent.name', 0);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValue('@timestamp', 1);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValue('c', 2); // delete second item, invalid values 'a' and 'c' should remain\n\n    cy.get(ENTRY_DELETE_BTN).eq(1).click();\n    cy.get(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(FIELD_INPUT).eq(1).should('have.text', 'c');\n    closeExceptionBuilderFlyout();\n  });","file":"integration/exceptions/exceptions_flyout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not overwrite values or-ed together","suites":["Exceptions flyout"],"updatePoint":{"line":91,"column":46,"index":4659},"line":91,"code":"  it('Does not overwrite values or-ed together', () => {\n    cy.root().pipe($el => {\n      $el.find(ADD_EXCEPTIONS_BTN).trigger('click');\n      return $el.find(ADD_AND_BTN);\n    }).should('be.visible'); // exception item 1\n\n    addExceptionEntryFieldValueOfItemX('agent.name', 0, 0);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValueOfItemX('user.id.keyword', 0, 1); // exception item 2\n\n    cy.get(ADD_OR_BTN).click();\n    addExceptionEntryFieldValueOfItemX('user.first', 1, 0);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValueOfItemX('user.last', 1, 1);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValueOfItemX('e', 1, 2); // delete single entry from exception item 2\n\n    cy.get(ENTRY_DELETE_BTN).eq(3).click();\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(1).should('have.text', 'user.id.keyword');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(0).should('have.text', 'user.first');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(1).should('have.text', 'e'); // delete remaining entries in exception item 2\n\n    cy.get(ENTRY_DELETE_BTN).eq(2).click();\n    cy.get(ENTRY_DELETE_BTN).eq(2).click();\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(1).should('have.text', 'user.id.keyword');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).should('not.exist');\n    closeExceptionBuilderFlyout();\n  });","file":"integration/exceptions/exceptions_flyout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not overwrite values of nested entry items","suites":["Exceptions flyout"],"updatePoint":{"line":121,"column":53,"index":6282},"line":121,"code":"  it('Does not overwrite values of nested entry items', () => {\n    openExceptionFlyoutFromRuleSettings();\n    cy.get(LOADING_SPINNER).should('not.exist'); // exception item 1\n\n    addExceptionEntryFieldValueOfItemX('agent.name', 0, 0);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValueOfItemX('b', 0, 1); // exception item 2 with nested field\n\n    cy.get(ADD_OR_BTN).click();\n    addExceptionEntryFieldValueOfItemX('agent.name', 1, 0);\n    cy.get(ADD_NESTED_BTN).click();\n    addExceptionEntryFieldValueOfItemX('user.id{downarrow}{enter}', 1, 1);\n    cy.get(ADD_AND_BTN).click();\n    addExceptionEntryFieldValueOfItemX('last{downarrow}{enter}', 1, 3); // This button will now read `Add non-nested button`\n\n    cy.get(ADD_NESTED_BTN).scrollIntoView();\n    cy.get(ADD_NESTED_BTN).focus().click();\n    addExceptionEntryFieldValueOfItemX('@timestamp', 1, 4); // should have only deleted `user.id`\n\n    cy.get(ENTRY_DELETE_BTN).eq(4).click();\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(1).should('have.text', 'b');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(1).should('have.text', 'user');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(2).should('have.text', 'last');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(3).should('have.text', '@timestamp'); // deleting the last value of a nested entry, should delete the child and parent\n\n    cy.get(ENTRY_DELETE_BTN).eq(4).click();\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(0).find(FIELD_INPUT).eq(1).should('have.text', 'b');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(0).should('have.text', 'agent.name');\n    cy.get(EXCEPTION_ITEM_CONTAINER).eq(1).find(FIELD_INPUT).eq(1).should('have.text', '@timestamp');\n    closeExceptionBuilderFlyout();\n  });","file":"integration/exceptions/exceptions_flyout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Contains custom index fields","suites":["Exceptions flyout"],"updatePoint":{"line":155,"column":34,"index":8374},"line":155,"code":"  it('Contains custom index fields', () => {\n    cy.root().pipe($el => {\n      $el.find(ADD_EXCEPTIONS_BTN).trigger('click');\n      return $el.find(ADD_AND_BTN);\n    }).should('be.visible');\n    cy.get(FIELD_INPUT).eq(0).click({\n      force: true\n    });\n    cy.get(EXCEPTION_FIELD_LIST).contains('unique_value.test');\n    closeExceptionBuilderFlyout();\n  });","file":"integration/exceptions/exceptions_flyout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays version conflict error","suites":["Exceptions flyout","flyout errors","When updating an item with version conflict"],"updatePoint":{"line":189,"column":41,"index":9490},"line":189,"code":"      it('Displays version conflict error', () => {\n        editException(); // update exception item via api\n\n        updateExceptionListItem('simple_list_item', {\n          name: 'Updated item name',\n          item_id: 'simple_list_item',\n          tags: [],\n          type: 'simple',\n          description: 'Test exception item',\n          namespace_type: 'single',\n          entries: [{\n            field: 'host.name',\n            operator: 'included',\n            type: 'match_any',\n            value: ['some host', 'another host']\n          }]\n        }); // try to save and see version conflict error\n\n        cy.get(EXCEPTION_EDIT_FLYOUT_SAVE_BTN).click({\n          force: true\n        });\n        cy.get(EXCEPTION_FLYOUT_VERSION_CONFLICT).should('be.visible');\n        closeExceptionBuilderFlyout();\n      });","file":"integration/exceptions/exceptions_flyout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays missing exception list error","suites":["Exceptions flyout","flyout errors","When updating an item for a list that has since been deleted"],"updatePoint":{"line":215,"column":47,"index":10407},"line":215,"code":"      it('Displays missing exception list error', () => {\n        editException(); // delete exception list via api\n\n        deleteExceptionList(getExceptionList().list_id, getExceptionList().namespace_type); // try to save and see error\n\n        cy.get(EXCEPTION_EDIT_FLYOUT_SAVE_BTN).click({\n          force: true\n        });\n        cy.get(EXCEPTION_FLYOUT_LIST_DELETED_ERROR).should('be.visible');\n      });","file":"integration/exceptions/exceptions_flyout.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Exports exception list","suites":["Exceptions Table"],"updatePoint":{"line":49,"column":28,"index":2336},"line":49,"code":"  it('Exports exception list', function () {\n    cy.intercept(/(\\/api\\/exception_lists\\/_export)/).as('export');\n    visitWithoutDateRange(EXCEPTIONS_URL);\n    waitForExceptionsTableToBeLoaded();\n    exportExceptionList();\n    cy.wait('@export').then(({\n      response\n    }) => {\n      cy.wrap(response?.body).should('eql', expectedExportedExceptionList(this.exceptionListResponse));\n      cy.get(TOASTER).should('have.text', 'Exception list export success');\n    });\n  });","file":"integration/exceptions/exceptions_table.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Filters exception lists on search","suites":["Exceptions Table"],"updatePoint":{"line":61,"column":39,"index":2822},"line":61,"code":"  it('Filters exception lists on search', () => {\n    visitWithoutDateRange(EXCEPTIONS_URL);\n    waitForExceptionsTableToBeLoaded(); // Using cy.contains because we do not care about the exact text,\n    // just checking number of lists shown\n\n    cy.contains(EXCEPTIONS_TABLE_SHOWING_LISTS, '3'); // Single word search\n\n    searchForExceptionList('Endpoint'); // Using cy.contains because we do not care about the exact text,\n    // just checking number of lists shown\n\n    cy.contains(EXCEPTIONS_TABLE_SHOWING_LISTS, '1');\n    cy.get(EXCEPTIONS_TABLE_LIST_NAME).should('have.text', 'Endpoint Security Exception List'); // Multi word search\n\n    clearSearchSelection();\n    searchForExceptionList('test'); // Using cy.contains because we do not care about the exact text,\n    // just checking number of lists shown\n\n    cy.contains(EXCEPTIONS_TABLE_SHOWING_LISTS, '2');\n    cy.get(EXCEPTIONS_TABLE_LIST_NAME).eq(1).should('have.text', 'Test list 2');\n    cy.get(EXCEPTIONS_TABLE_LIST_NAME).eq(0).should('have.text', 'Test a new list 1'); // Exact phrase search\n\n    clearSearchSelection();\n    searchForExceptionList(`\"${getExceptionList1().name}\"`); // Using cy.contains because we do not care about the exact text,\n    // just checking number of lists shown\n\n    cy.contains(EXCEPTIONS_TABLE_SHOWING_LISTS, '1');\n    cy.get(EXCEPTIONS_TABLE_LIST_NAME).should('have.text', getExceptionList1().name); // Field search\n\n    clearSearchSelection();\n    searchForExceptionList('list_id:endpoint_list'); // Using cy.contains because we do not care about the exact text,\n    // just checking number of lists shown\n\n    cy.contains(EXCEPTIONS_TABLE_SHOWING_LISTS, '1');\n    cy.get(EXCEPTIONS_TABLE_LIST_NAME).should('have.text', 'Endpoint Security Exception List');\n    clearSearchSelection(); // Using cy.contains because we do not care about the exact text,\n    // just checking number of lists shown\n\n    cy.contains(EXCEPTIONS_TABLE_SHOWING_LISTS, '3');\n  });","file":"integration/exceptions/exceptions_table.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes exception list without rule reference","suites":["Exceptions Table"],"updatePoint":{"line":100,"column":51,"index":4791},"line":100,"code":"  it('Deletes exception list without rule reference', () => {\n    visitWithoutDateRange(EXCEPTIONS_URL);\n    waitForExceptionsTableToBeLoaded(); // Using cy.contains because we do not care about the exact text,\n    // just checking number of lists shown\n\n    cy.contains(EXCEPTIONS_TABLE_SHOWING_LISTS, '3');\n    deleteExceptionListWithoutRuleReference(); // Using cy.contains because we do not care about the exact text,\n    // just checking number of lists shown\n\n    cy.contains(EXCEPTIONS_TABLE_SHOWING_LISTS, '2');\n  });","file":"integration/exceptions/exceptions_table.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Deletes exception list with rule reference","suites":["Exceptions Table"],"updatePoint":{"line":111,"column":48,"index":5314},"line":111,"code":"  it('Deletes exception list with rule reference', () => {\n    waitForPageWithoutDateRange(EXCEPTIONS_URL);\n    waitForExceptionsTableToBeLoaded(); // Using cy.contains because we do not care about the exact text,\n    // just checking number of lists shown\n\n    cy.contains(EXCEPTIONS_TABLE_SHOWING_LISTS, '2');\n    deleteExceptionListWithRuleReference(); // Using cy.contains because we do not care about the exact text,\n    // just checking number of lists shown\n\n    cy.contains(EXCEPTIONS_TABLE_SHOWING_LISTS, '1');\n  });","file":"integration/exceptions/exceptions_table.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Delete icon is not shown","suites":["Exceptions Table - read only"],"updatePoint":{"line":136,"column":30,"index":6421},"line":136,"code":"  it('Delete icon is not shown', () => {\n    cy.get(EXCEPTIONS_TABLE_DELETE_BTN).should('not.exist');\n  });","file":"integration/exceptions/exceptions_table.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"show pinned filters on security","suites":["pinned filters"],"updatePoint":{"line":16,"column":37,"index":800},"line":16,"code":"  it('show pinned filters on security', () => {\n    visitWithoutDateRange(DISCOVER_WITH_PINNED_FILTER_URL);\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM).find(GLOBAL_SEARCH_BAR_PINNED_FILTER).should('exist');\n    openKibanaNavigation();\n    navigateFromKibanaCollapsibleTo(ALERTS_PAGE);\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM).should('have.text', 'host.name: test-host');\n  });","file":"integration/filters/pinned_filters.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"does not show discover filters on security","suites":["pinned filters"],"updatePoint":{"line":23,"column":48,"index":1187},"line":23,"code":"  it('does not show discover filters on security', () => {\n    visitWithoutDateRange(DISCOVER_WITH_FILTER_URL);\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM).should('exist');\n    openKibanaNavigation();\n    navigateFromKibanaCollapsibleTo(ALERTS_PAGE);\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM).should('not.exist');\n  });","file":"integration/filters/pinned_filters.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"can be completed","suites":["Guided onboarding tour","Tour is enabled"],"updatePoint":{"line":21,"column":24,"index":915},"line":21,"code":"    it('can be completed', () => {\n      // Step 1: Overview\n      cy.get(WELCOME_STEP).should('be.visible');\n      goToNextStep(WELCOME_STEP); // Step 2: Manage\n\n      cy.get(MANAGE_STEP).should('be.visible');\n      goToNextStep(MANAGE_STEP); // Step 3: Alerts\n\n      cy.get(ALERTS_STEP).should('be.visible');\n      goToNextStep(ALERTS_STEP); // Step 4: Cases\n\n      cy.get(CASES_STEP).should('be.visible');\n      goToNextStep(CASES_STEP); // Step 5: Add data\n\n      cy.get(DATA_STEP).should('be.visible');\n      completeTour();\n    });","file":"integration/guided_onboarding/tour.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"can be skipped","suites":["Guided onboarding tour","Tour is enabled"],"updatePoint":{"line":38,"column":22,"index":1451},"line":38,"code":"    it('can be skipped', () => {\n      cy.get(WELCOME_STEP).should('be.visible');\n      skipTour(); // step 1 is not displayed\n\n      cy.get(WELCOME_STEP).should('not.exist'); // step 2 is not displayed\n\n      cy.get(MANAGE_STEP).should('not.exist');\n    });","file":"integration/guided_onboarding/tour.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Dashboards landing page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":20,"column":46,"index":1585},"line":20,"code":"  it('navigates to the Dashboards landing page', () => {\n    navigateFromHeaderTo(DASHBOARDS);\n    cy.url().should('include', DASHBOARDS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Overview page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":24,"column":36,"index":1724},"line":24,"code":"  it('navigates to the Overview page', () => {\n    navigateFromHeaderTo(OVERVIEW);\n    cy.url().should('include', OVERVIEW_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Detection & Response page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":28,"column":48,"index":1871},"line":28,"code":"  it('navigates to the Detection & Response page', () => {\n    navigateFromHeaderTo(DETECTION_RESPONSE);\n    cy.url().should('include', DETECTION_RESPONSE_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Kubernetes page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":32,"column":38,"index":2028},"line":32,"code":"  it('navigates to the Kubernetes page', () => {\n    navigateFromHeaderTo(KUBERNETES);\n    cy.url().should('include', KUBERNETES_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the CSP dashboard page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":36,"column":41,"index":2172},"line":36,"code":"  it('navigates to the CSP dashboard page', () => {\n    navigateFromHeaderTo(CSP_DASHBOARD);\n    cy.url().should('include', CSP_DASHBOARD_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Alerts page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":40,"column":34,"index":2315},"line":40,"code":"  it('navigates to the Alerts page', () => {\n    navigateFromHeaderTo(ALERTS);\n    cy.url().should('include', ALERTS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Findings page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":44,"column":36,"index":2446},"line":44,"code":"  it('navigates to the Findings page', () => {\n    navigateFromHeaderTo(CSP_FINDINGS);\n    cy.url().should('include', CSP_FINDINGS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Timelines page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":48,"column":37,"index":2590},"line":48,"code":"  it('navigates to the Timelines page', () => {\n    navigateFromHeaderTo(TIMELINES);\n    cy.url().should('include', TIMELINES_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Explore landing page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":52,"column":43,"index":2734},"line":52,"code":"  it('navigates to the Explore landing page', () => {\n    navigateFromHeaderTo(EXPLORE);\n    cy.url().should('include', EXPLORE_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Hosts page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":56,"column":33,"index":2864},"line":56,"code":"  it('navigates to the Hosts page', () => {\n    navigateFromHeaderTo(HOSTS);\n    cy.url().should('include', HOSTS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Network page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":60,"column":35,"index":2992},"line":60,"code":"  it('navigates to the Network page', () => {\n    navigateFromHeaderTo(NETWORK);\n    cy.url().should('include', NETWORK_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Users page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":64,"column":33,"index":3122},"line":64,"code":"  it('navigates to the Users page', () => {\n    navigateFromHeaderTo(USERS);\n    cy.url().should('include', USERS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Indicators page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":68,"column":38,"index":3253},"line":68,"code":"  it('navigates to the Indicators page', () => {\n    navigateFromHeaderTo(INDICATORS);\n    cy.url().should('include', INDICATORS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Rules page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":72,"column":33,"index":3389},"line":72,"code":"  it('navigates to the Rules page', () => {\n    navigateFromHeaderTo(RULES);\n    cy.url().should('include', DETECTIONS_RULE_MANAGEMENT_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Exceptions page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":76,"column":38,"index":3541},"line":76,"code":"  it('navigates to the Exceptions page', () => {\n    navigateFromHeaderTo(EXCEPTIONS);\n    cy.url().should('include', EXCEPTIONS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Cases page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":80,"column":33,"index":3677},"line":80,"code":"  it('navigates to the Cases page', () => {\n    navigateFromHeaderTo(CASES);\n    cy.url().should('include', CASES_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Manage landing page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":84,"column":42,"index":3812},"line":84,"code":"  it('navigates to the Manage landing page', () => {\n    navigateFromHeaderTo(MANAGE);\n    cy.url().should('include', MANAGE_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Endpoints page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":88,"column":37,"index":3944},"line":88,"code":"  it('navigates to the Endpoints page', () => {\n    navigateFromHeaderTo(ENDPOINTS);\n    cy.url().should('include', ENDPOINTS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Policies page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":92,"column":36,"index":4081},"line":92,"code":"  it('navigates to the Policies page', () => {\n    navigateFromHeaderTo(POLICIES);\n    cy.url().should('include', POLICIES_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Trusted Apps page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":96,"column":40,"index":4220},"line":96,"code":"  it('navigates to the Trusted Apps page', () => {\n    navigateFromHeaderTo(TRUSTED_APPS);\n    cy.url().should('include', TRUSTED_APPS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Event Filters page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":100,"column":41,"index":4368},"line":100,"code":"  it('navigates to the Event Filters page', () => {\n    navigateFromHeaderTo(EVENT_FILTERS);\n    cy.url().should('include', EVENT_FILTERS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Blocklist page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":104,"column":37,"index":4514},"line":104,"code":"  it('navigates to the Blocklist page', () => {\n    navigateFromHeaderTo(BLOCKLIST);\n    cy.url().should('include', BLOCKLIST_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the CSP Benchmarks page","suites":["top-level navigation common to all pages in the Security app"],"updatePoint":{"line":108,"column":42,"index":4657},"line":108,"code":"  it('navigates to the CSP Benchmarks page', () => {\n    navigateFromHeaderTo(CSP_BENCHMARKS);\n    cy.url().should('include', CSP_BENCHMARKS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Dashboards page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":120,"column":38,"index":4984},"line":120,"code":"  it('navigates to the Dashboards page', () => {\n    navigateFromKibanaCollapsibleTo(DASHBOARDS_PAGE);\n    cy.url().should('include', DASHBOARDS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Alerts page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":124,"column":34,"index":5137},"line":124,"code":"  it('navigates to the Alerts page', () => {\n    navigateFromKibanaCollapsibleTo(ALERTS_PAGE);\n    cy.url().should('include', ALERTS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Findings page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":128,"column":36,"index":5284},"line":128,"code":"  it('navigates to the Findings page', () => {\n    navigateFromKibanaCollapsibleTo(FINDINGS_PAGE);\n    cy.url().should('include', CSP_FINDINGS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Timelines page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":132,"column":37,"index":5440},"line":132,"code":"  it('navigates to the Timelines page', () => {\n    navigateFromKibanaCollapsibleTo(TIMELINES_PAGE);\n    cy.url().should('include', TIMELINES_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Cases page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":136,"column":33,"index":5590},"line":136,"code":"  it('navigates to the Cases page', () => {\n    navigateFromKibanaCollapsibleTo(CASES_PAGE);\n    cy.url().should('include', CASES_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Explore page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":140,"column":35,"index":5734},"line":140,"code":"  it('navigates to the Explore page', () => {\n    navigateFromKibanaCollapsibleTo(EXPLORE_PAGE);\n    cy.url().should('include', EXPLORE_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Threat Intelligence page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":144,"column":47,"index":5894},"line":144,"code":"  it('navigates to the Threat Intelligence page', () => {\n    navigateFromKibanaCollapsibleTo(THREAT_INTELLIGENCE_PAGE);\n    cy.url().should('include', INDICATORS_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the Manage page","suites":["Kibana navigation to all pages in the Security app "],"updatePoint":{"line":148,"column":34,"index":6056},"line":148,"code":"  it('navigates to the Manage page', () => {\n    navigateFromKibanaCollapsibleTo(MANAGE_PAGE);\n    cy.url().should('include', MANAGE_URL);\n  });","file":"integration/header/navigation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds correctly a filter to the global search bar","suites":["SearchBar"],"updatePoint":{"line":19,"column":54,"index":815},"line":19,"code":"  it('adds correctly a filter to the global search bar', () => {\n    openAddFilterPopover();\n    fillAddFilterForm(getHostIpFilter());\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM).should('have.text', `${getHostIpFilter().key}: ${getHostIpFilter().value}`);\n  });","file":"integration/header/search_bar.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders risk tab","suites":["risk tab"],"updatePoint":{"line":20,"column":22,"index":716},"line":20,"code":"  it('renders risk tab', () => {\n    visitHostDetailsPage('siem-kibana');\n    cy.get('[data-test-subj=\"navigation-hostRisk\"]').click();\n    waitForTableToLoad();\n    cy.get('[data-test-subj=\"topRiskScoreContributors\"]').find(TABLE_ROWS).within(() => {\n      cy.get(TABLE_CELL).contains('Unusual Linux Username');\n    });\n  });","file":"integration/host_details/risk_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"shows risk information overlay when button is clicked","suites":["risk tab"],"updatePoint":{"line":28,"column":59,"index":1080},"line":28,"code":"  it('shows risk information overlay when button is clicked', () => {\n    visitHostDetailsPage('siem-kibana');\n    cy.get('[data-test-subj=\"navigation-hostRisk\"]').click();\n    waitForTableToLoad();\n    cy.get('[data-test-subj=\"open-risk-information-flyout-trigger\"]').click();\n    cy.get('[data-test-subj=\"open-risk-information-flyout\"] .euiFlyoutHeader').contains('How is host risk calculated?');\n  });","file":"integration/host_details/risk_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays \"view all\" option by default","suites":["Events Viewer","Fields rendering"],"updatePoint":{"line":52,"column":45,"index":1953},"line":52,"code":"    it('displays \"view all\" option by default', () => {\n      cy.get(FIELDS_BROWSER_VIEW_BUTTON).should('contain.text', 'View: all');\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays all categories (by default)","suites":["Events Viewer","Fields rendering"],"updatePoint":{"line":55,"column":44,"index":2094},"line":55,"code":"    it('displays all categories (by default)', () => {\n      cy.get(FIELDS_BROWSER_SELECTED_CATEGORIES_BADGES).should('be.empty');\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays only the default selected fields when \"view selected\" option is enabled","suites":["Events Viewer","Fields rendering"],"updatePoint":{"line":58,"column":88,"index":2277},"line":58,"code":"    it('displays only the default selected fields when \"view selected\" option is enabled', () => {\n      activateViewSelected();\n      defaultHeadersInDefaultEcsCategory.forEach(header => cy.get(FIELDS_BROWSER_CHECKBOX(header.id)).should('be.checked'));\n      activateViewAll();\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"launches the inspect query modal when the inspect button is clicked","suites":["Events Viewer","Events viewer query modal"],"updatePoint":{"line":69,"column":75,"index":2675},"line":69,"code":"    it('launches the inspect query modal when the inspect button is clicked', () => {\n      waitsForEventsToBeLoaded();\n      opensInspectQueryModal();\n      cy.get(INSPECT_MODAL).should('exist');\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds a field to the events viewer when the user clicks the checkbox","suites":["Events Viewer","Events viewer fields behaviour"],"updatePoint":{"line":83,"column":75,"index":3079},"line":83,"code":"    it('adds a field to the events viewer when the user clicks the checkbox', () => {\n      const filterInput = 'host.geo.c';\n      filterFieldsBrowser(filterInput);\n      cy.get(HOST_GEO_CITY_NAME_HEADER).should('not.exist');\n      addsHostGeoCityNameToHeader();\n      closeFieldsBrowser();\n      cy.get(HOST_GEO_CITY_NAME_HEADER).should('exist');\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"resets all fields in the events viewer when `Reset Fields` is clicked","suites":["Events Viewer","Events viewer fields behaviour"],"updatePoint":{"line":91,"column":77,"index":3438},"line":91,"code":"    it('resets all fields in the events viewer when `Reset Fields` is clicked', () => {\n      const filterInput = 'host.geo.c';\n      filterFieldsBrowser(filterInput);\n      cy.get(HOST_GEO_COUNTRY_NAME_HEADER).should('not.exist');\n      addsHostGeoCountryNameToHeader();\n      resetFields();\n      cy.get(HOST_GEO_COUNTRY_NAME_HEADER).should('not.exist');\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"filters the events by applying filter criteria from the search bar at the top of the page","suites":["Events Viewer","Events behavior"],"updatePoint":{"line":109,"column":97,"index":4025},"line":109,"code":"    it('filters the events by applying filter criteria from the search bar at the top of the page', () => {\n      const filterInput = 'aa7ca589f1b8220002f2fc61c64cfbf1'; // this will never match real data\n\n      cy.get(SERVER_SIDE_EVENT_COUNT).invoke('text').then(initialNumberOfEvents => {\n        kqlSearch(`${filterInput}{enter}`);\n        cy.get(SERVER_SIDE_EVENT_COUNT).should('not.have.text', initialNumberOfEvents);\n      });\n    });","file":"integration/hosts/events_viewer.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders the table","suites":["risk tab"],"updatePoint":{"line":25,"column":23,"index":1123},"line":25,"code":"  it('renders the table', () => {\n    kqlSearch('host.name: \"siem-kibana\" {enter}');\n    cy.get(HOST_BY_RISK_TABLE_CELL).eq(3).should('have.text', 'siem-kibana');\n    cy.get(HOST_BY_RISK_TABLE_CELL).eq(4).should('have.text', '21.00');\n    cy.get(HOST_BY_RISK_TABLE_CELL).eq(5).should('have.text', 'Low');\n    clearSearchBar();\n  });","file":"integration/hosts/host_risk_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"filters the table","suites":["risk tab"],"updatePoint":{"line":32,"column":23,"index":1456},"line":32,"code":"  it('filters the table', () => {\n    openRiskTableFilterAndSelectTheCriticalOption();\n    cy.get(HOST_BY_RISK_TABLE_CELL).eq(3).should('not.have.text', 'siem-kibana');\n    removeCritialFilter();\n  });","file":"integration/hosts/host_risk_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to change items count per page","suites":["risk tab"],"updatePoint":{"line":37,"column":51,"index":1686},"line":37,"code":"  it('should be able to change items count per page', () => {\n    selectFiveItemsPerPageOption();\n    cy.get(HOST_BY_RISK_TABLE_HOSTNAME_CELL).should('have.length', 5);\n  });","file":"integration/hosts/host_risk_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should not allow page change when page is empty","suites":["risk tab"],"updatePoint":{"line":41,"column":53,"index":1863},"line":41,"code":"  it('should not allow page change when page is empty', () => {\n    kqlSearch('host.name: \"nonexistent_host\" {enter}');\n    cy.get(HOST_BY_RISK_TABLE_NEXT_PAGE_BUTTON).should(`not.exist`);\n    clearSearchBar();\n  });","file":"integration/hosts/host_risk_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"it renders risk column","suites":["All hosts table"],"updatePoint":{"line":22,"column":28,"index":810},"line":22,"code":"  it('it renders risk column', () => {\n    visit(HOSTS_URL);\n    kqlSearch('host.name: \"siem-kibana\" {enter}');\n    cy.get('[data-test-subj=\"tableHeaderCell_node.risk_4\"]').should('exist');\n    cy.get(`${TABLE_CELL} .euiTableCellContent`).eq(4).should('have.text', 'Low');\n  });","file":"integration/hosts/hosts_risk_column.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"inspects the ","suites":["Inspect","Hosts stats and tables"],"updatePoint":{"line":23,"column":86,"index":912},"line":23,"code":"    INSPECT_HOSTS_BUTTONS_IN_SECURITY.forEach(table => it(`inspects the ${table.title}`, () => {\n      openStatsAndTables(table);\n      cy.get(INSPECT_MODAL).should('be.visible');\n    }));","file":"integration/hosts/inspect.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"inspects the host details","suites":["Inspect","Hosts details"],"updatePoint":{"line":32,"column":33,"index":1158},"line":32,"code":"    it(`inspects the host details`, () => {\n      clickInspectButton(HOST_OVERVIEW);\n      cy.get(INSPECT_MODAL).should('be.visible');\n    });","file":"integration/hosts/inspect.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a single IP with a value for the query","suites":["ml conditional links"],"updatePoint":{"line":14,"column":62,"index":934},"line":14,"code":"  it('sets the KQL from a single IP with a value for the query', () => {\n    visitWithoutDateRange(mlNetworkSingleIpKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '(process.name: \"conhost.exe\" or process.name: \"sc.exe\")');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a multiple IPs with a null for the query","suites":["ml conditional links"],"updatePoint":{"line":18,"column":64,"index":1171},"line":18,"code":"  it('sets the KQL from a multiple IPs with a null for the query', () => {\n    visitWithoutDateRange(mlNetworkMultipleIpNullKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '((source.ip: \"127.0.0.1\" or destination.ip: \"127.0.0.1\") or (source.ip: \"127.0.0.2\" or destination.ip: \"127.0.0.2\"))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a multiple IPs with a value for the query","suites":["ml conditional links"],"updatePoint":{"line":22,"column":65,"index":1476},"line":22,"code":"  it('sets the KQL from a multiple IPs with a value for the query', () => {\n    visitWithoutDateRange(mlNetworkMultipleIpKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '((source.ip: \"127.0.0.1\" or destination.ip: \"127.0.0.1\") or (source.ip: \"127.0.0.2\" or destination.ip: \"127.0.0.2\")) and ((process.name: \"conhost.exe\" or process.name: \"sc.exe\"))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a $ip$ with a value for the query","suites":["ml conditional links"],"updatePoint":{"line":26,"column":57,"index":1831},"line":26,"code":"  it('sets the KQL from a $ip$ with a value for the query', () => {\n    visitWithoutDateRange(mlNetworkKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '(process.name: \"conhost.exe\" or process.name: \"sc.exe\")');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a single host name with a value for query","suites":["ml conditional links"],"updatePoint":{"line":30,"column":65,"index":2061},"line":30,"code":"  it('sets the KQL from a single host name with a value for query', () => {\n    visitWithoutDateRange(mlHostSingleHostKqlQuery);\n    cy.get(KQL_INPUT).invoke('text').should('eq', '(process.name: \"conhost.exe\" or process.name: \"sc.exe\")');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a multiple host names with null for query","suites":["ml conditional links"],"updatePoint":{"line":34,"column":65,"index":2306},"line":34,"code":"  it('sets the KQL from a multiple host names with null for query', () => {\n    visitWithoutDateRange(mlHostMultiHostNullKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '(host.name: \"siem-windows\" or host.name: \"siem-suricata\")');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a multiple host names with a value for query","suites":["ml conditional links"],"updatePoint":{"line":38,"column":68,"index":2551},"line":38,"code":"  it('sets the KQL from a multiple host names with a value for query', () => {\n    visitWithoutDateRange(mlHostMultiHostKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '(host.name: \"siem-windows\" or host.name: \"siem-suricata\") and ((process.name: \"conhost.exe\" or process.name: \"sc.exe\"))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the KQL from a undefined/null host name but with a value for query","suites":["ml conditional links"],"updatePoint":{"line":42,"column":77,"index":2863},"line":42,"code":"  it('sets the KQL from a undefined/null host name but with a value for query', () => {\n    visitWithoutDateRange(mlHostVariableHostKqlQuery);\n    cy.get(KQL_INPUT).should('have.text', '(process.name: \"conhost.exe\" or process.name: \"sc.exe\")');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a single IP with a null for the query","suites":["ml conditional links"],"updatePoint":{"line":46,"column":58,"index":3095},"line":46,"code":"  it('redirects from a single IP with a null for the query', () => {\n    visitWithoutDateRange(mlNetworkSingleIpNullKqlQuery);\n    cy.url().should('include', 'app/security/network/ip/127.0.0.1/source/flows?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a single IP with a value for the query","suites":["ml conditional links"],"updatePoint":{"line":50,"column":59,"index":3660},"line":50,"code":"  it('redirects from a single IP with a value for the query', () => {\n    visitWithoutDateRange(mlNetworkSingleIpKqlQuery);\n    cy.url().should('include', '/app/security/network/ip/127.0.0.1/source/flows?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&query=(language:kuery,query:%27(process.name:%20%22conhost.exe%22%20or%20process.name:%20%22sc.exe%22)%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a multiple IPs with a null for the query","suites":["ml conditional links"],"updatePoint":{"line":54,"column":61,"index":4331},"line":54,"code":"  it('redirects from a multiple IPs with a null for the query', () => {\n    visitWithoutDateRange(mlNetworkMultipleIpNullKqlQuery);\n    cy.url().should('include', 'app/security/network/flows?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&query=(language:kuery,query:%27((source.ip:%20%22127.0.0.1%22%20or%20destination.ip:%20%22127.0.0.1%22)%20or%20(source.ip:%20%22127.0.0.2%22%20or%20destination.ip:%20%22127.0.0.2%22))%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a multiple IPs with a value for the query","suites":["ml conditional links"],"updatePoint":{"line":58,"column":62,"index":5069},"line":58,"code":"  it('redirects from a multiple IPs with a value for the query', () => {\n    visitWithoutDateRange(mlNetworkMultipleIpKqlQuery);\n    cy.url().should('include', '/app/security/network/flows?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&query=(language:kuery,query:%27((source.ip:%20%22127.0.0.1%22%20or%20destination.ip:%20%22127.0.0.1%22)%20or%20(source.ip:%20%22127.0.0.2%22%20or%20destination.ip:%20%22127.0.0.2%22))%20and%20((process.name:%20%22conhost.exe%22%20or%20process.name:%20%22sc.exe%22))%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a $ip$ with a null query","suites":["ml conditional links"],"updatePoint":{"line":62,"column":45,"index":5869},"line":62,"code":"  it('redirects from a $ip$ with a null query', () => {\n    visitWithoutDateRange(mlNetworkNullKqlQuery);\n    cy.url().should('include', '/app/security/network/flows?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a $ip$ with a value for the query","suites":["ml conditional links"],"updatePoint":{"line":66,"column":54,"index":6402},"line":66,"code":"  it('redirects from a $ip$ with a value for the query', () => {\n    visitWithoutDateRange(mlNetworkKqlQuery);\n    cy.url().should('include', `/app/security/network/flows?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&query=(language:kuery,query:%27(process.name:%20%22conhost.exe%22%20or%20process.name:%20%22sc.exe%22)%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-08-28T11:00:00.000Z%27,kind:absolute,to:%272019-08-28T13:59:59.999Z%27)))`);\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a single host name with a null for the query","suites":["ml conditional links"],"updatePoint":{"line":70,"column":65,"index":7049},"line":70,"code":"  it('redirects from a single host name with a null for the query', () => {\n    visitWithoutDateRange(mlHostSingleHostNullKqlQuery);\n    cy.url().should('include', '/app/security/hosts/name/siem-windows/anomalies?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a host name with a variable in the query","suites":["ml conditional links"],"updatePoint":{"line":74,"column":61,"index":7616},"line":74,"code":"  it('redirects from a host name with a variable in the query', () => {\n    visitWithoutDateRange(mlHostSingleHostKqlQueryVariable);\n    cy.url().should('include', '/app/security/hosts/name/siem-windows/anomalies?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a single host name with a value for query","suites":["ml conditional links"],"updatePoint":{"line":78,"column":62,"index":8188},"line":78,"code":"  it('redirects from a single host name with a value for query', () => {\n    visitWithoutDateRange(mlHostSingleHostKqlQuery);\n    cy.url().should('include', '/app/security/hosts/name/siem-windows/anomalies?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&query=(language:kuery,query:%27(process.name:%20%22conhost.exe%22%20or%20process.name:%20%22sc.exe%22)%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a multiple host names with null for query","suites":["ml conditional links"],"updatePoint":{"line":82,"column":62,"index":8859},"line":82,"code":"  it('redirects from a multiple host names with null for query', () => {\n    visitWithoutDateRange(mlHostMultiHostNullKqlQuery);\n    cy.url().should('include', '/app/security/hosts/anomalies?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&query=(language:kuery,query:%27(host.name:%20%22siem-windows%22%20or%20host.name:%20%22siem-suricata%22)%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a multiple host names with a value for query","suites":["ml conditional links"],"updatePoint":{"line":86,"column":65,"index":9520},"line":86,"code":"  it('redirects from a multiple host names with a value for query', () => {\n    visitWithoutDateRange(mlHostMultiHostKqlQuery);\n    cy.url().should('include', '/app/security/hosts/anomalies?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&query=(language:kuery,query:%27(host.name:%20%22siem-windows%22%20or%20host.name:%20%22siem-suricata%22)%20and%20((process.name:%20%22conhost.exe%22%20or%20process.name:%20%22sc.exe%22))%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a undefined/null host name with a null for the KQL","suites":["ml conditional links"],"updatePoint":{"line":90,"column":71,"index":10265},"line":90,"code":"  it('redirects from a undefined/null host name with a null for the KQL', () => {\n    visitWithoutDateRange(mlHostVariableHostNullKqlQuery);\n    cy.url().should('include', '/app/security/hosts/anomalies?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"redirects from a undefined/null host name but with a value for query","suites":["ml conditional links"],"updatePoint":{"line":94,"column":74,"index":10829},"line":94,"code":"  it('redirects from a undefined/null host name but with a value for query', () => {\n    visitWithoutDateRange(mlHostVariableHostKqlQuery);\n    cy.url().should('include', '/app/security/hosts/anomalies?sourcerer=(default:(id:security-solution-default,selectedPatterns:!(%27auditbeat-*%27)))&query=(language:kuery,query:%27(process.name:%20%22conhost.exe%22%20or%20process.name:%20%22sc.exe%22)%27)&timerange=(global:(linkTo:!(timeline),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)),timeline:(linkTo:!(global),timerange:(from:%272019-06-06T06:00:00.000Z%27,kind:absolute,to:%272019-06-07T05:59:59.999Z%27)))');\n  });","file":"integration/ml/ml_conditional_links.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Adds global filter - filter in","suites":["Hover actions"],"updatePoint":{"line":34,"column":36,"index":1378},"line":34,"code":"  it('Adds global filter - filter in', () => {\n    clickOnFilterIn();\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM).should('have.text', `destination.domain: ${testDomain}`);\n  });","file":"integration/network/hover_actions.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Adds global filter - filter out","suites":["Hover actions"],"updatePoint":{"line":38,"column":37,"index":1555},"line":38,"code":"  it('Adds global filter - filter out', () => {\n    clickOnFilterOut();\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM).should('contains.text', `NOT destination.domain: ${testDomain}`);\n  });","file":"integration/network/hover_actions.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Adds to timeline","suites":["Hover actions"],"updatePoint":{"line":42,"column":22,"index":1726},"line":42,"code":"  it('Adds to timeline', () => {\n    const DATA_PROVIDER_ITEM_NUMBER = 1;\n    clickOnAddToTimeline();\n    openTimelineUsingToggle();\n    cy.get(DATA_PROVIDERS).should('have.length', DATA_PROVIDER_ITEM_NUMBER);\n    cy.get(DATA_PROVIDERS).should('have.text', `destination.domain: \"${testDomain}\"`);\n  });","file":"integration/network/hover_actions.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Show topN","suites":["Hover actions"],"updatePoint":{"line":49,"column":15,"index":2022},"line":49,"code":"  it('Show topN', () => {\n    clickOnShowTopN();\n    cy.get(TOP_N_CONTAINER).should('exist').should('contain.text', 'Top destination.domain');\n  });","file":"integration/network/hover_actions.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Copy value","suites":["Hover actions"],"updatePoint":{"line":53,"column":16,"index":2172},"line":53,"code":"  it('Copy value', () => {\n    cy.document().then(doc => cy.spy(doc, 'execCommand').as('execCommand'));\n    clickOnCopyValue();\n    cy.get('@execCommand').should('have.been.calledOnceWith', 'copy');\n  });","file":"integration/network/hover_actions.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"inspects the ","suites":["Inspect","Network stats and tables"],"updatePoint":{"line":20,"column":88,"index":801},"line":20,"code":"    INSPECT_NETWORK_BUTTONS_IN_SECURITY.forEach(table => it(`inspects the ${table.title}`, () => {\n      openStatsAndTables(table);\n      cy.get(INSPECT_MODAL).should('be.visible');\n    }));","file":"integration/network/inspect.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows more items in the popover","suites":["Overflow items","Network stats and tables"],"updatePoint":{"line":32,"column":39,"index":1344},"line":32,"code":"    it('Shows more items in the popover', () => {\n      cy.get(DESTINATION_DOMAIN).eq(0).should('have.text', testDomainOne);\n      cy.get(DESTINATION_DOMAIN).eq(1).should('have.text', testDomainTwo);\n    });","file":"integration/network/overflow_items.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Shows Hover actions for more items in the popover","suites":["Overflow items","Network stats and tables"],"updatePoint":{"line":36,"column":57,"index":1570},"line":36,"code":"    it('Shows Hover actions for more items in the popover', () => {\n      cy.get(FILTER_IN).should('exist');\n      cy.get(FILTER_OUT).should('exist');\n      cy.get(ADD_TO_TIMELINE).should('exist');\n      cy.get(SHOW_TOP_FIELD).should('exist');\n      cy.get(COPY).should('exist');\n    });","file":"integration/network/overflow_items.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders disabled threat intel module as expected","suites":["CTI Link Panel"],"updatePoint":{"line":15,"column":54,"index":725},"line":15,"code":"  it('renders disabled threat intel module as expected', () => {\n    visit(OVERVIEW_URL);\n    cy.get(`${OVERVIEW_CTI_LINKS} ${OVERVIEW_CTI_LINKS_ERROR_INNER_PANEL}`).should('exist');\n    cy.get(`${OVERVIEW_CTI_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 0 indicators');\n    cy.get(`${OVERVIEW_CTI_ENABLE_MODULE_BUTTON}`).should('exist');\n    cy.get(`${OVERVIEW_CTI_ENABLE_MODULE_BUTTON}`).should('have.attr', 'href').and('match', /app\\/integrations\\/browse\\/threat_intel/);\n  });","file":"integration/overview/cti_link_panel.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders disabled dashboard module as expected when there are no events in the selected time period","suites":["CTI Link Panel","enabled threat intel module"],"updatePoint":{"line":29,"column":106,"index":1453},"line":29,"code":"    it('renders disabled dashboard module as expected when there are no events in the selected time period', () => {\n      visit(`${OVERVIEW_URL}?sourcerer=(timerange:(from:%272021-07-08T04:00:00.000Z%27,kind:absolute,to:%272021-07-09T03:59:59.999Z%27))`);\n      cy.get(`${OVERVIEW_CTI_LINKS}`).should('exist');\n      cy.get(`${OVERVIEW_CTI_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 0 indicators');\n    });","file":"integration/overview/cti_link_panel.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders dashboard module as expected when there are events in the selected time period","suites":["CTI Link Panel","enabled threat intel module"],"updatePoint":{"line":34,"column":94,"index":1857},"line":34,"code":"    it('renders dashboard module as expected when there are events in the selected time period', () => {\n      visit(OVERVIEW_URL);\n      cy.get(`${OVERVIEW_CTI_LINKS}`).should('exist');\n      cy.get(OVERVIEW_CTI_LINKS).should('not.contain.text', 'Anomali');\n      cy.get(OVERVIEW_CTI_LINKS).should('contain.text', 'AbuseCH malware');\n      cy.get(`${OVERVIEW_CTI_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 1 indicator');\n    });","file":"integration/overview/cti_link_panel.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Host stats render with correct values","suites":["Overview Page"],"updatePoint":{"line":27,"column":43,"index":1049},"line":27,"code":"  it('Host stats render with correct values', () => {\n    expandHostStats();\n    HOST_STATS.forEach(stat => {\n      cy.get(stat.domId).should('have.text', stat.value);\n    });\n  });","file":"integration/overview/overview.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Network stats render with correct values","suites":["Overview Page"],"updatePoint":{"line":33,"column":46,"index":1234},"line":33,"code":"  it('Network stats render with correct values', () => {\n    expandNetworkStats();\n    NETWORK_STATS.forEach(stat => {\n      cy.get(stat.domId).should('have.text', stat.value);\n    });\n  });","file":"integration/overview/overview.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should appear on overview page","suites":["Overview Page","Favorite Timelines"],"updatePoint":{"line":40,"column":38,"index":1458},"line":40,"code":"    it('should appear on overview page', () => {\n      createTimeline(getTimeline()).then(response => response.body.data.persistTimeline.timeline.savedObjectId).then(timelineId => {\n        favoriteTimeline({\n          timelineId,\n          timelineType: 'default'\n        }).then(() => {\n          visit(OVERVIEW_URL);\n          cy.get('[data-test-subj=\"overview-recent-timelines\"]').should('contain', getTimeline().title);\n        });\n      });\n    });","file":"integration/overview/overview.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Splash screen should be here","suites":["Overview page with no data"],"updatePoint":{"line":60,"column":34,"index":2079},"line":60,"code":"  it('Splash screen should be here', () => {\n    visit(OVERVIEW_URL);\n    cy.get(OVERVIEW_EMPTY_PAGE).should('be.visible');\n  });","file":"integration/overview/overview.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders disabled panel view as expected","suites":["Risky Hosts Link Panel"],"updatePoint":{"line":20,"column":45,"index":1114},"line":20,"code":"  it('renders disabled panel view as expected', () => {\n    visit(OVERVIEW_URL);\n    cy.get(`${OVERVIEW_RISKY_HOSTS_LINKS} ${OVERVIEW_RISKY_HOSTS_LINKS_ERROR_INNER_PANEL}`).should('exist');\n    cy.get(`${OVERVIEW_RISKY_HOSTS_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 0 hosts');\n    cy.get(`${OVERVIEW_RISKY_HOSTS_ENABLE_MODULE_BUTTON}`).should('exist');\n    cy.get(`${OVERVIEW_RISKY_HOSTS_DOC_LINK}`).should('have.attr', 'href').and('match', /host-risk-score.md/);\n  });","file":"integration/overview/risky_hosts_panel.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders disabled dashboard module as expected when there are no hosts in the selected time period","suites":["Risky Hosts Link Panel","enabled module"],"updatePoint":{"line":36,"column":105,"index":1888},"line":36,"code":"    it('renders disabled dashboard module as expected when there are no hosts in the selected time period', () => {\n      visit(`${OVERVIEW_URL}?sourcerer=(timerange:(from:%272021-07-08T04:00:00.000Z%27,kind:absolute,to:%272021-07-09T03:59:59.999Z%27))`);\n      cy.get(`${OVERVIEW_RISKY_HOSTS_LINKS} ${OVERVIEW_RISKY_HOSTS_LINKS_WARNING_INNER_PANEL}`).should('exist');\n      cy.get(`${OVERVIEW_RISKY_HOSTS_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 0 hosts');\n    });","file":"integration/overview/risky_hosts_panel.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders space aware dashboard module as expected when there are hosts in the selected time period","suites":["Risky Hosts Link Panel","enabled module"],"updatePoint":{"line":41,"column":105,"index":2364},"line":41,"code":"    it('renders space aware dashboard module as expected when there are hosts in the selected time period', () => {\n      visit(OVERVIEW_URL);\n      cy.get(`${OVERVIEW_RISKY_HOSTS_LINKS} ${OVERVIEW_RISKY_HOSTS_LINKS_WARNING_INNER_PANEL}`).should('not.exist');\n      cy.get(`${OVERVIEW_RISKY_HOSTS_IMPORT_DASHBOARD_BUTTON}`).should('exist');\n      cy.get(`${OVERVIEW_RISKY_HOSTS_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 6 hosts');\n      changeSpace(testSpaceName);\n      cy.visit(`/s/${testSpaceName}${OVERVIEW_URL}`);\n      cy.get(`${OVERVIEW_RISKY_HOSTS_TOTAL_EVENT_COUNT}`).should('have.text', 'Showing: 0 hosts');\n      cy.get(`${OVERVIEW_RISKY_HOSTS_ENABLE_MODULE_BUTTON}`).should('exist');\n    });","file":"integration/overview/risky_hosts_panel.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"pagination updates results and page number","suites":["Pagination","Host uncommon processes table)"],"updatePoint":{"line":35,"column":50,"index":1638},"line":35,"code":"    it('pagination updates results and page number', () => {\n      cy.get(UNCOMMON_PROCESSES_TABLE).find(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n      cy.get(UNCOMMON_PROCESSES_TABLE).find(PROCESS_NAME_FIELD).first().invoke('text').then(processNameFirstPage => {\n        goToSecondPage();\n        waitForUncommonProcessesToBeLoaded();\n        cy.get(UNCOMMON_PROCESSES_TABLE).find(PROCESS_NAME_FIELD).first().invoke('text').should(processNameSecondPage => {\n          expect(processNameFirstPage).not.to.eq(processNameSecondPage);\n        });\n      });\n      cy.get(UNCOMMON_PROCESSES_TABLE).find(FIRST_PAGE_SELECTOR).should('not.have.class', 'euiPaginationButton-isActive');\n      cy.get(UNCOMMON_PROCESSES_TABLE).find(SECOND_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n    });","file":"integration/pagination/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"pagination keeps track of page results when tabs change","suites":["Pagination","Host uncommon processes table)"],"updatePoint":{"line":47,"column":63,"index":2490},"line":47,"code":"    it('pagination keeps track of page results when tabs change', () => {\n      cy.get(UNCOMMON_PROCESSES_TABLE).find(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n      goToSecondPage();\n      waitForUncommonProcessesToBeLoaded();\n      cy.get(PROCESS_NAME_FIELD).first().invoke('text').then(expectedThirdPageResult => {\n        openEvents();\n        waitsForEventsToBeLoaded();\n        cy.get(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n        openUncommonProcesses();\n        waitForUncommonProcessesToBeLoaded();\n        cy.get(SECOND_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n        cy.get(PROCESS_NAME_FIELD).first().invoke('text').should(actualThirdPageResult => {\n          expect(expectedThirdPageResult).to.eq(actualThirdPageResult);\n        });\n      });\n    });","file":"integration/pagination/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"pagination resets results and page number to first page when refresh is clicked","suites":["Pagination","Host uncommon processes table)"],"updatePoint":{"line":63,"column":87,"index":3377},"line":63,"code":"    it('pagination resets results and page number to first page when refresh is clicked', () => {\n      cy.get(UNCOMMON_PROCESSES_TABLE).find(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n      goToSecondPage();\n      waitForUncommonProcessesToBeLoaded();\n      cy.get(UNCOMMON_PROCESSES_TABLE).find(FIRST_PAGE_SELECTOR).should('not.have.class', 'euiPaginationButton-isActive');\n      refreshPage();\n      waitForUncommonProcessesToBeLoaded();\n      cy.get(UNCOMMON_PROCESSES_TABLE).find(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n    });","file":"integration/pagination/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"reset all Hosts pagination when sorting column","suites":["Pagination","All users and all Hosts tables"],"updatePoint":{"line":80,"column":54,"index":4128},"line":80,"code":"    it(`reset all Hosts pagination when sorting column`, () => {\n      visit(HOSTS_URL);\n      goToSecondPage();\n      cy.get(ALL_HOSTS_TABLE).find(FIRST_PAGE_SELECTOR).should('not.have.class', 'euiPaginationButton-isActive');\n      sortFirstColumn();\n      cy.get(ALL_HOSTS_TABLE).find(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n    });","file":"integration/pagination/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"reset all users pagination when sorting column","suites":["Pagination","All users and all Hosts tables"],"updatePoint":{"line":87,"column":54,"index":4498},"line":87,"code":"    it(`reset all users pagination when sorting column`, () => {\n      visit(USERS_URL);\n      goToSecondPage();\n      cy.get(ALL_USERS_TABLE).find(FIRST_PAGE_SELECTOR).should('not.have.class', 'euiPaginationButton-isActive');\n      sortFirstColumn();\n      cy.get(ALL_USERS_TABLE).find(FIRST_PAGE_SELECTOR).should('have.class', 'euiPaginationButton-isActive');\n    });","file":"integration/pagination/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Creates a timeline template","suites":["Timeline Templates"],"updatePoint":{"line":26,"column":33,"index":1606},"line":26,"code":"  it('Creates a timeline template', async () => {\n    visitWithoutDateRange(TIMELINES_URL);\n    openTimelineUsingToggle();\n    createNewTimelineTemplate();\n    populateTimeline();\n    addFilter(getTimeline().filter);\n    cy.get(PIN_EVENT).should('have.attr', 'aria-label', 'This event may not be pinned while editing a template timeline');\n    cy.get(LOCKED_ICON).should('be.visible');\n    addNameToTimeline(getTimeline().title);\n    cy.wait('@timeline').then(({\n      response\n    }) => {\n      const timelineId = response?.body.data.persistTimeline.timeline.savedObjectId;\n      addDescriptionToTimeline(getTimeline().description);\n      addNotesToTimeline(getTimeline().notes);\n      markAsFavorite();\n      waitForTimelineChanges();\n      createNewTimelineTemplate();\n      closeTimeline();\n      openTimelineTemplateFromSettings(timelineId);\n      cy.contains(getTimeline().title).should('exist');\n      cy.get(TIMELINES_DESCRIPTION).first().should('have.text', getTimeline().description);\n      cy.get(TIMELINES_PINNED_EVENT_COUNT).first().should('have.text', '1');\n      cy.get(TIMELINES_NOTES_COUNT).first().should('have.text', '1');\n      cy.get(TIMELINES_FAVORITE).first().should('exist');\n      openTimeline(timelineId);\n      cy.get(FAVORITE_TIMELINE).should('exist');\n      cy.get(TIMELINE_TITLE).should('have.text', getTimeline().title);\n      cy.get(TIMELINE_DESCRIPTION).should('have.text', getTimeline().description);\n      cy.get(TIMELINE_QUERY).should('have.text', getTimeline().query); // Comments this assertion until we agreed what to do with the filters.\n      // cy.get(TIMELINE_FILTER(timeline.filter)).should('exist');\n      // cy.get(NOTES_COUNT).should('have.text', '1');\n\n      cy.get(NOTES_TAB_BUTTON).click();\n      cy.get(NOTES_TEXT_AREA).should('exist');\n      cy.get(NOTES).should('have.text', getTimeline().notes);\n    });\n  });","file":"integration/timeline_templates/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Create template from timeline","suites":["Timeline Templates"],"updatePoint":{"line":64,"column":35,"index":3472},"line":64,"code":"  it('Create template from timeline', () => {\n    createTimeline(getTimeline());\n    visitWithoutDateRange(TIMELINES_URL);\n    waitForTimelinesPanelToBeLoaded();\n    expandEventAction();\n    clickingOnCreateTemplateFromTimelineBtn();\n    cy.wait('@timeline', {\n      timeout: 100000\n    });\n    cy.get(TIMELINE_FLYOUT_WRAPPER).should('have.css', 'visibility', 'visible');\n    cy.get(TIMELINE_DESCRIPTION).should('have.text', getTimeline().description);\n    cy.get(TIMELINE_QUERY).should('have.text', getTimeline().query);\n  });","file":"integration/timeline_templates/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Exports a custom timeline template","suites":["Export timelines"],"updatePoint":{"line":26,"column":40,"index":1155},"line":26,"code":"  it('Exports a custom timeline template', function () {\n    visitWithoutDateRange(TIMELINE_TEMPLATES_URL);\n    exportTimeline(this.templateId);\n    cy.wait('@export').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      cy.wrap(response?.body).should('eql', expectedExportedTimelineTemplate(this.templateResponse));\n    });\n  });","file":"integration/timeline_templates/export.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Should have the same query and open the timeline modal","suites":["Create a timeline from a template"],"updatePoint":{"line":23,"column":60,"index":1595},"line":23,"code":"  it('Should have the same query and open the timeline modal', () => {\n    selectCustomTemplates();\n    expandEventAction();\n    clickingOnCreateTimelineFormTemplateBtn();\n    cy.get(TIMELINE_FLYOUT_WRAPPER).should('have.css', 'visibility', 'visible');\n    cy.get(TIMELINE_DESCRIPTION).should('have.text', getTimeline().description);\n    cy.get(TIMELINE_QUERY).should('have.text', getTimeline().query);\n    closeTimeline();\n  });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"toggle create timeline ","suites":["Timelines","Toggle create timeline from plus icon","Privileges: CRUD"],"updatePoint":{"line":44,"column":33,"index":2261},"line":44,"code":"      it('toggle create timeline ', () => {\n        createNewTimeline();\n        addNameAndDescriptionToTimeline(getTimeline());\n        cy.get(TIMELINE_PANEL).should('be.visible');\n      });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should not be able to create/update timeline ","suites":["Timelines","Toggle create timeline from plus icon","Privileges: READ"],"updatePoint":{"line":55,"column":55,"index":2637},"line":55,"code":"      it('should not be able to create/update timeline ', () => {\n        createNewTimeline();\n        cy.get(TIMELINE_PANEL).should('be.visible');\n        cy.get(EDIT_TIMELINE_BTN).should('be.disabled');\n        cy.get(EDIT_TIMELINE_BTN).first().trigger('mouseover', {\n          force: true\n        });\n        cy.get(EDIT_TIMELINE_TOOLTIP).should('be.visible');\n        cy.get(EDIT_TIMELINE_TOOLTIP).should('have.text', 'You can use Timeline to investigate events, but you do not have the required permissions to save timelines for future use. If you need to save timelines, contact your Kibana administrator.');\n      });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"can be added filter","suites":["Timelines","Creates a timeline by clicking untitled timeline from bottom bar"],"updatePoint":{"line":81,"column":27,"index":3619},"line":81,"code":"    it('can be added filter', () => {\n      addFilter(getTimeline().filter);\n      cy.get(TIMELINE_FILTER(getTimeline().filter)).should('exist');\n    });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"pins an event","suites":["Timelines","Creates a timeline by clicking untitled timeline from bottom bar"],"updatePoint":{"line":85,"column":21,"index":3767},"line":85,"code":"    it('pins an event', () => {\n      pinFirstEvent();\n      cy.get(PIN_EVENT).should('have.attr', 'aria-label').and('match', /Unpin the event in row 2/);\n    });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"has a lock icon","suites":["Timelines","Creates a timeline by clicking untitled timeline from bottom bar"],"updatePoint":{"line":89,"column":23,"index":3932},"line":89,"code":"    it('has a lock icon', () => {\n      cy.get(LOCKED_ICON).should('be.visible');\n    });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"can be added notes","suites":["Timelines","Creates a timeline by clicking untitled timeline from bottom bar"],"updatePoint":{"line":92,"column":26,"index":4025},"line":92,"code":"    it('can be added notes', () => {\n      addNotesToTimeline(getTimeline().notes);\n      cy.get(TIMELINE_TAB_CONTENT_GRAPHS_NOTES).find(NOTES_TEXT).should('have.text', getTimeline().notes);\n    });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should update timeline after adding eql","suites":["Timelines","Creates a timeline by clicking untitled timeline from bottom bar"],"updatePoint":{"line":96,"column":47,"index":4245},"line":96,"code":"    it('should update timeline after adding eql', () => {\n      cy.intercept('PATCH', '/api/timeline').as('updateTimeline');\n      const eql = 'any where process.name == \"zsh\"';\n      addEqlToTimeline(eql);\n      cy.wait('@updateTimeline', {\n        timeout: 10000\n      }).its('response.statusCode').should('eq', 200);\n      cy.get(`${TIMELINE_TAB_CONTENT_EQL} ${SERVER_SIDE_EVENT_COUNT}`).invoke('text').then(parseInt).should('be.gt', 0);\n    });","file":"integration/timelines/creation.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays the data provider action menu when Enter is pressed","suites":["timeline data providers"],"updatePoint":{"line":22,"column":66,"index":996},"line":22,"code":"  it('displays the data provider action menu when Enter is pressed', done => {\n    openTimelineUsingToggle();\n    addDataProvider({\n      field: 'host.name',\n      operator: 'exists'\n    }).then(() => {\n      cy.get(TIMELINE_DATA_PROVIDERS_ACTION_MENU).should('not.exist');\n      cy.get(`${TIMELINE_FLYOUT_HEADER} ${TIMELINE_DROPPED_DATA_PROVIDERS}`).pipe($el => $el.trigger('focus')).should('exist');\n      cy.get(`${TIMELINE_FLYOUT_HEADER} ${TIMELINE_DROPPED_DATA_PROVIDERS}`).first().parent().type('{enter}');\n      cy.get(TIMELINE_DATA_PROVIDERS_ACTION_MENU).should('exist');\n      done();\n    });\n  });","file":"integration/timelines/data_providers.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Exports a custom timeline","suites":["Export timelines"],"updatePoint":{"line":26,"column":31,"index":1086},"line":26,"code":"  it('Exports a custom timeline', function () {\n    visitWithoutDateRange(TIMELINES_URL);\n    exportTimeline(this.timelineId);\n    cy.wait('@export').then(({\n      response\n    }) => {\n      cy.wrap(response?.statusCode).should('eql', 200);\n      cy.wrap(response?.body).should('eql', expectedExportedTimeline(this.timelineResponse));\n    });\n  });","file":"integration/timelines/export.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays all categories (by default)","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":47,"column":44,"index":1922},"line":47,"code":"    it('displays all categories (by default)', () => {\n      cy.get(FIELDS_BROWSER_SELECTED_CATEGORIES_BADGES).should('be.empty');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays \"view all\" option by default","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":50,"column":45,"index":2062},"line":50,"code":"    it('displays \"view all\" option by default', () => {\n      cy.get(FIELDS_BROWSER_VIEW_BUTTON).should('contain.text', 'View: all');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays the expected count of categories that match the filter input","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":53,"column":77,"index":2236},"line":53,"code":"    it('displays the expected count of categories that match the filter input', () => {\n      const filterInput = 'host.mac';\n      filterFieldsBrowser(filterInput);\n      cy.get(FIELDS_BROWSER_CATEGORIES_COUNT).should('have.text', '2');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays a search results label with the expected count of fields matching the filter input","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":58,"column":99,"index":2504},"line":58,"code":"    it('displays a search results label with the expected count of fields matching the filter input', () => {\n      const filterInput = 'host.mac';\n      filterFieldsBrowser(filterInput);\n      cy.get(FIELDS_BROWSER_FIELDS_COUNT).should('contain.text', '2');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"displays only the selected fields when \"view selected\" option is enabled","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":63,"column":80,"index":2752},"line":63,"code":"    it('displays only the selected fields when \"view selected\" option is enabled', () => {\n      activateViewSelected();\n      cy.get(FIELDS_BROWSER_FIELDS_COUNT).should('contain.text', `${defaultHeaders.length}`);\n      defaultHeaders.forEach(header => {\n        cy.get(`[data-test-subj=\"field-${header.id}-checkbox\"]`).should('be.checked');\n      });\n      activateViewAll();\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"creates the category badge when it is selected","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":71,"column":54,"index":3112},"line":71,"code":"    it('creates the category badge when it is selected', () => {\n      const category = 'host';\n      cy.get(FIELDS_BROWSER_CATEGORY_BADGE(category)).should('not.exist');\n      toggleCategory(category);\n      cy.get(FIELDS_BROWSER_CATEGORY_BADGE(category)).should('exist');\n      toggleCategory(category);\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"search a category should match the category in the category filter","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":78,"column":74,"index":3446},"line":78,"code":"    it('search a category should match the category in the category filter', () => {\n      const category = 'host';\n      filterFieldsBrowser(category);\n      toggleCategoryFilter();\n      cy.get(FIELDS_BROWSER_CATEGORIES_FILTER_CONTAINER).should('contain.text', category);\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"search a category should filter out non matching categories in the category filter","suites":["Fields Browser","Fields Browser rendering"],"updatePoint":{"line":84,"column":90,"index":3744},"line":84,"code":"    it('search a category should filter out non matching categories in the category filter', () => {\n      const category = 'host';\n      const categoryCheck = 'event';\n      filterFieldsBrowser(category);\n      toggleCategoryFilter();\n      cy.get(FIELDS_BROWSER_CATEGORIES_FILTER_CONTAINER).should('not.contain.text', categoryCheck);\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"removes the message field from the timeline when the user un-checks the field","suites":["Fields Browser","Editing the timeline"],"updatePoint":{"line":103,"column":85,"index":4369},"line":103,"code":"    it('removes the message field from the timeline when the user un-checks the field', () => {\n      cy.get(FIELDS_BROWSER_MESSAGE_HEADER).should('exist');\n      removesMessageField();\n      closeFieldsBrowser();\n      cy.get(FIELDS_BROWSER_MESSAGE_HEADER).should('not.exist');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds a field to the timeline when the user clicks the checkbox","suites":["Fields Browser","Editing the timeline"],"updatePoint":{"line":109,"column":70,"index":4641},"line":109,"code":"    it('adds a field to the timeline when the user clicks the checkbox', () => {\n      const filterInput = 'host.geo.c';\n      closeFieldsBrowser();\n      cy.get(FIELDS_BROWSER_HOST_GEO_CITY_NAME_HEADER).should('not.exist');\n      openTimelineFieldsBrowser();\n      filterFieldsBrowser(filterInput);\n      addsHostGeoCityNameToTimeline();\n      closeFieldsBrowser();\n      cy.get(FIELDS_BROWSER_HOST_GEO_CITY_NAME_HEADER).should('exist');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"resets all fields in the timeline when `Reset Fields` is clicked","suites":["Fields Browser","Editing the timeline"],"updatePoint":{"line":119,"column":72,"index":5090},"line":119,"code":"    it('resets all fields in the timeline when `Reset Fields` is clicked', () => {\n      const filterInput = 'host.geo.c';\n      filterFieldsBrowser(filterInput);\n      cy.get(FIELDS_BROWSER_HEADER_HOST_GEO_CONTINENT_NAME_HEADER).should('not.exist');\n      addsHostGeoContinentNameToTimeline();\n      closeFieldsBrowser();\n      cy.get(FIELDS_BROWSER_HEADER_HOST_GEO_CONTINENT_NAME_HEADER).should('exist');\n      openTimelineFieldsBrowser();\n      resetFields();\n      cy.get(FIELDS_BROWSER_HEADER_HOST_GEO_CONTINENT_NAME_HEADER).should('not.exist');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"restores focus to the Customize Columns button when `Reset Fields` is clicked","suites":["Fields Browser","Editing the timeline"],"updatePoint":{"line":130,"column":85,"index":5662},"line":130,"code":"    it('restores focus to the Customize Columns button when `Reset Fields` is clicked', () => {\n      openTimelineFieldsBrowser();\n      resetFields();\n      cy.get(TIMELINE_FIELDS_BUTTON).should('have.focus');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"restores focus to the Customize Columns button when Esc is pressed","suites":["Fields Browser","Editing the timeline"],"updatePoint":{"line":135,"column":74,"index":5870},"line":135,"code":"    it('restores focus to the Customize Columns button when Esc is pressed', () => {\n      openTimelineFieldsBrowser();\n      cy.get(FIELDS_BROWSER_FILTER_INPUT).type('{esc}');\n      cy.get(TIMELINE_FIELDS_BUTTON).should('have.focus');\n    });","file":"integration/timelines/fields_browser.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"toggles open the timeline","suites":["timeline flyout button"],"updatePoint":{"line":21,"column":31,"index":979},"line":21,"code":"  it('toggles open the timeline', () => {\n    openTimelineUsingToggle();\n    cy.get(TIMELINE_FLYOUT_HEADER).should('have.css', 'visibility', 'visible');\n    closeTimelineUsingToggle();\n  });","file":"integration/timelines/flyout_button.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"re-focuses the toggle button when timeline is closed by clicking the active timeline toggle button","suites":["timeline flyout button"],"updatePoint":{"line":26,"column":104,"index":1243},"line":26,"code":"  it('re-focuses the toggle button when timeline is closed by clicking the active timeline toggle button', () => {\n    openTimelineUsingToggle();\n    closeTimelineUsingToggle();\n    cy.get(TIMELINE_BOTTOM_BAR_TOGGLE_BUTTON).should('have.focus');\n  });","file":"integration/timelines/flyout_button.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"re-focuses the toggle button when timeline is closed by clicking the [X] close button","suites":["timeline flyout button"],"updatePoint":{"line":31,"column":91,"index":1482},"line":31,"code":"  it('re-focuses the toggle button when timeline is closed by clicking the [X] close button', () => {\n    openTimelineUsingToggle();\n    closeTimelineUsingCloseButton();\n    cy.get(TIMELINE_BOTTOM_BAR_TOGGLE_BUTTON).should('have.focus');\n  });","file":"integration/timelines/flyout_button.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"re-focuses the toggle button when timeline is closed by pressing the Esc key","suites":["timeline flyout button"],"updatePoint":{"line":36,"column":82,"index":1717},"line":36,"code":"  it('re-focuses the toggle button when timeline is closed by pressing the Esc key', () => {\n    openTimelineUsingToggle();\n    cy.get('body').type('{esc}');\n    cy.get(TIMELINE_BOTTOM_BAR_TOGGLE_BUTTON).should('have.focus');\n  });","file":"integration/timelines/flyout_button.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"the `(+)` button popover menu owns focus","suites":["timeline flyout button"],"updatePoint":{"line":41,"column":46,"index":1913},"line":41,"code":"  it('the `(+)` button popover menu owns focus', () => {\n    cy.get(TIMELINE_SETTINGS_ICON).filter(':visible').click({\n      force: true\n    });\n    cy.get(`${CREATE_NEW_TIMELINE}`).pipe($el => $el.trigger('focus')).should('have.focus');\n    cy.get(TIMELINE_SETTINGS_ICON).filter(':visible').type('{esc}');\n    cy.get(CREATE_NEW_TIMELINE).should('not.be.visible');\n  });","file":"integration/timelines/flyout_button.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should render the global search dropdown when the input is focused","suites":["timeline flyout button"],"updatePoint":{"line":49,"column":72,"index":2310},"line":49,"code":"  it('should render the global search dropdown when the input is focused', () => {\n    openTimelineUsingToggle();\n    cy.get('[data-test-subj=\"nav-search-input\"]').focus();\n    cy.get('[data-test-subj=\"nav-search-input\"]').should('be.focused');\n    cy.get('[data-test-subj=\"nav-search-option\"]').should('be.visible');\n    cy.get('[data-test-subj=\"nav-search-option\"]').first().trigger('mouseenter'); // check that at least one item is visible in the search bar after mousing over, i.e. it's still usable.\n\n    cy.get('[data-test-subj=\"nav-search-option\"]').its('length').should('be.gte', 1);\n    closeTimelineUsingCloseButton();\n  });","file":"integration/timelines/flyout_button.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Should hide timeline header and tab list area","suites":["Toggle full screen"],"updatePoint":{"line":21,"column":51,"index":867},"line":21,"code":"  it('Should hide timeline header and tab list area', () => {\n    enterFullScreenMode();\n    cy.get(TIMELINE_TABS).should('not.exist');\n    cy.get(TIMELINE_HEADER).should('not.be.visible');\n  });","file":"integration/timelines/full_screen.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Should show timeline header and tab list area","suites":["Toggle full screen"],"updatePoint":{"line":26,"column":51,"index":1063},"line":26,"code":"  it('Should show timeline header and tab list area', () => {\n    exitFullScreenMode();\n    cy.get(TIMELINE_TABS).should('exist');\n    cy.get(TIMELINE_HEADER).should('be.visible');\n  });","file":"integration/timelines/full_screen.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"inspects the timeline","suites":["Inspect","Timeline"],"updatePoint":{"line":14,"column":29,"index":652},"line":14,"code":"    it('inspects the timeline', () => {\n      const hostExistsQuery = 'host.name: *';\n      login();\n      visit(HOSTS_URL);\n      openTimelineUsingToggle();\n      executeTimelineKQL(hostExistsQuery);\n      openTimelineInspectButton();\n      cy.get(INSPECT_MODAL).should('be.visible');\n    });","file":"integration/timelines/inspect.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"persist the deletion of a column","suites":["persistent timeline"],"updatePoint":{"line":24,"column":38,"index":1024},"line":24,"code":"  it('persist the deletion of a column', function () {\n    const MESSAGE_COLUMN = 'message';\n    const MESSAGE_COLUMN_POSITION = 2;\n    cy.get(DATAGRID_HEADERS).eq(MESSAGE_COLUMN_POSITION).should('have.text', MESSAGE_COLUMN);\n    removeColumn(MESSAGE_COLUMN);\n    cy.get(DATAGRID_HEADERS).should('have.length', this.expectedNumberOfTimelineColumns);\n    reload();\n    waitsForEventsToBeLoaded();\n    cy.get(DATAGRID_HEADERS).should('have.length', this.expectedNumberOfTimelineColumns);\n    cy.get(DATAGRID_HEADERS).each($el => expect($el.text()).not.equal(MESSAGE_COLUMN));\n  });","file":"integration/timelines/local_storage.spec.ts","skipped":true,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should render mockdown","suites":["Timeline notes tab"],"updatePoint":{"line":25,"column":28,"index":1502},"line":25,"code":"  it('should render mockdown', () => {\n    addNotesToTimeline(getTimelineNonValidQuery().notes);\n    cy.get(NOTES_TEXT_AREA).should('exist');\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should contain notes","suites":["Timeline notes tab"],"updatePoint":{"line":29,"column":26,"index":1648},"line":29,"code":"  it('should contain notes', () => {\n    addNotesToTimeline(getTimelineNonValidQuery().notes);\n    cy.get(NOTES_TEXT).first().should('have.text', getTimelineNonValidQuery().notes);\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to render font in bold","suites":["Timeline notes tab"],"updatePoint":{"line":33,"column":43,"index":1852},"line":33,"code":"  it('should be able to render font in bold', () => {\n    addNotesToTimeline(`**bold**`);\n    cy.get(`${NOTES_TEXT} strong`).last().should('have.text', `bold`);\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to render font in italics","suites":["Timeline notes tab"],"updatePoint":{"line":37,"column":46,"index":2022},"line":37,"code":"  it('should be able to render font in italics', () => {\n    addNotesToTimeline(`_italics_`);\n    cy.get(`${NOTES_TEXT} em`).last().should('have.text', `italics`);\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to render code blocks","suites":["Timeline notes tab"],"updatePoint":{"line":41,"column":42,"index":2188},"line":41,"code":"  it('should be able to render code blocks', () => {\n    addNotesToTimeline(`\\`code\\``);\n    cy.get(NOTES_CODE_BLOCK).should('exist');\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should render the right author","suites":["Timeline notes tab"],"updatePoint":{"line":45,"column":36,"index":2323},"line":45,"code":"  it('should render the right author', () => {\n    addNotesToTimeline(getTimelineNonValidQuery().notes);\n    cy.get(NOTES_AUTHOR).first().should('have.text', text);\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to render a link","suites":["Timeline notes tab"],"updatePoint":{"line":49,"column":37,"index":2495},"line":49,"code":"  it('should be able to render a link', () => {\n    addNotesToTimeline(`[${text}](${link})`);\n    cy.get(NOTES_LINK).last().should('have.text', `${text}(opens in a new tab or window)`);\n    cy.get(NOTES_LINK).last().click();\n  });","file":"integration/timelines/notes_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should open a modal","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":34,"column":27,"index":1973},"line":34,"code":"    it('should open a modal', () => {\n      cy.get(OPEN_TIMELINE_MODAL).should('be.visible');\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline info - title","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":37,"column":44,"index":2092},"line":37,"code":"    it('should display timeline info - title', () => {\n      cy.contains(getTimeline().title).should('exist');\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline info - description","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":40,"column":50,"index":2217},"line":40,"code":"    it('should display timeline info - description', () => {\n      cy.get(TIMELINES_DESCRIPTION).last().should('have.text', getTimeline().description);\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline info - pinned event count","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":43,"column":57,"index":2384},"line":43,"code":"    it('should display timeline info - pinned event count', () => {\n      cy.get(TIMELINES_PINNED_EVENT_COUNT).last().should('have.text', '1');\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline info - notes count","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":46,"column":50,"index":2529},"line":46,"code":"    it('should display timeline info - notes count', () => {\n      cy.get(TIMELINES_NOTES_COUNT).last().should('have.text', '1');\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline info - favorite timeline","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":49,"column":56,"index":2673},"line":49,"code":"    it('should display timeline info - favorite timeline', () => {\n      cy.get(TIMELINES_FAVORITE).last().should('exist');\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline content - title","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":52,"column":47,"index":2796},"line":52,"code":"    it('should display timeline content - title', () => {\n      cy.get(TIMELINE_TITLE).should('have.text', getTimeline().title);\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline content - description","suites":["Open timeline","Open timeline modal"],"updatePoint":{"line":55,"column":53,"index":2939},"line":55,"code":"    it('should display timeline content - description', () => {\n      cy.get(TIMELINE_DESCRIPTION).should('have.text', getTimeline().description);\n    });","file":"integration/timelines/open_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should have  events in the page by default","suites":["Pagination"],"updatePoint":{"line":27,"column":66,"index":1199},"line":27,"code":"  it(`should have ${defaultPageSize} events in the page by default`, () => {\n    cy.get(TIMELINE_EVENT).should('have.length', defaultPageSize);\n  });","file":"integration/timelines/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should select  items per page by default","suites":["Pagination"],"updatePoint":{"line":30,"column":64,"index":1347},"line":30,"code":"  it(`should select ${defaultPageSize} items per page by default`, () => {\n    cy.get(TIMELINE_EVENTS_COUNT_PER_PAGE).should('contain.text', defaultPageSize);\n  });","file":"integration/timelines/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to go to next / previous page","suites":["Pagination"],"updatePoint":{"line":33,"column":50,"index":1498},"line":33,"code":"  it('should be able to go to next / previous page', () => {\n    cy.get(`${TIMELINE_FLYOUT} ${TIMELINE_EVENTS_COUNT_NEXT_PAGE}`).first().click();\n    cy.get(`${TIMELINE_FLYOUT} ${TIMELINE_EVENTS_COUNT_PREV_PAGE}`).first().click();\n  });","file":"integration/timelines/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to change items count per page with the dropdown","suites":["Pagination"],"updatePoint":{"line":37,"column":69,"index":1754},"line":37,"code":"  it('should be able to change items count per page with the dropdown', () => {\n    const itemsPerPage = 100;\n    cy.get(TIMELINE_EVENTS_COUNT_PER_PAGE_BTN).first().click({\n      force: true\n    });\n    cy.get(TIMELINE_EVENTS_COUNT_PER_PAGE_OPTION(itemsPerPage)).click();\n    cy.get(TIMELINE_EVENTS_COUNT_PER_PAGE).should('not.have.text', '0');\n    cy.get(TIMELINE_EVENTS_COUNT_PER_PAGE).invoke('text').then(events => {\n      cy.wrap(parseInt(events, 10)).should('be.gt', defaultPageSize);\n    });\n  });","file":"integration/timelines/pagination.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should contain the right query","suites":["Timeline query tab","Query tab"],"updatePoint":{"line":30,"column":38,"index":1840},"line":30,"code":"    it('should contain the right query', () => {\n      cy.get(TIMELINE_QUERY).should('have.text', `${getTimeline().query}`);\n    });","file":"integration/timelines/query_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to add event note","suites":["Timeline query tab","Query tab"],"updatePoint":{"line":33,"column":40,"index":1975},"line":33,"code":"    it('should be able to add event note', () => {\n      cy.get(NOTE_CARD_CONTENT).should('contain', 'event note');\n    });","file":"integration/timelines/query_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display timeline filter","suites":["Timeline query tab","Query tab"],"updatePoint":{"line":36,"column":38,"index":2097},"line":36,"code":"    it('should display timeline filter', () => {\n      cy.get(TIMELINE_FILTER(getTimeline().filter)).should('exist');\n    });","file":"integration/timelines/query_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should display pinned events","suites":["Timeline query tab","Query tab"],"updatePoint":{"line":39,"column":36,"index":2221},"line":39,"code":"    it('should display pinned events', () => {\n      cy.get(PIN_EVENT).should('have.attr', 'aria-label').and('match', /Unpin the event in row 2/);\n    });","file":"integration/timelines/query_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should have an unlock icon","suites":["Timeline query tab","Query tab"],"updatePoint":{"line":42,"column":34,"index":2374},"line":42,"code":"    it('should have an unlock icon', () => {\n      cy.get(UNLOCKED_ICON).should('be.visible');\n    });","file":"integration/timelines/query_tab.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Row renderers should be enabled by default","suites":["Row renderers"],"updatePoint":{"line":34,"column":48,"index":1507},"line":34,"code":"  it('Row renderers should be enabled by default', () => {\n    cy.get(TIMELINE_ROW_RENDERERS_MODAL_ITEMS_CHECKBOX).should('exist');\n    cy.get(TIMELINE_ROW_RENDERERS_MODAL_ITEMS_CHECKBOX).should('be.checked');\n  });","file":"integration/timelines/row_renderers.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Selected renderer can be disabled and enabled","suites":["Row renderers"],"updatePoint":{"line":38,"column":51,"index":1726},"line":38,"code":"  it('Selected renderer can be disabled and enabled', () => {\n    cy.get(TIMELINE_ROW_RENDERERS_SEARCHBOX).should('exist');\n    cy.get(TIMELINE_ROW_RENDERERS_SEARCHBOX).type('flow'); // Intercepts should be before click handlers that activate them rather than afterwards or you have race conditions\n\n    cy.intercept('PATCH', '/api/timeline').as('updateTimeline');\n    cy.get(TIMELINE_ROW_RENDERERS_MODAL_ITEMS_CHECKBOX).first().uncheck();\n    cy.wait('@updateTimeline').then(interception => {\n      expect(interception.request.body.timeline.excludedRowRendererIds).to.contain('netflow');\n    });\n    cy.get(TIMELINE_ROW_RENDERERS_MODAL_ITEMS_CHECKBOX).first().check();\n    cy.wait('@updateTimeline').then(interception => {\n      expect(interception.request.body.timeline.excludedRowRendererIds).not.to.contain('netflow');\n    });\n  });","file":"integration/timelines/row_renderers.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Selected renderer can be disabled with one click","suites":["Row renderers"],"updatePoint":{"line":52,"column":54,"index":2566},"line":52,"code":"  it('Selected renderer can be disabled with one click', () => {\n    // Ensure these elements are visible before continuing since sometimes it takes a second for the modal to show up\n    // and it gives the click handlers a bit of time to be initialized as well to reduce chances of flake but you still\n    // have to use pipe() below as an additional measure.\n    cy.get(TIMELINE_ROW_RENDERERS_DISABLE_ALL_BTN).should('exist');\n    cy.get(TIMELINE_ROW_RENDERERS_MODAL_ITEMS_CHECKBOX).should('be.checked'); // Intercepts should be before click handlers that activate them rather than afterwards or you have race conditions\n\n    cy.intercept('PATCH', '/api/timeline').as('updateTimeline'); // Keep clicking on the disable all button until the first element of all the elements are no longer checked.\n    // In cases where the click handler is not present on the page just yet, this will cause the button to be clicked\n    // multiple times until it sees that the click took effect. You could go through the whole list but I just check\n    // for the first to be unchecked and then assume the click was successful\n\n    cy.root().pipe($el => {\n      $el.find(TIMELINE_ROW_RENDERERS_DISABLE_ALL_BTN).trigger('click');\n      return $el.find(TIMELINE_ROW_RENDERERS_MODAL_ITEMS_CHECKBOX).first();\n    }).should('not.be.checked');\n    cy.wait('@updateTimeline').its('response.statusCode').should('eq', 200);\n  });","file":"integration/timelines/row_renderers.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Signature tooltips do not overlap","suites":["Row renderers","Suricata"],"line":73,"code":"    it.skip('Signature tooltips do not overlap', () => {","file":"integration/timelines/row_renderers.spec.ts","skipped":true,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"executes a KQL query","suites":["Timeline search and filters","timeline search or filter KQL bar"],"updatePoint":{"line":23,"column":28,"index":1041},"line":23,"code":"    it('executes a KQL query', () => {\n      const hostExistsQuery = 'host.name: *';\n      openTimelineUsingToggle();\n      executeTimelineKQL(hostExistsQuery);\n      cy.get(SERVER_SIDE_EVENT_COUNT).should($count => expect(+$count.text()).to.be.gt(0));\n    });","file":"integration/timelines/search_or_filter.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to update timeline kqlMode with filter","suites":["Timeline search and filters","Update kqlMode for timeline"],"updatePoint":{"line":40,"column":61,"index":1717},"line":40,"code":"    it('should be able to update timeline kqlMode with filter', () => {\n      cy.get(TIMELINE_KQLMODE_FILTER).click();\n      cy.wait('@update').then(({\n        response\n      }) => {\n        cy.wrap(response?.statusCode).should('eql', 200);\n        cy.wrap(response?.body.data.persistTimeline.timeline.kqlMode).should('eql', 'filter');\n        cy.get(ADD_FILTER).should('exist');\n      });\n    });","file":"integration/timelines/search_or_filter.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"should be able to update timeline kqlMode with search","suites":["Timeline search and filters","Update kqlMode for timeline"],"updatePoint":{"line":50,"column":61,"index":2115},"line":50,"code":"    it('should be able to update timeline kqlMode with search', () => {\n      cy.get(TIMELINE_KQLMODE_SEARCH).click();\n      cy.wait('@update').then(({\n        response\n      }) => {\n        cy.wrap(response?.statusCode).should('eql', 200);\n        cy.wrap(response?.body.data.persistTimeline.timeline.kqlMode).should('eql', 'search');\n        cy.get(ADD_FILTER).should('not.exist');\n      });\n    });","file":"integration/timelines/search_or_filter.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"removes the @timestamp field from the timeline when the user un-checks the toggle","suites":["toggle column in timeline"],"updatePoint":{"line":28,"column":87,"index":1189},"line":28,"code":"  it('removes the @timestamp field from the timeline when the user un-checks the toggle', () => {\n    expandFirstTimelineEventDetails();\n    clickTimestampToggleField();\n    cy.get(TIMESTAMP_HEADER_FIELD).should('not.exist');\n  });","file":"integration/timelines/toggle_column.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"adds the _id field to the timeline when the user checks the field","suites":["toggle column in timeline"],"updatePoint":{"line":33,"column":71,"index":1405},"line":33,"code":"  it('adds the _id field to the timeline when the user checks the field', () => {\n    expandFirstTimelineEventDetails();\n    clickIdToggleField();\n    cy.get(ID_HEADER_FIELD).should('exist');\n  });","file":"integration/timelines/toggle_column.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Redirects to alerts from old siem Detections URL","suites":["URL compatibility"],"updatePoint":{"line":20,"column":54,"index":1081},"line":20,"code":"  it('Redirects to alerts from old siem Detections URL', () => {\n    visit(DETECTIONS);\n    cy.url().should('include', ALERTS_URL);\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Redirects to alerts from old Detections URL","suites":["URL compatibility"],"updatePoint":{"line":24,"column":49,"index":1214},"line":24,"code":"  it('Redirects to alerts from old Detections URL', () => {\n    visit(SECURITY_DETECTIONS_URL);\n    cy.url().should('include', ALERTS_URL);\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Redirects to rules from old Detections rules URL","suites":["URL compatibility"],"updatePoint":{"line":28,"column":54,"index":1365},"line":28,"code":"  it('Redirects to rules from old Detections rules URL', () => {\n    visit(SECURITY_DETECTIONS_RULES_URL);\n    cy.url().should('include', DETECTIONS_RULE_MANAGEMENT_URL);\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Redirects to rules creation from old Detections rules creation URL","suites":["URL compatibility"],"updatePoint":{"line":32,"column":72,"index":1560},"line":32,"code":"  it('Redirects to rules creation from old Detections rules creation URL', () => {\n    visit(SECURITY_DETECTIONS_RULES_CREATION_URL);\n    cy.url().should('include', RULE_CREATION);\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Redirects to rule details from old Detections rule details URL","suites":["URL compatibility"],"updatePoint":{"line":36,"column":68,"index":1743},"line":36,"code":"  it('Redirects to rule details from old Detections rule details URL', () => {\n    visit(detectionsRuleDetailsUrl(RULE_ID));\n    cy.url().should('include', ruleDetailsUrl(RULE_ID));\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Redirects to rule edit from old Detections rule edit URL","suites":["URL compatibility"],"updatePoint":{"line":40,"column":62,"index":1925},"line":40,"code":"  it('Redirects to rule edit from old Detections rule edit URL', () => {\n    visit(detectionRuleEditUrl(RULE_ID));\n    cy.url().should('include', ruleEditUrl(RULE_ID));\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the global start and end dates from the url with timestamps","suites":["URL compatibility"],"updatePoint":{"line":44,"column":70,"index":2108},"line":44,"code":"  it('sets the global start and end dates from the url with timestamps', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.urlWithTimestamps);\n    cy.get(DATE_PICKER_START_DATE_POPOVER_BUTTON).should('have.attr', 'title', ABSOLUTE_DATE.startTime);\n    cy.get(DATE_PICKER_END_DATE_POPOVER_BUTTON).should('have.attr', 'title', ABSOLUTE_DATE.endTime);\n  });","file":"integration/urls/compatibility.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the alerts page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":16,"column":54,"index":788},"line":16,"code":"  it('navigates to the alerts page with incorrect link', () => {\n    visit(`${ALERTS_URL}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the exceptions page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":20,"column":58,"index":940},"line":20,"code":"  it('navigates to the exceptions page with incorrect link', () => {\n    visit(`${EXCEPTIONS_URL}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the rules page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":24,"column":53,"index":1091},"line":24,"code":"  it('navigates to the rules page with incorrect link', () => {\n    visit(`${DETECTIONS_RULE_MANAGEMENT_URL}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the rules creation page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":28,"column":62,"index":1267},"line":28,"code":"  it('navigates to the rules creation page with incorrect link', () => {\n    visit(`${RULE_CREATION}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the rules details page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":32,"column":61,"index":1425},"line":32,"code":"  it('navigates to the rules details page with incorrect link', () => {\n    visit(`${ruleDetailsUrl(mockRuleId)}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the edit rules page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":36,"column":58,"index":1593},"line":36,"code":"  it('navigates to the edit rules page with incorrect link', () => {\n    visit(`${ruleEditUrl(mockRuleId)}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the endpoints page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":40,"column":57,"index":1757},"line":40,"code":"  it('navigates to the endpoints page with incorrect link', () => {\n    visit(`${ENDPOINTS_URL}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the trusted applications page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":44,"column":68,"index":1922},"line":44,"code":"  it('navigates to the trusted applications page with incorrect link', () => {\n    visit(`${TRUSTED_APPS_URL}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"navigates to the event filters page with incorrect link","suites":["Display not found page"],"updatePoint":{"line":48,"column":61,"index":2083},"line":48,"code":"  it('navigates to the event filters page with incorrect link', () => {\n    visit(`${EVENT_FILTERS_URL}/randomUrl`);\n    cy.get(NOT_FOUND).should('exist');\n  });","file":"integration/urls/not_found.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets filters from the url","suites":["url state"],"updatePoint":{"line":41,"column":31,"index":2447},"line":41,"code":"  it('sets filters from the url', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.urlFiltersHostsHosts);\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM_AT(0)).should('have.text', 'host.name: test-host');\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM_AT(0)).find(GLOBAL_SEARCH_BAR_PINNED_FILTER).should('exist');\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM_AT(1)).should('have.text', 'host.os.name: test-os');\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets saved query from the url","suites":["url state"],"updatePoint":{"line":47,"column":35,"index":2858},"line":47,"code":"  it('sets saved query from the url', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.urlFiltersHostsHosts);\n    saveQuery('test-query'); // refresh the page to force loading the saved query from the URL\n\n    cy.reload();\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM_AT(0)).should('have.text', 'host.name: test-host');\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM_AT(0)).find(GLOBAL_SEARCH_BAR_PINNED_FILTER).should('exist');\n    cy.get(GLOBAL_SEARCH_BAR_FILTER_ITEM_AT(1)).should('have.text', 'host.os.name: test-os');\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the global start and end dates from the url","suites":["url state"],"updatePoint":{"line":56,"column":54,"index":3401},"line":56,"code":"  it('sets the global start and end dates from the url', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.url);\n    cy.get(DATE_PICKER_START_DATE_POPOVER_BUTTON).should('have.attr', 'title', ABSOLUTE_DATE.startTime);\n    cy.get(DATE_PICKER_END_DATE_POPOVER_BUTTON).should('have.attr', 'title', ABSOLUTE_DATE.endTime);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the url state when start and end date are set","suites":["url state"],"updatePoint":{"line":61,"column":56,"index":3732},"line":61,"code":"  it('sets the url state when start and end date are set', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.url);\n    setStartDate(ABSOLUTE_DATE.newStartTimeTyped);\n    updateDates();\n    waitForIpsTableToBeLoaded();\n    setEndDate(ABSOLUTE_DATE.newEndTimeTyped);\n    updateDates();\n    let startDate;\n    let endDate;\n\n    if (Cypress.browser.name === 'firefox') {\n      startDate = new Date(ABSOLUTE_DATE.firefoxStartTimeTyped).toISOString().replace('000', '186');\n      endDate = new Date(ABSOLUTE_DATE.firefoxEndTimeTyped).toISOString().replace('000', '186');\n    } else {\n      startDate = new Date(ABSOLUTE_DATE.newStartTimeTyped).toISOString();\n      endDate = new Date(ABSOLUTE_DATE.newEndTimeTyped).toISOString();\n    }\n\n    cy.url().should('include', `(global:(linkTo:!(timeline),timerange:(from:%27${startDate}%27,kind:absolute,to:%27${endDate}%27))`);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the timeline start and end dates from the url when locked to global time","suites":["url state"],"updatePoint":{"line":81,"column":83,"index":4634},"line":81,"code":"  it('sets the timeline start and end dates from the url when locked to global time', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.url);\n    openTimelineUsingToggle();\n    cy.get(DATE_PICKER_START_DATE_POPOVER_BUTTON_TIMELINE).should('have.attr', 'title', ABSOLUTE_DATE.startTime);\n    cy.get(DATE_PICKER_END_DATE_POPOVER_BUTTON_TIMELINE).should('have.attr', 'title', ABSOLUTE_DATE.endTime);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the timeline start and end dates independently of the global start and end dates when times are unlocked","suites":["url state"],"updatePoint":{"line":87,"column":115,"index":5073},"line":87,"code":"  it('sets the timeline start and end dates independently of the global start and end dates when times are unlocked', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.urlUnlinked);\n    cy.get(DATE_PICKER_START_DATE_POPOVER_BUTTON).should('have.attr', 'title', ABSOLUTE_DATE.startTime);\n    cy.get(DATE_PICKER_END_DATE_POPOVER_BUTTON).should('have.attr', 'title', ABSOLUTE_DATE.endTime);\n    openTimelineUsingToggle();\n    cy.get(DATE_PICKER_START_DATE_POPOVER_BUTTON_TIMELINE).should('have.attr', 'title', ABSOLUTE_DATE.startTimeTimelineFormatted);\n    cy.get(DATE_PICKER_END_DATE_POPOVER_BUTTON_TIMELINE).should('have.attr', 'title', ABSOLUTE_DATE.endTimeTimelineFormatted);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the url state when timeline/global date pickers are unlinked and timeline start and end date are set","suites":["url state"],"updatePoint":{"line":95,"column":111,"index":5756},"line":95,"code":"  it('sets the url state when timeline/global date pickers are unlinked and timeline start and end date are set', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.urlUnlinked);\n    openTimelineUsingToggle();\n    setTimelineStartDate(ABSOLUTE_DATE.newStartTimeTyped);\n    updateTimelineDates();\n    setTimelineEndDate(ABSOLUTE_DATE.newEndTimeTyped);\n    updateTimelineDates();\n    let startDate;\n    let endDate;\n\n    if (Cypress.browser.name === 'firefox') {\n      startDate = new Date(ABSOLUTE_DATE.firefoxStartTimeTyped).toISOString().replace('000', '186');\n      endDate = new Date(ABSOLUTE_DATE.firefoxEndTimeTyped).toISOString().replace('000', '186');\n    } else {\n      startDate = new Date(ABSOLUTE_DATE.newStartTimeTyped).toISOString();\n      endDate = new Date(ABSOLUTE_DATE.newEndTimeTyped).toISOString();\n    }\n\n    cy.url().should('include', `timeline:(linkTo:!(),timerange:(from:%27${startDate}%27,kind:absolute,to:%27${endDate}%27))`);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets kql on network page","suites":["url state"],"updatePoint":{"line":115,"column":30,"index":6636},"line":115,"code":"  it('sets kql on network page', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.urlKqlNetworkNetwork);\n    cy.get(KQL_INPUT).should('have.text', 'source.ip: \"10.142.0.9\"');\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets kql on hosts page","suites":["url state"],"updatePoint":{"line":119,"column":28,"index":6820},"line":119,"code":"  it('sets kql on hosts page', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.urlKqlHostsHosts);\n    cy.get(KQL_INPUT).should('have.text', 'source.ip: \"10.142.0.9\"');\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the url state when kql is set","suites":["url state"],"updatePoint":{"line":123,"column":40,"index":7012},"line":123,"code":"  it('sets the url state when kql is set', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.url);\n    kqlSearch('source.ip: \"10.142.0.9\" {enter}');\n    cy.url().should('include', `query=(language:kuery,query:%27source.ip:%20%2210.142.0.9%22%20%27)`);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets the url state when kql is set and check if href reflect this change","suites":["url state"],"updatePoint":{"line":128,"column":78,"index":7312},"line":128,"code":"  it('sets the url state when kql is set and check if href reflect this change', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.url);\n    kqlSearch('source.ip: \"10.142.0.9\" {enter}');\n    navigateFromHeaderTo(HOSTS);\n    openNavigationPanel(EXPLORE);\n    cy.get(NETWORK).should('have.attr', 'href', `/app/security/network?sourcerer=(default:(id:security-solution-default,selectedPatterns:!('auditbeat-*')))&query=(language:kuery,query:'source.ip:%20%2210.142.0.9%22%20')&timerange=(global:(linkTo:!(timeline),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2019-08-01T20:33:29.186Z')),timeline:(linkTo:!(global),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2019-08-01T20:33:29.186Z')))`);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets KQL in host page and detail page and check if href match on breadcrumb, tabs and subTabs","suites":["url state"],"updatePoint":{"line":135,"column":99,"index":8064},"line":135,"code":"  it('sets KQL in host page and detail page and check if href match on breadcrumb, tabs and subTabs', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.urlHostNew);\n    kqlSearch('host.name: \"siem-kibana\" {enter}');\n    openAllHosts();\n    waitForAllHostsToBeLoaded();\n    openNavigationPanel(EXPLORE);\n    cy.get(HOSTS).should('have.attr', 'href', `/app/security/hosts?sourcerer=(default:(id:security-solution-default,selectedPatterns:!('auditbeat-*')))&query=(language:kuery,query:'host.name:%20%22siem-kibana%22%20')&timerange=(global:(linkTo:!(timeline),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2023-01-01T21:33:29.186Z')),timeline:(linkTo:!(global),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2023-01-01T21:33:29.186Z')))`);\n    cy.get(NETWORK).should('have.attr', 'href', `/app/security/network?sourcerer=(default:(id:security-solution-default,selectedPatterns:!('auditbeat-*')))&query=(language:kuery,query:'host.name:%20%22siem-kibana%22%20')&timerange=(global:(linkTo:!(timeline),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2023-01-01T21:33:29.186Z')),timeline:(linkTo:!(global),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2023-01-01T21:33:29.186Z')))`);\n    cy.get(HOSTS_NAMES).first().should('have.text', 'siem-kibana');\n    openFirstHostDetails();\n    clearSearchBar();\n    kqlSearch('agent.type: \"auditbeat\" {enter}');\n    cy.get(ANOMALIES_TAB).should('have.attr', 'href', \"/app/security/hosts/name/siem-kibana/anomalies?sourcerer=(default:(id:security-solution-default,selectedPatterns:!('auditbeat-*')))&timerange=(global:(linkTo:!(timeline),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2023-01-01T21:33:29.186Z')),timeline:(linkTo:!(global),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2023-01-01T21:33:29.186Z')))&query=(language:kuery,query:'agent.type:%20%22auditbeat%22%20')\");\n    cy.get(BREADCRUMBS).eq(2).should('have.attr', 'href', `/app/security/hosts?sourcerer=(default:(id:security-solution-default,selectedPatterns:!('auditbeat-*')))&query=(language:kuery,query:'agent.type:%20%22auditbeat%22%20')&timerange=(global:(linkTo:!(timeline),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2023-01-01T21:33:29.186Z')),timeline:(linkTo:!(global),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2023-01-01T21:33:29.186Z')))`);\n    cy.get(BREADCRUMBS).eq(3).should('have.attr', 'href', `/app/security/hosts/name/siem-kibana?sourcerer=(default:(id:security-solution-default,selectedPatterns:!('auditbeat-*')))&query=(language:kuery,query:'agent.type:%20%22auditbeat%22%20')&timerange=(global:(linkTo:!(timeline),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2023-01-01T21:33:29.186Z')),timeline:(linkTo:!(global),timerange:(from:'2019-08-01T20:03:29.186Z',kind:absolute,to:'2023-01-01T21:33:29.186Z')))`);\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Do not clears kql when navigating to a new page","suites":["url state"],"updatePoint":{"line":151,"column":53,"index":10896},"line":151,"code":"  it('Do not clears kql when navigating to a new page', () => {\n    visitWithoutDateRange(ABSOLUTE_DATE_RANGE.urlKqlHostsHosts);\n    kqlSearch('source.ip: \"10.142.0.9\"{enter}');\n    navigateFromHeaderTo(NETWORK);\n    cy.get(KQL_INPUT).should('have.text', 'source.ip: \"10.142.0.9\"');\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"sets and reads the url state for timeline by id","suites":["url state"],"updatePoint":{"line":157,"column":53,"index":11185},"line":157,"code":"  it('sets and reads the url state for timeline by id', () => {\n    visit(HOSTS_URL);\n    openTimelineUsingToggle();\n    populateTimeline();\n    cy.intercept('PATCH', '/api/timeline').as('timeline');\n    addNameToTimeline(getTimeline().title);\n    cy.wait('@timeline').then(({\n      response\n    }) => {\n      closeTimeline();\n      cy.wrap(response?.statusCode).should('eql', 200);\n      const timelineId = response?.body.data.persistTimeline.timeline.savedObjectId;\n      cy.visit('/app/home');\n      cy.visit(`/app/security/timelines?timeline=(id:'${timelineId}',isOpen:!t)`);\n      cy.get(DATE_PICKER_APPLY_BUTTON_TIMELINE).should('exist');\n      cy.get(DATE_PICKER_APPLY_BUTTON_TIMELINE).should('not.have.text', 'Updating');\n      cy.get(TIMELINE).should('be.visible');\n      cy.get(TIMELINE_TITLE).should('be.visible');\n      cy.get(TIMELINE_TITLE).should('have.text', getTimeline().title);\n    });\n  });","file":"integration/urls/state.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"inspects all users table","suites":["Inspect","Users stats and tables"],"updatePoint":{"line":23,"column":32,"index":924},"line":23,"code":"    it(`inspects all users table`, () => {\n      clickInspectButton(ALL_USERS_TABLE);\n      cy.get(INSPECT_MODAL).should('be.visible');\n    });","file":"integration/users/inspect.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"inspects authentications table","suites":["Inspect","Users stats and tables"],"updatePoint":{"line":27,"column":38,"index":1074},"line":27,"code":"    it(`inspects authentications table`, () => {\n      cy.get(AUTHENTICATIONS_TAB).click();\n      clickInspectButton(AUTHENTICATIONS_TABLE);\n      cy.get(INSPECT_MODAL).should('be.visible');\n    });","file":"integration/users/inspect.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"shows user detail flyout from alert table","suites":["user details flyout"],"updatePoint":{"line":22,"column":47,"index":1046},"line":22,"code":"  it('shows user detail flyout from alert table', () => {\n    visitWithoutDateRange(ALERTS_URL);\n    createCustomRuleEnabled({ ...getNewRule(),\n      customQuery: 'user.name:*'\n    });\n    refreshPage();\n    waitForAlertsToPopulate();\n    scrollAlertTableColumnIntoView(USER_COLUMN);\n    expandAlertTableCellValue(USER_COLUMN);\n    openUserDetailsFlyout();\n    cy.get(ALERT_FLYOUT).should('be.visible');\n  });","file":"integration/users/user_details.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders all users","suites":["Users stats and tables","Users page tabs"],"updatePoint":{"line":27,"column":25,"index":1220},"line":27,"code":"    it(`renders all users`, () => {\n      const totalUsers = 1;\n      cy.get(ALL_USERS_TABLE).find(HEADER_SUBTITLE).should('have.text', `Showing: ${totalUsers} user`);\n    });","file":"integration/users/users_tabs.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders all authentications","suites":["Users stats and tables","Users page tabs"],"updatePoint":{"line":31,"column":35,"index":1406},"line":31,"code":"    it(`renders all authentications`, () => {\n      const totalUsers = 1;\n      cy.get(AUTHENTICATIONS_TAB).click();\n      cy.get(AUTHENTICATIONS_TABLE).find(HEADER_SUBTITLE).should('have.text', `Showing: ${totalUsers} user`);\n    });","file":"integration/users/users_tabs.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders anomalies tab","suites":["Users stats and tables","Users page tabs"],"updatePoint":{"line":36,"column":29,"index":1635},"line":36,"code":"    it(`renders anomalies tab`, () => {\n      cy.get(ANOMALIES_TAB).click({\n        force: true\n      });\n      cy.get(ANOMALIES_TAB_CONTENT).should('exist');\n    });","file":"integration/users/users_tabs.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders events tab","suites":["Users stats and tables","Users page tabs"],"updatePoint":{"line":42,"column":26,"index":1799},"line":42,"code":"    it(`renders events tab`, () => {\n      cy.get(EVENTS_TAB).click({\n        force: true\n      });\n      cy.get(EVENTS_TAB_CONTENT).should('exist');\n    });","file":"integration/users/users_tabs.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders users risk tab","suites":["Users stats and tables","Users page tabs"],"updatePoint":{"line":48,"column":30,"index":1961},"line":48,"code":"    it(`renders users risk tab`, () => {\n      cy.get(RISK_SCORE_TAB).click({\n        force: true\n      });\n      cy.get(RISK_SCORE_TAB_CONTENT).should('exist');\n    });","file":"integration/users/users_tabs.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"renders authentications tab","suites":["Users stats and tables","User details tabs"],"updatePoint":{"line":56,"column":35,"index":2182},"line":56,"code":"    it(`renders authentications tab`, () => {\n      visitUserDetailsPage();\n      const totalUsers = 1;\n      cy.get(AUTHENTICATIONS_TABLE).find(HEADER_SUBTITLE).should('have.text', `Showing: ${totalUsers} host`);\n    });","file":"integration/users/users_tabs.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"can open and close the modal","suites":["value lists","management modal"],"updatePoint":{"line":26,"column":36,"index":1254},"line":26,"code":"    it('can open and close the modal', () => {\n      openValueListsModal();\n      closeValueListsModal();\n    });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"creates a \"keyword\" list from an uploaded file","suites":["value lists","management modal","create list types"],"updatePoint":{"line":34,"column":56,"index":1496},"line":34,"code":"      it('creates a \"keyword\" list from an uploaded file', () => {\n        const listName = 'value_list.txt';\n        selectValueListType('keyword');\n        selectValueListsFile(listName);\n        uploadValueList();\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).to.contain(listName);\n          expect($row.text()).to.contain('Keywords');\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"creates a \"text\" list from an uploaded file","suites":["value lists","management modal","create list types"],"updatePoint":{"line":44,"column":53,"index":1911},"line":44,"code":"      it('creates a \"text\" list from an uploaded file', () => {\n        const listName = 'value_list.txt';\n        selectValueListType('text');\n        selectValueListsFile(listName);\n        uploadValueList();\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).to.contain(listName);\n          expect($row.text()).to.contain('Text');\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"creates a \"ip\" list from an uploaded file","suites":["value lists","management modal","create list types"],"updatePoint":{"line":54,"column":51,"index":2317},"line":54,"code":"      it('creates a \"ip\" list from an uploaded file', () => {\n        const listName = 'ip_list.txt';\n        selectValueListType('ip');\n        selectValueListsFile(listName);\n        uploadValueList();\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).to.contain(listName);\n          expect($row.text()).to.contain('IP addresses');\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"creates a \"ip_range\" list from an uploaded file","suites":["value lists","management modal","create list types"],"updatePoint":{"line":64,"column":57,"index":2732},"line":64,"code":"      it('creates a \"ip_range\" list from an uploaded file', () => {\n        const listName = 'cidr_list.txt';\n        selectValueListType('ip_range');\n        selectValueListsFile(listName);\n        uploadValueList();\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).to.contain(listName);\n          expect($row.text()).to.contain('IP ranges');\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"deletes a \"keyword\" list from an uploaded file","suites":["value lists","management modal","delete list types"],"updatePoint":{"line":76,"column":56,"index":3201},"line":76,"code":"      it('deletes a \"keyword\" list from an uploaded file', () => {\n        const listName = 'value_list.txt';\n        importValueList(listName, 'keyword');\n        openValueListsModal();\n        deleteValueListsFile(listName);\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).not.to.contain(listName);\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"deletes a \"text\" list from an uploaded file","suites":["value lists","management modal","delete list types"],"updatePoint":{"line":85,"column":53,"index":3576},"line":85,"code":"      it('deletes a \"text\" list from an uploaded file', () => {\n        const listName = 'value_list.txt';\n        importValueList(listName, 'text');\n        openValueListsModal();\n        deleteValueListsFile(listName);\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).not.to.contain(listName);\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"deletes a \"ip\" from an uploaded file","suites":["value lists","management modal","delete list types"],"updatePoint":{"line":94,"column":46,"index":3941},"line":94,"code":"      it('deletes a \"ip\" from an uploaded file', () => {\n        const listName = 'ip_list.txt';\n        importValueList(listName, 'ip');\n        openValueListsModal();\n        deleteValueListsFile(listName);\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).not.to.contain(listName);\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"deletes a \"ip_range\" from an uploaded file","suites":["value lists","management modal","delete list types"],"updatePoint":{"line":103,"column":52,"index":4307},"line":103,"code":"      it('deletes a \"ip_range\" from an uploaded file', () => {\n        const listName = 'cidr_list.txt';\n        importValueList(listName, 'ip_range', ['192.168.100.0']);\n        openValueListsModal();\n        deleteValueListsFile(listName);\n        cy.get(VALUE_LISTS_TABLE).find(VALUE_LISTS_ROW).should($row => {\n          expect($row.text()).not.to.contain(listName);\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"exports a \"keyword\" list from an uploaded file","suites":["value lists","management modal","export list types"],"updatePoint":{"line":114,"column":56,"index":4754},"line":114,"code":"      it('exports a \"keyword\" list from an uploaded file', () => {\n        const listName = 'value_list.txt';\n        cy.intercept('POST', `/api/lists/items/_export?list_id=${listName}`).as('exportList');\n        importValueList('value_list.txt', 'keyword');\n        openValueListsModal();\n        exportValueList();\n        cy.wait('@exportList').then(({\n          response\n        }) => {\n          cy.fixture(listName).then(list => {\n            const [lineOne, lineTwo] = list.split('\\n');\n            expect(response?.body).to.contain(lineOne);\n            expect(response?.body).to.contain(lineTwo);\n          });\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"exports a \"text\" list from an uploaded file","suites":["value lists","management modal","export list types"],"updatePoint":{"line":130,"column":53,"index":5393},"line":130,"code":"      it('exports a \"text\" list from an uploaded file', () => {\n        const listName = 'value_list.txt';\n        cy.intercept('POST', `/api/lists/items/_export?list_id=${listName}`).as('exportList');\n        importValueList(listName, 'text');\n        openValueListsModal();\n        exportValueList();\n        cy.wait('@exportList').then(({\n          response\n        }) => {\n          cy.fixture(listName).then(list => {\n            const [lineOne, lineTwo] = list.split('\\n');\n            expect(response?.body).to.contain(lineOne);\n            expect(response?.body).to.contain(lineTwo);\n          });\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"exports a \"ip\" list from an uploaded file","suites":["value lists","management modal","export list types"],"updatePoint":{"line":146,"column":51,"index":6019},"line":146,"code":"      it('exports a \"ip\" list from an uploaded file', () => {\n        const listName = 'ip_list.txt';\n        cy.intercept('POST', `/api/lists/items/_export?list_id=${listName}`).as('exportList');\n        importValueList(listName, 'ip');\n        openValueListsModal();\n        exportValueList();\n        cy.wait('@exportList').then(({\n          response\n        }) => {\n          cy.fixture(listName).then(list => {\n            const [lineOne, lineTwo] = list.split('\\n');\n            expect(response?.body).to.contain(lineOne);\n            expect(response?.body).to.contain(lineTwo);\n          });\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"exports a \"ip_range\" list from an uploaded file","suites":["value lists","management modal","export list types"],"updatePoint":{"line":162,"column":57,"index":6646},"line":162,"code":"      it('exports a \"ip_range\" list from an uploaded file', () => {\n        const listName = 'cidr_list.txt';\n        cy.intercept('POST', `/api/lists/items/_export?list_id=${listName}`).as('exportList');\n        importValueList(listName, 'ip_range', ['192.168.100.0']);\n        openValueListsModal();\n        exportValueList();\n        cy.wait('@exportList').then(({\n          response\n        }) => {\n          cy.fixture(listName).then(list => {\n            const [lineOne] = list.split('\\n');\n            expect(response?.body).to.contain(lineOne);\n          });\n        });\n      });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Does not allow a t1 analyst user to upload a value list","suites":["value lists","user with restricted access role"],"updatePoint":{"line":187,"column":63,"index":7516},"line":187,"code":"    it('Does not allow a t1 analyst user to upload a value list', () => {\n      cy.get(VALUE_LISTS_MODAL_ACTIVATOR).should('have.attr', 'disabled');\n    });","file":"integration/value_lists/value_lists.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Has the expected alerts number","suites":["After an upgrade, the custom query rule"],"updatePoint":{"line":65,"column":36,"index":2847},"line":65,"code":"  it('Has the expected alerts number', () => {\n    cy.get(SERVER_SIDE_EVENT_COUNT).contains(EXPECTED_NUMBER_OF_ALERTS);\n  });","file":"upgrade_integration/detections/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the rule details","suites":["After an upgrade, the custom query rule"],"updatePoint":{"line":68,"column":31,"index":2968},"line":68,"code":"  it('Displays the rule details', () => {\n    cy.get(RULE_NAME_HEADER).should('contain', `${rule.name}`);\n    cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', rule.description);\n    cy.get(ABOUT_DETAILS).within(() => {\n      getDetails(SEVERITY_DETAILS).should('have.text', rule.severity);\n      getDetails(RISK_SCORE_DETAILS).should('have.text', rule.riskScore);\n    });\n    cy.get(DEFINITION_DETAILS).within(() => {\n      getDetails(INDEX_PATTERNS_DETAILS).should('have.text', rule.index.join(''));\n      getDetails(CUSTOM_QUERY_DETAILS).should('have.text', rule.customQuery);\n      getDetails(RULE_TYPE_DETAILS).should('have.text', 'Query');\n      getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', rule.timeline);\n    });\n    cy.get(SCHEDULE_DETAILS).within(() => {\n      getDetails(RUNS_EVERY_DETAILS).should('have.text', rule.runsEvery);\n      getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', rule.lookBack);\n    });\n  });","file":"upgrade_integration/detections/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the alert details at the tgrid","suites":["After an upgrade, the custom query rule"],"updatePoint":{"line":86,"column":45,"index":3932},"line":86,"code":"  it('Displays the alert details at the tgrid', () => {\n    let expectedReason = alert.reason;\n\n    if (semver.lt(Cypress.env('ORIGINAL_VERSION'), '7.15.0')) {\n      expectedReason = alert.reasonAlt;\n    }\n\n    cy.get(ALERT_GRID_CELL).first().focus();\n    cy.get(RULE_NAME).should('have.text', alert.rule);\n    cy.get(SEVERITY).should('have.text', alert.severity);\n    cy.get(RISK_SCORE).should('have.text', alert.riskScore);\n    cy.get(REASON).contains(expectedReason);\n    cy.get(HOST_NAME).should('have.text', alert.hostName);\n    cy.get(USER_NAME).should('have.text', alert.username);\n    cy.get(PROCESS_NAME_COLUMN).eq(0).scrollIntoView();\n    cy.get(PROCESS_NAME).should('have.text', alert.processName);\n    cy.get(SOURCE_IP).should('have.text', alert.sourceIp);\n    cy.get(DESTINATION_IP).should('have.text', alert.destinationIp);\n  });","file":"upgrade_integration/detections/detection_rules/custom_query_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Has the expected alerts number","suites":["After an upgrade, the threshold rule"],"updatePoint":{"line":51,"column":36,"index":2243},"line":51,"code":"  it('Has the expected alerts number', () => {\n    cy.get(SERVER_SIDE_EVENT_COUNT).contains(EXPECTED_NUMBER_OF_ALERTS);\n  });","file":"upgrade_integration/detections/detection_rules/threshold_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the rule details","suites":["After an upgrade, the threshold rule"],"updatePoint":{"line":54,"column":31,"index":2364},"line":54,"code":"  it('Displays the rule details', () => {\n    cy.get(RULE_NAME_HEADER).should('contain', rule.name);\n    cy.get(ABOUT_RULE_DESCRIPTION).should('have.text', rule.description);\n    cy.get(ABOUT_DETAILS).within(() => {\n      getDetails(SEVERITY_DETAILS).should('have.text', rule.severity);\n      getDetails(RISK_SCORE_DETAILS).should('have.text', rule.riskScore);\n    });\n    cy.get(DEFINITION_DETAILS).within(() => {\n      getDetails(INDEX_PATTERNS_DETAILS).should('have.text', rule.index.join(''));\n      getDetails(CUSTOM_QUERY_DETAILS).should('have.text', rule.customQuery);\n      getDetails(RULE_TYPE_DETAILS).should('have.text', 'Threshold');\n      getDetails(TIMELINE_TEMPLATE_DETAILS).should('have.text', rule.timeline);\n      getDetails(THRESHOLD_DETAILS).should('have.text', `Results aggregated by ${rule.thresholdField} >= ${rule.thresholdValue}`);\n    });\n    cy.get(SCHEDULE_DETAILS).within(() => {\n      getDetails(RUNS_EVERY_DETAILS).should('have.text', rule.runsEvery);\n      getDetails(ADDITIONAL_LOOK_BACK_DETAILS).should('have.text', rule.lookBack);\n    });\n  });","file":"upgrade_integration/detections/detection_rules/threshold_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the alert details in the TGrid","suites":["After an upgrade, the threshold rule"],"updatePoint":{"line":73,"column":45,"index":3458},"line":73,"code":"  it('Displays the alert details in the TGrid', () => {\n    let expectedReason = alert.reason;\n\n    if (semver.lt(Cypress.env('ORIGINAL_VERSION'), '7.15.0')) {\n      expectedReason = alert.reasonAlt;\n    }\n\n    cy.scrollTo('bottom');\n    cy.get(RULE_NAME).should('have.text', alert.rule);\n    cy.get(SEVERITY).should('have.text', alert.severity);\n    cy.get(RISK_SCORE).should('have.text', alert.riskScore);\n    cy.get(REASON).contains(expectedReason); // TODO: Needs data-test-subj\n    // cy.get(HOST_NAME).should('have.text', alert.hostName);\n  });","file":"upgrade_integration/detections/detection_rules/threshold_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the Overview alert details in the alert flyout","suites":["After an upgrade, the threshold rule"],"updatePoint":{"line":87,"column":61,"index":4025},"line":87,"code":"  it('Displays the Overview alert details in the alert flyout', () => {\n    expandFirstAlert();\n    cy.get(OVERVIEW_STATUS).should('have.text', 'open');\n    cy.get(OVERVIEW_RULE).should('have.text', alert.rule);\n    cy.get(OVERVIEW_SEVERITY).contains(alert.severity, {\n      matchCase: false\n    });\n    cy.get(OVERVIEW_RISK_SCORE).should('have.text', alert.riskScore); // TODO: Find out what this is\n    // cy.get(OVERVIEW_HOST_NAME).should('have.text', alert.hostName);\n    // TODO: Needs data-test-subj\n    // cy.get(OVERVIEW_THRESHOLD_COUNT).should('have.text', alert.thresholdCount);\n\n    cy.get(OVERVIEW_RULE_TYPE).should('have.text', rule.ruleType); // TODO: Needs data-test-subj\n    // cy.get(OVERVIEW_THRESHOLD_VALUE).should('have.text', rule.thresholdValue);\n  });","file":"upgrade_integration/detections/detection_rules/threshold_rule.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct number of opened cases on the cases page","suites":["Import case after upgrade"],"updatePoint":{"line":55,"column":67,"index":2717},"line":55,"code":"  it('Displays the correct number of opened cases on the cases page', () => {\n    const EXPECTED_NUMBER_OF_OPENED_CASES = '0';\n    cy.get(ALL_CASES_OPEN_CASES_STATS).should('have.text', EXPECTED_NUMBER_OF_OPENED_CASES);\n  });","file":"upgrade_integration/threat_hunting/cases/import_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct number of in progress cases on the cases page","suites":["Import case after upgrade"],"updatePoint":{"line":59,"column":72,"index":2948},"line":59,"code":"  it('Displays the correct number of in progress cases on the cases page', () => {\n    const EXPECTED_NUMBER_OF_IN_PROGRESS_CASES = '1';\n    cy.get(ALL_CASES_IN_PROGRESS_CASES_STATS).should('have.text', EXPECTED_NUMBER_OF_IN_PROGRESS_CASES);\n  });","file":"upgrade_integration/threat_hunting/cases/import_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct number of closed cases on the cases page","suites":["Import case after upgrade"],"updatePoint":{"line":63,"column":67,"index":3191},"line":63,"code":"  it('Displays the correct number of closed cases on the cases page', () => {\n    const EXPECTED_NUMBER_OF_CLOSED_CASES = '0';\n    cy.get(ALL_CASES_CLOSED_CASES_STATS).should('have.text', EXPECTED_NUMBER_OF_CLOSED_CASES);\n  });","file":"upgrade_integration/threat_hunting/cases/import_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct case details on the cases page","suites":["Import case after upgrade"],"updatePoint":{"line":67,"column":57,"index":3409},"line":67,"code":"  it('Displays the correct case details on the cases page', () => {\n    cy.get(ALL_CASES_NAME).should('have.text', importedCase.title);\n    cy.get(ALL_CASES_REPORTER).should('have.text', importedCase.initial);\n    cy.get(ALL_CASES_NUMBER_OF_ALERTS).should('have.text', importedCase.numberOfAlerts);\n    cy.get(ALL_CASES_COMMENTS_COUNT).should('have.text', importedCase.numberOfComments);\n    cy.get(ALL_CASES_NOT_PUSHED).should('be.visible');\n    cy.get(ALL_CASES_IN_PROGRESS_STATUS).should('be.visible');\n  });","file":"upgrade_integration/threat_hunting/cases/import_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct case details on the case details page","suites":["Import case after upgrade"],"updatePoint":{"line":75,"column":64,"index":3928},"line":75,"code":"  it('Displays the correct case details on the case details page', () => {\n    goToCaseDetails();\n    cy.get(CASE_DETAILS_PAGE_TITLE).should('have.text', importedCase.title);\n    cy.get(CASE_IN_PROGRESS_STATUS).should('exist');\n    cy.get(CASE_SWITCH).should('have.attr', 'aria-checked', 'false');\n    cy.get(CASE_USER_ACTION).eq(DESCRIPTION).should('have.text', importedCase.description);\n    cy.get(CASE_USER_ACTION).eq(TIMELINE).should('have.text', importedCase.timeline);\n    cy.get(CASE_USER_ACTION).eq(LENS).should('have.text', '');\n    cy.get(CASE_EVENT_UPDATE).should('have.length', EXPECTED_NUMBER_OF_UPDATES);\n    cy.get(CASE_EVENT_UPDATE).eq(STATUS_UPDATE).invoke('text').should('match', updateStatusRegex);\n    cy.get(CASE_EVENT_UPDATE).eq(FIRST_ALERT_UPDATE).invoke('text').should('match', alertUpdateRegex);\n    cy.get(CASE_EVENT_UPDATE).eq(SECOND_ALERT_UPDATE).invoke('text').should('match', alertUpdateRegex);\n    cy.get(CASE_EVENT_UPDATE).eq(INCIDENT_MANAGEMENT_SYSTEM_UPDATE).invoke('text').should('match', incidentManagementSystemRegex); // TODO: Needs data-test-subj\n    // cy.get(CASE_DETAILS_USERNAMES).should('have.length', EXPECTED_NUMBER_OF_PARTICIPANTS);\n    // TODO: Investigate why this changes, not reliable to verify\n    // cy.get(CASE_DETAILS_USERNAMES).eq(FIRST_PARTICIPANT).should('have.text', importedCase.user);\n    // cy.get(CASE_DETAILS_USERNAMES)\n    //   .eq(SECOND_PARTICIPANT)\n    //   .should('have.text', importedCase.participants[0]);\n    // cy.get(CASE_DETAILS_USERNAMES)\n    //   .eq(THIRD_PARTICIPANT)\n    //   .should('have.text', importedCase.participants[1]);\n\n    cy.get(CASE_DETAILS_USERNAMES).eq(REPORTER).should('have.text', importedCase.user);\n    cy.get(CASES_TAGS(importedCase.tags)).should('exist');\n    cy.get(CASE_CONNECTOR).should('have.text', importedCase.connector);\n  });","file":"upgrade_integration/threat_hunting/cases/import_case.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct timeline details on the timelines page","suites":["Import timeline after upgrade"],"updatePoint":{"line":56,"column":65,"index":2360},"line":56,"code":"  it('Displays the correct timeline details on the timelines page', () => {\n    cy.readFile(`cypress/fixtures/${timeline}`).then(file => {\n      const timelineJson = JSON.parse(file);\n      const regex = new RegExp(`\\\\S${timelineJson.globalNotes[0].createdBy}added a note\\\\S*\\\\s?(\\\\S*)?\\\\s?(\\\\S*)?${timelineJson.globalNotes[0].createdBy} added a note${timelineJson.globalNotes[0].note}`);\n      cy.get(TIMELINE_NAME).should('have.text', timelineJson.title);\n      cy.get(TIMELINES_DESCRIPTION).should('have.text', timelineJson.description);\n      cy.get(TIMELINES_USERNAME).should('have.text', username);\n      cy.get(TIMELINES_NOTES_COUNT).should('have.text', timelineJson.globalNotes.length.toString());\n      cy.get(TIMELINES_PINNED_EVENT_COUNT).should('have.text', timelineJson.pinnedEventIds.length.toString());\n      expandNotes();\n      cy.get(NOTE).invoke('text').should('match', regex);\n    });\n  });","file":"upgrade_integration/threat_hunting/timeline/import_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct timeline details inside the query tab","suites":["Import timeline after upgrade"],"updatePoint":{"line":69,"column":64,"index":3269},"line":69,"code":"  it('Displays the correct timeline details inside the query tab', () => {\n    let expectedQueryTab = timelineDetails.queryTab;\n\n    if (semver.lt(Cypress.env('ORIGINAL_VERSION'), '7.10.0')) {\n      expectedQueryTab = timelineDetails.queryTabAlt;\n    }\n\n    openTimeline();\n    cy.readFile(`cypress/fixtures/${timeline}`).then(file => {\n      const timelineJson = JSON.parse(file);\n      cy.get(TIMELINE_TITLE).should('have.text', timelineJson.title);\n      cy.get(TIMELINE_DESCRIPTION).should('have.text', timelineJson.description);\n      cy.get(DATA_PROVIDERS).should('have.length', timelineJson.dataProviders.length.toString());\n      cy.get(DATA_PROVIDERS).invoke('text').then(value => {\n        expect(value.replace(/\"/g, '')).to.eq(timelineJson.dataProviders[0].name);\n      });\n      cy.get(PROCESS_KPI).should('contain', '0');\n      cy.get(USER_KPI).should('contain', '0');\n      cy.get(HOST_KPI).should('contain', '1');\n      cy.get(SOURCE_IP_KPI).should('contain', '1');\n      cy.get(DESTINATION_IP_KPI).should('contain', '1');\n      cy.get(DATE_PICKER_START).should('contain', timelineDetails.dateStart);\n      cy.get(DATE_PICKER_END).should('contain', timelineDetails.dateEnd);\n      cy.get(TIMELINE_QUERY).should('have.text', timelineJson.kqlQuery.filterQuery.kuery.expression);\n      cy.get(QUERY_TAB_BUTTON).should('have.text', expectedQueryTab);\n      cy.get(TIMELINE_CORRELATION_TAB).should('have.text', timelineDetails.correlationTab);\n      cy.get(GRAPH_TAB_BUTTON).should('have.text', timelineDetails.analyzerTab).and('be.disabled');\n      cy.get(NOTES_TAB_BUTTON).should('have.text', timelineDetails.notesTab);\n      cy.get(PINNED_TAB_BUTTON).should('have.text', timelineDetails.pinnedTab);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(1).should('contain', detectionAlert.message);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(2).should('contain', detectionAlert.eventCategory);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(3).should('contain', detectionAlert.eventAction);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(4).should('contain', detectionAlert.hostName);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(5).should('contain', detectionAlert.sourceIp);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(6).should('contain', detectionAlert.destinationIp);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(7).should('contain', detectionAlert.userName);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(8).should('contain', event.timestamp);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(9).should('contain', event.message);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(10).should('contain', event.eventCategory);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(11).should('contain', event.eventAction);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(12).should('contain', event.hostName);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(13).should('contain', event.sourceIp);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(14).should('contain', event.destinationIp);\n      cy.get(QUERY_EVENT_TABLE_CELL).eq(15).should('contain', event.userName);\n    });\n  });","file":"upgrade_integration/threat_hunting/timeline/import_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct timeline details inside the correlation tab","suites":["Import timeline after upgrade"],"updatePoint":{"line":115,"column":70,"index":6265},"line":115,"code":"  it('Displays the correct timeline details inside the correlation tab', () => {\n    goToCorrelationTab();\n    cy.get(TIMELINE_CORRELATION_INPUT).should('be.empty');\n    cy.get(CORRELATION_EVENT_TABLE_CELL).should('not.exist');\n  });","file":"upgrade_integration/threat_hunting/timeline/import_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"},{"name":"Displays the correct timeline details inside the notes tab","suites":["Import timeline after upgrade"],"updatePoint":{"line":120,"column":64,"index":6493},"line":120,"code":"  it('Displays the correct timeline details inside the notes tab', () => {\n    goToNotesTab();\n    cy.readFile(`cypress/fixtures/${timeline}`).then(file => {\n      const timelineJson = JSON.parse(file);\n      const descriptionRegex = new RegExp(`\\\\S${username}added description\\\\S*\\\\s?(\\\\S*)?\\\\s?(\\\\S*)?${timelineJson.description}`);\n      const noteRegex = new RegExp(`\\\\S${timelineJson.globalNotes[0].createdBy}added a note\\\\S*\\\\s?(\\\\S*)?\\\\s?(\\\\S*)?${timelineJson.globalNotes[0].createdBy} added a note${timelineJson.globalNotes[0].note}`);\n      cy.get(NOTE_DESCRIPTION).invoke('text').should('match', descriptionRegex);\n      cy.get(NOTE_PREVIEW).last().invoke('text').should('match', noteRegex);\n    });\n  });","file":"upgrade_integration/threat_hunting/timeline/import_timeline.spec.ts","skipped":false,"dir":"x-pack/plugins/security_solution/cypress"}]}