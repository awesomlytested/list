{"repo":"vuestorefront/vue-storefront","url":"https://github.com/vuestorefront/vue-storefront","branch":"main","configs":[{"package":"@vue-storefront/boilerplate-theme","lang":"js","dir":"packages/boilerplate/theme/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vue-storefront/commercetools-api","lang":"ts","dir":"packages/commercetools/api-client/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vue-storefront/commercetools","lang":"ts","dir":"packages/commercetools/composables/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vue-storefront/commercetools-theme","lang":"js","dir":"packages/commercetools/theme/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vue-storefront/cache","lang":"ts","dir":"packages/core/cache/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vue-storefront/cli","lang":"ts","dir":"packages/core/cli/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vue-storefront/core","lang":"ts","dir":"packages/core/core/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vue-storefront/middleware","lang":"js","dir":"packages/core/middleware/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"adds product to the cart","suites":["[commercetools-api-client] addToCart"],"updatePoint":{"line":13,"column":30},"line":13,"code":"  it('adds product to the cart', async () => {\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD',\n        country: 'UK'\n      },\n      client: {\n        mutate: () => ({\n          actions: [\n            { addLineItem: {quantity: 2, sku: '123', variantId: 1} }\n          ],\n          id: 1,\n          version: 1\n        })\n      },\n      extendQuery: (customQuery, args) => args\n    };\n    const product = { id: 1,\n      sku: '123' } as any;\n\n    const response = await addToCart(context, cart, {\n      product,\n      quantity: 2\n    });\n\n    expect(response).toEqual({\n      id: 1,\n      version: 1,\n      actions: [\n        {\n          addLineItem: {\n            variantId: 1,\n            sku: '123',\n            quantity: 2\n          }\n        }\n      ]\n    });\n  });","file":"api/addToCart.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"applies coupon to the cart","suites":["[commercetools-api-client] applyCartCoupon"],"updatePoint":{"line":13,"column":32},"line":13,"code":"  it('applies coupon to the cart', async () => {\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD',\n        country: 'UK'\n      },\n      client: {\n        mutate: () => ({\n          actions: [\n            { addDiscountCode: { code: 'coupon' } }\n          ],\n          id: 1,\n          version: 1\n        })\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const response = await applyCartCoupon(context, cart, 'coupon');\n\n    expect(response).toEqual({\n      id: 1,\n      version: 1,\n      actions: [\n        {\n          addDiscountCode: {\n            code: 'coupon'\n          }\n        }\n      ]\n    });\n  });","file":"api/applyCartCoupon.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"creates a new cart with draft","suites":["[commercetools-api-client] createCart"],"updatePoint":{"line":5,"column":35},"line":5,"code":"  it('creates a new cart with draft', async () => {\n    const givenVariables = {\n      acceptLanguage: ['en', 'de'],\n      locale: 'en',\n      currency: 'USD',\n      draft: {\n        currency: 'USD',\n        items: [],\n        id: 'cart-id'\n      }\n    };\n\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD'\n      },\n      client: {\n        mutate: ({ variables, mutation }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(mutation).toEqual(defaultMutation);\n\n          return {\n            data: {\n              items: [],\n              id: 'cart-id'\n            }\n          };\n        }\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const { data } = await createCart(context, {\n      items: [],\n      id: 'cart-id'\n    } as any);\n\n    expect(data).toEqual({\n      items: [],\n      id: 'cart-id'\n    });\n  });","file":"api/createCart.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"creates a new cart without draft","suites":["[commercetools-api-client] createCart"],"updatePoint":{"line":50,"column":38},"line":50,"code":"  it('creates a new cart without draft', async () => {\n    const givenVariables = {\n      acceptLanguage: ['en', 'de'],\n      locale: 'en',\n      currency: 'USD',\n      draft: {\n        country: 'US',\n        currency: 'USD'\n      }\n    };\n\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD',\n        country: 'US'\n      },\n      client: {\n        mutate: ({ variables, mutation }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(mutation).toEqual(defaultMutation);\n\n          return {\n            data: {}\n          };\n        }\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const { data } = await createCart(context);\n\n    expect(data).toEqual({});\n  });","file":"api/createCart.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"creates a new order","suites":["[commercetools-api-client] createMyOrderFromCart"],"updatePoint":{"line":20,"column":25},"line":20,"code":"  it('creates a new order', async () => {\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD'\n      },\n      client: {\n        mutate: ({ variables, mutation }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(mutation).toEqual(defaultMutation);\n          return { data: 'order response' };\n        }\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const { data } = await createMyOrderFromCart(context, { id: '123123', version: 2 });\n    expect(data).toBe('order response');\n  });","file":"api/createMyOrderFromCart.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"changes user password","suites":["[commercetools-api-client] customerChangeMyPassword"],"updatePoint":{"line":5,"column":27},"line":5,"code":"  it('changes user password', async () => {\n    const givenVariables = {\n      version: 364964457,\n      currentPassword: 'currentPassword',\n      newPassword: 'newPassword'\n    };\n\n    const context = {\n      config: {},\n      client: {\n        mutate: ({ variables, mutation }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(mutation).toEqual(defaultMutation);\n\n          return { data: 'user response' };\n        }\n      }\n    };\n\n    const { data } = await customerChangeMyPassword(context, givenVariables.version, givenVariables.currentPassword, givenVariables.newPassword);\n\n    expect(data).toBe('user response');\n  });","file":"api/customerChangeMyPassword.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"creates user session","suites":["[commercetools-api-client] customerSignMeIn"],"updatePoint":{"line":9,"column":26},"line":9,"code":"  it('creates user session', async () => {\n    const givenVariables = {\n      draft: {\n        email: 'john@doe.com',\n        password: 'xxxxx'\n      },\n      acceptLanguage: ['en', 'de'],\n      locale: 'en',\n      currency: 'USD'\n    };\n\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD'\n      },\n      client: {\n        mutate: ({ variables, mutation }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(mutation).toEqual(defaultMutation);\n          return { data: 'user response' };\n        }\n      }\n    };\n\n    const { data } = await customerSignMeIn(context, givenVariables.draft);\n    expect(data).toBe('user response');\n  });","file":"api/customerSignMeIn.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"creates user account","suites":["[commercetools-api-client] customerSignMeUp"],"updatePoint":{"line":5,"column":26},"line":5,"code":"  it('creates user account', async () => {\n    const givenVariables = {\n      draft: {\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john@doe.com',\n        password: 'xxxxx'\n      },\n      acceptLanguage: ['en', 'de'],\n      locale: 'en',\n      currency: 'USD'\n    };\n\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD'\n      },\n      client: {\n        mutate: ({ variables, mutation }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(mutation).toEqual(defaultMutation);\n\n          return { data: 'user response' };\n        }\n      }\n    };\n\n    const { data } = await customerSignMeUp(context, givenVariables.draft);\n    expect(data).toBe('user response');\n  });","file":"api/customerSignMeUp.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"calls \"onTokenRemove\" if provided","suites":["[commercetools-api-client] customerSignOut"],"updatePoint":{"line":19,"column":39},"line":19,"code":"  it('calls \"onTokenRemove\" if provided', () => {\n    const onTokenRemove = jest.fn().mockImplementation(() => {});\n    mockContext.config.auth.onTokenRemove = onTokenRemove;\n\n    customerSignOut(mockContext);\n    expect(onTokenRemove).toBeCalled();\n  });","file":"api/customerSignOut.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"updates customer data","suites":["[commercetools-api-client] customerUpdateMe"],"updatePoint":{"line":15,"column":27},"line":15,"code":"  it('updates customer data', async () => {\n    const currentUser = { id: 1, version: 2 };\n    const updatedUserData = { firstName: 'First', lastName: 'Last', email: 'email' };\n\n    const response = await customerUpdateMe(\n      mockContext,\n      currentUser,\n      updatedUserData\n    );\n\n    expect(mockContext.client.mutate).toHaveBeenCalledWith(\n      expect.objectContaining({\n        variables: {\n          version: currentUser.version,\n          actions: expect.arrayContaining([\n            {\n              setFirstName: { firstName: updatedUserData.firstName }\n            },\n            {\n              setLastName: { lastName: updatedUserData.lastName }\n            },\n            {\n              changeEmail: { email: updatedUserData.email }\n            }\n          ])\n        }\n      })\n    );\n    expect(response).toBe('MOCK_DATA');\n  });","file":"api/customerUpdateMe.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"fetches cart","suites":["[commercetools-api-client] getCart"],"updatePoint":{"line":5,"column":18},"line":5,"code":"  it('fetches cart', async () => {\n    const givenVariables = {\n      acceptLanguage: ['en', 'de'],\n      locale: 'en',\n      cartId: 'cart id',\n      currency: 'USD'\n    };\n\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD'\n      },\n      client: {\n        query: ({ variables, query }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(query).toEqual(defaultQuery);\n\n          return { data: 'cart response' };\n        }\n      }\n    };\n\n    const { data } = await getCart(context, 'cart id');\n\n    expect(data).toBe('cart response');\n  });","file":"api/getCart.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"fetches categories without search parameters","suites":["[commercetools-api-client] getCategory"],"updatePoint":{"line":5,"column":50},"line":5,"code":"  it('fetches categories without search parameters', async () => {\n    const givenVariables = {\n      acceptLanguage: ['en', 'de']\n    };\n\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD'\n      },\n      client: {\n        query: ({ variables, query }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(query).toEqual(defaultQuery);\n\n          return { data: 'category response' };\n        }\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const { data } = await getCategory(context, null);\n\n    expect(data).toBe('category response');\n  });","file":"api/getCategory.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"fetches categories with default query","suites":["[commercetools-api-client] getCategory"],"updatePoint":{"line":32,"column":43},"line":32,"code":"  it('fetches categories with default query', async () => {\n    const givenVariables = {\n      where: 'id=\"724b250d-9805-4657-ae73-3c02a63a9a13\"',\n      acceptLanguage: ['en', 'de']\n    };\n\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD'\n      },\n      client: {\n        query: ({ variables, query }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(query).toEqual(defaultQuery);\n\n          return { data: 'category response' };\n        }\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const { data } = await getCategory(context, { catId: '724b250d-9805-4657-ae73-3c02a63a9a13' });\n\n    expect(data).toBe('category response');\n  });","file":"api/getCategory.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"fetches current user data","suites":["[commercetools-api-client] getMe"],"updatePoint":{"line":5,"column":31},"line":5,"code":"  it('fetches current user data', async () => {\n    const givenVariables = {\n      acceptLanguage: ['en', 'de'],\n      locale: 'en',\n      currency: 'USD'\n    };\n\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD'\n      },\n      client: {\n        query: ({ variables, query }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(query).toEqual(basicProfile);\n\n          return { data: 'me response' };\n        }\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const { data } = await getMe(context);\n\n    expect(data).toBe('me response');\n  });","file":"api/getMe.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"fetches current user orders data","suites":["[commercetools-api-client] getOrders"],"updatePoint":{"line":25,"column":38},"line":25,"code":"  it('fetches current user orders data', async () => {\n    givenVariables.where = 'id=\"fvdrt8gaw4r\"';\n    params.id = 'fvdrt8gaw4r';\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD'\n      },\n      client: {\n        query: ({ variables, query }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(query).toEqual(defaultQuery);\n          return { data: 'me response' };\n        }\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const { data } = await getOrders(context, params);\n    expect(data).toBe('me response');\n  });","file":"api/getOrders.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"fetches current user orders data by orderNumber","suites":["[commercetools-api-client] getOrders"],"updatePoint":{"line":48,"column":53},"line":48,"code":"  it('fetches current user orders data by orderNumber', async () => {\n    givenVariables.where = 'orderNumber=\"1234\"';\n    params.orderNumber = '1234';\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD'\n      },\n      client: {\n        query: ({ variables, query }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(query).toEqual(defaultQuery);\n          return { data: 'me response' };\n        }\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const { data } = await getOrders(context, params);\n    expect(data).toBe('me response');\n  });","file":"api/getOrders.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"fetches product with default query","suites":["[commercetools-api-client] getProduct"],"updatePoint":{"line":5,"column":40},"line":5,"code":"  it('fetches product with default query', async () => {\n    const givenVariables = {\n      where: 'masterData(current(categories(id in (\"724b250d-9805-4657-ae73-3c02a63a9a13\"))))',\n      acceptLanguage: ['en', 'de'],\n      locale: 'en',\n      currency: 'USD',\n      country: 'UK'\n    };\n\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD',\n        country: 'UK'\n      },\n      client: {\n        query: ({ variables, query }) => {\n          expect(variables).toEqual(givenVariables);\n          expect(query).toEqual(defaultQuery);\n\n          return { data: 'product response' };\n        }\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const { data } = await getProduct(context, { catId: ['724b250d-9805-4657-ae73-3c02a63a9a13'] });\n\n    expect(data).toBe('product response');\n  });","file":"api/getProducts.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"fetches shipping methods","suites":["[commercetools-api-client] getShippingMethods"],"updatePoint":{"line":5,"column":30},"line":5,"code":"  it('fetches shipping methods', async () => {\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD'\n      },\n      client: {\n        query: ({ query }) => {\n          expect(query).toEqual(defaultQuery);\n\n          return { data: 'shipping response' };\n        }\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const { data } = await getShippingMethods(context);\n\n    expect(data).toBe('shipping response');\n  });","file":"api/getShippingMethods.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"fetches store data","suites":["[commercetools-api-client] getStores"],"updatePoint":{"line":5,"column":24},"line":5,"code":"  it('fetches store data', async () => {\n\n    const response = {\n      data: {\n        stores: 'stores response'\n      }\n    };\n\n    const extendQuery = jest.fn().mockImplementation(\n      function (_, args) {\n        return args;\n      }\n    );\n\n    const query = jest.fn().mockReturnValue(\n      response\n    );\n\n    const config = {\n      locale: 'en'\n    };\n\n    const client = {\n      query\n    };\n\n    const context = {\n      config,\n      client,\n      extendQuery\n    };\n\n    expect(await getStores(context)).toBe(response.data.stores);\n    expect(extendQuery).toHaveBeenCalled();\n    expect(query).toHaveBeenCalledWith({ variables: { ...config }, query: storesData, fetchPolicy: 'no-cache' });\n  });","file":"api/getStores.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"defaults to true","suites":["[commercetools-api-client] isGuest"],"updatePoint":{"line":20,"column":22},"line":20,"code":"  it('defaults to true', () => {\n    const context = getMockContext();\n    context.config.auth.onTokenRead = jest.fn();\n\n    expect(isGuest(context)).toBeTruthy();\n  });","file":"api/isGuest.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"calls \"handleIsGuest\" from config","suites":["[commercetools-api-client] isGuest"],"updatePoint":{"line":27,"column":39},"line":27,"code":"  it('calls \"handleIsGuest\" from config', () => {\n    const context = getMockContext();\n    context.config.handleIsGuest = jest.fn().mockImplementation(() => true);\n\n    expect(isGuest(context)).toBeTruthy();\n    expect(context.config.handleIsGuest).toBeCalled();\n  });","file":"api/isGuest.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns true if visitor is a guest","suites":["[commercetools-api-client] isGuest"],"updatePoint":{"line":35,"column":40},"line":35,"code":"  it('returns true if visitor is a guest', () => {\n    const context = getMockContext();\n    context.config.auth.onTokenRead = jest.fn().mockImplementation(() => ({ scope: '' }));\n\n    expect(isGuest(context)).toBeTruthy();\n    expect(context.config.auth.onTokenRead).toBeCalled();\n  });","file":"api/isGuest.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns false if visitor has user session","suites":["[commercetools-api-client] isGuest"],"updatePoint":{"line":43,"column":47},"line":43,"code":"  it('returns false if visitor has user session', () => {\n    const context = getMockContext();\n    context.config.auth.onTokenRead = jest.fn().mockImplementation(() => ({ scope: 'customer_id' }));\n\n    expect(isGuest(context)).toBeFalsy();\n    expect(context.config.auth.onTokenRead).toBeCalled();\n  });","file":"api/isGuest.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns false if visitor has anonymous session","suites":["[commercetools-api-client] isGuest"],"updatePoint":{"line":51,"column":52},"line":51,"code":"  it('returns false if visitor has anonymous session', () => {\n    const context = getMockContext();\n    context.config.auth.onTokenRead = jest.fn().mockImplementation(() => ({ scope: 'anonymous_id' }));\n\n    expect(isGuest(context)).toBeFalsy();\n    expect(context.config.auth.onTokenRead).toBeCalled();\n  });","file":"api/isGuest.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"defaults to false","suites":["[commercetools-api-client] isLoggedIn"],"updatePoint":{"line":20,"column":23},"line":20,"code":"  it('defaults to false', () => {\n    const context = getMockContext();\n    context.config.auth.onTokenRead = jest.fn();\n\n    expect(isLoggedIn(context)).toBeFalsy();\n  });","file":"api/isLoggedIn.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"calls \"handleIsLoggedIn\" from config","suites":["[commercetools-api-client] isLoggedIn"],"updatePoint":{"line":27,"column":42},"line":27,"code":"  it('calls \"handleIsLoggedIn\" from config', () => {\n    const context = getMockContext();\n    context.config.handleIsLoggedIn = jest.fn().mockImplementation(() => true);\n\n    expect(isLoggedIn(context)).toBeTruthy();\n    expect(context.config.handleIsLoggedIn).toBeCalled();\n  });","file":"api/isLoggedIn.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns false if visitor is a guest","suites":["[commercetools-api-client] isLoggedIn"],"updatePoint":{"line":35,"column":41},"line":35,"code":"  it('returns false if visitor is a guest', () => {\n    const context = getMockContext();\n    context.config.auth.onTokenRead = jest.fn().mockImplementation(() => ({ scope: '' }));\n\n    expect(isLoggedIn(context)).toBeFalsy();\n    expect(context.config.auth.onTokenRead).toBeCalled();\n  });","file":"api/isLoggedIn.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns false if visitor has anonymous session","suites":["[commercetools-api-client] isLoggedIn"],"updatePoint":{"line":43,"column":52},"line":43,"code":"  it('returns false if visitor has anonymous session', () => {\n    const context = getMockContext();\n    context.config.auth.onTokenRead = jest.fn().mockImplementation(() => ({ scope: 'anonymous_id' }));\n\n    expect(isLoggedIn(context)).toBeFalsy();\n    expect(context.config.auth.onTokenRead).toBeCalled();\n  });","file":"api/isLoggedIn.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns true if visitor has user session","suites":["[commercetools-api-client] isLoggedIn"],"updatePoint":{"line":51,"column":46},"line":51,"code":"  it('returns true if visitor has user session', () => {\n    const context = getMockContext();\n    context.config.auth.onTokenRead = jest.fn().mockImplementation(() => ({ scope: 'customer_id' }));\n\n    expect(isLoggedIn(context)).toBeTruthy();\n    expect(context.config.auth.onTokenRead).toBeCalled();\n  });","file":"api/isLoggedIn.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"removes coupon from the cart","suites":["[commercetools-api-client] removeCartCoupon"],"updatePoint":{"line":13,"column":34},"line":13,"code":"  it('removes coupon from the cart', async () => {\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD',\n        country: 'UK'\n      },\n      client: {\n        mutate: () => ({\n          actions: [\n            { removeDiscountCode: { discountCode: { id: '123', typeId: '123' } } }\n          ],\n          id: 1,\n          version: 1\n        })\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const response = await removeCartCoupon(context, cart, { typeId: '123', id: '123'});\n\n    expect(response).toEqual({\n      id: 1,\n      version: 1,\n      actions: [\n        {\n          removeDiscountCode: {\n            discountCode: {\n              id: '123',\n              typeId: '123'\n            }\n          }\n        }\n      ]\n    });\n  });","file":"api/removeCartCoupon.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"removes product from cart","suites":["[commercetools-api-client] removeFromCart"],"updatePoint":{"line":13,"column":31},"line":13,"code":"  it('removes product from cart', async () => {\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD',\n        country: 'UK'\n      },\n      client: {\n        mutate: () => ({\n          actions: [\n            { removeLineItem: { quantity: 2, lineItemId: 1} }\n          ],\n          id: 1,\n          version: 1\n        })\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const product = {\n      id: 1,\n      sku: '123',\n      quantity: 2\n    } as any;\n    const response = await removeFromCart(context, cart, product);\n\n    expect(response).toEqual({\n      id: 1,\n      version: 1,\n      actions: [\n        {\n          removeLineItem: {\n            lineItemId: 1,\n            quantity: 2\n          }\n        }\n      ]\n    });\n  });","file":"api/removeFromCart.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"updates cart shipping method","suites":["[commercetools-api-client] setShippingMethod"],"updatePoint":{"line":8,"column":34},"line":8,"code":"  it('updates cart shipping method', async () => {\n    const shippingMethodId = 'some-id';\n\n    const action1 = setShippingMethodAction(shippingMethodId);\n    const action2 = setShippingMethodAction();\n\n    expect(action1).toEqual({\n      setShippingMethod: { shippingMethod: { id: shippingMethodId } }\n    });\n\n    expect(action2).toEqual({\n      setShippingMethod: { shippingMethod: null }\n    });\n  });","file":"api/setShippingMethod.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"updates cart","suites":["[commercetools-api-client] updateCart"],"updatePoint":{"line":31,"column":18},"line":31,"code":"  it('updates cart', async () => {\n    const context = createContext({\n      mutate: ({ variables, mutation }) => {\n        expect(variables).toEqual(givenVariables);\n        expect(mutation).toEqual(defaultMutation);\n\n        return { data: 'cart response' };\n      }\n    });\n\n    const { data } = await updateCart(context, {\n      id: 'cart id',\n      version: 1,\n      actions: [{ addLineItem: {} }]\n    });\n\n    expect(data).toBe('cart response');\n  });","file":"api/updateCart.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"retries by default if error is caused by version mismatch","suites":["[commercetools-api-client] updateCart"],"updatePoint":{"line":50,"column":63},"line":50,"code":"  it('retries by default if error is caused by version mismatch', async () => {\n    const requestMock = jest.fn()\n      .mockImplementationOnce(() => {\n        const error: any = new Error('Mismatch');\n        error.graphQLErrors = [{ code: 'ConcurrentModification', currentVersion: 10 }];\n        throw error;\n      })\n      .mockImplementationOnce(() => 'SECOND_RETRY');\n\n    const context = createContext({ mutate: requestMock });\n\n    const params = {\n      id: 'cart id',\n      version: 1,\n      actions: [{ addLineItem: {} }]\n    };\n\n    await expect(updateCart(context, params)).resolves.toBe('SECOND_RETRY');\n    expect(requestMock).toHaveBeenCalledTimes(2);\n    expect(requestMock).toHaveBeenNthCalledWith(1, expect.objectContaining({ variables: expect.objectContaining({ version: 1 }) }));\n    expect(requestMock).toHaveBeenNthCalledWith(2, expect.objectContaining({ variables: expect.objectContaining({ version: 10 }) }));\n  });","file":"api/updateCart.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"doesnt retry if it was disabled","suites":["[commercetools-api-client] updateCart"],"updatePoint":{"line":73,"column":37},"line":73,"code":"  it('doesnt retry if it was disabled', async () => {\n    const requestMock = jest.fn().mockImplementation(() => {\n      const error: any = new Error('Mismatch');\n      error.graphQLErrors = [{ code: 'ConcurrentModification', currentVersion: 10 }];\n      throw error;\n    });\n\n    const context = createContext({ mutate: requestMock });\n\n    const params = {\n      id: 'cart id',\n      version: 1,\n      actions: [{ addLineItem: {} }],\n      versionFallback: false\n    };\n\n    await expect(updateCart(context, params)).rejects.toThrow(/Mismatch/);\n    expect(requestMock).toHaveBeenCalledTimes(1);\n  });","file":"api/updateCart.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"doesnt retry if error was not caused by mismatch","suites":["[commercetools-api-client] updateCart"],"updatePoint":{"line":93,"column":54},"line":93,"code":"  it('doesnt retry if error was not caused by mismatch', async () => {\n    const requestMock = jest.fn().mockImplementation(() => {\n      const error: any = new Error('Some error');\n      error.graphQLErrors = [{ code: 'SomeRandomErrorCode' }];\n      throw error;\n    });\n\n    const context = createContext({ mutate: requestMock });\n\n    const params = {\n      id: 'cart id',\n      version: 1,\n      actions: [{ addLineItem: {} }]\n    };\n\n    await expect(updateCart(context, params)).rejects.toThrow(/Some error/);\n    expect(requestMock).toHaveBeenCalledTimes(1);\n  });","file":"api/updateCart.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"updates cart product quantity","suites":["[commercetools-api-client] updateCartQuantity"],"updatePoint":{"line":13,"column":35},"line":13,"code":"  it('updates cart product quantity', async () => {\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD',\n        country: 'UK'\n      },\n      client: {\n        mutate: () => ({\n          actions: [\n            { changeLineItemQuantity: { quantity: 2, lineItemId: 1} }\n          ],\n          id: 1,\n          version: 1\n        })\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const product = {\n      id: 1,\n      sku: '123',\n      quantity: 2\n    } as any;\n\n    const response = await updateCartQuantity(context, cart, product);\n\n    expect(response).toEqual({\n      id: 1,\n      version: 1,\n      actions: [\n        {\n          changeLineItemQuantity: {\n            lineItemId: 1,\n            quantity: 2\n          }\n        }\n      ]\n    });\n  });","file":"api/updateCartQuantity.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"updates cart shipping details","suites":["[commercetools-api-client] updateShippingDetails"],"updatePoint":{"line":13,"column":35},"line":13,"code":"  it('updates cart shipping details', async () => {\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD',\n        country: 'UK'\n      },\n      client: {\n        mutate: () => ({\n          actions: [\n            {\n              setShippingAddress: {\n                address: {\n                  firstName: 'John',\n                  lastName: 'Doe',\n                  phone: '123',\n                  country: 'US',\n                  city: 'New York',\n                  postalCode: '11-111',\n                  streetName: 'Street 1',\n                  streetNumber: ''\n                }\n              }\n            }\n          ],\n          id: 1,\n          version: 1\n        })\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const shippingDetails = {\n      firstName: 'John',\n      lastName: 'Doe',\n      country: 'US',\n      city: 'New York',\n      contactInfo: { phone: '123' },\n      postalCode: '11-111',\n      streetName: 'Street 1',\n      streetNumber: ''\n    } as any;\n\n    const response = await updateShippingDetails(context, cart, shippingDetails);\n\n    expect(response).toEqual({\n      id: 1,\n      version: 1,\n      actions: [\n        {\n          setShippingAddress: {\n            address: {\n              firstName: 'John',\n              lastName: 'Doe',\n              country: 'US',\n              city: 'New York',\n              phone: '123',\n              postalCode: '11-111',\n              streetName: 'Street 1',\n              streetNumber: ''\n            }\n          }\n        }\n      ]\n    });\n  });","file":"api/updateShippingDetails.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"updates cart shipping details without contact info","suites":["[commercetools-api-client] updateShippingDetails"],"updatePoint":{"line":81,"column":56},"line":81,"code":"  it('updates cart shipping details without contact info', async () => {\n    const context = {\n      config: {\n        locale: 'en',\n        acceptLanguage: ['en', 'de'],\n        currency: 'USD',\n        country: 'UK'\n      },\n      client: {\n        mutate: () => ({\n          actions: [\n            {\n              setShippingAddress: {\n                address: {\n                  firstName: 'John',\n                  lastName: 'Doe',\n                  country: 'US',\n                  city: 'New York',\n                  postalCode: '11-111',\n                  streetName: 'Street 1',\n                  streetNumber: ''\n                }\n              }\n            }\n          ],\n          id: 1,\n          version: 1\n        })\n      },\n      extendQuery: (customQuery, args) => args\n    };\n\n    const shippingDetails = {\n      firstName: 'John',\n      lastName: 'Doe',\n      country: 'US',\n      city: 'New York',\n      postalCode: '11-111',\n      streetName: 'Street 1',\n      streetNumber: ''\n    } as any;\n\n    const response = await updateShippingDetails(context, cart, shippingDetails);\n\n    expect(response).toEqual({\n      id: 1,\n      version: 1,\n      actions: [\n        {\n          setShippingAddress: {\n            address: {\n              firstName: 'John',\n              lastName: 'Doe',\n              country: 'US',\n              city: 'New York',\n              postalCode: '11-111',\n              streetName: 'Street 1',\n              streetNumber: ''\n            }\n          }\n        }\n      ]\n    });\n  });","file":"api/updateShippingDetails.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"creates action for setting billing address","suites":["[commercetools-api-client] setBillingAddressAction"],"updatePoint":{"line":8,"column":48},"line":8,"code":"  it('creates action for setting billing address', () => {\n    const billingDetails = {\n      title: '',\n      salutation: 'Mr.',\n      firstName: 'John',\n      lastName: 'Doe',\n      streetName: 'Street 1',\n      streetNumber: '',\n      additionalAddressInfo: null,\n      postalCode: '11-111',\n      city: 'New York',\n      region: null,\n      state: 'New York',\n      country: 'US',\n      company: null,\n      department: null,\n      building: '2',\n      apartment: '1',\n      pOBox: null,\n      phone: '1234567890',\n      mobile: '1234567890',\n      email: 'test@example.com',\n      fax: null,\n      additionalStreetInfo: null\n    } as any;\n\n    const actionPayload = setBillingAddressAction(billingDetails);\n\n    expect(actionPayload).toEqual({\n      setBillingAddress: {\n        address: billingDetails\n      }\n    });\n  });","file":"helpers/actions/updateShippingDetails.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"creates action for setting billing address without contact info","suites":["[commercetools-api-client] setBillingAddressAction"],"updatePoint":{"line":43,"column":69},"line":43,"code":"  it('creates action for setting billing address without contact info', () => {\n    const billingDetails = {\n      firstName: 'John',\n      lastName: 'Doe',\n      country: 'US',\n      city: 'New York',\n      postalCode: '11-111',\n      streetName: 'Street 1',\n      streetNumber: ''\n    } as any;\n\n    const actionPayload = setBillingAddressAction(billingDetails);\n\n    expect(actionPayload).toEqual({\n      setBillingAddress: {\n        address: {\n          firstName: 'John',\n          lastName: 'Doe',\n          country: 'US',\n          city: 'New York',\n          postalCode: '11-111',\n          streetName: 'Street 1',\n          streetNumber: ''\n        }\n      }\n    });\n  });","file":"helpers/actions/updateShippingDetails.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns undefined when parameters are not supported","suites":["[commercetools-api-client] search"],"updatePoint":{"line":15,"column":57},"line":15,"code":"  it('returns undefined when parameters are not supported', () => {\n    expect(buildProductWhere(settings, null)).toBe(null);\n  });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns undefined string when parameters are not supported","suites":["[commercetools-api-client] search"],"updatePoint":{"line":19,"column":64},"line":19,"code":"  it('returns undefined string when parameters are not supported', () => {\n    expect(buildCategoryWhere(settings, null)).toBe(undefined);\n  });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns undefined string when parameters are not supported","suites":["[commercetools-api-client] search"],"updatePoint":{"line":23,"column":64},"line":23,"code":"  it('returns undefined string when parameters are not supported', () => {\n    expect(buildOrderWhere(null)).toBe(null);\n  });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"single one","suites":["[commercetools-api-client] search","returns product search query by cat id"],"updatePoint":{"line":28,"column":18},"line":28,"code":"    it('single one', () => {\n      expect(buildProductWhere(settings, { catId: 'cat id' })).toBe('masterData(current(categories(id in (\"cat id\"))))');\n    });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"multiple","suites":["[commercetools-api-client] search","returns product search query by cat id"],"updatePoint":{"line":31,"column":16},"line":31,"code":"    it('multiple', () => {\n      expect(buildProductWhere(settings, { catId: ['cat id', 'dog id'] })).toBe('masterData(current(categories(id in (\"cat id\",\"dog id\"))))');\n    });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns category search query by id","suites":["[commercetools-api-client] search","returns product search query by cat id"],"updatePoint":{"line":36,"column":41},"line":36,"code":"  it('returns category search query by id', () => {\n    expect(buildCategoryWhere(settings, { catId: 'cat id' })).toBe('id=\"cat id\"');\n  });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns category search query by key","suites":["[commercetools-api-client] search","returns product search query by cat id"],"updatePoint":{"line":40,"column":42},"line":40,"code":"  it('returns category search query by key', () => {\n    expect(buildCategoryWhere(settings, { key: 'Shoes' })).toBe('key=\"Shoes\"');\n  });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns category search query by slug","suites":["[commercetools-api-client] search","returns product search query by cat id"],"updatePoint":{"line":44,"column":43},"line":44,"code":"  it('returns category search query by slug', () => {\n    expect(buildCategoryWhere(settings, { slug: 'cat slug' })).toBe('slug(en=\"cat slug\" or de=\"cat slug\")');\n  });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns product search query by slug","suites":["[commercetools-api-client] search","returns product search query by cat id"],"updatePoint":{"line":48,"column":42},"line":48,"code":"  it('returns product search query by slug', () => {\n    expect(buildProductWhere(settings, { slug: 'product-slug' })).toBe('masterData(current(slug(en=\"product-slug\" or de=\"product-slug\")))');\n  });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns product search query by id","suites":["[commercetools-api-client] search","returns product search query by cat id"],"updatePoint":{"line":52,"column":40},"line":52,"code":"  it('returns product search query by id', () => {\n    expect(buildProductWhere(settings, { id: 'product-id' })).toBe('id=\"product-id\"');\n  });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns product search query by key","suites":["[commercetools-api-client] search","returns product search query by cat id"],"updatePoint":{"line":56,"column":41},"line":56,"code":"  it('returns product search query by key', () => {\n    expect(buildProductWhere(settings, { key: 'Shoes' })).toBe('key=\"Shoes\"');\n  });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns order search query by id","suites":["[commercetools-api-client] search","returns product search query by cat id"],"updatePoint":{"line":60,"column":38},"line":60,"code":"  it('returns order search query by id', () => {\n    expect(buildOrderWhere({ id: 'orderid' })).toBe('id=\"orderid\"');\n  });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns empty string for empty filters","suites":["[commercetools-api-client] search","using filters"],"updatePoint":{"line":65,"column":46},"line":65,"code":"    it('returns empty string for empty filters', () => {\n      expect(buildProductWhere(settings, { filters: [] })).toEqual(null);\n    });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns product search query by ","suites":["[commercetools-api-client] search","using filters"],"updatePoint":{"line":69,"column":63},"line":69,"code":"    it(`returns product search query by ${AttributeType.STRING}`, () => {\n      const search: ProductWhereSearch = {\n        filters: [\n          { type: AttributeType.STRING, value: 'stringValue', name: 'whatever' }\n        ]\n      };\n\n      expect(buildProductWhere(settings, search)).toEqual('masterData(current(masterVariant(attributes(name = \"whatever\" and value = \"stringValue\"))))');\n    });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"when single value","suites":["[commercetools-api-client] search","using filters","returns product search query by "],"updatePoint":{"line":80,"column":27},"line":80,"code":"      it('when single value', () => {\n        const search: ProductWhereSearch = {\n          filters: [\n            { type: AttributeType.STRING, value: 'dateValue', name: 'whatever' }\n          ]\n        };\n\n        expect(buildProductWhere(settings, search)).toEqual('masterData(current(masterVariant(attributes(name = \"whatever\" and value = \"dateValue\"))))');\n      });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"when multiple value","suites":["[commercetools-api-client] search","using filters","returns product search query by "],"updatePoint":{"line":90,"column":29},"line":90,"code":"      it('when multiple value', () => {\n        const search: ProductWhereSearch = {\n          filters: [\n            { type: AttributeType.DATE, value: ['dateValue1', 'dateValue2'], name: 'whatever' }\n          ]\n        };\n        expect(buildProductWhere(settings, search))\n          .toEqual('masterData(current(masterVariant(attributes(name = \"whatever\" and value >= \"dateValue1\" and value <= \"dateValue2\"))))');\n      });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"when single value","suites":["[commercetools-api-client] search","using filters","returns product search query by "],"updatePoint":{"line":102,"column":27},"line":102,"code":"      it('when single value', () => {\n        const search: ProductWhereSearch = {\n          filters: [\n            { type: AttributeType.NUMBER, value: 1, name: 'whatever' }\n          ]\n        };\n\n        expect(buildProductWhere(settings, search)).toEqual('masterData(current(masterVariant(attributes(name = \"whatever\" and value = 1))))');\n      });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"when pair of values","suites":["[commercetools-api-client] search","using filters","returns product search query by "],"updatePoint":{"line":111,"column":29},"line":111,"code":"      it('when pair of values', () => {\n        const search: ProductWhereSearch = {\n          filters: [\n            { type: AttributeType.NUMBER, value: [100, 200], name: 'whatever' }\n          ]\n        };\n        expect(buildProductWhere(settings, search)).toEqual('masterData(current(masterVariant(attributes(name = \"whatever\" and value >= 100 and value <= 200))))');\n      });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns product search query by ","suites":["[commercetools-api-client] search","using filters","returns product search query by "],"updatePoint":{"line":121,"column":61},"line":121,"code":"    it(`returns product search query by ${AttributeType.ENUM}`, () => {\n      const search: ProductWhereSearch = {\n        filters: [\n          { type: AttributeType.ENUM, value: 'enumValue', name: 'whatever' }\n        ]\n      };\n\n      expect(buildProductWhere(settings, search)).toEqual('masterData(current(masterVariant(attributes(name = \"whatever\" and value(key = \"enumValue\")))))');\n    });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns product search query by ","suites":["[commercetools-api-client] search","using filters","returns product search query by "],"updatePoint":{"line":131,"column":73},"line":131,"code":"    it(`returns product search query by ${AttributeType.LOCALIZED_STRING}`, () => {\n      const search: ProductWhereSearch = {\n        filters: [\n          { type: AttributeType.LOCALIZED_STRING, value: 'locStringValue', name: 'whatever' }\n        ]\n      };\n\n      const { locale } = settings;\n      expect(buildProductWhere(settings, search)).toEqual(`masterData(current(masterVariant(attributes(name = \"whatever\" and value(${locale} = \"locStringValue\")))))`);\n    });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"when single value","suites":["[commercetools-api-client] search","using filters","returns product search query by "],"updatePoint":{"line":143,"column":27},"line":143,"code":"      it('when single value', () => {\n        const search: ProductWhereSearch = {\n          filters: [\n            { type: AttributeType.MONEY, value: 200, name: 'whatever' }\n          ]\n        };\n\n        const { currency } = settings;\n\n        expect(buildProductWhere(settings, search)).toEqual(`masterData(current(masterVariant(attributes(name = \"whatever\" and value(centAmount = 200 and currencyCode = \"${currency.toUpperCase()}\")))))`);\n      });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"when pair of values","suites":["[commercetools-api-client] search","using filters","returns product search query by "],"updatePoint":{"line":154,"column":29},"line":154,"code":"      it('when pair of values', () => {\n        const search: ProductWhereSearch = {\n          filters: [\n            { type: AttributeType.MONEY, value: [100, 200], name: 'whatever' }\n          ]\n        };\n\n        const { currency } = settings;\n        expect(buildProductWhere(settings, search))\n          .toEqual(`masterData(current(masterVariant(attributes(name = \"whatever\" and value(centAmount >= 10000 and centAmount <= 20000 and currencyCode = \"${currency.toUpperCase()}\")))))`);\n      });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns product search query by ","suites":["[commercetools-api-client] search","using filters","returns product search query by "],"updatePoint":{"line":167,"column":64},"line":167,"code":"    it(`returns product search query by ${AttributeType.BOOLEAN}`, () => {\n\n      const search: ProductWhereSearch = {\n        filters: [\n          { type: AttributeType.BOOLEAN, value: true, name: 'whatever' }\n        ]\n      };\n\n      expect(buildProductWhere(settings, search)).toEqual('masterData(current(masterVariant(attributes(name = \"whatever\" and value = true))))');\n    });","file":"helpers/search.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"creates instance for direct connection","suites":["[commercetools-api-client] setup"],"updatePoint":{"line":11,"column":44},"line":11,"code":"  it('creates instance for direct connection', () => {\n    createApiClient({ api: 'api-config' } as any);\n  });","file":"helpers/setup.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"generates access token for guest session","suites":["[commercetools-helpers] handleBeforeAuth"],"updatePoint":{"line":31,"column":46},"line":31,"code":"  it('generates access token for guest session', async () => {\n    const scope = '';\n    const guestTokenProvider = getTokenProvider(scope);\n    const currentToken = await handleBeforeAuth({\n      configuration: { guestTokenProvider, auth},\n      apolloReq: { operationName: '' }\n    });\n\n    expect(currentToken).toMatchObject({ scope, access_token: 'ACCESS_TOKEN' });\n  });","file":"links/authLinks.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"generates server access token for users related operations","suites":["[commercetools-helpers] handleBeforeAuth"],"updatePoint":{"line":42,"column":64},"line":42,"code":"  it('generates server access token for users related operations', async () => {\n    const scope = '';\n    const serverTokenProvider = getTokenProvider(scope);\n    const currentToken = await handleBeforeAuth({\n      configuration: { serverTokenProvider, auth},\n      apolloReq: { operationName: 'createReview' }\n    });\n\n    expect(currentToken).toMatchObject({ scope, access_token: 'ACCESS_TOKEN' });\n  });","file":"links/authLinks.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"generates access token for guest on anonymous-session allowed operations","suites":["[commercetools-helpers] handleBeforeAuth"],"updatePoint":{"line":53,"column":78},"line":53,"code":"  it('generates access token for guest on anonymous-session allowed operations', async () => {\n    const scope = '';\n    const createSdkHelpersMock = createSdkHelpers as jest.Mock;\n    createSdkHelpersMock.mockImplementation(() => ({ tokenProvider: getTokenProvider(scope)}));\n    const currentToken = await handleBeforeAuth({\n      configuration,\n      apolloReq: { operationName: 'createCart' }\n    });\n\n    expect(currentToken).toMatchObject({ scope, access_token: 'ACCESS_TOKEN' });\n  });","file":"links/authLinks.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns existing token for anonymous user","suites":["[commercetools-helpers] handleBeforeAuth"],"updatePoint":{"line":65,"column":47},"line":65,"code":"  it('returns existing token for anonymous user', async () => {\n    const scope = 'anonymous_id';\n    auth.onTokenRead = () => 'ACCESS_TOKEN';\n    const createSdkHelpersMock = createSdkHelpers as jest.Mock;\n    createSdkHelpersMock.mockImplementation(() => ({ tokenProvider: getTokenProvider(scope)}));\n    const currentToken = await handleBeforeAuth({\n      configuration,\n      apolloReq: { operationName: 'customerSignMeIn' }\n    });\n\n    expect(currentToken).toMatchObject({ scope, access_token: 'ACCESS_TOKEN' });\n  });","file":"links/authLinks.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns existing token for logged in user","suites":["[commercetools-helpers] handleBeforeAuth"],"updatePoint":{"line":78,"column":47},"line":78,"code":"  it('returns existing token for logged in user', async () => {\n    const scope = 'customer_id';\n    auth.onTokenRead = () => 'ACCESS_TOKEN';\n    const createSdkHelpersMock = createSdkHelpers as jest.Mock;\n    createSdkHelpersMock.mockImplementation(() => ({ tokenProvider: getTokenProvider(scope)}));\n    const currentToken = await handleBeforeAuth({\n      configuration,\n      apolloReq: { operationName: 'customerSignMeIn' }\n    });\n\n    expect(currentToken).toMatchObject({ scope, access_token: 'ACCESS_TOKEN' });\n  });","file":"links/authLinks.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns token from customToken handler","suites":["[commercetools-helpers] handleBeforeAuth"],"updatePoint":{"line":92,"column":42},"line":92,"code":"it('returns token from customToken handler', async () => {\n  const token = {\n    access_token: 'CUSTOM_TOKEN',\n    scope: 'CUSTOM_SCOPE'\n  };\n  const customToken = jest.fn().mockImplementation(() => token);\n\n  const result = await handleBeforeAuth({\n    configuration: {\n      customToken,\n      auth\n    },\n    apolloReq: { operationName: 'customerSignMeIn' }\n  });\n\n  expect(customToken).toBeCalled();\n  expect(result).toMatchObject(token);\n});","file":"links/authLinks.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"doesnt fetch access token for non-user related operations","suites":["[commercetools-helpers] handleAfterAuth"],"updatePoint":{"line":116,"column":63},"line":116,"code":"  it('doesnt fetch access token for non-user related operations', async () => {\n    const scope = '';\n    auth.getTokenProvider = jest.fn().mockImplementation(() => getTokenProvider(scope));\n    const result = await handleAfterAuth({\n      apolloReq: { operationName: 'createCart' },\n      response: { errors: [] },\n      configuration\n    });\n\n    expect(result).toMatchObject({ scope });\n  });","file":"links/authLinks.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"doesnt fetch access token for logged in user","suites":["[commercetools-helpers] handleAfterAuth"],"updatePoint":{"line":128,"column":50},"line":128,"code":"  it('doesnt fetch access token for logged in user', async () => {\n    const scope = 'customer_id';\n    auth.getTokenProvider = jest.fn().mockImplementation(() => getTokenProvider(scope));\n    const result = await handleAfterAuth({\n      apolloReq: { operationName: 'customerSignMeIn' },\n      response: { errors: [] },\n      configuration\n    });\n\n    expect(result).toMatchObject({ scope });\n  });","file":"links/authLinks.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"fetches access token for anonymous session","suites":["[commercetools-helpers] handleAfterAuth"],"updatePoint":{"line":140,"column":48},"line":140,"code":"  it('fetches access token for anonymous session', async () => {\n    const scope = 'anonymous_id';\n    const tokenProvider = getTokenProvider(scope);\n    auth.getTokenProvider = jest.fn().mockImplementation(() => tokenProvider);\n    const createSdkHelpersMock = createSdkHelpers as jest.Mock;\n    createSdkHelpersMock.mockImplementation(() => ({ tokenProvider: tokenProvider }));\n    const result = await handleAfterAuth({\n      apolloReq: {\n        operationName: 'customerSignMeIn',\n        variables: { draft: { email: 'EMAIL', password: 'PASSWORD' } }\n      },\n      response: { errors: [] },\n      configuration\n    });\n\n    expect(result).toMatchObject({ scope, access_token: 'ACCESS_TOKEN' });\n  });","file":"links/authLinks.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"fetches access token for guest","suites":["[commercetools-helpers] handleAfterAuth"],"updatePoint":{"line":158,"column":36},"line":158,"code":"  it('fetches access token for guest', async () => {\n    const scope = '';\n    const tokenProvider = getTokenProvider(scope);\n    auth.getTokenProvider = jest.fn().mockImplementation(() => tokenProvider);\n    const createSdkHelpersMock = createSdkHelpers as jest.Mock;\n    createSdkHelpersMock.mockImplementation(() => ({ tokenProvider: tokenProvider}));\n    const result = await handleAfterAuth({\n      apolloReq: {\n        operationName: 'customerSignMeIn',\n        variables: { draft: { email: 'EMAIL', password: 'PASSWORD' } }\n      },\n      response: { errors: [] },\n      configuration\n    });\n\n    expect(result).toMatchObject({ scope, access_token: 'ACCESS_TOKEN' });\n  });","file":"links/authLinks.spec.ts","skipped":false,"dir":"packages/commercetools/api-client/__tests__"},{"name":"returns null prices when there is no product","suites":["[commercetools-getters] utils/createPrice"],"updatePoint":{"line":4,"column":50},"line":4,"code":"  it('returns null prices when there is no product', () => {\n    const price = createPrice(null);\n\n    expect(price).toEqual({ regular: null, special: null });\n  });","file":"getters/_createPrice.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns null prices when there is no price","suites":["[commercetools-getters] utils/createPrice"],"updatePoint":{"line":10,"column":48},"line":10,"code":"  it('returns null prices when there is no price', () => {\n    const price = createPrice({ price: null } as any);\n\n    expect(price).toEqual({ regular: null, special: null });\n  });","file":"getters/_createPrice.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns regular price when there is no discount","suites":["[commercetools-getters] utils/createPrice"],"updatePoint":{"line":16,"column":53},"line":16,"code":"  it('returns regular price when there is no discount', () => {\n    const price = createPrice({\n      price: { value: { centAmount: 250 } }\n    } as any);\n\n    expect(price).toEqual({ regular: 2.5, special: null });\n  });","file":"getters/_createPrice.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns regular price when discount is inactive","suites":["[commercetools-getters] utils/createPrice"],"updatePoint":{"line":24,"column":53},"line":24,"code":"  it('returns regular price when discount is inactive', () => {\n    const price = createPrice({\n      price: {\n        value: { centAmount: 250 },\n        discounted: {\n          discount: {\n            isActive: false\n          },\n          value: { centAmount: 350 }\n        }\n      }\n    } as any);\n\n    expect(price).toEqual({ regular: 2.5, special: null });\n  });","file":"getters/_createPrice.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns regular price for lineItem when discount is inactive and there is no cart discount","suites":["[commercetools-getters] utils/createPrice"],"updatePoint":{"line":40,"column":96},"line":40,"code":"  it('returns regular price for lineItem when discount is inactive and there is no cart discount', () => {\n    const price = createPrice({\n      __typename: 'LineItem',\n      discountedPricePerQuantity: [],\n      quantity: 1,\n      price: {\n        value: { centAmount: 250 },\n        discounted: {\n          discount: {\n            isActive: false\n          },\n          value: { centAmount: 350 }\n        }\n      }\n    } as any);\n\n    expect(price).toEqual({ regular: 2.5, special: null });\n  });","file":"getters/_createPrice.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns regular and special price","suites":["[commercetools-getters] utils/createPrice"],"updatePoint":{"line":59,"column":39},"line":59,"code":"  it('returns regular and special price', () => {\n    const price = createPrice({\n      price: {\n        value: { centAmount: 250 },\n        discounted: {\n          discount: {\n            isActive: true\n          },\n          value: { centAmount: 350 }\n        }\n      }\n    } as any);\n\n    expect(price).toEqual({ regular: 2.5, special: 3.5 });\n  });","file":"getters/_createPrice.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns regular and special price for line item","suites":["[commercetools-getters] utils/createPrice"],"updatePoint":{"line":75,"column":53},"line":75,"code":"  it('returns regular and special price for line item', () => {\n    const price = createPrice({\n      __typename: 'LineItem',\n      quantity: 1,\n      discountedPricePerQuantity: [{\n        discountedPrice: {\n          value: { centAmount: 2400 }\n        }\n      }],\n      price: {\n        value: { centAmount: 250 },\n        discounted: {\n          discount: {\n            isActive: true\n          },\n          value: { centAmount: 350 }\n        }\n      }\n    } as any);\n\n    expect(price).toEqual({ regular: 2.5, special: 24 });\n  });","file":"getters/_createPrice.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"transforms custom value attribute fields to normalized \"value\" and copies \"value\" to \"label\" if it is empty","suites":["[commercetools-getters] internal utilities helpers"],"updatePoint":{"line":19,"column":113},"line":19,"code":"  it('transforms custom value attribute fields to normalized \"value\" and copies \"value\" to \"label\" if it is empty', () => {\n    const normalziedAttributeList = [\n      { value: 'val', name: 'color', label: 'val' },\n      { value: 'val', name: 'name', label: 'val' },\n      { value: 'val', name: 'name', label: 'val' },\n      { value: 'val', name: 'name', label: 'val' },\n      { value: 'val', name: 'name', label: 'val' },\n      { value: 'val', name: 'name', label: 'val' },\n      { value: 'val', name: 'name', label: 'val' },\n      { value: { en: 'Val'}, name: 'name', label: 'val' },\n      { value: 'val', name: 'name', label: 'val' },\n      { value: 'val', name: 'name', label: 'val' },\n      { value: { typeId: 'val', id: 'val' }, name: 'name', label: null },\n      { value: null, name: 'name', label: null }\n    ];\n    expect(formatAttributeList(attributesRaw)).toEqual(normalziedAttributeList);\n  });","file":"getters/_formatAttributeList.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns configured product","suites":["[commercetools-getters] getVariantByAttribute"],"updatePoint":{"line":20,"column":32},"line":20,"code":"  it('returns configured product', () => {\n    const variants = [\n      {\n        ...product,\n        _master: true,\n        attributesRaw: [\n          {\n            name: 'size',\n            value: '36',\n            attributeDefinition: { type: { name: 'text'} }\n          },\n          {\n            name: 'color',\n            value: 'white',\n            attributeDefinition: { type: { name: 'text'} }\n          }\n        ]\n      },\n      {\n        ...product,\n        attributesRaw: [\n          {\n            name: 'size',\n            value: '38',\n            attributeDefinition: { type: { name: 'text'} }\n          },\n          {\n            name: 'color',\n            value: 'black',\n            attributeDefinition: { type: { name: 'text'} }\n          }\n        ]\n      }\n    ] as any;\n\n    const configuration = {\n      size: '38',\n      color: 'black'\n    } as any;\n\n    expect(getVariantByAttributes(null, configuration)).toEqual(null);\n    expect(getVariantByAttributes(variants, {})).toEqual({\n      ...product,\n      _master: true,\n      attributesRaw: [\n        {\n          name: 'size',\n          value: '36',\n          attributeDefinition: { type: { name: 'text'} }\n        },\n        {\n          name: 'color',\n          value: 'white',\n          attributeDefinition: { type: { name: 'text'} }\n        }\n      ]\n    });\n\n    expect(getVariantByAttributes(variants, configuration)).toEqual({\n      ...product,\n      attributesRaw: [\n        {\n          name: 'size',\n          value: '38',\n          attributeDefinition: { type: { name: 'text'} }\n        },\n        {\n          name: 'color',\n          value: 'black',\n          attributeDefinition: { type: { name: 'text'} }\n        }\n      ]\n    });\n  });","file":"getters/_getVariantByAttribute.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns default values","suites":["[commercetools-getters] cart helpers"],"updatePoint":{"line":53,"column":28},"line":53,"code":"  it('returns default values', () => {\n    expect(getCartItems(null)).toEqual([]);\n  });","file":"getters/cartHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns products","suites":["[commercetools-getters] cart helpers"],"updatePoint":{"line":57,"column":22},"line":57,"code":"  it('returns products', () => {\n    expect(getCartItems(cart)).toEqual(cart.lineItems);\n  });","file":"getters/cartHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns cart total price","suites":["[commercetools-getters] cart helpers"],"updatePoint":{"line":61,"column":30},"line":61,"code":"  it('returns cart total price', () => {\n    expect(getCartTotals(null)).toEqual({\n      special: 0,\n      total: 0,\n      subtotal: 0\n    });\n    expect(getCartTotals(cart).total).toEqual(30.44);\n  });","file":"getters/cartHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns cart subtotal price","suites":["[commercetools-getters] cart helpers"],"updatePoint":{"line":70,"column":33},"line":70,"code":"  it('returns cart subtotal price', () => {\n    expect(getCartTotals(cart).subtotal).toEqual(26);\n  });","file":"getters/cartHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns cart shipping price","suites":["[commercetools-getters] cart helpers"],"updatePoint":{"line":74,"column":33},"line":74,"code":"  it('returns cart shipping price', () => {\n    expect(getCartShippingPrice(cart)).toEqual(4.44);\n    expect(getCartShippingPrice({ ...cart,\n      shippingInfo: null })).toEqual(0);\n\n    expect(getCartShippingPrice({ ...cart,\n      shippingInfo: {\n        shippingMethod: {\n          zoneRates: [\n            {\n              shippingRates: [\n                {\n                  freeAbove: {\n                    centAmount: 1000\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      }\n    })).toEqual(0);\n  });","file":"getters/cartHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns cart total items","suites":["[commercetools-getters] cart helpers"],"updatePoint":{"line":98,"column":30},"line":98,"code":"  it('returns cart total items', () => {\n    expect(getCartTotalItems(null)).toEqual(0);\n    expect(getCartTotalItems(cart)).toEqual(3);\n  });","file":"getters/cartHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns cart product name","suites":["[commercetools-getters] cart helpers"],"updatePoint":{"line":103,"column":31},"line":103,"code":"  it('returns cart product name', () => {\n    expect(getCartItemName({ name: 'test' } as any)).toEqual('test');\n  });","file":"getters/cartHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns cart product image","suites":["[commercetools-getters] cart helpers"],"updatePoint":{"line":107,"column":32},"line":107,"code":"  it('returns cart product image', () => {\n    expect(\n      getCartItemImage({ variant: { images: [{ url: 'image.jpg' }]}} as any)\n    ).toEqual('image.jpg');\n  });","file":"getters/cartHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns cart product price","suites":["[commercetools-getters] cart helpers"],"updatePoint":{"line":113,"column":32},"line":113,"code":"  it('returns cart product price', () => {\n    expect(getCartItemPrice({ price: { value: { centAmount: 111 }}} as any)).toEqual({ regular: 1.11, special: 1.11 });\n  });","file":"getters/cartHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns cart product attributes","suites":["[commercetools-getters] cart helpers"],"updatePoint":{"line":117,"column":37},"line":117,"code":"  it('returns cart product attributes', () => {\n    const args = {\n      variant: 'test variant',\n      filters: ['filter']\n    };\n    // eslint-disable-next-line\n    (getProductAttributes as any) = jest.fn()\n      .mockImplementation((variant, filters) => ({\n        variant,\n        filters\n      }));\n\n    expect(\n      getCartItemAttributes({ variant: 'test variant' } as any, ['filter'])\n    ).toEqual(args);\n  });","file":"getters/cartHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns cart product sku","suites":["[commercetools-getters] cart helpers"],"updatePoint":{"line":134,"column":30},"line":134,"code":"  it('returns cart product sku', () => {\n    expect(getCartItemSku({ variant: { sku: 'XXX1' }} as any)).toEqual('XXX1');\n  });","file":"getters/cartHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns null when there is no category","suites":["[commercetools-getters] category helpers"],"updatePoint":{"line":298,"column":44},"line":298,"code":"  it('returns null when there is no category', () => {\n    expect(getCategoryTree(null)).toBe(null);\n  });","file":"getters/categoryHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns category tree","suites":["[commercetools-getters] category helpers"],"updatePoint":{"line":302,"column":27},"line":302,"code":"  it('returns category tree', () => {\n    const categoryRoot = getCategoryTree(category);\n    expect(categoryRoot.slug).toBe('men');\n  });","file":"getters/categoryHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns sorting options","suites":["[commercetools-getters] facet getters"],"updatePoint":{"line":14,"column":29},"line":14,"code":"  it('returns sorting options', () => {\n    expect(facetGetters.getSortOptions({ input: { sort: null } } as any)).toEqual({\n      options: [\n        { type: 'sort', id: 'latest', selected: false, value: 'Latest', count: null },\n        {\n          type: 'sort',\n          id: 'price-up',\n          selected: false,\n          value: 'Price from low to high',\n          count: null\n        },\n        {\n          type: 'sort',\n          id: 'price-down',\n          selected: false,\n          value: 'Price from high to low',\n          count: null\n        }\n      ],\n      selected: 'latest'\n    });\n\n    expect(facetGetters.getSortOptions({ input: { sort: 'latest' } } as any)).toEqual({\n      options: [\n        { type: 'sort', id: 'latest', selected: true, value: 'Latest', count: null },\n        {\n          type: 'sort',\n          id: 'price-up',\n          selected: false,\n          value: 'Price from low to high',\n          count: null\n        },\n        {\n          type: 'sort',\n          id: 'price-down',\n          selected: false,\n          value: 'Price from high to low',\n          count: null\n        }\n      ],\n      selected: 'latest'\n    });\n  });","file":"getters/facetHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns grouped facets","suites":["[commercetools-getters] facet getters"],"updatePoint":{"line":58,"column":28},"line":58,"code":"  it('returns grouped facets', () => {\n    expect(facetGetters.getGrouped({} as any)).toEqual([]);\n\n    const searchData = {\n      input: {},\n      data: {\n        facets: {\n          color: {\n            type: 'LocalizedEnumAttribute',\n            options: [\n              { label: 'white', value: 'white' },\n              { label: 'black', value: 'black' }\n            ]\n          },\n          size: {\n            type: 'StringAttribute',\n            options: [\n              { label: '34', value: '34' },\n              { label: 'M', value: 'M' }\n            ]\n          }\n        }\n      }\n    } as any;\n\n    const facets = facetGetters.getGrouped(searchData);\n\n    expect(facets).toEqual([\n      {\n        count: null,\n        id: 'color',\n        label: 'color',\n        options: [\n          { attrName: 'color', count: null, id: 'white', selected: false, type: 'attribute', value: 'white' },\n          { attrName: 'color', count: null, id: 'black', selected: false, type: 'attribute', value: 'black' }\n        ]\n      },\n      {\n        count: null,\n        id: 'size',\n        label: 'size',\n        options: [\n          { attrName: 'size', count: null, id: '34', selected: false, type: 'attribute', value: '34' },\n          { attrName: 'size', count: null, id: 'M', selected: false, type: 'attribute', value: 'M' }\n        ]\n      }\n    ]);\n  });","file":"getters/facetHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns facets","suites":["[commercetools-getters] facet getters"],"updatePoint":{"line":107,"column":20},"line":107,"code":"  it('returns facets', () => {\n    expect(facetGetters.getGrouped({} as any)).toEqual([]);\n\n    const searchData = {\n      input: {},\n      data: {\n        facets: {\n          color: {\n            type: 'LocalizedEnumAttribute',\n            options: [\n              { label: 'white', value: 'white' },\n              { label: 'black', value: 'black' }\n            ]\n          },\n          size: {\n            type: 'StringAttribute',\n            options: [\n              { label: '34', value: '34' },\n              { label: 'M', value: 'M' }\n            ]\n          }\n        }\n      }\n    } as any;\n\n    const facets = facetGetters.getAll(searchData);\n\n    expect(facets).toEqual([\n      { attrName: 'color', id: 'white', value: 'white', count: null, selected: false, type: 'attribute' },\n      { attrName: 'color', id: 'black', value: 'black', count: null, selected: false, type: 'attribute' },\n      { attrName: 'size', id: '34', value: '34', count: null, selected: false, type: 'attribute' },\n      { attrName: 'size', id: 'M', value: 'M', count: null, selected: false, type: 'attribute' }\n    ]);\n  });","file":"getters/facetHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns search results","suites":["[commercetools-getters] facet getters"],"updatePoint":{"line":142,"column":28},"line":142,"code":"  it('returns search results', () => {\n    const searchData = {\n      input: {},\n      data: {\n        products: []\n      }\n    } as any;\n\n    facetGetters.getProducts(searchData);\n\n    expect(getProductFiltered).toBeCalled();\n  });","file":"getters/facetHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns category tree","suites":["[commercetools-getters] facet getters"],"updatePoint":{"line":155,"column":27},"line":155,"code":"  it('returns category tree', () => {\n    expect(facetGetters.getCategoryTree({ data: null } as any)).toEqual({});\n\n    const searchData = {\n      input: {},\n      data: {\n        products: [],\n        categories: [{ cat: 1 }]\n      }\n    } as any;\n\n    facetGetters.getCategoryTree(searchData);\n\n    expect(getCategoryTree).toBeCalled();\n  });","file":"getters/facetHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns breadcrumbs","suites":["[commercetools-getters] facet getters"],"updatePoint":{"line":171,"column":25},"line":171,"code":"  it('returns breadcrumbs', () => {\n    expect(facetGetters.getBreadcrumbs({ data: null } as any)).toEqual([]);\n\n    const searchData = {\n      input: {},\n      data: {\n        categories: [{\n          name: 'cat3',\n          slug: 'cat-3',\n          parent: {\n            name: 'cat2',\n            slug: 'cat-2',\n            parent: {\n              name: 'cat1',\n              slug: 'cat-1'\n            }\n          }\n        }]\n      }\n    } as any;\n\n    const breadcrumbs = facetGetters.getBreadcrumbs(searchData);\n\n    expect(breadcrumbs).toEqual([\n      { link: '/', text: 'Home' },\n      { link: '/c/cat-1', text: 'cat1' },\n      { link: '/c/cat-1/cat-2', text: 'cat2' },\n      { link: '/c/cat-1/cat-2/cat-3', text: 'cat3' }\n    ]);\n  });","file":"getters/facetHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns pagination info","suites":["[commercetools-getters] facet getters"],"updatePoint":{"line":202,"column":29},"line":202,"code":"  it('returns pagination info', () => {\n    expect(facetGetters.getPagination({ data: null } as any)).toEqual({});\n\n    const searchData = {\n      input: {\n        page: 2,\n        itemsPerPage: 10\n      },\n      data: {\n        total: 120,\n        itemsPerPage: 10,\n        perPageOptions: [10, 20, 50]\n      }\n    } as any;\n\n    const paginationInfo = facetGetters.getPagination(searchData);\n\n    expect(paginationInfo).toEqual({\n      currentPage: 2,\n      itemsPerPage: 10,\n      pageOptions: [10, 20, 50],\n      totalItems: 120,\n      totalPages: 12\n    });\n  });","file":"getters/facetHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns default values","suites":["[commercetools-getters] order getters"],"updatePoint":{"line":48,"column":28},"line":48,"code":"  it('returns default values', () => {\n    expect(getOrderDate(null)).toBe('');\n    expect(getOrderId(null)).toBe('');\n    expect(getOrderStatus(null)).toBe('');\n    expect(getOrderPrice(null)).toBe(0);\n    expect(getOrderItems(null)).toHaveLength(0);\n    expect(getOrderItemSku(null)).toBe('');\n    expect(getOrderItemName(null)).toBe('');\n    expect(getOrderItemQty(null)).toBe(0);\n    expect(getFormattedPrice(null)).toBe(null);\n    expect(getOrdersTotal({ results: [], total: 0, offset: 0, count: 0, exists: false })).toBe(0);\n  });","file":"getters/orderHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns date","suites":["[commercetools-getters] order getters"],"updatePoint":{"line":61,"column":18},"line":61,"code":"  it('returns date', () => {\n    expect(getOrderDate(order)).toEqual(123456789);\n  });","file":"getters/orderHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns order number","suites":["[commercetools-getters] order getters"],"updatePoint":{"line":65,"column":26},"line":65,"code":"  it('returns order number', () => {\n    expect(getOrderId(order)).toEqual('645ygdf');\n  });","file":"getters/orderHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns status","suites":["[commercetools-getters] order getters"],"updatePoint":{"line":69,"column":20},"line":69,"code":"  it('returns status', () => {\n    expect(getOrderStatus(order)).toEqual(OrderState.Complete);\n  });","file":"getters/orderHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns total gross","suites":["[commercetools-getters] order getters"],"updatePoint":{"line":73,"column":25},"line":73,"code":"  it('returns total gross', () => {\n    expect(getOrderPrice(order)).toEqual(123.45);\n  });","file":"getters/orderHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns orders total","suites":["[commercetools-getters] order getters"],"updatePoint":{"line":77,"column":26},"line":77,"code":"  it('returns orders total', () => {\n    expect(getOrdersTotal(orders)).toEqual(3);\n  });","file":"getters/orderHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns all items","suites":["[commercetools-getters] order getters","order items"],"updatePoint":{"line":88,"column":25},"line":88,"code":"    it('returns all items', () => {\n      expect(items).toHaveLength(2);\n    });","file":"getters/orderHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns items sku","suites":["[commercetools-getters] order getters","order items"],"updatePoint":{"line":92,"column":25},"line":92,"code":"    it('returns items sku', () => {\n      expect(getOrderItemSku(items[0])).toBe('item-id-1');\n      expect(getOrderItemSku(items[1])).toBe('item-id-2');\n    });","file":"getters/orderHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns items name","suites":["[commercetools-getters] order getters","order items"],"updatePoint":{"line":97,"column":26},"line":97,"code":"    it('returns items name', () => {\n      expect(getOrderItemName(items[0])).toBe('item-1');\n      expect(getOrderItemName(items[1])).toBe('item-2');\n    });","file":"getters/orderHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns items quantity","suites":["[commercetools-getters] order getters","order items"],"updatePoint":{"line":102,"column":30},"line":102,"code":"    it('returns items quantity', () => {\n      expect(getOrderItemQty(items[0])).toBe(10);\n      expect(getOrderItemQty(items[1])).toBe(20);\n    });","file":"getters/orderHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns default values","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":40,"column":28},"line":40,"code":"  it('returns default values', () => {\n    expect(getProductName(null)).toBe('');\n    expect(getProductSlug(null)).toBe('');\n    expect(getProductGallery(null)).toEqual([]);\n    expect(getProductFiltered(null)).toEqual([]);\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns name","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":47,"column":18},"line":47,"code":"  it('returns name', () => {\n    expect(getProductName(product)).toBe('variant 1');\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns slug","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":51,"column":18},"line":51,"code":"  it('returns slug', () => {\n    expect(getProductSlug(product)).toBe('variant-1');\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns price","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":55,"column":19},"line":55,"code":"  it('returns price', () => {\n    expect(getProductPrice(product)).toEqual({ regular: 12, special: 12 });\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns gallery","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":59,"column":21},"line":59,"code":"  it('returns gallery', () => {\n    expect(getProductGallery(product)).toEqual([\n      {\n        small: 'imageV11/url.jpg',\n        big: 'imageV11/url.jpg',\n        normal: 'imageV11/url.jpg'\n      },\n      {\n        small: 'imageV12/url.jpg',\n        big: 'imageV12/url.jpg',\n        normal: 'imageV12/url.jpg'\n      }\n    ]);\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns cover image","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":74,"column":25},"line":74,"code":"  it('returns cover image', () => {\n    expect(getProductCoverImage({ images: [] } as any)).toEqual('');\n    expect(getProductCoverImage(product)).toEqual('imageV11/url.jpg');\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns master variant","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":79,"column":28},"line":79,"code":"  it('returns master variant', () => {\n    const variants = [\n      { _name: 'variant 1',\n        _master: false },\n      { _name: 'variant 2',\n        _master: true }\n    ];\n    expect(getProductFiltered(variants as any, { master: true })).toEqual([{\n      _name: 'variant 2',\n      _master: true\n    }]);\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns master variants","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":92,"column":29},"line":92,"code":"  it('returns master variants', () => {\n    const variants = [\n      { _name: 'variant 1_1',\n        _master: false },\n      { _name: 'variant 1_2',\n        _master: true },\n      { _name: 'variant 2_1',\n        _master: true },\n      { _name: 'variant 2_2',\n        _master: false }\n    ];\n    expect(getProductFiltered(variants as any, { master: true })).toEqual([\n      { _name: 'variant 1_2',\n        _master: true },\n      { _name: 'variant 2_1',\n        _master: true }\n    ]);\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns all variants","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":111,"column":26},"line":111,"code":"  it('returns all variants', () => {\n    const variants = [\n      { _name: 'variant 1',\n        _master: false },\n      { _name: 'variant 2',\n        _master: true }\n    ];\n    expect(getProductFiltered(variants as any)).toEqual(variants);\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns product by given attributes","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":121,"column":41},"line":121,"code":"  it('returns product by given attributes', () => {\n    const variant1 = {\n      ...product,\n      attributesRaw: [\n        {\n          name: 'size',\n          value: '36',\n          _translated: '26',\n          attributeDefinition: { type: { name: 'text'} }\n        },\n        {\n          name: 'color',\n          value: 'white',\n          _translated: 'white',\n          attributeDefinition: { type: { name: 'text'} }\n        }\n      ]\n    };\n    const variant2 = {\n      ...product,\n      attributesRaw: [\n        {\n          name: 'size',\n          value: '38',\n          _translated: '38',\n          attributeDefinition: { type: { name: 'text'} }\n        },\n        {\n          name: 'color',\n          value: 'black',\n          _translated: 'black',\n          attributeDefinition: { type: { name: 'text'} }\n        }\n      ]\n    };\n\n    const variants = [variant1, variant2];\n\n    const attributes = { color: 'black',\n      size: '38' };\n    expect(getProductFiltered(variants, { attributes })).toEqual([variant2]);\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns product attributes","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":166,"column":32},"line":166,"code":"  it('returns product attributes', () => {\n    expect(getProductAttributes([product])).toEqual({\n      articleNumberManufacturer: [{ label: 'H805 C195 85072',\n        value: 'H805 C195 85072' }]\n    });\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns attributes of single product","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":173,"column":42},"line":173,"code":"  it('returns attributes of single product', () => {\n    expect(getProductAttributes(product)).toEqual({ articleNumberManufacturer: 'H805 C195 85072' });\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns product unique attributes","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":177,"column":39},"line":177,"code":"  it('returns product unique attributes', () => {\n    const prod = {\n      ...product,\n      attributesRaw: [\n        {\n          name: 'articleNumberManufacturer',\n          value: 'H805 C195 85072',\n          _translated: 'H805 C195 85072',\n          attributeDefinition: { type: { name: 'text'} }\n        },\n        {\n          name: 'articleNumberManufacturer',\n          value: 'H805 C195 85072',\n          _translated: 'H805 C195 85072',\n          attributeDefinition: { type: { name: 'text'} }\n        }\n      ]\n    } as any;\n\n    expect(getProductAttributes([prod])).toEqual({\n      articleNumberManufacturer: [{ label: 'H805 C195 85072',\n        value: 'H805 C195 85072' }]\n    });\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns filtered product attributes","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":202,"column":41},"line":202,"code":"  it('returns filtered product attributes', () => {\n    const product = {\n      attributesRaw: [\n        {\n          name: 'articleNumberManufacturer',\n          value: 'H805 C195 85072',\n          _translated: 'H805 C195 85072',\n          attributeDefinition: { type: { name: 'text'} }\n        },\n        {\n          name: 'color',\n          value: 'H805 C195 85072',\n          _translated: 'H805 C195 85072',\n          attributeDefinition: { type: { name: 'text'} }\n        }\n      ]\n    } as any;\n\n    expect(getProductAttributes([product], ['color'])).toEqual({\n      color: [{ value: 'H805 C195 85072',\n        label: 'H805 C195 85072' }]\n    });\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns product categories","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":226,"column":32},"line":226,"code":"  it('returns product categories', () => {\n    expect(getProductCategoryIds(product)).toEqual([\n      'catA',\n      'catB'\n    ]);\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns product ID","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":233,"column":24},"line":233,"code":"  it('returns product ID', () => {\n    expect(getProductId(product)).toEqual(1234);\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns empty array if there is no product","suites":["[commercetools-getters] product getters"],"updatePoint":{"line":237,"column":48},"line":237,"code":"  it('returns empty array if there is no product', () => {\n    expect(getProductAttributes(null)).toEqual({});\n  });","file":"getters/productHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns array of stores","suites":["[commercetools-getters] store getters","getItems"],"updatePoint":{"line":50,"column":31},"line":50,"code":"    it('returns array of stores', () => {\n      const expected = [\n        makeStore('1', 'store-1', 'key-1', 'd1', 'distribution channel 1'),\n        makeStore('1', 'store-1', 'key-1', 'd2', 'distribution channel 2'),\n        makeStore('1', 'store-1', 'key-1', 'd3', 'distribution channel 3'),\n        makeStore('1', 'store-1', 'key-1', 's1', 'supply channel 1'),\n        makeStore('1', 'store-1', 'key-1', 's2', 'supply channel 2'),\n        makeStore('1', 'store-1', 'key-1', 's3', 'supply channel 3'),\n        makeStore('2', 'store-2', 'key-2', 's1', 'supply channel 1'),\n        makeStore('2', 'store-2', 'key-2', 's2', 'supply channel 2'),\n        makeStore('2', 'store-2', 'key-2', 's3', 'supply channel 3'),\n        makeStore('3', 'store-3', 'key-3', 'd1', 'distribution channel 1'),\n        makeStore('3', 'store-3', 'key-3', 'd2', 'distribution channel 2'),\n        makeStore('3', 'store-3', 'key-3', 'd3', 'distribution channel 3'),\n        makeStore('4', 'store-4', 'key-4')\n      ];\n\n      expect(storeGetters.getItems(stores as StoresData)).toStrictEqual(expected);\n    });","file":"getters/storeGetters.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns empty array for invalid stores data","suites":["[commercetools-getters] store getters","getItems"],"updatePoint":{"line":70,"column":51},"line":70,"code":"    it('returns empty array for invalid stores data', () => {\n      const expected = [];\n      expect(storeGetters.getItems(null as StoresData)).toStrictEqual(expected);\n    });","file":"getters/storeGetters.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns array of stores with store filter criteria","suites":["[commercetools-getters] store getters","getItems"],"updatePoint":{"line":75,"column":58},"line":75,"code":"    it('returns array of stores with store filter criteria', () => {\n      const expected = [\n        makeStore('1', 'store-1', 'key-1', 'd1', 'distribution channel 1'),\n        makeStore('1', 'store-1', 'key-1', 'd2', 'distribution channel 2'),\n        makeStore('1', 'store-1', 'key-1', 'd3', 'distribution channel 3'),\n        makeStore('1', 'store-1', 'key-1', 's1', 'supply channel 1'),\n        makeStore('1', 'store-1', 'key-1', 's2', 'supply channel 2'),\n        makeStore('1', 'store-1', 'key-1', 's3', 'supply channel 3')\n      ];\n\n      const criteria = {\n        store: {\n          id: '1'\n        }\n      };\n\n      expect(storeGetters.getItems(stores as StoresData, criteria)).toStrictEqual(expected);\n    });","file":"getters/storeGetters.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns array of stores with callable store filter criteria","suites":["[commercetools-getters] store getters","getItems"],"updatePoint":{"line":94,"column":67},"line":94,"code":"    it('returns array of stores with callable store filter criteria', () => {\n      const expected = [\n        makeStore('1', 'store-1', 'key-1', 'd1', 'distribution channel 1'),\n        makeStore('1', 'store-1', 'key-1', 'd2', 'distribution channel 2'),\n        makeStore('1', 'store-1', 'key-1', 'd3', 'distribution channel 3'),\n        makeStore('1', 'store-1', 'key-1', 's1', 'supply channel 1'),\n        makeStore('1', 'store-1', 'key-1', 's2', 'supply channel 2'),\n        makeStore('1', 'store-1', 'key-1', 's3', 'supply channel 3'),\n        makeStore('3', 'store-3', 'key-3', 'd1', 'distribution channel 1'),\n        makeStore('3', 'store-3', 'key-3', 'd2', 'distribution channel 2'),\n        makeStore('3', 'store-3', 'key-3', 'd3', 'distribution channel 3')\n      ];\n\n      const criteria = {\n        store: {\n          id(value) {\n            return value === '1' || value === '3';\n          }\n        }\n      };\n\n      expect(storeGetters.getItems(stores as StoresData, criteria)).toStrictEqual(expected);\n    });","file":"getters/storeGetters.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns array of stores with channel filter criteria","suites":["[commercetools-getters] store getters","getItems"],"updatePoint":{"line":118,"column":60},"line":118,"code":"    it('returns array of stores with channel filter criteria', () => {\n      const expected = [\n        makeStore('1', 'store-1', 'key-1', 'd3', 'distribution channel 3'),\n        makeStore('3', 'store-3', 'key-3', 'd3', 'distribution channel 3')\n      ];\n\n      const criteria = {\n        channel: {\n          id: 'd3'\n        }\n      };\n\n      expect(storeGetters.getItems(stores as StoresData, criteria)).toStrictEqual(expected);\n    });","file":"getters/storeGetters.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns array of stores with callable channel filter criteria","suites":["[commercetools-getters] store getters","getItems"],"updatePoint":{"line":133,"column":69},"line":133,"code":"    it('returns array of stores with callable channel filter criteria', () => {\n      const expected = [\n        makeStore('1', 'store-1', 'key-1', 'd3', 'distribution channel 3'),\n        makeStore('1', 'store-1', 'key-1', 's2', 'supply channel 2'),\n        makeStore('2', 'store-2', 'key-2', 's2', 'supply channel 2'),\n        makeStore('3', 'store-3', 'key-3', 'd3', 'distribution channel 3')\n      ];\n\n      const criteria = {\n        channel: {\n          id (value) {\n            return value === 's2' || value === 'd3';\n          }\n        }\n      };\n\n      expect(storeGetters.getItems(stores as StoresData, criteria)).toStrictEqual(expected);\n    });","file":"getters/storeGetters.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns empty array for criteria mismatch","suites":["[commercetools-getters] store getters","getItems"],"updatePoint":{"line":152,"column":49},"line":152,"code":"    it('returns empty array for criteria mismatch', () => {\n      const expected = [];\n\n      const criteria = {\n        store: {\n          id: 'z1'\n        }\n      };\n\n      expect(storeGetters.getItems(stores as StoresData, criteria)).toStrictEqual(expected);\n    });","file":"getters/storeGetters.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns selected store","suites":["[commercetools-getters] store getters","getSelected"],"updatePoint":{"line":168,"column":30},"line":168,"code":"    it('returns selected store', () => {\n      const expected = makeStore('3', 'store-3', 'key-3', 'd1', 'distribution channel 1');\n      expect(storeGetters.getSelected(stores as StoresData)).toStrictEqual(expected);\n    });","file":"getters/storeGetters.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns undefined for invalid stores data","suites":["[commercetools-getters] store getters","getSelected"],"updatePoint":{"line":173,"column":49},"line":173,"code":"    it('returns undefined for invalid stores data', () => {\n      expect(storeGetters.getSelected(null as StoresData)).toBeUndefined();\n    });","file":"getters/storeGetters.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns undefined for criteria mismatch","suites":["[commercetools-getters] store getters","getSelected"],"updatePoint":{"line":177,"column":47},"line":177,"code":"    it('returns undefined for criteria mismatch', () => {\n      const given = { ...stores, _selectedStore: '5/z1' };\n      expect(storeGetters.getSelected(given as StoresData)).toBeUndefined();\n    });","file":"getters/storeGetters.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns default values","suites":["[commercetools-getters] user getters"],"updatePoint":{"line":13,"column":28},"line":13,"code":"  it('returns default values', () => {\n    expect(getUserFirstName(null)).toBe('');\n    expect(getUserLastName(null)).toBe('');\n    expect(getUserFullName(null)).toBe('');\n  });","file":"getters/userHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns first name","suites":["[commercetools-getters] user getters"],"updatePoint":{"line":19,"column":24},"line":19,"code":"  it('returns first name', () => {\n    expect(getUserFirstName(user)).toBe('John');\n  });","file":"getters/userHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns last name","suites":["[commercetools-getters] user getters"],"updatePoint":{"line":23,"column":23},"line":23,"code":"  it('returns last name', () => {\n    expect(getUserLastName(user)).toBe('Doe');\n  });","file":"getters/userHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns full name","suites":["[commercetools-getters] user getters"],"updatePoint":{"line":27,"column":23},"line":27,"code":"  it('returns full name', () => {\n    expect(getUserFullName(user)).toBe('John Doe');\n  });","file":"getters/userHelpers.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns category response with the products inside","suites":["[commercetools-composables] enhanceProduct"],"updatePoint":{"line":47,"column":56},"line":47,"code":"  it('returns category response with the products inside', () => {\n    expect(enhanceProduct(productResponse, context)).toMatchSnapshot();\n  });","file":"helpers/enhanceProduct.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns undefined if cart doesn't have discount codes","suites":["[commercetools-composables] getCouponsFromCart"],"updatePoint":{"line":16,"column":60},"line":16,"code":"  it('returns undefined if cart doesn\\'t have discount codes', () => {\n    expect(getCouponsFromCart({} as any)).toBeUndefined();\n  });","file":"helpers/getCouponsFromCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"adds 'value' property","suites":["[commercetools-composables] getCouponsFromCart"],"updatePoint":{"line":20,"column":29},"line":20,"code":"  it('adds \\'value\\' property', () => {\n    expect(getCouponsFromCart(cart as any)).toEqual([\n      {\n        ...cart.discountCodes[0].discountCode,\n        value: null\n      }\n    ]);\n  });","file":"helpers/getCouponsFromCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"empty products list","suites":["[commercetools-composables] getFiltersFromProductsAttributes","returns epmty object in case of"],"updatePoint":{"line":6,"column":27},"line":6,"code":"    it('empty products list', () => {\n      expect(getFiltersFromProductsAttributes([])).toEqual({});\n    });","file":"helpers/getFiltersFromProductsAttributes.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"no products list given","suites":["[commercetools-composables] getFiltersFromProductsAttributes","returns epmty object in case of"],"updatePoint":{"line":10,"column":30},"line":10,"code":"    it('no products list given', () => {\n      expect(getFiltersFromProductsAttributes(null)).toEqual({});\n    });","file":"helpers/getFiltersFromProductsAttributes.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns filters based on attributes","suites":["[commercetools-composables] getFiltersFromProductsAttributes","returns epmty object in case of"],"updatePoint":{"line":15,"column":41},"line":15,"code":"  it('returns filters based on attributes', () => {\n    const products: ProductVariant[] = [\n      {\n        attributesRaw: [\n          {\n            name: 'someAttribute',\n            attributeDefinition: { type: { name: 'text' } },\n            value: 'value'\n          } as Attribute,\n          {\n            name: 'someAttribute',\n            attributeDefinition: { type: { name: 'text' } },\n            value: 'value2',\n            label: 'valueLabel'\n          } as Attribute,\n          {\n            name: 'someNumberAttribute',\n            attributeDefinition: { type: { name: 'number' } },\n            value: 1\n          } as Attribute\n        ]\n      } as ProductVariant\n    ];\n    expect(getFiltersFromProductsAttributes(products)).toEqual({\n      someAttribute: {\n        type: 'text',\n        options: [\n          { label: 'value', value: 'value', selected: false },\n          { label: 'valueLabel', value: 'value2', selected: false }\n        ]\n      },\n      someNumberAttribute: {\n        type: 'number',\n        options: [\n          { label: null, value: 1, selected: false }\n        ]\n      }\n    });\n  });","file":"helpers/getFiltersFromProductsAttributes.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"maps pagination params to format expected by CT gql API","suites":["[commercetools-composables] mapPaginationParams"],"updatePoint":{"line":4,"column":61},"line":4,"code":"  it('maps pagination params to format expected by CT gql API', () => {\n    const input = { perPage: 20, page: 3 };\n    expect(mapPaginationParams(input)).toEqual({ limit: 20, offset: 40 });\n  });","file":"helpers/mapPaginationParams.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns nothing if params are missing","suites":["[commercetools-composables] mapPaginationParams"],"updatePoint":{"line":9,"column":43},"line":9,"code":"  it('returns nothing if params are missing', () => {\n    const input = { perPage: 2 };\n    expect(mapPaginationParams(input)).toBeUndefined();\n  });","file":"helpers/mapPaginationParams.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"provides cart","suites":["[commercetools-composables] useBilling"],"updatePoint":{"line":23,"column":19},"line":23,"code":"  it('provides cart', async () => {\n    const { provide } = useBilling() as any;\n    const mockedCart = '12312312';\n    (useCart as jest.Mock).mockImplementation(() => mockedCart);\n\n    const toProvide = provide();\n\n    expect(toProvide).toMatchObject({ cart: mockedCart });\n    expect(useCart).toHaveBeenCalled();\n  });","file":"useBilling/useBilling.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"loads billing address via request if cart is not present","suites":["[commercetools-composables] useBilling"],"updatePoint":{"line":34,"column":62},"line":34,"code":"  it('loads billing address via request if cart is not present', async () => {\n    const { load } = useBilling() as any;\n    const loadedBillingAddress = 'loadedBillingAddress';\n    const context = {\n      cart: {\n        cart: {\n          value: {\n            billingAddress: null\n          }\n        },\n        load: jest.fn(() => {\n          context.cart.cart.value.billingAddress = loadedBillingAddress;\n        })\n      }\n    };\n\n    const response = await load(context, {});\n\n    expect(response).toBe(loadedBillingAddress);\n    expect(context.cart.load).toHaveBeenCalled();\n  });","file":"useBilling/useBilling.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"loads billing address from cart if cart is present","suites":["[commercetools-composables] useBilling"],"updatePoint":{"line":56,"column":56},"line":56,"code":"  it('loads billing address from cart if cart is present', async () => {\n    const { load } = useBilling() as any;\n    const loadedBillingAddress = 'loadedBillingAddress';\n    const context = {\n      cart: {\n        cart: {\n          value: {\n            billingAddress: loadedBillingAddress\n          }\n        },\n        load: jest.fn()\n      }\n    };\n\n    const response = await load(context, {});\n\n    expect(response).toBe(loadedBillingAddress);\n    expect(context.cart.load).not.toHaveBeenCalled();\n  });","file":"useBilling/useBilling.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"saves billing details, updates cart and returns billing details","suites":["[commercetools-composables] useBilling"],"updatePoint":{"line":76,"column":69},"line":76,"code":"  it('saves billing details, updates cart and returns billing details', async () => {\n    const { save } = useBilling() as any;\n    const newBillingAddress = 'newBillingAddress';\n    const context = {\n      cart: {\n        cart: {\n          value: {\n            billingAddress: null\n          }\n        },\n        setCart: jest.fn(address => {\n          context.cart.cart.value.billingAddress = address;\n        })\n      },\n      $ct: {\n        api: {\n          updateCart: jest.fn(() => ({\n            data: {\n              cart: newBillingAddress\n            }\n          }))\n        }\n      }\n    };\n\n    const response = await save(context, { billingAddress: newBillingAddress });\n\n    expect(response).toBe(newBillingAddress);\n    expect(context.cart.setCart).toHaveBeenCalledWith(newBillingAddress);\n  });","file":"useBilling/useBilling.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"loads current cart","suites":["[commercetools-composables] useCart/currentCart"],"updatePoint":{"line":20,"column":24},"line":20,"code":"  it('loads current cart', async () => {\n\n    const response = await loadCurrentCart(context);\n\n    expect(response).toEqual(cart);\n    expect(context.$ct.api.getMe).toBeCalled();\n    expect(context.$ct.api.createCart).not.toBeCalled();\n  });","file":"useCart/currentCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"creates cart when could not be loaded","suites":["[commercetools-composables] useCart/currentCart"],"updatePoint":{"line":29,"column":43},"line":29,"code":"  it('creates cart when could not be loaded', async () => {\n    (context.$ct.api.getMe as any).mockReturnValue({ data: { me: { activeCart: null } } });\n\n    const response = await loadCurrentCart(context);\n\n    expect(response).toEqual(cart);\n    expect(context.$ct.api.createCart).toBeCalled();\n  });","file":"useCart/currentCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"creates new cart when there is no id of the current one","suites":["[commercetools-composables] useCart/currentCart"],"updatePoint":{"line":38,"column":61},"line":38,"code":"  it('creates new cart when there is no id of the current one', async () => {\n    const response = await loadCurrentCart(context);\n\n    expect(context.$ct.api.createCart).toBeCalled();\n    expect(response).toEqual(cart);\n  });","file":"useCart/currentCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"adds to cart","suites":["[commercetools-composables] useCart"],"updatePoint":{"line":34,"column":18},"line":34,"code":"  it('adds to cart', async () => {\n    const { addItem } = useCart() as any;\n    const currentCart = { id: 1, version: 1 };\n    const response = await addItem(context, { currentCart, product: 'product1', quantity: 3 });\n\n    expect(response).toEqual(MOCKED_CART);\n    expect(context.$ct.api.addToCart).toBeCalledWith(currentCart, {\n      product: 'product1',\n      quantity: 3\n    }, customQuery);\n  });","file":"useCart/useCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"creates a new cart and add an item","suites":["[commercetools-composables] useCart"],"updatePoint":{"line":46,"column":40},"line":46,"code":"  it('creates a new cart and add an item', async () => {\n    const { addItem } = useCart() as any;\n    (loadCurrentCart as any).mockReturnValue(MOCKED_CART);\n    const response = await addItem(context, { currentCart: null, product: 'product1', quantity: 3 });\n    expect(loadCurrentCart).toBeCalled();\n\n    expect(response).toEqual(MOCKED_CART);\n    expect(context.$ct.api.addToCart).toBeCalledWith({ id: undefined, version: undefined }, {\n      product: 'product1',\n      quantity: 3\n    }, customQuery);\n  });","file":"useCart/useCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"removes from cart","suites":["[commercetools-composables] useCart"],"updatePoint":{"line":59,"column":23},"line":59,"code":"  it('removes from cart', async () => {\n    const { removeItem } = useCart() as any;\n    const currentCart = { id: 1, version: 1 };\n    const response = await removeItem(context, { currentCart, product: 'product1' });\n\n    expect(response).toEqual(MOCKED_CART);\n    expect(context.$ct.api.removeFromCart).toBeCalledWith(currentCart, 'product1', customQuery);\n  });","file":"useCart/useCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"updates quantity","suites":["[commercetools-composables] useCart"],"updatePoint":{"line":68,"column":22},"line":68,"code":"  it('updates quantity', async () => {\n    const { updateItemQty } = useCart() as any;\n    const currentCart = { id: 1, version: 1 };\n    const response = await updateItemQty(context, {\n      currentCart,\n      product: { name: 'product1' },\n      quantity: 5\n    });\n\n    expect(response).toEqual(MOCKED_CART);\n    expect(context.$ct.api.updateCartQuantity).toBeCalledWith(currentCart, { name: 'product1', quantity: 5 }, customQuery);\n  });","file":"useCart/useCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"clears cart","suites":["[commercetools-composables] useCart"],"updatePoint":{"line":81,"column":17},"line":81,"code":"  it('clears cart', async () => {\n    const { clear } = useCart() as any;\n    const currentCart = { id: 1, version: 1 };\n    const response = await clear(context, { currentCart });\n\n    expect(response).toEqual(MOCKED_CART);\n  });","file":"useCart/useCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"applies coupon","suites":["[commercetools-composables] useCart"],"updatePoint":{"line":89,"column":20},"line":89,"code":"  it('applies coupon', async () => {\n    const { applyCoupon } = useCart() as any;\n    const currentCart = { id: 1, version: 1 };\n    const response = await applyCoupon(context, { currentCart, coupon: 'X123' });\n\n    expect(response).toEqual({ updatedCart: MOCKED_CART });\n  });","file":"useCart/useCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"removes coupon","suites":["[commercetools-composables] useCart"],"updatePoint":{"line":97,"column":20},"line":97,"code":"  it('removes coupon', async () => {\n    const { removeCoupon } = useCart() as any;\n    const response = await removeCoupon(context, {\n      currentCart: {\n        discountCodes: [\n          {\n            discountCode: {\n              id: 'asdasdas',\n              name: 'asdasdas',\n              code: 'XA12345'\n            }\n          }\n        ]\n      },\n      couponCode: 'XA12345'\n    });\n\n    expect(response).toEqual({ updatedCart: 'current cart' });\n  });","file":"useCart/useCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns false if product does not exists in cart","suites":["[commercetools-composables] useCart","isInCart"],"updatePoint":{"line":120,"column":56},"line":120,"code":"    it('returns false if product does not exists in cart', () => {\n      const currentCart: any = {\n        lineItems: []\n      };\n\n      const product: any = {\n        _id: 123\n      };\n\n      expect(isInCart(context, { currentCart, product })).toEqual(false);\n    });","file":"useCart/useCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns true if product exists in cart","suites":["[commercetools-composables] useCart","isInCart"],"updatePoint":{"line":132,"column":46},"line":132,"code":"    it('returns true if product exists in cart', () => {\n      const currentCart: any = {\n        lineItems: [{\n          productId: 123\n        }]\n      };\n\n      const product: any = {\n        _id: 123\n      };\n\n      expect(isInCart(context, { currentCart, product })).toEqual(true);\n    });","file":"useCart/useCart.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"loads categories","suites":["[commercetools-composables] useCategory"],"updatePoint":{"line":32,"column":22},"line":32,"code":"  it('loads categories', async () => {\n    const { categorySearch } = useCategory('test-category') as any;\n\n    const response = await categorySearch(context, { catId: 'xxx1' });\n\n    expect(response).toEqual(categoriesResult);\n    expect(context.$ct.api.getCategory).toBeCalledWith({ catId: 'xxx1' }, undefined);\n  });","file":"useCategory/useCategory.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"triggers faceting search","suites":["[commercetools-composables] useFacet"],"updatePoint":{"line":50,"column":30},"line":50,"code":"  it('triggers faceting search', async () => {\n    const { search } = useFacet() as any;\n\n    await search(context, {\n      input: {\n        itemsPerPage: [10, 20, 50],\n        categorySlug: 'cat-1',\n        filters: {\n          color: ['blue', 'green'],\n          size: ['s', 'm']\n        }\n      }\n    } as any);\n\n    expect(context.$ct.api.categorySearch).toBeCalled();\n    expect(context.$ct.api.getProduct).toBeCalled();\n    expect(enhanceProduct).toBeCalled();\n    expect(getFiltersFromProductsAttributes).toBeCalled();\n  });","file":"useFacet/useFacet.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"generates reset password token","suites":["[commercetools-composables] useForgotPassword"],"updatePoint":{"line":37,"column":36},"line":37,"code":"  it('generates reset password token', async () => {\n    const { resetPassword } = useForgotPassword() as any;\n\n    const response = await resetPassword(context, { email: 'xxx1' });\n\n    expect(response).toEqual({ resetPasswordResult: { data: { customerCreatePasswordResetToken: { value: mockedStringValue}}}});\n    expect(context.$ct.api.customerCreatePasswordResetToken).toBeCalledWith('xxx1', undefined);\n  });","file":"useForgotPassword/useForgotPassword.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"sets new password after reset","suites":["[commercetools-composables] useForgotPassword"],"updatePoint":{"line":45,"column":35},"line":45,"code":"  it('sets new password after reset', async () => {\n    const { setNewPassword } = useForgotPassword() as any;\n\n    const response = await setNewPassword(context, { tokenValue: mockedStringValue, newPassword: mockedStringValue });\n\n    expect(response).toEqual({ setNewPasswordResult: true });\n    expect(context.$ct.api.customerResetPassword).toBeCalledWith(mockedStringValue, mockedStringValue, undefined);\n  });","file":"useForgotPassword/useForgotPassword.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"loads product variants","suites":["[commercetools-composables] useProduct"],"updatePoint":{"line":48,"column":28},"line":48,"code":"  it('loads product variants', async () => {\n    const { productsSearch } = useProduct('test-product') as any;\n\n    const response = await productsSearch(context, { id: 'product-id' });\n\n    expect(response).toEqual([product('prod1', 'prod-1', 'xxx1'), product('prod2', 'prod-2', 'xxx2')]);\n    expect(context.$ct.api.getProduct).toBeCalledWith({ id: 'product-id' }, undefined);\n    expect(enhanceProducts).toBeCalledWith(productResponse, context);\n  });","file":"useProduct/useProduct.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"provides cart","suites":["[commercetools-composables] useShipping"],"updatePoint":{"line":24,"column":19},"line":24,"code":"  it('provides cart', async () => {\n    const { provide } = useShipping() as any;\n    const mockedCart = '12312312';\n    (useCart as jest.Mock).mockImplementation(() => mockedCart);\n\n    const toProvide = provide();\n\n    expect(toProvide).toMatchObject({ cart: mockedCart });\n    expect(useCart).toHaveBeenCalled();\n  });","file":"useShipping/useShipping.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"loads shipping address via request if cart is not present","suites":["[commercetools-composables] useShipping"],"updatePoint":{"line":35,"column":63},"line":35,"code":"  it('loads shipping address via request if cart is not present', async () => {\n    const { load } = useShipping() as any;\n    const loadedShippingAddress = 'loadedShippingAddress';\n    const context = {\n      cart: {\n        cart: {\n          value: {\n            shippingAddress: null\n          }\n        },\n        load: jest.fn(() => {\n          context.cart.cart.value.shippingAddress = loadedShippingAddress;\n        })\n      }\n    };\n\n    const response = await load(context, {});\n\n    expect(response).toBe(loadedShippingAddress);\n    expect(context.cart.load).toHaveBeenCalled();\n  });","file":"useShipping/useShipping.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"loads shipping address from cart if cart is present","suites":["[commercetools-composables] useShipping"],"updatePoint":{"line":57,"column":57},"line":57,"code":"  it('loads shipping address from cart if cart is present', async () => {\n    const { load } = useShipping() as any;\n    const loadedShippingAddress = 'loadedShippingAddress';\n    const context = {\n      cart: {\n        cart: {\n          value: {\n            shippingAddress: loadedShippingAddress\n          }\n        },\n        load: jest.fn()\n      }\n    };\n\n    const response = await load(context, {});\n\n    expect(response).toBe(loadedShippingAddress);\n    expect(context.cart.load).not.toHaveBeenCalled();\n  });","file":"useShipping/useShipping.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"saves shipping details, updates cart and returns shipping details","suites":["[commercetools-composables] useShipping"],"updatePoint":{"line":77,"column":71},"line":77,"code":"  it('saves shipping details, updates cart and returns shipping details', async () => {\n    const { save } = useShipping() as any;\n    const newShippingAddress = 'newShippingAddress';\n    const context = {\n      cart: {\n        cart: {\n          value: {\n            shippingAddress: null\n          }\n        },\n        setCart: jest.fn(address => {\n          context.cart.cart.value.shippingAddress = address;\n        })\n      },\n      $ct: {\n        api: {\n          updateCart: jest.fn(() => ({\n            data: {\n              cart: newShippingAddress\n            }\n          }))\n        }\n      }\n    };\n\n    const response = await save(context, { shippingDetails: newShippingAddress });\n\n    expect(response).toBe(newShippingAddress);\n    expect(context.cart.setCart).toHaveBeenCalledWith(newShippingAddress);\n  });","file":"useShipping/useShipping.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"loads stores data","suites":["[commercetools-composables] useStore factoryParams"],"updatePoint":{"line":5,"column":23},"line":5,"code":"  it('loads stores data', async () => {\n\n    const storesData = {\n      stores: 'stores data'\n    };\n\n    const api = {\n      getStores: jest.fn().mockResolvedValue(storesData)\n    };\n\n    const config = {\n      store: 'default store'\n    };\n\n    const $ct = {\n      api,\n      config\n    };\n\n    const context = {\n      $ct\n    };\n\n    const expected = {\n      ...storesData,\n      _selectedStore: config.store\n    };\n\n    expect(useStoreFactoryParams.load((context as unknown) as Context, {} as any)).resolves.toStrictEqual(expected);\n    expect(api.getStores).toHaveBeenCalledWith({ customQuery: undefined });\n  });","file":"useStore/factoryParams.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"changes selected store and reloads page","suites":["[commercetools-composables] useStore factoryParams"],"updatePoint":{"line":37,"column":45},"line":37,"code":"  it('changes selected store and reloads page', async () => {\n    const STORES_ID = 'stores id';\n\n    Object.defineProperty(window, 'location', {\n      writable: true,\n      value: { reload: jest.fn() }\n    });\n\n    const storeService = {\n      changeCurrentStore: jest.fn()\n    };\n\n    const config = {\n      storeService\n    };\n\n    const $ct = {\n      config\n    };\n\n    const context = {\n      $ct\n    };\n\n    const params = {\n      store: { key: STORES_ID }\n    };\n\n    expect(await useStoreFactoryParams.change((context as unknown) as Context, (params as unknown) as UseStoreFactoryChangeParamArguments)).toBe(null);\n    expect(storeService.changeCurrentStore).toHaveBeenCalledWith(STORES_ID);\n    expect(window.location.reload).toHaveBeenCalled();\n  });","file":"useStore/factoryParams.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns logged user data","suites":["[commercetools-composables] useUser/authenticate"],"updatePoint":{"line":20,"column":30},"line":20,"code":"  it('returns logged user data', async() => {\n    const callback = async userData => ({ data: { user: { customer: userData }}});\n\n    expect(await authenticate(customer, callback)).toEqual({ customer });\n  });","file":"useUser/authenticate.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"with first message from graphQL errors array","suites":["[commercetools-composables] useUser/authenticate","error is called by a console error"],"updatePoint":{"line":27,"column":52},"line":27,"code":"    it('with first message from graphQL errors array', async () => {\n      consoleErrorSpy.mockImplementationOnce(() => {});\n      const callback = jest.fn().mockRejectedValueOnce(new GraphQLMockError('GraphQL message'));\n      await expect(authenticate(customer, callback)).rejects.toThrow('GraphQL message');\n    });","file":"useUser/authenticate.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"with message from exception","suites":["[commercetools-composables] useUser/authenticate","error is called by a console error"],"updatePoint":{"line":33,"column":35},"line":33,"code":"    it('with message from exception', async () => {\n      consoleErrorSpy.mockImplementationOnce(() => {});\n      const callback = jest.fn().mockRejectedValue(new Error('There is an error'));\n      await expect(authenticate(customer, callback)).rejects.toThrow('There is an error');\n    });","file":"useUser/authenticate.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"load return customer data","suites":["[commercetools-composables] factoryParams"],"updatePoint":{"line":45,"column":31},"line":45,"code":"  it('load return customer data', async () => {\n    (context.$ct.api.getMe as jest.Mock).mockReturnValueOnce({ data: { me: { customer } }});\n    expect(await useUserFactoryParams.load(context as any, {} as any)).toEqual(customer);\n    expect(context.$ct.api.getMe).toHaveBeenNthCalledWith(1, {customer: true}, undefined);\n\n    (context.$ct.api.getMe as jest.Mock).mockReturnValueOnce({ data: { me: { customer: null } }});\n    expect(await useUserFactoryParams.load(context, {customQuery: {key: 'customQuery'}})).toEqual(null);\n    expect(context.$ct.api.getMe).toHaveBeenNthCalledWith(2, {customer: true}, {key: 'customQuery'});\n  });","file":"useUser/factoryParams.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"logOut method calls API log out method","suites":["[commercetools-composables] factoryParams"],"updatePoint":{"line":55,"column":44},"line":55,"code":"  it('logOut method calls API log out method', async () => {\n    (context.$ct.api.createCart as jest.Mock).mockReturnValueOnce({ data: { cart: {} }});\n    (useCart as jest.Mock).mockReturnValueOnce({refreshCart: refreshCartMock});\n    await useUserFactoryParams.logOut(context as any, {currentUser: {key: 'user'} as any});\n    expect(context.$ct.api.customerSignOut).toHaveBeenCalled();\n  });","file":"useUser/factoryParams.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"updateUser return updated user","suites":["[commercetools-composables] factoryParams"],"updatePoint":{"line":62,"column":36},"line":62,"code":"  it('updateUser return updated user', async () => {\n    const user = {currentUser: 'Jon', updatedUserData: 'Bob'} as any;\n    (context.$ct.api.customerUpdateMe as jest.Mock).mockReturnValueOnce({ user });\n    expect(await useUserFactoryParams.updateUser(context as any, user)).toEqual(user);\n  });","file":"useUser/factoryParams.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"updates the user and loads when it is not available","suites":["[commercetools-composables] factoryParams"],"updatePoint":{"line":68,"column":57},"line":68,"code":"  it('updates the user and loads when it is not available', async () => {\n    const user = {currentUser: null, updatedUserData: 'Bob'} as any;\n    (context.$ct.api.getMe as jest.Mock).mockReturnValueOnce({ data: { me: user } });\n\n    (context.$ct.api.customerUpdateMe as jest.Mock).mockReturnValueOnce({ user });\n    expect(await useUserFactoryParams.updateUser(context as any, user)).toEqual(user);\n  });","file":"useUser/factoryParams.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"register method return a new customer","suites":["[commercetools-composables] factoryParams"],"updatePoint":{"line":76,"column":43},"line":76,"code":"  it('register method return a new customer', async () => {\n    (authenticate as jest.Mock).mockReturnValueOnce({ customer });\n    expect(await useUserFactoryParams.register(context as any, customer)).toEqual(customer);\n  });","file":"useUser/factoryParams.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"logIn method return a logged in customer","suites":["[commercetools-composables] factoryParams"],"updatePoint":{"line":81,"column":46},"line":81,"code":"  it('logIn method return a logged in customer', async () => {\n    (useCart as jest.Mock).mockReturnValueOnce({refreshCart: refreshCartMock});\n    (authenticate as jest.Mock).mockReturnValueOnce({ customer });\n    expect(await useUserFactoryParams.logIn(context as any, customer)).toEqual(customer);\n  });","file":"useUser/factoryParams.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"register method return a new customer","suites":["[commercetools-composables] factoryParams","changePassword"],"updatePoint":{"line":88,"column":45},"line":88,"code":"    it('register method return a new customer', async () => {\n      (authenticate as jest.Mock).mockReturnValueOnce({ customer });\n      expect(await useUserFactoryParams.register(context as any, customer)).toEqual(customer);\n    });","file":"useUser/factoryParams.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"succeed returning logged user","suites":["[commercetools-composables] factoryParams","changePassword"],"updatePoint":{"line":93,"column":37},"line":93,"code":"    it('succeed returning logged user', async () => {\n      const cart = {};\n      const changePasswordParams: any = { currentUser: customer, currentPassword: '', newPassword: '' };\n\n      (context.$ct.api.createCart as jest.Mock).mockReturnValueOnce({ data: { cart }});\n      (useCart as jest.Mock).mockReturnValueOnce({ refreshCart: refreshCartMock });\n      (context.$ct.api.customerChangeMyPassword as jest.Mock).mockReturnValueOnce({ data: { user: customer }});\n      (authenticate as jest.Mock).mockReturnValueOnce({ customer, cart });\n\n      expect(await useUserFactoryParams.changePassword(context as any, changePasswordParams)).toEqual(customer);\n      expect(context.$ct.api.customerSignOut).toHaveBeenCalled();\n    });","file":"useUser/factoryParams.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"returns useUserFactory functions","suites":["[commercetools-composables] useUser"],"updatePoint":{"line":14,"column":38},"line":14,"code":"  it('returns useUserFactory functions', () => {\n    expect(useUserFactory).toHaveBeenCalledWith(useUserFactoryParams);\n    expect(useUser()).toEqual({user: 'api'});\n  });","file":"useUser/index.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"loads user orders with criteria","suites":["[commercetools-composables] useUserOrder"],"updatePoint":{"line":40,"column":37},"line":40,"code":"  it('loads user orders with criteria', async () => {\n    const { search } = useUserOrder() as any;\n\n    const response = await search(context, { param: 'param1' });\n\n    expect(response).toEqual({ results: mockedResults, total: mockedTotal });\n    expect(context.$ct.api.getOrders).toBeCalledWith({ param: 'param1' }, undefined);\n  });","file":"useUserOrders/useUserOrder.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"loads user all orders","suites":["[commercetools-composables] useUserOrder"],"updatePoint":{"line":49,"column":27},"line":49,"code":"  it('loads user all orders', async () => {\n    const { search } = useUserOrder() as any;\n\n    const response = await search(context);\n\n    expect(response).toEqual({ results: mockedResults, total: mockedTotal });\n    expect(context.$ct.api.getOrders).toBeCalled();\n  });","file":"useUserOrders/useUserOrder.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"loads user orders with empty response","suites":["[commercetools-composables] useUserOrder"],"updatePoint":{"line":58,"column":43},"line":58,"code":"  it('loads user orders with empty response', async () => {\n    (context.$ct.api.getOrders as jest.Mock).mockReturnValue({ data: null });\n\n    const { search } = useUserOrder() as any;\n\n    const response = await search(context, { param: 'param1' });\n\n    expect(response).toEqual(mockedEmptyResponse);\n    expect(context.$ct.api.getOrders).toBeCalledWith({ param: 'param1' }, undefined);\n  });","file":"useUserOrders/useUserOrder.spec.ts","skipped":false,"dir":"packages/commercetools/composables/__tests__"},{"name":"Should successfully add product to cart - Category grid view","suites":[],"updatePoint":{"line":10,"column":66},"line":10,"code":"  it('Should successfully add product to cart - Category grid view', function () {\n    const data = this.fixtures.data[this.test.title];\n    const category = page.category(data.product.category);\n    category.visit();\n    category.addToCart(data.product.name);\n    category.header.openCart();\n    page.components.cart.product(data.product.name).should('be.visible');\n  });","file":"e2e/integration/e2e-add-to-cart.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully add product to cart - Category list view","suites":[],"updatePoint":{"line":18,"column":66},"line":18,"code":"  it('Should successfully add product to cart - Category list view', function () {\n    const data = this.fixtures.data[this.test.title];\n    const category = page.category(data.product.category);\n    category.visit();\n    category.changeView('list');\n    category.addToCart(data.product.name);\n    category.header.openCart();\n    page.components.cart.product(data.product.name).should('be.visible');\n  });","file":"e2e/integration/e2e-add-to-cart.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully add product to cart - Product details page","suites":[],"updatePoint":{"line":27,"column":68},"line":27,"code":"  it('Should successfully add product to cart - Product details page', function () {\n    const data = this.fixtures.data[this.test.title];\n    page.product(data.product.id, data.product.slug).visit();\n    page.product().addToCartButton.click();\n    page.product().header.openCart();\n    page.components.cart.product(data.product.name).should('be.visible');\n  });","file":"e2e/integration/e2e-add-to-cart.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should display breadcrumbs list properly - ","suites":[],"updatePoint":{"line":13,"column":62},"line":13,"code":"    it(`Should display breadcrumbs list properly - ${testCase}`, function () {\n      const data = this.fixtures.data[this.test.title];\n      const category = page.category(data.category, data.subcategory);\n      category.visit();\n      page.components.breadcrumbs.container.should('not.be.empty');\n      page.components.breadcrumbs.listItems.should('have.length', data.expectedLength);\n      page.components.breadcrumbs.listItems.each((item, index) => {\n        expect(item.text()).to.contain(breadcrumbsNames[index]);\n      });\n    });","file":"e2e/integration/e2e-breadcrumbs.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should merge guest cart with registered customer cart","suites":[],"updatePoint":{"line":12,"column":59},"line":12,"code":"  it('Should merge guest cart with registered customer cart', function () {\n    const data = this.fixtures.data[this.test.title];\n    data.customer.email = generator.email;\n    requests.getMe();\n    requests.createCart().then(response => {\n      data.products.forEach(product => {\n        requests.addToCart(response.body.data.cart.id, product, product.quantity);\n      });\n    });\n    requests.customerSignMeUp(data.customer);\n    page.home.visit();\n    page.home.header.openCart();\n    page.components.cart.productName.each((name, index) => {\n      cy.wrap(name).should('contain', data.expectedCart[index].name);\n    });\n    page.components.cart.quantity().each((input, index) => {\n      cy.wrap(input).should('have.value', data.expectedCart[index].quantity);\n    });\n    page.components.cart.product().each((product, index) => {\n      page.components.cart.productSizeProperty(product).should('contain', data.expectedCart[index].size);\n      page.components.cart.productColorProperty(product).should('contain', data.expectedCart[index].color);\n    });\n  });","file":"e2e/integration/e2e-carts-merging.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should merge guest cart with registered customer cart - products already in cart","suites":[],"updatePoint":{"line":35,"column":86},"line":35,"code":"  it('Should merge guest cart with registered customer cart - products already in cart', function () {\n    const data = this.fixtures.data[this.test.title];\n    data.customer.email = generator.email;\n    requests.customerSignMeUp(data.customer);\n    requests.createCart().then(response => {\n      data.products.customer.forEach(product => {\n        requests.addToCart(response.body.data.cart.id, product, product.quantity);\n      });\n    }).then(() => {\n      cy.clearCookies();\n    });\n    requests.createCart().then(response => {\n      data.products.guest.forEach(product => {\n        requests.addToCart(response.body.data.cart.id, product, product.quantity);\n      });\n    });\n    requests.customerSignMeIn(data.customer);\n    page.home.visit();\n    page.home.header.openCart();\n    page.components.cart.totalItems.should($ti => {\n      const totalItems = data.expectedCart.reduce((total, product) => {\n        return total + product.quantity;\n      }, 0);\n      expect($ti.text().trim()).to.be.equal(totalItems.toString());\n    });\n    page.components.cart.productName.each((name, index) => {\n      cy.wrap(name).should('contain', data.expectedCart[index].name);\n    });\n    page.components.cart.quantity().each((input, index) => {\n      cy.wrap(input).should('have.value', data.expectedCart[index].quantity);\n    });\n    page.components.cart.product().each((product, index) => {\n      page.components.cart.productSizeProperty(product).should('contain', data.expectedCart[index].size);\n      page.components.cart.productColorProperty(product).should('contain', data.expectedCart[index].color);\n    });\n  });","file":"e2e/integration/e2e-carts-merging.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully show category accordion list","suites":[],"updatePoint":{"line":10,"column":54},"line":10,"code":"  it('Should successfully show category accordion list', function () {\n    const data = this.fixtures.data[this.test.title];\n    const category = page.category(data.header.category);\n    category.visit();\n    page.components.categoryAccordion.container.should('be.visible');\n  });","file":"e2e/integration/e2e-category-accordion.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully display category items","suites":[],"updatePoint":{"line":16,"column":48},"line":16,"code":"  it('Should successfully display category items', function () {\n    const data = this.fixtures.data[this.test.title];\n    const category = page.category(data.header.category);\n    category.visit();\n    data.categories.forEach(category => {\n      page.components.categoryAccordion.category(category.name).should('be.visible');\n    });\n  });","file":"e2e/integration/e2e-category-accordion.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully open subcategories for items","suites":[],"updatePoint":{"line":24,"column":54},"line":24,"code":"  it('Should successfully open subcategories for items', function () {\n    const data = this.fixtures.data[this.test.title];\n    const category = page.category(data.header.category);\n    category.visit();\n    page.components.categoryAccordion.categories.first().click();\n    data.categories.forEach(category => {\n      page.components.categoryAccordion.category(category.name).click().then(() => {\n        category.subCategories.forEach(subCategory => {\n          page.components.categoryAccordion.subCategoryName(subCategory).should('be.visible');\n        });\n      });\n    });\n  });","file":"e2e/integration/e2e-category-accordion.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully redirect to home page - shipping and billing address are not set","suites":[],"updatePoint":{"line":11,"column":90},"line":11,"code":"  it('Should successfully redirect to home page - shipping and billing address are not set', function () {\n    page.checkout.payment.visit();\n    cy.url().should('equal', `${Cypress.config('baseUrl')}${page.home.path}`);\n  });","file":"e2e/integration/e2e-checkout-access-guard.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully visit payment page - shipping and billing address are set","suites":[],"updatePoint":{"line":15,"column":83},"line":15,"code":"  it('Should successfully visit payment page - shipping and billing address are set', function () {\n    const data = this.fixtures.data[this.test.title];\n    requests.createCart().then(response => {\n      requests.addToCart(response.body.data.cart.id, data.product);\n      requests.updateCart(response.body.data.cart.id, {\n        addresses: {\n          shipping: data.customer.address.shipping,\n          billing: data.customer.address.billing\n        }\n      });\n    });\n    page.checkout.payment.visit();\n    cy.url().should('contain', page.checkout.payment.path);\n  });","file":"e2e/integration/e2e-checkout-access-guard.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully visit thank you page - after successful order placement","suites":[],"updatePoint":{"line":29,"column":81},"line":29,"code":"  it('Should successfully visit thank you page - after successful order placement', function () {\n    const data = this.fixtures.data[this.test.title];\n    requests.createCart().then(response => {\n      requests.addToCart(response.body.data.cart.id, data.product);\n      requests.updateCart(response.body.data.cart.id, {\n        addresses: {\n          shipping: data.customer.address.shipping,\n          billing: data.customer.address.billing\n        }\n      });\n    });\n    page.checkout.payment.visit();\n    page.checkout.payment.paymentMethods.first().click();\n    page.checkout.payment.terms.click();\n    page.checkout.payment.makeAnOrderButton.click();\n    cy.url().should('contain', page.checkout.thankyou.path);\n  });","file":"e2e/integration/e2e-checkout-access-guard.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully save address - guest customer","suites":[],"updatePoint":{"line":12,"column":55},"line":12,"code":"  it('Should successfully save address - guest customer', function () {\n    const data = this.fixtures.data[this.test.title];\n    requests.createCart().then(response => {\n      requests.addToCart(response.body.data.cart.id, data.product);\n      requests.updateCart(response.body.data.cart.id, {\n        addresses: {\n          shipping: data.customer.address.shipping\n        }\n      });\n    });\n    page.checkout.shipping.visit();\n    page.checkout.shipping.selectShippingButton.click();\n    page.checkout.shipping.shippingMethods.contains(data.shippingMethod).click();\n    page.checkout.shipping.continueToBillingButton.click();\n    page.checkout.billing.heading.should('be.visible');\n    page.checkout.billing.fillForm(data.customer);\n    page.checkout.billing.continueToPaymentButton.click();\n    page.checkout.payment.heading.should('be.visible');\n  });","file":"e2e/integration/e2e-checkout-billing-validation.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully save address - registered customer","suites":[],"updatePoint":{"line":31,"column":60},"line":31,"code":"  it('Should successfully save address - registered customer', function () {\n    const data = this.fixtures.data[this.test.title];\n    data.customer.email = generator.email;\n    requests.customerSignMeUp(data.customer);\n    requests.createCart().then(response => {\n      requests.addToCart(response.body.data.cart.id, data.product);\n      requests.updateCart(response.body.data.cart.id, {\n        addresses: {\n          shipping: data.customer.address.shipping\n        }\n      });\n    });\n    page.checkout.shipping.visit();\n    page.checkout.shipping.selectShippingButton.click();\n    page.checkout.shipping.shippingMethods.contains(data.shippingMethod).click();\n    page.checkout.shipping.continueToBillingButton.click();\n    page.checkout.billing.heading.should('be.visible');\n    page.checkout.billing.addNewAddressButton.click();\n    page.checkout.billing.fillForm(data.customer);\n    page.checkout.billing.continueToPaymentButton.click();\n    page.checkout.payment.heading.should('be.visible');\n  });","file":"e2e/integration/e2e-checkout-billing-validation.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should display an error -  empty","suites":[],"updatePoint":{"line":55,"column":56},"line":55,"code":"    it(`Should display an error - ${requiredField} empty`, function () {\n      const data = this.fixtures.data[this.test.title];\n      requests.createCart().then(response => {\n        requests.addToCart(response.body.data.cart.id, data.product);\n        requests.updateCart(response.body.data.cart.id, {\n          addresses: {\n            shipping: data.customer.address.shipping\n          }\n        });\n      });\n      page.checkout.shipping.visit();\n      page.checkout.shipping.selectShippingButton.click();\n      page.checkout.shipping.shippingMethods.contains(data.shippingMethod).click();\n      page.checkout.shipping.continueToBillingButton.click();\n      page.checkout.billing.heading.should('be.visible');\n      page.checkout.billing.fillForm(data.customer);\n      page.checkout.billing.continueToPaymentButton.click();\n\n      page.checkout.billing[Cypress._.camelCase(requiredField)].parent().within(() => {\n        cy.get('input').then($input => {\n          expect($input[0].validationMessage).to.be.eq(data.errorMessage);\n        });\n      });\n    });","file":"e2e/integration/e2e-checkout-billing-validation.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should display an error -  empty","suites":[],"updatePoint":{"line":82,"column":57},"line":82,"code":"    it(`Should display an error - ${requiredSelect} empty`, function () {\n      const data = this.fixtures.data[this.test.title];\n      requests.createCart().then(response => {\n        requests.addToCart(response.body.data.cart.id, data.product);\n        requests.updateCart(response.body.data.cart.id, {\n          addresses: {\n            shipping: data.customer.address.shipping\n          }\n        });\n      });\n      page.checkout.shipping.visit();\n      page.checkout.shipping.selectShippingButton.click();\n      page.checkout.shipping.shippingMethods.contains(data.shippingMethod).click();\n      page.checkout.shipping.continueToBillingButton.click();\n      page.checkout.billing.heading.should('be.visible');\n      page.checkout.billing.fillForm(data.customer);\n      page.checkout.billing.continueToPaymentButton.click();\n\n      page.checkout.billing[Cypress._.camelCase(requiredSelect)].parent().within(() => {\n        cy.contains(data.errorMessage).should('be.visible');\n      });\n    });","file":"e2e/integration/e2e-checkout-billing-validation.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should copy shipping address","suites":[],"updatePoint":{"line":105,"column":34},"line":105,"code":"  it('Should copy shipping address', function () {\n    const data = this.fixtures.data[this.test.title];\n    requests.createCart().then(response => {\n      requests.addToCart(response.body.data.cart.id, data.product);\n      requests.updateCart(response.body.data.cart.id, {\n        addresses: {\n          shipping: data.customer.address.shipping\n        }\n      });\n    });\n    page.checkout.shipping.visit();\n    page.checkout.shipping.selectShippingButton.click();\n    page.checkout.shipping.shippingMethods.contains(data.shippingMethod).click();\n    page.checkout.shipping.continueToBillingButton.click();\n    page.checkout.billing.heading.should('be.visible');\n    page.checkout.billing.copyAddressLabel.click();\n\n    for (const field in data.customer.address.shipping) {\n      console.log(field);\n      page.checkout.billing[field].should('have.value', data.customer.address.shipping[field]);\n    }\n  });","file":"e2e/integration/e2e-checkout-billing-validation.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should contain correct product data in Order Summary","suites":[],"updatePoint":{"line":70,"column":58},"line":70,"code":"  it('Should contain correct product data in Order Summary', function () {\n    const data = this.fixtures.data[this.test.title];\n    page.checkout.payment.visit();\n    page.checkout.payment.productRow.each((row, index) => {\n      assertDataInProductRow(row, data.expected.products[index]);\n    });\n  });","file":"e2e/integration/e2e-checkout-order-summary.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should display correct prices - bottom summary","suites":[],"updatePoint":{"line":77,"column":52},"line":77,"code":"  it('Should display correct prices - bottom summary', function () {\n    const data = this.fixtures.data[this.test.title];\n    page.checkout.payment.visit();\n    assertPrices(data);\n  });","file":"e2e/integration/e2e-checkout-order-summary.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should display correct data - cart preview summary","suites":[],"updatePoint":{"line":82,"column":56},"line":82,"code":"  it('Should display correct data - cart preview summary', function () {\n    const data = this.fixtures.data[this.test.title];\n    page.checkout.payment.visit();\n    assertCartPreview(data);\n  });","file":"e2e/integration/e2e-checkout-order-summary.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should display correct addresses","suites":[],"updatePoint":{"line":87,"column":38},"line":87,"code":"  it('Should display correct addresses', function () {\n    const data = this.fixtures.data[this.test.title];\n    page.checkout.payment.visit();\n    assertAddresses(data);\n  });","file":"e2e/integration/e2e-checkout-order-summary.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should display \"Same as shipping address\" for billing address","suites":[],"updatePoint":{"line":92,"column":67},"line":92,"code":"  it('Should display \"Same as shipping address\" for billing address', function () {\n    const data = this.fixtures.data[this.test.title];\n    page.checkout.payment.visit();\n    assertAddresses(data);\n  });","file":"e2e/integration/e2e-checkout-order-summary.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully save address - guest customer","suites":[],"updatePoint":{"line":12,"column":55},"line":12,"code":"  it('Should successfully save address - guest customer', function () {\n    const data = this.fixtures.data[this.test.title];\n    requests.createCart().then(response => {\n      requests.addToCart(response.body.data.cart.id, data.product);\n    });\n    page.checkout.shipping.visit();\n    page.checkout.shipping.fillForm(data.customer);\n    page.checkout.shipping.selectShippingButton.click();\n    page.checkout.shipping.shippingMethods.contains(data.shippingMethod).click();\n    page.checkout.shipping.continueToBillingButton.click();\n    page.checkout.billing.heading.should('be.visible');\n  });","file":"e2e/integration/e2e-checkout-shipping-validation.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully save address - registered customer","suites":[],"updatePoint":{"line":24,"column":60},"line":24,"code":"  it('Should successfully save address - registered customer', function () {\n    const data = this.fixtures.data[this.test.title];\n    data.customer.email = generator.email;\n    requests.customerSignMeUp(data.customer);\n    requests.createCart().then(response => {\n      requests.addToCart(response.body.data.cart.id, data.product);\n    });\n    page.checkout.shipping.visit();\n    page.checkout.shipping.addNewAddressButton.click();\n    page.checkout.shipping.fillForm(data.customer);\n    page.checkout.shipping.selectShippingButton.click();\n    page.checkout.shipping.shippingMethods.contains(data.shippingMethod).click();\n    page.checkout.shipping.continueToBillingButton.click();\n    page.checkout.billing.heading.should('be.visible');\n  });","file":"e2e/integration/e2e-checkout-shipping-validation.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should display an error -  empty","suites":[],"updatePoint":{"line":41,"column":56},"line":41,"code":"    it(`Should display an error - ${requiredField} empty`, function () {\n      const data = this.fixtures.data[this.test.title];\n      requests.createCart().then(response => {\n        requests.addToCart(response.body.data.cart.id, data.product);\n      });\n      page.checkout.shipping.visit();\n      page.checkout.shipping.fillForm(data.customer);\n      page.checkout.shipping.selectShippingButton.click();\n\n      page.checkout.shipping[Cypress._.camelCase(requiredField)].parent().within(() => {\n        cy.get('input').then($input => {\n          expect($input[0].validationMessage).to.be.eq(data.errorMessage);\n        });\n      });\n    });","file":"e2e/integration/e2e-checkout-shipping-validation.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should display an error -  empty","suites":[],"updatePoint":{"line":59,"column":57},"line":59,"code":"    it(`Should display an error - ${requiredSelect} empty`, function () {\n      const data = this.fixtures.data[this.test.title];\n      requests.createCart().then(response => {\n        requests.addToCart(response.body.data.cart.id, data.product);\n      });\n      page.checkout.shipping.visit();\n      page.checkout.shipping.fillForm(data.customer);\n      page.checkout.shipping.selectShippingButton.click();\n\n      page.checkout.shipping[Cypress._.camelCase(requiredSelect)].parent().within(() => {\n        cy.contains(data.errorMessage).should('be.visible');\n      });\n    });","file":"e2e/integration/e2e-checkout-shipping-validation.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should display correct order data - list view","suites":[],"updatePoint":{"line":14,"column":51},"line":14,"code":"  it('Should display correct order data - list view', function () {\n    const data = this.fixtures.data[this.test.title];\n    const customerSignMeIn = intercept.customerSignMeIn();\n    data.customer.email = generator.email;\n    requests.customerSignMeUp(data.customer);\n    requests.createCart().then(createCartResponse => {\n      requests.addToCart(createCartResponse.body.data.cart.id, data.product);\n      requests.updateCart(createCartResponse.body.data.cart.id, {\n        addresses: {\n          shipping: data.customer.address.shipping\n        }\n      });\n      requests.getShippingMethods(createCartResponse.body.data.cart.id).then(shippingMethodsResponse => {\n        const shippingMethodId = shippingMethodsResponse.body.data.shippingMethods.find(el => {\n          return el.name === data.shippingMethod;\n        }).id;\n        requests.updateCart(createCartResponse.body.data.cart.id, {\n          addresses: {\n            billing: data.customer.address.billing\n          },\n          shippingMethodId: shippingMethodId\n        });\n        requests.createMyOrderFromCart(createCartResponse.body.data.cart.id, 14).then(createMyOrderFromCartResponse => {\n          data.expected.order.id = createMyOrderFromCartResponse.body.data.order.id;\n          page.home.visit();\n          page.home.header.openLoginModal();\n          page.components.loginModal.loginToAccountButton.click();\n          page.components.loginModal.fillForm(data.customer);\n          page.components.loginModal.loginButton.click().then(() => {\n            cy.wait(customerSignMeIn);\n          });\n          page.myAccount.orderHistory.visit();\n          page.myAccount.orderHistory.orderNumber.should('have.text', data.expected.order.id);\n          page.myAccount.orderHistory.orderDate.should('not.have.text', '');\n          page.myAccount.orderHistory.orderAmount.should('have.text', data.expected.order.amount);\n          page.myAccount.orderHistory.orderStatus.should('have.text', data.expected.order.status);\n        });\n      });\n    });\n  });","file":"e2e/integration/e2e-my-account-order-history.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should display correct order data - details view","suites":[],"updatePoint":{"line":54,"column":54},"line":54,"code":"  it('Should display correct order data - details view', function () {\n    const data = this.fixtures.data[this.test.title];\n    const customerSignMeIn = intercept.customerSignMeIn();\n    data.customer.email = generator.email;\n    requests.customerSignMeUp(data.customer);\n    requests.createCart().then(createCartResponse => {\n      requests.addToCart(createCartResponse.body.data.cart.id, data.product);\n      requests.updateCart(createCartResponse.body.data.cart.id, {\n        addresses: {\n          shipping: data.customer.address.shipping\n        }\n      });\n      requests.getShippingMethods(createCartResponse.body.data.cart.id).then(shippingMethodsResponse => {\n        const shippingMethodId = shippingMethodsResponse.body.data.shippingMethods.find(el => {\n          return el.name === data.shippingMethod;\n        }).id;\n        requests.updateCart(createCartResponse.body.data.cart.id, {\n          addresses: {\n            billing: data.customer.address.billing\n          },\n          shippingMethodId: shippingMethodId\n        });\n        requests.createMyOrderFromCart(createCartResponse.body.data.cart.id, 14).then(createMyOrderFromCartResponse => {\n          data.expected.order.id = createMyOrderFromCartResponse.body.data.order.id;\n          page.home.visit();\n          page.home.header.openLoginModal();\n          page.components.loginModal.loginToAccountButton.click();\n          page.components.loginModal.fillForm(data.customer);\n          page.components.loginModal.loginButton.click().then(() => {\n            cy.wait(customerSignMeIn);\n          });\n          page.myAccount.orderHistory.visit();\n          page.myAccount.orderHistory.viewDetails.click();\n          page.myAccount.orderHistory.orderDetailsId.should('contain', data.expected.order.id);\n          page.myAccount.orderHistory.orderDetailsDate.should('not.have.text', '');\n          page.myAccount.orderHistory.orderDetailsStatus.should('contain', data.expected.order.status);\n          page.myAccount.orderHistory.orderDetailsTotal.should('contain', data.expected.order.amount);\n        });\n      });\n    });\n  });","file":"e2e/integration/e2e-my-account-order-history.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should change page - next","suites":[],"updatePoint":{"line":95,"column":31},"line":95,"code":"  it('Should change page - next', function () {\n    const data = this.fixtures.data[this.test.title];\n    intercept.getOrders({\n      fixture: 'responses/getOrders.json'\n    });\n    data.customer.email = generator.email;\n    requests.customerSignMeUp(data.customer);\n    page.myAccount.myProfile.visit();\n    page.myAccount.myProfile.menu.navigateTo(MenuItems.ORDER_HISTORY);\n    page.myAccount.orderHistory.paginationCount.scrollIntoView().should('be.visible');\n    const getOrdersRequest = intercept.getOrders();\n    page.myAccount.orderHistory.paginationNext.click().then(() => {\n      cy.wait(getOrdersRequest).its('request.body').its('0').should('deep.equal', data.expected.payload);\n    });\n  });","file":"e2e/integration/e2e-my-account-order-history.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should change page - previous","suites":[],"updatePoint":{"line":110,"column":35},"line":110,"code":"  it('Should change page - previous', function () {\n    const data = this.fixtures.data[this.test.title];\n    intercept.getOrders({\n      fixture: 'responses/getOrdersWithOffset.json'\n    });\n    data.customer.email = generator.email;\n    requests.customerSignMeUp(data.customer);\n    page.myAccount.myProfile.visit();\n    page.myAccount.myProfile.menu.navigateTo(MenuItems.ORDER_HISTORY);\n    page.myAccount.orderHistory.paginationCount.scrollIntoView().should('be.visible');\n    const getOrdersRequest = intercept.getOrders();\n    page.myAccount.orderHistory.paginationPrevious.click().then(() => {\n      cy.wait(getOrdersRequest).its('request.body').its('0').should('deep.equal', data.expected.payload);\n    });\n  });","file":"e2e/integration/e2e-my-account-order-history.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should redirect anonymous customer to home page","suites":[],"updatePoint":{"line":14,"column":53},"line":14,"code":"  it('Should redirect anonymous customer to home page', function () {\n    page.myAccount.myProfile.visit().url().should('eq', `${Cypress.config().baseUrl}${page.home.path}`);\n  });","file":"e2e/integration/e2e-my-account.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should display customer's correct personal data","suites":[],"updatePoint":{"line":17,"column":54},"line":17,"code":"  it('Should display customer\\'s correct personal data', function () {\n    const data = this.fixtures.data[this.test.title];\n    data.customer.email = generator.email;\n    requests.customerSignMeUp(data.customer);\n    page.home.visit();\n    page.home.header.account.click();\n    page.myAccount.myProfile.firstName.should('have.value', data.customer.firstName);\n    page.myAccount.myProfile.lastName.should('have.value', data.customer.lastName);\n    page.myAccount.myProfile.email.should('have.value', data.customer.email);\n  });","file":"e2e/integration/e2e-my-account.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should update customer's personal data","suites":[],"updatePoint":{"line":27,"column":45},"line":27,"code":"  it('Should update customer\\'s personal data', function () {\n    const data = this.fixtures.data[this.test.title];\n    data.customer.email = generator.email;\n    requests.customerSignMeUp(data.customer).its('status').should('eq', 200);\n    page.home.visit();\n    page.home.header.account.click();\n    data.updatedCustomer.email = generator.email;\n    page.myAccount.myProfile.firstName.clear().type(data.updatedCustomer.firstName);\n    page.myAccount.myProfile.lastName.clear().type(data.updatedCustomer.lastName);\n    page.myAccount.myProfile.email.clear().type(data.updatedCustomer.email);\n    const customerUpdateMeRequest = intercept.customerUpdateMe();\n    page.myAccount.myProfile.updatePersonalDataButton.click().then(() => {\n      cy.wait(customerUpdateMeRequest);\n    });\n    requests.getMe(true).should(response => {\n      expect(response.body.data.me.customer.firstName).to.equal(data.updatedCustomer.firstName);\n      expect(response.body.data.me.customer.lastName).to.equal(data.updatedCustomer.lastName);\n      expect(response.body.data.me.customer.email).to.equal(data.updatedCustomer.email);\n    });\n  });","file":"e2e/integration/e2e-my-account.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should update customer's password","suites":[],"updatePoint":{"line":47,"column":40},"line":47,"code":"  it('Should update customer\\'s password', function () {\n    const data = this.fixtures.data[this.test.title];\n    data.customer.email = generator.email, data.updatedCustomer.email = data.customer.email;\n    requests.customerSignMeUp(data.customer).its('status').should('eq', 200);\n    page.home.visit();\n    page.home.header.account.click();\n    page.myAccount.myProfile.switchTab(MyAccountTab.PASSWORD_CHANGE);\n    page.myAccount.myProfile.messageEmail.should('contain.text', data.customer.email);\n    page.myAccount.myProfile.currentPassword.type(data.customer.password);\n    page.myAccount.myProfile.newPassword.type(data.updatedCustomer.password);\n    page.myAccount.myProfile.repeatPassword.type(data.updatedCustomer.password);\n    const customerChangeMyPasswordRequest = intercept.customerChangeMyPassword();\n    page.myAccount.myProfile.updatePasswordButton.click().then(() => {\n      cy.wait(customerChangeMyPasswordRequest);\n    });\n    requests.customerSignMeIn(data.updatedCustomer).then(response => {\n      expect(response.body.data.user.customer.email).to.equal(data.updatedCustomer.email);\n    });\n  });","file":"e2e/integration/e2e-my-account.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully place an order as a guest","suites":[],"updatePoint":{"line":12,"column":51},"line":12,"code":"  it('Should successfully place an order as a guest', function () {\n    const data = this.fixtures.data[this.test.title];\n    const getProductReq = intercept.getProduct();\n    page.home.visit();\n    page.home.header.categories.first().click();\n    page.category().products.first().click().then(() => {\n      cy.wait([getProductReq, getProductReq]);\n    });\n    page.product().addToCartButton.click();\n    page.product().header.openCart();\n    page.components.cart.goToCheckoutButton.click();\n    page.checkout.shipping.heading.should('be.visible');\n    page.checkout.shipping.fillForm(data.customer);\n    page.checkout.shipping.selectShippingButton.click();\n    page.checkout.shipping.shippingMethods.first().click();\n    page.checkout.shipping.continueToBillingButton.click();\n    page.checkout.billing.heading.should('be.visible');\n    page.checkout.billing.copyAddressLabel.click();\n    page.checkout.billing.continueToPaymentButton.click();\n    page.checkout.payment.paymentMethods.first().click();\n    page.checkout.payment.terms.click();\n    page.checkout.payment.makeAnOrderButton.click();\n    page.checkout.thankyou.heading.should('be.visible');\n  });","file":"e2e/integration/e2e-place-order.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully place an order as a registered customer","suites":[],"updatePoint":{"line":36,"column":65},"line":36,"code":"  it('Should successfully place an order as a registered customer', function () {\n    const data = this.fixtures.data[this.test.title];\n    const getProductReq = intercept.getProduct();\n    data.customer.email = generator.email;\n    page.home.visit();\n    page.home.header.openLoginModal();\n    page.components.loginModal.fillForm(data.customer);\n    page.components.loginModal.iWantToCreateAccountCheckbox.click();\n    page.components.loginModal.createAccountButton.click();\n    page.home.header.categories.first().click();\n    page.category().products.first().click().then(() => {\n      cy.wait([getProductReq, getProductReq]);\n    });\n    page.product().addToCartButton.click();\n    page.product().header.openCart();\n    page.components.cart.goToCheckoutButton.click();\n    page.checkout.shipping.heading.should('be.visible');\n    page.checkout.shipping.addresses.first().click();\n    page.checkout.shipping.selectShippingButton.click();\n    page.checkout.shipping.shippingMethods.first().click();\n    page.checkout.shipping.continueToBillingButton.click();\n    page.checkout.billing.heading.should('be.visible');\n    page.checkout.billing.copyAddressLabel.click();\n    page.checkout.billing.continueToPaymentButton.click();\n    page.checkout.payment.paymentMethods.first().click();\n    page.checkout.payment.terms.click();\n    page.checkout.payment.makeAnOrderButton.click();\n    page.checkout.thankyou.heading.should('be.visible');\n    page.checkout.thankyou.orderNumber.then($order => {\n      page.myAccount.orderHistory.visit();\n      page.myAccount.orderHistory.orderNumber.should('have.text', $order.text().substring(1));\n    });\n  });","file":"e2e/integration/e2e-place-order.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should contain all size options","suites":[],"updatePoint":{"line":12,"column":37},"line":12,"code":"  it('Should contain all size options', function () {\n    const data = this.fixtures.data[this.test.title];\n    page.product(data.product.id, data.product.slug).visit();\n    page.product().sizeOptions.then(options => {\n      const productSizes = [...options].map(option => option.value);\n      expect(productSizes).to.deep.eq(data.product.attributes.size);\n    });\n  });","file":"e2e/integration/e2e-product-page.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should select correct size option","suites":[],"updatePoint":{"line":20,"column":39},"line":20,"code":"  it('Should select correct size option', function () {\n    const data = this.fixtures.data[this.test.title];\n    page.product(data.product.id, data.product.slug).visit();\n    page.product().sizeSelect.select(data.product.attributes.size);\n    cy.url().should('contain', `size=${data.product.attributes.size}`);\n    page.product().sizeSelect.should('have.value', data.product.attributes.size);\n  });","file":"e2e/integration/e2e-product-page.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should add correct variant to cart","suites":[],"updatePoint":{"line":27,"column":40},"line":27,"code":"  it('Should add correct variant to cart', function () {\n    const data = this.fixtures.data[this.test.title];\n    const getProductReq = intercept.getProduct();\n    page.product(data.product.id, data.product.slug).visit();\n    page.product().sizeSelect.select(data.product.attributes.size).then(() => {\n      cy.wait(getProductReq);\n    });\n    page.product().addToCartButton.click();\n    page.product().header.openCart();\n    page.components.cart.productProperties.should('be.visible').then(() => {\n      page.components.cart.product().each(product => {\n        page.components.cart.productSizeProperty(product).should('contain', data.product.attributes.size);\n        page.components.cart.productColorProperty(product).should('contain', data.product.attributes.color);\n      });\n    });\n  });","file":"e2e/integration/e2e-product-page.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should remove all products from cart","suites":[],"updatePoint":{"line":11,"column":42},"line":11,"code":"  it('Should remove all products from cart', function () {\n    const data = this.fixtures.data[this.test.title];\n    requests.createCart().then(response => {\n      requests.addToCart(response.body.data.cart.id, data.product, data.product.quantity);\n    });\n    page.home.visit();\n    page.home.header.openCart();\n    page.components.cart.product(data.product.name).should('be.visible');\n    page.components.cart.removeProduct(data.product.name);\n    page.components.cart.product(data.product.name).should('not.exist');\n    page.components.cart.yourCartIsEmptyHeading.should('be.visible');\n  });","file":"e2e/integration/e2e-remove-from-cart.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should remove single product from cart","suites":[],"updatePoint":{"line":23,"column":44},"line":23,"code":"  it('Should remove single product from cart', function () {\n    const data = this.fixtures.data[this.test.title];\n    requests.createCart().then(response => {\n      data.products.forEach(product => {\n        requests.addToCart(response.body.data.cart.id, product, product.quantity);\n      });\n    });\n    page.home.visit();\n    page.home.header.openCart();\n    page.components.cart.product(data.productToRemove.name).should('be.visible');\n    page.components.cart.removeProduct(data.productToRemove.name);\n    page.components.cart.product(data.productToRemove.name).should('not.exist');\n    data.expectedCart.forEach(product => {\n      page.components.cart.product(product.name).should('be.visible');\n    });\n  });","file":"e2e/integration/e2e-remove-from-cart.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should increase product quantity","suites":[],"updatePoint":{"line":12,"column":38},"line":12,"code":"  it('Should increase product quantity', function () {\n    const data = this.fixtures.data[this.test.title];\n    requests.createCart().then(response => {\n      data.products.forEach(product => {\n        requests.addToCart(response.body.data.cart.id, product, product.quantity);\n      });\n    });\n    page.home.visit();\n    page.home.header.openCart();\n    page.components.cart.product(data.productToUpdate.name).should('be.visible');\n    const updateCartRequest = intercept.updateCartQuantity();\n    page.components.cart.increaseQtyButton(data.productToUpdate.name).click().then(() => {\n      cy.wait(updateCartRequest);\n    });\n    page.components.cart.productName.each((name, index) => {\n      cy.wrap(name).should('contain', data.expectedCart[index].name);\n    });\n    page.components.cart.quantity().each((input, index) => {\n      cy.wrap(input).should('have.value', data.expectedCart[index].quantity);\n    });\n  });","file":"e2e/integration/e2e-update-cart.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should decrease product quantity","suites":[],"updatePoint":{"line":33,"column":38},"line":33,"code":"  it('Should decrease product quantity', function () {\n    const data = this.fixtures.data[this.test.title];\n    requests.createCart().then(response => {\n      data.products.forEach(product => {\n        requests.addToCart(response.body.data.cart.id, product, product.quantity);\n      });\n    });\n    page.home.visit();\n    page.home.header.openCart();\n    page.components.cart.product(data.productToUpdate.name).should('be.visible');\n    const updateCartRequest = intercept.updateCartQuantity();\n    page.components.cart.decreaseQtyButton(data.productToUpdate.name).click().then(() => {\n      cy.wait(updateCartRequest);\n    });\n    page.components.cart.productName.each((name, index) => {\n      cy.wrap(name).should('contain', data.expectedCart[index].name);\n    });\n    page.components.cart.quantity().each((input, index) => {\n      cy.wrap(input).should('have.value', data.expectedCart[index].quantity);\n    });\n  });","file":"e2e/integration/e2e-update-cart.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully login","suites":[],"updatePoint":{"line":13,"column":31},"line":13,"code":"  it('Should successfully login', function () {\n    const data = this.fixtures.data[this.test.title];\n    data.customer.email = generator.email;\n    requests.customerSignMeUp(data.customer).then(() => {\n      cy.clearCookies();\n    });\n    page.home.visit();\n    page.home.header.openLoginModal();\n    page.components.loginModal.loginToAccountButton.click();\n    page.components.loginModal.fillForm(data.customer);\n    page.components.loginModal.loginButton.click();\n    page.components.loginModal.container.should('not.exist');\n    page.home.header.account.click();\n    page.myAccount.myProfile.heading.should('be.visible');\n  });","file":"e2e/integration/e2e-user-login.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Incorrect credentials - should display an error","suites":[],"updatePoint":{"line":28,"column":53},"line":28,"code":"  it('Incorrect credentials - should display an error', function () {\n    const data = this.fixtures.data[this.test.title];\n    data.customer.email = generator.email;\n    page.home.visit();\n    page.home.header.openLoginModal();\n    page.components.loginModal.loginToAccountButton.click();\n    page.components.loginModal.fillForm(data.customer);\n    page.components.loginModal.loginButton.click();\n    page.components.loginModal.container.contains(data.errorMessage).should('be.visible');\n  });","file":"e2e/integration/e2e-user-login.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Should successfully register","suites":[],"updatePoint":{"line":12,"column":34},"line":12,"code":"  it('Should successfully register', function () {\n    const data = this.fixtures.data[this.test.title];\n    data.customer.email = generator.email;\n    page.home.visit();\n    page.home.header.openLoginModal();\n    page.components.loginModal.fillForm(data.customer);\n    page.components.loginModal.iWantToCreateAccountCheckbox.click();\n    page.components.loginModal.createAccountButton.click();\n    page.components.loginModal.container.should('not.exist');\n    page.home.header.account.click();\n    page.myAccount.myProfile.heading.should('be.visible');\n  });","file":"e2e/integration/e2e-user-registration.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"Existing user - should display an error","suites":[],"updatePoint":{"line":24,"column":45},"line":24,"code":"  it('Existing user - should display an error', function () {\n    const data = this.fixtures.data[this.test.title];\n    data.customer.email = generator.email;\n    requests.customerSignMeUp(data.customer).then(() => {\n      cy.clearCookies();\n    });\n    page.home.visit();\n    page.home.header.openLoginModal();\n    page.components.loginModal.fillForm(data.customer);\n    page.components.loginModal.iWantToCreateAccountCheckbox.click();\n    page.components.loginModal.createAccountButton.click();\n    page.components.loginModal.container.contains(`${data.errorMessage} '\"${data.customer.email}\"'`).should('be.visible');\n  });","file":"e2e/integration/e2e-user-registration.spec.ts","skipped":false,"dir":"packages/commercetools/theme/tests"},{"name":"returns empty array if key is not configured","suites":["defaultHandler"],"updatePoint":{"line":4,"column":50},"line":4,"code":"  it('returns empty array if key is not configured', () => {\n    const result = defaultHandler({\n      request: {\n        url: '/?tags=a,b,c'\n      },\n      options: {}\n    });\n\n    expect(result).toEqual([]);\n  });","file":"defaultHandler.spec.ts","skipped":false,"dir":"packages/core/cache/__tests__"},{"name":"returns empty array if key was not provided in the request","suites":["defaultHandler"],"updatePoint":{"line":15,"column":64},"line":15,"code":"  it('returns empty array if key was not provided in the request', () => {\n    const result = defaultHandler({\n      request: {\n        url: '/?tags=a,b,c'\n      },\n      options: {\n        key: 'key'\n      }\n    });\n\n    expect(result).toEqual([]);\n  });","file":"defaultHandler.spec.ts","skipped":false,"dir":"packages/core/cache/__tests__"},{"name":"returns empty array if tags were not provided in the request","suites":["defaultHandler"],"updatePoint":{"line":28,"column":66},"line":28,"code":"  it('returns empty array if tags were not provided in the request', () => {\n    const result = defaultHandler({\n      request: {\n        url: '/?key=secret'\n      },\n      options: {\n        key: 'secret'\n      }\n    });\n\n    expect(result).toEqual([]);\n  });","file":"defaultHandler.spec.ts","skipped":false,"dir":"packages/core/cache/__tests__"},{"name":"handles single tag","suites":["defaultHandler"],"updatePoint":{"line":41,"column":24},"line":41,"code":"  it('handles single tag', () => {\n    const result = defaultHandler({\n      request: {\n        url: '/?key=secret&tags=a'\n      },\n      options: {\n        key: 'secret'\n      }\n    });\n\n    expect(result).toEqual(['a']);\n  });","file":"defaultHandler.spec.ts","skipped":false,"dir":"packages/core/cache/__tests__"},{"name":"handles multiple tags","suites":["defaultHandler"],"updatePoint":{"line":54,"column":27},"line":54,"code":"  it('handles multiple tags', () => {\n    const result = defaultHandler({\n      request: {\n        url: '/?key=secret&tags=a,b,c'\n      },\n      options: {\n        key: 'secret'\n      }\n    });\n\n    expect(result).toEqual(['a', 'b', 'c']);\n  });","file":"defaultHandler.spec.ts","skipped":false,"dir":"packages/core/cache/__tests__"},{"name":"registers plugin and calls driver methods","suites":["nuxtModule"],"updatePoint":{"line":40,"column":47},"line":40,"code":"  it('registers plugin and calls driver methods', () => {\n    const options = {\n      enabled: true,\n      invalidation: {\n        endpoint: '/endpoint',\n        handlers: [\n          mockHandler\n        ]\n      },\n      driver: [\n        '@scope/driver',\n        {\n          driverSettings: 'setting'\n        }\n      ]\n    };\n\n    // Run module\n    nuxtModule.call(mockNuxt, options);\n\n    // Nuxt.js plugin should be called\n    expect(mockNuxt.addPlugin).toHaveBeenCalledWith({\n      src: path.resolve(__dirname, '../nuxt/plugin.js'),\n      mode: 'server',\n      options\n    });\n\n    // Simulate route render\n    mockNuxt.nuxt.renderer.renderRoute('/', {}, jest.fn());\n\n    // Driver's \"invoke\" should be called\n    expect(mockInvoke).toBeCalled();\n\n    // Driver's \"invalidate\" should be called without duplicate tags\n    expect(mockInvalidate).toHaveBeenCalledWith(\n      expect.objectContaining({ tags: ['a', 'b', 'c'] })\n    );\n\n    // Handler passed to options should be called\n    expect(mockHandler).toBeCalled();\n  });","file":"nuxtModule.spec.ts","skipped":false,"dir":"packages/core/cache/__tests__"},{"name":"returns empty array by default","suites":["useCache"],"updatePoint":{"line":35,"column":36},"line":35,"code":"  it('returns empty array by default', () => {\n    const useContextMock = useContext as jest.Mock;\n    useContextMock.mockImplementation(() => {\n      return {\n        req: {\n          $vsfCache: {\n            tagsSet: new Set()\n          }\n        }\n      };\n    });\n    const { getTags } = useCache();\n\n    expect(getTags()).toEqual([]);\n  });","file":"useCache.spec.ts","skipped":false,"dir":"packages/core/cache/__tests__"},{"name":"can add tags","suites":["useCache"],"updatePoint":{"line":51,"column":18},"line":51,"code":"  it('can add tags', () => {\n    const useContextMock = useContext as jest.Mock;\n    useContextMock.mockImplementation(() => ({\n      req: {\n        $vsfCache: {\n          tagsSet: new Set()\n        }\n      }\n    }));\n    const { addTags, getTags } = useCache();\n\n    addTags(tags);\n\n    expect(getTags()).toEqual(tags);\n  });","file":"useCache.spec.ts","skipped":false,"dir":"packages/core/cache/__tests__"},{"name":"can set / override tags","suites":["useCache"],"updatePoint":{"line":67,"column":29},"line":67,"code":"  it('can set / override tags', () => {\n    const useContextMock = useContext as jest.Mock;\n    useContextMock.mockImplementation(() => ({\n      req: {\n        $vsfCache: {\n          tagsSet: new Set()\n        }\n      }\n    }));\n    const { addTags, setTags, getTags } = useCache();\n\n    addTags(tags);\n    setTags((currentTags) => currentTags.filter((tag) => tag.prefix === 'P'));\n\n    expect(getTags()).toEqual([tags[0]]);\n  });","file":"useCache.spec.ts","skipped":false,"dir":"packages/core/cache/__tests__"},{"name":"can clear tags","suites":["useCache"],"updatePoint":{"line":84,"column":20},"line":84,"code":"  it('can clear tags', () => {\n    const useContextMock = useContext as jest.Mock;\n    useContextMock.mockImplementation(() => ({\n      req: {\n        $vsfCache: {\n          tagsSet: new Set()\n        }\n      }\n    }));\n    const { addTags, clearTags, getTags } = useCache();\n\n    addTags(tags);\n    clearTags();\n\n    expect(getTags()).toEqual([]);\n  });","file":"useCache.spec.ts","skipped":false,"dir":"packages/core/cache/__tests__"},{"name":"runs when req in context is undefined","suites":["useCache"],"updatePoint":{"line":101,"column":43},"line":101,"code":"  it('runs when req in context is undefined', () => {\n    const useContextMock = useContext as jest.Mock;\n    useContextMock.mockImplementation(() => ({\n      req: undefined\n    }));\n    const { getTags } = useCache();\n\n    expect(getTags()).toEqual([]);\n  });","file":"useCache.spec.ts","skipped":false,"dir":"packages/core/cache/__tests__"},{"name":"should log error when no args provided","suites":["[@core/cli/src/commands] generate template"],"updatePoint":{"line":36,"column":44},"line":36,"code":"  it('should log error when no args provided', async () => {\n    await generateTemplate([]);\n    expect(log.error).toHaveBeenCalledWith(expect.any(String));\n  });","file":"commands/generate-template.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"should remove vsfTuConfig if exist","suites":["[@core/cli/src/commands] generate template"],"updatePoint":{"line":41,"column":40},"line":41,"code":"  it('should remove vsfTuConfig if exist', async () => {\n    const templateName = 'Test';\n    const existSyncMock = fs.existsSync as jest.Mock;\n    existSyncMock.mockImplementation(() => true);\n    const testTargetPath = 'test_path';\n    const spy = jest.spyOn(process, 'cwd');\n    spy.mockReturnValue(testTargetPath);\n\n    await generateTemplate([templateName]);\n    spy.mockRestore();\n\n    expect(fs.unlinkSync).toHaveBeenCalledWith(expect.any(String));\n  });","file":"commands/generate-template.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"should run createTemplate function with parameters","suites":["[@core/cli/src/commands] generate template"],"updatePoint":{"line":55,"column":56},"line":55,"code":"  it('should run createTemplate function with parameters', async () => {\n    const templateName = 'Test';\n    const existSyncMock = fs.existsSync as jest.Mock;\n    existSyncMock.mockImplementation(() => false);\n    const appendFileMock = (fs.appendFile as unknown) as jest.Mock;\n    appendFileMock.mockImplementation((path, data, callback) => callback());\n    const testTargetPath = 'test_path';\n    const spy = jest.spyOn(process, 'cwd');\n    spy.mockReturnValue(testTargetPath);\n\n    await generateTemplate([templateName]);\n    spy.mockRestore();\n\n    expect(createTemplate).toHaveBeenCalledWith({\n      vsfTuConfigFilePath: expect.any(String),\n      generatedTemplatePath: expect.any(String)\n    });\n  });","file":"commands/generate-template.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"should throw error on callback","suites":["[@core/cli/src/commands] generate template"],"updatePoint":{"line":74,"column":36},"line":74,"code":"  it('should throw error on callback', async () => {\n    const templateName = 'Test';\n    const existSyncMock = fs.existsSync as jest.Mock;\n    existSyncMock.mockImplementation(() => false);\n    const appendFileMock = (fs.appendFile as unknown) as jest.Mock;\n    appendFileMock.mockImplementation((path, data, callback) =>\n      callback(new Error())\n    );\n    const testTargetPath = 'test_path';\n    const spy = jest.spyOn(process, 'cwd');\n    spy.mockReturnValue(testTargetPath);\n\n    await generateTemplate([templateName]);\n    spy.mockRestore();\n\n    expect(log.error).toHaveBeenCalledWith(expect.any(String));\n  });","file":"commands/generate-template.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"should run createTemplate function with provided path","suites":["[@core/cli/src/commands] generate template"],"updatePoint":{"line":92,"column":59},"line":92,"code":"  it('should run createTemplate function with provided path', async () => {\n    const templateName = 'Test';\n    const templatePath = '/home/test';\n    const existSyncMock = fs.existsSync as jest.Mock;\n    existSyncMock.mockImplementation(() => false);\n    const appendFileMock = (fs.appendFile as unknown) as jest.Mock;\n    appendFileMock.mockImplementation((path, data, callback) => callback());\n    const testTargetPath = 'test_path';\n    const spy = jest.spyOn(process, 'cwd');\n    spy.mockReturnValue(testTargetPath);\n\n    await generateTemplate([templateName, templatePath]);\n    spy.mockRestore();\n\n    expect(vsfTuConfig).toHaveBeenCalledWith({\n      outputPathName: templateName.toLowerCase(),\n      themePath: templatePath,\n      _themePath: `${templatePath}/_theme`\n    });\n  });","file":"commands/generate-template.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"calls inquirer.prompt for projectName if no <projectName>","suites":["Command: init <projectName>"],"updatePoint":{"line":40,"column":63},"line":40,"code":"  it('calls inquirer.prompt for projectName if no <projectName>', async () => {\n    await initCommand([null]);\n    expect(inquirer.prompt).toHaveBeenCalledWith([\n      expect.objectContaining({\n        type: 'input',\n        name: 'typedProjectName',\n        message: 'What\\'s your project name?'\n      })\n    ]);\n  });","file":"commands/init.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"init with project name && choose integration && run createProject with proper arguments","suites":["Command: init <projectName>"],"updatePoint":{"line":51,"column":93},"line":51,"code":"  it('init with project name && choose integration && run createProject with proper arguments', async () => {\n    jest.clearAllMocks();\n    const testTargetPath = 'test_path';\n    const spy = jest.spyOn(process, 'cwd');\n    spy.mockReturnValue(testTargetPath);\n\n    await initCommand([projectName]);\n    spy.mockRestore();\n\n    expect(createProject).toHaveBeenCalledWith({\n      projectName: projectName,\n      targetPath: testTargetPath,\n      repositoryLink: ''\n    });\n  });","file":"commands/init.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"init with project name && choose custom integration && run createProject with proper arguments","suites":["Command: init <projectName>"],"updatePoint":{"line":67,"column":100},"line":67,"code":"  it('init with project name && choose custom integration && run createProject with proper arguments', async () => {\n    jest.clearAllMocks();\n    const testTargetPath = 'test_path';\n    const spy = jest.spyOn(process, 'cwd');\n    spy.mockReturnValue(testTargetPath);\n\n    inquirer.prompt.mockImplementation(\n      jest.fn(() =>\n        Promise.resolve({\n          chosenIntegration: CUSTOM_TEMPLATE,\n          otherIntegrationGitLink: 'http://test.com',\n          typedProjectName: projectName\n        })\n      )\n    );\n    await initCommand([projectName]);\n    spy.mockRestore();\n\n    expect(createProject).toHaveBeenCalledWith({\n      projectName: projectName,\n      targetPath: testTargetPath,\n      repositoryLink: 'http://test.com'\n    });\n  });","file":"commands/init.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"proper validator","suites":["Command: init <projectName>"],"updatePoint":{"line":92,"column":22},"line":92,"code":"  it('proper validator', async () => {\n    let validatorForEmptyString = null;\n    let validatorForNotEmptyString = null;\n\n    inquirer.prompt.mockImplementation(\n      jest.fn((arg) => {\n        if (arg[0].validate) {\n          validatorForEmptyString = arg[0].validate('');\n          validatorForNotEmptyString = arg[0].validate('abc');\n        }\n\n        return Promise.resolve({\n          chosenIntegration,\n          typedProjectName: projectName\n        });\n      })\n    );\n\n    await initCommand([null]);\n\n    expect(typeof validatorForEmptyString).toBe('string');\n    expect(validatorForNotEmptyString).toBe(true);\n  });","file":"commands/init.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"stops if not command provided","suites":["CLI"],"updatePoint":{"line":13,"column":35},"line":13,"code":"  it('stops if not command provided', () => {\n    cli(['', '', null]);\n    expect(log.error).toHaveBeenCalledWith('Provide command');\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"stops if not existing command provided","suites":["CLI"],"updatePoint":{"line":18,"column":44},"line":18,"code":"  it('stops if not existing command provided', () => {\n    cli(['', '', 'asdasdasd']);\n    expect(log.error).toHaveBeenCalledWith('Bad command');\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"loads proper script and calls default function","suites":["CLI"],"updatePoint":{"line":23,"column":52},"line":23,"code":"  it('loads proper script and calls default function', () => {\n    const commandName = 'init';\n    const commandArgs = [1, 51];\n\n    cli(['', '', commandName, ...commandArgs]);\n    expect((init as any).default).toHaveBeenCalledWith(commandArgs);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"successful repository clone","suites":["[vsf-next-cli] createProject"],"updatePoint":{"line":25,"column":33},"line":25,"code":"  it('successful repository clone', async () => {\n    git.clone.mockImplementation(() => true);\n    await createProject({\n      projectName: 'MyProject',\n      targetPath: __dirname,\n      repositoryLink: ''\n    });\n    expect(log.success).toHaveBeenCalledWith(expect.any(String));\n  });","file":"scripts/createProject/index.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"fail repository clone","suites":["[vsf-next-cli] createProject"],"updatePoint":{"line":35,"column":27},"line":35,"code":"  it('fail repository clone', async () => {\n    git.clone.mockImplementation(() => {\n      throw new Error();\n    });\n    const testTargetPath = 'test_path';\n    const spy = jest.spyOn(process, 'cwd');\n    spy.mockReturnValue(testTargetPath);\n\n    await createProject({\n      projectName: 'MyProject',\n      targetPath: testTargetPath,\n      repositoryLink: ''\n    });\n    spy.mockRestore();\n    expect(log.error).toHaveBeenCalledWith(expect.any(String));\n  });","file":"scripts/createProject/index.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"removes magic comments from the file","suites":["[vsf-next-cli] processMagicComments"],"updatePoint":{"line":113,"column":42},"line":113,"code":"  it('removes magic comments from the file', async () => {\n\n    const absoluteFilePath = 'nuxt.config.js';\n\n    // I removed magic comments in the const below\n    const expectedFileContent = `\nimport webpack from 'webpack';\nimport { config } from './plugins/commercetools-config.js';\n\nconst localeNames = config.locales.map(l => ({ code: l.name, file: 'abc.js', iso: l.name }));\n\nexport default {\n  mode: 'universal',\n  server: {\n    port: 3000,\n    host: '0.0.0.0'\n  },\n  head: {\n    title: process.env.npm_package_name || '',\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport',\n        content: 'width=device-width, initial-scale=1' },\n      { hid: 'description',\n        name: 'description',\n        content: process.env.npm_package_description || '' }\n    ],\n    link: [\n      { rel: 'icon',\n        type: 'image/x-icon',\n        href: '/favicon.ico' }\n    ]\n  },\n  loading: { color: '#fff' },\n  plugins: [\n    './plugins/commercetools.js'\n  ],\n  router: {\n    middleware: ['commercetools', 'checkout']\n  },\n  buildModules: [\n    // to core\n    '@nuxt/typescript-build',\n    ['@vue-storefront/nuxt', {\n      useRawSource: {\n        dev: [\n          '@vue-storefront/commercetools',\n          '@vue-storefront/core'\n        ],\n        prod: [\n          '@vue-storefront/commercetools',\n          '@vue-storefront/core'\n        ]\n      }\n    }],\n  ],\n  modules: [\n    'nuxt-i18n',\n    'cookie-universal-nuxt',\n    'vue-scrollto/nuxt'\n  ],\n  build: {\n    transpile: [\n      'vee-validate/dist/rules'\n    ],\n    plugins: [\n      new webpack.DefinePlugin({\n        'process.VERSION': JSON.stringify({\n          // eslint-disable-next-line global-require\n          version: require('./package.json').version,\n          lastCommit: process.env.LAST_COMMIT || ''\n        })\n      })\n    ]\n  },\n  i18n: {\n    locales: localeNames,\n    defaultLocale: localeNames[0].code,\n    lazy: true,\n    seo: true,\n    langDir: 'lang/',\n    vueI18n: {\n      fallbackLocale: localeNames[0].code\n    },\n    detectBrowserLanguage: {\n      cookieKey: config.cookies.localeCookieName,\n      alwaysRedirect: true\n    }\n  }\n};\n\n`;\n    await processMagicComments(absoluteFilePath);\n    expect(writeFileSync).toHaveBeenCalledWith(absoluteFilePath, expectedFileContent);\n\n  });","file":"scripts/createProject/processMagicComments.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"uncomments parts inside \"project only\" comments","suites":["[vsf-next-cli] processMagicComments"],"updatePoint":{"line":210,"column":53},"line":210,"code":"  it('uncomments parts inside \"project only\" comments', async () => {\n\n    const absoluteFilePath = 'nuxt.config.js';\n    (readFileSync as jest.Mock).mockClear();\n    (readFileSync as jest.Mock).mockImplementation(() => projectOnlyCommmentsFile);\n\n    // I removed magic comments in the const below\n    const expectedFileContent = `\n    ['@vue-storefront/nuxt-theme'],`;\n\n    await processMagicComments(absoluteFilePath);\n\n    expect(writeFileSync).toHaveBeenCalledWith(absoluteFilePath, expectedFileContent);\n\n  });","file":"scripts/createProject/processMagicComments.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"updates name in the JSON file and removes keys that start with _","suites":["[vsf-next-cli] updatePackageJson"],"updatePoint":{"line":25,"column":70},"line":25,"code":"  it('updates name in the JSON file and removes keys that start with _', async () => {\n\n    const absoluteFilePath = 'package.json';\n    await updatePackageJson(absoluteFilePath, projectName);\n    expect(writeFileSync).toHaveBeenCalledWith(absoluteFilePath, expectedFile);\n\n  });","file":"scripts/createProject/updatePackageJson.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"sets props correctly","suites":["[@core/cli] - create template"],"updatePoint":{"line":15,"column":26},"line":15,"code":"  it('sets props correctly', async () => {\n    const processTemplateMock = processTemplate as jest.Mock;\n    processTemplateMock.mockImplementation((data) => Promise.resolve(data));\n    await createTemplate({\n      vsfTuConfigFilePath: vsfTuConfigFilePathMock,\n      generatedTemplatePath: generatedTemplatePathMock\n    });\n\n    expect(processTemplate).toHaveBeenCalledWith({\n      vsfTuConfigFilePath: vsfTuConfigFilePathMock,\n      generatedTemplatePath: generatedTemplatePathMock\n    });\n  });","file":"scripts/createTemplate/createTemplate.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"Log successful generation","suites":["[@core/cli] - create template"],"updatePoint":{"line":29,"column":31},"line":29,"code":"  it('Log successful generation', async () => {\n    const processTemplateMock = processTemplate as jest.Mock;\n    processTemplateMock.mockImplementation((data) => Promise.resolve(data));\n    await createTemplate({\n      vsfTuConfigFilePath: vsfTuConfigFilePathMock,\n      generatedTemplatePath: generatedTemplatePathMock\n    });\n\n    expect(log.success).toHaveBeenCalledWith(expect.any(String));\n  });","file":"scripts/createTemplate/createTemplate.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"should log error when processTemplate fail","suites":["[@core/cli] - create template"],"updatePoint":{"line":40,"column":48},"line":40,"code":"  it('should log error when processTemplate fail', async () => {\n    const processTemplateMock = processTemplate as jest.Mock;\n    processTemplateMock.mockImplementation(() => Promise.reject(new Error()));\n\n    await createTemplate({\n      vsfTuConfigFilePath: vsfTuConfigFilePathMock,\n      generatedTemplatePath: generatedTemplatePathMock\n    });\n\n    expect(log.error).toHaveBeenCalledWith(expect.any(String));\n  });","file":"scripts/createTemplate/createTemplate.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"should create absolute path to nuxt.config.js file","suites":["[@core/cli/scripts] process magic comments in nuxt config"],"updatePoint":{"line":20,"column":56},"line":20,"code":"  it('should create absolute path to nuxt.config.js file', async () => {\n    const processMagicCommentsMock = processMagicComments as jest.Mock;\n    processMagicCommentsMock.mockImplementation(() => ({\n      __esModule: true,\n      default: jest.fn(async (nuxtConfigPath) => nuxtConfigPath)\n    }));\n    const generatedTemplatePath = '/home/root/test';\n    const nuxtConfigFile = path.join(generatedTemplatePath, 'nuxt.config.js');\n\n    await processMagicCommentsInNuxtConfig(generatedTemplatePath);\n\n    expect(path.join).toHaveBeenCalledWith(\n      generatedTemplatePath,\n      'nuxt.config.js'\n    );\n    expect(processMagicComments).toHaveBeenCalledWith(nuxtConfigFile);\n  });","file":"scripts/createTemplate/processMagicCommentsInNuxtConfig.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"should log error when processMagicComments fail","suites":["[@core/cli/scripts] process magic comments in nuxt config"],"updatePoint":{"line":38,"column":53},"line":38,"code":"  it('should log error when processMagicComments fail', async () => {\n    const processMagicCommentsMock = processMagicComments as jest.Mock;\n    processMagicCommentsMock.mockImplementation(() => {\n      throw new Error();\n    });\n    const generatedTemplatePath = '/home/root/test';\n\n    await processMagicCommentsInNuxtConfig(generatedTemplatePath);\n\n    expect(log.error).toHaveBeenCalledWith(expect.any(String));\n  });","file":"scripts/createTemplate/processMagicCommentsInNuxtConfig.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"should invoke all functions and pass happy way","suites":["[@core/cli/scripts] Process Template"],"updatePoint":{"line":33,"column":52},"line":33,"code":"  it('should invoke all functions and pass happy way', async () => {\n    const vsfTuConfigFilePath = '/home/root/test/nuxt.config.js';\n    const generatedTemplatePath = '/home/root/test';\n\n    await processTemplate({ vsfTuConfigFilePath, generatedTemplatePath });\n\n    expect(fs.unlinkSync).toHaveBeenCalledWith(vsfTuConfigFilePath);\n    expect(execa).toHaveBeenCalledWith(expect.any(String));\n    expect(processMagicCommentsInNuxtConfig).toHaveBeenCalledWith(\n      generatedTemplatePath\n    );\n  });","file":"scripts/createTemplate/processTemplate.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"should log when vsf-tu script fail","suites":["[@core/cli/scripts] Process Template"],"updatePoint":{"line":46,"column":40},"line":46,"code":"  it('should log when vsf-tu script fail', async () => {\n    const exacaMock = execa as jest.Mock;\n    exacaMock.mockImplementation(() => {\n      throw new Error();\n    });\n    const vsfTuConfigFilePath = '/home/root/test/nuxt.config.js';\n    const generatedTemplatePath = '/home/root/test';\n\n    await processTemplate({ vsfTuConfigFilePath, generatedTemplatePath });\n\n    expect(log.error).toHaveBeenCalledWith(expect.any(String));\n  });","file":"scripts/createTemplate/processTemplate.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"should log when removing config file fail","suites":["[@core/cli/scripts] Process Template"],"updatePoint":{"line":59,"column":47},"line":59,"code":"  it('should log when removing config file fail', async () => {\n    const removeFile = fs.unlinkSync as jest.Mock;\n    removeFile.mockImplementation(() => {\n      throw new Error();\n    });\n    const vsfTuConfigFilePath = '/home/root/test/nuxt.config.js';\n    const generatedTemplatePath = '/home/root/test';\n\n    await processTemplate({ vsfTuConfigFilePath, generatedTemplatePath });\n\n    expect(log.error).toHaveBeenCalledWith(expect.any(String));\n  });","file":"scripts/createTemplate/processTemplate.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"should log when removeFolder function fail","suites":["[@core/cli/scripts] Process Template"],"updatePoint":{"line":72,"column":48},"line":72,"code":"  it('should log when removeFolder function fail', async () => {\n    const removeFolderMock = removeFolder as jest.Mock;\n    removeFolderMock.mockImplementation(() => {\n      throw new Error();\n    });\n    const vsfTuConfigFilePath = '/home/root/test/nuxt.config.js';\n    const generatedTemplatePath = '/home/root/test';\n\n    await processTemplate({ vsfTuConfigFilePath, generatedTemplatePath });\n\n    expect(log.error).toHaveBeenCalledWith(expect.any(String));\n  });","file":"scripts/createTemplate/processTemplate.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"integrations should be an object","suites":["[@core/cli/src/utils] Integrations"],"updatePoint":{"line":4,"column":38},"line":4,"code":"  it('integrations should be an object', () => {\n    expect(integrations).toEqual(expect.any(Object));\n  });","file":"utils/getIntegrations.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"should generate string for config file","suites":["[@core/cli/src/utils] VSF theme utils config"],"updatePoint":{"line":4,"column":44},"line":4,"code":"  it('should generate string for config file', () => {\n    const outputPathName = 'home/test';\n    const themePath = 'home/theme';\n    const _themePath = 'home/theme/_theme';\n    const result = vsfTuConfig({ outputPathName, themePath, _themePath });\n\n    expect(result).toMatch(\n      /('home\\/test'|'home\\/theme'|'home\\/theme\\/_theme')/i\n    );\n  });","file":"utils/themeUtilsConfigTemplate.spec.ts","skipped":false,"dir":"packages/core/cli/__tests__"},{"name":"Mobile Menu","suites":["useUiState"],"updatePoint":{"line":20,"column":17},"line":20,"code":"  it('Mobile Menu', () => {\n    const expectedIsMobileMenuOpen = !isMobileMenuOpen.value;\n\n    toggleMobileMenu();\n\n    expect(expectedIsMobileMenuOpen).toBe(isMobileMenuOpen.value);\n  });","file":"composables/useUiState.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"Cart Sidebar","suites":["useUiState"],"updatePoint":{"line":28,"column":18},"line":28,"code":"  it('Cart Sidebar', () => {\n    const expectedIsCartSidebarOpen = !isCartSidebarOpen.value;\n\n    toggleCartSidebar();\n\n    expect(expectedIsCartSidebarOpen).toBe(isCartSidebarOpen.value);\n  });","file":"composables/useUiState.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"Wishlist Sidebar","suites":["useUiState"],"updatePoint":{"line":36,"column":22},"line":36,"code":"  it('Wishlist Sidebar', () => {\n    const expectedIsWishlistSidebarOpen = !isWishlistSidebarOpen.value;\n\n    toggleWishlistSidebar();\n\n    expect(expectedIsWishlistSidebarOpen).toBe(isWishlistSidebarOpen.value);\n  });","file":"composables/useUiState.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"Login Modal","suites":["useUiState"],"updatePoint":{"line":44,"column":17},"line":44,"code":"  it('Login Modal', () => {\n    const expectedIsLoginModalOpen = !isLoginModalOpen.value;\n\n    toggleLoginModal();\n\n    expect(expectedIsLoginModalOpen).toBe(isLoginModalOpen.value);\n  });","file":"composables/useUiState.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"Grid View","suites":["useUiState"],"updatePoint":{"line":52,"column":15},"line":52,"code":"  it('Grid View', () => {\n    const expectedIsCategoryGridView = isCategoryGridView.value;\n\n    changeToCategoryGridView();\n\n    expect(expectedIsCategoryGridView).toBe(isCategoryGridView.value);\n  });","file":"composables/useUiState.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"List View","suites":["useUiState"],"updatePoint":{"line":60,"column":15},"line":60,"code":"  it('List View', () => {\n    const expectedIsCategoryGridView = !isCategoryGridView.value;\n\n    changeToCategoryListView();\n\n    expect(expectedIsCategoryGridView).toBe(isCategoryGridView.value);\n  });","file":"composables/useUiState.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"Filter Sidebar","suites":["useUiState"],"updatePoint":{"line":68,"column":20},"line":68,"code":"  it('Filter Sidebar', () => {\n    const expectedIsFilterSidebarOpen = !isFilterSidebarOpen.value;\n\n    toggleFilterSidebar();\n\n    expect(expectedIsFilterSidebarOpen).toBe(isFilterSidebarOpen.value);\n  });","file":"composables/useUiState.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"Should return passed config with overrides property","suites":["[CORE - factories] apiClientFactory"],"updatePoint":{"line":12,"column":57},"line":12,"code":"  it('Should return passed config with overrides property', () => {\n    const params = {\n      onCreate: jest.fn((config) => ({ config })),\n      defaultSettings: { option: 'option' }\n    };\n\n    const { createApiClient } = apiClientFactory<any, any>(params as any) as any;\n\n    expect(createApiClient({}).settings).toEqual({});\n  });","file":"factories/apiClientFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"Should merge with default settings when setup is called","suites":["[CORE - factories] apiClientFactory"],"updatePoint":{"line":23,"column":61},"line":23,"code":"  it('Should merge with default settings when setup is called', () => {\n    const params = {\n      onCreate: jest.fn((config) => ({ config })),\n      defaultSettings: { option: 'option' }\n    };\n\n    const { createApiClient} = apiClientFactory<any, any>(params as any) as any;\n\n    const { settings } = createApiClient({ newOption: 'newOption'});\n\n    expect(settings).toEqual({\n      newOption: 'newOption'\n    });\n  });","file":"factories/apiClientFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"Should run onCreate when setup is invoked","suites":["[CORE - factories] apiClientFactory"],"updatePoint":{"line":38,"column":47},"line":38,"code":"  it('Should run onCreate when setup is invoked', () => {\n    const params = {\n      onCreate: jest.fn((config) => ({ config })),\n      defaultSettings: {}\n    };\n\n    const { createApiClient } = apiClientFactory<any, any>(params as any);\n\n    createApiClient({});\n\n    expect(params.onCreate).toHaveBeenCalled();\n  });","file":"factories/apiClientFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"Should run given extensions","suites":["[CORE - factories] apiClientFactory"],"updatePoint":{"line":51,"column":33},"line":51,"code":"  it('Should run given extensions', () => {\n    const beforeCreate = jest.fn(a => a);\n    const afterCreate = jest.fn(a => a);\n    const extension = {\n      name: 'extTest',\n      hooks: () => ({ beforeCreate, afterCreate })\n    };\n\n    const params = {\n      onCreate: jest.fn((config) => ({ config })),\n      defaultSettings: {},\n      extensions: [extension]\n    };\n\n    const { createApiClient } = apiClientFactory<any, any>(params as any);\n    const extensions = (createApiClient as any)._predefinedExtensions;\n\n    createApiClient.bind({ middleware: { req: null, res: null, extensions } })({});\n\n    expect(beforeCreate).toHaveBeenCalled();\n    expect(afterCreate).toHaveBeenCalled();\n  });","file":"factories/apiClientFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"applyContextToApi adds context as first argument to api functions","suites":["[CORE - factories] apiClientFactory"],"updatePoint":{"line":74,"column":71},"line":74,"code":"  it('applyContextToApi adds context as first argument to api functions', () => {\n    const api = {\n      firstFunc: jest.fn(),\n      secondFunc: jest.fn(),\n      thirdFunc: jest.fn()\n    };\n    const context = {\n      extendQuery: jest.fn()\n    };\n\n    const apiWithContext: any = applyContextToApi(api, context);\n\n    apiWithContext.firstFunc();\n    apiWithContext.secondFunc('TEST');\n    apiWithContext.thirdFunc('A', 'FEW', 'ARGS');\n\n    expect(api.firstFunc).toHaveBeenCalledWith(\n      expect.objectContaining({ extendQuery: expect.any(Function) })\n    );\n    expect(api.secondFunc).toHaveBeenCalledWith(\n      expect.objectContaining({ extendQuery: expect.any(Function) }),\n      'TEST'\n    );\n    expect(api.thirdFunc).toHaveBeenCalledWith(\n      expect.objectContaining({ extendQuery: expect.any(Function) }),\n      'A', 'FEW', 'ARGS'\n    );\n  });","file":"factories/apiClientFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns base url based on incomming headers","suites":["[CORE - factories] apiFactory/_proxyUtils"],"updatePoint":{"line":8,"column":49},"line":8,"code":"  it('returns base url based on incomming headers', () => {\n    expect(utils.getBaseUrl(null)).toEqual('/api/')\n\n    ;(isHttps as jest.Mock).mockReturnValue(true);\n    expect(utils.getBaseUrl({ headers: { host: 'some-domain' } } as any)).toEqual('https://some-domain/api/')\n\n    ;(isHttps as jest.Mock).mockReturnValue(false);\n    expect(utils.getBaseUrl({ headers: { host: 'some-domain' } } as any)).toEqual('http://some-domain/api/')\n\n    ;(isHttps as jest.Mock).mockReturnValue(true);\n    expect(utils.getBaseUrl({ headers: { host: 'some-domain', 'x-forwarded-host': 'forwarded-host' } } as any)).toEqual('https://forwarded-host/api/')\n\n    ;(isHttps as jest.Mock).mockReturnValue(false);\n    expect(utils.getBaseUrl({ headers: { host: 'some-domain', 'x-forwarded-host': 'forwarded-host' } } as any)).toEqual('http://forwarded-host/api/');\n  });","file":"factories/proxyUtils.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns proxy for defined api","suites":["[CORE - factories] apiFactory/_proxyUtils"],"updatePoint":{"line":24,"column":35},"line":24,"code":"  it('returns proxy for defined api', () => {\n    const givenApi = {\n      getProduct: jest.fn()\n    };\n\n    const client = {\n      post: jest.fn(() => ({ then: jest.fn() }))\n    };\n\n    const proxiedApi = utils.createProxiedApi({ givenApi, client, tag: 'ct' });\n\n    proxiedApi.getProduct({ product: 1 });\n    proxiedApi.getCategory({ category: 1 });\n\n    expect(givenApi.getProduct).toBeCalled();\n    expect(client.post).toBeCalledWith('/ct/getCategory', [{ category: 1 }]);\n  });","file":"factories/proxyUtils.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"reads cookies from incomming request","suites":["[CORE - factories] apiFactory/_proxyUtils"],"updatePoint":{"line":42,"column":42},"line":42,"code":"  it('reads cookies from incomming request', () => {\n    expect(utils.getCookies(null)).toEqual('');\n    expect(utils.getCookies({} as any)).toEqual('');\n    expect(utils.getCookies({ req: { headers: {} } } as any)).toEqual('');\n    expect(utils.getCookies({ req: { headers: { cookie: { someCookie: 1 } } } } as any)).toEqual({ someCookie: 1 });\n  });","file":"factories/proxyUtils.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"it cobines config with the current one","suites":["[CORE - factories] apiFactory/_proxyUtils"],"updatePoint":{"line":49,"column":44},"line":49,"code":"  it('it cobines config with the current one', () => {\n    jest.spyOn(utils, 'getCookies').mockReturnValue('');\n    jest.spyOn(utils, 'getBaseUrl').mockReturnValue('some-url');\n\n    expect(utils.getIntegrationConfig(\n      null,\n      { someGivenOption: 1 }\n    )).toEqual({\n      axios: {\n        baseURL: 'some-url',\n        headers: {}\n      },\n      someGivenOption: 1\n    });\n  });","file":"factories/proxyUtils.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"it cobines config with the current one and adds a cookie","suites":["[CORE - factories] apiFactory/_proxyUtils"],"updatePoint":{"line":65,"column":62},"line":65,"code":"  it('it cobines config with the current one and adds a cookie', () => {\n    jest.spyOn(utils, 'getCookies').mockReturnValue('xxx');\n    jest.spyOn(utils, 'getBaseUrl').mockReturnValue('some-url');\n\n    expect(utils.getIntegrationConfig(\n      null,\n      {}\n    )).toEqual({\n      axios: {\n        baseURL: 'some-url',\n        headers: {\n          cookie: 'xxx'\n        }\n      }\n    });\n  });","file":"factories/proxyUtils.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should have proper initial properties","suites":["[CORE - factories] useBillingFactory","initial setup"],"updatePoint":{"line":16,"column":45},"line":16,"code":"    it('should have proper initial properties', () => {\n      const useBilling = useBillingFactory(factoryParams);\n      const { loading, billing, error } = useBilling();\n\n      expect(billing.value).toEqual(null);\n      expect(loading.value).toEqual(false);\n      expect(error.value).toMatchObject({});\n    });","file":"factories/useBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"loading works during save execution","suites":["[CORE - factories] useBillingFactory","initial setup"],"updatePoint":{"line":25,"column":43},"line":25,"code":"    it('loading works during save execution', async () => {\n      const { loading } = useBillingMethods;\n      let resolver = null;\n      factoryParams.save.mockReturnValueOnce(new Promise((resolve) => {\n        resolver = resolve;\n      }));\n      useBillingMethods.save({ params: {}, billingDetails: {} });\n      expect(loading.value).toBe(true);\n      resolver();\n      setTimeout(()=>{\n        expect(loading.value).toBe(false);\n      }, 0);\n    });","file":"factories/useBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"loading works during load execution","suites":["[CORE - factories] useBillingFactory","initial setup"],"updatePoint":{"line":39,"column":43},"line":39,"code":"    it('loading works during load execution', async () => {\n      const { loading } = useBillingMethods;\n      let resolver = null;\n      factoryParams.load.mockReturnValueOnce(new Promise((resolve) => {\n        resolver = resolve;\n      }));\n      useBillingMethods.load();\n      expect(loading.value).toBe(true);\n      resolver();\n      setTimeout(()=>{\n        expect(loading.value).toBe(false);\n      }, 0);\n    });","file":"factories/useBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"save method execution clears error","suites":["[CORE - factories] useBillingFactory","initial setup"],"updatePoint":{"line":53,"column":42},"line":53,"code":"    it('save method execution clears error', async () => {\n      const { error } = useBillingMethods;\n      const errorMsg = 'errorMsg';\n      factoryParams.save.mockReturnValueOnce(new Promise((_, reject) => {\n        reject(errorMsg);\n      }));\n      await useBillingMethods.save({ params: {}, billingDetails: {} });\n      expect(error.value.save).toBe(errorMsg);\n      await useBillingMethods.save({ params: {}, billingDetails: {} });\n      expect(error.value.save).toBe(null);\n    });","file":"factories/useBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"load method execution clears error","suites":["[CORE - factories] useBillingFactory","initial setup"],"updatePoint":{"line":65,"column":42},"line":65,"code":"    it('load method execution clears error', async () => {\n      const { error } = useBillingMethods;\n      const errorMsg = 'errorMsg';\n      factoryParams.load.mockReturnValueOnce(new Promise((_, reject) => {\n        reject(errorMsg);\n      }));\n      await useBillingMethods.load();\n      expect(error.value.load).toBe(errorMsg);\n      await useBillingMethods.load();\n      expect(error.value.load).toBe(null);\n    });","file":"factories/useBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"load method sets billing info","suites":["[CORE - factories] useBillingFactory","initial setup"],"updatePoint":{"line":77,"column":37},"line":77,"code":"    it('load method sets billing info', async () => {\n      const billingInfo = { name: 'Test'};\n      factoryParams.load.mockReturnValueOnce(billingInfo);\n      await useBillingMethods.load();\n      expect(useBillingMethods.billing.value).toEqual(billingInfo);\n    });","file":"factories/useBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"load method supports custom query","suites":["[CORE - factories] useBillingFactory","initial setup"],"updatePoint":{"line":84,"column":41},"line":84,"code":"    it('load method supports custom query', async () => {\n      const billingInfo = { name: 'Test'};\n      const customQuery = 123;\n      factoryParams.load.mockReturnValueOnce(billingInfo);\n      await useBillingMethods.load({ customQuery: customQuery as any });\n      expect((factoryParams.load.mock.calls[0] as any)[0]).toMatchObject({ customQuery });\n      expect(useBillingMethods.billing.value).toEqual(billingInfo);\n    });","file":"factories/useBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"save method sets billing info","suites":["[CORE - factories] useBillingFactory","initial setup"],"updatePoint":{"line":93,"column":37},"line":93,"code":"    it('save method sets billing info', async () => {\n      const billingInfo = { name: 'Test'};\n      factoryParams.save.mockReturnValueOnce(billingInfo);\n      await useBillingMethods.save({ params: {}, billingDetails: {} });\n      expect(useBillingMethods.billing.value).toEqual(billingInfo);\n    });","file":"factories/useBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should have proper initial properties","suites":["[CORE - factories] useCartFactory","initial setup"],"updatePoint":{"line":51,"column":45},"line":51,"code":"    it('should have proper initial properties', async () => {\n      const { cart, loading } = useCart();\n\n      expect(cart.value).toEqual(null);\n      expect(loading.value).toEqual(false);\n    });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should not load cart if is provided during factory creation","suites":["[CORE - factories] useCartFactory","initial setup"],"updatePoint":{"line":58,"column":67},"line":58,"code":"    it('should not load cart if is provided during factory creation', () => {\n      createComposable();\n      useCart();\n      expect(params.load).not.toBeCalled();\n    });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"set given cart","suites":["[CORE - factories] useCartFactory","initial setup"],"updatePoint":{"line":63,"column":22},"line":63,"code":"    it('set given cart', () => {\n      const { cart, setCart } = useCart();\n      expect(cart.value).toEqual(null);\n      setCart({ cart: 'test' });\n      expect(sharedRef).toHaveBeenCalled();\n    });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should invoke implemented isInCart method","suites":["[CORE - factories] useCartFactory","computes","isInCart"],"updatePoint":{"line":73,"column":51},"line":73,"code":"      it('should invoke implemented isInCart method', () => {\n        const { isInCart } = useCart();\n        const result = isInCart({ product: { id: 'productId' } });\n        expect(result).toEqual(true);\n        expect(params.isInCart).toBeCalledWith({\n          currentCart: null,\n          product: { id: 'productId' }\n        });\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"load the cart","suites":["[CORE - factories] useCartFactory","methods","load"],"updatePoint":{"line":87,"column":23},"line":87,"code":"      it('load the cart', async () => {\n        createComposable();\n\n        const { load, cart } = useCart();\n        await load();\n        await load();\n        expect(params.load).toHaveBeenCalled();\n        expect(cart.value).toEqual({ id: 'mocked_cart' });\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useCartFactory","methods","load"],"updatePoint":{"line":97,"column":52},"line":97,"code":"      it('should set error if factory method throwed', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.load.mockImplementationOnce(() => {\n          throw err;\n        });\n        const { load, error } = useCartMock();\n\n        await load();\n\n        expect(error.value.load).toBe(err);\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should invoke adding to cart","suites":["[CORE - factories] useCartFactory","methods","addItem"],"updatePoint":{"line":111,"column":38},"line":111,"code":"      it('should invoke adding to cart', async () => {\n        const { addItem, cart } = useCart();\n        await addItem({ product: { id: 'productId' }, quantity: 2});\n        expect(params.addItem).toHaveBeenCalledWith({\n          currentCart: null,\n          product: { id: 'productId' },\n          quantity: 2\n        });\n        expect(cart.value).toEqual({ id: 'mocked_added_cart' });\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useCartFactory","methods","addItem"],"updatePoint":{"line":122,"column":52},"line":122,"code":"      it('should set error if factory method throwed', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.addItem.mockImplementationOnce(() => {\n          throw err;\n        });\n        const { addItem, error } = useCartMock();\n\n        await addItem({ product: { id: 'productId' }, quantity: 1 });\n\n        expect(error.value.addItem).toBe(err);\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should invoke adding to cart","suites":["[CORE - factories] useCartFactory","methods","removeItem"],"updatePoint":{"line":136,"column":38},"line":136,"code":"      it('should invoke adding to cart', async () => {\n        const { removeItem, cart } = useCart();\n        await removeItem({ product: { id: 'productId' }});\n        expect(params.removeItem).toHaveBeenCalledWith({\n          currentCart: null,\n          product: { id: 'productId' }\n        });\n        expect(cart.value).toEqual({ id: 'mocked_removed_cart' });\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useCartFactory","methods","removeItem"],"updatePoint":{"line":146,"column":52},"line":146,"code":"      it('should set error if factory method throwed', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.removeItem.mockImplementationOnce(() => {\n          throw err;\n        });\n        const { removeItem, error } = useCartMock();\n\n        await removeItem({ product: { id: 'productId' } });\n\n        expect(error.value.removeItem).toBe(err);\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should not invoke quantity update if quantity is not provided","suites":["[CORE - factories] useCartFactory","methods","updateItemQty"],"updatePoint":{"line":160,"column":71},"line":160,"code":"      it('should not invoke quantity update if quantity is not provided', async () => {\n        const { updateItemQty } = useCart();\n        await updateItemQty({ product: { id: 'productId' } });\n        expect(params.updateItemQty).not.toBeCalled();\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should not invoke quantity update if quantity is lower than 1","suites":["[CORE - factories] useCartFactory","methods","updateItemQty"],"updatePoint":{"line":166,"column":71},"line":166,"code":"      it('should not invoke quantity update if quantity is lower than 1', async () => {\n        const { updateItemQty } = useCart();\n        await updateItemQty({ product: { id: 'productId' }, quantity: 0 });\n        expect(params.updateItemQty).not.toBeCalled();\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should invoke quantity update","suites":["[CORE - factories] useCartFactory","methods","updateItemQty"],"updatePoint":{"line":172,"column":39},"line":172,"code":"      it('should invoke quantity update', async () => {\n        const { updateItemQty, cart } = useCart();\n        await updateItemQty({ product: { id: 'productId' }, quantity: 2 });\n        expect(params.updateItemQty).toHaveBeenCalledWith({\n          currentCart: null,\n          product: { id: 'productId' },\n          quantity: 2\n        });\n        expect(cart.value).toEqual({ id: 'mocked_updated_quantity_cart' });\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useCartFactory","methods","updateItemQty"],"updatePoint":{"line":183,"column":52},"line":183,"code":"      it('should set error if factory method throwed', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.updateItemQty.mockImplementationOnce(() => {\n          throw err;\n        });\n        const { updateItemQty, error } = useCartMock();\n\n        await updateItemQty({ product: { id: 'productId' }, quantity: 1 });\n\n        expect(error.value.updateItemQty).toBe(err);\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should invoke clear","suites":["[CORE - factories] useCartFactory","methods","clear"],"updatePoint":{"line":197,"column":29},"line":197,"code":"      it('should invoke clear', async () => {\n        const { clear, cart } = useCart();\n        await clear();\n        expect(params.clear).toHaveBeenCalledWith({ currentCart: null });\n        expect(cart.value).toEqual({ id: 'mocked_cleared_cart' });\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useCartFactory","methods","clear"],"updatePoint":{"line":204,"column":52},"line":204,"code":"      it('should set error if factory method throwed', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.clear.mockImplementationOnce(() => {\n          throw err;\n        });\n        const { clear, error } = useCartMock();\n\n        await clear();\n\n        expect(error.value.clear).toBe(err);\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should apply provided coupon","suites":["[CORE - factories] useCartFactory","methods","applyCoupon"],"updatePoint":{"line":218,"column":38},"line":218,"code":"      it('should apply provided coupon', async () => {\n        const { applyCoupon, cart } = useCart();\n        await applyCoupon({ couponCode: 'qwerty' });\n        expect(params.applyCoupon).toHaveBeenCalledWith({\n          currentCart: null,\n          couponCode: 'qwerty'\n        });\n        expect(cart.value).toEqual({ id: 'mocked_apply_coupon_cart' });\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useCartFactory","methods","applyCoupon"],"updatePoint":{"line":228,"column":52},"line":228,"code":"      it('should set error if factory method throwed', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.applyCoupon.mockImplementationOnce(() => {\n          throw err;\n        });\n        const { applyCoupon, error } = useCartMock();\n\n        await applyCoupon({ couponCode: 'qwerty' });\n\n        expect(error.value.applyCoupon).toBe(err);\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should remove existing coupon","suites":["[CORE - factories] useCartFactory","methods","removeCoupon"],"updatePoint":{"line":242,"column":39},"line":242,"code":"      it('should remove existing coupon', async () => {\n        const { removeCoupon, cart } = useCart();\n        const couponCode = 'some-coupon-code-12321231';\n        await removeCoupon({ couponCode });\n        expect(params.removeCoupon).toHaveBeenCalledWith({\n          currentCart: null,\n          couponCode\n        });\n        expect(cart.value).toEqual({ id: 'mocked_removed_coupon_cart' });\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useCartFactory","methods","removeCoupon"],"updatePoint":{"line":253,"column":52},"line":253,"code":"      it('should set error if factory method throwed', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.removeCoupon.mockImplementationOnce(() => {\n          throw err;\n        });\n        const { removeCoupon, error } = useCartMock();\n        const couponCode = 'some-coupon-code-12321231';\n\n        await removeCoupon({ couponCode });\n\n        expect(error.value.removeCoupon).toBe(err);\n      });","file":"factories/useCartFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should have proper initial properties when no persisted state set","suites":["[CORE - factories] useCategoryFactory","initial setup"],"updatePoint":{"line":29,"column":73},"line":29,"code":"    it('should have proper initial properties when no persisted state set', () => {\n      const { loading, categories } = useCategory();\n\n      expect(categories.value).toEqual([]);\n      expect(loading.value).toEqual(false);\n    });","file":"factories/useCategoryFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should invoke search","suites":["[CORE - factories] useCategoryFactory","methods","search"],"updatePoint":{"line":39,"column":30},"line":39,"code":"      it('should invoke search', async () => {\n        const { categories, search } = useCategory();\n        expect(categories.value).toEqual([]);\n        await search({ someparam: 'qwerty' });\n        expect(params.categorySearch).toBeCalledWith({ someparam: 'qwerty' });\n        expect(categories.value).toEqual({ id: 'mocked_removed_cart' });\n      });","file":"factories/useCategoryFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useCategoryFactory","methods","search"],"updatePoint":{"line":47,"column":52},"line":47,"code":"      it('should set error if factory method throwed', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.categorySearch.mockImplementationOnce(() => {\n          throw err;\n        });\n        const { search, error } = useCategoryMock('a');\n\n        await search({ someparam: 'qwerty' });\n\n        expect(error.value.search).toBe(err);\n      });","file":"factories/useCategoryFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns content initial values","suites":["[CORE - factories] useContentFactory"],"updatePoint":{"line":31,"column":36},"line":31,"code":"  it('returns content initial values', () => {\n    const { loading, content, error } = useContent('test-id');\n\n    expect(content.value).toEqual([]);\n    expect(loading.value).toEqual(false);\n    expect(error.value).toEqual({\n      search: null\n    });\n  });","file":"factories/useContentFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"invokes content search","suites":["[CORE - factories] useContentFactory"],"updatePoint":{"line":41,"column":28},"line":41,"code":"  it('invokes content search', async () => {\n    const { search } = useContent('test-id');\n    const searchParams = { contentId: 'test-id', contentUrl: 'test-url' };\n    await search(searchParams);\n\n    expect(params.search).toBeCalledWith(searchParams);\n    expect(params.search).toBeCalledTimes(1);\n  });","file":"factories/useContentFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useContentFactory"],"updatePoint":{"line":50,"column":48},"line":50,"code":"  it('should set error if factory method throwed', async () => {\n    const err = new Error('zxczxcx');\n    factoryParams.search.mockImplementationOnce(() => {\n      throw err;\n    });\n    const { search, error } = useContentMock('a');\n\n    await search({ someparam: 'qwerty' });\n\n    expect(error.value.search).toBe(err);\n  });","file":"factories/useContentFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"renders content as a Vue component","suites":["[CORE - factories] renderContentFactory"],"updatePoint":{"line":76,"column":40},"line":76,"code":"  it('renders content as a Vue component', () => {\n    const content = [{\n      componentName: 'TestComponent',\n      props: {\n        title: 'test title'\n      }\n    }];\n    const component = shallowMount(renderContent, {\n      propsData: {\n        content\n      },\n      components: {\n        TestComponent: {}\n      }\n    });\n\n    expect(component).toMatchObject({ isFunctionalComponent: undefined });\n  });","file":"factories/useContentFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"creates properties","suites":["[CORE - factories] useFacetFactory"],"updatePoint":{"line":10,"column":24},"line":10,"code":"  it('creates properties', () => {\n    const factorySearch = () => jest.fn();\n\n    const useFacet = useFacetFactory({ search: factorySearch } as any);\n    const { result, loading } = useFacet();\n\n    expect(result.value).toEqual({ data: null, input: null });\n    expect(loading.value).toEqual(false);\n  });","file":"factories/useFacetFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"triggers search","suites":["[CORE - factories] useFacetFactory"],"updatePoint":{"line":20,"column":21},"line":20,"code":"  it('triggers search', () => {\n    const factorySearch = () => jest.fn();\n\n    const useFacet = useFacetFactory({ search: factorySearch } as any);\n    const { result, loading, search } = useFacet();\n\n    search({ param: 'test' });\n    expect(result.value).toEqual({ data: null, input: { param: 'test' } });\n    expect(loading.value).toEqual(true);\n  });","file":"factories/useFacetFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useFacetFactory"],"updatePoint":{"line":31,"column":48},"line":31,"code":"  it('should set error if factory method throwed', async () => {\n    const err = new Error('zxczxcx');\n    factoryParams.search.mockImplementationOnce(() => {\n      throw err;\n    });\n    const { search, error } = useFacetMock('a');\n\n    await search({ someparam: 'qwerty' });\n\n    expect(error.value.search).toBe(err);\n  });","file":"factories/useFacetFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should have proper initial properties","suites":["[CORE - factories] useForgotPassword","initial setup"],"updatePoint":{"line":16,"column":45},"line":16,"code":"    it('should have proper initial properties', () => {\n      const useForgotPassword = useForgotPasswordFactory(factoryParams);\n      const { result } = useForgotPassword();\n\n      expect(result.value).toEqual({\n        resetPasswordResult: null,\n        setNewPasswordResult: null\n      });\n    });","file":"factories/useForgotPasswordFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"generates reset password token","suites":["[CORE - factories] useForgotPassword","methods","reset"],"updatePoint":{"line":28,"column":40},"line":28,"code":"      it('generates reset password token', async () => {\n        const mockedResetPasswordToken = '1234';\n        factoryParams.resetPassword.mockReturnValueOnce(mockedResetPasswordToken);\n        await useForgotPasswordMethods.request({ email: 'john.doe@gmail.com' });\n        expect(useForgotPasswordMethods.result.value).toEqual(mockedResetPasswordToken);\n      });","file":"factories/useForgotPasswordFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useForgotPassword","methods","reset"],"updatePoint":{"line":35,"column":22},"line":35,"code":"      it('throws error', async () => {\n        const err = new Error('test-568-08989');\n        factoryParams.resetPassword.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useForgotPasswordMethods.request('' as any);\n        await expect(useForgotPasswordMethods.error.value.request).toBe(err);\n      });","file":"factories/useForgotPasswordFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useForgotPassword","methods","reset"],"updatePoint":{"line":44,"column":37},"line":44,"code":"      it('finally loading go to false', () => {\n        expect(useForgotPasswordMethods.loading.value).toBe(false);\n      });","file":"factories/useForgotPasswordFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"sets new password","suites":["[CORE - factories] useForgotPassword","methods","change"],"updatePoint":{"line":49,"column":27},"line":49,"code":"      it('sets new password', async () => {\n        const mockedResult = true;\n        factoryParams.setNewPassword.mockReturnValueOnce(mockedResult);\n        await useForgotPasswordMethods.setNew({ tokenValue: '1234', newPassword: '1234' });\n        expect(useForgotPasswordMethods.result.value).toEqual(mockedResult);\n      });","file":"factories/useForgotPasswordFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useForgotPassword","methods","change"],"updatePoint":{"line":55,"column":22},"line":55,"code":"      it('throws error', async () => {\n        const err = new Error('test-568-5687565');\n        factoryParams.setNewPassword.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useForgotPasswordMethods.setNew('' as any);\n        expect(useForgotPasswordMethods.error.value.setNew).toBe(err);\n      });","file":"factories/useForgotPasswordFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useForgotPassword","methods","change"],"updatePoint":{"line":63,"column":37},"line":63,"code":"      it('finally loading go to false', () => {\n        expect(useForgotPasswordMethods.loading.value).toBe(false);\n      });","file":"factories/useForgotPasswordFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"creates properties","suites":["[CORE - factories] useMakeOrderFactory"],"updatePoint":{"line":10,"column":24},"line":10,"code":"  it('creates properties', () => {\n    const factoryMakeOrder = () => jest.fn();\n\n    const useMakeOrder = useMakeOrderFactory({ make: factoryMakeOrder } as any);\n    const { order, loading } = useMakeOrder();\n\n    expect(order.value).toEqual(null);\n    expect(loading.value).toEqual(false);\n  });","file":"factories/useMakeOrderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"triggers make","suites":["[CORE - factories] useMakeOrderFactory"],"updatePoint":{"line":20,"column":19},"line":20,"code":"  it('triggers make', () => {\n    const factoryMakeOrder = () => jest.fn();\n    const useMakeOrder = useMakeOrderFactory({ make: factoryMakeOrder } as any);\n    const { order, loading, make } = useMakeOrder();\n\n    make({ customQuery: null });\n    expect(order.value).toEqual(null);\n    expect(loading.value).toEqual(true);\n  });","file":"factories/useMakeOrderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useMakeOrderFactory"],"updatePoint":{"line":30,"column":48},"line":30,"code":"  it('should set error if factory method throwed', async () => {\n    const err = new Error('zxczxcx');\n    factoryParams.make.mockImplementationOnce(() => {\n      throw err;\n    });\n    const { make, error } = useMakeOrderMock();\n\n    await make({ customQuery: null });\n\n    expect(error.value.make).toBe(err);\n  });","file":"factories/useMakeOrderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"creates properties","suites":["[CORE - factories] useProductFactory"],"updatePoint":{"line":15,"column":24},"line":15,"code":"  it('creates properties', () => {\n    const { products, loading } = useProduct('test-product');\n\n    expect(products.value).toEqual([]);\n    expect(loading.value).toEqual(false);\n  });","file":"factories/useProductFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns product response","suites":["[CORE - factories] useProductFactory"],"updatePoint":{"line":22,"column":30},"line":22,"code":"  it('returns product response', async () => {\n    const { search, products } = useProduct('test-use-product');\n\n    await search({ slug: 'product-slug' });\n\n    expect(products.value).toEqual([{name: 'product product-slug' }]);\n  });","file":"factories/useProductFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns product response with ssr","suites":["[CORE - factories] useProductFactory"],"updatePoint":{"line":30,"column":39},"line":30,"code":"  it('returns product response with ssr', async () => {\n    const { search, products } = useProduct('test-use-product');\n\n    await search({ slug: 'product-slug' });\n\n    expect(products.value).toEqual([{name: 'product product-slug' }]);\n  });","file":"factories/useProductFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useProductFactory"],"updatePoint":{"line":38,"column":48},"line":38,"code":"  it('should set error if factory method throwed', async () => {\n    const err = new Error('zxczxcx');\n    factoryParams.productsSearch.mockImplementationOnce(() => {\n      throw err;\n    });\n    const { search, error } = useProductMock('a');\n\n    await search({ someparam: 'qwerty' });\n\n    expect(error.value.search).toBe(err);\n  });","file":"factories/useProductFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns proper initial values","suites":["[CORE - factories] useReviews"],"updatePoint":{"line":78,"column":35},"line":78,"code":"  it('returns proper initial values', () => {\n    const { reviews, loading, error } = useReviews('test-reviews');\n\n    expect(reviews.value).toEqual([]);\n    expect(loading.value).toEqual(false);\n    expect(error.value).toEqual({\n      search: null,\n      addReview: null\n    });\n  });","file":"factories/useReviewFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns reviews response","suites":["[CORE - factories] useReviews"],"updatePoint":{"line":89,"column":30},"line":89,"code":"  it('returns reviews response', async () => {\n    const { search, reviews, error } = useReviews('test-reviews');\n\n    await search({});\n\n    expect(reviews.value).toEqual(searchReviewResponse);\n    expect(error.value.search).toBe(null);\n  });","file":"factories/useReviewFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"can submit new review","suites":["[CORE - factories] useReviews"],"updatePoint":{"line":98,"column":27},"line":98,"code":"  it('can submit new review', async () => {\n    const { search, addReview, reviews } = useReviews('test-reviews');\n\n    await search({});\n\n    expect(reviews.value.total).toEqual(1);\n\n    await addReview({});\n\n    expect(reviews.value.total).toEqual(2);\n  });","file":"factories/useReviewFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns error when search fails","suites":["[CORE - factories] useReviews"],"updatePoint":{"line":110,"column":37},"line":110,"code":"  it('returns error when search fails', async () => {\n    const { search, reviews, loading, error } = useReviesError('test-reviews');\n\n    await search({});\n\n    expect(reviews.value).toEqual([]);\n    expect(loading.value).toEqual(false);\n    expect(error.value.search.toString()).toEqual('Error: Couldn\\'t retrieve reviews');\n  });","file":"factories/useReviewFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns error when submit fails","suites":["[CORE - factories] useReviews"],"updatePoint":{"line":120,"column":37},"line":120,"code":"  it('returns error when submit fails', async () => {\n    const { addReview, reviews, loading, error } = useReviesError('test-reviews');\n\n    await addReview({});\n\n    expect(reviews.value).toEqual([]);\n    expect(loading.value).toEqual(false);\n    expect(error.value.addReview.toString()).toEqual('Error: Couldn\\'t submit review');\n  });","file":"factories/useReviewFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should have proper initial properties","suites":["[CORE - factories] useShippingFactory","initial setup"],"updatePoint":{"line":16,"column":45},"line":16,"code":"    it('should have proper initial properties', () => {\n      const useShipping = useShippingFactory(factoryParams);\n      const { loading, shipping, error } = useShipping();\n\n      expect(shipping.value).toEqual(null);\n      expect(loading.value).toEqual(false);\n      expect(error.value).toMatchObject({});\n    });","file":"factories/useShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"loading works during save execution","suites":["[CORE - factories] useShippingFactory","initial setup"],"updatePoint":{"line":25,"column":43},"line":25,"code":"    it('loading works during save execution', async () => {\n      const { loading } = useShippingMethods;\n      let resolver = null;\n      factoryParams.save.mockReturnValueOnce(new Promise((resolve) => {\n        resolver = resolve;\n      }));\n      useShippingMethods.save({ params: {}, shippingDetails: {} });\n      expect(loading.value).toBe(true);\n      resolver();\n      setTimeout(()=>{\n        expect(loading.value).toBe(false);\n      }, 0);\n    });","file":"factories/useShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"loading works during load execution","suites":["[CORE - factories] useShippingFactory","initial setup"],"updatePoint":{"line":39,"column":43},"line":39,"code":"    it('loading works during load execution', async () => {\n      const { loading } = useShippingMethods;\n      let resolver = null;\n      factoryParams.load.mockReturnValueOnce(new Promise((resolve) => {\n        resolver = resolve;\n      }));\n      useShippingMethods.load();\n      expect(loading.value).toBe(true);\n      resolver();\n      setTimeout(()=>{\n        expect(loading.value).toBe(false);\n      }, 0);\n    });","file":"factories/useShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"save method execution clears error","suites":["[CORE - factories] useShippingFactory","initial setup"],"updatePoint":{"line":53,"column":42},"line":53,"code":"    it('save method execution clears error', async () => {\n      const { error } = useShippingMethods;\n      const errorMsg = 'errorMsg';\n      factoryParams.save.mockReturnValueOnce(new Promise((_, reject) => {\n        reject(errorMsg);\n      }));\n      await useShippingMethods.save({ params: {}, shippingDetails: {} });\n      expect(error.value.save).toBe(errorMsg);\n      await useShippingMethods.save({ params: {}, shippingDetails: {} });\n      expect(error.value.save).toBe(null);\n    });","file":"factories/useShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"load method execution clears error","suites":["[CORE - factories] useShippingFactory","initial setup"],"updatePoint":{"line":65,"column":42},"line":65,"code":"    it('load method execution clears error', async () => {\n      const { error } = useShippingMethods;\n      const errorMsg = 'errorMsg';\n      factoryParams.load.mockReturnValueOnce(new Promise((_, reject) => {\n        reject(errorMsg);\n      }));\n      await useShippingMethods.load();\n      expect(error.value.load).toBe(errorMsg);\n      await useShippingMethods.load();\n      expect(error.value.load).toBe(null);\n    });","file":"factories/useShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"load method sets shipping info","suites":["[CORE - factories] useShippingFactory","initial setup"],"updatePoint":{"line":77,"column":38},"line":77,"code":"    it('load method sets shipping info', async () => {\n      const shippingInfo = { name: 'Test'};\n      factoryParams.load.mockReturnValueOnce(shippingInfo);\n      await useShippingMethods.load();\n      expect(useShippingMethods.shipping.value).toEqual(shippingInfo);\n    });","file":"factories/useShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"save method sets shipping info","suites":["[CORE - factories] useShippingFactory","initial setup"],"updatePoint":{"line":84,"column":38},"line":84,"code":"    it('save method sets shipping info', async () => {\n      const shippingInfo = { name: 'Test'};\n      factoryParams.save.mockReturnValueOnce(shippingInfo);\n      await useShippingMethods.save({ params: {}, shippingDetails: {} });\n      expect(useShippingMethods.shipping.value).toEqual(shippingInfo);\n    });","file":"factories/useShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should have proper initial properties","suites":["[CORE - factories] useShippingProviderFactory"],"updatePoint":{"line":12,"column":43},"line":12,"code":"  it('should have proper initial properties', () => {\n    const useShippingProvider = useShippingProviderFactory(factoryParams);\n    const { loading, state, error, setState } = useShippingProvider();\n\n    expect(state.value).toEqual(null);\n    expect(loading.value).toEqual(false);\n    expect(error.value).toMatchObject({});\n    expect(setState).toBeDefined();\n  });","file":"factories/useShippingProviderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"loading works during save execution","suites":["[CORE - factories] useShippingProviderFactory"],"updatePoint":{"line":22,"column":41},"line":22,"code":"  it('loading works during save execution', async () => {\n    let resolver = null;\n    factoryParams.save.mockReturnValueOnce(\n      new Promise((resolve) => {\n        resolver = resolve;\n      })\n    );\n    const useShippingProvider = useShippingProviderFactory(factoryParams);\n    const { loading, save } = useShippingProvider();\n\n    save({ shippingMethod: 'test', customQuery: null });\n    expect(loading.value).toBe(true);\n    resolver();\n    setTimeout(() => {\n      expect(loading.value).toBe(false);\n    }, 0);\n  });","file":"factories/useShippingProviderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"loading works during save execution","suites":["[CORE - factories] useShippingProviderFactory"],"updatePoint":{"line":40,"column":41},"line":40,"code":"  it('loading works during save execution', async () => {\n    let resolver = null;\n    factoryParams.load.mockReturnValueOnce(\n      new Promise((resolve) => {\n        resolver = resolve;\n      })\n    );\n    const useShippingProvider = useShippingProviderFactory(factoryParams);\n    const { loading, load } = useShippingProvider();\n\n    load({ customQuery: null });\n    expect(loading.value).toBe(true);\n    resolver();\n    setTimeout(() => {\n      expect(loading.value).toBe(false);\n    }, 0);\n  });","file":"factories/useShippingProviderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"save method execution clears error","suites":["[CORE - factories] useShippingProviderFactory"],"updatePoint":{"line":58,"column":40},"line":58,"code":"  it('save method execution clears error', async () => {\n    const useShippingProvider = useShippingProviderFactory(factoryParams);\n    const { error, save } = useShippingProvider();\n    const errorMsg = 'errorMsg';\n    factoryParams.save.mockReturnValueOnce(\n      new Promise((_, reject) => {\n        reject(errorMsg);\n      })\n    );\n\n    await save({ shippingMethod: 'test', customQuery: null });\n    expect(error.value.save).toBe(errorMsg);\n    await save({ shippingMethod: 'test', customQuery: null });\n    expect(error.value.save).toBe(null);\n  });","file":"factories/useShippingProviderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"load method execution clears error","suites":["[CORE - factories] useShippingProviderFactory"],"updatePoint":{"line":74,"column":40},"line":74,"code":"  it('load method execution clears error', async () => {\n    const useShippingProvider = useShippingProviderFactory(factoryParams);\n    const { error, load } = useShippingProvider();\n    const errorMsg = 'errorMsg';\n    factoryParams.load.mockReturnValueOnce(\n      new Promise((_, reject) => {\n        reject(errorMsg);\n      })\n    );\n\n    await load();\n    expect(error.value.load).toBe(errorMsg);\n    await load();\n    expect(error.value.load).toBe(null);\n  });","file":"factories/useShippingProviderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"load method sets state value","suites":["[CORE - factories] useShippingProviderFactory"],"updatePoint":{"line":90,"column":34},"line":90,"code":"  it('load method sets state value', async () => {\n    const shippingProviderMock = { test: 'Test provider' };\n    factoryParams.load.mockReturnValueOnce(shippingProviderMock);\n    const useShippingProvider = useShippingProviderFactory(factoryParams);\n    const { state, load } = useShippingProvider();\n\n    await load();\n\n    expect(state.value).toEqual(shippingProviderMock);\n  });","file":"factories/useShippingProviderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"save method sets state","suites":["[CORE - factories] useShippingProviderFactory"],"updatePoint":{"line":101,"column":28},"line":101,"code":"  it('save method sets state', async () => {\n    const shippingProviderMock = { test: 'Test provider' };\n    factoryParams.save.mockReturnValueOnce(shippingProviderMock);\n    const useShippingProvider = useShippingProviderFactory(factoryParams);\n    const { state, save } = useShippingProvider();\n\n    await save({ shippingMethod: 'test', customQuery: null });\n\n    expect(state.value).toEqual(shippingProviderMock);\n  });","file":"factories/useShippingProviderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"sets state manually","suites":["[CORE - factories] useShippingProviderFactory"],"updatePoint":{"line":112,"column":25},"line":112,"code":"  it('sets state manually', () => {\n    const shippingProviderMock = { test: 'Test provider' };\n    const useShippingProvider = useShippingProviderFactory(factoryParams);\n    const { setState, state } = useShippingProvider();\n\n    setState(shippingProviderMock);\n\n    expect(state.value).toEqual(shippingProviderMock);\n  });","file":"factories/useShippingProviderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should have proper initial properties","suites":["[CORE - factories] useStoreFactory","initial setup"],"updatePoint":{"line":24,"column":45},"line":24,"code":"    it('should have proper initial properties', () => {\n      const useStore = useStoreFactory(factoryParams);\n      const { response, loading, error } = useStore();\n\n      expect(response.value).toEqual(null);\n      expect(loading.value).toEqual(false);\n      expect(error.value).toEqual({load: null, change: null});\n    });","file":"factories/useStoreFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should return store data on success","suites":["[CORE - factories] useStoreFactory","methods","load"],"updatePoint":{"line":39,"column":45},"line":39,"code":"      it('should return store data on success', async () => {\n        const store = {key: 'store'};\n        factoryParams.load.mockResolvedValue(store);\n        await useStoreMethods.load();\n        expect(useStoreMethods.response.value).toEqual(store);\n      });","file":"factories/useStoreFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should assign error on fail","suites":["[CORE - factories] useStoreFactory","methods","load"],"updatePoint":{"line":46,"column":37},"line":46,"code":"      it('should assign error on fail', async () => {\n        const error = {key: 'error'};\n        factoryParams.load.mockRejectedValue(error);\n        await useStoreMethods.load();\n        expect(useStoreMethods.error.value.load).toEqual(error);\n      });","file":"factories/useStoreFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should be called with correct arguments","suites":["[CORE - factories] useStoreFactory","methods","load"],"updatePoint":{"line":53,"column":49},"line":53,"code":"      it('should be called with correct arguments', async () => {\n        await useStoreMethods.load();\n        expect(factoryParams.load).toHaveBeenNthCalledWith(1, {\n          customQuery: undefined\n        });\n\n        await useStoreMethods.load({customQuery: {key: 'customQuery'}});\n        expect(factoryParams.load).toHaveBeenNthCalledWith(2, {\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useStoreFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should return store data on success","suites":["[CORE - factories] useStoreFactory","methods","change"],"updatePoint":{"line":69,"column":45},"line":69,"code":"      it('should return store data on success', async () => {\n        factoryParams.change.mockResolvedValue(stores);\n        await useStoreMethods.change({ currentStore, store });\n        expect(useStoreMethods.response.value).toEqual(stores);\n      });","file":"factories/useStoreFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should assign error on fail","suites":["[CORE - factories] useStoreFactory","methods","change"],"updatePoint":{"line":75,"column":37},"line":75,"code":"      it('should assign error on fail', async () => {\n        factoryParams.change.mockRejectedValue(error);\n        await useStoreMethods.change({ currentStore, store });\n        expect(useStoreMethods.error.value.change).toEqual(error);\n      });","file":"factories/useStoreFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should be called with correct arguments","suites":["[CORE - factories] useStoreFactory","methods","change"],"updatePoint":{"line":81,"column":49},"line":81,"code":"      it('should be called with correct arguments', async () => {\n        factoryParams.change.mockResolvedValue(stores);\n\n        await useStoreMethods.change({currentStore, store});\n        expect(factoryParams.change).toHaveBeenNthCalledWith(1, {\n          currentStore, store, customQuery: undefined\n        });\n\n        await useStoreMethods.change({currentStore, store, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.change).toHaveBeenNthCalledWith(2, {\n          currentStore, store, customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useStoreFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should have proper initial properties","suites":["[CORE - factories] useUserBillingFactory"],"updatePoint":{"line":20,"column":43},"line":20,"code":"  it('should have proper initial properties', () => {\n    const useUserBilling = useUserBillingFactory(factoryParams);\n    const {\n      billing,\n      loading\n    } = useUserBilling();\n\n    expect(billing.value).toEqual({});\n    expect(loading.value).toEqual(false);\n  });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"updates addresses","suites":["[CORE - factories] useUserBillingFactory","methods","addAddress"],"updatePoint":{"line":33,"column":27},"line":33,"code":"      it('updates addresses', async () => {\n        const paramsToUpdate = { name: 'Test'};\n        factoryParams.addAddress.mockReturnValueOnce(paramsToUpdate);\n        await useUserBillingMethods.addAddress({ address: paramsToUpdate });\n        expect(useUserBillingMethods.billing.value).toEqual(paramsToUpdate);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserBillingFactory","methods","addAddress"],"updatePoint":{"line":40,"column":22},"line":40,"code":"      it('throws error', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.addAddress.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserBillingMethods.addAddress('' as any);\n        expect(useUserBillingMethods.error.value.addAddress).toBe(err);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserBillingFactory","methods","addAddress"],"updatePoint":{"line":49,"column":37},"line":49,"code":"      it('finally loading go to false', () => {\n        expect(useUserBillingMethods.loading.value).toBe(false);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserBillingFactory","methods","addAddress"],"updatePoint":{"line":53,"column":39},"line":53,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          address: {key: 'address'}\n        };\n\n        await useUserBillingMethods.addAddress({...params});\n        expect(factoryParams.addAddress).toHaveBeenNthCalledWith(1, {\n          ...params,\n          billing: {},\n          customQuery: undefined\n        });\n\n        await useUserBillingMethods.addAddress({...params, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.addAddress).toHaveBeenNthCalledWith(2, {\n          ...params,\n          billing: {},\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"updates addresses","suites":["[CORE - factories] useUserBillingFactory","methods","deleteAddress"],"updatePoint":{"line":75,"column":27},"line":75,"code":"      it('updates addresses', async () => {\n        const paramsToUpdate = { name: 'Test'};\n        factoryParams.deleteAddress.mockReturnValueOnce(paramsToUpdate);\n        await useUserBillingMethods.deleteAddress({ address: paramsToUpdate });\n        expect(useUserBillingMethods.billing.value).toEqual(paramsToUpdate);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserBillingFactory","methods","deleteAddress"],"updatePoint":{"line":82,"column":22},"line":82,"code":"      it('throws error', async () => {\n        const err = new Error('87878dfdf');\n        factoryParams.deleteAddress.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserBillingMethods.deleteAddress('' as any);\n        expect(useUserBillingMethods.error.value.deleteAddress).toBe(err);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserBillingFactory","methods","deleteAddress"],"updatePoint":{"line":91,"column":37},"line":91,"code":"      it('finally loading go to false', () => {\n        expect(useUserBillingMethods.loading.value).toBe(false);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserBillingFactory","methods","deleteAddress"],"updatePoint":{"line":95,"column":39},"line":95,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          address: {key: 'address'}\n        };\n\n        await useUserBillingMethods.deleteAddress({...params});\n        expect(factoryParams.deleteAddress).toHaveBeenNthCalledWith(1, {\n          ...params,\n          billing: {},\n          customQuery: undefined\n        });\n\n        await useUserBillingMethods.deleteAddress({...params, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.deleteAddress).toHaveBeenNthCalledWith(2, {\n          ...params,\n          billing: {},\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"updates addresses","suites":["[CORE - factories] useUserBillingFactory","methods","updateAddress"],"updatePoint":{"line":117,"column":27},"line":117,"code":"      it('updates addresses', async () => {\n        const paramsToUpdate = { name: 'Test'};\n        factoryParams.updateAddress.mockReturnValueOnce(paramsToUpdate);\n        await useUserBillingMethods.updateAddress({ address: paramsToUpdate });\n        expect(useUserBillingMethods.billing.value).toEqual(paramsToUpdate);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserBillingFactory","methods","updateAddress"],"updatePoint":{"line":124,"column":22},"line":124,"code":"      it('throws error', async () => {\n        const err = new Error('23232323');\n        factoryParams.updateAddress.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserBillingMethods.updateAddress('' as any);\n        expect(useUserBillingMethods.error.value.updateAddress).toBe(err);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserBillingFactory","methods","updateAddress"],"updatePoint":{"line":133,"column":37},"line":133,"code":"      it('finally loading go to false', () => {\n        expect(useUserBillingMethods.loading.value).toBe(false);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserBillingFactory","methods","updateAddress"],"updatePoint":{"line":137,"column":39},"line":137,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          address: {key: 'address'}\n        };\n\n        await useUserBillingMethods.updateAddress({...params});\n        expect(factoryParams.updateAddress).toHaveBeenNthCalledWith(1, {\n          ...params,\n          billing: {},\n          customQuery: undefined\n        });\n\n        await useUserBillingMethods.updateAddress({...params, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.updateAddress).toHaveBeenNthCalledWith(2, {\n          ...params,\n          billing: {},\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"updates addresses","suites":["[CORE - factories] useUserBillingFactory","methods","load"],"updatePoint":{"line":159,"column":27},"line":159,"code":"      it('updates addresses', async () => {\n        const paramsToUpdate = { name: 'Test'};\n        factoryParams.load.mockReturnValueOnce(paramsToUpdate);\n        await useUserBillingMethods.load();\n        expect(useUserBillingMethods.billing.value).toEqual(paramsToUpdate);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserBillingFactory","methods","load"],"updatePoint":{"line":166,"column":22},"line":166,"code":"      it('throws error', async () => {\n        const err = new Error('cvcvc');\n        factoryParams.load.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserBillingMethods.load();\n        expect(useUserBillingMethods.error.value.load).toBe(err);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserBillingFactory","methods","load"],"updatePoint":{"line":175,"column":37},"line":175,"code":"      it('finally loading go to false', () => {\n        expect(useUserBillingMethods.loading.value).toBe(false);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"updates addresses","suites":["[CORE - factories] useUserBillingFactory","methods","setDefaultAddress"],"updatePoint":{"line":181,"column":27},"line":181,"code":"      it('updates addresses', async () => {\n        const paramsToUpdate = { name: 'Test'};\n        factoryParams.setDefaultAddress.mockReturnValueOnce(paramsToUpdate);\n        await useUserBillingMethods.setDefaultAddress({ address: paramsToUpdate });\n        expect(useUserBillingMethods.billing.value).toEqual(paramsToUpdate);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserBillingFactory","methods","setDefaultAddress"],"updatePoint":{"line":188,"column":22},"line":188,"code":"      it('throws error', async () => {\n        const err = new Error('adsd');\n        factoryParams.setDefaultAddress.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserBillingMethods.setDefaultAddress('' as any);\n        expect(useUserBillingMethods.error.value.setDefaultAddress).toBe(err);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserBillingFactory","methods","setDefaultAddress"],"updatePoint":{"line":197,"column":37},"line":197,"code":"      it('finally loading go to false', () => {\n        expect(useUserBillingMethods.loading.value).toBe(false);\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserBillingFactory","methods","setDefaultAddress"],"updatePoint":{"line":201,"column":39},"line":201,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          address: {key: 'address'}\n        };\n\n        await useUserBillingMethods.setDefaultAddress({...params});\n        expect(factoryParams.setDefaultAddress).toHaveBeenNthCalledWith(1, {\n          ...params,\n          billing: {},\n          customQuery: undefined\n        });\n\n        await useUserBillingMethods.setDefaultAddress({...params, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.setDefaultAddress).toHaveBeenNthCalledWith(2, {\n          ...params,\n          billing: {},\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserBillingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should have proper initial properties","suites":["[CORE - factories] useUserFactory","initial setup"],"updatePoint":{"line":22,"column":45},"line":22,"code":"    it('should have proper initial properties', () => {\n      const useUser = useUserFactory(factoryParams);\n      const { user, isAuthenticated } = useUser();\n\n      expect(user.value).toEqual(null);\n      expect(isAuthenticated.value).toEqual(false);\n    });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"isAuthenticated returns true for logged in user","suites":["[CORE - factories] useUserFactory","initial setup"],"updatePoint":{"line":30,"column":55},"line":30,"code":"    it('isAuthenticated returns true for logged in user', async () => {\n      const { isAuthenticated } = useUserMethods;\n      const userToLogin = { username: 'John', password: '123456'};\n      factoryParams.logIn.mockReturnValueOnce(\n        userToLogin\n      );\n      await useUserMethods.login({ user: userToLogin });\n      expect(isAuthenticated.value).toBe(true);\n    });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"set given user property","suites":["[CORE - factories] useUserFactory","initial setup"],"updatePoint":{"line":40,"column":31},"line":40,"code":"    it('set given user property', () => {\n      const { setUser } = useUser();\n      setUser({ username: 'test' });\n      expect(sharedRef).toHaveBeenCalled();\n    });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"return updated user data","suites":["[CORE - factories] useUserFactory","methods","updateUser"],"updatePoint":{"line":48,"column":34},"line":48,"code":"      it('return updated user data', async () => {\n        const paramsToUpdate = { name: 'Test'};\n        factoryParams.updateUser.mockReturnValueOnce(paramsToUpdate);\n        await useUserMethods.updateUser({ user: paramsToUpdate });\n        expect(useUserMethods.user.value).toEqual(paramsToUpdate);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserFactory","methods","updateUser"],"updatePoint":{"line":55,"column":22},"line":55,"code":"      it('throws error', async () => {\n        const err = new Error('test-568-08989');\n        factoryParams.updateUser.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserMethods.updateUser('' as any);\n        await expect(useUserMethods.error.value.updateUser).toBe(err);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserFactory","methods","updateUser"],"updatePoint":{"line":64,"column":37},"line":64,"code":"      it('finally loading go to false', () => {\n        expect(useUserMethods.loading.value).toBe(false);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserFactory","methods","updateUser"],"updatePoint":{"line":67,"column":39},"line":67,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          user: {key: 'user'}\n        };\n\n        useUserMethods.setUser(params);\n        await useUserMethods.updateUser(params);\n        expect(factoryParams.updateUser).toHaveBeenNthCalledWith(1, {\n          currentUser: params,\n          updatedUserData: params.user,\n          customQuery: undefined\n        });\n\n        useUserMethods.setUser(params);\n        await useUserMethods.updateUser({...params, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.updateUser).toHaveBeenNthCalledWith(2, {\n          currentUser: params,\n          updatedUserData: params.user,\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"return registered user","suites":["[CORE - factories] useUserFactory","methods","register"],"updatePoint":{"line":90,"column":32},"line":90,"code":"      it('return registered user', async () => {\n        const userToRegister = { email: 'John', password: '123456', firstName: 'Diego', lastName: 'Ramirez'};\n        factoryParams.register.mockReturnValueOnce(userToRegister);\n        await useUserMethods.register({ user: userToRegister });\n        expect(useUserMethods.user.value).toEqual(userToRegister);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserFactory","methods","register"],"updatePoint":{"line":96,"column":22},"line":96,"code":"      it('throws error', async () => {\n        const err = new Error('test-568-5687565');\n        factoryParams.register.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserMethods.register('' as any);\n        expect(useUserMethods.error.value.register).toBe(err);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserFactory","methods","register"],"updatePoint":{"line":104,"column":37},"line":104,"code":"      it('finally loading go to false', () => {\n        expect(useUserMethods.loading.value).toBe(false);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserFactory","methods","register"],"updatePoint":{"line":107,"column":39},"line":107,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          user: { email: 'John', password: '123456', firstName: 'Diego', lastName: 'Ramirez'}\n        };\n\n        await useUserMethods.register(params);\n        expect(factoryParams.register).toHaveBeenNthCalledWith(1, {\n          ...params.user,\n          customQuery: undefined\n        });\n\n        await useUserMethods.register({...params, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.register).toHaveBeenNthCalledWith(2, {\n          ...params.user,\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"return logged user","suites":["[CORE - factories] useUserFactory","methods","login"],"updatePoint":{"line":126,"column":28},"line":126,"code":"      it('return logged user', async () => {\n        const userToLogin = { username: 'John', password: '123456'};\n        factoryParams.logIn.mockReturnValueOnce(\n          userToLogin\n        );\n        await useUserMethods.login({ user: userToLogin });\n        expect(useUserMethods.user.value).toEqual(userToLogin);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserFactory","methods","login"],"updatePoint":{"line":134,"column":22},"line":134,"code":"      it('throws error', async () => {\n        const err = new Error('test-568-232332');\n        factoryParams.logIn.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserMethods.login('' as any);\n        expect(useUserMethods.error.value.login).toBe(err);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserFactory","methods","login"],"updatePoint":{"line":142,"column":37},"line":142,"code":"      it('finally loading go to false', () => {\n        expect(useUserMethods.loading.value).toBe(false);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserFactory","methods","login"],"updatePoint":{"line":145,"column":39},"line":145,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          user: { username: 'John', password: '123456'}\n        };\n\n        await useUserMethods.login(params);\n        expect(factoryParams.logIn).toHaveBeenNthCalledWith(1, {\n          ...params.user,\n          customQuery: undefined\n        });\n\n        await useUserMethods.login({...params, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.logIn).toHaveBeenNthCalledWith(2, {\n          ...params.user,\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"return logout user","suites":["[CORE - factories] useUserFactory","methods","logout"],"updatePoint":{"line":164,"column":28},"line":164,"code":"      it('return logout user', async () => {\n        factoryParams.logOut.mockReturnValueOnce(null);\n        await useUserMethods.logout();\n        expect(factoryParams.logOut).toHaveBeenCalled();\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserFactory","methods","logout"],"updatePoint":{"line":169,"column":22},"line":169,"code":"      it('throws error', async () => {\n        const err = new Error('test-value-568-232332');\n        factoryParams.logOut.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserMethods.logout();\n        expect(useUserMethods.error.value.logout).toBe(err);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserFactory","methods","logout"],"updatePoint":{"line":177,"column":37},"line":177,"code":"      it('finally loading go to false', () => {\n        expect(useUserMethods.loading.value).toBe(false);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserFactory","methods","logout"],"updatePoint":{"line":180,"column":39},"line":180,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          user: { username: 'John', password: '123456'}\n        };\n\n        useUserMethods.setUser(params.user);\n        await useUserMethods.logout();\n        expect(factoryParams.logOut).toHaveBeenNthCalledWith(1, {\n          currentUser: params.user\n        });\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"return loadedUser user","suites":["[CORE - factories] useUserFactory","methods","load"],"updatePoint":{"line":193,"column":32},"line":193,"code":"      it('return loadedUser user', async () => {\n        const user = {firstName: 'John', lastName: 'Galt'};\n        factoryParams.load.mockReturnValueOnce(user);\n        await useUserMethods.load();\n        expect(factoryParams.load).toHaveBeenCalled();\n        expect(useUserMethods.user.value).toEqual(user);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserFactory","methods","load"],"updatePoint":{"line":200,"column":22},"line":200,"code":"      it('throws error', async () => {\n        const err = new Error('test-value-568');\n        factoryParams.load.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserMethods.load();\n        expect(useUserMethods.error.value.load).toBe(err);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserFactory","methods","load"],"updatePoint":{"line":208,"column":37},"line":208,"code":"      it('finally loading go to false', () => {\n        expect(useUserMethods.loading.value).toBe(false);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserFactory","methods","load"],"updatePoint":{"line":211,"column":39},"line":211,"code":"      it('called with correct arguments', async () => {\n        await useUserMethods.load();\n        expect(factoryParams.load).toHaveBeenNthCalledWith(1, {\n          customQuery: undefined\n        });\n\n        await useUserMethods.load({customQuery: {key: 'customQuery'}});\n        expect(factoryParams.load).toHaveBeenNthCalledWith(2, {\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"return logout user","suites":["[CORE - factories] useUserFactory","methods","changePassword"],"updatePoint":{"line":224,"column":28},"line":224,"code":"      it('return logout user', async () => {\n        const changePasswordData = {currentUser: {email: 'tonny@dot.com', password: '123456'}, currentPassword: '123456', newPassword: '654321'};\n        factoryParams.changePassword.mockReturnValueOnce(changePasswordData);\n        await useUserMethods.changePassword({ current: changePasswordData.currentPassword, new: changePasswordData.newPassword });\n        expect(useUserMethods.user.value).toEqual(changePasswordData);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserFactory","methods","changePassword"],"updatePoint":{"line":230,"column":22},"line":230,"code":"      it('throws error', async () => {\n        const err = new Error('test-value');\n        factoryParams.changePassword.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserMethods.changePassword({ current: null as any, new: null as any });\n        expect(useUserMethods.error.value.changePassword).toBe(err);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserFactory","methods","changePassword"],"updatePoint":{"line":238,"column":37},"line":238,"code":"      it('finally loading go to false', () => {\n        expect(useUserMethods.loading.value).toBe(false);\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserFactory","methods","changePassword"],"updatePoint":{"line":241,"column":39},"line":241,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          current: '1',\n          new: '2'\n        };\n\n        const user = {\n          name: 'user'\n        };\n\n        useUserMethods.setUser(user);\n        await useUserMethods.changePassword(params);\n        expect(factoryParams.changePassword).toHaveBeenNthCalledWith(1, {\n          currentUser: user,\n          currentPassword: params.current,\n          newPassword: params.new,\n          customQuery: undefined\n        });\n\n        useUserMethods.setUser(user);\n        await useUserMethods.changePassword({...params, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.changePassword).toHaveBeenNthCalledWith(2, {\n          currentUser: user,\n          currentPassword: params.current,\n          newPassword: params.new,\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should have proper initial props","suites":["[CORE - factories] useUserOrderFactory","initial setup"],"updatePoint":{"line":27,"column":40},"line":27,"code":"    it('should have proper initial props', () => {\n      const { loading, orders } = useUserOrder();\n      expect(loading.value).toEqual(false);\n      expect(orders.value).toEqual(defaultOrdersValue);\n    });","file":"factories/useUserOrderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set search results","suites":["[CORE - factories] useUserOrderFactory","methods","search"],"updatePoint":{"line":36,"column":35},"line":36,"code":"      it('should set search results', async () => {\n        const { search, orders } = useUserOrder();\n        await search({});\n        expect(orders.value).toEqual(['first', 'second']);\n      });","file":"factories/useUserOrderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should disable loading flag on error","suites":["[CORE - factories] useUserOrderFactory","methods","search"],"updatePoint":{"line":42,"column":46},"line":42,"code":"      it('should disable loading flag on error', async () => {\n        const err = new Error('some-error');\n        params.searchOrders = jest.fn().mockImplementationOnce(() => {\n          throw err;\n        });\n        const { search, loading, orders, error } = useUserOrder();\n        await search({});\n        expect(error.value.search).toBe(err);\n\n        expect(loading.value).toEqual(false);\n        expect(orders.value).toEqual(defaultOrdersValue);\n      });","file":"factories/useUserOrderFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should have proper initial properties","suites":["[CORE - factories] useUserShippingFactory"],"updatePoint":{"line":20,"column":43},"line":20,"code":"  it('should have proper initial properties', () => {\n    const useUserShipping = useUserShippingFactory(factoryParams);\n    const {\n      shipping,\n      loading\n    } = useUserShipping();\n\n    expect(shipping.value).toEqual({});\n    expect(loading.value).toEqual(false);\n  });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"updates addresses","suites":["[CORE - factories] useUserShippingFactory","methods","addAddress"],"updatePoint":{"line":33,"column":27},"line":33,"code":"      it('updates addresses', async () => {\n        const paramsToUpdate = { name: 'Test'};\n        factoryParams.addAddress.mockReturnValueOnce(paramsToUpdate);\n        await useUserShippingMethods.addAddress({ address: paramsToUpdate });\n        expect(useUserShippingMethods.shipping.value).toEqual(paramsToUpdate);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserShippingFactory","methods","addAddress"],"updatePoint":{"line":40,"column":22},"line":40,"code":"      it('throws error', async () => {\n        const err = new Error('2323');\n        factoryParams.addAddress.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserShippingMethods.addAddress('' as any);\n        expect(useUserShippingMethods.error.value.addAddress).toBe(err);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserShippingFactory","methods","addAddress"],"updatePoint":{"line":49,"column":37},"line":49,"code":"      it('finally loading go to false', () => {\n        expect(useUserShippingMethods.loading.value).toBe(false);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserShippingFactory","methods","addAddress"],"updatePoint":{"line":53,"column":39},"line":53,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          address: {key: 'address'}\n        };\n\n        await useUserShippingMethods.addAddress({...params});\n        expect(factoryParams.addAddress).toHaveBeenNthCalledWith(1, {\n          ...params,\n          shipping: {},\n          customQuery: undefined\n        });\n\n        await useUserShippingMethods.addAddress({...params, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.addAddress).toHaveBeenNthCalledWith(2, {\n          ...params,\n          shipping: {},\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"updates addresses","suites":["[CORE - factories] useUserShippingFactory","methods","deleteAddress"],"updatePoint":{"line":75,"column":27},"line":75,"code":"      it('updates addresses', async () => {\n        const paramsToUpdate = { name: 'Test'};\n        factoryParams.deleteAddress.mockReturnValueOnce(paramsToUpdate);\n        await useUserShippingMethods.deleteAddress({ address: paramsToUpdate });\n        expect(useUserShippingMethods.shipping.value).toEqual(paramsToUpdate);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserShippingFactory","methods","deleteAddress"],"updatePoint":{"line":82,"column":22},"line":82,"code":"      it('throws error', async () => {\n        const err = new Error('2323');\n        factoryParams.deleteAddress.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserShippingMethods.deleteAddress('' as any);\n        expect(useUserShippingMethods.error.value.deleteAddress).toBe(err);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserShippingFactory","methods","deleteAddress"],"updatePoint":{"line":91,"column":37},"line":91,"code":"      it('finally loading go to false', () => {\n        expect(useUserShippingMethods.loading.value).toBe(false);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserShippingFactory","methods","deleteAddress"],"updatePoint":{"line":95,"column":39},"line":95,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          address: {key: 'address'}\n        };\n\n        await useUserShippingMethods.deleteAddress({...params});\n        expect(factoryParams.deleteAddress).toHaveBeenNthCalledWith(1, {\n          ...params,\n          shipping: {},\n          customQuery: undefined\n        });\n\n        await useUserShippingMethods.deleteAddress({...params, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.deleteAddress).toHaveBeenNthCalledWith(2, {\n          ...params,\n          shipping: {},\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"updates addresses","suites":["[CORE - factories] useUserShippingFactory","methods","updateAddress"],"updatePoint":{"line":117,"column":27},"line":117,"code":"      it('updates addresses', async () => {\n        const paramsToUpdate = { name: 'Test'};\n        factoryParams.updateAddress.mockReturnValueOnce(paramsToUpdate);\n        await useUserShippingMethods.updateAddress({ address: paramsToUpdate });\n        expect(useUserShippingMethods.shipping.value).toEqual(paramsToUpdate);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserShippingFactory","methods","updateAddress"],"updatePoint":{"line":124,"column":22},"line":124,"code":"      it('throws error', async () => {\n        const err = new Error('2323');\n        factoryParams.updateAddress.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserShippingMethods.updateAddress('' as any);\n        expect(useUserShippingMethods.error.value.updateAddress).toBe(err);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserShippingFactory","methods","updateAddress"],"updatePoint":{"line":133,"column":37},"line":133,"code":"      it('finally loading go to false', () => {\n        expect(useUserShippingMethods.loading.value).toBe(false);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserShippingFactory","methods","updateAddress"],"updatePoint":{"line":137,"column":39},"line":137,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          address: {key: 'address'}\n        };\n\n        await useUserShippingMethods.updateAddress({...params});\n        expect(factoryParams.updateAddress).toHaveBeenNthCalledWith(1, {\n          ...params,\n          shipping: {},\n          customQuery: undefined\n        });\n\n        await useUserShippingMethods.updateAddress({...params, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.updateAddress).toHaveBeenNthCalledWith(2, {\n          ...params,\n          shipping: {},\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"updates addresses","suites":["[CORE - factories] useUserShippingFactory","methods","load"],"updatePoint":{"line":159,"column":27},"line":159,"code":"      it('updates addresses', async () => {\n        const paramsToUpdate = { name: 'Test'};\n        factoryParams.load.mockReturnValueOnce(paramsToUpdate);\n        await useUserShippingMethods.load();\n        expect(useUserShippingMethods.shipping.value).toEqual(paramsToUpdate);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserShippingFactory","methods","load"],"updatePoint":{"line":166,"column":22},"line":166,"code":"      it('throws error', async () => {\n        const err = new Error('2323');\n        factoryParams.load.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserShippingMethods.load();\n        expect(useUserShippingMethods.error.value.load).toBe(err);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserShippingFactory","methods","load"],"updatePoint":{"line":175,"column":37},"line":175,"code":"      it('finally loading go to false', () => {\n        expect(useUserShippingMethods.loading.value).toBe(false);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"updates addresses","suites":["[CORE - factories] useUserShippingFactory","methods","setDefaultAddress"],"updatePoint":{"line":181,"column":27},"line":181,"code":"      it('updates addresses', async () => {\n        const paramsToUpdate = { name: 'Test'};\n        factoryParams.setDefaultAddress.mockReturnValueOnce(paramsToUpdate);\n        await useUserShippingMethods.setDefaultAddress({ address: paramsToUpdate });\n        expect(useUserShippingMethods.shipping.value).toEqual(paramsToUpdate);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"throws error","suites":["[CORE - factories] useUserShippingFactory","methods","setDefaultAddress"],"updatePoint":{"line":188,"column":22},"line":188,"code":"      it('throws error', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.setDefaultAddress.mockImplementationOnce(() => {\n          throw err;\n        });\n        await useUserShippingMethods.setDefaultAddress('' as any);\n        expect(useUserShippingMethods.error.value.setDefaultAddress).toBe(err);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"finally loading go to false","suites":["[CORE - factories] useUserShippingFactory","methods","setDefaultAddress"],"updatePoint":{"line":197,"column":37},"line":197,"code":"      it('finally loading go to false', () => {\n        expect(useUserShippingMethods.loading.value).toBe(false);\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"called with correct arguments","suites":["[CORE - factories] useUserShippingFactory","methods","setDefaultAddress"],"updatePoint":{"line":201,"column":39},"line":201,"code":"      it('called with correct arguments', async () => {\n        const params = {\n          address: {key: 'address'}\n        };\n\n        await useUserShippingMethods.setDefaultAddress({...params});\n        expect(factoryParams.setDefaultAddress).toHaveBeenNthCalledWith(1, {\n          ...params,\n          shipping: {},\n          customQuery: undefined\n        });\n\n        await useUserShippingMethods.setDefaultAddress({...params, customQuery: {key: 'customQuery'}});\n        expect(factoryParams.setDefaultAddress).toHaveBeenNthCalledWith(2, {\n          ...params,\n          shipping: {},\n          customQuery: {key: 'customQuery'}\n        });\n      });","file":"factories/useUserShippingFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should have proper initial properties","suites":["[CORE - factories] useWishlistFactory","initial setup"],"updatePoint":{"line":39,"column":45},"line":39,"code":"    it('should have proper initial properties', async () => {\n      const { wishlist, loading } = useWishlist();\n\n      expect(wishlist.value).toEqual(null);\n      expect(loading.value).toEqual(false);\n    });","file":"factories/useWishlistFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should not load wishlist if is provided during factory creation","suites":["[CORE - factories] useWishlistFactory","initial setup"],"updatePoint":{"line":46,"column":71},"line":46,"code":"    it('should not load wishlist if is provided during factory creation', () => {\n      createComposable();\n      useWishlist();\n      expect(params.load).not.toBeCalled();\n    });","file":"factories/useWishlistFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"set given wishlist","suites":["[CORE - factories] useWishlistFactory","initial setup"],"updatePoint":{"line":51,"column":26},"line":51,"code":"    it('set given wishlist', () => {\n      const { wishlist, setWishlist } = useWishlist();\n      expect(wishlist.value).toEqual(null);\n      setWishlist({ wishlist: 'test' });\n      expect(sharedRef).toHaveBeenCalled();\n    });","file":"factories/useWishlistFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should invoke implemented isInWishlist method","suites":["[CORE - factories] useWishlistFactory","computes","isInWishlist"],"updatePoint":{"line":61,"column":55},"line":61,"code":"      it('should invoke implemented isInWishlist method', () => {\n        const { isInWishlist } = useWishlist();\n        const result = isInWishlist({ product: { id: 'productId' } });\n        expect(result).toEqual(true);\n        expect(params.isInWishlist).toBeCalledWith({\n          currentWishlist: null,\n          product: { id: 'productId' }\n        });\n      });","file":"factories/useWishlistFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"load the wishlist","suites":["[CORE - factories] useWishlistFactory","methods","load"],"updatePoint":{"line":75,"column":27},"line":75,"code":"      it('load the wishlist', async () => {\n        createComposable();\n\n        const { load, wishlist } = useWishlist();\n        await load();\n        expect(params.load).toHaveBeenCalledWith({ customQuery });\n        expect(wishlist.value).toEqual({ id: 'mocked_wishlist' });\n      });","file":"factories/useWishlistFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useWishlistFactory","methods","load"],"updatePoint":{"line":84,"column":52},"line":84,"code":"      it('should set error if factory method throwed', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.load.mockImplementationOnce(() => {\n          throw err;\n        });\n        const { load, error } = useWishlistMock();\n\n        await load();\n\n        expect(error.value.load).toBe(err);\n      });","file":"factories/useWishlistFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should invoke adding to wishlist","suites":["[CORE - factories] useWishlistFactory","methods","addItem"],"updatePoint":{"line":98,"column":42},"line":98,"code":"      it('should invoke adding to wishlist', async () => {\n        const { addItem, wishlist } = useWishlist();\n        await addItem({ product: { id: 'productId' } });\n        expect(params.addItem).toHaveBeenCalledWith({\n          currentWishlist: null,\n          product: { id: 'productId' }\n        });\n        expect(wishlist.value).toEqual({ id: 'mocked_added_wishlist' });\n      });","file":"factories/useWishlistFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useWishlistFactory","methods","addItem"],"updatePoint":{"line":108,"column":52},"line":108,"code":"      it('should set error if factory method throwed', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.addItem.mockImplementationOnce(() => {\n          throw err;\n        });\n        const { addItem, error } = useWishlistMock();\n\n        await addItem({\n          product: { id: 'productId' }\n        });\n\n        expect(error.value.addItem).toBe(err);\n      });","file":"factories/useWishlistFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should invoke adding to wishlist","suites":["[CORE - factories] useWishlistFactory","methods","removeItem"],"updatePoint":{"line":124,"column":42},"line":124,"code":"      it('should invoke adding to wishlist', async () => {\n        const { removeItem, wishlist } = useWishlist();\n        await removeItem({ product: { id: 'productId' } });\n        expect(params.removeItem).toHaveBeenCalledWith({\n          currentWishlist: null,\n          product: { id: 'productId' }\n        });\n        expect(wishlist.value).toEqual({ id: 'mocked_removed_wishlist' });\n      });","file":"factories/useWishlistFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useWishlistFactory","methods","removeItem"],"updatePoint":{"line":134,"column":52},"line":134,"code":"      it('should set error if factory method throwed', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.removeItem.mockImplementationOnce(() => {\n          throw err;\n        });\n        const { removeItem, error } = useWishlistMock();\n\n        await removeItem({\n          product: { id: 'productId' }\n        });\n\n        expect(error.value.removeItem).toBe(err);\n      });","file":"factories/useWishlistFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should invoke clear","suites":["[CORE - factories] useWishlistFactory","methods","clear"],"updatePoint":{"line":150,"column":29},"line":150,"code":"      it('should invoke clear', async () => {\n        const { clear, wishlist } = useWishlist();\n        await clear();\n        expect(params.clear).toHaveBeenCalledWith({ currentWishlist: null });\n        expect(wishlist.value).toEqual({ id: 'mocked_cleared_wishlist' });\n      });","file":"factories/useWishlistFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should set error if factory method throwed","suites":["[CORE - factories] useWishlistFactory","methods","clear"],"updatePoint":{"line":157,"column":52},"line":157,"code":"      it('should set error if factory method throwed', async () => {\n        const err = new Error('zxczxcx');\n        factoryParams.clear.mockImplementationOnce(() => {\n          throw err;\n        });\n        const { clear, error } = useWishlistMock();\n\n        await clear();\n\n        expect(error.value.clear).toBe(err);\n      });","file":"factories/useWishlistFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns default implementation","suites":["[CORE - utils] configureSSR"],"updatePoint":{"line":10,"column":36},"line":10,"code":"  it('returns default implementation', () => {\n    expect(vsfRef).toEqual(ref);\n    expect(onSSR).toEqual(onServerPrefetch);\n  });","file":"utils/configureSSR.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns configured implementation","suites":["[CORE - utils] configureSSR"],"updatePoint":{"line":15,"column":39},"line":15,"code":"  it('returns configured implementation', () => {\n    configureSSR({\n      vsfRef: 'new-ref',\n      onSSR: 'new-on-ssr'\n    } as any);\n\n    expect(vsfRef).toEqual('new-ref');\n    expect(onSSR).toEqual('new-on-ssr');\n  });","file":"utils/configureSSR.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns configured implementation for onSSR","suites":["[CORE - utils] configureSSR"],"updatePoint":{"line":25,"column":49},"line":25,"code":"  it('returns configured implementation for onSSR', () => {\n    configureSSR({\n      onSSR: 'new-on-ssr-2'\n    } as any);\n\n    expect(vsfRef).toEqual('new-ref');\n    expect(onSSR).toEqual('new-on-ssr-2');\n  });","file":"utils/configureSSR.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns configured implementation for vsfRef","suites":["[CORE - utils] configureSSR"],"updatePoint":{"line":34,"column":50},"line":34,"code":"  it('returns configured implementation for vsfRef', () => {\n    configureSSR({\n      vsfRef: 'new-ref-2'\n    } as any);\n\n    expect(vsfRef).toEqual('new-ref-2');\n    expect(onSSR).toEqual('new-on-ssr-2');\n  });","file":"utils/configureSSR.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"useVSFContext returns {} by default","suites":["context"],"updatePoint":{"line":10,"column":41},"line":10,"code":"  it('useVSFContext returns {} by default', () => {\n    expect(useVSFContext()).toEqual({});\n  });","file":"utils/context.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"is possible to set useVSFContext with configureContext","suites":["context"],"updatePoint":{"line":14,"column":60},"line":14,"code":"  it('is possible to set useVSFContext with configureContext', () => {\n    const myFn = jest.fn((): Context => ({}));\n    configureContext({\n      useVSFContext: myFn\n    });\n\n    expect(myFn).toBe(useVSFContext);\n  });","file":"utils/context.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"configureContext uses fallback to current useVSFContext if not provided","suites":["context"],"updatePoint":{"line":23,"column":77},"line":23,"code":"  it('configureContext uses fallback to current useVSFContext if not provided', () => {\n    const myFn = jest.fn((): Context => ({}));\n\n    configureContext({\n      useVSFContext: myFn\n    });\n    configureContext({\n      useVSFContext: null\n    });\n\n    expect(myFn).toBe(useVSFContext);\n  });","file":"utils/context.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"generateContext returns useVSFContext().$vsf if setup not provided","suites":["context"],"updatePoint":{"line":36,"column":72},"line":36,"code":"  it('generateContext returns useVSFContext().$vsf if setup not provided', () => {\n    const myFn = jest.fn(\n      (): Context => ({\n        $vsf: 12345\n      })\n    );\n    configureContext({\n      useVSFContext: myFn\n    });\n\n    const generatedContext = generateContext({});\n\n    expect(generatedContext).toBe(12345);\n  });","file":"utils/context.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"generateContext adds value returned by factoryParams.setup() to generated context","suites":["context"],"updatePoint":{"line":51,"column":87},"line":51,"code":"  it('generateContext adds value returned by factoryParams.setup() to generated context', () => {\n    const vsfObject = {\n      a: 1\n    };\n    const factoryParams = {\n      provide() {\n        return {\n          b: 2,\n          c: 3\n        };\n      }\n    };\n    const myFn = jest.fn(\n      (): Context => ({\n        $vsf: vsfObject\n      })\n    );\n    configureContext({\n      useVSFContext: myFn\n    });\n\n    const generatedContext = generateContext(factoryParams);\n\n    expect(generatedContext).toEqual({\n      a: 1,\n      b: 2,\n      c: 3\n    });\n  });","file":"utils/context.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"create factory params","suites":["context"],"updatePoint":{"line":4,"column":27},"line":4,"code":"  it('create factory params', async () => {\n    const factoryParams = {\n      provide: () => ({ b: 2, c: 3 }),\n      testFn1: () => ({ b: 4, c: 5 }),\n      testFn2: () => ({ b: 6, c: 7 }),\n      api: {\n        platformFn1: (context, params) => params.name\n      }\n    };\n\n    const mainRef = { value: '' };\n    const loading = { value: '' };\n    const error = { value: '' };\n\n    const params = configureFactoryParams(\n      factoryParams,\n      { mainRef, alias: 'currentTest', loading, error }\n    );\n\n    expect(params).toEqual({\n      provide: expect.any(Function),\n      testFn1: expect.any(Function),\n      testFn2: expect.any(Function),\n      api: {\n        platformFn1: expect.any(Function)\n      }\n    });\n\n    expect(params.testFn1()).toEqual({ b: 4, c: 5 });\n    expect(params.testFn2()).toEqual({ b: 6, c: 7 });\n    await params.api.platformFn1({ name: 'test-param' });\n    expect(mainRef.value).toEqual('test-param');\n  });","file":"utils/factoryParams.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns redirect path for the first visit with not default locale accepted","suites":["i18n redirects util"],"updatePoint":{"line":12,"column":80},"line":12,"code":"  it('returns redirect path for the first visit with not default locale accepted', async () => {\n    const util = i18nRedirectsUtil(defaultParams);\n\n    expect(util.getRedirectPath()).toEqual('/de');\n  });","file":"utils/i18n-redirects.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns redirect path for the first visit with default locale accepted","suites":["i18n redirects util"],"updatePoint":{"line":18,"column":76},"line":18,"code":"  it('returns redirect path for the first visit with default locale accepted', async () => {\n    const util = i18nRedirectsUtil({\n      ...defaultParams,\n      acceptedLanguages: ['en']\n    });\n\n    expect(util.getRedirectPath()).toEqual('');\n  });","file":"utils/i18n-redirects.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns redirect path for page with default locale and with cookie set to other locale","suites":["i18n redirects util"],"updatePoint":{"line":27,"column":92},"line":27,"code":"  it('returns redirect path for page with default locale and with cookie set to other locale', async () => {\n    const util = i18nRedirectsUtil({\n      ...defaultParams,\n      cookieLocale: 'de'\n    });\n\n    expect(util.getRedirectPath()).toEqual('/de');\n  });","file":"utils/i18n-redirects.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns no redirect path for page with locale and with cookie set to other locale","suites":["i18n redirects util"],"updatePoint":{"line":36,"column":87},"line":36,"code":"  it('returns no redirect path for page with locale and with cookie set to other locale', async () => {\n    const util = i18nRedirectsUtil({\n      ...defaultParams,\n      path: '/de',\n      cookieLocale: 'en'\n    });\n\n    expect(util.getRedirectPath()).toEqual('');\n  });","file":"utils/i18n-redirects.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns no redirect for page with locale and without cookie with locale","suites":["i18n redirects util"],"updatePoint":{"line":46,"column":77},"line":46,"code":"  it('returns no redirect for page with locale and without cookie with locale', async () => {\n    const util = i18nRedirectsUtil({\n      ...defaultParams,\n      path: '/de'\n    });\n\n    expect(util.getRedirectPath()).toEqual('');\n  });","file":"utils/i18n-redirects.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns full redirect path properly","suites":["i18n redirects util"],"updatePoint":{"line":55,"column":41},"line":55,"code":"  it('returns full redirect path properly', async () => {\n    const path = '/c/men?foo=bar#foo';\n    const cookieLocale = 'de';\n    const util = i18nRedirectsUtil({\n      ...defaultParams,\n      path,\n      cookieLocale\n    });\n\n    expect(util.getRedirectPath()).toEqual(`/${cookieLocale}${path}`);\n  });","file":"utils/i18n-redirects.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns target locale based on path","suites":["i18n redirects util"],"updatePoint":{"line":67,"column":41},"line":67,"code":"  it('returns target locale based on path', async () => {\n    const util = i18nRedirectsUtil({\n      ...defaultParams,\n      path: '/de'\n    });\n\n    expect(util.getTargetLocale()).toEqual('de');\n  });","file":"utils/i18n-redirects.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns target locale based on cookie","suites":["i18n redirects util"],"updatePoint":{"line":76,"column":43},"line":76,"code":"  it('returns target locale based on cookie', async () => {\n    const util = i18nRedirectsUtil({\n      ...defaultParams,\n      cookieLocale: 'de'\n    });\n\n    expect(util.getTargetLocale()).toEqual('de');\n  });","file":"utils/i18n-redirects.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns target locale based on accepted languages","suites":["i18n redirects util"],"updatePoint":{"line":85,"column":55},"line":85,"code":"  it('returns target locale based on accepted languages', async () => {\n    const util = i18nRedirectsUtil({\n      ...defaultParams\n    });\n\n    expect(util.getTargetLocale()).toEqual('de');\n  });","file":"utils/i18n-redirects.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns default target locale","suites":["i18n redirects util"],"updatePoint":{"line":93,"column":35},"line":93,"code":"  it('returns default target locale', async () => {\n    const util = i18nRedirectsUtil({\n      ...defaultParams,\n      acceptedLanguages: ['es', 'en']\n    });\n\n    expect(util.getTargetLocale()).toEqual('en');\n  });","file":"utils/i18n-redirects.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"registers logger with info verbosity","suites":["[CORE - utils] registerLogger"],"updatePoint":{"line":16,"column":42},"line":16,"code":"  it('registers logger with info verbosity', () => {\n    registerLogger(testLogger, 'info');\n\n    expect(Logger.info()).toEqual('info');\n    expect(Logger.warn()).toEqual('warn');\n    expect(Logger.error()).toEqual('error');\n    expect(Logger.debug()).toEqual(undefined);\n  });","file":"utils/loggerFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"registers logger with debug verbosity","suites":["[CORE - utils] registerLogger"],"updatePoint":{"line":25,"column":43},"line":25,"code":"  it('registers logger with debug verbosity', () => {\n    registerLogger(testLogger, 'debug');\n\n    expect(Logger.info()).toEqual('info');\n    expect(Logger.warn()).toEqual('warn');\n    expect(Logger.error()).toEqual('error');\n    expect(Logger.debug()).toEqual('debug');\n  });","file":"utils/loggerFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"registers logger with warn verbosity","suites":["[CORE - utils] registerLogger"],"updatePoint":{"line":34,"column":42},"line":34,"code":"  it('registers logger with warn verbosity', () => {\n    registerLogger(testLogger, 'warn');\n\n    expect(Logger.info()).toEqual(undefined);\n    expect(Logger.warn()).toEqual('warn');\n    expect(Logger.error()).toEqual('error');\n    expect(Logger.debug()).toEqual(undefined);\n  });","file":"utils/loggerFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"registers logger with error verbosity","suites":["[CORE - utils] registerLogger"],"updatePoint":{"line":43,"column":43},"line":43,"code":"  it('registers logger with error verbosity', () => {\n    registerLogger(testLogger, 'error');\n\n    expect(Logger.info()).toEqual(undefined);\n    expect(Logger.warn()).toEqual(undefined);\n    expect(Logger.error()).toEqual('error');\n    expect(Logger.debug()).toEqual(undefined);\n  });","file":"utils/loggerFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"registers logger with none verbosity","suites":["[CORE - utils] registerLogger"],"updatePoint":{"line":52,"column":42},"line":52,"code":"  it('registers logger with none verbosity', () => {\n    registerLogger(testLogger, 'none');\n\n    expect(Logger.info()).toEqual(undefined);\n    expect(Logger.warn()).toEqual(undefined);\n    expect(Logger.error()).toEqual(undefined);\n    expect(Logger.debug()).toEqual(undefined);\n  });","file":"utils/loggerFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"registers custom logger","suites":["[CORE - utils] registerLogger"],"updatePoint":{"line":61,"column":29},"line":61,"code":"  it('registers custom logger', () => {\n    const logger = (verbosity) => ({\n      debug: () => verbosity + '-debug',\n      info: () => verbosity + '-info',\n      warn: () => verbosity + '-warn',\n      error: () => verbosity + '-error'\n    });\n    registerLogger(logger, 'custom-verbose');\n\n    expect(Logger.info()).toEqual('custom-verbose-info');\n    expect(Logger.warn()).toEqual('custom-verbose-warn');\n    expect(Logger.error()).toEqual('custom-verbose-error');\n    expect(Logger.debug()).toEqual('custom-verbose-debug');\n  });","file":"utils/loggerFactory.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"mask string","suites":["[CORE - utils] mask"],"updatePoint":{"line":9,"column":17},"line":9,"code":"  it('mask string', () => {\n    expect(mask('test string')).toEqual('t***g');\n  });","file":"utils/mask.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"mask array","suites":["[CORE - utils] mask"],"updatePoint":{"line":13,"column":16},"line":13,"code":"  it('mask array', () => {\n    expect(mask([])).toEqual('***');\n  });","file":"utils/mask.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"mask object","suites":["[CORE - utils] mask"],"updatePoint":{"line":17,"column":17},"line":17,"code":"  it('mask object', () => {\n    const obj = {\n      key1: 'test',\n      key2: 'lorem ipsum',\n      key3: {\n        key1: 'test'\n      },\n      key4: '1234'\n    };\n\n    expect(mask(obj)).toEqual({\n      key1: 't***t',\n      key2: 'l***m',\n      key3: '***',\n      key4: '1***4'\n    });\n  });","file":"utils/mask.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"extendContent injects vsf if not injected","suites":["createExtendIntegrationInCtx"],"updatePoint":{"line":4,"column":47},"line":4,"code":"  it('extendContent injects vsf if not injected', () => {\n    const tag = 'myIntegration';\n    const nuxtCtx = {\n      $vsf: {}\n    };\n    const inject = jest.fn();\n\n    const extendContext = createExtendIntegrationInCtx({\n      tag,\n      nuxtCtx,\n      inject\n    });\n\n    try {\n      extendContext({});\n    } catch (err) {\n      console.log('Prevent running rest of the function with exception');\n    }\n\n    expect(inject).toHaveBeenCalledWith('vsf', expect.objectContaining({\n      [`$${tag}`]: expect.any(Object)\n    }));\n  });","file":"utils/nuxt/createExtendContext.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"extendContent adds properties from props to the nuxtCtx.$vsf.$${tag}","suites":["createExtendIntegrationInCtx"],"updatePoint":{"line":28,"column":74},"line":28,"code":"  it('extendContent adds properties from props to the nuxtCtx.$vsf.$${tag}', () => {\n    const tag = 'myIntegration';\n    const nuxtCtx = {\n      $vsf: {\n        $myIntegration: {\n          client: 'client',\n          config: 'config'\n        }\n      }\n    };\n    const inject = jest.fn();\n\n    const extendContext = createExtendIntegrationInCtx({\n      tag,\n      nuxtCtx,\n      inject\n    });\n\n    extendContext({\n      testFieldToAdd: 15\n    });\n\n    expect((nuxtCtx.$vsf.$myIntegration as any).testFieldToAdd).toBe(15);\n  });","file":"utils/nuxt/createExtendContext.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"extendContent extends api with response from applyContextToApi","suites":["createExtendIntegrationInCtx"],"updatePoint":{"line":53,"column":68},"line":53,"code":"  it('extendContent extends api with response from applyContextToApi', () => {\n    const tag = 'myIntegration';\n    const nuxtCtx = {\n      $vsf: {\n        $myIntegration: {\n          client: 'client',\n          config: 'config'\n        }\n      }\n    };\n    const inject = jest.fn();\n\n    const extendContext = createExtendIntegrationInCtx({\n      tag,\n      nuxtCtx,\n      inject\n    });\n\n    extendContext({\n      testFieldToAdd: 15\n    });\n\n    expect((nuxtCtx.$vsf.$myIntegration as any).testFieldToAdd).toBe(15);\n  });","file":"utils/nuxt/createExtendContext.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"injectInContext uses inject if nuxtCtx.$vsf does not exist","suites":["createAddIntegrationToCtx"],"updatePoint":{"line":7,"column":64},"line":7,"code":"  it('injectInContext uses inject if nuxtCtx.$vsf does not exist', () => {\n    const tag = 'myIntegration';\n    const nuxtCtx = {};\n    const inject = jest.fn();\n\n    const injectInContext = createAddIntegrationToCtx({\n      tag,\n      nuxtCtx,\n      inject\n    });\n\n    injectInContext('props');\n\n    expect(inject).toHaveBeenCalledWith('vsf', expect.objectContaining({\n      [`$${tag}`]: 'props'\n    }));\n  });","file":"utils/nuxt/createInjectInContext.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"injectInContext adds property if property does not exist in nuxtCtx.$vsf","suites":["createAddIntegrationToCtx"],"updatePoint":{"line":25,"column":78},"line":25,"code":"  it('injectInContext adds property if property does not exist in nuxtCtx.$vsf', () => {\n    const tag = 'myIntegration';\n    const nuxtCtx = {\n      $vsf: {}\n    };\n    const inject = jest.fn();\n\n    const injectInContext = createAddIntegrationToCtx({\n      tag,\n      nuxtCtx,\n      inject\n    });\n\n    injectInContext('props');\n\n    expect(nuxtCtx.$vsf[`$${tag}`]).toBe('props');\n  });","file":"utils/nuxt/createInjectInContext.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"returns same instance","suites":["[CORE - utils] shared"],"updatePoint":{"line":12,"column":27},"line":12,"code":"  it('returns same instance', () => {\n    const someRef1 = sharedRef('test', 'test-key');\n    const someRef2 = sharedRef('test', 'test-key');\n    someRef1.value = 'test-update';\n\n    expect(someRef1).toEqual(someRef2);\n    expect(vsfRef).toBeCalledWith('test', 'test-key');\n  });","file":"utils/shared.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"different instances are not equal","suites":["[CORE - utils] shared"],"updatePoint":{"line":21,"column":39},"line":21,"code":"  it('different instances are not equal', () => {\n    const someRef1 = sharedRef('test', 'test-key1');\n    const someRef2 = sharedRef('test', 'test-key2');\n    someRef1.value = 'test-update';\n\n    expect(someRef1).not.toEqual(someRef2);\n    expect(vsfRef).toBeCalledWith('test', 'test-key1');\n    expect(vsfRef).toBeCalledWith('test', 'test-key2');\n\n  });","file":"utils/shared.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"get shared ref","suites":["[CORE - utils] shared"],"updatePoint":{"line":32,"column":20},"line":32,"code":"  it('get shared ref', () => {\n    const someRef1 = sharedRef('test', 'test-key3');\n    const someRef2 = sharedRef('test-key3');\n    someRef1.value = 'test-update-3';\n\n    expect(someRef1).toEqual(someRef2);\n    expect(vsfRef).toBeCalledWith('test', 'test-key3');\n    expect(vsfRef).toBeCalledWith('test', 'test-key3');\n  });","file":"utils/shared.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"assign a value when ref does not exist","suites":["[CORE - utils] shared"],"updatePoint":{"line":42,"column":44},"line":42,"code":"  it('assign a value when ref does not exist', () => {\n    const someRef1 = sharedRef('no-exist-key');\n    someRef1.value = 'no-exist-update';\n\n    expect(someRef1.value).toEqual('no-exist-update');\n    expect(vsfRef).toBeCalledWith(null, 'no-exist-key');\n\n    const someRef2 = sharedRef('no-exist-key');\n    expect(someRef1).toEqual(someRef2);\n  });","file":"utils/shared.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should return ref when passed ref","suites":["[CORE utils] wrap"],"updatePoint":{"line":5,"column":39},"line":5,"code":"  it('should return ref when passed ref', () => {\n    const element = ref('test-value');\n    const unwrappedValue = wrap(element);\n    expect(unwrappedValue.value).toBe('test-value');\n  });","file":"utils/wrap.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"},{"name":"should return ref when passed value","suites":["[CORE utils] wrap"],"updatePoint":{"line":10,"column":41},"line":10,"code":"  it('should return ref when passed value', () => {\n    const element = 'test-value';\n    const unwrappedValue = wrap(element);\n    expect(unwrappedValue.value).toBe('test-value');\n  });","file":"utils/wrap.spec.ts","skipped":false,"dir":"packages/core/core/__tests__"}]}